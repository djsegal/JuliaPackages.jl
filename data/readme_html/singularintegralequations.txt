<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-singularintegralequationsjl" class="anchor" aria-hidden="true" href="#singularintegralequationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SingularIntegralEquations.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaApproximation/SingularIntegralEquations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a6c0b53a46ca4fce02b57d608d2da9c0cfe3279741f99d3d2dfb7c407ea999e/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417070726f78696d6174696f6e2f53696e67756c6172496e74656772616c4571756174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaApproximation/SingularIntegralEquations.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">An experimental Julia package for solving singular integral equations.</p>
<h1 dir="auto"><a id="user-content-acoustic-scattering" class="anchor" aria-hidden="true" href="#acoustic-scattering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acoustic Scattering</h1>
<p dir="auto"><a href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/blob/master/examples/HelmholtzDirichlet.jl">HelmholtzDirichlet.jl</a> and <a href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/blob/master/examples/HelmholtzNeumann.jl">HelmholtzNeumann.jl</a> calculate the solution to the Helmholtz equation with Dirichlet and Neumann boundary conditions. The essential lines of code are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="k = 50 # Set wavenumber and fundamental solution for Helmholtz equation
g1 = (x,y) -&gt; -besselj0(k*abs(y-x))/2
g2 = (x,y) -&gt; x == y ? -(log(k/2)+γ)/2/π + im/4 : im/4*hankelh1(0,k*abs(y-x)) - g1(x,y).*logabs(y-x)/π

ui = (x,y) -&gt; exp(im*k*(x-y)/sqrt(2))    # Incident plane wave at 45°

dom = ChebyshevInterval()                     # Set the domain
sp = Space(dom)                      # Canonical space on the domain
⨍ = DefiniteLineIntegral(dom)        # Line integration functional
uiΓ = Fun(t-&gt;ui(real(t),imag(t)),sp) # Incident wave on Γ

# Instantiate the fundamental solution
G = GreensFun(g1,CauchyWeight(sp⊗sp,0)) + GreensFun(g2,sp⊗sp)

# Solve for the density
∂u∂n = ⨍[G]\uiΓ

# What is the forward error?
norm(⨍[G]*∂u∂n-uiΓ)

# Represent the scattered field
us = (x,y) -&gt; -logkernel(g1,∂u∂n,complex(x,y))-linesum(g2,∂u∂n,complex(x,y))"><pre>k <span class="pl-k">=</span> <span class="pl-c1">50</span> <span class="pl-c"><span class="pl-c">#</span> Set wavenumber and fundamental solution for Helmholtz equation</span>
g1 <span class="pl-k">=</span> (x,y) <span class="pl-k">-&gt;</span> <span class="pl-k">-</span><span class="pl-c1">besselj0</span>(k<span class="pl-k">*</span><span class="pl-c1">abs</span>(y<span class="pl-k">-</span>x))<span class="pl-k">/</span><span class="pl-c1">2</span>
g2 <span class="pl-k">=</span> (x,y) <span class="pl-k">-&gt;</span> x <span class="pl-k">==</span> y <span class="pl-k">?</span> <span class="pl-k">-</span>(<span class="pl-c1">log</span>(k<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span>γ)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">/</span>π <span class="pl-k">+</span> im<span class="pl-k">/</span><span class="pl-c1">4</span> <span class="pl-k">:</span> im<span class="pl-k">/</span><span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">hankelh1</span>(<span class="pl-c1">0</span>,k<span class="pl-k">*</span><span class="pl-c1">abs</span>(y<span class="pl-k">-</span>x)) <span class="pl-k">-</span> <span class="pl-c1">g1</span>(x,y)<span class="pl-k">.*</span><span class="pl-c1">logabs</span>(y<span class="pl-k">-</span>x)<span class="pl-k">/</span>π

ui <span class="pl-k">=</span> (x,y) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>k<span class="pl-k">*</span>(x<span class="pl-k">-</span>y)<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>))    <span class="pl-c"><span class="pl-c">#</span> Incident plane wave at 45°</span>

dom <span class="pl-k">=</span> <span class="pl-c1">ChebyshevInterval</span>()                     <span class="pl-c"><span class="pl-c">#</span> Set the domain</span>
sp <span class="pl-k">=</span> <span class="pl-c1">Space</span>(dom)                      <span class="pl-c"><span class="pl-c">#</span> Canonical space on the domain</span>
⨍ <span class="pl-k">=</span> <span class="pl-c1">DefiniteLineIntegral</span>(dom)        <span class="pl-c"><span class="pl-c">#</span> Line integration functional</span>
uiΓ <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(t<span class="pl-k">-&gt;</span><span class="pl-c1">ui</span>(<span class="pl-c1">real</span>(t),<span class="pl-c1">imag</span>(t)),sp) <span class="pl-c"><span class="pl-c">#</span> Incident wave on Γ</span>

<span class="pl-c"><span class="pl-c">#</span> Instantiate the fundamental solution</span>
G <span class="pl-k">=</span> <span class="pl-c1">GreensFun</span>(g1,<span class="pl-c1">CauchyWeight</span>(sp⊗sp,<span class="pl-c1">0</span>)) <span class="pl-k">+</span> <span class="pl-c1">GreensFun</span>(g2,sp⊗sp)

<span class="pl-c"><span class="pl-c">#</span> Solve for the density</span>
∂u∂n <span class="pl-k">=</span> ⨍[G]<span class="pl-k">\</span>uiΓ

<span class="pl-c"><span class="pl-c">#</span> What is the forward error?</span>
<span class="pl-c1">norm</span>(⨍[G]<span class="pl-k">*</span>∂u∂n<span class="pl-k">-</span>uiΓ)

<span class="pl-c"><span class="pl-c">#</span> Represent the scattered field</span>
us <span class="pl-k">=</span> (x,y) <span class="pl-k">-&gt;</span> <span class="pl-k">-</span><span class="pl-c1">logkernel</span>(g1,∂u∂n,<span class="pl-c1">complex</span>(x,y))<span class="pl-k">-</span><span class="pl-c1">linesum</span>(g2,∂u∂n,<span class="pl-c1">complex</span>(x,y))</pre></div>
<p dir="auto">Here is an example with 10 sources at the roots of unity scaled by 2 and scattered by multiple disjoint intervals and circles.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/raw/master/images/Helmholtz.gif"><img src="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/raw/master/images/Helmholtz.gif" alt="Helmholtz Scattering" data-animated-image="" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/blob/master/examples/GravityHelmholtz.jl">GravityHelmholtz.jl</a> calculates the solution to the gravity Helmholtz equation with Dirichlet boundary conditions.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/raw/master/images/GravityHelmholtz.gif"><img src="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/raw/master/images/GravityHelmholtz.gif" alt="Gravity Helmholtz Scattering" data-animated-image="" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-the-faraday-cage" class="anchor" aria-hidden="true" href="#the-faraday-cage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Faraday Cage</h1>
<p dir="auto"><a href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/blob/master/examples/Laplace.jl">Laplace.jl</a> calculates the solution to the Laplace equation with the origin shielded by infinitesimal plates centred at the Nth roots of unity. The essential lines of code are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ui = (x,y) -&gt; logabs(complex(x,y)-2)     # Single source at (2,0) of strength 2π

N,r = 10,1e-1
cr = exp.(im*2π*(0:N-1)/N)
crl,crr = (1-2im*r)cr,(1+2im*r)cr
dom = ∪(Segment.(crl,crr))            # Set the shielding domain

sp = Space(dom)                      # Canonical space on the domain
⨍ = DefiniteLineIntegral(dom)        # Line integration functional
uiΓ = Fun(t-&gt;ui(real(t),imag(t)),sp) # Action of source on shields

# Instantiate the fundamental solution
G = GreensFun((x,y)-&gt;0.5,CauchyWeight(sp⊗sp,0))

# The first column augments the system for global unknown constant charge φ0
# The first row ensure constant charge φ0 on all plates
φ0,∂u∂n=[0 ⨍;1 ⨍[G]]\[0.;uiΓ]

# Represent the scattered field
us = (x,y) -&gt; -logkernel(∂u∂n,complex(x,y))/2"><pre>ui <span class="pl-k">=</span> (x,y) <span class="pl-k">-&gt;</span> <span class="pl-c1">logabs</span>(<span class="pl-c1">complex</span>(x,y)<span class="pl-k">-</span><span class="pl-c1">2</span>)     <span class="pl-c"><span class="pl-c">#</span> Single source at (2,0) of strength 2π</span>

N,r <span class="pl-k">=</span> <span class="pl-c1">10</span>,<span class="pl-c1">1e-1</span>
cr <span class="pl-k">=</span> <span class="pl-c1">exp</span>.(im<span class="pl-k">*</span><span class="pl-c1">2</span>π<span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>N)
crl,crr <span class="pl-k">=</span> (<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">2im</span><span class="pl-k">*</span>r)cr,(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span><span class="pl-k">*</span>r)cr
dom <span class="pl-k">=</span> <span class="pl-k">∪</span>(<span class="pl-c1">Segment</span>.(crl,crr))            <span class="pl-c"><span class="pl-c">#</span> Set the shielding domain</span>

sp <span class="pl-k">=</span> <span class="pl-c1">Space</span>(dom)                      <span class="pl-c"><span class="pl-c">#</span> Canonical space on the domain</span>
⨍ <span class="pl-k">=</span> <span class="pl-c1">DefiniteLineIntegral</span>(dom)        <span class="pl-c"><span class="pl-c">#</span> Line integration functional</span>
uiΓ <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(t<span class="pl-k">-&gt;</span><span class="pl-c1">ui</span>(<span class="pl-c1">real</span>(t),<span class="pl-c1">imag</span>(t)),sp) <span class="pl-c"><span class="pl-c">#</span> Action of source on shields</span>

<span class="pl-c"><span class="pl-c">#</span> Instantiate the fundamental solution</span>
G <span class="pl-k">=</span> <span class="pl-c1">GreensFun</span>((x,y)<span class="pl-k">-&gt;</span><span class="pl-c1">0.5</span>,<span class="pl-c1">CauchyWeight</span>(sp⊗sp,<span class="pl-c1">0</span>))

<span class="pl-c"><span class="pl-c">#</span> The first column augments the system for global unknown constant charge φ0</span>
<span class="pl-c"><span class="pl-c">#</span> The first row ensure constant charge φ0 on all plates</span>
φ0,∂u∂n<span class="pl-k">=</span>[<span class="pl-c1">0</span> ⨍;<span class="pl-c1">1</span> ⨍[G]]<span class="pl-k">\</span>[<span class="pl-c1">0.</span>;uiΓ]

<span class="pl-c"><span class="pl-c">#</span> Represent the scattered field</span>
us <span class="pl-k">=</span> (x,y) <span class="pl-k">-&gt;</span> <span class="pl-k">-</span><span class="pl-c1">logkernel</span>(∂u∂n,<span class="pl-c1">complex</span>(x,y))<span class="pl-k">/</span><span class="pl-c1">2</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/raw/master/images/FaradayCage.png"><img src="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/raw/master/images/FaradayCage.png" alt="Faraday Cage" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-riemannhilbert-problems" class="anchor" aria-hidden="true" href="#riemannhilbert-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Riemann–Hilbert Problems</h1>
<p dir="auto">SingularIntegralEquations.jl has support for Riemann–Hilbert problems and Wiener–Hopf factorizations.  <a href="https://github.com/JuliaApproximation/SingularIntegralEquations.jl/blob/master/examples/Wiener-Hopf.jl">Wiener-Hopf.jl</a> uses the Winer–Hopf factorization to calculate the UL decomposition of a scalar and a block Toeplitz operator.  The essential lines of code in the matrix case are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="G=Fun(z-&gt;[-1 -3; -3 -1]/z +
         [ 2  2;  1 -3] +
         [ 2 -1;  1  2]*z,Circle())

C  = Cauchy(-1)
V  = (I+(I-G)*C)\(G-I)

L  = ToeplitzOperator(inv(I+C*V))
U  = ToeplitzOperator(I+V+C*V)"><pre>G<span class="pl-k">=</span><span class="pl-c1">Fun</span>(z<span class="pl-k">-&gt;</span>[<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">3</span>; <span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">/</span>z <span class="pl-k">+</span>
         [ <span class="pl-c1">2</span>  <span class="pl-c1">2</span>;  <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">3</span>] <span class="pl-k">+</span>
         [ <span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;  <span class="pl-c1">1</span>  <span class="pl-c1">2</span>]<span class="pl-k">*</span>z,<span class="pl-c1">Circle</span>())

C  <span class="pl-k">=</span> <span class="pl-c1">Cauchy</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
V  <span class="pl-k">=</span> (I<span class="pl-k">+</span>(I<span class="pl-k">-</span>G)<span class="pl-k">*</span>C)<span class="pl-k">\</span>(G<span class="pl-k">-</span>I)

L  <span class="pl-k">=</span> <span class="pl-c1">ToeplitzOperator</span>(<span class="pl-c1">inv</span>(I<span class="pl-k">+</span>C<span class="pl-k">*</span>V))
U  <span class="pl-k">=</span> <span class="pl-c1">ToeplitzOperator</span>(I<span class="pl-k">+</span>V<span class="pl-k">+</span>C<span class="pl-k">*</span>V)</pre></div>
<h1 dir="auto"><a id="user-content-nonlocal-diffusion" class="anchor" aria-hidden="true" href="#nonlocal-diffusion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nonlocal Diffusion</h1>
<p dir="auto">Construct the nonlocal Laplacian acting on Fourier series by computing the spectrum on-the-fly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="α = 2.5 # ∈ [0, d+2), where d is the number of dimensions
        # α is the strength of the singularity of the algebraic kernel
δ = 0.1 # the horizon of the nonlocal integral operator
L = NonlocalLaplacian(Fourier(), α, δ)"><pre>α <span class="pl-k">=</span> <span class="pl-c1">2.5</span> <span class="pl-c"><span class="pl-c">#</span> ∈ [0, d+2), where d is the number of dimensions</span>
        <span class="pl-c"><span class="pl-c">#</span> α is the strength of the singularity of the algebraic kernel</span>
δ <span class="pl-k">=</span> <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> the horizon of the nonlocal integral operator</span>
L <span class="pl-k">=</span> <span class="pl-c1">NonlocalLaplacian</span>(<span class="pl-c1">Fourier</span>(), α, δ)</pre></div>
<p dir="auto">Afterward, you are free to treat it as any other banded (diagonal) operator.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">R. M. Slevinsky &amp; S. Olver, <a href="http://dx.doi.org/10.1016/j.jcp.2016.12.009" rel="nofollow">A fast and well-conditioned spectral method for singular integral equations</a>, <em>J. Comp. Phys.</em>, <strong>332</strong>:290--315, 2017.</p>
<p dir="auto">Y. Li &amp; R. M. Slevinsky. <a href="https://arxiv.org/abs/1810.07131" rel="nofollow">Fast and accurate algorithms for the computation of spherically symmetric nonlocal diffusion operators on lattices</a>, arXiv:1810.07131, 2018.</p>
</article></div>