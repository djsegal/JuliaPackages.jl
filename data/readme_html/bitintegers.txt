<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bitintegers" class="anchor" aria-hidden="true" href="#bitintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BitIntegers</h1>
<p><a href="https://travis-ci.org/rfourquet/BitIntegers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cfc58853643868012d4817b9709734368b6d7acb796599355938c565ac693266/68747470733a2f2f7472617669732d63692e6f72672f72666f7572717565742f426974496e7465676572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rfourquet/BitIntegers.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package implements fixed-width integer types similar to standard builtin-ones like <code>Int</code> or <code>UInt128</code>.
The following types, with obvious meaning, are exported: <code>Int256</code>, <code>UInt256</code>, <code>Int512</code>, <code>UInt512</code>, <code>Int1024</code>, <code>UInt1024</code>;
they come with string macros to construct them (like for <code>Int128</code> and <code>UInt128</code>), e.g. <code>int256"123"</code>.
It's possible to instantiate a new pair of types with the non-exported <code>@define_integers</code> macro:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; BitIntegers.@define_integers 24

julia&gt; UInt24(1), Int24(2)
(0x000001, 2)

julia&gt; BitIntegers.@define_integers 8 MyInt8 MyUInt8

julia&gt; MyUInt8(1)
0x01

julia&gt; myint8&quot;123&quot; # the string macro is named like the type, in lower case
123
"><pre>julia<span class="pl-k">&gt;</span> BitIntegers<span class="pl-k">.</span><span class="pl-c1">@define_integers</span> <span class="pl-c1">24</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UInt24</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Int24</span>(<span class="pl-c1">2</span>)
(<span class="pl-c1">0x000001</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> BitIntegers<span class="pl-k">.</span><span class="pl-c1">@define_integers</span> <span class="pl-c1">8</span> MyInt8 MyUInt8

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyUInt8</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">0x01</span>

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">myint8</span>"</span>123<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> the string macro is named like the type, in lower case</span>
<span class="pl-c1">123</span></pre></div>
<p>Enough functions have been implemented to make those numbers a bit useful, but many more are missing.
Issues and PRs are welcome :)</p>
<p>I expected to implement this using tuples, but it turned out that using <code>primitive type</code> was a huge
win: many basic functions were already available for free via the use of intrinsics! (which tap
into already implemented features in LLVM).
The caveat is that I have no idea whether how it is used here is legal: for example, it seems possible
to call <code>Primes.factor(rand(Int256))</code> without a problem, but <code>Primes.factor(rand(UInt256))</code> will
make LLVM abort the program, in a way that I'm unable to debug so far.</p>
<p>There are another couple of outstanding issues:</p>
<ol>
<li>
<p>the intrinsics for division operations make LLVM fail (at least for widths greater than 128 bits),
so they are here implemented via conversion to <code>BigInt</code> first, which makes them quite slow
(but a patch to Julia is on the way to accelerate that).
What is quite surprising is that the intrinsics seem to work when not wrapped in another function!
So if speed is paramount and you don't need checked operations, you can use <code>Base.sdiv_int</code> instead
of <code>div</code> for example;</p>
</li>
<li>
<p>prior to Julia version 1.2: for some reason, importing this code invalidates many precompiled
functions from <code>Base</code>, so the REPL experience becomes very annoyingly slow until functions get
recompiled (fixed by <a href="https://github.com/JuliaLang/julia/pull/30830">https://github.com/JuliaLang/julia/pull/30830</a>);</p>
</li>
<li>
<p>prior to Julia version 1.4: creating arrays of types of size not a power of two easily leads
to errors and segfaults (cf. e.g. <a href="https://github.com/rfourquet/BitIntegers.jl/issues/1">https://github.com/rfourquet/BitIntegers.jl/issues/1</a>, fixed by <a href="https://github.com/JuliaLang/julia/pull/33283">https://github.com/JuliaLang/julia/pull/33283</a>).</p>
</li>
</ol>
</article></div>