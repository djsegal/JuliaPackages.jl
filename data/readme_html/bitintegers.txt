<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bitintegers" class="anchor" aria-hidden="true" href="#bitintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BitIntegers</h1>
<p dir="auto"><a href="https://github.com/rfourquet/BitIntegers.jl/actions?query=workflow%3ACI"><img src="https://github.com/rfourquet/BitIntegers.jl/workflows/CI/badge.svg" alt="Tests Status" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements fixed-width integer types similar to standard builtin-ones like <code>Int</code> or <code>UInt128</code>.
The following types, with obvious meaning, are exported: <code>Int256</code>, <code>UInt256</code>, <code>Int512</code>, <code>UInt512</code>, <code>Int1024</code>, <code>UInt1024</code>;
they come with string macros to construct them (like for <code>Int128</code> and <code>UInt128</code>), e.g. <code>int256"123"</code>.
It's possible to instantiate a new pair of types with the exported <code>@define_integers</code> macro:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; BitIntegers.@define_integers 24

julia&gt; UInt24(1), Int24(2)
(0x000001, 2)

julia&gt; BitIntegers.@define_integers 8 MyInt8 MyUInt8

julia&gt; MyUInt8(1)
0x01

julia&gt; myint8&quot;123&quot; # the string macro is named like the type, in lower case
123"><pre>julia<span class="pl-k">&gt;</span> BitIntegers<span class="pl-k">.</span><span class="pl-c1">@define_integers</span> <span class="pl-c1">24</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UInt24</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Int24</span>(<span class="pl-c1">2</span>)
(<span class="pl-c1">0x000001</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> BitIntegers<span class="pl-k">.</span><span class="pl-c1">@define_integers</span> <span class="pl-c1">8</span> MyInt8 MyUInt8

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyUInt8</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">0x01</span>

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">myint8</span>"</span>123<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> the string macro is named like the type, in lower case</span>
<span class="pl-c1">123</span></pre></div>
<p dir="auto">This is implemented using <code>primitive type</code> and julia intrinsics, the caveat being that it might
not always be legal (e.g. in some julia versions, <code>Primes.factor(rand(UInt256))</code> used to
make LLVM abort the program, while it was fine for <code>Int256</code>).</p>
<p dir="auto">There are another couple of outstanding issues:</p>
<ol dir="auto">
<li>
<p dir="auto">the intrinsics for division operations used to make LLVM fail for widths greater than 128 bits,
so they are here implemented via conversion to <code>BigInt</code> first, which makes them quite slow;
it got slightly better in recent julia (nightly pre-1.10), where it prints
<code>JIT session error: Symbols not found: [ __divei4 ]</code> but at least doesn't abort.</p>
</li>
<li>
<p dir="auto">prior to Julia version 1.2: for some reason, importing this code invalidates many precompiled
functions from <code>Base</code>, so the REPL experience becomes very annoyingly slow until functions get
recompiled (fixed by <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="402922717" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/30830" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/30830/hovercard" href="https://github.com/JuliaLang/julia/pull/30830">JuliaLang/julia#30830</a>);</p>
</li>
<li>
<p dir="auto">prior to Julia version 1.4: creating arrays of types of size not a power of two easily leads
to errors and segfaults (cf. e.g. <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="367414172" data-permission-text="Title is private" data-url="https://github.com/rfourquet/BitIntegers.jl/issues/1" data-hovercard-type="issue" data-hovercard-url="/rfourquet/BitIntegers.jl/issues/1/hovercard" href="https://github.com/rfourquet/BitIntegers.jl/issues/1">#1</a>, fixed by
<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="494245429" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/33283" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/33283/hovercard" href="https://github.com/JuliaLang/julia/pull/33283">JuliaLang/julia#33283</a>).</p>
</li>
</ol>
</article></div>