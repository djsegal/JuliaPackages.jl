<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/MasonProtter/Currier.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b4c9ee1957fd5081a5ef16aae989cf605ed1cf58/68747470733a2f2f7472617669732d63692e636f6d2f4d61736f6e50726f747465722f437572726965722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MasonProtter/Currier.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-currierjl" class="anchor" aria-hidden="true" href="#currierjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Currier.jl</h1>
<p>Julia's multiple dispatch offers a lot of expressive power which is a strict superset of things like currying in Haskell.
However, sometimes it's convenient to have currying and one doesn't want to write out the methods themselves. Enter Currier.jl</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Currier

<span class="pl-c1">@curried</span> <span class="pl-en">foo</span>(x, y, z) <span class="pl-k">=</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span>z<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>)
<span class="pl-c1">0.35714285714285715</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">0.35714285714285715</span></pre></div>
<p>Here's the (cleaned up) output code from applying <code>@curried</code> to our definition of <code>foo</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand</span> <span class="pl-c1">@curried</span> <span class="pl-en">foo</span>(x, y, z) <span class="pl-k">=</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span>z<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-k">quote</span>
    <span class="pl-k">begin</span>
        <span class="pl-k">function</span> <span class="pl-en">foo</span>(args<span class="pl-k">...</span>)
            <span class="pl-k">if</span> <span class="pl-c1">length</span>(args) <span class="pl-k">&lt;</span> <span class="pl-c1">3</span>
                x<span class="pl-k">-&gt;</span> <span class="pl-c1">foo</span>((args<span class="pl-k">...</span>, x)<span class="pl-k">...</span>)
            <span class="pl-k">elseif</span> <span class="pl-c1">length</span>(args) <span class="pl-k">==</span> <span class="pl-c1">3</span>
                <span class="pl-c1">foo</span>(Currier<span class="pl-k">.</span><span class="pl-c1">FullyCurried</span>(), args<span class="pl-k">...</span>)
            <span class="pl-k">else</span>
                <span class="pl-c1">throw</span>(<span class="pl-s"><span class="pl-pds">"</span>Too many arguments. Function foo only takes 3 arguments<span class="pl-pds">"</span></span>)
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
        <span class="pl-en">foo</span>(<span class="pl-k">::</span><span class="pl-c1">Currier.FullyCurried</span>, x, y, z) <span class="pl-k">=</span> (x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> y <span class="pl-k">^</span> <span class="pl-c1">2</span>) <span class="pl-k">/</span> (x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> y <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> z <span class="pl-k">^</span> <span class="pl-c1">2</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<hr>
<p>We also have a <em>reverse</em> currying macro</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@reverse_curried</span> <span class="pl-en">bar</span>(x, y, z) <span class="pl-k">=</span> (x, y, z)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bar</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>) <span class="pl-k">==</span> <span class="pl-c1">bar</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">true</span></pre></div>
</article></div>