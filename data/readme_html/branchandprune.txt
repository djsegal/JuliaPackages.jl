<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-branchandprunejl" class="anchor" aria-hidden="true" href="#branchandprunejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BranchAndPrune.jl</h1>
<p dir="auto">This package aims at providing an interface for branch and prune search in Julia.</p>
<h2 dir="auto"><a id="user-content-branch-and-prune" class="anchor" aria-hidden="true" href="#branch-and-prune"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Branch and prune</h2>
<p dir="auto">A branch and prune algorithm has the following general structure:</p>
<ol dir="auto">
<li>Consider one region of the search space.</li>
<li>Determine status of this search region, with three possible outcomes:
<ol dir="auto">
<li>The region does not contain anything of interest. In this case discard the region (<em>prune</em> it).</li>
<li>The region is in a state that does not require further processing (for example a given tolerance has been met). In this case it is stored.</li>
<li>None of the above. In this case, the region is bisected and each of the subregions created is added to the pool of regions to be considered (creating new <em>branches</em> for the search).</li>
</ol>
</li>
<li>Go back to 1.</li>
</ol>
<p dir="auto">Also this was developped to meet the need of the <a href="https://github.com/JuliaIntervals/IntervalRootFinding.jl"><code>IntervalRootFinding.jl</code></a> package, and as such it constitutes a concrete example of possible usage.</p>
<h2 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage example</h2>
<p dir="auto">As an example we are looking for zero of monotonic functions, <code>f(x) = 0</code>.</p>
<p dir="auto">We work with tuple of numbers <code>(a, b)</code> to represent intervals.</p>
<p dir="auto">First we define the <code>process</code> function. The logic is as follow</p>
<ul dir="auto">
<li>if the image of both side of the interval have the same sign, then the interval does not contain a solution (since <code>f</code> is monotonic) and we discard the interval.</li>
<li>if the size of the interval is small enough, we store it.</li>
<li>otherwise, we bisect it.</li>
</ul>
<p dir="auto">In all cases, we do not modify the interval when processing it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BranchAndPrune

function process(f, (a, b), tol = 1e-8)
    ya = f(a)
    yb = f(b)
    # If both have the same sign their product is positive
    if ya * yb &gt; 0
        return :prune, (a, b)
    elseif b - a &lt; tol
        return :store, (a, b)
    else
        return :branch, (a, b)
    end
end"><pre><span class="pl-k">using</span> BranchAndPrune

<span class="pl-k">function</span> <span class="pl-en">process</span>(f, (a, b), tol <span class="pl-k">=</span> <span class="pl-c1">1e-8</span>)
    ya <span class="pl-k">=</span> <span class="pl-c1">f</span>(a)
    yb <span class="pl-k">=</span> <span class="pl-c1">f</span>(b)
    <span class="pl-c"><span class="pl-c">#</span> If both have the same sign their product is positive</span>
    <span class="pl-k">if</span> ya <span class="pl-k">*</span> yb <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
        <span class="pl-k">return</span> <span class="pl-c1">:prune</span>, (a, b)
    <span class="pl-k">elseif</span> b <span class="pl-k">-</span> a <span class="pl-k">&lt;</span> tol
        <span class="pl-k">return</span> <span class="pl-c1">:store</span>, (a, b)
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> <span class="pl-c1">:branch</span>, (a, b)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Then we define how an interval is bisected.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function bisect((a, b))
    m = (a + b)/2  # The midpoint
    return (a, m), (m, b)
end"><pre><span class="pl-k">function</span> <span class="pl-en">bisect</span>((a, b))
    m <span class="pl-k">=</span> (a <span class="pl-k">+</span> b)<span class="pl-k">/</span><span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> The midpoint</span>
    <span class="pl-k">return</span> (a, m), (m, b)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Note the difference between <code>process</code> and <code>bisect</code>. <code>bisect</code> only act on the search regions, independantly of the problem we are trying to solve, while <code>process</code> is responsible for everything related to actually solving the problem (by looking at the behavior of <code>f</code> in the example).</p>
<p dir="auto">Finally we perform the search, by defining the function of interest and the search object, and passing it to <code>bpsearch</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x) = x/3 + 5  # Exact solution is -15
search = BranchAndPruneSearch(BreadthFirst, X -&gt; process(f, X), bisect, (-30.0, 20.0))
bpsearch(search)"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">/</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>  <span class="pl-c"><span class="pl-c">#</span> Exact solution is -15</span>
search <span class="pl-k">=</span> <span class="pl-c1">BranchAndPruneSearch</span>(BreadthFirst, X <span class="pl-k">-&gt;</span> <span class="pl-c1">process</span>(f, X), bisect, (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-c1">20.0</span>))
<span class="pl-c1">bpsearch</span>(search)</pre></div>
<p dir="auto">Returning a correct enclosure of the solution</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BranchAndPruneResult
 converged: true
 initial region: (-30.0, 20.0)
 final regions:
  (-15.00000000349246, -14.999999997671694)"><pre class="notranslate"><code>BranchAndPruneResult
 converged: true
 initial region: (-30.0, 20.0)
 final regions:
  (-15.00000000349246, -14.999999997671694)
</code></pre></div>
<p dir="auto">Using a callback it is possible to stop the iteration early</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sol = bpsearch(search ; callback = state -&gt; state.iteration &gt;= 10)"><pre>sol <span class="pl-k">=</span> <span class="pl-c1">bpsearch</span>(search ; callback <span class="pl-k">=</span> state <span class="pl-k">-&gt;</span> state<span class="pl-k">.</span>iteration <span class="pl-k">&gt;=</span> <span class="pl-c1">10</span>)</pre></div>
<p dir="auto">In this case no region hit the finalized state, and the search is considered unconverged.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sol = bpsearch(search ; callback = state -&gt; state.iteration &gt;= 25)
BranchAndPruneResult
 converged: false
 initial region: (-30.0, 20.0)
 final regions:

 unfinished regions:
  (-15.009765625, -15.003662109375)
  (-15.003662109375, -14.99755859375)
  (-14.99755859375, -14.9853515625)"><pre>julia<span class="pl-k">&gt;</span> sol <span class="pl-k">=</span> <span class="pl-c1">bpsearch</span>(search ; callback <span class="pl-k">=</span> state <span class="pl-k">-&gt;</span> state<span class="pl-k">.</span>iteration <span class="pl-k">&gt;=</span> <span class="pl-c1">25</span>)
BranchAndPruneResult
 converged<span class="pl-k">:</span> <span class="pl-c1">false</span>
 initial region<span class="pl-k">:</span> (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-c1">20.0</span>)
 final regions<span class="pl-k">:</span>

 unfinished regions<span class="pl-k">:</span>
  (<span class="pl-k">-</span><span class="pl-c1">15.009765625</span>, <span class="pl-k">-</span><span class="pl-c1">15.003662109375</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.003662109375</span>, <span class="pl-k">-</span><span class="pl-c1">14.99755859375</span>)
  (<span class="pl-k">-</span><span class="pl-c1">14.99755859375</span>, <span class="pl-k">-</span><span class="pl-c1">14.9853515625</span>)</pre></div>
<p dir="auto">The tree representing the current state of the search can be examined.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sol.tree
Branching
├─ Branching
│  ├─ (:working, (-15.009765625, -15.003662109375))
│  └─ (:working, (-15.003662109375, -14.99755859375))
└─ (:working, (-14.99755859375, -14.9853515625))"><pre>julia<span class="pl-k">&gt;</span> sol<span class="pl-k">.</span>tree
Branching
├─ Branching
│  ├─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">15.009765625</span>, <span class="pl-k">-</span><span class="pl-c1">15.003662109375</span>))
│  └─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">15.003662109375</span>, <span class="pl-k">-</span><span class="pl-c1">14.99755859375</span>))
└─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">14.99755859375</span>, <span class="pl-k">-</span><span class="pl-c1">14.9853515625</span>))</pre></div>
<p dir="auto">Using a <code>DepthFirst</code> order instead, we see a different intermediate result and tree.
As expected, using a depth first search produces a much deeper tree.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; search = BranchAndPruneSearch(DepthFirst, X -&gt; process(f, X), bisect, (-30.0, 20.0))
BranchAndPruneSearch{DepthFirst, Tuple{Float64, Float64}, var&quot;#91#92&quot;, typeof(bisect)}(var&quot;#91#92&quot;(), bisect, (-30.0, 20.0))

julia&gt; sol = bpsearch(search ; callback = state -&gt; state.iteration &gt;= 25)
BranchAndPruneResult
 converged: false
 initial region: (-30.0, 20.0)
 final regions:

 unfinished regions:
  (-30.0, -17.5)
  (-17.5, -15.9375)
  (-15.9375, -15.15625)
  (-15.15625, -15.05859375)
  (-15.05859375, -15.009765625)
  (-15.009765625, -15.003662109375)
  (-15.003662109375, -15.0006103515625)
  (-15.0006103515625, -14.999847412109375)
  (-14.999847412109375, -14.99908447265625)


julia&gt; sol.tree
Branching
├─ (:working, (-30.0, -17.5))
└─ Branching
   ├─ (:working, (-17.5, -15.9375))
   └─ Branching
      ├─ (:working, (-15.9375, -15.15625))
      └─ Branching
         ├─ (:working, (-15.15625, -15.05859375))
         └─ Branching
            ├─ (:working, (-15.05859375, -15.009765625))
            └─ Branching
               ⋮"><pre>julia<span class="pl-k">&gt;</span> search <span class="pl-k">=</span> <span class="pl-c1">BranchAndPruneSearch</span>(DepthFirst, X <span class="pl-k">-&gt;</span> <span class="pl-c1">process</span>(f, X), bisect, (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-c1">20.0</span>))
<span class="pl-c1">BranchAndPruneSearch</span><span class="pl-c1">{DepthFirst, Tuple{Float64, Float64}, var"#91#92", typeof(bisect)}</span>(<span class="pl-c1">var"#91#92"</span>(), bisect, (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-c1">20.0</span>))

julia<span class="pl-k">&gt;</span> sol <span class="pl-k">=</span> <span class="pl-c1">bpsearch</span>(search ; callback <span class="pl-k">=</span> state <span class="pl-k">-&gt;</span> state<span class="pl-k">.</span>iteration <span class="pl-k">&gt;=</span> <span class="pl-c1">25</span>)
BranchAndPruneResult
 converged<span class="pl-k">:</span> <span class="pl-c1">false</span>
 initial region<span class="pl-k">:</span> (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-c1">20.0</span>)
 final regions<span class="pl-k">:</span>

 unfinished regions<span class="pl-k">:</span>
  (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-k">-</span><span class="pl-c1">17.5</span>)
  (<span class="pl-k">-</span><span class="pl-c1">17.5</span>, <span class="pl-k">-</span><span class="pl-c1">15.9375</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.9375</span>, <span class="pl-k">-</span><span class="pl-c1">15.15625</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.15625</span>, <span class="pl-k">-</span><span class="pl-c1">15.05859375</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.05859375</span>, <span class="pl-k">-</span><span class="pl-c1">15.009765625</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.009765625</span>, <span class="pl-k">-</span><span class="pl-c1">15.003662109375</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.003662109375</span>, <span class="pl-k">-</span><span class="pl-c1">15.0006103515625</span>)
  (<span class="pl-k">-</span><span class="pl-c1">15.0006103515625</span>, <span class="pl-k">-</span><span class="pl-c1">14.999847412109375</span>)
  (<span class="pl-k">-</span><span class="pl-c1">14.999847412109375</span>, <span class="pl-k">-</span><span class="pl-c1">14.99908447265625</span>)


julia<span class="pl-k">&gt;</span> sol<span class="pl-k">.</span>tree
Branching
├─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">30.0</span>, <span class="pl-k">-</span><span class="pl-c1">17.5</span>))
└─ Branching
   ├─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">17.5</span>, <span class="pl-k">-</span><span class="pl-c1">15.9375</span>))
   └─ Branching
      ├─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">15.9375</span>, <span class="pl-k">-</span><span class="pl-c1">15.15625</span>))
      └─ Branching
         ├─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">15.15625</span>, <span class="pl-k">-</span><span class="pl-c1">15.05859375</span>))
         └─ Branching
            ├─ (<span class="pl-c1">:working</span>, (<span class="pl-k">-</span><span class="pl-c1">15.05859375</span>, <span class="pl-k">-</span><span class="pl-c1">15.009765625</span>))
            └─ Branching
               ⋮</pre></div>
</article></div>