<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazygroupby-lazy-parallelizable-and-composable-group-by-operations" class="anchor" aria-hidden="true" href="#lazygroupby-lazy-parallelizable-and-composable-group-by-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyGroupBy: lazy, parallelizable and composable group-by operations</h1>
<p dir="auto"><a href="https://juliafolds.github.io/LazyGroupBy.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFolds/LazyGroupBy.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/JuliaFolds/LazyGroupBy.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a></p>
<p dir="auto">LazyGroupBy.jl exports a single API <code>grouped</code>.  It can be used to run
group-by operation using the dot-call syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reducer.(..., grouped(key, collection), ...)"><pre><span class="pl-c1">reducer</span>.(<span class="pl-k">...</span>, <span class="pl-c1">grouped</span>(key, collection), <span class="pl-k">...</span>)</pre></div>
<p dir="auto">where <code>reducer</code> runs on <em>each</em> group (thus, <code>grouped(key, collection)</code>
can be considered a as a key-value pairs with
<a href="https://github.com/andyferris/Dictionaries.jl">Dictionaries.jl</a>-like
broadcasting rule).  Roughly speaking, <code>grouped(key, collection)</code> is
equivalent to <code>Dict(k_1 =&gt; [v_11, v_12, ...], k_2 =&gt; [v_21, v_22, ...], ...)</code> where <code>k_i</code> is an output of value of
<code>key(v_ij)</code> for <code>v_ij</code> in <code>collection</code> and each call of <code>reducer</code> is
evaluated with a group "vector" <code>[v_i1, v_i2, ...]</code>.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyGroupBy

julia&gt; collect.(grouped(isodd, 1:7))
Transducers.GroupByViewDict{Bool,Array{Int64,1},…} with 2 entries:
  false =&gt; [2, 4, 6]
  true  =&gt; [1, 3, 5, 7]

julia&gt; length.(grouped(isodd, 1:7))
Transducers.GroupByViewDict{Bool,Int64,…} with 2 entries:
  false =&gt; 3
  true  =&gt; 4

julia&gt; keys.(grouped(isodd, [0, 7, 3, 1, 5, 9, 4, 3, 0, 5]))
Transducers.GroupByViewDict{Bool,Array{Int64,1},…} with 2 entries:
  false =&gt; [1, 7, 9]
  true  =&gt; [2, 3, 4, 5, 6, 8, 10]

julia&gt; foldl.(tuple, grouped(isodd, [0, 7, 3, 1, 5, 9, 4, 3, 0, 5]))
Transducers.GroupByViewDict{Bool,Any,…} with 2 entries:
  false =&gt; ((0, 4), 0)
  true  =&gt; ((((((7, 3), 1), 5), 9), 3), 5)

julia&gt; foldl.(tuple, grouped(isodd, [0, 7, 3, 1, 5, 9, 4, 3, 0, 5]); init = -1)
Transducers.GroupByViewDict{Bool,Tuple{Any,Int64},…} with 2 entries:
  false =&gt; (((-1, 0), 4), 0)
  true  =&gt; (((((((-1, 7), 3), 1), 5), 9), 3), 5)

julia&gt; extrema_rf((min1, max1), (min2, max2)) = (min(min1, min2), max(max1, max2));

julia&gt; mapfoldl.(x -&gt; (x, x), extrema_rf, grouped(isodd, [0, 7, 3, 1, 5, 9, 4, 3, 0, 5]))
Transducers.GroupByViewDict{Bool,Tuple{Int64,Int64},…} with 2 entries:
  false =&gt; (0, 4)
  true  =&gt; (1, 9)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyGroupBy

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>.(<span class="pl-c1">grouped</span>(isodd, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span>))
Transducers<span class="pl-k">.</span>GroupByViewDict{Bool,Array{Int64,<span class="pl-c1">1</span>},…} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">false</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>]
  <span class="pl-c1">true</span>  <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>.(<span class="pl-c1">grouped</span>(isodd, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span>))
Transducers<span class="pl-k">.</span>GroupByViewDict{Bool,Int64,…} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">false</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">true</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">keys</span>.(<span class="pl-c1">grouped</span>(isodd, [<span class="pl-c1">0</span>, <span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>]))
Transducers<span class="pl-k">.</span>GroupByViewDict{Bool,Array{Int64,<span class="pl-c1">1</span>},…} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">false</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">7</span>, <span class="pl-c1">9</span>]
  <span class="pl-c1">true</span>  <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>.(tuple, <span class="pl-c1">grouped</span>(isodd, [<span class="pl-c1">0</span>, <span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>]))
Transducers<span class="pl-k">.</span>GroupByViewDict{Bool,Any,…} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">false</span> <span class="pl-k">=&gt;</span> ((<span class="pl-c1">0</span>, <span class="pl-c1">4</span>), <span class="pl-c1">0</span>)
  <span class="pl-c1">true</span>  <span class="pl-k">=&gt;</span> ((((((<span class="pl-c1">7</span>, <span class="pl-c1">3</span>), <span class="pl-c1">1</span>), <span class="pl-c1">5</span>), <span class="pl-c1">9</span>), <span class="pl-c1">3</span>), <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foldl</span>.(tuple, <span class="pl-c1">grouped</span>(isodd, [<span class="pl-c1">0</span>, <span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>]); init <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>)
Transducers<span class="pl-k">.</span>GroupByViewDict{Bool,Tuple{Any,Int64},…} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">false</span> <span class="pl-k">=&gt;</span> (((<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>), <span class="pl-c1">4</span>), <span class="pl-c1">0</span>)
  <span class="pl-c1">true</span>  <span class="pl-k">=&gt;</span> (((((((<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">7</span>), <span class="pl-c1">3</span>), <span class="pl-c1">1</span>), <span class="pl-c1">5</span>), <span class="pl-c1">9</span>), <span class="pl-c1">3</span>), <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-en">extrema_rf</span>((min1, max1), (min2, max2)) <span class="pl-k">=</span> (<span class="pl-c1">min</span>(min1, min2), <span class="pl-c1">max</span>(max1, max2));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mapfoldl</span>.(x <span class="pl-k">-&gt;</span> (x, x), extrema_rf, <span class="pl-c1">grouped</span>(isodd, [<span class="pl-c1">0</span>, <span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>]))
Transducers<span class="pl-k">.</span>GroupByViewDict{Bool,Tuple{Int64,Int64},…} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">false</span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">0</span>, <span class="pl-c1">4</span>)
  <span class="pl-c1">true</span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">9</span>)</pre></div>
<p dir="auto">Following generic and standard reducers are supported:</p>
<ul dir="auto">
<li><code>collect.(op, grouped(...))</code> → <code>DICT{Key,Vector{...}}</code></li>
<li><code>view.(grouped(_, array))</code> → <code>DICT{Key,SubArray}</code></li>
<li><code>map.(f, grouped(...))</code></li>
<li><code>length.(op, grouped(...))</code> → <code>DICT{Key,Int}</code></li>
<li><code>count.([f,] op, grouped(...))</code> → <code>DICT{Key,Int}</code></li>
<li><code>sum.([f,] op, grouped(...))</code> → <code>DICT{Key,Number}</code></li>
<li><code>prod.([f,] op, grouped(...))</code> → <code>DICT{Key,Number}</code></li>
<li><code>any.(f, op, grouped(...))</code> → <code>DICT{Key,Bool}</code></li>
<li><code>all.(f, op, grouped(...))</code> → <code>DICT{Key,Bool}</code></li>
<li><code>minimum.([f,] op, grouped(...))</code></li>
<li><code>maximum.([f,] op, grouped(...))</code></li>
<li><code>extrema.([f,] op, grouped(...))</code></li>
<li><code>keys.(op, grouped(_, collection))</code> → <code>DICT{Key,Vector{keytype(collection)}}</code></li>
<li><code>pairs.(op, grouped(_, collection))</code> →
<code>DICT{Key,DICT{keytype(collection),valtype(collection)}}</code></li>
<li><code>findfirst.(f, grouped(_, array))</code> → <code>DICT{Key,keytype(collection)}</code></li>
<li><code>findlast.(f, grouped(_, array))</code> → <code>DICT{Key,keytype(collection)}</code></li>
<li><code>findall.(f, grouped(_, array))</code> → <code>DICT{Key,Vector{keytype(collection)}}</code></li>
<li><code>foldl.(op, grouped(...); [init])</code></li>
<li><code>mapfoldl.(f, op, grouped(...); [init])</code></li>
</ul>
<p dir="auto">where <code>DICT{K,V}</code> above is a short-hand for <code>AbstractDict{&lt;:K,&lt;:V}</code>
and <code>Key</code> is the type of the values returned from <code>key</code> function
passed to <code>grouped</code>.</p>
<p dir="auto">For more complex tasks,
<a href="https://github.com/tkf/Transducers.jl">Transducers.jl</a> and
<a href="https://github.com/joshday/OnlineStats.jl">OnlineStats.jl</a> can also
be used:</p>
<ul dir="auto">
<li><code>foldl.(op, xf, grouped(...); [init])</code></li>
<li><code>foldxl.(op, [xf,] grouped(...); [init])</code></li>
<li><code>foldxt.(op, [xf,] grouped(...); [init])</code> (multi-threaded)</li>
<li><code>foldxd.(op, [xf,] grouped(...); [init])</code> (distributed)</li>
<li><code>collect.(xf, grouped(...))</code></li>
<li><code>tcollect.(xf, grouped(...))</code> (multi-threaded version of <code>collect</code>)</li>
<li><code>dcollect.(xf, grouped(...))</code> (distributed version of <code>collect</code>)</li>
</ul>
<p dir="auto">where <code>xf::Transducer</code> is initiated for each group individually and
<code>op</code> is either a two-argument function or an <code>OnlineStat</code> object
(e.g., <code>OnlineStats.Mean</code>).</p>
<h2 dir="auto"><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caveats</h2>
<p dir="auto">The dot-call syntax is used for defining the "domain-specific
language" (DSL) and it is different from the standard semantics of
broadcasting on arrays.  In particular, <code>reducer.(..., grouped(key, collection), ...)</code> may not actually call <code>reducer</code>.  Rather, it is
pattern-matched and dispatched to an alternative definition based on
Transducers.jl.</p>
<h2 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h2>
<p dir="auto">LazyGroupBy.jl is implemented as a direct transformation to
<code>foldl</code>/<code>foldxt</code>/<code>foldxd</code> and <code>GroupBy</code> from Transducer.jl.  Consider</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="foldl.(rf, xf, grouped(key, collection); init = init)"><pre><span class="pl-c1">foldl</span>.(rf, xf, <span class="pl-c1">grouped</span>(key, collection); init <span class="pl-k">=</span> init)</pre></div>
<p dir="auto">This is simply translated to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="foldl(right, GroupBy(key, xf, rf, init), collection)"><pre><span class="pl-c1">foldl</span>(right, <span class="pl-c1">GroupBy</span>(key, xf, rf, init), collection)</pre></div>
<p dir="auto">Other reducers like <code>sum</code> and <code>collect</code> are implemented in terms of
above transformation.</p>
</article></div>