<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-splines2jl-package-for-regression-splines" class="anchor" aria-hidden="true" href="#splines2jl-package-for-regression-splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Splines2.jl package for regression splines</h1>
<p>A <a href="https://julialang.org/" rel="nofollow">Julia</a> package for regression splines. The package currently includes B-splines, natural B-splines, M-splines and I-splines.</p>
<h2><a id="user-content-news" class="anchor" aria-hidden="true" href="#news"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>News</h2>
<h3><a id="user-content-version-020" class="anchor" aria-hidden="true" href="#version-020"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Version 0.2.0:</h3>
<ul>
<li>Mainly bug fixes.</li>
<li>A change of behaviour for <code>Splines2.is_</code> and <code>Splines2.is</code>: <code>intercept=true</code> will include a columns of ones, while the default <code>intercept=false</code> will keep <em>all</em> of the spline terms, but exclude the column of ones. This behaviour is different to the <code>splines2</code> package in R, which will give all of the spline terms for <code>intercept=TRUE</code> and drop the first spline term for <code>intercept=FALSE</code>.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is not currently registered. Installation from GitHub:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(PackageSpec(url = &quot;https://github.com/mclements/Splines2.jl&quot;))
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/mclements/Splines2.jl<span class="pl-pds">"</span></span>))</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Exported functions include <code>Splines2.bs</code>, <code>Splines2.ns</code>, <code>Splines2.ms</code> and <code>Splines2.is</code>, which provide evaluating spline bases for B-splines, natural B-splines, M-splines and I-splines, respectively. These functions take an <code>::Array{&lt;:Real,1}</code> argument and some design information and return the given spline basis.</p>
<h3><a id="user-content-documentation-for-splines2bs" class="anchor" aria-hidden="true" href="#documentation-for-splines2bs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation for <code>Splines2.bs</code></h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bs(x :: Array{T,1}; &lt;keyword arguments&gt;) where T&lt;:Real
"><pre><span class="pl-c1">bs</span>(x <span class="pl-k">::</span> <span class="pl-c1">Array{T,1}</span>; <span class="pl-k">&lt;</span>keyword arguments<span class="pl-k">&gt;</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span></pre></div>
<p>Calculate a basis for B-splines.</p>
<p>The keyword arguments include one of:</p>
<ol>
<li><code>df</code>, possibly in combination with <code>intercept</code></li>
<li><code>boundary_knots</code> and <code>interior_knots</code></li>
<li><code>knots</code></li>
</ol>
<h4><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<ul>
<li><code>boundary_knots :: Union{Tuple{T,T},Nothing} = nothing</code>: boundary knots</li>
<li><code>interior_knots :: Union{Array{T,1},Nothing} = nothing</code>: interior knots</li>
<li><code>order :: Int32 = 4</code>: order of the spline</li>
<li><code>intercept :: Bool = false</code>: bool for whether to include an intercept</li>
<li><code>df :: Int32 = order - 1 + Int32(intercept)</code>: degrees of freedom</li>
<li><code>knots :: Union{Array{T,1}, Nothing} = nothing</code>: full set of knots (excluding repeats)</li>
<li><code>centre :: Union{T,Nothing} = nothing)</code>: value to centre the splines</li>
<li><code>ders :: Int32 = 0</code>: derivatives of the splines</li>
</ul>
<h3><a id="user-content-documentation-for-splines2bs_" class="anchor" aria-hidden="true" href="#documentation-for-splines2bs_"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation for <code>Splines2.bs_</code></h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bs_(x :: Array{T,1}; &lt;keyword arguments&gt;) where T&lt;:Real
"><pre><span class="pl-c1">bs_</span>(x <span class="pl-k">::</span> <span class="pl-c1">Array{T,1}</span>; <span class="pl-k">&lt;</span>keyword arguments<span class="pl-k">&gt;</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span></pre></div>
<p>Calculate a basis for B-splines and return a function with signature
<code>(x:: Array{T,1}; ders :: Int32 = 0)</code> for evaluation of <code>ders</code>
derivative for the splines at <code>x</code>.</p>
<p>The keyword arguments include one of:</p>
<ol>
<li><code>df</code>, possibly in combination with <code>intercept</code></li>
<li><code>boundary_knots</code> and <code>interior_knots</code></li>
<li><code>knots</code></li>
</ol>
<h4><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<ul>
<li><code>boundary_knots :: Union{Tuple{T,T},Nothing} = nothing</code>: boundary knots</li>
<li><code>interior_knots :: Union{Array{T,1},Nothing} = nothing</code>: interior knots</li>
<li><code>order :: Int32 = 4</code>: order of the spline</li>
<li><code>intercept :: Bool = false</code>: bool for whether to include an intercept</li>
<li><code>df :: Int32 = order - 1 + Int32(intercept)</code>: degrees of freedom</li>
<li><code>knots :: Union{Array{T,1}, Nothing} = nothing</code>: full set of knots (excluding repeats)</li>
<li><code>centre :: Union{T,Nothing} = nothing)</code>: value to centre the splines</li>
</ul>
<p>The documentation for the other bases are similar, except that the I-splines do not include the <code>centre</code> argument.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Some short examples are given below.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Splines2
julia&gt; x = collect(0.0:0.1:1.0);
julia&gt; bs(x, df=3)

11×3 Array{Float64,2}:
 0.0    0.0    0.0  
 0.243  0.027  0.001
 0.384  0.096  0.008
 0.441  0.189  0.027
 0.432  0.288  0.064
 0.375  0.375  0.125
 0.288  0.432  0.216
 0.189  0.441  0.343
 0.096  0.384  0.512
 0.027  0.243  0.729
 0.0    0.0    1.0
 
julia&gt; ns(x, boundary_knots=(0.0,1.0), interior_knots=[0.2])
	
11×2 Array{Float64,2}:
 0.0        0.0      
 0.196457  -0.106365 
 0.363908  -0.179949 
 0.479393  -0.194802 
 0.544119  -0.152288 
 0.565337  -0.0606039
 0.550299   0.072056 
 0.506256   0.237496 
 0.44046    0.427522 
 0.360161   0.633938 
 0.272611   0.84855
 
 julia&gt; ms(x, knots=[0.0,0.4,1.0], centre=0.4)

11×4 Array{Float64,2}:
 -1.44      -1.92       -0.64      0.0      
  0.6075    -1.665      -0.63      0.0      
  1.14      -1.08       -0.56      0.0      
  0.7425    -0.435      -0.37      0.0      
  0.0        0.0         0.0       0.0      
 -0.606667   0.0244444   0.563704  0.0308642
 -1.01333   -0.284444    1.14963   0.246914 
 -1.26      -0.78        1.54      0.833333 
 -1.38667   -1.31556     1.51704   1.97531  
 -1.43333   -1.74444     0.862963  3.85802  
 -1.44      -1.92       -0.64      6.66667
 
 julia&gt; is(x, df=4)

11×4 Array{Float64,2}:
 0.0     0.0     0.0     0.0   
 0.3439  0.0523  0.0037  0.0001
 0.5904  0.1808  0.0272  0.0016
 0.7599  0.3483  0.0837  0.0081
 0.8704  0.5248  0.1792  0.0256
 0.9375  0.6875  0.3125  0.0625
 0.9744  0.8208  0.4752  0.1296
 0.9919  0.9163  0.6517  0.2401
 0.9984  0.9728  0.8192  0.4096
 0.9999  0.9963  0.9477  0.6561
 1.0     1.0     1.0     1.0   
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Splines2
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1.0</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">bs</span>(x, df<span class="pl-k">=</span><span class="pl-c1">3</span>)

<span class="pl-c1">11</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>  
 <span class="pl-c1">0.243</span>  <span class="pl-c1">0.027</span>  <span class="pl-c1">0.001</span>
 <span class="pl-c1">0.384</span>  <span class="pl-c1">0.096</span>  <span class="pl-c1">0.008</span>
 <span class="pl-c1">0.441</span>  <span class="pl-c1">0.189</span>  <span class="pl-c1">0.027</span>
 <span class="pl-c1">0.432</span>  <span class="pl-c1">0.288</span>  <span class="pl-c1">0.064</span>
 <span class="pl-c1">0.375</span>  <span class="pl-c1">0.375</span>  <span class="pl-c1">0.125</span>
 <span class="pl-c1">0.288</span>  <span class="pl-c1">0.432</span>  <span class="pl-c1">0.216</span>
 <span class="pl-c1">0.189</span>  <span class="pl-c1">0.441</span>  <span class="pl-c1">0.343</span>
 <span class="pl-c1">0.096</span>  <span class="pl-c1">0.384</span>  <span class="pl-c1">0.512</span>
 <span class="pl-c1">0.027</span>  <span class="pl-c1">0.243</span>  <span class="pl-c1">0.729</span>
 <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>    <span class="pl-c1">1.0</span>
 
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ns</span>(x, boundary_knots<span class="pl-k">=</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>), interior_knots<span class="pl-k">=</span>[<span class="pl-c1">0.2</span>])
	
<span class="pl-c1">11</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>      
 <span class="pl-c1">0.196457</span>  <span class="pl-k">-</span><span class="pl-c1">0.106365</span> 
 <span class="pl-c1">0.363908</span>  <span class="pl-k">-</span><span class="pl-c1">0.179949</span> 
 <span class="pl-c1">0.479393</span>  <span class="pl-k">-</span><span class="pl-c1">0.194802</span> 
 <span class="pl-c1">0.544119</span>  <span class="pl-k">-</span><span class="pl-c1">0.152288</span> 
 <span class="pl-c1">0.565337</span>  <span class="pl-k">-</span><span class="pl-c1">0.0606039</span>
 <span class="pl-c1">0.550299</span>   <span class="pl-c1">0.072056</span> 
 <span class="pl-c1">0.506256</span>   <span class="pl-c1">0.237496</span> 
 <span class="pl-c1">0.44046</span>    <span class="pl-c1">0.427522</span> 
 <span class="pl-c1">0.360161</span>   <span class="pl-c1">0.633938</span> 
 <span class="pl-c1">0.272611</span>   <span class="pl-c1">0.84855</span>
 
 julia<span class="pl-k">&gt;</span> <span class="pl-c1">ms</span>(x, knots<span class="pl-k">=</span>[<span class="pl-c1">0.0</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">1.0</span>], centre<span class="pl-k">=</span><span class="pl-c1">0.4</span>)

<span class="pl-c1">11</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.44</span>      <span class="pl-k">-</span><span class="pl-c1">1.92</span>       <span class="pl-k">-</span><span class="pl-c1">0.64</span>      <span class="pl-c1">0.0</span>      
  <span class="pl-c1">0.6075</span>    <span class="pl-k">-</span><span class="pl-c1">1.665</span>      <span class="pl-k">-</span><span class="pl-c1">0.63</span>      <span class="pl-c1">0.0</span>      
  <span class="pl-c1">1.14</span>      <span class="pl-k">-</span><span class="pl-c1">1.08</span>       <span class="pl-k">-</span><span class="pl-c1">0.56</span>      <span class="pl-c1">0.0</span>      
  <span class="pl-c1">0.7425</span>    <span class="pl-k">-</span><span class="pl-c1">0.435</span>      <span class="pl-k">-</span><span class="pl-c1">0.37</span>      <span class="pl-c1">0.0</span>      
  <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>         <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>      
 <span class="pl-k">-</span><span class="pl-c1">0.606667</span>   <span class="pl-c1">0.0244444</span>   <span class="pl-c1">0.563704</span>  <span class="pl-c1">0.0308642</span>
 <span class="pl-k">-</span><span class="pl-c1">1.01333</span>   <span class="pl-k">-</span><span class="pl-c1">0.284444</span>    <span class="pl-c1">1.14963</span>   <span class="pl-c1">0.246914</span> 
 <span class="pl-k">-</span><span class="pl-c1">1.26</span>      <span class="pl-k">-</span><span class="pl-c1">0.78</span>        <span class="pl-c1">1.54</span>      <span class="pl-c1">0.833333</span> 
 <span class="pl-k">-</span><span class="pl-c1">1.38667</span>   <span class="pl-k">-</span><span class="pl-c1">1.31556</span>     <span class="pl-c1">1.51704</span>   <span class="pl-c1">1.97531</span>  
 <span class="pl-k">-</span><span class="pl-c1">1.43333</span>   <span class="pl-k">-</span><span class="pl-c1">1.74444</span>     <span class="pl-c1">0.862963</span>  <span class="pl-c1">3.85802</span>  
 <span class="pl-k">-</span><span class="pl-c1">1.44</span>      <span class="pl-k">-</span><span class="pl-c1">1.92</span>       <span class="pl-k">-</span><span class="pl-c1">0.64</span>      <span class="pl-c1">6.66667</span>
 
 julia<span class="pl-k">&gt;</span> <span class="pl-c1">is</span>(x, df<span class="pl-k">=</span><span class="pl-c1">4</span>)

<span class="pl-c1">11</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span>   
 <span class="pl-c1">0.3439</span>  <span class="pl-c1">0.0523</span>  <span class="pl-c1">0.0037</span>  <span class="pl-c1">0.0001</span>
 <span class="pl-c1">0.5904</span>  <span class="pl-c1">0.1808</span>  <span class="pl-c1">0.0272</span>  <span class="pl-c1">0.0016</span>
 <span class="pl-c1">0.7599</span>  <span class="pl-c1">0.3483</span>  <span class="pl-c1">0.0837</span>  <span class="pl-c1">0.0081</span>
 <span class="pl-c1">0.8704</span>  <span class="pl-c1">0.5248</span>  <span class="pl-c1">0.1792</span>  <span class="pl-c1">0.0256</span>
 <span class="pl-c1">0.9375</span>  <span class="pl-c1">0.6875</span>  <span class="pl-c1">0.3125</span>  <span class="pl-c1">0.0625</span>
 <span class="pl-c1">0.9744</span>  <span class="pl-c1">0.8208</span>  <span class="pl-c1">0.4752</span>  <span class="pl-c1">0.1296</span>
 <span class="pl-c1">0.9919</span>  <span class="pl-c1">0.9163</span>  <span class="pl-c1">0.6517</span>  <span class="pl-c1">0.2401</span>
 <span class="pl-c1">0.9984</span>  <span class="pl-c1">0.9728</span>  <span class="pl-c1">0.8192</span>  <span class="pl-c1">0.4096</span>
 <span class="pl-c1">0.9999</span>  <span class="pl-c1">0.9963</span>  <span class="pl-c1">0.9477</span>  <span class="pl-c1">0.6561</span>
 <span class="pl-c1">1.0</span>     <span class="pl-c1">1.0</span>     <span class="pl-c1">1.0</span>     <span class="pl-c1">1.0</span>   </pre></div>
<p>We also provide functions that return a function for evaluating spline bases with a function signature <code>(x::Array{T&lt;:Real,1}; ders::Int32 = 0)</code>. These are useful for "safe" predictions in regression modelling. As an example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Splines2, GLM, Random
julia&gt; Random.seed!(12345);
julia&gt; x = collect(range(0.0, length=301, stop=2.0*pi));
julia&gt; y = sin.(x)+randn(length(x)); 
julia&gt; ns1 = Splines2.ns_(x,df=5,intercept=true); # this is a function
julia&gt; X = ns1(x);
julia&gt; fit1 = lm(X,y)

LinearModel{GLM.LmResp{Array{Float64,1}},GLM.DensePredChol{Float64,LinearAlgebra.Cholesky{Float64,Array{Float64,2}}}}:

Coefficients:
────────────────────────────────────────────────────────────────────
     Estimate  Std. Error    t value  Pr(&gt;|t|)  Lower 95%  Upper 95%
────────────────────────────────────────────────────────────────────
x1   1.23751     0.269035   4.59981     &lt;1e-5    0.708047   1.76698 
x2   0.12448     0.249256   0.499407    0.6179  -0.366058   0.615018
x3  -1.89278     0.256808  -7.37043     &lt;1e-11  -2.39819   -1.38738 
x4   0.187169    0.22469    0.833012    0.4055  -0.255023   0.629361
x5  -0.240554    0.254986  -0.943404    0.3462  -0.742369   0.26126 
────────────────────────────────────────────────────────────────────

julia&gt; newx = collect(0.0:0.5:3.5);
julia&gt; predict(fit1, ns1(newx)) # safe predictions

8-element Array{Float64,1}:
  0.2982757838333453 
  0.6021897830602807 
  0.8365641389496451 
  0.9318592081638681 
  0.8310124040845238 
  0.5536590079608558 
  0.14855743047881534
 -0.3299373638222967 
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Splines2, GLM, Random
julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">12345</span>);
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0.0</span>, length<span class="pl-k">=</span><span class="pl-c1">301</span>, stop<span class="pl-k">=</span><span class="pl-c1">2.0</span><span class="pl-k">*</span><span class="pl-c1">pi</span>));
julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(x)<span class="pl-k">+</span><span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(x)); 
julia<span class="pl-k">&gt;</span> ns1 <span class="pl-k">=</span> Splines2<span class="pl-k">.</span><span class="pl-c1">ns_</span>(x,df<span class="pl-k">=</span><span class="pl-c1">5</span>,intercept<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-c"><span class="pl-c">#</span> this is a function</span>
julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">ns1</span>(x);
julia<span class="pl-k">&gt;</span> fit1 <span class="pl-k">=</span> <span class="pl-c1">lm</span>(X,y)

LinearModel{GLM<span class="pl-k">.</span>LmResp{Array{Float64,<span class="pl-c1">1</span>}},GLM<span class="pl-k">.</span>DensePredChol{Float64,LinearAlgebra<span class="pl-k">.</span>Cholesky{Float64,Array{Float64,<span class="pl-c1">2</span>}}}}<span class="pl-k">:</span>

Coefficients<span class="pl-k">:</span>
────────────────────────────────────────────────────────────────────
     Estimate  Std. Error    t value  <span class="pl-c1">Pr</span>(<span class="pl-k">&gt;</span><span class="pl-k">|</span>t<span class="pl-k">|</span>)  Lower <span class="pl-c1">95</span><span class="pl-k">%</span>  Upper <span class="pl-c1">95</span><span class="pl-k">%</span>
────────────────────────────────────────────────────────────────────
x1   <span class="pl-c1">1.23751</span>     <span class="pl-c1">0.269035</span>   <span class="pl-c1">4.59981</span>     <span class="pl-k">&lt;</span><span class="pl-c1">1e-5</span>    <span class="pl-c1">0.708047</span>   <span class="pl-c1">1.76698</span> 
x2   <span class="pl-c1">0.12448</span>     <span class="pl-c1">0.249256</span>   <span class="pl-c1">0.499407</span>    <span class="pl-c1">0.6179</span>  <span class="pl-k">-</span><span class="pl-c1">0.366058</span>   <span class="pl-c1">0.615018</span>
x3  <span class="pl-k">-</span><span class="pl-c1">1.89278</span>     <span class="pl-c1">0.256808</span>  <span class="pl-k">-</span><span class="pl-c1">7.37043</span>     <span class="pl-k">&lt;</span><span class="pl-c1">1e-11</span>  <span class="pl-k">-</span><span class="pl-c1">2.39819</span>   <span class="pl-k">-</span><span class="pl-c1">1.38738</span> 
x4   <span class="pl-c1">0.187169</span>    <span class="pl-c1">0.22469</span>    <span class="pl-c1">0.833012</span>    <span class="pl-c1">0.4055</span>  <span class="pl-k">-</span><span class="pl-c1">0.255023</span>   <span class="pl-c1">0.629361</span>
x5  <span class="pl-k">-</span><span class="pl-c1">0.240554</span>    <span class="pl-c1">0.254986</span>  <span class="pl-k">-</span><span class="pl-c1">0.943404</span>    <span class="pl-c1">0.3462</span>  <span class="pl-k">-</span><span class="pl-c1">0.742369</span>   <span class="pl-c1">0.26126</span> 
────────────────────────────────────────────────────────────────────

julia<span class="pl-k">&gt;</span> newx <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">3.5</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">predict</span>(fit1, <span class="pl-c1">ns1</span>(newx)) <span class="pl-c"><span class="pl-c">#</span> safe predictions</span>

<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.2982757838333453</span> 
  <span class="pl-c1">0.6021897830602807</span> 
  <span class="pl-c1">0.8365641389496451</span> 
  <span class="pl-c1">0.9318592081638681</span> 
  <span class="pl-c1">0.8310124040845238</span> 
  <span class="pl-c1">0.5536590079608558</span> 
  <span class="pl-c1">0.14855743047881534</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3299373638222967</span> </pre></div>
<h2><a id="user-content-using-splines2-with-formula" class="anchor" aria-hidden="true" href="#using-splines2-with-formula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using <code>Splines2</code> with <code>@formula</code></h2>
<p>We provide code below for using the <code>Splines2</code> package with <code>@formula</code>. Note that these do <em>not</em> provide "safe" predictions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StatsModels
ns(x,df) = Splines2.ns(x,df=df,intercept=true) # assumes intercept
const NSPLINE_CONTEXT = Any
struct NSplineTerm{T,D} &lt;: AbstractTerm
    term::T
    df::D
end
Base.show(io::IO, p::NSplineTerm) = print(io, &quot;ns($(p.term), $(p.df))&quot;)
function StatsModels.apply_schema(t::FunctionTerm{typeof(ns)},
                                  sch::StatsModels.Schema,
                                  Mod::Type{&lt;:NSPLINE_CONTEXT})
    apply_schema(NSplineTerm(t.args_parsed...), sch, Mod)
end
function StatsModels.apply_schema(t::NSplineTerm,
                                  sch::StatsModels.Schema,
                                  Mod::Type{&lt;:NSPLINE_CONTEXT})
    term = apply_schema(t.term, sch, Mod)
    isa(term, ContinuousTerm) ||
        throw(ArgumentError(&quot;NSplineTerm only works with continuous terms (got $term)&quot;))
    isa(t.df, ConstantTerm) ||
        throw(ArgumentError(&quot;NSplineTerm df must be a number (got $(t.df))&quot;))
    NSplineTerm(term, t.df.n)
end
function StatsModels.modelcols(p::NSplineTerm, d::NamedTuple)
    col = modelcols(p.term, d)
    Splines2.ns(col, df=p.df,intercept=true)
end
StatsModels.terms(p::NSplineTerm) = terms(p.term)
StatsModels.termvars(p::NSplineTerm) = StatsModels.termvars(p.term)
StatsModels.width(p::NSplineTerm) = 1
StatsModels.coefnames(p::NSplineTerm) = &quot;ns(&quot; .* coefnames(p.term) .* &quot;,&quot; .* string.(1:p.df) .* &quot;)&quot;
"><pre><span class="pl-k">using</span> StatsModels
<span class="pl-en">ns</span>(x,df) <span class="pl-k">=</span> Splines2<span class="pl-k">.</span><span class="pl-c1">ns</span>(x,df<span class="pl-k">=</span>df,intercept<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> assumes intercept</span>
<span class="pl-k">const</span> NSPLINE_CONTEXT <span class="pl-k">=</span> Any
<span class="pl-k">struct</span> NSplineTerm{T,D} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractTerm</span>
    term<span class="pl-k">::</span><span class="pl-c1">T</span>
    df<span class="pl-k">::</span><span class="pl-c1">D</span>
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-en">show</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, p<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>) <span class="pl-k">=</span> <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>ns(<span class="pl-v">$(p<span class="pl-k">.</span>term)</span>, <span class="pl-v">$(p<span class="pl-k">.</span>df)</span>)<span class="pl-pds">"</span></span>)
<span class="pl-k">function</span> StatsModels<span class="pl-k">.</span><span class="pl-en">apply_schema</span>(t<span class="pl-k">::</span><span class="pl-c1">FunctionTerm{typeof(ns)}</span>,
                                  sch<span class="pl-k">::</span><span class="pl-c1">StatsModels.Schema</span>,
                                  Mod<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:NSPLINE_CONTEXT}</span>)
    <span class="pl-c1">apply_schema</span>(<span class="pl-c1">NSplineTerm</span>(t<span class="pl-k">.</span>args_parsed<span class="pl-k">...</span>), sch, Mod)
<span class="pl-k">end</span>
<span class="pl-k">function</span> StatsModels<span class="pl-k">.</span><span class="pl-en">apply_schema</span>(t<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>,
                                  sch<span class="pl-k">::</span><span class="pl-c1">StatsModels.Schema</span>,
                                  Mod<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:NSPLINE_CONTEXT}</span>)
    term <span class="pl-k">=</span> <span class="pl-c1">apply_schema</span>(t<span class="pl-k">.</span>term, sch, Mod)
    <span class="pl-c1">isa</span>(term, ContinuousTerm) <span class="pl-k">||</span>
        <span class="pl-c1">throw</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>NSplineTerm only works with continuous terms (got <span class="pl-v">$term</span>)<span class="pl-pds">"</span></span>))
    <span class="pl-c1">isa</span>(t<span class="pl-k">.</span>df, ConstantTerm) <span class="pl-k">||</span>
        <span class="pl-c1">throw</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>NSplineTerm df must be a number (got <span class="pl-v">$(t<span class="pl-k">.</span>df)</span>)<span class="pl-pds">"</span></span>))
    <span class="pl-c1">NSplineTerm</span>(term, t<span class="pl-k">.</span>df<span class="pl-k">.</span>n)
<span class="pl-k">end</span>
<span class="pl-k">function</span> StatsModels<span class="pl-k">.</span><span class="pl-en">modelcols</span>(p<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>, d<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>)
    col <span class="pl-k">=</span> <span class="pl-c1">modelcols</span>(p<span class="pl-k">.</span>term, d)
    Splines2<span class="pl-k">.</span><span class="pl-c1">ns</span>(col, df<span class="pl-k">=</span>p<span class="pl-k">.</span>df,intercept<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-k">end</span>
StatsModels<span class="pl-k">.</span><span class="pl-en">terms</span>(p<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>) <span class="pl-k">=</span> <span class="pl-c1">terms</span>(p<span class="pl-k">.</span>term)
StatsModels<span class="pl-k">.</span><span class="pl-en">termvars</span>(p<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>) <span class="pl-k">=</span> StatsModels<span class="pl-k">.</span><span class="pl-c1">termvars</span>(p<span class="pl-k">.</span>term)
StatsModels<span class="pl-k">.</span><span class="pl-en">width</span>(p<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>) <span class="pl-k">=</span> <span class="pl-c1">1</span>
StatsModels<span class="pl-k">.</span><span class="pl-en">coefnames</span>(p<span class="pl-k">::</span><span class="pl-c1">NSplineTerm</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>ns(<span class="pl-pds">"</span></span> <span class="pl-k">.*</span> <span class="pl-c1">coefnames</span>(p<span class="pl-k">.</span>term) <span class="pl-k">.*</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">.*</span> <span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>p<span class="pl-k">.</span>df) <span class="pl-k">.*</span> <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span></pre></div>
<p>To show that this is not safe:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DataFrames
julia&gt; d = DataFrames.DataFrame(x=x,y=y);
julia&gt; fit2 = lm(@formula(y~ns(x,5)+0),d) # equivalent to fit1 with nicer labels

StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Array{Float64,1}},GLM.DensePredChol{Float64,LinearAlgebra.Cholesky{Float64,Array{Float64,2}}}},Array{Float64,2}}

y ~ 0 + ns(x, 5)

Coefficients:
─────────────────────────────────────────────────────────────────────────
          Estimate  Std. Error    t value  Pr(&gt;|t|)  Lower 95%  Upper 95%
─────────────────────────────────────────────────────────────────────────
ns(x,1)   1.23751     0.269035   4.59981     &lt;1e-5    0.708047   1.76698 
ns(x,2)   0.12448     0.249256   0.499407    0.6179  -0.366058   0.615018
ns(x,3)  -1.89278     0.256808  -7.37043     &lt;1e-11  -2.39819   -1.38738 
ns(x,4)   0.187169    0.22469    0.833012    0.4055  -0.255023   0.629361
ns(x,5)  -0.240554    0.254986  -0.943404    0.3462  -0.742369   0.26126 
─────────────────────────────────────────────────────────────────────────

julia&gt; predict(fit2, DataFrames.DataFrame(x=newx)) # unsafe predictions!

8-element Array{Union{Missing, Float64},1}:
  0.29827578383334535
  0.7976143687096604 
  0.8964195213823501 
  0.40991870738161984
 -0.4167421148184624 
 -1.0400611367418444 
 -0.7710405835443831 
  0.1787886772299305
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames
julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> DataFrames<span class="pl-k">.</span><span class="pl-c1">DataFrame</span>(x<span class="pl-k">=</span>x,y<span class="pl-k">=</span>y);
julia<span class="pl-k">&gt;</span> fit2 <span class="pl-k">=</span> <span class="pl-c1">lm</span>(<span class="pl-c1">@formula</span>(y<span class="pl-k">~</span><span class="pl-c1">ns</span>(x,<span class="pl-c1">5</span>)<span class="pl-k">+</span><span class="pl-c1">0</span>),d) <span class="pl-c"><span class="pl-c">#</span> equivalent to fit1 with nicer labels</span>

StatsModels<span class="pl-k">.</span>TableRegressionModel{LinearModel{GLM<span class="pl-k">.</span>LmResp{Array{Float64,<span class="pl-c1">1</span>}},GLM<span class="pl-k">.</span>DensePredChol{Float64,LinearAlgebra<span class="pl-k">.</span>Cholesky{Float64,Array{Float64,<span class="pl-c1">2</span>}}}},Array{Float64,<span class="pl-c1">2</span>}}

y <span class="pl-k">~</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">ns</span>(x, <span class="pl-c1">5</span>)

Coefficients<span class="pl-k">:</span>
─────────────────────────────────────────────────────────────────────────
          Estimate  Std. Error    t value  <span class="pl-c1">Pr</span>(<span class="pl-k">&gt;</span><span class="pl-k">|</span>t<span class="pl-k">|</span>)  Lower <span class="pl-c1">95</span><span class="pl-k">%</span>  Upper <span class="pl-c1">95</span><span class="pl-k">%</span>
─────────────────────────────────────────────────────────────────────────
<span class="pl-c1">ns</span>(x,<span class="pl-c1">1</span>)   <span class="pl-c1">1.23751</span>     <span class="pl-c1">0.269035</span>   <span class="pl-c1">4.59981</span>     <span class="pl-k">&lt;</span><span class="pl-c1">1e-5</span>    <span class="pl-c1">0.708047</span>   <span class="pl-c1">1.76698</span> 
<span class="pl-c1">ns</span>(x,<span class="pl-c1">2</span>)   <span class="pl-c1">0.12448</span>     <span class="pl-c1">0.249256</span>   <span class="pl-c1">0.499407</span>    <span class="pl-c1">0.6179</span>  <span class="pl-k">-</span><span class="pl-c1">0.366058</span>   <span class="pl-c1">0.615018</span>
<span class="pl-c1">ns</span>(x,<span class="pl-c1">3</span>)  <span class="pl-k">-</span><span class="pl-c1">1.89278</span>     <span class="pl-c1">0.256808</span>  <span class="pl-k">-</span><span class="pl-c1">7.37043</span>     <span class="pl-k">&lt;</span><span class="pl-c1">1e-11</span>  <span class="pl-k">-</span><span class="pl-c1">2.39819</span>   <span class="pl-k">-</span><span class="pl-c1">1.38738</span> 
<span class="pl-c1">ns</span>(x,<span class="pl-c1">4</span>)   <span class="pl-c1">0.187169</span>    <span class="pl-c1">0.22469</span>    <span class="pl-c1">0.833012</span>    <span class="pl-c1">0.4055</span>  <span class="pl-k">-</span><span class="pl-c1">0.255023</span>   <span class="pl-c1">0.629361</span>
<span class="pl-c1">ns</span>(x,<span class="pl-c1">5</span>)  <span class="pl-k">-</span><span class="pl-c1">0.240554</span>    <span class="pl-c1">0.254986</span>  <span class="pl-k">-</span><span class="pl-c1">0.943404</span>    <span class="pl-c1">0.3462</span>  <span class="pl-k">-</span><span class="pl-c1">0.742369</span>   <span class="pl-c1">0.26126</span> 
─────────────────────────────────────────────────────────────────────────

julia<span class="pl-k">&gt;</span> <span class="pl-c1">predict</span>(fit2, DataFrames<span class="pl-k">.</span><span class="pl-c1">DataFrame</span>(x<span class="pl-k">=</span>newx)) <span class="pl-c"><span class="pl-c">#</span> unsafe predictions!</span>

<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Union{Missing, Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.29827578383334535</span>
  <span class="pl-c1">0.7976143687096604</span> 
  <span class="pl-c1">0.8964195213823501</span> 
  <span class="pl-c1">0.40991870738161984</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4167421148184624</span> 
 <span class="pl-k">-</span><span class="pl-c1">1.0400611367418444</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.7710405835443831</span> 
  <span class="pl-c1">0.1787886772299305</span></pre></div>
<p>For further details, see the discussion <a href="https://discourse.julialang.org/t/safe-predictions-using-formula-and-regression-splines/33057" rel="nofollow">here</a>.</p>
</article></div>