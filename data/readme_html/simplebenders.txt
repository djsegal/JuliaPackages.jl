<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplebendersjl" class="anchor" aria-hidden="true" href="#simplebendersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleBenders.jl</h1>
<p dir="auto"><a href="https://github.com/matbesancon/SimpleBenders.jl/actions"><img src="https://github.com/matbesancon/SimpleBenders.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/matbesancon/SimpleBenders.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0717ceec5870421827400b97ae739e32c1038d135df59200852d0401a251c541/68747470733a2f2f636f6465636f762e696f2f67682f6d6174626573616e636f6e2f53696d706c6542656e646572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/matbesancon/SimpleBenders.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A simple implementation of the Benders decomposition method with JuMP.</p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">A good start with this package is the corresponding <a href="https://matbesancon.github.io/post/2019-05-08-simple-benders/" rel="nofollow">blog post</a>.
The implementation is far from smart since it uses the matrix form of the subproblem.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto"><code>SimpleBenders.jl</code> assumes a problem of the form:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="min f(y) + &lt;c, x&gt;
s.t.
G(x) ∈ S
A x + D y ≥ b
x ≥ 0"><pre class="notranslate"><code>min f(y) + &lt;c, x&gt;
s.t.
G(x) ∈ S
A x + D y ≥ b
x ≥ 0
</code></pre></div>
<p dir="auto">The projected-out sub-problem requires data stored in a dedicated structure:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct SubProblemData
    b::Vector{Float64}
    D::Matrix{Float64}
    A::Matrix{Float64}
    c::Vector{Float64}
end"><pre><span class="pl-k">struct</span> SubProblemData
    b<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    D<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>
    A<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>
    c<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The different bindings correspond to the problem presented above.
Users can build their upper-level model <code>m</code> with the <code>y</code> variables, and define
the objective on the main variables: <code>f(y)</code>. The main function, <code>benders_optimize!</code>
can be called with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="benders_optimize!(m::Model, y::Vector{VariableRef}, sd::SubProblemData, sp_optimizer, f)"><pre><span class="pl-c1">benders_optimize!</span>(m<span class="pl-k">::</span><span class="pl-c1">Model</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{VariableRef}</span>, sd<span class="pl-k">::</span><span class="pl-c1">SubProblemData</span>, sp_optimizer, f)</pre></div>
<p dir="auto">Which will solve the problem using Benders decomposition.</p>
</article></div>