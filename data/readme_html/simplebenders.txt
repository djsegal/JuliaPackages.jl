<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplebendersjl" class="anchor" aria-hidden="true" href="#simplebendersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleBenders.jl</h1>
<p><a href="https://travis-ci.org/matbesancon/SimpleBenders.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4103e7bb9fc42e7094072bbd3761992a29b85488/68747470733a2f2f7472617669732d63692e6f72672f6d6174626573616e636f6e2f53696d706c6542656e646572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/matbesancon/SimpleBenders.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A simple implementation of the Benders decomposition method with JuMP.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>A good start with this package is the corresponding <a href="https://matbesancon.github.io/post/2019-05-08-simple-benders/" rel="nofollow">blog post</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>SimpleBenders.jl</code> assumes a problem of the form:</p>
<pre><code>min f(y) + &lt;c, x&gt;
s.t.
G(x) ∈ S
A x + D y ≥ b
x ≥ 0
</code></pre>
<p>The projected-out sub-problem requires data stored in a dedicated structure:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> SubProblemData
    b<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    D<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>
    A<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>
    c<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
<span class="pl-k">end</span></pre></div>
<p>The different bindings correspond to the problem presented above.
Users can build their upper-level model <code>m</code> with the <code>y</code> variables, and define
the objective on the main variables: <code>f(y)</code>. The main function, <code>benders_optimize!</code>
can be called with:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">benders_optimize!</span>(m<span class="pl-k">::</span><span class="pl-c1">Model</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{VariableRef}</span>, sd<span class="pl-k">::</span><span class="pl-c1">SubProblemData</span>, sp_optimizer, f)</pre></div>
<p>Which will solve the problem using Benders decomposition.</p>
</article></div>