<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://juliamltools.github.io/EuclidGraphs.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-euclidgraphsjl" class="anchor" aria-hidden="true" href="#euclidgraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EuclidGraphs.jl</h1>
<h2 dir="auto"><a id="user-content-example-1-basic-graph" class="anchor" aria-hidden="true" href="#example-1-basic-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Basic graph</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EuclidGraphs
nodes = [(0,-10),(0,70),(75,21),(49,-70),(-49,-70),(-75,21)]
g1 = EuclidGraph(nodes, adj_mat=rand(0:1, 6, 6))
g1() # Renders in VSCode
write(&quot;basic.svg&quot;, g1())"><pre><span class="pl-k">using</span> EuclidGraphs
nodes <span class="pl-k">=</span> [(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">10</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">70</span>),(<span class="pl-c1">75</span>,<span class="pl-c1">21</span>),(<span class="pl-c1">49</span>,<span class="pl-k">-</span><span class="pl-c1">70</span>),(<span class="pl-k">-</span><span class="pl-c1">49</span>,<span class="pl-k">-</span><span class="pl-c1">70</span>),(<span class="pl-k">-</span><span class="pl-c1">75</span>,<span class="pl-c1">21</span>)]
g1 <span class="pl-k">=</span> <span class="pl-c1">EuclidGraph</span>(nodes, adj_mat<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">6</span>, <span class="pl-c1">6</span>))
<span class="pl-c1">g1</span>() <span class="pl-c"><span class="pl-c">#</span> Renders in VSCode</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>basic.svg<span class="pl-pds">"</span></span>, <span class="pl-c1">g1</span>())</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/basic.svg"><img width="400px" src="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/basic.svg" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-example-2-styled-graph" class="anchor" aria-hidden="true" href="#example-2-styled-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Styled graph</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g2 = EuclidGraph(
    [(0,-10),(0,70),(75,21),(49,-70),(-49,-70),(-75,21)], 
    adj_mat=rand(0:1, 6, 6),
    node_style=(node) -&gt; NodeStyle(
        inner_fill=(isone(node.features[node.idx]) ? &quot;green&quot; : &quot;#ccc&quot;),
        font_color=&quot;white&quot;,
        stroke=(iseven(node.idx) ? &quot;blue&quot; : &quot;#333&quot;),
        value=(node) -&gt; nothing,
    ),
    edge_style=(edge) -&gt; EdgeStyle(
        directed_stroke=edge.features[edge.idx],
        arrow_color=edge.features[edge.idx],
        undirected_stroke=&quot;#ccc&quot;,
    ),
)
num_edges = length(filter(isone, g2.adj_mat))
num_nodes = size(g2.adj_mat, 1)
node_features = zeros(Int, num_nodes)
node_features[rand(1:num_nodes)] = 1
edge_features = rand([&quot;red&quot;, &quot;#273E5B&quot;, &quot;#273E5B&quot;, &quot;#9493F2&quot;], num_edges)
g2(node_features, edge_features) # Renders in VSCode
write(&quot;styled.svg&quot;, g2(node_features, edge_features))"><pre>g2 <span class="pl-k">=</span> <span class="pl-c1">EuclidGraph</span>(
    [(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">10</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">70</span>),(<span class="pl-c1">75</span>,<span class="pl-c1">21</span>),(<span class="pl-c1">49</span>,<span class="pl-k">-</span><span class="pl-c1">70</span>),(<span class="pl-k">-</span><span class="pl-c1">49</span>,<span class="pl-k">-</span><span class="pl-c1">70</span>),(<span class="pl-k">-</span><span class="pl-c1">75</span>,<span class="pl-c1">21</span>)], 
    adj_mat<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">6</span>, <span class="pl-c1">6</span>),
    node_style<span class="pl-k">=</span>(node) <span class="pl-k">-&gt;</span> <span class="pl-c1">NodeStyle</span>(
        inner_fill<span class="pl-k">=</span>(<span class="pl-c1">isone</span>(node<span class="pl-k">.</span>features[node<span class="pl-k">.</span>idx]) <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>#ccc<span class="pl-pds">"</span></span>),
        font_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>white<span class="pl-pds">"</span></span>,
        stroke<span class="pl-k">=</span>(<span class="pl-c1">iseven</span>(node<span class="pl-k">.</span>idx) <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>#333<span class="pl-pds">"</span></span>),
        value<span class="pl-k">=</span>(node) <span class="pl-k">-&gt;</span> <span class="pl-c1">nothing</span>,
    ),
    edge_style<span class="pl-k">=</span>(edge) <span class="pl-k">-&gt;</span> <span class="pl-c1">EdgeStyle</span>(
        directed_stroke<span class="pl-k">=</span>edge<span class="pl-k">.</span>features[edge<span class="pl-k">.</span>idx],
        arrow_color<span class="pl-k">=</span>edge<span class="pl-k">.</span>features[edge<span class="pl-k">.</span>idx],
        undirected_stroke<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#ccc<span class="pl-pds">"</span></span>,
    ),
)
num_edges <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">filter</span>(isone, g2<span class="pl-k">.</span>adj_mat))
num_nodes <span class="pl-k">=</span> <span class="pl-c1">size</span>(g2<span class="pl-k">.</span>adj_mat, <span class="pl-c1">1</span>)
node_features <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, num_nodes)
node_features[<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>num_nodes)] <span class="pl-k">=</span> <span class="pl-c1">1</span>
edge_features <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>#273E5B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>#273E5B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>#9493F2<span class="pl-pds">"</span></span>], num_edges)
<span class="pl-c1">g2</span>(node_features, edge_features) <span class="pl-c"><span class="pl-c">#</span> Renders in VSCode</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>styled.svg<span class="pl-pds">"</span></span>, <span class="pl-c1">g2</span>(node_features, edge_features))</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/styled.svg"><img width="400px" src="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/styled.svg" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-example-3-the-euclidgraphsjl-logo" class="anchor" aria-hidden="true" href="#example-3-the-euclidgraphsjl-logo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: The EuclidGraphs.jl logo</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="logo = EuclidGraph(
    [(-50,0),(0,75),(0,25),(0,-25),(0,-75),(50, 25),(50,-25)], 
    node_style=(node) -&gt; NodeStyle(
        inner_fill=node.features[node.idx],
        value=nothing,
    ),
    edge_style=(edge) -&gt; EdgeStyle(stroke=&quot;#ccc&quot;),
    fully_connected=false,
)
addbiedges!(logo, [(1,3),(1,2),(1,5),(1,4),(2,6),(5,7),(4,6),(3,7)])
node_features = [&quot;#4162D9&quot;,&quot;#389825&quot;,&quot;#9558B2&quot;,&quot;#9558B2&quot;,&quot;#389825&quot;,&quot;#CB3C33&quot;,&quot;#CB3C33&quot;]
svg = logo(node_features; svg_style=&quot;background-color:transparent;&quot;) # Renders in VSCode
write(&quot;logo.svg&quot;, svg)"><pre>logo <span class="pl-k">=</span> <span class="pl-c1">EuclidGraph</span>(
    [(<span class="pl-k">-</span><span class="pl-c1">50</span>,<span class="pl-c1">0</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">75</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">25</span>),(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">25</span>),(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">75</span>),(<span class="pl-c1">50</span>, <span class="pl-c1">25</span>),(<span class="pl-c1">50</span>,<span class="pl-k">-</span><span class="pl-c1">25</span>)], 
    node_style<span class="pl-k">=</span>(node) <span class="pl-k">-&gt;</span> <span class="pl-c1">NodeStyle</span>(
        inner_fill<span class="pl-k">=</span>node<span class="pl-k">.</span>features[node<span class="pl-k">.</span>idx],
        value<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
    ),
    edge_style<span class="pl-k">=</span>(edge) <span class="pl-k">-&gt;</span> <span class="pl-c1">EdgeStyle</span>(stroke<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#ccc<span class="pl-pds">"</span></span>),
    fully_connected<span class="pl-k">=</span><span class="pl-c1">false</span>,
)
<span class="pl-c1">addbiedges!</span>(logo, [(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>),(<span class="pl-c1">2</span>,<span class="pl-c1">6</span>),(<span class="pl-c1">5</span>,<span class="pl-c1">7</span>),(<span class="pl-c1">4</span>,<span class="pl-c1">6</span>),(<span class="pl-c1">3</span>,<span class="pl-c1">7</span>)])
node_features <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>#4162D9<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>#389825<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>#9558B2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>#9558B2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>#389825<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>#CB3C33<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>#CB3C33<span class="pl-pds">"</span></span>]
svg <span class="pl-k">=</span> <span class="pl-c1">logo</span>(node_features; svg_style<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>background-color:transparent;<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Renders in VSCode</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>logo.svg<span class="pl-pds">"</span></span>, svg)</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/logo.svg"><img width="400px" src="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/logo.svg" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-example-4-shapes" class="anchor" aria-hidden="true" href="#example-4-shapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 4: Shapes</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="shapes = [pole triangle square; pentagon hexagon heptagon; octagon nonagon decagon]
svgs = [g(; svg_width=200, svg_height=200) for g in EuclidGraph.(shapes; fully_connected=true)]
grid = SVG(svgs) # Renders in VSCode
write(&quot;grid.svg&quot;, grid)"><pre>shapes <span class="pl-k">=</span> [pole triangle square; pentagon hexagon heptagon; octagon nonagon decagon]
svgs <span class="pl-k">=</span> [<span class="pl-c1">g</span>(; svg_width<span class="pl-k">=</span><span class="pl-c1">200</span>, svg_height<span class="pl-k">=</span><span class="pl-c1">200</span>) <span class="pl-k">for</span> g <span class="pl-k">in</span> <span class="pl-c1">EuclidGraph</span>.(shapes; fully_connected<span class="pl-k">=</span><span class="pl-c1">true</span>)]
grid <span class="pl-k">=</span> <span class="pl-c1">SVG</span>(svgs) <span class="pl-c"><span class="pl-c">#</span> Renders in VSCode</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>grid.svg<span class="pl-pds">"</span></span>, grid)</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/grid.svg"><img width="500px" src="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/grid.svg" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-example-5-gnn-feature-visualization" class="anchor" aria-hidden="true" href="#example-5-gnn-feature-visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 5: GNN feature visualization</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="num_nodes = 6
xgraph = EuclidGraph(ngon(num_nodes), fully_connected=true)
targetgraph = EuclidGraph(
    ngon(num_nodes),
    adj_mat=rand([0,0,0,1], num_nodes, num_nodes),
    node_style=(node) -&gt; NodeStyle(
        stroke=&quot;#ccc&quot;,
        inner_fill=(isone(node.features[node.idx]) ? &quot;green&quot; : &quot;#fff&quot;),
        value=(node) -&gt; nothing
    ),
    edge_style=(edge) -&gt; EdgeStyle(
        stroke=&quot;green&quot;,
    )
)
y_features = ŷ_features = rand([0,0,1], num_nodes)
x = SVG([SVGText(&quot;X&quot;), xgraph()])
y = SVG([SVGText(&quot;Y&quot;), targetgraph(y_features)])
ŷ = SVG([SVGText(&quot;Ŷ&quot;), targetgraph(ŷ_features)])
gnn = SVG([x,y,ŷ], dims=2) # Renders in VSCode
write(&quot;gnn.svg&quot;, gnn)"><pre>num_nodes <span class="pl-k">=</span> <span class="pl-c1">6</span>
xgraph <span class="pl-k">=</span> <span class="pl-c1">EuclidGraph</span>(<span class="pl-c1">ngon</span>(num_nodes), fully_connected<span class="pl-k">=</span><span class="pl-c1">true</span>)
targetgraph <span class="pl-k">=</span> <span class="pl-c1">EuclidGraph</span>(
    <span class="pl-c1">ngon</span>(num_nodes),
    adj_mat<span class="pl-k">=</span><span class="pl-c1">rand</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>], num_nodes, num_nodes),
    node_style<span class="pl-k">=</span>(node) <span class="pl-k">-&gt;</span> <span class="pl-c1">NodeStyle</span>(
        stroke<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#ccc<span class="pl-pds">"</span></span>,
        inner_fill<span class="pl-k">=</span>(<span class="pl-c1">isone</span>(node<span class="pl-k">.</span>features[node<span class="pl-k">.</span>idx]) <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>#fff<span class="pl-pds">"</span></span>),
        value<span class="pl-k">=</span>(node) <span class="pl-k">-&gt;</span> <span class="pl-c1">nothing</span>
    ),
    edge_style<span class="pl-k">=</span>(edge) <span class="pl-k">-&gt;</span> <span class="pl-c1">EdgeStyle</span>(
        stroke<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>,
    )
)
y_features <span class="pl-k">=</span> ŷ_features <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>], num_nodes)
x <span class="pl-k">=</span> <span class="pl-c1">SVG</span>([<span class="pl-c1">SVGText</span>(<span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>), <span class="pl-c1">xgraph</span>()])
y <span class="pl-k">=</span> <span class="pl-c1">SVG</span>([<span class="pl-c1">SVGText</span>(<span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>), <span class="pl-c1">targetgraph</span>(y_features)])
ŷ <span class="pl-k">=</span> <span class="pl-c1">SVG</span>([<span class="pl-c1">SVGText</span>(<span class="pl-s"><span class="pl-pds">"</span>Ŷ<span class="pl-pds">"</span></span>), <span class="pl-c1">targetgraph</span>(ŷ_features)])
gnn <span class="pl-k">=</span> <span class="pl-c1">SVG</span>([x,y,ŷ], dims<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Renders in VSCode</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>gnn.svg<span class="pl-pds">"</span></span>, gnn)</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/gnn.svg"><img width="500px" src="https://raw.githubusercontent.com/JuliaMLTools/EuclidGraphs.jl/main/docs/src/assets/gnn.svg" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add EuclidGraphs"><pre class="notranslate"><code>pkg&gt; add EuclidGraphs
</code></pre></div>
<p dir="auto">Or, equivalently, via the <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;EuclidGraphs&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EuclidGraphs<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Status</h2>
<p dir="auto">The package is tested against, and being developed for, Julia <code>1.8</code> and above on Linux, macOS, and Windows.</p>
</article></div>