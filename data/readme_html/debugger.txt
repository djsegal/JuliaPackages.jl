<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-debugger" class="anchor" aria-hidden="true" href="#debugger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugger</h1>
<p><em>A Julia debugger.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaDebug/Debugger.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b13578de2de354bd12a2d055e80f843c6db2c9a3/68747470733a2f2f7472617669732d63692e6f72672f4a756c696144656275672f44656275676765722e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaDebug/Debugger.jl.svg?branch=master" style="max-width:100%;"></a>  <a href="https://codecov.io/gh/JuliaDebug/Debugger.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed52889eedc18dc27ce0877ad17019bac4316610/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696144656275672f44656275676765722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaDebug/Debugger.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p><strong>Note</strong>: If you are looking for the docs for the Juno IDE debugger, see <a href="https://docs.junolab.org/latest/man/debugging/" rel="nofollow">this link instead</a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>]add Debugger</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<h2><a id="user-content-starting-the-debugger-interface" class="anchor" aria-hidden="true" href="#starting-the-debugger-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Starting the debugger interface</h2>
<p>The debug interface is entered using the <code>@enter</code> macro:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Debugger

<span class="pl-k">function</span> <span class="pl-en">foo</span>(n)
    x <span class="pl-k">=</span> n<span class="pl-k">+</span><span class="pl-c1">1</span>
    ((BigInt[<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>])<span class="pl-k">^</span>x)[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
<span class="pl-k">end</span>

<span class="pl-c1">@enter</span> <span class="pl-c1">foo</span>(<span class="pl-c1">20</span>)</pre></div>
<p>This interface allows for manipulating program execution, such as stepping in and
out of functions, line stepping, showing local variables, setting breakpoints and evaluating code in
the context of functions.</p>
<h2><a id="user-content-debugger-commands" class="anchor" aria-hidden="true" href="#debugger-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugger commands</h2>
<p>Below, square brackets denote optional arguments.</p>
<p>Misc:</p>
<ul>
<li><code>o</code>: open the current line in an editor</li>
<li><code>q</code>: quit the debugger, returning <code>nothing</code></li>
<li><code>C</code>: toggle compiled mode</li>
<li><code>L</code>: toggle showing lowered code instead of source code</li>
<li><code>+</code>/<code>-</code>: increase / decrease the number of lines of source code shown</li>
</ul>
<p>Stepping (basic):</p>
<ul>
<li><code>n</code>: step to the next line</li>
<li><code>u [i::Int]</code>: step until line <code>i</code> or the next line past the current line</li>
<li><code>s</code>: step into the next call</li>
<li><code>so</code>: step out of the current call</li>
<li><code>c</code>: continue execution until a breakpoint is hit</li>
<li><code>f [i::Int]</code>: go to the <code>i</code>-th function in the call stack (stepping is only possible in the function at the top of the call stack)</li>
<li><code>up/down [i::Int]</code> go up or down one or <code>i</code> functions in the call stack</li>
</ul>
<p>Stepping (advanced):</p>
<ul>
<li><code>nc</code>: step to the next call</li>
<li><code>se</code>: step one expression step</li>
<li><code>si</code>: same as <code>se</code> but step into a call if a call is the next expression</li>
<li><code>sg</code>: step into a generated function</li>
</ul>
<p>Querying:</p>
<ul>
<li><code>st</code>: show the "status" (current function, source code and current expression to run)</li>
<li><code>bt</code>: show a backtrace</li>
<li><code>fr [i::Int]</code>: show all variables in the current or <code>i</code>th frame</li>
</ul>
<p>Evaluation:</p>
<ul>
<li><code>`stuff</code>: run <code>stuff</code> in the current function's context</li>
<li><code>w</code>
<ul>
<li><code>w add expr</code>: add an expression to the watch list</li>
<li><code>w</code>: show all watch expressions evaluated in the current function's context</li>
<li><code>w rm [i::Int]</code>: remove all or the <code>i</code>:th watch expression</li>
</ul>
</li>
</ul>
<p>Breakpoints:</p>
<ul>
<li><code>bp</code>
<ul>
<li><code>bp add</code>
<ul>
<li><code>bp add "file.jl":line [cond]</code>: add a breakpoint att file <code>file.jl</code> on line <code>line</code> with condition <code>cond</code></li>
<li><code>bp add func [:line] [cond]</code>: add a breakpoint to function <code>func</code> at line <code>line</code> (defaulting to first line)  with condition <code>cond</code></li>
<li><code>bp add func(::Float64, Int)[:line] [cond]</code>: add a breakpoint to methods matching the signature at line <code>line</code> (defaulting to first line)  with condition <code>cond</code></li>
<li><code>bp add func(x, y)[:line] [cond]</code>: add a breakpoint to the method matching the types of the local variable <code>x</code>, <code>y</code> etc with condition <code>cond</code></li>
<li><code>bp add line [cond]</code> add a breakpoint to <code>line</code> of the file of the current function  with condition <code>cond</code></li>
</ul>
</li>
<li><code>bp</code> show all breakpoints</li>
<li><code>bp rm [i::Int]</code>: remove all or the <code>i</code>:th breakpoint</li>
<li><code>bp toggle [i::Int]</code>: toggle all or the <code>i</code>:th breakpoint</li>
<li><code>bp disable [i::Int]</code>: disable all or the <code>i</code>:th breakpoint</li>
<li><code>bp enable [i::Int]</code>: enable all or the <code>i</code>:th breakpoint</li>
<li><code>bp on/off</code>
<ul>
<li><code>bp on/off error</code> - turn on or off break on error</li>
<li><code>bp on/off throw</code> - turn on or off break on throw</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>An empty command will execute the previous command.</p>
<h3><a id="user-content-breakpoints" class="anchor" aria-hidden="true" href="#breakpoints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Breakpoints</h3>
<p>To add and manipulate breakpoints, either the <code>bp add</code> command in the debug interface or the JuliaInterpreter breakpoint API, documented <a href="https://juliadebug.github.io/JuliaInterpreter.jl/latest/dev_reference/#Breakpoints-1" rel="nofollow">here</a>
can be used.</p>
<p>It is common to want to run a function until a breakpoint is hit. Therefore, the "shortcut macro" <code>@run</code> is provided which is equivalent
of starting the debug mode with <code>@enter</code> and then executing the continue command (<code>c</code>):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Debugger

julia<span class="pl-k">&gt;</span> <span class="pl-c1">breakpoint</span>(abs);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@run</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2.0</span>)
Hit breakpoint<span class="pl-k">:</span>
In <span class="pl-c1">abs</span>(x) at float<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">522</span>
<span class="pl-k">&gt;</span><span class="pl-c1">522</span>  <span class="pl-en">abs</span>(x<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> <span class="pl-c1">abs_float</span>(x)

About to run<span class="pl-k">:</span> (abs_float)(<span class="pl-c1">2.0</span>)
<span class="pl-c1">1</span><span class="pl-k">|</span>debug<span class="pl-k">&gt;</span> bt
[<span class="pl-c1">1</span>] <span class="pl-c1">abs</span>(x) at float<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">522</span>
  <span class="pl-k">|</span> x<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">sin</span>(x) at special<span class="pl-k">/</span>trig<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">30</span>
  <span class="pl-k">|</span> x<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
  <span class="pl-k">|</span> T<span class="pl-k">::</span><span class="pl-c1">DataType</span> <span class="pl-k">=</span> Float64</pre></div>
<h4><a id="user-content-breakpoint-on-error" class="anchor" aria-hidden="true" href="#breakpoint-on-error"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Breakpoint on error</h4>
<p>It is possible to halt execution when an error is thrown. This is done by calling the exported function <code>break_on(:error)</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Debugger

julia<span class="pl-k">&gt;</span> <span class="pl-c1">break_on</span>(<span class="pl-c1">:error</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>() <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>[<span class="pl-c1">2</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@run</span> <span class="pl-c1">f</span>()
Breaking <span class="pl-k">for</span> error<span class="pl-k">:</span>
ERROR<span class="pl-k">:</span> <span class="pl-c1">StringIndexError</span>(<span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)
In <span class="pl-c1">string_index_err</span>(s, i) at strings<span class="pl-k">/</span>string<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">12</span>
<span class="pl-k">&gt;</span><span class="pl-c1">12</span>  <span class="pl-c1">@noinline</span> <span class="pl-en">string_index_err</span>(s<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, i<span class="pl-k">::</span><span class="pl-c1">Integer</span>) <span class="pl-k">=</span>

About to run<span class="pl-k">:</span> (throw)(<span class="pl-c1">StringIndexError</span>(<span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>))
<span class="pl-c1">1</span><span class="pl-k">|</span>debug<span class="pl-k">&gt;</span> bt
[<span class="pl-c1">1</span>] <span class="pl-c1">string_index_err</span>(s, i) at strings<span class="pl-k">/</span>string<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">12</span>
  <span class="pl-k">|</span> s<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>
  <span class="pl-k">|</span> i<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">getindex_continued</span>(s, i, u) at strings<span class="pl-k">/</span>string<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">218</span>
  <span class="pl-k">|</span> s<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>
  <span class="pl-k">|</span> i<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>
  <span class="pl-k">|</span> u<span class="pl-k">::</span><span class="pl-c1">UInt32</span> <span class="pl-k">=</span> <span class="pl-c1">0xb1000000</span>
  <span class="pl-k">|</span> val<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>
[<span class="pl-c1">3</span>] <span class="pl-c1">getindex</span>(s, i) at strings<span class="pl-k">/</span>string<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">211</span>
  <span class="pl-k">|</span> s<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>
  <span class="pl-k">|</span> i<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>
  <span class="pl-k">|</span> b<span class="pl-k">::</span><span class="pl-c1">UInt8</span> <span class="pl-k">=</span> <span class="pl-c1">0xb1</span>
  <span class="pl-k">|</span> u<span class="pl-k">::</span><span class="pl-c1">UInt32</span> <span class="pl-k">=</span> <span class="pl-c1">0xb1000000</span>
[<span class="pl-c1">4</span>] <span class="pl-c1">f</span>() at REPL[<span class="pl-c1">5</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> JuliaInterpreter<span class="pl-k">.</span><span class="pl-c1">break_off</span>(<span class="pl-c1">:error</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@run</span> <span class="pl-c1">f</span>()
ERROR<span class="pl-k">:</span> <span class="pl-c1">StringIndexError</span>(<span class="pl-s"><span class="pl-pds">"</span>αβ<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)
Stacktrace<span class="pl-k">:</span>
[<span class="pl-k">...</span>]</pre></div>
<h3><a id="user-content-place-breakpoints-in-source-code" class="anchor" aria-hidden="true" href="#place-breakpoints-in-source-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Place breakpoints in source code</h3>
<p>It is sometimes more convenient to choose in the source code when to break. This is done for instance in Matlab/Octave with <code>keyboard</code>, and in R with <code>browser()</code>. You can use the <code>@bp</code> macro to do this:</p>
<pre><code>julia&gt; using Debugger

julia&gt; function f(x)
           if x &lt; 0
               @bp
           else
               println("All good!")
           end
       end
f (generic function with 1 method)

julia&gt; @run f(2)
All good!

julia&gt; @run f(-2)
Hit breakpoint:
In f(x) at REPL[6]:2
 1  function f(x)
 2      if x &lt; 0
&gt;3          @bp
 4      else
 5          println("All good!")
 6      end
 7  end

About to run: return
1|debug&gt; bt
[1] f(x) at REPL[6]:3
  | x::Int64 = -2
</code></pre>
<h3><a id="user-content-compiled-mode" class="anchor" aria-hidden="true" href="#compiled-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Compiled mode</h3>
<p>In order to fully support breakpoints, the debugger interprets all code, even code that is stepped over.
Currently, there are cases where the interpreter is too slow for this to be feasible.
A workaround is to use "compiled mode" which is toggled by pressing <code>C</code> in the debug REPL mode (note the change of prompt color).
When using compiled mode, code that is stepped over will be executed
by the normal julia compiler and run just as fast as normally.
The drawback is of course that breakpoints in code that is stepped over are missed.</p>
<h3><a id="user-content-syntax-highlighting" class="anchor" aria-hidden="true" href="#syntax-highlighting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Syntax highlighting</h3>
<p>The source code preview is syntax highlighted and this highlighting has some options.
The theme can be set by calling <code>Debugger.set_theme(theme)</code> where <code>theme</code> is a <a href="https://juliadocs.github.io/Highlights.jl/stable/demo/themes/" rel="nofollow">Highlights.jl theme</a>.
It can be completely turned off or alternatively, different quality settings for the colors might be chosen by calling <code>Debugger.set_highlight(opt)</code> where <code>opt</code> is a <code>Debugger.HighlightOption</code> enum.
The choices are <code>HIGHLIGHT_OFF</code> <code>HIGHLIGHT_SYSTEM_COLORS</code>, <code>HIGHLIGHT_256_COLORS</code>, <code>HIGHLIGHT_24_BIT</code>. System colors works in pretty much all terminals, 256 in most terminals (with the exception of Windows)
and 24 bit in some terminals.</p>
</article></div>