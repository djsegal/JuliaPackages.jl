<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-muellerjl" class="anchor" aria-hidden="true" href="#muellerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mueller.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaPhysics/Mueller.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/JuliaPhysics/Mueller.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/66f0b4a2bdca5c0ba00e51f74b27d991d7f2c263a0ee24ec3831f0eccddc5ad7/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4d2f4d75656c6c65722e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/M/Mueller.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPhysics/Mueller.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/79c2b467333be3babc8f1c2f66fc7c4aad04f4ff3924dea3a6ce3c10cc61b400/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506879736963732f4d75656c6c65722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaPhysics/Mueller.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/d275d502dd10b4824a9d1e487b7114321c23af0cfbd2f066a89a9faad0dbc711/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4a756c6961506879736963732f4d75656c6c65722e6a6c3f636f6c6f723d79656c6c6f77" alt="License" data-canonical-src="https://img.shields.io/github/license/JuliaPhysics/Mueller.jl?color=yellow" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliaphysics.github.io/Mueller.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliaphysics.github.io/Mueller.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Mueller_calculus" rel="nofollow">Mueller matrices</a> for common optical components such as polarizers, phase retarders, and attenuating filters. The matrices are built using <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> for speed and can be arbitrarily rotated.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt;] add Mueller"><pre>julia<span class="pl-k">&gt;</span>] add Mueller</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Import the library like any other Julia package</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Mueller"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Mueller</pre></div>
<p dir="auto">Mueller.jl provides building blocks for common components. Here I generate the Mueller matrix for an optical system comprising three linear polarizers, each rotated 45 degrees from the one prior. Notice the matrix multiplication is inverse the order of the optical components.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; M = linear_polarizer(π/2) * linear_polarizer(π/4) * linear_polarizer(0)
4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):
  0.125         0.125        0.0  0.0
 -0.125        -0.125        0.0  0.0
 -1.53081e-17  -1.53081e-17  0.0  0.0
  0.0           0.0          0.0  0.0"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">linear_polarizer</span>(π<span class="pl-k">/</span><span class="pl-c1">2</span>) <span class="pl-k">*</span> <span class="pl-c1">linear_polarizer</span>(π<span class="pl-k">/</span><span class="pl-c1">4</span>) <span class="pl-k">*</span> <span class="pl-c1">linear_polarizer</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> StaticArrays<span class="pl-k">.</span>SMatrix{<span class="pl-c1">4</span>, <span class="pl-c1">4</span>, Float64, <span class="pl-c1">16</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">:</span>
  <span class="pl-c1">0.125</span>         <span class="pl-c1">0.125</span>        <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.125</span>        <span class="pl-k">-</span><span class="pl-c1">0.125</span>        <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">1.53081e-17</span>  <span class="pl-k">-</span><span class="pl-c1">1.53081e-17</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>           <span class="pl-c1">0.0</span>          <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">you'll notice some roundoff due to the finite precision of <code>π/4</code>, you can avoid this by using <a href="https://github.com/PainterQubits/Unitful.jl">Unitful.jl</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Unitful: °

julia&gt; M = linear_polarizer(90°) * linear_polarizer(45°) * linear_polarizer(0°)
4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):
  0.125   0.125  0.0  0.0
 -0.125  -0.125  0.0  0.0
  0.0     0.0    0.0  0.0
  0.0     0.0    0.0  0.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful<span class="pl-k">:</span> °

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">linear_polarizer</span>(<span class="pl-c1">90</span>°) <span class="pl-k">*</span> <span class="pl-c1">linear_polarizer</span>(<span class="pl-c1">45</span>°) <span class="pl-k">*</span> <span class="pl-c1">linear_polarizer</span>(<span class="pl-c1">0</span>°)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> StaticArrays<span class="pl-k">.</span>SMatrix{<span class="pl-c1">4</span>, <span class="pl-c1">4</span>, Float64, <span class="pl-c1">16</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">:</span>
  <span class="pl-c1">0.125</span>   <span class="pl-c1">0.125</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.125</span>  <span class="pl-k">-</span><span class="pl-c1">0.125</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">let's see what happens when completely unpolarized light passes through these filters. We can represent light using the <a href="https://en.wikipedia.org/wiki/Stokes_parameters" rel="nofollow">Stokes vector</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; S = [1, 0, 0, 0] # I, Q, U, V
4-element Vector{Int64}:
 1
 0
 0
 0

julia&gt; Sp = M * S
4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):
  0.125
 -0.125
  0.0
  0.0"><pre>julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] <span class="pl-c"><span class="pl-c">#</span> I, Q, U, V</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> Sp <span class="pl-k">=</span> M <span class="pl-k">*</span> S
<span class="pl-c1">4</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">4</span>, Float64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">4</span>)<span class="pl-k">:</span>
  <span class="pl-c1">0.125</span>
 <span class="pl-k">-</span><span class="pl-c1">0.125</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">the output vector has 1/8 the total intensity of the original light, and it is 1/8 polarized in the -Q direction (vertical). This demonstrates the somewhat paradoxical quantum behavior of light (<a href="https://en.wikipedia.org/wiki/Bell%27s_theorem" rel="nofollow">Bell's Theroem</a>, inspired by <a href="https://www.youtube.com/watch?v=zcqZHYo7ONs" rel="nofollow">this video</a>): even though the light passes through two orthogonal linear polarizers (the 0° and 90° ones) because the wave equation operates probabilistically, 50% passes through the first polarizer, 50% of that light passes through the 45° polarizer, and then 50% of the remaining light passes through the final polarizer, combining to 1/8 of the original light.</p>
<h2 dir="auto"><a id="user-content-contributing-and-support" class="anchor" aria-hidden="true" href="#contributing-and-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing and Support</h2>
<p dir="auto">If you would like to contribute, feel free to open a <a href="https://github.com/JuliaPhysics/Mueller.jl/pulls">pull request</a>. If you want to discuss something before contributing, head over to <a href="https://github.com/JuliaPhysics/Mueller.jl/discussions">discussions</a> and join or open a new topic. If you're having problems with something, please open an <a href="https://github.com/JuliaPhysics/Mueller.jl/issues">issue</a>.</p>
</article></div>