<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-errorfreearithmeticjl" class="anchor" aria-hidden="true" href="#errorfreearithmeticjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ErrorfreeArithmetic.jl</h1>
<p>Error-free transformations are used to get results with extra accuracy.</p>
<h4><a id="user-content-copyright--2016-2020-by-jeffrey-sarnoff--released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2016-2020-by-jeffrey-sarnoff--released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Copyright Â© 2016-2020 by Jeffrey Sarnoff.  Released under the MIT License.</h4>
<hr>
<p><a href="https://travis-ci.org/JeffreySarnoff/ErrorfreeArithmetic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/58a01e837d8142a1921e7434374cec7cc4e4a0a1/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f4572726f726672656541726974686d657469632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/ErrorfreeArithmetic.jl.svg?branch=master" style="max-width:100%;"></a></p>
<hr>
<h2><a id="user-content-exports" class="anchor" aria-hidden="true" href="#exports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>exports</h2>
<ul>
<li>The number that begins a function name always matches the number of values returned.
<ul>
<li>the values returned are of descending magnitude and non-overlapping when added.</li>
</ul>
</li>
<li>The number that begins a function name often matches the number of arguments expected.
<ul>
<li><code>two_inv</code> and <code>two_sqrt</code> are single argument functions returning two values</li>
</ul>
</li>
</ul>
<p><em>These are error-free transformations.</em></p>
<ul>
<li><code>two_sum</code>, <code>two_diff</code>, <code>two_prod</code></li>
<li><code>two_square</code>, <code>two_cube</code></li>
<li><code>three_sum</code>, <code>three_diff</code>, <code>three_prod</code></li>
<li><code>two_fma</code>, <code>three_fma</code></li>
<li><code>four_sum</code>, <code>four_diff</code></li>
</ul>
<p><em>These are error-free transformations with magnitude sorted arguments.</em></p>
<ul>
<li><code>two_hilo_sum</code>, <code>two_lohi_sum</code></li>
<li><code>two_hilo_diff</code>, <code>two_lohi_diff</code></li>
<li><code>three_hilo_sum</code>, <code>three_lohi_sum</code></li>
<li><code>three_hilo_diff</code>, <code>three_lohi_diff</code></li>
<li><code>four_hilo_sum</code>, <code>four_lohi_sum</code></li>
<li><code>four_hilo_diff</code>, <code>four_lohi_diff</code></li>
</ul>
<p><em>These are least-error transformations, as close to error-free as possible.</em></p>
<ul>
<li><code>two_inv</code>, <code>two_sqrt</code></li>
<li><code>two_div</code></li>
</ul>
<h3><a id="user-content-naming" class="anchor" aria-hidden="true" href="#naming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>naming</h3>
<p>The routines named with the prefix <code>two_</code> return a two-tuple holding <code>(high_order_part, low_order_part)</code>.</p>
<p>Those named with the prefix <code>three_</code> return a three-tuple holding <code>(high_part, mid_part, low_part)</code>.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>introduction</h2>
<p>Error-free transformations return a tuple of the nominal result and the residual from the result (the left-over part).</p>
<p>Error-free addition sums two floating point values (a, b) and returns two floating point values (hi, lo) such that:</p>
<ul>
<li><code>(+)(a, b) == hi</code></li>
<li><code>|hi| &gt; |lo|</code> and <code>(+)(hi, lo) == hi</code>  <em>abs(hi) and abs(lo) do not share significant bits</em></li>
</ul>
<p>Here is how it is done:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">add_errorfree</span>(a<span class="pl-k">::</span><span class="pl-c1">T</span>, b<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Union{Float64, Float32}</span>
    a_plus_b_hipart <span class="pl-k">=</span> a <span class="pl-k">+</span> b
    b_asthe_summand <span class="pl-k">=</span> a_plus_b_hipart <span class="pl-k">-</span> a
    a_plus_b_lopart <span class="pl-k">=</span> (a <span class="pl-k">-</span> (a_plus_b_hipart <span class="pl-k">-</span> b_asthe_summand)) <span class="pl-k">+</span> (b <span class="pl-k">-</span> b_asthe_summand)
    <span class="pl-k">return</span> a_plus_b_hipart, a_plus_b_lopart
<span class="pl-k">end</span>

a <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>golden<span class="pl-k">^</span><span class="pl-c1">2</span>)                           <span class="pl-c"><span class="pl-c">#</span>   0.3819_6602f0</span>
b <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(pi<span class="pl-k">^</span><span class="pl-c1">3</span>)                                 <span class="pl-c"><span class="pl-c">#</span>  31.0062_7700f0</span>
a_plus_b <span class="pl-k">=</span> a <span class="pl-k">+</span> b                                  <span class="pl-c"><span class="pl-c">#</span>  31.3882_4300f0</span>

hi, lo <span class="pl-k">=</span> <span class="pl-c1">add_errorfree</span>(a,b)                       <span class="pl-c"><span class="pl-c">#</span> (31.3882_4300f0, 3.8743_0270f-7)</span>

a_plus_b <span class="pl-k">==</span> hi                                    <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">abs</span>(hi) <span class="pl-k">&gt;</span> <span class="pl-c1">abs</span>(lo) <span class="pl-k">&amp;&amp;</span> hi <span class="pl-k">+</span> lo <span class="pl-k">==</span> hi                <span class="pl-c"><span class="pl-c">#</span> true</span>
</pre></div>
<p>The <code>lo</code> part is a portion of the accurate value, it is (most of) the residuum that the <code>hi</code> part could not represent.<br>
The <code>hi</code> part runs out of significant bits before the all of the accurate value is represented.  We can see this:</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>golden<span class="pl-k">^</span><span class="pl-c1">2</span>)                           <span class="pl-c"><span class="pl-c">#</span>   0.3819_6602f0</span>
b <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(pi<span class="pl-k">^</span><span class="pl-c1">3</span>)                                 <span class="pl-c"><span class="pl-c">#</span>  31.0062_7700f0</span>

hi, lo <span class="pl-k">=</span> <span class="pl-c1">add_errorfree</span>(a,b)                       <span class="pl-c"><span class="pl-c">#</span> (31.3882_4300f0, 3.8743_0270f-7)</span>

a_plus_b_accurate <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(a) <span class="pl-k">+</span> <span class="pl-c1">BigFloat</span>(b)
lo_accurate  <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(a_plus_b_accurate <span class="pl-k">-</span> hi)

lo <span class="pl-k">==</span> lo_accurate                                 <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h2><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>use</h2>
<p>This package is intended to be used in the support of other work.<br>
All routines expect Float64 or Float32 or Float16 values.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>references</h2>
<p>Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi<br>
Accurate Sum and Dot Product<br>
SIAM J. Sci. Comput., 26(6), 1955â1988.<br>
Published online: 25 July 2006<br>
<a href="http://dx.doi.org/10.1137/030601818" rel="nofollow">DOI: 10.1137/030601818</a></p>
<p>Stef Graillat, ValÃ©rie MÃ©nissier-Morain<br>
Error-Free Transformations in Real and Complex Floating Point Arithmetic<br>
International Symposium on Nonlinear Theory and its Applications (NOLTA'07), Sep 2007, Vancouver, Canada.<br>
Proceedings of International Symposium on Nonlinear Theory and its Applications (NOLTA'07), pp.341-344.<br>
<a href="https://hal.archives-ouvertes.fr/hal-01306229" rel="nofollow">https://hal.archives-ouvertes.fr/hal-01306229</a></p>
<p>Sylvie Boldo, Stef Graillat, and Jean-Michel Muller<br>
On the robustness of the 2Sum and Fast2Sum algorithms<br>
ACM Transactions on Mathematical Software, Association for Computing Machinery, 2017<br>
<a href="https://hal.inria.fr/ensl-01310023" rel="nofollow">https://hal.inria.fr/ensl-01310023</a></p>
</article></div>