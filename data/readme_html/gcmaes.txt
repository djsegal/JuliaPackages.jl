<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gradient-based-covariance-matrix-adaptation-evolutionary-strategy-for-real-blackbox--optimization" class="anchor" aria-hidden="true" href="#gradient-based-covariance-matrix-adaptation-evolutionary-strategy-for-real-blackbox--optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gradient-based Covariance Matrix Adaptation Evolutionary Strategy for Real Blackbox  Optimization</h1>
<p><a href="https://travis-ci.com/AStupidBear/GCMAES.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/79afcb99bb41df59fd8295720a9512ae1209a8d7c63e82f9ed4c9f130f6d8e91/68747470733a2f2f7472617669732d63692e636f6d2f41537475706964426561722f47434d4145532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/AStupidBear/GCMAES.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/AStupidBear/GCMAES-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d2fd63e0d10ba15f9f8e6e27213b2281b1ff310eb918749b65d692163cfd1358/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f41537475706964426561722f47434d4145532e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/AStupidBear/GCMAES.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/AStupidBear/GCMAES.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b6fd982399b0c785347d46826dfd27838758505be2ea07f21b317e02856edaa0/68747470733a2f2f636f6465636f762e696f2f67682f41537475706964426561722f47434d4145532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/AStupidBear/GCMAES.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add GCMAES&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add GCMAES<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>use low level BLAS operations to ensure performance</li>
<li>use <code>Elemental</code> to do distributed eigendecomposition, which is crutial for high dimensional (&gt;10000) problem</li>
<li>compatible with <code>julia</code>'s native parallelism</li>
<li>compatible with <code>MPI.jl</code>, therefore suitable to be run on clusters without good TCP connections</li>
<li>handling constraints and transformations</li>
</ul>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GCMAES
D = 2000            # dimension of x
x0 = fill(0.3, D)   # initial x
σ0 = 0.2            # initial search variance
lo = fill(-5.12, D) # lower bound for each dimension
hi = fill(5.12, D)  # upper bound for each dimension
"><pre><span class="pl-k">using</span> GCMAES
D <span class="pl-k">=</span> <span class="pl-c1">2000</span>            <span class="pl-c"><span class="pl-c">#</span> dimension of x</span>
x0 <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">0.3</span>, D)   <span class="pl-c"><span class="pl-c">#</span> initial x</span>
σ0 <span class="pl-k">=</span> <span class="pl-c1">0.2</span>            <span class="pl-c"><span class="pl-c">#</span> initial search variance</span>
lo <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">5.12</span>, D) <span class="pl-c"><span class="pl-c">#</span> lower bound for each dimension</span>
hi <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">5.12</span>, D)  <span class="pl-c"><span class="pl-c">#</span> upper bound for each dimension</span></pre></div>
<p>Minimize a blackbox function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="rastrigin(x) = 10length(x) + sum(x.^2 .- 10 .* cos.(2π .* x))
xmin, fmin, status = GCMAES.minimize(rastrigin, x0, σ0, lo, hi, maxiter = 200)
"><pre><span class="pl-en">rastrigin</span>(x) <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-c1">length</span>(x) <span class="pl-k">+</span> <span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span> <span class="pl-k">.-</span> <span class="pl-c1">10</span> <span class="pl-k">.*</span> <span class="pl-c1">cos</span>.(<span class="pl-c1">2</span>π <span class="pl-k">.*</span> x))
xmin, fmin, status <span class="pl-k">=</span> GCMAES<span class="pl-k">.</span><span class="pl-c1">minimize</span>(rastrigin, x0, σ0, lo, hi, maxiter <span class="pl-k">=</span> <span class="pl-c1">200</span>)</pre></div>
<p>If the optimization terminate prematurely before <code>maxiter</code> is reached, <code>status</code> will be <code>1</code>, otherwise <code>0</code>.</p>
<p>A checkpoint file named <code>CMAES.bson</code> will be created in the current working directory during optimization, which will be loaded back to initilize <code>CMAESOpt</code> if dimensions are equal.</p>
<h2><a id="user-content-incoporating-gradient" class="anchor" aria-hidden="true" href="#incoporating-gradient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Incoporating Gradient</h2>
<p>You can speed up the optimization process by providing additional gradient infomation if the loss function is differentialble but noisy. The evolution part can help escaping local minima while the gradient part can speed up convergence in non-noisy regions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ForwardDiff
∇rastrigin(x) = ForwardDiff.gradient(rastrigin, x)
GCMAES.minimize((rastrigin, ∇rastrigin), x0, σ0, lo, hi, maxiter = 200)
"><pre><span class="pl-k">using</span> ForwardDiff
<span class="pl-en">∇rastrigin</span>(x) <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">gradient</span>(rastrigin, x)
GCMAES<span class="pl-k">.</span><span class="pl-c1">minimize</span>((rastrigin, ∇rastrigin), x0, σ0, lo, hi, maxiter <span class="pl-k">=</span> <span class="pl-c1">200</span>)</pre></div>
<p>You can also enable <code>autodiff</code> and then <code>GCMAES</code> will internally use <code>Zygote</code> to do the gradient calculation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Zygote
GCMAES.minimize((rastrigin, ∇rastrigin), x0, σ0, lo, hi, maxiter = 200, autodiff = true)
"><pre><span class="pl-k">using</span> Zygote
GCMAES<span class="pl-k">.</span><span class="pl-c1">minimize</span>((rastrigin, ∇rastrigin), x0, σ0, lo, hi, maxiter <span class="pl-k">=</span> <span class="pl-c1">200</span>, autodiff <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-parallel-usage" class="anchor" aria-hidden="true" href="#parallel-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel Usage</h2>
<p>Just simply add <code>@mpirun</code> before <code>GCMAES.minimize</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# ....
@mpirun GCMAES.minimize(...)
# ....
"><pre><span class="pl-c"><span class="pl-c">#</span> ....</span>
<span class="pl-c1">@mpirun</span> GCMAES<span class="pl-k">.</span><span class="pl-c1">minimize</span>(<span class="pl-k">...</span>)
<span class="pl-c"><span class="pl-c">#</span> ....</span></pre></div>
<p>Then you can use <code>mpirun -n N julia ...</code> or <code>julia -p N ...</code> to start your job.</p>
</article></div>