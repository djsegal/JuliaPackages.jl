<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fitsiojl" class="anchor" aria-hidden="true" href="#fitsiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FITSIO.jl</h1>
<p>Flexible Image Transport System (FITS) support for Julia</p>
<p><a href="https://github.com/juliaastro/FITSIO.jl/actions"><img src="https://github.com/juliaastro/FITSIO.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/f79a6a9b90f858092a892f165e889f8eb1d6b3ba078a1fc5527fd01438881cac/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f462f46495453494f2e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/F/FITSIO.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/juliaastro/fitsio.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d737170134484d1590959a5d2600c19f76307d1ea4f68b11475b7e006b72f736/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961617374726f2f66697473696f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5341394547307a387074" alt="codecov" data-canonical-src="https://codecov.io/gh/juliaastro/fitsio.jl/branch/master/graph/badge.svg?token=SA9EG0z8pt" style="max-width:100%;"></a></p>
<p><a href="http://juliaastro.github.io/FITSIO.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="http://juliaastro.github.io/FITSIO.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width:100%;"></a></p>
<p><strong>Note:</strong> The <code>Libcfitsio</code> submodule has been moved to <a href="https://github.com/JuliaAstro/CFITSIO.jl">CFITSIO.jl</a> and will be deprecated in a future release.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>For more in-depth usage and examples, see <a href="http://juliaastro.github.io/FITSIO.jl/stable/" rel="nofollow">the documentation</a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; using FITSIO

julia&gt; f = FITS(&quot;file.fits&quot;)
File: file.fits
Mode: &quot;w&quot; (read-write)
HDUs: Num  Name  Type
      1          Image
      2          Table

julia&gt; f[1]
File: file.fits
HDU: 1
Type: Image
Datatype: Float64
Datasize: (800, 800)

# read an image from disk
julia&gt; data = read(f[1]);  

# read just a subset of image
julia&gt; data = read(f[1], :, 790:end);  

# Get info about binary table
julia&gt; f[2]
File: file.fits
HDU: 2
Type: Table
Rows: 20
Columns: Name  Size  Type    TFORM  
         col2        String  5A     
         col1        Int64   1K     

# Read a column from the table:
 julia&gt; data = read(f[2], &quot;col1&quot;)

# Read the entire header into memory
julia&gt; header = read_header(f[1]);

julia&gt; header[&quot;NAXIS1&quot;]  # get value by keyword
800

julia&gt; header[4]  # get value by position
800

# Read single keys into memory
julia&gt; read_key(f[1], 4) # by position
(&quot;NAXIS1&quot;,800,&quot;length of data axis 1&quot;)

julia&gt; read_key(f[1], &quot;NAXIS1&quot;) # by keyword
(800,&quot;length of data axis 1&quot;)

# write data to file
julia&gt; FITS(&quot;new_file.fits&quot;, &quot;w&quot;) do f
           write(f, data)
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FITSIO

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">FITS</span>(<span class="pl-s"><span class="pl-pds">"</span>file.fits<span class="pl-pds">"</span></span>)
File<span class="pl-k">:</span> file<span class="pl-k">.</span>fits
Mode<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span> (read<span class="pl-k">-</span>write)
HDUs<span class="pl-k">:</span> Num  Name  Type
      <span class="pl-c1">1</span>          Image
      <span class="pl-c1">2</span>          Table

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">1</span>]
File<span class="pl-k">:</span> file<span class="pl-k">.</span>fits
HDU<span class="pl-k">:</span> <span class="pl-c1">1</span>
Type<span class="pl-k">:</span> Image
Datatype<span class="pl-k">:</span> Float64
Datasize<span class="pl-k">:</span> (<span class="pl-c1">800</span>, <span class="pl-c1">800</span>)

<span class="pl-c"><span class="pl-c">#</span> read an image from disk</span>
julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">read</span>(f[<span class="pl-c1">1</span>]);  

<span class="pl-c"><span class="pl-c">#</span> read just a subset of image</span>
julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">read</span>(f[<span class="pl-c1">1</span>], :, <span class="pl-c1">790</span><span class="pl-k">:</span>end);  

<span class="pl-c"><span class="pl-c">#</span> Get info about binary table</span>
julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">2</span>]
File<span class="pl-k">:</span> file<span class="pl-k">.</span>fits
HDU<span class="pl-k">:</span> <span class="pl-c1">2</span>
Type<span class="pl-k">:</span> Table
Rows<span class="pl-k">:</span> <span class="pl-c1">20</span>
Columns<span class="pl-k">:</span> Name  Size  Type    TFORM  
         col2        String  <span class="pl-c1">5</span>A     
         col1        Int64   <span class="pl-c1">1</span>K     

<span class="pl-c"><span class="pl-c">#</span> Read a column from the table:</span>
 julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">read</span>(f[<span class="pl-c1">2</span>], <span class="pl-s"><span class="pl-pds">"</span>col1<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Read the entire header into memory</span>
julia<span class="pl-k">&gt;</span> header <span class="pl-k">=</span> <span class="pl-c1">read_header</span>(f[<span class="pl-c1">1</span>]);

julia<span class="pl-k">&gt;</span> header[<span class="pl-s"><span class="pl-pds">"</span>NAXIS1<span class="pl-pds">"</span></span>]  <span class="pl-c"><span class="pl-c">#</span> get value by keyword</span>
<span class="pl-c1">800</span>

julia<span class="pl-k">&gt;</span> header[<span class="pl-c1">4</span>]  <span class="pl-c"><span class="pl-c">#</span> get value by position</span>
<span class="pl-c1">800</span>

<span class="pl-c"><span class="pl-c">#</span> Read single keys into memory</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">read_key</span>(f[<span class="pl-c1">1</span>], <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> by position</span>
(<span class="pl-s"><span class="pl-pds">"</span>NAXIS1<span class="pl-pds">"</span></span>,<span class="pl-c1">800</span>,<span class="pl-s"><span class="pl-pds">"</span>length of data axis 1<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">read_key</span>(f[<span class="pl-c1">1</span>], <span class="pl-s"><span class="pl-pds">"</span>NAXIS1<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> by keyword</span>
(<span class="pl-c1">800</span>,<span class="pl-s"><span class="pl-pds">"</span>length of data axis 1<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> write data to file</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">FITS</span>(<span class="pl-s"><span class="pl-pds">"</span>new_file.fits<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
           <span class="pl-c1">write</span>(f, data)
       <span class="pl-k">end</span></pre></div>
</article></div>