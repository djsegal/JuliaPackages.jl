<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reservoircomputingjl" class="anchor" aria-hidden="true" href="#reservoircomputingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReservoirComputing.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/ReservoirComputing/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/2204.05117" rel="nofollow"><img src="https://camo.githubusercontent.com/8abfbc03b134250e23610d1e10ba67888a9864569b2517efeae3328d9bf66a9e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323230342e30353131372d3030623330302e737667" alt="arXiv" data-canonical-src="https://img.shields.io/badge/arXiv-2204.05117-00b300.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/ReservoirComputing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e8ce192fc8ec75c9fba8b48c6a511698cc63bd2fa9f9e4edd2a6ae495bb1fd02/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f5265736572766f6972436f6d707574696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/ReservoirComputing.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ReservoirComputing.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/ReservoirComputing.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://buildkite.com/julialang/reservoircomputing-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f51c3a19bce64801e667fff681687f36968472484f2366d3948ca070273714f9/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f64623866393162383961313061643739626264316439666462313334306536663636303261316330656439343936643464302e737667" alt="Build status" data-canonical-src="https://badge.buildkite.com/db8f91b89a10ad79bbd1d9fdb1340e6f6602a1c0ed9496d4d0.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/144242116-8243f58a-5ac6-4e0e-88d5-3409f00e20b4.png"><img src="https://user-images.githubusercontent.com/10376688/144242116-8243f58a-5ac6-4e0e-88d5-3409f00e20b4.png" alt="rc_full_logo_large_white_cropped" style="max-width: 100%;"></a></p>
<p dir="auto">ReservoirComputing.jl provides an efficient, modular and easy to use implementation of Reservoir Computing models such as Echo State Networks (ESNs). For information on using this package please refer to the <a href="https://docs.sciml.ai/ReservoirComputing/stable/" rel="nofollow">stable documentation</a>. Use the <a href="https://docs.sciml.ai/ReservoirComputing/dev/" rel="nofollow">in-development documentation</a> to take a look at at not yet released features.</p>
<h2 dir="auto"><a id="user-content-quick-example" class="anchor" aria-hidden="true" href="#quick-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Example</h2>
<p dir="auto">To illustrate the workflow of this library we will showcase how it is possible to train an ESN to learn the dynamics of the Lorenz system. As a first step we will need to gather the data. For the <code>Generative</code> prediction we need the target data to be one step ahead of the training data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ReservoirComputing, OrdinaryDiffEq

#lorenz system parameters
u0 = [1.0,0.0,0.0]                       
tspan = (0.0,200.0)                      
p = [10.0,28.0,8/3]

#define lorenz system
function lorenz(du,u,p,t)
    du[1] = p[1]*(u[2]-u[1])
    du[2] = u[1]*(p[2]-u[3]) - u[2]
    du[3] = u[1]*u[2] - p[3]*u[3]
end
#solve and take data
prob = ODEProblem(lorenz, u0, tspan, p)  
data = solve(prob, ABM54(), dt=0.02)   

shift = 300
train_len = 5000
predict_len = 1250

#one step ahead for generative prediction
input_data = data[:, shift:shift+train_len-1]
target_data = data[:, shift+1:shift+train_len]

test = data[:,shift+train_len:shift+train_len+predict_len-1]"><pre><span class="pl-k">using</span> ReservoirComputing, OrdinaryDiffEq

<span class="pl-c"><span class="pl-c">#</span>lorenz system parameters</span>
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]                       
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">200.0</span>)                      
p <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>,<span class="pl-c1">28.0</span>,<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>]

<span class="pl-c"><span class="pl-c">#</span>define lorenz system</span>
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(du,u,p,t)
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> p[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(p[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
    du[<span class="pl-c1">3</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> p[<span class="pl-c1">3</span>]<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span>solve and take data</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz, u0, tspan, p)  
data <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">ABM54</span>(), dt<span class="pl-k">=</span><span class="pl-c1">0.02</span>)   

shift <span class="pl-k">=</span> <span class="pl-c1">300</span>
train_len <span class="pl-k">=</span> <span class="pl-c1">5000</span>
predict_len <span class="pl-k">=</span> <span class="pl-c1">1250</span>

<span class="pl-c"><span class="pl-c">#</span>one step ahead for generative prediction</span>
input_data <span class="pl-k">=</span> data[:, shift<span class="pl-k">:</span>shift<span class="pl-k">+</span>train_len<span class="pl-k">-</span><span class="pl-c1">1</span>]
target_data <span class="pl-k">=</span> data[:, shift<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>shift<span class="pl-k">+</span>train_len]

test <span class="pl-k">=</span> data[:,shift<span class="pl-k">+</span>train_len<span class="pl-k">:</span>shift<span class="pl-k">+</span>train_len<span class="pl-k">+</span>predict_len<span class="pl-k">-</span><span class="pl-c1">1</span>]</pre></div>
<p dir="auto">Now that we have the data we can initialize the ESN with the chosen parameters. Given that this is a quick example we are going to change the least amount of possible parameters. For more detailed examples and explanations of the functions please refer to the documentation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="res_size = 300
esn = ESN(input_data; 
          reservoir = RandSparseReservoir(res_size, radius=1.2, sparsity=6/res_size),
          input_layer = WeightedLayer(),
          nla_type = NLAT2())"><pre>res_size <span class="pl-k">=</span> <span class="pl-c1">300</span>
esn <span class="pl-k">=</span> <span class="pl-c1">ESN</span>(input_data; 
          reservoir <span class="pl-k">=</span> <span class="pl-c1">RandSparseReservoir</span>(res_size, radius<span class="pl-k">=</span><span class="pl-c1">1.2</span>, sparsity<span class="pl-k">=</span><span class="pl-c1">6</span><span class="pl-k">/</span>res_size),
          input_layer <span class="pl-k">=</span> <span class="pl-c1">WeightedLayer</span>(),
          nla_type <span class="pl-k">=</span> <span class="pl-c1">NLAT2</span>())</pre></div>
<p dir="auto">The echo state network can now be trained and tested. If not specified, the training will always be Ordinary Least Squares regression. The full range of training methods is detailed in the documentation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="output_layer = train(esn, target_data)
output = esn(Generative(predict_len), output_layer)"><pre>output_layer <span class="pl-k">=</span> <span class="pl-c1">train</span>(esn, target_data)
output <span class="pl-k">=</span> <span class="pl-c1">esn</span>(<span class="pl-c1">Generative</span>(predict_len), output_layer)</pre></div>
<p dir="auto">The data is returned as a matrix, <code>ouput</code> in the code above, that contains the predicted trajectories. The results can now be easily plotted (for the actual script used to obtain this plot plese refer to the documentation):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
plot(transpose(output),layout=(3,1), label=&quot;predicted&quot;)
plot!(transpose(test),layout=(3,1), label=&quot;actual&quot;)"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">transpose</span>(output),layout<span class="pl-k">=</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>predicted<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">transpose</span>(test),layout<span class="pl-k">=</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>actual<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/166227371-8bffa318-5c49-401f-9c64-9c71980cb3f7.png"><img src="https://user-images.githubusercontent.com/10376688/166227371-8bffa318-5c49-401f-9c64-9c71980cb3f7.png" alt="lorenz_basic" style="max-width: 100%;"></a></p>
<p dir="auto">One can also visualize the phase space of the attractor and the comparison with the actual one:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(transpose(output)[:,1], transpose(output)[:,2], transpose(output)[:,3], label=&quot;predicted&quot;)
plot!(transpose(test)[:,1], transpose(test)[:,2], transpose(test)[:,3], label=&quot;actual&quot;)"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">transpose</span>(output)[:,<span class="pl-c1">1</span>], <span class="pl-c1">transpose</span>(output)[:,<span class="pl-c1">2</span>], <span class="pl-c1">transpose</span>(output)[:,<span class="pl-c1">3</span>], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>predicted<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">transpose</span>(test)[:,<span class="pl-c1">1</span>], <span class="pl-c1">transpose</span>(test)[:,<span class="pl-c1">2</span>], <span class="pl-c1">transpose</span>(test)[:,<span class="pl-c1">3</span>], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>actual<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/81470281-5a34b580-91ea-11ea-9eea-d2b266da19f4.png"><img src="https://user-images.githubusercontent.com/10376688/81470281-5a34b580-91ea-11ea-9eea-d2b266da19f4.png" alt="lorenz_attractor" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">If you use this library in your work, please cite:</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@article{JMLR:v23:22-0611,
  author  = {Francesco Martinuzzi and Chris Rackauckas and Anas Abdelrehim and Miguel D. Mahecha and Karin Mora},
  title   = {ReservoirComputing.jl: An Efficient and Modular Library for Reservoir Computing Models},
  journal = {Journal of Machine Learning Research},
  year    = {2022},
  volume  = {23},
  number  = {288},
  pages   = {1--8},
  url     = {http://jmlr.org/papers/v23/22-0611.html}
}"><pre><span class="pl-k">@article</span>{<span class="pl-en">JMLR:v23:22-0611</span>,
  <span class="pl-s">author</span>  = <span class="pl-s"><span class="pl-pds">{</span>Francesco Martinuzzi and Chris Rackauckas and Anas Abdelrehim and Miguel D. Mahecha and Karin Mora<span class="pl-pds">}</span></span>,
  <span class="pl-s">title</span>   = <span class="pl-s"><span class="pl-pds">{</span>ReservoirComputing.jl: An Efficient and Modular Library for Reservoir Computing Models<span class="pl-pds">}</span></span>,
  <span class="pl-s">journal</span> = <span class="pl-s"><span class="pl-pds">{</span>Journal of Machine Learning Research<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>    = <span class="pl-s"><span class="pl-pds">{</span>2022<span class="pl-pds">}</span></span>,
  <span class="pl-s">volume</span>  = <span class="pl-s"><span class="pl-pds">{</span>23<span class="pl-pds">}</span></span>,
  <span class="pl-s">number</span>  = <span class="pl-s"><span class="pl-pds">{</span>288<span class="pl-pds">}</span></span>,
  <span class="pl-s">pages</span>   = <span class="pl-s"><span class="pl-pds">{</span>1--8<span class="pl-pds">}</span></span>,
  <span class="pl-s">url</span>     = <span class="pl-s"><span class="pl-pds">{</span>http://jmlr.org/papers/v23/22-0611.html<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>