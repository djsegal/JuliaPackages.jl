<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.com/MartinuzziFrancesco/ReservoirComputing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7cdd91c6641c386d544182cad09f9bff1438d31f/68747470733a2f2f7472617669732d63692e636f6d2f4d617274696e757a7a694672616e636573636f2f5265736572766f6972436f6d707574696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MartinuzziFrancesco/ReservoirComputing.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/MartinuzziFrancesco/ReservoirComputing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5986df2ea8c3ca7a33210c9538038e3009322ccd/68747470733a2f2f636f6465636f762e696f2f67682f4d617274696e757a7a694672616e636573636f2f5265736572766f6972436f6d707574696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/MartinuzziFrancesco/ReservoirComputing.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-reservoircomputingjl" class="anchor" aria-hidden="true" href="#reservoircomputingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReservoirComputing.jl</h1>
<p>Reservoir computing utilities</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Usual Julia package installation. Run on the Julia terminal:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ReservoirComputing<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-echo-state-network-example" class="anchor" aria-hidden="true" href="#echo-state-network-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Echo State Network example</h2>
<p>This example and others are contained in the examples folder, that will be updated anytime I find new examples.
To show how to use some of the functions contained in ReservoirComputing.jl we will illustrate an example also shown in literature: reproducing the Lorenz attractor.
First we have to define the Lorenz system and the parameters we are going to use</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ParameterizedFunctions
<span class="pl-k">using</span> DifferentialEquations
     
<span class="pl-c"><span class="pl-c">#</span>lorenz system parameters</span>
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]                       
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">200.0</span>)                      
p <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>,<span class="pl-c1">28.0</span>,<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>]
<span class="pl-c"><span class="pl-c">#</span>define lorenz system </span>
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(du,u,p,t)
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> p[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(p[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
    du[<span class="pl-c1">3</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> p[<span class="pl-c1">3</span>]<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span>solve and take data</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz, u0, tspan, p)  
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">AB4</span>(), dt<span class="pl-k">=</span><span class="pl-c1">0.02</span>)   
v <span class="pl-k">=</span> sol<span class="pl-k">.</span>u
data <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">hcat</span>(v<span class="pl-k">...</span>))
shift <span class="pl-k">=</span> <span class="pl-c1">1</span>
train_len <span class="pl-k">=</span> <span class="pl-c1">5000</span>
predict_len <span class="pl-k">=</span> <span class="pl-c1">1250</span>
train <span class="pl-k">=</span> data[:, shift<span class="pl-k">:</span>shift<span class="pl-k">+</span>train_len<span class="pl-k">-</span><span class="pl-c1">1</span>]
test <span class="pl-k">=</span> data[:, train_len<span class="pl-k">:</span>train_len<span class="pl-k">+</span>predict_len<span class="pl-k">-</span><span class="pl-c1">1</span>]</pre></div>
<p>Now that we have the data we can initialize the parameters for the echo state network</p>
<div class="highlight highlight-source-julia"><pre>approx_res_size <span class="pl-k">=</span> <span class="pl-c1">300</span>
radius <span class="pl-k">=</span> <span class="pl-c1">1.2</span>
degree <span class="pl-k">=</span> <span class="pl-c1">6</span>
activation <span class="pl-k">=</span> tanh
sigma <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
beta <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
alpha <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
nonlin_alg <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>T2<span class="pl-pds">"</span></span></pre></div>
<p>Now it's time to initiate the echo state network</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ReservoirComputing
esn <span class="pl-k">=</span> <span class="pl-c1">ESN</span>(approx_res_size,
    train,
    degree,
    radius,
    activation, <span class="pl-c"><span class="pl-c">#</span>default = tanh</span>
    sigma, <span class="pl-c"><span class="pl-c">#</span>default = 0.1</span>
    alpha, <span class="pl-c"><span class="pl-c">#</span>default = 1.0</span>
    beta, <span class="pl-c"><span class="pl-c">#</span>default = 0.0</span>
    nonlin_alg <span class="pl-c"><span class="pl-c">#</span>default = "None"</span>
    )</pre></div>
<p>The echo state network can now be trained and tested:</p>
<div class="highlight highlight-source-julia"><pre>W_out <span class="pl-k">=</span> <span class="pl-c1">ESNtrain</span>(esn)
output <span class="pl-k">=</span> <span class="pl-c1">ESNpredict</span>(esn, predict_len, W_out)</pre></div>
<p>ouput is the matrix with the predicted trajectories that can be easily plotted</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">transpose</span>(output),layout<span class="pl-k">=</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>predicted<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">transpose</span>(test),layout<span class="pl-k">=</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>actual<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/10376688/72996946-dbaf3600-3dfb-11ea-8d5d-3a7356780b5e.png"><img src="https://user-images.githubusercontent.com/10376688/72996946-dbaf3600-3dfb-11ea-8d5d-3a7356780b5e.png" alt="Lorenz" style="max-width:100%;"></a></p>
<p>One can also visualize the phase space of the attractor and the comparison with the actual one:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">transpose</span>(output)[:,<span class="pl-c1">1</span>], <span class="pl-c1">transpose</span>(output)[:,<span class="pl-c1">2</span>], <span class="pl-c1">transpose</span>(output)[:,<span class="pl-c1">3</span>], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>predicted<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">transpose</span>(test)[:,<span class="pl-c1">1</span>], <span class="pl-c1">transpose</span>(test)[:,<span class="pl-c1">2</span>], <span class="pl-c1">transpose</span>(test)[:,<span class="pl-c1">3</span>], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>actual<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/10376688/72997095-1913c380-3dfc-11ea-9702-a9734a375b96.png"><img src="https://user-images.githubusercontent.com/10376688/72997095-1913c380-3dfc-11ea-9702-a9734a375b96.png" alt="attractor" style="max-width:100%;"></a></p>
<p>The results are in line with the literature.</p>
<p>The code is partly based on the original <a href="http://www.scholarpedia.org/article/Echo_state_network" rel="nofollow">paper</a> by Jaeger, with a few construction changes found in the literature. The reservoir implementation is based on the code used in the following <a href="https://arxiv.org/pdf/1906.08829.pdf" rel="nofollow">paper</a>, as well as the non linear transformation algorithms T1, T2 and T3, the first of which was introduced <a href="https://www.researchgate.net/publication/322457145_Model-Free_Prediction_of_Large_Spatiotemporally_Chaotic_Systems_from_Data_A_Reservoir_Computing_Approach" rel="nofollow">here</a>.</p>
<h2><a id="user-content-to-do-list" class="anchor" aria-hidden="true" href="#to-do-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To do list</h2>
<ul>
<li>Documentation</li>
<li>Implement variable number of outputs as in <a href="https://aip.scitation.org/doi/10.1063/1.4979665" rel="nofollow">this</a> paper</li>
<li>Implement different systems for the reservoir (like <a href="https://arxiv.org/pdf/1410.0162.pdf" rel="nofollow">this</a> paper)</li>
</ul>
</article></div>