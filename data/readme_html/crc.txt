<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/andrewcooke/CRC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/426efc1eb37fd7769bd62c2b08b9bf13a2b9824eda9dd90bb325a932779f355a/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f4352432e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/CRC.jl.png" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/andrewcooke/CRC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3ec299abd8e47ec120b42d25ff881e74883de736f4680dca91bf5f9371a34784/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e64726577636f6f6b652f4352432e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/andrewcooke/CRC.jl/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-crc" class="anchor" aria-hidden="true" href="#crc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CRC</h1>
<p>This is a <a href="http://julialang.org/" rel="nofollow">Julia</a> module for calculating Cyclic
Redundancy Checksums (CRCs).</p>
<ul>
<li>
<p>All the algorithms in the <a href="http://reveng.sourceforge.net/crc-catalogue" rel="nofollow">RevEng
Catalogue</a> are supported.</p>
</li>
<li>
<p>New algorithms can be easily added.</p>
</li>
<li>
<p>Calculation can be direct or via cached tables.</p>
</li>
<li>
<p>Speed is comparable to optimized C (checked against CRC32 in libz).</p>
</li>
<li>
<p>Only arrays of bytes are accepted as data (it's certainly possible
to handle arbitrary sized sequences; previous versions did this, but
it complicated the code for little practical gain so I removed it -
please contact me if you want me to add it back).</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-calculate-a-crc-32-sum" class="anchor" aria-hidden="true" href="#calculate-a-crc-32-sum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Calculate a CRC-32 Sum</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using CRC

julia&gt; crc32 = crc(CRC_32)
(anonymous function)

julia&gt; crc32(&quot;123456789&quot;)
0xcbf43926
"><pre><code>julia&gt; using CRC

julia&gt; crc32 = crc(CRC_32)
(anonymous function)

julia&gt; crc32("123456789")
0xcbf43926
</code></pre></div>
<p>The function <code>crc()</code> constructs a lookup table, which is cached in the
returned function (here, <code>crc32()</code>).  Re-using <code>crc32()</code> to calculate a series
of CRCs is therefore more efficient than starting with <code>crc()</code> each time.</p>
<p>The returned function can also be called with a file handle, so calling
<code>open(crc32, file)</code> will return the checksum of <code>file</code>.</p>
<h3><a id="user-content-within-your-program" class="anchor" aria-hidden="true" href="#within-your-program"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Within Your Program</h3>
<p>The same example as above, but inside your program, would look like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using CRC
...
crc32 = crc(CRC_32)  # create our own crc function, just once
...
function some_func(...)
    ...
    x = crc32(data)  # use the crc function created above, many times
    ...
end
...
"><pre><code>using CRC
...
crc32 = crc(CRC_32)  # create our own crc function, just once
...
function some_func(...)
    ...
    x = crc32(data)  # use the crc function created above, many times
    ...
end
...
</code></pre></div>
<h3><a id="user-content-force-direct-tableless-calculation" class="anchor" aria-hidden="true" href="#force-direct-tableless-calculation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Force Direct (Tableless) Calculation</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; crc(CRC_32, tables=NoTables)(&quot;123456789&quot;)
0xcbf43926
"><pre><code>julia&gt; crc(CRC_32, tables=NoTables)("123456789")
0xcbf43926
</code></pre></div>
<h3><a id="user-content-define-an-algorithm" class="anchor" aria-hidden="true" href="#define-an-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define an Algorithm</h3>
<p>For example,
<a href="http://reveng.sourceforge.net/crc-catalogue/1-15.htm#crc.cat-bits.7" rel="nofollow">CRC-7</a>,
catalogued as <code>width=7 poly=0x09 init=0x00 refin=false refout=false xorout=0x00 check=0x75 name="CRC-7"</code></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; myCRC7 = spec(7, 0x09, 0x00, false, false, 0x00, 0x75)
CRC.Spec{UInt8}(7, 0x09, 0x00, false, false, 0x00, 0x75)

julia&gt; @assert crc(myCRC7)(CHECK) == myCRC7.check
"><pre><code>julia&gt; myCRC7 = spec(7, 0x09, 0x00, false, false, 0x00, 0x75)
CRC.Spec{UInt8}(7, 0x09, 0x00, false, false, 0x00, 0x75)

julia&gt; @assert crc(myCRC7)(CHECK) == myCRC7.check
</code></pre></div>
<p>Of course, this is already defined:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; CRC_7
CRC.Spec{UInt8}(7, 0x09, 0x00, false, false, 0x00, 0x75)
"><pre><code>julia&gt; CRC_7
CRC.Spec{UInt8}(7, 0x09, 0x00, false, false, 0x00, 0x75)
</code></pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Julia can be downloaded <a href="http://julialang.org/downloads/" rel="nofollow">here</a>.  Once
Julia is working you can install this package using:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;CRC&quot;)
"><pre><code>julia&gt; Pkg.add("CRC")
</code></pre></div>
<h2><a id="user-content-versions" class="anchor" aria-hidden="true" href="#versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Versions</h2>
<ul>
<li>
<p>4.0.0 - 2020-11-27 Remove command line functionality.</p>
</li>
<li>
<p>3.1.0 - 2020-11-07 Update ArgParse dependency and add Project.toml.</p>
</li>
<li>
<p>3.0.0 - 2018-02-28 Update for Julia 1.0</p>
</li>
<li>
<p>1.2.0 - 2016-09-28 Drop Julia 0.3 support and switch to Libz.</p>
</li>
<li>
<p>1.1.0 - 2015-06-09 Small fixes for Julia 0.4, Travis + Coverage.</p>
</li>
<li>
<p>1.0.0 - 2014-06-31 Changed handler method so that a <code>String</code> is converted to
bytes (instead of being treated as a file path).  This <em>will break</em> existing
code that uses the current handler (sorry!), but I hope I don't have many
users (particularly users that are calling that method)!</p>
</li>
<li>
<p>0.2.0 - Initial release(s).</p>
</li>
</ul>
</article></div>