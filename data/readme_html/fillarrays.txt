<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fillarraysjl" class="anchor" aria-hidden="true" href="#fillarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FillArrays.jl</h1>
<p><a href="https://travis-ci.org/JuliaArrays/FillArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4e01a6038c9226b1afbb2a6bc0e8664e27ba84f8/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f46696c6c4172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/FillArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/FillArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4be69f11813ede4b4bbb27192cf5d198681ac90f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f46696c6c4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/FillArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Julia package to lazily representing matrices filled with a single entry,
as well as identity matrices.  This package exports the following types: <code>Eye</code>,
<code>Fill</code>, <code>Ones</code>, and <code>Zeros</code>.</p>
<p>The primary purpose of this package is to present a unified way of constructing
matrices. For example, to construct a 5-by-5 <code>CLArray</code> of all zeros, one would use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">CLArray</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>))</pre></div>
<p>Because <code>Zeros</code> is lazy, this can be accomplished on the GPU with no memory transfer.
Similarly, to construct a 5-by-5 <code>BandedMatrix</code> of all zeros with bandwidths <code>(1,2)</code>, one would use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">BandedMatrix</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Here are the matrix type4s:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">6</span> Zeros{Float64,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},Base<span class="pl-k">.</span>OneTo{Int64}}}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)
 <span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">6</span> Zeros{Int64,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},Base<span class="pl-k">.</span>OneTo{Int64}}}<span class="pl-k">:</span>
  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ones</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Ones{Int64,<span class="pl-c1">1</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64}}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">Eye</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>)
 <span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Diagonal{Int64,Ones{Int64,<span class="pl-c1">1</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64}}}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">5.0</span>f0, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Fill{Float32,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},Base<span class="pl-k">.</span>OneTo{Int64}}}<span class="pl-k">:</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">5.0</span></pre></div>
<p>They support conversion to other matrix types like <code>Array</code>, <code>SparseVector</code>, <code>SparseMatrix</code>, and <code>Diagonal</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SparseMatrixCSC</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> SparseMatrixCSC{Float64,Int64} with <span class="pl-c1">0</span> stored entries</pre></div>
<p>There is also support for offset index ranges:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ones</span>((<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>))
Ones{Float64,<span class="pl-c1">2</span>,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span></pre></div>
</article></div>