<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fillarraysjl" class="anchor" aria-hidden="true" href="#fillarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FillArrays.jl</h1>
<p><a href="https://github.com/JuliaArrays/FillArrays.jl/actions"><img src="https://github.com/JuliaArrays/FillArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/FillArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/541d4e919d5acb9e2519658d5aa06d944cea6cb2349ad985955255bd99f5d80d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f46696c6c4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/FillArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Julia package to lazily represent matrices filled with a single entry,
as well as identity matrices.  This package exports the following types:
<code>Eye</code>, <code>Fill</code>, <code>Ones</code>, <code>Zeros</code>, <code>Trues</code> and <code>Falses</code>.</p>
<p>The primary purpose of this package is to present a unified way of constructing
matrices. For example, to construct a 5-by-5 <code>CLArray</code> of all zeros, one would use</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; CLArray(Zeros(5,5))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">CLArray</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>))</pre></div>
<p>Because <code>Zeros</code> is lazy, this can be accomplished on the GPU with no memory transfer.
Similarly, to construct a 5-by-5 <code>BandedMatrix</code> of all zeros with bandwidths <code>(1,2)</code>, one would use</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; BandedMatrix(Zeros(5,5), (1, 2))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">BandedMatrix</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Here are the matrix types:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Zeros(5, 6)
5×6 Zeros{Float64}

julia&gt; Zeros{Int}(2, 3)
2×3 Zeros{Int64}

julia&gt; Ones{Int}(5)
5-element Ones{Int64}

julia&gt; Eye{Int}(5)
 5×5 Diagonal{Int64,Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}:
  1  ⋅  ⋅  ⋅  ⋅
  ⋅  1  ⋅  ⋅  ⋅
  ⋅  ⋅  1  ⋅  ⋅
  ⋅  ⋅  ⋅  1  ⋅
  ⋅  ⋅  ⋅  ⋅  1

julia&gt; Fill(7.0f0, 3, 2)
3×2 Fill{Float32}: entries equal to 7.0

julia&gt; Trues(2, 3)
2×3 Ones{Bool}

julia&gt; Falses(2)
2-element Zeros{Bool}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">6</span> Zeros{Float64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Zeros{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ones</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Ones{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Eye</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>)
 <span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Diagonal{Int64,Ones{Int64,<span class="pl-c1">1</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64}}}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">7.0f0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Fill{Float32}<span class="pl-k">:</span> entries equal to <span class="pl-c1">7.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Trues</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Ones{Bool}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Falses</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Zeros{Bool}</pre></div>
<p>They support conversion to other matrix types like <code>Array</code>, <code>SparseVector</code>, <code>SparseMatrix</code>, and <code>Diagonal</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Matrix(Zeros(5, 5))
5×5 Array{Float64,2}:
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0

julia&gt; SparseMatrixCSC(Zeros(5, 5))
5×5 SparseMatrixCSC{Float64,Int64} with 0 stored entries

julia&gt; Array(Fill(7, (2,3)))
2×3 Array{Int64,2}:
 7  7  7
 7  7  7
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SparseMatrixCSC</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> SparseMatrixCSC{Float64,Int64} with <span class="pl-c1">0</span> stored entries

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(<span class="pl-c1">Fill</span>(<span class="pl-c1">7</span>, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">7</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">7</span>  <span class="pl-c1">7</span></pre></div>
<p>There is also support for offset index ranges,
and the type includes the <code>axes</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Ones((-3:2, 1:2))
6×2 Ones{Float64,2,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices -3:2×1:2

julia&gt; Fill(7, ((0:2), (-1:0)))
3×2 Fill{Int64,2,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices 0:2×-1:0: entries equal to 7

julia&gt; typeof(Zeros(5,6))
Zeros{Float64,2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ones</span>((<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>))
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">2</span> Ones{Float64,<span class="pl-c1">2</span>,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">7</span>, ((<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>), (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>)))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Fill{Int64,<span class="pl-c1">2</span>,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">:</span> entries equal to <span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>))
Zeros{Float64,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},Base<span class="pl-k">.</span>OneTo{Int64}}}</pre></div>
<p>These types have methods that perform many operations efficiently,
including elementary algebra operations like multiplication and addition,
as well as linear algebra methods like
<code>norm</code>, <code>adjoint</code>, <code>transpose</code> and <code>vec</code>.</p>
</article></div>