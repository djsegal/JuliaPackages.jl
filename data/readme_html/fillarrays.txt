<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fillarraysjl" class="anchor" aria-hidden="true" href="#fillarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FillArrays.jl</h1>
<p dir="auto"><a href="https://JuliaArrays.github.io/FillArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaArrays.github.io/FillArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaArrays/FillArrays.jl/actions"><img src="https://github.com/JuliaArrays/FillArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/FillArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/541d4e919d5acb9e2519658d5aa06d944cea6cb2349ad985955255bd99f5d80d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f46696c6c4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/FillArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/FillArrays/2Dg1l?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/57d46c09774f68c33c951446a0037411888e6491ab139e50d759171791392983/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f46696c6c4172726179732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/FillArrays/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/FillArrays/2Dg1l" rel="nofollow"><img src="https://camo.githubusercontent.com/caa4538992d7fcb474bc4a9c1171cd13967c670350b367d96a89e536562d4648/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f46696c6c4172726179732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/FillArrays/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/FillArrays/2Dg1l" rel="nofollow"><img src="https://camo.githubusercontent.com/0a56de4cbeea2fed3b4b99ff54e88dc327395d1671b179e22f66241a5c52fe05/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f46696c6c4172726179732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/FillArrays/pkgeval.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia package to lazily represent matrices filled with a single entry,
as well as identity matrices.  This package exports the following types:
<code>Eye</code>, <code>Fill</code>, <code>Ones</code>, <code>Zeros</code>, <code>Trues</code>, <code>Falses</code>, and <code>OneElement</code>.</p>
<p dir="auto">The primary purpose of this package is to present a unified way of constructing
matrices.
For example, to construct a 5-by-5 <code>BandedMatrix</code> of all zeros with bandwidths <code>(1,2)</code>, one would use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; BandedMatrix(Zeros(5,5), (1, 2))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">BandedMatrix</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Here are the matrix types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Zeros(5, 6)
5×6 Zeros{Float64}

julia&gt; Zeros{Int}(2, 3)
2×3 Zeros{Int64}

julia&gt; Zeros(Int, 2, 3) # can also specify the type as an argument
2×3 Zeros{Int64}

julia&gt; Ones{Int}(5)
5-element Ones{Int64}

julia&gt; Eye{Int}(5)
 5×5 Diagonal{Int64,Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}:
  1  ⋅  ⋅  ⋅  ⋅
  ⋅  1  ⋅  ⋅  ⋅
  ⋅  ⋅  1  ⋅  ⋅
  ⋅  ⋅  ⋅  1  ⋅
  ⋅  ⋅  ⋅  ⋅  1

julia&gt; Fill(7.0f0, 3, 2)
3×2 Fill{Float32}: entries equal to 7.0

julia&gt; Trues(2, 3)
2×3 Ones{Bool}

julia&gt; Falses(2)
2-element Zeros{Bool}

julia&gt; OneElement(3.0, (2,1), (5,6))
5×6 OneElement{Float64, 2, Tuple{Int64, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}:
  ⋅    ⋅    ⋅    ⋅    ⋅    ⋅ 
 3.0   ⋅    ⋅    ⋅    ⋅    ⋅ 
  ⋅    ⋅    ⋅    ⋅    ⋅    ⋅ 
  ⋅    ⋅    ⋅    ⋅    ⋅    ⋅ 
  ⋅    ⋅    ⋅    ⋅    ⋅    ⋅ "><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">6</span> Zeros{Float64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Zeros{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Zeros</span>(Int, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> can also specify the type as an argument</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Zeros{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ones</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Ones{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Eye</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">5</span>)
 <span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Diagonal{Int64,Ones{Int64,<span class="pl-c1">1</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64}}}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">7.0f0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Fill{Float32}<span class="pl-k">:</span> entries equal to <span class="pl-c1">7.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Trues</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Ones{Bool}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Falses</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Zeros{Bool}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">OneElement</span>(<span class="pl-c1">3.0</span>, (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>), (<span class="pl-c1">5</span>,<span class="pl-c1">6</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">6</span> OneElement{Float64, <span class="pl-c1">2</span>, Tuple{Int64, Int64}, Tuple{Base<span class="pl-k">.</span>OneTo{Int64}, Base<span class="pl-k">.</span>OneTo{Int64}}}<span class="pl-k">:</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span> 
 <span class="pl-c1">3.0</span>   <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span> 
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span> 
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span> 
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span> </pre></div>
<p dir="auto">They support conversion to other matrix types like <code>Array</code>, <code>SparseVector</code>, <code>SparseMatrix</code>, and <code>Diagonal</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Matrix(Zeros(5, 5))
5×5 Array{Float64,2}:
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0

julia&gt; SparseMatrixCSC(Zeros(5, 5))
5×5 SparseMatrixCSC{Float64,Int64} with 0 stored entries

julia&gt; Array(Fill(7, (2,3)))
2×3 Array{Int64,2}:
 7  7  7
 7  7  7"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SparseMatrixCSC</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> SparseMatrixCSC{Float64,Int64} with <span class="pl-c1">0</span> stored entries

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(<span class="pl-c1">Fill</span>(<span class="pl-c1">7</span>, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">7</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">7</span>  <span class="pl-c1">7</span></pre></div>
<p dir="auto">There is also support for offset index ranges,
and the type includes the <code>axes</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Ones((-3:2, 1:2))
6×2 Ones{Float64,2,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices -3:2×1:2

julia&gt; Fill(7, ((0:2), (-1:0)))
3×2 Fill{Int64,2,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices 0:2×-1:0: entries equal to 7

julia&gt; typeof(Zeros(5,6))
Zeros{Float64,2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ones</span>((<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>))
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">2</span> Ones{Float64,<span class="pl-c1">2</span>,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">7</span>, ((<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>), (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>)))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Fill{Int64,<span class="pl-c1">2</span>,Tuple{UnitRange{Int64},UnitRange{Int64}}} with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">:</span> entries equal to <span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">Zeros</span>(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>))
Zeros{Float64,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},Base<span class="pl-k">.</span>OneTo{Int64}}}</pre></div>
<p dir="auto">These types have methods that perform many operations efficiently,
including elementary algebra operations like multiplication and addition,
as well as linear algebra methods like
<code>norm</code>, <code>adjoint</code>, <code>transpose</code> and <code>vec</code>.</p>
<h2 dir="auto"><a id="user-content-warning" class="anchor" aria-hidden="true" href="#warning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Warning!</h2>
<p dir="auto">Broadcasting operations and <code>map</code>, <code>mapreduce</code> are also done efficiently, by evaluating the function being applied only once:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; map(sqrt, Fill(4, 2,5))  # one evaluation, not 10, to save time
2×5 Fill{Float64}: entries equal to 2.0

julia&gt; println.(Fill(pi, 10))
π
10-element Fill{Nothing}: entries equal to nothing"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(sqrt, <span class="pl-c1">Fill</span>(<span class="pl-c1">4</span>, <span class="pl-c1">2</span>,<span class="pl-c1">5</span>))  <span class="pl-c"><span class="pl-c">#</span> one evaluation, not 10, to save time</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> Fill{Float64}<span class="pl-k">:</span> entries equal to <span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>.(<span class="pl-c1">Fill</span>(<span class="pl-c1">pi</span>, <span class="pl-c1">10</span>))
π
<span class="pl-c1">10</span><span class="pl-k">-</span>element Fill{Nothing}<span class="pl-k">:</span> entries equal to <span class="pl-c1">nothing</span></pre></div>
<p dir="auto">Notice that this will only match the behaviour of a dense matrix from <code>fill</code> if the function is pure. And that this shortcut is taken <em>before</em> any other fused broadcast:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; map(_ -&gt; rand(), Fill(&quot;pi&quot;, 2,5))  # not a pure function!
2×5 Fill{Float64}: entries equal to 0.7201617100284206

julia&gt; map(_ -&gt; rand(), fill(&quot;4&quot;, 2,5))  # 10 evaluations, different answer!
2×5 Matrix{Float64}:
 0.43675   0.270809  0.56536   0.0948089  0.24655
 0.959363  0.79598   0.238662  0.401909   0.317716

julia&gt; ones(1,5) .+ (_ -&gt; rand()).(Fill(&quot;vec&quot;, 2))  # Fill broadcast is done first
2×5 Matrix{Float64}:
 1.51796  1.51796  1.51796  1.51796  1.51796
 1.51796  1.51796  1.51796  1.51796  1.51796

julia&gt; ones(1,5) .+ (_ -&gt; rand()).(fill(&quot;vec&quot;, 2))  # fused, 10 evaluations
2×5 Matrix{Float64}:
 1.51337  1.17578  1.19815  1.43035  1.2987
 1.30253  1.21909  1.61755  1.02645  1.77681"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(), <span class="pl-c1">Fill</span>(<span class="pl-s"><span class="pl-pds">"</span>pi<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>,<span class="pl-c1">5</span>))  <span class="pl-c"><span class="pl-c">#</span> not a pure function!</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> Fill{Float64}<span class="pl-k">:</span> entries equal to <span class="pl-c1">0.7201617100284206</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(), <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>4<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>,<span class="pl-c1">5</span>))  <span class="pl-c"><span class="pl-c">#</span> 10 evaluations, different answer!</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.43675</span>   <span class="pl-c1">0.270809</span>  <span class="pl-c1">0.56536</span>   <span class="pl-c1">0.0948089</span>  <span class="pl-c1">0.24655</span>
 <span class="pl-c1">0.959363</span>  <span class="pl-c1">0.79598</span>   <span class="pl-c1">0.238662</span>  <span class="pl-c1">0.401909</span>   <span class="pl-c1">0.317716</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>) <span class="pl-k">.+</span> (_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>())<span class="pl-k">.</span>(<span class="pl-c1">Fill</span>(<span class="pl-s"><span class="pl-pds">"</span>vec<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>))  <span class="pl-c"><span class="pl-c">#</span> Fill broadcast is done first</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>
 <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>  <span class="pl-c1">1.51796</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>) <span class="pl-k">.+</span> (_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>())<span class="pl-k">.</span>(<span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>vec<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>))  <span class="pl-c"><span class="pl-c">#</span> fused, 10 evaluations</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.51337</span>  <span class="pl-c1">1.17578</span>  <span class="pl-c1">1.19815</span>  <span class="pl-c1">1.43035</span>  <span class="pl-c1">1.2987</span>
 <span class="pl-c1">1.30253</span>  <span class="pl-c1">1.21909</span>  <span class="pl-c1">1.61755</span>  <span class="pl-c1">1.02645</span>  <span class="pl-c1">1.77681</span></pre></div>
</article></div>