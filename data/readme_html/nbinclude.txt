<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nbinclude" class="anchor" aria-hidden="true" href="#nbinclude"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NBInclude</h1>
<p dir="auto"><a href="https://github.com/JuliaInterop/NBInclude.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaInterop/NBInclude.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">NBInclude is a package for the <a href="http://julialang.org/" rel="nofollow">Julia language</a> which allows you to include and execute <a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a> (Julia-language <a href="https://jupyter.org/" rel="nofollow">Jupyter</a>) notebook files just as you would include an ordinary Julia file.</p>
<p dir="auto">The goal of this package is to make notebook files just as easy to incorporate into Julia programs as ordinary Julia (<code>.jl</code>) files, giving you the advantages of a notebook (integrated code, formatted text, equations, graphics, and other results) while retaining the modularity and re-usability of <code>.jl</code> files.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<p dir="auto">Analogous to <a href="https://docs.julialang.org/en/v1/base/base/#Base.include" rel="nofollow"><code>include("myfile.jl")</code></a> in Julia to execute <code>myfile.jl</code>, you can do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NBInclude
@nbinclude(&quot;myfile.ipynb&quot;)"><pre><span class="pl-k">using</span> NBInclude
<span class="pl-c1">@nbinclude</span>(<span class="pl-s"><span class="pl-pds">"</span>myfile.ipynb<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">to execute all of the code cells in the IJulia notebook <code>myfile.ipynb</code>. Similar to <code>include</code>, the value of the last evaluated expression in the last evaluated code cell is returned.</p>
<p dir="auto">We also export an <code>in_nbinclude()</code> function, which returns <code>true</code> only when it is
executed in code run via <code>@nbinclude</code>.  Using this, you can selectively run code
in a notebook only interactively or only via <code>@nbinclude</code>.</p>
<p dir="auto">There is also a function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nbexport(&quot;myfile.jl&quot;, &quot;myfile.ipynb&quot;)"><pre><span class="pl-c1">nbexport</span>(<span class="pl-s"><span class="pl-pds">"</span>myfile.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>myfile.ipynb<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">that can be used to convert an IJulia notebook file to an ordinary Julia file, with
Markdown text in the notebook converted to formatted comments in the Julia file.</p>
<h2 dir="auto"><a id="user-content-detailed-features" class="anchor" aria-hidden="true" href="#detailed-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Detailed features</h2>
<p dir="auto">Key features of <code>@nbinclude</code> are:</p>
<ul dir="auto">
<li>The path of the notebook is relative to the path of the current file (if any),
and nested inclusions can use paths relative to the notebook, just as for <code>include</code>.</li>
<li>In a module, included notebooks work fine with <a href="https://docs.julialang.org/en/v1/manual/modules/#Module-initialization-and-precompilation" rel="nofollow">precompilation</a> in Julia (and re-compilation is automatically triggered if the notebook changes).</li>
<li>Code is associated with accurate line numbers (e.g. for backtraces when exceptions are thrown), in the form of <code>myfile.ipynb:In[N]:M</code> for line <code>M</code> in input cell <code>N</code> of the <code>myfile.ipynb</code> notebook.  Un-numbered cells (e.g. unevaluated cells) are given a number
<code>+N</code> for the <code>N</code>-th nonempty cell in the notebook.  You can use <code>@nbinclude("myfile.ipynb", renumber=true)</code> to automatically renumber the cells in sequence (as if you had selected <em>Run All</em> from the Jupyter <em>Cell</em> menu), without altering the file.</li>
<li>The Julia <code>@__FILE__</code> macro returns <code>/path/to/myfile.ipynb:In[N]</code> for input cell <code>N</code>.</li>
<li>In IJulia, cells beginning with <code>;</code> or <code>?</code> are interpreted as shell commands or help requests, respectively.  Such cells are ignored by <code>@nbinclude</code>.</li>
<li><code>counters</code> and <code>regex</code> keywords can be used to include a subset of notebook cells to those for which <code>counter âˆˆ counters</code> and the cell text matches <code>regex</code>. For example, <code>@nbinclude("notebook.ipynb"; counters=1:10, regex=r"#\s*EXECUTE")</code>
would include cells 1 to 10 from <code>notebook.ipynb</code> that contain comments like <code># EXECUTE</code>.</li>
<li>A keyword <code>anshook</code> can be used to run a passed function on the return value of all the cells.</li>
<li>No Python or Jupyter dependency.</li>
<li>The <code>softscope</code> flag mentioned below.</li>
</ul>
<p dir="auto">Note: Scoping rules differ between interactive (IJulia, REPL) and non-interactive Julia code. Running a notebook as <code>@nbinclude("foo.ipynb"; softscope=true)</code> will load notebooks using "soft" global scoping similar to interactive (REPL) code in Julia 1.5+ or for IJulia with any Julia version. That flag's default value, <code>false</code>, will load notebooks with the "hard" scoping rule that Julia uses for non-interactive code (e.g. in <code>include</code>); see also the <a href="https://github.com/stevengj/SoftGlobalScope.jl">SoftGlobalScope package</a> for more details.</p>
<p dir="auto">Key features of <code>nbexport</code> are:</p>
<ul dir="auto">
<li>You can either call <code>nbexport(filename, notebookfile)</code> to export to a file, or
<code>nbexport(io, notebookfile)</code> to write to an <code>IO</code> stream (e.g. <code>stdout</code> or a buffer).</li>
<li>To export to a string, use <code>sprint(nbexport, notebookfile)</code>.</li>
<li>Like <code>@nbinclude</code>, you can pass a <code>regex</code> keyword to specify a subset of the notebook
code cells to export.</li>
<li>Markdown cells in the notebook are parsed and formatted as pretty-printed text comments
with the help of Julia's <a href="https://docs.julialang.org/en/v1/stdlib/Markdown/" rel="nofollow">Markdown</a>
standard library.</li>
<li>Markdown cells can be ignored by passing <code>markdown=false</code> to <code>nbexport</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contact</h2>
<p dir="auto">NBInclude was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven G. Johnson</a> and is free/open-source software under the <a href="LICENSE.md">MIT/Expat license</a>.  Please file bug reports and feature requests at the <a href="https://github.com/stevengj/NBInclude.jl">NBInclude github page</a>.</p>
</article></div>