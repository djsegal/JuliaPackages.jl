<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-matrixlm" class="anchor" aria-hidden="true" href="#matrixlm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatrixLM</h1>
<p><a href="https://travis-ci.com/senresearch/MatrixLM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8bbcac2f3660d9a0903eff38eb8e75268059e10ac6a9ea8b19d6e37a636f91d/68747470733a2f2f7472617669732d63692e636f6d2f73656e72657365617263682f4d61747269784c4d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/senresearch/MatrixLM.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Core functions to obtain closed-form least squares estimates for matrix linear models. Variance shrinkage is adapted from Ledoit &amp; Wolf (2003)<sup><a href="#myfootnote1">1</a></sup>.</p>
<p>An extension of <code>MatrixLM</code> for applications in high-throughput genetic screens is the <a href="https://github.com/senresearch/GeneticScreens.jl"><code>GeneticScreens</code></a> package. See the associated paper, <a href="http://dx.doi.org/10.1534/genetics.119.302299" rel="nofollow">"Matrix linear models for high-throughput chemical genetic screens"</a>, and its <a href="https://github.com/senresearch/mlm_gs_supplement">reproducible code</a> for more details.</p>
<p><a href="https://github.com/senresearch/MatrixLMnet.jl"><code>MatrixLMnet</code></a> is a related package that implements algorithms for  L<sub>1</sub>-penalized estimates for matrix linear models. See the associated paper, <a href="https://arxiv.org/abs/1712.05767" rel="nofollow">"Sparse matrix linear models for structured high-throughput data"</a>, and its <a href="https://github.com/senresearch/mlm_l1_supplement">reproducible code</a> for more details.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The <code>MatrixLM</code> package can be installed by running:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;MatrixLM&quot;)
"><pre><code>using Pkg
Pkg.add("MatrixLM")
</code></pre></div>
<p>For the most recent version, use:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url = &quot;https://github.com/senresearch/MatrixLM.jl&quot;, rev=&quot;master&quot;)
"><pre><code>using Pkg
Pkg.add(url = "https://github.com/senresearch/MatrixLM.jl", rev="master")
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using MatrixLM
"><pre><code>using MatrixLM
</code></pre></div>
<p>First, construct a <code>RawData</code> object consisting of the response variable <code>Y</code> and row/column predictors <code>X</code> and <code>Z</code>. All three matrices must be passed in as 2-dimensional arrays. Note that the <code>contr</code> function can be used to set up treatment and/or sum contrasts for categorical variables stored in a DataFrame. By default, <code>contr</code> generates treatment contrasts for all specified categorical variables (<code>"treat"</code>). Other options include <code>"sum"</code> for sum contrasts, <code>"noint"</code> for treatment contrasts with no intercept, and <code>"sumnoint"</code> for sum contrasts with no intercept.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using DataFrames
using Random

# Dimensions of matrices 
n = 100
m = 250
# Number of column covariates
q = 20

# Randomly generate an X matrix of row covariates with 2 categorical variables
# and 4 continuous variables
Random.seed!(1)
X_df = hcat(DataFrame(catvar1=rand(1:5, n), catvar2=rand([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], n)), 
            DataFrame(rand(n,4)))
# Use the contr function to get contrasts for the two categorical variables 
# (treatment contrasts for catvar1 and sum contrasts for catvar2).
# contr returns a DataFrame, so X needs to be converted into a 2d array.
X = convert(Array{Float64,2}, contr(X_df, [:catvar1, :catvar2], 
                                    [&quot;treat&quot;, &quot;sum&quot;]))
# Number of row covariates
p = size(X)[2]

# Randomly generate some data for column covariates Z and response variable Y
Z = rand(m,q)
B = rand(-5:5,p,q)
E = randn(n,m)
Y = X*B*transpose(Z)+E

# Construct a RawData object
dat = RawData(Response(Y), Predictors(X, Z))
"><pre><code>using DataFrames
using Random

# Dimensions of matrices 
n = 100
m = 250
# Number of column covariates
q = 20

# Randomly generate an X matrix of row covariates with 2 categorical variables
# and 4 continuous variables
Random.seed!(1)
X_df = hcat(DataFrame(catvar1=rand(1:5, n), catvar2=rand(["A", "B", "C"], n)), 
            DataFrame(rand(n,4)))
# Use the contr function to get contrasts for the two categorical variables 
# (treatment contrasts for catvar1 and sum contrasts for catvar2).
# contr returns a DataFrame, so X needs to be converted into a 2d array.
X = convert(Array{Float64,2}, contr(X_df, [:catvar1, :catvar2], 
                                    ["treat", "sum"]))
# Number of row covariates
p = size(X)[2]

# Randomly generate some data for column covariates Z and response variable Y
Z = rand(m,q)
B = rand(-5:5,p,q)
E = randn(n,m)
Y = X*B*transpose(Z)+E

# Construct a RawData object
dat = RawData(Response(Y), Predictors(X, Z))
</code></pre></div>
<p>Least-squares estimates for matrix linear models can be obtained by running <code>mlm</code>. An object of type <code>Mlm</code> will be returned, with variables for the coefficient estimates (<code>B</code>), the coefficient variance estimates (<code>varB</code>), and the estimated variance of the errors (<code>sigma</code>). By default, <code>mlm</code> estimates both row and column main effects (X and Z intercepts), but this behavior can be suppressed by setting <code>isXIntercept=false</code> and/or <code>isZntercept=false</code>. Column weights for <code>Y</code> and the target type for variance shrinkage<sup><a href="#myfootnote1">1</a></sup> can be optionally supplied to <code>weights</code> and <code>targetType</code>, respectively.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="est = mlm(dat)
"><pre><code>est = mlm(dat)
</code></pre></div>
<p>The coefficient estimates can be accessed using <code>coef(est)</code>. Predicted values and residuals can be obtained by calling <code>predict</code> and <code>resid</code>. By default, both of these functions use the same data used to fit the model. However, a new <code>Predictors</code> object can be passed into <code>predict</code> as the <code>newPredictors</code> argument and a new <code>RawData</code> object can be passed into <code>resid</code> as the <code>newData</code> argument. For convenience, <code>fitted(est)</code> will return the fitted values by calling <code>predict</code> with the default arguments.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="preds = predict(est)
resids = resid(est)
"><pre><code>preds = predict(est)
resids = resid(est)
</code></pre></div>
<p>The t-statistics for an <code>Mlm</code> object (defined as <code>est.B ./ sqrt.(est.varB)</code>) can be obtained by running <code>t_stat</code>. By default, <code>t_stat</code> does not return the corresponding t-statistics for any main effects that were estimated by <code>mlm</code>, but they will be returned if <code>isMainEff=true</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="tStats = t_stat(est)
"><pre><code>tStats = t_stat(est)
</code></pre></div>
<p>Permutation p-values for the t-statistics can be computed by the <code>mlm_perms</code> function. <code>mlm_perms</code> calls the more general function <code>perm_pvals</code> and will run the permutations in parallel when possible. The illustrative example below only runs 5 permutations, but a different number can be specified as the second argument. By default, the function used to permute <code>Y</code> is <code>shuffle_rows</code>, which shuffles the rows for <code>Y</code>. Alternative functions for permuting <code>Y</code>, such as <code>shuffle_cols</code>, can be passed into the argument <code>permFun</code>. <code>mlm_perms</code> calls <code>mlm</code> and <code>t_stat</code> , so the user is free to specify keyword arguments for <code>mlm</code> or <code>t_stat</code>; by default, <code>mlm_perms</code> will call both functions using their default behavior.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="nPerms = 5
tStats, pVals = mlm_perms(dat, nPerms)
"><pre><code>nPerms = 5
tStats, pVals = mlm_perms(dat, nPerms)
</code></pre></div>
<p>Additional details can be found in the documentation for specific functions.</p>
<hr>
<p><a name="user-content-myfootnote1">1</a>. Ledoit, O., &amp; Wolf, M. (2003). Improved estimation of the covariance matrix of stock returns with an application to portfolio selection. Journal of empirical finance, 10(5), 603-621.</p>
</article></div>