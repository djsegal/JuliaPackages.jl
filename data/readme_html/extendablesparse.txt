<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-extendablesparsejl" class="anchor" aria-hidden="true" href="#extendablesparsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ExtendableSparse.jl</h1>
<p><a href="https://travis-ci.org/j-fu/ExtendableSparse.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46c844a2f2c40cd3f9788e1187a9b467e35bf035/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6a2d66752f457874656e6461626c655370617273652e6a6c2f6d61737465722e7376673f6c6162656c3d4c696e75782b4d61634f53582b57696e646f7773" alt="Build Status" data-canonical-src="https://img.shields.io/travis/j-fu/ExtendableSparse.jl/master.svg?label=Linux+MacOSX+Windows" style="max-width:100%;"></a>
<a href="https://j-fu.github.io/ExtendableSparse.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://j-fu.github.io/ExtendableSparse.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Sparse matrix class with efficient successive insertion of entries and entry update.</p>
<p>Without an intermediate data structure, efficient successive insertion/update of possibly duplicate entries in random order into a standard compressed colume storage structure appears to be not possible. The package introduces <code>ExtendableSparseMatrix</code>, a delegating wrapper containing a Julia standard <code>SparseMatrixCSC</code> struct for performing linear algebra operations and a <code>SparseMatrixLNK</code> struct realising a linked list based (but realised in vectors) format collecting new entries.</p>
<p>The later is modeled after the linked list sparse matrix format described in the <a href="https://www-users.cs.umn.edu/~saad/software/SPARSKIT/paper.ps" rel="nofollow">whitepaper</a> by Y. Saad. See also exercise P.3-16  in his <a href="https://www-users.cs.umn.edu/~saad/IterMethBook_2ndEd.pdf" rel="nofollow">book</a>.</p>
<p>Any linear algebra method on <code>ExtendableSparseMatrix</code> starts with a <code>flush!</code> method which adds the LNK entries and the existing CSC entries into a new CSC struct and resets the LNK struct.</p>
<p><code>ExtendableSparseMatrix</code> is aimed to work as a drop-in replacement to <code>SparseMatrixCSC</code> in finite element and finite volume codes especally in those cases where the sparsity structure is hard to detect a priori and where working with an intermediadte COO representation appears to be not convenient.</p>
<p>In addition, the package provides a method <code>updateindex!(A,op,v,i,j)</code> for both <code>SparseMatrixCSC</code> and for <code>ExtendableSparse</code> which allows to update a matrix element with one index search instead of two. It allows to replace e.g. <code>A[i,j]+=v</code> by <code>updateindex!(A,+,i,j,v)</code>. The former operation is lowered to</p>
<pre><code>%1 = Base.getindex(A, 1, 2)
%2 = %1 + 3
Base.setindex!(A, %2, 1, 2)
</code></pre>
<p>triggering two index searches, one for <code>getindex!</code> and another one for <code>setindex!</code>.</p>
</article></div>