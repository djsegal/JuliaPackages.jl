<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-extendablesparsejl" class="anchor" aria-hidden="true" href="#extendablesparsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExtendableSparse.jl</h1>
<p><a href="https://travis-ci.org/j-fu/ExtendableSparse.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46c844a2f2c40cd3f9788e1187a9b467e35bf035/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6a2d66752f457874656e6461626c655370617273652e6a6c2f6d61737465722e7376673f6c6162656c3d4c696e75782b4d61634f53582b57696e646f7773" alt="Build Status" data-canonical-src="https://img.shields.io/travis/j-fu/ExtendableSparse.jl/master.svg?label=Linux+MacOSX+Windows" style="max-width:100%;"></a>
<a href="https://j-fu.github.io/ExtendableSparse.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://j-fu.github.io/ExtendableSparse.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Sparse matrix class with efficient successive insertion of entries and entry update.</p>
<h2><a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rationale</h2>
<p>Without an intermediate data structure, efficient successive insertion/update of possibly duplicate entries in random order into a standard compressed column storage structure appears to be not possible. The package introduces <code>ExtendableSparseMatrix</code>, a delegating wrapper containing a Julia standard <code>SparseMatrixCSC</code> struct for performing linear algebra operations and a <code>SparseMatrixLNK</code> struct realising a linked list based (but realised in vectors) format collecting new entries.</p>
<p>The later is modeled after the linked list sparse matrix format described in the <a href="https://www-users.cs.umn.edu/~saad/software/SPARSKIT/paper.ps" rel="nofollow">whitepaper</a> by Y. Saad. See also exercise P.3-16  in his <a href="https://www-users.cs.umn.edu/~saad/IterMethBook_2ndEd.pdf" rel="nofollow">book</a>.</p>
<p>Any linear algebra method on <code>ExtendableSparseMatrix</code> starts with a <code>flush!</code> method which adds the LNK entries and the existing CSC entries into a new CSC struct and resets the LNK struct.</p>
<p><code>ExtendableSparseMatrix</code> is aimed to work as a drop-in replacement to <code>SparseMatrixCSC</code> in finite element and finite volume codes especally in those cases where the sparsity structure is hard to detect a priori and where working with an intermediadte COO representation appears to be not convenient.</p>
<h2><a id="user-content-caveat" class="anchor" aria-hidden="true" href="#caveat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveat</h2>
<p>This package assumes that a $m \times n$  matrix is sparse if <em>each</em> row and <em>each</em> column have less than $C$ entries with
$C &lt;&lt; n$ and $C &lt;&lt;m$ . Adding a full matrix row will be a performance hit.</p>
<h2><a id="user-content-working-with-forwarddiff" class="anchor" aria-hidden="true" href="#working-with-forwarddiff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Working with ForwardDiff</h2>
<p>In particular, it cooperates with <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a> when it comes to the assembly of a sparse jacobian. For a function 'f!(y,x)' returning it's result in a vector <code>y</code>, one can use e.g.</p>
<pre><code>x=...
y=zeros(n)
dresult=DiffResults.DiffResult(zeros(n),ExtendableSparseMatrix(n,n))
x=ForwardDiff.jacobian!(dresult,f!,y,x)
jac=DiffResults.jacobian(dresult)
h=jac\x
</code></pre>
<p>However, without a priori information on sparsity, ForwardDiff calls element insertion for the full range of n^2 indices,
leading to a O(n^2) scaling behavior due to the nevertheless necessary search operations, see  this <a href="https://discourse.julialang.org/t/non-sorted-sparsematrixcsc/37133" rel="nofollow">discourse thread</a>.</p>
<h2><a id="user-content-updateindex" class="anchor" aria-hidden="true" href="#updateindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>updateindex!</h2>
<p>In addition, the package provides a method <code>updateindex!(A,op,v,i,j)</code> for both <code>SparseMatrixCSC</code> and for <code>ExtendableSparse</code> which allows to update a matrix element with one index search instead of two. It allows to replace e.g. <code>A[i,j]+=v</code> by <code>updateindex!(A,+,v,i,j)</code>. The former operation is lowered to</p>
<pre><code>%1 = Base.getindex(A, 1, 2)
%2 = %1 + 3
Base.setindex!(A, %2, 1, 2)
</code></pre>
<p>triggering two index searches, one for <code>getindex!</code> and another one for <code>setindex!</code>.</p>
<p>See <a href="https://github.com/JuliaLang/julia/issues/15630">Julia issue #15630</a> for a discussion on this.</p>
</article></div>