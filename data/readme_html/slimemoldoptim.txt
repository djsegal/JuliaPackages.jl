<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a id="user-content-simplefwa.jl"></a></p>
<p dir="auto"><a id="user-content-simplefwa.jl-1"></a></p>
<h1 dir="auto"><a id="user-content-simplefwajl" class="anchor" aria-hidden="true" href="#simplefwajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleFWA.jl</h1>
<p dir="auto"><a href="https://github.com/hondoRandale/SlimeMoldOptim.jl/actions/workflows/TagBot.yml"><img src="https://github.com/hondoRandale/SlimeMoldOptim.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/hondoRandale/SlimeMoldOptim.jl/actions/workflows/documentation.yml"><img src="https://github.com/hondoRandale/SlimeMoldOptim.jl/actions/workflows/documentation.yml/badge.svg" alt="documentation" style="max-width: 100%;"></a></p>
<p dir="auto"><a id="user-content-introduction"></a></p>
<p dir="auto"><a id="user-content-introduction-1"></a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">This solver is an implementation of the slime mould algorithm. It belongs to the family of swarm-intelligence solvers. The method doesn't require first or second order derivatives.    The original paper on the algorithm is called: " Slime mould algorithm: A new method for stochastic optmimization "</p>
<hr>
<p dir="auto"><a id="user-content-calling-convention"></a></p>
<p dir="auto"><a id="user-content-calling-convention-1"></a></p>
<h2 dir="auto"><a id="user-content-calling-convention" class="anchor" aria-hidden="true" href="#calling-convention"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>calling convention</h2>
<p dir="auto">each Objective function passed to SlimeMoldOptim has to comply with the following    simple parameter convention f( x; kwargs ) where f is the objective    function to be minimized. This convention ensures SlimeMoldOptim can be used with    time-series-problems, classification-problems, regression-problems.    Univariate as well as multivariate target sets are admissible.</p>
<hr>
<p dir="auto"><a id="user-content-performance-considerations"></a></p>
<p dir="auto"><a id="user-content-performance-considerations-1"></a></p>
<h2 dir="auto"><a id="user-content-performance-considerations" class="anchor" aria-hidden="true" href="#performance-considerations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>performance considerations</h2>
<p dir="auto">SlimeMoldOptim uses several cores, to make best use of your sytem, set Threads.nthreads() to the max. number.</p>
<hr>
<p dir="auto"><a id="user-content-example"></a></p>
<p dir="auto"><a id="user-content-example-1"></a></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="   using SlimeMoldOptim
   using Test
   Easom(x;kwargs) = -cos( x[1] ) * cos( x[2] ) *
                     exp( -( (x[1]-π)^2 + (x[2]-π)^2 ) )
   lower    = [ -10.0f0, -10.0f0 ];
   upper    = [ 10.0f0, 10.0f0 ];
   sma( objFunction ) = slimeMoldAlgo( 30, 1000, ();
                                        lower       = lower,
                                        upper       = upper,
                                        objFunction = objFunction,
                                        maxiter     = 1000,
                                        ϵ_conv      = 1f-20,
                                        z           = 0.03f0 )                            
   solutionFWA = sma( Easom );
   @test isapprox( solutionFWA.x_b[1], π; atol=0.01 )
   @test isapprox( solutionFWA.x_b[2], π; atol=0.01 )                             "><pre>   <span class="pl-k">using</span> SlimeMoldOptim
   <span class="pl-k">using</span> Test
   <span class="pl-en">Easom</span>(x;kwargs) <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">cos</span>( x[<span class="pl-c1">1</span>] ) <span class="pl-k">*</span> <span class="pl-c1">cos</span>( x[<span class="pl-c1">2</span>] ) <span class="pl-k">*</span>
                     <span class="pl-c1">exp</span>( <span class="pl-k">-</span>( (x[<span class="pl-c1">1</span>]<span class="pl-k">-</span>π)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (x[<span class="pl-c1">2</span>]<span class="pl-k">-</span>π)<span class="pl-k">^</span><span class="pl-c1">2</span> ) )
   lower    <span class="pl-k">=</span> [ <span class="pl-k">-</span><span class="pl-c1">10.0f0</span>, <span class="pl-k">-</span><span class="pl-c1">10.0f0</span> ];
   upper    <span class="pl-k">=</span> [ <span class="pl-c1">10.0f0</span>, <span class="pl-c1">10.0f0</span> ];
   <span class="pl-en">sma</span>( objFunction ) <span class="pl-k">=</span> <span class="pl-c1">slimeMoldAlgo</span>( <span class="pl-c1">30</span>, <span class="pl-c1">1000</span>, ();
                                        lower       <span class="pl-k">=</span> lower,
                                        upper       <span class="pl-k">=</span> upper,
                                        objFunction <span class="pl-k">=</span> objFunction,
                                        maxiter     <span class="pl-k">=</span> <span class="pl-c1">1000</span>,
                                        ϵ_conv      <span class="pl-k">=</span> <span class="pl-c1">1f-20</span>,
                                        z           <span class="pl-k">=</span> <span class="pl-c1">0.03f0</span> )                            
   solutionFWA <span class="pl-k">=</span> <span class="pl-c1">sma</span>( Easom );
   <span class="pl-c1">@test</span> <span class="pl-c1">isapprox</span>( solutionFWA<span class="pl-k">.</span>x_b[<span class="pl-c1">1</span>], π; atol<span class="pl-k">=</span><span class="pl-c1">0.01</span> )
   <span class="pl-c1">@test</span> <span class="pl-c1">isapprox</span>( solutionFWA<span class="pl-k">.</span>x_b[<span class="pl-c1">2</span>], π; atol<span class="pl-k">=</span><span class="pl-c1">0.01</span> )                             </pre></div>
<hr>
<p dir="auto"><a id="user-content-function-reference"></a></p>
<p dir="auto"><a id="user-content-function-reference-1"></a></p>
<h2 dir="auto"><a id="user-content-function-reference" class="anchor" aria-hidden="true" href="#function-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>function reference</h2>
<p dir="auto"><a id="user-content-slimemoldoptim.slimemoldalgo" href="#SlimeMoldOptim.slimeMoldAlgo">#</a>
<strong><code>SlimeMoldOptim.slimeMoldAlgo</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="     slimeMoldAlgo( nMolds::Int,
                    n_vc::Int,
                    kwargs...;
                    lower::Vector{Float32},
                    upper::Vector{Float32},
                    objFunction::Function,
                    maxiter::Int,
                    ϵ_conv::Float32,
                    z::Float32=0.03f0 )


  minimize objective function objFunction, the solution space is limited by lower and upper bound.
  - The optimization algorithm utilized is the slime mold algorithm.
  - The nMolds parameter governs the number of molds being modeled.
  - n_vc is the number of steps learning parameter vb needs to reach 0.0.
  - maxiter denotes the overall number of algo iteraions, it has to be &gt;= n_vc.
  the number of sparks per firework, in remains constant foreach firework.
  - ϵ_A is the smoothing parameter controlling the variance of amplitudes computed foreach fw.
  - C_a ist the upscaling parameter for explosion amplitudes.
  - C_r is the downscaling parameter for explosion amplitudes.
  - maxiter is the maximum number iteraions.
  - ϵ_conv denotes the convergence parameter."><pre>     <span class="pl-c1">slimeMoldAlgo</span>( nMolds<span class="pl-k">::</span><span class="pl-c1">Int</span>,
                    n_vc<span class="pl-k">::</span><span class="pl-c1">Int</span>,
                    kwargs<span class="pl-k">...</span>;
                    lower<span class="pl-k">::</span><span class="pl-c1">Vector{Float32}</span>,
                    upper<span class="pl-k">::</span><span class="pl-c1">Vector{Float32}</span>,
                    objFunction<span class="pl-k">::</span><span class="pl-c1">Function</span>,
                    maxiter<span class="pl-k">::</span><span class="pl-c1">Int</span>,
                    ϵ_conv<span class="pl-k">::</span><span class="pl-c1">Float32</span>,
                    z<span class="pl-k">::</span><span class="pl-c1">Float32</span><span class="pl-k">=</span><span class="pl-c1">0.03f0</span> )


  minimize objective <span class="pl-k">function</span> objFunction, the solution space is limited by lower and upper bound.
  <span class="pl-k">-</span> The optimization algorithm utilized is the slime mold algorithm.
  <span class="pl-k">-</span> The nMolds parameter governs the number of molds being modeled.
  <span class="pl-k">-</span> n_vc is the number of steps learning parameter vb needs to reach <span class="pl-c1">0.0</span>.
  <span class="pl-k">-</span> maxiter denotes the overall number of algo iteraions, it has to be <span class="pl-k">&gt;=</span> n_vc.
  the number of sparks per firework, <span class="pl-k">in</span> remains constant foreach firework.
  <span class="pl-k">-</span> ϵ_A is the smoothing parameter controlling the variance of amplitudes computed foreach fw.
  <span class="pl-k">-</span> C_a ist the upscaling parameter <span class="pl-k">for</span> explosion amplitudes.
  <span class="pl-k">-</span> C_r is the downscaling parameter <span class="pl-k">for</span> explosion amplitudes.
  <span class="pl-k">-</span> maxiter is the maximum number iteraions.
  <span class="pl-k">-</span> ϵ_conv denotes the convergence parameter.</pre></div>
<p dir="auto"><a href="https://github.com/hondoRandale/SlimeMoldOptim.jl/blob/7ad970665f085ed32e501655d4011db12e9d57a1/src/SlimeMoldOptim.jl#L111-L136">source</a><br></p>
<p dir="auto">SlimeMolds struct</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Description</th>
<th align="left">Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">S</td>
<td align="left">each column denotes a mold position</td>
<td align="left">Matrix{Float32}</td>
</tr>
<tr>
<td align="left">fitnessS</td>
<td align="left">fitness of each mold</td>
<td align="left">Vector{Float32}</td>
</tr>
<tr>
<td align="left">x<em>b</em>global</td>
<td align="left">best found solution</td>
<td align="left">Vector{ Float32 }</td>
</tr>
<tr>
<td align="left">minFGlobal</td>
<td align="left">best found function value</td>
<td align="left">Float32</td>
</tr>
<tr>
<td align="left">x<em>w</em>global</td>
<td align="left">worst found solution</td>
<td align="left">Vector{ Float32 }</td>
</tr>
<tr>
<td align="left">maxFGlobal</td>
<td align="left">worst found function value</td>
<td align="left">Float32</td>
</tr>
<tr>
<td align="left">iter</td>
<td align="left">number of iterations executed</td>
<td align="left">Int</td>
</tr>
</tbody>
</table>
</article></div>