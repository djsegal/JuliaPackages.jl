<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-addinit" class="anchor" aria-hidden="true" href="#addinit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AddInit</h1>
<p dir="auto">Automatically add a constructor for building objects with Dict and JSON String to DataType</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">You can use macro <strong>@add_init</strong> before <strong>struct</strong> definition. Then get a constructor initialized by JSON string or Dict. Of course, you can also use <strong>@add_jsoninit</strong> or <strong>@add_dictinit</strong> to separately add JSON or Dict constructor.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AddInit

@add_init struct Test
    field::AbstractString
end

Test(&quot;{&quot;field&quot;:&quot;a&quot;}&quot;) == Test(&quot;a&quot;)  # true
Test(Dict(&quot;field&quot;=&gt;&quot;a&quot;)) == Test(&quot;a&quot;)  #true"><pre><span class="pl-k">using</span> AddInit

<span class="pl-c1">@add_init</span> <span class="pl-k">struct</span> Test
    field<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>
<span class="pl-k">end</span>

<span class="pl-c1">Test</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-pds">"</span></span>f<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ield</span>"</span>:<span class="pl-pds">"</span><span class="pl-c1">a</span></span><span class="pl-s"><span class="pl-pds">"</span>}<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Test</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">Test</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)) <span class="pl-k">==</span> <span class="pl-c1">Test</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>
<p dir="auto">It can also cooperate with Base.@kwdef use.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@Base.kwdef struct Test
    a::Int
    b::Int=2
    c::Int
end
@add_init Test

Test(Dict(&quot;a&quot;=&gt;1, &quot;c&quot;=&gt;3)) == Test(1,2,3)   # true"><pre><span class="pl-c1">@Base</span><span class="pl-k">.</span>kwdef <span class="pl-k">struct</span> Test
    a<span class="pl-k">::</span><span class="pl-c1">Int</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">2</span>
    c<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>
<span class="pl-c1">@add_init</span> Test

<span class="pl-c1">Test</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">3</span>)) <span class="pl-k">==</span> <span class="pl-c1">Test</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)   <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p dir="auto">Of course, it also applies to nested objects</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@add_init struct A
    v::Int
end 
@add_init struct B
    a::A
end
 
B(Dict(&quot;a&quot;=&gt;Dict(&quot;v&quot;=&gt;1))) == B(A(1))  # true"><pre><span class="pl-c1">@add_init</span> <span class="pl-k">struct</span> A
    v<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span> 
<span class="pl-c1">@add_init</span> <span class="pl-k">struct</span> B
    a<span class="pl-k">::</span><span class="pl-c1">A</span>
<span class="pl-k">end</span>
 
<span class="pl-c1">B</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>v<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>))) <span class="pl-k">==</span> <span class="pl-c1">B</span>(<span class="pl-c1">A</span>(<span class="pl-c1">1</span>))  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h2 dir="auto"><a id="user-content-warning" class="anchor" aria-hidden="true" href="#warning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Warning</h2>
<ol dir="auto">
<li><strong>Do not use this macro when a single attribute type is String or Dict, which will cause ambiguity.</strong></li>
<li><strong>It's best not to use abstract types for type annotation unless you need to assign the original value directly.</strong></li>
</ol>
</article></div>