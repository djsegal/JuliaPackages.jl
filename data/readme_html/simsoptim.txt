<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simsoptimjl" class="anchor" aria-hidden="true" href="#simsoptimjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimsOptim.jl</h1>
<p dir="auto">a simple mirror of Chris Sims's <code>csolve</code> and <code>csminwel</code> optimization functions, originally written in MATLAB, which are available <a href="http://sims.princeton.edu/yftp/optimize/" rel="nofollow">here</a>.</p>
<p dir="auto">the interfaces to the <code>optimize</code> function and <code>OptimizationResults</code> type are based on the analogous objects in the widely-known <a href="https://julianlsolvers.github.io/Optim.jl/stable/" rel="nofollow">Optim.jl</a> package, although <code>SimsOptim.jl</code> does not import &amp; re-export <code>Optim.jl</code>. future versions of <code>SimsOptim.jl</code> might do so, however.</p>
<p dir="auto">the method signatures of <code>optimize</code> are</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="optimize(
    f::Function,
    g::Function, [optional]
    x0::AbstractVector{T},
    m::Csolve;
    kwargs...
) where {T}"><pre><span class="pl-c1">optimize</span>(
    f<span class="pl-k">::</span><span class="pl-c1">Function</span>,
    g<span class="pl-k">::</span><span class="pl-c1">Function</span>, [optional]
    x0<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>,
    m<span class="pl-k">::</span><span class="pl-c1">Csolve</span>;
    kwargs<span class="pl-k">...</span>
) <span class="pl-k">where</span> {T}</pre></div>
<p dir="auto">for the multidimensional <code>Csolve</code> procedure, and</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="optimize(
    f::Function,
    g::Function, [optional]
    x0::AbstractVector{T},
    H0::Union{AbstractMatrix{T}, UniformScalint}, [optional]
    m::Csminwel;
    &lt;keyword arguments&gt;
)"><pre><span class="pl-c1">optimize</span>(
    f<span class="pl-k">::</span><span class="pl-c1">Function</span>,
    g<span class="pl-k">::</span><span class="pl-c1">Function</span>, [optional]
    x0<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>,
    H0<span class="pl-k">::</span><span class="pl-c1">Union{AbstractMatrix{T}, UniformScalint}</span>, [optional]
    m<span class="pl-k">::</span><span class="pl-c1">Csminwel</span>;
    <span class="pl-k">&lt;</span>keyword arguments<span class="pl-k">&gt;</span>
)</pre></div>
<p dir="auto">for the unidimensional <code>Csminwel</code> procedure. the keyword arguments are shared between the
two, with default values</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f_tol::Real = 1e-14
g_tol::Real = 1e-8
x_tol::Real = 1e-32
iterations::Int = 1000 (Csolve algorithm) or 100 (Csminwel algorithm)
δ::Real = 1e-6
α::Real = 1e-3
verbose::Bool = false"><pre>f_tol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1e-14</span>
g_tol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1e-8</span>
x_tol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1e-32</span>
iterations<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">1000</span> (Csolve algorithm) or <span class="pl-c1">100</span> (Csminwel algorithm)
δ<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>
α<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>
verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span></pre></div>
<p dir="auto">the <code>ForwardDiff</code> package's <code>jacobian</code> and <code>gradient</code> functions are used to approximate <code>g</code>
for the <code>Csolve</code> and <code>Csminwel</code> algorithms, respectively.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>installation</h1>
<p dir="auto">the <code>SimsOptim</code> package is registered; simply call <code>Pkg.add("SimsOptim")</code> at the REPL</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>example</h1>
<p dir="auto">using the two-dimensional Rosenbrock function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function rosen(z::AbstractVector{T}) where {T}
    a, b = 1, 100
    c, d = a, 150

    x, y = z[1], z[2]

    r = zeros(T, 2)
    r[1] = (a - x^2) + b * (x^2 - y)^2
    r[2] = (c - x^2) + d * (x^2 - y)^2

    return r
end"><pre><span class="pl-k">function</span> <span class="pl-en">rosen</span>(z<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>) <span class="pl-k">where</span> {T}
    a, b <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">100</span>
    c, d <span class="pl-k">=</span> a, <span class="pl-c1">150</span>

    x, y <span class="pl-k">=</span> z[<span class="pl-c1">1</span>], z[<span class="pl-c1">2</span>]

    r <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(T, <span class="pl-c1">2</span>)
    r[<span class="pl-c1">1</span>] <span class="pl-k">=</span> (a <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> b <span class="pl-k">*</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> y)<span class="pl-k">^</span><span class="pl-c1">2</span>
    r[<span class="pl-c1">2</span>] <span class="pl-k">=</span> (c <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> d <span class="pl-k">*</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> y)<span class="pl-k">^</span><span class="pl-c1">2</span>

    <span class="pl-k">return</span> r
<span class="pl-k">end</span></pre></div>
<p dir="auto">as an example, we can find its minimum easily:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;SimsOptim&quot;)
julia&gt; results = optimize(rosen, [0.5, 4], Csolve())"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SimsOptim<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(rosen, [<span class="pl-c1">0.5</span>, <span class="pl-c1">4</span>], <span class="pl-c1">Csolve</span>())</pre></div>
<p dir="auto">the <code>optimize</code> function returns an <code>OptimizationResults</code> instance, whose REPL
representation is</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="status using Csolve(): success

convergence
----------------
    x: false
    f: true
    g: false

objectives
----------------
    value    : 5.069629645745414e-15
    minimum  : [2.0278518582981656e-15, 3.0417777874472484e-15]
    minimizer: [1.0, 1.0000000045031676]

counts
----------------
    total iterations: 29
    f calls         : 30
    g calls         : 30

improvements
----------------
    initial_x: [0.5, 4.0]
    x_change : [-0.5, 2.9999999954968324]
    f_change : [1407.0, 2110.125]
    g_size   : 2.00000540380114

information
----------------
    flag   : 0
    message: success"><pre class="notranslate"><code>status using Csolve(): success

convergence
----------------
    x: false
    f: true
    g: false

objectives
----------------
    value    : 5.069629645745414e-15
    minimum  : [2.0278518582981656e-15, 3.0417777874472484e-15]
    minimizer: [1.0, 1.0000000045031676]

counts
----------------
    total iterations: 29
    f calls         : 30
    g calls         : 30

improvements
----------------
    initial_x: [0.5, 4.0]
    x_change : [-0.5, 2.9999999954968324]
    f_change : [1407.0, 2110.125]
    g_size   : 2.00000540380114

information
----------------
    flag   : 0
    message: success
</code></pre></div>
<p dir="auto">each of the listed fields above can be accessed by a non-exported function of the same
name. for example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SimsOptim.minimizer(results)
2-element Vector{Float64}:
 1.0
 1.0000000045031676"><pre>julia<span class="pl-k">&gt;</span> SimsOptim<span class="pl-k">.</span><span class="pl-c1">minimizer</span>(results)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0000000045031676</span></pre></div>
</article></div>