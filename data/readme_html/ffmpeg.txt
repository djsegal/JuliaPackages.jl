<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ffmpeg" class="anchor" aria-hidden="true" href="#ffmpeg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FFMPEG</h1>
<p><a href="https://travis-ci.com/JuliaIO/FFMPEG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2af101829a67e1e2e3bcf94cc61a67bc9cd456014f7ae3a6bd0a83b5e67e9ec6/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961494f2f46464d5045472e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaIO/FFMPEG.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/JuliaIO/FFMPEG-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/424b8dda97dc0a6b4e3d2562a10472266c5638e33d22c61482c16b8cba476474/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f4a756c6961494f2f46464d5045472e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/JuliaIO/FFMPEG.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/FFMPEG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a9a1fea89fbcedbeaed38b03fde6d638a46a02390d6b71bcf3b8be3d1d3f3330/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f46464d5045472e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaIO/FFMPEG.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaIO/FFMPEG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dd244f487d8be3effcfd17d5d56a6899a44f8b180e10e7749c748928ce5a125d/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961494f2f46464d5045472e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaIO/FFMPEG.jl.svg" style="max-width:100%;"></a></p>
<p>This package simply offers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# a simple way to invoke ffmpeg:
FFMPEG.exe(&quot;-version&quot;)
FFMPEG.exe(&quot;-version&quot;, collect=true) #collect output lines into an array of strings
FFMPEG.exe(&quot;-version&quot;, command=FFMPEG.ffprobe, collect=true) #collect ffprobe output lines into an array of strings (defaults to ffmpeg)

@ffmpeg_env run(`$(FFMPEG.ffmpeg) -version`) #Manually sets up the shared lib environment location. Note the $(FFMPEG.ffmpeg)

ffmpeg_exe(&quot;-version&quot;) #takes strings
ffmpeg_exe(`-version`) #or command strings

ffprobe_exe(&quot;-version&quot;) # we wrap FFPROBE too!

ffmpeg`-version` # Cmd string macros too
ffprobe`-version`

# the AV libraries (exported too):
FFMPEG.libavcodec
FFMPEG.libavformat
FFMPEG.libavutil
FFMPEG.libswscale
FFMPEG.libavdevice
FFMPEG.libavfilter

# and for good measure:
FFMPEG.versioninfo()
"><pre><span class="pl-c"><span class="pl-c">#</span> a simple way to invoke ffmpeg:</span>
FFMPEG<span class="pl-k">.</span><span class="pl-c1">exe</span>(<span class="pl-s"><span class="pl-pds">"</span>-version<span class="pl-pds">"</span></span>)
FFMPEG<span class="pl-k">.</span><span class="pl-c1">exe</span>(<span class="pl-s"><span class="pl-pds">"</span>-version<span class="pl-pds">"</span></span>, collect<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span>collect output lines into an array of strings</span>
FFMPEG<span class="pl-k">.</span><span class="pl-c1">exe</span>(<span class="pl-s"><span class="pl-pds">"</span>-version<span class="pl-pds">"</span></span>, command<span class="pl-k">=</span>FFMPEG<span class="pl-k">.</span>ffprobe, collect<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span>collect ffprobe output lines into an array of strings (defaults to ffmpeg)</span>

<span class="pl-c1">@ffmpeg_env</span> <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>$(FFMPEG.ffmpeg) -version<span class="pl-pds">`</span></span>) <span class="pl-c"><span class="pl-c">#</span>Manually sets up the shared lib environment location. Note the $(FFMPEG.ffmpeg)</span>

<span class="pl-c1">ffmpeg_exe</span>(<span class="pl-s"><span class="pl-pds">"</span>-version<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span>takes strings</span>
<span class="pl-c1">ffmpeg_exe</span>(<span class="pl-s"><span class="pl-pds">`</span>-version<span class="pl-pds">`</span></span>) <span class="pl-c"><span class="pl-c">#</span>or command strings</span>

<span class="pl-c1">ffprobe_exe</span>(<span class="pl-s"><span class="pl-pds">"</span>-version<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> we wrap FFPROBE too!</span>

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ffmpeg</span>`</span>-version<span class="pl-pds">`</span></span> <span class="pl-c"><span class="pl-c">#</span> Cmd string macros too</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ffprobe</span>`</span>-version<span class="pl-pds">`</span></span>

<span class="pl-c"><span class="pl-c">#</span> the AV libraries (exported too):</span>
FFMPEG<span class="pl-k">.</span>libavcodec
FFMPEG<span class="pl-k">.</span>libavformat
FFMPEG<span class="pl-k">.</span>libavutil
FFMPEG<span class="pl-k">.</span>libswscale
FFMPEG<span class="pl-k">.</span>libavdevice
FFMPEG<span class="pl-k">.</span>libavfilter

<span class="pl-c"><span class="pl-c">#</span> and for good measure:</span>
FFMPEG<span class="pl-k">.</span><span class="pl-c1">versioninfo</span>()</pre></div>
<p>For a high level API to the AV libraries in <code>libav</code>, have a look at <a href="https://github.com/JuliaIO/VideoIO.jl/">VideoIO.jl</a>.</p>
<p>This package is made to be included into packages that just need the ffmpeg binaries + executables, and don't want to take on the 3.6 second load time of VideoIO.</p>
</article></div>