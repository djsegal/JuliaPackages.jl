<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-behavior" class="anchor" aria-hidden="true" href="#behavior"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Behavior</h1>
<p><a href="http://codecov.io/github/erikedin/Behavior.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dda9f32c8e2a97af7e4dba517d86d83a2bff495cd4e98f08ec1aa3f08e68d21d/687474703a2f2f636f6465636f762e696f2f6769746875622f6572696b6564696e2f4265686176696f722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/erikedin/Behavior.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>BDD is an acronym for <em>Behaviour Driven Development</em>. It is a process for creating and verifying
requirements, written in such a way that they can be executed as code. This package aims to be a
tool for executing such requirements, and creating reports.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>See <a href="docs/USAGE.md">docs/USAGE.md</a> for more detailed usage.</p>
<p>See <a href="docs/TUTORIAL.md">docs/TUTORIAL.md</a> for a step-by-step introduction to this package.</p>
<p>Specifications are written in the Gherkin format, such as</p>
<div class="highlight highlight-text-gherkin-feature position-relative" data-snippet-clipboard-copy-content="Feature: Making coffee

    Scenario: Making a cup of coffee
        Given that there is a cup in the coffee machine
         When the &quot;Coffee&quot; button is pressed
         Then the cup is filled with coffee
"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> Making coffee</span>

    <span class="pl-k">Scenario</span>:<span class="pl-s"> Making a cup of coffee</span>
        <span class="pl-k">Given </span>that there is a cup in the coffee machine
         <span class="pl-k">When </span>the <span class="pl-s">"Coffee"</span> button is pressed
         <span class="pl-k">Then </span>the cup is filled with coffee</pre></div>
<p>For each <code>Given</code>, <code>When</code>, and <code>Then</code> line, a corresponding method is written, which is executed when
that line is reached.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Behavior
using CoffeeMachine

hascoffee(cup::Cup) = cup[:coffee] &gt; 0.0

@given(&quot;that there is a cup in the coffee machine&quot;) do context
    cup = Cup()
    machine = Machine()

    cupisinthemachine(machine, cup)

    context[:cup] = cup
    context[:machine] = machine
end

@when(&quot;the \&quot;Coffee\&quot; button is pressed&quot;) do context
    machine = context[:machine]
    coffeewaspressed(machine)
end

@then(&quot;the cup is filled with coffee&quot;) do context
    cup = context[:cup]
    @expect hascoffee(cup)
end
"><pre><span class="pl-k">using</span> Behavior
<span class="pl-k">using</span> CoffeeMachine

<span class="pl-en">hascoffee</span>(cup<span class="pl-k">::</span><span class="pl-c1">Cup</span>) <span class="pl-k">=</span> cup[<span class="pl-c1">:coffee</span>] <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span>

<span class="pl-c1">@given</span>(<span class="pl-s"><span class="pl-pds">"</span>that there is a cup in the coffee machine<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> context
    cup <span class="pl-k">=</span> <span class="pl-c1">Cup</span>()
    machine <span class="pl-k">=</span> <span class="pl-c1">Machine</span>()

    <span class="pl-c1">cupisinthemachine</span>(machine, cup)

    context[<span class="pl-c1">:cup</span>] <span class="pl-k">=</span> cup
    context[<span class="pl-c1">:machine</span>] <span class="pl-k">=</span> machine
<span class="pl-k">end</span>

<span class="pl-c1">@when</span>(<span class="pl-s"><span class="pl-pds">"</span>the <span class="pl-cce">\"</span>Coffee<span class="pl-cce">\"</span> button is pressed<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> context
    machine <span class="pl-k">=</span> context[<span class="pl-c1">:machine</span>]
    <span class="pl-c1">coffeewaspressed</span>(machine)
<span class="pl-k">end</span>

<span class="pl-c1">@then</span>(<span class="pl-s"><span class="pl-pds">"</span>the cup is filled with coffee<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> context
    cup <span class="pl-k">=</span> context[<span class="pl-c1">:cup</span>]
    <span class="pl-c1">@expect</span> <span class="pl-c1">hascoffee</span>(cup)
<span class="pl-k">end</span></pre></div>
<p>Feature files have extension <code>.feature</code>, and are stored in the <code>features</code> directory (see
"Current state" for current limitations), and step definitions (the executable code) have the
extension <code>.jl</code> and are stored in <code>features/steps</code>.</p>
<h1><a id="user-content-example-project" class="anchor" aria-hidden="true" href="#example-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example project</h1>
<p>The project <a href="https://github.com/erikedin/CoffeeMachine.jl">CoffeeMachine.jl</a> is an example of how to
use Behavior.jl.</p>
<h1><a id="user-content-running" class="anchor" aria-hidden="true" href="#running"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running</h1>
<p>Run the command line tool <code>runspec.jl</code> from the directory containing the <code>features</code> directory, or
from the Julia REPL with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Behavior
julia&gt; runspec()
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Behavior
julia<span class="pl-k">&gt;</span> <span class="pl-c1">runspec</span>()</pre></div>
<p>See "Current state" for limitations.</p>
<h1><a id="user-content-current-state" class="anchor" aria-hidden="true" href="#current-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Current state</h1>
<p>The package is not feature complete, but is absolutely in a usable state. It is also under active
development.</p>
<p>These are some current limitations and missing features, that will be lifted as development progresses:</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Currently does not function in Julia 1.4 and probably not before</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Presenting the results of scenarios is very rudimentary.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Step definition variables do not yet have type information.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Gherkin Rules support</li>
</ul>
<h2><a id="user-content-completed" class="anchor" aria-hidden="true" href="#completed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Completed</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Reads feature files from anywhere under <code>features</code>.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Reads step files from anywhere under <code>features/steps</code>.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Variables in step definition strings.</li>
</ul>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h1>
<p>Behavior.jl is licensed under the Apache License version 2.0.</p>
</article></div>