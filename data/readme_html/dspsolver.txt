<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dspsolver" class="anchor" aria-hidden="true" href="#dspsolver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DSPsolver</h1>
<p>The DSPsolver.jl package provides an interface for using an open-source software package <a href="https://github.com/kibaekkim/DSP">DSP</a> for solving stochastic mixed-integer programming problems from the <a href="http://julialang.org" rel="nofollow">Julia</a> language. You need to download and install DSP package.</p>
<p>This package requires the StructJuMP.jl and MPI.jl packages for Julia. The <a href="https://github.com/StructJuMP/StructJuMP.jl">StructJuMP.jl</a> package provides a scalable algebraic modeling tool for stochastic programming. The <a href="https://github.com/JuliaParallel/MPI.jl">MPI.jl</a> package enables the Julia script to run on a distributed computing system via MPI communication.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You can install DSPsolver.jl using the Julia package system.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Argonne-National-Laboratory/DSPsolver.jl<span class="pl-pds">"</span></span>);</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>The following example shows a Julia script that uses DSPsolver.jl for solving a two-stage stochastic integer programming problem.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DSPsolver, StructJuMP, MPI; <span class="pl-c"><span class="pl-c">#</span> Load packages</span>

<span class="pl-c"><span class="pl-c">#</span> Initialize MPI</span>
MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>();

<span class="pl-c"><span class="pl-c">#</span> random parameter</span>
xi <span class="pl-k">=</span> [[<span class="pl-c1">7</span>,<span class="pl-c1">7</span>] [<span class="pl-c1">11</span>,<span class="pl-c1">11</span>] [<span class="pl-c1">13</span>,<span class="pl-c1">13</span>]];

<span class="pl-c"><span class="pl-c">#</span> StructJuMP.jl model scripts</span>
m <span class="pl-k">=</span> <span class="pl-c1">StructuredModel</span>(num_scenarios<span class="pl-k">=</span><span class="pl-c1">3</span>);
<span class="pl-c1">@variable</span>(m, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>, Int);
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-k">-</span><span class="pl-c1">1.5</span><span class="pl-k">*</span>x[<span class="pl-c1">1</span>]<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>]);
<span class="pl-k">for</span> s <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
	q <span class="pl-k">=</span> <span class="pl-c1">StructuredModel</span>(parent<span class="pl-k">=</span>m, prob<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>);
	<span class="pl-c1">@variable</span>(q, y[j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>], Bin);
	<span class="pl-c1">@objective</span>(q, Min, <span class="pl-k">-</span><span class="pl-c1">16</span><span class="pl-k">*</span>y[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">19</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">23</span><span class="pl-k">*</span>y[<span class="pl-c1">3</span>]<span class="pl-k">+</span><span class="pl-c1">28</span><span class="pl-k">*</span>y[<span class="pl-c1">4</span>]);
	<span class="pl-c1">@constraint</span>(q, <span class="pl-c1">2</span><span class="pl-k">*</span>y[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>y[<span class="pl-c1">3</span>]<span class="pl-k">+</span><span class="pl-c1">5</span><span class="pl-k">*</span>y[<span class="pl-c1">4</span>]<span class="pl-k">&lt;=</span>xi[<span class="pl-c1">1</span>,s]<span class="pl-k">-</span>x[<span class="pl-c1">1</span>]);
	<span class="pl-c1">@constraint</span>(q, <span class="pl-c1">6</span><span class="pl-k">*</span>y[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>y[<span class="pl-c1">3</span>]<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>y[<span class="pl-c1">4</span>]<span class="pl-k">&lt;=</span>xi[<span class="pl-c1">2</span>,s]<span class="pl-k">-</span>x[<span class="pl-c1">2</span>]);
<span class="pl-k">end</span>

DSPsolver<span class="pl-k">.</span><span class="pl-c1">loadProblem</span>(m);       <span class="pl-c"><span class="pl-c">#</span> Load model m to DSP</span>
DSPsolver<span class="pl-k">.</span><span class="pl-c1">solve</span>(DSP_SOLVER_DD); <span class="pl-c"><span class="pl-c">#</span> Solve problem using dual decomposition</span>

<span class="pl-c"><span class="pl-c">#</span> print out upper/lower bounds</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Upper Bound: <span class="pl-pds">"</span></span>, DSPsolver<span class="pl-k">.</span><span class="pl-c1">getPrimalBound</span>());
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Lower Bound: <span class="pl-pds">"</span></span>, DSPsolver<span class="pl-k">.</span><span class="pl-c1">getDualBound</span>());

<span class="pl-c"><span class="pl-c">#</span> Finalize MPI</span>
MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>();</pre></div>
</article></div>