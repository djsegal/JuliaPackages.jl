<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-staticcompiler" class="anchor" aria-hidden="true" href="#staticcompiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StaticCompiler</h1>
<p dir="auto"><a href="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci.yml"><img src="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci-integration.yml"><img src="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci-integration.yml/badge.svg" alt="CI (Integration)" style="max-width: 100%;"></a>
<a href="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci-julia-nightly.yml"><img src="https://github.com/tshort/StaticCompiler.jl/workflows/CI%20(Julia%20nightly)/badge.svg" alt="CI (Julia nightly)" style="max-width: 100%;"></a>
<a href="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci-integration-nightly.yml"><img src="https://github.com/tshort/StaticCompiler.jl/actions/workflows/ci-integration-nightly.yml/badge.svg" alt="CI (Integration nightly)" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tshort/StaticCompiler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c3ea6144075a2ac1312a8ba93162c59a5d06d292144c3c0fd9cf4a42f73b5371/68747470733a2f2f636f6465636f762e696f2f67682f7473686f72742f537461746963436f6d70696c65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tshort/StaticCompiler.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is an experimental package to compile Julia code to standalone libraries. A system image is not needed.</p>
<h2 dir="auto"><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation and Usage</h2>
<p dir="auto">Installation is the same as any other registered Julia package</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;StaticCompiler&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>StaticCompiler<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">There are two main ways to use this package:</p>
<h3 dir="auto"><a id="user-content-linked-compilation" class="anchor" aria-hidden="true" href="#linked-compilation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linked compilation</h3>
<p dir="auto">The first option is via the <code>compile</code> function, which can be used when you want to compile a Julia function for later use from within Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticCompiler

julia&gt; fib(n) = n &lt;= 1 ? n : fib(n - 1) + fib(n - 2)
fib (generic function with 1 method)

julia&gt; fib_compiled, path = compile(fib, Tuple{Int}, &quot;fib&quot;)
(f = fib(::Int64) :: Int64, path = &quot;fib&quot;)

julia&gt; fib_compiled(10)
55"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticCompiler

julia<span class="pl-k">&gt;</span> <span class="pl-en">fib</span>(n) <span class="pl-k">=</span> n <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span> <span class="pl-k">?</span> n <span class="pl-k">:</span> <span class="pl-c1">fib</span>(n <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">fib</span>(n <span class="pl-k">-</span> <span class="pl-c1">2</span>)
fib (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> fib_compiled, path <span class="pl-k">=</span> <span class="pl-c1">compile</span>(fib, Tuple{Int}, <span class="pl-s"><span class="pl-pds">"</span>fib<span class="pl-pds">"</span></span>)
(f <span class="pl-k">=</span> <span class="pl-c1">fib</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, path <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>fib<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fib_compiled</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p dir="auto">Now we can quit this session and load a new one where <code>fib</code> is not defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticCompiler

julia&gt; fib
ERROR: UndefVarError: fib not defined

julia&gt; fib_compiled = load_function(&quot;fib&quot;)
fib(::Int64) :: Int64

julia&gt; fib_compiled(10)
55"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticCompiler

julia<span class="pl-k">&gt;</span> fib
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> fib not defined

julia<span class="pl-k">&gt;</span> fib_compiled <span class="pl-k">=</span> <span class="pl-c1">load_function</span>(<span class="pl-s"><span class="pl-pds">"</span>fib<span class="pl-pds">"</span></span>)
<span class="pl-c1">fib</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fib_compiled</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p dir="auto">See the file <code>tests/runtests.jl</code> for some examples of functions that work with <code>compile</code> (and some that don't, marked with <code>@test_skip</code>).</p>
<h3 dir="auto"><a id="user-content-standalone-compilation" class="anchor" aria-hidden="true" href="#standalone-compilation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Standalone compilation</h3>
<p dir="auto">The second way to use this package is via the <code>compile_executable</code> and <code>compile_shlib</code> functions, for when you want to compile a Julia function to a native executable or shared library for use from outside of Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticCompiler, StaticTools

julia&gt; hello() = println(c&quot;Hello, world!&quot;)
hello (generic function with 1 method)

julia&gt; compile_executable(hello, (), &quot;./&quot;)
&quot;/Users/user/hello&quot;

shell&gt; ls -alh hello
-rwxrwxr-x. 1 user user 8.4K Oct 20 20:36 hello

shell&gt; ./hello
Hello, world!"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticCompiler, StaticTools

julia<span class="pl-k">&gt;</span> <span class="pl-en">hello</span>() <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">c</span>"</span>Hello, world!<span class="pl-pds">"</span></span>)
hello (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">compile_executable</span>(hello, (), <span class="pl-s"><span class="pl-pds">"</span>./<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>/Users/user/hello<span class="pl-pds">"</span></span>

shell<span class="pl-k">&gt;</span> ls <span class="pl-k">-</span>alh hello
<span class="pl-k">-</span>rwxrwxr<span class="pl-k">-</span>x. <span class="pl-c1">1</span> user user <span class="pl-c1">8.4</span>K Oct <span class="pl-c1">20</span> <span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">36</span> hello

shell<span class="pl-k">&gt;</span> <span class="pl-k">./</span>hello
Hello, world!</pre></div>
<p dir="auto">This latter approach comes with substantially more limitations, as you cannot rely on <code>libjulia</code> (see, e.g., <a href="https://github.com/brenhinkeller/StaticTools.jl">StaticTools.jl</a> for some ways to work around these limitations).</p>
<p dir="auto">The low-level function <code>StaticCompiler.generate_obj</code> (not exported) generates object files. This can be used for more control of compilation. This can be used to cross-compile to other targets.</p>
<h3 dir="auto"><a id="user-content-mixtape" class="anchor" aria-hidden="true" href="#mixtape"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mixtape</h3>
<p dir="auto">This feature allows one to change functionality when statically compiling. This uses code and API from <a href="https://github.com/JuliaCompilerPlugins/Mixtape.jl">Mixtape</a> to transform lowered code much like <a href="https://github.com/JuliaLabs/Cassette.jl">Cassette</a>.</p>
<p dir="auto">To use the Mixtape feature, define a <code>CompilationContext</code> struct and pass this to any of the compilation functions with the <code>mixtape</code> keyword. Define <code>transform</code> and <code>allow</code> functions for this <code>CompilationContext</code> to define the transformation to be done.</p>
<p dir="auto">See <a href="https://github.com/tshort/StaticCompiler.jl/blob/master/test/testintegration.jl#L329">here</a> for an example.</p>
<h2 dir="auto"><a id="user-content-approach" class="anchor" aria-hidden="true" href="#approach"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Approach</h2>
<p dir="auto">This package uses the <a href="https://github.com/JuliaGPU/GPUCompiler.jl">GPUCompiler package</a> to generate code.</p>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<ul dir="auto">
<li>GC-tracked allocations and global variables do work with <code>compile</code>, but the way they are implemented is brittle and can be dangerous. Allocate with care.</li>
<li>GC-tracked allocations and global variables do <em>not</em> work with <code>compile_executable</code> or <code>compile_shlib</code>. This has some interesting consequences, including that all functions <em>within</em> the function you want to compile must either be inlined or return only native types (otherwise Julia would have to allocate a place to put the results, which will fail).</li>
<li>Since error handling relies on libjulia, you can only throw errors from standalone-compiled (<code>compile_executable</code> / <code>compile_shlib</code>) code if an explicit overload has been defined for that particular error with <code>@device_override</code> (see <a href="src/quirks.jl">quirks.jl</a>).</li>
<li>Type instability. Type unstable code cannot currently be statically compiled via this package.</li>
<li>Doesn't work on Windows. PRs welcome.</li>
</ul>
</article></div>