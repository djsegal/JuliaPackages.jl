<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tropicaltensors" class="anchor" aria-hidden="true" href="#tropicaltensors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TropicalTensors</h1>
<p>Solving spinglass ground state with <a href="https://github.com/QuantumBFS/Yao.jl">Yao</a>. It contains</p>
<ul>
<li>Spinglass solvers for three predefined lattices,including
<ul>
<li>square lattice,</li>
<li>cylinder lattice,</li>
<li>chimera lattice,</li>
<li>second-nearest neighor coupled square lattice.</li>
</ul>
</li>
<li><a href="https://github.com/JuliaGPU/CUDA.jl">GPU backend</a>,</li>
<li><a href="https://github.com/JuliaDiff/ForwardDiff.jl">Forward mode</a> automatic differentiation and <a href="https://github.com/GiggleLiu/NiLang.jl">reversible programming automatic differention</a> to find the optimal configuration,</li>
<li>A <a href="https://github.com/GiggleLiu/Viznet.jl">visualization toolkit</a>.</li>
</ul>
<h2><a id="user-content-to-start" class="anchor" aria-hidden="true" href="#to-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Start</h2>
<p>Type <code>]</code> in Julia REPL to enter pkg mode and</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/TensorBFS/TropicalTensors.jl.git#master
pkg&gt; add CuYao
"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>TensorBFS<span class="pl-k">/</span>TropicalTensors<span class="pl-k">.</span>jl<span class="pl-k">.</span>git<span class="pl-c"><span class="pl-c">#</span>master</span>
pkg<span class="pl-k">&gt;</span> add CuYao</pre></div>
<p>The last line is required only when you use GPU for computing.</p>
<h2><a id="user-content-notebooks" class="anchor" aria-hidden="true" href="#notebooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notebooks</h2>
<p>Then open the notebook in a Julia REPL with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TropicalTensors, Pluto

julia&gt; TropicalTensors.notebook(&quot;spinglass&quot;) # solving square lattice Ising spinglass with the quantum circuit simulator

julia&gt; TropicalTensors.notebook(&quot;ising_and_2sat&quot;)  # solving Ising spinglass and 2-SAT counting on a 3-regular graph by tensor network contraction
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TropicalTensors, Pluto

julia<span class="pl-k">&gt;</span> TropicalTensors<span class="pl-k">.</span><span class="pl-c1">notebook</span>(<span class="pl-s"><span class="pl-pds">"</span>spinglass<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> solving square lattice Ising spinglass with the quantum circuit simulator</span>

julia<span class="pl-k">&gt;</span> TropicalTensors<span class="pl-k">.</span><span class="pl-c1">notebook</span>(<span class="pl-s"><span class="pl-pds">"</span>ising_and_2sat<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> solving Ising spinglass and 2-SAT counting on a 3-regular graph by tensor network contraction</span></pre></div>
<h2><a id="user-content-gists" class="anchor" aria-hidden="true" href="#gists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gists</h2>
<p>For someone who are interested in the implementation, we provide a minimum implementation (~50 lines) of tropical circuit based spinglass solver about</p>
<h4><a id="user-content-1-finding-maximum-energy" class="anchor" aria-hidden="true" href="#1-finding-maximum-energy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>1. Finding maximum energy</h4>
<p><a href="https://gist.github.com/GiggleLiu/db9efa143aefbbe1d542e7b78d3a65bc">https://gist.github.com/GiggleLiu/db9efa143aefbbe1d542e7b78d3a65bc</a></p>
<h4><a id="user-content-2-counting-degeneracy" class="anchor" aria-hidden="true" href="#2-counting-degeneracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>2. Counting degeneracy</h4>
<p><a href="https://gist.github.com/wangleiphy/ef1f616f26ab37ef7fd3d329f2a5be0e">https://gist.github.com/wangleiphy/ef1f616f26ab37ef7fd3d329f2a5be0e</a></p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>First we define the lattice and coupling.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TropicalTensors

julia&gt; lt = SquareLattice(10, 8);

julia&gt; Js = rand([-1,1], length(sgbonds(lt)));

julia&gt; hs = zeros(Int, length(sgvertices(lt)));

julia&gt; sg = Spinglass(lt, Js, hs);
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TropicalTensors

julia<span class="pl-k">&gt;</span> lt <span class="pl-k">=</span> <span class="pl-c1">SquareLattice</span>(<span class="pl-c1">10</span>, <span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> Js <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>], <span class="pl-c1">length</span>(<span class="pl-c1">sgbonds</span>(lt)));

julia<span class="pl-k">&gt;</span> hs <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">length</span>(<span class="pl-c1">sgvertices</span>(lt)));

julia<span class="pl-k">&gt;</span> sg <span class="pl-k">=</span> <span class="pl-c1">Spinglass</span>(lt, Js, hs);</pre></div>
<p>Similarly, we can the problem on lattices like</p>
<ul>
<li><code>ChimeraLattice(4, 4)</code></li>
<li><code>Cylinder(10, 8)</code></li>
<li><code>rand_maskedsquare(8, 10, 0.8)</code>.</li>
</ul>
<p>One can visualize the lattice by dumping it to an <code>svg</code> file</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Compose, Viznet

julia&gt; Compose.set_default_graphic_size(12cm, 12cm)

julia&gt; showlattice(lt) |&gt; SVG(&quot;_output.svg&quot;)
false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Compose, Viznet

julia<span class="pl-k">&gt;</span> Compose<span class="pl-k">.</span><span class="pl-c1">set_default_graphic_size</span>(<span class="pl-c1">12</span>cm, <span class="pl-c1">12</span>cm)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">showlattice</span>(lt) <span class="pl-k">|&gt;</span> <span class="pl-c1">SVG</span>(<span class="pl-s"><span class="pl-pds">"</span>_output.svg<span class="pl-pds">"</span></span>)
<span class="pl-c1">false</span></pre></div>
<p>You will see the following graph</p>
<p><a target="_blank" rel="noopener noreferrer" href="lattice.svg"><img src="lattice.svg" alt="lattice" style="max-width:100%;"></a></p>
<p>If it errors, please install required visualization tools with <code>pkg&gt; add Viznet Compose</code>.</p>
<h4><a id="user-content-case-1-computing-the-maximum-energy" class="anchor" aria-hidden="true" href="#case-1-computing-the-maximum-energy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Case 1: Computing the maximum energy</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; solve(sg; usecuda=false)
Layer 1/10
Layer 2/10
Layer 3/10
Layer 4/10
Layer 5/10
Layer 6/10
Layer 7/10
Layer 8/10
Layer 9/10
Layer 10/10
Tropical(106)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(sg; usecuda<span class="pl-k">=</span><span class="pl-c1">false</span>)
Layer <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">6</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">9</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">10</span><span class="pl-k">/</span><span class="pl-c1">10</span>
<span class="pl-c1">Tropical</span>(<span class="pl-c1">106</span>)</pre></div>
<h4><a id="user-content-case-2-computing-the-energy-degeneracy" class="anchor" aria-hidden="true" href="#case-2-computing-the-energy-degeneracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Case 2: Computing the energy degeneracy</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; solve(CountingTropical{Int}, sg; usecuda=false)
Layer 1/10
Layer 2/10
Layer 3/10
Layer 4/10
Layer 5/10
Layer 6/10
Layer 7/10
Layer 8/10
Layer 9/10
Layer 10/10
CountingTropical{Int64}(106, 1504)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(CountingTropical{Int}, sg; usecuda<span class="pl-k">=</span><span class="pl-c1">false</span>)
Layer <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">6</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">9</span><span class="pl-k">/</span><span class="pl-c1">10</span>
Layer <span class="pl-c1">10</span><span class="pl-k">/</span><span class="pl-c1">10</span>
<span class="pl-c1">CountingTropical</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">106</span>, <span class="pl-c1">1504</span>)</pre></div>
<h4><a id="user-content-case-3-computing-the-optimal-spin-configuration-with-forwarddiff-and-cuda" class="anchor" aria-hidden="true" href="#case-3-computing-the-optimal-spin-configuration-with-forwarddiff-and-cuda"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Case 3: Computing the optimal spin configuration with <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff</a> and <a href="https://github.com/JuliaGPU/CUDA.jl">CUDA</a></h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ForwardDiff, CUDA

julia&gt; ForwardDiff.gradient(hs) do x
           sg = Spinglass(lt, eltype(x).(Js), x)
           solve(sg; usecuda=true).n
       end
Layer 1/10, stack size: 0 &amp; 0
Layer 2/10, stack size: 0 &amp; 0
Layer 3/10, stack size: 0 &amp; 1
...
  1
 -1
 -1
  1
 -1
  1
 -1
  1
 -1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ForwardDiff, CUDA

julia<span class="pl-k">&gt;</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">gradient</span>(hs) <span class="pl-k">do</span> x
           sg <span class="pl-k">=</span> <span class="pl-c1">Spinglass</span>(lt, <span class="pl-c1">eltype</span>(x).(Js), x)
           <span class="pl-c1">solve</span>(sg; usecuda<span class="pl-k">=</span><span class="pl-c1">true</span>)<span class="pl-k">.</span>n
       <span class="pl-k">end</span>
Layer <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span>
Layer <span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span>
Layer <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>
<span class="pl-k">...</span>
  <span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<h4><a id="user-content-case-4-computing-the-optimal-spin-configuration-with-nilang" class="anchor" aria-hidden="true" href="#case-4-computing-the-optimal-spin-configuration-with-nilang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Case 4: Computing the optimal spin configuration with <a href="https://github.com/GiggleLiu/NiLang.jl">NiLang</a></h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TropicalTensors.Reversible: opt_config

julia&gt; cfg = opt_config(sg);
Layer 1/10, stack size: 0 &amp; 0
Layer 2/10, stack size: 0 &amp; 0
Layer 3/10, stack size: 0 &amp; 1
Layer 4/10, stack size: 0 &amp; 2
Layer 5/10, stack size: 0 &amp; 3
Layer 6/10, stack size: 0 &amp; 4
Layer 7/10, stack size: 0 &amp; 5
Layer 8/10, stack size: 0 &amp; 6
Layer 9/10, stack size: 0 &amp; 7
Layer 10/10, stack size: 0 &amp; 8
Layer 10/10, stack size: 0 &amp; 8
Layer 9/10, stack size: 0 &amp; 7
Layer 8/10, stack size: 0 &amp; 6
Layer 7/10, stack size: 0 &amp; 5
Layer 6/10, stack size: 0 &amp; 4
Layer 5/10, stack size: 0 &amp; 3
Layer 4/10, stack size: 0 &amp; 2
Layer 3/10, stack size: 0 &amp; 1
Layer 2/10, stack size: 0 &amp; 0
Layer 1/10, stack size: 0 &amp; 0

julia&gt; vizoptconfig(cfg) |&gt; SVG(&quot;_optconfig.svg&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TropicalTensors<span class="pl-k">.</span>Reversible<span class="pl-k">:</span> opt_config

julia<span class="pl-k">&gt;</span> cfg <span class="pl-k">=</span> <span class="pl-c1">opt_config</span>(sg);
Layer <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span>
Layer <span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span>
Layer <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>
Layer <span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>
Layer <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">3</span>
Layer <span class="pl-c1">6</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">4</span>
Layer <span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">5</span>
Layer <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">6</span>
Layer <span class="pl-c1">9</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">7</span>
Layer <span class="pl-c1">10</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">8</span>
Layer <span class="pl-c1">10</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">8</span>
Layer <span class="pl-c1">9</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">7</span>
Layer <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">6</span>
Layer <span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">5</span>
Layer <span class="pl-c1">6</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">4</span>
Layer <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">3</span>
Layer <span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>
Layer <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>
Layer <span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span>
Layer <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>, stack size<span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vizoptconfig</span>(cfg) <span class="pl-k">|&gt;</span> <span class="pl-c1">SVG</span>(<span class="pl-s"><span class="pl-pds">"</span>_optconfig.svg<span class="pl-pds">"</span></span>)</pre></div>
<p>You will see the following graph</p>
<p><a target="_blank" rel="noopener noreferrer" href="optconfig.svg"><img src="optconfig.svg" alt="optconfig" style="max-width:100%;"></a></p>
</article></div>