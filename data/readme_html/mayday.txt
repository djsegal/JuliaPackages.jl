<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mayday" class="anchor" aria-hidden="true" href="#mayday"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mayday</h1>
<p><a href="https://travis-ci.org/rdeits/Mayday.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e29f7c5952aad3402aebb6b76d38eb710f1f2c02/68747470733a2f2f7472617669732d63692e6f72672f7264656974732f4d61796461792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rdeits/Mayday.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/rdeits/mayday-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/abb2311bd1cff9521bd6f8207c48f53db700ac45/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f68356e34657477356c697239697533683f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/h5n4etw5lir9iu3h?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/github/rdeits/Mayday.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/875ba9b048623c8184bad016e9ddf9ad31da60ab/68747470733a2f2f636f6465636f762e696f2f6769746875622f7264656974732f4d61796461792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/rdeits/Mayday.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Mayday.jl is a na√Øve implementation of sums-of-squares (SoS) polynomial optimization through semidefinite programming (SDP), powered by JuMP and Julia.</p>
<p>SoS programming is used in control theory to search for controllers for a dynamical system (like a robot or airplane) and to find the set of states for which those controllers will be valid. To learn more about how SoS programming is used, check out <a href="http://underactuated.csail.mit.edu/underactuated.html?chapter=11" rel="nofollow">http://underactuated.csail.mit.edu/underactuated.html?chapter=11</a></p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements</h2>
<p>To use this package, you'll need an SDP solver with a JuMP interface. If you installed Mayday with <code>Pkg.add()</code>, then you've already gotten <code>SCS.jl</code>, a wrapper for the free SCS solver, and you're all set. You may also want to install Mosek, a proprietary solver, with <code>Pkg.add("Mosek")</code>. Mosek requires a license, but is free for academic use: <a href="https://mosek.com/introduction/buy-mosek" rel="nofollow">https://mosek.com/introduction/buy-mosek</a> and is generally faster.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Check out the <code>examples</code> folder for demonstrations.</p>
</article></div>