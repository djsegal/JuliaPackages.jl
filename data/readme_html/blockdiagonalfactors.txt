<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-blockdiagonalfactors" class="anchor" aria-hidden="true" href="#blockdiagonalfactors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BlockDiagonalFactors</h1>
<p>
  <a href="https://doi.org/&lt;DOI&gt;" rel="nofollow">
    <img src="https://camo.githubusercontent.com/903d33cb2c9f4b7c714f2824df69d04215643753/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f3c444f493e2e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/&lt;DOI&gt;.svg" style="max-width:100%;">
  </a>
  <a href="https://github.com/briochemc/BlockDiagonalFactors.jl/blob/master/LICENSE">
    <img alt="License: MIT" src="https://camo.githubusercontent.com/3ccf4c50a1576b0dd30b286717451fa56b783512/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width:100%;">
  </a>
</p>
<p>
  <a href="https://briochemc.github.io/BlockDiagonalFactors.jl/stable/" rel="nofollow">
    <img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;">
  </a>
  <a href="https://briochemc.github.io/BlockDiagonalFactors.jl/latest/" rel="nofollow">
    <img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;">
  </a>
  (coming soon!)
</p>
<p>
  <a href="https://travis-ci.com/briochemc/BlockDiagonalFactors.jl" rel="nofollow">
    <img alt="Build Status" src="https://camo.githubusercontent.com/73dddb77f4bbc78fd9ac764dc2922fcfeec4ac39/68747470733a2f2f7472617669732d63692e636f6d2f6272696f6368656d632f426c6f636b446961676f6e616c466163746f72732e6a6c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.com/briochemc/BlockDiagonalFactors.jl.svg?branch=master" style="max-width:100%;">
  </a>
  <a href="https://coveralls.io/github/briochemc/BlockDiagonalFactors.jl?branch=master" rel="nofollow">
    <img src="https://camo.githubusercontent.com/e2ca531ac8576506085a7e09e44e005ff41466e6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6272696f6368656d632f426c6f636b446961676f6e616c466163746f72732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/briochemc/BlockDiagonalFactors.jl/badge.svg?branch=master" style="max-width:100%;">
  </a>
</p>
<p>
  <a href="https://ci.appveyor.com/project/briochemc/BlockDiagonalFactors-jl" rel="nofollow">
    <img alt="Build Status" src="https://camo.githubusercontent.com/43cf1c62e5d60a76d3f98cd74b136eabae02c585/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f70726d32786664367135706261316f6d3f7376673d74727565" data-canonical-src="https://ci.appveyor.com/api/projects/status/prm2xfd6q5pba1om?svg=true" style="max-width:100%;">
  </a>
  <a href="https://codecov.io/gh/briochemc/BlockDiagonalFactors.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/952e4de374a6618ed18cf6e3cea92466ae259324/68747470733a2f2f636f6465636f762e696f2f67682f6272696f6368656d632f426c6f636b446961676f6e616c466163746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" data-canonical-src="https://codecov.io/gh/briochemc/BlockDiagonalFactors.jl/branch/master/graph/badge.svg" style="max-width:100%;">
  </a>
</p>
<p>This package allows you to solve linear systems of the type <code>M * x = b</code> where <code>M</code> is block diagonal (sparse or not).
It is particularly efficient if some of the blocks of <code>M</code> are repeated, because it will only compute the factorizations of these repeated objects once.</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<p>Consider the block-diagonal matrix</p>
<div class="highlight highlight-source-julia"><pre>M <span class="pl-k">=</span> [A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> B <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> C <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> C <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> B <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> A]</pre></div>
<p>Instead of creating that big matrix, factorizing it whole, or factorizing each block, you can create a <code>BlockFactors</code> or <code>SparseBlockFactors</code> object (depending if <code>A</code>, <code>B</code>, and <code>C</code> are sparse) via the following syntax</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Form an array of the matrices</span>
Ms <span class="pl-k">=</span> [A, B, C]

<span class="pl-c"><span class="pl-c">#</span> and an array of "repetition" indices</span>
indices <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> to create the Block Diagonal Factors (BDF) object</span>
BDF <span class="pl-k">=</span> <span class="pl-c1">factorize</span>(Ms, indices)</pre></div>
<p>This way <code>A</code>, <code>B</code>, and <code>C</code> are factorized only once.
Then, you can solve for linear system <code>M * x = b</code></p>
<ul>
<li>
<p>via backslash (same as <code>M \ b</code>)</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> BDF <span class="pl-k">\</span> b</pre></div>
</li>
<li>
<p>via the inplace (same as <code>ldiv!(M, b)</code>)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ldiv!</span>(BDF, b)</pre></div>
</li>
<li>
<p>or via the inplace (same as <code>ldiv!(x, M, b)</code>)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ldiv!</span>(x, BDF, b)</pre></div>
</li>
</ul>
<h3><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How it works</h3>
<p>The package simply creates two new types, <code>BlockFactors</code> or <code>SparseBlockFactors</code>, which look like</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> (Sparse)BlockFactors{Tv}
    factors<span class="pl-k">::</span><span class="pl-c1">Vector</span>
    indices<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:Int}</span>
    m<span class="pl-k">::</span><span class="pl-c1">Int</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span></pre></div>
<p>and overloads <code>factorize</code>, <code>lu</code>, and other factorization functions to create those objects from an array of matrices and the repeating indices.
In order to solve linear systems it also overloads <code>\</code> and <code>ldiv!</code>.
That's it!</p>
<h3><a id="user-content-cite-it" class="anchor" aria-hidden="true" href="#cite-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cite it!</h3>
<p>If you use this package directly, please cite it!
Use the <a href="./CITATION.bib">CITATION.bib</a>, which contains a bibtex entry for the software (coming soon).</p>
</article></div>