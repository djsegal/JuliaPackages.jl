<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-blockdiagonalfactors" class="anchor" aria-hidden="true" href="#blockdiagonalfactors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BlockDiagonalFactors</h1>
<p dir="auto">
  <a href="https://doi.org/&lt;DOI&gt;" rel="nofollow">
    <img src="https://camo.githubusercontent.com/aa6abe3bef833da41aa23f5b9c3fa0bb84cd71b6ed13e078546ad3825576b0c7/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f3c444f493e2e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/&lt;DOI&gt;.svg" style="max-width: 100%;">
  </a>
  <a href="https://github.com/briochemc/BlockDiagonalFactors.jl/blob/master/LICENSE">
    <img alt="License: MIT" src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width: 100%;">
  </a>
</p>
<p dir="auto">
  <a href="https://briochemc.github.io/BlockDiagonalFactors.jl/stable/" rel="nofollow">
    <img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;">
  </a>
  <a href="https://briochemc.github.io/BlockDiagonalFactors.jl/latest/" rel="nofollow">
    <img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;">
  </a>
  (coming soon!)
</p>
<p dir="auto">
  <a href="https://travis-ci.com/briochemc/BlockDiagonalFactors.jl" rel="nofollow">
    <img alt="Build Status" src="https://camo.githubusercontent.com/0fe726dd57323a556550d731350f08da07387969475315b29710fae075c61774/68747470733a2f2f7472617669732d63692e636f6d2f6272696f6368656d632f426c6f636b446961676f6e616c466163746f72732e6a6c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.com/briochemc/BlockDiagonalFactors.jl.svg?branch=master" style="max-width: 100%;">
  </a>
  <a href="https://coveralls.io/github/briochemc/BlockDiagonalFactors.jl?branch=master" rel="nofollow">
    <img src="https://camo.githubusercontent.com/504d52e796a76704424465ba1424d61e145fb98d78d6764a9a8c5a7c8db75ba3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6272696f6368656d632f426c6f636b446961676f6e616c466163746f72732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/briochemc/BlockDiagonalFactors.jl/badge.svg?branch=master" style="max-width: 100%;">
  </a>
</p>
<p dir="auto">
  <a href="https://ci.appveyor.com/project/briochemc/BlockDiagonalFactors-jl" rel="nofollow">
    <img alt="Build Status" src="https://camo.githubusercontent.com/c43be45e0f5a0922972f112422a18e5be3ad6763ae9308c02a0e5a133ac0eb97/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f70726d32786664367135706261316f6d3f7376673d74727565" data-canonical-src="https://ci.appveyor.com/api/projects/status/prm2xfd6q5pba1om?svg=true" style="max-width: 100%;">
  </a>
  <a href="https://codecov.io/gh/briochemc/BlockDiagonalFactors.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/d8c5f710adc284cab9b07be0da16bb8460ce5b9c97d41fff9d9ef1b1f9095bae/68747470733a2f2f636f6465636f762e696f2f67682f6272696f6368656d632f426c6f636b446961676f6e616c466163746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" data-canonical-src="https://codecov.io/gh/briochemc/BlockDiagonalFactors.jl/branch/master/graph/badge.svg" style="max-width: 100%;">
  </a>
</p>
<p dir="auto">This package allows you to solve linear systems of the type <code>M * x = b</code> where <code>M</code> is block diagonal (sparse or not).
It is particularly efficient if some of the blocks of <code>M</code> are repeated, because it will only compute the factorizations of these repeated objects once.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">Consider the block-diagonal matrix</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="M = [A ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅
     ⋅ A ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅
     ⋅ ⋅ B ⋅ ⋅ ⋅ ⋅ ⋅ ⋅
     ⋅ ⋅ ⋅ A ⋅ ⋅ ⋅ ⋅ ⋅
     ⋅ ⋅ ⋅ ⋅ C ⋅ ⋅ ⋅ ⋅
     ⋅ ⋅ ⋅ ⋅ ⋅ A ⋅ ⋅ ⋅
     ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ C ⋅ ⋅
     ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ B ⋅
     ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ A]"><pre>M <span class="pl-k">=</span> [A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> B <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> C <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> A <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> C <span class="pl-k">⋅</span> <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> B <span class="pl-k">⋅</span>
     <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> <span class="pl-k">⋅</span> A]</pre></div>
<p dir="auto">Instead of creating that big matrix, factorizing it whole, or factorizing each block, you can create a <code>BlockFactors</code> or <code>SparseBlockFactors</code> object (depending if <code>A</code>, <code>B</code>, and <code>C</code> are sparse) via the following syntax</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Form an array of the matrices
Ms = [A, B, C]

# and an array of &quot;repetition&quot; indices
indices = [1, 1, 2, 1, 3, 1, 3, 2, 1]

# to create the Block Diagonal Factors (BDF) object
BDF = factorize(Ms, indices)"><pre><span class="pl-c"><span class="pl-c">#</span> Form an array of the matrices</span>
Ms <span class="pl-k">=</span> [A, B, C]

<span class="pl-c"><span class="pl-c">#</span> and an array of "repetition" indices</span>
indices <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> to create the Block Diagonal Factors (BDF) object</span>
BDF <span class="pl-k">=</span> <span class="pl-c1">factorize</span>(Ms, indices)</pre></div>
<p dir="auto">This way <code>A</code>, <code>B</code>, and <code>C</code> are factorized only once.
Then, you can solve for linear system <code>M * x = b</code></p>
<ul dir="auto">
<li>
<p dir="auto">via backslash (same as <code>M \ b</code>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = BDF \ b"><pre>x <span class="pl-k">=</span> BDF <span class="pl-k">\</span> b</pre></div>
</li>
<li>
<p dir="auto">via the inplace (same as <code>ldiv!(M, b)</code>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ldiv!(BDF, b)"><pre><span class="pl-c1">ldiv!</span>(BDF, b)</pre></div>
</li>
<li>
<p dir="auto">or via the inplace (same as <code>ldiv!(x, M, b)</code>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ldiv!(x, BDF, b)"><pre><span class="pl-c1">ldiv!</span>(x, BDF, b)</pre></div>
</li>
</ul>
<h3 dir="auto"><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How it works</h3>
<p dir="auto">The package simply creates two new types, <code>BlockFactors</code> or <code>SparseBlockFactors</code>, which look like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct (Sparse)BlockFactors{Tv}
    factors::Vector
    indices::Vector{&lt;:Int}
    m::Int
    n::Int
end"><pre><span class="pl-k">struct</span> (Sparse)BlockFactors{Tv}
    factors<span class="pl-k">::</span><span class="pl-c1">Vector</span>
    indices<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:Int}</span>
    m<span class="pl-k">::</span><span class="pl-c1">Int</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">and overloads <code>factorize</code>, <code>lu</code>, and other factorization functions to create those objects from an array of matrices and the repeating indices.
In order to solve linear systems it also overloads <code>\</code> and <code>ldiv!</code>.
That's it!</p>
<h3 dir="auto"><a id="user-content-cite-it" class="anchor" aria-hidden="true" href="#cite-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cite it!</h3>
<p dir="auto">If you use this package directly, please cite it!
Use the <a href="./CITATION.bib">CITATION.bib</a>, which contains a bibtex entry for the software (coming soon).</p>
</article></div>