<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-opus" class="anchor" aria-hidden="true" href="#opus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Opus</h1>
<p dir="auto"><a href="https://travis-ci.org/staticfloat/Opus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9eeee892b3144d919a5a81c4dd056a3728985f3aea7768c467b8941ac2af8437/68747470733a2f2f7472617669732d63692e6f72672f737461746963666c6f61742f4f7075732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/staticfloat/Opus.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Basic bindings to <code>libopus</code> to encode/decode <a href="https://www.opus-codec.org/" rel="nofollow">Opus</a> streams.  Opus is a low-latency yet high-quality audio codec with an impressive set of features and very simple API. Note that a common surprise with Opus is that it supports a very limited set of samplerates.  Do yourself a favor and just resample any audio (with, for example, a <a href="http://dspjl.readthedocs.io/en/latest/filters.html#resample" rel="nofollow">polyphase resampler from <code>DSP.jl</code></a>) you have to 48 KHz before encoding.</p>
<p dir="auto">Basic usage is to use <code>load()</code> and <code>save()</code> to read/write Opus streams to/from file paths, IO streams, etc., but the real fun to be had is in an <a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a> notebook with <code>OpusArrays</code>. These thin wrapper objects contain a <code>show()</code> implementation allowing you to output raw audio as Opus to a reasonably modern browser.  To try it out, put the following in an IJulia notebook:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Opus

# Create a seconds worth of 440Hz
t = linspace(0,1,48000)
audio = sin(2*π*440*t)

z = OpusArray(audio)"><pre><span class="pl-k">using</span> Opus

<span class="pl-c"><span class="pl-c">#</span> Create a seconds worth of 440Hz</span>
t <span class="pl-k">=</span> <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">48000</span>)
audio <span class="pl-k">=</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>π<span class="pl-k">*</span><span class="pl-c1">440</span><span class="pl-k">*</span>t)

z <span class="pl-k">=</span> <span class="pl-c1">OpusArray</span>(audio)</pre></div>
</article></div>