<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mathtoolkit" class="anchor" aria-hidden="true" href="#mathtoolkit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathToolkit</h1>
<p dir="auto"><a href="https://travis-ci.org/baruchel/MathToolkit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d864800b016fb72a0046a244426e9ce342bece37e58ce647c10fa4ae0ca967d6/68747470733a2f2f7472617669732d63692e6f72672f626172756368656c2f4d617468546f6f6c6b69742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baruchel/MathToolkit.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package providing various functions mainly for the purpose of experimental mathematics (detecting recurrence relations, finding integer relations, etc.).</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Implemented functions are:</p>
<ul dir="auto">
<li><code>recvec</code> for finding coefficients of a recurrence relation for a sequence of rational terms;</li>
<li><code>pslq</code> for finding an integer relation between several floating-point values.</li>
</ul>
<h3 dir="auto"><a id="user-content-using-recvec-for-detecting-a-recurrence-relation" class="anchor" aria-hidden="true" href="#using-recvec-for-detecting-a-recurrence-relation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>recvec</code> for detecting a recurrence relation</h3>
<p dir="auto">Argument should be a vector containing several <code>Integer</code> or <code>Rational</code> numbers. The general rule should be to use at least twice as many terms in the argument sequence as the expected length of the resulting vector.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; recvec([1,2,3,4,5,6,7,8,9,10])
3-element Array{Int64,1}:
  1
 -2
  1

julia&gt; recvec([0,1,1,2,3,5,8,13])
3-element Array{Int64,1}:
  1
 -1
 -1"><pre class="notranslate"><code>julia&gt; recvec([1,2,3,4,5,6,7,8,9,10])
3-element Array{Int64,1}:
  1
 -2
  1

julia&gt; recvec([0,1,1,2,3,5,8,13])
3-element Array{Int64,1}:
  1
 -1
 -1
</code></pre></div>
<p dir="auto">Resulting vector is normalized with all coefficients being integer numbers and the leading coefficient being positive:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; recvec([2^k for k=0:7])
2-element Array{Int64,1}:
  1
 -2

julia&gt; recvec([1//2^k for k=0:7])
2-element Array{Int64,1}:
  2
 -1"><pre class="notranslate"><code>julia&gt; recvec([2^k for k=0:7])
2-element Array{Int64,1}:
  1
 -2

julia&gt; recvec([1//2^k for k=0:7])
2-element Array{Int64,1}:
  2
 -1
</code></pre></div>
<h4 dir="auto"><a id="user-content-checking-the-result" class="anchor" aria-hidden="true" href="#checking-the-result"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Checking the result</h4>
<p dir="auto">The following example is a long sequence with a more complicated recurrence relation (of higher order); a check is performed on the last numbers of the sequences (here 16 numbers are involved):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="a = [k^2-2*k^3+5*k-1+k%12 for k=0:64]
b = recvec(a)
transpose(a[length(a)-length(b)+1:length(a)])*b"><pre class="notranslate"><code>a = [k^2-2*k^3+5*k-1+k%12 for k=0:64]
b = recvec(a)
transpose(a[length(a)-length(b)+1:length(a)])*b
</code></pre></div>
<p dir="auto">(the final product is 0 meaning the recurrence is right).</p>
<h4 dir="auto"><a id="user-content-result-when-no-recurrence-relation-is-found" class="anchor" aria-hidden="true" href="#result-when-no-recurrence-relation-is-found"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Result when no recurrence relation is found</h4>
<p dir="auto">An empty vector is returned when no recurrence relation is found:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; recvec([[k for k=1:16];[42]])
0-element Array{Int64,1}"><pre class="notranslate"><code>julia&gt; recvec([[k for k=1:16];[42]])
0-element Array{Int64,1}
</code></pre></div>
<h4 dir="auto"><a id="user-content-changing-the-type-used-in-the-computation" class="anchor" aria-hidden="true" href="#changing-the-type-used-in-the-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Changing the type used in the computation</h4>
<p dir="auto">The <code>compute</code> keyword allows to change the integer type used in the computation; default type is <code>BigInt</code> in order to keep the function very general as its default behaviour. Most often it is possible however to use a quicker type in order to increase the speed of the computation:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; recvec([2*k^2-3*k+7 for k=0:7], compute=Int128)
4-element Array{Int64,1}:
  1
 -3
  3
 -1"><pre class="notranslate"><code>julia&gt; recvec([2*k^2-3*k+7 for k=0:7], compute=Int128)
4-element Array{Int64,1}:
  1
 -3
  3
 -1
</code></pre></div>
<h4 dir="auto"><a id="user-content-changing-the-type-of-the-resulting-vector" class="anchor" aria-hidden="true" href="#changing-the-type-of-the-resulting-vector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Changing the type of the resulting vector</h4>
<p dir="auto">The <code>output</code> keyword allows to choose the integer type used in the returned value of the function; default type is <code>Int64</code>. Many other types may be used according to the needs of the user:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; recvec([3^k-2 for k=0:15], compute=Int128, output=Float64)
3-element Array{Float64,1}:
  1.0
 -4.0
  3.0"><pre class="notranslate"><code>julia&gt; recvec([3^k-2 for k=0:15], compute=Int128, output=Float64)
3-element Array{Float64,1}:
  1.0
 -4.0
  3.0
</code></pre></div>
<h4 dir="auto"><a id="user-content-algorithm" class="anchor" aria-hidden="true" href="#algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithm</h4>
<p dir="auto">The algorithm is a very robust and optimized version of the Padé approximants method. Quicker algorithms can be found for long sequences, but this version is very efficient for most cases. It has a very low memory footprint, even when large sequences are computed.</p>
<h3 dir="auto"><a id="user-content-using-pslq-for-detecting-integer-relations" class="anchor" aria-hidden="true" href="#using-pslq-for-detecting-integer-relations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>pslq</code> for detecting integer relations</h3>
<p dir="auto">Two arguments are required: a vector containing several floating-point values (the type <code>BigFloat</code> should be the type of the variables) and a precision as a floating-point value:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; z=[BigFloat(pi)*2-BigFloat(e)/3-5, BigFloat(pi), BigFloat(e), 1]
4-element Array{BigFloat,1}:
 3.770913643599047318051909427747849358085897675168917836275666420409406024545445e-01
 3.141592653589793238462643383279502884197169399375105820974944592307816406286198    
 2.718281828459045235360287471352662497757247093699959574966967627724076630353555    
 1.000000000000000000000000000000000000000000000000000000000000000000000000000000    

julia&gt; pslq(z,1e-10)
4-element Array{Integer,1}:
  -3
   6
  -1
 -15

julia&gt; transpose(z)*pslq(z,1e-10)
1-element Array{BigFloat,1}:
 1.381786968815111140061816298048063931378560058309805021603792555226974688505988e-76"><pre class="notranslate"><code>julia&gt; z=[BigFloat(pi)*2-BigFloat(e)/3-5, BigFloat(pi), BigFloat(e), 1]
4-element Array{BigFloat,1}:
 3.770913643599047318051909427747849358085897675168917836275666420409406024545445e-01
 3.141592653589793238462643383279502884197169399375105820974944592307816406286198    
 2.718281828459045235360287471352662497757247093699959574966967627724076630353555    
 1.000000000000000000000000000000000000000000000000000000000000000000000000000000    

julia&gt; pslq(z,1e-10)
4-element Array{Integer,1}:
  -3
   6
  -1
 -15

julia&gt; transpose(z)*pslq(z,1e-10)
1-element Array{BigFloat,1}:
 1.381786968815111140061816298048063931378560058309805021603792555226974688505988e-76
</code></pre></div>
<p dir="auto">The algorithm has a well-known usage for detecting if a number is algebraic or not:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; x=sin(pi/BigFloat(3))
8.660254037844386467637231707529361834714026269051903140279034897259665084543988e-01

julia&gt; pslq([1,x,x^2],1e-20)
3-element Array{Integer,1}:
 -3
  0
  4"><pre class="notranslate"><code>julia&gt; x=sin(pi/BigFloat(3))
8.660254037844386467637231707529361834714026269051903140279034897259665084543988e-01

julia&gt; pslq([1,x,x^2],1e-20)
3-element Array{Integer,1}:
 -3
  0
  4
</code></pre></div>
<p dir="auto">An optional <code>maxiter</code> argument (default being 256) allows to change the maximum number of iterations in the main loop of the algorithm.</p>
</article></div>