<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center">
  <a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/logo.png"><img src="./docs/src/assets/logo.png" alt="SyntaxTree.jl" style="max-width:100%;"></a>
</p>
<h1><a id="user-content-syntaxtreejl" class="anchor" aria-hidden="true" href="#syntaxtreejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SyntaxTree.jl</h1>
<p><em>Toolset for modifying Julia AST</em></p>
<p><a href="https://travis-ci.org/chakravala/SyntaxTree.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1cbf1ed59e6427b21e0efa31b13c7d47555715f2706b57cc35270bbd8dabf80b/68747470733a2f2f7472617669732d63692e6f72672f6368616b726176616c612f53796e746178547265652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chakravala/SyntaxTree.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chakravala/syntaxtree-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9dee208aafe10163cecad88435a32313723b27249a89dfb54c95155c59b1afe1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75646430797672716b657161356862703f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/udd0yvrqkeqa5hbp?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/chakravala/SyntaxTree.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/934380b17c13cc2ee9cb76fdd0e7856802cd958ec91b22c024ab1facc167ed7d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6368616b726176616c612f53796e746178547265652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/chakravala/SyntaxTree.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/chakravala/SyntaxTree.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0d2a37c81ddec3639b749ce60745a7e06a0a45ad478eaca24d5bd43c2b8fd2f5/687474703a2f2f636f6465636f762e696f2f6769746875622f6368616b726176616c612f53796e746178547265652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/chakravala/SyntaxTree.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package is a general purpose toolkit intended for manipulations of Julia's AST. It contains methods like <code>linefilter!</code>, <code>callcount</code>, <code>genfun</code>, <code>genlatest</code>, and <code>exprval</code>.
Certain useful expression transformations are also possible, such as the <code>SyntaxTree.sub</code> method to convert scalar values to a single type, <code>SyntaxTree.abs</code> to apply <code>Base.abs</code> to all scalars and operations, and also <code>SyntaxTree.alg</code> to introduce an algebraic machine epsilon bound at each operation.</p>
<p>The <code>exprval</code> method to compute the expression value is defined in "Optimal polynomial characteristic methods" by Michael Reed in 2018 with the supporting <code>expravg</code> and <code>exprdev</code> methods to compute scalar averages and standard deviations for expressions. The expression value can be used to order equivalent forms of an expression, where lower values are more optimal and computationally efficient.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Recursively filter out <code>:LineNumberNode</code> from <code>Expr</code> objects:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; expr = quote
           x = 7
           y = x^2
       end
quote
    #= REPL[3]:2 =#
    x = 7
    #= REPL[3]:3 =#
    y = x ^ 2
end

julia&gt; linefilter!(expr)
quote
    x = 7
    y = x ^ 2
end
"><pre>julia<span class="pl-k">&gt;</span> expr <span class="pl-k">=</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">7</span>
           y <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
       <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-c"><span class="pl-c">#=</span> REPL[3]:2 <span class="pl-c">=#</span></span>
    x <span class="pl-k">=</span> <span class="pl-c1">7</span>
    <span class="pl-c"><span class="pl-c">#=</span> REPL[3]:3 <span class="pl-c">=#</span></span>
    y <span class="pl-k">=</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">linefilter!</span>(expr)
<span class="pl-k">quote</span>
    x <span class="pl-k">=</span> <span class="pl-c1">7</span>
    y <span class="pl-k">=</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p>Substitute numerical values with type conversion:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SyntaxTree.sub(Float64,:(2x^2-1//2))
:(2.0 * x ^ 2 - 1.0 // 2.0)
"><pre>julia<span class="pl-k">&gt;</span> SyntaxTree<span class="pl-k">.</span><span class="pl-c1">sub</span>(Float64,:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
:(<span class="pl-c1">2.0</span> <span class="pl-k">*</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">1.0</span> <span class="pl-k">//</span> <span class="pl-c1">2.0</span>)</pre></div>
<p>Apply <code>abs</code> to an expression recursively:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SyntaxTree.abs(:(2x^2-1//2))
:(2 * x ^ 2 + 1 // 2)
"><pre>julia<span class="pl-k">&gt;</span> SyntaxTree<span class="pl-k">.</span><span class="pl-c1">abs</span>(:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
:(<span class="pl-c1">2</span> <span class="pl-k">*</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">//</span> <span class="pl-c1">2</span>)</pre></div>
<p>Recursively insert a machine epsilon bound <code>(1+ϵ)</code> per call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SyntaxTree.alg(:(2x^2-1//2))
:((1 + ϵ) * ((1 + ϵ) * (2 * ((1 + ϵ) * x ^ 2)) - (1 + ϵ) * 1 // 2))
"><pre>julia<span class="pl-k">&gt;</span> SyntaxTree<span class="pl-k">.</span><span class="pl-c1">alg</span>(:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
:((<span class="pl-c1">1</span> <span class="pl-k">+</span> ϵ) <span class="pl-k">*</span> ((<span class="pl-c1">1</span> <span class="pl-k">+</span> ϵ) <span class="pl-k">*</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> ((<span class="pl-c1">1</span> <span class="pl-k">+</span> ϵ) <span class="pl-k">*</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span>)) <span class="pl-k">-</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> ϵ) <span class="pl-k">*</span> <span class="pl-c1">1</span> <span class="pl-k">//</span> <span class="pl-c1">2</span>))</pre></div>
<p>Return an anonymous function given <code>expr</code> and <code>args</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = @genfun x^2-y^2 x y
#3 (generic function with 1 method)

julia&gt; a(5,4)
9

julia&gt; b = genfun(:(x^2-y^2),[:x,:y])
#1 (generic function with 1 method)

julia&gt; b(5,4)
9
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">@genfun</span> x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> x y
<span class="pl-c"><span class="pl-c">#</span>3 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">a</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">genfun</span>(:(x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>y<span class="pl-k">^</span><span class="pl-c1">2</span>),[<span class="pl-c1">:x</span>,<span class="pl-c1">:y</span>])
<span class="pl-c"><span class="pl-c">#</span>1 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">b</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">9</span></pre></div>
<p>Optionally, <code>genlatest</code> or <code>@genlatest</code> can be used if <code>Base.invokelatest</code> is needed.</p>
<p>Obtain the number of <code>call</code> operations in an expression:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; callcount(:(2x^2-1//2))
4
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">callcount</span>(:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
<span class="pl-c1">4</span></pre></div>
<p>Recursively obtain the <em>number of scalars</em> in an expression, the <em>average of those scalars</em>, the <em>number of non-trivial exponents</em> in the expression, and the <em>average of the exponents</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SyntaxTree.expravg(:(2x^2-1//2))
(3, 0.7954314537066303, 1, 2.0)
"><pre>julia<span class="pl-k">&gt;</span> SyntaxTree<span class="pl-k">.</span><span class="pl-c1">expravg</span>(:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
(<span class="pl-c1">3</span>, <span class="pl-c1">0.7954314537066303</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>)</pre></div>
<p>Get the <em>standard deviation</em> of the logarithm of the scalars in an expression:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SyntaxTree.exprdev(:(2x^2-1//2))
0.22136580504842668
"><pre>julia<span class="pl-k">&gt;</span> SyntaxTree<span class="pl-k">.</span><span class="pl-c1">exprdev</span>(:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
<span class="pl-c1">0.22136580504842668</span></pre></div>
<p>Compute the expression value and other characteristics:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SyntaxTree.exprval(:(2x^2-1//2))
(4.89405674908118, 4, 0.4704952763295575, 0.7954314537066303, 2.0)
"><pre>julia<span class="pl-k">&gt;</span> SyntaxTree<span class="pl-k">.</span><span class="pl-c1">exprval</span>(:(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>))
(<span class="pl-c1">4.89405674908118</span>, <span class="pl-c1">4</span>, <span class="pl-c1">0.4704952763295575</span>, <span class="pl-c1">0.7954314537066303</span>, <span class="pl-c1">2.0</span>)</pre></div>
<p>The <strong>first</strong> value is the <em>expression value</em>, the <strong>second</strong> is the <em>number of operations</em>, the <strong>third</strong> is the <em>standard deviation</em> of the logarithms of the scalars, the <strong>fourth</strong> is the <em>average</em> of the logarithms of the scalars, and the <strong>fifth</strong> is the <em>average of the exponents</em>.</p>
</article></div>