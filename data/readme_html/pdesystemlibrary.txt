<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pdesystemlibraryjl" class="anchor" aria-hidden="true" href="#pdesystemlibraryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PDESystemLibrary.jl</h1>
<p dir="auto">A library of systems of partial differential equations, as defined with ModelingToolkit.jl in Julia.</p>
<p dir="auto">This library contains a list of systems, with tags highlighting their properties included in the <code>metadata</code> field.
These can then be solved with the help of the various discretizer packages of SciML such as:</p>
<ul dir="auto">
<li><a href="https://www.github.com/SciML/MethodOfLines.jl">MethodOfLines.jl</a></li>
<li><a href="https://www.github.com/SciML/NeuralPDE.jl">NeuralPDE.jl</a></li>
</ul>
<p dir="auto">It can be used for benchmarking, verification, showing off your work, research in to discretization methods, and any other ideas you might have.</p>
<p dir="auto">If you have a well posed system, please add it! Any and all PDE systems are welcome, even if they cannot currently be solved by discretizer packages.
Please include a short abstract where possible, explaining where the system arises to aid future readers and large language models.</p>
<p dir="auto">Please always use <code>t</code> for your time dimension, and avoid if you don't have one.</p>
<h2 dir="auto"><a id="user-content-example-system-with-the-heat-equation" class="anchor" aria-hidden="true" href="#example-system-with-the-heat-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example system with the heat equation:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
# The Heat Equation in 1D with Dirichlet Boundary Conditions.

1D heat equation with Dirichlet boundary conditions.
This models the temperature of a rod over time, where the ends are held at a constant temperature.

It is initialized with a sinusoidal profile.
The equation is given by:

[Insert LaTeX here]
&quot;&quot;&quot;
function heat_1d1()
    @variables x t u(..)
    @parameters D

    Dxx = Differential(x)
    Dt = Differential(t)

    eqs = [Dt(u(t, x)) ~ D * Dxx(u(t, x))]
    bcs = [u(0, x) ~ sin(2pi * x),
           u(t, 0) ~ 0.0, u(t, 1) ~ 0.0]

    domains = [t ∈ Interval(0.0, 1.0),
               x ∈ Interval(0.0, 1.0)]

    analytic = [u(t, x) ~ exp(-4pi^2 * D * t) * sin(2pi * x)]

    tags = [&quot;1D&quot;, &quot;Dirichlet&quot;, &quot;Linear&quot;, &quot;Diffusion&quot;, &quot;Heat&quot;]

    @named heat_1d1 = PDESystem(eqs, bcs, domains, [t, x], [u(t, x)], [D =&gt; 1.0],
                               analytic = analytic, metadata = tags)

    heat_1d1
end

push!(all_systems, heat_1d1())"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s"># The Heat Equation in 1D with Dirichlet Boundary Conditions.</span>
<span class="pl-s"></span>
<span class="pl-s">1D heat equation with Dirichlet boundary conditions.</span>
<span class="pl-s">This models the temperature of a rod over time, where the ends are held at a constant temperature.</span>
<span class="pl-s"></span>
<span class="pl-s">It is initialized with a sinusoidal profile.</span>
<span class="pl-s">The equation is given by:</span>
<span class="pl-s"></span>
<span class="pl-s">[Insert LaTeX here]</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> <span class="pl-en">heat_1d1</span>()
    <span class="pl-c1">@variables</span> x t <span class="pl-c1">u</span>(<span class="pl-k">..</span>)
    <span class="pl-c1">@parameters</span> D

    Dxx <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(x)
    Dt <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(t)

    eqs <span class="pl-k">=</span> [<span class="pl-c1">Dt</span>(<span class="pl-c1">u</span>(t, x)) <span class="pl-k">~</span> D <span class="pl-k">*</span> <span class="pl-c1">Dxx</span>(<span class="pl-c1">u</span>(t, x))]
    bcs <span class="pl-k">=</span> [<span class="pl-c1">u</span>(<span class="pl-c1">0</span>, x) <span class="pl-k">~</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2pi</span> <span class="pl-k">*</span> x),
           <span class="pl-c1">u</span>(t, <span class="pl-c1">0</span>) <span class="pl-k">~</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">u</span>(t, <span class="pl-c1">1</span>) <span class="pl-k">~</span> <span class="pl-c1">0.0</span>]

    domains <span class="pl-k">=</span> [t <span class="pl-k">∈</span> <span class="pl-c1">Interval</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>),
               x <span class="pl-k">∈</span> <span class="pl-c1">Interval</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)]

    analytic <span class="pl-k">=</span> [<span class="pl-c1">u</span>(t, x) <span class="pl-k">~</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">4pi</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> D <span class="pl-k">*</span> t) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2pi</span> <span class="pl-k">*</span> x)]

    tags <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>1D<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Dirichlet<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Linear<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Diffusion<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Heat<span class="pl-pds">"</span></span>]

    <span class="pl-c1">@named</span> heat_1d1 <span class="pl-k">=</span> <span class="pl-c1">PDESystem</span>(eqs, bcs, domains, [t, x], [<span class="pl-c1">u</span>(t, x)], [D <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>],
                               analytic <span class="pl-k">=</span> analytic, metadata <span class="pl-k">=</span> tags)

    heat_1d1
<span class="pl-k">end</span>

<span class="pl-c1">push!</span>(all_systems, <span class="pl-c1">heat_1d1</span>())</pre></div>
<h2 dir="auto"><a id="user-content-a-note-on-analytic-solutions" class="anchor" aria-hidden="true" href="#a-note-on-analytic-solutions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A note on analytic solutions</h2>
<p dir="auto">Analytic solutions are optional, but very helpful, so if you know an analytic solution please include it.
Downstream packages must check whether analytic solutions are present in a system before using it to handle the case where they are missing.</p>
<p dir="auto">Analytic solutions can be provided as explicit symbolic equations as above, or alternatively a reference solution function can be provided
where the analytic solution is unknown, but a good discretization for the system is known.</p>
<p dir="auto">Reference functions should have the same argument signature as their parent variable,
with an argument <code>ps</code> prepended, this argument takes your symbolic parameter values in the order they are specified in the system.
If this is discretized, you will need to interpolate it. See <code>lib/brusselator.jl</code> for an example of this. (Extrapolations are not required)</p>
<p dir="auto">Reference functions should be provided as a vector of pairs from the symbolic form to their reference function.</p>
</article></div>