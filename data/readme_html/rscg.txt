<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.org/cometscome/RSCG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0591291485c622f2bdcdd1bbb0eda9b569ad5d954421fc4fe1f3205683a54a88/68747470733a2f2f7472617669732d63692e6f72672f636f6d657473636f6d652f525343472e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cometscome/RSCG.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/cometscome/RSCG.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2c0c19140828b388e8ff2a02d9301bf57bfc94a3fb7428d2cb686a4e00444196/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636f6d657473636f6d652f525343472e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/cometscome/RSCG.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-rscgjl" class="anchor" aria-hidden="true" href="#rscgjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RSCG.jl</h1>
<p dir="auto">This package can calculate the elements of the Green's function:</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="90ff84eeb280f26b1b099d2067b64eea">$$G_ij(σk) = ([σj I - A]^-1)_{ij},$$</math-renderer>
<p dir="auto">with the use of the reduced-shifted conjugate gradient method
(See, Y. Nagai, Y. Shinohara, Y. Futamura, and T. Sakurai,[arXiv:1607.03992v2 or DOI:10.7566/JPSJ.86.014708]).
One can obtain <code>G_{ij}(\sigma_k)</code> with different frequencies <code>\sigma_k</code>, simultaneously.</p>
<p dir="auto">The matrix should be symmetric or hermitian.</p>
<p dir="auto">We can use Arrays, LinearMaps, and SparseArrays.</p>
<p dir="auto">This software is written in Julia 1.0.</p>
<p dir="auto">This software is released under the MIT License, see LICENSE.</p>
<h2 dir="auto">
<a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add RSCG"><pre class="notranslate"><code>add RSCG
</code></pre></div>
<h2 dir="auto">
<a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Let us obtain the Green' functions <code>G(z)</code> on the complex plane.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="M = 100
σ = zeros(ComplexF64,M)
σmin = -4.0*im-1.2
σmax = 4.0*im +4.3
for i=1:M
    σ[i] = (i-1)*(σmax-σmin)/(M-1) + σmin
end"><pre>M <span class="pl-k">=</span> <span class="pl-c1">100</span>
σ <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(ComplexF64,M)
σmin <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span><span class="pl-k">*</span>im<span class="pl-k">-</span><span class="pl-c1">1.2</span>
σmax <span class="pl-k">=</span> <span class="pl-c1">4.0</span><span class="pl-k">*</span>im <span class="pl-k">+</span><span class="pl-c1">4.3</span>
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>M
    σ[i] <span class="pl-k">=</span> (i<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(σmax<span class="pl-k">-</span>σmin)<span class="pl-k">/</span>(M<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> σmin
<span class="pl-k">end</span></pre></div>
<p dir="auto">We define the matrix:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays


function make_mat(n)
    A = spzeros(Float64,n,n)
    t = -1.0
    μ = -1.5
    for i=1:n
        dx = 1
        jp = i+dx
        jp += ifelse(jp &gt; n,-n,0) #+1
        dx = -1
        jm = i+dx
        jm += ifelse(jm &lt; 1,n,0) #-1
        A[i,jp] = t
        A[i,i] = -μ
        A[i,jm] = t
    end
    return A
end

n=1000
A1 = make_mat(n)"><pre><span class="pl-k">using</span> SparseArrays


<span class="pl-k">function</span> <span class="pl-en">make_mat</span>(n)
    A <span class="pl-k">=</span> <span class="pl-c1">spzeros</span>(Float64,n,n)
    t <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>
    μ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.5</span>
    <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
        dx <span class="pl-k">=</span> <span class="pl-c1">1</span>
        jp <span class="pl-k">=</span> i<span class="pl-k">+</span>dx
        jp <span class="pl-k">+=</span> <span class="pl-c1">ifelse</span>(jp <span class="pl-k">&gt;</span> n,<span class="pl-k">-</span>n,<span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span>+1</span>
        dx <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
        jm <span class="pl-k">=</span> i<span class="pl-k">+</span>dx
        jm <span class="pl-k">+=</span> <span class="pl-c1">ifelse</span>(jm <span class="pl-k">&lt;</span> <span class="pl-c1">1</span>,n,<span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span>-1</span>
        A[i,jp] <span class="pl-k">=</span> t
        A[i,i] <span class="pl-k">=</span> <span class="pl-k">-</span>μ
        A[i,jm] <span class="pl-k">=</span> t
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> A
<span class="pl-k">end</span>

n<span class="pl-k">=</span><span class="pl-c1">1000</span>
A1 <span class="pl-k">=</span> <span class="pl-c1">make_mat</span>(n)</pre></div>
<p dir="auto">Or, we can also use LinearMaps.jl to define the matrix:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearMaps

function set_diff(v)
    function calc_diff!(y::AbstractVector, x::AbstractVector)
        n = length(x)
        length(y) == n || throw(DimensionMismatch())
        μ = -1.5
        for i=1:n
            dx = 1
            jp = i+dx
            jp += ifelse(jp &gt; n,-n,0) #+1
            dx = -1
            jm = i+dx
            jm += ifelse(jm &lt; 1,n,0) #-1
            y[i] = v*(x[jp]+x[jm])-μ*x[i]
        end

        return y
    end
    (y,x) -&gt; calc_diff!(y,x)
end

n=1000
Al = set_diff(-1.0)
A2 = LinearMap(Al, n; ismutating=true,issymmetric=true)"><pre><span class="pl-k">using</span> LinearMaps

<span class="pl-k">function</span> <span class="pl-en">set_diff</span>(v)
    <span class="pl-k">function</span> <span class="pl-en">calc_diff!</span>(y<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)
        n <span class="pl-k">=</span> <span class="pl-c1">length</span>(x)
        <span class="pl-c1">length</span>(y) <span class="pl-k">==</span> n <span class="pl-k">||</span> <span class="pl-c1">throw</span>(<span class="pl-c1">DimensionMismatch</span>())
        μ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.5</span>
        <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
            dx <span class="pl-k">=</span> <span class="pl-c1">1</span>
            jp <span class="pl-k">=</span> i<span class="pl-k">+</span>dx
            jp <span class="pl-k">+=</span> <span class="pl-c1">ifelse</span>(jp <span class="pl-k">&gt;</span> n,<span class="pl-k">-</span>n,<span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span>+1</span>
            dx <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
            jm <span class="pl-k">=</span> i<span class="pl-k">+</span>dx
            jm <span class="pl-k">+=</span> <span class="pl-c1">ifelse</span>(jm <span class="pl-k">&lt;</span> <span class="pl-c1">1</span>,n,<span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span>-1</span>
            y[i] <span class="pl-k">=</span> v<span class="pl-k">*</span>(x[jp]<span class="pl-k">+</span>x[jm])<span class="pl-k">-</span>μ<span class="pl-k">*</span>x[i]
        <span class="pl-k">end</span>

        <span class="pl-k">return</span> y
    <span class="pl-k">end</span>
    (y,x) <span class="pl-k">-&gt;</span> <span class="pl-c1">calc_diff!</span>(y,x)
<span class="pl-k">end</span>

n<span class="pl-k">=</span><span class="pl-c1">1000</span>
Al <span class="pl-k">=</span> <span class="pl-c1">set_diff</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>)
A2 <span class="pl-k">=</span> <span class="pl-c1">LinearMap</span>(Al, n; ismutating<span class="pl-k">=</span><span class="pl-c1">true</span>,issymmetric<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h3 dir="auto">
<a id="user-content-an-element" class="anchor" aria-hidden="true" href="#an-element"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>an element</h3>
<p dir="auto">If we want to obtain the element <code>G_{ij}(σ_k)</code>,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = 1
j = 1
Gij1 = greensfunctions(i,j,σ,A1) #SparseArrays
Gij2 = greensfunctions(i,j,σ,A2) #LinearMaps"><pre>i <span class="pl-k">=</span> <span class="pl-c1">1</span>
j <span class="pl-k">=</span> <span class="pl-c1">1</span>
Gij1 <span class="pl-k">=</span> <span class="pl-c1">greensfunctions</span>(i,j,σ,A1) <span class="pl-c"><span class="pl-c">#</span>SparseArrays</span>
Gij2 <span class="pl-k">=</span> <span class="pl-c1">greensfunctions</span>(i,j,σ,A2) <span class="pl-c"><span class="pl-c">#</span>LinearMaps</span></pre></div>
<h3 dir="auto">
<a id="user-content-elements" class="anchor" aria-hidden="true" href="#elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>elements</h3>
<p dir="auto">If we want to obtain the elements <code>G_{ij}(σ_k)</code> with different i,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="vec_i = [1,4,8,43,98]
j = 1
vec_Gij1 = greensfunctions(vec_i,j,σ,A1) #SparseArrays
vec_Gij2 = greensfunctions(vec_i,j,σ,A2) #LinearMaps"><pre>vec_i <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">8</span>,<span class="pl-c1">43</span>,<span class="pl-c1">98</span>]
j <span class="pl-k">=</span> <span class="pl-c1">1</span>
vec_Gij1 <span class="pl-k">=</span> <span class="pl-c1">greensfunctions</span>(vec_i,j,σ,A1) <span class="pl-c"><span class="pl-c">#</span>SparseArrays</span>
vec_Gij2 <span class="pl-k">=</span> <span class="pl-c1">greensfunctions</span>(vec_i,j,σ,A2) <span class="pl-c"><span class="pl-c">#</span>LinearMaps</span></pre></div>
<h2 dir="auto">
<a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<p dir="auto"><code>greensfunctions(i::Integer,j::Integer,σ::Array{ComplexF64,1},A)</code></p>
<p dir="auto">Inputs:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>i</code> :index of the Green's function</p>
</li>
<li>
<p dir="auto"><code>j</code> :index of the Green's function</p>
</li>
<li>
<p dir="auto"><code>σ</code> :frequencies</p>
</li>
<li>
<p dir="auto"><code>A</code> :hermitian matrix. We can use Arrays,LinearMaps, SparseArrays</p>
</li>
<li>
<p dir="auto"><code>eps</code> :residual (optional) Default:<code>1e-12</code></p>
</li>
<li>
<p dir="auto"><code>maximumsteps</code> : maximum number of steps (optional) Default:<code>20000</code></p>
</li>
</ul>
<p dir="auto">Output:</p>
<ul dir="auto">
<li>
<code>Gij[1:M]</code>: the matrix element Green's functions at M frequencies defined by <code>\sigma_k</code>.</li>
</ul>
<p dir="auto"><code>greensfunctions(vec_left::Array{&lt;:Integer,1},j::Integer,σ::Array{ComplexF64,1},A)</code></p>
<p dir="auto">Inputs:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>vec_left</code> :i indices of the Green's function</p>
</li>
<li>
<p dir="auto"><code>j</code> :index of the Green's function</p>
</li>
<li>
<p dir="auto"><code>σ</code> :frequencies</p>
</li>
<li>
<p dir="auto"><code>A</code> :hermitian matrix. We can use Arrays,LinearMaps, SparseArrays</p>
</li>
<li>
<p dir="auto"><code>eps</code> :residual (optional) Default:<code>1e-12</code></p>
</li>
<li>
<p dir="auto"><code>maximumsteps</code> : maximum number of steps (optional) Default:<code>20000</code></p>
</li>
</ul>
<p dir="auto">Output:</p>
<ul dir="auto">
<li>
<code>Gij[1:M,1:length(vec_left)]</code>: the matrix element Green's functions at M frequencies defined by <code>\sigma_k</code>.</li>
</ul>
<p dir="auto"><code>greensfunctions_col(j::Integer,σ::Array{ComplexF64,1},A)</code></p>
<p dir="auto">Inputs:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>σ</code> :frequencies</p>
</li>
<li>
<p dir="auto"><code>A</code> :hermitian matrix. We can use Arrays,LinearMaps, SparseArrays</p>
</li>
<li>
<p dir="auto"><code>b</code> :input vector</p>
</li>
<li>
<p dir="auto"><code>eps</code> :residual (optional) Default:<code>1e-12</code></p>
</li>
<li>
<p dir="auto"><code>maximumsteps</code> : maximum number of steps (optional) Default:<code>20000</code></p>
</li>
</ul>
<p dir="auto">Output:</p>
<ul dir="auto">
<li>
<code>Gij[1:M,1:size(A)[1]]</code>: the matrix elements Green's functions of j-th col at M frequencies defined by <code>\sigma_k</code>.</li>
</ul>
</article></div>