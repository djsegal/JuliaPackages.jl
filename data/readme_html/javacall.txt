<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-javacalljl" class="anchor" aria-hidden="true" href="#javacalljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JavaCall.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaInterop/JavaCall.jl/actions/workflows/CI.yml/badge.svg"><img src="https://github.com/JuliaInterop/JavaCall.jl/actions/workflows/CI.yml/badge.svg" alt="master GHA CI" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaInterop/JavaCall.jl/actions/workflows/CI.yml/badge.svg?branch=v0.7"><img src="https://github.com/JuliaInterop/JavaCall.jl/actions/workflows/CI.yml/badge.svg?branch=v0.7" alt="v0.7 GHA CI" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/aviks/javacall-jl-6c24s" rel="nofollow"><img src="https://camo.githubusercontent.com/c2f12fc2d3dc4294d8dd93f4d09549e48db9aa37fde2e32ff49f617a8404e4f0/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f71657536756c396f39733674357469773f7376673d74727565" alt="Windows x86 CI" data-canonical-src="https://ci.appveyor.com/api/projects/status/qeu6ul9o9s6t5tiw?svg=true" style="max-width: 100%;"></a>
<a href="https://gitter.im/JavaCall-jl/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/97b796477e55a8895b8ec1a4b7d577d8a7871c47810e3328054201d91f33f0c9/68747470733a2f2f6261646765732e6769747465722e696d2f4a61766143616c6c2d6a6c2f636f6d6d756e6974792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/JavaCall-jl/community.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Call Java programs from Julia.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Documentation is available at <a href="http://juliainterop.github.io/JavaCall.jl" rel="nofollow">http://juliainterop.github.io/JavaCall.jl</a></p>
<h2 dir="auto"><a id="user-content-quick-start-example-usage" class="anchor" aria-hidden="true" href="#quick-start-example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start Example Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ JULIA_COPY_STACKS=1 julia

julia&gt; using Pkg; Pkg.activate(; temp = true)
  Activating new project at `/tmp/jl_e6uPja`

julia&gt; using JavaCall
 │ Package JavaCall not found, but a package named JavaCall is available from a
 │ registry. 
 │ Install package?
 │   (jl_e6uPja) pkg&gt; add JavaCall 
 └ (y/n) [y]: y

...

julia&gt; JavaCall.addClassPath(pwd()) # Set appropriate classpath

julia&gt; JavaCall.addOpts(&quot;-Xmx1024M&quot;) # Use 1 GB of memory
OrderedCollections.OrderedSet{String} with 1 element:
  &quot;-Xmx1024M&quot;

julia&gt; JavaCall.addOpts(&quot;-Xrs&quot;) # Disable signal handling in the JVM, reducing performance but enhancing compatability
OrderedCollections.OrderedSet{String} with 2 elements:
  &quot;-Xmx1024M&quot;
  &quot;-Xrs&quot;

julia&gt; JavaCall.init() # Call before using `jcall` or `jfield`. Do not use this in package `__init__()` to allow other packages to add classpaths or options.

julia&gt; jls = @jimport java.lang.System
JavaObject{Symbol(&quot;java.lang.System&quot;)}

julia&gt; out = jfield(jls, &quot;out&quot;, @jimport java.io.PrintStream) # Third arg is optional, but helps type stability.
JavaObject{Symbol(&quot;java.io.PrintStream&quot;)}(JavaCall.JavaLocalRef(Ptr{Nothing} @0x0000000003ecda38))

julia&gt; jcall(out, &quot;println&quot;, Nothing, (JString,), &quot;Hello World&quot;)
Hello World"><pre><span class="pl-k">$</span> JULIA_COPY_STACKS<span class="pl-k">=</span><span class="pl-c1">1</span> julia

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">activate</span>(; temp <span class="pl-k">=</span> <span class="pl-c1">true</span>)
  Activating new project at <span class="pl-s"><span class="pl-pds">`</span>/tmp/jl_e6uPja<span class="pl-pds">`</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JavaCall
 │ Package JavaCall not found, but a package named JavaCall is available from a
 │ registry. 
 │ Install package?
 │   (jl_e6uPja) pkg<span class="pl-k">&gt;</span> add JavaCall 
 └ (y<span class="pl-k">/</span>n) [y]<span class="pl-k">:</span> y

<span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> JavaCall<span class="pl-k">.</span><span class="pl-c1">addClassPath</span>(<span class="pl-c1">pwd</span>()) <span class="pl-c"><span class="pl-c">#</span> Set appropriate classpath</span>

julia<span class="pl-k">&gt;</span> JavaCall<span class="pl-k">.</span><span class="pl-c1">addOpts</span>(<span class="pl-s"><span class="pl-pds">"</span>-Xmx1024M<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Use 1 GB of memory</span>
OrderedCollections<span class="pl-k">.</span>OrderedSet{String} with <span class="pl-c1">1</span> element<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>-Xmx1024M<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> JavaCall<span class="pl-k">.</span><span class="pl-c1">addOpts</span>(<span class="pl-s"><span class="pl-pds">"</span>-Xrs<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Disable signal handling in the JVM, reducing performance but enhancing compatability</span>
OrderedCollections<span class="pl-k">.</span>OrderedSet{String} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>-Xmx1024M<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>-Xrs<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> JavaCall<span class="pl-k">.</span><span class="pl-c1">init</span>() <span class="pl-c"><span class="pl-c">#</span> Call before using `jcall` or `jfield`. Do not use this in package `__init__()` to allow other packages to add classpaths or options.</span>

julia<span class="pl-k">&gt;</span> jls <span class="pl-k">=</span> <span class="pl-c1">@jimport</span> java<span class="pl-k">.</span>lang<span class="pl-k">.</span>System
JavaObject{<span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>java.lang.System<span class="pl-pds">"</span></span>)}

julia<span class="pl-k">&gt;</span> out <span class="pl-k">=</span> <span class="pl-c1">jfield</span>(jls, <span class="pl-s"><span class="pl-pds">"</span>out<span class="pl-pds">"</span></span>, <span class="pl-c1">@jimport</span> java<span class="pl-k">.</span>io<span class="pl-k">.</span>PrintStream) <span class="pl-c"><span class="pl-c">#</span> Third arg is optional, but helps type stability.</span>
<span class="pl-c1">JavaObject</span><span class="pl-c1">{Symbol("java.io.PrintStream")}</span>(JavaCall<span class="pl-k">.</span><span class="pl-c1">JavaLocalRef</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000003ecda38</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">jcall</span>(out, <span class="pl-s"><span class="pl-pds">"</span>println<span class="pl-pds">"</span></span>, Nothing, (JString,), <span class="pl-s"><span class="pl-pds">"</span>Hello World<span class="pl-pds">"</span></span>)
Hello World</pre></div>
<h2 dir="auto"><a id="user-content-versions" class="anchor" aria-hidden="true" href="#versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Versions</h2>
<ul dir="auto">
<li>0.7 branch is currently being maintained for bug fixes only</li>
<li>master branch is currently proposed to be v0.8.0</li>
</ul>
<h2 dir="auto"><a id="user-content-julia-version-compatability" class="anchor" aria-hidden="true" href="#julia-version-compatability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia version compatability</h2>
<p dir="auto">JavaCall should continue to work with Julia 1.0.x (formerly a long term support version of Julia).</p>
<p dir="auto">JavaCall and its dependents do not work correctly on Julia 1.1 and Julia 1.2.  On Julia 1.1 and 1.2, you may see segfaults or incorrect results. This is typically due to stack corruption.</p>
<p dir="auto">For Julia pre-1.5, consider the <a href="https://github.com/mkitti/RootTaskREPL.jl">RootTaskRepl.jl</a> package. With RootTaskREPL.jl, JavaCall is able to execute fine without the need of <code>JULIA_COPY_STACKS=1</code> with the exception of <code>@async</code> calls. Starting with the Julia 1.5, the REPL backend now runs on the root Task by default.</p>
<p dir="auto">Julia 1.3.0 through Julia 1.6.2 are tested and guaranteed to work on Linux, macOS, and Windows via continuous integration. Julia 1.6.2 and newer should work on Linux and Windows. The <code>JULIA_COPY_STACKS</code> environment variable should be set to <code>1</code> on macOS and Linux, but not Windows.</p>
<h2 dir="auto"><a id="user-content-apple-macos" class="anchor" aria-hidden="true" href="#apple-macos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Apple macOS</h2>
<p dir="auto">JavaCall works on Julia 1.0 and Julia 1.3 to Julia 1.6.2. Please set the environment variable <code>JULIA_COPY_STACKS = 1</code>.</p>
<p dir="auto">As of Julia 1.6.3, JavaCall fails on macOS due to a fatal segmentation fault, signal (11). See <a href="https://github.com/JuliaInterop/JavaCall.jl/issues/151" data-hovercard-type="issue" data-hovercard-url="/JuliaInterop/JavaCall.jl/issues/151/hovercard">JavaCall#151</a> and <a href="https://github.com/JuliaLang/julia/pull/40056" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/40056/hovercard">JuliaLang/julia#40056</a>.</p>
<p dir="auto">The current developers of JavaCall do not posess current Apple hardware to debug this issue. <a href="https://github.com/JuliaInterop/JavaCall.jl/issues/151" data-hovercard-type="issue" data-hovercard-url="/JuliaInterop/JavaCall.jl/issues/151/hovercard">Help is needed.</a></p>
<p dir="auto">Julia 1.0 and Julia 1.6.2 are tested via Github Actions continuous integration on macOS.</p>
<h2 dir="auto"><a id="user-content-windows-operating-system" class="anchor" aria-hidden="true" href="#windows-operating-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Windows Operating System</h2>
<p dir="auto">Do not set the environmental variable <code>JULIA_COPY_STACKS</code> or set the variable to <code>0</code>.</p>
<p dir="auto">To use <code>jcall</code> with <code>@async</code>, start Julia in the following way:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ julia -i -e &quot;using JavaCall; JavaCall.init()&quot;"><pre class="notranslate"><code>$ julia -i -e "using JavaCall; JavaCall.init()"
</code></pre></div>
<p dir="auto">Windows currently lacks support for multithreaded access to the JVM.</p>
<p dir="auto">Julia 1.0, 1.6, 1 (latest release), and nightly are tested on Windows via Github Actions continuous integration.
x86 compatability is also tested on the latest Julia 1 release.</p>
<h2 dir="auto"><a id="user-content-linux" class="anchor" aria-hidden="true" href="#linux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linux</h2>
<p dir="auto">On Julia 1.3 and newer, please set the environment variable <code>JULIA_COPY_STACKS = 1</code>.</p>
<p dir="auto">Multithreaded access to the JVM is supported as JavaCall version <code>0.8.0</code>.</p>
<p dir="auto">Julia 1.0, 1.6, 1 (latest release), and nightly are tested on Linux via Github Actions continuous integration.</p>
<h2 dir="auto"><a id="user-content-other-operating-systems" class="anchor" aria-hidden="true" href="#other-operating-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other Operating Systems</h2>
<p dir="auto">JavaCall has not been tested on operating systems other than macOS, Windows, or Linux.
You should probably set the environment variable <code>JULIA_COPY_STACKS = 1</code>.
If you have success using JavaCall on another operating system than listed above,
please create an issue or pull request to let us know about compatability.</p>
</article></div>