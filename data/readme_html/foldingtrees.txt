<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-foldingtrees" class="anchor" aria-hidden="true" href="#foldingtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FoldingTrees</h1>
<p><a href="https://travis-ci.com/JuliaCollections/FoldingTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b32c04bfe7d5f1b45816cc7d016194df5f3b24fee36d95fca3505587f6dab813/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961436f6c6c656374696f6e732f466f6c64696e6754726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaCollections/FoldingTrees.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaCollections/FoldingTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9f603fb049ebf39dc4b5a432cbcac12d1c6b9fb81d3f6e26ad3a3ebe95fc4a42/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961436f6c6c656374696f6e732f466f6c64696e6754726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaCollections/FoldingTrees.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>FoldingTrees implements a dynamic <a href="https://en.wikipedia.org/wiki/Tree_%28data_structure%29" rel="nofollow">tree structure</a> in which some nodes may be "folded," i.e., marked to avoid descent among that node's children.
It also supports interactive text menus based on folding trees.</p>
<h2><a id="user-content-creating-trees-with-node" class="anchor" aria-hidden="true" href="#creating-trees-with-node"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating trees with <code>Node</code></h2>
<p>For example, after saying <code>using FoldingTrees</code>, a "table of contents" like</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="I. Introduction
  A. Some background
    1. Stuff you should have learned in high school
    2. Stuff even Einstein didn't know
  B. Defining the problem
II. How to solve it
"><pre><code>I. Introduction
  A. Some background
    1. Stuff you should have learned in high school
    2. Stuff even Einstein didn't know
  B. Defining the problem
II. How to solve it
</code></pre></div>
<p>could be created like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="root = Node(&quot;&quot;)
chap1 = Node(&quot;Introduction&quot;, root)
chap1A = Node(&quot;Some background&quot;, chap1)
chap1A1 = Node(&quot;Stuff you should have learned in high school&quot;, chap1A)
chap1A2 = Node(&quot;Stuff even Einstein didn't know&quot;, chap1A)
chap1B = Node(&quot;Defining the problem&quot;, chap1)
chap2 = Node(&quot;How to solve it&quot;, root)
"><pre>root <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
chap1 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>Introduction<span class="pl-pds">"</span></span>, root)
chap1A <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>Some background<span class="pl-pds">"</span></span>, chap1)
chap1A1 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>Stuff you should have learned in high school<span class="pl-pds">"</span></span>, chap1A)
chap1A2 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>Stuff even Einstein didn't know<span class="pl-pds">"</span></span>, chap1A)
chap1B <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>Defining the problem<span class="pl-pds">"</span></span>, chap1)
chap2 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>How to solve it<span class="pl-pds">"</span></span>, root)</pre></div>
<p>You don't have to create them in this exact order, the only constraint is that you create the parents before the children.
In general you create a node as <code>Node(data, parent)</code>, where <code>data</code> can be any type.
The root node is the only one that you create without a parent, i.e., <code>root = Node(data)</code>, and the type of data used to create <code>root</code> is enforced for all leaves of the tree.
You can specify the type with <code>root = Node{T}(data)</code> if necessary.
There is no explicit limit on the number of children that a node may have.</p>
<p>Using the <a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees</a> package,
the tree above displays as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; print_tree(root)

├─   Introduction
│  ├─   Some background
│  │  ├─   Stuff you should have learned in high school
│  │  └─   Stuff even Einstein didn't know
│  └─   Defining the problem
└─   How to solve it
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(root)

├─   Introduction
│  ├─   Some background
│  │  ├─   Stuff you should have learned <span class="pl-k">in</span> high school
│  │  └─   Stuff even Einstein didn<span class="pl-k">'</span>t know
│  └─   Defining the problem
└─   How to solve it</pre></div>
<p>Now let's fold the section named "Some background":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fold!(chap1A)
true

julia&gt; print_tree(root)

├─   Introduction
│  ├─ + Some background
│  └─   Defining the problem
└─   How to solve it
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fold!</span>(chap1A)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(root)

├─   Introduction
│  ├─ <span class="pl-k">+</span> Some background
│  └─   Defining the problem
└─   How to solve it</pre></div>
<p>You can use <code>unfold!</code> to reverse the folding and <code>toggle!</code> to switch folding.</p>
<p>There are a few utilities that you can learn about by reading their docstrings:</p>
<ul>
<li><code>isroot</code>: determine whether a node is the root node</li>
<li><code>count_open_leaves</code>: count the number of nodes in the tree above the first fold on all branches</li>
<li><code>next</code>, <code>prev</code>: efficient ordered visitation of open nodes (depth-first)</li>
<li><code>nodes</code>: access nodes, rather than their data, during iteration (example: <code>foreach(unfold!, nodes(root)))</code></li>
</ul>
<h2><a id="user-content-treemenu" class="anchor" aria-hidden="true" href="#treemenu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TreeMenu</h2>
<p>On suitable Julia versions (ones for which <code>isdefined(REPL.TerminalMenus, :ConfiguredMenu)</code> is <code>true</code>,
a.k.a. <code>1.6.0-DEV.201</code> or higher), you can use such trees to create interactive menus via
<a href="https://docs.julialang.org/en/v1.6-dev/stdlib/REPL/#TerminalMenus-1" rel="nofollow">TerminalMenus</a>.</p>
<p>Suppose <code>root</code> is the same <code>Node</code> we created above, in the original unfolded state.
Then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using REPL.TerminalMenus

julia&gt; menu = TreeMenu(root)

julia&gt; choice = request(menu; cursor=2)

 &gt;    Introduction
       Some background
        Stuff you should have learned in high school
        Stuff even Einstein didn't know
       Defining the problem
      How to solve it
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> REPL<span class="pl-k">.</span>TerminalMenus

julia<span class="pl-k">&gt;</span> menu <span class="pl-k">=</span> <span class="pl-c1">TreeMenu</span>(root)

julia<span class="pl-k">&gt;</span> choice <span class="pl-k">=</span> <span class="pl-c1">request</span>(menu; cursor<span class="pl-k">=</span><span class="pl-c1">2</span>)

 <span class="pl-k">&gt;</span>    Introduction
       Some background
        Stuff you should have learned <span class="pl-k">in</span> high school
        Stuff even Einstein didn<span class="pl-k">'</span>t know
       Defining the problem
      How to solve it</pre></div>
<p>The initial blank line is due to our <code>root</code>, which displays as an empty string; we set the initial "cursor position,"
indicated visually by <code>&gt;</code>, to skip over that item.
You can use the up/down arrow keys to navigate over different items in the menu.
Choose an item by hitting <code>Enter</code>, toggle folding at the cursor position by hitting the space bar:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; choice = request(menu; cursor=2)

      Introduction
 &gt; +   Some background
       Defining the problem
      How to solve it
"><pre>julia<span class="pl-k">&gt;</span> choice <span class="pl-k">=</span> <span class="pl-c1">request</span>(menu; cursor<span class="pl-k">=</span><span class="pl-c1">2</span>)

      Introduction
 <span class="pl-k">&gt;</span> <span class="pl-k">+</span>   Some background
       Defining the problem
      How to solve it</pre></div>
<p>One can create very large menus with thousands of options, in which case the menu scrolls with the arrow keys
and <code>PgUp</code>/<code>PgDn</code>.
As described in the <code>TerminalMenus</code> documentation, you can customize aspects of the menu's appearance,
such as the number of items visible simultaneously and the characters used to indicate scrolling and the cursor position.</p>
<p>For <code>Node</code> objects where <code>data</code> is not an <code>AbstractString</code>, you will most likely want to specialize <code>FoldingTrees.writeoption</code> for your type.
See <code>?FoldingTrees.writeoption</code> for details.</p>
</article></div>