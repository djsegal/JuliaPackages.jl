<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-namedplusjl" class="anchor" aria-hidden="true" href="#namedplusjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NamedPlus.jl</h1>
<p><a href="https://github.com/mcabbott/NamedPlus.jl/actions"><img src="https://camo.githubusercontent.com/15500911696e9618dd38e8a99021d4ed8245d4d204d78878e84cd6fde7f58833/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6d636162626f74742f4e616d6564506c75732e6a6c2f43493f6c6f676f3d676974687562" alt="Github CI" data-canonical-src="https://img.shields.io/github/workflow/status/mcabbott/NamedPlus.jl/CI?logo=github" style="max-width:100%;"></a>
<a href="https://github.com/mcabbott/NamedPlus.jl/releases"><img src="https://camo.githubusercontent.com/2ebc24364d9214618cd98edbc99bb53c566b1a2792981fa6ce482c681b2fb99e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f6d636162626f74742f4e616d6564506c75732e6a6c3f636f6c6f723d6f72616e6765266c6f676f3d676974687562" alt="Tag Version" data-canonical-src="https://img.shields.io/github/v/tag/mcabbott/NamedPlus.jl?color=orange&amp;logo=github" style="max-width:100%;"></a>
<a href="https://juliahub.com/docs/NamedPlus/" rel="nofollow"><img src="https://camo.githubusercontent.com/cb20a34c1a6972c9eb4c90ae078d95fd21e152236f763b07a9c6273407927f76/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a756c69612d646f63737472696e67732d626c75652e737667" alt="Docstrings" data-canonical-src="https://img.shields.io/badge/julia-docstrings-blue.svg" style="max-width:100%;"></a></p>
<p>This package exists to experiment with the arrays provided by
<a href="https://github.com/invenia/NamedDims.jl">NamedDims.jl</a>.
While that package is fairly minimal (and focused on providing a type with great performance),
this one defines lots of useful functions. Some of them are only defined when other packages
they need are loaded. Here's what works in <code>v0.0.1</code>:</p>
<p>Some convenient ways add names (exports <code>named</code>, <code>@named</code>, <code>nameless</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@pirate Base
m = rand(Int8; i=3, j=4)                 # names from keywords, needs rand(Type, i=...)
m .+ ones(_=1, j=4, k=2)                 # ones(), zeros(), and fill() all work.

m .- named(parent(m), :i, :j)            # adds names, or refines existing ones, 
a_z = named(rand(4,1,1,2), :a, .., :z)   # use .. (from EllipsisNotation) to skip some.

@named g = [n^i for n in 1:20, i in 1:3] # read names (:n,:i) from generator's variables

rename(m, :i =&gt; :z')                     # renames just :i, to :z' == :z′
nameless(m, (:j, :i)) === transpose(m)   # also @named mt = m{j,i} 
"><pre><span class="pl-c1">@pirate</span> Base
m <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int8; i<span class="pl-k">=</span><span class="pl-c1">3</span>, j<span class="pl-k">=</span><span class="pl-c1">4</span>)                 <span class="pl-c"><span class="pl-c">#</span> names from keywords, needs rand(Type, i=...)</span>
m <span class="pl-k">.+</span> <span class="pl-c1">ones</span>(_<span class="pl-k">=</span><span class="pl-c1">1</span>, j<span class="pl-k">=</span><span class="pl-c1">4</span>, k<span class="pl-k">=</span><span class="pl-c1">2</span>)                 <span class="pl-c"><span class="pl-c">#</span> ones(), zeros(), and fill() all work.</span>

m <span class="pl-k">.-</span> <span class="pl-c1">named</span>(<span class="pl-c1">parent</span>(m), <span class="pl-c1">:i</span>, <span class="pl-c1">:j</span>)            <span class="pl-c"><span class="pl-c">#</span> adds names, or refines existing ones, </span>
a_z <span class="pl-k">=</span> <span class="pl-c1">named</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), <span class="pl-c1">:a</span>, <span class="pl-k">..</span>, <span class="pl-c1">:z</span>)   <span class="pl-c"><span class="pl-c">#</span> use .. (from EllipsisNotation) to skip some.</span>

<span class="pl-c1">@named</span> g <span class="pl-k">=</span> [n<span class="pl-k">^</span>i <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> read names (:n,:i) from generator's variables</span>

<span class="pl-c1">rename</span>(m, <span class="pl-c1">:i</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:z</span><span class="pl-s"><span class="pl-pds">'</span>)                     # renames just :i, to :z<span class="pl-pds">'</span></span> <span class="pl-k">==</span> <span class="pl-c1">:z′</span>
<span class="pl-c1">nameless</span>(m, (<span class="pl-c1">:j</span>, <span class="pl-c1">:i</span>)) <span class="pl-k">===</span> <span class="pl-c1">transpose</span>(m)   <span class="pl-c"><span class="pl-c">#</span> also @named mt = m{j,i} </span></pre></div>
<p>Some functions controlled by them:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = split(g, :n =&gt; (j=4, k=5))           # just reshape, new size (4,5,3),
join(t, (:i, :k) =&gt; :χ)                  # copy if non-adjacent, size (4,15).

dropdims(a_z)                            # defaults to :_, and kills all of them
transpose(a_z, :a, :z)                   # permutes (4,2,3,1)
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">split</span>(g, <span class="pl-c1">:n</span> <span class="pl-k">=&gt;</span> (j<span class="pl-k">=</span><span class="pl-c1">4</span>, k<span class="pl-k">=</span><span class="pl-c1">5</span>))           <span class="pl-c"><span class="pl-c">#</span> just reshape, new size (4,5,3),</span>
<span class="pl-c1">join</span>(t, (<span class="pl-c1">:i</span>, <span class="pl-c1">:k</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">:χ</span>)                  <span class="pl-c"><span class="pl-c">#</span> copy if non-adjacent, size (4,15).</span>

<span class="pl-c1">dropdims</span>(a_z)                            <span class="pl-c"><span class="pl-c">#</span> defaults to :_, and kills all of them</span>
<span class="pl-c1">transpose</span>(a_z, <span class="pl-c1">:a</span>, <span class="pl-c1">:z</span>)                   <span class="pl-c"><span class="pl-c">#</span> permutes (4,2,3,1)</span></pre></div>
<p>A hack to make lots of code propagate names (<code>NamedInt</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="d,k = size(m); @show d                   # NamedInt, which exists for:
z = zeros(d,d')                          # ones, fill, rand, etc
z .= [sqrt(i) for i in 1:d, i′ in 1:d']  # comprehensions propagate names from (1:d)
reshape(g, k,:,d) .+ g[end, d]           # reshape propagate via sizes

using Einsum, TensorCast                 # These packages dont't know about names at all,
@einsum mz[i,k] := m[i,j] * z[i,k]       # works because of Array{}(undef, NamedInt...)
@cast tm[i⊗j,k] := t[j,k,i] + m[i,j]     # works because of reshape(A, NamedInt)
"><pre>d,k <span class="pl-k">=</span> <span class="pl-c1">size</span>(m); <span class="pl-c1">@show</span> d                   <span class="pl-c"><span class="pl-c">#</span> NamedInt, which exists for:</span>
z <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(d,d<span class="pl-k">'</span>)                          <span class="pl-c"><span class="pl-c">#</span> ones, fill, rand, etc</span>
z <span class="pl-k">.=</span> [<span class="pl-c1">sqrt</span>(i) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d, i′ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d<span class="pl-k">'</span>]  <span class="pl-c"><span class="pl-c">#</span> comprehensions propagate names from (1:d)</span>
<span class="pl-c1">reshape</span>(g, k,:,d) <span class="pl-k">.+</span> g[<span class="pl-c1">end</span>, d]           <span class="pl-c"><span class="pl-c">#</span> reshape propagate via sizes</span>

<span class="pl-k">using</span> Einsum, TensorCast                 <span class="pl-c"><span class="pl-c">#</span> These packages dont't know about names at all,</span>
<span class="pl-c1">@einsum</span> mz[i,k] <span class="pl-k">:=</span> m[i,j] <span class="pl-k">*</span> z[i,k]       <span class="pl-c"><span class="pl-c">#</span> works because of Array{}(undef, NamedInt...)</span>
<span class="pl-c1">@cast</span> tm[i⊗j,k] <span class="pl-k">:=</span> t[j,k,i] <span class="pl-k">+</span> m[i,j]     <span class="pl-c"><span class="pl-c">#</span> works because of reshape(A, NamedInt)</span></pre></div>
<p>Some automatic re-ordering of dimensions (<code>align</code>, <code>align_sum!</code>, <code>align_prod!</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="align(m, (:j, :k, :i))                   # lazy generalised permutedims, (:j, :_, :i)
@named q{i,j,k} = m .+ t                 # used for auto-permuted broadcasting
align(m, t) .+ t                         # or to manually fix things up

align_sum!(Int.(m), t)                   # reduce (:j, :k, :i) into (:i, :j)
"><pre><span class="pl-c1">align</span>(m, (<span class="pl-c1">:j</span>, <span class="pl-c1">:k</span>, <span class="pl-c1">:i</span>))                   <span class="pl-c"><span class="pl-c">#</span> lazy generalised permutedims, (:j, :_, :i)</span>
<span class="pl-c1">@named</span> q{i,j,k} <span class="pl-k">=</span> m <span class="pl-k">.+</span> t                 <span class="pl-c"><span class="pl-c">#</span> used for auto-permuted broadcasting</span>
<span class="pl-c1">align</span>(m, t) <span class="pl-k">.+</span> t                         <span class="pl-c"><span class="pl-c">#</span> or to manually fix things up</span>

<span class="pl-c1">align_sum!</span>(<span class="pl-c1">Int</span>.(m), t)                   <span class="pl-c"><span class="pl-c">#</span> reduce (:j, :k, :i) into (:i, :j)</span></pre></div>
<p>Including for matrix multiplication (<code>mul</code>, <code>*ᵃ</code>, <code>contract</code>, <code>batchmul</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m *ᵃ z == mul(m, z, :i) == m' * z        # matrix multiplication on shared index,
g *ᵃ m == (m *ᵃ g)'                      # typed *\^a tab.

using TensorOperations
contract(m, t)                           # shared indices i &amp; j, leaving only k
m ⊙ᵃ t == t ⊙ᵃ m                         # infix version, \odot\^a tab
@named @tensor p[j,i′] := m[i,j] * z[i,i′] # named inputs re-arranged via Strided

using OMEinsum
contract(m, t, z)                        # sum over shared :i, leaving (:j, :k, :i′)
const *ᵇ = batchmul(:k)                  # batch index :k,
t *ᵇ rename(t, :i =&gt; :i')                # sum over shared :j, leaving (:i, :i′, :k)

using Zygote                             
gradient(m -&gt; sum(contract(m,t)[1]), m)[1] # contract defines a gradient
gradient(t -&gt; sum(t *ᵇ q), t)[1]         # OMEinsum defines this gradient
"><pre>m <span class="pl-k">*</span>ᵃ z <span class="pl-k">==</span> <span class="pl-c1">mul</span>(m, z, <span class="pl-c1">:i</span>) <span class="pl-k">==</span> m<span class="pl-k">'</span> <span class="pl-k">*</span> z        <span class="pl-c"><span class="pl-c">#</span> matrix multiplication on shared index,</span>
g <span class="pl-k">*</span>ᵃ m <span class="pl-k">==</span> (m <span class="pl-k">*</span>ᵃ g)<span class="pl-k">'</span>                      <span class="pl-c"><span class="pl-c">#</span> typed *\^a tab.</span>

<span class="pl-k">using</span> TensorOperations
<span class="pl-c1">contract</span>(m, t)                           <span class="pl-c"><span class="pl-c">#</span> shared indices i &amp; j, leaving only k</span>
m ⊙ᵃ t <span class="pl-k">==</span> t ⊙ᵃ m                         <span class="pl-c"><span class="pl-c">#</span> infix version, \odot\^a tab</span>
<span class="pl-c1">@named</span> <span class="pl-c1">@tensor</span> p[j,i′] <span class="pl-k">:=</span> m[i,j] <span class="pl-k">*</span> z[i,i′] <span class="pl-c"><span class="pl-c">#</span> named inputs re-arranged via Strided</span>

<span class="pl-k">using</span> OMEinsum
<span class="pl-c1">contract</span>(m, t, z)                        <span class="pl-c"><span class="pl-c">#</span> sum over shared :i, leaving (:j, :k, :i′)</span>
<span class="pl-k">const</span> <span class="pl-k">*</span>ᵇ <span class="pl-k">=</span> <span class="pl-c1">batchmul</span>(<span class="pl-c1">:k</span>)                  <span class="pl-c"><span class="pl-c">#</span> batch index :k,</span>
t <span class="pl-k">*</span>ᵇ <span class="pl-c1">rename</span>(t, <span class="pl-c1">:i</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:i</span><span class="pl-s"><span class="pl-pds">'</span>)                # sum over shared :j, leaving (:i, :i′, :k)</span>
<span class="pl-s"></span>
<span class="pl-s">using Zygote                             </span>
<span class="pl-s">gradient(m -&gt; sum(contract(m,t)[1]), m)[1] # contract defines a gradient</span>
<span class="pl-s">gradient(t -&gt; sum(t *ᵇ q), t)[1]         # OMEinsum defines this gradient</span></pre></div>
<p>Some other bits have moved to <a href="https://github.com/mcabbott/AxisKeys.jl">AxisKeys.jl</a>.
If both packages are loaded:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NamedPlus, AxisKeys, Plots
@named [n^i for n in 1:2:40, i in 2:4]   # has custom ranges
scatter(ans, yaxis=:log10)               # labels axes &amp; series
"><pre><span class="pl-k">using</span> NamedPlus, AxisKeys, Plots
<span class="pl-c1">@named</span> [n<span class="pl-k">^</span>i <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">40</span>, i <span class="pl-k">in</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>]   <span class="pl-c"><span class="pl-c">#</span> has custom ranges</span>
<span class="pl-c1">scatter</span>(ans, yaxis<span class="pl-k">=</span><span class="pl-c1">:log10</span>)               <span class="pl-c"><span class="pl-c">#</span> labels axes &amp; series</span></pre></div>
<p>While the functions in <a href="https://github.com/invenia/NamedDims.jl">NamedDims.jl</a> try very hard
to be zero-cost (by working hard to exploit constant propagation), this is not true here.
In particluar <code>split</code>, <code>join</code>, <code>align</code>, <code>rename</code> will cost around 1μs.
(Perhaps if useful they can be made faster.)
But <code>mul</code> and <code>*ᵃ</code>, and aligned broadcasting via <code>@named</code>, should be nearly free, perhaps 5ns.</p>
<p>Compared to Pytorch's <a href="https://pytorch.org/docs/stable/named_tensor.html" rel="nofollow">new named tensors</a>:</p>
<ul>
<li><code>refine_names</code> ⟶ <code>named</code>, except with <code>..</code> instead of <code>...</code>.</li>
<li><code>unflatten</code> ⟶ <code>split</code> exactly, and <code>flatten</code> ⟶ <code>join</code>, except that for them "All of dims must be consecutive in order" while mine permutes if required.</li>
<li><code>.align_to</code> and <code>.align_as</code> ⟶ <code>align</code>, mine allows the target to be either a subset or a superset (or neither) of the input. Theirs allows <code>...</code> again.</li>
<li>No support for einsum, but <code>torch.matmul</code> handles batched matrix multiplication.</li>
</ul>
</article></div>