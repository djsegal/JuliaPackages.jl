<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-pylexyaccjl" class="anchor" aria-hidden="true" href="#pylexyaccjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PyLexYacc.jl</h1>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>A Julia wrapper for the <a href="http://www.dabeaz.com/ply/" rel="nofollow">Python Lex-Yacc</a> package maintained by David Beazley.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements</h2>
<p>Depends on the PyCall julia package and the <a href="https://pypi.python.org/pypi/ply" rel="nofollow">PLY</a> and <a href="https://pypi.python.org/pypi/attrdict" rel="nofollow">attrdict</a> Python packages (both available from PyPI).</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>This example mirrors <a href="http://www.dabeaz.com/ply/example.html" rel="nofollow">this one</a>, in Python.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyLexYacc


<span class="pl-k">module</span> rules
	<span class="pl-k">using</span> PyLexYacc

	tokens <span class="pl-k">=</span> (
		<span class="pl-s"><span class="pl-pds">"</span>NAME<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>NUMBER<span class="pl-pds">"</span></span>,
		<span class="pl-s"><span class="pl-pds">"</span>PLUS<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>MINUS<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>TIMES<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DIVIDE<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>EQUALS<span class="pl-pds">"</span></span>,
		<span class="pl-s"><span class="pl-pds">"</span>LPAREN<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>RPAREN<span class="pl-pds">"</span></span>
		)

	<span class="pl-c"><span class="pl-c">#</span> Tokens</span>

	t_PLUS    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>+<span class="pl-pds">"</span></span>
	t_MINUS   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
	t_TIMES   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>*<span class="pl-pds">"</span></span>
	t_DIVIDE  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>
	t_EQUALS  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>=<span class="pl-pds">"</span></span>
	t_LPAREN  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>(<span class="pl-pds">"</span></span>
	t_RPAREN  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>)<span class="pl-pds">"</span></span>
	t_NAME    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>[a-zA-Z_][a-zA-Z0-9_]*<span class="pl-pds">"</span></span>
	
	t_NUMBER <span class="pl-k">=</span> <span class="pl-c1">rule</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>d+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t, lexer
			t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">int</span>(t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>])
			<span class="pl-k">return</span> t
		<span class="pl-k">end</span>

	t_ignore  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-cce">\t</span><span class="pl-pds">"</span></span>

	t_newline <span class="pl-k">=</span> <span class="pl-c1">rule</span>(<span class="pl-s"><span class="pl-pds">"</span>[<span class="pl-cce">\\</span>r<span class="pl-cce">\\</span>n]+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t, lexer
			lexer[<span class="pl-s"><span class="pl-pds">"</span>lineno<span class="pl-pds">"</span></span>] <span class="pl-k">+=</span> <span class="pl-c1">count</span>((x)<span class="pl-k">-&gt;</span>(x <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>),t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>])
			<span class="pl-k">return</span> <span class="pl-c1">nothing</span>
		<span class="pl-k">end</span>

	t_error <span class="pl-k">=</span> <span class="pl-c1">rule</span>() <span class="pl-k">do</span> t, lexer
			<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>Illegal character '%s'<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>])
			<span class="pl-c1">skip</span>(lexer, <span class="pl-c1">1</span>)
			<span class="pl-k">return</span> t
		<span class="pl-k">end</span>

	precedence <span class="pl-k">=</span> (
			(<span class="pl-s"><span class="pl-pds">"</span>left<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>PLUS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MINUS<span class="pl-pds">"</span></span>),
			(<span class="pl-s"><span class="pl-pds">"</span>left<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>TIMES<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DIVIDE<span class="pl-pds">"</span></span>),
			(<span class="pl-s"><span class="pl-pds">"</span>right<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>UMINUS<span class="pl-pds">"</span></span>)
		)
	
	vars <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()  <span class="pl-c"><span class="pl-c">#</span> symbol table</span>

	p_statement_assign <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>statement : NAME EQUALS expression<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			vars[t[<span class="pl-c1">2</span>]] <span class="pl-k">=</span> t[<span class="pl-c1">4</span>]
		<span class="pl-k">end</span>

	p_statement_expr <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>statement : expression<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			<span class="pl-c1">println</span>(t[<span class="pl-c1">2</span>])
		<span class="pl-k">end</span>

	p_expression_binop <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(
			<span class="pl-s"><span class="pl-pds">"""</span>expression : expression PLUS expression</span>
<span class="pl-s">			              | expression MINUS expression</span>
<span class="pl-s">			              | expression TIMES expression</span>
<span class="pl-s">			              | expression DIVIDE expression<span class="pl-pds">"""</span></span>) <span class="pl-k">do</span> t
			<span class="pl-k">if</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">+</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">elseif</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">-</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">elseif</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">*</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">elseif</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">/</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">end</span>
		<span class="pl-k">end</span>

	p_expression_uminus <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : MINUS expression %prec UMINUS<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>t[<span class="pl-c1">3</span>]
		<span class="pl-k">end</span>

	p_expression_group <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : LPAREN expression RPAREN<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">3</span>]
		<span class="pl-k">end</span>

	p_expression_number <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : NUMBER<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>]
		<span class="pl-k">end</span>

	p_expression_name <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : NAME<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			<span class="pl-k">try</span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> vars[t[<span class="pl-c1">2</span>]]
			<span class="pl-k">catch</span>
				<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>Undefined name '%s'<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, t[<span class="pl-c1">2</span>])
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
			<span class="pl-k">end</span>
		<span class="pl-k">end</span>

	p_error <span class="pl-k">=</span> <span class="pl-c1">rule</span>() <span class="pl-k">do</span> t, lexer  <span class="pl-c"><span class="pl-c">#</span> the error rule actually takes a LexToken so make it a rule()</span>
			<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>Syntax error at '%s'<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>])
		<span class="pl-k">end</span>
<span class="pl-k">end</span>

l <span class="pl-k">=</span> <span class="pl-c1">lexer</span>(rules)
p <span class="pl-k">=</span> <span class="pl-c1">parser</span>(rules, <span class="pl-s"><span class="pl-pds">"</span>statement<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> specifiy start rule here or through start variable in module</span>

<span class="pl-c"><span class="pl-c">#</span> replicates the input function using in calc.py</span>
<span class="pl-k">function</span> <span class="pl-en">input</span>(str<span class="pl-k">::</span><span class="pl-c1">String</span>)
	<span class="pl-c1">print</span>(str)
	<span class="pl-k">return</span> <span class="pl-c1">readline</span>(STDIN)
<span class="pl-k">end</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>q to quit<span class="pl-pds">"</span></span>)
line <span class="pl-k">=</span> <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span>calc &gt; <span class="pl-pds">"</span></span>)
<span class="pl-k">while</span> <span class="pl-c1">chomp</span>(line) <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>q<span class="pl-pds">"</span></span>
	<span class="pl-c1">parse</span>(p, l, line)
	line <span class="pl-k">=</span> <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span>calc &gt; <span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-noteworthy-differences-from-ply" class="anchor" aria-hidden="true" href="#noteworthy-differences-from-ply"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Noteworthy differences from PLY</h2>
<ul>
<li>Indexing is Julia-style 1-indexing</li>
<li>Rule functions are created using the rule() and parserule() functions</li>
<li>A function passed to rule() must accept two arguments (the LexToken and the Lexer), while the function passed to parserule() just accepts a YaccProduction instance (as in PLY)</li>
<li>You cannot simply call lex.lex() or yacc.yacc() to get variables in the calling module--this functionality in PLY uses Python reflection functions that can't be implemented cross-language</li>
<li>lexer matching patterns and parser grammar rules are passed as arguments to rule() and parserule(), not as docstrings (there are no docstrings in Julia)</li>
<li>the parse() method takes a lexer as a mandatory second argument</li>
</ul>
<h2><a id="user-content-licence" class="anchor" aria-hidden="true" href="#licence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Licence</h2>
<p>MIT</p>
</article></div>