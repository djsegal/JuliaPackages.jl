<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pylexyaccjl" class="anchor" aria-hidden="true" href="#pylexyaccjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PyLexYacc.jl</h1>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">A Julia wrapper for the <a href="http://www.dabeaz.com/ply/" rel="nofollow">Python Lex-Yacc</a> package maintained by David Beazley.</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<p dir="auto">Depends on the PyCall julia package and the <a href="https://pypi.python.org/pypi/ply" rel="nofollow">PLY</a> and <a href="https://pypi.python.org/pypi/attrdict" rel="nofollow">attrdict</a> Python packages (both available from PyPI).</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">This example mirrors <a href="http://www.dabeaz.com/ply/example.html" rel="nofollow">this one</a>, in Python.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PyLexYacc


module rules
	using PyLexYacc

	tokens = (
		&quot;NAME&quot;,&quot;NUMBER&quot;,
		&quot;PLUS&quot;,&quot;MINUS&quot;,&quot;TIMES&quot;,&quot;DIVIDE&quot;,&quot;EQUALS&quot;,
		&quot;LPAREN&quot;,&quot;RPAREN&quot;
		)

	# Tokens

	t_PLUS    = &quot;\\+&quot;
	t_MINUS   = &quot;-&quot;
	t_TIMES   = &quot;\\*&quot;
	t_DIVIDE  = &quot;/&quot;
	t_EQUALS  = &quot;=&quot;
	t_LPAREN  = &quot;\\(&quot;
	t_RPAREN  = &quot;\\)&quot;
	t_NAME    = &quot;[a-zA-Z_][a-zA-Z0-9_]*&quot;
	
	t_NUMBER = rule(&quot;\\d+&quot;) do t, lexer
			t[&quot;value&quot;] = int(t[&quot;value&quot;])
			return t
		end

	t_ignore  = &quot; \t&quot;

	t_newline = rule(&quot;[\\r\\n]+&quot;) do t, lexer
			lexer[&quot;lineno&quot;] += count((x)-&gt;(x == '\n'),t[&quot;value&quot;])
			return nothing
		end

	t_error = rule() do t, lexer
			@printf(&quot;Illegal character '%s'\n&quot;, t[&quot;value&quot;][1])
			skip(lexer, 1)
			return t
		end

	precedence = (
			(&quot;left&quot;, &quot;PLUS&quot;, &quot;MINUS&quot;),
			(&quot;left&quot;, &quot;TIMES&quot;, &quot;DIVIDE&quot;),
			(&quot;right&quot;, &quot;UMINUS&quot;)
		)
	
	vars = Dict()  # symbol table

	p_statement_assign = parserule(&quot;statement : NAME EQUALS expression&quot;) do t
			vars[t[2]] = t[4]
		end

	p_statement_expr = parserule(&quot;statement : expression&quot;) do t
			println(t[2])
		end

	p_expression_binop = parserule(
			&quot;&quot;&quot;expression : expression PLUS expression
			              | expression MINUS expression
			              | expression TIMES expression
			              | expression DIVIDE expression&quot;&quot;&quot;) do t
			if t[3] == &quot;+&quot;
				t[1] = t[2] + t[4]
			elseif t[3] == &quot;-&quot;
				t[1] = t[2] - t[4]
			elseif t[3] == &quot;*&quot;
				t[1] = t[2] * t[4]
			elseif t[3] == &quot;/&quot;
				t[1] = t[2] / t[4]
			end
		end

	p_expression_uminus = parserule(&quot;expression : MINUS expression %prec UMINUS&quot;) do t
			t[1] = -t[3]
		end

	p_expression_group = parserule(&quot;expression : LPAREN expression RPAREN&quot;) do t
			t[1] = t[3]
		end

	p_expression_number = parserule(&quot;expression : NUMBER&quot;) do t
			t[1] = t[2]
		end

	p_expression_name = parserule(&quot;expression : NAME&quot;) do t
			try
				t[1] = vars[t[2]]
			catch
				@printf(&quot;Undefined name '%s'\n&quot;, t[2])
				t[1] = 0
			end
		end

	p_error = rule() do t, lexer  # the error rule actually takes a LexToken so make it a rule()
			@printf(&quot;Syntax error at '%s'\n&quot;, t[&quot;value&quot;][1])
		end
end

l = lexer(rules)
p = parser(rules, &quot;statement&quot;)  # specifiy start rule here or through start variable in module

# replicates the input function using in calc.py
function input(str::String)
	print(str)
	return readline(STDIN)
end

println(&quot;\\q to quit&quot;)
line = input(&quot;calc &gt; &quot;)
while chomp(line) != &quot;\\q&quot;
	parse(p, l, line)
	line = input(&quot;calc &gt; &quot;)
end"><pre><span class="pl-k">using</span> PyLexYacc


<span class="pl-k">module</span> rules
	<span class="pl-k">using</span> PyLexYacc

	tokens <span class="pl-k">=</span> (
		<span class="pl-s"><span class="pl-pds">"</span>NAME<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>NUMBER<span class="pl-pds">"</span></span>,
		<span class="pl-s"><span class="pl-pds">"</span>PLUS<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>MINUS<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>TIMES<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DIVIDE<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>EQUALS<span class="pl-pds">"</span></span>,
		<span class="pl-s"><span class="pl-pds">"</span>LPAREN<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>RPAREN<span class="pl-pds">"</span></span>
		)

	<span class="pl-c"><span class="pl-c">#</span> Tokens</span>

	t_PLUS    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>+<span class="pl-pds">"</span></span>
	t_MINUS   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
	t_TIMES   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>*<span class="pl-pds">"</span></span>
	t_DIVIDE  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>
	t_EQUALS  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>=<span class="pl-pds">"</span></span>
	t_LPAREN  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>(<span class="pl-pds">"</span></span>
	t_RPAREN  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>)<span class="pl-pds">"</span></span>
	t_NAME    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>[a-zA-Z_][a-zA-Z0-9_]*<span class="pl-pds">"</span></span>
	
	t_NUMBER <span class="pl-k">=</span> <span class="pl-c1">rule</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>d+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t, lexer
			t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">int</span>(t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>])
			<span class="pl-k">return</span> t
		<span class="pl-k">end</span>

	t_ignore  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-cce">\t</span><span class="pl-pds">"</span></span>

	t_newline <span class="pl-k">=</span> <span class="pl-c1">rule</span>(<span class="pl-s"><span class="pl-pds">"</span>[<span class="pl-cce">\\</span>r<span class="pl-cce">\\</span>n]+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t, lexer
			lexer[<span class="pl-s"><span class="pl-pds">"</span>lineno<span class="pl-pds">"</span></span>] <span class="pl-k">+=</span> <span class="pl-c1">count</span>((x)<span class="pl-k">-&gt;</span>(x <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>),t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>])
			<span class="pl-k">return</span> <span class="pl-c1">nothing</span>
		<span class="pl-k">end</span>

	t_error <span class="pl-k">=</span> <span class="pl-c1">rule</span>() <span class="pl-k">do</span> t, lexer
			<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>Illegal character '%s'<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>])
			<span class="pl-c1">skip</span>(lexer, <span class="pl-c1">1</span>)
			<span class="pl-k">return</span> t
		<span class="pl-k">end</span>

	precedence <span class="pl-k">=</span> (
			(<span class="pl-s"><span class="pl-pds">"</span>left<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>PLUS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MINUS<span class="pl-pds">"</span></span>),
			(<span class="pl-s"><span class="pl-pds">"</span>left<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>TIMES<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DIVIDE<span class="pl-pds">"</span></span>),
			(<span class="pl-s"><span class="pl-pds">"</span>right<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>UMINUS<span class="pl-pds">"</span></span>)
		)
	
	vars <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()  <span class="pl-c"><span class="pl-c">#</span> symbol table</span>

	p_statement_assign <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>statement : NAME EQUALS expression<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			vars[t[<span class="pl-c1">2</span>]] <span class="pl-k">=</span> t[<span class="pl-c1">4</span>]
		<span class="pl-k">end</span>

	p_statement_expr <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>statement : expression<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			<span class="pl-c1">println</span>(t[<span class="pl-c1">2</span>])
		<span class="pl-k">end</span>

	p_expression_binop <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(
			<span class="pl-s"><span class="pl-pds">"""</span>expression : expression PLUS expression</span>
<span class="pl-s">			              | expression MINUS expression</span>
<span class="pl-s">			              | expression TIMES expression</span>
<span class="pl-s">			              | expression DIVIDE expression<span class="pl-pds">"""</span></span>) <span class="pl-k">do</span> t
			<span class="pl-k">if</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">+</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">elseif</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">-</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">elseif</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">*</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">elseif</span> t[<span class="pl-c1">3</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>] <span class="pl-k">/</span> t[<span class="pl-c1">4</span>]
			<span class="pl-k">end</span>
		<span class="pl-k">end</span>

	p_expression_uminus <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : MINUS expression %prec UMINUS<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>t[<span class="pl-c1">3</span>]
		<span class="pl-k">end</span>

	p_expression_group <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : LPAREN expression RPAREN<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">3</span>]
		<span class="pl-k">end</span>

	p_expression_number <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : NUMBER<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> t[<span class="pl-c1">2</span>]
		<span class="pl-k">end</span>

	p_expression_name <span class="pl-k">=</span> <span class="pl-c1">parserule</span>(<span class="pl-s"><span class="pl-pds">"</span>expression : NAME<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
			<span class="pl-k">try</span>
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> vars[t[<span class="pl-c1">2</span>]]
			<span class="pl-k">catch</span>
				<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>Undefined name '%s'<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, t[<span class="pl-c1">2</span>])
				t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
			<span class="pl-k">end</span>
		<span class="pl-k">end</span>

	p_error <span class="pl-k">=</span> <span class="pl-c1">rule</span>() <span class="pl-k">do</span> t, lexer  <span class="pl-c"><span class="pl-c">#</span> the error rule actually takes a LexToken so make it a rule()</span>
			<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>Syntax error at '%s'<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, t[<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>])
		<span class="pl-k">end</span>
<span class="pl-k">end</span>

l <span class="pl-k">=</span> <span class="pl-c1">lexer</span>(rules)
p <span class="pl-k">=</span> <span class="pl-c1">parser</span>(rules, <span class="pl-s"><span class="pl-pds">"</span>statement<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> specifiy start rule here or through start variable in module</span>

<span class="pl-c"><span class="pl-c">#</span> replicates the input function using in calc.py</span>
<span class="pl-k">function</span> <span class="pl-en">input</span>(str<span class="pl-k">::</span><span class="pl-c1">String</span>)
	<span class="pl-c1">print</span>(str)
	<span class="pl-k">return</span> <span class="pl-c1">readline</span>(STDIN)
<span class="pl-k">end</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>q to quit<span class="pl-pds">"</span></span>)
line <span class="pl-k">=</span> <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span>calc &gt; <span class="pl-pds">"</span></span>)
<span class="pl-k">while</span> <span class="pl-c1">chomp</span>(line) <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>q<span class="pl-pds">"</span></span>
	<span class="pl-c1">parse</span>(p, l, line)
	line <span class="pl-k">=</span> <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span>calc &gt; <span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-noteworthy-differences-from-ply" class="anchor" aria-hidden="true" href="#noteworthy-differences-from-ply"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Noteworthy differences from PLY</h2>
<ul dir="auto">
<li>Indexing is Julia-style 1-indexing</li>
<li>Rule functions are created using the rule() and parserule() functions</li>
<li>A function passed to rule() must accept two arguments (the LexToken and the Lexer), while the function passed to parserule() just accepts a YaccProduction instance (as in PLY)</li>
<li>You cannot simply call lex.lex() or yacc.yacc() to get variables in the calling module--this functionality in PLY uses Python reflection functions that can't be implemented cross-language</li>
<li>lexer matching patterns and parser grammar rules are passed as arguments to rule() and parserule(), not as docstrings (there are no docstrings in Julia)</li>
<li>the parse() method takes a lexer as a mandatory second argument</li>
</ul>
<h2 dir="auto"><a id="user-content-licence" class="anchor" aria-hidden="true" href="#licence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Licence</h2>
<p dir="auto">MIT</p>
</article></div>