<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-flexible-data-containers-for-julia" class="anchor" aria-hidden="true" href="#flexible-data-containers-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Flexible data containers for Julia</h1>
<table>
<thead>
<tr>
<th align="left"><strong>License</strong></th>
<th align="left"><strong>Build Status</strong></th>
<th align="left"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="./LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="left"><a href="https://travis-ci.org/emmt/DataBags.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1fa8e87cee46693a3a3be007bb90f3867042eef98e0f52181e5cb97c2dbc1e9f/68747470733a2f2f7472617669732d63692e6f72672f656d6d742f44617461426167732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/emmt/DataBags.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/emmt/DataBags-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/5161f6b2a92d46cdd4f3d4d1f696c6ff3b7da3ffe7b532ff67c80b7d435132ed/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656d6d742f44617461426167732e6a6c3f6272616e63683d6d6173746572" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/emmt/DataBags.jl?branch=master" style="max-width:100%;"></a></td>
<td align="left"><a href="https://coveralls.io/github/emmt/DataBags.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/97cccf9e7b5d08d705e11ef456fefb1550dc9c79ed26ec6efbe88bd647f707dd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656d6d742f44617461426167732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/emmt/DataBags.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/emmt/DataBags.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a9dddd6110e2e8b67774db058698056e9393d4add14bcc3388682ab8e8e4c28/68747470733a2f2f636f6465636f762e696f2f67682f656d6d742f44617461426167732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/emmt/DataBags.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p><code>DataBags</code> is a small <a href="https://julialang.org/" rel="nofollow">Julia</a> package providing <em>data-bags</em> which
are a quick way to store structured data.  Data-bags combine properties and
dictionaries to associate keys (preferably symbols or strings) with values (of
any types) in a flexible way.  From the user viewpoint, data-bags behave like
dynamic structures whose fields can be modified or created with the syntax of
structured objects, <em>i.e.</em> <code>obj.key</code>.  They can also be deleted by calling
<code>delete!(obj,key)</code>.  As an example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataBags, Dates
A = DataBag(date = now(), Δx = 0.1, x = -3:0.1:5)
A.Δx              # get value of key `Δx`
A.y = sin.(A.x)   # creates new key `y`
"><pre><span class="pl-k">using</span> DataBags, Dates
A <span class="pl-k">=</span> <span class="pl-c1">DataBag</span>(date <span class="pl-k">=</span> <span class="pl-c1">now</span>(), Δx <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
A<span class="pl-k">.</span>Δx              <span class="pl-c"><span class="pl-c">#</span> get value of key `Δx`</span>
A<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(A<span class="pl-k">.</span>x)   <span class="pl-c"><span class="pl-c">#</span> creates new key `y`</span></pre></div>
<p>which shows how easy it is to create a data-bag and access its fields.
Data-bags can also be indexed by their keys like dictionaries:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A[:Δx]              # is the same as `A.Δx`
A[:y] = cos.(A[:x]) # is the same as `A.y = cos.(A.x)`
"><pre>A[<span class="pl-c1">:Δx</span>]              <span class="pl-c"><span class="pl-c">#</span> is the same as `A.Δx`</span>
A[<span class="pl-c1">:y</span>] <span class="pl-k">=</span> <span class="pl-c1">cos</span>.(A[<span class="pl-c1">:x</span>]) <span class="pl-c"><span class="pl-c">#</span> is the same as `A.y = cos.(A.x)`</span></pre></div>
<p>but this is, to my opinion, less readable and boring to type especially in an
interactive session.  More generally, data-bag types are sub-types of
<code>AbstractDict</code> so you can expect that data-bags can be used like dictionaries.
For instance, you can apply <code>pop</code>, <code>merge</code>, <code>merge!</code>, <code>delete!</code>, <em>etc.</em> on a
data-bag.</p>
<p>Admittedly, data-bags are less efficient than true Julia structures (there is
some overhead for retrieving a field of a data-bag) but they can be very
handful in interactive sessions or when designing new code: when the exact
contents of your data structures is not yet determined, data-bags let you
extend their contents without the pain of redefining your structures,
re-including your code and recreating your objects, <em>etc.</em> Tools such as
<a href="https://github.com/timholy/Revise.jl"><code>Revise</code></a> can help but cannot automatically determine what to do
with new members of existing objects if their type definition has changed.</p>
<h2><a id="user-content-creation-of-data-bags" class="anchor" aria-hidden="true" href="#creation-of-data-bags"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creation of data-bags</h2>
<p>Data-bags are created by calling the <code>DataBag(...)</code> constructor.  The initial
contents of data-bags can be specified by keywords, by key-value pairs, or as a
dictionary (<code>AbstractDict</code>).  To avoid ambiguities, these different styles
cannot be mixed.  Below are a few examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataBags
A = DataBag( units  =  &quot;µm&quot;,  Δx  =  0.1,  Δy  =  0.2)
B = DataBag(:units  =&gt; &quot;µm&quot;, :Δx  =&gt; 0.1, :Δy  =&gt; 0.2)
C = DataBag(&quot;units&quot; =&gt; &quot;µm&quot;, &quot;Δx&quot; =&gt; 0.1, &quot;Δy&quot; =&gt; 0.2)
D = DataBag(1 =&gt; 0.9, 2 =&gt; sqrt(2), 3 =&gt; 4)
"><pre><span class="pl-k">using</span> DataBags
A <span class="pl-k">=</span> <span class="pl-c1">DataBag</span>( units  <span class="pl-k">=</span>  <span class="pl-s"><span class="pl-pds">"</span>µm<span class="pl-pds">"</span></span>,  Δx  <span class="pl-k">=</span>  <span class="pl-c1">0.1</span>,  Δy  <span class="pl-k">=</span>  <span class="pl-c1">0.2</span>)
B <span class="pl-k">=</span> <span class="pl-c1">DataBag</span>(<span class="pl-c1">:units</span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>µm<span class="pl-pds">"</span></span>, <span class="pl-c1">:Δx</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">:Δy</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">0.2</span>)
C <span class="pl-k">=</span> <span class="pl-c1">DataBag</span>(<span class="pl-s"><span class="pl-pds">"</span>units<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>µm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Δx<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.1</span>, <span class="pl-s"><span class="pl-pds">"</span>Δy<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.2</span>)
D <span class="pl-k">=</span> <span class="pl-c1">DataBag</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.9</span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)</pre></div>
<p>These statements yield two data-bags, <code>A</code> and <code>B</code>, with symbolic keys (of type
<code>Symbol</code>), a data-bag, <code>C</code>, with textual keys (of type <code>String</code>) and a
data-bag, <code>D</code>, with integer keys (of type <code>Int</code>).  All these data-bags can
store values of <code>Any</code> type.</p>
<p>Accessing a value is possible via the syntax <code>obj[key]</code> or, for symbolic and
textual keys, via the syntax <code>obj.key</code>.  Accessing values via the syntax
<code>obj.key</code> is faster for symbolic keys than for textual keys (because it
involves converting a symbol into a string).</p>
<p>Data-bag constructors attempt to favor symbolic or string keys (to exploit the
<code>obj.key</code> syntax) and enforce unspecific values of <code>Any</code> type (for
flexibility).  In order to override these rules, the parametric versions of the
<code>DataBag</code> constructor can be called instead:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="E = DataBag{Integer}(1 =&gt; 0.9, 2 =&gt; sqrt(2), 3 =&gt; 4)
F = DataBag{Integer,Real}(1 =&gt; 0.9, 2 =&gt; sqrt(2), 3 =&gt; 4)
"><pre>E <span class="pl-k">=</span> <span class="pl-c1">DataBag</span><span class="pl-c1">{Integer}</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.9</span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)
F <span class="pl-k">=</span> <span class="pl-c1">DataBag</span><span class="pl-c1">{Integer,Real}</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.9</span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)</pre></div>
<p>yield two data-bags, <code>E</code> and <code>F</code>, with integer keys (of any <code>Integer</code> type),
the values of <code>E</code> are unspecific while the values of <code>F</code> are restricted to be
<code>Real</code>.</p>
<p>The same rules apply if the data-bag is built out of an existing dictionary (do
not forget that data-bags are themselves abstract dictionaries).  So
<code>DataBag(F)</code> yields a data-bag with keys of the same type as those of <code>F</code> (that
is <code>Integer</code> in that case) but values of <code>Any</code> type.</p>
<p>When a data-bag is built out of an existing dictionary, the data-bag creates a
new dictionary to store its values and initializes it with the contents of the
dictionary passed in argument.  After the creation of the data-bag, the
data-bag and the original dictionary are independent.  Their values, which may
be references to other objects, may not be independent though.  If you want to
make a data-bag that stores its contents in a given dictionary, say <code>dict</code>,
call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="wrap(DataBag, dict)
"><pre><span class="pl-c1">wrap</span>(DataBag, dict)</pre></div>
<p>instead of:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="DataBag(dict)
"><pre><span class="pl-c1">DataBag</span>(dict)</pre></div>
<p>If no arguments nor keywords are specified, the data-bag created by <code>DataBag()</code>
is initially empty and has symbolic keys with any type of values, <em>i.e.</em> an
instance of <code>Dict{Symbol,Any}</code> is used for storing the key-value pairs.</p>
<p>Unless <code>iterate</code> is overridden, iterating on an <code>AbstractDataBag</code> is iterating
on its key-value pairs.</p>
<p>Calling the <code>contents</code> method on an <code>AbstractDataBag</code> yields the internal
object, an <code>AbstractDict</code>, used to store the data of the data-bag.</p>
<h2><a id="user-content-defining-custom-data-bag-types" class="anchor" aria-hidden="true" href="#defining-custom-data-bag-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining custom data-bag types</h2>
<p>The <code>DataBags</code> package provides simple means to facilitate creating new
sub-types of <code>DataBags.AbstractDataBag</code> so as to benefit from the common
interface implemented for data-bags.  The following steps are needed:</p>
<ol>
<li>
<p>Make your type inherit from <code>DataBags.AbstractDataBag{K,V,D}</code> with <code>K</code> the
key type, <code>V</code> the value type and <code>D&lt;:AbstractDict{K,V}</code> the type of the
dictionary storing the key-value pairs.</p>
</li>
<li>
<p>Extend the <code>DataBags.contents(A::T)</code> method for your custom type <code>T</code> so that
it returns the dictionary storing the key-value pairs in an instance <code>A</code>.</p>
</li>
<li>
<p>Optionally provide some constructor(s) to facilitate creation of objects of
type <code>T</code>.  You may also consider extending the <code>DataBags.wrap</code> method if.</p>
</li>
</ol>
<p>Here is a first example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataBags

# Define a concrete sub-type of `DataBags.AbstractDataBag`.
struct BagEx1{K,V,D&lt;:AbstractDict{K,V}} &lt;: DataBags.AbstractDataBag{K,V,D}
    data::D # object used to store key-value pairs
    ...     # another member
    ...     # yet another member
    ...     # etc.
end

# Override `DataBags.contents` to yield the dictionary that stores the data.
DataBags.contents(A::BagEx1) = Base.getfield(A, :data)
"><pre><span class="pl-k">using</span> DataBags

<span class="pl-c"><span class="pl-c">#</span> Define a concrete sub-type of `DataBags.AbstractDataBag`.</span>
<span class="pl-k">struct</span> BagEx1{K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">DataBags.AbstractDataBag{K,V,D}</span>
    data<span class="pl-k">::</span><span class="pl-c1">D</span> <span class="pl-c"><span class="pl-c">#</span> object used to store key-value pairs</span>
    <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> another member</span>
    <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> yet another member</span>
    <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> etc.</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Override `DataBags.contents` to yield the dictionary that stores the data.</span>
DataBags<span class="pl-k">.</span><span class="pl-en">contents</span>(A<span class="pl-k">::</span><span class="pl-c1">BagEx1</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">getfield</span>(A, <span class="pl-c1">:data</span>)</pre></div>
<p>Note that <code>Base.getfield</code> has to be used to retrieve a member of objects whose
type is derived from <code>DataBags.AbstractDataBag</code> as for the member <code>data</code> of the
object <code>A</code> in the above example.  This is because the <code>getproperty</code> and
<code>setproperty!</code> methods are overridden to implement the <code>obj.key</code> syntax for
sub-types of <code>DataBags.AbstractDataBag</code>.</p>
<p>In the above example, it is only possible to create a data-bag of type
<code>BagEx1</code> out of a dictionary which is shared by the data-bag.  The only
advantage over a simple dictionary is the <code>obj.key</code> syntax provided keys have
type <code>Symbol</code> or <code>String</code>.</p>
<p>To improve over this first example, we want to implement the same kind of
creation rules as <code>DataBag</code>.  This leads to the following code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataBags

# Define a concrete sub-type of `DataBags.AbstractDataBag`.
struct BagEx2{K,V,D&lt;:AbstractDict{K,V}} &lt;: DataBags.AbstractDataBag{K,V,D}
    data::D # object used to store key-value pairs
    ...     # another member
    ...     # yet another member
    ...     # etc.
    # Explicitely define inner constructor to avoid outer constructor
    # automatically created by Julia.
    BagEx2{K,V,D}(data::D) where {K,V,D&lt;:AbstractDict{K,V}} = new{K,V,D}(data)
end

# Outer constructor.
BagEx2(args...; kdws...) =
    wrap(BagEx2, contents(Dict{Any,Any}, args...; kdws...))

# Override `DataBags.contents` to yield the dictionary that stores the data.
DataBags.contents(A::BagEx2) = Base.getfield(A, :data)

# Override `DataBags.wrap` to create an instance of `BagEx2` that stores
# its data in a given dictionary.
DataBags.wrap(::Type{BagEx2}, data::D) where {K,V,D&lt;:AbstractDict{K,V}} =
    BagEx2{K,V,D}(data)
"><pre><span class="pl-k">using</span> DataBags

<span class="pl-c"><span class="pl-c">#</span> Define a concrete sub-type of `DataBags.AbstractDataBag`.</span>
<span class="pl-k">struct</span> BagEx2{K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">DataBags.AbstractDataBag{K,V,D}</span>
    data<span class="pl-k">::</span><span class="pl-c1">D</span> <span class="pl-c"><span class="pl-c">#</span> object used to store key-value pairs</span>
    <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> another member</span>
    <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> yet another member</span>
    <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> etc.</span>
    <span class="pl-c"><span class="pl-c">#</span> Explicitely define inner constructor to avoid outer constructor</span>
    <span class="pl-c"><span class="pl-c">#</span> automatically created by Julia.</span>
    <span class="pl-en">BagEx2</span><span class="pl-c1">{K,V,D}</span>(data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{K,V,D}</span>(data)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Outer constructor.</span>
<span class="pl-en">BagEx2</span>(args<span class="pl-k">...</span>; kdws<span class="pl-k">...</span>) <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(BagEx2, <span class="pl-c1">contents</span>(Dict{Any,Any}, args<span class="pl-k">...</span>; kdws<span class="pl-k">...</span>))

<span class="pl-c"><span class="pl-c">#</span> Override `DataBags.contents` to yield the dictionary that stores the data.</span>
DataBags<span class="pl-k">.</span><span class="pl-en">contents</span>(A<span class="pl-k">::</span><span class="pl-c1">BagEx2</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">getfield</span>(A, <span class="pl-c1">:data</span>)

<span class="pl-c"><span class="pl-c">#</span> Override `DataBags.wrap` to create an instance of `BagEx2` that stores</span>
<span class="pl-c"><span class="pl-c">#</span> its data in a given dictionary.</span>
DataBags<span class="pl-k">.</span><span class="pl-en">wrap</span>(<span class="pl-k">::</span><span class="pl-c1">Type{BagEx2}</span>, data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span>
    <span class="pl-c1">BagEx2</span><span class="pl-c1">{K,V,D}</span>(data)</pre></div>
<p>In this second example, we have:</p>
<ul>
<li>
<p>Explictely defined an inner constructor so as to forbid creating a data-bag
that shares an existing dictionary, say <code>dict</code>, by calling the constructor
<code>BagEx2</code>.  This is however possible by calling <code>wrap(BagEx2,dict)</code>.</p>
</li>
<li>
<p>Defined an outer constructor that calls the <code>wrap</code> method over the dictionary
created by the <code>DataBags.contents</code> method called with <code>Dict{K,V}</code> as a first
argument, followed by all arguments and keywords passed to your constructor:</p>
</li>
<li>
<p>Overridden methods <code>DataBags.contents</code> (as in the first example) and
<code>DataBags.wrap</code>.  The latter is to wrap a dictionary in a new <code>BagEx2</code>
instance taking care of supplying the correct type parameters <code>{K,V,D}</code>.</p>
</li>
</ul>
<p>To add constructors with constraints on the type of keys and values, you may
have a look at the complete implementation of the <code>DataBag</code> type which is
summarized below:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct DataBag{K,V,D&lt;:AbstractDict{K,V}} &lt;: AbstractDataBag{K,V,D}
    data::D # data data-bag
    # Provide inner constructor to let outer constructors deal with type
    # parameters.
    DataBag{K,V,D}(data::D) where {K,V,D&lt;:AbstractDict{K,V}} =
        new{K,V,D}(data)
end

# Outer constructors.
DataBag(args...; kwds...) =
    wrap(DataBag, contents(Dict{Any,Any}, args...; kwds...))
DataBag{K}(args...; kwds...) where {K} =
    wrap(DataBag, contents(Dict{K,Any}, args...; kwds...))
DataBag{K,V}(args...; kwds...) where {K,V} =
    wrap(DataBag, contents(Dict{K,V}, args...; kwds...))

# Extends the `contents` method to benefit from the API of `AbstractDataBag`.
@inline contents(A::DataBag) = Base.getfield(A, :data)

# Extend the `wrap` method to create instances of `DataBag`.
wrap(::Type{DataBag}, data::D) where {K,V,D&lt;:AbstractDict{K,V}} =
    DataBag{K,V,D}(data)
wrap(::Type{DataBag{K}}, data::D) where {K,V,D&lt;:AbstractDict{K,V}} =
    wrap(DataBag, data)
wrap(::Type{DataBag{K,V}}, data::D) where {K,V,D&lt;:AbstractDict{K,V}} =
    wrap(DataBag, data)
wrap(::Type{DataBag{K,V,D}}, data::D) where {K,V,D&lt;:AbstractDict{K,V}} =
    wrap(DataBag, data)
"><pre><span class="pl-k">struct</span> DataBag{K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractDataBag{K,V,D}</span>
    data<span class="pl-k">::</span><span class="pl-c1">D</span> <span class="pl-c"><span class="pl-c">#</span> data data-bag</span>
    <span class="pl-c"><span class="pl-c">#</span> Provide inner constructor to let outer constructors deal with type</span>
    <span class="pl-c"><span class="pl-c">#</span> parameters.</span>
    <span class="pl-en">DataBag</span><span class="pl-c1">{K,V,D}</span>(data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span>
        <span class="pl-c1">new</span><span class="pl-c1">{K,V,D}</span>(data)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Outer constructors.</span>
<span class="pl-en">DataBag</span>(args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>) <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(DataBag, <span class="pl-c1">contents</span>(Dict{Any,Any}, args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>))
<span class="pl-en">DataBag</span><span class="pl-c1">{K}</span>(args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>) <span class="pl-k">where</span> {K} <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(DataBag, <span class="pl-c1">contents</span>(Dict{K,Any}, args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>))
<span class="pl-en">DataBag</span><span class="pl-c1">{K,V}</span>(args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>) <span class="pl-k">where</span> {K,V} <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(DataBag, <span class="pl-c1">contents</span>(Dict{K,V}, args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>))

<span class="pl-c"><span class="pl-c">#</span> Extends the `contents` method to benefit from the API of `AbstractDataBag`.</span>
<span class="pl-c1">@inline</span> <span class="pl-en">contents</span>(A<span class="pl-k">::</span><span class="pl-c1">DataBag</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">getfield</span>(A, <span class="pl-c1">:data</span>)

<span class="pl-c"><span class="pl-c">#</span> Extend the `wrap` method to create instances of `DataBag`.</span>
<span class="pl-en">wrap</span>(<span class="pl-k">::</span><span class="pl-c1">Type{DataBag}</span>, data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span>
    <span class="pl-c1">DataBag</span><span class="pl-c1">{K,V,D}</span>(data)
<span class="pl-en">wrap</span>(<span class="pl-k">::</span><span class="pl-c1">Type{DataBag{K}}</span>, data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(DataBag, data)
<span class="pl-en">wrap</span>(<span class="pl-k">::</span><span class="pl-c1">Type{DataBag{K,V}}</span>, data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(DataBag, data)
<span class="pl-en">wrap</span>(<span class="pl-k">::</span><span class="pl-c1">Type{DataBag{K,V,D}}</span>, data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> {K,V,D<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractDict{K,V}</span>} <span class="pl-k">=</span>
    <span class="pl-c1">wrap</span>(DataBag, data)</pre></div>
<h2><a id="user-content-a-useful-minimalist-example" class="anchor" aria-hidden="true" href="#a-useful-minimalist-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A useful minimalist example</h2>
<p>The <code>DataBag</code> type provided by <code>DataBags</code> may be sufficient for your needs but
you may want to specialize it a bit to exploit the power of <em>type dispatching</em>
in Julia and to implement some specific behavior.  The most simple example of
creating such a sub-type takes about half a dozen of lines of code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataBags
struct BagEx3 &lt;: DataBags.AbstractDataBag{Symbol,Any,Dict{Symbol,Any}}
    data::Dict{Symbol,Any}
    BagEx3(args...; kwds...) =
        new(DataBags.contents(Dict{Symbol,Any}, args...; kwds...))
end
DataBags.contents(A::BagEx3) = Base.getfield(A, :data)
"><pre><span class="pl-k">using</span> DataBags
<span class="pl-k">struct</span> BagEx3 <span class="pl-k">&lt;:</span> <span class="pl-c1">DataBags.AbstractDataBag{Symbol,Any,Dict{Symbol,Any}}</span>
    data<span class="pl-k">::</span><span class="pl-c1">Dict{Symbol,Any}</span>
    <span class="pl-en">BagEx3</span>(args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>) <span class="pl-k">=</span>
        <span class="pl-c1">new</span>(DataBags<span class="pl-k">.</span><span class="pl-c1">contents</span>(Dict{Symbol,Any}, args<span class="pl-k">...</span>; kwds<span class="pl-k">...</span>))
<span class="pl-k">end</span>
DataBags<span class="pl-k">.</span><span class="pl-en">contents</span>(A<span class="pl-k">::</span><span class="pl-c1">BagEx3</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">getfield</span>(A, <span class="pl-c1">:data</span>)</pre></div>
<p><em>Et voilà!</em> That is all you need to create a new type, <code>BagEx3</code>, whose
instances behave like a dictionary with symbolic keys and any type of values,
implement the <code>obj.key</code> syntax to get/set the value of <code>key</code> (as a shortcut of
<code>obj[:key]</code>) and which can be constructed using keywords, <em>e.g.</em> <code>obj = BagEx3(id=1, x=-3.14:0.1:3.14, units="µm")</code>.</p>
<p>This usage is so common that a macro is provided by the <code>DataBags</code> package and
the above statements can be reduced to:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataBags
DataBags.@newtype BagEx3
"><pre><span class="pl-k">using</span> DataBags
DataBags<span class="pl-k">.</span><span class="pl-c1">@newtype</span> BagEx3</pre></div>
<p>using the macro not only saves typing (to encourage creating such data-bag
types) but also warrants that the implementation is correct and follows further
evolutions of the <code>DataBags</code> package.</p>
</article></div>