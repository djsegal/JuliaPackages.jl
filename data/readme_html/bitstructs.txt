<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bitstructsjl" class="anchor" aria-hidden="true" href="#bitstructsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BitStructs.jl</h1>
<p dir="auto">Julia struct-s packed at bit boundaries into a primitive 64 bit type.</p>
<p dir="auto"><a href="https://rryi.github.io/BitStructs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://rryi.github.io/BitStructs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://app.travis-ci.com/rryi/BitStructs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f8c87a61c2afb9d7e8b1b038d4f9da576df3f3ba5826f926f458dec37152de7e/68747470733a2f2f6170702e7472617669732d63692e636f6d2f727279692f426974537472756374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://app.travis-ci.com/rryi/BitStructs.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/rryi/BitStructs-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eaf03961f1db682b747057b28fcb6f088ddf4e852c696a680e556c613981c53c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f727279692f426974537472756374732d6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/rryi/BitStructs-jl?svg=true" style="max-width: 100%;"></a>
<a href="https://cirrus-ci.com/github/rryi/BitStructs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0a29710045c318d980b957c55013aa14aa356a9304f0938929841727f5f843f/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f727279692f426974537472756374732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/rryi/BitStructs.jl.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/rryi/BitStructs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2c5b3f14880982600ed72b31c6da17b3fe8678ef941e512b165090a0133420c9/68747470733a2f2f636f6465636f762e696f2f67682f727279692f426974537472756374732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/rryi/BitStructs.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">BitStructs has the following use cases in mind:</p>
<ul dir="auto">
<li>
<p dir="auto">memory reduction for tables with fields having very few instances like flags, status info, enumerations. A couple of columns in such tables could be combined into a Vector{T&lt;:BitStruct}</p>
</li>
<li>
<p dir="auto">pooling of several method parameters in one BitStruct instance. This reduces push/pop overhead in method execution for methods which are not inlined, and can improve runtime performance, because the compiler gets more choices for keeping data in CPU registers.</p>
</li>
<li>
<p dir="auto">reading and writing of bitpacked binary data</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-current-state-in-development" class="anchor" aria-hidden="true" href="#current-state-in-development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>current state: in development</h1>
<p dir="auto">As soon as I think the package is usable, it will become a registered julia package.</p>
<p dir="auto">see test/tutorial.jl for an introduction</p>
<p dir="auto">see test/benchmarks.jl for some timing comparisons</p>
<p dir="auto">With julia 1.6-RC1, reading fields is nearly as fast as reading fields in standard julia struct-s.
Older julia releases do not perform full constant propagation on field read access ==&gt; 100-1000 times slower.</p>
<p dir="auto">Setting fields is currently under investigation.</p>
</article></div>