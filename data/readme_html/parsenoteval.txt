<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
  <br>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ChifiSource/image_dump/blob/main/parsenoteval/logo.png"><img width="300" src="https://github.com/ChifiSource/image_dump/raw/main/parsenoteval/logo.png" style="max-width: 100%;"></a>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/Lathe/6rMNJ" rel="nofollow"><img src="https://camo.githubusercontent.com/b91c7b2ad1947c62e739da268a92e631a1b0f29faf016948d2b055aa299c6a0e/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4c617468652f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Lathe/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Lathe/6rMNJ?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/075171947593715ad002b0a4dd6e2431140df2617529588325e6e94a9a72862b/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4c617468652f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Lathe/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Lathe/6rMNJ" rel="nofollow"><img src="https://camo.githubusercontent.com/55cdf4a8b018823162a426f54bce2ff9ec6c9ed7319082ced6d96e9f48c21817/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4c617468652f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/Lathe/pkgeval.svg" style="max-width: 100%;"></a>
<br>
<br></p>
  </div>
<p dir="auto"><strong>ParseNotEval</strong> Is a core odd data package that acts as both an implicit and explicit type parser. The main usage for such a thing is in file/string reading, by being able to quickly parse strings into their appropriate types. This is helpful if you want to make secure and fast data readers. This module is moreso ecosystem geared.</p>
<h3 dir="auto"></h3>
<h3 dir="auto"><a id="user-content-adding-and-using" class="anchor" aria-hidden="true" href="#adding-and-using"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>adding and using</h3>
<p dir="auto">Until the team is ready to release a stable version (<strong>very soon, likely today</strong>,) you will need to add the package via URL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url = &quot;https://github.com/ChifiSource/ParseNotEval.jl.git&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/ChifiSource/ParseNotEval.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The only thing that this module exports is the <a href="https://docs.julialang.org/en/v1/base/numbers/#Base.parse" rel="nofollow">parse method</a> and <a href="https://docs.julialang.org/en/v1/stdlib/Dates/" rel="nofollow">Dates.DateTime + Dates.Date</a>. The extensions provided to parse() allow for one to pass tons of different types and structures through in order to create them. For example, we could read a Dict in from a string:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dct_str = &quot;A =&gt; [5, 10, 15], B =&gt; [5, 10, 15]&quot;
parse(Dict, dct_string)
Dict(:A =&gt; [5, 10, 15], :B =&gt; [5, 10, 15])

# This also works with JSON.
dct_str = &quot;{A : [5, 10, 15], B : [5, 10, 15]}&quot;
parse(Dict, dct_string)
Dict(:A =&gt; [5, 10, 15], :B =&gt; [5, 10, 15])"><pre>dct_str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>A =&gt; [5, 10, 15], B =&gt; [5, 10, 15]<span class="pl-pds">"</span></span>
<span class="pl-c1">parse</span>(Dict, dct_string)
<span class="pl-c1">Dict</span>(<span class="pl-c1">:A</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">10</span>, <span class="pl-c1">15</span>], <span class="pl-c1">:B</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">10</span>, <span class="pl-c1">15</span>])

<span class="pl-c"><span class="pl-c">#</span> This also works with JSON.</span>
dct_str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{A : [5, 10, 15], B : [5, 10, 15]}<span class="pl-pds">"</span></span>
<span class="pl-c1">parse</span>(Dict, dct_string)
<span class="pl-c1">Dict</span>(<span class="pl-c1">:A</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">10</span>, <span class="pl-c1">15</span>], <span class="pl-c1">:B</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">10</span>, <span class="pl-c1">15</span>])</pre></div>
<p dir="auto">There are a lot more structures involved as well, the best choice is to use ?(parse) to get the docs all of the methods for parse, or view the JuliaHub documentation. One notable other example is that of parse(Any, ::String).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="typeof(parse(Any, 5.0))
Float64
typeof(parse(Any, 5))
Int64
"><pre class="notranslate"><code>typeof(parse(Any, 5.0))
Float64
typeof(parse(Any, 5))
Int64

</code></pre></div>
</article></div>