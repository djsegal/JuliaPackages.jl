<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dataconvenience" class="anchor" aria-hidden="true" href="#dataconvenience"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DataConvenience</h1>
<p>An eclectic collection of convenience functions for your data manipulation needs.</p>
<h2><a id="user-content-data" class="anchor" aria-hidden="true" href="#data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Data</h2>
<h3><a id="user-content-piping-convenience" class="anchor" aria-hidden="true" href="#piping-convenience"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Piping Convenience</h3>
<h4><a id="user-content-defining-filterabstractdataframe-arg" class="anchor" aria-hidden="true" href="#defining-filterabstractdataframe-arg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining <code>filter(::AbstractDataFrame, arg)</code></h4>
<p>DataFrames.jl does not define <code>filter(::AbstractDataFrame, arg)</code> and instead has <code>filter(arg, ::AbstractDataFrame)</code> only. This makes it inconsistent with the other functions so that's why I am defining <code>filter</code> with the signature <code>filter(::AbstractDataFrame, arg)</code>.</p>
<h4><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataConvenience
using DataFrames
using Chain: @chain

df = DataFrame(a=1:8)

@chain df begin
    filter(:a =&gt; ==(1))
end
"><pre><span class="pl-k">using</span> DataConvenience
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> Chain<span class="pl-k">:</span> <span class="pl-c1">@chain</span>

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>)

<span class="pl-c1">@chain</span> df <span class="pl-k">begin</span>
    <span class="pl-c1">filter</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-k">==</span>(<span class="pl-c1">1</span>))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="1×1 DataFrame
 Row │ a
     │ Int64
─────┼───────
   1 │     1
"><pre><code>1×1 DataFrame
 Row │ a
     │ Int64
─────┼───────
   1 │     1
</code></pre></div>
<p>Note: DataConvenience.jl used to re-export Lazy.jl's <code>@&gt;</code> which it no longer does. Users are encouraged to use <a href="https://github.com/jkrumbiegel/Chain.jl">Chain.jl</a> instead.</p>
<h3><a id="user-content-sampling-with-sample" class="anchor" aria-hidden="true" href="#sampling-with-sample"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sampling with <code>sample</code></h3>
<p>You can conveniently sample a dataframe with the <code>sample</code> method</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="df = DataFrame(a=1:10)

# sample 10 rows
sample(df, 10)
"><pre><code>df = DataFrame(a=1:10)

# sample 10 rows
sample(df, 10)
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# sample 10% of rows
sample(df, 0.1)
"><pre><code># sample 10% of rows
sample(df, 0.1)
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# sample 1/10 of rows
sample(df, 1//10)
"><pre><code># sample 1/10 of rows
sample(df, 1//10)
</code></pre></div>
<h3><a id="user-content-faster-sorting-for-dataframes" class="anchor" aria-hidden="true" href="#faster-sorting-for-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Faster sorting for DataFrames</h3>
<p>You can sort <code>DataFrame</code>s (in ascending order only) faster than the <code>sort</code> function by using the <code>fsort</code> function. E.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataFrames
df = DataFrame(col = rand(1_000_000), col1 = rand(1_000_000), col2 = rand(1_000_000))

fsort(df, :col) # sort by `:col`
fsort(df, [:col1, :col2]) # sort by `:col1` and `:col2`
fsort!(df, :col) # sort by `:col` # sort in-place by `:col`
fsort!(df, [:col1, :col2]) # sort in-place by `:col1` and `:col2`
"><pre><span class="pl-k">using</span> DataFrames
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(col <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>))

<span class="pl-c1">fsort</span>(df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col`</span>
<span class="pl-c1">fsort</span>(df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort by `:col1` and `:col2`</span>
<span class="pl-c1">fsort!</span>(df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col` # sort in-place by `:col`</span>
<span class="pl-c1">fsort!</span>(df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort in-place by `:col1` and `:col2`</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="1000000×3 DataFrame
     Row │ col        col1        col2
         │ Float64    Float64     Float64
─────────┼──────────────────────────────────
       1 │ 0.561204   7.28226e-7  0.364491
       2 │ 0.552371   1.55213e-6  0.449652
       3 │ 0.995762   2.64605e-6  0.024013
       4 │ 0.601954   3.16072e-6  0.743319
       5 │ 0.932321   6.11559e-6  0.190004
       6 │ 0.147286   6.73857e-6  0.0394049
       7 │ 0.722439   8.40162e-6  0.0565526
       8 │ 0.358826   8.62958e-6  0.788989
    ⋮    │     ⋮          ⋮           ⋮
  999994 │ 0.79161    0.999993    0.312891
  999995 │ 0.779757   0.999996    0.0197649
  999996 │ 0.681739   0.999997    0.0685774
  999997 │ 0.736364   0.999997    0.15211
  999998 │ 0.259878   0.999997    0.480823
  999999 │ 0.943275   0.999998    0.96846
 1000000 │ 0.837561   0.999999    0.289213
                         999985 rows omitted
"><pre><code>1000000×3 DataFrame
     Row │ col        col1        col2
         │ Float64    Float64     Float64
─────────┼──────────────────────────────────
       1 │ 0.561204   7.28226e-7  0.364491
       2 │ 0.552371   1.55213e-6  0.449652
       3 │ 0.995762   2.64605e-6  0.024013
       4 │ 0.601954   3.16072e-6  0.743319
       5 │ 0.932321   6.11559e-6  0.190004
       6 │ 0.147286   6.73857e-6  0.0394049
       7 │ 0.722439   8.40162e-6  0.0565526
       8 │ 0.358826   8.62958e-6  0.788989
    ⋮    │     ⋮          ⋮           ⋮
  999994 │ 0.79161    0.999993    0.312891
  999995 │ 0.779757   0.999996    0.0197649
  999996 │ 0.681739   0.999997    0.0685774
  999997 │ 0.736364   0.999997    0.15211
  999998 │ 0.259878   0.999997    0.480823
  999999 │ 0.943275   0.999998    0.96846
 1000000 │ 0.837561   0.999999    0.289213
                         999985 rows omitted
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="df = DataFrame(col = rand(1_000_000), col1 = rand(1_000_000), col2 = rand(1_000_000))

using BenchmarkTools
fsort_1col = @belapsed fsort($df, :col) # sort by `:col`
fsort_2col = @belapsed fsort($df, [:col1, :col2]) # sort by `:col1` and `:col2`

sort_1col = @belapsed sort($df, :col) # sort by `:col`
sort_2col = @belapsed sort($df, [:col1, :col2]) # sort by `:col1` and `:col2`

using Plots
bar([&quot;DataFrames.sort 1 col&quot;,&quot;DataFrames.sort 2 col2&quot;, &quot;DataCon.sort 1 col&quot;,&quot;DataCon.sort 2 col2&quot;],
    [sort_1col, sort_2col, fsort_1col, fsort_2col],
    title=&quot;DataFrames sort performance comparison&quot;,
    label = &quot;seconds&quot;)
"><pre>df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(col <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>))

<span class="pl-k">using</span> BenchmarkTools
fsort_1col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsort</span>(<span class="pl-k">$</span>df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col`</span>
fsort_2col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsort</span>(<span class="pl-k">$</span>df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort by `:col1` and `:col2`</span>

sort_1col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col`</span>
sort_2col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort by `:col1` and `:col2`</span>

<span class="pl-k">using</span> Plots
<span class="pl-c1">bar</span>([<span class="pl-s"><span class="pl-pds">"</span>DataFrames.sort 1 col<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DataFrames.sort 2 col2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DataCon.sort 1 col<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DataCon.sort 2 col2<span class="pl-pds">"</span></span>],
    [sort_1col, sort_2col, fsort_1col, fsort_2col],
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>DataFrames sort performance comparison<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>seconds<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/README_3_1.png"><img src="figures/README_3_1.png" alt="" style="max-width:100%;"></a></p>
<h3><a id="user-content-clean-column-names-with-cleannames" class="anchor" aria-hidden="true" href="#clean-column-names-with-cleannames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clean column names with <code>cleannames!</code></h3>
<p>Somewhat similiar to R's <code>janitor::clean_names</code> so that <code>cleannames!(df)</code> cleans the names of a <code>DataFrame</code>.</p>
<h3><a id="user-content-csv-chunk-reader" class="anchor" aria-hidden="true" href="#csv-chunk-reader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSV Chunk Reader</h3>
<p>You can read a CSV in chunks and apply logic to each chunk. The types of each column is inferred by <code>CSV.read</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataFrames
using CSV

df = DataFrame(a = rand(1_000_000), b = rand(Int8, 1_000_000), c = rand(Int8, 1_000_000))

filepath = tempname()*&quot;.csv&quot;
CSV.write(filepath, df)

for chunk in CsvChunkIterator(filepath)
  print(describe(chunk))
end
"><pre><span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> CSV

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int8, <span class="pl-c1">1_000_000</span>), c <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int8, <span class="pl-c1">1_000_000</span>))

filepath <span class="pl-k">=</span> <span class="pl-c1">tempname</span>()<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>.csv<span class="pl-pds">"</span></span>
CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(filepath, df)

<span class="pl-k">for</span> chunk <span class="pl-k">in</span> <span class="pl-c1">CsvChunkIterator</span>(filepath)
  <span class="pl-c1">print</span>(<span class="pl-c1">describe</span>(chunk))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="3×7 DataFrame
 Row │ variable  mean       min            median     max    nmissing  elty
pe
     │ Symbol    Float64    Real           Float64    Real   Int64     Data
Type
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ a          0.499336     1.48721e-6   0.499138    1.0         0  Floa
t64
   2 │ b         -0.495945  -128            0.0       127           0  Int6
4
   3 │ c         -0.574404  -128           -1.0       127           0  Int6
4
"><pre><code>3×7 DataFrame
 Row │ variable  mean       min            median     max    nmissing  elty
pe
     │ Symbol    Float64    Real           Float64    Real   Int64     Data
Type
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ a          0.499336     1.48721e-6   0.499138    1.0         0  Floa
t64
   2 │ b         -0.495945  -128            0.0       127           0  Int6
4
   3 │ c         -0.574404  -128           -1.0       127           0  Int6
4
</code></pre></div>
<p>The chunk iterator uses <code>CSV.read</code> parameters. The user can pass in <code>type</code> and <code>types</code> to dictate the types of each column e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# read all column as String
for chunk in CsvChunkIterator(filepath, type=String)
    print(describe(chunk))
end
"><pre><span class="pl-c"><span class="pl-c">#</span> read all column as String</span>
<span class="pl-k">for</span> chunk <span class="pl-k">in</span> <span class="pl-c1">CsvChunkIterator</span>(filepath, type<span class="pl-k">=</span>String)
    <span class="pl-c1">print</span>(<span class="pl-c1">describe</span>(chunk))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="3×7 DataFrame
 Row │ variable  mean     min                     median   max             
      nmissing  eltype
     │ Symbol    Nothing  String                  Nothing  String          
      Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
─────────────────────────
   1 │ a                  0.00010077562806376505           9.79725879761694
8e-5         0  String
   2 │ b                  -1                               99              
             0  String
   3 │ c                  -1                               99              
             0  String
"><pre><code>3×7 DataFrame
 Row │ variable  mean     min                     median   max             
      nmissing  eltype
     │ Symbol    Nothing  String                  Nothing  String          
      Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
─────────────────────────
   1 │ a                  0.00010077562806376505           9.79725879761694
8e-5         0  String
   2 │ b                  -1                               99              
             0  String
   3 │ c                  -1                               99              
             0  String
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# read a three colunms csv where the column types are String, Int, Float32
for chunk in CsvChunkIterator(filepath, types=[String, Int, Float32])
  print(describe(chunk))
end
"><pre><span class="pl-c"><span class="pl-c">#</span> read a three colunms csv where the column types are String, Int, Float32</span>
<span class="pl-k">for</span> chunk <span class="pl-k">in</span> <span class="pl-c1">CsvChunkIterator</span>(filepath, types<span class="pl-k">=</span>[String, Int, Float32])
  <span class="pl-c1">print</span>(<span class="pl-c1">describe</span>(chunk))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="3×7 DataFrame
 Row │ variable  mean       min                     median  max            
       nmissing  eltype
     │ Symbol    Union…     Any                     Union…  Any            
       Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
──────────────────────────
   1 │ a                    0.00010077562806376505          9.7972587976169
48e-5         0  String
   2 │ b         -0.495945  -128                    0.0     127            
              0  Int64
   3 │ c         -0.574404  -128.0                  -1.0    127.0          
              0  Float32
"><pre><code>3×7 DataFrame
 Row │ variable  mean       min                     median  max            
       nmissing  eltype
     │ Symbol    Union…     Any                     Union…  Any            
       Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
──────────────────────────
   1 │ a                    0.00010077562806376505          9.7972587976169
48e-5         0  String
   2 │ b         -0.495945  -128                    0.0     127            
              0  Int64
   3 │ c         -0.574404  -128.0                  -1.0    127.0          
              0  Float32
</code></pre></div>
<p><strong>Note</strong> The chunks MAY have different column types.</p>
<h2><a id="user-content-statistics--correlations" class="anchor" aria-hidden="true" href="#statistics--correlations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Statistics &amp; Correlations</h2>
<h3><a id="user-content-canonical-correlation" class="anchor" aria-hidden="true" href="#canonical-correlation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Canonical Correlation</h3>
<p>The first component of Canonical Correlation.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x = rand(100, 5)
y = rand(100, 5)

canonicalcor(x, y)
"><pre><code>x = rand(100, 5)
y = rand(100, 5)

canonicalcor(x, y)
</code></pre></div>
<h3><a id="user-content-correlation-for-bool" class="anchor" aria-hidden="true" href="#correlation-for-bool"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Correlation for <code>Bool</code></h3>
<p><code>cor(x::Bool, y)</code> -  allow you to treat <code>Bool</code> as 0/1 when computing correlation</p>
<h3><a id="user-content-correlation-for-dataframes" class="anchor" aria-hidden="true" href="#correlation-for-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Correlation for <code>DataFrames</code></h3>
<p><code>dfcor(df::AbstractDataFrame, cols1=names(df), cols2=names(df), verbose=false)</code></p>
<p>Compute correlation in a DataFrames by specifying a set of columns <code>cols1</code> vs
another set <code>cols2</code>. The cartesian product of <code>cols1</code> and <code>cols2</code>'s correlation
will be computed</p>
<h2><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Miscellaneous</h2>
<h3><a id="user-content-replicate" class="anchor" aria-hidden="true" href="#replicate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>@replicate</code></h3>
<p><code>@replicate code times</code> will run <code>code</code> multiple times e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@replicate 10 8
"><pre><span class="pl-c1">@replicate</span> <span class="pl-c1">10</span> <span class="pl-c1">8</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="10-element Vector{Int64}:
 8
 8
 8
 8
 8
 8
 8
 8
 8
 8
"><pre><code>10-element Vector{Int64}:
 8
 8
 8
 8
 8
 8
 8
 8
 8
 8
</code></pre></div>
<h3><a id="user-content-stringvector" class="anchor" aria-hidden="true" href="#stringvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StringVector</h3>
<p><code>StringVector(v::CategoricalVector{String})</code> - Convert <code>v::CategoricalVector</code> efficiently to <code>WeakRefStrings.StringVector</code></p>
<h3><a id="user-content-faster-count-missing" class="anchor" aria-hidden="true" href="#faster-count-missing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Faster count missing</h3>
<p>There is a <code>count_missisng</code> function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = Vector{Union{Missing, Int}}(undef, 10_000_000)

cmx = count_missing(x) # this is faster

cmx2 = countmissing(x) # this is faster

cimx = count(ismissing, x) # the way available at base


cmx == cimx # true
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Union{Missing, Int}}</span>(undef, <span class="pl-c1">10_000_000</span>)

cmx <span class="pl-k">=</span> <span class="pl-c1">count_missing</span>(x) <span class="pl-c"><span class="pl-c">#</span> this is faster</span>

cmx2 <span class="pl-k">=</span> <span class="pl-c1">countmissing</span>(x) <span class="pl-c"><span class="pl-c">#</span> this is faster</span>

cimx <span class="pl-k">=</span> <span class="pl-c1">count</span>(ismissing, x) <span class="pl-c"><span class="pl-c">#</span> the way available at base</span>


cmx <span class="pl-k">==</span> cimx <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="true
"><pre><code>true
</code></pre></div>
<p>There is also the <code>count_non_missisng</code> function and <code>countnonmissing</code> is its synonym.</p>
</article></div>