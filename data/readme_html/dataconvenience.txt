<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dataconvenience" class="anchor" aria-hidden="true" href="#dataconvenience"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DataConvenience</h1>
<p dir="auto">An eclectic collection of convenience functions for your data manipulation needs.</p>
<h2 dir="auto"><a id="user-content-data" class="anchor" aria-hidden="true" href="#data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data</h2>
<h3 dir="auto"><a id="user-content-sampling-with-sample" class="anchor" aria-hidden="true" href="#sampling-with-sample"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sampling with <code>sample</code></h3>
<p dir="auto">You can conveniently sample a dataframe with the <code>sample</code> method</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="df = DataFrame(a=1:10)

# sample 10 rows
sample(df, 10)"><pre class="notranslate"><code>df = DataFrame(a=1:10)

# sample 10 rows
sample(df, 10)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# sample 10% of rows
sample(df, 0.1)"><pre class="notranslate"><code># sample 10% of rows
sample(df, 0.1)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# sample 1/10 of rows
sample(df, 1//10)"><pre class="notranslate"><code># sample 1/10 of rows
sample(df, 1//10)
</code></pre></div>
<h3 dir="auto"><a id="user-content-faster-sorting-for-dataframes" class="anchor" aria-hidden="true" href="#faster-sorting-for-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faster sorting for DataFrames</h3>
<p dir="auto">You can sort <code>DataFrame</code>s (in ascending order only) faster than the <code>sort</code> function by using the <code>fsort</code> function. E.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataConvenience
using DataFrames
df = DataFrame(col = rand(1_000_000), col1 = rand(1_000_000), col2 = rand(1_000_000))

fsort(df, :col) # sort by `:col`
fsort(df, [:col1, :col2]) # sort by `:col1` and `:col2`
fsort!(df, :col) # sort by `:col` # sort in-place by `:col`
fsort!(df, [:col1, :col2]) # sort in-place by `:col1` and `:col2`"><pre><span class="pl-k">using</span> DataConvenience
<span class="pl-k">using</span> DataFrames
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(col <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>))

<span class="pl-c1">fsort</span>(df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col`</span>
<span class="pl-c1">fsort</span>(df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort by `:col1` and `:col2`</span>
<span class="pl-c1">fsort!</span>(df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col` # sort in-place by `:col`</span>
<span class="pl-c1">fsort!</span>(df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort in-place by `:col1` and `:col2`</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1000000×3 DataFrame
     Row │ col       col1        col2
         │ Float64   Float64     Float64
─────────┼─────────────────────────────────
       1 │ 0.105124  1.55446e-6  0.100017
       2 │ 0.809754  2.25957e-6  0.616879
       3 │ 0.293     2.56491e-6  0.715032
       4 │ 0.30266   3.37852e-6  0.9849
       5 │ 0.178425  3.84486e-6  0.866251
       6 │ 0.473456  5.45083e-6  0.027404
       7 │ 0.172007  7.40482e-6  0.0996898
       8 │ 0.713334  7.86618e-6  0.32976
    ⋮    │    ⋮          ⋮           ⋮
  999994 │ 0.878301  0.99999     0.304089
  999995 │ 0.573439  0.999992    0.9735
  999996 │ 0.292394  0.999994    0.306291
  999997 │ 0.917362  0.999994    0.347056
  999998 │ 0.641369  0.999994    0.925751
  999999 │ 0.393304  0.999995    0.224786
 1000000 │ 0.169994  0.999997    0.476451
                        999985 rows omitted"><pre class="notranslate"><code>1000000×3 DataFrame
     Row │ col       col1        col2
         │ Float64   Float64     Float64
─────────┼─────────────────────────────────
       1 │ 0.105124  1.55446e-6  0.100017
       2 │ 0.809754  2.25957e-6  0.616879
       3 │ 0.293     2.56491e-6  0.715032
       4 │ 0.30266   3.37852e-6  0.9849
       5 │ 0.178425  3.84486e-6  0.866251
       6 │ 0.473456  5.45083e-6  0.027404
       7 │ 0.172007  7.40482e-6  0.0996898
       8 │ 0.713334  7.86618e-6  0.32976
    ⋮    │    ⋮          ⋮           ⋮
  999994 │ 0.878301  0.99999     0.304089
  999995 │ 0.573439  0.999992    0.9735
  999996 │ 0.292394  0.999994    0.306291
  999997 │ 0.917362  0.999994    0.347056
  999998 │ 0.641369  0.999994    0.925751
  999999 │ 0.393304  0.999995    0.224786
 1000000 │ 0.169994  0.999997    0.476451
                        999985 rows omitted
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df = DataFrame(col = rand(1_000_000), col1 = rand(1_000_000), col2 = rand(1_000_000))

using BenchmarkTools
fsort_1col = @belapsed fsort($df, :col) # sort by `:col`
fsort_2col = @belapsed fsort($df, [:col1, :col2]) # sort by `:col1` and `:col2`

sort_1col = @belapsed sort($df, :col) # sort by `:col`
sort_2col = @belapsed sort($df, [:col1, :col2]) # sort by `:col1` and `:col2`

using Plots
bar([&quot;DataFrames.sort 1 col&quot;,&quot;DataFrames.sort 2 col2&quot;, &quot;DataCon.sort 1 col&quot;,&quot;DataCon.sort 2 col2&quot;],
    [sort_1col, sort_2col, fsort_1col, fsort_2col],
    title=&quot;DataFrames sort performance comparison&quot;,
    label = &quot;seconds&quot;)"><pre>df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(col <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), col2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>))

<span class="pl-k">using</span> BenchmarkTools
fsort_1col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsort</span>(<span class="pl-k">$</span>df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col`</span>
fsort_2col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsort</span>(<span class="pl-k">$</span>df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort by `:col1` and `:col2`</span>

sort_1col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>df, <span class="pl-c1">:col</span>) <span class="pl-c"><span class="pl-c">#</span> sort by `:col`</span>
sort_2col <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>df, [<span class="pl-c1">:col1</span>, <span class="pl-c1">:col2</span>]) <span class="pl-c"><span class="pl-c">#</span> sort by `:col1` and `:col2`</span>

<span class="pl-k">using</span> Plots
<span class="pl-c1">bar</span>([<span class="pl-s"><span class="pl-pds">"</span>DataFrames.sort 1 col<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DataFrames.sort 2 col2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DataCon.sort 1 col<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DataCon.sort 2 col2<span class="pl-pds">"</span></span>],
    [sort_1col, sort_2col, fsort_1col, fsort_2col],
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>DataFrames sort performance comparison<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>seconds<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/README_2_1.png"><img src="figures/README_2_1.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-clean-column-names-with-cleannames" class="anchor" aria-hidden="true" href="#clean-column-names-with-cleannames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Clean column names with <code>cleannames!</code></h3>
<p dir="auto">Somewhat similiar to R's <code>janitor::clean_names</code> so that <code>cleannames!(df)</code> cleans the names of a <code>DataFrame</code>.</p>
<h3 dir="auto"><a id="user-content-nesting-of-dataframes" class="anchor" aria-hidden="true" href="#nesting-of-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nesting of <code>DataFrame</code>s</h3>
<p dir="auto">Sometimes, nesting is more convenient then using <code>GroupedDataFrame</code>s</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DataFrames
df = DataFrame(
        a = rand(1:8, 1000),
        b = rand(1:8, 1000),
        c = rand(1:8, 1000),
    )

nested_df = nest(df, :a, :nested_df)"><pre class="notranslate"><code>using DataFrames
df = DataFrame(
        a = rand(1:8, 1000),
        b = rand(1:8, 1000),
        c = rand(1:8, 1000),
    )

nested_df = nest(df, :a, :nested_df)
</code></pre></div>
<p dir="auto">To unnest use <code>unnest(nested_df, :nested_df)</code>.</p>
<h3 dir="auto"><a id="user-content-one-hot-encoding" class="anchor" aria-hidden="true" href="#one-hot-encoding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>One hot encoding</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="a = DataFrame(
  player1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],
  player2 = [&quot;d&quot;, &quot;c&quot;, &quot;a&quot;]
)

# does not modify a
onehot(a, :player1)

# modfies a
onehot!(a, :player1)"><pre class="notranslate"><code>a = DataFrame(
  player1 = ["a", "b", "c"],
  player2 = ["d", "c", "a"]
)

# does not modify a
onehot(a, :player1)

# modfies a
onehot!(a, :player1)
</code></pre></div>
<h3 dir="auto"><a id="user-content-csv-chunk-reader" class="anchor" aria-hidden="true" href="#csv-chunk-reader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CSV Chunk Reader</h3>
<p dir="auto">You can read a CSV in chunks and apply logic to each chunk. The types of each column is inferred by <code>CSV.read</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataFrames
using CSV

df = DataFrame(a = rand(1_000_000), b = rand(Int8, 1_000_000), c = rand(Int8, 1_000_000))

filepath = tempname()*&quot;.csv&quot;
CSV.write(filepath, df)

for chunk in CsvChunkIterator(filepath)
  print(describe(chunk))
end"><pre><span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> CSV

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1_000_000</span>), b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int8, <span class="pl-c1">1_000_000</span>), c <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int8, <span class="pl-c1">1_000_000</span>))

filepath <span class="pl-k">=</span> <span class="pl-c1">tempname</span>()<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>.csv<span class="pl-pds">"</span></span>
CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(filepath, df)

<span class="pl-k">for</span> chunk <span class="pl-k">in</span> <span class="pl-c1">CsvChunkIterator</span>(filepath)
  <span class="pl-c1">print</span>(<span class="pl-c1">describe</span>(chunk))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×7 DataFrame
 Row │ variable  mean       min            median    max         nmissing  
eltype
     │ Symbol    Float64    Real           Float64   Real        Int64     
DataType
─────┼─────────────────────────────────────────────────────────────────────
─────────
   1 │ a          0.499792     7.51554e-7   0.49979    0.999999         0  
Float64
   2 │ b         -0.568238  -128           -1.0      127                0  
Int64
   3 │ c         -0.411018  -128            0.0      127                0  
Int64"><pre class="notranslate"><code>3×7 DataFrame
 Row │ variable  mean       min            median    max         nmissing  
eltype
     │ Symbol    Float64    Real           Float64   Real        Int64     
DataType
─────┼─────────────────────────────────────────────────────────────────────
─────────
   1 │ a          0.499792     7.51554e-7   0.49979    0.999999         0  
Float64
   2 │ b         -0.568238  -128           -1.0      127                0  
Int64
   3 │ c         -0.411018  -128            0.0      127                0  
Int64
</code></pre></div>
<p dir="auto">The chunk iterator uses <code>CSV.read</code> parameters. The user can pass in <code>type</code> and <code>types</code> to dictate the types of each column e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# read all column as String
for chunk in CsvChunkIterator(filepath, type=String)
    print(describe(chunk))
end"><pre><span class="pl-c"><span class="pl-c">#</span> read all column as String</span>
<span class="pl-k">for</span> chunk <span class="pl-k">in</span> <span class="pl-c1">CsvChunkIterator</span>(filepath, type<span class="pl-k">=</span>String)
    <span class="pl-c1">print</span>(<span class="pl-c1">describe</span>(chunk))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×7 DataFrame
 Row │ variable  mean     min                     median   max             
      nmissing  eltype
     │ Symbol    Nothing  String                  Nothing  String          
      Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
─────────────────────────
   1 │ a                  0.00010009729096260855           9.98587611572565
6e-5         0  String
   2 │ b                  -1                               99              
             0  String
   3 │ c                  -1                               99              
             0  String"><pre class="notranslate"><code>3×7 DataFrame
 Row │ variable  mean     min                     median   max             
      nmissing  eltype
     │ Symbol    Nothing  String                  Nothing  String          
      Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
─────────────────────────
   1 │ a                  0.00010009729096260855           9.98587611572565
6e-5         0  String
   2 │ b                  -1                               99              
             0  String
   3 │ c                  -1                               99              
             0  String
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# read a three colunms csv where the column types are String, Int, Float32
for chunk in CsvChunkIterator(filepath, types=[String, Int, Float32])
  print(describe(chunk))
end"><pre><span class="pl-c"><span class="pl-c">#</span> read a three colunms csv where the column types are String, Int, Float32</span>
<span class="pl-k">for</span> chunk <span class="pl-k">in</span> <span class="pl-c1">CsvChunkIterator</span>(filepath, types<span class="pl-k">=</span>[String, Int, Float32])
  <span class="pl-c1">print</span>(<span class="pl-c1">describe</span>(chunk))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×7 DataFrame
 Row │ variable  mean       min                     median  max            
       nmissing  eltype
     │ Symbol    Union…     Any                     Union…  Any            
       Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
──────────────────────────
   1 │ a                    0.00010009729096260855          9.9858761157256
56e-5         0  String
   2 │ b         -0.568238  -128                    -1.0    127            
              0  Int64
   3 │ c         -0.411018  -128.0                  0.0     127.0          
              0  Float32"><pre class="notranslate"><code>3×7 DataFrame
 Row │ variable  mean       min                     median  max            
       nmissing  eltype
     │ Symbol    Union…     Any                     Union…  Any            
       Int64     DataType
─────┼─────────────────────────────────────────────────────────────────────
──────────────────────────
   1 │ a                    0.00010009729096260855          9.9858761157256
56e-5         0  String
   2 │ b         -0.568238  -128                    -1.0    127            
              0  Int64
   3 │ c         -0.411018  -128.0                  0.0     127.0          
              0  Float32
</code></pre></div>
<p dir="auto"><strong>Note</strong> The chunks MAY have different column types.</p>
<h2 dir="auto"><a id="user-content-statistics--correlations" class="anchor" aria-hidden="true" href="#statistics--correlations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Statistics &amp; Correlations</h2>
<h3 dir="auto"><a id="user-content-canonical-correlation" class="anchor" aria-hidden="true" href="#canonical-correlation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Canonical Correlation</h3>
<p dir="auto">The first component of Canonical Correlation.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = rand(100, 5)
y = rand(100, 5)

canonicalcor(x, y)"><pre class="notranslate"><code>x = rand(100, 5)
y = rand(100, 5)

canonicalcor(x, y)
</code></pre></div>
<h3 dir="auto"><a id="user-content-correlation-for-bool" class="anchor" aria-hidden="true" href="#correlation-for-bool"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Correlation for <code>Bool</code></h3>
<p dir="auto"><code>cor(x::Bool, y)</code> -  allow you to treat <code>Bool</code> as 0/1 when computing correlation</p>
<h3 dir="auto"><a id="user-content-correlation-for-dataframes" class="anchor" aria-hidden="true" href="#correlation-for-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Correlation for <code>DataFrames</code></h3>
<p dir="auto"><code>dfcor(df::AbstractDataFrame, cols1=names(df), cols2=names(df), verbose=false)</code></p>
<p dir="auto">Compute correlation in a DataFrames by specifying a set of columns <code>cols1</code> vs
another set <code>cols2</code>. The cartesian product of <code>cols1</code> and <code>cols2</code>'s correlation
will be computed</p>
<h2 dir="auto"><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Miscellaneous</h2>
<h3 dir="auto"><a id="user-content-replicate" class="anchor" aria-hidden="true" href="#replicate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@replicate</code></h3>
<p dir="auto"><code>@replicate code times</code> will run <code>code</code> multiple times e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@replicate 10 8"><pre><span class="pl-c1">@replicate</span> <span class="pl-c1">10</span> <span class="pl-c1">8</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="10-element Vector{Int64}:
 8
 8
 8
 8
 8
 8
 8
 8
 8
 8"><pre class="notranslate"><code>10-element Vector{Int64}:
 8
 8
 8
 8
 8
 8
 8
 8
 8
 8
</code></pre></div>
<h3 dir="auto"><a id="user-content-stringvector" class="anchor" aria-hidden="true" href="#stringvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StringVector</h3>
<p dir="auto"><code>StringVector(v::CategoricalVector{String})</code> - Convert <code>v::CategoricalVector</code> efficiently to <code>WeakRefStrings.StringVector</code></p>
<h3 dir="auto"><a id="user-content-faster-count-missing" class="anchor" aria-hidden="true" href="#faster-count-missing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faster count missing</h3>
<p dir="auto">There is a <code>count_missisng</code> function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = Vector{Union{Missing, Int}}(undef, 10_000_000)

cmx = count_missing(x) # this is faster

cmx2 = countmissing(x) # this is faster

cimx = count(ismissing, x) # the way available at base


cmx == cimx # true"><pre>x <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Union{Missing, Int}}</span>(undef, <span class="pl-c1">10_000_000</span>)

cmx <span class="pl-k">=</span> <span class="pl-c1">count_missing</span>(x) <span class="pl-c"><span class="pl-c">#</span> this is faster</span>

cmx2 <span class="pl-k">=</span> <span class="pl-c1">countmissing</span>(x) <span class="pl-c"><span class="pl-c">#</span> this is faster</span>

cimx <span class="pl-k">=</span> <span class="pl-c1">count</span>(ismissing, x) <span class="pl-c"><span class="pl-c">#</span> the way available at base</span>


cmx <span class="pl-k">==</span> cimx <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<p dir="auto">There is also the <code>count_non_missisng</code> function and <code>countnonmissing</code> is its synonym.</p>
</article></div>