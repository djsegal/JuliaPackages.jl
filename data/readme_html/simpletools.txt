<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-simpletools" class="anchor" aria-hidden="true" href="#simpletools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SimpleTools</h1>
<p>Miscellaneous code that is possibly useful for my <code>SimpleWorld</code> modules.</p>
<h2><a id="user-content-composition-of-dictionaries" class="anchor" aria-hidden="true" href="#composition-of-dictionaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Composition of Dictionaries</h2>
<p>Dictionaries are like functions and so it makes sense
to define a composition operation for them.</p>
<p>Suppose that <code>f</code> and <code>g</code> are dictionaries such
that all the values in <code>f</code> appear as keys in <code>g</code>.
Then, if <code>k</code> is any key of <code>f</code> the expression <code>g[f[k]]</code>
is defined. In this case, we may compute <code>g*f</code> to
yield a new dictionary <code>h</code> with the same keys as <code>f</code>
and for which <code>h[k] == g[f[k]]</code> for all keys <code>k</code>.</p>
<p>Warnings are issued under the following circumstances:</p>
<ul>
<li>If some value of <code>f</code> is not a key of <code>g</code>.</li>
<li>If the type of the values in <code>f</code> doesn't match
the key type for <code>g</code>.</li>
</ul>
<h4><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h4>
<p>Here is an example without any warnings.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>), (<span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)])
Dict{ASCIIString,Int64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-c1">1</span>,<span class="pl-c1">3.14</span>), (<span class="pl-c1">2</span>,<span class="pl-c1">2.718</span>), (<span class="pl-c1">3</span>,<span class="pl-c1">1.618</span>)])
Dict{Int64,Float64} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.718</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.618</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14</span>

julia<span class="pl-k">&gt;</span> g<span class="pl-k">*</span>f
Dict{ASCIIString,Float64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14</span>
  <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.718</span></pre></div>
<p>And this is an example in which problems arise
that are not so serious that the composition fails:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>), (<span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)])
Dict{ASCIIString,Int64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-c1">1.0</span>, <span class="pl-c1">3.33</span>)])
Dict{Float64,Float64} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.33</span>

julia<span class="pl-k">&gt;</span> g<span class="pl-k">*</span>f
WARNING<span class="pl-k">:</span> Dictionary type mismatch
WARNING<span class="pl-k">:</span> <span class="pl-c1">1</span> keys were not mapped
Dict{ASCIIString,Float64} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.33</span></pre></div>
<h2><a id="user-content-continuity-restored" class="anchor" aria-hidden="true" href="#continuity-restored"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Continuity restored</h2>
<p>If one records the angle of a tangent vector as it traverses around a smooth closed
curve, the values should be continuous. However, because there is a 2π ambiguity,
one could see jumps. Here is an example.</p>
<p><a target="_blank" rel="noopener noreferrer" href="discon.png"><img src="discon.png" alt="" style="max-width:100%;"></a></p>
<p>If the angles are held in an array named <code>y</code> then the following will
correct the problem.</p>
<pre><code>julia&gt; make_continuous!(y,2pi)
</code></pre>
<p>The resulting graph looks like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="con.png"><img src="con.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-flush-printing" class="anchor" aria-hidden="true" href="#flush-printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Flush printing</h2>
<p>The <code>flush_print</code> function right (or left) justifies its argument in a
<code>String</code> of a given number of characters.</p>
<ul>
<li><code>flush_print(x,width)</code> returns a <code>String</code> version of <code>x</code> right justified
in a string of length <code>width</code>.</li>
<li>Use <code>flush_print(x,width,false)</code> for left-justified.</li>
</ul>
<pre><code>julia&gt; flush_print("hello", 10)
"     hello"

julia&gt; flush_print("hello", 10, false)
"hello     "

julia&gt; flush_print(sqrt(10),30)
"            3.1622776601683795"

julia&gt; flush_print(sqrt(10),5)
┌ Warning: Trunctated to fit width
└ @ SimpleTools ~/.julia/dev/SimpleTools/src/flush_print.jl:9
"3.162"
</code></pre>
<h2><a id="user-content-print-matrices-for-inclusion-in-sage" class="anchor" aria-hidden="true" href="#print-matrices-for-inclusion-in-sage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Print matrices for inclusion in <em>Sage</em></h2>
<p>The <code>sage</code> function takes a one or two-dimensional matrix and outputs it
in a way that can be copied and pasted into a <em>Sage</em> session.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sage</span>(v)
<span class="pl-c1">Matrix</span>([[<span class="pl-c1">1</span>],[<span class="pl-c1">2</span>],[<span class="pl-c1">3</span>],[<span class="pl-c1">4</span>],[<span class="pl-c1">5</span>]])</pre></div>
<div class="highlight highlight-source-python"><pre>sage: Matrix([[<span class="pl-c1">1</span>],[<span class="pl-c1">2</span>],[<span class="pl-c1">3</span>],[<span class="pl-c1">4</span>],[<span class="pl-c1">5</span>]])
<span class="pl-c1">...</span>.:
[<span class="pl-c1">1</span>]
[<span class="pl-c1">2</span>]
[<span class="pl-c1">3</span>]
[<span class="pl-c1">4</span>]
[<span class="pl-c1">5</span>]
sage:</pre></div>
<h2><a id="user-content-my-eye" class="anchor" aria-hidden="true" href="#my-eye"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>My <code>eye</code></h2>
<p>Y-O-Y did the Julia developers remove <code>eye</code>? Restored here with <code>eye(T,n)</code>
giving an <code>n</code>-by-<code>n</code> identity matrix with entries of type <code>T</code>. A plain
<code>eye(n)</code> gives a <code>Float64</code> identity matrix (to match <code>ones</code> and <code>zeros</code>).</p>
<h2><a id="user-content-alternative-determinants" class="anchor" aria-hidden="true" href="#alternative-determinants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternative determinants</h2>
<h4><a id="user-content-exact-determinant-of-integer-or-gaussian-integer-matrices" class="anchor" aria-hidden="true" href="#exact-determinant-of-integer-or-gaussian-integer-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exact determinant of integer (or Gaussian integer) matrices</h4>
<p><code>int_det(A)</code> returns the exact determinant of the matrix <code>A</code> where <code>A</code> is populated
either with integers or Gaussian integers. The result is either a <code>BigInt</code>
or a <code>Complex{BigInt}</code>, respectively.</p>
<pre><code>julia&gt; A = rand(Int,10,10) .% 100
10×10 Array{Int64,2}:
 -94   61   88   54  -57  -40  -31    9  -82   36
 -60   56    8  -60  -54  -49  -67  -12    9   36
  -8  -14   87  -27   58  -92  -51   88   64   23
  15   59   85  -98   42   -7  -56   83  -14  -39
 -28   61  -58   28   32  -14   55   51  -60  -22
 -72   99  -39  -84   41   -1   85  -48   75  -85
  98   63  -50   96  -35  -56   39   30   77  -14
 -90   49   54  -18   71  -24  -13   10   31   92
 -76   54   41   85   48  -14  -53   10  -24   52
  13   84   26  -71   84   63   81  -12   86   24

julia&gt; int_det(A)
123623256506197219738

julia&gt; det(A)
1.2362325650619746e20
</code></pre>
<h4><a id="user-content-rational-matrices" class="anchor" aria-hidden="true" href="#rational-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rational matrices</h4>
<p>For matrices with integer or rational (or complex integer/rational) entries,
one may use <code>rational_det</code>.</p>
<h4><a id="user-content-cofactor-expansion" class="anchor" aria-hidden="true" href="#cofactor-expansion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cofactor expansion</h4>
<p><code>cofactor_det(A)</code>  returns the determinant of the matrix <code>A</code>. The return type
matches the entry type in <code>A</code>. This is <em>much</em> slower than Julia's <code>det</code> function
or the <code>int_det</code> and <code>rational_det</code> functions in this module.</p>
<p>However, it has the advantage that it can handle matrices with, for example, polynomial
entries.</p>
<pre><code>julia&gt; using Polynomials

julia&gt; x = Poly([0,1])
Poly(x)

julia&gt; A = Matrix{Poly{Int}}(undef,2,2);

julia&gt; A[1,1] = x-2; A[1,2] = x*x; A[2,1] = x+4; A[2,2] = 3x-1;

julia&gt; A
2×2 Array{Poly{Int64},2}:
 Poly(-2 + x)  Poly(x^2)     
 Poly(4 + x)   Poly(-1 + 3*x)

julia&gt; cofactor_det(A)
Poly(2 - 7*x - x^2 - x^3)

julia&gt; (x-2)*(3x-1) - (x^2)*(x+4)
Poly(2 - 7*x - x^2 - x^3)
</code></pre>
<h2><a id="user-content-characteristic-polynomial" class="anchor" aria-hidden="true" href="#characteristic-polynomial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Characteristic polynomial</h2>
<p><code>char_poly(A)</code> returns the characteristic polynomial of the matrix <code>A</code>:</p>
<pre><code>julia&gt; A = [1 2; 3 4]
2×2 Array{Int64,2}:
 1  2
 3  4

julia&gt; char_poly(A)
Poly(-2 - 5*x + x^2)

julia&gt; roots(ans)
2-element Array{Float64,1}:
  5.372281323269014
 -0.3722813232690143

julia&gt; using LinearAlgebra

julia&gt; eigvals(A)
2-element Array{Float64,1}:
 -0.3722813232690143
  5.372281323269014
</code></pre>
<p>Note: This is a horrible way to get the eigenvalues of a matrix.</p>
<h2><a id="user-content-block-diagonal-concatenation-of-matrices" class="anchor" aria-hidden="true" href="#block-diagonal-concatenation-of-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Block diagonal concatenation of matrices</h2>
<p>For matrices <code>A</code> and <code>B</code> the function <code>dcat(A,B)</code> returns a new matrix of the
form <code>[A 0; 0 B]</code> where the two <code>0</code>s are zero blocks of the appropriate size.
The function <code>dcat</code> can be called with any positive number of arguments.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Int,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dcat</span>(A,<span class="pl-c1">2</span>A)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dcat</span>(A,<span class="pl-c1">2</span>A<span class="pl-k">'</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dcat</span>(A,<span class="pl-c1">2</span>A,<span class="pl-c1">3</span>A)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">9</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span></pre></div>
</article></div>