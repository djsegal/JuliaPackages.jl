<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simpletools" class="anchor" aria-hidden="true" href="#simpletools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleTools</h1>
<p><a href="https://travis-ci.com/scheinerman/SimpleTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5640a36c1cb78ab5c60a2be96d1edaaed3874f07c142442c7e6d5fdf6951dab0/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f53696d706c65546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/SimpleTools.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Miscellaneous code that is possibly useful for my <code>SimpleWorld</code> modules.</p>
<hr>
<h2><a id="user-content-notice" class="anchor" aria-hidden="true" href="#notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notice</h2>
<p>Several items dealing with linear algebra the were formerly in this
package are moved to my <code>LinearAlgebraX</code> package.</p>
<p>Items include:</p>
<ul>
<li><code>eye</code></li>
<li>Determinant functions</li>
<li>Characteristic polynomial <code>char_poly</code></li>
</ul>
<hr>
<h2><a id="user-content-complex-mod" class="anchor" aria-hidden="true" href="#complex-mod"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Complex <code>mod</code></h2>
<p>We have extended <code>mod</code> to that the first argument can be a Gaussian integer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; mod(28-8im, 5)
3 + 2im
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">mod</span>(<span class="pl-c1">28</span><span class="pl-k">-</span><span class="pl-c1">8im</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span></pre></div>
<h2><a id="user-content-composition-of-dictionaries" class="anchor" aria-hidden="true" href="#composition-of-dictionaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Composition of Dictionaries</h2>
<p>Dictionaries are like functions and so it makes sense
to define a composition operation for them.</p>
<p>Suppose that <code>f</code> and <code>g</code> are dictionaries such
that all the values in <code>f</code> appear as keys in <code>g</code>.
Then, if <code>k</code> is any key of <code>f</code> the expression <code>g[f[k]]</code>
is defined. In this case, we may compute <code>g*f</code> to
yield a new dictionary <code>h</code> with the same keys as <code>f</code>
and for which <code>h[k] == g[f[k]]</code> for all keys <code>k</code>.</p>
<p>Warnings are issued under the following circumstances:</p>
<ul>
<li>If some value of <code>f</code> is not a key of <code>g</code>.</li>
<li>If the type of the values in <code>f</code> doesn't match
the key type for <code>g</code>.</li>
</ul>
<h4><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h4>
<p>Here is an example without any warnings.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = Dict([(&quot;alpha&quot;, 1), (&quot;bravo&quot;, 2)])
Dict{ASCIIString,Int64} with 2 entries:
  &quot;alpha&quot; =&gt; 1
  &quot;bravo&quot; =&gt; 2

julia&gt; g = Dict([(1,3.14), (2,2.718), (3,1.618)])
Dict{Int64,Float64} with 3 entries:
  2 =&gt; 2.718
  3 =&gt; 1.618
  1 =&gt; 3.14

julia&gt; g*f
Dict{ASCIIString,Float64} with 2 entries:
  &quot;alpha&quot; =&gt; 3.14
  &quot;bravo&quot; =&gt; 2.718
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>), (<span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)])
Dict{ASCIIString,Int64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-c1">1</span>,<span class="pl-c1">3.14</span>), (<span class="pl-c1">2</span>,<span class="pl-c1">2.718</span>), (<span class="pl-c1">3</span>,<span class="pl-c1">1.618</span>)])
Dict{Int64,Float64} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.718</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.618</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14</span>

julia<span class="pl-k">&gt;</span> g<span class="pl-k">*</span>f
Dict{ASCIIString,Float64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14</span>
  <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.718</span></pre></div>
<p>And this is an example in which problems arise
that are not so serious that the composition fails:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = Dict([(&quot;alpha&quot;, 1), (&quot;bravo&quot;, 2)])
Dict{ASCIIString,Int64} with 2 entries:
  &quot;alpha&quot; =&gt; 1
  &quot;bravo&quot; =&gt; 2

julia&gt; g = Dict([(1.0, 3.33)])
Dict{Float64,Float64} with 1 entry:
  1.0 =&gt; 3.33

julia&gt; g*f
WARNING: Dictionary type mismatch
WARNING: 1 keys were not mapped
Dict{ASCIIString,Float64} with 1 entry:
  &quot;alpha&quot; =&gt; 3.33
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>), (<span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)])
Dict{ASCIIString,Int64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([(<span class="pl-c1">1.0</span>, <span class="pl-c1">3.33</span>)])
Dict{Float64,Float64} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.33</span>

julia<span class="pl-k">&gt;</span> g<span class="pl-k">*</span>f
WARNING<span class="pl-k">:</span> Dictionary type mismatch
WARNING<span class="pl-k">:</span> <span class="pl-c1">1</span> keys were not mapped
Dict{ASCIIString,Float64} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.33</span></pre></div>
<h2><a id="user-content-continuity-restored" class="anchor" aria-hidden="true" href="#continuity-restored"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Continuity restored</h2>
<p>If one records the angle of a tangent vector as it traverses around a smooth closed
curve, the values should be continuous. However, because there is a 2π ambiguity,
one could see jumps. Here is an example.</p>
<p><a target="_blank" rel="noopener noreferrer" href="discon.png"><img src="discon.png" alt="" style="max-width:100%;"></a></p>
<p>If the angles are held in an array named <code>y</code> then the following will
correct the problem.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; make_continuous!(y,2pi)
"><pre><code>julia&gt; make_continuous!(y,2pi)
</code></pre></div>
<p>The resulting graph looks like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="con.png"><img src="con.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-flush-printing" class="anchor" aria-hidden="true" href="#flush-printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Flush printing</h2>
<p>The <code>flush_print</code> function right (or left) justifies its argument in a
<code>String</code> of a given number of characters.</p>
<ul>
<li><code>flush_print(x,width)</code> returns a <code>String</code> version of <code>x</code> right justified
in a string of length <code>width</code>.</li>
<li>Use <code>flush_print(x,width,false)</code> for left-justified.</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; flush_print(&quot;hello&quot;, 10)
&quot;     hello&quot;

julia&gt; flush_print(&quot;hello&quot;, 10, false)
&quot;hello     &quot;

julia&gt; flush_print(sqrt(10),30)
&quot;            3.1622776601683795&quot;

julia&gt; flush_print(sqrt(10),5)
┌ Warning: Trunctated to fit width
└ @ SimpleTools ~/.julia/dev/SimpleTools/src/flush_print.jl:9
&quot;3.162&quot;
"><pre><code>julia&gt; flush_print("hello", 10)
"     hello"

julia&gt; flush_print("hello", 10, false)
"hello     "

julia&gt; flush_print(sqrt(10),30)
"            3.1622776601683795"

julia&gt; flush_print(sqrt(10),5)
┌ Warning: Trunctated to fit width
└ @ SimpleTools ~/.julia/dev/SimpleTools/src/flush_print.jl:9
"3.162"
</code></pre></div>
<h2><a id="user-content-print-matrices-for-inclusion-in-sage" class="anchor" aria-hidden="true" href="#print-matrices-for-inclusion-in-sage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Print matrices for inclusion in <em>Sage</em></h2>
<p>The <code>sage</code> function takes a one or two-dimensional matrix and outputs it
in a way that can be copied and pasted into a <em>Sage</em> session.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; v = collect(1:5)
5-element Array{Int64,1}:
 1
 2
 3
 4
 5

julia&gt; sage(v)
Matrix([[1],[2],[3],[4],[5]])
"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sage</span>(v)
<span class="pl-c1">Matrix</span>([[<span class="pl-c1">1</span>],[<span class="pl-c1">2</span>],[<span class="pl-c1">3</span>],[<span class="pl-c1">4</span>],[<span class="pl-c1">5</span>]])</pre></div>
<div class="highlight highlight-source-python position-relative" data-snippet-clipboard-copy-content="sage: Matrix([[1],[2],[3],[4],[5]])
....:
[1]
[2]
[3]
[4]
[5]
sage:
"><pre><span class="pl-s1">sage</span>: <span class="pl-v">Matrix</span>([[<span class="pl-c1">1</span>],[<span class="pl-c1">2</span>],[<span class="pl-c1">3</span>],[<span class="pl-c1">4</span>],[<span class="pl-c1">5</span>]])
....<span class="pl-s1"></span>:
[<span class="pl-c1">1</span>]
[<span class="pl-c1">2</span>]
[<span class="pl-c1">3</span>]
[<span class="pl-c1">4</span>]
[<span class="pl-c1">5</span>]
<span class="pl-s1">sage</span>:</pre></div>
<h2><a id="user-content-block-diagonal-concatenation-of-matrices" class="anchor" aria-hidden="true" href="#block-diagonal-concatenation-of-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Block diagonal concatenation of matrices</h2>
<p>For matrices <code>A</code> and <code>B</code> the function <code>dcat(A,B)</code> returns a new matrix of the
form <code>[A 0; 0 B]</code> where the two <code>0</code>s are zero blocks of the appropriate size.
The function <code>dcat</code> can be called with any positive number of arguments.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = ones(Int,2,3)
2×3 Array{Int64,2}:
 1  1  1
 1  1  1

julia&gt; dcat(A,2A)
4×6 Array{Int64,2}:
 1  1  1  0  0  0
 1  1  1  0  0  0
 0  0  0  2  2  2
 0  0  0  2  2  2

julia&gt; dcat(A,2A')
5×5 Array{Int64,2}:
 1  1  1  0  0
 1  1  1  0  0
 0  0  0  2  2
 0  0  0  2  2
 0  0  0  2  2

julia&gt; dcat(A,2A,3A)
6×9 Array{Int64,2}:
 1  1  1  0  0  0  0  0  0
 1  1  1  0  0  0  0  0  0
 0  0  0  2  2  2  0  0  0
 0  0  0  2  2  2  0  0  0
 0  0  0  0  0  0  3  3  3
 0  0  0  0  0  0  3  3  3
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Int,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dcat</span>(A,<span class="pl-c1">2</span>A)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dcat</span>(A,<span class="pl-c1">2</span>A<span class="pl-k">'</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dcat</span>(A,<span class="pl-c1">2</span>A,<span class="pl-c1">3</span>A)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">9</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span></pre></div>
</article></div>