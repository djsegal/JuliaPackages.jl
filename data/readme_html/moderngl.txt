<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-moderngl" class="anchor" aria-hidden="true" href="#moderngl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ModernGL</h1>
<p><a href="https://github.com/JuliaGL/ModernGL.jl/actions"><img src="https://github.com/JuliaGL/ModernGL.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a></p>
<p>OpenGL bindings for OpenGL 3.0 and upwards. As OpenGL 3.0 has a lot of overlaps with OpenGL 2.1, OpenGL 2.1 is partly supported as well.</p>
<p>The philosophy is to keep this library strictly a low-level wrapper, so you won't find any error handling (besides for the function loading itself) or abstractions in this package.</p>
<h3><a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Debugging</h3>
<p>You can rebuild ModernGL to include debug error checks:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;MODERNGL_DEBUGGING&quot;] = &quot;true&quot;; Pkg.build(&quot;ModernGL&quot;)
# or to get back the default behaviour:
ENV[&quot;MODERNGL_DEBUGGING&quot;] = &quot;false&quot;; Pkg.build(&quot;ModernGL&quot;)
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>MODERNGL_DEBUGGING<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>ModernGL<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or to get back the default behaviour:</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>MODERNGL_DEBUGGING<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>ModernGL<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-installation-notes" class="anchor" aria-hidden="true" href="#installation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation notes</h3>
<p>There are no dependencies, besides the graphic driver. If you have any problems, you should consider updating the driver first.</p>
<p>An OpenGL context is needed for OpenGL, which is created with <a href="https://github.com/JuliaGL/GLFW.jl">GLFW.jl</a>.</p>
<p>Other OpenGL abstraction packages, which make it easier to get started with OpenGL, include:</p>
<ul>
<li><a href="https://github.com/JuliaGL/GLAbstraction.jl">GLAbstraction</a> is a library, that offers Julian wrappers around often used OpenGL functions and types.</li>
</ul>
<h3><a id="user-content-known-problems" class="anchor" aria-hidden="true" href="#known-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known problems</h3>
<p>There might be a few problems with older platforms and video cards, since it's not heavily tested on them.</p>
<p>OpenGL constants are wrapped as enums, which allows you to print the name of a constant like this:
GLENUM(x::GLenum).name
This works pretty well, but some constants actually have the same value. As they're stored in one big dictionary, this leads to some enums being overwritten, resulting in a wrong name being printed.
Most annoying example: <code>GLENUM(1).name</code> prints out: <code>GL_SYNC_FLUSH_COMMANDS_BIT</code>, but should be  <code>GL_TRUE</code></p>
<h3><a id="user-content-some-more-details" class="anchor" aria-hidden="true" href="#some-more-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some more details</h3>
<p>getProcAddress can be changed like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ModernGL

function ModernGL.getprocaddress(name::ASCIIString)
	# for example change it to GLUT
	glutGetProcAddress(name)
end
"><pre><span class="pl-k">using</span> ModernGL

<span class="pl-k">function</span> ModernGL<span class="pl-k">.</span><span class="pl-en">getprocaddress</span>(name<span class="pl-k">::</span><span class="pl-c1">ASCIIString</span>)
	<span class="pl-c"><span class="pl-c">#</span> for example change it to GLUT</span>
	<span class="pl-c1">glutGetProcAddress</span>(name)
<span class="pl-k">end</span></pre></div>
<p>If the OpenGL driver doesn't support any of the functions that you call, ModernGL should detect this and throw an error.
Same happens, if you call a function before initializing an OpenGL context.
This behaviour is not guaranteed though, as for example linux platforms always returns valid pointers, even if the function is not implemented by the driver.
It seems, that there is actually no good way of testing if a function is supported on linux.</p>
<h1><a id="user-content-credit" class="anchor" aria-hidden="true" href="#credit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credit</h1>
<p>Credits go certainly to the OpenGL.jl (<a href="https://github.com/rennis250">rennis250</a> &amp;&amp; <a href="https://github.com/o-jasper">o-jasper</a>) package, where I have all the OpenGL definitions from.
Special thanks to rennis250 for all the support! :)</p>
<p>Also, I have to thank for the constructive discussion on Julia-Users, where I got a good solution for the function pointer loading (final solution was from <a href="https://github.com/vtjnash">vtjnash</a> and got replaced by <a href="https://github.com/aaalexandrov/">aaalexandrov's</a> solution which doubled the speed).</p>
</article></div>