<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structio" class="anchor" aria-hidden="true" href="#structio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructIO</h1>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/StructIO/aDnIf" rel="nofollow"><img src="https://camo.githubusercontent.com/371659ea51eaa75afb7e83b46769ef422b7231fa6cb9973db72e11d26d31dd7f/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f537472756374494f2f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/StructIO/pkgeval.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaIO/StructIO.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaIO/StructIO.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaIO/StructIO.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/082058bf57a6376c561e389efad1001e7180ffea8db8d3747cfc7fe4bf2d7d10/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f537472756374494f2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="http://codecov.io/github/JuliaIO/StructIO.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Generates IO methods (<code>pack</code>, <code>unpack</code>) from structure definitions.  Also defines <code>packed_sizeof</code> to give the on-disk size of a packed structure, which is smaller than <code>sizeof</code> would give, if the struct is marked as <code>align_packed</code>.</p>
<h1 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StructIO

julia&gt; @io struct TwoUInt64s
           x::UInt64
           y::UInt64
       end

julia&gt; buf = IOBuffer(collect(UInt8(1):UInt8(16))); 

julia&gt; seekstart(buf); unpack(buf, TwoUInt64s) # Default endianness depends on machine
TwoUInt64s(0x0807060504030201, 0x100f0e0d0c0b0a09)

julia&gt; seekstart(buf); unpack(buf, TwoUInt64s, :BigEndian)
TwoUInt64s(0x0102030405060708, 0x090a0b0c0d0e0f10)

julia&gt; @io struct DefaultExample
           a::UInt8   # Default packing includes a padding byte between fields
           b::UInt16
       end

julia&gt; seekstart(buf); unpack(buf, DefaultExample) # Notice byte 0x02 is not used as part of `b`
DefaultExample(0x01, 0x0403)

julia&gt; @io struct PackedExample
           a::UInt8
           b::UInt16
       end align_packed

julia&gt; seekstart(buf); unpack(buf, PackedExample) # Now byte 0x02 is used
PackedExample(0x01, 0x0302)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructIO

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@io</span> <span class="pl-k">struct</span> TwoUInt64s
           x<span class="pl-k">::</span><span class="pl-c1">UInt64</span>
           y<span class="pl-k">::</span><span class="pl-c1">UInt64</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> buf <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">UInt8</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">UInt8</span>(<span class="pl-c1">16</span>))); 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seekstart</span>(buf); <span class="pl-c1">unpack</span>(buf, TwoUInt64s) <span class="pl-c"><span class="pl-c">#</span> Default endianness depends on machine</span>
<span class="pl-c1">TwoUInt64s</span>(<span class="pl-c1">0x0807060504030201</span>, <span class="pl-c1">0x100f0e0d0c0b0a09</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seekstart</span>(buf); <span class="pl-c1">unpack</span>(buf, TwoUInt64s, <span class="pl-c1">:BigEndian</span>)
<span class="pl-c1">TwoUInt64s</span>(<span class="pl-c1">0x0102030405060708</span>, <span class="pl-c1">0x090a0b0c0d0e0f10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@io</span> <span class="pl-k">struct</span> DefaultExample
           a<span class="pl-k">::</span><span class="pl-c1">UInt8</span>   <span class="pl-c"><span class="pl-c">#</span> Default packing includes a padding byte between fields</span>
           b<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seekstart</span>(buf); <span class="pl-c1">unpack</span>(buf, DefaultExample) <span class="pl-c"><span class="pl-c">#</span> Notice byte 0x02 is not used as part of `b`</span>
<span class="pl-c1">DefaultExample</span>(<span class="pl-c1">0x01</span>, <span class="pl-c1">0x0403</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@io</span> <span class="pl-k">struct</span> PackedExample
           a<span class="pl-k">::</span><span class="pl-c1">UInt8</span>
           b<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
       <span class="pl-k">end</span> align_packed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seekstart</span>(buf); <span class="pl-c1">unpack</span>(buf, PackedExample) <span class="pl-c"><span class="pl-c">#</span> Now byte 0x02 is used</span>
<span class="pl-c1">PackedExample</span>(<span class="pl-c1">0x01</span>, <span class="pl-c1">0x0302</span>)</pre></div>
</article></div>