<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-microchiprtdmjl" class="anchor" aria-hidden="true" href="#microchiprtdmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MicrochipRTDM.jl</h1>
<p><a href="https://travis-ci.org/cstook/MicrochipRTDM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/770b2f55458fec9e4f8a10f43dcfdd9ef2826b9b/68747470733a2f2f7472617669732d63692e6f72672f6373746f6f6b2f4d6963726f636869705254444d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cstook/MicrochipRTDM.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>MichrochipRTDM.jl is a bunch of functions usefull for working with <a href="http://www.microchip.com" rel="nofollow">Microchip's</a><sup>TM</sup> <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/70567A.pdf" rel="nofollow">RTDM</a> interface in julia.</p>
<p>##Installation</p>
<p>MicrochipRTDM.jl is currently unregistered.  It can be installed using <code>Pkg.clone</code>.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/cstook/MicrochipRTDM.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p>The <a href="http://docs.julialang.org" rel="nofollow">julia documentation</a> section on installing unregistered <a href="http://docs.julialang.org/en/release-0.4/manual/packages/#packages" rel="nofollow">packages</a> provides more information.</p>
<p>##Usage</p>
<p>Load the module.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MicrochipRTDM</pre></div>
<p>Create a dictionary of symbols from the .map file.</p>
<div class="highlight highlight-source-julia"><pre>projectdirectory <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>your_project_directory.x<span class="pl-pds">"</span></span>
mapdict <span class="pl-k">=</span> <span class="pl-c1">microchip_parsemap</span>(projectdirectory,<span class="pl-s"><span class="pl-pds">"</span>production<span class="pl-pds">"</span></span>)</pre></div>
<p>The second parameter is either "production" or "debug".  It will default to "production" if unspecified.  You can pass the .map file instead of the project directory.  In this case the second parameter is ignored.</p>
<p>The following assumes a serial port is opened as io.  One way to do this is to use <a href="https://github.com/cstook/FTD2XX.jl">FTD2XX.jl</a>.</p>
<p>Create an <code>RTDMInterface</code> object.</p>
<div class="highlight highlight-source-julia"><pre>rtdminterface <span class="pl-k">=</span> <span class="pl-c1">RTDMInterface</span>(mapdict,io)</pre></div>
<p>The RTDM link can be verifyed.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">isrtdmok</span>(rtdminterface)</pre></div>
<p>The memory of the microcontroller can be read and written with <code>rtdm_read</code>, <code>rtdm_read!</code>, and <code>rtdm_write</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> read a single unsigned 16 bit integer</span>
readvalue <span class="pl-k">=</span> <span class="pl-c1">rtdm_read</span>(rtdminterface, UInt16, <span class="pl-c1">:your_symbol_name</span>,retry <span class="pl-k">=</span> <span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> read 128 unsigned 16 bit integers</span>
bufffer <span class="pl-k">=</span> <span class="pl-c1">Array</span>(UInt16,<span class="pl-c1">128</span>)
<span class="pl-c1">rtdm_read!</span>(rtdminterface, buffer, <span class="pl-c1">:your_symbol_name</span>)

<span class="pl-c1">rtdm_write</span>(rtdminterface, <span class="pl-c1">0x1234</span>, <span class="pl-c1">:your_symbol_name</span>) <span class="pl-c"><span class="pl-c">#</span> write 16 bit value</span>
<span class="pl-c1">rtdm_write</span>(rtdminterface, <span class="pl-c1">0x12</span>,   <span class="pl-c1">:your_symbol_name</span>) <span class="pl-c"><span class="pl-c">#</span> write 8 bit value)</span>
<span class="pl-c1">rtdm_write</span>(rtdminterface, buffer, <span class="pl-c1">:your_symbol_name</span>) <span class="pl-c"><span class="pl-c">#</span> write array</span>
<span class="pl-c"><span class="pl-c">#</span> need to increase default buffer size in microcontroller to write large arrays</span>

<span class="pl-c"><span class="pl-c">#</span> or just specify address as Integer</span>
<span class="pl-c1">rtdm_write</span>(rtdminterface, <span class="pl-c1">0x1234</span>, <span class="pl-c1">0x00000100</span>)</pre></div>
<p>Close the interface.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">close</span>(rtdminterface)</pre></div>
</article></div>