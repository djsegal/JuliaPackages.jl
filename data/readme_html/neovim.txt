<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-neovim-client-for-julia" class="anchor" aria-hidden="true" href="#neovim-client-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Neovim client for Julia</h1>
<p dir="auto"><a href="https://travis-ci.org/bfredl/Neovim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5c2a4b086a1aab1a9f517fc7b4c78b89764d3cb7b5fc9fdf84fc60efef9da270/68747470733a2f2f7472617669732d63692e6f72672f62667265646c2f4e656f76696d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bfredl/Neovim.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Neovim.jl is a Neovim API client and plugin host for Julia. It supports:</p>
<ul dir="auto">
<li>Embedding a nvim process in Julia</li>
<li>Acting as a child process to nvim</li>
<li>Connecting to external instances over a socket</li>
</ul>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<ul dir="auto">
<li>Julia ≥ 1.0</li>
<li>Neovim ≥ 0.4 (this package assumes <code>nvim</code> is in <code>$PATH</code>)</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Add this package to your current Julia environment:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/bfredl/Neovim.jl&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/bfredl/Neovim.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-as-an-embedded-process" class="anchor" aria-hidden="true" href="#as-an-embedded-process"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>As an embedded process</h3>
<p dir="auto">The simplest way to test the API client is to spawn an embedded instance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Neovim
nvim, proc = nvim_spawn()"><pre><span class="pl-k">using</span> Neovim
nvim, proc <span class="pl-k">=</span> <span class="pl-c1">nvim_spawn</span>()</pre></div>
<p dir="auto">or connecting to an external instance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nvim = nvim_connect(&quot;/socket/address&quot;)"><pre>nvim <span class="pl-k">=</span> <span class="pl-c1">nvim_connect</span>(<span class="pl-s"><span class="pl-pds">"</span>/socket/address<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">(this address can be found by <code>:echo $NVIM_LISTEN_ADDRESS</code> in nvim)</p>
<p dir="auto">As a shortcut, <code>nvim = nvim_env()</code> will use the address in <code>$NVIM_LISTEN_ADDRESS</code>. This is useful to connect to the "parent" nvim instance when running the Julia REPL in a nvim terminal window.</p>
<p dir="auto">All API methods defined in the Neovim metadata (see <code>:h api-metadata</code>) are defined as corresponding Julia functions on the <code>Neovim</code> module (these functions are not exported, use <code>import</code> syntax), except that the <code>vim_</code>/<code>buffer_</code> prefix is dropped (as the receiver type is identified by the first argument anyway), except for <code>vim_eval</code> as <code>eval</code> is not overloadable. For instance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Neovim: get_buffers, set_line, vim_eval
buf = get_buffers(nvim)[1]
set_line(buf, 1, &quot;some text&quot;)
@assert vim_eval(nvim, &quot;2+2&quot;) == 4"><pre><span class="pl-k">import</span> Neovim<span class="pl-k">:</span> get_buffers, set_line, vim_eval
buf <span class="pl-k">=</span> <span class="pl-c1">get_buffers</span>(nvim)[<span class="pl-c1">1</span>]
<span class="pl-c1">set_line</span>(buf, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>some text<span class="pl-pds">"</span></span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">vim_eval</span>(nvim, <span class="pl-s"><span class="pl-pds">"</span>2+2<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">4</span></pre></div>
<p dir="auto">A high level interface is work in progress. For the moment <code>Buffer</code> supports simple array operations, please see <code>test/runtests.jl</code> for examples.</p>
<p dir="auto">The module exports a low-level interface for handling asynchronous events (notifications and requests). A prototype (read: ugly hack) implementation of Vim bindings for the Julia REPL is included as an example, see <code>src/repl.jl</code>.</p>
<h3 dir="auto"><a id="user-content-as-a-plugin-host" class="anchor" aria-hidden="true" href="#as-a-plugin-host"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>As a plugin host</h3>
<p dir="auto">This package also includes a remote plugin host, similar to the one in the Python client <a href="https://github.com/neovim/pynvim">pynvim</a>. To use it, add this repo root to <code>runtimepath</code> in <code>init.vim</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="set rtp+=~/.julia/packages/Neovim/"><pre class="notranslate"><code>set rtp+=~/.julia/packages/Neovim/
</code></pre></div>
<p dir="auto">A Julia plugin can then be defined in a <code>rplugin/julia/</code> subdirectory inside a directory in your <code>runtimepath</code> (See <code>:h remote-plugin</code> and <code>:h runtimepath</code>) or inside a plugin directory (see <code>:h packages</code> or your package manager's docs).</p>
<p dir="auto">Functions defined at the top-level of your script can be exported using the macros: <code>@fn</code>, <code>@command</code>, <code>@autocmd</code>, as well as variants ending with <code>sync</code>.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# In MyPlugin/rplugin/julia/MyPlugin.jl

module MyPlugin
using Neovim

@Neovim.fn function AsyncFun(nvim, args)
    # &quot;args&quot; is Vector of arguments passed to &quot;:call AsyncFun(args...)&quot;.
end

@Neovim.fnsync function SyncFun(nvim, args)
    # This will block neovim while SyncFun is running.
end

@Neovim.fnsync OneLiner(nvim, args) = &quot;expression&quot;

# Add some options. -&gt; is required to define function on next line.
@Neovim.commandsync (nargs=&quot;*&quot;, range=&quot;&quot;) -&gt;
function JLCommand(nvim, args, range)
end

# The name of the function/command can also be defined on the macro.
# This is equivalent to the above.
@Neovim.commandsync JLCommand(nargs=&quot;*&quot;, range=&quot;&quot;) -&gt;
function (nvim, args, range)
end

end"><pre><span class="pl-c"><span class="pl-c">#</span> In MyPlugin/rplugin/julia/MyPlugin.jl</span>

<span class="pl-k">module</span> MyPlugin
<span class="pl-k">using</span> Neovim

<span class="pl-c1">@Neovim</span><span class="pl-k">.</span>fn <span class="pl-k">function</span> <span class="pl-en">AsyncFun</span>(nvim, args)
    <span class="pl-c"><span class="pl-c">#</span> "args" is Vector of arguments passed to ":call AsyncFun(args...)".</span>
<span class="pl-k">end</span>

<span class="pl-c1">@Neovim</span><span class="pl-k">.</span>fnsync <span class="pl-k">function</span> <span class="pl-en">SyncFun</span>(nvim, args)
    <span class="pl-c"><span class="pl-c">#</span> This will block neovim while SyncFun is running.</span>
<span class="pl-k">end</span>

<span class="pl-c1">@Neovim</span><span class="pl-k">.</span>fnsync <span class="pl-en">OneLiner</span>(nvim, args) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>expression<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Add some options. -&gt; is required to define function on next line.</span>
<span class="pl-c1">@Neovim</span><span class="pl-k">.</span>commandsync (nargs<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span>, range<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>) <span class="pl-k">-&gt;</span>
<span class="pl-k">function</span> <span class="pl-en">JLCommand</span>(nvim, args, range)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The name of the function/command can also be defined on the macro.</span>
<span class="pl-c"><span class="pl-c">#</span> This is equivalent to the above.</span>
<span class="pl-c1">@Neovim</span><span class="pl-k">.</span>commandsync <span class="pl-c1">JLCommand</span>(nargs<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span>, range<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>) <span class="pl-k">-&gt;</span>
<span class="pl-k">function</span> (nvim, args, range)
<span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">After writing your Julia script, you should call <code>:UpdateRemotePlugins</code> to
register these functions and make them callable from Vimscript and Lua.</p>
</article></div>