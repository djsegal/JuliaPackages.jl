<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-yaoextensions" class="anchor" aria-hidden="true" href="#yaoextensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>YaoExtensions</h1>
<p dir="auto"><a href="https://QuantumBFS.github.io/YaoExtensions.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://QuantumBFS.github.io/YaoExtensions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/QuantumBFS/YaoExtensions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/036b6ea8c2f22b70afb86254bf0cb5e7d2fcee6cfb835e105eebc3d07b52cfa0/68747470733a2f2f7472617669732d63692e636f6d2f5175616e74756d4246532f59616f457874656e73696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/QuantumBFS/YaoExtensions.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/QuantumBFS/YaoExtensions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6af4f08b96f9520073fdc402c9f82425426d659a281e91156e25cede3aa71a64/68747470733a2f2f636f6465636f762e696f2f67682f5175616e74756d4246532f59616f457874656e73696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/QuantumBFS/YaoExtensions.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Extensions for <a href="https://github.com/QuantumBFS/Yao.jl">Yao</a>. ï¼ˆAbandoned, circuits and hamiltonians are moved to Yao.EasyBuild)</p>
<h2 dir="auto"><a id="user-content-list-of-features" class="anchor" aria-hidden="true" href="#list-of-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>List of features</h2>
<h4 dir="auto"><a id="user-content-easy-constructions" class="anchor" aria-hidden="true" href="#easy-constructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Easy constructions</h4>
<ul dir="auto">
<li>
<p dir="auto">circuits</p>
<ul dir="auto">
<li>variational_circuit(n): construct a random parametrized circuit.</li>
<li>rand_supremacy2d(nx, ny, depth): construct a quantum supremacy circuit.</li>
<li>qft_circuit(n): construct a quantum fourier transformation circuit.</li>
<li>rand_google53(): construct a Google's 53 qubit supremacy circuit.</li>
</ul>
</li>
<li>
<p dir="auto">circuit building blocks</p>
<ul dir="auto">
<li>general_U4(): an optimal decomposition of a U(4) gate.</li>
<li>cphase(nbit, i, j), cz(nbit, i, j)</li>
</ul>
</li>
<li>
<p dir="auto">hamiltonians</p>
<ul dir="auto">
<li>heisenberg(n): construct a heisenberg hamiltonian.</li>
<li>transverse_ising(n): construct a transverse field Ising hamiltonian.</li>
</ul>
</li>
</ul>
<h4 dir="auto"><a id="user-content-block-extensions" class="anchor" aria-hidden="true" href="#block-extensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Block extensions</h4>
<ul dir="auto">
<li>
<p dir="auto">primitive blocks</p>
<ul dir="auto">
<li>SqrtX, SqrtY, FSim, ISWAP, SqrtW</li>
<li>Mod: modulo operation block.</li>
<li>QFT: faster implementation of QFT subroutine, instead of running QFT circuit faithfully, simulate it with classical <code>fft</code> (thus much faster).</li>
<li>RotBasis: basis rotor, make measurements on different basis easier.</li>
<li>MathGate: classical mathematic functions.</li>
<li>ReflectGate: used in grover search,</li>
</ul>
</li>
<li>
<p dir="auto">composite blocks</p>
<ul dir="auto">
<li>Bag: a trivial container block that gives the flexibility to change the sub-block, as well as masking. Mainly used for structure learning.</li>
<li>ConditionBlock: conditional control the excusion of two block.</li>
<li>Sequence: similar to chain block, but more general, one can put anything inside.</li>
<li>PauliString: a paulistring.</li>
</ul>
</li>
</ul>
<h4 dir="auto"><a id="user-content-utlities" class="anchor" aria-hidden="true" href="#utlities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utlities</h4>
<ul dir="auto">
<li>gatecount, count the number of gates,</li>
<li>faithful simulation of gradients, including observable loss and MMD loss</li>
</ul>
</article></div>