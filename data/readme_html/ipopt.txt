<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-ipoptjl" class="anchor" aria-hidden="true" href="#ipoptjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ipopt.jl</h1>
<p><a href="https://travis-ci.org/JuliaOpt/Ipopt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5804ec7e99fe28b3103fbf99f27140862c624dc9/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f49706f70742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/Ipopt.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaOpt/Ipopt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5434a6d94c786e0262861dd274e91f52c7f713e/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4a756c69614f70742f49706f70742e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/JuliaOpt/Ipopt.jl.svg" style="max-width:100%;"></a></p>
<p><strong>Ipopt.jl</strong> is a <a href="http://julialang.org/" rel="nofollow">Julia</a> interface to the <a href="http://www.coin-or.org/Ipopt/documentation/documentation.html" rel="nofollow">Ipopt</a> nonlinear solver.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is registered in <code>METADATA.jl</code> and so can be installed with <code>Pkg.add</code>.</p>
<pre><code>julia&gt; import Pkg; Pkg.add("Ipopt")
</code></pre>
<p>Ipopt.jl will use <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a> to automatically install the Ipopt binaries. This should work for both the official Julia binaries from <code>https://julialang.org/downloads/</code> and source-builds.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Installation</h2>
<p>To install custom built Ipopt binaries set the environmental variables <code>JULIA_IPOPT_LIBRARY_PATH</code> and <code>JULIA_IPOPT_EXECUTABLE_PATH</code>, and call <code>import Pkg; Pkg.build("Ipopt")</code>. For instance, if the libraries are installed in <code>/opt/lib</code> and the executable is in <code>/opt/bin</code> just call</p>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/lib<span class="pl-pds">"</span></span>
ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_EXECUTABLE_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/bin<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt<span class="pl-pds">"</span></span>)</pre></div>
<p>If you do not want BinaryProvider to download the default binaries on install set  <code>JULIA_IPOPT_LIBRARY_PATH</code> and <code>JULIA_IPOPT_EXECUTABLE_PATH</code>  before calling <code>import Pkg; Pkg.add("Ipopt")</code>.</p>
<p>To switch back to the default binaries clear <code>JULIA_IPOPT_LIBRARY_PATH</code> and <code>JULIA_IPOPT_EXECUTABLE_PATH</code>, and call <code>import Pkg; Pkg.build("Ipopt")</code>.</p>
<h2><a id="user-content-jump-and-mathoptinterface" class="anchor" aria-hidden="true" href="#jump-and-mathoptinterface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JuMP and MathOptInterface</h2>
<p>Ipopt implements the solver-independent <a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a> interface,
and so can be used within modeling software like <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a>.
The solver object is called <code>Ipopt.Optimizer</code>. All options listed in the <a href="https://coin-or.github.io/Ipopt/OPTIONS.html#OPTIONS_REF" rel="nofollow">Ipopt documentation</a> may be passed directly. For example, you can suppress output by saying <code>Ipopt.Optimizer(print_level=0)</code>. If you wish to pass an option specifically for the restoration phase, instead of using the prefix <code>resto.</code>, use the prefix <code>resto_</code>. For example <code>Ipopt.Optimizer(resto_max_iter=0)</code>.</p>
<p>You can use Ipopt with JuMP as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(Ipopt<span class="pl-k">.</span>Optimizer, max_cpu_time<span class="pl-k">=</span><span class="pl-c1">60.0</span>))</pre></div>
<h2><a id="user-content-c-interface-wrapper" class="anchor" aria-hidden="true" href="#c-interface-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>C Interface Wrapper</h2>
<p>Full documentation for the Ipopt C wrapper is available <a href="http://ipoptjl.readthedocs.org/en/latest/ipopt.html" rel="nofollow">here</a>. Use of the <a href="https://github.com/JuliaOpt/MathOptInterface.jl">nonlinear MathOptInterface interface</a> is recommended over the low-level C interface because it permits one to easily switch between solvers.</p>
</article></div>