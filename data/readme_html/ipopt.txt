<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/62ac669cf0f611beeb2b73b264772b8455bc471586e911447b413270e20c22f2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67"><img src="https://camo.githubusercontent.com/62ac669cf0f611beeb2b73b264772b8455bc471586e911447b413270e20c22f2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-ipoptjl" class="anchor" aria-hidden="true" href="#ipoptjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Ipopt.jl</h1>
<p dir="auto"><a href="https://github.com/jump-dev/Ipopt.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/Ipopt.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jump-dev/Ipopt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51cc3ea04c5b7a665867bb0a81ae9b22dbe4ee0da827dd50d20753d6bdded063/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f49706f70742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/Ipopt.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jump-dev/Ipopt.jl">Ipopt.jl</a> is a wrapper for the
<a href="https://github.com/coin-or/ipopt">Ipopt</a> solver.</p>
<h2 dir="auto"><a id="user-content-affiliation" class="anchor" aria-hidden="true" href="#affiliation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Affiliation</h2>
<p dir="auto">This wrapper is maintained by the JuMP community and is not a COIN-OR project.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto"><code>Ipopt.jl</code> is licensed under the <a href="https://github.com/jump-dev/Ipopt.jl/blob/master/LICENSE.md">MIT License</a>.</p>
<p dir="auto">The underlying solver, <a href="https://github.com/coin-or/Ipopt">coin-or/Ipopt</a>, is
licensed under the <a href="https://github.com/coin-or/Ipopt/blob/master/LICENSE">Eclipse public license</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install <code>Ipopt.jl</code> using the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Ipopt&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">In addition to installing the <code>Ipopt.jl</code> package, this will also download and
install the Ipopt binaries. You do not need to install Ipopt separately.</p>
<p dir="auto">To use a custom binary, read the <a href="https://jump.dev/JuMP.jl/stable/developers/custom_solver_binaries/" rel="nofollow">Custom solver binaries</a>
section of the JuMP documentation.</p>
<p dir="auto">For details on using a different linear solver, see the <code>Linear Solvers</code> section
below. You do not need a custom binary to change the linear solver.</p>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<p dir="auto">You can use Ipopt with JuMP as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_attribute(model, &quot;max_cpu_time&quot;, 60.0)
set_attribute(model, &quot;print_level&quot;, 0)"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>max_cpu_time<span class="pl-pds">"</span></span>, <span class="pl-c1">60.0</span>)
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<h2 dir="auto"><a id="user-content-mathoptinterface-api" class="anchor" aria-hidden="true" href="#mathoptinterface-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptInterface API</h2>
<p dir="auto">The Ipopt optimizer supports the following constraints and attributes.</p>
<p dir="auto">List of supported objective functions:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarQuadraticFunction{Float64}}</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.VariableIndex}</code></a></li>
</ul>
<p dir="auto">List of supported variable types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.Reals</code></a></li>
</ul>
<p dir="auto">List of supported constraint types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
</ul>
<p dir="auto">List of supported model attributes:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.NLPBlock()</code></a></li>
<li><a href="@ref"><code>MOI.NLPBlockDualStart()</code></a></li>
<li><a href="@ref"><code>MOI.Name()</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveSense()</code></a></li>
</ul>
<h2 dir="auto"><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Options</h2>
<p dir="auto">Supported options are listed in the <a href="https://coin-or.github.io/Ipopt/OPTIONS.html#OPTIONS_REF" rel="nofollow">Ipopt documentation</a>.</p>
<h2 dir="auto"><a id="user-content-solver-specific-callbacks" class="anchor" aria-hidden="true" href="#solver-specific-callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solver-specific callbacks</h2>
<p dir="auto">Ipopt provides a callback that can be used to log the status of the optimization
during a solve. It can also be used to terminate the optimization by returning
<code>false</code>. Here is an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Ipopt, Test
model = Model(Ipopt.Optimizer)
set_silent(model)
@variable(model, x &gt;= 1)
@objective(model, Min, x + 0.5)
x_vals = Float64[]
function my_callback(
   alg_mod::Cint,
   iter_count::Cint,
   obj_value::Float64,
   inf_pr::Float64,
   inf_du::Float64,
   mu::Float64,
   d_norm::Float64,
   regularization_size::Float64,
   alpha_du::Float64,
   alpha_pr::Float64,
   ls_trials::Cint,
)
   push!(x_vals, callback_value(model, x))
   @test isapprox(obj_value, 1.0 * x_vals[end] + 0.5, atol = 1e-1)
   # return `true` to keep going, or `false` to terminate the optimization.
   return iter_count &lt; 1
end
MOI.set(model, Ipopt.CallbackFunction(), my_callback)
optimize!(model)
@test MOI.get(model, MOI.TerminationStatus()) == MOI.INTERRUPTED
@test length(x_vals) == 2"><pre><span class="pl-k">using</span> JuMP, Ipopt, Test
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_silent</span>(model)
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@objective</span>(model, Min, x <span class="pl-k">+</span> <span class="pl-c1">0.5</span>)
x_vals <span class="pl-k">=</span> Float64[]
<span class="pl-k">function</span> <span class="pl-en">my_callback</span>(
   alg_mod<span class="pl-k">::</span><span class="pl-c1">Cint</span>,
   iter_count<span class="pl-k">::</span><span class="pl-c1">Cint</span>,
   obj_value<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   inf_pr<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   inf_du<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   mu<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   d_norm<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   regularization_size<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   alpha_du<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   alpha_pr<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   ls_trials<span class="pl-k">::</span><span class="pl-c1">Cint</span>,
)
   <span class="pl-c1">push!</span>(x_vals, <span class="pl-c1">callback_value</span>(model, x))
   <span class="pl-c1">@test</span> <span class="pl-c1">isapprox</span>(obj_value, <span class="pl-c1">1.0</span> <span class="pl-k">*</span> x_vals[<span class="pl-c1">end</span>] <span class="pl-k">+</span> <span class="pl-c1">0.5</span>, atol <span class="pl-k">=</span> <span class="pl-c1">1e-1</span>)
   <span class="pl-c"><span class="pl-c">#</span> return `true` to keep going, or `false` to terminate the optimization.</span>
   <span class="pl-k">return</span> iter_count <span class="pl-k">&lt;</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, Ipopt<span class="pl-k">.</span><span class="pl-c1">CallbackFunction</span>(), my_callback)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">@test</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">TerminationStatus</span>()) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>INTERRUPTED
<span class="pl-c1">@test</span> <span class="pl-c1">length</span>(x_vals) <span class="pl-k">==</span> <span class="pl-c1">2</span></pre></div>
<p dir="auto">See the <a href="https://coin-or.github.io/Ipopt/OUTPUT.html" rel="nofollow">Ipopt documentation</a> for
an explanation of the arguments to the callback. They are identical to the
output contained in the logging table printed to the screen.</p>
<p dir="auto">To access the current solution and primal, dual, and complementarity violations
of each iteration, use <code>Ipopt.GetIpoptCurrentViolations</code> and
<code>Ipopt.GetIpoptCurrentIterate</code>. The two functions are identical to the ones in
the <a href="https://coin-or.github.io/Ipopt/INTERFACES.html" rel="nofollow">Ipopt C interface</a>.</p>
<h2 dir="auto"><a id="user-content-c-api" class="anchor" aria-hidden="true" href="#c-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>C API</h2>
<p dir="auto">Ipopt.jl wraps the <a href="https://coin-or.github.io/Ipopt/INTERFACES.html" rel="nofollow">Ipopt C interface</a>
with minimal modifications.</p>
<p dir="auto">A complete example is available in the <code>test/C_wrapper.jl</code> file.</p>
<p dir="auto">For simplicity, the five callbacks required by Ipopt are slightly different to
the C interface. They are as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
   eval_f(x::Vector{Float64})::Float64

Returns the objective value `f(x)`.
&quot;&quot;&quot;
function eval_f end

&quot;&quot;&quot;
   eval_grad_f(x::Vector{Float64}, grad_f::Vector{Float64})::Nothing

Fills `grad_f` in-place with the gradient of the objective function evaluated at
`x`.
&quot;&quot;&quot;
function eval_grad_f end

&quot;&quot;&quot;
   eval_g(x::Vector{Float64}, g::Vector{Float64})::Nothing

Fills `g` in-place with the value of the constraints evaluated at `x`.
&quot;&quot;&quot;
function eval_g end

&quot;&quot;&quot;
   eval_jac_g(
      x::Vector{Float64},
      rows::Vector{Cint},
      cols::Vector{Cint},
      values::Union{Nothing,Vector{Float64}},
   )::Nothing

Compute the Jacobian matrix.

* If `values === nothing`
   - Fill `rows` and `cols` with the 1-indexed sparsity structure
* Otherwise:
   - Fill `values` with the elements of the Jacobian matrix according to the
     sparsity structure.

!!! warning
    If `values === nothing`, `x` is an undefined object. Accessing any elements
    in it will cause Julia to segfault.
&quot;&quot;&quot;
function eval_jac_g end

&quot;&quot;&quot;
   eval_h(
      x::Vector{Float64},
      rows::Vector{Cint},
      cols::Vector{Cint},
      obj_factor::Float64,
      lambda::Float64,
      values::Union{Nothing,Vector{Float64}},
   )::Nothing

Compute the Hessian-of-the-Lagrangian matrix.

* If `values === nothing`
   - Fill `rows` and `cols` with the 1-indexed sparsity structure
* Otherwise:
   - Fill `values` with the Hessian matrix according to the sparsity structure.

!!! warning
    If `values === nothing`, `x` is an undefined object. Accessing any elements
    in it will cause Julia to segfault.
&quot;&quot;&quot;
function eval_h end"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">   eval_f(x::Vector{Float64})::Float64</span>
<span class="pl-s"></span>
<span class="pl-s">Returns the objective value `f(x)`.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> eval_f <span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">   eval_grad_f(x::Vector{Float64}, grad_f::Vector{Float64})::Nothing</span>
<span class="pl-s"></span>
<span class="pl-s">Fills `grad_f` in-place with the gradient of the objective function evaluated at</span>
<span class="pl-s">`x`.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> eval_grad_f <span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">   eval_g(x::Vector{Float64}, g::Vector{Float64})::Nothing</span>
<span class="pl-s"></span>
<span class="pl-s">Fills `g` in-place with the value of the constraints evaluated at `x`.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> eval_g <span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">   eval_jac_g(</span>
<span class="pl-s">      x::Vector{Float64},</span>
<span class="pl-s">      rows::Vector{Cint},</span>
<span class="pl-s">      cols::Vector{Cint},</span>
<span class="pl-s">      values::Union{Nothing,Vector{Float64}},</span>
<span class="pl-s">   )::Nothing</span>
<span class="pl-s"></span>
<span class="pl-s">Compute the Jacobian matrix.</span>
<span class="pl-s"></span>
<span class="pl-s">* If `values === nothing`</span>
<span class="pl-s">   - Fill `rows` and `cols` with the 1-indexed sparsity structure</span>
<span class="pl-s">* Otherwise:</span>
<span class="pl-s">   - Fill `values` with the elements of the Jacobian matrix according to the</span>
<span class="pl-s">     sparsity structure.</span>
<span class="pl-s"></span>
<span class="pl-s">!!! warning</span>
<span class="pl-s">    If `values === nothing`, `x` is an undefined object. Accessing any elements</span>
<span class="pl-s">    in it will cause Julia to segfault.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> eval_jac_g <span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">   eval_h(</span>
<span class="pl-s">      x::Vector{Float64},</span>
<span class="pl-s">      rows::Vector{Cint},</span>
<span class="pl-s">      cols::Vector{Cint},</span>
<span class="pl-s">      obj_factor::Float64,</span>
<span class="pl-s">      lambda::Float64,</span>
<span class="pl-s">      values::Union{Nothing,Vector{Float64}},</span>
<span class="pl-s">   )::Nothing</span>
<span class="pl-s"></span>
<span class="pl-s">Compute the Hessian-of-the-Lagrangian matrix.</span>
<span class="pl-s"></span>
<span class="pl-s">* If `values === nothing`</span>
<span class="pl-s">   - Fill `rows` and `cols` with the 1-indexed sparsity structure</span>
<span class="pl-s">* Otherwise:</span>
<span class="pl-s">   - Fill `values` with the Hessian matrix according to the sparsity structure.</span>
<span class="pl-s"></span>
<span class="pl-s">!!! warning</span>
<span class="pl-s">    If `values === nothing`, `x` is an undefined object. Accessing any elements</span>
<span class="pl-s">    in it will cause Julia to segfault.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> eval_h <span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-invalid_model-error" class="anchor" aria-hidden="true" href="#invalid_model-error"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>INVALID_MODEL</code> error</h2>
<p dir="auto">If you get a termination status <code>MOI.INVALID_MODEL</code>, it is probably because you
have some undefined value in your model, for example, a division by zero. Fix
this by removing the division, or by imposing variable bounds so that you cut
off the undefined region.</p>
<p dir="auto">Instead of</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = Model(Ipopt.Optimizer)
@variable(model, x)
@NLobjective(model, 1 / x)"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x)
<span class="pl-c1">@NLobjective</span>(model, <span class="pl-c1">1</span> <span class="pl-k">/</span> x)</pre></div>
<p dir="auto">do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = Model(Ipopt.Optimizer)
@variable(model, x &gt;= 0.0001)
@NLobjective(model, 1 / x)"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0.0001</span>)
<span class="pl-c1">@NLobjective</span>(model, <span class="pl-c1">1</span> <span class="pl-k">/</span> x)</pre></div>
<h2 dir="auto"><a id="user-content-linear-solvers" class="anchor" aria-hidden="true" href="#linear-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Solvers</h2>
<p dir="auto">To improve performance, Ipopt supports a number of linear solvers. Installing
these can be tricky, however, the following instructions should work. If they
don't, or are not explicit enough, please open an issue.</p>
<h3 dir="auto"><a id="user-content-julia-17" class="anchor" aria-hidden="true" href="#julia-17"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia 1.7</h3>
<p dir="auto">Depending on your system, you may encounter the error:
<code>Error: no BLAS/LAPACK library loaded!</code>. If you do, run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import LinearAlgebra, OpenBLAS32_jll
LinearAlgebra.BLAS.lbt_forward(OpenBLAS32_jll.libopenblas_path)"><pre><span class="pl-k">import</span> LinearAlgebra, OpenBLAS32_jll
LinearAlgebra<span class="pl-k">.</span>BLAS<span class="pl-k">.</span><span class="pl-c1">lbt_forward</span>(OpenBLAS32_jll<span class="pl-k">.</span>libopenblas_path)</pre></div>
<h3 dir="auto"><a id="user-content-pardiso-pardiso-project" class="anchor" aria-hidden="true" href="#pardiso-pardiso-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pardiso (Pardiso Project)</h3>
<h4 dir="auto"><a id="user-content-linux" class="anchor" aria-hidden="true" href="#linux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linux</h4>
<p dir="auto"><em>Tested on a clean install of Ubuntu 20.04.</em></p>
<ol dir="auto">
<li>Install <code>lapack</code> and <code>libomp</code>:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sudo apt install liblapack3 libomp-dev"><pre class="notranslate"><code>sudo apt install liblapack3 libomp-dev
</code></pre></div>
</li>
<li>Download Pardiso from <a href="https://www.pardiso-project.org" rel="nofollow">https://www.pardiso-project.org</a></li>
<li>Rename the file <code>libpardiso-XXXXX.so</code> to <code>libpardiso.so</code></li>
<li>Place the <code>libpardiso.so</code> library somewhere on your load path
<ul dir="auto">
<li>
<p dir="auto">Alternatively, if the library is located at <code>/full/path/libpardiso.so</code>,
start Julia with <code>export LD_LIBRARY_PATH=/full/path; julia</code></p>
<p dir="auto">To make this permanent, modify your <code>.bashrc</code> to include:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="export LD_LIBRARY_PATH=&quot;${LD_LIBRARY_PATH}:/full/path/&quot;"><pre class="notranslate"><code>export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/full/path/"
</code></pre></div>
</li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>pardiso</code>:
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Libdl
# Note: these filenames may differ. Check `/usr/lib/x86_64-linux-gnu` for the
# specific extension.
Libdl.dlopen(&quot;/usr/lib/x86_64-linux-gnu/liblapack.so.3&quot;, RTLD_GLOBAL)
Libdl.dlopen(&quot;/usr/lib/x86_64-linux-gnu/libomp.so.5&quot;, RTLD_GLOBAL)

using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;pardiso&quot;)"><pre><span class="pl-k">using</span> Libdl
<span class="pl-c"><span class="pl-c">#</span> Note: these filenames may differ. Check `/usr/lib/x86_64-linux-gnu` for the</span>
<span class="pl-c"><span class="pl-c">#</span> specific extension.</span>
Libdl<span class="pl-k">.</span><span class="pl-c1">dlopen</span>(<span class="pl-s"><span class="pl-pds">"</span>/usr/lib/x86_64-linux-gnu/liblapack.so.3<span class="pl-pds">"</span></span>, RTLD_GLOBAL)
Libdl<span class="pl-k">.</span><span class="pl-c1">dlopen</span>(<span class="pl-s"><span class="pl-pds">"</span>/usr/lib/x86_64-linux-gnu/libomp.so.5<span class="pl-pds">"</span></span>, RTLD_GLOBAL)

<span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>pardiso<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4 dir="auto"><a id="user-content-mac" class="anchor" aria-hidden="true" href="#mac"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mac</h4>
<p dir="auto"><em>Tested on a MacBook Pro, 10.15.7.</em></p>
<ol dir="auto">
<li>Download Pardiso from <a href="https://www.pardiso-project.org" rel="nofollow">https://www.pardiso-project.org</a></li>
<li>Rename the file <code>libpardiso-XXXXX.dylib</code> to <code>libpardiso.dylib</code>.</li>
<li>Place the <code>libpardiso.dylib</code> library somewhere on your load path.
<ul dir="auto">
<li>Alternatively, if the library is located at <code>/full/path/libpardiso.dylib</code>,
start Julia with <code>export DL_LOAD_PATH=/full/path; julia</code></li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>pardiso</code>:
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;pardiso&quot;)"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>pardiso<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4 dir="auto"><a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Windows</h4>
<p dir="auto">Currently untested. If you have instructions that work, please open an issue.</p>
<h3 dir="auto"><a id="user-content-hsl-ma27-ma86-ma97" class="anchor" aria-hidden="true" href="#hsl-ma27-ma86-ma97"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HSL (MA27, MA86, MA97)</h3>
<h4 dir="auto"><a id="user-content-linux-1" class="anchor" aria-hidden="true" href="#linux-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linux</h4>
<p dir="auto"><em>Tested on a clean install of Ubuntu 20.04 and WSL Ubuntu 20.04</em></p>
<ol dir="auto">
<li>Install dependencies if necessary:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sudo apt install gfortran libblas-dev libmetis-dev"><pre class="notranslate"><code>sudo apt install gfortran libblas-dev libmetis-dev
</code></pre></div>
Note: on Windows Subsystem for Linux, you may also need <code>sudo apt install make</code>.</li>
<li>Download the appropriate version of HSL.
<ul dir="auto">
<li>MA27: <a href="http://www.hsl.rl.ac.uk/ipopt/" rel="nofollow">HSL for Ipopt from HSL</a></li>
<li>MA86: <a href="http://www.hsl.rl.ac.uk/download/HSL_MA86/1.6.0/" rel="nofollow">HSL_MA86 from HSL</a></li>
<li>Other: <a href="http://www.hsl.rl.ac.uk/catalogue/" rel="nofollow">http://www.hsl.rl.ac.uk/catalogue/</a></li>
</ul>
</li>
<li>Unzip the download, <code>cd</code> to the directory, and run the following:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install"><pre class="notranslate"><code>./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install
</code></pre></div>
where <code>&lt;/full/path/somewhere&gt;</code> is replaced as appropriate.</li>
<li>Rename the resulting HSL library to <code>/full/path/somewhere/lib/libhsl.so</code>.
<ul dir="auto">
<li>For <code>ma27</code>, the file is <code>/full/path/somewhere/lib/libcoinhsl.so</code></li>
<li>For <code>ma86</code>, the file is <code>/full/path/somewhere/lib/libhsl_ma86.so</code></li>
</ul>
</li>
<li>Place the <code>libhsl.so</code> library somewhere on your load path.
<ul dir="auto">
<li>Alternatively, start Julia with <code>export LD_LIBRARY_PATH=/full/path/somewhere/lib; julia</code></li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>ma27</code> or <code>ma86</code> as appropriate:
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma27&quot;)
# or
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma86&quot;)"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma27<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma86<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4 dir="auto"><a id="user-content-mac-1" class="anchor" aria-hidden="true" href="#mac-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mac</h4>
<p dir="auto"><em>Tested on a MacBook Pro, 10.15.7, 12.6, 13.0</em></p>
<ol dir="auto">
<li>
<p dir="auto">Download the appropriate version of HSL.</p>
<ul dir="auto">
<li>MA27: <a href="http://www.hsl.rl.ac.uk/ipopt/" rel="nofollow">HSL for Ipopt from HSL</a></li>
<li>MA86: <a href="http://www.hsl.rl.ac.uk/download/HSL_MA86/1.6.0/" rel="nofollow">HSL_MA86 from HSL</a></li>
<li>Other: <a href="http://www.hsl.rl.ac.uk/catalogue/" rel="nofollow">http://www.hsl.rl.ac.uk/catalogue/</a></li>
</ul>
</li>
<li>
<p dir="auto">Unzip the download, <code>cd</code> to the directory, and run the following:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install"><pre class="notranslate"><code>./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install
</code></pre></div>
<p dir="auto">where <code>&lt;/full/path/somewhere&gt;</code> is replaced as appropriate.</p>
</li>
<li>
<p dir="auto">Rename the resulting HSL library to <code>/full/path/somewhere/lib/libhsl.dylib</code>.</p>
<ul dir="auto">
<li>For <code>ma27</code>, the file is <code>/full/path/somewhere/lib/libcoinhsl.dylib</code></li>
<li>For <code>ma86</code>, the file is <code>/full/path/somewhere/lib/libhsl_ma86.dylib</code></li>
</ul>
</li>
<li>
<p dir="auto">Now we need to ensure Ipopt can find <code>libhsl.dylib</code> this can be achieved by either</p>
<ul dir="auto">
<li>Setting an environment variable <code>export DL_LOAD_PATH=/full/path/somewhere/lib</code></li>
<li>Setting <code>hsllib</code> with <code>set_optimizer_attribute(model, "hsllib","full/path/somewhere/lib/libhsl.dylib")</code></li>
</ul>
</li>
<li>
<p dir="auto">Set the option <code>linear_solver</code> to <code>ma27</code> or <code>ma86</code> as appropriate:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma27&quot;)
# or
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma86&quot;)"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma27<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma86<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4 dir="auto"><a id="user-content-windows-1" class="anchor" aria-hidden="true" href="#windows-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Windows</h4>
<p dir="auto">Currently untested. If you have instructions that work, please open an issue.
Alternatively you can use <a href="https://learn.microsoft.com/en-us/windows/wsl/install" rel="nofollow">Windows Subsystem for Linux</a>
and follow the Linux instructions.</p>
<h3 dir="auto"><a id="user-content-pardiso-mkl" class="anchor" aria-hidden="true" href="#pardiso-mkl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pardiso (MKL)</h3>
<p dir="auto">Currently untested on all platforms. If you have instructions that work, please
open an issue.</p>
</article></div>