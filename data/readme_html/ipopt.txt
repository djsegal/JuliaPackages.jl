<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ipoptjl" class="anchor" aria-hidden="true" href="#ipoptjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ipopt.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/62ac669cf0f611beeb2b73b264772b8455bc471586e911447b413270e20c22f2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67"><img src="https://camo.githubusercontent.com/62ac669cf0f611beeb2b73b264772b8455bc471586e911447b413270e20c22f2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width:100%;"></a></p>
<p><strong>Ipopt.jl</strong> is a <a href="http://julialang.org/" rel="nofollow">Julia</a> interface to the <a href="www.coin-or.org">COIN-OR</a>
nonlinear solver <a href="https://coin-or.github.io/Ipopt/" rel="nofollow">Ipopt</a>.</p>
<p><em>Note: This wrapper is maintained by the JuMP community and is not a COIN-OR
project.</em></p>
<p><a href="https://github.com/jump-dev/Ipopt.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/Ipopt.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/Ipopt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51cc3ea04c5b7a665867bb0a81ae9b22dbe4ee0da827dd50d20753d6bdded063/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f49706f70742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/Ipopt.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install <code>Ipopt.jl</code> using the Julia package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;Ipopt&quot;)
"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt<span class="pl-pds">"</span></span>)</pre></div>
<p>In addition to installing the <code>Ipopt.jl</code> package, this will also download and
install the Ipopt binaries. You do <em>not</em> need to install Ipopt separately.</p>
<p>If you require a custom build of Ipopt, see the instructions below.</p>
<p>For details on using a different linear solver, see the <code>Linear Solvers</code> section
below.</p>
<h2><a id="user-content-jump-and-mathoptinterface" class="anchor" aria-hidden="true" href="#jump-and-mathoptinterface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JuMP and MathOptInterface</h2>
<p>You can use Ipopt with JuMP as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;max_cpu_time&quot;, 60.0)
set_optimizer_attribute(model, &quot;print_level&quot;, 0)
"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>max_cpu_time<span class="pl-pds">"</span></span>, <span class="pl-c1">60.0</span>)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<p>Supported options are listed in the <a href="https://coin-or.github.io/Ipopt/OPTIONS.html#OPTIONS_REF" rel="nofollow">Ipopt documentation</a>.</p>
<h3><a id="user-content-solver-specific-callback" class="anchor" aria-hidden="true" href="#solver-specific-callback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solver-specific callback</h3>
<p>Ipopt provides a callback that can be used to log the status of the optimization
during a solve. It can also be used to terminate the optimization by returning
<code>false</code>. Here is an example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Ipopt, Test
model = Model(Ipopt.Optimizer)
set_silent(model)
@variable(model, x &gt;= 1)
@objective(model, Min, x + 0.5)
x_vals = Float64[]
function my_callback(
   prob::IpoptProblem,
   alg_mod::Cint,
   iter_count::Cint,
   obj_value::Float64,
   inf_pr::Float64,
   inf_du::Float64,
   mu::Float64,
   d_norm::Float64,
   regularization_size::Float64,
   alpha_du::Float64,
   alpha_pr::Float64,
   ls_trials::Cint,
)
   c = Ipopt.column(index(x))
   push!(x_vals, prob.x[c])
   @test isapprox(obj_value, 1.0 * x_vals[end] + 0.5, atol = 1e-1)
   # return `true` to keep going, or `false` to terminate the optimization.
   return iter_count &lt; 1
end
MOI.set(model, Ipopt.CallbackFunction(), my_callback)
optimize!(model)
@test MOI.get(model, MOI.TerminationStatus()) == MOI.INTERRUPTED
@test length(x_vals) == 2
"><pre><span class="pl-k">using</span> JuMP, Ipopt, Test
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_silent</span>(model)
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@objective</span>(model, Min, x <span class="pl-k">+</span> <span class="pl-c1">0.5</span>)
x_vals <span class="pl-k">=</span> Float64[]
<span class="pl-k">function</span> <span class="pl-en">my_callback</span>(
   prob<span class="pl-k">::</span><span class="pl-c1">IpoptProblem</span>,
   alg_mod<span class="pl-k">::</span><span class="pl-c1">Cint</span>,
   iter_count<span class="pl-k">::</span><span class="pl-c1">Cint</span>,
   obj_value<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   inf_pr<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   inf_du<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   mu<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   d_norm<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   regularization_size<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   alpha_du<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   alpha_pr<span class="pl-k">::</span><span class="pl-c1">Float64</span>,
   ls_trials<span class="pl-k">::</span><span class="pl-c1">Cint</span>,
)
   c <span class="pl-k">=</span> Ipopt<span class="pl-k">.</span><span class="pl-c1">column</span>(<span class="pl-c1">index</span>(x))
   <span class="pl-c1">push!</span>(x_vals, prob<span class="pl-k">.</span>x[c])
   <span class="pl-c1">@test</span> <span class="pl-c1">isapprox</span>(obj_value, <span class="pl-c1">1.0</span> <span class="pl-k">*</span> x_vals[<span class="pl-c1">end</span>] <span class="pl-k">+</span> <span class="pl-c1">0.5</span>, atol <span class="pl-k">=</span> <span class="pl-c1">1e-1</span>)
   <span class="pl-c"><span class="pl-c">#</span> return `true` to keep going, or `false` to terminate the optimization.</span>
   <span class="pl-k">return</span> iter_count <span class="pl-k">&lt;</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, Ipopt<span class="pl-k">.</span><span class="pl-c1">CallbackFunction</span>(), my_callback)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">@test</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">TerminationStatus</span>()) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>INTERRUPTED
<span class="pl-c1">@test</span> <span class="pl-c1">length</span>(x_vals) <span class="pl-k">==</span> <span class="pl-c1">2</span></pre></div>
<p>See the <a href="https://coin-or.github.io/Ipopt/OUTPUT.html" rel="nofollow">Ipopt documentation</a> for
an explanation of the arguments to the callback. They are identical to the
output contained in the logging table printed to the screen.</p>
<h2><a id="user-content-c-interface-wrapper" class="anchor" aria-hidden="true" href="#c-interface-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>C Interface Wrapper</h2>
<p>Full documentation for the Ipopt C wrapper <a href="https://github.com/jump-dev/Ipopt.jl/blob/master/doc/C_API.md">is available</a>.
However, we strongly encourage you to use Ipopt with JuMP instead.</p>
<h2><a id="user-content-invalid_model-error" class="anchor" aria-hidden="true" href="#invalid_model-error"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>INVALID_MODEL</code> error</h2>
<p>If you get a termination status <code>MOI.INVALID_MODEL</code>, it is probably because you
have some undefined value in your model, e.g., a division by zero. Fix this by
removing the division, or by imposing variable bounds so that you cut off the
undefined region.</p>
<p>Instead of</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Model(Ipopt.Optimizer)
@variable(model, x)
@NLobjective(model, 1 / x)
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x)
<span class="pl-c1">@NLobjective</span>(model, <span class="pl-c1">1</span> <span class="pl-k">/</span> x)</pre></div>
<p>do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Model(Ipopt.Optimizer)
@variable(model, x &gt;= 0.0001)
@NLobjective(model, 1 / x)
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0.0001</span>)
<span class="pl-c1">@NLobjective</span>(model, <span class="pl-c1">1</span> <span class="pl-k">/</span> x)</pre></div>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p><strong>Note: it is not necessary to compile a custom version of Ipopt to use a
different linear solver. See the Linear Solvers section below.</strong></p>
<p>To install custom built Ipopt binaries, you must compile the shared library (
e.g., <code>libipopt.dylib</code>, <code>libipopt.so</code>, or <code>libipopt.dll</code>) <em>and</em> the AMPL
executable (e.g., <code>ipopt</code> or <code>ipopt.exe</code>).</p>
<p>If you cannot compile the AMPL executable, you can <a href="https://ampl.com/products/solvers/open-source/#ipopt" rel="nofollow">download an appropriate
version from AMPL</a>.</p>
<p>Next, set the environmental variables <code>JULIA_IPOPT_LIBRARY_PATH</code> and
<code>JULIA_IPOPT_EXECUTABLE_PATH</code> to point the the shared library and AMPL
executable repspectively. Then call <code>import Pkg; Pkg.build("Ipopt")</code>.</p>
<p>For instance, given <code>/Users/oscar/lib/libipopt.dylib</code> and
<code>/Users/oscar/bin/ipopt</code>, run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_IPOPT_LIBRARY_PATH&quot;] = &quot;/Users/oscar/lib&quot;
ENV[&quot;JULIA_IPOPT_EXECUTABLE_PATH&quot;] = &quot;/Users/oscar/bin&quot;
import Pkg
Pkg.build(&quot;Ipopt&quot;)
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Users/oscar/lib<span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_EXECUTABLE_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Users/oscar/bin<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt<span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Very important note: you must set these environment variables before
calling <code>using Ipopt</code> in every Julia session.</strong></p>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_IPOPT_LIBRARY_PATH&quot;] = &quot;/Users/oscar/lib&quot;
ENV[&quot;JULIA_IPOPT_EXECUTABLE_PATH&quot;] = &quot;/Users/oscar/bin&quot;
using Ipopt
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Users/oscar/lib<span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_EXECUTABLE_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Users/oscar/bin<span class="pl-pds">"</span></span>
<span class="pl-k">using</span> Ipopt</pre></div>
<p>Alternatively, you can set these permanently through your operating system.</p>
<p>To switch back to the default binaries, run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="delete!(ENV, &quot;JULIA_IPOPT_LIBRARY_PATH&quot;)
delete!(ENV, &quot;JULIA_IPOPT_EXECUTABLE_PATH&quot;)
import Pkg
Pkg.build(&quot;Ipopt&quot;)
"><pre><span class="pl-c1">delete!</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_LIBRARY_PATH<span class="pl-pds">"</span></span>)
<span class="pl-c1">delete!</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>JULIA_IPOPT_EXECUTABLE_PATH<span class="pl-pds">"</span></span>)
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-linear-solvers" class="anchor" aria-hidden="true" href="#linear-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linear Solvers</h2>
<p>To improve performance, Ipopt supports a number of linear solvers. Installing
these can be tricky, however, the following instructions should work. If they
don't, or are not explicit enough, please open an issue.</p>
<h3><a id="user-content-pardiso-pardiso-project" class="anchor" aria-hidden="true" href="#pardiso-pardiso-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pardiso (Pardiso Project)</h3>
<h4><a id="user-content-linux" class="anchor" aria-hidden="true" href="#linux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linux</h4>
<p><em>Tested on a clean install of Ubuntu 20.04.</em></p>
<ol>
<li>Install lapack and libomp:
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sudo apt install liblapack3 libomp-dev
"><pre><code>sudo apt install liblapack3 libomp-dev
</code></pre></div>
</li>
<li>Download Pardiso from <a href="https://www.pardiso-project.org" rel="nofollow">https://www.pardiso-project.org</a></li>
<li>Rename the file <code>libpardiso-XXXXX.so</code> to <code>libpardiso.so</code></li>
<li>Place the <code>libpardiso.so</code> library somewhere on your load path.
<ul>
<li>Alternatively, if the library is located at <code>/full/path/libpardiso.dylib</code>,
start Julia with <code>export LD_LIBRARY_PATH=/full/path; julia</code></li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>pardiso</code>:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Libdl
# Note: these filenames may differ. Check `/usr/lib/x86_64-linux-gnu` for the
# specific extension.
Libdl.dlopen(&quot;/usr/lib/x86_64-linux-gnu/liblapack.so.3&quot;, RTLD_GLOBAL)
Libdl.dlopen(&quot;/usr/lib/x86_64-linux-gnu/libomp.so.5&quot;, RTLD_GLOBAL)

using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;pardiso&quot;)
"><pre><span class="pl-k">using</span> Libdl
<span class="pl-c"><span class="pl-c">#</span> Note: these filenames may differ. Check `/usr/lib/x86_64-linux-gnu` for the</span>
<span class="pl-c"><span class="pl-c">#</span> specific extension.</span>
Libdl<span class="pl-k">.</span><span class="pl-c1">dlopen</span>(<span class="pl-s"><span class="pl-pds">"</span>/usr/lib/x86_64-linux-gnu/liblapack.so.3<span class="pl-pds">"</span></span>, RTLD_GLOBAL)
Libdl<span class="pl-k">.</span><span class="pl-c1">dlopen</span>(<span class="pl-s"><span class="pl-pds">"</span>/usr/lib/x86_64-linux-gnu/libomp.so.5<span class="pl-pds">"</span></span>, RTLD_GLOBAL)

<span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>pardiso<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4><a id="user-content-mac" class="anchor" aria-hidden="true" href="#mac"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mac</h4>
<p><em>Tested on a MacBook Pro, 10.15.7.</em></p>
<ol>
<li>Download Pardiso from <a href="https://www.pardiso-project.org" rel="nofollow">https://www.pardiso-project.org</a></li>
<li>Rename the file <code>libpardiso-XXXXX.dylib</code> to <code>libpardiso.dylib</code>.</li>
<li>Place the <code>libpardiso.dylib</code> library somewhere on your load path.
<ul>
<li>Alternatively, if the library is located at <code>/full/path/libpardiso.dylib</code>,
start Julia with <code>export DL_LOAD_PATH=/full/path; julia</code></li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>pardiso</code>:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;pardiso&quot;)
"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>pardiso<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4><a id="user-content-windows" class="anchor" aria-hidden="true" href="#windows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Windows</h4>
<p>Currently untested. If you have instructions that work, please open an issue.</p>
<h3><a id="user-content-hsl-ma27-ma86-ma97" class="anchor" aria-hidden="true" href="#hsl-ma27-ma86-ma97"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HSL (MA27, MA86, MA97)</h3>
<h4><a id="user-content-linux-1" class="anchor" aria-hidden="true" href="#linux-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linux</h4>
<p><em>Tested on a clean install of Ubuntu 20.04.</em></p>
<ol>
<li>Install Fortran compiler if necessary
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sudo apt install gfortran
"><pre><code>sudo apt install gfortran
</code></pre></div>
</li>
<li>Download the appropriate version of HSL.
<ul>
<li>MA27: <a href="http://www.hsl.rl.ac.uk/ipopt/" rel="nofollow">HSL for IPOPT from HSL</a></li>
<li>MA86: <a href="http://www.hsl.rl.ac.uk/download/HSL_MA86/1.6.0/" rel="nofollow">HSL_MA86 from HSL</a></li>
<li>Other: <a href="http://www.hsl.rl.ac.uk/catalogue/" rel="nofollow">http://www.hsl.rl.ac.uk/catalogue/</a></li>
</ul>
</li>
<li>Unzip the download, <code>cd</code> to the directory, and run the following:
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install
"><pre><code>./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install
</code></pre></div>
where <code>&lt;/full/path/somewhere&gt;</code> is replaced as appropriate.</li>
<li>Rename the resutling HSL library to <code>/full/path/somewhere/lib/libhsl.so</code>.
<ul>
<li>For <code>ma27</code>, the file is <code>/full/path/somewhere/lib/libcoinhsl.so</code></li>
<li>For <code>ma86</code>, the file is <code>/full/path/somewhere/lib/libhsl_ma86.so</code></li>
</ul>
</li>
<li>Place the <code>libhsl.so</code> library somewhere on your load path.
<ul>
<li>Alternatively, start Julia with <code>export LD_LIBRARY_PATH=/full/path/somewhere/lib; julia</code></li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>ma27</code> or <code>ma86</code> as appropriate:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma27&quot;)
# or
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma86&quot;)
"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma27<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma86<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4><a id="user-content-mac-1" class="anchor" aria-hidden="true" href="#mac-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mac</h4>
<p><em>Tested on a MacBook Pro, 10.15.7.</em></p>
<ol>
<li>Download the appropriate version of HSL.
<ul>
<li>MA27: <a href="http://www.hsl.rl.ac.uk/ipopt/" rel="nofollow">HSL for IPOPT from HSL</a></li>
<li>MA86: <a href="http://www.hsl.rl.ac.uk/download/HSL_MA86/1.6.0/" rel="nofollow">HSL_MA86 from HSL</a></li>
<li>Other: <a href="http://www.hsl.rl.ac.uk/catalogue/" rel="nofollow">http://www.hsl.rl.ac.uk/catalogue/</a></li>
</ul>
</li>
<li>Unzip the download, <code>cd</code> to the directory, and run the following:
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install
"><pre><code>./configure --prefix=&lt;/full/path/somewhere&gt;
make
make install
</code></pre></div>
where <code>&lt;/full/path/somewhere&gt;</code> is replaced as appropriate.</li>
<li>Rename the resutling HSL library to <code>/full/path/somewhere/lib/libhsl.dylib</code>.
<ul>
<li>For <code>ma27</code>, the file is <code>/full/path/somewhere/lib/libcoinhsl.dylib</code></li>
<li>For <code>ma86</code>, the file is <code>/full/path/somewhere/lib/libhsl_ma86.dylib</code></li>
</ul>
</li>
<li>Place the <code>libhsl.dylib</code> library somewhere on your load path.
<ul>
<li>Alternatively, start Julia with <code>export DL_LOAD_PATH=/full/path/somewhere/lib; julia</code></li>
</ul>
</li>
<li>Set the option <code>linear_solver</code> to <code>ma27</code> or <code>ma86</code> as appropriate:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, Ipopt
model = Model(Ipopt.Optimizer)
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma27&quot;)
# or
set_optimizer_attribute(model, &quot;linear_solver&quot;, &quot;ma86&quot;)
"><pre><span class="pl-k">using</span> JuMP, Ipopt
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma27<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>linear_solver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ma86<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ol>
<h4><a id="user-content-windows-1" class="anchor" aria-hidden="true" href="#windows-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Windows</h4>
<p>Currently untested. If you have instructions that work, please open an issue.</p>
<h3><a id="user-content-pardiso-mkl" class="anchor" aria-hidden="true" href="#pardiso-mkl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pardiso (MKL)</h3>
<p>Currently untested on all platforms. If you have instructions that work, please
open an issue.</p>
</article></div>