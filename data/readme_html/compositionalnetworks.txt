<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-compositionalnetworks" class="anchor" aria-hidden="true" href="#compositionalnetworks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CompositionalNetworks</h1>
<p><a href="https://JuliaConstraints.github.io/CompositionalNetworks.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaConstraints.github.io/CompositionalNetworks.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/actions"><img src="https://github.com/JuliaConstraints/CompositionalNetworks.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaConstraints/CompositionalNetworks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/851674ebf3f13468d1fe03337a489a0e03c3abcebe9592e26ad5b1a60c869698/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961436f6e73747261696e74732f436f6d706f736974696f6e616c4e6574776f726b732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d6d355932313036686469" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaConstraints/CompositionalNetworks.jl/branch/main/graph/badge.svg?token=m5Y2106hdi" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p><code>CompositionalNetworks.jl</code>, a Julia package for Interpretable Compositional Networks (ICN), a variant of neural networks, allowing the user to get interpretable results, unlike regular artificial neural networks.</p>
<p>The current state of our ICN focuses on the composition of error functions for <code>LocalSearchSolvers.jl</code>, but produces results independently of it and export it to either/both Julia functions or/and human readable output.</p>
<h3><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How does it work?</h3>
<p>The package comes with a basic ICN for learning global constraints. The ICN is composed of 4 layers: <code>transformation</code>, <code>arithmetic</code>, <code>aggregation</code>, and <code>comparison</code>. Each contains several operations that can be composed in various ways.
Given a <code>concept</code> (a predicate over the variables' domains), a metric (<code>hamming</code> by default), and the variables' domains, we learn the binary weights of the ICN.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add CompositionalNetworks
"><pre>] add CompositionalNetworks</pre></div>
<p>As the package is in a beta version, some changes in the syntax and features are likely to occur. However, those changes should be minimal between minor versions. Please update with caution.</p>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# 4 variables in 1:4
doms = [domain([1,2,3,4]) for i in 1:4]

# allunique concept (that is used to define the :all_different constraint)
err = explore_learn_compose(allunique, domains=doms)
# &gt; interpretation: identity ∘ count_positive ∘ sum ∘ count_eq_left

# test our new error function
@assert err([1,2,3,3], dom_size = 4) &gt; 0.0

# export an all_different function to file &quot;current/path/test_dummy.jl&quot; 
compose_to_file!(icn, &quot;all_different&quot;, &quot;test_dummy.jl&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> 4 variables in 1:4</span>
doms <span class="pl-k">=</span> [<span class="pl-c1">domain</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>]

<span class="pl-c"><span class="pl-c">#</span> allunique concept (that is used to define the :all_different constraint)</span>
err <span class="pl-k">=</span> <span class="pl-c1">explore_learn_compose</span>(allunique, domains<span class="pl-k">=</span>doms)
<span class="pl-c"><span class="pl-c">#</span> &gt; interpretation: identity ∘ count_positive ∘ sum ∘ count_eq_left</span>

<span class="pl-c"><span class="pl-c">#</span> test our new error function</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">err</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>], dom_size <span class="pl-k">=</span> <span class="pl-c1">4</span>) <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span>

<span class="pl-c"><span class="pl-c">#</span> export an all_different function to file "current/path/test_dummy.jl" </span>
<span class="pl-c1">compose_to_file!</span>(icn, <span class="pl-s"><span class="pl-pds">"</span>all_different<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test_dummy.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>The output file should produces a function that can be used as follows (assuming the maximum domain size is <code>7</code>)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import CompositionalNetworks

all_different([1,2,3,4,5,6,7]; dom_size = 7)
# &gt; 0.0 (which means true, no errors)
"><pre><span class="pl-k">import</span> CompositionalNetworks

<span class="pl-c1">all_different</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>]; dom_size <span class="pl-k">=</span> <span class="pl-c1">7</span>)
<span class="pl-c"><span class="pl-c">#</span> &gt; 0.0 (which means true, no errors)</span></pre></div>
<p>Please see <code>JuliaConstraints/Constraints.jl/learn.jl</code> for an extensive example of ICN learning and compositions.</p>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>Contributions to this package are more than welcome and can be arbitrarily, and not exhaustively, split as follows:</p>
<ul>
<li>Adding (useful) operations in one of the $4$ existing layers</li>
<li>Creating other ICNs from scratch or with only some of the original operations</li>
<li>Creating an ICN with a layer structure</li>
<li>Creating other compositional networks which target other problems</li>
<li>Just making stuff better, faster, user-friendlier, etc.</li>
</ul>
<h3><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contact</h3>
<p>Do not hesitate to contact me (@azzaare) or other members of JuliaConstraints on GitHub (file an issue), the julialang discourse forum, the julialang slack channel, the julialang zulip server, or the Human of Julia (HoJ) discord server.</p>
</article></div>