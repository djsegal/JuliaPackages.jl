<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-jsobjectliteraljl" class="anchor" aria-hidden="true" href="#jsobjectliteraljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JSObjectLiteral.jl</h1>
<p><a href="https://travis-ci.org/davidavdav/JSObjectLiteral.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4ccd951d35a0fd0fa81c44ba7393cfd23ff65436/68747470733a2f2f7472617669732d63692e6f72672f646176696461766461762f4a534f626a6563744c69746572616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/davidavdav/JSObjectLiteral.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Parse javascript-like object literals in Julia into a Julia object</p>
<p>This package provides a macro <code>@js</code> that parses a Julia expression interpreted as javascript, and tries to form a Julia object from that.  You can use javascript shortcuts like <code>@js { a: b }</code> to write <code>Dict("a" =&gt; b)</code> and even <code>@js { a }</code> to write <code>Dict("a" =&gt; a)</code>.</p>
<p>I am not sure if this is useful for anything else than for me trying to understand macros and evaluation in Julia...</p>
<h2><a id="user-content-js-expression" class="anchor" aria-hidden="true" href="#js-expression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@js</code> expression</h2>
<p>Parses the Julia expression as a javascript object iteral.  It can be called either as <code>@js expression</code> or <code>@js(expression)</code>, the latter case explicitly delimits the extent of the expression being parsed by the macro.</p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># input</span>
e <span class="pl-k">=</span> <span class="pl-c1">5.0</span>
g <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>gee!<span class="pl-pds">"</span></span>
<span class="pl-c1">@js</span> {
  a<span class="pl-k">:</span> <span class="pl-c1">1</span>,
  b<span class="pl-k">:</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">3</span>, <span class="pl-k">âˆš</span>],
  c : {
    d<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>doubly-quoted string<span class="pl-pds">"</span></span>,
    e
  },
  f<span class="pl-k">.</span>g<span class="pl-k">:</span> g
}
<span class="pl-c"><span class="pl-c">#</span># results</span>
Dict{String,Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>gee!<span class="pl-pds">"</span></span>)
  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">5.0</span>,<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>doubly-quoted string<span class="pl-pds">"</span></span>)
  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, sqrt]
  <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span></pre></div>
<p>All dicts created in the process are always of type <code>Dict{String,Any}</code>, and all arrays are of type <code>Array{Any}</code>, to cater for future assignments of the elements to different types.</p>
<p>Please note that we can't fully parse all javascript object literals, as Julia can't interpret singly-quoted strings as strings, only single characters can be parsed like this.</p>
<h2><a id="user-content-deep-object-traversal-with-js" class="anchor" aria-hidden="true" href="#deep-object-traversal-with-js"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deep object traversal with <code>@js</code></h2>
<p><code>@js(dotted expression)</code> traverses a hierachical json-like object directly.</p>
<h3><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">@js</span> { b<span class="pl-k">:</span> { c<span class="pl-k">:</span> { d<span class="pl-k">:</span> <span class="pl-c1">4</span> } } }
<span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b<span class="pl-k">.</span>c<span class="pl-k">.</span>d) <span class="pl-k">==</span> <span class="pl-c1">4</span>
<span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b<span class="pl-k">.</span>c) <span class="pl-k">==</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)
<span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b) <span class="pl-k">==</span> <span class="pl-c1">@js</span> { c<span class="pl-k">:</span> { d<span class="pl-k">:</span> <span class="pl-c1">4</span> } }
<span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b) <span class="pl-k">==</span> <span class="pl-c1">@js</span> { c<span class="pl-k">.</span>d<span class="pl-k">:</span> <span class="pl-c1">4</span> }</pre></div>
<p>The RHS in the last expression shows object creation in deep traversal.  Standard javascript does not allow this.</p>
<p>You can mix strings as keys with indices.</p>
<div class="highlight highlight-source-julia"><pre>d <span class="pl-k">=</span> <span class="pl-c1">@js</span> { a<span class="pl-k">:</span> <span class="pl-c1">1</span>, b<span class="pl-k">:</span> [<span class="pl-c1">1</span>, {c<span class="pl-k">:</span> <span class="pl-c1">2</span>}, <span class="pl-c1">3</span>], d<span class="pl-k">:</span> <span class="pl-c1">4</span>}
<span class="pl-c1">@js</span> d<span class="pl-k">.</span>b[<span class="pl-c1">2</span>]<span class="pl-k">.</span>c</pre></div>
<h2><a id="user-content-assignment" class="anchor" aria-hidden="true" href="#assignment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assignment</h2>
<p>You make assignments in the <code>@js</code> expression:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@js</span> a <span class="pl-k">=</span> { b<span class="pl-k">:</span> <span class="pl-c1">3</span> }
<span class="pl-c1">@js</span> a<span class="pl-k">.</span>b <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">@js</span> a<span class="pl-k">.</span>b <span class="pl-k">=</span> { c<span class="pl-k">:</span> <span class="pl-c1">5</span> }
<span class="pl-c1">@js</span> a<span class="pl-k">.</span>b<span class="pl-k">.</span>c <span class="pl-k">=</span> <span class="pl-c1">6</span>
<span class="pl-c1">@js</span> a, b <span class="pl-k">=</span> [ { c<span class="pl-k">:</span> <span class="pl-c1">3</span>}, { d<span class="pl-k">:</span> <span class="pl-c1">4</span>} ]
<span class="pl-c1">@js</span> dict <span class="pl-k">=</span> { d<span class="pl-k">:</span> Ï€, e<span class="pl-k">:</span> [ <span class="pl-c1">1</span>, { f<span class="pl-k">:</span> <span class="pl-c1">2</span>}, <span class="pl-c1">3</span>], c<span class="pl-k">:</span> sin }
<span class="pl-c1">@js</span> { c, d, e } <span class="pl-k">=</span> dict
c <span class="pl-k">==</span> sin <span class="pl-c"><span class="pl-c">#</span># true</span>
d <span class="pl-k">==</span> Ï€ <span class="pl-c"><span class="pl-c">#</span># true</span>
e <span class="pl-k">==</span> [ <span class="pl-c1">1</span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>), <span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span># true</span></pre></div>
<h2><a id="user-content-the-jsobject-struct" class="anchor" aria-hidden="true" href="#the-jsobject-struct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The JSObject struct</h2>
<p>We also have some support for dot-notation of JS-like objects in a native Julia struct.  This might already have been implemented before, and probably better, so please submit an issue "irrelevant code" if you know of any better implementation.</p>
<p>The <code>JSObject</code> struct can wrap a classic Dict/Array based JS-like object, thus providing native Julia support for dot notation, using the <code>getproperty()</code> function.</p>
<p>Examples:</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">JSObject</span>(<span class="pl-c1">@js</span>({ b<span class="pl-k">:</span> { c<span class="pl-k">:</span> { d<span class="pl-k">:</span> <span class="pl-c1">4</span> } } }))
a<span class="pl-k">.</span>b<span class="pl-k">.</span>c<span class="pl-k">.</span>d <span class="pl-k">==</span> <span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">#</span># true</span>
a[<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>c[<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> <span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">#</span># true</span>

a<span class="pl-k">.</span>c <span class="pl-k">=</span> <span class="pl-c1">@js</span> {d<span class="pl-k">:</span> { e<span class="pl-k">:</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>] } }
a<span class="pl-k">.</span>c<span class="pl-k">.</span>d<span class="pl-k">.</span>e[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">6</span> <span class="pl-c"><span class="pl-c">#</span># true</span>

b <span class="pl-k">=</span> <span class="pl-c1">JSObject</span>(<span class="pl-c1">@js</span>([{c<span class="pl-k">:</span> <span class="pl-c1">3</span>}, {d<span class="pl-k">:</span> [<span class="pl-c1">4</span>, {e<span class="pl-k">:</span> <span class="pl-c1">5</span>}]}]))
b[<span class="pl-c1">1</span>]<span class="pl-k">.</span>c <span class="pl-k">==</span> <span class="pl-c1">3</span>
b[<span class="pl-c1">2</span>]<span class="pl-k">.</span>d[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">4</span>
b[<span class="pl-c1">2</span>]<span class="pl-k">.</span>d[<span class="pl-c1">2</span>]<span class="pl-k">.</span>e <span class="pl-k">==</span> <span class="pl-c1">5</span></pre></div>
<p>The <code>JSObject</code> can hold a <code>Dict{String, Any}</code> or a <code>Vector{Any}</code> (or even a plain number or <code>String</code>, but that is not so useful).</p>
<p>In assigning to a member of a <code>JSObject</code>, as in <code>a.c = @js {d: { e: [5, 6]}}</code>, the RHS is automatically wrapped in a <code>JSObject</code> for consistency.</p>
<p>The constructors <code>JSObject()</code> parse all the values, and recursively make them into <code>JSObject</code>s in case they are of type <code>Dict</code> or <code>Vector</code>.  Other types are left as-is, so deeper <code>Int</code>s or floats are not unnecissarily wrapped.</p>
<h3><a id="user-content-exporting-to-a-plain-old-julias-json-structure" class="anchor" aria-hidden="true" href="#exporting-to-a-plain-old-julias-json-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exporting to a plain old Julias JSON structure</h3>
<p>You can access members of the <code>JSObject</code> struct using indexing <code>[]</code> and <code>.</code> notation.  But you may need to export the <code>JSObject</code> as a plain old JSON, consisting of ordinary <code>Dict</code>s and <code>Array</code>s.  You can do that using</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">stripobject</span>(object<span class="pl-k">::</span><span class="pl-c1">JSObject</span>)</pre></div>
<p>In fact, this happens in the <code>show(io::IO, object::JSObject)</code> function to consicely display a variable of type <code>JSObject</code>, using <code>JSON.json()</code>.</p>
</article></div>