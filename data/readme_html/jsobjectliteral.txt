<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jsobjectliteraljl" class="anchor" aria-hidden="true" href="#jsobjectliteraljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JSObjectLiteral.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/davidavdav/JSObjectLiteral.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a25454a433b35fd509939c7d7ef47919544c55cca22e8b1860e808275864990e/68747470733a2f2f7472617669732d63692e6f72672f646176696461766461762f4a534f626a6563744c69746572616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/davidavdav/JSObjectLiteral.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Parse javascript-like object literals in Julia into a Julia object</p>
<p dir="auto">This package provides a macro <code>@js</code> that parses a Julia expression interpreted as javascript, and tries to form a Julia object from that.  You can use javascript shortcuts like <code>@js { a: b }</code> to write <code>Dict("a" =&gt; b)</code> and even <code>@js { a }</code> to write <code>Dict("a" =&gt; a)</code>.</p>
<p dir="auto">I am not sure if this is useful for anything else than for me trying to understand macros and evaluation in Julia...</p>
<h2 dir="auto"><a id="user-content-js-expression" class="anchor" aria-hidden="true" href="#js-expression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@js</code> expression</h2>
<p dir="auto">Parses the Julia expression as a javascript object literal.  It can be called either as <code>@js expression</code> or <code>@js(expression)</code>, the latter case explicitly delimits the extent of the expression being parsed by the macro.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add JSObjectLiteral

julia&gt; using JSObjectLiteral

julia&gt; e = 5.0
5.0

julia&gt; g = &quot;gee!&quot;
&quot;gee!&quot;

julia&gt; @js {
         a: 1,
         b: [2, 3 * 3, √],
         c : {
           d: &quot;doubly-quoted string&quot;,
           e
         },
         f.g: g
       }
Dict{String, Any} with 4 entries:
  &quot;f&quot; =&gt; Dict{String, Any}(&quot;g&quot;=&gt;&quot;gee!&quot;)
  &quot;c&quot; =&gt; Dict{String, Any}(&quot;e&quot;=&gt;5.0, &quot;d&quot;=&gt;&quot;doubly-quoted string&quot;)
  &quot;b&quot; =&gt; Any[2, 9, sqrt]
  &quot;a&quot; =&gt; 1
"><pre>pkg<span class="pl-k">&gt;</span> add JSObjectLiteral

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JSObjectLiteral

julia<span class="pl-k">&gt;</span> e <span class="pl-k">=</span> <span class="pl-c1">5.0</span>
<span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>gee!<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>gee!<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> {
         a<span class="pl-k">:</span> <span class="pl-c1">1</span>,
         b<span class="pl-k">:</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">3</span>, <span class="pl-k">√</span>],
         c <span class="pl-k">:</span> {
           d<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>doubly-quoted string<span class="pl-pds">"</span></span>,
           e
         },
         f<span class="pl-k">.</span>g<span class="pl-k">:</span> g
       }
Dict{String, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>gee!<span class="pl-pds">"</span></span>)
  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">5.0</span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>doubly-quoted string<span class="pl-pds">"</span></span>)
  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, sqrt]
  <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
</pre></div>
<p dir="auto">All dicts created in the process are always of type <code>Dict{String,Any}</code>, and all arrays are of type <code>Array{Any}</code>, to cater for future assignments of the elements to different types.</p>
<p dir="auto">Please note that we can't fully parse all javascript object literals, as Julia can't interpret singly-quoted strings as strings, only single characters can be parsed like this.</p>
<h2 dir="auto"><a id="user-content-deep-object-traversal-with-js" class="anchor" aria-hidden="true" href="#deep-object-traversal-with-js"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deep object traversal with <code>@js</code></h2>
<p dir="auto"><code>@js(dotted expression)</code> traverses a hierachical json-like object directly.</p>
<h3 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = @js { b: { c: { d: 4 } } }
Dict{String, Any} with 1 entry:
  &quot;b&quot; =&gt; Dict{String, Any}(&quot;c&quot;=&gt;Dict{String, Any}(&quot;d&quot;=&gt;4))

julia&gt; @js(a.b.c.d) == 4
true

julia&gt; @js(a.b.c) == Dict(&quot;d&quot; =&gt; 4)
true

julia&gt; @js(a.b) == @js { c: { d: 4 } }
true

julia&gt; @js(a.b) == @js { c.d: 4 }
true
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">@js</span> { b<span class="pl-k">:</span> { c<span class="pl-k">:</span> { d<span class="pl-k">:</span> <span class="pl-c1">4</span> } } }
Dict{String, Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b<span class="pl-k">.</span>c<span class="pl-k">.</span>d) <span class="pl-k">==</span> <span class="pl-c1">4</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b<span class="pl-k">.</span>c) <span class="pl-k">==</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b) <span class="pl-k">==</span> <span class="pl-c1">@js</span> { c<span class="pl-k">:</span> { d<span class="pl-k">:</span> <span class="pl-c1">4</span> } }
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span>(a<span class="pl-k">.</span>b) <span class="pl-k">==</span> <span class="pl-c1">@js</span> { c<span class="pl-k">.</span>d<span class="pl-k">:</span> <span class="pl-c1">4</span> }
<span class="pl-c1">true</span>
</pre></div>
<p dir="auto">The RHS in the last expression shows object creation in deep traversal.  Standard javascript does not allow this.</p>
<p dir="auto">You can mix strings as keys with indices.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d = @js { a: 1, b: [1, {c: 2}, 3], d: 4}
Dict{String, Any} with 3 entries:
  &quot;b&quot; =&gt; Any[1, Dict{String, Any}(&quot;c&quot;=&gt;2), 3]
  &quot;a&quot; =&gt; 1
  &quot;d&quot; =&gt; 4

julia&gt; @js d.b[2].c
2
"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">@js</span> { a<span class="pl-k">:</span> <span class="pl-c1">1</span>, b<span class="pl-k">:</span> [<span class="pl-c1">1</span>, {c<span class="pl-k">:</span> <span class="pl-c1">2</span>}, <span class="pl-c1">3</span>], d<span class="pl-k">:</span> <span class="pl-c1">4</span>}
Dict{String, Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">1</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>), <span class="pl-c1">3</span>]
  <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> d<span class="pl-k">.</span>b[<span class="pl-c1">2</span>]<span class="pl-k">.</span>c
<span class="pl-c1">2</span>
</pre></div>
<h2 dir="auto"><a id="user-content-assignment" class="anchor" aria-hidden="true" href="#assignment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Assignment</h2>
<p dir="auto">You make assignments in the <code>@js</code> expression:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @js a = { b: 3 }
Dict{String, Any} with 1 entry:
  &quot;b&quot; =&gt; 3

julia&gt; @js a.b = 4
4

julia&gt; @js a.b = { c: 5 }
Dict{String, Any} with 1 entry:
  &quot;c&quot; =&gt; 5

julia&gt; @js a.b.c = 6
6

julia&gt; @js a, b = [ { c: 3}, { d: 4} ]
2-element Vector{Any}:
 Dict{String, Any}(&quot;c&quot; =&gt; 3)
 Dict{String, Any}(&quot;d&quot; =&gt; 4)

julia&gt; @js dict = { d: π, e: [ 1, { f: 2}, 3], c: sin }
Dict{String, Any} with 3 entries:
  &quot;c&quot; =&gt; sin
  &quot;e&quot; =&gt; Any[1, Dict{String, Any}(&quot;f&quot;=&gt;2), 3]
  &quot;d&quot; =&gt; π

julia&gt; @js { c, d, e } = dict
3-element Vector{Any}:
  sin (generic function with 13 methods)
 π = 3.1415926535897...
  Any[1, Dict{String, Any}(&quot;f&quot; =&gt; 2), 3]

julia&gt; c == sin ## true
true

julia&gt; d == π ## true
true

julia&gt; e == [ 1, Dict(&quot;f&quot; =&gt; 2), 3] ## true
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> a <span class="pl-k">=</span> { b<span class="pl-k">:</span> <span class="pl-c1">3</span> }
Dict{String, Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> a<span class="pl-k">.</span>b <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> a<span class="pl-k">.</span>b <span class="pl-k">=</span> { c<span class="pl-k">:</span> <span class="pl-c1">5</span> }
Dict{String, Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> a<span class="pl-k">.</span>b<span class="pl-k">.</span>c <span class="pl-k">=</span> <span class="pl-c1">6</span>
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> a, b <span class="pl-k">=</span> [ { c<span class="pl-k">:</span> <span class="pl-c1">3</span>}, { d<span class="pl-k">:</span> <span class="pl-c1">4</span>} ]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)
 <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> dict <span class="pl-k">=</span> { d<span class="pl-k">:</span> π, e<span class="pl-k">:</span> [ <span class="pl-c1">1</span>, { f<span class="pl-k">:</span> <span class="pl-c1">2</span>}, <span class="pl-c1">3</span>], c<span class="pl-k">:</span> sin }
Dict{String, Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> sin
  <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">1</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>), <span class="pl-c1">3</span>]
  <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> π

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> { c, d, e } <span class="pl-k">=</span> dict
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
  sin (generic <span class="pl-k">function</span> with <span class="pl-c1">13</span> methods)
 π <span class="pl-k">=</span> <span class="pl-c1">3.1415926535897</span><span class="pl-k">...</span>
  Any[<span class="pl-c1">1</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>), <span class="pl-c1">3</span>]

julia<span class="pl-k">&gt;</span> c <span class="pl-k">==</span> sin <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> d <span class="pl-k">==</span> π <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> e <span class="pl-k">==</span> [ <span class="pl-c1">1</span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>), <span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span>
</pre></div>
<h2 dir="auto"><a id="user-content-the-jsobject-struct" class="anchor" aria-hidden="true" href="#the-jsobject-struct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The JSObject struct</h2>
<p dir="auto">We also have some support for dot-notation of JS-like objects in a native Julia struct.  This might already have been implemented before, and probably better, so please submit an issue "irrelevant code" if you know of any better implementation.</p>
<p dir="auto">The <code>JSObject</code> struct can wrap a classic Dict/Array based JS-like object, thus providing native Julia support for dot notation, using the <code>getproperty()</code> function.</p>
<p dir="auto">Examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = JSObject(@js({ b: { c: { d: 4 } } }))
{&quot;b&quot;:{&quot;c&quot;:{&quot;d&quot;:4}}}

julia&gt; a.b.c.d == 4 ## true
true

julia&gt; a[&quot;b&quot;].c[&quot;d&quot;] == 4 ## true
true

julia&gt; a.c = @js {d: { e: [5, 6] } }
Dict{String, Any} with 1 entry:
  &quot;d&quot; =&gt; Dict{String, Any}(&quot;e&quot;=&gt;Any[5, 6])

julia&gt; a.c.d.e[2] == 6 ## true
true

julia&gt; b = JSObject(@js([{c: 3}, {d: [4, {e: 5}]}]))
[{&quot;c&quot;:3},{&quot;d&quot;:[4,{&quot;e&quot;:5}]}]

julia&gt; b[1].c == 3
true

julia&gt; b[2].d[1] == 4
true

julia&gt; b[2].d[2].e == 5
true
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">JSObject</span>(<span class="pl-c1">@js</span>({ b<span class="pl-k">:</span> { c<span class="pl-k">:</span> { d<span class="pl-k">:</span> <span class="pl-c1">4</span> } } }))
{<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>:<span class="pl-c1">4</span>}}}

julia<span class="pl-k">&gt;</span> a<span class="pl-k">.</span>b<span class="pl-k">.</span>c<span class="pl-k">.</span>d <span class="pl-k">==</span> <span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> a[<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>c[<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> <span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> a<span class="pl-k">.</span>c <span class="pl-k">=</span> <span class="pl-c1">@js</span> {d<span class="pl-k">:</span> { e<span class="pl-k">:</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>] } }
Dict{String, Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>Any[<span class="pl-c1">5</span>, <span class="pl-c1">6</span>])

julia<span class="pl-k">&gt;</span> a<span class="pl-k">.</span>c<span class="pl-k">.</span>d<span class="pl-k">.</span>e[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">6</span> <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">JSObject</span>(<span class="pl-c1">@js</span>([{c<span class="pl-k">:</span> <span class="pl-c1">3</span>}, {d<span class="pl-k">:</span> [<span class="pl-c1">4</span>, {e<span class="pl-k">:</span> <span class="pl-c1">5</span>}]}]))
[{<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>:<span class="pl-c1">3</span>},{<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>:[<span class="pl-c1">4</span>,{<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>:<span class="pl-c1">5</span>}]}]

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">1</span>]<span class="pl-k">.</span>c <span class="pl-k">==</span> <span class="pl-c1">3</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">2</span>]<span class="pl-k">.</span>d[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">4</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">2</span>]<span class="pl-k">.</span>d[<span class="pl-c1">2</span>]<span class="pl-k">.</span>e <span class="pl-k">==</span> <span class="pl-c1">5</span>
<span class="pl-c1">true</span>
</pre></div>
<p dir="auto">The <code>JSObject</code> can hold a <code>Dict{String, Any}</code> or a <code>Vector{Any}</code> (or even a plain number or <code>String</code>, but that is not so useful).</p>
<p dir="auto">In assigning to a member of a <code>JSObject</code>, as in <code>a.c = @js {d: { e: [5, 6]}}</code>, the RHS is automatically wrapped in a <code>JSObject</code> for consistency.</p>
<p dir="auto">The constructors <code>JSObject()</code> parse all the values, and recursively make them into <code>JSObject</code>s in case they are of type <code>Dict</code> or <code>Vector</code>.  Other types are left as-is, so deeper <code>Int</code>s or floats are not unnecessarily wrapped.</p>
<h3 dir="auto"><a id="user-content-exporting-to-a-plain-old-julia-json-structure" class="anchor" aria-hidden="true" href="#exporting-to-a-plain-old-julia-json-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exporting to a plain old Julia JSON structure</h3>
<p dir="auto">You can access members of the <code>JSObject</code> struct using indexing <code>[]</code> and <code>.</code> notation.  But you may need to export the <code>JSObject</code> as a plain old JSON, consisting of ordinary <code>Dict</code>s and <code>Array</code>s.  You can do that using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; stripobject(b)
2-element Vector{Any}:
 Dict{String, Any}(&quot;c&quot; =&gt; 3)
 Dict{String, Any}(&quot;d&quot; =&gt; Any[4, Dict{String, Any}(&quot;e&quot; =&gt; 5)])
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">stripobject</span>(b)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)
 <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">4</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>)])
</pre></div>
<p dir="auto">In fact, this happens in the <code>show(io::IO, object::JSObject)</code> function to concisely display a variable of type <code>JSObject</code>, using <code>JSON.json()</code>.</p>
</article></div>