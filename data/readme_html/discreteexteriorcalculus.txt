<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-discreteexteriorcalculusjl" class="anchor" aria-hidden="true" href="#discreteexteriorcalculusjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiscreteExteriorCalculus.jl</h1>
<p><a href="https://travis-ci.com/rigetti/DiscreteExteriorCalculus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4f921242cc9ab4a7c9f5c936c2635bf89399d898182fc37e041fa5056785c5c4/68747470733a2f2f7472617669732d63692e636f6d2f726967657474692f44697363726574654578746572696f7243616c63756c75732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/rigetti/DiscreteExteriorCalculus.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>DiscreteExteriorCalculus.jl is a package implementing <a href="https://en.wikipedia.org/wiki/Discrete_exterior_calculus" rel="nofollow">Discrete Exterior Calculus</a>. Data structures for cell complexes, primal, and dual meshes are provided along with implementations of the <a href="https://en.wikipedia.org/wiki/Exterior_derivative" rel="nofollow">exterior derivative</a>,
<a href="https://en.wikipedia.org/wiki/Hodge_star_operator" rel="nofollow">hodge star</a>, <a href="https://en.wikipedia.org/wiki/Hodge_star_operator#On_manifolds" rel="nofollow">codifferential</a>, and <a href="https://en.wikipedia.org/wiki/Laplace%E2%80%93Beltrami_operator#Laplace%E2%80%93de_Rham_operator" rel="nofollow">Laplace-de Rham</a> operators.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Clone the repository from GitHub and install Julia 1.1. No build is required beyond the default Julia compilation.</p>
<h2><a id="user-content-example-usage-modes-of-the-laplace-de-rham-operator-on-a-rectangle-with-dirichlet-boundary-conditions" class="anchor" aria-hidden="true" href="#example-usage-modes-of-the-laplace-de-rham-operator-on-a-rectangle-with-dirichlet-boundary-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage: modes of the Laplace-de Rham operator on a rectangle with Dirichlet boundary conditions</h2>
<p>See <code>test/test_laplacian_rectangle.jl</code> for a more complete version of this example. Also see <a href="https://github.com/rigetti/DiscretePDEs.jl">DiscretePDEs.jl</a> for more examples.</p>
<p>Import packages.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DiscreteExteriorCalculus
const DEC = DiscreteExteriorCalculus
using LinearAlgebra: eigen
using AdmittanceModels: sparse_nullbasis
using Base.Iterators: product
using PlotlyJS: plot, heatmap
"><pre><span class="pl-k">using</span> DiscreteExteriorCalculus
<span class="pl-k">const</span> DEC <span class="pl-k">=</span> DiscreteExteriorCalculus
<span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> eigen
<span class="pl-k">using</span> AdmittanceModels<span class="pl-k">:</span> sparse_nullbasis
<span class="pl-k">using</span> Base<span class="pl-k">.</span>Iterators<span class="pl-k">:</span> product
<span class="pl-k">using</span> PlotlyJS<span class="pl-k">:</span> plot, heatmap</pre></div>
<p>Create a rectangular grid that is r1×r2, then subdivide each rectangle into two triangles. Collect these into a cell complex.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r1, r2 = .5, .4
num = 40
points, tcomp = DEC.triangulated_lattice([r1, 0], [0, r2], num, num)
"><pre>r1, r2 <span class="pl-k">=</span> <span class="pl-c1">.5</span>, <span class="pl-c1">.4</span>
num <span class="pl-k">=</span> <span class="pl-c1">40</span>
points, tcomp <span class="pl-k">=</span> DEC<span class="pl-k">.</span><span class="pl-c1">triangulated_lattice</span>([r1, <span class="pl-c1">0</span>], [<span class="pl-c1">0</span>, r2], num, num)</pre></div>
<p>Orient the cell complex positively and compute the dual mesh.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="orient!(tcomp.complex)
m = Metric(2)
mesh = Mesh(tcomp, circumcenter(m))
"><pre><span class="pl-c1">orient!</span>(tcomp<span class="pl-k">.</span>complex)
m <span class="pl-k">=</span> <span class="pl-c1">Metric</span>(<span class="pl-c1">2</span>)
mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(tcomp, <span class="pl-c1">circumcenter</span>(m))</pre></div>
<p>Compute the Laplace-de Rham operator for 0-forms and a sparse nullbasis for the constraint that the 0-form goes to 0 on the boundary.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="laplacian = differential_operator(m, mesh, &quot;Δ&quot;, 1, true)
comp = tcomp.complex
_, exterior = boundary_components_connected(comp)
constraint = zero_constraint(comp, exterior.cells[1], 1)
nullbasis = sparse_nullbasis(constraint)
"><pre>laplacian <span class="pl-k">=</span> <span class="pl-c1">differential_operator</span>(m, mesh, <span class="pl-s"><span class="pl-pds">"</span>Δ<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>, <span class="pl-c1">true</span>)
comp <span class="pl-k">=</span> tcomp<span class="pl-k">.</span>complex
_, exterior <span class="pl-k">=</span> <span class="pl-c1">boundary_components_connected</span>(comp)
constraint <span class="pl-k">=</span> <span class="pl-c1">zero_constraint</span>(comp, exterior<span class="pl-k">.</span>cells[<span class="pl-c1">1</span>], <span class="pl-c1">1</span>)
nullbasis <span class="pl-k">=</span> <span class="pl-c1">sparse_nullbasis</span>(constraint)</pre></div>
<p>Compute the eigenvalues and eigenvectors of the restricted Laplace-de Rham operator.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vals, vects = eigen(collect(transpose(nullbasis) * laplacian * nullbasis))
inds = sortperm(vals)
vals, vects = vals[inds], vects[:, inds]
"><pre>vals, vects <span class="pl-k">=</span> <span class="pl-c1">eigen</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">transpose</span>(nullbasis) <span class="pl-k">*</span> laplacian <span class="pl-k">*</span> nullbasis))
inds <span class="pl-k">=</span> <span class="pl-c1">sortperm</span>(vals)
vals, vects <span class="pl-k">=</span> vals[inds], vects[:, inds]</pre></div>
<p>Lift the eigenvectors back to the original space and reshape for plotting.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="comp_points = [c.points[1] for c in comp.cells[1]]
ordering = [findfirst(isequal(p), comp_points) for p in points]
vs = [collect(transpose(reshape((nullbasis * vects[:,i])[ordering],
    num+1, num+1))) for i in 1:size(vects, 2)]
for i in 1:length(vs)
    j = argmax(abs.(vs[i]))
    vs[i] /= vs[i][j]
end
"><pre>comp_points <span class="pl-k">=</span> [c<span class="pl-k">.</span>points[<span class="pl-c1">1</span>] <span class="pl-k">for</span> c <span class="pl-k">in</span> comp<span class="pl-k">.</span>cells[<span class="pl-c1">1</span>]]
ordering <span class="pl-k">=</span> [<span class="pl-c1">findfirst</span>(<span class="pl-c1">isequal</span>(p), comp_points) <span class="pl-k">for</span> p <span class="pl-k">in</span> points]
vs <span class="pl-k">=</span> [<span class="pl-c1">collect</span>(<span class="pl-c1">transpose</span>(<span class="pl-c1">reshape</span>((nullbasis <span class="pl-k">*</span> vects[:,i])[ordering],
    num<span class="pl-k">+</span><span class="pl-c1">1</span>, num<span class="pl-k">+</span><span class="pl-c1">1</span>))) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(vects, <span class="pl-c1">2</span>)]
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(vs)
    j <span class="pl-k">=</span> <span class="pl-c1">argmax</span>(<span class="pl-c1">abs</span>.(vs[i]))
    vs[i] <span class="pl-k">/=</span> vs[i][j]
<span class="pl-k">end</span></pre></div>
<p>Plot the first eigenvector.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(heatmap(z=vs[1]))
"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">heatmap</span>(z<span class="pl-k">=</span>vs[<span class="pl-c1">1</span>]))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Mode1.png"><img src="docs/Mode1.png" alt="" style="max-width:100%;"></a></p>
<p>Plot the second eigenvector.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(heatmap(z=vs[2]))
"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">heatmap</span>(z<span class="pl-k">=</span>vs[<span class="pl-c1">2</span>]))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Mode2.png"><img src="docs/Mode2.png" alt="" style="max-width:100%;"></a></p>
<p>Plot the third eigenvector.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(heatmap(z=vs[3]))
"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">heatmap</span>(z<span class="pl-k">=</span>vs[<span class="pl-c1">3</span>]))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Mode3.png"><img src="docs/Mode3.png" alt="" style="max-width:100%;"></a></p>
<p>Plot the fourth eigenvector.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(heatmap(z=vs[4]))
"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">heatmap</span>(z<span class="pl-k">=</span>vs[<span class="pl-c1">4</span>]))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Mode4.png"><img src="docs/Mode4.png" alt="" style="max-width:100%;"></a></p>
<p>And so on.</p>
</article></div>