<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-parsersjl" class="anchor" aria-hidden="true" href="#parsersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parsers.jl</h1>
<p><a href="https://github.com/JuliaData/Parsers.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaData/Parsers.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaData/Parsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6c0e1be9a2d18376e0448bfeef9c14561ae0e3175e10f361ec5c968c1123136b/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961446174612f506172736572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaData/Parsers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/Parsers/833b9?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/be2a2ebfebd7bb09cb410f2a2a33f7c6ff9e51420924efa2287aa5a5e388c994/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506172736572732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Parsers/deps.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/Parsers/833b9" rel="nofollow"><img src="https://camo.githubusercontent.com/af3cc01787488aa851c94b5d558dbebef228ad2354c856a1a3b315f9888846fe/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506172736572732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Parsers/version.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/Parsers/833b9" rel="nofollow"><img src="https://camo.githubusercontent.com/dd76b1d50fd4d2524cca3a2d18af85c53c9a5120f6773f3ec3dd64cbf58375f2/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506172736572732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/Parsers/pkgeval.svg" style="max-width:100%;"></a></p>
<p>A collection of type parsers and utilities for Julia.</p>
<p><strong>Installation</strong>: at the Julia REPL, <code>import Pkg; Pkg.add("Parsers")</code></p>
<p><strong>Maintenance</strong>: Parsers is maintained collectively by the <a href="https://github.com/orgs/JuliaData/people">JuliaData collaborators</a>.
Responsiveness to pull requests and issues can vary, depending on the availability of key collaborators.</p>
<h3><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Parsers

# basic int/float parsing
x = Parsers.parse(Int, &quot;101&quot;)
y = Parsers.parse(Float64, &quot;101.101&quot;)

# use comma as decimal
y2 = Parsers.parse(Float64, &quot;101,101&quot;, Parsers.Options(decimal=','))

# Bool parsing
z = Parsers.parse(Bool, &quot;true&quot;)

# Date/DateTime parsing
using Dates
a = Parsers.parse(Date, &quot;2018-01-01&quot;)

# custom dateformat
b = Parsers.parse(Date, &quot;01/20/2018&quot;, Parsers.Options(dateformat=&quot;mm/dd/yyyy&quot;))

# will throw on invalid values
Parsers.parse(Int, &quot;abc&quot;)

# tryparse will return `nothing` on invalid values
y = Parsers.tryparse(Int, &quot;abc&quot;)
"><pre><span class="pl-k">using</span> Parsers

<span class="pl-c"><span class="pl-c">#</span> basic int/float parsing</span>
x <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Int, <span class="pl-s"><span class="pl-pds">"</span>101<span class="pl-pds">"</span></span>)
y <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Float64, <span class="pl-s"><span class="pl-pds">"</span>101.101<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> use comma as decimal</span>
y2 <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Float64, <span class="pl-s"><span class="pl-pds">"</span>101,101<span class="pl-pds">"</span></span>, Parsers<span class="pl-k">.</span><span class="pl-c1">Options</span>(decimal<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Bool parsing</span>
z <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Bool, <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Date/DateTime parsing</span>
<span class="pl-k">using</span> Dates
a <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Date, <span class="pl-s"><span class="pl-pds">"</span>2018-01-01<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> custom dateformat</span>
b <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Date, <span class="pl-s"><span class="pl-pds">"</span>01/20/2018<span class="pl-pds">"</span></span>, Parsers<span class="pl-k">.</span><span class="pl-c1">Options</span>(dateformat<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mm/dd/yyyy<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> will throw on invalid values</span>
Parsers<span class="pl-k">.</span><span class="pl-c1">parse</span>(Int, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> tryparse will return `nothing` on invalid values</span>
y <span class="pl-k">=</span> Parsers<span class="pl-k">.</span><span class="pl-c1">tryparse</span>(Int, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-additional-usage" class="anchor" aria-hidden="true" href="#additional-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional usage</h3>
<p>Read through the docs of the following types/functions for more information on using advanced Parsers machinery:</p>
<ul>
<li><code>?Parsers.Options</code></li>
<li><code>?Parsers.xparse</code></li>
<li><code>?Parsers.ReturnCode</code></li>
</ul>
</article></div>