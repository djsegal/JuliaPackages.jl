<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pyfooofjl" class="anchor" aria-hidden="true" href="#pyfooofjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PyFOOOF.jl</h1>
<p dir="auto">Julia interface to <a href="https://github.com/fooof-tools/fooof">FOOOF</a></p>
<p dir="auto"><a href="https://github.com/beacon-biosignals/PyFOOOF.jl/actions"><img src="https://github.com/beacon-biosignals/PyFOOOF.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/github/beacon-biosignals/PyFOOOF.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/996ba0cfd8f1cfbda5bfd3b5dea1b67a34350fcb20468eb8dfc0151704715838/68747470733a2f2f636f6465636f762e696f2f6769746875622f626561636f6e2d62696f7369676e616c732f5079464f4f4f462e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="CodeCov" data-canonical-src="https://codecov.io/github/beacon-biosignals/PyFOOOF.jl/badge.svg?branch=main" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package uses <a href="https://github.com/JuliaPy/PyCall.jl/"><code>PyCall</code></a> to make
<a href="https://fooof-tools.github.io/fooof/index.html" rel="nofollow">FOOOF</a> available from within Julia.
Unsurprisingly, FOOOF and its dependencies need to be installed in order for this to work
and PyFOOOF will attempt to install when the package is built.</p>
<p dir="auto">By default, this installation happens in the "global" path for the Python used
by PyCall. If you're using PyCall via its hidden Miniconda install, your own
Anaconda environment, or a Python virtual environment, this is what you want.
(The "global" path is sandboxed to the Conda/virtual environment.) If you are
however using system Python, then you should set <code>ENV["PIPFLAGS"] = "--user"</code>
before <code>add</code>ing / <code>build</code>ing the package. By default, PyFOOOF will use the latest
FOOOF 1.x release available on <a href="https://pypi.org/project/FOOOF/" rel="nofollow">PyPI</a>, but this can also
be changed via the <code>ENV["FOOOFVERSION"] = version_number</code> for your preferred
<code>version_number</code>.</p>
<p dir="auto">Note that FOOOF uses <a href="https://matplotlib.org/" rel="nofollow"><code>matplotlib</code></a> for plotting, but does not install it automatically as a dependency.
The Julia package <a href="https://github.com/JuliaPy/PyPlot.jl"><code>PyPlot</code></a>, which provides a Julia interface to <code>matplotlib</code>, is useful for installing <code>matplotlib</code> and manipulating the rendered plots.</p>
<p dir="auto">FOOOF can also be installed manually ahead of time.
From the shell, use <code>python -m pip install fooof</code> for the latest stable release
or <code>python -m pip install fooof==version_number</code> for a given <code>version_number</code>,
ensuring  that <code>python</code> is the same one that PyCall is using. Alternatively,
you can run this from within Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PyCall
julia&gt; pip = pyimport(&quot;pip&quot;);

julia&gt; pip.main([&quot;install&quot;, &quot;fooof==version_number&quot;]); # specific version"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyCall
julia<span class="pl-k">&gt;</span> pip <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>pip<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> pip<span class="pl-k">.</span><span class="pl-c1">main</span>([<span class="pl-s"><span class="pl-pds">"</span>install<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>fooof==version_number<span class="pl-pds">"</span></span>]); <span class="pl-c"><span class="pl-c">#</span> specific version</span></pre></div>
<p dir="auto">If you do not specify a version via <code>==version</code>, then the latest versions will be
installed. If you wish to upgrade versions, you can use
<code>python -m pip install --upgrade fooof</code> or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PyCall

julia&gt; pip = pyimport(&quot;pip&quot;);

julia&gt; pip.main([&quot;install&quot;, &quot;--upgrade&quot;, &quot;FOOOF&quot;]);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyCall

julia<span class="pl-k">&gt;</span> pip <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>pip<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> pip<span class="pl-k">.</span><span class="pl-c1">main</span>([<span class="pl-s"><span class="pl-pds">"</span>install<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>--upgrade<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>FOOOF<span class="pl-pds">"</span></span>]);</pre></div>
<p dir="auto">You can test your setup with <code>using PyCall; pyimport("fooof")</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">In the same philosophy as PyCall, this allows for the transparent use of
FOOOF from within Julia.
The major things the package does are wrap the installation of FOOOF in the
package <code>build</code> step, load all the FOOOF functionality into the module namespace,
and provide a few accessors.</p>
<h3 dir="auto"><a id="user-content-exposing-fooof-in-julia" class="anchor" aria-hidden="true" href="#exposing-fooof-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exposing FOOOF in Julia</h3>
<p dir="auto">For example, in Python you can create a new FOOOF model like this:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; import fooof

&gt;&gt;&gt; fm = fooof.FOOOF()"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">fooof</span>

<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">fm</span> <span class="pl-c1">=</span> <span class="pl-s1">fooof</span>.<span class="pl-v">FOOOF</span>()</pre></div>
<p dir="auto">With PyFOOOF, you can do this from within Julia.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PyFOOOF

julia&gt; fm = PyFOOOF.FOOOF();"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyFOOOF

julia<span class="pl-k">&gt;</span> fm <span class="pl-k">=</span> PyFOOOF<span class="pl-k">.</span><span class="pl-c1">FOOOF</span>();</pre></div>
<p dir="auto">The PyCall infrastructure also means that Python docstrings are available
in Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="help?&gt; PyFOOOF.FOOOF
Model a physiological power spectrum as a combination of aperiodic and periodic components.

    WARNING: FOOOF expects frequency and power values in linear space.

    Passing in logged frequencies and/or power spectra is not detected,
    and will silently produce incorrect results.

    Parameters
    ----------
    peak_width_limits : tuple of (float, float), optional, default: (0.5, 12.0)
        Limits on possible peak width, in Hz, as (lower_bound, upper_bound).
    max_n_peaks : int, optional, default: inf
        Maximum number of peaks to fit.
    min_peak_height : float, optional, default: 0
        Absolute threshold for detecting peaks, in units of the input data.
    peak_threshold : float, optional, default: 2.0
        Relative threshold for detecting peaks, in units of standard deviation of the input data.
    aperiodic_mode : {'fixed', 'knee'}
        Which approach to take for fitting the aperiodic component.
    verbose : bool, optional, default: True
        Verbosity mode. If True, prints out warnings and general status updates.

    Attributes
    ----------
    freqs : 1d array
        Frequency values for the power spectrum.
    power_spectrum : 1d array
        Power values, stored internally in log10 scale.
    freq_range : list of [float, float]
        Frequency range of the power spectrum, as [lowest_freq, highest_freq].
    freq_res : float
        Frequency resolution of the power spectrum.
    fooofed_spectrum_ : 1d array
        The full model fit of the power spectrum, in log10 scale.
    aperiodic_params_ : 1d array
        Parameters that define the aperiodic fit. As [Offset, (Knee), Exponent].
        The knee parameter is only included if aperiodic component is fit with a knee.
    peak_params_ : 2d array
        Fitted parameter values for the peaks. Each row is a peak, as [CF, PW, BW].
    gaussian_params_ : 2d array
        Parameters that define the gaussian fit(s).
        Each row is a gaussian, as [mean, height, standard deviation].
    r_squared_ : float
        R-squared of the fit between the input power spectrum and the full model fit.
    error_ : float
        Error of the full model fit.
    n_peaks_ : int
        The number of peaks fit in the model.
    has_data : bool
        Whether data is loaded to the object.
    has_model : bool
        Whether model results are available in the object.

    Notes
    -----
    - Commonly used abbreviations used in this module include:
      CF: center frequency, PW: power, BW: Bandwidth, AP: aperiodic
    - Input power spectra must be provided in linear scale.
      Internally they are stored in log10 scale, as this is what the model operates upon.
    - Input power spectra should be smooth, as overly noisy power spectra may lead to bad fits.
      For example, raw FFT inputs are not appropriate. Where possible and appropriate, use
      longer time segments for power spectrum calculation to get smoother power spectra,
      as this will give better model fits.
    - The gaussian params are those that define the gaussian of the fit, where as the peak
      params are a modified version, in which the CF of the peak is the mean of the gaussian,
      the PW of the peak is the height of the gaussian over and above the aperiodic component,
      and the BW of the peak, is 2*std of the gaussian (as 'two sided' bandwidth)."><pre>help?<span class="pl-k">&gt;</span> PyFOOOF<span class="pl-k">.</span>FOOOF
Model a physiological power spectrum <span class="pl-k">as</span> a combination of aperiodic and periodic components.

    WARNING<span class="pl-k">:</span> FOOOF expects frequency and power values <span class="pl-k">in</span> linear space.

    Passing <span class="pl-k">in</span> logged frequencies and<span class="pl-k">/</span>or power spectra is not detected,
    and will silently produce incorrect results.

    Parameters
    <span class="pl-k">----------</span>
    peak_width_limits <span class="pl-k">:</span> tuple of (float, float), optional, default<span class="pl-k">:</span> (<span class="pl-c1">0.5</span>, <span class="pl-c1">12.0</span>)
        Limits on possible peak width, <span class="pl-k">in</span> Hz, as (lower_bound, upper_bound)<span class="pl-k">.</span>
    max_n_peaks <span class="pl-k">:</span> int, optional, default<span class="pl-k">:</span> inf
        Maximum number of peaks to fit.
    min_peak_height <span class="pl-k">:</span> float, optional, default<span class="pl-k">:</span> <span class="pl-c1">0</span>
        Absolute threshold <span class="pl-k">for</span> detecting peaks, <span class="pl-k">in</span> units of the input data.
    peak_threshold <span class="pl-k">:</span> float, optional, default<span class="pl-k">:</span> <span class="pl-c1">2.0</span>
        Relative threshold <span class="pl-k">for</span> detecting peaks, <span class="pl-k">in</span> units of standard deviation of the input data.
    aperiodic_mode <span class="pl-k">:</span> {<span class="pl-s"><span class="pl-pds">'</span>fixed<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>knee<span class="pl-pds">'</span></span>}
        Which approach to take <span class="pl-k">for</span> fitting the aperiodic component.
    verbose <span class="pl-k">:</span> bool, optional, default<span class="pl-k">:</span> True
        Verbosity mode. If True, prints out warnings and general status updates.

    Attributes
    <span class="pl-k">----------</span>
    freqs <span class="pl-k">:</span> <span class="pl-c1">1</span>d array
        Frequency values <span class="pl-k">for</span> the power spectrum.
    power_spectrum <span class="pl-k">:</span> <span class="pl-c1">1</span>d array
        Power values, stored internally <span class="pl-k">in</span> log10 scale.
    freq_range <span class="pl-k">:</span> list of [float, float]
        Frequency range of the power spectrum, as [lowest_freq, highest_freq]<span class="pl-k">.</span>
    freq_res <span class="pl-k">:</span> float
        Frequency resolution of the power spectrum.
    fooofed_spectrum_ <span class="pl-k">:</span> <span class="pl-c1">1</span>d array
        The full model fit of the power spectrum, <span class="pl-k">in</span> log10 scale.
    aperiodic_params_ <span class="pl-k">:</span> <span class="pl-c1">1</span>d array
        Parameters that define the aperiodic fit. As [Offset, (Knee), Exponent]<span class="pl-k">.</span>
        The knee parameter is only included <span class="pl-k">if</span> aperiodic component is fit with a knee.
    peak_params_ <span class="pl-k">:</span> <span class="pl-c1">2</span>d array
        Fitted parameter values <span class="pl-k">for</span> the peaks. Each row is a peak, as [CF, PW, BW]<span class="pl-k">.</span>
    gaussian_params_ <span class="pl-k">:</span> <span class="pl-c1">2</span>d array
        Parameters that define the gaussian <span class="pl-c1">fit</span>(s).
        Each row is a gaussian, as [mean, height, standard deviation]<span class="pl-k">.</span>
    r_squared_ <span class="pl-k">:</span> float
        R<span class="pl-k">-</span>squared of the fit between the input power spectrum and the full model fit.
    error_ <span class="pl-k">:</span> float
        Error of the full model fit.
    n_peaks_ <span class="pl-k">:</span> int
        The number of peaks fit <span class="pl-k">in</span> the model.
    has_data <span class="pl-k">:</span> bool
        Whether data is loaded to the object.
    has_model <span class="pl-k">:</span> bool
        Whether model results are available <span class="pl-k">in</span> the object.

    Notes
    <span class="pl-k">-----</span>
    <span class="pl-k">-</span> Commonly used abbreviations used <span class="pl-k">in</span> this <span class="pl-k">module</span> include<span class="pl-k">:</span>
      CF<span class="pl-k">:</span> center frequency, PW<span class="pl-k">:</span> power, BW<span class="pl-k">:</span> Bandwidth, AP<span class="pl-k">:</span> aperiodic
    <span class="pl-k">-</span> Input power spectra must be provided <span class="pl-k">in</span> linear scale.
      Internally they are stored <span class="pl-k">in</span> log10 scale, as this is what the model operates upon.
    <span class="pl-k">-</span> Input power spectra should be smooth, as overly noisy power spectra may lead to bad fits.
      For example, raw FFT inputs are not appropriate. Where possible and appropriate, use
      longer time segments <span class="pl-k">for</span> power spectrum calculation to get smoother power spectra,
      as this will give better model fits.
    <span class="pl-k">-</span> The gaussian params are those that define the gaussian of the fit, <span class="pl-k">where</span> <span class="pl-k">as</span> the peak
      params are a modified version, <span class="pl-k">in</span> which the CF of the peak is the mean of the gaussian,
      the PW of the peak is the height of the gaussian over and above the aperiodic component,
      and the BW of the peak, is <span class="pl-c1">2</span><span class="pl-k">*</span>std of the gaussian (as <span class="pl-s"><span class="pl-pds">'</span>two sided<span class="pl-pds">'</span></span> bandwidth)<span class="pl-k">.</span></pre></div>
<h3 dir="auto"><a id="user-content-helping-with-type-conversions" class="anchor" aria-hidden="true" href="#helping-with-type-conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Helping with type conversions</h3>
<p dir="auto">PyCall can be rather aggressive in converting standard types, such as
dictionaries, to their native Julia equivalents, but this can create problems
due to differences in the way inheritance is traditionally used between
languages.
In particular, Julia arrays are converted to NumPy arrays and <em>not</em> Python lists.
This conversion creates problems where FOOOF expects a list and not an array, for example in the <code>freq_range</code> keyword argument:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fm = FOOOF(; peak_width_limits=[1,8])
ERROR: PyError ($(Expr(:escape, :(ccall(#= /home/ubuntu/.julia/packages/PyCall/BD546/src/pyfncall.jl:43 =# @pysym(:PyObject_Call), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) &lt;class 'ValueError'&gt;
ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')
  File &quot;/home/ubuntu/anaconda3/lib/python3.8/site-packages/fooof/objs/fit.py&quot;, line 193, in __init__
    self._reset_internal_settings()
  File &quot;/home/ubuntu/anaconda3/lib/python3.8/site-packages/fooof/objs/fit.py&quot;, line 236, in _reset_internal_settings
    if self.peak_width_limits:
..."><pre>julia<span class="pl-k">&gt;</span> fm <span class="pl-k">=</span> <span class="pl-c1">FOOOF</span>(; peak_width_limits<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">8</span>])
ERROR<span class="pl-k">:</span> PyError (<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:escape</span>, :(<span class="pl-c1">ccall</span>(<span class="pl-c"><span class="pl-c">#=</span> /home/ubuntu/.julia/packages/PyCall/BD546/src/pyfncall.jl:43 <span class="pl-c">=#</span></span> <span class="pl-c1">@pysym</span>(<span class="pl-c1">:PyObject_Call</span>), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>ValueError<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>
<span class="pl-c1">ValueError</span>(<span class="pl-s"><span class="pl-pds">'</span>The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()<span class="pl-pds">'</span></span>)
  File <span class="pl-s"><span class="pl-pds">"</span>/home/ubuntu/anaconda3/lib/python3.8/site-packages/fooof/objs/fit.py<span class="pl-pds">"</span></span>, line <span class="pl-c1">193</span>, <span class="pl-k">in</span> __init__
    self<span class="pl-k">.</span><span class="pl-c1">_reset_internal_settings</span>()
  File <span class="pl-s"><span class="pl-pds">"</span>/home/ubuntu/anaconda3/lib/python3.8/site-packages/fooof/objs/fit.py<span class="pl-pds">"</span></span>, line <span class="pl-c1">236</span>, <span class="pl-k">in</span> _reset_internal_settings
    <span class="pl-k">if</span> self<span class="pl-k">.</span>peak_width_limits<span class="pl-k">:</span>
<span class="pl-k">...</span></pre></div>
<p dir="auto">(The particular problem arises here because FOOOF is depending on the Python's automatic conversion of <code>None</code> and empty lists to <code>False</code> and non-empty lists to <code>True</code>.)</p>
<p dir="auto">Note that simply wrapping the array as a Python literal (<code>py"[1,8]"</code>) does not suffice because this is converted to a Julia vector and thus then to a NumPy array when passed back to Python. Instead, we have to force PyCall to not convert the resulting Python object with the <code>o</code> suffix:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fm = FOOOF(; peak_width_limits=py&quot;[1,8]&quot;o)
PyObject &lt;fooof.objs.fit.FOOOF object at 0x7fea38b5b040&gt;"><pre>julia<span class="pl-k">&gt;</span> fm <span class="pl-k">=</span> <span class="pl-c1">FOOOF</span>(; peak_width_limits<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">py</span>"</span>[1,8]<span class="pl-pds">"</span><span class="pl-c1">o</span></span>)
PyObject <span class="pl-k">&lt;</span>fooof<span class="pl-k">.</span>objs<span class="pl-k">.</span>fit<span class="pl-k">.</span>FOOOF object at <span class="pl-c1">0x7fea38b5b040</span><span class="pl-k">&gt;</span></pre></div>
<p dir="auto">Another conversion problem arises in cases where nesting lists and eltypes creates problems.
For example, the <a href="https://fooof-tools.github.io/fooof/auto_tutorials/plot_07-TroubleShooting.html" rel="nofollow">FOOOF tutorial "Tuning and Troubleshooting"</a> includes this statement</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt;&gt; gauss_params = [[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]]"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">gauss_params</span> <span class="pl-c1">=</span> [[<span class="pl-c1">10</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">2.5</span>], [<span class="pl-c1">20</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">32</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">1</span>]]</pre></div>
<p dir="auto">When executed via PyCall, this results in a Julia <code>Matrix</code> with eltype <code>Real</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; py&quot;$([[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]])&quot;
PyObject [array([10. ,  1. ,  2.5]), array([20. ,  0.8,  2. ]), array([32. ,  0.6,  1. ])]
julia&gt; py&quot;$([[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]])&quot;
3-element Vector{Vector{Float64}}:
 [10.0, 1.0, 2.5]
 [20.0, 0.8, 2.0]
 [32.0, 0.6, 1.0]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">py</span>"</span>$([[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]])<span class="pl-pds">"</span></span>
PyObject [<span class="pl-c1">array</span>([<span class="pl-c1">10.</span> ,  <span class="pl-c1">1.</span> ,  <span class="pl-c1">2.5</span>]), <span class="pl-c1">array</span>([<span class="pl-c1">20.</span> ,  <span class="pl-c1">0.8</span>,  <span class="pl-c1">2.</span> ]), <span class="pl-c1">array</span>([<span class="pl-c1">32.</span> ,  <span class="pl-c1">0.6</span>,  <span class="pl-c1">1.</span> ])]
julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">py</span>"</span>$([[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]])<span class="pl-pds">"</span></span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Vector{Float64}}<span class="pl-k">:</span>
 [<span class="pl-c1">10.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">2.5</span>]
 [<span class="pl-c1">20.0</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">2.0</span>]
 [<span class="pl-c1">32.0</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">1.0</span>]</pre></div>
<p dir="auto">This results in an error:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gen_power_spectrum = fooof.sim.gen.gen_power_spectrum;

julia&gt; f_range = [1, 50];

julia&gt; ap_params = [20, 2];

julia&gt; nlv = 0.1;

julia&gt; gauss_params = [[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]];

julia&gt; freqs, spectrum = gen_power_spectrum(f_range, ap_params, gauss_params, nlv)
ERROR: PyError ($(Expr(:escape, :(ccall(#= /home/ubuntu/.julia/packages/PyCall/BD546/src/pyfncall.jl:43 =# @pysym(:PyObject_Call), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) &lt;class 'ValueError'&gt;
ValueError('operands could not be broadcast together with shapes (99,) (3,) ')
..."><pre>julia<span class="pl-k">&gt;</span> gen_power_spectrum <span class="pl-k">=</span> fooof<span class="pl-k">.</span>sim<span class="pl-k">.</span>gen<span class="pl-k">.</span>gen_power_spectrum;

julia<span class="pl-k">&gt;</span> f_range <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">50</span>];

julia<span class="pl-k">&gt;</span> ap_params <span class="pl-k">=</span> [<span class="pl-c1">20</span>, <span class="pl-c1">2</span>];

julia<span class="pl-k">&gt;</span> nlv <span class="pl-k">=</span> <span class="pl-c1">0.1</span>;

julia<span class="pl-k">&gt;</span> gauss_params <span class="pl-k">=</span> [[<span class="pl-c1">10</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">2.5</span>], [<span class="pl-c1">20</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">32</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">1</span>]];

julia<span class="pl-k">&gt;</span> freqs, spectrum <span class="pl-k">=</span> <span class="pl-c1">gen_power_spectrum</span>(f_range, ap_params, gauss_params, nlv)
ERROR<span class="pl-k">:</span> PyError (<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:escape</span>, :(<span class="pl-c1">ccall</span>(<span class="pl-c"><span class="pl-c">#=</span> /home/ubuntu/.julia/packages/PyCall/BD546/src/pyfncall.jl:43 <span class="pl-c">=#</span></span> <span class="pl-c1">@pysym</span>(<span class="pl-c1">:PyObject_Call</span>), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>ValueError<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>
<span class="pl-c1">ValueError</span>(<span class="pl-s"><span class="pl-pds">'</span>operands could not be broadcast together with shapes (99,) (3,) <span class="pl-pds">'</span></span>)
<span class="pl-k">...</span></pre></div>
<p dir="auto">When the statement is executed in Python (<code>py"[]"</code>) and then roundtripped through Julia, PyCall converts the Python return value to a <code>Matrix</code>, which works in the subsequent function call:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gauss_params = py&quot;[[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]]&quot;
3×3 Matrix{Real}:
 10  1.0  2.5
 20  0.8  2
 32  0.6  1
julia&gt; freqs, spectrum = gen_power_spectrum(f_range, ap_params, gauss_params, nlv)
([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5  …  45.5, 46.0, 46.5, 47.0, 47.5, 48.0, 48.5, 49.0, 49.5, 50.0], [9.112713501760112e19, 6.707288550822094e19, 3.4304395055235047e19, 1.6048034860916263e19, 1.3121468876633584e19, 9.23648446980319e18, 7.068034503219047e18, 7.474675398285033e18, 5.682794734823231e18, 6.002884162025267e18  …  5.494028369147603e16, 5.044411758605143e16, 4.528833513498138e16, 4.080554951080287e16, 4.064069219484658e16, 3.9731296024126536e16, 3.21719026879766e16, 4.828351597256686e16, 4.441592192173848e16, 4.129641670786365e16])"><pre>julia<span class="pl-k">&gt;</span> gauss_params <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">py</span>"</span>[[10, 1.0, 2.5], [20, 0.8, 2], [32, 0.6, 1]]<span class="pl-pds">"</span></span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Real}<span class="pl-k">:</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.5</span>
 <span class="pl-c1">20</span>  <span class="pl-c1">0.8</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">32</span>  <span class="pl-c1">0.6</span>  <span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> freqs, spectrum <span class="pl-k">=</span> <span class="pl-c1">gen_power_spectrum</span>(f_range, ap_params, gauss_params, nlv)
([<span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">2.5</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">3.5</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">4.5</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">5.5</span>  …  <span class="pl-c1">45.5</span>, <span class="pl-c1">46.0</span>, <span class="pl-c1">46.5</span>, <span class="pl-c1">47.0</span>, <span class="pl-c1">47.5</span>, <span class="pl-c1">48.0</span>, <span class="pl-c1">48.5</span>, <span class="pl-c1">49.0</span>, <span class="pl-c1">49.5</span>, <span class="pl-c1">50.0</span>], [<span class="pl-c1">9.112713501760112e19</span>, <span class="pl-c1">6.707288550822094e19</span>, <span class="pl-c1">3.4304395055235047e19</span>, <span class="pl-c1">1.6048034860916263e19</span>, <span class="pl-c1">1.3121468876633584e19</span>, <span class="pl-c1">9.23648446980319e18</span>, <span class="pl-c1">7.068034503219047e18</span>, <span class="pl-c1">7.474675398285033e18</span>, <span class="pl-c1">5.682794734823231e18</span>, <span class="pl-c1">6.002884162025267e18</span>  …  <span class="pl-c1">5.494028369147603e16</span>, <span class="pl-c1">5.044411758605143e16</span>, <span class="pl-c1">4.528833513498138e16</span>, <span class="pl-c1">4.080554951080287e16</span>, <span class="pl-c1">4.064069219484658e16</span>, <span class="pl-c1">3.9731296024126536e16</span>, <span class="pl-c1">3.21719026879766e16</span>, <span class="pl-c1">4.828351597256686e16</span>, <span class="pl-c1">4.441592192173848e16</span>, <span class="pl-c1">4.129641670786365e16</span>])</pre></div>
<p dir="auto">However, naively using a true 2d array (<code>Matrix</code>) in Julia also results in error:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gauss_params = [10 1.0 2.5; 20 0.8 2; 32 0.6 1]
3×3 Matrix{Float64}:
 10.0  1.0  2.5
 20.0  0.8  2.0
 32.0  0.6  1.0
julia&gt; freqs, spectrum = gen_power_spectrum(f_range, ap_params, gauss_params, nlv)
ERROR: PyError ($(Expr(:escape, :(ccall(#= /home/ubuntu/.julia/packages/PyCall/BD546/src/pyfncall.jl:43 =# @pysym(:PyObject_Call), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) &lt;class 'ValueError'&gt;
ValueError('operands could not be broadcast together with shapes (99,) (3,) ')
..."><pre>julia<span class="pl-k">&gt;</span> gauss_params <span class="pl-k">=</span> [<span class="pl-c1">10</span> <span class="pl-c1">1.0</span> <span class="pl-c1">2.5</span>; <span class="pl-c1">20</span> <span class="pl-c1">0.8</span> <span class="pl-c1">2</span>; <span class="pl-c1">32</span> <span class="pl-c1">0.6</span> <span class="pl-c1">1</span>]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">10.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.5</span>
 <span class="pl-c1">20.0</span>  <span class="pl-c1">0.8</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">32.0</span>  <span class="pl-c1">0.6</span>  <span class="pl-c1">1.0</span>
julia<span class="pl-k">&gt;</span> freqs, spectrum <span class="pl-k">=</span> <span class="pl-c1">gen_power_spectrum</span>(f_range, ap_params, gauss_params, nlv)
ERROR<span class="pl-k">:</span> PyError (<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:escape</span>, :(<span class="pl-c1">ccall</span>(<span class="pl-c"><span class="pl-c">#=</span> /home/ubuntu/.julia/packages/PyCall/BD546/src/pyfncall.jl:43 <span class="pl-c">=#</span></span> <span class="pl-c1">@pysym</span>(<span class="pl-c1">:PyObject_Call</span>), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>ValueError<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>
<span class="pl-c1">ValueError</span>(<span class="pl-s"><span class="pl-pds">'</span>operands could not be broadcast together with shapes (99,) (3,) <span class="pl-pds">'</span></span>)
<span class="pl-k">...</span></pre></div>
<p dir="auto">The problem is in the eltype: we need to force it to <code>Real</code> so that the integers are preserved as integers when passed to Python:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gauss_params = Real[10 1.0 2.5; 20 0.8 2; 32 0.6 1]
3×3 Matrix{Real}:
 10  1.0  2.5
 20  0.8  2
 32  0.6  1"><pre>julia<span class="pl-k">&gt;</span> gauss_params <span class="pl-k">=</span> Real[<span class="pl-c1">10</span> <span class="pl-c1">1.0</span> <span class="pl-c1">2.5</span>; <span class="pl-c1">20</span> <span class="pl-c1">0.8</span> <span class="pl-c1">2</span>; <span class="pl-c1">32</span> <span class="pl-c1">0.6</span> <span class="pl-c1">1</span>]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Real}<span class="pl-k">:</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.5</span>
 <span class="pl-c1">20</span>  <span class="pl-c1">0.8</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">32</span>  <span class="pl-c1">0.6</span>  <span class="pl-c1">1</span></pre></div>
<p dir="auto">If other automatic type conversions are found to be problematic or there are
particular FOOOF functions that don't play nice via the default PyCall mechanisms,
then issues and pull requests are welcome.</p>
<p dir="auto">Many of these problematic conversions can be fixed with relatively straightforward (and backward compatible) changes to FOOOF; we are in the process of opening PRs for this purpose.</p>
</article></div>