<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-qpsreader" class="anchor" aria-hidden="true" href="#qpsreader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QPSReader</h1>
<p>A package to read linear optimization problems in MPS format and quadratic optimization problems in QPS format.</p>
<p><a href="https://doi.org/10.5281/zenodo.3996203" rel="nofollow"><img src="https://camo.githubusercontent.com/c1360e8b0d12540582171aae82da01b4eed8541f8e339ed20fb9f068da359584/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f444f492d31302e353238312532467a656e6f646f2e333939363230332d626c75652e737667" alt="DOI" data-canonical-src="https://img.shields.io/badge/DOI-10.5281%2Fzenodo.3996203-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaSmoothOptimizers/QPSReader.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/JuliaSmoothOptimizers/QPSReader.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/QPSReader.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f87991eeb91e604a22e655b0e185a25d938b91efc69feb6648b7278ab1c86c73/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f5150535265616465722e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaSmoothOptimizers/QPSReader.jl.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaSmoothOptimizers/QPSReader.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c43c5eeb85c7250157d9282da60126e452a13b614fac96852a039cd15a4d2b3e/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f5150535265616465722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaSmoothOptimizers/QPSReader.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/QPSReader.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation/stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/QPSReader.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation/dev" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-how-to-cite" class="anchor" aria-hidden="true" href="#how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to Cite</h2>
<p>If you use QPSReader.jl in your work, please cite using the format given in <a href="https://github.com/JuliaSmoothOptimizers/QPSReader.jl/blob/master/CITATION.bib">CITATION.bib</a>.</p>
<p>The problems represented by the QPS format have the form</p>
<p align="center">
optimize   c₀ + cᵀ x + ½ xᵀ Q x
  
subject to   L ≤ Ax ≤ U and ℓ ≤ x ≤ u,
</p>
<p>where:</p>
<ul>
<li>"optimize" means either "minimize" or "maximize"</li>
<li><code>c₀</code> ∈ ℝ is a constant term, <code>c</code> ∈ ℝⁿ is the linear term, <code>Q = Qᵀ</code> is the <em>n×n</em> quadratic term,</li>
<li><code>A</code> is the <em>m×n</em> constraint matrix, <code>L</code>, <code>U</code> are constraint lower and upper bounds, respectively</li>
<li><code>ℓ</code>, <code>u</code> are variable lower and upper bounds, respectively</li>
</ul>
<p>Mixed-integer problems are supported, but semi-continuous and semi-integer variables are not.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add QPSReader
"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add QPSReader</pre></div>
<h3><a id="user-content-reading-a-file" class="anchor" aria-hidden="true" href="#reading-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading a file</h3>
<p>This package exports the <code>QPSData</code> data type and the <code>readqps()</code> function.
Because MPS is a subset of QPS, the <code>readqps()</code> function accepts both formats.
Because the SIF is a superset of QPS, QPS problems implemented as SIF files (such as those from the Maros-Meszaros collection) are also supported.</p>
<p>Both fixed and free format are supported (see below for format conventions).
To read a problem from a file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; qps = readqps(&quot;Q25FV47.QPS&quot;)  # Free MPS is used by default
julia&gt; qps = readqps(&quot;Q25FV47.QPS&quot;, mpsformat=:fixed)  # uses fixed MPS format
julia&gt; qps = readqps(&quot;Q25FV47.QPS&quot;, mpsformat=:free)   # uses free MPS format
"><pre>julia<span class="pl-k">&gt;</span> qps <span class="pl-k">=</span> <span class="pl-c1">readqps</span>(<span class="pl-s"><span class="pl-pds">"</span>Q25FV47.QPS<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> Free MPS is used by default</span>
julia<span class="pl-k">&gt;</span> qps <span class="pl-k">=</span> <span class="pl-c1">readqps</span>(<span class="pl-s"><span class="pl-pds">"</span>Q25FV47.QPS<span class="pl-pds">"</span></span>, mpsformat<span class="pl-k">=</span><span class="pl-c1">:fixed</span>)  <span class="pl-c"><span class="pl-c">#</span> uses fixed MPS format</span>
julia<span class="pl-k">&gt;</span> qps <span class="pl-k">=</span> <span class="pl-c1">readqps</span>(<span class="pl-s"><span class="pl-pds">"</span>Q25FV47.QPS<span class="pl-pds">"</span></span>, mpsformat<span class="pl-k">=</span><span class="pl-c1">:free</span>)   <span class="pl-c"><span class="pl-c">#</span> uses free MPS format</span></pre></div>
<p><code>readqps</code> also accepts an <code>IO</code> object as the first argument.</p>
<p>By default, a number of messages may be logged while reading.
Log output can be suppressed as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using QPSReader
using Logging

qps = with_logger(Logging.NullLogger()) do
    readqps(&quot;Q25FV47.QPS&quot;)
end
"><pre><span class="pl-k">using</span> QPSReader
<span class="pl-k">using</span> Logging

qps <span class="pl-k">=</span> <span class="pl-c1">with_logger</span>(Logging<span class="pl-k">.</span><span class="pl-c1">NullLogger</span>()) <span class="pl-k">do</span>
    <span class="pl-c1">readqps</span>(<span class="pl-s"><span class="pl-pds">"</span>Q25FV47.QPS<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-problem-representation" class="anchor" aria-hidden="true" href="#problem-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Problem representation</h2>
<p>The <code>QPSData</code> data type is defined as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mutable struct QPSData
    nvar::Int                        # number of variables
    ncon::Int                        # number of constraints
    objsense::Symbol                 # :min, :max or :notset
    c0::Float64                      # constant term in objective
    c::Vector{Float64}               # linear term in objective

    # Quadratic objective, in COO format
    qrows::Vector{Int}
    qcols::Vector{Int}
    qvals::Vector{Float64}

    # Constraint matrix, in COO format
    arows::Vector{Int}
    acols::Vector{Int}
    avals::Vector{Float64}

    lcon::Vector{Float64}            # constraints lower bounds
    ucon::Vector{Float64}            # constraints upper bounds
    lvar::Vector{Float64}            # variables lower bounds
    uvar::Vector{Float64}            # variables upper bounds
    name::Union{Nothing, String}     # problem name
    objname::Union{Nothing, String}  # objective function name
    rhsname::Union{Nothing, String}  # Name of RHS field
    bndname::Union{Nothing, String}  # Name of BOUNDS field
    rngname::Union{Nothing, String}  # Name of RANGES field
    varnames::Vector{String}         # variable names, aka column names
    connames::Vector{String}         # constraint names, aka row names

    # name =&gt; index mapping for variables
    # Variables are indexed from 1 and onwards
    varindices::Dict{String, Int}

    # name =&gt; index mapping for constraints
    # Constraints are indexed from 1 and onwards
    # Recorded objective function has index 0
    # Rim objective rows have index -1
    conindices::Dict{String, Int}

    # Variable types
    #  `VTYPE_Continuous`      &lt;--&gt; continuous
    #  `VTYPE_Integer`         &lt;--&gt; integer
    #  `VTYPE_Binary`          &lt;--&gt; binary
    #  `VTYPE_SemiContinuous`  &lt;--&gt; semi-continuous (not supported)
    #  `VTYPE_SemiInteger`     &lt;--&gt; semi-integer (not supported)
    vartypes::Vector{VariableType}

    # Indicates the sense of each row:
    # `RTYPE_Objective`    &lt;--&gt; objective row (`'N'`)
    # `RTYPE_EqualTo`      &lt;--&gt; equality constraint (`'E'`)
    # `RTYPE_LessThan`     &lt;--&gt; less-than constraint (`'L'`)
    # `RTYPE_GreaterThan`  &lt;--&gt; greater-than constraint (`'G'`)
    contypes::Vector{RowType}
end
"><pre><span class="pl-k">mutable struct</span> QPSData
    nvar<span class="pl-k">::</span><span class="pl-c1">Int</span>                        <span class="pl-c"><span class="pl-c">#</span> number of variables</span>
    ncon<span class="pl-k">::</span><span class="pl-c1">Int</span>                        <span class="pl-c"><span class="pl-c">#</span> number of constraints</span>
    objsense<span class="pl-k">::</span><span class="pl-c1">Symbol</span>                 <span class="pl-c"><span class="pl-c">#</span> :min, :max or :notset</span>
    c0<span class="pl-k">::</span><span class="pl-c1">Float64</span>                      <span class="pl-c"><span class="pl-c">#</span> constant term in objective</span>
    c<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>               <span class="pl-c"><span class="pl-c">#</span> linear term in objective</span>

    <span class="pl-c"><span class="pl-c">#</span> Quadratic objective, in COO format</span>
    qrows<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
    qcols<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
    qvals<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>

    <span class="pl-c"><span class="pl-c">#</span> Constraint matrix, in COO format</span>
    arows<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
    acols<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
    avals<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>

    lcon<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>            <span class="pl-c"><span class="pl-c">#</span> constraints lower bounds</span>
    ucon<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>            <span class="pl-c"><span class="pl-c">#</span> constraints upper bounds</span>
    lvar<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>            <span class="pl-c"><span class="pl-c">#</span> variables lower bounds</span>
    uvar<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>            <span class="pl-c"><span class="pl-c">#</span> variables upper bounds</span>
    name<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, String}</span>     <span class="pl-c"><span class="pl-c">#</span> problem name</span>
    objname<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, String}</span>  <span class="pl-c"><span class="pl-c">#</span> objective function name</span>
    rhsname<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, String}</span>  <span class="pl-c"><span class="pl-c">#</span> Name of RHS field</span>
    bndname<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, String}</span>  <span class="pl-c"><span class="pl-c">#</span> Name of BOUNDS field</span>
    rngname<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, String}</span>  <span class="pl-c"><span class="pl-c">#</span> Name of RANGES field</span>
    varnames<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>         <span class="pl-c"><span class="pl-c">#</span> variable names, aka column names</span>
    connames<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>         <span class="pl-c"><span class="pl-c">#</span> constraint names, aka row names</span>

    <span class="pl-c"><span class="pl-c">#</span> name =&gt; index mapping for variables</span>
    <span class="pl-c"><span class="pl-c">#</span> Variables are indexed from 1 and onwards</span>
    varindices<span class="pl-k">::</span><span class="pl-c1">Dict{String, Int}</span>

    <span class="pl-c"><span class="pl-c">#</span> name =&gt; index mapping for constraints</span>
    <span class="pl-c"><span class="pl-c">#</span> Constraints are indexed from 1 and onwards</span>
    <span class="pl-c"><span class="pl-c">#</span> Recorded objective function has index 0</span>
    <span class="pl-c"><span class="pl-c">#</span> Rim objective rows have index -1</span>
    conindices<span class="pl-k">::</span><span class="pl-c1">Dict{String, Int}</span>

    <span class="pl-c"><span class="pl-c">#</span> Variable types</span>
    <span class="pl-c"><span class="pl-c">#</span>  `VTYPE_Continuous`      &lt;--&gt; continuous</span>
    <span class="pl-c"><span class="pl-c">#</span>  `VTYPE_Integer`         &lt;--&gt; integer</span>
    <span class="pl-c"><span class="pl-c">#</span>  `VTYPE_Binary`          &lt;--&gt; binary</span>
    <span class="pl-c"><span class="pl-c">#</span>  `VTYPE_SemiContinuous`  &lt;--&gt; semi-continuous (not supported)</span>
    <span class="pl-c"><span class="pl-c">#</span>  `VTYPE_SemiInteger`     &lt;--&gt; semi-integer (not supported)</span>
    vartypes<span class="pl-k">::</span><span class="pl-c1">Vector{VariableType}</span>

    <span class="pl-c"><span class="pl-c">#</span> Indicates the sense of each row:</span>
    <span class="pl-c"><span class="pl-c">#</span> `RTYPE_Objective`    &lt;--&gt; objective row (`'N'`)</span>
    <span class="pl-c"><span class="pl-c">#</span> `RTYPE_EqualTo`      &lt;--&gt; equality constraint (`'E'`)</span>
    <span class="pl-c"><span class="pl-c">#</span> `RTYPE_LessThan`     &lt;--&gt; less-than constraint (`'L'`)</span>
    <span class="pl-c"><span class="pl-c">#</span> `RTYPE_GreaterThan`  &lt;--&gt; greater-than constraint (`'G'`)</span>
    contypes<span class="pl-k">::</span><span class="pl-c1">Vector{RowType}</span>
<span class="pl-k">end</span></pre></div>
<p>Rows and variables are indexed in the order in which they are read.
The matrix Q is zero when reading an MPS file.</p>
<h2><a id="user-content-conventions" class="anchor" aria-hidden="true" href="#conventions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conventions</h2>
<p>The file formats supported by <code>QPSReader</code> are described here:</p>
<ul>
<li><a href="http://lpsolve.sourceforge.net/5.5/mps-format.htm" rel="nofollow">MPS file format</a></li>
<li><a href="https://doi.org/10.1080/10556789908805768" rel="nofollow">QPS extension</a></li>
</ul>
<p>The following conventions are enforced:</p>
<h3><a id="user-content-rim-data" class="anchor" aria-hidden="true" href="#rim-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rim data</h3>
<ul>
<li>
<p>Multiple objective rows</p>
<ul>
<li>The first <code>N</code>-type row encountered in the <code>ROWS</code> section is recorded as the objective function, and its name is stored in <code>objname</code>.</li>
<li>If an additional <code>N</code>-type row is present, a <code>warning</code>-level log is displayed. Subsequent <code>N</code>-type rows are ignored.</li>
<li>Each time a rim objective row is encountered in the <code>COLUMNS</code> or <code>RHS</code> section, the corresponding coefficients are skipped, and an <code>error</code>-level log is displayed.</li>
</ul>
</li>
<li>
<p>Multiple RHS / Range / Bound fields</p>
<ul>
<li>The second field of the first card in the <code>RHS</code> section determines the name of the right-hand side, which is stored in <code>rhsname</code>. Same goes for the <code>RANGES</code> and <code>BOUNDS</code> sections, with the corresponding names being stored in <code>rngname</code> and <code>bndname</code>, respectively.</li>
<li>Any card whose second field does not match the expected name is then ignored.
A <code>warning</code>-level log is displayed at the first such occurence.</li>
<li>In addition, any line or individual coefficient that is ignored triggers an <code>error</code>-level log.</li>
</ul>
</li>
</ul>
<h3><a id="user-content-variable-bounds" class="anchor" aria-hidden="true" href="#variable-bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Variable bounds</h3>
<ul>
<li>Default bounds for variables are <code>[0, Inf)</code>, to exception of integer variables (see below).</li>
<li>If multiple bounds are specified for a given variable, only the most recent bound is recorded.</li>
</ul>
<h3><a id="user-content-integer-variables" class="anchor" aria-hidden="true" href="#integer-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integer variables</h3>
<p>There are two ways of declaring integer variables:</p>
<ul>
<li>
<p>Through markers in the <code>COLUMNS</code> section.</p>
</li>
<li>
<p>By specifying <code>BV</code>, <code>LI</code> or <code>UI</code> bounds in the <code>BOUNDS</code> section</p>
</li>
<li>
<p>The convention for integer variable bounds in as follows:</p>
<table>
<thead>
<tr>
<th align="center">Marker?</th>
<th align="center"><code>BOUNDS</code> fields</th>
<th align="center">Type</th>
<th align="center">Bounds reported</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Yes</td>
<td align="center">-</td>
<td align="center">Integer</td>
<td align="center"><code>[0, 1]</code></td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center"><code>BV</code></td>
<td align="center">Binary</td>
<td align="center"><code>[0, 1]</code></td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center">(<code>LI</code>, <code>l</code>)</td>
<td align="center">Integer</td>
<td align="center"><code>[l, Inf]</code></td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center">(<code>UI</code>, <code>u</code>) with <code>u≥0</code></td>
<td align="center">Integer</td>
<td align="center"><code>[0, u]</code></td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center">(<code>UI</code>, <code>u</code>) with <code>u&lt;0</code></td>
<td align="center">Integer</td>
<td align="center"><code>[-Inf, u]</code></td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center">(<code>LI</code>, <code>l</code>) + (<code>UI</code>, <code>u</code>)</td>
<td align="center">Integer</td>
<td align="center"><code>[l, u]</code></td>
</tr>
<tr>
<td align="center">No</td>
<td align="center"><code>BV</code></td>
<td align="center">Binary</td>
<td align="center"><code>[0, 1]</code></td>
</tr>
<tr>
<td align="center">No</td>
<td align="center">(<code>LI</code>, <code>l</code>)</td>
<td align="center">Integer</td>
<td align="center"><code>[l, Inf]</code></td>
</tr>
<tr>
<td align="center">No</td>
<td align="center">(<code>UI</code>, <code>u</code>) with <code>u≥0</code></td>
<td align="center">Integer</td>
<td align="center"><code>[0, u]</code></td>
</tr>
<tr>
<td align="center">No</td>
<td align="center">(<code>UI</code>, <code>u</code>) with <code>u&lt;0</code></td>
<td align="center">Integer</td>
<td align="center"><code>[-Inf, u]</code></td>
</tr>
<tr>
<td align="center">No</td>
<td align="center">(<code>LI</code>, <code>l</code>) + (<code>UI</code>, <code>u</code>)</td>
<td align="center">Integer</td>
<td align="center"><code>[l, u]</code></td>
</tr>
</tbody>
</table>
<p>The <code>LI</code>/<code>UI</code> can be replaced by <code>LO</code>/<code>UP</code> in the table above, with no impact on bounds. Only the integrality of variables are affected.
For continuous variables, follow the second half of the table, and replace <code>LI</code>/<code>UI</code> by <code>LO</code>/<code>UP</code>.</p>
</li>
</ul>
<h3><a id="user-content-errors" class="anchor" aria-hidden="true" href="#errors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Errors</h3>
<ul>
<li>A row (resp. column) name that was not declared in the <code>ROWS</code> (resp. <code>COLUMNS</code>) section, appears elsewhere in the file.
The only case where an error is not thrown is if said un-declared row or column appears in a rim line that is skipped.</li>
<li>An <code>N</code>-type row appears in the <code>RANGES</code> section</li>
</ul>
<h2><a id="user-content-problem-collections" class="anchor" aria-hidden="true" href="#problem-collections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Problem Collections</h2>
<ul>
<li>The Netlib LPs: <a href="http://www.netlib.org/lp" rel="nofollow">original Netlib site</a> | <a href="http://www.numerical.rl.ac.uk/cute/netlib.html" rel="nofollow">in SIF format</a> | <a href="http://users.clas.ufl.edu/hager/coap/format.html" rel="nofollow">as tar files</a> (incl. preprocessed versions)</li>
<li>the Kennington LPs: <a href="http://www.netlib.org/lp/data/kennington" rel="nofollow">original Netlib site</a></li>
<li>infeasible Netlib LPs: <a href="http://www.netlib.org/lp/infeas" rel="nofollow">original Netlib site</a></li>
<li>the Maros-Meszaros QPs: <a href="http://www.doc.ic.ac.uk/~im/#DATA" rel="nofollow">in QPS format</a> | <a href="https://bitbucket.org/optrove/maros-meszaros/wiki/Home" rel="nofollow">in SIF format</a></li>
</ul>
<p>Both the Netlib LP and Maros-Meszaros QP collections are provided as Julia artifacts (requires Julia 1.3).
This package exports the <code>fetch_netlib</code> and <code>fetch_mm</code> functions that return the path to the Netlib and Maros-Meszaros collections, repectively</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using QPSReader

netlib_path = fetch_netlib()
mm_path = fetch_mm()
"><pre><span class="pl-k">using</span> QPSReader

netlib_path <span class="pl-k">=</span> <span class="pl-c1">fetch_netlib</span>()
mm_path <span class="pl-k">=</span> <span class="pl-c1">fetch_mm</span>()</pre></div>
</article></div>