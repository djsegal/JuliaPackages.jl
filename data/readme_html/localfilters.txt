<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-localfiltersjl" class="anchor" aria-hidden="true" href="#localfiltersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LocalFilters.jl</h1>
<table>
<thead>
<tr>
<th align="left"><strong>License</strong></th>
<th align="left"><strong>Build Status</strong></th>
<th align="left"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="./LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="left"><a href="https://travis-ci.org/emmt/LocalFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fbf2b057ade59249fb334179fd52db7a3df9fc0ece3ef8e3393474b06737ebd0/68747470733a2f2f7472617669732d63692e6f72672f656d6d742f4c6f63616c46696c746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/emmt/LocalFilters.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/emmt/LocalFilters-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/ad53730062b3d05fcc104284b2a9b31f8efeb958b6ffa94858de48c194199a68/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656d6d742f4c6f63616c46696c746572732e6a6c3f6272616e63683d6d6173746572" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/emmt/LocalFilters.jl?branch=master" style="max-width:100%;"></a></td>
<td align="left"><a href="https://coveralls.io/github/emmt/LocalFilters.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/af31a1b9f770029f8cb09478f6400cd66a0146cbdd515764634937f4931d67df/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f656d6d742f4c6f63616c46696c746572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="" data-canonical-src="https://coveralls.io/repos/emmt/LocalFilters.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/emmt/LocalFilters.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a9b855b586aaf0eb73a0ad776c46375d950a7115a3376fa68317cb94b082eba2/687474703a2f2f636f6465636f762e696f2f6769746875622f656d6d742f4c6f63616c46696c746572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="http://codecov.io/github/emmt/LocalFilters.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package implements multi-dimensional local filters for
<a href="http://julialang.org/" rel="nofollow">Julia</a> (convolution, mathematical morphology, etc.).
Local filters are defined by specific operations combining each value of a
source array with the values in a local neighborhood which may have any size,
shape and dimensionality.  Predefined local filters are provided as well as
means to simply implement custom filters.</p>
<p>This document is structured as follows:</p>
<ul>
<li>
<p><a href="#summary">Summary</a> provides a quick introduction.</p>
</li>
<li>
<p><a href="#implementation">Implementation</a> explains how to implement you own filter.</p>
</li>
<li>
<p><a href="#neighborhoods">Neighborhoods</a> describes the concept of neighborhoods.</p>
</li>
<li>
<p><a href="#installation">Installation</a> to install the package.</p>
</li>
</ul>
<p>Note that this is a first implementation to define the API.  It is is
reasonably fast (see <a href="src/benchmarks.jl">benchmarks.jl</a>) but separable kernels
can be made faster.</p>
<p>Packages with overlapping functionalities:</p>
<ul>
<li>
<p><a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering</a> for local
filters on multidimensional arrays (not just <em>images</em>), also implement
various boundary conditions;</p>
</li>
<li>
<p><a href="https://github.com/JuliaImages/ImageMorphology.jl">ImageMorphology</a> for fast
morphological operations with separable structuring elements;</p>
</li>
</ul>
<h2><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary</h2>
<p><code>LocalFilters</code> implements local filtering operations which combine the values
of an array in a neighborhood of each elements of the array (and possibly the
values of a kernel associated with the neighborhood).  The neighborhood is
defined relatively to a given position by an instance of a type derived from
<code>Neighborhood</code>.  For
<a href="https://en.wikipedia.org/wiki/Mathematical_morphology" rel="nofollow">mathematical morphology</a>
operations, a neighborhood is called a <em>structuring element</em>.</p>
<p>Denoting <code>A</code> the source array and <code>B</code> the neighborhood or the kernel (by
default <code>B</code> is a centered box of size 3 along every dimension), the available
filters are:</p>
<ul>
<li>
<p><code>erode(A, B=3)</code> performs an erosion (local minimum) of <code>A</code> by <code>B</code>;</p>
</li>
<li>
<p><code>dilate(A, B=3)</code> performs a dilation (local maximum) of <code>A</code> by <code>B</code>;</p>
</li>
<li>
<p><code>localextrema(A, B=3)</code> yields the erosion and the dilation of <code>A</code> by <code>B</code>;</p>
</li>
<li>
<p><code>opening(A, B=3)</code> performs an erosion followed by a dilation;</p>
</li>
<li>
<p><code>closing(A, B=3)</code> performs a dilation followed by an erosion;</p>
</li>
<li>
<p><code>top_hat(A, B=3 [, S])</code> performs a summit detection (an optional third
argument <code>S</code> may be supplied to pre-smooth <code>A</code> by <code>S</code>);</p>
</li>
<li>
<p><code>bottom_hat(A, B=3 [, S])</code> performs a valley detection (an optional third
argument <code>S</code> may be supplied to pre-smooth <code>A</code> by <code>S</code>);</p>
</li>
<li>
<p><code>localmean(A, B=3)</code> performs a local averaging;</p>
</li>
<li>
<p><code>convolve(A, B=3)</code> performs a convolution by the kernel <code>B</code> or by the support
of <code>B</code> is <code>eltype(B)</code> is <code>Bool</code>;</p>
</li>
<li>
<p><code>bilateralfilter(A, Fr, Gs)</code> performs a bilateral filtering of array <code>A</code> with
<code>Fr</code> the range kernel for smoothing differences in intensities and <code>Gs</code> the
spatial kernel for smoothing differences in coordinates.
Alternatively one can specify the range and spatial parameters
<code>bilateralfilter(A, σr, σs)</code> for default Gaussian kernels.
(See: <a href="https://en.wikipedia.org/wiki/Bilateral_filter" rel="nofollow">https://en.wikipedia.org/wiki/Bilateral_filter</a>.)</p>
</li>
</ul>
<p>and many more to come...</p>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h2>
<h3><a id="user-content-general-local-filters" class="anchor" aria-hidden="true" href="#general-local-filters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General local filters</h3>
<p>The pseudo-code for a local filtering operation <code>C = filter(A, B)</code> writes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="for i ∈ Sup(A)
    v = initial(A[i])
    for j ∈ Sup(B) and such that i-j ∈ Sup(A)
        v = update(v, A[i-j], B[j])
    end
    store(C, i, v)
end
"><pre><span class="pl-k">for</span> i <span class="pl-k">∈</span> <span class="pl-c1">Sup</span>(A)
    v <span class="pl-k">=</span> <span class="pl-c1">initial</span>(A[i])
    <span class="pl-k">for</span> j <span class="pl-k">∈</span> <span class="pl-c1">Sup</span>(B) and such that i<span class="pl-k">-</span>j <span class="pl-k">∈</span> <span class="pl-c1">Sup</span>(A)
        v <span class="pl-k">=</span> <span class="pl-c1">update</span>(v, A[i<span class="pl-k">-</span>j], B[j])
    <span class="pl-k">end</span>
    <span class="pl-c1">store</span>(C, i, v)
<span class="pl-k">end</span></pre></div>
<p>where <code>A</code> is the source of the operation, <code>B</code> is the neighborhood, <code>C</code> is the
result of the operation.  Here <code>Sup(A)</code> denotes the support of <code>A</code> (that is the
set of indices in <code>A</code>).  The methods <code>initial</code>, <code>update</code> and <code>store</code> and the
type of the variable <code>v</code> are specific to the considered operation.  For maximum
efficiency, the methods <code>initial</code> and <code>update</code> shall return the same type of
result.  To execute the filter, call the <code>localfilter!</code> method as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!(dst, A, B, initial, update, store)
"><pre><span class="pl-c1">localfilter!</span>(dst, A, B, initial, update, store)</pre></div>
<p><code>localfilter!</code> applies the local filter defined by the neighborhood <code>B</code> and
methods <code>initial</code>, <code>update</code> and <code>store</code> to the source array <code>A</code> and stores the
result in the destination <code>dst</code> which is then returned.</p>
<p>For instance, to compute a local maximum (<em>i.e.</em> a <strong>dilation</strong> in mathematical
morphology terms):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initial(a) = typemin(typeof(a))
update(v,a,b) = (b &amp;&amp; v &lt; a ? a : v)
store(C,i,v) = C[i] = v
"><pre><span class="pl-en">initial</span>(a) <span class="pl-k">=</span> <span class="pl-c1">typemin</span>(<span class="pl-c1">typeof</span>(a))
<span class="pl-en">update</span>(v,a,b) <span class="pl-k">=</span> (b <span class="pl-k">&amp;&amp;</span> v <span class="pl-k">&lt;</span> a <span class="pl-k">?</span> a <span class="pl-k">:</span> v)
<span class="pl-en">store</span>(C,i,v) <span class="pl-k">=</span> C[i] <span class="pl-k">=</span> v</pre></div>
<p>with <code>typeof(a)</code> the type of the elements of <code>A</code>.  Of course, anonymous functions can
be exploited to implement this filter in a single call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!(dst, A, B,
             (a)     -&gt; typemin(typeof(a)),   # initial method
             (v,a,b) -&gt; (b &amp;&amp; v &lt; a ? a : v), # update method
             (C,i,v) -&gt; C[i] = v)             # store method
"><pre><span class="pl-c1">localfilter!</span>(dst, A, B,
             (a)     <span class="pl-k">-&gt;</span> <span class="pl-c1">typemin</span>(<span class="pl-c1">typeof</span>(a)),   <span class="pl-c"><span class="pl-c">#</span> initial method</span>
             (v,a,b) <span class="pl-k">-&gt;</span> (b <span class="pl-k">&amp;&amp;</span> v <span class="pl-k">&lt;</span> a <span class="pl-k">?</span> a <span class="pl-k">:</span> v), <span class="pl-c"><span class="pl-c">#</span> update method</span>
             (C,i,v) <span class="pl-k">-&gt;</span> C[i] <span class="pl-k">=</span> v)             <span class="pl-c"><span class="pl-c">#</span> store method</span></pre></div>
<p>Below is another example of the methods needed to implement a local average:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initial(a) = (0, zero(T))
update(v,a,b) = v[1] + 1, v[2] + (b ? a : zero(T))
store(C,i,v) = C[i] = v[2]/v[1]
"><pre><span class="pl-en">initial</span>(a) <span class="pl-k">=</span> (<span class="pl-c1">0</span>, <span class="pl-c1">zero</span>(T))
<span class="pl-en">update</span>(v,a,b) <span class="pl-k">=</span> v[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">1</span>, v[<span class="pl-c1">2</span>] <span class="pl-k">+</span> (b <span class="pl-k">?</span> a <span class="pl-k">:</span> <span class="pl-c1">zero</span>(T))
<span class="pl-en">store</span>(C,i,v) <span class="pl-k">=</span> C[i] <span class="pl-k">=</span> v[<span class="pl-c1">2</span>]<span class="pl-k">/</span>v[<span class="pl-c1">1</span>]</pre></div>
<p>with <code>T = typeof(a)</code>.</p>
<p>The same mechanism can be used to implement other operations such as
convolution, median filtering, <em>etc.</em> via the <code>localfilter!</code> driver.</p>
<h3><a id="user-content-fast-separable-local-filters" class="anchor" aria-hidden="true" href="#fast-separable-local-filters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fast separable local filters</h3>
<p>When the filter amounts to combining all elements in a rectangular neighborhood
by an associative binary operation (<code>+</code>, <code>min</code>, <code>max</code>, <em>etc.</em>), the van
Herk-Gil-Werman algorithm can be used to implement the filter.  This algorithm
is much faster than a naive implementation (about <code>3N</code> operations per element
for a <code>N</code>-dimensional array whatever the size of the neighborhood instead of
<code>p^N - 1</code> operations for a neighborhood of lenght <code>p</code> along all the <code>N</code>
dimensions).  Another advantage of the van Herk-Gil-Werman algorithm is that it
can be applied in-place.  Such a filter is said to be <em>separable</em> and can be
applied along each dimension, one at a time.</p>
<p>The syntax to apply a separable local filter is:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!([dst = A,] A, dims, op, rngs [, w])
"><pre><span class="pl-c1">localfilter!</span>([dst <span class="pl-k">=</span> A,] A, dims, op, rngs [, w])</pre></div>
<p>which overwrites the contents of <code>dst</code> with the result of applying van
Herk-Gil-Werman algorithm to filter array <code>A</code> along dimension(s) <code>dims</code> with
(associative) binary operation <code>op</code> and contiguous structuring element(s)
defined by the interval(s) <code>rngs</code>.  Optional argument <code>w</code> is a workspace array
which is automatically allocated if not provided; otherwise, it must be a
vector of same element type as <code>A</code> which is automatically resized as needed.
The destination <code>dst</code> must have the same indices as the source <code>A</code> (<em>i.e.</em>
<code>axes(dst) == axes(A)</code> must hold).  Operation can be done in-place; that is,
<code>dst</code> and <code>A</code> can be the same (this is the implemented behavior if <code>dst</code> is not
supplied).</p>
<p>Argument <code>dims</code> specifies along which dimension(s) of <code>A</code> the filter is to be
applied, it can be a single integer, several integers or a colon <code>:</code> to specify
all dimensions.  Dimensions are processed in the order given by <code>dims</code> (the
same dimension may appear several times) and there must be a matching interval
in <code>rngs</code> to specify the structuring element (except that if <code>rngs</code> is a single
interval, it is used for every dimension in <code>dims</code>).  An interval is either an
integer or an integer unit range in the form <code>kmin:kmax</code> (an interval specified
as a single integer, say <code>k</code>, is the same as specifying <code>k:k</code>).</p>
<p>Assuming mono-dimensional arrays <code>A</code> and <code>dst</code>, the single filtering pass:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!(dst, A, :, op, rng)
"><pre><span class="pl-c1">localfilter!</span>(dst, A, :, op, rng)</pre></div>
<p>yields:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="dst[j] = A[j-kmax] ⋄ A[j-kmax+1] ⋄ A[j-kmax+2] ⋄ ... ⋄ A[j-kmin]
"><pre><code>dst[j] = A[j-kmax] ⋄ A[j-kmax+1] ⋄ A[j-kmax+2] ⋄ ... ⋄ A[j-kmin]
</code></pre></div>
<p>for all <code>j ∈ [first(axes(A,1)):last(axes(A,1))]</code>, with <code>x ⋄ y = op(x, y)</code>,
<code>kmin = first(rng)</code> and <code>kmax = last(rng)</code>.  Note that if <code>kmin = kmax = k</code>
(which occurs if <code>rng</code> is a simple integer), the result of the filter is to
operate a simple shift by <code>k</code> along the corresponding dimension and has no
effects if <code>k = 0</code>.  This can be exploited to not filter some dimension(s).</p>
<p>For instance:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!(A, :, min, -3:3)
"><pre><span class="pl-c1">localfilter!</span>(A, :, min, <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">3</span>)</pre></div>
<p>overwrites <code>A</code> with its <em>morphological erosion</em> (local minimum) on a
centered structuring element of width 7 in every dimension.</p>
<p>Another example, assuming <code>A</code> is a three-dimensional array:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!(A, :, max, (-3:3, 0, -4:4))
"><pre><span class="pl-c1">localfilter!</span>(A, :, max, (<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">4</span>))</pre></div>
<p>overwrites <code>A</code> its <em>morphological dilation</em> (<em>i.e.</em> local maximum) in a
centered local neighborhood of size <code>7×1×9</code> (nothing is done along the second
dimension).  The same result may be obtained with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter!(A, (1,3), max, (-3:3, -4:4))
"><pre><span class="pl-c1">localfilter!</span>(A, (<span class="pl-c1">1</span>,<span class="pl-c1">3</span>), max, (<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">4</span>))</pre></div>
<p>where the second dimension is omitted from the list of dimensions.
The out-place version, allocates the destination array and is called as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="localfilter([T,] A, dims, op, rngs [, w])
"><pre><span class="pl-c1">localfilter</span>([T,] A, dims, op, rngs [, w])</pre></div>
<p>with <code>T</code> the element type of the result (by default <code>T = eltype(A)</code>).</p>
<h3><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h3>
<ul>
<li>
<p>Marcel van Herk, "<em>A fast algorithm for local minimum and maximum filters on
rectangular and octagonal kernels</em>" in Pattern Recognition Letters <strong>13</strong>,
517-521 (1992).</p>
</li>
<li>
<p>Joseph Gil and Michael Werman, "<em>Computing 2-D Min, Median, and Max Filters</em>"
in IEEE Transactions on Pattern Analysis and Machine Intelligence <strong>15</strong>,
504-507 (1993).</p>
</li>
</ul>
<h2><a id="user-content-neighborhoods" class="anchor" aria-hidden="true" href="#neighborhoods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Neighborhoods</h2>
<p><code>Neighborhood</code> (a.k.a. <em>structuring element</em> for the adepts of mathematical
morphology) is a central concept in <code>LocalFilters</code>.  The neighborhood defines
which values are involved in a local operation for each component of the source
array.  Neighborhoods are assumed to be shift invariant but may have any
support shape and may have embedded weights (<em>e.g.</em>, to implement <em>local
convolution</em>).</p>
<h3><a id="user-content-types-of-neighborhoods" class="anchor" aria-hidden="true" href="#types-of-neighborhoods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types of neighborhoods</h3>
<p>From the user point of view, there are three kinds of neighborhoods:</p>
<ul>
<li>
<p><strong>Rectangular boxes</strong> are rectangular neighborhoods whose edges are aligned
with the axes of array indices and which may be centered or have arbitrary
offsets along the dimensions.  These neighborhoods are represented by
instances of <code>LocalFilters.RectangularBox</code>.</p>
</li>
<li>
<p><strong>Arbitrarily shaped neighborhoods</strong> are neighborhoods with arbitrary shape
and offset.  These neighborhoods are represented by instances of
<code>LocalFilters.Kernel</code> with boolean element type.  These neighborhoods are
constructed from an array of booleans and an optional starting index.</p>
</li>
<li>
<p><strong>Kernels</strong> are neighborhoods whose elements are weights and which may have
arbitrary offset.  These neighborhoods are represented by instances of
<code>LocalFilters.Kernel</code> with numerical element type.  These neighborhoods are
constructed from an array of weights and an optional starting index.</p>
</li>
</ul>
<h3><a id="user-content-syntax-for-neighborhoods" class="anchor" aria-hidden="true" href="#syntax-for-neighborhoods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Syntax for neighborhoods</h3>
<ul>
<li>
<p>The <em>default neighborhood</em> is a centered rectangular box of width 3 in each
of its dimensions.</p>
</li>
<li>
<p>A <em>scalar</em> integer <code>w</code> yields a centered rectangular box of size <code>w</code> along
all dimensions.  <code>w</code> must be at least equal to 1 and the geometrical center
of the box is defined according to the conventions in <code>fftshift</code>.</p>
</li>
<li>
<p>A <em>tuple</em> <code>t</code> of integers yields a centered rectangular box whose size is
<code>t[i]</code> along the <code>i</code>-th dimension.  All values of <code>t</code> must be larger or equal
to 1.  Tip: Remember that you can use <code>v...</code> to convert a <em>vector</em> <code>v</code> into a
tuple.</p>
</li>
<li>
<p>An <em>array</em> <code>A</code> yields a <code>LocalFilters.Kernel</code> whose coefficients are the
values of <code>A</code> and whose neighborhood is the centered bounding-box of <code>A</code>.</p>
</li>
<li>
<p>A <em>Cartesian region</em> <code>R</code> (an instance of <code>CartesianIndices</code>) yields a
<code>LocalFilters.RectangularBox</code> which is a rectangular neighborhood whose
support contains all relative positions within <code>first(R)</code> and <code>last(R)</code>.</p>
</li>
<li>
<p>A rectangular box neighborhood created by calling
<code>LocalFilters.RectangularBox</code> as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="LocalFilters.RectangularBox(R)
LocalFilters.RectangularBox(I1, I2)
LocalFilters.RectangularBox(dims, offs)
LocalFilters.RectangularBox(inds)
"><pre>LocalFilters<span class="pl-k">.</span><span class="pl-c1">RectangularBox</span>(R)
LocalFilters<span class="pl-k">.</span><span class="pl-c1">RectangularBox</span>(I1, I2)
LocalFilters<span class="pl-k">.</span><span class="pl-c1">RectangularBox</span>(dims, offs)
LocalFilters<span class="pl-k">.</span><span class="pl-c1">RectangularBox</span>(inds)</pre></div>
<p>where <code>R</code> is an instance of<code>CartesianIndices</code>, <code>I1</code> and <code>I2</code> are two
<code>CartesianIndex</code> specifying the first and last relative position within the
neighborhood, <code>dims</code> and <code>offs</code> are tuples of integers specifying the
dimensions of the neighborhood and its offsets, <code>inds</code> are unit ranges.</p>
<p>Assuming <code>dim</code> is an integer, then:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="LocalFilters.RectangularBox{N}(dim)
"><pre>LocalFilters<span class="pl-k">.</span><span class="pl-c1">RectangularBox</span><span class="pl-c1">{N}</span>(dim)</pre></div>
<p>yields an <code>N</code>-dimensional rectangular box of size <code>dim</code> along all dimensions
and centered at the geometrical center of the box (with the same conventions
as <code>fftshift</code>).</p>
<p>Similarly, assuming <code>i1</code> and <code>i2</code> are integers, then:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="LocalFilters.RectangularBox{N}(i1:i2)
"><pre>LocalFilters<span class="pl-k">.</span><span class="pl-c1">RectangularBox</span><span class="pl-c1">{N}</span>(i1<span class="pl-k">:</span>i2)</pre></div>
<p>yields an <code>N</code>-dimensional rectangular box with index range <code>i1:i2</code> along all
dimensions.</p>
</li>
</ul>
<h3><a id="user-content-methods-on-a-neighborhood" class="anchor" aria-hidden="true" href="#methods-on-a-neighborhood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods on a neighborhood</h3>
<p>The following statements make sense on a neighborhood <code>B</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="eltype(B) -&gt; element type of B
ndims(B)  -&gt; number of dimensions of B
length(B) -&gt; number of elements in the bounding-box of B
size(B)   -&gt; size of the bounding-box of B along all dimensions
size(B,d) -&gt; size of the bounding-box of B along d-th dimension
first(B)  -&gt; CartesianIndex of first position in the bounding-box
             of B relative to its anchor
last(B)   -&gt; CartesianIndex of last position in the bounding-box
             of B relative to its anchor
B[i]      -&gt; yields the kernel value of B at index i
"><pre><span class="pl-c1">eltype</span>(B) <span class="pl-k">-&gt;</span> element type of B
<span class="pl-c1">ndims</span>(B)  <span class="pl-k">-&gt;</span> number of dimensions of B
<span class="pl-c1">length</span>(B) <span class="pl-k">-&gt;</span> number of elements <span class="pl-k">in</span> the bounding<span class="pl-k">-</span>box of B
<span class="pl-c1">size</span>(B)   <span class="pl-k">-&gt;</span> size of the bounding<span class="pl-k">-</span>box of B along all dimensions
<span class="pl-c1">size</span>(B,d) <span class="pl-k">-&gt;</span> size of the bounding<span class="pl-k">-</span>box of B along d<span class="pl-k">-</span>th dimension
<span class="pl-c1">first</span>(B)  <span class="pl-k">-&gt;</span> CartesianIndex of first position <span class="pl-k">in</span> the bounding<span class="pl-k">-</span>box
             of B relative to its anchor
<span class="pl-c1">last</span>(B)   <span class="pl-k">-&gt;</span> CartesianIndex of last position <span class="pl-k">in</span> the bounding<span class="pl-k">-</span>box
             of B relative to its anchor
B[i]      <span class="pl-k">-&gt;</span> yields the kernel value of B at index i</pre></div>
<p>Note that the index <code>i</code> in <code>B[i]</code> is assumed to be between <code>first(B)</code> and
<code>last(B)</code>, for efficiency reasons this is not checked.  The type returned by
<code>eltype(B)</code> is <code>Bool</code> for a neighborhood which is just defined by its support
(<em>e.g.</em> a <code>LocalFilters.CenteredBox</code> or a <code>LocalFilters.RectangularBox</code>), the
element type of its kernel otherwise.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="CartesianIndices(B)
"><pre><span class="pl-c1">CartesianIndices</span>(B)</pre></div>
<p>yields the Cartesian indices of relative positions of the bounding-box of
neighborhood <code>B</code>.</p>
<p>If the argument <code>B</code> which defines a neighborhood (see previous section) is not
an instance of a type derived from <code>LocalFilters.Neighborhood</code>, it may be
explicitly converted by:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="convert(LocalFilters.Neighborhood{N}, B)
"><pre><span class="pl-c1">convert</span>(LocalFilters<span class="pl-k">.</span>Neighborhood{N}, B)</pre></div>
<p>with <code>N</code> the number of dimensions of the target array.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install the last official version:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;LocalFilters&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LocalFilters<span class="pl-pds">"</span></span>)</pre></div>
<p>To use the last development version, install with Pkg, the Julia package
manager, as an unregistered Julia package (press the ] key to enter the Pkg
REPL mode):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="... pkg&gt; add https://github.com/emmt/LocalFilters.jl.git
"><pre><span class="pl-k">...</span> pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>emmt<span class="pl-k">/</span>LocalFilters<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<p>The <code>LocalFilters</code> package is pure Julia code and there is nothing to build.</p>
</article></div>