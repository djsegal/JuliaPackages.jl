<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cambrianjl" class="anchor" aria-hidden="true" href="#cambrianjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cambrian.jl</h1>
<p><a href="https://travis-ci.org/d9w/Cambrian.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/25d3d64a52ba684436ef587e1e676e24449f37d6cafca16348907541491d67c1/68747470733a2f2f7472617669732d63692e6f72672f6439772f43616d627269616e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/d9w/Cambrian.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/r/d9w/Cambrian.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/91ad9785296ac5a9ea042becca0b85f38bd40aec44c249ed4a48bbb1f9a99417/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6439772f43616d627269616e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/d9w/Cambrian.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/d9w/Cambrian.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9fc46189a4e06e04b2d6e9064c434b5ccb97e4a76f4e493d897411dd81c415c7/68747470733a2f2f636f6465636f762e696f2f67682f6439772f43616d627269616e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/d9w/Cambrian.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="imgs/logo.png"><img src="imgs/logo.png" width="800px" height="auto" style="max-width:100%;"></a></p>
<p>A functional Evolutionary Computation framework.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Cambrian can be installed through the Julia package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add Cambrian
pkg&gt; test Cambrian
"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add Cambrian
pkg<span class="pl-k">&gt;</span> test Cambrian</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Cambrian is intended as a common framework for evolutionary computation
algorithms in Julia. Algorithm implementations should define a subclass of the
<code>AbstractEvolution</code> type which must have the following fields:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="config::NamedTuple
logger::CambrianLogger
population::Array{&lt;:Individual}
"><pre>config<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>
logger<span class="pl-k">::</span><span class="pl-c1">CambrianLogger</span>
population<span class="pl-k">::</span><span class="pl-c1">Array{&lt;:Individual}</span></pre></div>
<p>Each subclass must also implement</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="populate(e::&lt;:AbstractEvolution)
evaluate(e::&lt;:AbstractEvolution)
generation(e::&lt;:AbstractEvolution)
"><pre><span class="pl-c1">populate</span>(e<span class="pl-k">:</span>:<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractEvolution</span>)
<span class="pl-c1">evaluate</span>(e<span class="pl-k">:</span>:<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractEvolution</span>)
<span class="pl-c1">generation</span>(e<span class="pl-k">:</span>:<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractEvolution</span>)</pre></div>
<p>An example Genetic Algorithm and the <code>1+Î»</code> algorithm are provided in <code>src/GA.jl</code>
and <code>src/oneplus.jl</code>, with usage examples in <code>test/ga.jl</code> and <code>test/oneplus.jl</code>.</p>
<p>Algorithms can also define new <code>Individual</code> types or use the provided
<code>FloatIndividual</code> and <code>BoolIndividual</code>. New <code>Individual</code> types should have the fields:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="genes::&lt;:AbstractArray
fitness::Array{Float64}
"><pre>genes<span class="pl-k">:</span>:<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractArray</span>
fitness<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span></pre></div>
<p>and implement the following methods:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mutate(i::&lt;:Individual)
crossover(parents::Vararg{Individual})
"><pre><span class="pl-c1">mutate</span>(i<span class="pl-k">:</span>:<span class="pl-k">&lt;:</span><span class="pl-c1">Individual</span>)
<span class="pl-c1">crossover</span>(parents<span class="pl-k">::</span><span class="pl-c1">Vararg{Individual}</span>)</pre></div>
<p>or make use of the provided methods.</p>
<p>In Cambrian, individual <code>fitness</code> is always a vector of dimension <code>d_fitness</code>,
defined in the provided configuration file. For the case of single-objective
fitness, this adds slight overhead but is intended to make all methods flexible
to multi-objective optimization.</p>
<p>Individual algorithms are encouraged to be separated as new packages which
follow the Cambrian framework. Common functionality between multiple algorithms
should be integrated into Cambrian as needed.</p>
<h2><a id="user-content-ecosystem" class="anchor" aria-hidden="true" href="#ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ecosystem</h2>
<p>Cambrian is used in the following packages:</p>
<ul>
<li><a href="https://github.com/d9w/BERL.jl">BERL.jl</a></li>
<li><a href="https://github.com/d9w/CartesianGeneticProgramming.jl">CartesianGeneticProgramming.jl</a></li>
<li><a href="https://github.com/d9w/MTCGP.jl">MTCGP.jl</a></li>
<li><a href="https://github.com/d9w/AGRN.jl">AGRN.jl</a></li>
<li><a href="https://github.com/TemplierPaul/NeuroEvolution.jl">NeuroEvolution.jl</a></li>
<li><a href="https://github.com/d9w/EvolutionaryStrategies.jl">EvolutionaryStrategies.jl</a></li>
</ul>
<p>There are other evolutionary computation packages in Julia:</p>
<ul>
<li><a href="https://github.com/wildart/Evolutionary.jl">Evolutionary.jl</a></li>
<li><a href="https://github.com/gsoleilhac/NSGAII.jl/">NSGA-II.jl</a></li>
<li><a href="https://github.com/jbrea/CMAEvolutionStrategy.jl">CMAEvolutionStrategy.jl</a></li>
<li><a href="https://github.com/francescoalemanno/NaturalES.jl">NaturalES.jl</a></li>
</ul>
<p>There are also excellent optimization libraries in Julia which use evolutionary and other approaches:</p>
<ul>
<li><a href="https://github.com/robertfeldt/BlackBoxOptim.jl">BlackBoxOptim.jl</a></li>
<li><a href="https://github.com/JuliaNLSolvers/Optim.jl">Optim.jl</a></li>
</ul>
<p><code>Cambrian</code> takes inspiration from evolutionary frameworks in other languages, notably:</p>
<ul>
<li><a href="https://github.com/Hintzelab/MABE">MABE</a></li>
<li><a href="https://github.com/DEAP/deap">DAEP</a></li>
<li><a href="https://github.com/jdisset/gaga/">GAGA</a></li>
</ul>
<p><code>Cambrian</code> is also used in my course on <a href="https://github.com/d9w/evolution">evolutionary computation</a>.</p>
<h2><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Development</h2>
<p>Cambrian is still under development and the ecosystem is growing. Pull requests
of bug fixes or features which can be used across multiple algorithms are
greatly appreciated.</p>
<p>A non-exhaustive list of possible upcoming features:</p>
<ul>
<li>better documentation using <a href="https://github.com/JuliaDocs/Documenter.jl">Documenter</a></li>
<li><del>Abstract evolution type for multiple dispatch</del></li>
<li>Parallelization and test</li>
<li><del>CMA-ES</del></li>
<li>NSGA-II</li>
<li>Novelty archive</li>
<li>co-evolution</li>
<li>genetic speciation</li>
<li>Island-based</li>
</ul>
</article></div>