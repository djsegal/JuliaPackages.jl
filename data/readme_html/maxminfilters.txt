<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-maxminfiltersjl" class="anchor" aria-hidden="true" href="#maxminfiltersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MaxMinFilters.jl</h1>
<p>Julia implementation of Daniel Lemire's Streaming Maximum-Minimum Filter:</p>
<p><em>Daniel Lemire, Streaming Maximum-Minimum Filter Using No More than Three Comparisons per Element. Nordic Journal of Computing, 13 (4), pages 328-339, 2006.</em>
<a href="http://arxiv.org/abs/cs.DS/0610046" rel="nofollow">http://arxiv.org/abs/cs.DS/0610046</a></p>
<p>Implemented both as functions over a moving window, and stateful filter objects.
Available filters: minimum, maximum, minimum+maximum, range, envelope</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>]add MaxMinFilters</pre></div>
<h2><a id="user-content-comparison-with-other-packages" class="anchor" aria-hidden="true" href="#comparison-with-other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparison with other packages</h2>
<p>There are three other Julia packages with overlapping functionality for moving window maximum/minimum functions:</p>
<ul>
<li><a href="https://github.com/JeffreySarnoff/RollingFunctions.jl">RollingFunctions.jl</a></li>
<li><a href="https://github.com/dysonance/Indicators.jl">Indicators.jl</a></li>
<li><a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering.jl</a></li>
</ul>
<p>Compared to these packages, <a href="https://github.com/sairus7/MaxMinFilters.jl">MaxMinFilters.jl</a> provides significant speed-up, and its complexity does not depend on window length (benchmark available at <a href="https://github.com/sairus7/MaxMinFilters.jl/blob/master/examples/benchmark.jl">examples/benchmark.jl</a>):</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20798349/73595393-4d3c6200-4529-11ea-977b-fe8ce6e88b29.png"><img src="https://user-images.githubusercontent.com/20798349/73595393-4d3c6200-4529-11ea-977b-fe8ce6e88b29.png" alt="plot" style="max-width:100%;"></a></p>
<p>Also <a href="https://github.com/sairus7/MaxMinFilters.jl">MaxMinFilters.jl</a> provides stateful filter objects, allowing you to process a signal of indefinite length in RAM-friendly chunks, similar to <a href="https://juliadsp.github.io/DSP.jl/stable/filters/#stateful-filter-objects-1" rel="nofollow">DSP.jl</a>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p><a href="https://github.com/sairus7/MaxMinFilters.jl/blob/master/examples/example.jl">examples/example.jl</a>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-k">using</span> MaxMinFilters
<span class="pl-k">using</span> Random

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">0</span>)
len <span class="pl-k">=</span> <span class="pl-c1">300</span>
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(len)
x[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>;
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>len
    x[i] <span class="pl-k">=</span> <span class="pl-k">-</span>(<span class="pl-c1">0.5</span> <span class="pl-k">+</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">*</span><span class="pl-c1">0.8</span> <span class="pl-k">+</span> x[i]<span class="pl-k">*</span><span class="pl-c1">0.2</span>)
<span class="pl-k">end</span>

w <span class="pl-k">=</span> <span class="pl-c1">5</span>
mx, mn <span class="pl-k">=</span> <span class="pl-c1">movmaxmin</span>(x, w)
xrange <span class="pl-k">=</span> <span class="pl-c1">movrange</span>(x, w)

<span class="pl-c1">plot</span>(x, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(mx, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mx<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(mn, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mn<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(xrange, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>range<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>png("plot1.png")</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20798349/67228143-61a89300-f441-11e9-8e0d-bd76209ec7a4.png"><img src="https://user-images.githubusercontent.com/20798349/67228143-61a89300-f441-11e9-8e0d-bd76209ec7a4.png" alt="plot1" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre>envelope <span class="pl-k">=</span> <span class="pl-c1">movenvelope</span>(x, w)
<span class="pl-c1">plot</span>(x, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(envelope[w<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>], label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>envelope<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>png("plot2.png")</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20798349/67546564-63a27880-f705-11e9-8c94-69cda507b591.png"><img src="https://user-images.githubusercontent.com/20798349/67546564-63a27880-f705-11e9-8c94-69cda507b591.png" alt="plot2" style="max-width:100%;"></a></p>
</article></div>