<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tetgen" class="anchor" aria-hidden="true" href="#tetgen"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TetGen</h1>
<p dir="auto"><a href="https://github.com/JuliaGeometry/TetGen.jl/actions"><img src="https://github.com/JuliaGeometry/TetGen.jl/workflows/linux-macos-windows/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGeometry/TetGen.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f99d72f11f72543d387c78c8c57fc0f8f4b29e8db4c33d4ece4b2e00dd7030c9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696147656f6d657472792f54657447656e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaGeometry/TetGen.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGeometry/TetGen.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/5fab2edf3816ef9fb3ebcaf6e613fa7b40ff7652ec69e5f6e7f695aa24bf5ce6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaGeometry.github.io/TetGen.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaGeometry.github.io/TetGen.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>TetGen.jl</code> package is a Julia wrapper for the C++ project <a href="https://wias-berlin.de/software/index.jsp?id=TetGen&amp;lang=1" rel="nofollow">TetGen</a>. This wrapper enables TetGen based tetrahedral meshing, and (constrained) 3D Delaunay and Voronoi tesselation.</p>
<p dir="auto">If you find TetGen useful, please consider citing
Hang Si: "TetGen, a Delaunay-Based Quality Tetrahedral Mesh Generator" ACM Trans. on Mathematical Software. 41 (2), 2015
<a href="http://doi.acm.org/10.1145/2629697" rel="nofollow">http://doi.acm.org/10.1145/2629697</a>.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">When installing TetGen.jl, a compiled library version of the TetGen library will be downloaded from the <a href="https://github.com/JuliaBinaryWrappers/TetGen_jll.jl">TetGen_jll.jl</a> repository.  This library is bound to the  <a href="https://www.gnu.org/licenses/agpl-3.0.html" rel="nofollow">Affero Gnu Public License v3 (AGPL)</a>,  but the bindings to the library in this package, TetGen.jl, are licensed under MIT. This means that code using the TetGen library via the TetGen.jl bindings is subject to TetGen's licensing terms. If you distribute covered work, i.e. a program that links to and is distributed with the TetGen library, then that distribution falls under the terms of the AGPLv3.</p>
<p dir="auto">See the <a href="http://wias-berlin.de/software/tetgen/1.5/FAQ-license.html" rel="nofollow">TetGen Licensing FAQ</a> for other options.</p>
<h2 dir="auto"><a id="user-content-example-using-geometrybasics-datatypes" class="anchor" aria-hidden="true" href="#example-using-geometrybasics-datatypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example using GeometryBasics datatypes</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TetGen
using GeometryBasics
using GeometryBasics: Mesh, QuadFace

# Construct a cube out of Quads
points = Point{3, Float64}[
    (0.0, 0.0, 0.0), (2.0, 0.0, 0.0),
    (2.0, 2.0, 0.0), (0.0, 2.0, 0.0),
    (0.0, 0.0, 12.0), (2.0, 0.0, 12.0),
    (2.0, 2.0, 12.0), (0.0, 2.0, 12.0)
]

facets = QuadFace{Cint}[
    1:4,
    5:8,
    [1,5,6,2],
    [2,6,7,3],
    [3, 7, 8, 4],
    [4, 8, 5, 1]
]

markers = Cint[-1, -2, 0, 0, 0, 0]
# attach some additional information to our faces!
mesh = Mesh(points, meta(facets, markers=markers))
result = tetrahedralize(mesh, &quot;vpq1.414a0.1&quot;)

using GLMakie

GLMakie.mesh(normal_mesh(result), color=(:blue, 0.1), transparency=true)
GLMakie.wireframe!(result)
"><pre><span class="pl-k">using</span> TetGen
<span class="pl-k">using</span> GeometryBasics
<span class="pl-k">using</span> GeometryBasics<span class="pl-k">:</span> Mesh, QuadFace

<span class="pl-c"><span class="pl-c">#</span> Construct a cube out of Quads</span>
points <span class="pl-k">=</span> Point{<span class="pl-c1">3</span>, Float64}[
    (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>),
    (<span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>),
    (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">12.0</span>), (<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">12.0</span>),
    (<span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">12.0</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">12.0</span>)
]

facets <span class="pl-k">=</span> QuadFace{Cint}[
    <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>,
    <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">8</span>,
    [<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>],
    [<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">3</span>],
    [<span class="pl-c1">3</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">4</span>],
    [<span class="pl-c1">4</span>, <span class="pl-c1">8</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>]
]

markers <span class="pl-k">=</span> Cint[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
<span class="pl-c"><span class="pl-c">#</span> attach some additional information to our faces!</span>
mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(points, <span class="pl-c1">meta</span>(facets, markers<span class="pl-k">=</span>markers))
result <span class="pl-k">=</span> <span class="pl-c1">tetrahedralize</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>vpq1.414a0.1<span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> GLMakie

GLMakie<span class="pl-k">.</span><span class="pl-c1">mesh</span>(<span class="pl-c1">normal_mesh</span>(result), color<span class="pl-k">=</span>(<span class="pl-c1">:blue</span>, <span class="pl-c1">0.1</span>), transparency<span class="pl-k">=</span><span class="pl-c1">true</span>)
GLMakie<span class="pl-k">.</span><span class="pl-c1">wireframe!</span>(result)
</pre></div>
<p dir="auto">Plotted with Makie:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/1010467/82307971-69252000-99c1-11ea-8b82-e3a206381bd3.png"><img src="https://user-images.githubusercontent.com/1010467/82307971-69252000-99c1-11ea-8b82-e3a206381bd3.png" alt="image" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example-using-plain-julia-arrays" class="anchor" aria-hidden="true" href="#example-using-plain-julia-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example using plain Julia arrays</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TetGen
let
    tetunsuitable() do pa,pb,pc,pd
        vol=det(hcat(pb-pa,pc-pa,pd-pa))/6
        center=0.25*(pa+pb+pc+pd)-[0.5,0.5,0.5]
        vol&gt; 0.05*norm(center)^2.5
    end

    input=TetGen.RawTetGenIO{Cdouble}()
    input.pointlist=[0 0 0;  
                     1 0 0;
                     1 1 0;
                     0 1 0;
                     0 0 1;  
                     1 0 1;
                     1 1 1;
                     0 1 1]'

    TetGen.facetlist!(input,[1 2 3 4;
                             5 6 7 8;
                             1 2 6 5;
                             2 3 7 6;
                             3 4 8 7;
                             4 1 5 8]')
    tetrahedralize(input, &quot;pQa&quot;)
end"><pre><span class="pl-k">using</span> TetGen
<span class="pl-k">let</span>
    <span class="pl-c1">tetunsuitable</span>() <span class="pl-k">do</span> pa,pb,pc,pd
        vol<span class="pl-k">=</span><span class="pl-c1">det</span>(<span class="pl-c1">hcat</span>(pb<span class="pl-k">-</span>pa,pc<span class="pl-k">-</span>pa,pd<span class="pl-k">-</span>pa))<span class="pl-k">/</span><span class="pl-c1">6</span>
        center<span class="pl-k">=</span><span class="pl-c1">0.25</span><span class="pl-k">*</span>(pa<span class="pl-k">+</span>pb<span class="pl-k">+</span>pc<span class="pl-k">+</span>pd)<span class="pl-k">-</span>[<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>]
        vol<span class="pl-k">&gt;</span> <span class="pl-c1">0.05</span><span class="pl-k">*</span><span class="pl-c1">norm</span>(center)<span class="pl-k">^</span><span class="pl-c1">2.5</span>
    <span class="pl-k">end</span>

    input<span class="pl-k">=</span>TetGen<span class="pl-k">.</span><span class="pl-c1">RawTetGenIO</span><span class="pl-c1">{Cdouble}</span>()
    input<span class="pl-k">.</span>pointlist<span class="pl-k">=</span>[<span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;  
                     <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
                     <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
                     <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
                     <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;  
                     <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
                     <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>;
                     <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>]<span class="pl-k">'</span>

    TetGen<span class="pl-k">.</span><span class="pl-c1">facetlist!</span>(input,[<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>;
                             <span class="pl-c1">5</span> <span class="pl-c1">6</span> <span class="pl-c1">7</span> <span class="pl-c1">8</span>;
                             <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">6</span> <span class="pl-c1">5</span>;
                             <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">7</span> <span class="pl-c1">6</span>;
                             <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">8</span> <span class="pl-c1">7</span>;
                             <span class="pl-c1">4</span> <span class="pl-c1">1</span> <span class="pl-c1">5</span> <span class="pl-c1">8</span>]<span class="pl-k">'</span>)
    <span class="pl-c1">tetrahedralize</span>(input, <span class="pl-s"><span class="pl-pds">"</span>pQa<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="RawTetGenIO(
numberofpoints=169,
numberofedges=27,
numberoftrifaces=112,
numberoftetrahedra=809,
pointlist'=[0.0 1.0 … 0.500059730245037 0.4996534431688176; 0.0 0.0 … 0.5074057466787957 0.49707528530503103; 0.0 0.0 … 0.5033015055704277 0.4953177845338027],
tetrahedronlist'=Int32[34 47 … 15 143; 6 24 … 143 15; 58 52 … 154 150; 70 73 … 168 168],
trifacelist'=Int32[3 58 … 99 22; 19 6 … 22 8; 78 70 … 158 158],
trifacemarkerlist'=Int32[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1  …  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
edgelist'=Int32[3 5 … 70 157; 18 24 … 6 32],
edgemarkerlist'=Int32[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1  …  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
)"><pre><span class="pl-c1">RawTetGenIO</span>(
numberofpoints<span class="pl-k">=</span><span class="pl-c1">169</span>,
numberofedges<span class="pl-k">=</span><span class="pl-c1">27</span>,
numberoftrifaces<span class="pl-k">=</span><span class="pl-c1">112</span>,
numberoftetrahedra<span class="pl-k">=</span><span class="pl-c1">809</span>,
pointlist<span class="pl-k">'</span><span class="pl-k">=</span>[<span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span> … <span class="pl-c1">0.500059730245037</span> <span class="pl-c1">0.4996534431688176</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.5074057466787957</span> <span class="pl-c1">0.49707528530503103</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.5033015055704277</span> <span class="pl-c1">0.4953177845338027</span>],
tetrahedronlist<span class="pl-k">'</span><span class="pl-k">=</span>Int32[<span class="pl-c1">34</span> <span class="pl-c1">47</span> … <span class="pl-c1">15</span> <span class="pl-c1">143</span>; <span class="pl-c1">6</span> <span class="pl-c1">24</span> … <span class="pl-c1">143</span> <span class="pl-c1">15</span>; <span class="pl-c1">58</span> <span class="pl-c1">52</span> … <span class="pl-c1">154</span> <span class="pl-c1">150</span>; <span class="pl-c1">70</span> <span class="pl-c1">73</span> … <span class="pl-c1">168</span> <span class="pl-c1">168</span>],
trifacelist<span class="pl-k">'</span><span class="pl-k">=</span>Int32[<span class="pl-c1">3</span> <span class="pl-c1">58</span> … <span class="pl-c1">99</span> <span class="pl-c1">22</span>; <span class="pl-c1">19</span> <span class="pl-c1">6</span> … <span class="pl-c1">22</span> <span class="pl-c1">8</span>; <span class="pl-c1">78</span> <span class="pl-c1">70</span> … <span class="pl-c1">158</span> <span class="pl-c1">158</span>],
trifacemarkerlist<span class="pl-k">'</span><span class="pl-k">=</span>Int32[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>  …  <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>],
edgelist<span class="pl-k">'</span><span class="pl-k">=</span>Int32[<span class="pl-c1">3</span> <span class="pl-c1">5</span> … <span class="pl-c1">70</span> <span class="pl-c1">157</span>; <span class="pl-c1">18</span> <span class="pl-c1">24</span> … <span class="pl-c1">6</span> <span class="pl-c1">32</span>],
edgemarkerlist<span class="pl-k">'</span><span class="pl-k">=</span>Int32[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>  …  <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>],
)</pre></div>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="https://github.com/JuliaGeometry/TetGen.jl/blob/master/CONTRIBUTING.md">Contributing</a></h2>
<h2 dir="auto"><a id="user-content-code-of-conduct" class="anchor" aria-hidden="true" href="#code-of-conduct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="https://github.com/JuliaGeometry/TetGen.jl/blob/master/CODE_OF_CONDUCT.md">Code of conduct</a></h2>
</article></div>