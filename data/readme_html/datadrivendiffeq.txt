<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-datadrivendiffeqjl" class="anchor" aria-hidden="true" href="#datadrivendiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DataDrivenDiffEq.jl</h1>
<p><a href="https://github.com/SciML/DataDrivenDiffEq.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DataDrivenDiffEq.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/DataDrivenDiffEq.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8e4ae6aff68f55de65e65cbdb9a4f804708222419d083f2d9a84a8ef932ac6ec/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614469666645712f4461746144726976656e4469666645712e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDiffEq/DataDrivenDiffEq.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaDiffEq/DataDrivenDiffEq.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8312347a3902aa94b2730bc78dad2667e90a21a1cfb1fde05a52b33e8c0570c5/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614469666645712f4461746144726976656e4469666645712e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaDiffEq/DataDrivenDiffEq.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/212827023" rel="nofollow"><img src="https://camo.githubusercontent.com/2a5127d37595855311e51f025937c2b79f7020f793704d6393589569915012a4/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3231323832373032332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/212827023.svg" style="max-width:100%;"></a></p>
<p>DataDrivenDiffEq.jl is a package in the SciML ecosystem for data-driven differential equation
structural estimation and identification. These tools include automatically discovering equations
from data and using this to simulate perturbed dynamics.</p>
<p>For information on using the package,
<a href="https://datadriven.sciml.ai/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://datadriven.sciml.ai/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation which contains the un-released features.</p>
<h2><a id="user-content-quick-demonstration" class="anchor" aria-hidden="true" href="#quick-demonstration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Demonstration</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="## Generate some data by solving a differential equation
########################################################

using DataDrivenDiffEq
using ModelingToolkit
using OrdinaryDiffEq

using LinearAlgebra
using Plots
gr()

# Create a test problem
function lorenz(u,p,t)
    x, y, z = u
    ẋ = 10.0*(y - x)
    ẏ = x*(28.0-z) - y
    ż = x*y - (8/3)*z
    return [ẋ, ẏ, ż]
end

u0 = [-8.0; 7.0; 27.0]
p = [10.0; -10.0; 28.0; -1.0; -1.0; 1.0; -8/3]
tspan = (0.0,100.0)
dt = 0.001
problem = ODEProblem(lorenz,u0,tspan)
solution = solve(problem, Tsit5(), saveat = dt, atol = 1e-7, rtol = 1e-8)

X = Array(solution)
DX = similar(X)
for (i, xi) in enumerate(eachcol(X))
    DX[:,i] = lorenz(xi, [], 0.0)
end

## Now automatically discover the system that generated the data
################################################################

@variables x y z
u = [x; y; z]
polys = Any[]
for i ∈ 0:4
    for j ∈ 0:i
        for k ∈ 0:j
            push!(polys, u[1]^i*u[2]^j*u[3]^k)
            push!(polys, u[2]^i*u[3]^j*u[1]^k)
            push!(polys, u[3]^i*u[1]^j*u[2]^k)
        end
    end
end

basis = Basis(polys, u)

opt = STRRidge(0.1)
Ψ = SINDy(X, DX, basis, opt, maxiter = 100, normalize = true)
print_equations(Ψ)
get_error(Ψ)
"><pre><span class="pl-c"><span class="pl-c">#</span># Generate some data by solving a differential equation</span>
<span class="pl-c"><span class="pl-c">#</span>#######################################################</span>

<span class="pl-k">using</span> DataDrivenDiffEq
<span class="pl-k">using</span> ModelingToolkit
<span class="pl-k">using</span> OrdinaryDiffEq

<span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> Plots
<span class="pl-c1">gr</span>()

<span class="pl-c"><span class="pl-c">#</span> Create a test problem</span>
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(u,p,t)
    x, y, z <span class="pl-k">=</span> u
    ẋ <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-k">*</span>(y <span class="pl-k">-</span> x)
    ẏ <span class="pl-k">=</span> x<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>z) <span class="pl-k">-</span> y
    ż <span class="pl-k">=</span> x<span class="pl-k">*</span>y <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>z
    <span class="pl-k">return</span> [ẋ, ẏ, ż]
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">8.0</span>; <span class="pl-c1">7.0</span>; <span class="pl-c1">27.0</span>]
p <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>; <span class="pl-k">-</span><span class="pl-c1">10.0</span>; <span class="pl-c1">28.0</span>; <span class="pl-k">-</span><span class="pl-c1">1.0</span>; <span class="pl-k">-</span><span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span>; <span class="pl-k">-</span><span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>)
dt <span class="pl-k">=</span> <span class="pl-c1">0.001</span>
problem <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz,u0,tspan)
solution <span class="pl-k">=</span> <span class="pl-c1">solve</span>(problem, <span class="pl-c1">Tsit5</span>(), saveat <span class="pl-k">=</span> dt, atol <span class="pl-k">=</span> <span class="pl-c1">1e-7</span>, rtol <span class="pl-k">=</span> <span class="pl-c1">1e-8</span>)

X <span class="pl-k">=</span> <span class="pl-c1">Array</span>(solution)
DX <span class="pl-k">=</span> <span class="pl-c1">similar</span>(X)
<span class="pl-k">for</span> (i, xi) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">eachcol</span>(X))
    DX[:,i] <span class="pl-k">=</span> <span class="pl-c1">lorenz</span>(xi, [], <span class="pl-c1">0.0</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span># Now automatically discover the system that generated the data</span>
<span class="pl-c"><span class="pl-c">#</span>###############################################################</span>

<span class="pl-c1">@variables</span> x y z
u <span class="pl-k">=</span> [x; y; z]
polys <span class="pl-k">=</span> Any[]
<span class="pl-k">for</span> i <span class="pl-k">∈</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>
    <span class="pl-k">for</span> j <span class="pl-k">∈</span> <span class="pl-c1">0</span><span class="pl-k">:</span>i
        <span class="pl-k">for</span> k <span class="pl-k">∈</span> <span class="pl-c1">0</span><span class="pl-k">:</span>j
            <span class="pl-c1">push!</span>(polys, u[<span class="pl-c1">1</span>]<span class="pl-k">^</span>i<span class="pl-k">*</span>u[<span class="pl-c1">2</span>]<span class="pl-k">^</span>j<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]<span class="pl-k">^</span>k)
            <span class="pl-c1">push!</span>(polys, u[<span class="pl-c1">2</span>]<span class="pl-k">^</span>i<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]<span class="pl-k">^</span>j<span class="pl-k">*</span>u[<span class="pl-c1">1</span>]<span class="pl-k">^</span>k)
            <span class="pl-c1">push!</span>(polys, u[<span class="pl-c1">3</span>]<span class="pl-k">^</span>i<span class="pl-k">*</span>u[<span class="pl-c1">1</span>]<span class="pl-k">^</span>j<span class="pl-k">*</span>u[<span class="pl-c1">2</span>]<span class="pl-k">^</span>k)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

basis <span class="pl-k">=</span> <span class="pl-c1">Basis</span>(polys, u)

opt <span class="pl-k">=</span> <span class="pl-c1">STRRidge</span>(<span class="pl-c1">0.1</span>)
Ψ <span class="pl-k">=</span> <span class="pl-c1">SINDy</span>(X, DX, basis, opt, maxiter <span class="pl-k">=</span> <span class="pl-c1">100</span>, normalize <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">print_equations</span>(Ψ)
<span class="pl-c1">get_error</span>(Ψ)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="3-dimensional basis in [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;]
dx = p₁ * x + p₂ * y
dy = p₃ * x + p₄ * y + z * x * p₅
dz = p₆ * z + x * y * p₇

# Error
3-element Array{Float64,1}:
 6.7202639134663155e-12
 3.505423292198665e-11
 1.2876598297504605e-11
"><pre><code>3-dimensional basis in ["x", "y", "z"]
dx = p₁ * x + p₂ * y
dy = p₃ * x + p₄ * y + z * x * p₅
dz = p₆ * z + x * y * p₇

# Error
3-element Array{Float64,1}:
 6.7202639134663155e-12
 3.505423292198665e-11
 1.2876598297504605e-11
</code></pre></div>
</article></div>