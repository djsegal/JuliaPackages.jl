<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-datadrivendiffeqjl" class="anchor" aria-hidden="true" href="#datadrivendiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DataDrivenDiffEq.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/DataDrivenDiffEq/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/212827023" rel="nofollow"><img src="https://camo.githubusercontent.com/2a5127d37595855311e51f025937c2b79f7020f793704d6393589569915012a4/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3231323832373032332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/212827023.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/DataDrivenDiffEq.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b535a9bb4cf802e6d01aeeef8ea5c53a270175dd5772585f24b2244237a3b94c/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f4461746144726976656e4469666645712e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/DataDrivenDiffEq.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/DataDrivenDiffEq.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DataDrivenDiffEq.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">DataDrivenDiffEq.jl is a package in the SciML ecosystem for data-driven differential equation
structural estimation and identification. These tools include automatically discovering equations
from data and using this to simulate perturbed dynamics.</p>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/DataDrivenDiffEq/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/DataDrivenDiffEq/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation which contains the un-released features.</p>
<h2 dir="auto"><a id="user-content-quick-demonstration" class="anchor" aria-hidden="true" href="#quick-demonstration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Demonstration</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## Generate some data by solving a differential equation
########################################################
using DataDrivenDiffEq
using ModelingToolkit
using OrdinaryDiffEq
using DataDrivenSparse
using LinearAlgebra

# Create a test problem
function lorenz(u, p, t)
    x, y, z = u

    ẋ = 10.0 * (y - x)
    ẏ = x * (28.0 - z) - y
    ż = x * y - (8 / 3) * z
    return [ẋ, ẏ, ż]
end

u0 = [1.0; 0.0; 0.0]
tspan = (0.0, 100.0)
dt = 0.1
prob = ODEProblem(lorenz, u0, tspan)
sol = solve(prob, Tsit5(), saveat = dt)

## Start the automatic discovery
ddprob = DataDrivenProblem(sol)

@variables t x(t) y(t) z(t)
u = [x; y; z]
basis = Basis(polynomial_basis(u, 5), u, iv = t)
opt = STLSQ(exp10.(-5:0.1:-1))
ddsol = solve(ddprob, basis, opt, options = DataDrivenCommonOptions(digits = 1))
println(get_basis(ddsol))"><pre><span class="pl-c"><span class="pl-c">#</span># Generate some data by solving a differential equation</span>
<span class="pl-c"><span class="pl-c">#</span>#######################################################</span>
<span class="pl-k">using</span> DataDrivenDiffEq
<span class="pl-k">using</span> ModelingToolkit
<span class="pl-k">using</span> OrdinaryDiffEq
<span class="pl-k">using</span> DataDrivenSparse
<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Create a test problem</span>
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(u, p, t)
    x, y, z <span class="pl-k">=</span> u

    ẋ <span class="pl-k">=</span> <span class="pl-c1">10.0</span> <span class="pl-k">*</span> (y <span class="pl-k">-</span> x)
    ẏ <span class="pl-k">=</span> x <span class="pl-k">*</span> (<span class="pl-c1">28.0</span> <span class="pl-k">-</span> z) <span class="pl-k">-</span> y
    ż <span class="pl-k">=</span> x <span class="pl-k">*</span> y <span class="pl-k">-</span> (<span class="pl-c1">8</span> <span class="pl-k">/</span> <span class="pl-c1">3</span>) <span class="pl-k">*</span> z
    <span class="pl-k">return</span> [ẋ, ẏ, ż]
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>; <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>)
dt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz, u0, tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Tsit5</span>(), saveat <span class="pl-k">=</span> dt)

<span class="pl-c"><span class="pl-c">#</span># Start the automatic discovery</span>
ddprob <span class="pl-k">=</span> <span class="pl-c1">DataDrivenProblem</span>(sol)

<span class="pl-c1">@variables</span> t <span class="pl-c1">x</span>(t) <span class="pl-c1">y</span>(t) <span class="pl-c1">z</span>(t)
u <span class="pl-k">=</span> [x; y; z]
basis <span class="pl-k">=</span> <span class="pl-c1">Basis</span>(<span class="pl-c1">polynomial_basis</span>(u, <span class="pl-c1">5</span>), u, iv <span class="pl-k">=</span> t)
opt <span class="pl-k">=</span> <span class="pl-c1">STLSQ</span>(<span class="pl-c1">exp10</span>.(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>))
ddsol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(ddprob, basis, opt, options <span class="pl-k">=</span> <span class="pl-c1">DataDrivenCommonOptions</span>(digits <span class="pl-k">=</span> <span class="pl-c1">1</span>))
<span class="pl-c1">println</span>(<span class="pl-c1">get_basis</span>(ddsol))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Explicit Result
Solution with 3 equations and 7 parameters.
Returncode: success
Sparsity: 7.0
L2 Norm Error: 26.7343984476783
AICC: 1.0013570199499398

Model ##Basis#366 with 3 equations
States : x(t) y(t) z(t)
Parameters : 7
Independent variable: t
Equations
Differential(t)(x(t)) = p₁*x(t) + p₂*y(t)
Differential(t)(y(t)) = p₃*x(t) + p₄*y(t) + p₅*x(t)*z(t)
Differential(t)(z(t)) = p₇*z(t) + p₆*x(t)*y(t)

Parameters:
   p₁ : -10.0
   p₂ : 10.0
   p₃ : 28.0
   p₄ : -1.0
   p₅ : -1.0
   p₆ : 1.0
   p₇ : -2.7"><pre class="notranslate"><code>Explicit Result
Solution with 3 equations and 7 parameters.
Returncode: success
Sparsity: 7.0
L2 Norm Error: 26.7343984476783
AICC: 1.0013570199499398

Model ##Basis#366 with 3 equations
States : x(t) y(t) z(t)
Parameters : 7
Independent variable: t
Equations
Differential(t)(x(t)) = p₁*x(t) + p₂*y(t)
Differential(t)(y(t)) = p₃*x(t) + p₄*y(t) + p₅*x(t)*z(t)
Differential(t)(z(t)) = p₇*z(t) + p₆*x(t)*y(t)

Parameters:
   p₁ : -10.0
   p₂ : 10.0
   p₃ : 28.0
   p₄ : -1.0
   p₅ : -1.0
   p₆ : 1.0
   p₇ : -2.7
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="LorenzResult.png"><img src="LorenzResult.png" alt="" style="max-width: 100%;"></a></p>
</article></div>