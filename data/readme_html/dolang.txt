<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><strong>What is dolang ?</strong></p>
<p>It is the current codename for a complete rewrite of the dolo language. It aims at:</p>
<ul>
<li>being a first stone for the rewrite of dolo in julia</li>
<li>improving model validity checks and providing not so cryptic error messages (for dolo 0.5)</li>
<li>allow for easy language extensions</li>
<li>being reusable in conjunction with other libraries (like pandas, or <a href="https://github.com/albop/backtothetrees.git">bttt</a>)</li>
</ul>
<p><strong>What does it consist in ?</strong></p>
<ul>
<li>a standardized way of describing equations with different types of variables as well as methods to operate on these equations</li>
<li><code>compilation</code> routines to turn these equations into vectorized/optimized functions</li>
<li>rules to define arbitrary objects with a yaml file and a collection of useful objects (distributions, markov chains, approximation spaces, priors, ...)</li>
</ul>
<h2><a id="user-content-equation-description-codename-dolex" class="anchor" aria-hidden="true" href="#equation-description-codename-dolex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Equation description (codename dolex)</h2>
<ul>
<li>
<p>unicode fomulas:  use crazy hebrew letters !</p>
</li>
<li>
<p>latex output (and input ?)</p>
</li>
<li>
<p>time subscripts (default to be determined):</p>
<ul>
<li>implicit time: <code>a(1)</code>, <code>a(-1)</code> for <code>a_{t}</code> and <code>a_{t-1}</code></li>
<li>explicit time: <code>a(t+1)</code>, <code>a(t-1)</code> for <code>a_{t}</code> and <code>a_{t-1}</code></li>
<li>continuous time:  <code>a(t)</code>, <code>a(t+dt)</code> for <code>a_{t}</code> and <code>a_{t+dt}</code></li>
</ul>
</li>
<li>
<p>other subscripts:</p>
<ul>
<li>subscripted variables <code>a[i,j](t)</code> for `a_{i,j,t}``</li>
<li>superscripts  <code>a[~i,j](t)</code> for `a^i_{j,t}``</li>
</ul>
</li>
<li>
<p>expressions defined on an event tree (see bttt)</p>
<ul>
<li><code>v[s-1] + v[s] + E[ s[1] | s[1], S(s) ]</code></li>
</ul>
</li>
<li>
<p>common constructs:</p>
<ul>
<li>expectations: <code>E[...]</code> or  <code>E_t[ ... ]</code></li>
<li>differential operators: ??</li>
</ul>
</li>
<li>
<p>basic symbolic operations on expressions:</p>
<ul>
<li>count/check incidence of symbols</li>
<li>substitutions</li>
<li>differentiation</li>
</ul>
</li>
</ul>
<p>How does it work (for now)?</p>
<pre><code>- expressions are parsed by python/julia parser
- pattern matching is used to substitute symbols by a unique string identifier:

    - a[x,y] -&gt; a__x__y
    - a(t,t+dt,t-dt) -&gt; a__t__tpdt__tmdt
    - a(1, -1) -&gt; a____p1__m1

- symbolic operations can then be done by manipulating the expression trees directly or by using a symbolic engine
</code></pre>
<h2><a id="user-content-objects-in-yaml--codename-dolaml" class="anchor" aria-hidden="true" href="#objects-in-yaml--codename-dolaml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Objects in Yaml  (codename dolaml)</h2>
<p>For instance</p>
<pre><code>FunctionalSpace:
    domain:
        SmolyakGrid:
            a: [0,0]
            b: [1,1]
            m: 4
    interp_type: polynomial
</code></pre>
<p>gets translated to Julia/Python object:</p>
<pre><code>FunctionalSpace(
     domain=SmolyakGrid(
          a=[0,0],
          b=[1,1],
          l=4
     ),
     interp_type='polynomial'
)
</code></pre>
<h2><a id="user-content-compilation" class="anchor" aria-hidden="true" href="#compilation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Compilation</h2>
<p>Example:</p>
<pre><code>eqs = [
    'a*x + y(1)',
    'x(1) - b*y',
]
from collections import OrderedDict
symbols = OrderedDict(
    states=['x', 'y'],
    parameters=['a', 'b']
)
api = [
    ('states',0,'s'),        # represents all variables v(0) where v is a state
    ('states',1,'s'),        # represents all variables v(1) where v is a state
    ('parameters',0,'p')
]

f = compile_function(eqs, symbols, api)

# returns a function f(s_0, s_1, p)
</code></pre>
</article></div>