<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gridappetsc" class="anchor" aria-hidden="true" href="#gridappetsc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GridapPETSc</h1>
<p><a href="https://gridap.github.io/GridapPETSc.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/GridapPETSc.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/gridap/GridapPETSc.jl/actions?query=workflow%3ACI"><img src="https://github.com/gridap/GridapPETSc.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/GridapPETSc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/530ac874d65a5b801cb7ceb577ad4d943bae0a55748f999ec215492b568db415/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f47726964617050455453632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/GridapPETSc.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://github.com/gridap/Gridap.jl">Gridap</a> (Grid-based approximation of partial differential equations in Julia) plugin to use PETSC (<a href="https://www.mcs.anl.gov/petsc/" rel="nofollow">Portable, Extensible Toolkit for Scientific Computation</a>).</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MPI
using Gridap
using GridapPETSc
using SparseArrays

MPI.Init()
GridapPETSc.Init()

A = sparse([1,2,3,4,5],[1,2,3,4,5],[1.0,2.0,3.0,4.0,5.0])
b = ones(A.n)
x = similar(b)
ps = PETScSolver()
ss = symbolic_setup(ps, A)
ns = numerical_setup(ss, A)
solve!(x, ns, b)

GridapPETSc.Finalize()
MPI.Finalize()
"><pre><span class="pl-k">using</span> MPI
<span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> GridapPETSc
<span class="pl-k">using</span> SparseArrays

MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
GridapPETSc<span class="pl-k">.</span><span class="pl-c1">Init</span>()

A <span class="pl-k">=</span> <span class="pl-c1">sparse</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">4.0</span>,<span class="pl-c1">5.0</span>])
b <span class="pl-k">=</span> <span class="pl-c1">ones</span>(A<span class="pl-k">.</span>n)
x <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b)
ps <span class="pl-k">=</span> <span class="pl-c1">PETScSolver</span>()
ss <span class="pl-k">=</span> <span class="pl-c1">symbolic_setup</span>(ps, A)
ns <span class="pl-k">=</span> <span class="pl-c1">numerical_setup</span>(ss, A)
<span class="pl-c1">solve!</span>(x, ns, b)

GridapPETSc<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()
MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()</pre></div>
<h2><a id="user-content-usage-in-a-finite-element-computation" class="anchor" aria-hidden="true" href="#usage-in-a-finite-element-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage in a Finite Element computation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MPI
using Gridap
using GridapPETSc

tol = 1e-10

MPI.Init()
GridapPETSc.Init([&quot;-ksp_rtol&quot;,&quot;$tol&quot;])

domain = (0,1,0,1,0,1)
cells  = (10,10,10)
model  = CartesianDiscreteModel(domain,cells)

order = 1
V = TestFESpace( model,
      ReferenceFE(lagrangian,Float64,order),
      conformity=:H1, dirichlet_tags=&quot;boundary&quot; )
U = TrialFESpace(V)

Ω = Triangulation(model)

degree = 2*order
dΩ = Measure(Ω,degree)

f(x) = x[1]*x[2]

a(u,v) = ∫( ∇(v)⋅∇(u) )*dΩ
l(v) = ∫( v*f )*dΩ

ass = SparseMatrixAssembler(SparseMatrixCSR{0,PetscReal,PetscInt},U,V)
op = AffineFEOperator(a,l,ass)

ls = PETScSolver()
solver = LinearFESolver(ls)

uh = solve(solver,op)

GridapPETSc.Finalize()
MPI.Finalize()
"><pre><span class="pl-k">using</span> MPI
<span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> GridapPETSc

tol <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>

MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
GridapPETSc<span class="pl-k">.</span><span class="pl-c1">Init</span>([<span class="pl-s"><span class="pl-pds">"</span>-ksp_rtol<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$tol</span><span class="pl-pds">"</span></span>])

domain <span class="pl-k">=</span> (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
cells  <span class="pl-k">=</span> (<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)
model  <span class="pl-k">=</span> <span class="pl-c1">CartesianDiscreteModel</span>(domain,cells)

order <span class="pl-k">=</span> <span class="pl-c1">1</span>
V <span class="pl-k">=</span> <span class="pl-c1">TestFESpace</span>( model,
      <span class="pl-c1">ReferenceFE</span>(lagrangian,Float64,order),
      conformity<span class="pl-k">=</span><span class="pl-c1">:H1</span>, dirichlet_tags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span> )
U <span class="pl-k">=</span> <span class="pl-c1">TrialFESpace</span>(V)

Ω <span class="pl-k">=</span> <span class="pl-c1">Triangulation</span>(model)

degree <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>order
dΩ <span class="pl-k">=</span> <span class="pl-c1">Measure</span>(Ω,degree)

<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>]

<span class="pl-en">a</span>(u,v) <span class="pl-k">=</span> <span class="pl-c1">∫</span>( <span class="pl-c1">∇</span>(v)<span class="pl-k">⋅</span><span class="pl-c1">∇</span>(u) )<span class="pl-k">*</span>dΩ
<span class="pl-en">l</span>(v) <span class="pl-k">=</span> <span class="pl-c1">∫</span>( v<span class="pl-k">*</span>f )<span class="pl-k">*</span>dΩ

ass <span class="pl-k">=</span> <span class="pl-c1">SparseMatrixAssembler</span>(SparseMatrixCSR{<span class="pl-c1">0</span>,PetscReal,PetscInt},U,V)
op <span class="pl-k">=</span> <span class="pl-c1">AffineFEOperator</span>(a,l,ass)

ls <span class="pl-k">=</span> <span class="pl-c1">PETScSolver</span>()
solver <span class="pl-k">=</span> <span class="pl-c1">LinearFESolver</span>(ls)

uh <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver,op)

GridapPETSc<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()
MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><strong>GridPETSc</strong> itself is installed when you add and use it into another project.</p>
<p>Please, ensure that your system fulfills the requirements.</p>
<p>To include into your project form Julia REPL, use the following commands:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add GridapPETSc
julia&gt; using GridapPETSc
"><pre><code>pkg&gt; add GridapPETSc
julia&gt; using GridapPETSc
</code></pre></div>
<p>If, for any reason, you need to manually build the project, write down the following commands in Julia REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add GridapPETSc
pkg&gt; build GridapPETSc
julia&gt; using GridapPETSc
"><pre><code>pkg&gt; add GridapPETSc
pkg&gt; build GridapPETSc
julia&gt; using GridapPETSc
</code></pre></div>
<h3><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h3>
<p><code>GridapPETSc</code> julia package requires <code>PETSC</code> library (<a href="https://www.mcs.anl.gov/petsc/" rel="nofollow">Portable, Extensible Toolkit for Scientific Computation</a>) and <code>OPENMPI</code> to work correctly. <code>PETSc</code> library can be manually installed in any path on your local machine. In order to succesfull describe your custom installation to be located by <code>GridapPETSc</code>, you must export <code>PETSC_DIR</code> and <code>PETSC_ARCH</code> environment variables. If this environment variables are not available, <code>GridapPETSc</code> will try to find the library in the usual linux user library directory (<code>/usr/lib</code>).</p>
<p><code>PETSC_DIR</code> and <code>PETSC_ARCH</code> are a couple of variables that control the configuration and build process of PETSc:</p>
<ul>
<li><code>PETSC_DIR</code>: this variable should point to the location of the PETSc installation that is used. Multiple PETSc versions can coexist on the same file-system. By changing <code>PETSC_DIR</code> value, one can switch between these installed versions of PETSc.</li>
<li><code>PETSC_ARCH</code>: this variable gives a name to a configuration/build. Configure uses this value to stores the generated config makefiles in <code>${PETSC_DIR}/${PETSC_ARCH}</code>. Make uses this value to determine this location of these makefiles which intern help in locating the correct include and library files.</li>
</ul>
<p>Thus one can install multiple variants of PETSc libraries - by providing different <code>PETSC_ARCH</code> values to each configure build. Then one can switch between using these variants of libraries from make by switching the <code>PETSC_ARCH</code> value used.</p>
<p>If configure doesn't find a <code>PETSC_ARCH</code> value (either in env variable or command line option), it automatically generates a default value and uses it. Also - if make doesn't find a <code>PETSC_ARCH</code> env variable - it defaults to the value used by last successful invocation of previous configure. <code>PETSC_ARCH</code> value can be an empty string too.</p>
<h4><a id="user-content-basic-petsc-installation-on-debian-based-systems" class="anchor" aria-hidden="true" href="#basic-petsc-installation-on-debian-based-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic PETSc installation on Debian-based systems</h4>
<p><code>PETSc</code> can be obtained from the default repositories of your Debian-based OS by means of <code>apt</code> tool.</p>
<p>Basic <code>PETSc</code> installation in order to use it from <code>GridapPETSc</code> julia package is as follows:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$ sudo apt-get update
$ sudo apt-get install openmpi-bin petsc-dev
"><pre><code>$ sudo apt-get update
$ sudo apt-get install openmpi-bin petsc-dev
</code></pre></div>
<h2><a id="user-content-continuous-integration" class="anchor" aria-hidden="true" href="#continuous-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Continuous integration</h2>
<p>In order to take advantage of <code>GridapPETSc</code> julia package during continuous integration, you must ensure that the requirements are fullfilled in the CI environment.</p>
<p>If your CI process is based on <code>Travis-CI</code> you can add the following block at the beginning of your <code>.travis.yml</code> file:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="addons:
  apt:
    update: true
    packages:
    - openmpi-bin
    - petsc-dev
"><pre><code>addons:
  apt:
    update: true
    packages:
    - openmpi-bin
    - petsc-dev
</code></pre></div>
<p>If your CI process is based on <code>GitHub Actions</code> you can add the following block at the beginning of the test steps in the <code>.github/workflows/ci.yml</code> file:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="steps:
  - name: Install dependencies
    run: sudo apt-get update; sudo apt-get install openmpi-bin petsc-dev
"><pre><code>steps:
  - name: Install dependencies
    run: sudo apt-get update; sudo apt-get install openmpi-bin petsc-dev
</code></pre></div>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h2>
<p><code>GridapPETSc</code> default sparse matrix format is 0-based compressed sparse row. This types of sparse matrix can be described by <code>SparseMatrixCSR{0,PetscReal,PetscInt}</code> and <code>SymSparseMatrixCSR{0,PetscReal,PetscInt}</code>.These types of matrix are implemented in the <a href="https://gridap.github.io/SparseMatricesCSR.jl/stable/" rel="nofollow">SparseMatricesCSR</a>) julia package.</p>
</article></div>