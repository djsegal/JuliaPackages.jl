<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-foundationdb-julia-client" class="anchor" aria-hidden="true" href="#foundationdb-julia-client"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FoundationDB Julia Client</h1>
<p><a href="https://travis-ci.org/tanmaykm/FoundationDB.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ece88ce48e7214df01c1a2a6d68b0db4442d00147aa602d6769d0f607c8f1124/68747470733a2f2f7472617669732d63692e6f72672f74616e6d61796b6d2f466f756e646174696f6e44422e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tanmaykm/FoundationDB.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tanmaykm/FoundationDB.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f7150a84462eb91620d5558b22e47c85a35a918281737c9049b306220d2e8527/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f74616e6d61796b6d2f466f756e646174696f6e44422e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/tanmaykm/FoundationDB.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tanmaykm/FoundationDB.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/01881fc0928bd3b1a882d344489fa3ee785949a39801b1347c90855f82f60a8f/687474703a2f2f636f6465636f762e696f2f6769746875622f74616e6d61796b6d2f466f756e646174696f6e44422e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tanmaykm/FoundationDB.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>The current implementation covers all of the C-APIs, and provides an easy to use Julia API layer over it for simple key-value pairs.</p>
<p>The Julia APIs are quite easy to follow, with this example:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using FoundationDB

open(FDBCluster()) do cluster                        # Read cluster configuration
    open(FDBDatabase(cluster)) do db                 # Open the database
        key = UInt8[0,1,2]                           # This is a key, and ...
        val = UInt8[9, 9, 9]                         # this is a value. Both are byte arrays.
        open(FDBTransaction(db)) do tran             # Start a transaction
            @test clearkey(tran, key) == nothing     # Delete a key if present
            @test getval(tran, key) == nothing       # Get value for a key (nothing if not present)
            @test setval(tran, key, val) == nothing  # Set value for a key
            @test getval(tran, key) == val           # We get the value, once it has been set
            @test commit(tran)                       # Commit changes we made in our snapshot
            @test_throws FDBError commit(tran)       # We can only commit once.
        end

        open(FDBTransaction(db)) do tran             # Open a new transaction 
            @test clearkey(tran, key) == nothing     # Delete a key
            @test getval(tran, key) == nothing
        end                                          # Transactions are auto-committed by default!
                                                     # And also retried automatically when possible

        open(FDBTransaction(db)) do tran             # Need a transaction even for read operation
            @test getval(tran, key) == nothing
        end                                          # Reads don't have to be committed
    end
end
"><pre><code>using FoundationDB

open(FDBCluster()) do cluster                        # Read cluster configuration
    open(FDBDatabase(cluster)) do db                 # Open the database
        key = UInt8[0,1,2]                           # This is a key, and ...
        val = UInt8[9, 9, 9]                         # this is a value. Both are byte arrays.
        open(FDBTransaction(db)) do tran             # Start a transaction
            @test clearkey(tran, key) == nothing     # Delete a key if present
            @test getval(tran, key) == nothing       # Get value for a key (nothing if not present)
            @test setval(tran, key, val) == nothing  # Set value for a key
            @test getval(tran, key) == val           # We get the value, once it has been set
            @test commit(tran)                       # Commit changes we made in our snapshot
            @test_throws FDBError commit(tran)       # We can only commit once.
        end

        open(FDBTransaction(db)) do tran             # Open a new transaction 
            @test clearkey(tran, key) == nothing     # Delete a key
            @test getval(tran, key) == nothing
        end                                          # Transactions are auto-committed by default!
                                                     # And also retried automatically when possible

        open(FDBTransaction(db)) do tran             # Need a transaction even for read operation
            @test getval(tran, key) == nothing
        end                                          # Reads don't have to be committed
    end
end
</code></pre></div>
<p>Note: The Julia implementation makes use of Julia threading APIs. Make sure you have enabled threading and have at least two threads configured for Julia. E.g.:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$&gt; JULIA_NUM_THREADS=2
$&gt; export JULIA_NUM_THREADS
$&gt; julia -e 'using Pkg; Pkg.test(&quot;FoundationDB&quot;)'
"><pre><code>$&gt; JULIA_NUM_THREADS=2
$&gt; export JULIA_NUM_THREADS
$&gt; julia -e 'using Pkg; Pkg.test("FoundationDB")'
</code></pre></div>
</article></div>