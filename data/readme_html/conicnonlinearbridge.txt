<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-conicnonlinearbridge" class="anchor" aria-hidden="true" href="#conicnonlinearbridge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ConicNonlinearBridge</h1>
<p><a href="https://travis-ci.org/mlubin/ConicNonlinearBridge.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a43069efcf6456a71612e866dae6fc8151fae1a/68747470733a2f2f7472617669732d63692e6f72672f6d6c7562696e2f436f6e69634e6f6e6c696e6561724272696467652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mlubin/ConicNonlinearBridge.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mlubin/ConicNonlinearBridge.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4af6a13a1339c942d29668ae7cb8b28b0b9ecf88/68747470733a2f2f636f6465636f762e696f2f67682f6d6c7562696e2f436f6e69634e6f6e6c696e6561724272696467652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mlubin/ConicNonlinearBridge.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements a wrapper to allow derivative-based nonlinear solvers to function as <a href="http://mathprogbasejl.readthedocs.org/en/latest/conic.html" rel="nofollow">conic solvers</a> for problems involving linear, (rotated) second-order, and exponential cones. For example:</p>
<pre><code># min -2y -1z
#  st  x == 1,
#      x &gt;= norm(y, z)
using MathProgBase, ConicNonlinearBridge, Ipopt
solver = ConicNLPWrapper(nlp_solver=IpoptSolver())
m = MathProgBase.ConicModel(solver)
MathProgBase.loadproblem!(m, [0, -2, -1], [1 0 0], [1], [(:Zero, 1)], [(:SOC, 1:3)])  
MathProgBase.optimize!(m)
MathProgBase.status(m) # :Optimal
MathProgBase.getsolution(m) # [1.0, 0.894427, 0.447214]
MathProgBase.getobjval(m) # -2.236067
MathProgBase.freemodel!(m)
</code></pre>
<p>You may replace <code>IpoptSolver</code> above with any NLP solver (e.g. Knitro) accessible through MathProgBase, and you may pass valid options to the NLP solver directly (e.g. <code>IpoptSolver(print_level=1)</code>.</p>
<p>This wrapper is experimental. If you are experiencing convergence troubles with existing conic solvers, this wrapper may be helpful. In general, however, specialized conic solvers are more reliable than derivative-based nonlinear solvers, especially for detection of infeasibility and unboundedness. If you find this wrapper useful, please let us know.</p>
</article></div>