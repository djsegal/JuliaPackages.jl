<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-conicnonlinearbridge" class="anchor" aria-hidden="true" href="#conicnonlinearbridge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ConicNonlinearBridge</h1>
<p dir="auto"><a href="https://travis-ci.org/mlubin/ConicNonlinearBridge.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3f55449500a1f076e9575f4e28b1e11ee772f86beee403a4f3408511d2da204/68747470733a2f2f7472617669732d63692e6f72672f6d6c7562696e2f436f6e69634e6f6e6c696e6561724272696467652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mlubin/ConicNonlinearBridge.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mlubin/ConicNonlinearBridge.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/588ba0fd989af23d4ba80a0ef203967794419860cd5f559a17da775c17748374/68747470733a2f2f636f6465636f762e696f2f67682f6d6c7562696e2f436f6e69634e6f6e6c696e6561724272696467652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mlubin/ConicNonlinearBridge.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements a wrapper to allow derivative-based nonlinear solvers to function as <a href="http://mathprogbasejl.readthedocs.org/en/latest/conic.html" rel="nofollow">conic solvers</a> for problems involving linear, (rotated) second-order, and exponential cones. For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# min -2y -1z
#  st  x == 1,
#      x &gt;= norm(y, z)
using MathProgBase, ConicNonlinearBridge, Ipopt
solver = ConicNLPWrapper(nlp_solver=IpoptSolver())
m = MathProgBase.ConicModel(solver)
MathProgBase.loadproblem!(m, [0, -2, -1], [1 0 0], [1], [(:Zero, 1)], [(:SOC, 1:3)])  
MathProgBase.optimize!(m)
MathProgBase.status(m) # :Optimal
MathProgBase.getsolution(m) # [1.0, 0.894427, 0.447214]
MathProgBase.getobjval(m) # -2.236067
MathProgBase.freemodel!(m)"><pre class="notranslate"><code># min -2y -1z
#  st  x == 1,
#      x &gt;= norm(y, z)
using MathProgBase, ConicNonlinearBridge, Ipopt
solver = ConicNLPWrapper(nlp_solver=IpoptSolver())
m = MathProgBase.ConicModel(solver)
MathProgBase.loadproblem!(m, [0, -2, -1], [1 0 0], [1], [(:Zero, 1)], [(:SOC, 1:3)])  
MathProgBase.optimize!(m)
MathProgBase.status(m) # :Optimal
MathProgBase.getsolution(m) # [1.0, 0.894427, 0.447214]
MathProgBase.getobjval(m) # -2.236067
MathProgBase.freemodel!(m)
</code></pre></div>
<p dir="auto">You may replace <code>IpoptSolver</code> above with any NLP solver (e.g. Knitro) accessible through MathProgBase, and you may pass valid options to the NLP solver directly (e.g. <code>IpoptSolver(print_level=1)</code>.</p>
<p dir="auto">This wrapper is experimental. If you are experiencing convergence troubles with existing conic solvers, this wrapper may be helpful. In general, however, specialized conic solvers are more reliable than derivative-based nonlinear solvers, especially for detection of infeasibility and unboundedness. If you find this wrapper useful, please let us know.</p>
</article></div>