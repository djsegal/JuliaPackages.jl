<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-topopt" class="anchor" aria-hidden="true" href="#topopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TopOpt</h1>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Setup</span>

<span class="pl-k">using</span> Pkg

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/mohamed82008/JuAFEM.jl#master<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/mohamed82008/VTKDataTypes.jl#master<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/mohamed82008/KissThreading.jl#master<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/mohamed82008/TopOpt.jl#master<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add Makie<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Load the package</span>

<span class="pl-k">using</span> TopOpt, Makie

<span class="pl-c"><span class="pl-c">#</span> Define the problem</span>

E <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> Young’s modulus</span>
v <span class="pl-k">=</span> <span class="pl-c1">0.3</span> <span class="pl-c"><span class="pl-c">#</span> Poisson’s ratio</span>
f <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> downward force</span>

problem <span class="pl-k">=</span> <span class="pl-c1">PointLoadCantilever</span>(Val{<span class="pl-c1">:Linear</span>}, (<span class="pl-c1">40</span>, <span class="pl-c1">20</span>, <span class="pl-c1">20</span>), (<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>), E, v, f)
<span class="pl-c"><span class="pl-c">#</span> problem = HalfMBB(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f)</span>
<span class="pl-c"><span class="pl-c">#</span> problem = PointLoadCantilever(Val{:Quadratic}, (160, 40), (1.0, 1.0), E, v, f)</span>
<span class="pl-c"><span class="pl-c">#</span> problem = LBeam(Val{:Linear}, Float64)</span>

<span class="pl-c"><span class="pl-c">#</span> Parameter settings</span>

V <span class="pl-k">=</span> <span class="pl-c1">0.3</span> <span class="pl-c"><span class="pl-c">#</span> volume fraction</span>
xmin <span class="pl-k">=</span> <span class="pl-c1">0.001</span> <span class="pl-c"><span class="pl-c">#</span> minimum density</span>
rmin <span class="pl-k">=</span> <span class="pl-c1">4.0</span> <span class="pl-c"><span class="pl-c">#</span> density filter radius</span>

<span class="pl-c"><span class="pl-c">#</span> Define a finite element solver</span>

penalty <span class="pl-k">=</span> TopOpt<span class="pl-k">.</span><span class="pl-c1">PowerPenalty</span>(<span class="pl-c1">3.0</span>)
solver <span class="pl-k">=</span> <span class="pl-c1">FEASolver</span>(Displacement, Direct, problem, xmin <span class="pl-k">=</span> xmin,
    penalty <span class="pl-k">=</span> penalty)

<span class="pl-c"><span class="pl-c">#</span> Define compliance objective</span>

obj <span class="pl-k">=</span> <span class="pl-c1">Objective</span>(TopOpt<span class="pl-k">.</span><span class="pl-c1">Compliance</span>(problem, solver, filterT <span class="pl-k">=</span> DensityFilter,
    rmin <span class="pl-k">=</span> rmin, tracing <span class="pl-k">=</span> <span class="pl-c1">true</span>, logarithm <span class="pl-k">=</span> <span class="pl-c1">false</span>))

<span class="pl-c"><span class="pl-c">#</span> Define volume constraint</span>

constr <span class="pl-k">=</span> <span class="pl-c1">Constraint</span>(TopOpt<span class="pl-k">.</span><span class="pl-c1">Volume</span>(problem, solver, filterT <span class="pl-k">=</span> DensityFilter, rmin <span class="pl-k">=</span> rmin), V)

<span class="pl-c"><span class="pl-c">#</span> Define subproblem optimizer</span>

mma_options <span class="pl-k">=</span> options <span class="pl-k">=</span> MMA<span class="pl-k">.</span><span class="pl-c1">Options</span>(maxiter <span class="pl-k">=</span> <span class="pl-c1">3000</span>, 
    tol <span class="pl-k">=</span> MMA<span class="pl-k">.</span><span class="pl-c1">Tolerances</span>(kkttol <span class="pl-k">=</span> <span class="pl-c1">0.001</span>))
convcriteria <span class="pl-k">=</span> MMA<span class="pl-k">.</span><span class="pl-c1">KKTCriteria</span>()
optimizer <span class="pl-k">=</span> <span class="pl-c1">MMAOptimizer</span>(obj, constr, MMA<span class="pl-k">.</span><span class="pl-c1">MMA87</span>(),
    <span class="pl-c1">ConjugateGradient</span>(), options <span class="pl-k">=</span> mma_options,
    convcriteria <span class="pl-k">=</span> convcriteria)

<span class="pl-c"><span class="pl-c">#</span> Define SIMP optimizer</span>

simp <span class="pl-k">=</span> <span class="pl-c1">SIMP</span>(optimizer, penalty<span class="pl-k">.</span>p)

<span class="pl-c"><span class="pl-c">#</span> Solve</span>

x0 <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">length</span>(solver<span class="pl-k">.</span>vars));
result <span class="pl-k">=</span> <span class="pl-c1">simp</span>(x0)

<span class="pl-c"><span class="pl-c">#</span> Visualize the result using Makie.jl</span>

glmesh <span class="pl-k">=</span> <span class="pl-c1">GLMesh</span>(problem, result<span class="pl-k">.</span>topology)
<span class="pl-c1">mesh</span>(glmesh)</pre></div>
</article></div>