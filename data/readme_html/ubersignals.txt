<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-hypersignals" class="anchor" aria-hidden="true" href="#hypersignals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HyperSignals</h1>
<p><a href="https://travis-ci.org/SimonDanisch/UberSignals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/27c60b891c60b7826f91927e6ac0d5844952fcb4/68747470733a2f2f7472617669732d63692e6f72672f53696d6f6e44616e697363682f556265725369676e616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SimonDanisch/UberSignals.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Concept for a Signal system, loosely inspired by <a href="https://github.com/JuliaLang/Reactive.jl">Reactive.jl</a></p>
<h3><a id="user-content-wanted-features" class="anchor" aria-hidden="true" href="#wanted-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Wanted Features:</h3>
<ul>
<li>Inline callback code</li>
<li>Transfer entire branches to jitted OpenCL/OpenGL kernels</li>
<li>Multithreaded branching</li>
<li>Different event sources, like websockets, disc, files, OpenCL-events, IDE-code changes, etc...</li>
<li>Different caching methods, for events that are emitted faster than they're being processed</li>
<li>Bidirectional signals</li>
<li>lazy updates (state changes only get updated when read)</li>
</ul>
<h3><a id="user-content-problems-which-hypersignals-should-make-easier" class="anchor" aria-hidden="true" href="#problems-which-hypersignals-should-make-easier"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Problems which Hypersignals should make easier</h3>
<ul>
<li>creating memory optimal code paths. For example consider loading a video from the hdd, loading it into ram, then transferring it to the GPU to filter it. After the filtering, compress it and send it via a network connection to another client. This should look something like this in Hypersignals:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>video <span class="pl-k">=</span> <span class="pl-c1">lift</span>(open, <span class="pl-s"><span class="pl-pds">"</span>file.mp4<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> create a signal from a file</span>
filtered <span class="pl-k">=</span> <span class="pl-c1">lift</span>(video) <span class="pl-k">do</span> frame  
  <span class="pl-c1">filter!</span>(<span class="pl-c1">kernel</span>(<span class="pl-c1">:gauss</span>, <span class="pl-c1">4</span>,<span class="pl-c1">4</span>), frame)
  <span class="pl-c1">hue!</span>(frame, <span class="pl-c1">0.4</span>)
<span class="pl-k">end</span>
compressed <span class="pl-k">=</span> <span class="pl-c1">lift</span>(compress, filtered)
<span class="pl-c1">lift</span>(compressed) <span class="pl-k">do</span> frame
  <span class="pl-c1">sent</span>(socket, frame)
<span class="pl-k">end</span></pre></div>
<p>This lift should now sent a data stream to socket with this this kind of pseudo code:</p>
<div class="highlight highlight-source-julia"><pre>video <span class="pl-k">=</span> <span class="pl-c1">read_video_from_hdd_into_ram</span>(filepath)
gpu_code <span class="pl-k">=</span> <span class="pl-c1">find_gpu_segments</span>(signal) <span class="pl-c"><span class="pl-c">#</span> should recognize, that filter!, hue! </span>
<span class="pl-c"><span class="pl-c">#</span>and compress is executable on the gpu and can use the same gpu memory.</span>
gpu_kernel <span class="pl-k">=</span> <span class="pl-c1">compile</span>(gpu_code)
<span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">done</span>(video)
  frame <span class="pl-k">=</span> <span class="pl-c1">next</span>(video)
  <span class="pl-c1">upload_to_gpu</span>(frame)
  frame <span class="pl-k">=</span> <span class="pl-c1">execute</span>(gpu_kernel, frame) <span class="pl-c"><span class="pl-c">#</span> shouldn't allocate new memory and reuse both ram and video memory</span>
  <span class="pl-c1">sent</span>(socket, frame) <span class="pl-c"><span class="pl-c">#</span> some magic function that serializes the signal and sents it optimally to another client.</span>
<span class="pl-k">end</span></pre></div>
<ul>
<li>should make it easier to have asynchronous and heterogenous events processed on the GPU and CPU.</li>
<li></li>
</ul>
<h2><a id="user-content-first-sketchy-sketch-of-a-scene-graph" class="anchor" aria-hidden="true" href="#first-sketchy-sketch-of-a-scene-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>First, sketchy sketch of a Scene Graph:</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/23257f01e160bbe21d96a752429c5cb590ab5b15/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f316d4269442d43757876346a704341663833755539354d6970774664425442395a2d777631616f6a6d4f77382f7075623f773d39363026683d373230"><img src="https://camo.githubusercontent.com/23257f01e160bbe21d96a752429c5cb590ab5b15/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f316d4269442d43757876346a704341663833755539354d6970774664425442395a2d777631616f6a6d4f77382f7075623f773d39363026683d373230" alt="SCeneGraph" data-canonical-src="https://docs.google.com/drawings/d/1mBiD-Cuxv4jpCAf83uU95MipwFdBTB9Z-wv1aojmOw8/pub?w=960&amp;h=720" style="max-width:100%;"></a></p>
</article></div>