<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fftwjl" class="anchor" aria-hidden="true" href="#fftwjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FFTW.jl</h1>
<p><a href="https://github.com/JuliaMath/FFTW.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaMath/FFTW.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaMath/FFTW.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8c19d88f606251ecb27f531670e8828791d901f11446a7d23bcfa085471f1cad/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f464654572e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/FFTW.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://JuliaMath.github.io/FFTW.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaMath.github.io/FFTW.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>This package provides Julia bindings to the <a href="http://www.fftw.org/" rel="nofollow">FFTW</a> library for
fast Fourier transforms (FFTs), as well as functionality useful for signal processing.
These functions were formerly a part of Base Julia.</p>
<h2><a id="user-content-usage-and-documentation" class="anchor" aria-hidden="true" href="#usage-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage and documentation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add FFTW
using FFTW
fft([0; 1; 2; 1])
"><pre>]add FFTW
<span class="pl-k">using</span> FFTW
<span class="pl-c1">fft</span>([<span class="pl-c1">0</span>; <span class="pl-c1">1</span>; <span class="pl-c1">2</span>; <span class="pl-c1">1</span>])</pre></div>
<p>returns</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="4-element Array{Complex{Float64},1}:
  4.0 + 0.0im
 -2.0 + 0.0im
  0.0 + 0.0im
 -2.0 + 0.0im
"><pre><code>4-element Array{Complex{Float64},1}:
  4.0 + 0.0im
 -2.0 + 0.0im
  0.0 + 0.0im
 -2.0 + 0.0im
</code></pre></div>
<p>The documentation of generic FFT functionality can be found in the <a href="https://juliamath.github.io/AbstractFFTs.jl/stable/api/#Public-Interface-1" rel="nofollow">AbstractFFTs.jl package</a>. Additional functionalities supported by the FFTW library are documented in the present package.</p>
<h2><a id="user-content-mkl" class="anchor" aria-hidden="true" href="#mkl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MKL</h2>
<p>Alternatively, the FFTs in Intel's Math Kernel Library (MKL) can be used
by running <code>FFTW.set_provider!("mkl")</code>. MKL will be provided through <code>MKL_jll</code>.
This change of provider is persistent and has to be done only once, i.e., the package will use MKL when building and updating.
Note however that MKL provides only a subset of the functionality provided by FFTW. See
Intel's <a href="https://software.intel.com/en-us/mkl-developer-reference-c-using-fftw3-wrappers" rel="nofollow">documentation</a>
for more information about potential differences or gaps in functionality.
In case MKL does not fit the needs (anymore), <code>FFTW.set_provider!("fftw")</code> allows to revert the change of provider.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>The FFTW library will be downloaded on versions of Julia where it is no longer distributed
as part of Julia.
Note that FFTW is licensed under GPLv2 or higher (see
<a href="http://www.fftw.org/doc/License-and-Copyright.html" rel="nofollow">its license file</a>), but the bindings
to the library in this package, FFTW.jl, are licensed under MIT.
This means that code using the FFTW library via the FFTW.jl bindings is subject to FFTW's
licensing terms.
Code using alternative implementations of the FFTW API, such as
<a href="https://software.intel.com/en-us/mkl-developer-reference-c-fftw3-interface-to-intel-math-kernel-library" rel="nofollow">MKL's FFTW3 interface</a>
are instead subject to the alternative's license.
If you distribute a derived or combined work, i.e. a program that links to and is distributed
with the FFTW library, then that distribution falls under the terms of the GPL.
If you just distribute source code that links to FFTW.jl, and users have to download FFTW
or MKL to provide the backend, then the GPL probably doesn't have much effect on you.</p>
</article></div>