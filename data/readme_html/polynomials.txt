<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Polynomials</h1>
<p>Basic arithmetic, integration, differentiation, evaluation, and root finding over dense univariate polynomials.</p>
<p><a href="http://pkg.julialang.org/?pkg=Polynomials" rel="nofollow"><img src="https://camo.githubusercontent.com/e6659256cd1c6b24b38725f84c6bf8c154ed968b/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f506f6c796e6f6d69616c735f302e362e737667" alt="Polynomials" data-canonical-src="http://pkg.julialang.org/badges/Polynomials_0.6.svg" style="max-width:100%;"></a></p>
<p>Master branch:
<a href="https://travis-ci.org/JuliaMath/Polynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/20257d01cf126764cf2e77debe939ecf76842e52/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/Polynomials.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaMath/Polynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/659bc7afd3bdea1419d8780c15bab04a43b03c85/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f506f6c796e6f6d69616c732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/Polynomials.jl/badge.svg" style="max-width:100%;"></a></p>
<p>Documentation:
<a href="https://JuliaMath.github.io/Polynomials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaMath.github.io/Polynomials.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h4><a id="user-content-polyavector-where-tnumber" class="anchor" aria-hidden="true" href="#polyavector-where-tnumber"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Poly(a::Vector) where {T&lt;:Number}</h4>
<p>Construct a polynomial from its coefficients, lowest order first.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
<span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p>An optional variable parameter can be added.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-c1">:s</span>)
<span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>s <span class="pl-k">+</span> <span class="pl-c1">3</span>s<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<h4><a id="user-content-polyrabstractvector" class="anchor" aria-hidden="true" href="#polyrabstractvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>poly(r::AbstractVector)</h4>
<p>Construct a polynomial from its roots. This is in contrast to the
<code>Poly</code> constructor, which constructs a polynomial from its
coefficients.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">//</span> Represents (x<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">poly</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">6</span> <span class="pl-k">+</span> <span class="pl-c1">11</span>x <span class="pl-k">-</span> <span class="pl-c1">6</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<h4><a id="user-content------div-" class="anchor" aria-hidden="true" href="#-----div-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>+, -, *, /, div, ==</h4>
<p>The usual arithmetic operators are overloaded to work on polynomials, and combinations of polynomials and scalars.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>x)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>p
<span class="pl-c1">Poly</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span><span class="pl-k">+</span>p
<span class="pl-c1">Poly</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>x)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">-</span> q
<span class="pl-c1">Poly</span>(<span class="pl-c1">2</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">*</span> q
<span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>x <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">/</span> <span class="pl-c1">2</span>
<span class="pl-c1">Poly</span>(<span class="pl-c1">0.5</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">รท</span> p      <span class="pl-c"><span class="pl-c">#</span> `div`, also `rem` and `divrem`</span>
<span class="pl-c1">Poly</span>(<span class="pl-c1">0.25</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span>x)</pre></div>
<p>Note that operations involving polynomials with different variables will error.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">:x</span>)
julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">:s</span>)
julia<span class="pl-k">&gt;</span> p <span class="pl-k">+</span> q
ERROR<span class="pl-k">:</span> Polynomials must have same variable.</pre></div>
<p>To get the degree of the polynomial use the <code>degree</code> method</p>
<pre><code>julia&gt; degree(p)
2

julia&gt; degree(p^2)
4

julia&gt; degree(p-p)
-1
</code></pre>
<h4><a id="user-content-polyvalppoly-xnumber" class="anchor" aria-hidden="true" href="#polyvalppoly-xnumber"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>polyval(p::Poly, x::Number)</h4>
<p>Evaluate the polynomial <code>p</code> at <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>])
julia<span class="pl-k">&gt;</span> <span class="pl-c1">polyval</span>(p, <span class="pl-c1">0.1</span>)
<span class="pl-c1">0.99</span></pre></div>
<p>A call method is also available:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">0.1</span>)
<span class="pl-c1">0.99</span></pre></div>
<h4><a id="user-content-polyintppoly-knumber0" class="anchor" aria-hidden="true" href="#polyintppoly-knumber0"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>polyint(p::Poly, k::Number=0)</h4>
<p>Integrate the polynomial <code>p</code> term by term, optionally adding constant
term <code>k</code>. The order of the resulting polynomial is one higher than the
order of <code>p</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">polyint</span>(<span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]))
<span class="pl-c1">Poly</span>(x <span class="pl-k">-</span> <span class="pl-c1">0.3333333333333333</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">polyint</span>(<span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]), <span class="pl-c1">2</span>)
<span class="pl-c1">Poly</span>(<span class="pl-c1">2.0</span> <span class="pl-k">+</span> x <span class="pl-k">-</span> <span class="pl-c1">0.3333333333333333</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<h4><a id="user-content-polyderppoly" class="anchor" aria-hidden="true" href="#polyderppoly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>polyder(p::Poly)</h4>
<p>Differentiate the polynomial <code>p</code> term by term. The order of the
resulting polynomial is one lower than the order of <code>p</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">polyder</span>(<span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]))
<span class="pl-c1">Poly</span>(<span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">2</span>x)</pre></div>
<h4><a id="user-content-rootsppoly" class="anchor" aria-hidden="true" href="#rootsppoly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>roots(p::Poly)</h4>
<p>Return the roots (zeros) of <code>p</code>, with multiplicity. The number of
roots returned is equal to the order of <code>p</code>. By design, this is not type-stable,
the returned roots may be real or complex.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(<span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(<span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Complex{Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span><span class="pl-k">+</span><span class="pl-c1">1.0im</span>
 <span class="pl-c1">0.0</span><span class="pl-k">-</span><span class="pl-c1">1.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(<span class="pl-c1">Poly</span>([<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<h4><a id="user-content-polyfitx-y-nlengthx-1" class="anchor" aria-hidden="true" href="#polyfitx-y-nlengthx-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>polyfit(x, y, n=length(x)-1)</h4>
<ul>
<li><code>polyfit</code>: fits a polynomial (of order <code>n</code>) to <code>x</code> and <code>y</code> using a least-squares approximation.</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>; ys <span class="pl-k">=</span> <span class="pl-c1">exp</span>.(xs); <span class="pl-c1">polyfit</span>(xs, ys)
<span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">7.717211620141281</span> <span class="pl-k">+</span> <span class="pl-c1">17.9146616149694</span>x <span class="pl-k">-</span> <span class="pl-c1">9.77757245502143</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2.298404288652356</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p>Visual example:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/3156114/41799777-9ba00582-7627-11e8-94ef-15297ec8790e.png"><img src="https://user-images.githubusercontent.com/3156114/41799777-9ba00582-7627-11e8-94ef-15297ec8790e.png" alt="newplot 42" style="max-width:100%;"></a></p>
<h4><a id="user-content-other-methods" class="anchor" aria-hidden="true" href="#other-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other methods</h4>
<p>Polynomial objects also have other methods:</p>
<ul>
<li>
<p>0-based indexing is used to extract the coefficients of $a_0 + a_1
x + a_2 x^2 + ...$, coefficients may be changed using indexing
notation.</p>
</li>
<li>
<p><code>coeffs</code>: returns the entire coefficient vector</p>
</li>
<li>
<p><code>degree</code>: returns the polynomial degree, <code>length</code> is 1 plus the degree</p>
</li>
<li>
<p><code>variable</code>: returns the polynomial symbol as a degree 1 polynomial</p>
</li>
<li>
<p><code>norm</code>: find the <code>p</code>-norm of a polynomial</p>
</li>
<li>
<p><code>conj</code>: finds the conjugate of a polynomial over a complex fiel</p>
</li>
<li>
<p><code>truncate</code>: set to 0 all small terms in a polynomial; <code>chop</code> chops off
any small leading values that may arise due to floating point
operations.</p>
</li>
<li>
<p><code>gcd</code>: greatest common divisor of two polynomials.</p>
</li>
<li>
<p><code>Pade</code>: Return the
<a href="https://en.wikipedia.org/wiki/Pad%C3%A9_approximant" rel="nofollow">Pade approximant</a>
of order <code>m/n</code> for a polynomial as a <code>Pade</code> object.</p>
</li>
</ul>
<h2><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>See also</h2>
<ul>
<li>
<p><a href="https://github.com/daviddelaat/MultiPoly.jl">MultiPoly.jl</a> for sparse multivariate polynomials</p>
</li>
<li>
<p><a href="https://github.com/blegat/MultivariatePolynomials.jl">MultivariatePolynomials.jl</a> for multivariate polynomials and moments of commutative or non-commutative variables</p>
</li>
<li>
<p><a href="https://github.com/wbhart/Nemo.jl">Nemo.jl</a> for generic polynomial rings, matrix spaces, fraction fields, residue rings, power series</p>
</li>
<li>
<p><a href="https://github.com/giordano/PolynomialRoots.jl">PolynomialRoots.jl</a> for a fast complex polynomial root finder</p>
</li>
</ul>
</article></div>