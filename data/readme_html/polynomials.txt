<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polynomialsjl" class="anchor" aria-hidden="true" href="#polynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Polynomials.jl</h1>
<p dir="auto">Basic arithmetic, integration, differentiation, evaluation, and root finding over dense univariate <a href="https://en.wikipedia.org/wiki/Polynomial" rel="nofollow">polynomials</a>.</p>
<p dir="auto"><a href="https://JuliaMath.github.io/Polynomials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMath/Polynomials.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaMath/Polynomials.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMath/Polynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1cb1029332b2a6ea08e964d4329b8462a35f23a95edaaf3e163b8f6080fc611f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f506f6c796e6f6d69616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaMath/Polynomials.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.6) pkg&gt; add Polynomials"><pre>(v1.<span class="pl-c1">6</span>) pkg<span class="pl-k">&gt;</span> add Polynomials</pre></div>
<p dir="auto">This package supports Julia v1.6 and later.</p>
<h2 dir="auto"><a id="user-content-available-types-of-polynomials" class="anchor" aria-hidden="true" href="#available-types-of-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available Types of Polynomials</h2>
<ul dir="auto">
<li>
<code>Polynomial</code> –⁠ standard basis polynomials, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$a(x) = a_0 + a_1 x + a_2 x^2 + … + a_n  x^n$</math-renderer> for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$n ≥ 0$</math-renderer>.</li>
<li>
<code>ImmutablePolynomial</code> –⁠ standard basis polynomials backed by a <a href="https://docs.julialang.org/en/v1/manual/functions/#Tuples-1" rel="nofollow">Tuple type</a> for faster evaluation of values</li>
<li>
<code>SparsePolynomial</code> –⁠ standard basis polynomial backed by a <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries-1" rel="nofollow">dictionary</a> to hold  sparse high-degree  polynomials</li>
<li>
<code>LaurentPolynomial</code> –⁠ <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries-1" rel="nofollow">Laurent polynomials</a>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$a(x) = a_m x^m + … + a_n x^n$</math-renderer> for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$m ≤ n$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$m,n ∈ ℤ$</math-renderer>. This is backed by an <a href="https://github.com/JuliaArrays/OffsetArrays.jl">offset array</a>; for example, if <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$m&amp;lt;0$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$n&amp;gt;0$</math-renderer>, we obtain <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="78f8fe4ba5111943aa15f3174519fd6d">$a(x) = a_m x^m + … + a_{-1} x^{-1} + a_0 + a_1 x + … +  a_n x^n$</math-renderer>
</li>
<li>
<code>FactoredPolynomial</code> –⁠ standard basis polynomials, storing the roots, with multiplicity, and leading coefficient of a polynomial</li>
<li>
<code>ChebyshevT</code> –⁠ <a href="https://en.wikipedia.org/wiki/Chebyshev_polynomials" rel="nofollow">Chebyshev polynomials</a> of the first kind</li>
<li>
<code>RationalFunction</code> - a type for ratios of polynomials.</li>
</ul>
<h2 dir="auto">
<a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Polynomials"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polynomials</pre></div>
<h3 dir="auto">
<a id="user-content-construction-and-evaluation" class="anchor" aria-hidden="true" href="#construction-and-evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction and Evaluation</h3>
<p dir="auto">Construct a polynomial from an array (a vector) of its coefficients, lowest order first.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Polynomial([1,0,3,4])
Polynomial(1 + 3*x^2 + 4*x^3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">Optionally, the variable of the polynomial can be specified.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Polynomial([1,2,3], :s)
Polynomial(1 + 2*s + 3*s^2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-c1">:s</span>)
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>s <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>s<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Construct a polynomial from its roots.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fromroots([1,2,3]) # (x-1)*(x-2)*(x-3)
Polynomial(-6 + 11*x - 6*x^2 + x^3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fromroots</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> (x-1)*(x-2)*(x-3)</span>
<span class="pl-c1">Polynomial</span>(<span class="pl-k">-</span><span class="pl-c1">6</span> <span class="pl-k">+</span> <span class="pl-c1">11</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">6</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">Evaluate the polynomial <code>p</code> at <code>x</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; p = Polynomial([1, 0, -1]);
julia&gt; p(0.1)
0.99"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">0.1</span>)
<span class="pl-c1">0.99</span></pre></div>
<h3 dir="auto">
<a id="user-content-arithmetic" class="anchor" aria-hidden="true" href="#arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arithmetic</h3>
<p dir="auto">Methods are added to the usual arithmetic operators so that they work on polynomials, and combinations of polynomials and scalars.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; p = Polynomial([1,2])
Polynomial(1 + 2*x)

julia&gt; q = Polynomial([1, 0, -1])
Polynomial(1 - x^2)

julia&gt; p - q
Polynomial(2*x + x^2)

julia&gt; p = Polynomial([1,2])
Polynomial(1 + 2*x)

julia&gt; q = Polynomial([1, 0, -1])
Polynomial(1 - x^2)

julia&gt; 2p
Polynomial(2 + 4*x)

julia&gt; 2+p
Polynomial(3 + 2*x)

julia&gt; p - q
Polynomial(2*x + x^2)

julia&gt; p * q
Polynomial(1 + 2*x - x^2 - 2*x^3)

julia&gt; q / 2
Polynomial(0.5 - 0.5*x^2)

julia&gt; q ÷ p # `div`, also `rem` and `divrem`
Polynomial(0.25 - 0.5*x)"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">-</span> q
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>p
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span><span class="pl-k">+</span>p
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">-</span> q
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">*</span> q
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">/</span> <span class="pl-c1">2</span>
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">0.5</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">÷</span> p <span class="pl-c"><span class="pl-c">#</span> `div`, also `rem` and `divrem`</span>
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">0.25</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>x)</pre></div>
<p dir="auto">Most operations involving polynomials with different variables will error.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; p = Polynomial([1, 2, 3], :x);
julia&gt; q = Polynomial([1, 2, 3], :s);
julia&gt; p + q
ERROR: ArgumentError: Polynomials have different indeterminates"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">:x</span>);
julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">:s</span>);
julia<span class="pl-k">&gt;</span> p <span class="pl-k">+</span> q
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> Polynomials have different indeterminates</pre></div>
<h4 dir="auto">
<a id="user-content-construction-and-evaluation-1" class="anchor" aria-hidden="true" href="#construction-and-evaluation-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction and Evaluation</h4>
<p dir="auto">While polynomials of type <code>Polynomial</code> are mutable objects, operations such as
<code>+</code>, <code>-</code>, <code>*</code>, always create new polynomials without modifying its arguments.
The time needed for these allocations and copies of the polynomial coefficients
may be noticeable in some use cases. This is amplified when the coefficients
are for instance <code>BigInt</code> or <code>BigFloat</code> which are mutable themselves.
This can be avoided by modifying existing polynomials to contain the result
of the operation using the <a href="https://github.com/jump-dev/MutableArithmetics.jl">MutableArithmetics (MA) API</a>.</p>
<p dir="auto">Consider for instance the following arrays of polynomials</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Polynomials
d, m, n = 30, 20, 20
p(d) = Polynomial(big.(1:d))
A = [p(d) for i in 1:m, j in 1:n]
b = [p(d) for i in 1:n]"><pre><span class="pl-k">using</span> Polynomials
d, m, n <span class="pl-k">=</span> <span class="pl-c1">30</span>, <span class="pl-c1">20</span>, <span class="pl-c1">20</span>
<span class="pl-en">p</span>(d) <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">big</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>d))
A <span class="pl-k">=</span> [<span class="pl-c1">p</span>(d) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]
b <span class="pl-k">=</span> [<span class="pl-c1">p</span>(d) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]</pre></div>
<p dir="auto">In this case, the arrays are mutable objects for which the elements are mutable
polynomials which have mutable coefficients (<code>BigInt</code>s).
These three nested levels of mutable objects communicate with the MA
API in order to reduce allocation.
Calling <code>A * b</code> requires approximately 40 MiB due to 2 M allocations
as it does not exploit any mutability.</p>
<p dir="auto">Using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PolynomialsMutableArithmetics"><pre><span class="pl-k">using</span> PolynomialsMutableArithmetics</pre></div>
<p dir="auto">to register <code>Polynomials</code> with <code>MutableArithmetics</code>, then multiplying with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MutableArithmetics
const MA = MutableArithmetics
MA.operate(*, A, b)"><pre><span class="pl-k">using</span> MutableArithmetics
<span class="pl-k">const</span> MA <span class="pl-k">=</span> MutableArithmetics
MA<span class="pl-k">.</span><span class="pl-c1">operate</span>(<span class="pl-k">*</span>, A, b)</pre></div>
<p dir="auto">exploits the mutability and hence only allocates approximately 70 KiB due to 4 k
allocations.</p>
<p dir="auto">If the resulting vector is already allocated, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z(d) = Polynomial([zero(BigInt) for i in 1:d])
c = [z(2d - 1) for i in 1:m]"><pre><span class="pl-en">z</span>(d) <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">zero</span>(BigInt) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d])
c <span class="pl-k">=</span> [<span class="pl-c1">z</span>(<span class="pl-c1">2</span>d <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m]</pre></div>
<p dir="auto">then we can exploit its mutability with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MA.operate!(MA.add_mul, c, A, b)"><pre>MA<span class="pl-k">.</span><span class="pl-c1">operate!</span>(MA<span class="pl-k">.</span>add_mul, c, A, b)</pre></div>
<p dir="auto">to reduce the allocation down to 48 bytes due to 3 allocations.</p>
<p dir="auto">These remaining allocations are due to the <code>BigInt</code> buffer used to
store the result of intermediate multiplications. This buffer can be
preallocated with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="buffer = MA.buffer_for(MA.add_mul, typeof(c), typeof(A), typeof(b))
MA.buffered_operate!(buffer, MA.add_mul, c, A, b)"><pre>buffer <span class="pl-k">=</span> MA<span class="pl-k">.</span><span class="pl-c1">buffer_for</span>(MA<span class="pl-k">.</span>add_mul, <span class="pl-c1">typeof</span>(c), <span class="pl-c1">typeof</span>(A), <span class="pl-c1">typeof</span>(b))
MA<span class="pl-k">.</span><span class="pl-c1">buffered_operate!</span>(buffer, MA<span class="pl-k">.</span>add_mul, c, A, b)</pre></div>
<p dir="auto">then the second line is allocation-free.</p>
<p dir="auto">The <code>MA.@rewrite</code> macro rewrite an expression into an equivalent code that
exploit the mutability of the intermediate results.
For instance</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MA.@rewrite(A1 * b1 + A2 * b2)"><pre>MA<span class="pl-k">.</span><span class="pl-c1">@rewrite</span>(A1 <span class="pl-k">*</span> b1 <span class="pl-k">+</span> A2 <span class="pl-k">*</span> b2)</pre></div>
<p dir="auto">is rewritten into</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = MA.operate!(MA.add_mul, MA.Zero(), A1, b1)
MA.operate!(MA.add_mul, c, A2, b2)"><pre>c <span class="pl-k">=</span> MA<span class="pl-k">.</span><span class="pl-c1">operate!</span>(MA<span class="pl-k">.</span>add_mul, MA<span class="pl-k">.</span><span class="pl-c1">Zero</span>(), A1, b1)
MA<span class="pl-k">.</span><span class="pl-c1">operate!</span>(MA<span class="pl-k">.</span>add_mul, c, A2, b2)</pre></div>
<p dir="auto">which is equivalent to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = MA.operate(*, A1, b1)
MA.mutable_operate!(MA.add_mul, c, A2, b2)"><pre>c <span class="pl-k">=</span> MA<span class="pl-k">.</span><span class="pl-c1">operate</span>(<span class="pl-k">*</span>, A1, b1)
MA<span class="pl-k">.</span><span class="pl-c1">mutable_operate!</span>(MA<span class="pl-k">.</span>add_mul, c, A2, b2)</pre></div>
<p dir="auto"><em>Note that currently, only the <code>Polynomial</code> type implements the API and it only
implements part of it.</em></p>
<h3 dir="auto">
<a id="user-content-integrals-and-derivatives" class="anchor" aria-hidden="true" href="#integrals-and-derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Integrals and Derivatives</h3>
<p dir="auto">Integrate the polynomial <code>p</code> term by term, optionally adding a constant
term <code>k</code>. The degree of the resulting polynomial is one higher than the
degree of <code>p</code> (for a nonzero polynomial).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; integrate(Polynomial([1, 0, -1]))
Polynomial(1.0*x - 0.3333333333333333*x^3)

julia&gt; integrate(Polynomial([1, 0, -1]), 2)
Polynomial(2.0 + 1.0*x - 0.3333333333333333*x^3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>(<span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]))
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1.0</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">0.3333333333333333</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>(<span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]), <span class="pl-c1">2</span>)
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">0.3333333333333333</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">Differentiate the polynomial <code>p</code> term by term. For non-zero
polynomials the degree of the resulting polynomial is one lower than
the degree of <code>p</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; derivative(Polynomial([1, 3, -1]))
Polynomial(3 - 2*x)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">derivative</span>(<span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]))
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x)</pre></div>
<h3 dir="auto">
<a id="user-content-root-finding" class="anchor" aria-hidden="true" href="#root-finding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Root-finding</h3>
<p dir="auto">Return the roots (zeros) of <code>p</code>, with multiplicity. The number of
roots returned is equal to the degree of <code>p</code>. By design, this is not type-stable, the returned roots may be real or complex.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; roots(Polynomial([1, 0, -1]))
2-element Vector{Float64}:
 -1.0
  1.0

julia&gt; roots(Polynomial([1, 0, 1]))
2-element Vector{ComplexF64}:
 0.0 - 1.0im
 0.0 + 1.0im

julia&gt; roots(Polynomial([0, 0, 1]))
2-element Vector{Float64}:
 0.0
 0.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(<span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(<span class="pl-c1">Polynomial</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span>
 <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(<span class="pl-c1">Polynomial</span>([<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<h3 dir="auto">
<a id="user-content-fitting-arbitrary-data" class="anchor" aria-hidden="true" href="#fitting-arbitrary-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fitting arbitrary data</h3>
<p dir="auto">Fit a polynomial (of degree <code>deg</code> or less) to <code>x</code> and <code>y</code> using a least-squares approximation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; xs = 0:4; ys = @. exp(-xs) + sin(xs);

julia&gt; fit(xs, ys) |&gt; p -&gt; round.(coeffs(p), digits=4) |&gt; Polynomial
Polynomial(1.0 + 0.0593*x + 0.3959*x^2 - 0.2846*x^3 + 0.0387*x^4)

julia&gt; fit(ChebyshevT, xs, ys, 2) |&gt; p -&gt; round.(coeffs(p), digits=4) |&gt; ChebyshevT
ChebyshevT(0.5413⋅T_0(x) - 0.8991⋅T_1(x) - 0.4238⋅T_2(x))"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>; ys <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>xs) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(xs);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fit</span>(xs, ys) <span class="pl-k">|&gt;</span> p <span class="pl-k">-&gt;</span> <span class="pl-c1">round</span>.(<span class="pl-c1">coeffs</span>(p), digits<span class="pl-k">=</span><span class="pl-c1">4</span>) <span class="pl-k">|&gt;</span> Polynomial
<span class="pl-c1">Polynomial</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0593</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">0.3959</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">0.2846</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">0.0387</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fit</span>(ChebyshevT, xs, ys, <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> p <span class="pl-k">-&gt;</span> <span class="pl-c1">round</span>.(<span class="pl-c1">coeffs</span>(p), digits<span class="pl-k">=</span><span class="pl-c1">4</span>) <span class="pl-k">|&gt;</span> ChebyshevT
<span class="pl-c1">ChebyshevT</span>(<span class="pl-c1">0.5413</span><span class="pl-k">⋅</span><span class="pl-c1">T_0</span>(x) <span class="pl-k">-</span> <span class="pl-c1">0.8991</span><span class="pl-k">⋅</span><span class="pl-c1">T_1</span>(x) <span class="pl-k">-</span> <span class="pl-c1">0.4238</span><span class="pl-k">⋅</span><span class="pl-c1">T_2</span>(x))</pre></div>
<p dir="auto">Visual example:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/14099459/70382587-9e055500-1902-11ea-8952-3f03ae08b7dc.png"><img src="https://user-images.githubusercontent.com/14099459/70382587-9e055500-1902-11ea-8952-3f03ae08b7dc.png" alt="fit example" style="max-width: 100%;"></a></p>
<h3 dir="auto">
<a id="user-content-other-methods" class="anchor" aria-hidden="true" href="#other-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other methods</h3>
<p dir="auto">Polynomial objects also have other methods:</p>
<ul dir="auto">
<li>
<p dir="auto">For standard basis polynomials, 0-based indexing is used to extract
the coefficients of <code>[a0, a1, a2, ...]</code>; for mutable polynomials,
coefficients may be changed using indexing notation.</p>
</li>
<li>
<p dir="auto"><code>coeffs</code>: returns the coefficients</p>
</li>
<li>
<p dir="auto"><code>degree</code>: returns the polynomial degree, <code>length</code> is number of stored coefficients</p>
</li>
<li>
<p dir="auto"><code>variable</code>: returns the polynomial symbol as a polynomial in the underlying type</p>
</li>
<li>
<p dir="auto"><code>LinearAlgebra.norm</code>: find the <code>p</code>-norm of a polynomial</p>
</li>
<li>
<p dir="auto"><code>conj</code>: finds the conjugate of a polynomial over a complex field</p>
</li>
<li>
<p dir="auto"><code>truncate</code>: set to 0 all small terms in a polynomial;</p>
</li>
<li>
<p dir="auto"><code>chop</code> chops off any small leading values that may arise due to floating point operations.</p>
</li>
<li>
<p dir="auto"><code>gcd</code>: greatest common divisor of two polynomials.</p>
</li>
<li>
<p dir="auto"><code>Pade</code>: Return the
<a href="https://en.wikipedia.org/wiki/Pad%C3%A9_approximant" rel="nofollow">Padé approximant</a> of order <code>m/n</code> for a polynomial as a <code>Pade</code> object.</p>
</li>
</ul>
<h2 dir="auto">
<a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/tkoolen/StaticUnivariatePolynomials.jl">StaticUnivariatePolynomials.jl</a> Fixed-size univariate polynomials backed by a Tuple</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/daviddelaat/MultiPoly.jl">MultiPoly.jl</a> for sparse multivariate polynomials</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaAlgebra/DynamicPolynomials.jl">DynamicPolynomials.jl</a> Multivariate polynomials implementation of commutative and non-commutative variables</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl">MultivariatePolynomials.jl</a> for multivariate polynomials and moments of commutative or non-commutative variables</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/tkluck/PolynomialRings.jl">PolynomialRings.jl</a> A library for arithmetic and algebra with multi-variable polynomials.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/wbhart/AbstractAlgebra.jl">AbstractAlgebra.jl</a>, <a href="https://github.com/wbhart/Nemo.jl">Nemo.jl</a> for generic polynomial rings, matrix spaces, fraction fields, residue rings, power series, <a href="https://github.com/thofma/Hecke.jl">Hecke.jl</a> for algebraic number theory.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/jmichel7/LaurentPolynomials.jl">LaurentPolynomials.jl</a> A package for Laurent polynomials.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/KlausC/CommutativeRings.jl">CommutativeAlgebra.jl</a> the start of a computer algebra system specialized to discrete calculations with support for polynomials.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/giordano/PolynomialRoots.jl">PolynomialRoots.jl</a> for a fast complex polynomial root finder. For larger degree problems, also <a href="https://github.com/andreasnoack/FastPolynomialRoots.jl">FastPolynomialRoots</a> and <a href="https://github.com/jverzani/AMRVW.jl">AMRVW</a>. For real roots only <a href="https://github.com/jverzani/RealPolynomialRoots.jl">RealPolynomialRoots</a>.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/jverzani/SpecialPolynomials.jl">SpecialPolynomials.jl</a> A package providing various polynomial types beyond the standard basis polynomials in <code>Polynomials.jl</code>. Includes interpolating polynomials, Bernstein polynomials, and classical orthogonal polynomials.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaApproximation/ClassicalOrthogonalPolynomials.jl">ClassicalOrthogonalPolynomials.jl</a> A Julia package for classical orthogonal polynomials and expansions. Includes <code>chebyshevt</code>, <code>chebyshevu</code>, <code>legendrep</code>, <code>jacobip</code>, <code>ultrasphericalc</code>, <code>hermiteh</code>, and <code>laguerrel</code>. The same repository includes <code>FastGaussQuadrature.jl</code>, <code>FastTransforms.jl</code>, and the <code>ApproxFun</code> packages.</p>
</li>
</ul>
<h2 dir="auto">
<a id="user-content-legacy-code" class="anchor" aria-hidden="true" href="#legacy-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Legacy code</h2>
<p dir="auto">As of v0.7, the internals of this package were greatly generalized and new types and method names were introduced. For compatibility purposes, legacy code can be run after issuing <code>using Polynomials.PolyCompat</code>.</p>
<h2 dir="auto">
<a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">If you are interested in contributing, feel free to open an issue or pull request to get started.</p>
</article></div>