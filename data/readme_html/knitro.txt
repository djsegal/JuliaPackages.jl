<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-knitrojl" class="anchor" aria-hidden="true" href="#knitrojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KNITRO.jl</h1>
<p>The KNITRO.jl package provides an interface for using the <a href="https://www.artelys.com/knitro" rel="nofollow">Artelys Knitro
solver</a> from
<a href="http://julialang.org/" rel="nofollow">Julia</a>. You cannot use KNITRO.jl without having
purchased and installed a copy of Knitro from <a href="https://www.artelys.com/knitro" rel="nofollow">Artelys</a>.
This package is available free of charge and in no way replaces or alters any
functionality of Artelys Knitro solver.</p>
<p>Note that the current package provides a wrapper both for the new Knitro's API
(whose functions start by <code>KN_</code>) and the deprecated Knitro's API (whose functions
start by <code>KTR_</code>). We recommend using the latest version of Knitro available and
the new API to get access to all of the new functionalities from the solver.
Using the new <code>KN_</code> API requires Knitro &gt;= <code>v11.0</code>.</p>
<p>Refer to <a href="https://www.artelys.com/tools/knitro_doc/3_referenceManual/callableLibraryAPI.html" rel="nofollow">Knitro documentation</a>
for a full specification of the Knitro's API.</p>
<p><em>The Artelys Knitro wrapper for Julia is supported by the JuMP
community (which originates the development of this package) and
Artelys. Feel free to contact <a href="mailto:support-knitro@artelys.com">Artelys support</a> if you encounter
any problem with this interface or the solver.</em></p>
<h1><a id="user-content-mathoptinterface-interface" class="anchor" aria-hidden="true" href="#mathoptinterface-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MathOptInterface Interface</h1>
<p>KNITRO.jl supports <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a>
and <a href="https://github.com/jump-dev/JuMP.jl">JuMP</a>.</p>
<p>Here's an example showcasing various features.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, KNITRO
m = Model(optimizer_with_attributes(KNITRO.Optimizer,
                                    &quot;honorbnds&quot; =&gt; 1, &quot;outlev&quot; =&gt; 1, &quot;algorithm&quot; =&gt; 4)) # (1)
@variable(m, x, start = 1.2) # (2)
@variable(m, y)
@variable(m, z)
@variable(m, 4.0 &lt;= u &lt;= 4.0) # (3)

mysquare(x) = x^2
register(m, :mysquare, 1, mysquare, autodiff = true) # (4)

@NLobjective(m, Min, mysquare(1 - x) + 100 * (y - x^2)^2 + u)
@constraint(m, z == x + y)

optimize!(m)
(value(x), value(y), value(z), value(u), objective_value(m), termination_status(m)) # (5)
"><pre><span class="pl-k">using</span> JuMP, KNITRO
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">optimizer_with_attributes</span>(KNITRO<span class="pl-k">.</span>Optimizer,
                                    <span class="pl-s"><span class="pl-pds">"</span>honorbnds<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>outlev<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>algorithm<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>)) <span class="pl-c"><span class="pl-c">#</span> (1)</span>
<span class="pl-c1">@variable</span>(m, x, start <span class="pl-k">=</span> <span class="pl-c1">1.2</span>) <span class="pl-c"><span class="pl-c">#</span> (2)</span>
<span class="pl-c1">@variable</span>(m, y)
<span class="pl-c1">@variable</span>(m, z)
<span class="pl-c1">@variable</span>(m, <span class="pl-c1">4.0</span> <span class="pl-k">&lt;=</span> u <span class="pl-k">&lt;=</span> <span class="pl-c1">4.0</span>) <span class="pl-c"><span class="pl-c">#</span> (3)</span>

<span class="pl-en">mysquare</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">register</span>(m, <span class="pl-c1">:mysquare</span>, <span class="pl-c1">1</span>, mysquare, autodiff <span class="pl-k">=</span> <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> (4)</span>

<span class="pl-c1">@NLobjective</span>(m, Min, <span class="pl-c1">mysquare</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> x) <span class="pl-k">+</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> (y <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> u)
<span class="pl-c1">@constraint</span>(m, z <span class="pl-k">==</span> x <span class="pl-k">+</span> y)

<span class="pl-c1">optimize!</span>(m)
(<span class="pl-c1">value</span>(x), <span class="pl-c1">value</span>(y), <span class="pl-c1">value</span>(z), <span class="pl-c1">value</span>(u), <span class="pl-c1">objective_value</span>(m), <span class="pl-c1">termination_status</span>(m)) <span class="pl-c"><span class="pl-c">#</span> (5)</span></pre></div>
<ol>
<li>Setting <code>KNITRO</code> options.</li>
<li>Setting initial conditions on variables.</li>
<li>Setting box constraints on variables.</li>
<li>Registering a user-defined function for use in the problem.</li>
<li>Querying various results from the solver.</li>
</ol>
<h1><a id="user-content-low-level-wrapper" class="anchor" aria-hidden="true" href="#low-level-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-level wrapper</h1>
<p>KNITRO.jl implements most of Knitro's functionalities.
If you aim at using part of Knitro's API that are not implemented
in the MathOptInterface/JuMP ecosystem, you can refer to the low
level API which wraps directly Knitro's C API (whose templates
are specified in the file <code>knitro.h</code>).</p>
<p>Extensive examples using the C wrapper can be found in <code>examples/</code>.</p>
<h1><a id="user-content-ampl-wrapper" class="anchor" aria-hidden="true" href="#ampl-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ampl wrapper</h1>
<p>The package <a href="https://github.com/JuliaOpt/AmplNLWriter.jl%22">AmplNLWriter.jl</a>
allows to to call <code>knitroampl</code> through Julia to solve JuMP's optimization
models.</p>
<p>The usage is as follow:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, KNITRO, AmplNLWriter

model = Model(() -&gt; AmplNLWriter.Optimizer(KNITRO.amplexe, [&quot;outlev=3&quot;]))

"><pre><span class="pl-k">using</span> JuMP, KNITRO, AmplNLWriter

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(KNITRO<span class="pl-k">.</span>amplexe, [<span class="pl-s"><span class="pl-pds">"</span>outlev=3<span class="pl-pds">"</span></span>]))
</pre></div>
</article></div>