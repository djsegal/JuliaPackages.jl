<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-approxfunjl" class="anchor" aria-hidden="true" href="#approxfunjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ApproxFun.jl</h1>
<p><a href="https://JuliaApproximation.github.io/ApproxFun.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaApproximation.github.io/ApproxFun.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaApproximation/ApproxFun.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0ade61751c40c337988950d2a74294ba84c491e1/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417070726f78696d6174696f6e2f417070726f7846756e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaApproximation/ApproxFun.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dlfivefifty/approxfun-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/acea75fb0ea0b70781ec01216df9a3a446f4561e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3430716d6f78703138397077747564613f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/40qmoxp189pwtuda?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/ApproxFun.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7fa3feb8e4b5698021c55cda04af5a8c4a4713b2/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f417070726f7846756e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/ApproxFun.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://gitter.im/JuliaApproximation/ApproxFun.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/4241f01c4a09755ef30c5ef44d58463dacb081cd/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c6961417070726f78696d6174696f6e2f417070726f7846756e2e6a6c2e737667" alt="Join the chat at https://gitter.im/JuliaApproximation/ApproxFun.jl" data-canonical-src="https://badges.gitter.im/JuliaApproximation/ApproxFun.jl.svg" style="max-width:100%;"></a></p>
<p>ApproxFun is a package for approximating functions. It is in a similar vein to the Matlab
package <a href="http://www.chebfun.org" rel="nofollow"><code>Chebfun</code></a> and the Mathematica package <a href="https://github.com/dlfivefifty/RHPackage"><code>RHPackage</code></a>.</p>
<p>The  <a href="https://JuliaApproximation.github.io/ApproxFun.jl/latest" rel="nofollow"><code>ApproxFun Documentation</code></a> contains detailed information, or read on for a brief overview of the package.</p>
<p>The  <a href="https://github.com/JuliaApproximation/ApproxFunExamples"><code>ApproxFun Examples</code></a> contains many examples of
using this package, in Jupyter notebooks and Julia scripts.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>Take your two favourite functions on an interval and create approximations to them as simply as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra, SpecialFunctions, Plots, ApproxFun
x <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(identity,<span class="pl-c1">0..10</span>)
f <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>)
g <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x)</pre></div>
<p>Evaluating <code>f(.1)</code> will return a high
accuracy approximation to <code>sin(0.01)</code>. All the algebraic manipulations of functions
are supported and more.  For example, we can add <code>f</code> and <code>g^2</code> together and compute
the roots and extrema:</p>
<div class="highlight highlight-source-julia"><pre>h <span class="pl-k">=</span> f <span class="pl-k">+</span> g<span class="pl-k">^</span><span class="pl-c1">2</span>
r <span class="pl-k">=</span> <span class="pl-c1">roots</span>(h)
rp <span class="pl-k">=</span> <span class="pl-c1">roots</span>(h<span class="pl-k">'</span>)

<span class="pl-c1">plot</span>(h; label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>f + g^2<span class="pl-pds">"</span></span>)
<span class="pl-c1">scatter!</span>(r, <span class="pl-c1">h</span>.(r); label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>roots<span class="pl-pds">"</span></span>)
<span class="pl-c1">scatter!</span>(rp, <span class="pl-c1">h</span>.(rp); label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>extrema<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/extrema.png"><img src="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/extrema.png" width="500" height="400" style="max-width:100%;"></a></p>
<h2><a id="user-content-differentiation-and-integration" class="anchor" aria-hidden="true" href="#differentiation-and-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Differentiation and integration</h2>
<p>Notice from above that to find the extrema, we used <code>'</code> overridden for the <code>differentiate</code> function. Several other <code>Julia</code>
base functions are overridden for the purposes of calculus. Because the exponential is its own
derivative, the <code>norm</code> is small:</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">exp</span>(x), <span class="pl-k">-</span><span class="pl-c1">1..1</span>)
<span class="pl-c1">norm</span>(f<span class="pl-k">-</span>f<span class="pl-k">'</span>)  <span class="pl-c"><span class="pl-c">#</span> 4.4391656415701095e-14</span></pre></div>
<p>Similarly, <code>cumsum</code> defines an indefinite integration operator:</p>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">cumsum</span>(f)
g <span class="pl-k">=</span> g <span class="pl-k">+</span> <span class="pl-c1">f</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">norm</span>(f<span class="pl-k">-</span>g) <span class="pl-c"><span class="pl-c">#</span> 3.4989733283850415e-15d</span></pre></div>
<p>Algebraic and differential operations are also implemented where possible, and most of Julia's built-in functions are overridden to accept <code>Fun</code>s:</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">Fun</span>()
f <span class="pl-k">=</span> <span class="pl-c1">erf</span>(x)
g <span class="pl-k">=</span> <span class="pl-c1">besselj</span>(<span class="pl-c1">3</span>,<span class="pl-c1">exp</span>(f))
h <span class="pl-k">=</span> <span class="pl-c1">airyai</span>(<span class="pl-c1">10</span><span class="pl-c1">asin</span>(f)<span class="pl-k">+</span><span class="pl-c1">2</span>g)</pre></div>
<h2><a id="user-content-solving-ordinary-differential-equations" class="anchor" aria-hidden="true" href="#solving-ordinary-differential-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solving ordinary differential equations</h2>
<p>We can also solve differential equations. Consider the Airy ODE <code>u'' - x u = 0</code> as a boundary value problem on <code>[-1000,200]</code> with conditions <code>u(-1000) = 1</code> and <code>u(200) = 2</code>. The unique solution is a linear combination of Airy functions. We can calculate it as follows:</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(identity, <span class="pl-k">-</span><span class="pl-c1">1000..200</span>) <span class="pl-c"><span class="pl-c">#</span> the function x on the interval -1000..200</span>
D <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>()              <span class="pl-c"><span class="pl-c">#</span> The derivative operator</span>
B <span class="pl-k">=</span> <span class="pl-c1">Dirichlet</span>()               <span class="pl-c"><span class="pl-c">#</span> Dirichlet conditions</span>
L <span class="pl-k">=</span> D<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x                   <span class="pl-c"><span class="pl-c">#</span> the Airy operator</span>
u <span class="pl-k">=</span> [B;L] <span class="pl-k">\</span> [[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>],<span class="pl-c1">0</span>]         <span class="pl-c"><span class="pl-c">#</span> Calculate u such that B*u == [1,2] and L*u == 0</span>
<span class="pl-c1">plot</span>(u; label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/airy.png"><img src="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/airy.png" width="500" height="400" style="max-width:100%;"></a></p>
<h2><a id="user-content-nonlinear-boundary-value-problems" class="anchor" aria-hidden="true" href="#nonlinear-boundary-value-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nonlinear Boundary Value problems</h2>
<p>Solve a nonlinear boundary value problem satisfying the ODE <code>0.001u'' + 6*(1-x^2)*u' + u^2 = 1</code> with boundary conditions <code>u(-1)==1</code>, <code>u(1)==-0.5</code> on <code>[-1,1]</code>:</p>
<div class="highlight highlight-source-julia"><pre>x  <span class="pl-k">=</span> <span class="pl-c1">Fun</span>()
u₀ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>x <span class="pl-c"><span class="pl-c">#</span> initial guess</span>
N <span class="pl-k">=</span> u <span class="pl-k">-&gt;</span> [<span class="pl-c1">u</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">u</span>(<span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-c1">0.5</span>, <span class="pl-c1">0.001</span>u<span class="pl-k">''</span> <span class="pl-k">+</span> <span class="pl-c1">6</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>u<span class="pl-k">'</span> <span class="pl-k">+</span> u<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>]
u <span class="pl-k">=</span> <span class="pl-c1">newton</span>(N, u₀) <span class="pl-c"><span class="pl-c">#</span> perform Newton iteration in function space</span>
<span class="pl-c1">plot</span>(u)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/nbvp.png"><img src="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/nbvp.png" width="500" height="400" style="max-width:100%;"></a></p>
<p>One can also solve a system nonlinear ODEs with potentially nonlinear boundary conditions:</p>
<div class="highlight highlight-source-julia"><pre>x<span class="pl-k">=</span><span class="pl-c1">Fun</span>(identity, <span class="pl-c1">0..1</span>)
N <span class="pl-k">=</span> (u1,u2) <span class="pl-k">-&gt;</span> [u1<span class="pl-k">'</span>(<span class="pl-c1">0</span>) <span class="pl-k">-</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">u1</span>(<span class="pl-c1">0</span>)<span class="pl-k">*</span><span class="pl-c1">u2</span>(<span class="pl-c1">0</span>);
                u2<span class="pl-k">'</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>;
                <span class="pl-c1">u1</span>(<span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">1</span>;
                <span class="pl-c1">u2</span>(<span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">1</span>;
                u1<span class="pl-k">''</span> <span class="pl-k">+</span> u1<span class="pl-k">*</span>u2;
                u2<span class="pl-k">''</span> <span class="pl-k">-</span> u1<span class="pl-k">*</span>u2]

u10 <span class="pl-k">=</span> <span class="pl-c1">one</span>(x)
u20 <span class="pl-k">=</span> <span class="pl-c1">one</span>(x)
u1,u2 <span class="pl-k">=</span> <span class="pl-c1">newton</span>(N, [u10,u20])

<span class="pl-c1">plot</span>(u1, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u1<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(u2, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u2<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/example_nonlin.png"><img src="images/example_nonlin.png" width="500" height="400" style="max-width:100%;"></a></p>
<h2><a id="user-content-periodic-functions" class="anchor" aria-hidden="true" href="#periodic-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Periodic functions</h2>
<p>There is also support for Fourier representations of functions on periodic intervals.
Specify the space <code>Fourier</code> to ensure that the representation is periodic:</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(cos, <span class="pl-c1">Fourier</span>(<span class="pl-k">-</span>π<span class="pl-k">..</span>π))
<span class="pl-c1">norm</span>(f<span class="pl-k">'</span> <span class="pl-k">+</span> <span class="pl-c1">Fun</span>(sin, <span class="pl-c1">Fourier</span>(<span class="pl-k">-</span>π<span class="pl-k">..</span>π))) <span class="pl-c"><span class="pl-c">#</span> 5.923502902288505e-17</span></pre></div>
<p>Due to the periodicity, Fourier representations allow for the asymptotic savings of <code>2/π</code>
in the number of coefficients that need to be stored compared with a Chebyshev representation.
ODEs can also be solved when the solution is periodic:</p>
<div class="highlight highlight-source-julia"><pre>s <span class="pl-k">=</span> <span class="pl-c1">Chebyshev</span>(<span class="pl-k">-</span>π<span class="pl-k">..</span>π)
a <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(t<span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">sin</span>(<span class="pl-c1">cos</span>(<span class="pl-c1">2</span>t)), s)
L <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>() <span class="pl-k">+</span> a
f <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(t<span class="pl-k">-&gt;</span><span class="pl-c1">exp</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">10</span>t)), s)
B <span class="pl-k">=</span> <span class="pl-c1">periodic</span>(s,<span class="pl-c1">0</span>)
uChebyshev <span class="pl-k">=</span> [B;L] <span class="pl-k">\</span> [<span class="pl-c1">0.</span>;f]

s <span class="pl-k">=</span> <span class="pl-c1">Fourier</span>(<span class="pl-k">-</span>π<span class="pl-k">..</span>π)
a <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(t<span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">sin</span>(<span class="pl-c1">cos</span>(<span class="pl-c1">2</span>t)), s)
L <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>() <span class="pl-k">+</span> a
f <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(t<span class="pl-k">-&gt;</span><span class="pl-c1">exp</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">10</span>t)), s)
uFourier <span class="pl-k">=</span> L<span class="pl-k">\</span>f

<span class="pl-c1">ncoefficients</span>(uFourier)<span class="pl-k">/</span><span class="pl-c1">ncoefficients</span>(uChebyshev),<span class="pl-c1">2</span><span class="pl-k">/</span>π
<span class="pl-c1">plot</span>(uFourier)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/periodic.png"><img src="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/periodic.png" width="500" height="400" style="max-width:100%;"></a></p>
<h2><a id="user-content-sampling" class="anchor" aria-hidden="true" href="#sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sampling</h2>
<p>Other operations including random number sampling using [Olver &amp; Townsend 2013].  The
following code samples 10,000 from a PDF given as the absolute value of the sine function on <code>[-5,5]</code>:</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">abs</span>(<span class="pl-c1">Fun</span>(sin, <span class="pl-k">-</span><span class="pl-c1">5..5</span>))
x <span class="pl-k">=</span> ApproxFun<span class="pl-k">.</span><span class="pl-c1">sample</span>(f,<span class="pl-c1">10000</span>)
<span class="pl-c1">histogram</span>(x;normed<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">plot!</span>(f<span class="pl-k">/</span><span class="pl-c1">sum</span>(f))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/sample.png"><img src="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/sample.png" width="500" height="400" style="max-width:100%;"></a></p>
<h2><a id="user-content-solving-partial-differential-equations" class="anchor" aria-hidden="true" href="#solving-partial-differential-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solving partial differential equations</h2>
<p>We can solve PDEs, the following solves Helmholtz <code>Δu + 100u=0</code> with <code>u(±1,y)=u(x,±1)=1</code>
on a square.  This function has weak singularities at the corner,
so we specify a lower tolerance to avoid resolving these singularities
completely.</p>
<div class="highlight highlight-source-julia"><pre>d <span class="pl-k">=</span> <span class="pl-c1">ChebyshevInterval</span>()<span class="pl-k">^</span><span class="pl-c1">2</span>                            <span class="pl-c"><span class="pl-c">#</span> Defines a rectangle</span>
Δ <span class="pl-k">=</span> <span class="pl-c1">Laplacian</span>(d)                            <span class="pl-c"><span class="pl-c">#</span> Represent the Laplacian</span>
f <span class="pl-k">=</span> <span class="pl-c1">ones</span>(∂(d))                              <span class="pl-c"><span class="pl-c">#</span> one at the boundary</span>
u <span class="pl-k">=</span> <span class="pl-k">\</span>([<span class="pl-c1">Dirichlet</span>(d); Δ<span class="pl-k">+</span><span class="pl-c1">100</span>I], [f;<span class="pl-c1">0.</span>];       <span class="pl-c"><span class="pl-c">#</span> Solve the PDE</span>
                tolerance<span class="pl-k">=</span><span class="pl-c1">1E-5</span>)             
<span class="pl-c1">surface</span>(u)                                  <span class="pl-c"><span class="pl-c">#</span> Surface plot</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/helmholtz.png"><img src="https://github.com/JuliaApproximation/ApproxFun.jl/raw/master/images/helmholtz.png" width="500" height="400" style="max-width:100%;"></a></p>

<h2><a id="user-content-high-precision" class="anchor" aria-hidden="true" href="#high-precision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>High precision</h2>
<p>Solving differential equations with high precision types is available.  The following calculates <code>e</code> to 300 digits by solving the ODE <code>u' = u</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setprecision</span>(<span class="pl-c1">1000</span>) <span class="pl-k">do</span>
    d <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-c1">0</span>)<span class="pl-k">..</span><span class="pl-c1">BigFloat</span>(<span class="pl-c1">1</span>)
    D <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>(d)
    u <span class="pl-k">=</span> [<span class="pl-c1">ldirichlet</span>(); D<span class="pl-k">-</span>I] <span class="pl-k">\</span> [<span class="pl-c1">1</span>; <span class="pl-c1">0</span>]
    <span class="pl-c1">@test</span> <span class="pl-c1">u</span>(<span class="pl-c1">1</span>) <span class="pl-k">≈</span> <span class="pl-c1">exp</span>(<span class="pl-c1">BigFloat</span>(<span class="pl-c1">1</span>))
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-self-adjoint-eigenvalue-problems" class="anchor" aria-hidden="true" href="#self-adjoint-eigenvalue-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Self-adjoint eigenvalue problems</h2>
<p>This solves the confined anharmonic oscillator, <code>[-𝒟² + V(x)] u = λu</code>, where <code>u(±10) = 0</code>, <code>V(x) = ω*x² + x⁴</code>, and <code>ω = 25</code>.</p>
<div class="highlight highlight-source-julia"><pre>    n <span class="pl-k">=</span> <span class="pl-c1">3000</span>
    ω <span class="pl-k">=</span> <span class="pl-c1">25.0</span>
    d <span class="pl-k">=</span> <span class="pl-c1">Segment</span>(<span class="pl-k">-</span><span class="pl-c1">10..10</span>)
    S <span class="pl-k">=</span> <span class="pl-c1">Ultraspherical</span>(<span class="pl-c1">0.5</span>, d)
    NS <span class="pl-k">=</span> <span class="pl-c1">NormalizedPolynomialSpace</span>(S)
    V <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(x<span class="pl-k">-&gt;</span>ω<span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>x<span class="pl-k">^</span><span class="pl-c1">4</span>, S)
    L <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">Derivative</span>(S, <span class="pl-c1">2</span>) <span class="pl-k">+</span> V
    C <span class="pl-k">=</span> <span class="pl-c1">Conversion</span>(<span class="pl-c1">domainspace</span>(L), <span class="pl-c1">rangespace</span>(L))
    B <span class="pl-k">=</span> <span class="pl-c1">Dirichlet</span>(S)
    QS <span class="pl-k">=</span> <span class="pl-c1">QuotientSpace</span>(B)
    Q <span class="pl-k">=</span> <span class="pl-c1">Conversion</span>(QS, S)
    D1 <span class="pl-k">=</span> <span class="pl-c1">Conversion</span>(S, NS)
    D2 <span class="pl-k">=</span> <span class="pl-c1">Conversion</span>(NS, S)
    R <span class="pl-k">=</span> D1<span class="pl-k">*</span>Q
    P <span class="pl-k">=</span> <span class="pl-c1">cache</span>(<span class="pl-c1">PartialInverseOperator</span>(C, (<span class="pl-c1">0</span>, ApproxFun<span class="pl-k">.</span><span class="pl-c1">bandwidth</span>(L, <span class="pl-c1">1</span>) <span class="pl-k">+</span> ApproxFun<span class="pl-k">.</span><span class="pl-c1">bandwidth</span>(R, <span class="pl-c1">1</span>) <span class="pl-k">+</span> ApproxFun<span class="pl-k">.</span><span class="pl-c1">bandwidth</span>(C, <span class="pl-c1">2</span>))))
    A <span class="pl-k">=</span> R<span class="pl-k">'</span>D1<span class="pl-k">*</span>P<span class="pl-k">*</span>L<span class="pl-k">*</span>D2<span class="pl-k">*</span>R
    B <span class="pl-k">=</span> R<span class="pl-k">'</span>R
    SA <span class="pl-k">=</span> <span class="pl-c1">Symmetric</span>(A[<span class="pl-c1">1</span><span class="pl-k">:</span>n,<span class="pl-c1">1</span><span class="pl-k">:</span>n], <span class="pl-c1">:L</span>)
    SB <span class="pl-k">=</span> <span class="pl-c1">Symmetric</span>(B[<span class="pl-c1">1</span><span class="pl-k">:</span>n,<span class="pl-c1">1</span><span class="pl-k">:</span>n], <span class="pl-c1">:L</span>)
    λ <span class="pl-k">=</span> <span class="pl-c1">eigvals</span>(SA, SB)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">round</span>(Int, <span class="pl-c1">3</span>n<span class="pl-k">/</span><span class="pl-c1">5</span>)]</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>J. L. Aurentz &amp; R. M. Slevinsky (2019), On symmetrizing the ultraspherical spectral method for self-adjoint problems, arxiv:1903.08538</p>
<p>S. Olver &amp; A. Townsend (2014), A practical framework for infinite-dimensional linear algebra, Proceedings of the 1st First Workshop for High Performance Technical Computing in Dynamic Languages, 57–62</p>
<p>A. Townsend &amp; S. Olver (2014), The automatic solution of partial differential equations using a global spectral method,  J. Comp. Phys., 299: 106–123</p>
<p>S. Olver &amp; A. Townsend (2013), Fast inverse transform sampling in one and two dimensions, arXiv:1307.1223</p>
<p>S. Olver &amp; A. Townsend (2013), A fast and well-conditioned spectral method, SIAM Review, 55:462–489</p>
</article></div>