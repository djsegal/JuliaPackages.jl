<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-squidgamejl" class="anchor" aria-hidden="true" href="#squidgamejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SquidGame.jl</h1>
<p dir="auto"><a href="https://andrewrosemberg.github.io/SquidGame.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://andrewrosemberg.github.io/SquidGame.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/andrewrosemberg/SquidGame.jl/actions/workflows/JuliaNightly.yml?query=branch%3Amain"><img src="https://github.com/andrewrosemberg/SquidGame.jl/actions/workflows/JuliaNightly.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/andrewrosemberg/SquidGame.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/41cfbe14421b1731365d5795235109aaadd79e7d5d800dce039172df3f5f770c/68747470733a2f2f636f6465636f762e696f2f67682f616e64726577726f73656d626572672f537175696447616d652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/andrewrosemberg/SquidGame.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/andrewrosemberg/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">Strategy simulation for simple games.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add SquidGame"><pre>] add SquidGame</pre></div>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">Using function <code>play_game</code>, simulates a game for of <code>N</code> strategies competing against each other (where <code>N</code> is the appropriate number of players for the game).</p>
<p dir="auto">Implementable games are "deterministic" games where each player knows the possible rewards for each round at decision time, with the only uncertainty being the action of other players.</p>
<p dir="auto">Rewards are defined as a multi-dimensional array where your action is the first index and rivals are the remaining indexes. For example, a 2 player game:</p>
<table>
<thead>
<tr>
<th></th>
<th>Rival Action 1</th>
<th>Rival Action 2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Your Action 1</td>
<td>5.0</td>
<td>0.0</td>
</tr>
<tr>
<td>Your Action 2</td>
<td>10.0</td>
<td>2.0</td>
</tr>
</tbody>
</table>
<p dir="auto">In this case:</p>
<ul dir="auto">
<li>If you acted with action <code>1</code> and your rival also chose action <code>1</code>, you would both earn <code>5</code> points;</li>
<li>If you acted with action <code>1</code> and your rival chose action <code>2</code>, you would earn <code>0</code> and they would earn <code>10</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-example-prisoner-game" class="anchor" aria-hidden="true" href="#example-prisoner-game"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Prisoner Game</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SquidGame
import SquidGame._run_strategy
using Plots

number_of_rounds = 10

# Define Game
# (The infrastructure is generic enough so you can have different rewards per iteration).
prisoner_game = prisoner(number_of_rounds) # same as `Game(; rewards=(iter) -&gt; [[5. 0]; [10 2]], number_of_rounds)`


# Define a name for your strategy
abstract type MyStrategy &lt;: Strategy end

# Define the logic of your strategy
function SquidGame._run_strategy(::Type{MyStrategy}, reward::AbstractArray{Float64}, 
    history::Union{NamedTuple{(:my_action, :their_action, :my_reward, :their_reward), Tuple{Vector{Int64}, Matrix{Int64}, Vector{Float64}, Matrix{Float64}}}, Missing},
    rounds_left::Union{Int,  Missing}
)
    
    # your can use whatever logic you wish. This example is an angel, it will always choose the cooperative action.
    return find_cooperative_action(reward)
end

strategies = Vector{Type{&lt;:Strategy}}()

# push it to the stage
push!(strategies, MyStrategy)

# Push your opponent 
push!(strategies, Devil)

# Simulate the game.
realized_reward_history, strategies_action_history = play_game(prisoner_game, strategies)

# Visualise the scores over all rounds 
scoreboard(realized_reward_history, strategies)"><pre><span class="pl-k">using</span> SquidGame
<span class="pl-k">import</span> SquidGame<span class="pl-k">.</span>_run_strategy
<span class="pl-k">using</span> Plots

number_of_rounds <span class="pl-k">=</span> <span class="pl-c1">10</span>

<span class="pl-c"><span class="pl-c">#</span> Define Game</span>
<span class="pl-c"><span class="pl-c">#</span> (The infrastructure is generic enough so you can have different rewards per iteration).</span>
prisoner_game <span class="pl-k">=</span> <span class="pl-c1">prisoner</span>(number_of_rounds) <span class="pl-c"><span class="pl-c">#</span> same as `Game(; rewards=(iter) -&gt; [[5. 0]; [10 2]], number_of_rounds)`</span>


<span class="pl-c"><span class="pl-c">#</span> Define a name for your strategy</span>
<span class="pl-k">abstract type</span> MyStrategy <span class="pl-k">&lt;:</span> <span class="pl-c1">Strategy</span> <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define the logic of your strategy</span>
<span class="pl-k">function</span> SquidGame<span class="pl-k">.</span><span class="pl-en">_run_strategy</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyStrategy}</span>, reward<span class="pl-k">::</span><span class="pl-c1">AbstractArray{Float64}</span>, 
    history<span class="pl-k">::</span><span class="pl-c1">Union</span>{NamedTuple{(<span class="pl-c1">:my_action</span>, <span class="pl-c1">:their_action</span>, <span class="pl-c1">:my_reward</span>, <span class="pl-c1">:their_reward</span>), Tuple{Vector{Int64}, Matrix{Int64}, Vector{Float64}, Matrix{Float64}}}, Missing},
    rounds_left<span class="pl-k">::</span><span class="pl-c1">Union{Int,  Missing}</span>
)
    
    <span class="pl-c"><span class="pl-c">#</span> your can use whatever logic you wish. This example is an angel, it will always choose the cooperative action.</span>
    <span class="pl-k">return</span> <span class="pl-c1">find_cooperative_action</span>(reward)
<span class="pl-k">end</span>

strategies <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Type{&lt;:Strategy}}</span>()

<span class="pl-c"><span class="pl-c">#</span> push it to the stage</span>
<span class="pl-c1">push!</span>(strategies, MyStrategy)

<span class="pl-c"><span class="pl-c">#</span> Push your opponent </span>
<span class="pl-c1">push!</span>(strategies, Devil)

<span class="pl-c"><span class="pl-c">#</span> Simulate the game.</span>
realized_reward_history, strategies_action_history <span class="pl-k">=</span> <span class="pl-c1">play_game</span>(prisoner_game, strategies)

<span class="pl-c"><span class="pl-c">#</span> Visualise the scores over all rounds </span>
<span class="pl-c1">scoreboard</span>(realized_reward_history, strategies)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/andrewrosemberg/SquidGame.jl/main/docs/src/assets/prisoner_game_plot.png"><img src="https://raw.githubusercontent.com/andrewrosemberg/SquidGame.jl/main/docs/src/assets/prisoner_game_plot.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-play-a-game-with-3-players" class="anchor" aria-hidden="true" href="#play-a-game-with-3-players"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Play a game with 3 players</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# add a player 
push!(strategies, RandomStrategy)

# choose the game
random_game = randgame(number_of_rounds)

# Simulate the game
realized_reward_history, strategies_action_history = play_game(random_game, strategies)

# Visualise the scores over all rounds 
scoreboard(realized_reward_history, strategies)"><pre><span class="pl-c"><span class="pl-c">#</span> add a player </span>
<span class="pl-c1">push!</span>(strategies, RandomStrategy)

<span class="pl-c"><span class="pl-c">#</span> choose the game</span>
random_game <span class="pl-k">=</span> <span class="pl-c1">randgame</span>(number_of_rounds)

<span class="pl-c"><span class="pl-c">#</span> Simulate the game</span>
realized_reward_history, strategies_action_history <span class="pl-k">=</span> <span class="pl-c1">play_game</span>(random_game, strategies)

<span class="pl-c"><span class="pl-c">#</span> Visualise the scores over all rounds </span>
<span class="pl-c1">scoreboard</span>(realized_reward_history, strategies)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/andrewrosemberg/SquidGame.jl/main/docs/src/assets/random_game_plot.png"><img src="https://raw.githubusercontent.com/andrewrosemberg/SquidGame.jl/main/docs/src/assets/random_game_plot.png" alt="" style="max-width: 100%;"></a></p>
</article></div>