<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structc14njl" class="anchor" aria-hidden="true" href="#structc14njl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructC14N.jl</h1>
<h2 dir="auto"><a id="user-content-structure-and-named-tuple-canonicalization" class="anchor" aria-hidden="true" href="#structure-and-named-tuple-canonicalization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Structure and named tuple canonicalization.</h2>
<p dir="auto"><a href="https://travis-ci.org/gcalderone/StructC14N.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/935dd42d33e38cd8e2a8a0401ef176d44d1813d18c622deff8a94c05b8d41e87/68747470733a2f2f7472617669732d63692e6f72672f6763616c6465726f6e652f5374727563744331344e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gcalderone/StructC14N.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add StructC14N"><pre>]add StructC14N</pre></div>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<hr>
<p dir="auto">This package exports the <code>canonicalize(template, input)</code> function allowing <em>canonicalization</em> of input values according to a <em>template</em>.  The template must be a structure definition (i.e. a <code>DataType</code>), a structure instance or a named tuple,  The input values may be given either as a named tuple, as a tuple, or as keywords.  A <strong>characterizing feature</strong> of <code>StructC14N</code> is that field names in input may be given in abbreviated forms, as long as the abbreviation is unambiguous among the template field names.  The output will be either a structure instance or a named tuple (depending on the type of <code>template</code>), whose values are copied (and converted, if necessary) from the inputs, or (if a field specification is missing) from the template default values.  A further argument of type <code>Dict{Symbol, Function}</code> may be given to <code>canonicalize</code> to specify the conversion functions to be used to populate output from input values.</p>
<p dir="auto">The following table shows the beahviour details, which depends on the type of <code>template</code>:</p>
<table>
<thead>
<tr>
<th>Template</th>
<th>Return type</th>
<th>Default values</th>
<th>Relation between template field types and output types?</th>
<th>Missing inputs for a field results in</th>
</tr>
</thead>
<tbody>
<tr>
<td>A <code>NamedTuple</code> instance</td>
<td><code>NamedTuple</code></td>
<td>Allowed</td>
<td>Implicit (type of default values) or explicit (as a <code>Type</code>)</td>
<td>Default value or <code>missing</code> (1)</td>
</tr>
<tr>
<td>A <code>T</code> structure definition</td>
<td><code>T</code> instance</td>
<td>Not allowed</td>
<td>Identical to structure definition</td>
<td><code>missing</code> if allowed by struct, otherwise error</td>
</tr>
<tr>
<td>A <code>T</code> structure instance</td>
<td><code>T</code> instance</td>
<td>Allowed</td>
<td>Identical to structure definition</td>
<td>Default value</td>
</tr>
</tbody>
</table>
<p dir="auto">(1): Note that the output named tuple may contain <code>missing</code>s even if this is not allowed by the template.</p>
<p dir="auto">Type <code>? canonicalize</code> in the REPL to read the documentation for individual methods, and the rest of this file for a few examples.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructC14N

# Create a template
template = (xrange=NTuple{2,Number},
            yrange=NTuple{2,Number},
            title=&quot;A string&quot;)

# Create input named tuple...
nt = (xr=(1,2), tit=&quot;Foo&quot;)

# Dump canonicalized version
dump(canonicalize(template, nt))"><pre><span class="pl-k">using</span> StructC14N

<span class="pl-c"><span class="pl-c">#</span> Create a template</span>
template <span class="pl-k">=</span> (xrange<span class="pl-k">=</span>NTuple{<span class="pl-c1">2</span>,Number},
            yrange<span class="pl-k">=</span>NTuple{<span class="pl-c1">2</span>,Number},
            title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>A string<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Create input named tuple...</span>
nt <span class="pl-k">=</span> (xr<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), tit<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Dump canonicalized version</span>
<span class="pl-c1">dump</span>(<span class="pl-c1">canonicalize</span>(template, nt))</pre></div>
<p dir="auto">will result in</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="NamedTuple{(:xrange, :yrange, :title),Tuple{Tuple{Int64,Int64},Missing,String}}
  xrange: Tuple{Int64,Int64}
    1: Int64 1
    2: Int64 2
  yrange: Missing missing
  title: String &quot;Foo&quot;"><pre>NamedTuple{(<span class="pl-c1">:xrange</span>, <span class="pl-c1">:yrange</span>, <span class="pl-c1">:title</span>),Tuple{Tuple{Int64,Int64},Missing,String}}
  xrange<span class="pl-k">:</span> Tuple{Int64,Int64}
    <span class="pl-c1">1</span><span class="pl-k">:</span> Int64 <span class="pl-c1">1</span>
    <span class="pl-c1">2</span><span class="pl-k">:</span> Int64 <span class="pl-c1">2</span>
  yrange<span class="pl-k">:</span> Missing <span class="pl-c1">missing</span>
  title<span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">One of the main use of <code>canonicalize</code> is to call functions using abbreviated keyword names (i.e. it can be used as a replacement for <a href="https://github.com/gcalderone/AbbrvKW.jl">AbbrvKW.jl</a>).  Consider the following function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Foo(; OptionalKW::Union{Missing,Bool}=missing, Keyword1::Int=1,
               AnotherKeyword::Float64=2.0, StillAnotherOne=3, KeyString::String=&quot;bar&quot;)
    @show OptionalKW
    @show Keyword1
    @show AnotherKeyword
    @show StillAnotherOne
    @show KeyString
end"><pre><span class="pl-k">function</span> <span class="pl-en">Foo</span>(; OptionalKW<span class="pl-k">::</span><span class="pl-c1">Union{Missing,Bool}</span><span class="pl-k">=</span><span class="pl-c1">missing</span>, Keyword1<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>,
               AnotherKeyword<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">2.0</span>, StillAnotherOne<span class="pl-k">=</span><span class="pl-c1">3</span>, KeyString<span class="pl-k">::</span><span class="pl-c1">String</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@show</span> OptionalKW
    <span class="pl-c1">@show</span> Keyword1
    <span class="pl-c1">@show</span> AnotherKeyword
    <span class="pl-c1">@show</span> StillAnotherOne
    <span class="pl-c1">@show</span> KeyString
<span class="pl-k">end</span></pre></div>
<p dir="auto">The only way to use the keywords is to type their entire names,
resulting in very long code lines, i.e.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Foo(Keyword1=10, AnotherKeyword=20.0, StillAnotherOne=30, KeyString=&quot;baz&quot;)"><pre><span class="pl-c1">Foo</span>(Keyword1<span class="pl-k">=</span><span class="pl-c1">10</span>, AnotherKeyword<span class="pl-k">=</span><span class="pl-c1">20.0</span>, StillAnotherOne<span class="pl-k">=</span><span class="pl-c1">30</span>, KeyString<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">By using <code>canonicalize</code> we may re-implement the function as follows</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Foo(; kwargs...)
    template = (; OptionalKW=Bool, Keyword1=1,
               AnotherKeyword=2.0, StillAnotherOne=3, KeyString=&quot;bar&quot;)
    kw = canonicalize(template; kwargs...)
    @show kw.OptionalKW
    @show kw.Keyword1
    @show kw.AnotherKeyword
    @show kw.StillAnotherOne
    @show kw.KeyString
end"><pre><span class="pl-k">function</span> <span class="pl-en">Foo</span>(; kwargs<span class="pl-k">...</span>)
    template <span class="pl-k">=</span> (; OptionalKW<span class="pl-k">=</span>Bool, Keyword1<span class="pl-k">=</span><span class="pl-c1">1</span>,
               AnotherKeyword<span class="pl-k">=</span><span class="pl-c1">2.0</span>, StillAnotherOne<span class="pl-k">=</span><span class="pl-c1">3</span>, KeyString<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>)
    kw <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(template; kwargs<span class="pl-k">...</span>)
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>OptionalKW
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>Keyword1
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>AnotherKeyword
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>StillAnotherOne
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>KeyString
<span class="pl-k">end</span></pre></div>
<p dir="auto">And call it using abbreviated keyword names:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Foo(Keyw=10, A=20.0, S=30, KeyS=&quot;baz&quot;) # Much shorter, isn't it?"><pre><span class="pl-c1">Foo</span>(Keyw<span class="pl-k">=</span><span class="pl-c1">10</span>, A<span class="pl-k">=</span><span class="pl-c1">20.0</span>, S<span class="pl-k">=</span><span class="pl-c1">30</span>, KeyS<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Much shorter, isn't it?</span></pre></div>
<p dir="auto">A wrong abbreviation or a wrong type will result in errors:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Foo(aa=1)
Foo(Keyw=&quot;abc&quot;)"><pre><span class="pl-c1">Foo</span>(aa<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">Foo</span>(Keyw<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Another common use of <code>StructC14N</code> is in parsing configuration files, e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="configtemplate = (optStr=String,
                  optInt=Int,
                  optFloat=Float64)

# Parse a tuple
configentry = &quot;aa, 1, 2&quot;
c = canonicalize(configtemplate, (split(configentry, &quot;,&quot;)...,))

# Parse a named tuple
configentry = &quot;optFloat=20, optStr=\&quot;aaa\&quot;, optInt=10&quot;
c = canonicalize(configtemplate, eval(Meta.parse(&quot;($configentry)&quot;)))

# Use a custom conversion routine
function myparse(input)
  if input == &quot;ten&quot;
    return 10
  end
  return 1
end
configentry = &quot;optFloat=20, optStr=\&quot;aaa\&quot;, optInt=\&quot;ten\&quot;&quot;
c = canonicalize(configtemplate, eval(Meta.parse(&quot;($configentry)&quot;)), Dict(:optInt=&gt;myparse))"><pre>configtemplate <span class="pl-k">=</span> (optStr<span class="pl-k">=</span>String,
                  optInt<span class="pl-k">=</span>Int,
                  optFloat<span class="pl-k">=</span>Float64)

<span class="pl-c"><span class="pl-c">#</span> Parse a tuple</span>
configentry <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>aa, 1, 2<span class="pl-pds">"</span></span>
c <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(configtemplate, (<span class="pl-c1">split</span>(configentry, <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span>)<span class="pl-k">...</span>,))

<span class="pl-c"><span class="pl-c">#</span> Parse a named tuple</span>
configentry <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>optFloat=20, optStr=<span class="pl-cce">\"</span>aaa<span class="pl-cce">\"</span>, optInt=10<span class="pl-pds">"</span></span>
c <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(configtemplate, <span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-v">$configentry</span>)<span class="pl-pds">"</span></span>)))

<span class="pl-c"><span class="pl-c">#</span> Use a custom conversion routine</span>
<span class="pl-k">function</span> <span class="pl-en">myparse</span>(input)
  <span class="pl-k">if</span> input <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>ten<span class="pl-pds">"</span></span>
    <span class="pl-k">return</span> <span class="pl-c1">10</span>
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>
configentry <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>optFloat=20, optStr=<span class="pl-cce">\"</span>aaa<span class="pl-cce">\"</span>, optInt=<span class="pl-cce">\"</span>ten<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>
c <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(configtemplate, <span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-v">$configentry</span>)<span class="pl-pds">"</span></span>)), <span class="pl-c1">Dict</span>(<span class="pl-c1">:optInt</span><span class="pl-k">=&gt;</span>myparse))</pre></div>
</article></div>