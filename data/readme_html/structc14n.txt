<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-structc14njl" class="anchor" aria-hidden="true" href="#structc14njl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StructC14N.jl</h1>
<h2><a id="user-content-structure-and-named-tuple-canonicalization" class="anchor" aria-hidden="true" href="#structure-and-named-tuple-canonicalization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structure and named tuple canonicalization.</h2>
<p><a href="https://travis-ci.org/gcalderone/StructC14N.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aca09f595b20f67755179a3804b2baa8c6b495c7/68747470733a2f2f7472617669732d63692e6f72672f6763616c6465726f6e652f5374727563744331344e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gcalderone/StructC14N.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Install with:</p>
<div class="highlight highlight-source-julia"><pre>]add StructC14N</pre></div>
<hr>
<p>This package exports the <code>canonicalize</code> function which allows <em>canonicalization</em> of structures and named tuples according to a <em>template</em> structure or named tuple.</p>
<p>The signature is as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">canonicalize</span>(template, input)</pre></div>
<p><code>template</code> can be either a structure or a named tuple.  Return value has the same type as <code>template</code>.  <code>input</code> can be a structure, a named tuple or a tuple.  In the latter case the tuple must contains the same number of items as the <code>template</code>.</p>
<p>Type <code>? canonicalize</code> in the REPL to see the documentation for individual methods.</p>
<h2><a id="user-content-canonicalization-rules" class="anchor" aria-hidden="true" href="#canonicalization-rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Canonicalization rules:</h2>
<ul>
<li>
<p>output keys are the same as in <code>template</code>;</p>
</li>
<li>
<p>if <code>input</code> contains less items than <code>template</code>, the default values in <code>template</code> will be used to fill unspecified values;</p>
</li>
<li>
<p>output default values are determined as follows:</p>
<ul>
<li>if <code>template</code> is a named tuple and if one of its value is a Type <code>T</code>, the corresponding default value is <code>Missing</code>;</li>
<li>if <code>template</code> is not a named tuple, or if one of its value is of Type <code>T</code>, the corresponging default value is the value itself;</li>
</ul>
</li>
<li>
<p>output default values are overridden by values in <code>input</code> if a key in <code>input</code> is the same, or it is an unambiguous abbreviation, of one of the keys in <code>template</code>;</p>
</li>
<li>
<p>output override occurs regardless of the order of items in <code>template</code> and <code>input</code>;</p>
</li>
<li>
<p>if a key in <code>input</code> is not an abbreviation of the keys in <code>template</code>,  or if the abbreviation is ambiguous, an error is raised;</p>
</li>
<li>
<p>values in output are deep copied from <code>input</code>, and converted to the appropriate type.  If conversion is not possible an error is raised.</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StructC14N

<span class="pl-c"><span class="pl-c">#</span> Create a template</span>
template <span class="pl-k">=</span> (xrange<span class="pl-k">=</span>NTuple{<span class="pl-c1">2</span>,Number},
            yrange<span class="pl-k">=</span>NTuple{<span class="pl-c1">2</span>,Number},
            title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>A string<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Create input named tuple...</span>
nt <span class="pl-k">=</span> (xr<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), tit<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Dump canonicalized version</span>
<span class="pl-c1">dump</span>(<span class="pl-c1">canonicalize</span>(template, nt))</pre></div>
<p>will result in</p>
<div class="highlight highlight-source-julia"><pre>NamedTuple{(<span class="pl-c1">:xrange</span>, <span class="pl-c1">:yrange</span>, <span class="pl-c1">:title</span>),Tuple{Tuple{Int64,Int64},Missing,String}}
  xrange<span class="pl-k">:</span> Tuple{Int64,Int64}
    <span class="pl-c1">1</span><span class="pl-k">:</span> Int64 <span class="pl-c1">1</span>
    <span class="pl-c1">2</span><span class="pl-k">:</span> Int64 <span class="pl-c1">2</span>
  yrange<span class="pl-k">:</span> Missing <span class="pl-c1">missing</span>
  title<span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span></pre></div>
<p>One of the main use of <code>canonicalize</code> is to call functions using abbreviated keyword names (i.e. it can be used as a replacement for <a href="https://github.com/gcalderone/AbbrvKW.jl">AbbrvKW.jl</a>).  Consider the following function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">Foo</span>(; OptionalKW<span class="pl-k">::</span><span class="pl-c1">Union{Missing,Bool}</span><span class="pl-k">=</span><span class="pl-c1">missing</span>, Keyword1<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>,
               AnotherKeyword<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">2.0</span>, StillAnotherOne<span class="pl-k">=</span><span class="pl-c1">3</span>, KeyString<span class="pl-k">::</span><span class="pl-c1">String</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@show</span> OptionalKW
    <span class="pl-c1">@show</span> Keyword1
    <span class="pl-c1">@show</span> AnotherKeyword
    <span class="pl-c1">@show</span> StillAnotherOne
    <span class="pl-c1">@show</span> KeyString
<span class="pl-k">end</span></pre></div>
<p>The only way to use the keywords is to type their entire names,
resulting in very long code lines, i.e.:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Foo</span>(Keyword1<span class="pl-k">=</span><span class="pl-c1">10</span>, AnotherKeyword<span class="pl-k">=</span><span class="pl-c1">20.0</span>, StillAnotherOne<span class="pl-k">=</span><span class="pl-c1">30</span>, KeyString<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>)</pre></div>
<p>By using <code>canonicalize</code> we may re-implement the function as follows</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">Foo</span>(; kwargs<span class="pl-k">...</span>)
    template <span class="pl-k">=</span> (; OptionalKW<span class="pl-k">=</span>Bool, Keyword1<span class="pl-k">=</span><span class="pl-c1">1</span>,
               AnotherKeyword<span class="pl-k">=</span><span class="pl-c1">2.0</span>, StillAnotherOne<span class="pl-k">=</span><span class="pl-c1">3</span>, KeyString<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>)
    kw <span class="pl-k">=</span> StructC14N<span class="pl-k">.</span><span class="pl-c1">canonicalize</span>(template; kwargs<span class="pl-k">...</span>)
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>OptionalKW
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>Keyword1
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>AnotherKeyword
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>StillAnotherOne
    <span class="pl-c1">@show</span> kw<span class="pl-k">.</span>KeyString
<span class="pl-k">end</span></pre></div>
<p>And call it using abbreviated keyword names:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Foo</span>(Keyw<span class="pl-k">=</span><span class="pl-c1">10</span>, A<span class="pl-k">=</span><span class="pl-c1">20.0</span>, S<span class="pl-k">=</span><span class="pl-c1">30</span>, KeyS<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Much shorter, isn't it?</span></pre></div>
<p>A wrong abbreviation or a wrong type will result in errors:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Foo</span>(aa<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">Foo</span>(Keyw<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>)</pre></div>
<p>Another common use of <code>StructC14N</code> is in parsing configuration files, e.g.:</p>
<div class="highlight highlight-source-julia"><pre>configtemplate <span class="pl-k">=</span> (optStr<span class="pl-k">=</span>String,
                  optInt<span class="pl-k">=</span>Int,
                  optFloat<span class="pl-k">=</span>Float64)

<span class="pl-c"><span class="pl-c">#</span> Parse a tuple</span>
configentry <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>aa, 1, 2<span class="pl-pds">"</span></span>
c <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(configtemplate, (<span class="pl-c1">split</span>(configentry, <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span>)<span class="pl-k">...</span>,))

<span class="pl-c"><span class="pl-c">#</span> Parse a named tuple</span>
configentry <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>optFloat=20, optStr=<span class="pl-cce">\"</span>aaa<span class="pl-cce">\"</span>, optInt=10<span class="pl-pds">"</span></span>
c <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(configtemplate, <span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-v">$configentry</span>)<span class="pl-pds">"</span></span>)))

<span class="pl-c"><span class="pl-c">#</span> Use a custom conversion routine</span>
<span class="pl-k">function</span> <span class="pl-en">myparse</span>(input)
  <span class="pl-k">if</span> input <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>ten<span class="pl-pds">"</span></span>
    <span class="pl-k">return</span> <span class="pl-c1">10</span>
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>
configentry <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>optFloat=20, optStr=<span class="pl-cce">\"</span>aaa<span class="pl-cce">\"</span>, optInt=<span class="pl-cce">\"</span>ten<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>
c <span class="pl-k">=</span> <span class="pl-c1">canonicalize</span>(configtemplate, <span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-v">$configentry</span>)<span class="pl-pds">"</span></span>)), <span class="pl-c1">Dict</span>(<span class="pl-c1">:optInt</span><span class="pl-k">=&gt;</span>myparse))</pre></div>
</article></div>