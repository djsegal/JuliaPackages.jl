<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polylogjl" class="anchor" aria-hidden="true" href="#polylogjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PolyLog.jl</h1>
<p dir="auto"><a href="https://github.com/Expander/PolyLog.jl/actions/workflows/build.yml"><img src="https://github.com/Expander/PolyLog.jl/actions/workflows/build.yml/badge.svg" alt="test" style="max-width: 100%;"></a></p>
<p dir="auto">The PolyLog.jl package provides Julia implementations of real and
complex polylogarithms, including the real and complex dilogarithm and
trilogarithm.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PolyLog

# real polylogarithms for real arguments
reli1(1.0)          # Re[Li_1(x)]
reli2(1.0)          # Re[Li_2(x)] (dilogarithm)
reli3(1.0)          # Re[Li_3(x)] (trilogarithm)
reli4(1.0)          # Re[Li_4(x)]
reli(10, 1.0)       # Re[Li_n(x)] for all integers n (here: n = 10)

# complex polylogarithms for real or complex arguments
li0(1.0 + 1.0im)    # Li_0(z)
li1(1.0 + 1.0im)    # Li_1(z)
li2(1.0 + 1.0im)    # Li_2(z) (dilogarithm)
li3(1.0 + 1.0im)    # Li_3(z) (trilogarithm)
li4(1.0 + 1.0im)    # Li_4(z)
li5(1.0 + 1.0im)    # Li_5(z)
li6(1.0 + 1.0im)    # Li_6(z)
li(10, 1.0 + 1.0im) # Li_n(z) for all integers n (here: n = 10)"><pre><span class="pl-k">using</span> PolyLog

<span class="pl-c"><span class="pl-c">#</span> real polylogarithms for real arguments</span>
<span class="pl-c1">reli1</span>(<span class="pl-c1">1.0</span>)          <span class="pl-c"><span class="pl-c">#</span> Re[Li_1(x)]</span>
<span class="pl-c1">reli2</span>(<span class="pl-c1">1.0</span>)          <span class="pl-c"><span class="pl-c">#</span> Re[Li_2(x)] (dilogarithm)</span>
<span class="pl-c1">reli3</span>(<span class="pl-c1">1.0</span>)          <span class="pl-c"><span class="pl-c">#</span> Re[Li_3(x)] (trilogarithm)</span>
<span class="pl-c1">reli4</span>(<span class="pl-c1">1.0</span>)          <span class="pl-c"><span class="pl-c">#</span> Re[Li_4(x)]</span>
<span class="pl-c1">reli</span>(<span class="pl-c1">10</span>, <span class="pl-c1">1.0</span>)       <span class="pl-c"><span class="pl-c">#</span> Re[Li_n(x)] for all integers n (here: n = 10)</span>

<span class="pl-c"><span class="pl-c">#</span> complex polylogarithms for real or complex arguments</span>
<span class="pl-c1">li0</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_0(z)</span>
<span class="pl-c1">li1</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_1(z)</span>
<span class="pl-c1">li2</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_2(z) (dilogarithm)</span>
<span class="pl-c1">li3</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_3(z) (trilogarithm)</span>
<span class="pl-c1">li4</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_4(z)</span>
<span class="pl-c1">li5</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_5(z)</span>
<span class="pl-c1">li6</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)    <span class="pl-c"><span class="pl-c">#</span> Li_6(z)</span>
<span class="pl-c1">li</span>(<span class="pl-c1">10</span>, <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>) <span class="pl-c"><span class="pl-c">#</span> Li_n(z) for all integers n (here: n = 10)</span></pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto"><a href="https://docs.juliahub.com/PolyLog/" rel="nofollow">https://docs.juliahub.com/PolyLog/</a></p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">The implementation of the real dilogarithm is an adaptation of
[<a href="https://arxiv.org/abs/2201.01678" rel="nofollow">arXiv:2201.01678</a>].</p>
<p dir="auto">The implementation of the complex dilogarithm has been inspired by the
implementation in <a href="https://spheno.hepforge.org" rel="nofollow">SPheno</a> and has been
translated to Julia.</p>
<p dir="auto">The implementation of the general n-th order polylogarithm is an
adaptation of [<a href="https://arxiv.org/abs/2010.09860" rel="nofollow">arXiv:2010.09860</a>].</p>
<h2 dir="auto"><a id="user-content-copying" class="anchor" aria-hidden="true" href="#copying"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copying</h2>
<p dir="auto">PolyLog.jl is licenced under the MIT License.</p>
<h2 dir="auto"><a id="user-content-links" class="anchor" aria-hidden="true" href="#links"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Links</h2>
<p dir="auto">Refer to the package
<a href="https://github.com/mroughan/Polylogarithms.jl">Polylogarithms.jl</a> for
a Julia implementation of polylogarithms of arbitrary complex order.</p>
</article></div>