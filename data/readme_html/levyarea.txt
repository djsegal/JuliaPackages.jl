<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-levyareajl" class="anchor" aria-hidden="true" href="#levyareajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LevyArea.jl</h1>
<p dir="auto"><em>Iterated Stochastic Integrals in Julia</em></p>
<p dir="auto"><a href="https://stochastics-uni-luebeck.github.io/LevyArea.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://stochastics-uni-luebeck.github.io/LevyArea.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/stochastics-uni-luebeck/LevyArea.jl/actions"><img src="https://github.com/stochastics-uni-luebeck/LevyArea.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.5883748" rel="nofollow"><img src="https://camo.githubusercontent.com/ba73d812a1afac968385013832036742b5616cf04bdad66926a9363cd1bb2e5e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f444f492d31302e353238312f7a656e6f646f2e353838333734382d626c75652e737667" alt="DOI" data-canonical-src="https://img.shields.io/badge/DOI-10.5281/zenodo.5883748-blue.svg" style="max-width: 100%;"></a> 
<a href="https://arxiv.org/abs/2201.08424" rel="nofollow"><img src="https://camo.githubusercontent.com/e255417683a40488f46ea0c7fbf70cf7c69ec1f8614d89ce1907969d3dbe7850/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323230312e30383432342d626c75652e737667" alt="arXiv" data-canonical-src="https://img.shields.io/badge/arXiv-2201.08424-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements state-of-the-art methods for the simulation of iterated stochastic integrals.
These appear e.g. in higher order algorithms for the solution of stochastic (partial) differential equations.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package can be installed from the Julia package manager (type <kbd>]</kbd>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add LevyArea"><pre>pkg<span class="pl-k">&gt;</span> add LevyArea</pre></div>
<h2 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage Example</h2>
<p dir="auto">Load the package and generate a Wiener increment:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using LevyArea
julia&gt; m = 5; # dimension of Wiener process
julia&gt; h = 0.01; # step size or length of time interval
julia&gt; err = 0.05; # error bound
julia&gt; W = sqrt(h) * randn(m); # increment of Wiener process"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using LevyArea
julia&gt; m = 5; # dimension of Wiener process
julia&gt; h = 0.01; # step size or length of time interval
julia&gt; err = 0.05; # error bound
julia&gt; W = sqrt(h) * randn(m); # increment of Wiener process
</code></pre></div>
<p dir="auto">Here, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$W$</math-renderer> is the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$m$</math-renderer>-dimensional vector of increments of the driving
Wiener process on some time interval of length <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$h$</math-renderer>.</p>
<p dir="auto">The default call uses h^(3/2) as the precision and chooses the best algorithm automatically:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; II = iterated_integrals(W,h)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; II = iterated_integrals(W,h)
</code></pre></div>
<p dir="auto">If not stated otherwise, the default error criterion is the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$\max,L^2$</math-renderer>-error
and the function returns the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$m \times m$</math-renderer> matrix <code>II</code> containing a realisation
of the approximate iterated stochastic integrals that correspond
to the given increment <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$W$</math-renderer>.</p>
<p dir="auto">The desired precision can be optionally provided
using a third positional argument:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; II = iterated_integrals(W,h,err)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; II = iterated_integrals(W,h,err)
</code></pre></div>
<p dir="auto">Again, the software package automatically chooses the optimal
algorithm.</p>
<p dir="auto">To determine which algorithm is chosen by the package without simulating any iterated
stochastic integrals yet, the function <code>optimal_algorithm</code> can
be used. The arguments to this function are the dimension of the Wiener
process, the step size and the desired precision:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; alg = optimal_algorithm(m,h,err); # output: Fourier()"><pre lang="julia-repl" class="notranslate"><code>julia&gt; alg = optimal_algorithm(m,h,err); # output: Fourier()
</code></pre></div>
<p dir="auto">It is also possible to choose the algorithm directly using the
keyword argument <code>alg</code>. The value can be one of
<code>Fourier()</code>, <code>Milstein()</code>, <code>Wiktorsson()</code> and <code>MronRoe()</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; II = iterated_integrals(W,h; alg=Milstein())"><pre lang="julia-repl" class="notranslate"><code>julia&gt; II = iterated_integrals(W,h; alg=Milstein())
</code></pre></div>
<p dir="auto">As the norm for the considered error, e.g., the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$\max,L^2$</math-renderer>- and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$\mathrm{F},L^2$</math-renderer>-norm
can be selected using a keyword argument. The corresponding
values are <code>MaxL2()</code> and <code>FrobeniusL2()</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; II = iterated_integrals(W,h,err; error_norm=FrobeniusL2())"><pre lang="julia-repl" class="notranslate"><code>julia&gt; II = iterated_integrals(W,h,err; error_norm=FrobeniusL2())
</code></pre></div>
<p dir="auto">If iterated stochastic integrals for some <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$Q$</math-renderer>-Wiener process need to
be simulated, like for the numerical simulation of solutions to SPDEs,
then the increment of the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$Q$</math-renderer>-Wiener process together with the
square roots of the eigenvalues of the associated covariance
operator have to be provided:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; q = [1/k^2 for k=1:m]; # eigenvalues of cov. operator
julia&gt; QW = sqrt(h) * sqrt.(q) .* randn(m); # Q-Wiener increment
julia&gt; IIQ = iterated_integrals(QW,sqrt.(q),h,err)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; q = [1/k^2 for k=1:m]; # eigenvalues of cov. operator
julia&gt; QW = sqrt(h) * sqrt.(q) .* randn(m); # Q-Wiener increment
julia&gt; IIQ = iterated_integrals(QW,sqrt.(q),h,err)
</code></pre></div>
<p dir="auto">In this case, the function <code>iterated_integrals</code> utilizes a
scaling of the iterated stochastic integrals and also adjusts the error
estimates appropriately such that the error bound holds w.r.t.\ the
iterated stochastic integrals <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$\mathcal{I}^{Q}(h)$</math-renderer> based on the
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$Q$</math-renderer>-Wiener process. Here the error norm defaults to the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23c86899ae27bab742c745a2b8c0cf71">$\mathrm{F},L^2$</math-renderer>-error.</p>
<p dir="auto">Note that all discussed keyword arguments are optional and can be
combined as needed.</p>
<p dir="auto">Additional information can be found, e.g., using the Julia help mode:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ?iterated_integrals
julia&gt; ?optimal_algorithm"><pre lang="julia-repl" class="notranslate"><code>julia&gt; ?iterated_integrals
julia&gt; ?optimal_algorithm
</code></pre></div>
<p dir="auto">or by reading the <a href="https://stochastics-uni-luebeck.github.io/LevyArea.jl/stable/" rel="nofollow">documentation</a>.</p>
<h2 dir="auto">
<a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">Please cite this package and/or the accompanying paper if you found this package useful. Example BibLaTeX code can be found in the <a href="CITATION.bib">CITATION.bib</a> file.</p>
<h2 dir="auto">
<a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<p dir="auto">A Matlab version of this package is also available under <a href="https://github.com/stochastics-uni-luebeck/LevyArea.m">LevyArea.m</a>.</p>
</article></div>