<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Licence</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://LudwigBoess.github.io/SPHtoGrid.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://LudwigBoess.github.io/SPHtoGrid.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/LudwigBoess/SPHtoGrid.jl" rel="nofollow"><img src="https://github.com/LudwigBoess/SPHtoGrid.jl/workflows/Run%20CI%20on%20master/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/LudwigBoess/SPHtoGrid.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fc2dab504978307dab0c7dad70fcf9025ddbc6718ac4ffaf81d8d09fdce7449d/68747470733a2f2f636f6465636f762e696f2f67682f4c7564776967426f6573732f535048746f477269642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/gh/LudwigBoess/SPHtoGrid.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/34c33e2f7f61f9b82750baf175f4aa3260f774ead54e160dd013b7d818992096/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e737667" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-orange.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-sphtogridjl" class="anchor" aria-hidden="true" href="#sphtogridjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SPHtoGrid.jl</h1>
<p>This package maps SPH quantities to a cartesian grid.</p>
<p>You can map SPH data to a grid using the function <code>sphMapping</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function sphMapping(Pos, HSML, M, ρ, Bin_Quant,
                    Weights=ρ;
                    param::mappingParameters,
                    kernel::SPHKernel [,
                    show_progress::Bool=true,
                    parallel::Bool=false,
                    filter_particles::Bool=true,
                    dimensions::Int=2])


    [...]

end
"><pre><span class="pl-k">function</span> <span class="pl-en">sphMapping</span>(Pos, HSML, M, ρ, Bin_Quant,
                    Weights<span class="pl-k">=</span>ρ;
                    param<span class="pl-k">::</span><span class="pl-c1">mappingParameters</span>,
                    kernel<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span> [,
                    show_progress<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>,
                    parallel<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>,
                    filter_particles<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>,
                    dimensions<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">2</span>])


    [<span class="pl-k">...</span>]

<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-define-parameters-for-mapping" class="anchor" aria-hidden="true" href="#define-parameters-for-mapping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define parameters for mapping</h2>
<p>To map the data you need to define the mapping parameters via the <code>mappingParameters</code> object.
One way to set this up is by defining the limits of the map as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="par = mappingParameters(xlim=[xmin, xmax],
                        ylim=[ymin, ymax],
                        zlim=[zmin, zmax],
                        Npixels=200)
"><pre>par <span class="pl-k">=</span> <span class="pl-c1">mappingParameters</span>(xlim<span class="pl-k">=</span>[xmin, xmax],
                        ylim<span class="pl-k">=</span>[ymin, ymax],
                        zlim<span class="pl-k">=</span>[zmin, zmax],
                        Npixels<span class="pl-k">=</span><span class="pl-c1">200</span>)</pre></div>
<p>or give a center position and the size in each direction</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="par = mappingParameters(center=[x0, y0, z0], 
                        x_size=x_size, 
                        y_size=y_size,
                        z_size=z_size,
                        Npixels=200)
"><pre>par <span class="pl-k">=</span> <span class="pl-c1">mappingParameters</span>(center<span class="pl-k">=</span>[x0, y0, z0], 
                        x_size<span class="pl-k">=</span>x_size, 
                        y_size<span class="pl-k">=</span>y_size,
                        z_size<span class="pl-k">=</span>z_size,
                        Npixels<span class="pl-k">=</span><span class="pl-c1">200</span>)</pre></div>
<p>Instead of Npixels you can also give the keyword argument <code>pixelSideLength</code> if you prefer to define your image that way.</p>
<p>If you are mapping a periodic box you also can give the keyword <code>boxsize</code> to enable periodic mapping.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="par = mappingParameters(center=[x0, y0, z0], 
                        x_size=x_size, 
                        y_size=y_size,
                        z_size=z_size,
                        boxsize=boxsize,
                        Npixels=200)
"><pre>par <span class="pl-k">=</span> <span class="pl-c1">mappingParameters</span>(center<span class="pl-k">=</span>[x0, y0, z0], 
                        x_size<span class="pl-k">=</span>x_size, 
                        y_size<span class="pl-k">=</span>y_size,
                        z_size<span class="pl-k">=</span>z_size,
                        boxsize<span class="pl-k">=</span>boxsize,
                        Npixels<span class="pl-k">=</span><span class="pl-c1">200</span>)</pre></div>
<h2><a id="user-content-select-kernel" class="anchor" aria-hidden="true" href="#select-kernel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Select Kernel</h2>
<p>You also need to choose the kernel you used in the simulation. For this you need to install the package <a href="https://github.com/LudwigBoess/SPHKernels.jl">SPHKernels.jl</a>. You can currently use these kernels:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="k = Cubic()
k = Quintic()
k = WendlandC4()
k = WendlandC6()
"><pre>k <span class="pl-k">=</span> <span class="pl-c1">Cubic</span>()
k <span class="pl-k">=</span> <span class="pl-c1">Quintic</span>()
k <span class="pl-k">=</span> <span class="pl-c1">WendlandC4</span>()
k <span class="pl-k">=</span> <span class="pl-c1">WendlandC6</span>()</pre></div>
<p>Please see the SPHKernels <a href="https://ludwigboess.github.io/SPHKernels.jl/stable/" rel="nofollow">docs</a> for more details.</p>
<h2><a id="user-content-mapping" class="anchor" aria-hidden="true" href="#mapping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mapping</h2>
<p>With the setup done you can now map (e.g.) density of your data using the function above as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="image = sphMapping(x, hsml, m, rho, rho, param=par, kernel=k)
"><pre>image <span class="pl-k">=</span> <span class="pl-c1">sphMapping</span>(x, hsml, m, rho, rho, param<span class="pl-k">=</span>par, kernel<span class="pl-k">=</span>k)</pre></div>
<p>Replacing the second <code>rho</code> with any other quantity would map that quantity of course.
Please note: This function doesn't do any unit conversion for you, so you need to convert to the desired units beforehand. You can do this e.g. with <a href="https://github.com/LudwigBoess/GadgetUnits.jl">GadgetUnits.jl</a>.</p>
<p>Image now contains a 2D array with the binned data and can easily be plotted with <code>imshow()</code> from any plotting package of your choosing.</p>
<p>The keyword <code>parallel = true</code> causes the run to use multiple processors. For this you need to start julia with <code>julia -p &lt;N&gt;</code> where <code>&lt;N&gt;</code> is the number of processors in your machine, or define</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Distributed
addprocs(8)

# now you can load SPHtoGrid
using SPHtoGrid
"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">8</span>)

<span class="pl-c"><span class="pl-c">#</span> now you can load SPHtoGrid</span>
<span class="pl-k">using</span> SPHtoGrid</pre></div>
<h3><a id="user-content-conserved-quantities" class="anchor" aria-hidden="true" href="#conserved-quantities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conserved quantities</h3>
<p>With the latest release you can map the particles to a grid while also conserving the particle volume, following the algorithm described in <a href="https://ui.adsabs.harvard.edu/link_gateway/2005MNRAS.363...29D/doi:10.1111/j.1365-2966.2005.09452.x" rel="nofollow">Dolag et. al. 2006</a>.</p>
<h2><a id="user-content-weight-functions" class="anchor" aria-hidden="true" href="#weight-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Weight functions</h2>
<p>With the mapping you may decide to use a specivic weighting function. For this you can pass the optional variable <code>Weights</code> in <code>sphMapping</code>.</p>
<p>You can either use your own weight functions or use one of the built-in ones:</p>
<p><code>part_weight_one</code> just returns an <code>Array</code> of ones.</p>
<p><code>part_weight_physical</code> converts from pixel- to physical units.</p>
<p><code>part_weight_emission</code> weights the contribution due to density and temperature of the particle.</p>
<p><code>part_weight_spectroscopic</code> gives spectroscopic weighting, see Mazotta+ 04.</p>
<p><code>part_weight_XrayBand</code> weights the particle due to its Xray emission in the defined energy band.</p>
</article></div>