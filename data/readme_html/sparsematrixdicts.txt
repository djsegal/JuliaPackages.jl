<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sparsematrixdicts" class="anchor" aria-hidden="true" href="#sparsematrixdicts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SparseMatrixDicts</h1>
<p><a href="https://travis-ci.org/masuday/SparseMatrixDicts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0fc5ae57f1c3d0f05981fa540ec4274a6f8e54c1/68747470733a2f2f7472617669732d63692e6f72672f6d6173756461792f5370617273654d617472697844696374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/masuday/SparseMatrixDicts.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>This package creates a sparse matrix as Dictionary.
You can convert the dictionary to a SparseCSC matrix or a dense matrix.
It is useful when the nonzero elements randomly occur and you can not prepare the sparse storage before you see the actual elements.</p>
<p>The constructor of the matrix is <code>SparseMatrixDict{Tv,Ti}(m,n)</code> where <code>Tv</code> is the type of element (default:<code>Float64</code>), <code>Ti</code> is the type of index (default:<code>Int</code>), <code>m</code> is the number of rows, and <code>n</code> is the number of columns.
A pair of indices (row <em>i</em> and column <em>j</em>) will be treated as a tuple <code>(i,j)</code> and it is the key of dictionary; <code>Dict{Tuple{Ti,Ti},Tv}</code>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<pre><code>using SparseMatrixDicts
n = 5
A = SparseMatrixDict(n,n)  # default={Float64,Int}

# assignment; similar to regular matrices
A[1,1] = 2.0
A[2,5] = 1.0

# convert to dense matrix
dA = Matrix(A)

# convert to sparse matrix CSC
sA = SparseMatrixCSC(A)

# make a symmetric sparse matrix
symA = Symmetric(SparseMatrixCSC(A),:U)  # :U for upper
</code></pre>
</article></div>