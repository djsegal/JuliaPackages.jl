<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-codeinfotoolsjl" class="anchor" aria-hidden="true" href="#codeinfotoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CodeInfoTools.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
<th align="center"><strong>Documentation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaCompilerPlugins/CodeInfoTools.jl/actions"><img src="https://github.com/JuliaCompilerPlugins/CodeInfoTools.jl/workflows/CI/badge.svg?branch=master" alt="" style="max-width: 100%;"></a> <a href="https://github.com/JuliaCompilerPlugins/CodeInfoTools.jl/actions"><img src="https://github.com/JuliaCompilerPlugins/CodeInfoTools.jl/workflows/JuliaNightly/badge.svg?branch=master" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/github/JuliaCompilerPlugins/CodeInfoTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5e4fb197d31b79f8c52f393f9872d7ed6714fb206c2ea950cdd3fe7017843ff3/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961436f6d70696c6572506c7567696e732f436f6465496e666f546f6f6c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://codecov.io/github/JuliaCompilerPlugins/CodeInfoTools.jl/badge.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://JuliaCompilerPlugins.github.io/CodeInfoTools.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add CodeInfoTools"><pre class="notranslate"><code>] add CodeInfoTools
</code></pre></div>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span>: A curated collection of tools for the discerning <code>Core.CodeInfo</code> connoisseur.</p>
<p dir="auto">The architecture of this package is based closely on the <a href="https://github.com/FluxML/IRTools.jl/blob/1f3f43be654a41d0db154fd16b31fdf40f30748c/src/ir/ir.jl#L814-L973">Pipe construct in IRTools.jl</a>. Many (if not all) of the same idioms apply.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">Working with <code>Core.CodeInfo</code> is often not fun. E.g. when examining the untyped lowered form of the <a href="https://en.wikipedia.org/wiki/Rosenbrock_function" rel="nofollow">Rosenbrock function</a></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="CodeInfo(
    @ /Users/mccoybecker/dev/CodeInfoTools.jl/examples/simple.jl:7 within `rosenbrock'
1 ─       a = 1.0
│         b = 100.0
│         result = 0.0
│   %4  = (length)(x)
│   %5  = (-)(%4, 1)
│   %6  = (Colon())(1, %5)
│         @_3 = (iterate)(%6)
│   %8  = (===)(@_3, nothing)
│   %9  = (Core.Intrinsics.not_int)(%8)
└──       goto #4 if not %9
2 ┄ %11 = @_3
│         i = (getfield)(%11, 1)
│   %13 = (getfield)(%11, 2)
│                .
│                .
│                .
│
│   %36 = (===)(@_3, nothing)
│   %37 = (Core.Intrinsics.not_int)(%36)
└──       goto #4 if not %37
3 ─       goto #2
4 ┄       return result
)"><pre class="notranslate"><code>CodeInfo(
    @ /Users/mccoybecker/dev/CodeInfoTools.jl/examples/simple.jl:7 within `rosenbrock'
1 ─       a = 1.0
│         b = 100.0
│         result = 0.0
│   %4  = (length)(x)
│   %5  = (-)(%4, 1)
│   %6  = (Colon())(1, %5)
│         @_3 = (iterate)(%6)
│   %8  = (===)(@_3, nothing)
│   %9  = (Core.Intrinsics.not_int)(%8)
└──       goto #4 if not %9
2 ┄ %11 = @_3
│         i = (getfield)(%11, 1)
│   %13 = (getfield)(%11, 2)
│                .
│                .
│                .
│
│   %36 = (===)(@_3, nothing)
│   %37 = (Core.Intrinsics.not_int)(%36)
└──       goto #4 if not %37
3 ─       goto #2
4 ┄       return result
)
</code></pre></div>
<p dir="auto">Do you ever wonder -- is there another (perhaps, any) way to work with this object? A <code>Builder</code> perhaps? Where I might load my <code>CodeInfo</code> into -- iterate, make local changes, and produce a new copy?</p>
<h2 dir="auto"><a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contribution</h2>
<p dir="auto"><code>CodeInfoTools.jl</code> provides a <code>Builder</code> abstraction which allows you to safely iterate over and manipulate <code>Core.CodeInfo</code>. It also provides more advanced functionality for creating and evaluating <code>Core.CodeInfo</code> -- <a href="https://juliacompilerplugins.github.io/CodeInfoTools.jl/dev/#Evaluation" rel="nofollow">which is a bit on the experimental side.</a></p>
<p dir="auto">How might you use this in practice?</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CodeInfoTools

function f(x, y)
    z = 10
    if z &gt; 10
        n = 10
        return x + y
    else
        return x + y + z
    end
end

src = code_info(f, Int, Int)

function transform(src)
    b = CodeInfoTools.Builder(src)
    for (v, st) in b
        st isa Expr || continue
        st.head == :call || continue
        st.args[1] == Base.:(+) || continue
        b[v] = Expr(:call, Base.:(*), st.args[2:end]...)
    end
    return finish(b)
end

display(src)
display(transform(src))"><pre><span class="pl-k">using</span> CodeInfoTools

<span class="pl-k">function</span> <span class="pl-en">f</span>(x, y)
    z <span class="pl-k">=</span> <span class="pl-c1">10</span>
    <span class="pl-k">if</span> z <span class="pl-k">&gt;</span> <span class="pl-c1">10</span>
        n <span class="pl-k">=</span> <span class="pl-c1">10</span>
        <span class="pl-k">return</span> x <span class="pl-k">+</span> y
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> x <span class="pl-k">+</span> y <span class="pl-k">+</span> z
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

src <span class="pl-k">=</span> <span class="pl-c1">code_info</span>(f, Int, Int)

<span class="pl-k">function</span> <span class="pl-en">transform</span>(src)
    b <span class="pl-k">=</span> CodeInfoTools<span class="pl-k">.</span><span class="pl-c1">Builder</span>(src)
    <span class="pl-k">for</span> (v, st) <span class="pl-k">in</span> b
        st <span class="pl-k">isa</span> Expr <span class="pl-k">||</span> <span class="pl-k">continue</span>
        st<span class="pl-k">.</span>head <span class="pl-k">==</span> <span class="pl-c1">:call</span> <span class="pl-k">||</span> <span class="pl-k">continue</span>
        st<span class="pl-k">.</span>args[<span class="pl-c1">1</span>] <span class="pl-k">==</span> Base.:(<span class="pl-k">+</span>) <span class="pl-k">||</span> <span class="pl-k">continue</span>
        b[v] <span class="pl-k">=</span> <span class="pl-c1">Expr</span>(<span class="pl-c1">:call</span>, Base.:(<span class="pl-k">*</span>), st<span class="pl-k">.</span>args[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">.</span><span class="pl-k">..</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">finish</span>(b)
<span class="pl-k">end</span>

<span class="pl-c1">display</span>(src)
<span class="pl-c1">display</span>(<span class="pl-c1">transform</span>(src))</pre></div>
<p dir="auto">Here, we've lowered a function directly to a <code>Core.CodeInfo</code> instance and created a <code>Builder</code> instance <code>b</code>. You can now safely iterate over this object, perform local changes, press <code>finish</code> and - <em>(la di da!)</em> - out comes a new <code>Core.CodeInfo</code> with your changes fresh.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Before:
CodeInfo(
1 ─      Core.NewvarNode(:(n))
│        z = 10
│   %3 = z &gt; 10
└──      goto #3 if not %3
2 ─      n = 10
│   %6 = x + y
└──      return %6
3 ─ %8 = x + y + z
└──      return %8
)

# After:
CodeInfo(
1 ─      Core.NewvarNode(:(n))
│        z = 10
│   %3 = (&gt;)(z, 10)
└──      goto #3 if not %3
2 ─      n = 10
│   %6 = (*)(x, y)
└──      return %6
3 ─ %8 = (*)(x, y, z)
└──      return %8
)"><pre class="notranslate"><code># Before:
CodeInfo(
1 ─      Core.NewvarNode(:(n))
│        z = 10
│   %3 = z &gt; 10
└──      goto #3 if not %3
2 ─      n = 10
│   %6 = x + y
└──      return %6
3 ─ %8 = x + y + z
└──      return %8
)

# After:
CodeInfo(
1 ─      Core.NewvarNode(:(n))
│        z = 10
│   %3 = (&gt;)(z, 10)
└──      goto #3 if not %3
2 ─      n = 10
│   %6 = (*)(x, y)
└──      return %6
3 ─ %8 = (*)(x, y, z)
└──      return %8
)
</code></pre></div>
</article></div>