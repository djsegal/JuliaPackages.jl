<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-using-bee-and-beeencoderjl-️-to-solve-sat-problems" class="anchor" aria-hidden="true" href="#using-bee-and-beeencoderjl-️-to-solve-sat-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using <code>BEE</code> and <code>BeeEncoder.jl</code> <g-emoji class="g-emoji" alias="bee" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png">🐝️</g-emoji> to solve SAT problems</h1>
<p><a href="https://travis-ci.org/newptcai/BeeEncoder.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dedfab9a26c2928cd385237f727a23148aa46c2e/68747470733a2f2f7472617669732d63692e6f72672f6e657770746361692f426565456e636f6465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/newptcai/BeeEncoder.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/3ccf4c50a1576b0dd30b286717451fa56b783512/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width:100%;"></a></p>
<p><em>This package was originally named <a href="https://github.com/newptcai/BEE.jl"><code>BEE.jl</code></a>.  The name was changed so it can be registered in Julia's package repository.</em></p>
<h2><a id="user-content-the-beauty-of-brute-force-️" class="anchor" aria-hidden="true" href="#the-beauty-of-brute-force-️"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The beauty of brute force <g-emoji class="g-emoji" alias="fist_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f91c.png">🤜️</g-emoji></h2>
<p align="center">
<a target="_blank" rel="noopener noreferrer" href="images/egg-power.jpg"><img src="images/egg-power.jpg" alt="Brute force" width="450" style="max-width:100%;"></a>
</p>
<p>Modern <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem" rel="nofollow">SAT</a> solver are often capable
of handling problems with <em>HUGE</em> size. They have been successfully applied to many combinatorics
problems. Communications ACM has an article titled <a href="https://cacm.acm.org/magazines/2017/8/219606-the-science-of-brute-force/fulltext" rel="nofollow">The Science of Brute
Force</a> on how the
<a href="https://www.cs.utexas.edu/~marijn/publications/ptn.pdf" rel="nofollow">Boolean Pythagorean Triples problem</a> was
solved with an SAT solver.  Another well-known example is <a href="https://www.quantamagazine.org/terence-taos-answer-to-the-erdos-discrepancy-problem-20151001/" rel="nofollow">Paul Erdős Discrepancy
Conjecture</a>,
which was <a href="https://arxiv.org/pdf/1402.2184.pdf" rel="nofollow">initially attacked with the help of computer</a>.</p>
<p>Thus it is perhaps beneficial <g-emoji class="g-emoji" alias="broccoli" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f966.png">🥦️</g-emoji> for anyone who is interested in combinatorics <g-emoji class="g-emoji" alias="mahjong" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f004.png">🀄️</g-emoji> to learn how to
harness the beautiful brute force <g-emoji class="g-emoji" alias="hammer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png">🔨</g-emoji> of SAT solvers. Doing experiments with SAT solver can search much
bigger space than pencil and paper.  New patterns can be spotted <g-emoji class="g-emoji" alias="eye" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f441.png">👁️</g-emoji>. Conjectures can be proved or
disapproved <g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png">🎉️</g-emoji>.</p>
<p>However, combinatorial problems are often difficult to encode into CNF formulas, which can only
contain boolean variables. So integers must be represented by such boolean variables with some
encoding scheme. Doing so manually can be very tedious <g-emoji class="g-emoji" alias="expressionless" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png">😑️</g-emoji>.</p>
<p>Of course you can use solvers which go beyond CNF. For example Microsoft has a
<a href="https://github.com/Z3Prover/z3"><code>Z3</code></a> theorem proved. You can solve many more types of problems
with it. But if the size of your problem matters, pure CNF solver is still way much faster <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀️</g-emoji>.</p>
<h2><a id="user-content-what-is-bee-️" class="anchor" aria-hidden="true" href="#what-is-bee-️"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is <code>BEE</code> <g-emoji class="g-emoji" alias="bee" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png">🐝️</g-emoji></h2>
<p>One project that tries to ease using SAT solvers is <a href="http://amit.metodi.me/research/bee/" rel="nofollow"><code>BEE</code> (Ben-Gurion
University Equi-propagation Encoder)</a>, which</p>
<blockquote>
<p>... is a
compiler which enables to encode finite domain constraint problems to CNF. During compilation, <code>BEE</code>
applies optimizations which include equi-propagation (see paper), partial-evaluation, and a careful
selection of encoding techniques per constraint, depending on various parameters of the constraint.</p>
</blockquote>
<p>From my experiments, <code>BEE</code> has a good balance of expressive power and performance.</p>
<h2><a id="user-content-many-ways-to-use-bee-️" class="anchor" aria-hidden="true" href="#many-ways-to-use-bee-️"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Many ways to use <code>BEE</code> <g-emoji class="g-emoji" alias="thinking" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png">🤔️</g-emoji></h2>
<p><code>BEE</code> is written in <a href="https://en.wikipedia.org/wiki/Prolog" rel="nofollow"><code>Prolog</code></a>. So you either have to learn
<code>Prolog</code>, or you can</p>
<ol>
<li>encode your problem in a syntax defined by <code>BEE</code>,</li>
<li>use a program <code>BumbleBEE</code> that comes with the package to solve it directly with <code>BEE</code></li>
<li>or use <code>BumbleBEE</code> to compile your problem to a <a href="https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html" rel="nofollow">DIMACS CNF file</a>, which can be solved by the numerous
SAT solvers out there.</li>
</ol>
<p>My choice is to use <a href="https://julialang.org/" rel="nofollow">Julia</a> to convert combinatorics problems into
<code>BumbleBEE</code> code and this is why I wrote the package <a href="https://github.com/newptcai/BeeEncoder.jl"><code>BeeEncoder.jl</code></a>.</p>
<p>Here's my workflow for smaller problems</p>
<div class="highlight highlight-source-shell"><pre>Julia code --(BeeEncoder.jl)--<span class="pl-k">&gt;</span> BEE code --(BumbleBEE)--<span class="pl-k">&gt;</span> solution/unsatisfiable</pre></div>
<p>When the problem is getting bigger, I try</p>
<div class="highlight highlight-source-shell"><pre>Julia code --(BeeEncoder.jl)--<span class="pl-k">&gt;</span> BEE code -- (BumbleBEE)--<span class="pl-k">&gt;</span> CNF --(SAT Solver)
                                                               <span class="pl-k">|</span>
    +-------------------------+--------------------------------+
    <span class="pl-k">|</span>                         <span class="pl-k">|</span>
    v                         v
unsatisfiable          CNF solution --(BumbleSol)--<span class="pl-k">&gt;</span> BEE solution</pre></div>
<p>In the rest of this article, I will mostly describe how to use <code>BEE</code> <g-emoji class="g-emoji" alias="grinning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png">😀️</g-emoji>. You do not need to know any
Julia to understand this part. I will only briefly mention what <code>BeeEncoder.jl</code> does by the
end.</p>
<h2><a id="user-content-bee-and-sat-solver-for-beginners" class="anchor" aria-hidden="true" href="#bee-and-sat-solver-for-beginners"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>BEE</code> and SAT solver for beginners</h2>
<h3><a id="user-content-docker-image" class="anchor" aria-hidden="true" href="#docker-image"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Docker image</h3>
<p>The easiest way to try <code>BEE</code> and <code>BeeEncoder.jl</code> is to use this <a href="https://hub.docker.com/r/newptcai/beeencoder" rel="nofollow">docker
image</a> with everything you need.
If you have <a href="https://www.docker.com/" rel="nofollow">docker</a> install, simply type in a terminal</p>
<div class="highlight highlight-source-shell"><pre>docker pull newptcai/beeencoder
docker run -it newptcai/beeencoder</pre></div>
<p>This will download and start a bash shell within the image.  You will find <code>BEE</code> install in the
folder <code>/bee</code>.  To check it works, run</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> bee <span class="pl-k">&amp;&amp;</span> ./BumbleBEE beeSolver/bExamples/ex_sat.bee</pre></div>
<p><code>BeeEncoder.jl</code> is also included in this image. You can start Julia REPL and use it immediately.</p>
<p>The drawback of this method is that the image is quite large (about 600MB). This is unavoidable if we
use docker. Julia itself needs about 400MB, and Prolog costs another 100MB. <g-emoji class="g-emoji" alias="expressionless" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png">😑️</g-emoji></p>
<h3><a id="user-content-compiling-and-running-bee" class="anchor" aria-hidden="true" href="#compiling-and-running-bee"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compiling and running <code>BEE</code></h3>
<p>I ran into some difficulties when I tried to compile <a href="http://amit.metodi.me/research/bee/bee20170615.zip" rel="nofollow">2017 version of
<code>BEE</code></a>. Here is how to do it correctly on
Ubuntu. Other Linux system should work in similar ways.</p>
<p>First install <a href="https://www.swi-prolog.org/build/PPA.txt" rel="nofollow">SWI-Prolog</a>. You can do this in a terminal
by typing</p>
<div class="highlight highlight-source-shell"><pre>sudo apt-add-repository ppa:swi-prolog/stable
sudo apt-get update
sudo apt-get install swi-prolog-nox</pre></div>
<p>Download <code>BEE</code> using the link above and unzip it somewhere on your computer.
In a terminal, change directory to</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> /path-to-downloaded-file/bee20170615/satsolver_src</pre></div>
<p>Compile sat solvers coming with <code>BEE</code> by</p>
<div class="highlight highlight-source-shell"><pre>env CPATH=<span class="pl-s"><span class="pl-pds">"</span>/usr/lib/swi-prolog/include/<span class="pl-pds">"</span></span> make satSolvers</pre></div>
<p>If compilation is successful, you should be able to excute</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> ../satsolver <span class="pl-k">&amp;&amp;</span> ls</pre></div>
<p>and see the following output</p>
<div class="highlight highlight-source-shell"><pre>pl-glucose4.so  pl-glucose.so  pl-minisat.so  satsolver.pl</pre></div>
<p>Next we compile <code>BumbleBEE</code> by</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> ../beeSolver/ <span class="pl-k">&amp;&amp;</span> make</pre></div>
<p>If you succeed, you will be able to find <code>BumbleBEE</code> and <code>BumbleSol</code> one directory above by</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> .. <span class="pl-k">&amp;&amp;</span> ls</pre></div>
<p>And you should see these files</p>
<div class="highlight highlight-source-shell"><pre>bApplications  beeSolver  BumbleSol        pl-satsolver.so  satsolver
beeCompiler    BumbleBEE  Constraints.pdf  README.txt       satsolver_src</pre></div>
<h3><a id="user-content-using-bumblebee" class="anchor" aria-hidden="true" href="#using-bumblebee"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using <code>BumbleBEE</code></h3>
<p>We can now give <code>BEE</code> a try <g-emoji class="g-emoji" alias="grin" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png">😁️</g-emoji>.  You can find examples of <code>BumbleBEE</code> problems in the folder
<code>beeSolver/bExamples</code>. A very simple one is the following
<code>ex_sat.bee</code>.</p>
<div class="highlight highlight-source-shell"><pre>new_int(x,0,5)
new_int(y,-4,9)
new_int(z,-5,10)
int_plus(x,y,z)
new_int(w,0,10)
new_bool(x1)
new_bool(x2)
new_bool(x3)
new_bool(x4)
bool_eq(x1,-x2)
bool_eq(x2,true)
bool_array_sum_eq([-x1,x2,-x3,x4],w)
solve satisfy</pre></div>
<p>It defines 4 integer variables <code>x, y, z, w</code> in various range and 4 boolean variables <code>x1, x2, x3, x4</code>.
Then it adds various constraints on these variables, for example, <code>x+y==z</code> and <code>x1==x2</code>. For the
syntax, check the <a href="http://amit.metodi.me/research/bee/Constraints.pdf" rel="nofollow">document</a>.</p>
<h3><a id="user-content-solving-problem-directly" class="anchor" aria-hidden="true" href="#solving-problem-directly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solving problem directly</h3>
<p>We can solve problem directly with <code>BumbleBEE</code> by</p>
<div class="highlight highlight-source-shell"><pre>./BumbleBEE beeSolver/bExamples/ex_sat.bee</pre></div>
<p>And the solution should be</p>
<div class="highlight highlight-source-shell"><pre>(base) xing@MAT-WL-xinca341:bee20170615$ ./BumbleBEE beeSolver/bExamples/ex_sat.bee
%  <span class="pl-cce">\'</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>/ //      BumbleBEE       / <span class="pl-cce">\_</span>/ <span class="pl-cce">\_</span>/ \
% -(<span class="pl-k">|||</span>)(<span class="pl-s"><span class="pl-pds">'</span>)     (15/06/2017)     \_/ \_/ \_/</span>
<span class="pl-s">%   ^^^        by Amit Metodi    / \_/ \_/ \</span>
<span class="pl-s">%</span>
<span class="pl-s">%  reading BEE file ... done</span>
<span class="pl-s">%  load pl-satSolver ... % SWI-Prolog interface to Glucose v4.0 ... OK</span>
<span class="pl-s">%  encoding BEE model ... done</span>
<span class="pl-s">%  solving CNF (satisfy) ...</span>
<span class="pl-s">x = 0</span>
<span class="pl-s">y = -4</span>
<span class="pl-s">z = -4</span>
<span class="pl-s">w = 3</span>
<span class="pl-s">x1 = false</span>
<span class="pl-s">x2 = true</span>
<span class="pl-s">x3 = false</span>
<span class="pl-s">x4 = false</span>
<span class="pl-s">----------</span></pre></div>
<p>You can check that all the constraints are satisfied.</p>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji>  But here is a caveat -- you must run <code>BumbleBEE</code> with the current
directory <code>PWD</code> set to be where the file
<code>BumbleBEE</code> is. You cannot use any other directory <g-emoji class="g-emoji" alias="facepalm" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f926.png">🤦</g-emoji>. For example if you try</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> .. <span class="pl-k">&amp;&amp;</span> bee20170615/BumbleBEE bee20170615/beeSolver/bExamples/ex_sat.bee</pre></div>
<p>You will only get error messages.</p>
<h3><a id="user-content-convert-the-problem-to-cnf" class="anchor" aria-hidden="true" href="#convert-the-problem-to-cnf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Convert the problem to CNF</h3>
<p>As I mentioned earlier, you can also compile your problem into CNF DIMACS format. For example</p>
<div class="highlight highlight-source-shell"><pre>./BumbleBEE beeSolver/bExamples/ex_sat.bee -dimacs ./ex_sat.cnf ./ex_sat.map</pre></div>
<p>will create two files <code>ex_sat.cnf</code> and <code>ex_sat.map</code>. The top few lines of
<code>ex_sat.cnf</code> looks like this</p>
<div class="highlight highlight-source-shell"><pre>c DIMACS File generated by BumbleBEE
p cnf 37 189
1 0
-6 5 0
-5 4 0
-4 3 0
-3 2 0
-19 18 0
-18 17 0
-17 16 0</pre></div>
<p>A little bit explanation for the first 4 lines</p>
<ol>
<li>A line with <code>c</code> at the beginning is a comment.</li>
<li>The line with <code>p</code>  says that this is a CNF formula with <code>37</code> variables and <code>189</code> clauses.</li>
<li><code>1 0</code> is a clause which says that variable <code>1</code> must be true. <code>0</code> is symbol to end a
clause.</li>
<li><code>-6 5</code> means either the negate of variable <code>6</code>  is true or variable <code>5</code> is true ...</li>
</ol>
<p>As you can see, with integers are needed, even a toy problem needs a large numbers of
boolean variables. This is why efficient coding of integers are critical. And this is where <code>BEE</code>
helps.</p>
<p>Now you can try your favourite SAT solver on the problem. I often use
<a href="https://www.msoos.org/cryptominisat5/" rel="nofollow"><code>CryptoMiniSat</code></a>. Assuming that you have it on your <code>PATH</code>, you
can now use</p>
<div class="highlight highlight-source-shell"><pre>cryptominisat5 ex_sat.cnf <span class="pl-k">&gt;</span> ex_sat.sol</pre></div>
<p>to solve the problem and save the solution into a file <code>ex_sat.sol</code>. Most of <code>ex_sat.sol</code> are
comments except the last 3 lines</p>
<div class="highlight highlight-source-shell"><pre>s SATISFIABLE
v 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22
v -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 34 -35 -36 -37 0</pre></div>
<p>It says the problem is satisfiable and one solution is given. A number in the line starting with an <code>v</code>
means a variables. Without a <code>-</code> sign in front of it, a variable is assigned the value <code>true</code>
otherwise it is assigned <code>false</code>.</p>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji>  To get back to a solution to <code>BEE</code> variables, we use <code>BumbleSol</code>, which is
at the same folder as <code>BumbleBEE</code>. But <code>BumbleSol</code> needs bit help <g-emoji class="g-emoji" alias="expressionless" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png">😑️</g-emoji>. Remove the starting <code>s</code> and <code>v</code>
in the <code>ex_sat.sol</code> to make it like this</p>
<div class="highlight highlight-source-shell"><pre>SATISFIABLE
1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22
-23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 34 -35 -36 -37 0</pre></div>
<p>Then we can run</p>
<div class="highlight highlight-source-shell"><pre>./BumbleSol ex_sat.map ex_sat.sol</pre></div>
<p>and get</p>
<div class="highlight highlight-source-shell"><pre>%  <span class="pl-cce">\'</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>/ //  BumbleBEE Solution Reader  / <span class="pl-cce">\_</span>/ <span class="pl-cce">\_</span>/ \
% -(<span class="pl-k">|||</span>)(<span class="pl-s"><span class="pl-pds">'</span>)         (04/06/2016)        \_/ \_/ \_/</span>
<span class="pl-s">%   ^^^            by Amit Metodi       / \_/ \_/ \</span>
<span class="pl-s">%</span>
<span class="pl-s">%  reading Dimacs solution file ... done</span>
<span class="pl-s">%  reading and decoding BEE map file ...</span>
<span class="pl-s">x = 0</span>
<span class="pl-s">y = -4</span>
<span class="pl-s">z = -4</span>
<span class="pl-s">w = 2</span>
<span class="pl-s">x1 = false</span>
<span class="pl-s">x2 = true</span>
<span class="pl-s">x3 = false</span>
<span class="pl-s">x4 = false</span>
<span class="pl-s">----------</span>
<span class="pl-s">==========</span></pre></div>
<p>That's it! Now you know how to use <code>BEE</code> <g-emoji class="g-emoji" alias="bee" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png">🐝️</g-emoji>! Have fan with your problem <g-emoji class="g-emoji" alias="rofl" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png">🤣️</g-emoji>.</p>
<h3><a id="user-content-choice-of-sat-solver" class="anchor" aria-hidden="true" href="#choice-of-sat-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Choice of SAT solver</h3>
<p>Some top-level SAT solvers are</p>
<ul>
<li><a href="https://github.com/arminbiere/cadical">CaDical</a> -- Winner of <a href="http://sat-race-2019.ciirc.cvut.cz/" rel="nofollow">2019 SAT
Race</a>. Tends to be
fastest in dealing with solvable problems.</li>
<li><a href="http://fmv.jku.at/lingeling/" rel="nofollow">Lingeling, Plingeling and Treengeling</a> -- Good at parallelization.</li>
<li><a href="https://www.lrde.epita.fr/wiki/Painless" rel="nofollow">Painless</a> -- Uses a divide and conquer strategy for
parallelization.</li>
<li>MapleLCMDiscChronoBT-DL --  Winner of 2019 SAT Race for unsatisfiable problem. But I have not
found any documents of it.</li>
</ul>
<p>My experience is that all these SAT solvers have similar performance. It is always more important to
try to encode your problem better.</p>
<h2><a id="user-content-how-to-use-beeencoderjl" class="anchor" aria-hidden="true" href="#how-to-use-beeencoderjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use <code>BeeEncoder.jl</code></h2>
<p>When your problems becomes bigger, you don't want to write all <code>BEE</code> code manually. Here's what
<code>BeeEncoder.jl</code> may help. You can write your problem in Julia, and <code>BeeEncoder.jl</code> will convert it to <code>BEE</code> syntax.
Here's how to do the example above with <code>BeeEncoder.jl</code></p>
<p>First install <code>BeeEncoder.jl</code> by typing this in <code>Julia REPL</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BeeEncoder<span class="pl-pds">"</span></span>)</pre></div>
<p>Then run the following code in Julia REPL</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> BeeEncoder

<span class="pl-c1">@beeint</span> x  <span class="pl-c1">0</span> <span class="pl-c1">5</span>
<span class="pl-c1">@beeint</span> y <span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-c1">9</span>
<span class="pl-c1">@beeint</span> z <span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-c1">10</span>

<span class="pl-c1">@constrain</span> x <span class="pl-k">+</span> y <span class="pl-k">==</span> z

<span class="pl-c1">@beeint</span> w <span class="pl-c1">0</span> <span class="pl-c1">10</span>

xl <span class="pl-k">=</span> <span class="pl-c1">@beebool</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>]

<span class="pl-c1">@constrain</span> xl[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-k">-</span>xl[<span class="pl-c1">2</span>]
<span class="pl-c1">@constrain</span> xl[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">true</span>

<span class="pl-c1">@constrain</span> <span class="pl-c1">sum</span>([<span class="pl-k">-</span>xl[<span class="pl-c1">1</span>], xl[<span class="pl-c1">2</span>], <span class="pl-k">-</span>xl[<span class="pl-c1">3</span>], xl[<span class="pl-c1">4</span>]]) <span class="pl-k">==</span> w

BEE<span class="pl-k">.</span><span class="pl-c1">render</span>()</pre></div>
<p>You will get output like this</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">new_int</span>(w, <span class="pl-c1">0</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">new_int</span>(x, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">new_int</span>(z, <span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">new_int</span>(y, <span class="pl-k">-</span><span class="pl-c1">4</span>, <span class="pl-c1">9</span>)
<span class="pl-c1">new_bool</span>(x1)
<span class="pl-c1">new_bool</span>(x4)
<span class="pl-c1">new_bool</span>(x2)
<span class="pl-c1">new_bool</span>(x3)
<span class="pl-c1">int_plus</span>(x, y, z)
<span class="pl-c1">bool_eq</span>(x1, <span class="pl-k">-</span>x2)
<span class="pl-c1">bool_eq</span>(x2, <span class="pl-c1">true</span>)
<span class="pl-c1">bool_array_sum_eq</span>(([<span class="pl-k">-</span>x1, x2, <span class="pl-k">-</span>x3, x4], w))
solve satisfy</pre></div>
<p>Exactly as above.
You can solve this into a file and solve it with <code>BumbleBEE</code> as I described before.</p>
<p>If you have <code>BEE</code> installed and <code>BumbleBEE</code> can be found through your <code>PATH</code> environment variable, then you can run
<code>BEE.solve()</code> directly in Julia and get the solution, like this.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> output <span class="pl-k">=</span> <span class="pl-c1">solve</span>();
<span class="pl-k">%</span> SWI<span class="pl-k">-</span>Prolog interface to Glucose v4<span class="pl-c1">.0</span> <span class="pl-k">...</span> OK
<span class="pl-k">%</span>  <span class="pl-k">\</span><span class="pl-s"><span class="pl-pds">'</span>'<span class="pl-pds">'</span></span><span class="pl-k">/</span> <span class="pl-k">//</span>      BumbleBEE       <span class="pl-k">/</span> <span class="pl-k">\</span>_<span class="pl-k">/</span> <span class="pl-k">\</span>_<span class="pl-k">/</span> <span class="pl-k">\</span>
<span class="pl-k">%</span> <span class="pl-k">-</span>(<span class="pl-k">||</span><span class="pl-k">|</span>)(<span class="pl-s"><span class="pl-pds">'</span>)     (15/06/2017)     <span class="pl-cce">\_</span>/ <span class="pl-cce">\_</span>/ <span class="pl-cce">\_</span>/</span>
<span class="pl-s">%   ^^^        by Amit Metodi    / <span class="pl-cce">\_</span>/ <span class="pl-cce">\_</span>/ \</span>
<span class="pl-s">%</span>
<span class="pl-s">%  reading BEE file ... done</span>
<span class="pl-s">%  load pl-satSolver ... %  encoding BEE model ... done</span>
<span class="pl-s">%  solving CNF (satisfy) ...</span>
<span class="pl-s">w = 2</span>
<span class="pl-s">x = 0</span>
<span class="pl-s">z = -4</span>
<span class="pl-s">y = -4</span>
<span class="pl-s">x1 = false</span>
<span class="pl-s">x4 = false</span>
<span class="pl-s">x2 = true</span>
<span class="pl-s">x3 = true</span>
<span class="pl-s">----------</span>
<span class="pl-s">==========</span></pre></div>
<p>And if you check <code>output</code>, you will it is a dictionary containing the solution.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> out
BEE solution<span class="pl-k">:</span>
<span class="pl-k">*</span> Satisfiable<span class="pl-k">:</span> <span class="pl-c1">true</span>
<span class="pl-k">*</span> Integer variables<span class="pl-k">:</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">4</span>)
<span class="pl-k">*</span> Boolean variables<span class="pl-k">:</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Bool}</span>(<span class="pl-s"><span class="pl-pds">"</span>x1<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">"</span>x4<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">"</span>x2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>x3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)</pre></div>
<p>To reset the model, use <code>reset()</code>.</p>
<h2><a id="user-content-acknowledgement-️" class="anchor" aria-hidden="true" href="#acknowledgement-️"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgement <g-emoji class="g-emoji" alias="pray" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png">🙏️</g-emoji></h2>
<p>I want to thank all the generous <g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png">❤️</g-emoji>  people who have spend their time to create these amazing SAT
solvers and made them freely available to everyone.</p>
<p>By writing this module, I have learn quite a great deal of Julia and its convenient meta-programming
features.  I want to thank everyone <g-emoji class="g-emoji" alias="tipping_hand_person" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f481.png">💁</g-emoji> on GitHub and <a href="https://slackinvite.julialang.org/" rel="nofollow">Julia Slack channel</a> who has helped me, in
particular Alex Arslan, <a href="https://github.com/dpsanders">David Sanders</a>, Syx Pek, and <a href="https://github.com/JeffreySarnoff">Jeffrey
Sarnoff</a>.</p>
<p>I also want to thank my dear friend <a href="https://sites.google.com/view/yuditsky/home" rel="nofollow">Yelena Yuditsky</a> for
giving me a problem to solve so that I have the motivation to do all this.</p>
</article></div>