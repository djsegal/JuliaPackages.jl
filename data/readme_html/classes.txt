<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/rjplevin/Classes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff2257f8e9f949a3cb1d485811f0accfc96e9112/68747470733a2f2f7472617669732d63692e6f72672f726a706c6576696e2f436c61737365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rjplevin/Classes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/rjplevin/classes-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/ca15fb1340c0baaf60d4fb8d090eed494726960f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f726a706c6576696e2f436c61737365732e6a6c3f6272616e63683d6d6173746572263f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/rjplevin/Classes.jl?branch=master&amp;?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rjplevin/Classes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ac1e78c3b442846b4efcecb11b4d7ffc46ca027/68747470733a2f2f636f6465636f762e696f2f67682f726a706c6576696e2f436c61737365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/rjplevin/Classes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/rjplevin/Classes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/52ff9e42da3ddc5e253224a8d9bd5ae067f4f6ac/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f726a706c6576696e2f436c61737365732e6a6c2f6d61737465722e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/github/rjplevin/Classes.jl/master.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-classesjl" class="anchor" aria-hidden="true" href="#classesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Classes.jl</h1>
<p>A simple, Julian approach to inheritance of structure and methods.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>Julia is not an object-oriented language in the traditional sense in that there is no inheritance of structure.
If multiple types need to share structure, you have several options:</p>
<ol>
<li>Write out the common fields manually.</li>
<li>Write a macro that emits the common fields. This is better than the manual approach
since it creates a single point of modification.</li>
<li>Use composition instead of inheritance: create a new type that holds the common fields
and include an instance of this in each of the structs that needs the common fields.</li>
<li>Use an existing package that provides the required features.</li>
</ol>
<p>All of these have downsides:</p>
<ul>
<li>As suggested above, writing out the duplicate fields manually creates maintenance challenges
since you no longer have a single  point of modification.</li>
<li>Using a macro to emit the common fields solves this problem, but there's still
no convient way to identify the relatedness of the structs that contain these common fields.</li>
<li>Composition -- the typically recommended julian approach -- generally involves creating
functions to delegate from the outer type to the inner type. This can become tedious if
you have multiple levels of nesting. Of course you
can write forwarding macros to handle this, but this also becomes repetitive.</li>
<li>Neither of the packages I reviewed -- OOPMacro.jl and ConcreteAbstractions.jl -- combine the
power and simplicity I was after, and neither has been updated in years.</li>
</ul>
<p><code>Classes.jl</code> provides one macro, <code>@class</code>, which is a simple wrapper around
existing Julia syntax. <code>Classes.jl</code> exploits the type Julia system to provide inheritance
of methods while enabling shared structure without duplicative code.</p>
<h2><a id="user-content-the-class-macro" class="anchor" aria-hidden="true" href="#the-class-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The @class macro</h2>
<p>A "class" is a concrete type with a defined relationship to a hierarchy of automatically
generated abstract types. The <code>@class</code> macro saves the field definitions for each class
so that subclasses receive all their parent's fields in addition to those defined locally.
Inner constructors are passed through unchanged.</p>
<p><code>Classes.jl</code> constructs a "shadow" abstract type hierarchy to represent the relationships among
the defined classes. For each class <code>Foo</code>, the abstract type <code>AbstractFoo</code> is defined, where <code>AbstractFoo</code>
is a subtype of the abstract type associated with the superclass of <code>Foo</code>.</p>
<p>Given these two class definitions (note that <code>Class</code> is defined in <code>Classes.jl</code>):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Classes

<span class="pl-c1">@class</span> Foo <span class="pl-k">&lt;:</span> <span class="pl-c1">Class</span> <span class="pl-k">begin</span>       <span class="pl-c"><span class="pl-c">#</span> or, equivalently, @class Foo begin ... end</span>
   foo<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> mutable Bar <span class="pl-k">&lt;:</span> <span class="pl-c1">Foo</span> <span class="pl-k">begin</span>
    bar<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span></pre></div>
<p>The following julia code is emitted:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">abstract type</span> AbstractFoo <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractClass</span> <span class="pl-k">end</span>

<span class="pl-k">struct</span> Foo{} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFoo</span>
    x<span class="pl-k">::</span><span class="pl-c1">Int</span>

    <span class="pl-k">function</span> <span class="pl-en">Foo</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>)
        <span class="pl-c1">new</span>(x)
    <span class="pl-k">end</span>

    <span class="pl-k">function</span> <span class="pl-en">Foo</span>(self<span class="pl-k">::</span><span class="pl-c1">T</span>, x<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFoo</span>
        <span class="pl-c1">setfield!</span>(self, <span class="pl-c1">:x</span>, x)
        self
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">abstract type</span> AbstractBar <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFoo</span> <span class="pl-k">end</span>

<span class="pl-k">mutable struct</span> Bar{} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractBar</span>
    x<span class="pl-k">::</span><span class="pl-c1">Int</span>
    bar<span class="pl-k">::</span><span class="pl-c1">Int</span>

    <span class="pl-k">function</span> <span class="pl-en">Bar</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, bar<span class="pl-k">::</span><span class="pl-c1">Int</span>)
        <span class="pl-c1">new</span>(x, bar)
    <span class="pl-k">end</span>

    <span class="pl-k">function</span> <span class="pl-en">Bar</span>(self<span class="pl-k">::</span><span class="pl-c1">T</span>, x<span class="pl-k">::</span><span class="pl-c1">Int</span>, bar<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractBar</span>
        <span class="pl-c1">setfield!</span>(self, <span class="pl-c1">:x</span>, x)
        <span class="pl-c1">setfield!</span>(self, <span class="pl-c1">:bar</span>, bar)
        self
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Note that the second emitted constructor is parameterized such that it can be called
on the class's subclasses to set fields defined by the class. Of course, this is
callable only on a mutable struct.</p>
<p>In addition, introspection functions are emitted that relate these:</p>
<div class="highlight highlight-source-julia"><pre>Classes<span class="pl-k">.</span><span class="pl-en">superclass</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Bar}</span>) <span class="pl-k">=</span> Foo

Classes<span class="pl-k">.</span><span class="pl-en">issubclass</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Bar}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{Foo}</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c"><span class="pl-c">#</span> And so on, up the type hierarchy</span></pre></div>
<p>Adding the <code>mutable</code> keyword after <code>@class</code> results in a mutable struct, but this
feature is not inherited by subclasses; it must be specified (if desired) for each
subclass. <code>Classes.jl</code> offers no special handling of mutability: it is the user's
responsibility to ensure that combinations of mutable and immutable classes and related
methods make sense.</p>
<h2><a id="user-content-defining-methods-to-operate-on-a-class-hierarchy" class="anchor" aria-hidden="true" href="#defining-methods-to-operate-on-a-class-hierarchy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining methods to operate on a class hierarchy</h2>
<p>To define a function that operates on a class and its subclasses, specify the
associated abstract type rather than the class name in the method signature.</p>
<p>For example, give the class <code>Bar</code>, you can write a function that applies to
<code>Bar</code> and its subclasses by specifying the type <code>AbstractBar</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">my_method</span>(obj<span class="pl-k">::</span><span class="pl-c1">AbstractBar</span>, other, stuff) <span class="pl-k">=</span> <span class="pl-c1">do_something</span>(obj, other, args)</pre></div>
<p>See the online <a href="https://github.com/rjplevin/Classes.jl/blob/master/docs/src/index.md">documentation</a> for further details.</p>
</article></div>