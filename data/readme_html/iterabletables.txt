<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-iterabletables" class="anchor" aria-hidden="true" href="#iterabletables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IterableTables</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://queryverse.github.io/IterableTables.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/queryverse/IterableTables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/798a472fa5294e0060c4f56235e10c32eaded7b6/68747470733a2f2f7472617669732d63692e6f72672f717565727976657273652f4974657261626c655461626c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/queryverse/IterableTables.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/queryverse/iterabletables-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e8edcd6e5b5b82691ac8b23842006481a25d9440/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6e66386c6731706566347869746a696a2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/nf8lg1pef4xitjij/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/queryverse/IterableTables.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/23e3bc5a76fcb238c84636f3e358311433ebc1cd/687474703a2f2f636f6465636f762e696f2f6769746875622f717565727976657273652f4974657261626c655461626c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/queryverse/IterableTables.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>Iterable tables is a  generic interface for tabular data.</p>
<p>A large number of packages are compatible with this interface. The following
packages can act as a source iterable table:</p>
<ul>
<li><a href="https://github.com/JuliaStats/DataFrames.jl">DataFrames</a></li>
<li><a href="https://github.com/JuliaData/DataTables.jl">DataTables</a></li>
<li><a href="https://github.com/JuliaPy/Pandas.jl">Pandas</a></li>
<li><a href="https://github.com/JuliaComputing/IndexedTables.jl">IndexedTables</a></li>
<li><a href="https://github.com/JuliaStats/TimeSeries.jl">TimeSeries</a></li>
<li><a href="https://github.com/dysonance/Temporal.jl">Temporal</a></li>
<li><a href="https://github.com/FugroRoames/TypedTables.jl">TypedTables</a></li>
<li><a href="https://github.com/JuliaComputing/JuliaDB.jl">JuliaDB</a></li>
<li><a href="https://github.com/JuliaDB/SQLite.jl">SQLite</a></li>
<li><a href="https://github.com/JuliaDB/ODBC.jl">ODBC</a></li>
<li><a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations</a> (any <code>DESolution</code>)</li>
<li><a href="https://github.com/queryverse/CSVFiles.jl">CSVFiles</a></li>
<li><a href="https://github.com/queryverse/ExcelFiles.jl">ExcelFiles</a></li>
<li><a href="https://github.com/queryverse/FeatherFiles.jl">FeatherFiles</a></li>
<li><a href="https://github.com/queryverse/ParquetFiles.jl">ParquetFiles</a></li>
<li><a href="https://github.com/CiaranOMara/BedgraphFiles.jl">BedgraphFiles</a></li>
<li><a href="https://github.com/queryverse/StatFiles.jl">StatFiles</a></li>
<li><a href="https://github.com/JuliaData/CSV.jl">CSV</a></li>
<li><a href="https://github.com/JuliaStats/Feather.jl">Feather</a></li>
<li><a href="https://github.com/queryverse/Query.jl">Query</a></li>
<li>any iterator who produces elements of type <a href="https://github.com/blackrock/NamedTuples.jl">NamedTuple</a></li>
</ul>
<p>The following data sinks are currently supported:</p>
<ul>
<li><a href="https://github.com/JuliaStats/DataFrames.jl">DataFrames</a></li>
<li><a href="https://github.com/JuliaData/DataTables.jl">DataTables</a></li>
<li><a href="https://github.com/JuliaPy/Pandas.jl">Pandas</a></li>
<li><a href="https://github.com/JuliaComputing/IndexedTables.jl">IndexedTables</a></li>
<li><a href="https://github.com/JuliaStats/TimeSeries.jl">TimeSeries</a></li>
<li><a href="https://github.com/dysonance/Temporal.jl">Temporal</a></li>
<li><a href="https://github.com/FugroRoames/TypedTables.jl">TypedTables</a></li>
<li><a href="https://github.com/JuliaComputing/JuliaDB.jl">JuliaDB</a></li>
<li><a href="https://github.com/JuliaStats/StatsModels.jl">StatsModels</a></li>
<li><a href="https://github.com/queryverse/CSVFiles.jl">CSVFiles</a></li>
<li><a href="https://github.com/queryverse/FeatherFiles.jl">FeatherFiles</a></li>
<li><a href="https://github.com/CiaranOMara/BedgraphFiles.jl">BedgraphFiles</a></li>
<li><a href="https://github.com/JuliaData/CSV.jl">CSV</a></li>
<li><a href="https://github.com/JuliaStats/Feather.jl">Feather</a></li>
<li><a href="https://github.com/JuliaPlots/StatPlots.jl">StatPlots</a></li>
<li><a href="https://github.com/GiovineItalia/Gadfly.jl">Gadfly</a> (currently not working)</li>
<li><a href="https://github.com/fredo-dedup/VegaLite.jl">VegaLite</a></li>
<li><a href="https://github.com/JuliaComputing/TableView.jl">TableView.jl</a></li>
<li><a href="https://github.com/queryverse/DataVoyager.jl">DataVoyager.jl</a></li>
<li><a href="https://github.com/queryverse/TableShowUtils.jl">TableShowUtils.jl</a></li>
<li><a href="https://github.com/queryverse/Query.jl">Query</a></li>
</ul>
<p>The package is tightly integrated with <a href="https://github.com/queryverse/Query.jl">Query.jl</a>:
Any query that creates a named tuple in the last <code>@select</code> statement (and
doesn't <code>@collect</code> the results into a data structure) is automatically an
iterable table data source, and any of the data sources mentioned above can
be queried using <a href="https://github.com/queryverse/Query.jl">Query.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>This package only works on julia 0.5 and newer. You can add it with:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>IterableTables<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting started</h2>
<p><code>IterableTables</code> makes it easy to conver between different table types in julia. It also makes it possible to use any table type in situations where packages traditionally expected a <code>DataFrame</code>.</p>
<p>For example, if you have a <code>DataFrame</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(Name<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sally<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jim<span class="pl-pds">"</span></span>], Age<span class="pl-k">=</span>[<span class="pl-c1">34.</span>,<span class="pl-c1">25.</span>,<span class="pl-c1">67.</span>], Children<span class="pl-k">=</span>[<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>], Income <span class="pl-k">=</span> [<span class="pl-c1">120_000</span>, <span class="pl-c1">20_000</span>, <span class="pl-c1">60_000</span>])</pre></div>
<p>you can easily convert this into any of the supported data sink types by simply constructing a new table type and passing your source <code>df</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DataTables, TypedTables, IterableTables

<span class="pl-c"><span class="pl-c">#</span> Convert to a DataTable</span>
dt <span class="pl-k">=</span> <span class="pl-c1">DataTable</span>(df)

<span class="pl-c"><span class="pl-c">#</span> Convert to a TypedTable</span>
tt <span class="pl-k">=</span> <span class="pl-c1">Table</span>(df)
</pre></div>
<p>These conversions work in pretty much any direction. For example you can convert a <code>TypedTable</code> into a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia"><pre>new_df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(tt)</pre></div>
<p>Or you can convert it to a <code>DataTable</code>:</p>
<div class="highlight highlight-source-julia"><pre>new_dt <span class="pl-k">=</span> <span class="pl-c1">DataTable</span>(tt)</pre></div>
<p>The general rule is that you can convert any sink into any source.</p>
<p><code>IterableTables</code> also adds methods to a number of packages that have traditionally only worked with <code>DataFrame</code>s that make these packages work with any data source type defined in <code>IterableTables</code>.</p>
<p>For example, you can run a regression on any of the source types:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GLM, DataFrames

<span class="pl-c"><span class="pl-c">#</span> Run a regression on a TypedTable</span>
<span class="pl-c1">lm</span>(<span class="pl-c1">@formula</span>(Children<span class="pl-k">~</span>Age),tt)

<span class="pl-c"><span class="pl-c">#</span> Run a regression on a DataTable</span>
<span class="pl-c1">lm</span>(<span class="pl-c1">@formula</span>(Children<span class="pl-k">~</span>Age),dt)</pre></div>
<p>Or you can plot any of these data sources with <code>VegaLite</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> VegaLite

<span class="pl-c"><span class="pl-c">#</span> Plot a TypedTable</span>
tt <span class="pl-k">|&gt;</span> <span class="pl-c1">@vlplot</span>(<span class="pl-c1">:point</span>, x<span class="pl-k">=</span><span class="pl-c1">:Age</span>, y<span class="pl-k">=</span><span class="pl-c1">:Children</span>)</pre></div>
<p>Or with <code>StatsPlots</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StatsPlots

<span class="pl-c"><span class="pl-c">#</span> Plot a DataTable</span>
<span class="pl-c1">@df</span> dt <span class="pl-c1">plot</span>(<span class="pl-c1">:Age</span>, <span class="pl-c1">:Children</span>)

<span class="pl-c1">@df</span> dt <span class="pl-c1">scatter</span>(<span class="pl-c1">:Age</span>, <span class="pl-c1">:Children</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>.(<span class="pl-c1">:Income</span> <span class="pl-k">./</span> <span class="pl-c1">1000</span>))</pre></div>
<p>Again, this will work with any of the data sources listed above.</p>
</article></div>