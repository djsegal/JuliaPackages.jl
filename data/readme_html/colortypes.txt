<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-colortypes" class="anchor" aria-hidden="true" href="#colortypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ColorTypes</h1>
<p><a href="https://travis-ci.org/JuliaGraphics/ColorTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a59b419669e856c56178c0e55dddebb7e7c79626/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147726170686963732f436f6c6f7254797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphics/ColorTypes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/d940e3ceb1a3b895124a0dba6109ea6f84b4fb7b/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f432f436f6c6f7254797065732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/C/ColorTypes.svg" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaGraphics/ColorTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/79c9d00910116b4e0ceffae533dd71c190e8e89e/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c696147726170686963732f436f6c6f7254797065732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGraphics/ColorTypes.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This "minimalistic" package serves as the foundation for working with
colors in Julia.  It defines basic color types and their constructors,
and sets up traits and <code>show</code> methods to make them easier to work
with.</p>
<p>Of related interest is the <a href="https://github.com/JuliaGraphics/Colors.jl">Colors.jl</a> package, which provides
"colorimetry" and conversion functions for working with colors.  You
may also be interested in the <a href="https://github.com/JuliaGraphics/ColorVectorSpace.jl">ColorVectorSpace.jl</a> package, which
defines mathematical operations for certain color types.  Both of
these packages are based on ColorTypes, which ensures that any color
objects will be broadly usable.</p>
<h1><a id="user-content-types-available-in-colortypes" class="anchor" aria-hidden="true" href="#types-available-in-colortypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types available in ColorTypes</h1>
<h2><a id="user-content-the-type-hierarchy-and-abstract-types" class="anchor" aria-hidden="true" href="#the-type-hierarchy-and-abstract-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The type hierarchy and abstract types</h2>
<p>Here is the type hierarchy used in ColorTypes:</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/types.svg?sanitize=true"><img src="images/types.svg?sanitize=true" alt="Types" title="Types" style="max-width:100%;"></a></p>
<ul>
<li>
<p><code>Colorant</code> is the general term used for any object exported by this
package.  True colors are called <code>Color</code>; <code>TransparentColor</code>
indicates an object that also has alpha-channel information.</p>
</li>
<li>
<p><code>Color{T,3}</code> is a 3-component color (like RGB = red, green, blue);
<code>Color{T,1}</code> is a 1-component color (i.e., grayscale).
<code>AbstractGray{T}</code> is a typealias for <code>Color{T,1}</code>.</p>
</li>
<li>
<p>Most colors have both <code>AlphaColor</code> and <code>ColorAlpha</code> variants;
for example, <code>RGB</code> has both <code>ARGB</code> and <code>RGBA</code>.  These indicate
different underlying storage in memory: <code>AlphaColor</code> stores the
alpha-channel first, then the color, whereas <code>ColorAlpha</code> stores the
color first, then the alpha-channel.  Storage order can be
particularly important for interfacing with certain external
libraries (e.g., OpenGL and Cairo).</p>
</li>
<li>
<p>To support generic programming, <code>TransparentColor</code> constructors
always take the alpha channel last, independent of their internal
storage order. That is, one uses</p>
</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">RGBA</span>(red, green, blue, alpha)
<span class="pl-c1">RGBA</span>(<span class="pl-c1">RGB</span>(red, green, blue), alpha)
<span class="pl-c1">ARGB</span>(red, green, blue, alpha)       <span class="pl-c"><span class="pl-c">#</span> note alpha is last</span>
<span class="pl-c1">ARGB</span>(<span class="pl-c1">RGB</span>(red, green, blue), alpha)</pre></div>
<p>This way you can write code with a generic <code>C&lt;:Colorant</code> type and
not worry about the proper order for supplying arguments to the
constructor.  See the <a href="#traits">traits section</a> for some useful
utilities.</p>
<h2><a id="user-content-colors" class="anchor" aria-hidden="true" href="#colors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Colors</h2>
<h3><a id="user-content-rgb-plus-bgr-xrgb-rgbx-and-rgb24-the-abstractrgb-group" class="anchor" aria-hidden="true" href="#rgb-plus-bgr-xrgb-rgbx-and-rgb24-the-abstractrgb-group"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RGB plus BGR, XRGB, RGBX, and RGB24: the AbstractRGB group</h3>
<p>The <a href="https://en.wikipedia.org/wiki/SRGB" rel="nofollow">sRGB colorspace</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> RGB{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractRGB{T}</span>
    r<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Red in [0,1]</span>
    g<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Green in [0,1]</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Blue in [0,1]</span>
<span class="pl-k">end</span></pre></div>
<p>RGBs may be defined with two broad number types: <code>AbstractFloat</code> and
<code>FixedPoint</code>.  <code>FixedPoint</code> types come from the
<a href="https://github.com/JuliaMath/FixedPointNumbers.jl"><code>FixedPointNumbers</code></a>
package, and essentially reinterpret "integers" (meaning, the bit-sequences used to represent
machine integers) as fractional numbers.
For example, <code>N0f8(1)</code> creates a <code>Normed{UInt8,8}</code>
(<code>N0f8</code> for short) number with value equal to <code>1.0</code> but which
is represented internally with the same bit sequence as <code>0xff</code> (which is numerically equal to 255).
This strategy ensures that <code>1</code> always means
"saturated color", regardless of whether that value is represented as a <code>Float64</code> or with just 8 bits.
(In the context of image-processing, this unifies "integer images" and
"floating-point images" in a common scale.)
A bright red color is created with <code>RGB(1, 0, 0)</code>, a pale pink with <code>RGB(1, 0.7, 0.7)</code>
or its 24-bit variant <code>RGB{N0f8}(1, 0.7, 0.7)</code>,
and <code>RGB(255, 0, 0)</code> throws an error.</p>
<p>The analogous <code>BGR</code> type is defined as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> BGR{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractRGB{T}</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span>
    g<span class="pl-k">::</span><span class="pl-c1">T</span>
    r<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p>i.e., identical to <code>RGB</code> except in the opposite storage order.  One
crucial point: <strong>for all <code>AbstractRGB</code> types, the constructor
accepts values in the order <code>(r,g,b)</code> regardless of how they
are arranged internally in memory</strong>.</p>
<p><code>XRGB</code> and <code>RGBX</code> seem exactly like <code>RGB</code>, but internally they insert
one extra ("invisible") padding element; when the element type is
<code>N0f8</code>, these have favorable memory alignment for interfacing with
libraries like OpenGL.</p>
<p>Finally, one may represent an RGB color as 8-bit values packed into a
32-bit integer:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> RGB24 <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractRGB{N0f8}</span>
    color<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
<span class="pl-k">end</span></pre></div>
<p>The storage order is <code>0xAARRGGBB</code>, where <code>RR</code> means the red channel,
<code>GG</code> means the green, and <code>BB</code> means the blue.  <code>AA</code> is ignored for
<code>RGB24</code>; there is also an <code>ARGB32</code>, for which that byte represents
alpha. Note that this type can also be constructed as
<code>RGB24(0.8,0.5,0.2)</code>. However, since this type has no fields named
<code>r</code>, <code>g</code>, <code>b</code>, it is better to extract values from <code>AbstractRGB</code>
objects using <code>red(c)</code>, <code>green(c)</code>, <code>blue(c)</code>.</p>
<h3><a id="user-content-hsv" class="anchor" aria-hidden="true" href="#hsv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HSV</h3>
<p><a href="https://en.wikipedia.org/wiki/HSL_and_HSV" rel="nofollow">Hue-Saturation-Value</a>. A
common projection of RGB to cylindrical coordinates.  This is also
sometimes called "HSB" for Hue-Saturation-Brightness.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> HSV{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    h<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Hue in [0,360)</span>
    s<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Saturation in [0,1]</span>
    v<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Value in [0,1]</span>
<span class="pl-k">end</span></pre></div>
<p>For HSV (and all remaining color types), <code>T</code> must be of
<code>AbstractFloat</code> type, since the values range beyond what can be
represented with most <code>FixedPoint</code> types.</p>
<h3><a id="user-content-hsl" class="anchor" aria-hidden="true" href="#hsl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HSL</h3>
<p><a href="https://en.wikipedia.org/wiki/HSL_and_HSV" rel="nofollow">Hue-Saturation-Lightness</a>. Another
common projection of RGB to cylindrical coordinates.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> HSL{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    h<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Hue in [0,360)</span>
    s<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Saturation in [0,1]</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Lightness in [0,1]</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-hsi" class="anchor" aria-hidden="true" href="#hsi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HSI</h3>
<p>Hue, saturation, intensity, a variation of HSL and HSV commonly used
in computer vision.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> HSI{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    h<span class="pl-k">::</span><span class="pl-c1">T</span>
    s<span class="pl-k">::</span><span class="pl-c1">T</span>
    i<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-xyz" class="anchor" aria-hidden="true" href="#xyz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>XYZ</h3>
<p>The <a href="https://en.wikipedia.org/wiki/CIE_1931_color_space" rel="nofollow">XYZ colorspace</a>
standardized by the CIE in 1931, based on experimental measurements of
color perception culminating in the CIE standard observer (see
<code>Colors.jl</code>'s <code>cie_color_match</code> function).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> XYZ{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    x<span class="pl-k">::</span><span class="pl-c1">T</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
    z<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p>This colorspace is noteworthy because it is linear---values may be
added or scaled as if they form a vector space.  See further
discussion in the ColorVectorSpace.jl package.</p>
<h3><a id="user-content-xyy" class="anchor" aria-hidden="true" href="#xyy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>xyY</h3>
<p>The xyY colorspace is another CIE standardized color space, based
directly off of a transformation from XYZ. It was developed
specifically because the xy chromaticity space is invariant to the
lightness of the patch.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> xyY{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    x<span class="pl-k">::</span><span class="pl-c1">T</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
    Y<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-lab" class="anchor" aria-hidden="true" href="#lab"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lab</h3>
<p>A perceptually uniform colorspace standardized by the CIE in 1976. See
also LUV, the associated colorspace standardized the same year.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Lab{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Luminance in approximately [0,100]</span>
    a<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Red/Green</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Blue/Yellow</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-luv" class="anchor" aria-hidden="true" href="#luv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Luv</h3>
<p>A perceptually uniform colorspace standardized by the CIE in 1976. See
also LAB, a similar colorspace standardized the same year.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Luv{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Luminance</span>
    u<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Red/Green</span>
    v<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Blue/Yellow</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-lchab" class="anchor" aria-hidden="true" href="#lchab"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LCHab</h3>
<p>The LAB colorspace reparameterized using cylindrical coordinates.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> LCHab{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Luminance in [0,100]</span>
    c<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Chroma</span>
    h<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Hue in [0,360)</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-lchuv" class="anchor" aria-hidden="true" href="#lchuv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LCHuv</h3>
<p>The LUV colorspace reparameterized using cylindrical coordinates.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> LCHuv{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Luminance</span>
    c<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Chroma</span>
    h<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Hue</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-din99" class="anchor" aria-hidden="true" href="#din99"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DIN99</h3>
<p>The DIN99 uniform colorspace as described in the DIN 6176 specification.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> DIN99{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> L99 (Lightness)</span>
    a<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> a99 (Red/Green)</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> b99 (Blue/Yellow)</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-din99d" class="anchor" aria-hidden="true" href="#din99d"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DIN99d</h3>
<p>The DIN99d uniform colorspace is an improvement on the DIN99 color
space that adds a correction to the X tristimulus value in order to
emulate the rotation term present in the DeltaE2000 equation.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> DIN99d{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> L99d (Lightness)</span>
    a<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> a99d (Reddish/Greenish)</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> b99d (Bluish/Yellowish)</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-din99o" class="anchor" aria-hidden="true" href="#din99o"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DIN99o</h3>
<p>Revised version of the DIN99 uniform colorspace with modified
coefficients for an improved metric.  Similar to DIN99d X correction
and the DeltaE2000 rotation term, DIN99o achieves comparable results
by optimized <code>a*/b*</code> rotation and chroma compression terms.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> DIN99o{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> L99o (Lightness)</span>
    a<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> a99o (Red/Green)</span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> b99o (Blue/Yellow)</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-lms" class="anchor" aria-hidden="true" href="#lms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LMS</h3>
<p>Long-Medium-Short cone response values. Multiple methods of converting
to LMS space have been defined. Here the
<a href="https://en.wikipedia.org/wiki/CIECAM02#CAT02" rel="nofollow">CAT02</a> chromatic
adaptation matrix is used.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> LMS{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    l<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Long</span>
    m<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Medium</span>
    s<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> Short</span>
<span class="pl-k">end</span></pre></div>
<p>Like <code>XYZ</code>, <code>LMS</code> is a linear color space.</p>
<h3><a id="user-content-yiq-ntsc" class="anchor" aria-hidden="true" href="#yiq-ntsc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>YIQ (NTSC)</h3>
<p>A color-encoding format used by the NTSC broadcast standard.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> YIQ{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
    i<span class="pl-k">::</span><span class="pl-c1">T</span>
    q<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-ycbcr" class="anchor" aria-hidden="true" href="#ycbcr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Y'CbCr</h3>
<p>A color-encoding format common in video and digital photography.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> YCbCr{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Color{T,3}</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
    cb<span class="pl-k">::</span><span class="pl-c1">T</span>
    cr<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-grayscale-colors" class="anchor" aria-hidden="true" href="#grayscale-colors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Grayscale "colors"</h2>
<h3><a id="user-content-gray" class="anchor" aria-hidden="true" href="#gray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gray</h3>
<p><code>Gray</code> is a simple wrapper around a number:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Gray{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractGray{T}</span>
    val<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p>In many situations you don't need a <code>Gray</code> wrapper, but there are
times when it can be helpful to clarify meaning or assist with
dispatching to appropriate methods.  It is also present for
consistency with the two corresponding grayscale-plus-transparency
types, <code>AGray</code> and <code>GrayA</code>.</p>
<h3><a id="user-content-gray24-and-agray32" class="anchor" aria-hidden="true" href="#gray24-and-agray32"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gray24 and AGray32</h3>
<p><code>Gray24</code> is a grayscale value encoded as a <code>UInt32</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Gray24 <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractGray{N0f8}</span>
    color<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
<span class="pl-k">end</span></pre></div>
<p>The storage format is <code>0xAAIIIIII</code>, where each <code>II</code> pair (I=intensity)
must be identical.  The <code>AA</code> is ignored, but in the corresponding
<code>AGray32</code> type it encodes alpha.</p>
<h2><a id="user-content-traits-utility-functions-for-instances-and-types" class="anchor" aria-hidden="true" href="#traits-utility-functions-for-instances-and-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a name="user-content-traits"></a>Traits (utility functions for instances and types)</h2>
<p>One of the nicest things about this package is that it provides a rich
set of trait-functions for working with color types:</p>
<ul>
<li>
<p><code>eltype(c)</code> extracts the underlying element type, e.g., <code>Float32</code></p>
</li>
<li>
<p><code>length(c)</code> extracts the number of components (including <code>alpha</code>, if present)</p>
</li>
<li>
<p><code>alphacolor(c)</code> and <code>coloralpha(c)</code> convert a <code>Color</code> to an object
with transparency (either <code>ARGB</code> or <code>RGBA</code>, respectively).</p>
</li>
<li>
<p><code>color_type(c)</code> extracts the opaque (color-only) type of the object (e.g.,
<code>RGB{N0f8}</code> from an object of type <code>ARGB{N0f8}</code>).</p>
</li>
<li>
<p><code>base_color_type(c)</code> and <code>base_colorant_type(c)</code> extract type
information and discard the element type (e.g.,
<code>base_colorant_type(ARGB{N0f8})</code> yields <code>ARGB</code>)</p>
</li>
<li>
<p><code>ccolor(Cdest, Csrc)</code> helps pick a concrete element type for methods
where the output may be left unstated, e.g., <code>convert(RGB, c)</code>
rather than <code>convert(RGB{N0f8}, c)</code>.</p>
</li>
</ul>
<p>All of these methods are individually documented (typically with
greater detail); just type <code>?ccolor</code> at the REPL.</p>
<h3><a id="user-content-getters" class="anchor" aria-hidden="true" href="#getters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getters</h3>
<ul>
<li>
<p><code>red</code>, <code>green</code>, <code>blue</code> extract channels from <code>AbstractRGB</code> types;
<code>gray</code> extracts the intensity from a grayscale object</p>
</li>
<li>
<p><code>alpha</code> extracts the alpha channel from any <code>Color</code> object
(returning 1 if there is no alpha channel)</p>
</li>
<li>
<p><code>comp1</code>, <code>comp2</code>, and <code>comp3</code> extract color components in the order
expected by the constructor</p>
</li>
</ul>
<h3><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h3>
<ul>
<li>
<p><code>mapc(f, c)</code> executes the function <code>f</code> on each color channel of <code>c</code>,
returning a new color in the same colorspace.</p>
</li>
<li>
<p><code>reducec(op, v0, c)</code> returns a single number based on a binary
operator <code>op</code> across the color channels of <code>c</code>. <code>v0</code> is the initial
value.</p>
</li>
<li>
<p><code>mapreducec(f, op, v0, c)</code> is similar to <code>reducec</code> except it applies
<code>f</code> to each color channel before combining values with <code>op</code>.</p>
</li>
</ul>
<h2><a id="user-content-extending-colortypes-and-colors" class="anchor" aria-hidden="true" href="#extending-colortypes-and-colors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extending ColorTypes and Colors</h2>
<p>In most cases, adding a new color space is quite straightforward:</p>
<ul>
<li>Add your new type to <a href="src/types.jl"><code>types.jl</code></a>, following the model of the other color types;</li>
<li>Add the type to the list of exports in <a href="src/ColorTypes.jl"><code>ColorTypes.jl</code></a>;</li>
<li>In the Colors package, add <a href="https://github.com/JuliaGraphics/Colors.jl/blob/master/src/conversions.jl">conversions</a> to and from your new colorspace.</li>
</ul>
<p>In special cases, there may be other considerations:</p>
<ul>
<li>For RGB-related types, 0 means "black" and 1 means "saturated." If your type has unusual numeric interpretation, you may need to add a new number type to <a href="https://github.com/JeffBezanson/FixedPointNumbers.jl">FixedPointNumbers</a> and set up appropriate <code>eltype_default</code> and <code>eltype_ub</code> traits.</li>
<li>If your type has extra fields, check the "Generated code" section of <code>types.jl</code> carefully. You may need to define a <code>colorfields</code> function and/or call <code>@make_constructors</code> or <code>@make_alpha</code> manually.</li>
</ul>
</article></div>