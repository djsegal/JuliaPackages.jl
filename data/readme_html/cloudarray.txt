<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>#Paper</p>
<p>CloudArray paper was published at <a href="http://www.igarss2016.org" rel="nofollow">IGARSS 2016</a>: <strong><a href="http://ieeexplore.ieee.org/document/7729158/" rel="nofollow">CloudArray: Easing huge image processing</a></strong>.</p>
<p>#Table of Contents</p>
<ol>
<li><a href="https://github.com/gsd-ufal/CloudArray.jl#overview">Overview</a></li>
<li><a href="https://github.com/gsd-ufal/CloudArray.jl#architecture">Architecture</a></li>
<li><a href="https://github.com/gsd-ufal/CloudArray.jl#installation">Installation</a></li>
<li><a href="https://github.com/gsd-ufal/CloudArray.jl#usage">Usage</a></li>
</ol>
<h1><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h1>
<p><strong>CloudArray</strong> (<a href="http:/cloudarraybox.cloudapp.net/"><strong><span>try it here!</span></strong></a>) is a programming abstraction that eases big data programming in the cloud. CloudArray loads data from files then books and configures the right amount of resources (VMs, containers) able to process it. Data loading and resource management are entirely automatic and performed on-demand.</p>
<p>CloudArray builds on top of <a href="http://julialang.org" rel="nofollow">Julia</a> native <a href="https://github.com/JuliaParallel/DistributedArrays.jl">DistributedArrays</a> abstraction, a multi-dimensional array whose data is transparently stored at distributed computers. Indeed, <em>a CloudArray is a DistributedArray whose data and resource managements are automatic</em> as the figure bellow illustrates: data load, VM booking, Julia workers configuration on top of Docker containers.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figures/cloudarray_overview.png"><img src="docs/figures/cloudarray_overview.png" alt="CloudArray Architecture" title="CloudArray Architecture" style="max-width:100%;"></a></p>
<p>Therefore, existent codes that use DistributedArrays don't need to be adapted in order to use CloudArray. You just need to include CloudArray and use your cloud account, no need to manually interact with your cloud provider.</p>
<p>You are very welcome to <a href="http:/cloudarraybox.cloudapp.net/"><strong><span>try CloudArray from CloudArrayBox</span></strong></a>, a Web front end hosted at Azure.</p>
<h1><a id="user-content-architecture" class="anchor" aria-hidden="true" href="#architecture"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Architecture</h1>
<p>CloudArray design is composed by two layers (c.f. Figure Architecture):</p>
<ul>
<li><strong>CloudArray.jl</strong> is an extension of <a href="https://github.com/JuliaParallel/DistributedArrays.jl">DistributedArrays.jl</a> which automatically loads data from files (or other I/O stream) and store it at distributed Workers as DArray.</li>
<li><strong>Infra.jl</strong> books virtual machines (VMs) and creates, configures, and instantiates Docker containers on top of VMs. Then Julia Workers are configured and deployed on containers.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figures/cloudarray_layers.png"><img src="docs/figures/cloudarray_layers.png" alt="CloudArray Architecture" title="CloudArray Architecture" style="max-width:100%;"></a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<h3><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements</h3>
<h4><a id="user-content-julia-04" class="anchor" aria-hidden="true" href="#julia-04"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Julia 0.4</h4>
<p><a href="http://julialang.org/downloads/" rel="nofollow">Download Julia 0.4</a></p>
<h4><a id="user-content-sshpass" class="anchor" aria-hidden="true" href="#sshpass"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>sshpass</code></h4>
<p>Debian-based Linux distros as Ubuntu or through</p>
<pre><code>sudo apt-get install sshpass 
</code></pre>
<p>OS X through <a href="http://macports.org" rel="nofollow">macports</a>:</p>
<pre><code>sudo port install sshpass
</code></pre>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>First load CloudArray package:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CloudArray</pre></div>
<p>Then tell CloudAarray the machine address and the password to passwordless SSH login:</p>
<div class="highlight highlight-source-julia"><pre>CloudArray<span class="pl-k">.</span><span class="pl-c1">set_host</span>(host_address,ssh_password)</pre></div>
<p>To use CloudArrayBox VMs to test CloudArray use the following parameters:</p>
<div class="highlight highlight-source-julia"><pre>CloudArray<span class="pl-k">.</span><span class="pl-c1">set_host</span>(<span class="pl-s"><span class="pl-pds">"</span>cloudarray.ddns.net<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cloudarray@<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-execution-environment" class="anchor" aria-hidden="true" href="#execution-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Execution environment</h2>
<h3><a id="user-content-cloudarraybox-master-and-workers" class="anchor" aria-hidden="true" href="#cloudarraybox-master-and-workers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CloudArrayBox: Master and Workers</h3>
<p>You may <a href="http:/cloudarraybox.cloudapp.net/"><strong>try CloudArray from your browser (CloudArrayBox)</strong></a>, without installing any software at all. Just login with your Google account and run both Julia interface (Master) and cloud processing backend (Workers).</p>
<p>We just kindly ask you to not overload our few Azure VMs which are available to Julia community to test CloudArray for free. In other words, please do not run large parallel or high-processing codes.</p>
<h3><a id="user-content-master-at-your-computer-and-workers-at-cloudarraybox" class="anchor" aria-hidden="true" href="#master-at-your-computer-and-workers-at-cloudarraybox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Master at your computer and Workers at CloudArrayBox</h3>
<p>You can also use CloudArray your computer with your local Julia 0.4 installation ([see installation instructions](<a href="http://julialang.org/downloads/" rel="nofollow">Julia 0.4</a>)) and use CloudArrayBox to deploy Workers.</p>
<h3><a id="user-content-custom-runtime-environment" class="anchor" aria-hidden="true" href="#custom-runtime-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom runtime environment</h3>
<p>Otherwise, you can define a customized runtime environment with your own cloud provider having Master and Workers configured as you prefer.</p>
<h2><a id="user-content-main-constructors" class="anchor" aria-hidden="true" href="#main-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Main constructors</h2>
<p>CloudArray main constructors are very simple and can be created by using an <code>Array</code> or a file.</p>
<h3><a id="user-content-creating-a-cloudarray-from-an-array" class="anchor" aria-hidden="true" href="#creating-a-cloudarray-from-an-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a CloudArray from an <code>Array</code></h3>
<p>You just need to tell <code>DArray</code> constructor which <code>Array</code> should be used to construct your CloudArray:</p>
<pre><code>DArray(Array(...))
</code></pre>
<h4><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<p>In this example, we first create the array <code>arr</code> with 100 random numbers then we create a CloudArray with the <code>arr</code> data:</p>
<div class="highlight highlight-source-julia"><pre>arr <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
cloudarray_from_array <span class="pl-k">=</span> CloudArray<span class="pl-k">.</span><span class="pl-c1">DArray</span>(arr) <span class="pl-c"><span class="pl-c">#</span> will take less than one minute</span></pre></div>
<p>We can now access any <code>cloudarray_from_array</code> value as it would be a local array:</p>
<div class="highlight highlight-source-julia"><pre>cloudarray_from_array[<span class="pl-c1">57</span>]</pre></div>
<h3><a id="user-content-creating-a-cloudarray-from-a-file" class="anchor" aria-hidden="true" href="#creating-a-cloudarray-from-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a CloudArray from a file</h3>
<p>If you are dealing with big data, i.e., your RAM memory is not enough to store your data, you can create a CloudArray from a file.</p>
<div class="highlight highlight-source-julia"><pre>CloudArray<span class="pl-k">.</span><span class="pl-c1">DArray</span>(file_path)</pre></div>
<p><code>file_path</code> is the path to a text file in your local or distributed file system. All lines will be used to fill <code>DArray</code> elements sequentially. This constructor ignores empty lines.</p>
<h4><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h4>
<p>Let's first create a simple text file with 100 random numbers.</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>data.txt<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-k">if</span> i<span class="pl-k">==</span><span class="pl-c1">100</span>
        <span class="pl-c1">write</span>(f,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">rand</span>())</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">else</span>
        <span class="pl-c1">write</span>(f,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">rand</span>())</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>    
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(f)</pre></div>
<p>Then we create a CloudArray with <code>data.txt</code> file.</p>
<div class="highlight highlight-source-julia"><pre>CloudArray<span class="pl-k">.</span>cloudarray_from_file <span class="pl-k">=</span> <span class="pl-c1">DArray</span>(<span class="pl-s"><span class="pl-pds">"</span>data.txt<span class="pl-pds">"</span></span>)</pre></div>
<p>Let's perform a sum operation at <code>cloudarray_from_file</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">sum</span>(cloudarray_from_file)</pre></div>
<p>This sum was performed locally at the Master, you can exploit DArray fully parallelism with further functions such as parallel Maps (<code>pmap</code>) and Reductions. See <a href="http://docs.julialang.org/en/latest/manual/parallel-computing/" rel="nofollow">here more information on Parallel programming in Julia</a>.</p>
<h2><a id="user-content-core-constructor" class="anchor" aria-hidden="true" href="#core-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Core constructor</h2>
<p>If you want to tune your CloudArray, you can directly use the CloudArray core constructor:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">carray_from_task</span>(generator<span class="pl-k">::</span><span class="pl-c1">Task</span><span class="pl-k">=</span><span class="pl-c1">task_from_text</span>(<span class="pl-s"><span class="pl-pds">"</span>test.txt<span class="pl-pds">"</span></span>), is_numeric<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>, chunk_max_size<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">1024</span>,debug<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p>Arguments are:</p>
<ul>
<li><code>task_from_text</code> same as <code>file_path</code>.</li>
<li><code>is_numeric</code> set to <code>false</code> if you need to load String instead of Float.</li>
<li><code>chunk_max_size</code> sets the maximum size that is allowed for each DArray chunk.</li>
<li><code>debug</code> enables debug mode.</li>
</ul>
<h3><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<p>As follows, we create a CloudArray by using the <code>data.txt</code> file which holds numeric values, then second argument is set to <code>true</code>. We'll set the third argument (<code>chunk_max_size</code>) to <code>500</code> so DArray chunks will not have more than 500 bytes each.</p>
<div class="highlight highlight-source-julia"><pre>custom_cloudarray_from_file <span class="pl-k">=</span> <span class="pl-c1">DArray</span>(<span class="pl-s"><span class="pl-pds">"</span>data.txt<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>, <span class="pl-c1">500</span>)</pre></div>
<p>Now let's define and perform a <a href="https://www.youtube.com/watch?v=JoRn4ryMclc" rel="nofollow">parallel reduction</a> at the just-created CloudArray:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">parallel_reduce</span>(f,darray) <span class="pl-k">=</span> <span class="pl-c1">reduce</span>(f, <span class="pl-c1">map</span>(fetch, { <span class="pl-c1">@spawnat</span> p <span class="pl-c1">reduce</span>(f, <span class="pl-c1">localpart</span>(darray)) <span class="pl-k">for</span> p <span class="pl-k">in</span> <span class="pl-c1">workers</span>()} ))
<span class="pl-c1">parallel_reduce</span>(<span class="pl-k">+</span>,custom_cloudarray_from_file)</pre></div>
<p>The result is the sum of all values of <code>custom_cloudarray_from_file</code>. Each DArray chunk performed in parallel the sum of the part of the DArrau it holds. The result is sent to the Master which performs the final sum. The function <code>map</code> is used to get the values with the <code>fetch</code> function.</p>
<p>You don't really need to know it, but if you are curious on how your data is stored, you can get further information such as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@show</span> custom_cloudarray_from_file<span class="pl-k">.</span>chunks
<span class="pl-c1">@show</span> custom_cloudarray_from_file<span class="pl-k">.</span>cuts
<span class="pl-c1">@show</span> custom_cloudarray_from_file<span class="pl-k">.</span>dims
<span class="pl-c1">@show</span> custom_cloudarray_from_file<span class="pl-k">.</span>indexes
<span class="pl-c1">@show</span> custom_cloudarray_from_file<span class="pl-k">.</span>pids</pre></div>
<p>Please read <a href="https://github.com/JuliaParallel/DistributedArrays.jl">DistributedArrays documentation</a> to better understand these low-level details if you want.</p>
<h2><a id="user-content-infrajl-documentation" class="anchor" aria-hidden="true" href="#infrajl-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>Infra.jl</code> documentation</h2>
<p>Infra.jl provides <strong>an interface to manage Docker containers</strong> on top of Ubuntu machines. Infra.jl allows to configure, create, delete, list, and monitors containers as described next.</p>
<h3><a id="user-content-set_hosthabstractstringpabstractstring" class="anchor" aria-hidden="true" href="#set_hosthabstractstringpabstractstring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>set_host(h::AbstractString,p::AbstractString)</h3>
<p>Configures passwordless SSH connections at host <code>h</code> whose password is <code>p</code>.</p>
<p>This function calls the <code>cloud_setup.sh</code> script which requires <code>sshpass</code>.</p>
<pre lang="Example"><code>CloudArray.set_host("cloudarray.cloudapp.net","password")
</code></pre>
<h3><a id="user-content-create_containersn_of_containersinteger-n_of_cpusinteger-mem_sizeinteger" class="anchor" aria-hidden="true" href="#create_containersn_of_containersinteger-n_of_cpusinteger-mem_sizeinteger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>create_containers(n_of_containers::Integer, n_of_cpus::Integer, mem_size::Integer)</h3>
<p>Launches Docker containers and adds them as Julia workers configured with passwordless SSH.
This function requires <code>sshpass</code> to be installed:</p>
<ul>
<li>Debian-based Linux distros as Ubuntu:</li>
</ul>
<pre><code>sudo apt-get install sshpass
</code></pre>
<ul>
<li>OS X through <a href="http://macports.org" rel="nofollow">macports</a>:</li>
</ul>
<pre><code>sudo port install sshpass
</code></pre>
<pre lang="Example"><code>create_containers(2,3,1024) # 2 containers with 3 CPU Cores and 1gb RAM
create_containers(1,2,512)  # 1 container with 2 CPU Cores and 512mb RAM
</code></pre>
<h3><a id="user-content-delete_containersargs" class="anchor" aria-hidden="true" href="#delete_containersargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>delete_containers(args...)</h3>
<p>Removes the specified container(s)/worker(s).</p>
<pre lang="Example"><code>delete_containers(3)    # delete container 3
create_containers(1:5)  # delete from 1st to 5th container
create_containers(all)  # delete all containers
</code></pre>
<h3><a id="user-content-containers" class="anchor" aria-hidden="true" href="#containers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>containers()</h3>
<p>Returns the list of all containers' processes identifiers (IDs).</p>
<pre lang="Example"><code>containers()
</code></pre>
<h3><a id="user-content-ncontainers" class="anchor" aria-hidden="true" href="#ncontainers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ncontainers()</h3>
<p>Gets the number of available container processes.</p>
<pre lang="Example"><code>ncontainers()
</code></pre>
<h3><a id="user-content-list_containers" class="anchor" aria-hidden="true" href="#list_containers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>list_containers()</h3>
<p>List container(s) as a sorted list.</p>
<pre lang="Example"><code>list_containers()
</code></pre>
<h3><a id="user-content-mem_usagekeyinteger" class="anchor" aria-hidden="true" href="#mem_usagekeyinteger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>mem_usage(key::Integer)</h3>
<p>Returns the container memory usage.</p>
<pre lang="Example"><code>mem_usage(number_of_container)
</code></pre>
<h3><a id="user-content-cpu_usagekeyinteger" class="anchor" aria-hidden="true" href="#cpu_usagekeyinteger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>cpu_usage(key::Integer)</h3>
<p>Returns the container CPU usage (%).</p>
<pre lang="Example"><code>cpu_usage(number_of_container)
</code></pre>
<h3><a id="user-content-io_usagekeyinteger" class="anchor" aria-hidden="true" href="#io_usagekeyinteger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>io_usage(key::Integer)</h3>
<p>Returns the number of kilobytes read and written by the cgroup.</p>
<pre lang="Example"><code>io_usage(number_of_container)
</code></pre>
<h3><a id="user-content-net_usagekeyinteger" class="anchor" aria-hidden="true" href="#net_usagekeyinteger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>net_usage(key::Integer)</h3>
<p>Returns networking TX/RX usage.</p>
<p>tx = number of bytes transmitted</p>
<p>rx = number of bytes reiceved</p>
<pre lang="Example"><code>net_usage(number_of_container)
</code></pre>
<h2><a id="user-content-future-features" class="anchor" aria-hidden="true" href="#future-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Future Features</h2>
<ul>
<li>Support other cloud infrastructures
<ul>
<li>Amazon EC2</li>
<li>OpenStack</li>
</ul>
</li>
<li>Set a price threshold</li>
<li>Provide different QoS
<ul>
<li>E.g., Pricy and fastest vs. Cheapest and not so fast</li>
</ul>
</li>
<li>Add the following containers monitoring functions:
<ul>
<li><code>io_usage(key::Integer)</code></li>
</ul>
</li>
<li>Let users define which CSV separator should be used</li>
<li>RESTful API</li>
<li>CloudDataFrame: extend CloudArray to support DataFrame</li>
<li>Use Azure REST API</li>
<li>Redundancy: if Julia fails, it removes containers (mask this fault)</li>
<li>Create tests</li>
<li>Use <a href="https://github.com/IntelLabs/ParallelAccelerator.jl">@acc</a> to improve performance</li>
</ul>
<h2><a id="user-content-bugfix" class="anchor" aria-hidden="true" href="#bugfix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BUGFIX</h2>
<ul>
<li>Explicitly release resources (containers and VMs) after usage</li>
<li>Use Julia Module to be able to call <code>cloud_setup.sh</code></li>
<li>CloudArrayBox logo transparent</li>
<li>Replace <code>sshpass</code> by another means to authenticate through SSH
<ul>
<li>maybe require users' public key?</li>
</ul>
</li>
</ul>
<h1><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgements</h1>
<p>CloudArray is developed by the LaCCAN lab at the Computing Institute of the Federal University of Alagoas (Brazil). CloudArray is funded by <a href="http://research.microsoft.com/en-us/projects/azure/" rel="nofollow">Microsoft Azure Research Award</a>, Brazilian National Council for Scientific and Technological Development (CNPq), and Alagoas Research Foundation (FAPEAL).</p>
</article></div>