<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-threadpoolsjl" class="anchor" aria-hidden="true" href="#threadpoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreadPools.jl</h1>
<p dir="auto"><em>Improved thread management for background and nonuniform tasks</em></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">Documentation at <a href="https://tro3.github.io/ThreadPools.jl" rel="nofollow">https://tro3.github.io/ThreadPools.jl</a></p>
<p dir="auto">ThreadPools.jl is a simple package that exposes a few macros and functions
that mimic <code>Base.Threads.@threads</code>, <code>Base.map</code>, and <code>Base.foreach</code>. These
macros (and the underlying API) handle cases that the built-in functions are
not always well-suited for:</p>
<ul dir="auto">
<li>A group of tasks that the user wants to keep off of the primary thread</li>
<li>A group of tasks that are very nonuniform in duration</li>
</ul>
<p dir="auto">For the first case, ThreadPools exposes a <code>@bthreads</code> ("background threads")
macro that behaves identically to <code>Threads.@threads</code>, but keeps the
primary thread job-free.  There are also related <code>bmap</code> and <code>bforeach</code>
functions that mimic their <code>Base</code> counterparts, but with the same non-primary
thread usage.</p>
<p dir="auto">For the second case, the package exposes a <code>@qthreads</code> ("queued threads") macro.
This macro uses a different scheduling strategy to help with nonuniform jobs.
<code>@threads</code> and <code>@bthreads</code> first divide the incoming job list into equal job
"chunks", then launch each
chunk on a separate thread for processing.  If the jobs are not uniform, this
can lead to some long jobs all getting assigned to one thread, delaying
completion.  <code>@qthreads</code> does not pre-assign threads - it only starts a new
job as an old one finishes, so if a long job comes along, the other threads
will keep operating on the shorter ones.  <code>@qthreads</code> itself does use the
primary thread, but its cousin <code>@qbthreads</code> uses the same strategy but in the background.
There are also <code>qmap</code>, <code>qforeach</code>, <code>qbmap</code>, and <code>qbforeach</code>.</p>
<p dir="auto">The package also exposes a lower-level <code>@tspawnat</code> macro that mimics the
<code>Base.Threads.@spawn</code> macro, but allows direct thread assignment for users who
want to develop their own scheduling.</p>
<h3 dir="auto"><a id="user-content-simple-macrofunction-selection" class="anchor" aria-hidden="true" href="#simple-macrofunction-selection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Macro/Function Selection</h3>
<table>
<thead>
<tr>
<th></th>
<th>Foreground (primary allowed)</th>
<th>Background (primary forbidden)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Uniform tasks</strong></td>
<td><ul dir="auto"><li><code>Base.Threads.@threads</code></li><li><code>ThreadPools.tmap(fn, itrs)</code></li><li><code>ThreadPools.tforeach(fn, itrs)</code></li></ul></td>
<td><ul dir="auto"><li><code>ThreadPools.@bthreads</code></li><li><code>ThreadPools.bmap(fn, itrs)</code></li><li><code>ThreadPools.bforeach(fn, itrs)</code></li></ul></td>
</tr>
<tr>
<td><strong>Nonuniform tasks</strong></td>
<td><ul dir="auto"><li><code>ThreadPools.@qthreads</code></li><li><code>ThreadPools.qmap(fn, itrs)</code></li><li><code>ThreadPools.qforeach(fn, itrs)</code></li></ul></td>
<td><ul dir="auto"><li><code>ThreadPools.@qbthreads</code></li><li><code>ThreadPools.qbmap(fn, itrs)</code></li><li><code>ThreadPools.qbforeach(fn, itrs)</code></li></ul></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-job-logging-for-performance-tuning" class="anchor" aria-hidden="true" href="#job-logging-for-performance-tuning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Job Logging for Performance Tuning</h2>
<p dir="auto">Each of the above macros comes with a logging version that allows the user to
analyze the performance of the chosen strategy and thread count:</p>
<table>
<thead>
<tr>
<th></th>
<th>Foreground</th>
<th>Background</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Uniform tasks</strong></td>
<td><ul dir="auto"><li><code>ThreadPools.@logthreads</code></li><li><code>ThreadPools.logtmap(fn, itrs)</code></li><li><code>ThreadPools.logtforeach(fn, itrs)</code></li></ul></td>
<td><ul dir="auto"><li><code>ThreadPools.@logbthreads</code></li><li><code>ThreadPools.logbmap(fn, itrs)</code></li><li><code>ThreadPools.logbforeach(fn, itrs)</code></li></ul></td>
</tr>
<tr>
<td><strong>Nonuniform tasks</strong></td>
<td><ul dir="auto"><li><code>ThreadPools.@logqthreads</code></li><li><code>ThreadPools.logqmap(fn, itrs)</code></li><li><code>ThreadPools.logqforeach(fn, itrs)</code></li></ul></td>
<td><ul dir="auto"><li><code>ThreadPools.@logqbthreads</code></li><li><code>ThreadPools.logqbmap(fn, itrs)</code></li><li><code>ThreadPools.logqbforeach(fn, itrs)</code></li></ul></td>
</tr>
</tbody>
</table>
<p dir="auto">Please see below for usage examples.</p>
<h2 dir="auto"><a id="user-content-advanced-api" class="anchor" aria-hidden="true" href="#advanced-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced API</h2>
<p dir="auto">The above macros invoke two base structures, <code>StaticPool</code> and <code>QueuePool</code>, each of which can
be assigned to a subset of the available threads.  This allows for composition with the
<code>pwith</code> and <code>@pthreads</code> command, and usage in more complex scenarios, such as stack
processing.  See  <a href="https://tro3.github.io/ThreadPools.jl" rel="nofollow">https://tro3.github.io/ThreadPools.jl</a> for more detail.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Each of the simple API functions can be used like the <code>Base</code> versions of the
same function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @qbthreads for x in 1:3
         println(&quot;$x $(Threads.threadid())&quot;)
       end
2 3
3 4
1 2

julia&gt; bmap([1,2,3]) do x
         println(&quot;$x $(Threads.threadid())&quot;)
         x^2
       end
2 3
3 4
1 2
3-element Array{Int64,1}:
 1
 4
 9

julia&gt; t = @tspawnat 4 Threads.threadid()
Task (runnable) @0x0000000010743c70

julia&gt; fetch(t)
4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@qbthreads</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
         <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$x</span> <span class="pl-v">$(Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>())</span><span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
<span class="pl-c1">2</span> <span class="pl-c1">3</span>
<span class="pl-c1">3</span> <span class="pl-c1">4</span>
<span class="pl-c1">1</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bmap</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">do</span> x
         <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$x</span> <span class="pl-v">$(Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>())</span><span class="pl-pds">"</span></span>)
         x<span class="pl-k">^</span><span class="pl-c1">2</span>
       <span class="pl-k">end</span>
<span class="pl-c1">2</span> <span class="pl-c1">3</span>
<span class="pl-c1">3</span> <span class="pl-c1">4</span>
<span class="pl-c1">1</span> <span class="pl-c1">2</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">@tspawnat</span> <span class="pl-c1">4</span> Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>()
Task (runnable) @<span class="pl-c1">0x0000000010743c70</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fetch</span>(t)
<span class="pl-c1">4</span></pre></div>
<p dir="auto">Note that the first two examples above use the background versions and no
threadid==1 is seen.  Also note that while the execution order is not
guaranteed across threads, but the result of <code>bmap</code> will of course match
the input.</p>
<h2 dir="auto"><a id="user-content-logger-usage" class="anchor" aria-hidden="true" href="#logger-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Logger Usage</h2>
<p dir="auto">The logging versions of the above functions all produce an <code>AbstractThreadPool</code>
object that has an in-memory log of the start and stop times of each job that
ran through the pool.  A <code>PlotRecipe</code> from <code>RecipesBase</code> is exposed in the
package, so all that is needed to generate a visualization of the job times is
the <code>plot</code> command from <code>Plots</code>.  In these plots, each job is shown by index,
start time, and stop time and is given a color corresponding to its thread:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Plots

julia&gt; pool = logtforeach(x -&gt; sleep(0.1*x), 1:8);

julia&gt; plot(pool)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots

julia<span class="pl-k">&gt;</span> pool <span class="pl-k">=</span> <span class="pl-c1">logtforeach</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span><span class="pl-k">*</span>x), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(pool)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/800e5842dd02c818a0da32b59b287b05b4c4d9772aa0792b8d18a099af7cac4e/68747470733a2f2f74726f332e6769746875622e696f2f546872656164506f6f6c732e6a6c2f6275696c642f696d672f7374617469636c6f672e706e67"><img src="https://camo.githubusercontent.com/800e5842dd02c818a0da32b59b287b05b4c4d9772aa0792b8d18a099af7cac4e/68747470733a2f2f74726f332e6769746875622e696f2f546872656164506f6f6c732e6a6c2f6275696c642f696d672f7374617469636c6f672e706e67" alt="tforeach plot" data-canonical-src="https://tro3.github.io/ThreadPools.jl/build/img/staticlog.png" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pool = logqforeach(x -&gt; sleep(0.1*x), 1:8);

julia&gt; plot(pool)"><pre>julia<span class="pl-k">&gt;</span> pool <span class="pl-k">=</span> <span class="pl-c1">logqforeach</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span><span class="pl-k">*</span>x), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(pool)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2ce02c4375108fbe1449aab90516a13c20caad0f0da41d1493d706abf2165cb0/68747470733a2f2f74726f332e6769746875622e696f2f546872656164506f6f6c732e6a6c2f6275696c642f696d672f716c6f672e706e67"><img src="https://camo.githubusercontent.com/2ce02c4375108fbe1449aab90516a13c20caad0f0da41d1493d706abf2165cb0/68747470733a2f2f74726f332e6769746875622e696f2f546872656164506f6f6c732e6a6c2f6275696c642f696d672f716c6f672e706e67" alt="qforeach plot" data-canonical-src="https://tro3.github.io/ThreadPools.jl/build/img/qlog.png" style="max-width: 100%;"></a></p>
<p dir="auto">Note the two different scheduling strategies are seen in the above plots. The
<code>tforeach</code> log shows that the jobs were assigned in order: 1 &amp; 2 to
thread 1, 3 &amp; 4 to thread 2, and so on.  The <code>qforeach</code> shows that each
job (any thread) is started when the previous job on that thread completes.
Because these jobs are very nonuniform (and stacked against the first
strategy), this results in the pre-assign method taking 25% longer.</p>
</article></div>