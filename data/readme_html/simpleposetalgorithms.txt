<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-simpleposetalgorithms" class="anchor" aria-hidden="true" href="#simpleposetalgorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SimplePosetAlgorithms</h1>
<p>Additional algorithms for the <code>SimplePoset</code> type. Relies on
<code>SimpleGraphAlgorithms</code>. See that module for more information.</p>
<p><strong>Note</strong>: Calculations are done via an integer linear program and
there can be quite slow.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions</h2>
<ul>
<li>
<p><code>max_chain(P)</code> returns a maximum size chain of the <code>SimplePoset</code>.</p>
</li>
<li>
<p><code>max_antichain(P)</code> returns a maximum size antichain of the
<code>SimplePoset</code></p>
</li>
<li>
<p><code>width(P)</code> returns the size of a largest antichain in the
<code>SimplePoset</code>. [<strong>Note</strong>: The function <code>height</code> (which gives the size
of a largest chain) is already defined in the <code>SimplePosets</code> module
and does not rely on integer linear programming.]</p>
</li>
<li>
<p><code>realizer(P,d)</code> returns a realizer of <code>P</code> with <code>d</code> linear extensions,
or throws an error if none exists. This is returned as a matrix with
<code>d</code> columns.</p>
</li>
<li>
<p><code>realize_poset(R)</code> creates a poset from a realizer. Here <code>R</code> is a
matrix whose columns are the linear orders of the realizer.</p>
</li>
<li>
<p><code>dimension(P)</code> returns the minimum size of a realizer. Use
<code>dimension(P,true)</code> for verbose reporting.</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">BooleanLattice</span>(<span class="pl-c1">5</span>)
SimplePoset{String} (<span class="pl-c1">32</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_chain</span>(P)
{<span class="pl-c1">00000</span>,<span class="pl-c1">00001</span>,<span class="pl-c1">01001</span>,<span class="pl-c1">11001</span>,<span class="pl-c1">11011</span>,<span class="pl-c1">11111</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_antichain</span>(P)
{<span class="pl-c1">00111</span>,<span class="pl-c1">01011</span>,<span class="pl-c1">01101</span>,<span class="pl-c1">01110</span>,<span class="pl-c1">10011</span>,<span class="pl-c1">10101</span>,<span class="pl-c1">10110</span>,<span class="pl-c1">11001</span>,<span class="pl-c1">11010</span>,<span class="pl-c1">11100</span>}

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Divisors</span>(<span class="pl-c1">30</span>)
SimplePoset{Int64} (<span class="pl-c1">8</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">realizer</span>(P,<span class="pl-c1">3</span>)
<span class="pl-c1">8</span><span class="pl-k">Ã—</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">1</span>
  <span class="pl-c1">3</span>   <span class="pl-c1">2</span>   <span class="pl-c1">3</span>
  <span class="pl-c1">5</span>   <span class="pl-c1">5</span>   <span class="pl-c1">2</span>
 <span class="pl-c1">15</span>  <span class="pl-c1">10</span>   <span class="pl-c1">6</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">3</span>   <span class="pl-c1">5</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">15</span>  <span class="pl-c1">15</span>
  <span class="pl-c1">6</span>   <span class="pl-c1">6</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">30</span>  <span class="pl-c1">30</span>  <span class="pl-c1">30</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">realize_poset</span>(ans) <span class="pl-k">==</span> P
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">BooleanLattice</span>(<span class="pl-c1">4</span>)
SimplePoset{String} (<span class="pl-c1">16</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dimension</span>(P,<span class="pl-c1">true</span>)
<span class="pl-c1">2</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">8</span>	looking <span class="pl-k">for</span> a <span class="pl-c1">5</span> realizer	confirmed
<span class="pl-c1">2</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>	looking <span class="pl-k">for</span> a <span class="pl-c1">3</span> realizer	none exists
<span class="pl-c1">4</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>	looking <span class="pl-k">for</span> a <span class="pl-c1">4</span> realizer	confirmed
<span class="pl-c1">4</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">4</span>	and we<span class="pl-k">'</span>re done
<span class="pl-c1">4</span></pre></div>
</article></div>