<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simpleposetalgorithms" class="anchor" aria-hidden="true" href="#simpleposetalgorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimplePosetAlgorithms</h1>
<p><a href="https://travis-ci.com/scheinerman/SimplePosetAlgorithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f0260e9e3e8601bd1a84c652d542233aec9558ccd6a0af9790d1371eba9b2fc5/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f53696d706c65506f736574416c676f726974686d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/SimplePosetAlgorithms.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Additional algorithms for the <code>SimplePoset</code> type. Relies on
<code>SimpleGraphAlgorithms</code>. See that module for more information.</p>
<p><strong>Note</strong>: Calculations are done via an integer linear program and
there can be quite slow.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<ul>
<li>
<p><code>max_chain(P)</code> returns a maximum size chain of the <code>SimplePoset</code>.</p>
</li>
<li>
<p><code>max_antichain(P)</code> returns a maximum size antichain of the
<code>SimplePoset</code></p>
</li>
<li>
<p><code>width(P)</code> returns the size of a largest antichain in the
<code>SimplePoset</code>. [<strong>Note</strong>: The function <code>height</code> (which gives the size
of a largest chain) is already defined in the <code>SimplePosets</code> module
and does not rely on integer linear programming.]</p>
</li>
<li>
<p><code>realizer(P,d)</code> returns a realizer of <code>P</code> with <code>d</code> linear extensions,
or throws an error if none exists. This is returned as a matrix with
<code>d</code> columns.</p>
</li>
<li>
<p><code>realize_poset(R)</code> creates a poset from a realizer. Here <code>R</code> is a
matrix whose columns are the linear orders of the realizer.</p>
</li>
<li>
<p><code>dimension(P)</code> returns the minimum size of a realizer. Use
<code>dimension(P,true)</code> for verbose reporting.</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; P = BooleanLattice(5)
SimplePoset{String} (32 elements)

julia&gt; max_chain(P)
{00000,00001,01001,11001,11011,11111}

julia&gt; max_antichain(P)
{00111,01011,01101,01110,10011,10101,10110,11001,11010,11100}

julia&gt; P = Divisors(30)
SimplePoset{Int64} (8 elements)

julia&gt; realizer(P,3)
8×3 Array{Int64,2}:
  1   1   1
  3   2   3
  5   5   2
 15  10   6
  2   3   5
 10  15  15
  6   6  10
 30  30  30

julia&gt; realize_poset(ans) == P
true

julia&gt; P = BooleanLattice(4)
SimplePoset{String} (16 elements)

julia&gt; dimension(P,true)
2 &lt;= dim(P) &lt;= 8	looking for a 5 realizer	confirmed
2 &lt;= dim(P) &lt;= 5	looking for a 3 realizer	none exists
4 &lt;= dim(P) &lt;= 5	looking for a 4 realizer	confirmed
4 &lt;= dim(P) &lt;= 4	and we're done
4
"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">BooleanLattice</span>(<span class="pl-c1">5</span>)
SimplePoset{String} (<span class="pl-c1">32</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_chain</span>(P)
{<span class="pl-c1">00000</span>,<span class="pl-c1">00001</span>,<span class="pl-c1">01001</span>,<span class="pl-c1">11001</span>,<span class="pl-c1">11011</span>,<span class="pl-c1">11111</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">max_antichain</span>(P)
{<span class="pl-c1">00111</span>,<span class="pl-c1">01011</span>,<span class="pl-c1">01101</span>,<span class="pl-c1">01110</span>,<span class="pl-c1">10011</span>,<span class="pl-c1">10101</span>,<span class="pl-c1">10110</span>,<span class="pl-c1">11001</span>,<span class="pl-c1">11010</span>,<span class="pl-c1">11100</span>}

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Divisors</span>(<span class="pl-c1">30</span>)
SimplePoset{Int64} (<span class="pl-c1">8</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">realizer</span>(P,<span class="pl-c1">3</span>)
<span class="pl-c1">8</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">1</span>
  <span class="pl-c1">3</span>   <span class="pl-c1">2</span>   <span class="pl-c1">3</span>
  <span class="pl-c1">5</span>   <span class="pl-c1">5</span>   <span class="pl-c1">2</span>
 <span class="pl-c1">15</span>  <span class="pl-c1">10</span>   <span class="pl-c1">6</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">3</span>   <span class="pl-c1">5</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">15</span>  <span class="pl-c1">15</span>
  <span class="pl-c1">6</span>   <span class="pl-c1">6</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">30</span>  <span class="pl-c1">30</span>  <span class="pl-c1">30</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">realize_poset</span>(ans) <span class="pl-k">==</span> P
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">BooleanLattice</span>(<span class="pl-c1">4</span>)
SimplePoset{String} (<span class="pl-c1">16</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dimension</span>(P,<span class="pl-c1">true</span>)
<span class="pl-c1">2</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">8</span>	looking <span class="pl-k">for</span> a <span class="pl-c1">5</span> realizer	confirmed
<span class="pl-c1">2</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>	looking <span class="pl-k">for</span> a <span class="pl-c1">3</span> realizer	none exists
<span class="pl-c1">4</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>	looking <span class="pl-k">for</span> a <span class="pl-c1">4</span> realizer	confirmed
<span class="pl-c1">4</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">dim</span>(P) <span class="pl-k">&lt;=</span> <span class="pl-c1">4</span>	and we<span class="pl-k">'</span>re done
<span class="pl-c1">4</span></pre></div>
</article></div>