<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://arzwa.github.io/Whale.jl/dev/index.html" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/arzwa/Whale.jl/actions/workflows/workflow.yaml"><img src="https://github.com/arzwa/Whale.jl/actions/workflows/workflow.yaml/badge.svg" alt="build" style="max-width:100%;"></a></p>
<h1><a id="user-content-whale-bayesian-gene-tree-reconciliation-and-whole-genome-duplication-inference-by-amalgamated-likelihood-estimation" class="anchor" aria-hidden="true" href="#whale-bayesian-gene-tree-reconciliation-and-whole-genome-duplication-inference-by-amalgamated-likelihood-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Whale: Bayesian gene tree reconciliation and whole-genome duplication inference by amalgamated likelihood estimation</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="#
#           .-------------'```'----....,,__                        _,
#          |                               `'`'`'`'-.,.__        .'(
#          |                                             `'--._.'   )
#          |                                                   `'-.&lt;
#          \               .-'`'-.                            -.    `\
#           \               -.o_.     _                     _,-'`\    |
#            ``````''--.._.-=-._    .'  \            _,,--'`      `-._(
#              (^^^^^^^^`___    '-. |    \  __,,..--'                 `
#               `````````   `'--..___\    |`
#                                     `-.,'
"><pre><span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c"><span class="pl-c">#</span>           .-------------'```'----....,,__                        _,</span>
<span class="pl-c"><span class="pl-c">#</span>          |                               `'`'`'`'-.,.__        .'(</span>
<span class="pl-c"><span class="pl-c">#</span>          |                                             `'--._.'   )</span>
<span class="pl-c"><span class="pl-c">#</span>          |                                                   `'-.&lt;</span>
<span class="pl-c"><span class="pl-c">#</span>          \               .-'`'-.                            -.    `\</span>
<span class="pl-c"><span class="pl-c">#</span>           \               -.o_.     _                     _,-'`\    |</span>
<span class="pl-c"><span class="pl-c">#</span>            ``````''--.._.-=-._    .'  \            _,,--'`      `-._(</span>
<span class="pl-c"><span class="pl-c">#</span>              (^^^^^^^^`___    '-. |    \  __,,..--'                 `</span>
<span class="pl-c"><span class="pl-c">#</span>               `````````   `'--..___\    |`</span>
<span class="pl-c"><span class="pl-c">#</span>                                     `-.,'</span></pre></div>
<p>Whale.jl is a julia library for joint inference of gene tree topologies and
their reconciliations to a species tree. Whale uses the <strong>amalgamation</strong> method
of Szollosi et al. (2014) to efficiently compute the marginal likelihood of the
gene family under a duplication-loss model of gene family evolution over a
distribution of tree topologies. Whale also implements a duplication-loss and
whole-genome duplication (DLWGD) model (Rabier et al. 2014, Zwaenepoel et al.
2019). The latter can be used for the inference of ancient whole-genome
duplications (WGDs) from gene trees while taking into account gene tree and
reconciliation uncertainty.</p>
<p>The likelihood routines implemented in Whale support <strong>automatic
differentiation</strong> using <code>ForwardDiff.jl</code>, allowing for efficient gradient-based
Maximum-likelihood estimation and Hamiltonian Monte Carlo (HMC) based Bayesian
inference. The library focuses on the Bayesian case, and implements relaxed
clock priors to model the evolution of gene duplication and loss rates. Lastly,
Whale allows to sample reconciled trees from the posterior distribution or a
parameterized DL(+WGD) model using a stochastic backtracking agorithm (as in
<a href="https://github.com/ssolo/ALE">ALE</a>).</p>
<p>Please have a look at the
<a href="https://arzwa.github.io/Whale.jl/dev/index.html" rel="nofollow">docs</a> for usage instructions
and documentation. You might want to get some minimal familiarity with the
Julia REPL and its package manager when using Whale, see <a href="https://docs.julialang.org/en/v1/" rel="nofollow">the julia
docs</a>.</p>
<p>Note that the scripts in the <code>scripts</code> directory might be helpful to prepare
data for Whale analyses.</p>
<h2><a id="user-content-quickstart-using-turing-and-a-constant-rates-model" class="anchor" aria-hidden="true" href="#quickstart-using-turing-and-a-constant-rates-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart using Turing and a constant-rates model</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Whale, NewickTree, Distributions, Turing, DataFrames
"><pre><span class="pl-k">using</span> Whale, NewickTree, Distributions, Turing, DataFrames</pre></div>
<p>Get the tree</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = deepcopy(Whale.extree)
n = length(postwalk(t))  # number of internal nodes
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(Whale<span class="pl-k">.</span>extree)
n <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">postwalk</span>(t))  <span class="pl-c"><span class="pl-c">#</span> number of internal nodes</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="17
"><pre><code>17
</code></pre></div>
<p>Now we add two WGD nodes to the tree. We do this by specifying the last common
ancestor node for the lineages that share the hypothetical WGD. By default, the
added node is halfway between the specified node and its parent.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="insertnode!(getlca(t, &quot;ATHA&quot;, &quot;ATHA&quot;), name=&quot;wgd&quot;)
insertnode!(getlca(t, &quot;ATHA&quot;, &quot;ATRI&quot;), name=&quot;wgd&quot;)
"><pre><span class="pl-c1">insertnode!</span>(<span class="pl-c1">getlca</span>(t, <span class="pl-s"><span class="pl-pds">"</span>ATHA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ATHA<span class="pl-pds">"</span></span>), name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>wgd<span class="pl-pds">"</span></span>)
<span class="pl-c1">insertnode!</span>(<span class="pl-c1">getlca</span>(t, <span class="pl-s"><span class="pl-pds">"</span>ATHA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ATRI<span class="pl-pds">"</span></span>), name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>wgd<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="0.6125
"><pre><code>0.6125
</code></pre></div>
<p>and we obtain a reference model object, here we will use a constant-rates model</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="θ = ConstantDLWGD(λ=0.1, μ=0.2, q=[0.2, 0.1], η=0.9)
r = Whale.RatesModel(θ, fixed=(:p,))
w = WhaleModel(r, t, .1);
"><pre>θ <span class="pl-k">=</span> <span class="pl-c1">ConstantDLWGD</span>(λ<span class="pl-k">=</span><span class="pl-c1">0.1</span>, μ<span class="pl-k">=</span><span class="pl-c1">0.2</span>, q<span class="pl-k">=</span>[<span class="pl-c1">0.2</span>, <span class="pl-c1">0.1</span>], η<span class="pl-k">=</span><span class="pl-c1">0.9</span>)
r <span class="pl-k">=</span> Whale<span class="pl-k">.</span><span class="pl-c1">RatesModel</span>(θ, fixed<span class="pl-k">=</span>(<span class="pl-c1">:p</span>,))
w <span class="pl-k">=</span> <span class="pl-c1">WhaleModel</span>(r, t, <span class="pl-c1">.1</span>);</pre></div>
<p>next we get the data (we need a model object for that)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ccd = read_ale(joinpath(&quot;example/example-1/ale&quot;), w)
"><pre>ccd <span class="pl-k">=</span> <span class="pl-c1">read_ale</span>(<span class="pl-c1">joinpath</span>(<span class="pl-s"><span class="pl-pds">"</span>example/example-1/ale<span class="pl-pds">"</span></span>), w)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="12-element Array{CCD{UInt16,Float64},1}:
 CCD{UInt16,Float64}(Γ=83, 𝓛=13)
 CCD{UInt16,Float64}(Γ=55, 𝓛=13)
 CCD{UInt16,Float64}(Γ=89, 𝓛=13)
 CCD{UInt16,Float64}(Γ=131, 𝓛=13)
 CCD{UInt16,Float64}(Γ=107, 𝓛=13)
 CCD{UInt16,Float64}(Γ=59, 𝓛=13)
 CCD{UInt16,Float64}(Γ=53, 𝓛=13)
 CCD{UInt16,Float64}(Γ=83, 𝓛=13)
 CCD{UInt16,Float64}(Γ=59, 𝓛=13)
 CCD{UInt16,Float64}(Γ=95, 𝓛=13)
 CCD{UInt16,Float64}(Γ=67, 𝓛=13)
 CCD{UInt16,Float64}(Γ=65, 𝓛=13)
"><pre><code>12-element Array{CCD{UInt16,Float64},1}:
 CCD{UInt16,Float64}(Γ=83, 𝓛=13)
 CCD{UInt16,Float64}(Γ=55, 𝓛=13)
 CCD{UInt16,Float64}(Γ=89, 𝓛=13)
 CCD{UInt16,Float64}(Γ=131, 𝓛=13)
 CCD{UInt16,Float64}(Γ=107, 𝓛=13)
 CCD{UInt16,Float64}(Γ=59, 𝓛=13)
 CCD{UInt16,Float64}(Γ=53, 𝓛=13)
 CCD{UInt16,Float64}(Γ=83, 𝓛=13)
 CCD{UInt16,Float64}(Γ=59, 𝓛=13)
 CCD{UInt16,Float64}(Γ=95, 𝓛=13)
 CCD{UInt16,Float64}(Γ=67, 𝓛=13)
 CCD{UInt16,Float64}(Γ=65, 𝓛=13)
</code></pre></div>
<p>Now we define the Turing model</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@model constantrates(model, ccd) = begin
    r  ~ MvLogNormal(ones(2))
    η  ~ Beta(3,1)
    q1 ~ Beta()
    q2 ~ Beta()
    ccd ~ model((λ=r[1], μ=r[2], η=η, q=[q1, q2]))
end

model = constantrates(w, ccd)
chain = sample(model, NUTS(0.65), 100)
pdf = DataFrame(chain)
first(pdf, 5)
"><pre><span class="pl-c1">@model</span> <span class="pl-en">constantrates</span>(model, ccd) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    r  <span class="pl-k">~</span> <span class="pl-c1">MvLogNormal</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">2</span>))
    η  <span class="pl-k">~</span> <span class="pl-c1">Beta</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)
    q1 <span class="pl-k">~</span> <span class="pl-c1">Beta</span>()
    q2 <span class="pl-k">~</span> <span class="pl-c1">Beta</span>()
    ccd <span class="pl-k">~</span> <span class="pl-c1">model</span>((λ<span class="pl-k">=</span>r[<span class="pl-c1">1</span>], μ<span class="pl-k">=</span>r[<span class="pl-c1">2</span>], η<span class="pl-k">=</span>η, q<span class="pl-k">=</span>[q1, q2]))
<span class="pl-k">end</span>

model <span class="pl-k">=</span> <span class="pl-c1">constantrates</span>(w, ccd)
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, <span class="pl-c1">NUTS</span>(<span class="pl-c1">0.65</span>), <span class="pl-c1">100</span>)
pdf <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(chain)
<span class="pl-c1">first</span>(pdf, <span class="pl-c1">5</span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="5×5 DataFrame
│ Row │ q1         │ q2       │ r[1]     │ r[2]     │ η        │
│     │ Float64    │ Float64  │ Float64  │ Float64  │ Float64  │
├─────┼────────────┼──────────┼──────────┼──────────┼──────────┤
│ 1   │ 0.0953611  │ 0.228601 │ 0.140129 │ 0.169225 │ 0.558353 │
│ 2   │ 0.130931   │ 0.217714 │ 0.129844 │ 0.164947 │ 0.760279 │
│ 3   │ 0.011601   │ 0.310436 │ 0.141782 │ 0.190466 │ 0.775876 │
│ 4   │ 0.00851225 │ 0.483908 │ 0.119012 │ 0.148087 │ 0.703354 │
│ 5   │ 0.023645   │ 0.147576 │ 0.118809 │ 0.144727 │ 0.785279 │
"><pre><code>5×5 DataFrame
│ Row │ q1         │ q2       │ r[1]     │ r[2]     │ η        │
│     │ Float64    │ Float64  │ Float64  │ Float64  │ Float64  │
├─────┼────────────┼──────────┼──────────┼──────────┼──────────┤
│ 1   │ 0.0953611  │ 0.228601 │ 0.140129 │ 0.169225 │ 0.558353 │
│ 2   │ 0.130931   │ 0.217714 │ 0.129844 │ 0.164947 │ 0.760279 │
│ 3   │ 0.011601   │ 0.310436 │ 0.141782 │ 0.190466 │ 0.775876 │
│ 4   │ 0.00851225 │ 0.483908 │ 0.119012 │ 0.148087 │ 0.703354 │
│ 5   │ 0.023645   │ 0.147576 │ 0.118809 │ 0.144727 │ 0.785279 │
</code></pre></div>
<p>We can sample reconciled trees from the posterior using a backtracking
algorithm</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="fun = (m, x)-&gt; Array(x) |&gt; x-&gt;m((λ=x[3], μ=x[4], η=x[5], q=x[1:2]))
tt = TreeTracker(w, ccd[end-1:end], pdf, fun)
trees = track(tt)
"><pre>fun <span class="pl-k">=</span> (m, x)<span class="pl-k">-&gt;</span> <span class="pl-c1">Array</span>(x) <span class="pl-k">|&gt;</span> x<span class="pl-k">-&gt;</span><span class="pl-c1">m</span>((λ<span class="pl-k">=</span>x[<span class="pl-c1">3</span>], μ<span class="pl-k">=</span>x[<span class="pl-c1">4</span>], η<span class="pl-k">=</span>x[<span class="pl-c1">5</span>], q<span class="pl-k">=</span>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]))
tt <span class="pl-k">=</span> <span class="pl-c1">TreeTracker</span>(w, ccd[<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>], pdf, fun)
trees <span class="pl-k">=</span> <span class="pl-c1">track</span>(tt)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="2-element Array{Whale.RecSummary,1}:
 RecSummary(# unique trees = 17)
 RecSummary(# unique trees = 24)
"><pre><code>2-element Array{Whale.RecSummary,1}:
 RecSummary(# unique trees = 17)
 RecSummary(# unique trees = 24)
</code></pre></div>
<p>Now we plot the MAP tree for the first family using <code>Luxor.jl</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PalmTree, Luxor
import Luxor: RGB

rectree = trees[1].trees[1].tree
outpath = joinpath(@__DIR__, &quot;example/example-1/tree.svg&quot;)
tl = TreeLayout(rectree, cladogram=true, dims=(350,300))
gray, blck = RGB(0.9, 0.9, 0.9), RGB()

@svg begin
    Luxor.origin(Point(0,20))
    setfont(&quot;Noto sans italic&quot;, 12)
    drawtree(tl, color=n-&gt;n.data.label != &quot;loss&quot; ? blck : gray)
    nodemap(tl, prewalk(rectree),
        (n, p) -&gt; !isleaf(n) ?
            settext(&quot;  $(n.data.cred)&quot;, p, valign=&quot;center&quot;) :
            settext(&quot;  $(split(n.data.name, &quot;_&quot;)[1])&quot;, p, valign=&quot;center&quot;))
    nodemap(tl, prewalk(rectree),
        (n, p) -&gt; n.data.label == &quot;duplication&quot; &amp;&amp; box(p, 8, 8, :fill))
    nodemap(tl, prewalk(rectree),
        (n, p) -&gt; startswith(n.data.label, &quot;wgd&quot;) &amp;&amp; star(p,3,5,3,0.5,:fill))
end 420 420 outpath;
"><pre><span class="pl-k">using</span> PalmTree, Luxor
<span class="pl-k">import</span> Luxor<span class="pl-k">:</span> RGB

rectree <span class="pl-k">=</span> trees[<span class="pl-c1">1</span>]<span class="pl-k">.</span>trees[<span class="pl-c1">1</span>]<span class="pl-k">.</span>tree
outpath <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>example/example-1/tree.svg<span class="pl-pds">"</span></span>)
tl <span class="pl-k">=</span> <span class="pl-c1">TreeLayout</span>(rectree, cladogram<span class="pl-k">=</span><span class="pl-c1">true</span>, dims<span class="pl-k">=</span>(<span class="pl-c1">350</span>,<span class="pl-c1">300</span>))
gray, blck <span class="pl-k">=</span> <span class="pl-c1">RGB</span>(<span class="pl-c1">0.9</span>, <span class="pl-c1">0.9</span>, <span class="pl-c1">0.9</span>), <span class="pl-c1">RGB</span>()

<span class="pl-c1">@svg</span> <span class="pl-k">begin</span>
    Luxor<span class="pl-k">.</span><span class="pl-c1">origin</span>(<span class="pl-c1">Point</span>(<span class="pl-c1">0</span>,<span class="pl-c1">20</span>))
    <span class="pl-c1">setfont</span>(<span class="pl-s"><span class="pl-pds">"</span>Noto sans italic<span class="pl-pds">"</span></span>, <span class="pl-c1">12</span>)
    <span class="pl-c1">drawtree</span>(tl, color<span class="pl-k">=</span>n<span class="pl-k">-&gt;</span>n<span class="pl-k">.</span>data<span class="pl-k">.</span>label <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">"</span>loss<span class="pl-pds">"</span></span> <span class="pl-k">?</span> blck <span class="pl-k">:</span> gray)
    <span class="pl-c1">nodemap</span>(tl, <span class="pl-c1">prewalk</span>(rectree),
        (n, p) <span class="pl-k">-&gt;</span> <span class="pl-k">!</span><span class="pl-c1">isleaf</span>(n) <span class="pl-k">?</span>
            <span class="pl-c1">settext</span>(<span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-v">$(n<span class="pl-k">.</span>data<span class="pl-k">.</span>cred)</span><span class="pl-pds">"</span></span>, p, valign<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>center<span class="pl-pds">"</span></span>) <span class="pl-k">:</span>
            <span class="pl-c1">settext</span>(<span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-v">$(<span class="pl-c1">split</span>(n<span class="pl-k">.</span>data<span class="pl-k">.</span>name, <span class="pl-s"><span class="pl-pds">"</span>_<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>])</span><span class="pl-pds">"</span></span>, p, valign<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>center<span class="pl-pds">"</span></span>))
    <span class="pl-c1">nodemap</span>(tl, <span class="pl-c1">prewalk</span>(rectree),
        (n, p) <span class="pl-k">-&gt;</span> n<span class="pl-k">.</span>data<span class="pl-k">.</span>label <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>duplication<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">box</span>(p, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>, <span class="pl-c1">:fill</span>))
    <span class="pl-c1">nodemap</span>(tl, <span class="pl-c1">prewalk</span>(rectree),
        (n, p) <span class="pl-k">-&gt;</span> <span class="pl-c1">startswith</span>(n<span class="pl-k">.</span>data<span class="pl-k">.</span>label, <span class="pl-s"><span class="pl-pds">"</span>wgd<span class="pl-pds">"</span></span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">star</span>(p,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">:fill</span>))
<span class="pl-k">end</span> <span class="pl-c1">420</span> <span class="pl-c1">420</span> outpath;</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="example/example-1/tree.svg"><img src="example/example-1/tree.svg" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citation</h2>
<p>If you use Whale, please cite:</p>
<blockquote>
<p><a href="https://academic.oup.com/mbe/article-abstract/36/7/1384/5475503" rel="nofollow">Zwaenepoel, A. and Van de Peer, Y., 2019. Inference of Ancient Whole-Genome Duplications and the Evolution of Gene Duplication and Loss Rates. <em>Molecular biology and evolution</em>, 36(7), pp.1384-1404.</a></p>
</blockquote>
<hr>
<p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>