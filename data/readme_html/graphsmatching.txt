<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graphsmatching" class="anchor" aria-hidden="true" href="#graphsmatching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GraphsMatching</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaGraphs/GraphsMatching.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0f0931b5c23b1303d6aca377fb221dc9a0642ac03106797ae10b3b3ef33cd62/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614772617068732f4772617068734d61746368696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphs/GraphsMatching.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/JuliaGraphs/GraphsMatching.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4cafd3a372b7cbaf4f172de69196bccb38f838ea12538ba928a6cda477b9dda4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614772617068732f4772617068734d61746368696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGraphs/GraphsMatching.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/JuliaGraphs/GraphsMatching.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cc7ba18dcce7ea2dc658cd6ac1113045ee8777cc024a117a3f65a2e9273257fe/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614772617068732f4772617068734d61746368696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGraphs/GraphsMatching.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Matching algorithms on top of <a href="https://github.com/JuliaGraphs/Graphs.jl">Graphs.jl</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The results of any matching is returned as a <code>MatchingResult</code> struct
containing the <code>mate</code> and <code>weight</code> fields.</p>
<h3 dir="auto"><a id="user-content-perfect-matching" class="anchor" aria-hidden="true" href="#perfect-matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Perfect matching</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g = complete_graph(4)
w = Dict{Edge,Float64}()
w[Edge(1,3)] = 10
w[Edge(1,4)] = 0.5
w[Edge(2,3)] = 11
w[Edge(2,4)] = 2
w[Edge(1,2)] = 100

# find the perfect matching of minimum weight
match = minimum_weight_perfect_matching(g, w, 50)
# match.mate[1] == 4
# match.mate[4] == 1
# match.mate[2] == 3
# match.mate[3] == 2
# match.weight ≈ 11.5"><pre>g <span class="pl-k">=</span> <span class="pl-c1">complete_graph</span>(<span class="pl-c1">4</span>)
w <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Edge,Float64}</span>()
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)] <span class="pl-k">=</span> <span class="pl-c1">10</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>)] <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)] <span class="pl-k">=</span> <span class="pl-c1">11</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)] <span class="pl-k">=</span> <span class="pl-c1">2</span>
w[<span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)] <span class="pl-k">=</span> <span class="pl-c1">100</span>

<span class="pl-c"><span class="pl-c">#</span> find the perfect matching of minimum weight</span>
match <span class="pl-k">=</span> <span class="pl-c1">minimum_weight_perfect_matching</span>(g, w, <span class="pl-c1">50</span>)
<span class="pl-c"><span class="pl-c">#</span> match.mate[1] == 4</span>
<span class="pl-c"><span class="pl-c">#</span> match.mate[4] == 1</span>
<span class="pl-c"><span class="pl-c">#</span> match.mate[2] == 3</span>
<span class="pl-c"><span class="pl-c">#</span> match.mate[3] == 2</span>
<span class="pl-c"><span class="pl-c">#</span> match.weight ≈ 11.5</span></pre></div>
<h3 dir="auto"><a id="user-content-maximum-weight-matching" class="anchor" aria-hidden="true" href="#maximum-weight-matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Maximum weight matching</h3>
<p dir="auto">A maximum weight matching is solved as a Linear Programming
problem and requires an LP optimizer for bipartite graphs and a MILP solver for general graphs respecting the <a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a> optimizer interface. A list of solvers can be found in the <a href="http://www.juliaopt.org/JuMP.jl/v0.19.0/installation/#Getting-Solvers-1" rel="nofollow">JuMP documentation</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Cbc #import a MILP solver
g = complete_graph(3)
w = zeros(3,3)
w[1,2] = 1
w[3,2] = 1
w[1,3] = 1
match = maximum_weight_matching(g,with_optimizer(Cbc.Optimizer, logLevel=0),w)
# match.weight ≈ 1"><pre><span class="pl-k">using</span> JuMP, Cbc <span class="pl-c"><span class="pl-c">#</span>import a MILP solver</span>
g <span class="pl-k">=</span> <span class="pl-c1">complete_graph</span>(<span class="pl-c1">3</span>)
w <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
w[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
w[<span class="pl-c1">3</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
w[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
match <span class="pl-k">=</span> <span class="pl-c1">maximum_weight_matching</span>(g,<span class="pl-c1">with_optimizer</span>(Cbc<span class="pl-k">.</span>Optimizer, logLevel<span class="pl-k">=</span><span class="pl-c1">0</span>),w)
<span class="pl-c"><span class="pl-c">#</span> match.weight ≈ 1</span></pre></div>
</article></div>