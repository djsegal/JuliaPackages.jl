<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fielddefaults" class="anchor" aria-hidden="true" href="#fielddefaults"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FieldDefaults</h1>
<p><a href="https://travis-ci.org/rafaqz/FieldDefaults.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c17d6869fc9a7008fcd57914abbc4f88b33ac2cd/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f4669656c6444656661756c74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/FieldDefaults.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/rafaqz/FieldDefaults.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b283c42a992082ef0acf0f2e50bcfd7b877beee0/687474703a2f2f636f6465636f762e696f2f6769746875622f72616661717a2f4669656c6444656661756c74732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rafaqz/FieldDefaults.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A lightweight package that adds keyword defaults to (the also lightweight!)
<a href="https://github.com/rafaqz/FieldMetadata.jl">FieldMetadata.jl</a>.</p>
<p>The <code>@default_kw</code> macro adds a keyword arg constructor to a type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@default_kw</span> <span class="pl-k">struct</span> MyStruct
    foo<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">|</span> <span class="pl-c1">1</span>
    bar<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">|</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">MyStruct</span>()
julia<span class="pl-k">&gt;</span> m<span class="pl-k">.</span>foo
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> m<span class="pl-k">.</span>bar
<span class="pl-c1">2</span></pre></div>
<p>It has a similar outcome (though entirely difference mechanism) to
Parameters.jl. It has some limitations: presently it only adds an outside
constructor, and defaults can't use the other default values.</p>
<p>But it has some other nice features. Defaults can be added to a struct that has
already been defined by prefixing <code>re</code> to the macro name, as in
FieldMetadata.jl:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> SomeoneElseDefined
    foo<span class="pl-k">::</span><span class="pl-c1">Int</span>
    bar<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-c1">@redefault</span> <span class="pl-k">struct</span> SomeoneElseDefined
    foo <span class="pl-k">|</span> <span class="pl-c1">7</span>
    bar <span class="pl-k">|</span> <span class="pl-c1">19</span>
<span class="pl-k">end</span></pre></div>
<p>Each default value can also be overridden by declaring a new function:</p>
<pre><code>default(::YourType, ::Type{Val{:fieldname}}) = 99
</code></pre>
<p>The <code>u@default_kw</code> behaves as <code>@default_kw</code> but combines defaults
with the units metadata field in the constructor.</p>
<h2><a id="user-content-additional-info" class="anchor" aria-hidden="true" href="#additional-info"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional info</h2>
<p>Extra metadata fields are easy to add to a struct at definition time or
afterwards, using a <a href="https://github.com/rafaqz/FieldMetadata.jl">@metadata</a> macro.</p>
<p>Default values of single structs or more complex composite types can be
flattened to tuples or vectors using
<a href="https://github.com/rafaqz/Flatten.jl">Flatten.jl</a>. This can be combined with
fieldnames, other metadata and current field values for generating tabular
displays, or other uses.</p>
</article></div>