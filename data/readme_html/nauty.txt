<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nautyjl" class="anchor" aria-hidden="true" href="#nautyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nauty.jl</h1>
<p>Simple wrapper for using <code>nauty</code>, a graph isomorphism package, with <code>LightGraphs</code> in Julia. Requires <code>gcc</code> and a POSIX style build environment.</p>
<p><strong>Currently under development. Interface may change / break by the day.</strong></p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage</h2>
<p>Check if two graphs are isomorphs of each other:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">baked_canonical_form</span>(g1)<span class="pl-k">.</span>canong <span class="pl-k">==</span> <span class="pl-c1">baked_canonical_form</span>(g2)<span class="pl-k">.</span>canong</pre></div>
<p>LightGraphs interface:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Nauty
BenchmarkTools<span class="pl-k">.</span><span class="pl-c1">@btime</span> LightGraphs<span class="pl-k">.</span>Experimental<span class="pl-k">.</span><span class="pl-c1">has_isomorph</span>(g1,g2,alg<span class="pl-k">=</span><span class="pl-c1">NautyAlg</span>())</pre></div>
<p>If you need to provide custom options to nauty, use <code>densenauty(g, optionblk(optionblk_mutable(DEFAULTOPTIONS_GRAPH)))</code>, but be aware that it is around 2-4x slower than using baked in options as Julia cannot optimise across the <code>C</code> boundary. Consider baking your own.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Todo</h2>
<ul>
<li>Friendlier return types</li>
<li>NautyGraph -&gt; LightGraph</li>
<li>MetaGraph -&gt; (NautyGraph, labels, partition)</li>
<li>isomorphOf() / congruence operator</li>
<li>Documentation (documenter.jl)</li>
<li>Pick a licence</li>
<li>More comprehensive tests if we feel like it</li>
<li>Build options
<ul>
<li>Test <code>MAXN=WORDSIZE</code> optimisation effect. Build nauty twice if it matters, once with MAXN=0 if not</li>
</ul>
</li>
<li>Use baked_canonical_form automatically</li>
</ul>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h2>
<p>canonical_isomorph(g: LightGraph) -&gt; g'
canonical_isomorph(g: ColouredGraph) -&gt; g'
- We'll have to use the relabelling information to make g'</p>
<p>isisomorph(g1, g2) -&gt; bool
operator overload (congruence sign?)</p>
<p>nauty(g, options) -&gt; all the stuff nauty gives</p>
</article></div>