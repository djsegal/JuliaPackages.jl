<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ppqijl" class="anchor" aria-hidden="true" href="#ppqijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PPQI.jl</h1>
<p>Julia Version PaddlePaddle Quick Inference.</p>
<h1><a id="user-content-install-package" class="anchor" aria-hidden="true" href="#install-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install Package</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg

Pkg.add(url=&quot;https://github.com/AgentMaker/PPQI.jl&quot;)
"><pre><span class="pl-k">using</span> Pkg

Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/AgentMaker/PPQI.jl<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-api-reference" class="anchor" aria-hidden="true" href="#api-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API Reference</h1>
<ul>
<li>
<p>load_config:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function load_config(
  modelpath::String, 
  use_gpu::Bool=false, 
  gpu_id::Int=0, 
  use_mkldnn::Bool=false, 
  cpu_treads::Int=1
)::PyObject

  return config::PyObject
"><pre><span class="pl-k">function</span> <span class="pl-en">load_config</span>(
  modelpath<span class="pl-k">::</span><span class="pl-c1">String</span>, 
  use_gpu<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, 
  gpu_id<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">0</span>, 
  use_mkldnn<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>, 
  cpu_treads<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>
)<span class="pl-k">::</span><span class="pl-c1">PyObject</span>

  <span class="pl-k">return</span> config<span class="pl-k">::</span><span class="pl-c1">PyObject</span></pre></div>
</li>
<li>
<p>load_model:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function load_model(
  config::PyObject
)::InferenceModel

  return model::InferenceModel
"><pre><span class="pl-k">function</span> <span class="pl-en">load_model</span>(
  config<span class="pl-k">::</span><span class="pl-c1">PyObject</span>
)<span class="pl-k">::</span><span class="pl-c1">InferenceModel</span>

  <span class="pl-k">return</span> model<span class="pl-k">::</span><span class="pl-c1">InferenceModel</span></pre></div>
</li>
<li>
<p>InferenceModel:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct InferenceModel
    predictor::PyObject
    input_handles::Vector{PyObject}
    output_handles::Vector{PyObject}
end
"><pre><span class="pl-k">struct</span> InferenceModel
    predictor<span class="pl-k">::</span><span class="pl-c1">PyObject</span>
    input_handles<span class="pl-k">::</span><span class="pl-c1">Vector{PyObject}</span>
    output_handles<span class="pl-k">::</span><span class="pl-c1">Vector{PyObject}</span>
<span class="pl-k">end</span></pre></div>
</li>
<li>
<p>model_forward:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function model_forward(
  model::InferenceModel, 
  input_datas::Vector
)::Vector

  return output_datas::Vector
"><pre><span class="pl-k">function</span> <span class="pl-en">model_forward</span>(
  model<span class="pl-k">::</span><span class="pl-c1">InferenceModel</span>, 
  input_datas<span class="pl-k">::</span><span class="pl-c1">Vector</span>
)<span class="pl-k">::</span><span class="pl-c1">Vector</span>

  <span class="pl-k">return</span> output_datas<span class="pl-k">::</span><span class="pl-c1">Vector</span></pre></div>
</li>
</ul>
</article></div>