<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mutable-strings" class="anchor" aria-hidden="true" href="#mutable-strings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mutable Strings</h1>
<p>Note: This package is now deprecated in favor of <a href="https://github.com/quinnj/Strings.jl">https://github.com/quinnj/Strings.jl</a> (see <a href="https://github.com/tanmaykm/MutableStrings.jl/issues/3">https://github.com/tanmaykm/MutableStrings.jl/issues/3</a>)</p>
<p>Large scale text processing often requires several changes to be made on large string objects. Using immutable strings can result in significant inefficiencies in such cases. Using byte arrays directly prevents us from using the convenient string methods. This package provides Mutable ASCII and UTF8 string types that allow mutating the string data through the familiar string methods.</p>
<h2><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h2>
<ul>
<li>MutableASCIIString: <code>immutable MutableASCIIString &lt;: DirectIndexString</code></li>
<li>MutableUTF8String: <code>immutable MutableUTF8String &lt;: String</code></li>
<li>MutableString: <code>typealias MutableString Union(MutableASCIIString, MutableUTF8String)</code></li>
</ul>
<h2><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods</h2>
<p>All methods on immutable strings can also be applied to a MutableString. Additionally the below methods allow modifications on MutableString objects:</p>
<h3><a id="user-content-case-conversion" class="anchor" aria-hidden="true" href="#case-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Case Conversion</h3>
<ul>
<li><code>uppercase!(s::MutableString)</code> : In-place uppercase conversion</li>
<li><code>lowercase!(s::MutableString)</code> : In-place lowercase conversion</li>
<li><code>ucfirst!(s::MutableString)</code> : Convert the first letter to uppercase in-place</li>
<li><code>lcfirst!(s::MutableString)</code> : Convert the first letter to lowercase in-place</li>
</ul>
<h3><a id="user-content-searchreplace" class="anchor" aria-hidden="true" href="#searchreplace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Search/Replace</h3>
<p>The usual <code>search</code> methods on String type also applies to MutableStrings.</p>
<p><code>replace!(s::MutableString, pattern, repl::Union(ByteString,Char,Function), limit::Integer=0)</code></p>
<p>The above method allows in-place replacement of patterns matching <code>pattern</code> with <code>repl</code> upto <code>limit</code> occurrences. If <code>limit</code> is zero, all occurrences are replaced.</p>
<p>As with search, the <code>pattern</code> argument may be a single character, a vector or a set of characters, a string, or a regular expression.</p>
<p>If <code>repl</code> is a ByteString, it replaces the matching region. If it is a Char, it replaces each character of the matching region. If <code>repl</code> is a function, it must accept a SubString representing the matching region and return either a Char or a ByteString to be used as the replacement.</p>
<h3><a id="user-content-others" class="anchor" aria-hidden="true" href="#others"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Others</h3>
<ul>
<li><code>setindex!(s::MutableString, x, i0::Real)</code></li>
<li><code>setindex!(s::MutableString, r::ByteString,I::Range1{T&lt;:Real})</code></li>
<li><code>setindex!(s::MutableString, c::Char, I::Range1{T&lt;:Real})</code></li>
<li><code>reverse!(s::MutableString)</code></li>
<li><code>map!(f, s::MutableString)</code></li>
</ul>
<p>Parts of a mutable string can be modified as:</p>
<pre><code>   s[10] = 'A'
   s[12:14] = "ABC"
</code></pre>
<h3><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h3>
<ul>
<li>Most operations on a MutableString are faster than those on an immutable String.</li>
<li>Replacing segments of mutable strings with different length replacements is slower than recreating the entire string.</li>
<li>MutableStrings are always more memory efficient than immutable Strings.</li>
</ul>
<table>
<tbody><tr><th> </th><th colspan="2">ASCIIString</th><th colspan="2">MutableASCIIString</th></tr>
<tr><th>function</th><th>time</th><th>bytes</th><th>time</th><th>bytes</th></tr>
<tr><td>case conversion</td><td>0.00499</td><td>700080</td><td>0.00476</td><td>0</td></tr>
<tr><td>reverse</td><td>0.0105</td><td>711384</td><td>0.0010</td><td>0</td></tr>
<tr><td>regex search and blank out matches</td><td>0.00679</td><td>917000</td><td>0.00295</td><td>64</td></tr>
<tr><td>regex search and delete matches</td><td>0.02495</td><td>6144072</td><td>1.01742</td><td>292768</td></tr>
</tbody></table>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h3>
<ul>
<li>Significant code has been duplicated from Julia base to specialize the MutableString methods. A proper type-reorganization would eliminate this.</li>
<li>The hash method on MutableString behaves similar to that on String. This can result in surprises when it is used as a key in collections.</li>
<li>Since UTF8 has variable character byte lengths, MutableUTF8String also allows replacing segments of the string with arbitrary length replacements, e.g: <code>s[10] = "ABC"</code>. This is inconsistent with behavior of MutableASCIIString, and remains to be debated.</li>
</ul>
</article></div>