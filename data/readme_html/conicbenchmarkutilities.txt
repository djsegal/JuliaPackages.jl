<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-conicbenchmarkutilities" class="anchor" aria-hidden="true" href="#conicbenchmarkutilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ConicBenchmarkUtilities</h1>
<p><a href="https://travis-ci.org/JuliaOpt/ConicBenchmarkUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/054329dd220474c0fb6ae09897fe46f601bfa52e/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f436f6e696342656e63686d61726b5574696c69746965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/ConicBenchmarkUtilities.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaOpt/ConicBenchmarkUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad747227cc9ca5c7bce2d9b306dffd33d622fc01/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614f70742f436f6e696342656e63686d61726b5574696c69746965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaOpt/ConicBenchmarkUtilities.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Utitilies to convert between <a href="http://cblib.zib.de/" rel="nofollow">CBF</a> and <a href="http://mathprogbasejl.readthedocs.io/en/latest/conic.html" rel="nofollow">MathProgBase conic format</a>.</p>
<h2><a id="user-content-how-to-read-and-solve-a-cbf-instance" class="anchor" aria-hidden="true" href="#how-to-read-and-solve-a-cbf-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to read and solve a CBF instance:</h2>
<div class="highlight highlight-source-julia"><pre>dat <span class="pl-k">=</span> <span class="pl-c1">readcbfdata</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/instance.cbf<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> .cbf.gz extension also accepted</span>

<span class="pl-c"><span class="pl-c">#</span> In MathProgBase format:</span>
c, A, b, con_cones, var_cones, vartypes, sense, objoffset <span class="pl-k">=</span> <span class="pl-c1">cbftompb</span>(dat)
<span class="pl-c"><span class="pl-c">#</span> Note: The sense in MathProgBase form is always minimization, and the objective offset is zero.</span>
<span class="pl-c"><span class="pl-c">#</span> If sense == :Max, you should flip the sign of c before handing off to a solver.</span>

<span class="pl-c"><span class="pl-c">#</span> Given the data in MathProgBase format, you can solve it using any corresponding solver which supports the cones present in the problem.</span>
<span class="pl-c"><span class="pl-c">#</span> To use ECOS, for example,</span>
<span class="pl-k">using</span> ECOS
solver <span class="pl-k">=</span> <span class="pl-c1">ECOSSolver</span>()
<span class="pl-c"><span class="pl-c">#</span> Now load and solve</span>
m <span class="pl-k">=</span> MathProgBase<span class="pl-k">.</span><span class="pl-c1">ConicModel</span>(<span class="pl-c1">ECOSSolver</span>(verbose<span class="pl-k">=</span><span class="pl-c1">0</span>))
MathProgBase<span class="pl-k">.</span><span class="pl-c1">loadproblem!</span>(m, c, A, b, con_cones, var_cones)
<span class="pl-c"><span class="pl-c">#</span> Continuous solvers need not implement setvartype!</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">all</span>(vartypes <span class="pl-k">.==</span> <span class="pl-c1">:Cont</span>)
    MathProgBase<span class="pl-k">.</span><span class="pl-c1">setvartype!</span>(m, vartypes)
<span class="pl-k">end</span>
MathProgBase<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(m)
<span class="pl-c"><span class="pl-c">#</span> Solution accessible through:</span>
x_sol <span class="pl-k">=</span> MathProgBase<span class="pl-k">.</span><span class="pl-c1">getsolution</span>(m)
objval <span class="pl-k">=</span> MathProgBase<span class="pl-k">.</span><span class="pl-c1">getobjval</span>(m)
<span class="pl-c"><span class="pl-c">#</span> If PSD vars are present, you can use the following utility to extract the solution in CBF form:</span>
scalar_solution, psdvar_solution <span class="pl-k">=</span> ConicBenchmarkUtilities<span class="pl-k">.</span><span class="pl-c1">mpb_sol_to_cbf</span>(dat,x_sol)</pre></div>
<h2><a id="user-content-how-to-write-a-cbf-instance" class="anchor" aria-hidden="true" href="#how-to-write-a-cbf-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to write a CBF instance:</h2>
<div class="highlight highlight-source-julia"><pre>newdat <span class="pl-k">=</span> <span class="pl-c1">mpbtocbf</span>(<span class="pl-s"><span class="pl-pds">"</span>example<span class="pl-pds">"</span></span>, c, A, b, con_cones, var_cones, vartypes, sense)
<span class="pl-c1">writecbfdata</span>(<span class="pl-s"><span class="pl-pds">"</span>example.cbf<span class="pl-pds">"</span></span>,newdat,<span class="pl-s"><span class="pl-pds">"</span># Comment for the CBF header<span class="pl-pds">"</span></span>)</pre></div>
<p>Note that because MathProgBase conic format is more general than CBF in specifying the mapping between variables and cones, <em>the order of the variables in the CBF file may not match the original order</em>. No reordering takes place if <code>var_cones</code> is trivial, i.e., <code>[(:Free,1:N)]</code> where <code>N</code> is the total number of variables.</p>
<h2><a id="user-content-how-to-write-a-jump-model-to-cbf-form" class="anchor" aria-hidden="true" href="#how-to-write-a-jump-model-to-cbf-form"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to write a JuMP model to CBF form:</h2>
<div class="highlight highlight-source-julia"><pre>m <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>])
<span class="pl-c1">@variable</span>(m, t)
<span class="pl-c1">@constraint</span>(m, <span class="pl-c1">norm</span>(x) <span class="pl-k">&lt;=</span> t)
ConicBenchmarkUtilities<span class="pl-k">.</span><span class="pl-c1">jump_to_cbf</span>(m, <span class="pl-s"><span class="pl-pds">"</span>soctest<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>soctest.cbf<span class="pl-pds">"</span></span>)</pre></div>
</article></div>