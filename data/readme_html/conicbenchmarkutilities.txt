<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-conicbenchmarkutilities" class="anchor" aria-hidden="true" href="#conicbenchmarkutilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ConicBenchmarkUtilities</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaOpt/ConicBenchmarkUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/05acef3f24cdade0a426515daadf78a4ed3f579a4753cb9148863b4da05f05a5/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f436f6e696342656e63686d61726b5574696c69746965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/ConicBenchmarkUtilities.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaOpt/ConicBenchmarkUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/644ffcf2ef787e75987ea012f930d15bb49923da6c251462341f83c38686aec2/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614f70742f436f6e696342656e63686d61726b5574696c69746965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaOpt/ConicBenchmarkUtilities.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Utitilies to convert between <a href="http://cblib.zib.de/" rel="nofollow">CBF</a> and <a href="http://mathprogbasejl.readthedocs.io/en/latest/conic.html" rel="nofollow">MathProgBase conic format</a>.</p>
<h2 dir="auto"><a id="user-content-how-to-read-and-solve-a-cbf-instance" class="anchor" aria-hidden="true" href="#how-to-read-and-solve-a-cbf-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to read and solve a CBF instance:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dat = readcbfdata(&quot;/path/to/instance.cbf&quot;) # .cbf.gz extension also accepted

# In MathProgBase format:
c, A, b, con_cones, var_cones, vartypes, sense, objoffset = cbftompb(dat)
# Note: The sense in MathProgBase form is always minimization, and the objective offset is zero.
# If sense == :Max, you should flip the sign of c before handing off to a solver.

# Given the data in MathProgBase format, you can solve it using any corresponding solver which supports the cones present in the problem.
# To use ECOS, for example,
using ECOS
solver = ECOSSolver()
# Now load and solve
m = MathProgBase.ConicModel(ECOSSolver(verbose=0))
MathProgBase.loadproblem!(m, c, A, b, con_cones, var_cones)
# Continuous solvers need not implement setvartype!
if !all(vartypes .== :Cont)
    MathProgBase.setvartype!(m, vartypes)
end
MathProgBase.optimize!(m)
# Solution accessible through:
x_sol = MathProgBase.getsolution(m)
objval = MathProgBase.getobjval(m)
# If PSD vars are present, you can use the following utility to extract the solution in CBF form:
scalar_solution, psdvar_solution = ConicBenchmarkUtilities.mpb_sol_to_cbf(dat,x_sol)"><pre>dat <span class="pl-k">=</span> <span class="pl-c1">readcbfdata</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/instance.cbf<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> .cbf.gz extension also accepted</span>

<span class="pl-c"><span class="pl-c">#</span> In MathProgBase format:</span>
c, A, b, con_cones, var_cones, vartypes, sense, objoffset <span class="pl-k">=</span> <span class="pl-c1">cbftompb</span>(dat)
<span class="pl-c"><span class="pl-c">#</span> Note: The sense in MathProgBase form is always minimization, and the objective offset is zero.</span>
<span class="pl-c"><span class="pl-c">#</span> If sense == :Max, you should flip the sign of c before handing off to a solver.</span>

<span class="pl-c"><span class="pl-c">#</span> Given the data in MathProgBase format, you can solve it using any corresponding solver which supports the cones present in the problem.</span>
<span class="pl-c"><span class="pl-c">#</span> To use ECOS, for example,</span>
<span class="pl-k">using</span> ECOS
solver <span class="pl-k">=</span> <span class="pl-c1">ECOSSolver</span>()
<span class="pl-c"><span class="pl-c">#</span> Now load and solve</span>
m <span class="pl-k">=</span> MathProgBase<span class="pl-k">.</span><span class="pl-c1">ConicModel</span>(<span class="pl-c1">ECOSSolver</span>(verbose<span class="pl-k">=</span><span class="pl-c1">0</span>))
MathProgBase<span class="pl-k">.</span><span class="pl-c1">loadproblem!</span>(m, c, A, b, con_cones, var_cones)
<span class="pl-c"><span class="pl-c">#</span> Continuous solvers need not implement setvartype!</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">all</span>(vartypes <span class="pl-k">.==</span> <span class="pl-c1">:Cont</span>)
    MathProgBase<span class="pl-k">.</span><span class="pl-c1">setvartype!</span>(m, vartypes)
<span class="pl-k">end</span>
MathProgBase<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(m)
<span class="pl-c"><span class="pl-c">#</span> Solution accessible through:</span>
x_sol <span class="pl-k">=</span> MathProgBase<span class="pl-k">.</span><span class="pl-c1">getsolution</span>(m)
objval <span class="pl-k">=</span> MathProgBase<span class="pl-k">.</span><span class="pl-c1">getobjval</span>(m)
<span class="pl-c"><span class="pl-c">#</span> If PSD vars are present, you can use the following utility to extract the solution in CBF form:</span>
scalar_solution, psdvar_solution <span class="pl-k">=</span> ConicBenchmarkUtilities<span class="pl-k">.</span><span class="pl-c1">mpb_sol_to_cbf</span>(dat,x_sol)</pre></div>
<h2 dir="auto"><a id="user-content-how-to-write-a-cbf-instance" class="anchor" aria-hidden="true" href="#how-to-write-a-cbf-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to write a CBF instance:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="newdat = mpbtocbf(&quot;example&quot;, c, A, b, con_cones, var_cones, vartypes, sense)
writecbfdata(&quot;example.cbf&quot;,newdat,&quot;# Comment for the CBF header&quot;)"><pre>newdat <span class="pl-k">=</span> <span class="pl-c1">mpbtocbf</span>(<span class="pl-s"><span class="pl-pds">"</span>example<span class="pl-pds">"</span></span>, c, A, b, con_cones, var_cones, vartypes, sense)
<span class="pl-c1">writecbfdata</span>(<span class="pl-s"><span class="pl-pds">"</span>example.cbf<span class="pl-pds">"</span></span>,newdat,<span class="pl-s"><span class="pl-pds">"</span># Comment for the CBF header<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Note that because MathProgBase conic format is more general than CBF in specifying the mapping between variables and cones, <em>the order of the variables in the CBF file may not match the original order</em>. No reordering takes place if <code>var_cones</code> is trivial, i.e., <code>[(:Free,1:N)]</code> where <code>N</code> is the total number of variables.</p>
<h2 dir="auto"><a id="user-content-how-to-write-a-jump-model-to-cbf-form" class="anchor" aria-hidden="true" href="#how-to-write-a-jump-model-to-cbf-form"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to write a JuMP model to CBF form:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = JuMP.Model()
@variable(m, x[1:2])
@variable(m, t)
@constraint(m, norm(x) &lt;= t)
ConicBenchmarkUtilities.jump_to_cbf(m, &quot;soctest&quot;, &quot;soctest.cbf&quot;)"><pre>m <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>])
<span class="pl-c1">@variable</span>(m, t)
<span class="pl-c1">@constraint</span>(m, <span class="pl-c1">norm</span>(x) <span class="pl-k">&lt;=</span> t)
ConicBenchmarkUtilities<span class="pl-k">.</span><span class="pl-c1">jump_to_cbf</span>(m, <span class="pl-s"><span class="pl-pds">"</span>soctest<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>soctest.cbf<span class="pl-pds">"</span></span>)</pre></div>
</article></div>