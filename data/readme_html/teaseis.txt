<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/ChevronETC/TeaSeis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3154c470d79f8186694857e32c70eb54cd94773/68747470733a2f2f7472617669732d63692e6f72672f43686576726f6e4554432f546561536569732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ChevronETC/TeaSeis.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/ChevronETC/TeaSeis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0644edfa5f7f9499cd802de91cf8ddc88fa92840/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f43686576726f6e4554432f546561536569732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ChevronETC/TeaSeis.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-teaseisjl" class="anchor" aria-hidden="true" href="#teaseisjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TeaSeis.jl</h1> TeaSeis.jl is a Julia library for reading and writing JavaSeis files (The name `TeaSeis.jl` was chosen instead of `JavaSeis.jl` due to potential trademark issues).  The JavaSeis file format is used in various software projects including <a href="https://www.landmark.solutions/seisspace-promax" rel="nofollow">SeisSpace</a>.  The original library is written in <a href="http://sourceforge.net/projects/javaseis" rel="nofollow">Java</a>.  There are also <a href="http://www.jseisio.com" rel="nofollow">C++</a> and <a href="https://github.com/asbjorn/pyjavaseis">Python</a> implementations available.  Similar to the C++ library, TeaSeis.jl is a stripped down version of the original Java library.  In particular, the intent is to only supply methods for reading and writing from and to JavaSeis files.
<ul>
<li><a href="README.md#Trademarks-1">Trademarks</a></li>
<li><a href="README.md#License-and-copyright-1">License and copyright</a></li>
<li><a href="README.md#Dependencies-1">Dependencies</a></li>
<li><a href="README.md#Obtaining-TeaSeis.jl-1">Obtaining TeaSeis.jl</a></li>
<li><a href="README.md#Using-TeaSeis.jl-1">Using TeaSeis.jl</a>
<ul>
<li><a href="README.md#Quick-start-guide-1">Quick start guide</a></li>
<li><a href="README.md#writing-1">writing</a></li>
<li><a href="README.md#reading-1">reading</a></li>
</ul>
</li>
<li><a href="README.md#jsopen-/-jscreate-1">jsopen / jscreate</a></li>
<li><a href="README.md#Available-options-when-creating-a-new-JavaSeis-file-1">Available options when creating a new JavaSeis file</a></li>
<li><a href="README.md#Read/write-methods-1">Read/write methods</a>
<ul>
<li><a href="README.md#Alternative-read/write-methods-(N-Dimensional-slices)-1">Alternative read/write methods (N-Dimensional slices)</a></li>
<li><a href="README.md#Alternative-write-methods-for-full-frames-1">Alternative write methods for full frames</a></li>
</ul>
</li>
<li><a href="README.md#Trace-Properties-1">Trace Properties</a>
<ul>
<li><a href="README.md#TRC_TYPE-1">TRC_TYPE</a></li>
</ul>
</li>
<li><a href="README.md#Data-properties-1">Data properties</a></li>
<li><a href="README.md#Secondaries-1">Secondaries</a></li>
<li><a href="README.md#Geometry-1">Geometry</a></li>
<li><a href="README.md#Convenience-methods-and-dictionaries-1">Convenience methods and dictionaries</a></li>
<li><a href="README.md#API-1">API</a></li>
</ul>
<p><a id="user-content-trademarks-1"></a></p>
<h1><a id="user-content-trademarks" class="anchor" aria-hidden="true" href="#trademarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Trademarks</h1>
<ul>
<li>SEISSPACE and PROMAX are registered trademarks of LANDMARK GRAPHICS CORPORATION</li>
<li>Java is a registred trademark of Oracle</li>
</ul>
<p><a id="user-content-license-and-copyright-1"></a></p>
<h1><a id="user-content-license-and-copyright" class="anchor" aria-hidden="true" href="#license-and-copyright"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License and copyright</h1>
<p>The License and copyright information can be found in the source distribution: <code>LICENSE.txt</code>, <code>COPYRIGHT.txt</code></p>
<p><a id="user-content-dependencies-1"></a></p>
<h1><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dependencies</h1>
<p>TeaSeis.jl depends on the <a href="http://www.github.com/lindahua/LightXML.jl">LightXML.jl</a> package.</p>
<p><a id="user-content-obtaining-teaseis.jl-1"></a></p>
<h1><a id="user-content-obtaining-teaseisjl" class="anchor" aria-hidden="true" href="#obtaining-teaseisjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Obtaining TeaSeis.jl</h1>
<pre><code>Pkg.add("TeaSeis")
</code></pre>
<p><a id="user-content-using-teaseis.jl-1"></a></p>
<h1><a id="user-content-using-teaseisjl" class="anchor" aria-hidden="true" href="#using-teaseisjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using TeaSeis.jl</h1>
<p><a id="user-content-quick-start-guide-1"></a></p>
<h2><a id="user-content-quick-start-guide" class="anchor" aria-hidden="true" href="#quick-start-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick start guide</h2>
<p>First, load  the TeaSeis.jl library:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TeaSeis</pre></div>
<p><a id="user-content-writing-1"></a></p>
<h2><a id="user-content-writing" class="anchor" aria-hidden="true" href="#writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>writing</h2>
<ul>
<li>Create a new JavaSeis file with a 3D framework (128 samples per trace, 32 traces per frame, and 16 frames per volume):</li>
</ul>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>filename.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, axis_lengths<span class="pl-k">=</span>[<span class="pl-c1">128</span>, <span class="pl-c1">32</span>, <span class="pl-c1">16</span>])</pre></div>
<p>Note that by default, <code>SAMPLE</code>, <code>TRACE</code>, and <code>FRAME</code> will be the axes properties.</p>
<ul>
<li>Allocate traces and headers for a single frame:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframe</span>(io)</pre></div>
<ul>
<li>Populate <code>trcs</code>, and <code>hdrs</code> with values.  For example, write random values to all traces in the first frame:</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">set!</span>(<span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:TRC_TYPE</span>]), hdrs, i, tracetype[<span class="pl-c1">:live</span>]), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(io,<span class="pl-c1">2</span>))
<span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">set!</span>(<span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:TRACE</span>]   ), hdrs, i, i               ), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(io,<span class="pl-c1">2</span>))
<span class="pl-c1">map</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">set!</span>(<span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:FRAME</span>]   ), hdrs, i, <span class="pl-c1">1</span>               ), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(io,<span class="pl-c1">2</span>))
<span class="pl-c1">rand!</span>(trcs)
<span class="pl-c1">writeframe</span>(io, trcs, hdrs)</pre></div>
<ul>
<li>Close the file</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">close</span>(io)</pre></div>
<p><a id="user-content-reading-1"></a></p>
<h2><a id="user-content-reading" class="anchor" aria-hidden="true" href="#reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reading</h2>
<ul>
<li>Open a new JavaSeis file from an existing dataset:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>filename.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)</pre></div>
<ul>
<li>Read the first frame:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, <span class="pl-c1">1</span>)</pre></div>
<p>or a similar in-place version:</p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframe</span>(io)
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, <span class="pl-c1">1</span>)</pre></div>
<ul>
<li>Access values stored in a trace property for the first trace in the frame:</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">get</span>(<span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:TRACE</span>]), hdrs, <span class="pl-c1">1</span>)</pre></div>
<p>or, slightly less efficient:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">get</span>(<span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:TRACE</span>]), hdrs[:,<span class="pl-c1">1</span>])</pre></div>
<ul>
<li>Close the file</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">close</span>(io)</pre></div>
<p><a id="user-content-jsopen-/-jscreate-1"></a></p>
<h1><a id="user-content-jsopen--jscreate" class="anchor" aria-hidden="true" href="#jsopen--jscreate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>jsopen / jscreate</h1>
<p>A JavaSeis dataset is created/opened with the <code>jsopen</code> method which returns a <code>JSeis</code>. A JavaSeis dataset must have a minimum of 3 dimensions.</p>
<p>Create a 3D JavaSeis file with 10 samples per trace, 11 traces per frame, and 12 frames per volume:</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, axis_lengths<span class="pl-k">=</span>[<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">12</span>])</pre></div>
<p>Open an existing JavaSeis file in read-only mode:</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>)      <span class="pl-c"><span class="pl-c">#</span> equivalent to previous line</span></pre></div>
<p>Open an existing JavaSeis file for reading and writing:</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r+<span class="pl-pds">"</span></span>)</pre></div>
<p>To close an open dataset:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">close</span>(io)</pre></div>
<p>To create a dataset:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">jscreate</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, axis_lengths<span class="pl-k">=</span>[<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">12</span>])</pre></div>
<p>This is useful for when you need to create the data-set on the master process, and write to it on worker processes.</p>
<p><a id="user-content-available-options-when-creating-a-new-javaseis-file-1"></a></p>
<h1><a id="user-content-available-options-when-creating-a-new-javaseis-file" class="anchor" aria-hidden="true" href="#available-options-when-creating-a-new-javaseis-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Available options when creating a new JavaSeis file</h1>
<p>The <code>jscreate</code> and, when operating in write <code>"w"</code> mode, <code>jsopen</code> functions take the following named optional arguments:</p>
<ul>
<li><code>similarto::String</code><br></li>
</ul>
<p>An existing JavaSeis dataset.  If set, then all other named arguments can be used to modify the data context that belongs to the existing JavaSeis dataset.</p>
<ul>
<li><code>description::String</code><br></li>
</ul>
<p>Description of dataset, if not set, then a description is parsed from the filename.</p>
<ul>
<li><code>mapped::Bool</code><br></li>
</ul>
<p>If the dataset is full (no missing frames/traces), then it may be more efficient to set this to <code>false</code>.  Defaults to <code>true</code>.</p>
<ul>
<li><code>nextents::Int</code><br></li>
</ul>
<p>The number of file-extents used to store the data.  If not set, then a heuristic is used to choose the number of extents.</p>
<ul>
<li><code>secondaries::Array{String, 1}</code><br></li>
</ul>
<p>An array of file-system locations used to store the file extents.  If not set, then <em>primary</em> storage is used.</p>
<ul>
<li><code>datatype::String</code><br></li>
</ul>
<p>Examples are <code>CMP</code>, <code>SHOT</code>, etc.  If not set, then <code>UNKNOWN</code> is used.</p>
<ul>
<li><code>dataformat::Type</code><br></li>
</ul>
<p>Choose from <code>Float32</code>, and <code>Int16</code>.  If not set, then <code>Float32</code> is used.</p>
<ul>
<li><code>dataorder::String</code><br></li>
</ul>
<p>(not supported)</p>
<ul>
<li><code>axis_propdefs::Array{TracePropertyDef, 1}</code><br></li>
</ul>
<p>Trace properties corresponding to JavaSeis axes.  If not set, then <code>SAMPLE</code>, <code>TRACE</code>, <code>FRAME</code>, <code>VOLUME</code> and <code>HYPRCUBE</code> are used.</p>
<ul>
<li><code>axis_units::Array{String, 1}</code><br></li>
</ul>
<p>Units corresponding to JavaSeis axes. e.g. <code>SECONDS</code>, <code>METERS</code>, etc.  If not set, then <code>UNKNOWN</code> is used.</p>
<ul>
<li><code>axis_domains::Array{String, 1}</code><br></li>
</ul>
<p>Domains corresponding to JavaSeis axes. e.g. <code>SPACE</code>, <code>TIME</code>, etc.  If not set, then <code>UNKNOWN</code> is used.</p>
<ul>
<li><code>axis_lstarts::Array{Int32, 1}</code><br></li>
</ul>
<p>Logical origins for each axis.  If not set, then <code>1</code> is used for the logical origin of each axis.</p>
<ul>
<li><code>axis_lincs::Array{Int32, 1}</code><br></li>
</ul>
<p>Logical increments for each axis.  If not set, then <code>1</code> is used for the logical increments of each axis.</p>
<ul>
<li><code>axis_pstarts::Array{Float64, 1}</code><br></li>
</ul>
<p>Physical origins for each axis.  If not set, then <code>0.0</code> is used for the physical origin of each axis.</p>
<ul>
<li><code>axis_pincs::Array{Float64, 1}</code><br></li>
</ul>
<p>Physical increments for each axis.  If not set, then <code>1.0</code> is used for the physical increments of each axis.</p>
<ul>
<li><code>properties::Array{TracePropertyDef, 1}</code><br></li>
</ul>
<p>An array of custom trace properties.  These are in addition to a minimal set of trace properties listed in the ProMax manual.</p>
<ul>
<li><code>dataproperties::Array{DataProperty, 1}</code><br></li>
</ul>
<p>An array of custom data properties.  One property per data-set rather than one property per trace as in <code>properties</code> above.</p>
<ul>
<li><code>geometry::Geometry</code><br></li>
</ul>
<p>An optional three point geometry can be embedded in the JavaSeis file.</p>
<ul>
<li><code>properties_add::Array{TracePropertyDef}</code></li>
</ul>
<p>When <code>similarto</code> is specified, use this to add trace properties to those already existing in the <code>similarto</code> file.</p>
<ul>
<li><code>properties_rm::Array{TracePropertyDef}</code></li>
</ul>
<p>When <code>similarto</code> is specified, use this to remove trace properties to those already existing in the <code>similarto</code> file.</p>
<ul>
<li><code>dataproperties_add::Array{DataProperty}</code></li>
</ul>
<p>When <code>similarto</code> is specfied, use this to add dataset properties to those aloready existing in the <code>similarto</code> file.</p>
<ul>
<li><code>dataproperties_rm::Array{DataProperty}</code></li>
</ul>
<p>When <code>similarto</code> is specified, use this to remove dataset properties to those already existing in the <code>similarto</code> file.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, axis_lengths<span class="pl-k">=</span>[<span class="pl-c1">10</span>,<span class="pl-c1">11</span>,<span class="pl-c1">12</span>], dataformat<span class="pl-k">=</span>Float16, axis_pincs<span class="pl-k">=</span>[<span class="pl-c1">0.004</span>,<span class="pl-c1">10.0</span>,<span class="pl-c1">20.0</span>])</pre></div>
<p><a id="user-content-read/write-methods-1"></a></p>
<h1><a id="user-content-readwrite-methods" class="anchor" aria-hidden="true" href="#readwrite-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Read/write methods</h1>
<p>JavaSeis is a frame based file format.</p>
<p>For <code>io::JSeis</code>, allocate memory for a single frame:</p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframe</span>(io) <span class="pl-c"><span class="pl-c">#</span> allocate memory for traces and headers for a single frame</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">allocframetrcs</span>(io)   <span class="pl-c"><span class="pl-c">#</span> allocate memory for traces for a single frame</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframehdrs</span>(io)   <span class="pl-c"><span class="pl-c">#</span> allocate memory for headers for a single frame</span></pre></div>
<p>Read a frame. <code>ifrm::Int</code>, <code>ivol::Int</code>, <code>ihyp::Int</code> and <code>i6::Int</code> must be consistent with the JavaSeis data context.</p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> read from 3D data</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> read from 4D data</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> read from 5D data</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> read from 6D data</span>
<span class="pl-k">...</span></pre></div>
<p>Read a frame (in-place) using pre-allocated memory:</p>
<div class="highlight highlight-source-julia"><pre>ifrm <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, ifrm)                <span class="pl-c"><span class="pl-c">#</span> read from 3D data</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, ifrm, ivol)          <span class="pl-c"><span class="pl-c">#</span> read from 4D data</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, ifrm, ivol, ihyp)    <span class="pl-c"><span class="pl-c">#</span> read from 5D data</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> read from 6D data</span>
<span class="pl-k">...</span></pre></div>
<p>Note that <code>readframe!</code> methods returns the <b>fold</b> (number of live traces in the frame).</p>
<p>Similar methods exist for reading only headers:</p>
<div class="highlight highlight-source-julia"><pre>ifrm <span class="pl-k">=</span> <span class="pl-c1">1</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(io, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> read from 3D data</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(io, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> read from 4D data</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(io, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> read from 5D data</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(io, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> read from 6D data</span>
<span class="pl-k">...</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> in-place read from 3D data</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> in-place read from 4D data</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> in-place read from 5D data</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> in-place read from 6D data</span>
<span class="pl-k">...</span></pre></div>
<p>or only traces:</p>
<div class="highlight highlight-source-julia"><pre>ifrm <span class="pl-k">=</span> <span class="pl-c1">1</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(io, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> read from 3D data</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(io, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> read from 4D data</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(io, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> read from 5D data</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(io, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> read from 6D data</span>
<span class="pl-k">...</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> in-place read from 3D data</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> in-place read from 4D data</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> in-place read from 5D data</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> in-place read from 6D data</span>
<span class="pl-k">...</span></pre></div>
<p>Write a frame. The frame, volume, and hypercube indices are determined from the trace properties (<code>hdrs::Array{UInt8,2}</code>)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">writeframe</span>(io, trcs, hdrs)</pre></div>
<p>To loop over all frames in a dataset of arbitrary dimension, TeaSeis.jl provides an iterator-type API:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(io)
    trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, <span class="pl-c1">ind2sub</span>(io,i)<span class="pl-k">...</span>)
<span class="pl-k">end</span></pre></div>
<p>where <code>length(io)</code> is the number of frames in <code>io</code>, <code>ind2sub</code> converts the linear index <code>i</code> into n-tuple indexing dimensions 3 and higher.  Of course, this can also be used with <code>readframe!</code>, <code>readframetrcs</code>, <code>readframetrcs!</code>, <code>readframehdrs</code> and <code>readframehdrs!</code>.</p>
<h3><a id="user-content--important-note-" class="anchor" aria-hidden="true" href="#-important-note-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a> IMPORTANT NOTE: </h3>
<p>It is <b>very</b> important to note that the JavaSeis format left-justifies all live traces in a frame.  This makes reading and writing data more efficient. However, if you are reading or writing non-full frames, extra care must be taken.  Two methods (<code>leftjustify!</code> and <code>regularize!</code>) are provided to help with this situation.</p>
<p>Writing a non-full frame:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">leftjustify!</span>(io, trcs, hdrs)
<span class="pl-c1">writeframe</span>(io, trcs, hdrs)</pre></div>
<p>Reading a non-full frame:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readframe!</span>(io, trcs, hdrs, <span class="pl-c1">1</span>)
<span class="pl-c1">regularize!</span>(io, trcs, hdrs)
<span class="pl-c1">regularize!</span>(io, trcs, hdrs, stockprop[<span class="pl-c1">:TRACE</span>]) <span class="pl-c"><span class="pl-c">#</span> used when the trace label does not correspond to a trace property</span></pre></div>
<p>Please note that the regularize method sets the <code>:TRC_TYPE</code> property appropriately.  That is, a padded trace is of <code>tracetype[:dead]</code>.</p>
<p>Methods for finding the fold of a frame:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">fold</span>(io, hdrs)                 <span class="pl-c"><span class="pl-c">#</span> get fold by examining the headers `hdrs` from a frame</span>
<span class="pl-c1">fold</span>(io, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> get fold from a 3D data set using the JavaSeis `TraceMap` file</span>
<span class="pl-c1">fold</span>(io, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> get fold from a 4D data set using the JavaSeis `TraceMap` file</span>
<span class="pl-c1">fold</span>(io, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> get fold from a 5D data set using the JavaSeis `TraceMap` file</span>
<span class="pl-c1">fold</span>(io, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> get fold from a 6D data set using the JavaSeis `TraceMap` file</span>
<span class="pl-k">...</span></pre></div>
<p><a id="user-content-alternative-read/write-methods-(n-dimensional-slices)-1"></a></p>
<h2><a id="user-content-alternative-readwrite-methods-n-dimensional-slices" class="anchor" aria-hidden="true" href="#alternative-readwrite-methods-n-dimensional-slices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternative read/write methods (N-Dimensional slices)</h2>
<p>We supply convenience methods for reading and writing arbitrary patches of data.  If frames are not full, then the read algorithms include automatic regularization of the frames, and the write algorithms include automatic left justification.  In turn, this means that the convenience of the following methods may come at the expense of extra I/O operations.  This is especially true for JavaSeis datasets that are of 6 or more dimensions.</p>
<p><strong>Reading:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>)              <span class="pl-c"><span class="pl-c">#</span> read from 3D data (frame 4, traces 2-3, and time samples 1-10)</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :)           <span class="pl-c"><span class="pl-c">#</span> read from 4D data (all volumes, frame 4, traces 2-3, and time samples 1-10)</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)    <span class="pl-c"><span class="pl-c">#</span> read from 5D data (Hypercubes 2 and 4, all volumes, frame 4, traces 2-3 and time samples 1-10)</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> read from 6D data (element 1 from the 6th dimension, hypercubes 2 and 4, all volumnes, frame 4, traces 2-3 and time samples 1-10)</span>
<span class="pl-k">...</span>
<span class="pl-c1">read!</span>(io, trcs, hdrs, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>)              <span class="pl-c"><span class="pl-c">#</span> in-place read from 3D data</span>
<span class="pl-c1">read!</span>(io, trcs, hdrs, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :)           <span class="pl-c"><span class="pl-c">#</span> in-place read from 4D data</span>
<span class="pl-c1">read!</span>(io, trcs, hdrs, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)    <span class="pl-c"><span class="pl-c">#</span> in-place read from 5D data</span>
<span class="pl-c1">read!</span>(io, trcs, hdrs, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> in-place read from 6D data</span>
<span class="pl-k">...</span></pre></div>
<p>Similar methods exist for reading only traces (for example):</p>
<div class="highlight highlight-source-julia"><pre>trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(io, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">readtrcs!</span>(io, trcs, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> in-place version of previous line</span></pre></div>
<p>and only headers (for example):</p>
<div class="highlight highlight-source-julia"><pre>hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(io, :, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">readhdrs!</span>(io, hdrs, :, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> in-place version of previous line//</span></pre></div>
<p>Note that when using <code>readhdrs</code> and <code>readhdrs!</code> the slice range for the first dimension is always <code>:</code>.</p>
<p><strong>Writing:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(io, trcs, hdrs)       <span class="pl-c"><span class="pl-c">#</span> trcs::Array{Float32,N}, hdrs::Array{Float32,N} where N is either 3,4 or 5.</span>
<span class="pl-c1">write</span>(io, trcs, hdrs, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> same as previous except only time samples 1:10 are written.</span></pre></div>
<p>In the above listing, the locations that are written to are determined by the header values.</p>
<p><a id="user-content-alternative-write-methods-for-full-frames-1"></a></p>
<h2><a id="user-content-alternative-write-methods-for-full-frames" class="anchor" aria-hidden="true" href="#alternative-write-methods-for-full-frames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternative write methods for full frames</h2>
<p>it is sometimes not convenient to set headers before writing full frames.  This might be true when, for example, one is doing research work where geometry (and other) information does not need to be stored in trace headers.  For this scenario, we provide two sets of alternative API.</p>
<p>The first set of API is for writing one frame at a time:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">writeframe</span>(io, trcs, ifrm)                 <span class="pl-c"><span class="pl-c">#</span> write to 3D data</span>
<span class="pl-c1">writeframe</span>(io, trcs, ifrm, ivol)           <span class="pl-c"><span class="pl-c">#</span> write to 4D data</span>
<span class="pl-c1">writeframe</span>(io, trcs, ifrm, ivol, ihyp)     <span class="pl-c"><span class="pl-c">#</span> write to 5D data</span>
<span class="pl-c1">writeframe</span>(io, trcs, ifrm, ivol, ihyp, i6) <span class="pl-c"><span class="pl-c">#</span> write to 6D data</span>
<span class="pl-k">...</span></pre></div>
<p>The second set of API is for writing arbitrary N-dimensional slices of data:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(io, trcs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>)            <span class="pl-c"><span class="pl-c">#</span> write to 3D data, all samples; traces 1-10; frames 3, 5</span>
<span class="pl-c1">write</span>(io, trcs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">6</span>)         <span class="pl-c"><span class="pl-c">#</span> write to 4D data, all samples; traces 1-10; frames 3, 5; volume 6</span>
<span class="pl-c1">write</span>(io, trcs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">6</span>, :)      <span class="pl-c"><span class="pl-c">#</span> write to 5D data, all samples; traces 1-10; frames 3, 5; volume 6, all hypercubes</span>
<span class="pl-c1">write</span>(io, trcs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">6</span>, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> write to 6D data, all samples; traces 1-10; frames 3, 5; volume 6, all hypercubes, elements 1 and 2 from dimension 6</span>
<span class="pl-k">...</span></pre></div>
<p>Please note that in these forms, the writeframe and write methods will create headers for you, and populate the <code>:TRC_TYPE</code> property along with the properties corresponding to the trace and frame axes of your data.  In the case of 4D data, the volume property is also populated, and in the case of 5D data, the volume and hypercube properties are also populated.</p>
<p>In addition, please note that in the <code>write</code> method, <code>trcs</code> must have the same number of dimensions as <code>io</code>.  In practice this can be accomplished using <code>reshape</code>.  For example if <code>size(io)=(10,20,3)</code> and <code>size(trcs)=(10,)</code>, then to write <code>trcs</code> to the first trace of the first frame of <code>io</code> one could write:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(io, <span class="pl-c1">rehsape</span>(trcs, <span class="pl-c1">10</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>), :, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<p><a id="user-content-trace-properties-1"></a></p>
<h1><a id="user-content-trace-properties" class="anchor" aria-hidden="true" href="#trace-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Trace Properties</h1>
<p>The JavaSeis data format does not specify any trace properties.  However, there are commonly used (<b>stock</b>) properties (listed in <a href="STOCKPROPS.md">STOCKPROPS.md</a>, as well as a minimal set of properties that are expected by SeisSpace (listed in <a href="SSPROPS.md">SSPROPS.md</a>).  It is unusual when a stock property does not suit your needs.  But, if need be, you can define a custom property using the <code>TracePropertyDef</code> constructor:</p>
<div class="highlight highlight-source-julia"><pre>pdef <span class="pl-k">=</span> <span class="pl-c1">TracePropertyDef</span>(<span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span>, Float32)
pdef <span class="pl-k">=</span> <span class="pl-c1">TracePropertyDef</span>(<span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span>, Vector{Float32}, <span class="pl-c1">2</span>)</pre></div>
<p>The arguments to <code>TracePropertyDef</code> are the <b>label</b>, <b>description</b>, <b>type</b>, and, optionally, the <b>number of elements</b> stored in the property. The stock properties are defined in <a href="src/stockprops.jl">src/stockprops.jl</a> using a Julia dictionary: <code>stockprop</code>.  For example, access a stock definition for the <code>TRACE</code> property:</p>
<div class="highlight highlight-source-julia"><pre>pdef <span class="pl-k">=</span> stockprop[<span class="pl-c1">:TRACE</span>]</pre></div>
<p>Given a JavaSeis file <code>io::JSeis</code> and a stock definition, we can access the corresponding property of a JavaSeis file:</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, pdef)    <span class="pl-c"><span class="pl-c">#</span> access using a `TracePropertyDef`</span>
p <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, <span class="pl-s"><span class="pl-pds">"</span>TRACE<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> alternatively, access using the trace property definition label</span>
p <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, <span class="pl-s"><span class="pl-pds">"</span>TRACE<span class="pl-pds">"</span></span>, Int32) <span class="pl-c"><span class="pl-c">#</span> type-stable version of previous line</span></pre></div>
<p>Given, additionally, a frame of headers <code>hdrs::Array{UInt8,2}</code>, we can get and set the values stored in a property:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@show</span> <span class="pl-c1">get</span>(p, hdrs[:,<span class="pl-c1">1</span>])
<span class="pl-c1">@show</span> <span class="pl-c1">get</span>(p, hdrs, <span class="pl-c1">1</span>)      <span class="pl-c"><span class="pl-c">#</span> equivalent to the previous line of code</span>
<span class="pl-c1">set!</span>(p, hdrs, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>)        <span class="pl-c"><span class="pl-c">#</span> set the first header in `hdrs` to 5</span>
<span class="pl-c1">writeframe</span>(io, trcs, hdrs) <span class="pl-c"><span class="pl-c">#</span> the JavaSeis file does not know about the updated header until you call `writeframe`</span></pre></div>
<p>In the above code listing <code>trcs</code> is of type <code>Array{Float32,2}</code>.</p>
<p><a id="user-content-trc_type-1"></a></p>
<h2><a id="user-content-trc_type" class="anchor" aria-hidden="true" href="#trc_type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TRC_TYPE</h2>
<p>The <code>TRC_TYPE</code> property is used to indicate if a trace is dead, live or auxiliary within any given frame.  It is stored as an <code>Int32</code>.  We provide a second dictionary to map between the <code>Int32</code> and human readable code:</p>
<div class="highlight highlight-source-julia"><pre>tracetype[<span class="pl-c1">:live</span>]
tracetype[<span class="pl-c1">:dead</span>]
tracetype[<span class="pl-c1">:aux</span>]</pre></div>
<p>For example,</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, <span class="pl-c1">1</span>)
prop_trctype <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:TRC_TYPE</span>])
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(hdrs,<span class="pl-c1">2</span>)
    <span class="pl-k">if</span> <span class="pl-c1">get</span>(prop_trctype, hdrs, i) <span class="pl-k">==</span> tracetype[<span class="pl-c1">:live</span>]
        <span class="pl-c1">write</span>(STDOUT, <span class="pl-s"><span class="pl-pds">"</span>trace <span class="pl-v">$(i)</span> is a live trace<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">elseif</span> <span class="pl-c1">get</span>(prop_trctype, hdrs, i) <span class="pl-k">==</span> tracetype[<span class="pl-c1">:dead</span>]
        <span class="pl-c1">write</span>(STDOUT, <span class="pl-s"><span class="pl-pds">"</span>trace <span class="pl-v">$(i)</span> is a dead trace<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">elseif</span> <span class="pl-c1">get</span>(prop_trctype, hdrs, i) <span class="pl-k">==</span> tracetype[<span class="pl-c1">:aux</span>]
        <span class="pl-c1">write</span>(STDOUT, <span class="pl-s"><span class="pl-pds">"</span>trace <span class="pl-v">$(i)</span> is a aux trace<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(io)</pre></div>
<p><a id="user-content-data-properties-1"></a></p>
<h1><a id="user-content-data-properties" class="anchor" aria-hidden="true" href="#data-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data properties</h1>
<p>TeaSeis.jl provides support for storing custum data properties.  This is accomplished by passing an array of <code>DataProperty</code>'s to the <code>jsopen</code> function.  For example, a data property could be defined as:</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">DataProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>Survey date<span class="pl-pds">"</span></span>, Int32, <span class="pl-c1">120977</span>")</pre></div>
<p><a id="user-content-secondaries-1"></a></p>
<h1><a id="user-content-secondaries" class="anchor" aria-hidden="true" href="#secondaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Secondaries</h1>
<p>If you choose to use secondary storage, then it is recommended to set the <code>JAVASEIS_DATA_HOME</code> environment variable.  This is used to determine the file-path for the secondary storage.  For example if,</p>
<pre><code>ENV["JAVASEIS_DATA_HOME"] = "/home/joe/projects"
cd("/home/joe/projects/some/dir/here")
io = jsopen("data.js", "w", axis_lengths=[10,11,12], secondaries=["/bigdisk/joe"])
close(io)
</code></pre>
<p>Then the secondary location is determined by replacing <code>/home/joe/projects</code> in <code>/home/joe/projects/some/dir/here/data.js</code> with <code>/bigdisk/joe</code> resulting in <code>/bigdisk/joe/some/dir/here/data.js</code> being the secondary storage for this example.</p>
<p><a id="user-content-geometry-1"></a></p>
<h1><a id="user-content-geometry" class="anchor" aria-hidden="true" href="#geometry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Geometry</h1>
<p>TeaSeis.jl provides support for storing survey geometry using three-points to define rotated/translated coordinate system.</p>
<div class="highlight highlight-source-julia"><pre>geom <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>(u1<span class="pl-k">=</span><span class="pl-c1">1</span>,un<span class="pl-k">=</span><span class="pl-c1">2</span>,v1<span class="pl-k">=</span><span class="pl-c1">1</span>,vn<span class="pl-k">=</span><span class="pl-c1">2</span>,w1<span class="pl-k">=</span><span class="pl-c1">1</span>,wn<span class="pl-k">=</span><span class="pl-c1">2</span>,ux<span class="pl-k">=</span><span class="pl-c1">1.0</span>,uy<span class="pl-k">=</span><span class="pl-c1">0.0</span>,uz<span class="pl-k">=</span><span class="pl-c1">0.0</span>,vx<span class="pl-k">=</span><span class="pl-c1">0.0</span>,vy<span class="pl-k">=</span><span class="pl-c1">1.0</span>,vz<span class="pl-k">=</span><span class="pl-c1">0.0</span>,wx<span class="pl-k">=</span><span class="pl-c1">0.0</span>,wy<span class="pl-k">=</span><span class="pl-c1">0.0</span>,wz<span class="pl-k">=</span><span class="pl-c1">1.0</span>)</pre></div>
<p>where <code>(ox,oy,oz)</code> is the origin, <code>(ux,uy,uz)</code> is a vector to define the end of the <code>u-axis</code> (e.g. cross-line axis), <code>(vx,vy,vz)</code> is the end of the <code>v-axis</code> (e.g. the in-line axis), and <code>(wx,wy,wz)</code> is the end of the <code>w-axis</code> (e.g. the depth axis).  <code>(u1,un)</code> are the first and last bin indices along the <code>u-axis</code>, <code>(v1,vn)</code> are the first and last bin indices along the <code>v-axis</code>, and <code>(w1,wn)</code> are the first and last bin indices along the <code>w-axis</code>.  TeaSeis.jl does not provide any tools for using this geometry to manipulate trace coordinates.  I would recommend that this functionality be put into a separate package.</p>
<p><a target="_blank" rel="noopener noreferrer" href="geometry.png"><img src="geometry.png" alt="Geometry" style="max-width:100%;"></a></p>
<p><a id="user-content-convenience-methods-and-dictionaries-1"></a></p>
<h1><a id="user-content-convenience-methods-and-dictionaries" class="anchor" aria-hidden="true" href="#convenience-methods-and-dictionaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Convenience methods and dictionaries</h1>
<p>For convenience and consistency, we supply several dictionaries.  In addition to the dictionary for trace property definitions and trace type (both described above), there are dictionaries for <b>data domain</b> <code>stockdomain</code>, <b>units</b> <code>stockunit</code>, and <b>data type</b> <code>stockdatatype</code>.  All of these are listed in <a href="STOCKPROPS.md">STOCKPROPS.md</a>.</p>
<p>Example usage within the jsopen method:</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>file.js<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, axis_lengths<span class="pl-k">=</span>[<span class="pl-c1">12</span>,<span class="pl-c1">11</span>,<span class="pl-c1">10</span>], axis_units<span class="pl-k">=</span>[stockunit[<span class="pl-c1">:SECONDS</span>], stockunit[<span class="pl-c1">:METERS</span>], stockunit[<span class="pl-c1">:METERS</span>]], axis_domains<span class="pl-k">=</span>[stockdomain[<span class="pl-c1">:TIME</span>], stockdomain[<span class="pl-c1">:SPACE</span>], stockdomain[<span class="pl-c1">:SPACE</span>], datatype<span class="pl-k">=</span>stockdatatype[<span class="pl-c1">:SOURCE</span>])</pre></div>
<p>Several convenience methods are supplied for querying <code>io::JSeis</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ndims</span>(io)              <span class="pl-c"><span class="pl-c">#</span> returns `Int`, number of dimensions in the JavaSeis dataset</span>
<span class="pl-c1">length</span>(io)             <span class="pl-c"><span class="pl-c">#</span> returns `Int`, the number of frames in the JavaSeis dataset, equivalent to `prod(size(io)[3:end])`</span>
<span class="pl-c1">size</span>(io)               <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{Int}`, size of JavaSeis dataset</span>
<span class="pl-c1">size</span>(io,i)             <span class="pl-c"><span class="pl-c">#</span> returns `Int`, size of JavaSeis dataset along dimension `i::Int`</span>
<span class="pl-c1">props</span>(io)              <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{TraceProperty}`, trace property along all dimensions</span>
<span class="pl-c1">props</span>(io,i)            <span class="pl-c"><span class="pl-c">#</span> returns `TraceProperty`, trace property along dimension `i::Int`</span>
<span class="pl-c1">propdefs</span>(io)           <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{TracePropertyDef}`, trace property definition along all dimensions</span>
<span class="pl-c1">propdefs</span>(io,i)         <span class="pl-c"><span class="pl-c">#</span> returns `TracePropertyDef`, trace property along dimension `i::Int`</span>
<span class="pl-c1">labels</span>(io)             <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{String}`, trace property labels along all dimensions</span>
<span class="pl-c1">labels</span>(io,i)           <span class="pl-c"><span class="pl-c">#</span> returns `String`, trace property label along dimension `i::Int`</span>
<span class="pl-c1">units</span>(io)              <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{String}`, units along all dimensions</span>
<span class="pl-c1">units</span>(io,i)            <span class="pl-c"><span class="pl-c">#</span> returns `String, unit along dimension `i::Int`</span>
<span class="pl-c1">domains</span>(io)            <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{String}`, data domains along all dimensions</span>
<span class="pl-c1">domains</span>(io,i)          <span class="pl-c"><span class="pl-c">#</span> returns `String`, data domain along dimension `i::Int`</span>
<span class="pl-c1">pstarts</span>(io)            <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{Float64}`, physical starts along all dimensions</span>
<span class="pl-c1">pstarts</span>(io,i)          <span class="pl-c"><span class="pl-c">#</span> returns `Float64`, physical start along dimension `i::Int`</span>
<span class="pl-c1">pincs</span>(io)              <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{Float64}`, physical increments along all dimensions</span>
<span class="pl-c1">pincs</span>(io,i)            <span class="pl-c"><span class="pl-c">#</span> returns `Float64`, physical increment along dimension `i::Int`</span>
<span class="pl-c1">lstarts</span>(io)            <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{Int32}`, logical starts along all dimensions</span>
<span class="pl-c1">lstarts</span>(io,i)          <span class="pl-c"><span class="pl-c">#</span> returns `Int32`, logical start along dimension `i::Int`</span>
<span class="pl-c1">lincs</span>(io)              <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{Int32}`, logical increments along all dimensions</span>
<span class="pl-c1">lincs</span>(io,i)            <span class="pl-c"><span class="pl-c">#</span> returns `Int32`, logical increment along dimension `i::Int`</span>
<span class="pl-c1">lrange</span>(io)             <span class="pl-c"><span class="pl-c">#</span> returns `NTuple{StepRange{Int64}}`, logical range along all dimensions</span>
<span class="pl-c1">lrange</span>(io,i)           <span class="pl-c"><span class="pl-c">#</span> returns `StepRange{Int64}`, logical range along dimension `i::Int`</span>
<span class="pl-c1">isempty</span>(io)            <span class="pl-c"><span class="pl-c">#</span> returns true if the dataset is empty (without trace or header extents)</span>
<span class="pl-c1">in</span>(prop,io)            <span class="pl-c"><span class="pl-c">#</span> returns true if the trace property `prop` exists in `io` --  `prop` can be of types `::TraceProperty`, `::TracePropertyDef`, or `::String`</span>
<span class="pl-c1">dataproperty</span>(io,nm)    <span class="pl-c"><span class="pl-c">#</span> returns the value held in the data property: `nm::String`</span>
<span class="pl-c1">hasdataproperty</span>(io,nm) <span class="pl-c"><span class="pl-c">#</span> returns true if the data property corresponding to label `nm::String` is in `io::JSeis`</span>
<span class="pl-c1">geometry</span>(io)           <span class="pl-c"><span class="pl-c">#</span> returns `Geometry`, the stored geometry of the dataset.  If no geometry is stored, `nothing` is returned</span></pre></div>
<p>Convenience methods are supplied for manipulating <code>io::JSeis</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">rm</span>(io)                      <span class="pl-c"><span class="pl-c">#</span> remove (delete) the file and all of its extent files and secondary folders</span>
<span class="pl-c1">empty!</span>(io)                  <span class="pl-c"><span class="pl-c">#</span> remove extends and secondary folders, but keep meta-data</span>
<span class="pl-c1">cp</span>(src, dst)                <span class="pl-c"><span class="pl-c">#</span> create a new JavaSeis file `dst::AbstractString` that is a copy of `src::JSeis`, optional named argument: `secondaries=` - change file extents location</span>
<span class="pl-c1">mv</span>(src, dst)                <span class="pl-c"><span class="pl-c">#</span> move a JavaSeis file to `dst::AbstractString` from `src::JSeis`, optional named argument: `secondaries=` - change file extents location</span>
<span class="pl-c1">copy!</span>(io, hdrs, io1, hdrs1) <span class="pl-c"><span class="pl-c">#</span> copy values from `hdrs1::Array{UInt8,2}` to `hdrs::Array{UInt8,2}`</span></pre></div>
<p><a id="user-content-api-1"></a></p>
<h1><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h1>
<ul>
<li><a href="README.md#TeaSeis.Geometry-Tuple%7B%7D"><code>TeaSeis.Geometry</code></a></li>
<li><a href="README.md#Base.Filesystem.cp-Tuple%7BJSeis,AbstractString%7D"><code>Base.Filesystem.cp</code></a></li>
<li><a href="README.md#Base.Filesystem.mv-Tuple%7BJSeis,AbstractString%7D"><code>Base.Filesystem.mv</code></a></li>
<li><a href="README.md#Base.Filesystem.rm-Tuple%7BJSeis%7D"><code>Base.Filesystem.rm</code></a></li>
<li><a href="README.md#Base.close-Tuple%7BJSeis%7D"><code>Base.close</code></a></li>
<li><a href="README.md#Base.copy!-Tuple%7BJSeis,AbstractArray%7BUInt8,2%7D,JSeis,AbstractArray%7BUInt8,2%7D%7D"><code>Base.copy!</code></a></li>
<li><a href="README.md#Base.empty!-Tuple%7BJSeis%7D"><code>Base.empty!</code></a></li>
<li><a href="README.md#Base.get-Tuple%7BTeaSeis.TraceProperty,AbstractArray%7BUInt8,2%7D,Int64%7D"><code>Base.get</code></a></li>
<li>[<code>Base.get</code>](README.md#Base.get-Union{Tuple{T}, Tuple{TraceProperty{T},AbstractArray{UInt8,1}}} where T&lt;:Number)</li>
<li>[<code>Base.in</code>](README.md#Base.in-Tuple{Union{String, TraceProperty, TracePropertyDef},JSeis})</li>
<li><a href="README.md#Base.isempty-Tuple%7BJSeis%7D"><code>Base.isempty</code></a></li>
<li><a href="README.md#Base.length-Tuple%7BJSeis%7D"><code>Base.length</code></a></li>
<li><a href="README.md#Base.ndims-Tuple%7BJSeis%7D"><code>Base.ndims</code></a></li>
<li>[<code>Base.read</code>](README.md#Base.read-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li>[<code>Base.read!</code>](README.md#Base.read!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li><a href="README.md#Base.size-Tuple%7BJSeis%7D"><code>Base.size</code></a></li>
<li><a href="README.md#Base.size-Tuple%7BJSeis,Int64%7D"><code>Base.size</code></a></li>
<li><a href="README.md#Base.write"><code>Base.write</code></a></li>
<li>[<code>Base.write</code>](README.md#Base.write-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li><a href="README.md#TeaSeis.allocframe-Tuple%7BJSeis%7D"><code>TeaSeis.allocframe</code></a></li>
<li><a href="README.md#TeaSeis.allocframehdrs-Tuple%7BJSeis%7D"><code>TeaSeis.allocframehdrs</code></a></li>
<li><a href="README.md#TeaSeis.allocframetrcs-Tuple%7BJSeis%7D"><code>TeaSeis.allocframetrcs</code></a></li>
<li><a href="README.md#TeaSeis.dataproperty-Tuple%7BJSeis,String%7D"><code>TeaSeis.dataproperty</code></a></li>
<li><a href="README.md#TeaSeis.domains-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.domains</code></a></li>
<li><a href="README.md#TeaSeis.domains-Tuple%7BJSeis%7D"><code>TeaSeis.domains</code></a></li>
<li><a href="README.md#TeaSeis.fold-Tuple%7BJSeis,Array%7BUInt8,2%7D%7D"><code>TeaSeis.fold</code></a></li>
<li>[<code>TeaSeis.fold</code>](README.md#TeaSeis.fold-Tuple{JSeis,Vararg{Int64,N} where N})</li>
<li><a href="README.md#TeaSeis.geometry-Tuple%7BJSeis%7D"><code>TeaSeis.geometry</code></a></li>
<li><a href="README.md#TeaSeis.hasdataproperty-Tuple%7BAny,Any%7D"><code>TeaSeis.hasdataproperty</code></a></li>
<li><a href="README.md#TeaSeis.ind2sub-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.ind2sub</code></a></li>
<li><a href="README.md#TeaSeis.jscreate-Tuple%7BString%7D"><code>TeaSeis.jscreate</code></a></li>
<li><a href="README.md#TeaSeis.jsopen-Tuple%7BString%7D"><code>TeaSeis.jsopen</code></a></li>
<li><a href="README.md#TeaSeis.jsopen-Tuple%7BString,String%7D"><code>TeaSeis.jsopen</code></a></li>
<li><a href="README.md#TeaSeis.labels-Tuple%7BJSeis%7D"><code>TeaSeis.labels</code></a></li>
<li><a href="README.md#TeaSeis.labels-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.labels</code></a></li>
<li><a href="README.md#TeaSeis.leftjustify!-Tuple%7BJSeis,Array%7BFloat32,2%7D,Array%7BUInt8,2%7D%7D"><code>TeaSeis.leftjustify!</code></a></li>
<li><a href="README.md#TeaSeis.lincs-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.lincs</code></a></li>
<li><a href="README.md#TeaSeis.lincs-Tuple%7BJSeis%7D"><code>TeaSeis.lincs</code></a></li>
<li><a href="README.md#TeaSeis.lrange-Tuple%7BJSeis%7D"><code>TeaSeis.lrange</code></a></li>
<li><a href="README.md#TeaSeis.lrange-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.lrange</code></a></li>
<li><a href="README.md#TeaSeis.lstarts-Tuple%7BJSeis%7D"><code>TeaSeis.lstarts</code></a></li>
<li><a href="README.md#TeaSeis.lstarts-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.lstarts</code></a></li>
<li><a href="README.md#TeaSeis.pincs-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.pincs</code></a></li>
<li><a href="README.md#TeaSeis.pincs-Tuple%7BJSeis%7D"><code>TeaSeis.pincs</code></a></li>
<li><a href="README.md#TeaSeis.prop-Tuple%7BJSeis,Symbol%7D"><code>TeaSeis.prop</code></a></li>
<li><a href="README.md#TeaSeis.propdefs-Tuple%7BJSeis%7D"><code>TeaSeis.propdefs</code></a></li>
<li><a href="README.md#TeaSeis.propdefs-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.propdefs</code></a></li>
<li><a href="README.md#TeaSeis.props-Tuple%7BJSeis%7D"><code>TeaSeis.props</code></a></li>
<li><a href="README.md#TeaSeis.props-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.props</code></a></li>
<li><a href="README.md#TeaSeis.pstarts-Tuple%7BJSeis%7D"><code>TeaSeis.pstarts</code></a></li>
<li><a href="README.md#TeaSeis.pstarts-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.pstarts</code></a></li>
<li>[<code>TeaSeis.readframe</code>](README.md#TeaSeis.readframe-Tuple{JSeis,Vararg{Int64,N} where N})</li>
<li>[<code>TeaSeis.readframe!</code>](README.md#TeaSeis.readframe!-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Vararg{Int64,N} where N})</li>
<li>[<code>TeaSeis.readframehdrs</code>](README.md#TeaSeis.readframehdrs-Tuple{JSeis,Vararg{Int64,N} where N})</li>
<li>[<code>TeaSeis.readframehdrs!</code>](README.md#TeaSeis.readframehdrs!-Tuple{JSeis,AbstractArray{UInt8,2},Vararg{Int64,N} where N})</li>
<li>[<code>TeaSeis.readframetrcs</code>](README.md#TeaSeis.readframetrcs-Tuple{JSeis,Vararg{Int64,N} where N})</li>
<li>[<code>TeaSeis.readframetrcs!</code>](README.md#TeaSeis.readframetrcs!-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N})</li>
<li>[<code>TeaSeis.readhdrs</code>](README.md#TeaSeis.readhdrs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li>[<code>TeaSeis.readhdrs!</code>](README.md#TeaSeis.readhdrs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li>[<code>TeaSeis.readtrcs</code>](README.md#TeaSeis.readtrcs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li>[<code>TeaSeis.readtrcs!</code>](README.md#TeaSeis.readtrcs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N)</li>
<li><a href="README.md#TeaSeis.regularize!-Tuple%7BJSeis,Array%7BFloat32,2%7D,Array%7BUInt8,2%7D%7D"><code>TeaSeis.regularize!</code></a></li>
<li>[<code>TeaSeis.set!</code>](README.md#TeaSeis.set!-Union{Tuple{T}, Tuple{TraceProperty,AbstractArray{UInt8,2},Int64,T}} where T&lt;:Number)</li>
<li><a href="README.md#TeaSeis.units-Tuple%7BJSeis%7D"><code>TeaSeis.units</code></a></li>
<li><a href="README.md#TeaSeis.units-Tuple%7BJSeis,Int64%7D"><code>TeaSeis.units</code></a></li>
<li>[<code>TeaSeis.writeframe</code>](README.md#TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N})</li>
<li><a href="README.md#TeaSeis.writeframe-Tuple%7BJSeis,AbstractArray%7BFloat32,2%7D,AbstractArray%7BUInt8,2%7D,Int64%7D"><code>TeaSeis.writeframe</code></a></li>
</ul>
<p><a id="user-content-teaseis.allocframe-tuple{jseis}" href="#TeaSeis.allocframe-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.allocframe</code></strong> — <em>Method</em>.</p>
<pre><code>allocframe(io)
</code></pre>
<p>Allocate memory for one frame of JavaSeis dataset.  Returns <code>(Array{Float32,2},Array{UInt8,2})</code>. For example, <code>trcs, hdrs = allocframe(jsopen("data.js"))</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1250-L1255">source</a><br></p>
<p><a id="user-content-teaseis.allocframehdrs-tuple{jseis}" href="#TeaSeis.allocframehdrs-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.allocframehdrs</code></strong> — <em>Method</em>.</p>
<p>allocframehdrs(io)</p>
<p>Allocate memory for headers for one frame of JavaSeis dataset.  Returns <code>Array{UInt8,2}</code>. For example, <code>hdrs = allocframehdrs(jsopen("data.js"))</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1257-L1262">source</a><br></p>
<p><a id="user-content-teaseis.allocframetrcs-tuple{jseis}" href="#TeaSeis.allocframetrcs-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.allocframetrcs</code></strong> — <em>Method</em>.</p>
<p>allocframetrcs(io)</p>
<p>Allocate memory for traces for one frame of JavaSeis dataset.  Returns <code>Array{Float32,2}</code>. For example, <code>trcs = allocframetrcs(jsopen("data.js"))</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1264-L1269">source</a><br></p>
<p><a id="user-content-teaseis.dataproperty-tuple{jseis,string}" href="#TeaSeis.dataproperty-Tuple{JSeis,String}">#</a>
<strong><code>TeaSeis.dataproperty</code></strong> — <em>Method</em>.</p>
<pre><code>dataproperty(io, label)
</code></pre>
<p>Get a data property (data properties are per file, rather than per trace) from <code>io::JSeis</code> with label <code>label::String</code>.  For example, <code>dataproperty(jsopen("data.js"), "FREQUENCY")</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1220-L1225">source</a><br></p>
<p><a id="user-content-teaseis.domains-tuple{jseis,int64}" href="#TeaSeis.domains-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.domains</code></strong> — <em>Method</em>.</p>
<pre><code>domains(io, i)
</code></pre>
<p>Returns the domain of the ith dimension of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2270-L2275">source</a><br></p>
<p><a id="user-content-teaseis.domains-tuple{jseis}" href="#TeaSeis.domains-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.domains</code></strong> — <em>Method</em>.</p>
<pre><code>domains(io)
</code></pre>
<p>Returns the domains of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2263-L2268">source</a><br></p>
<p><a id="user-content-teaseis.fold-tuple{jseis,array{uint8,2}}" href="#TeaSeis.fold-Tuple{JSeis,Array{UInt8,2}}">#</a>
<strong><code>TeaSeis.fold</code></strong> — <em>Method</em>.</p>
<pre><code>fold(io, hdrs)
</code></pre>
<p>Compute the fold of a frame where io is JSeis corresponding to the dataset, and hdrs are the headers for the frame. For example: <code>io=jsopen("file.js"); fold(io, readframehdrs(io,1))</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L961-L966">source</a><br></p>
<p><a id="user-content-teaseis.fold-tuple{jseis,vararg{int64,n} where n}" href="#TeaSeis.fold-Tuple{JSeis,Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.fold</code></strong> — <em>Method</em>.</p>
<pre><code>fold(io, idx...)
</code></pre>
<p>Compute the fold of a frame where idx is the frame/volume/hypercube indices.  For example, <code>fold(jsopen("file.js"),1)</code> for a 3D dataset, <code>fold(jsopen("file.js",1,2))</code> for a 4D dataset, and <code>fold(jsopen("file.js"),1,2,3)</code> for a 5D dataset.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L972-L977">source</a><br></p>
<p><a id="user-content-teaseis.geometry-tuple{jseis}" href="#TeaSeis.geometry-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.geometry</code></strong> — <em>Method</em>.</p>
<pre><code>geometry(io)
</code></pre>
<p>If <code>io::JSeis</code> contains a geometry definition, then return a geometry of type <code>Geometry</code>.  Otherwise, return <code>nothing</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2362-L2367">source</a><br></p>
<p><a id="user-content-teaseis.hasdataproperty-tuple{any,any}" href="#TeaSeis.hasdataproperty-Tuple{Any,Any}">#</a>
<strong><code>TeaSeis.hasdataproperty</code></strong> — <em>Method</em>.</p>
<pre><code>hasdataproperty(io, label)
</code></pre>
<p>return true if <code>io::JSeis</code> contains the data property corresponding to <code>label</code>.  Otherwise, return false.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1235-L1239">source</a><br></p>
<p><a id="user-content-teaseis.ind2sub-tuple{jseis,int64}" href="#TeaSeis.ind2sub-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.ind2sub</code></strong> — <em>Method</em>.</p>
<pre><code>ind2sub(io, i)
</code></pre>
<p>Return the (frame,volume...) tuple for the liner index <code>i</code>.  This is useful for looping over all frames in a data-set that is more that 4 or more dimensions. For example,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(io)
    trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(io, <span class="pl-c1">ind2sub</span>(io,i)<span class="pl-k">...</span>)
<span class="pl-k">end</span></pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2061-L2073">source</a><br></p>
<p><a id="user-content-teaseis.jscreate-tuple{string}" href="#TeaSeis.jscreate-Tuple{String}">#</a>
<strong><code>TeaSeis.jscreate</code></strong> — <em>Method</em>.</p>
<pre><code>jscreate(filename)
</code></pre>
<p>Create a JavaSeis dataset without opening it.  This method has the same optional arguments as <code>jsopen</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L316-L320">source</a><br></p>
<p><a id="user-content-teaseis.jsopen-tuple{string,string}" href="#TeaSeis.jsopen-Tuple{String,String}">#</a>
<strong><code>TeaSeis.jsopen</code></strong> — <em>Method</em>.</p>
<pre><code>jsopen(filename, mode, [parameters])
</code></pre>
<p>Open a new or existing JavaSeis dataset with name <code>filename::String</code> and in <code>mode::String</code>. <code>mode</code> can be one of <code>"r"</code> (read), <code>"w"</code> (write/create) or <code>"r+"</code> (read and write). It is convention for filename to havea ".js" extention.</p>
<p>If <code>"w"</code> is used for the value of <code>mode</code>, then the <code>axis_lengths</code> named parameter is required, and several optional named function parameters are available:</p>
<p><strong>parameters</strong></p>
<ul>
<li><code>similarto::String</code> An existing JavaSeis dataset.  If set, then all other named arguments can be used to modify the data context that belongs to the existing JavaSeis dataset.</li>
<li><code>description::String</code> Description of dataset, if not set, then a description is parsed from the filename.</li>
<li><code>mapped::Bool</code> If the dataset is full (no missing frames/traces), then it may be more efficient to set this to <code>false</code>.  Defaults to <code>true</code>.</li>
<li><code>datatype::String</code> Examples are <code>CMP</code>, <code>SHOT</code>, etc.  If not set, then <code>UNKNOWN</code> is used.</li>
<li><code>dataformat::Type</code> Choose from <code>Float32</code>, and <code>Int16</code>.  If not set, then <code>Float32</code> is used.</li>
<li><code>dataorder::String</code> (not supported)</li>
<li><code>axis_lengths::Array{Int}</code> size of each dimension (sample/trace/frame/volume/hypercube) of the JavaSeis data context</li>
<li><code>axis_propdefs::Array{TracePropertyDef}</code> Trace properties corresponding to JavaSeis axes.  If not set, then <code>SAMPLE</code>, <code>TRACE</code>, <code>FRAME</code>, <code>VOLUME</code> and <code>HYPRCUBE</code> are used.</li>
<li><code>axis_units::Array{String}</code> Units corresponding to JavaSeis axes. e.g. <code>SECONDS</code>, <code>METERS</code>, etc.  If not set, then <code>UNKNOWN</code> is used.</li>
<li><code>axis_domains::Array{String}</code> Domains corresponding to JavaSeis axes. e.g. <code>SPACE</code>, <code>TIME</code>, etc.  If not set, then <code>UNKNOWN</code> is used.</li>
<li><code>axis_lstarts::Array{Int}</code> Logical origins for each axis.  If not set, then <code>1</code> is used for the logical origin of each axis.</li>
<li><code>axis_lincs::Array{Int}</code> Logical increments for each axis.  If not set, then <code>1</code> is used for the logical increments of each axis.</li>
<li><code>axis_pstarts::Array{Float64}</code> Physical origins for each axis.  If not set, then <code>0.0</code> is used for the physical origin of each axis.</li>
<li><code>axis_pincs::Array{Float64}</code> Physical increments for each axis.  If not set, then <code>1.0</code> is used for the physical increments of each axis.</li>
<li><code>data_properties::Array{DataProperty}</code> An array of custom trace properties.  These are in addition to the properties listed in <code>SSPROPS.md</code>.</li>
<li><code>properties::Array{TracePropertyDef}</code> An array of custom data properties.  One property per data-set rather than one property per trace as in <code>properties</code> above.</li>
<li><code>geometry::Geometry</code> An optional three point geometry can be embedded in the JavaSeis file.</li>
<li><code>secondaries::Array{String}</code> An array of file-system locations used to store the file extents.  If not set, then <em>primary</em> storage is used.</li>
<li><code>nextents::Int64</code> The number of file-extents used to store the data.  If not set, then a heuristic is used to choose the number of extents.  The heuristic is: min(256,10 + (FRAMEWORK_SIZE)/(2*1024^3)).</li>
<li><code>properties_add::Array{TracePropertyDef}</code> When <code>similarto</code> is specified, use this to add trace properties to those already existing in the <code>similarto</code> file.</li>
<li><code>properties_rm::Array{TracePropertyDef}</code> When <code>similarto</code> is specified, use this to remove trace properties to those already existing in the <code>similarto</code> file.</li>
<li><code>dataproperties_add::Array{DataProperty}</code> When <code>similarto</code> is specfied, use this to add dataset properties to those aloready existing in the <code>similarto</code> file.</li>
<li><code>dataproperties_rm::Array{DataProperty}</code> When <code>similarto</code> is specified, use this to remove dataset properties to those already existing in the <code>similarto</code> file.</li>
</ul>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L39-L73">source</a><br></p>
<p><a id="user-content-teaseis.jsopen-tuple{string}" href="#TeaSeis.jsopen-Tuple{String}">#</a>
<strong><code>TeaSeis.jsopen</code></strong> — <em>Method</em>.</p>
<pre><code>jsopen(filename)
</code></pre>
<p>Equivalent to <code>jsopen(filename, "r")</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L309-L313">source</a><br></p>
<p><a id="user-content-teaseis.labels-tuple{jseis,int64}" href="#TeaSeis.labels-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.labels</code></strong> — <em>Method</em>.</p>
<pre><code>labels(io, i)
</code></pre>
<p>Returns the string label of the ith framework axis of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2214-L2219">source</a><br></p>
<p><a id="user-content-teaseis.labels-tuple{jseis}" href="#TeaSeis.labels-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.labels</code></strong> — <em>Method</em>.</p>
<pre><code>labels(io)
</code></pre>
<p>Returns the string labels corresponding to the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2207-L2212">source</a><br></p>
<p><a id="user-content-teaseis.leftjustify!-tuple{jseis,array{float32,2},array{uint8,2}}" href="#TeaSeis.leftjustify!-Tuple{JSeis,Array{Float32,2},Array{UInt8,2}}">#</a>
<strong><code>TeaSeis.leftjustify!</code></strong> — <em>Method</em>.</p>
<pre><code>leftjustify(io, trcs, hdrs)
</code></pre>
<p>Left justify all live (non-dead) traces in a frame, moving them to the beginning of <code>trcs</code> and <code>hdrs</code>.  See also <code>regularize!</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2079-L2084">source</a><br></p>
<p><a id="user-content-teaseis.lincs-tuple{jseis,int64}" href="#TeaSeis.lincs-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.lincs</code></strong> — <em>Method</em>.</p>
<pre><code>lincs(io,i)
</code></pre>
<p>Returns the logical increment of the framework axes for dimension <code>i</code> of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2326-L2331">source</a><br></p>
<p><a id="user-content-teaseis.lincs-tuple{jseis}" href="#TeaSeis.lincs-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.lincs</code></strong> — <em>Method</em>.</p>
<pre><code>lincs(io)
</code></pre>
<p>Returns the logical increments of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2319-L2324">source</a><br></p>
<p><a id="user-content-teaseis.lrange-tuple{jseis,int64}" href="#TeaSeis.lrange-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.lrange</code></strong> — <em>Method</em>.</p>
<pre><code>lrange(io, i)
</code></pre>
<p>Returns the logical range of the framework axes for dimension <code>i</code> of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2340-L2345">source</a><br></p>
<p><a id="user-content-teaseis.lrange-tuple{jseis}" href="#TeaSeis.lrange-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.lrange</code></strong> — <em>Method</em>.</p>
<pre><code>lrange(io)
</code></pre>
<p>Returns the logical ranges of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2333-L2338">source</a><br></p>
<p><a id="user-content-teaseis.lstarts-tuple{jseis,int64}" href="#TeaSeis.lstarts-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.lstarts</code></strong> — <em>Method</em>.</p>
<pre><code>lstarts(io,i)
</code></pre>
<p>Returns the logical start of the framework axes for dimension <code>i</code> of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2312-L2317">source</a><br></p>
<p><a id="user-content-teaseis.lstarts-tuple{jseis}" href="#TeaSeis.lstarts-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.lstarts</code></strong> — <em>Method</em>.</p>
<pre><code>lstarts(io)
</code></pre>
<p>Returns the logical start of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2305-L2310">source</a><br></p>
<p><a id="user-content-teaseis.pincs-tuple{jseis,int64}" href="#TeaSeis.pincs-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.pincs</code></strong> — <em>Method</em>.</p>
<pre><code>pincs(io, i)
</code></pre>
<p>Returns the physical increments of the framework axes for dimension <code>i</code> of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2298-L2303">source</a><br></p>
<p><a id="user-content-teaseis.pincs-tuple{jseis}" href="#TeaSeis.pincs-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.pincs</code></strong> — <em>Method</em>.</p>
<pre><code>pincs(io)
</code></pre>
<p>Returns the physical increments of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2291-L2296">source</a><br></p>
<p><a id="user-content-teaseis.prop-tuple{jseis,symbol}" href="#TeaSeis.prop-Tuple{JSeis,Symbol}">#</a>
<strong><code>TeaSeis.prop</code></strong> — <em>Method</em>.</p>
<pre><code>prop(io, propertyname[, proptype=Any])
</code></pre>
<p>Get a trace property from <code>io::JSeis</code> where <code>propertyname</code> is either <code>String</code> or <code>TracePropertyDef</code>. Note that if  <code>propertyname</code> is a String, then this method produces a type-unstable result. For example:</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data.js<span class="pl-pds">"</span></span>)
p <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, <span class="pl-s"><span class="pl-pds">"</span>REC_X<span class="pl-pds">"</span></span>)            <span class="pl-c"><span class="pl-c">#</span> using a `String`, output type of prop is not inferred</span>
p <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, <span class="pl-s"><span class="pl-pds">"</span>REC_X<span class="pl-pds">"</span></span>, Float32)   <span class="pl-c"><span class="pl-c">#</span> using a `String`, output type of prop is inferred using `Float32`</span>
p <span class="pl-k">=</span> <span class="pl-c1">prop</span>(io, stockprop[<span class="pl-c1">:REC_X</span>])  <span class="pl-c"><span class="pl-c">#</span> using a `TracePropertyDef`, output type of prop is inferred</span></pre></div>
<p>Note that in the examples above, the string "REC*X" can be replaced by the symbol <code>REC*X</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1143-L1158">source</a><br></p>
<p><a id="user-content-teaseis.propdefs-tuple{jseis,int64}" href="#TeaSeis.propdefs-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.propdefs</code></strong> — <em>Method</em>.</p>
<pre><code>propdefs(io, i)
</code></pre>
<p>Returns the property definition of the ith framework axis of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2228-L2233">source</a><br></p>
<p><a id="user-content-teaseis.propdefs-tuple{jseis}" href="#TeaSeis.propdefs-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.propdefs</code></strong> — <em>Method</em>.</p>
<pre><code>propdefs(io)
</code></pre>
<p>Returns the property definitions of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2221-L2226">source</a><br></p>
<p><a id="user-content-teaseis.props-tuple{jseis,int64}" href="#TeaSeis.props-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.props</code></strong> — <em>Method</em>.</p>
<pre><code>props(io, i)
</code></pre>
<p>Returns the trace property of the ith framework axis of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2242-L2247">source</a><br></p>
<p><a id="user-content-teaseis.props-tuple{jseis}" href="#TeaSeis.props-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.props</code></strong> — <em>Method</em>.</p>
<pre><code>props(io)
</code></pre>
<p>Returns the trace properties of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2235-L2240">source</a><br></p>
<p><a id="user-content-teaseis.pstarts-tuple{jseis,int64}" href="#TeaSeis.pstarts-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.pstarts</code></strong> — <em>Method</em>.</p>
<pre><code>pstarts(io, i)
</code></pre>
<p>Returns the physical start of the ith dimension of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2284-L2289">source</a><br></p>
<p><a id="user-content-teaseis.pstarts-tuple{jseis}" href="#TeaSeis.pstarts-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.pstarts</code></strong> — <em>Method</em>.</p>
<pre><code>pstarts(io)
</code></pre>
<p>Returns the physical start of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2277-L2282">source</a><br></p>
<p><a id="user-content-teaseis.readframe!-tuple{jseis,abstractarray{float32,2},abstractarray{uint8,2},vararg{int64,n} where n}" href="#TeaSeis.readframe!-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.readframe!</code></strong> — <em>Method</em>.</p>
<pre><code>readframe!(io, trcs, hdrs, idx...)
</code></pre>
<p>In-place read of a single frame from a JavaSeis dataset.  For non full frame, the resulting traces and headers are left justified.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframe</span>(io)
frm_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, frm_idx)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframe</span>(io)
frm_idx, vol_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, frm_idx, vol_idx)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframe</span>(io)
frm_idx, vol_idx, hyp_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
<span class="pl-c1">readframe!</span>(io, trcs, hdrs, frm_idx, vol_idx, hyp_idx)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1341-L1373">source</a><br></p>
<p><a id="user-content-teaseis.readframe-tuple{jseis,vararg{int64,n} where n}" href="#TeaSeis.readframe-Tuple{JSeis,Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.readframe</code></strong> — <em>Method</em>.</p>
<pre><code>readframe(io, idx...)
</code></pre>
<p>Out-of-place read of a single frame from a JavaSeis dataset.  For non full frame, the resulting traces and headers are left justified.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), frm_idx)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx, vol_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), frm_idx, vol_idx)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx, vol_idx, hyp_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), frm_idx, vol_idx, hyp_idx)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1377-L1403">source</a><br></p>
<p><a id="user-content-teaseis.readframehdrs!-tuple{jseis,abstractarray{uint8,2},vararg{int64,n} where n}" href="#TeaSeis.readframehdrs!-Tuple{JSeis,AbstractArray{UInt8,2},Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.readframehdrs!</code></strong> — <em>Method</em>.</p>
<pre><code>readframehdrs!(io, hdrs, idx...)
</code></pre>
<p>In-place read of a single frame from a JavaSeis dataset (headers only).  For non full frame, the resulting headers are left justified.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>)
hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframehdrs</span>(io)
frm_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, frm_idx)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>)
hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframehdrs</span>(io)
frm_idx, vol_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, frm_idx, vol_idx)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>)
hdrs <span class="pl-k">=</span> <span class="pl-c1">allocframehdrs</span>(io)
frm_idx, vol_idx, hyp_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
<span class="pl-c1">readframehdrs!</span>(io, hdrs, frm_idx, vol_idx, hyp_idx)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1473-L1505">source</a><br></p>
<p><a id="user-content-teaseis.readframehdrs-tuple{jseis,vararg{int64,n} where n}" href="#TeaSeis.readframehdrs-Tuple{JSeis,Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.readframehdrs</code></strong> — <em>Method</em>.</p>
<p>readframehdrs(io, idx...)</p>
<p>Out-of-place read of a single frame (headers only) from a JavaSeis dataset.  For non full frame, the resulting headers are left justified.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), frm_idx)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx, vol_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), frm_idx, vol_idx)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx, vol_idx, hyp_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
hdrs <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), frm_idx, vol_idx, hyp_idx)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1509-L1535">source</a><br></p>
<p><a id="user-content-teaseis.readframetrcs!-tuple{jseis,abstractarray{float32,2},vararg{int64,n} where n}" href="#TeaSeis.readframetrcs!-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.readframetrcs!</code></strong> — <em>Method</em>.</p>
<pre><code>readframetrcs!(io, trcs, hdrs, idx...)
</code></pre>
<p>In-place read of a single frame from a JavaSeis dataset (traces only).  For non full frame, the resulting traces are left justified.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>)
trcs <span class="pl-k">=</span> <span class="pl-c1">allocframetrcs</span>(io)
frm_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, frm_idx)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>)
trcs <span class="pl-k">=</span> <span class="pl-c1">allocframetrcs</span>(io)
frm_idx, vol_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, frm_idx, vol_idx)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>)
trcs <span class="pl-k">=</span> <span class="pl-c1">allocframetrcs</span>(io)
frm_idx, vol_idx, hyp_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
<span class="pl-c1">readframetrcs!</span>(io, trcs, frm_idx, vol_idx, hyp_idx)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1407-L1439">source</a><br></p>
<p><a id="user-content-teaseis.readframetrcs-tuple{jseis,vararg{int64,n} where n}" href="#TeaSeis.readframetrcs-Tuple{JSeis,Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.readframetrcs</code></strong> — <em>Method</em>.</p>
<pre><code>readframetrcs(io, idx...)
</code></pre>
<p>Out-of-place read of a single frame (traces only) from a JavaSeis dataset.  For non full frame, the resulting traces are left justified.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), frm_idx)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx, vol_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), frm_idx, vol_idx)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>frm_idx, vol_idx, hyp_idx <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>
trcs <span class="pl-k">=</span> <span class="pl-c1">readframetrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), frm_idx, vol_idx, hyp_idx)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1443-L1469">source</a><br></p>
<p><a id="user-content-teaseis.readhdrs!-union{tuple{n}, tuple{jseis,abstractarray{uint8,n} where n,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#TeaSeis.readhdrs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>TeaSeis.readhdrs!</code></strong> — <em>Method</em>.</p>
<pre><code>readhdrs!(io, hdrs, smp_range, trace_range, range...)
</code></pre>
<p>In-place read of a subset of data (headers only) from a JavaSeis file. If performance is important, then consider using <code>readframehdrs!</code> instead.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readhdrs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), hdrs, :, :, :)
<span class="pl-c1">readhdrs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), hdrs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>end, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readhdrs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), hdrs, :, :, :, :)
<span class="pl-c1">readhdrs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), hdrs, :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readhdrs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), hdrs, :, :, :, :, :)
<span class="pl-c1">readhdrs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), hdrs, :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1687-L1713">source</a><br></p>
<p><a id="user-content-teaseis.readhdrs-union{tuple{n}, tuple{jseis,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#TeaSeis.readhdrs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>TeaSeis.readhdrs</code></strong> — <em>Method</em>.</p>
<pre><code>readhdrs(io, trace_range, range...)
</code></pre>
<p>Out-of-place read of a subset of data (headers only) from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using <code>readframetrcs</code> instead.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), :, :, :)
hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>end, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), :, :, :, :)
hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), :, :, :, :, :)
hdrs <span class="pl-k">=</span> <span class="pl-c1">readhdrs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1721-L1746">source</a><br></p>
<p><a id="user-content-teaseis.readtrcs!-union{tuple{n}, tuple{jseis,abstractarray{float32,n} where n,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#TeaSeis.readtrcs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>TeaSeis.readtrcs!</code></strong> — <em>Method</em>.</p>
<pre><code>readtrcs!(io, trcs, sample_range, trace_range, range...)
</code></pre>
<p>In-place read of a subset of data (traces only) from a JavaSeis file. If performance is important, then consider using <code>readframetrcs!</code> instead.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readtrcs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), trcs, :, :, :)
<span class="pl-c1">readtrcs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), trcs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>end, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readtrcs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), trcs, :, :, :, :)
<span class="pl-c1">readtrcs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), trcs, :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readtrcs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), trcs, :, :, :, :, :)
<span class="pl-c1">readtrcs!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), trcs, :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1621-L1646">source</a><br></p>
<p><a id="user-content-teaseis.readtrcs-union{tuple{n}, tuple{jseis,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#TeaSeis.readtrcs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>TeaSeis.readtrcs</code></strong> — <em>Method</em>.</p>
<pre><code>readtrcs(io, sample_range, trace_range, range...)
</code></pre>
<p>Out-of-place read of a subset of data (traces only) from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using <code>readframetrcs</code> instead.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), :, :, :)
trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>end, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), :, :, :, :)
trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), :, :, :, :, :)
trcs <span class="pl-k">=</span> <span class="pl-c1">readtrcs</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1653-L1679">source</a><br></p>
<p><a id="user-content-teaseis.regularize!-tuple{jseis,array{float32,2},array{uint8,2}}" href="#TeaSeis.regularize!-Tuple{JSeis,Array{Float32,2},Array{UInt8,2}}">#</a>
<strong><code>TeaSeis.regularize!</code></strong> — <em>Method</em>.</p>
<pre><code>regularize!(io, trcs, hdrs)
</code></pre>
<p>Regularize the traces in a frame, moving them from their left-justified state, to one that reflects their trace location within a frame according to their trace framework definition.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2143-L2148">source</a><br></p>
<p><a id="user-content-teaseis.set!-union{tuple{t}, tuple{traceproperty,abstractarray{uint8,2},int64,t}} where t&lt;:number">#</a>
<strong><code>TeaSeis.set!</code></strong> — <em>Method</em>.</p>
<pre><code>set!(prop, hdrs, i, value)
</code></pre>
<p>Set the value of the trace property <code>prop::TraceProperty</code> stored in the header of the ith column of <code>hdrs::Array{UInt8,2}</code> to <code>value::T</code>.  For example, <code>io=jsopen("test.js"); hdrs=readframehdrs(io,1); set!(prop(io,"REC_X"), 1, 10.0)</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1117-L1123">source</a><br></p>
<p><a id="user-content-teaseis.units-tuple{jseis,int64}" href="#TeaSeis.units-Tuple{JSeis,Int64}">#</a>
<strong><code>TeaSeis.units</code></strong> — <em>Method</em>.</p>
<pre><code>units(io, i)
</code></pre>
<p>Returns the unit of measure of the ith dimension of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2256-L2261">source</a><br></p>
<p><a id="user-content-teaseis.units-tuple{jseis}" href="#TeaSeis.units-Tuple{JSeis}">#</a>
<strong><code>TeaSeis.units</code></strong> — <em>Method</em>.</p>
<pre><code>units(io)
</code></pre>
<p>Returns the unit of measure of the framework axes of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2249-L2254">source</a><br></p>
<p><a id="user-content-teaseis.writeframe-tuple{jseis,abstractarray{float32,2},abstractarray{uint8,2},int64}" href="#TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Int64}">#</a>
<strong><code>TeaSeis.writeframe</code></strong> — <em>Method</em>.</p>
<pre><code>writeframe(io, trcs, hdrs)
</code></pre>
<p>Write a frame of data to the JavaSeis dataset corresponding to <code>io::JSeis</code>.  <code>trcs</code> and <code>hdrs</code> are 2-dimensional arrays. The location of the dataset written to is determined by the values of the framework headers stored in <code>hdrs</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1866-L1871">source</a><br></p>
<p><a id="user-content-teaseis.writeframe-tuple{jseis,abstractarray{float32,2},vararg{int64,n} where n}" href="#TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N}">#</a>
<strong><code>TeaSeis.writeframe</code></strong> — <em>Method</em>.</p>
<pre><code>writeframe(io, trcs, idx...)
</code></pre>
<p>Write a frame of data to the JavaSeis dataset corresponding to <code>io::JSeis</code>.  <code>trcs</code> is a 2-dimensional array.  The location of the datset written to is determined by <code>idx...</code>.  For example:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">writeframe</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), trcs, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> write to frame 1</span></pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">writeframe</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), trcs, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> write to frame 1, volume 2</span></pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">writeframe</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), trcs, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> write to frame 1, volume 2, hypercube 3</span></pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1878-L1901">source</a><br></p>
<p><a id="user-content-teaseis.geometry-tuple{}" href="#TeaSeis.Geometry-Tuple{}">#</a>
<strong><code>TeaSeis.Geometry</code></strong> — <em>Method</em>.</p>
<pre><code>g = Geometry(;ox=0.0,oy=0.0,oz=0.0,ux=1.0,uy=0.0,uz=0.0,vx=0.0,vy=1.0,vz=0.0,wx=0.0,wy=0.0,wz=1.0,u1=0,un=0,v1=0,vn=0,w1=0,wn=0)
</code></pre>
<p>where <code>g::Geometry</code>.  The named arguments are:</p>
<ul>
<li><code>ox=0.0,oy=0.0,oz=0.0</code> origin of axes</li>
<li><code>ux=1.0,uy=0.0,uz=0.0</code> end of u-vector (e.g. end of first in-line, in the cross-line direction</li>
<li><code>vx=0.0,vy=1.0,vz=0.0</code> end of v-vector (e.g. end of first cross-line, in the in-line direction</li>
<li><code>wx=0.0,wy=0.0,wz=1.0</code> end of depth axis</li>
<li><code>u1=1</code> minimum index along the u-vector (e.g. maximum cross-line index)</li>
<li><code>un=2</code> maximum index along the u-vector (e.g. maximum cross-line index)</li>
<li><code>v1=1</code> minimum index along the v-vector (e.g. minimum in-line index)</li>
<li><code>vn=2</code> maximum index along the v-vector (e.g. maximum in-line index)</li>
<li><code>w1=1</code> minimum depth index</li>
<li><code>wn=2</code> maximum depth index</li>
</ul>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/geometry.jl#L22-L37">source</a><br></p>
<p><a id="user-content-base.filesystem.cp-tuple{jseis,abstractstring}" href="#Base.Filesystem.cp-Tuple{JSeis,AbstractString}">#</a>
<strong><code>Base.Filesystem.cp</code></strong> — <em>Method</em>.</p>
<pre><code>cp(src, dst, [secondaries=nothing])
</code></pre>
<p>Copy a file from <code>src</code> (of type <code>JSeis</code>) to <code>dst</code> of type <code>String</code>.  For example, <code>cp(jsopen("copyfrom.js"), "copyto.js")</code>. Use the optional named argument <code>secondaries</code> to change the JavaSeis secondary location.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L379-L384">source</a><br></p>
<p><a id="user-content-base.filesystem.mv-tuple{jseis,abstractstring}" href="#Base.Filesystem.mv-Tuple{JSeis,AbstractString}">#</a>
<strong><code>Base.Filesystem.mv</code></strong> — <em>Method</em>.</p>
<pre><code>mv(src, dst, [secondaries=nothing])
</code></pre>
<p>Move a file from <code>src</code> (of type <code>JSeis</code>) to <code>dst</code> of type <code>String</code>.  For example, <code>cp(jsopen("movefrom.js"), "moveto.js")</code>. Use the optional named argument <code>secondaries</code> to change the JavaSeis secondary location.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L397-L402">source</a><br></p>
<p><a id="user-content-base.filesystem.rm-tuple{jseis}" href="#Base.Filesystem.rm-Tuple{JSeis}">#</a>
<strong><code>Base.Filesystem.rm</code></strong> — <em>Method</em>.</p>
<pre><code>rm(io)
</code></pre>
<p>Remove a JavaSeis dataset from disk.  For example: <code>rm(jsopen("deleteme.js"))</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L332-L336">source</a><br></p>
<p><a id="user-content-base.close-tuple{jseis}" href="#Base.close-Tuple{JSeis}">#</a>
<strong><code>Base.close</code></strong> — <em>Method</em>.</p>
<pre><code>close(io)
</code></pre>
<p>Close an open JavaSeis dataset where <code>io</code> is of type <code>JSeis</code> created using, for example, <code>jsopen</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L323-L327">source</a><br></p>
<p><a id="user-content-base.copy!-tuple{jseis,abstractarray{uint8,2},jseis,abstractarray{uint8,2}}" href="#Base.copy!-Tuple{JSeis,AbstractArray{UInt8,2},JSeis,AbstractArray{UInt8,2}}">#</a>
<strong><code>Base.copy!</code></strong> — <em>Method</em>.</p>
<pre><code>copy!(ioout, hdrsout, ioin, hdrsin)
</code></pre>
<p>Copy trace headers from <code>hdrsin::Array{Uint8,2}</code> to <code>hdrsout::Array{Uint8,2}</code> and where <code>hdrsin</code> corresponds to <code>ioin::JSeis</code> and <code>hdrsout</code> corresponds to <code>ioout::JSeis</code>.  For example,</p>
<div class="highlight highlight-source-julia"><pre>ioin <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data1.js<span class="pl-pds">"</span></span>)
ioout <span class="pl-k">=</span> <span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data2.js<span class="pl-pds">"</span></span>)
hdrsin <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(ioin,<span class="pl-c1">1</span>)
hdrsout <span class="pl-k">=</span> <span class="pl-c1">readframehdrs</span>(ioout,<span class="pl-c1">1</span>)
<span class="pl-c1">copy!</span>(ioout, hdrsout, ioin, hdrsin)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1165-L1178">source</a><br></p>
<p><a id="user-content-base.empty!-tuple{jseis}" href="#Base.empty!-Tuple{JSeis}">#</a>
<strong><code>Base.empty!</code></strong> — <em>Method</em>.</p>
<pre><code>empty!(io)
</code></pre>
<p>Empty a JavaSeis dataset from disk, retaining the meta-information.  For example: <code>empty!(jsopen("emptyme.js"))</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L344-L348">source</a><br></p>
<p><a id="user-content-base.get-tuple{teaseis.traceproperty,abstractarray{uint8,2},int64}" href="#Base.get-Tuple{TeaSeis.TraceProperty,AbstractArray{UInt8,2},Int64}">#</a>
<strong><code>Base.get</code></strong> — <em>Method</em>.</p>
<pre><code>get(prop, hdrs, i)
</code></pre>
<p>Get the value of the trace property <code>prop::TraceProperty</code> stored in the header of the ith column of <code>hdrs::Array{UInt8,2}</code>.  For example, <code>io=jsopen("data.js"); get(prop(io, "REC_X"), readframehdrs(io,1), 1)</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1109-L1114">source</a><br></p>
<p><a id="user-content-base.get-union{tuple{t}, tuple{traceproperty{t},abstractarray{uint8,1}}} where t&lt;:number">#</a>
<strong><code>Base.get</code></strong> — <em>Method</em>.</p>
<pre><code>get(prop, hdr)
</code></pre>
<p>Get the value of the trace property <code>prop::TraceProperty</code> stored in the header <code>hdr::Array{UInt8,1}</code>.  For example, <code>io=jsopen("data.js"); get(prop(io, "REC_X"), readframehdrs(io,1)[:,1])</code></p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1088-L1093">source</a><br></p>
<p><a id="user-content-base.in-tuple{union{string, traceproperty, tracepropertydef},jseis}" href="#Base.in-Tuple{Union{String, TraceProperty, TracePropertyDef},JSeis}">#</a>
<strong><code>Base.in</code></strong> — <em>Method</em>.</p>
<pre><code>in(trace_property, io)
</code></pre>
<p>Returns true if <code>trace_property</code> is in the header catalog of <code>io::JSeis</code>, and where <code>trace_property</code> is one of <code>String</code>, <code>TracePropertyDef</code> or <code>TraceProperty</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2354-L2359">source</a><br></p>
<p><a id="user-content-base.isempty-tuple{jseis}" href="#Base.isempty-Tuple{JSeis}">#</a>
<strong><code>Base.isempty</code></strong> — <em>Method</em>.</p>
<pre><code>isempty(io)
</code></pre>
<p>Returns true if the dataset correpsonding to <code>io</code> is empty (contains no data), and false otherwise.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2347-L2352">source</a><br></p>
<p><a id="user-content-base.length-tuple{jseis}" href="#Base.length-Tuple{JSeis}">#</a>
<strong><code>Base.length</code></strong> — <em>Method</em>.</p>
<pre><code>length(io)
</code></pre>
<p>Returns the number of frames in a JavaSeis dataset corresponding to <code>io::JSeis</code>. This is equivalent to <code>prod(size(io)[3:end])</code>, and is useful for iterating over all frames in a JavaSeis dataset.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2199-L2205">source</a><br></p>
<p><a id="user-content-base.ndims-tuple{jseis}" href="#Base.ndims-Tuple{JSeis}">#</a>
<strong><code>Base.ndims</code></strong> — <em>Method</em>.</p>
<pre><code>ndims(io)
</code></pre>
<p>Returns the numbers of dimensions of the JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2181-L2185">source</a><br></p>
<p><a id="user-content-base.read!-union{tuple{n}, tuple{jseis,abstractarray{float32,n} where n,abstractarray{uint8,n} where n,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#Base.read!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>Base.read!</code></strong> — <em>Method</em>.</p>
<pre><code>read!(io, trcs, sample_range, trace_range, range...)
</code></pre>
<p>In-place read of a subset of data from a JavaSeis file. If performance is important, then consider using <code>readframe!</code> instead.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">read!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), trcs, hdrs, :, :, :)
<span class="pl-c1">read!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), trcs, hdrs, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>end, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">read!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), trcs, hdrs, :, :, :, :)
<span class="pl-c1">read!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), trcs, hdrs, :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">read!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), trcs, hdrs, :, :, :, :, :)
<span class="pl-c1">read!</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), trcs, hdrs, :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1755-L1780">source</a><br></p>
<p><a id="user-content-base.read-union{tuple{n}, tuple{jseis,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#Base.read-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>Base.read</code></strong> — <em>Method</em>.</p>
<pre><code>read(io, sample_range, trace_range, range...)
</code></pre>
<p>Out-of-place read of a subset of data from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using <code>readframetrcs</code> instead.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), :, :, :)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_3D.js<span class="pl-pds">"</span></span>), :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>end, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), :, :, :, :)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_4D.js<span class="pl-pds">"</span></span>), :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre>trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), :, :, :, :, :)
trcs, hdrs <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">jsopen</span>(<span class="pl-s"><span class="pl-pds">"</span>data_5D.js<span class="pl-pds">"</span></span>), :, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1788-L1813">source</a><br></p>
<p><a id="user-content-base.size-tuple{jseis,int64}" href="#Base.size-Tuple{JSeis,Int64}">#</a>
<strong><code>Base.size</code></strong> — <em>Method</em>.</p>
<pre><code>size(io, i)
</code></pre>
<p>Returns the lenth of dimension i of a JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2193-L2197">source</a><br></p>
<p><a id="user-content-base.size-tuple{jseis}" href="#Base.size-Tuple{JSeis}">#</a>
<strong><code>Base.size</code></strong> — <em>Method</em>.</p>
<pre><code>size(io)
</code></pre>
<p>Returns the lenths of all dimensions (as a tuple of integers) of a JavaSeis dataset corresponding to <code>io::JSeis</code>.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2187-L2191">source</a><br></p>
<p><a id="user-content-base.write" href="#Base.write">#</a>
<strong><code>Base.write</code></strong> — <em>Function</em>.</p>
<pre><code>write(io, trcs, hdrs[, smprng=:])
</code></pre>
<p>Write <code>trcs</code> and <code>hdrs</code> to the file corresponding to <code>io::JSeis</code>.  Optionally, you can limit which samples are written. The locations that are written to are determined by the values corresponding to the framework headers <code>hdrs</code>.  Note that the dimension of the arrays <code>trcs</code> and <code>hdrs</code> must match the number of dimensions in the framework.</p>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1923-L1929">source</a><br></p>
<p><a id="user-content-base.write-union{tuple{n}, tuple{jseis,abstractarray{float32,n} where n,vararg{union{colon, int64, abstractrange{int64}},n}}} where n" href="#Base.write-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N">#</a>
<strong><code>Base.write</code></strong> — <em>Method</em>.</p>
<pre><code>write(io, trcs, sample_range, trace_range, range...)
</code></pre>
<p>Write trcs to the JavaSeis file corresponding to <code>io::JSeis</code>.  the dimension of <code>trcs</code> must be the same as the dimension of <code>io</code>, and the size of each dimension corresponds to <code>range</code>.  Examples:</p>
<p><strong>3D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(io, trcs, :, :, :)</pre></div>
<p><strong>4D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(io, trcs, :, :, :, :)</pre></div>
<p><strong>5D:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(io, trcs, :, :, :, :, :)</pre></div>
<p><a href="https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1961-L1984">source</a><br></p>
</article></div>