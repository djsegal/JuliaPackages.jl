<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://algopaul.github.io/PortHamiltonianBenchmarkSystems.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/Algopaul/PortHamiltonianBenchmarkSystems.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/5106d61548ef29d868a8bb96e7cff00f2dadf4185ea6c183f6c2f3ea9f5a7b86/687474703a2f2f636f6465636f762e696f2f6769746875622f416c676f7061756c2f506f727448616d696c746f6e69616e42656e63686d61726b53797374656d732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="http://codecov.io/github/Algopaul/PortHamiltonianBenchmarkSystems.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/actions/workflows/CI.yml/badge.svg"><img src="https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-porthamiltonianbenchmarksystems" class="anchor" aria-hidden="true" href="#porthamiltonianbenchmarksystems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PortHamiltonianBenchmarkSystems</h1>
<h2 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h2>
<p dir="auto"><a href="https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/">PortHamiltonianBenchmarkSystems</a> is a collection of port-Hamiltonian systems, that can be used as benchmarks for simulation, control, and model-order reduction algorithms. We feature constructors for a wide range of linear, nonlinear, ODE, and DAE systems, as well as several default parameter sets for each. Detailed descriptions and derivations of the featured systems can be found in the <a href="https://algopaul.github.io/PortHamiltonianBenchmarkSystems.jl/" rel="nofollow">documentation</a>.</p>
<p dir="auto">If you want to take advantage of this benchmark collection programming languages other than julia, you can:</p>
<ul dir="auto">
<li>Generate any desired system in Julia and save the matrices in a format of your choosing (see <a href="https://github.com/JuliaIO">JuliaIO</a>),</li>
<li>Generate MAT-files for any default parameter set, using our <a href="https://github.com/Algopaul/PortHamiltonianBenchmarkSystemsCLI.jl">Command-Line Interface</a>.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation and Usage</h2>
<p dir="auto">To install PortHamiltonianBenchmarkSystems, run the following commands in the <a href="https://docs.julialang.org/en/v1/stdlib/REPL/" rel="nofollow">Julia REPL</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">To generate one of the systems, e.g. a mass-spring-damper chain with the parameters from <a href="https://doi.org/10.1016/j.automatica.2012.05.052" rel="nofollow">Gugercin2012</a>, type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PortHamiltonianBenchmarkSystems
config = SingleMSDConfig(&quot;Gugercin&quot;)
J, R, Q, B = construct_system(config)"><pre><span class="pl-k">using</span> PortHamiltonianBenchmarkSystems
config <span class="pl-k">=</span> <span class="pl-c1">SingleMSDConfig</span>(<span class="pl-s"><span class="pl-pds">"</span>Gugercin<span class="pl-pds">"</span></span>)
J, R, Q, B <span class="pl-k">=</span> <span class="pl-c1">construct_system</span>(config)</pre></div>
<p dir="auto">Naturally, we may also specify the parameters ourselves:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="config = SingleMSDConfig(n_cells = 10, io_dim = 2, c = 1.0, m = 4.0, k = 5.0)"><pre>config <span class="pl-k">=</span> <span class="pl-c1">SingleMSDConfig</span>(n_cells <span class="pl-k">=</span> <span class="pl-c1">10</span>, io_dim <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, m <span class="pl-k">=</span> <span class="pl-c1">4.0</span>, k <span class="pl-k">=</span> <span class="pl-c1">5.0</span>)</pre></div>
<p dir="auto">If you need the system matrices in standard port-Hamiltonian form, type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="system = PHSystem(config)
(; E, J, R, Q, G, P, S, N) = system"><pre>system <span class="pl-k">=</span> <span class="pl-c1">PHSystem</span>(config)
(; E, J, R, Q, G, P, S, N) <span class="pl-k">=</span> system</pre></div>
<p dir="auto">Docstrings for the types and methods shown above can be accessed in the Julia REPL by typing <code>?</code> and then name of the type or method.</p>
<h2 dir="auto"><a id="user-content-how-to-contribute" class="anchor" aria-hidden="true" href="#how-to-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to Contribute</h2>
<p dir="auto">This benchmark collection is driven by the active support of the port-Hamiltonian community. If your research has lead to port-Hamiltonian models that may be relevant for this collection, we would be happy to include them. If you wish to contribute to the project directly, please consult our <a href="@ref">Contribution</a> page, fork our <a href="https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/">Git repository</a> and issue a pull request. Alternatively, feel free to contact us via <a href="mailto:schwerdt@math.tu-berlin.de">e-mail</a> to discuss our potential collaboration. We are happy to receive reference implementations in other languages and reimplement them in Julia for this package.</p>
</article></div>