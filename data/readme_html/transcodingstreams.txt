<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-transcodingstreamsjl" class="anchor" aria-hidden="true" href="#transcodingstreamsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TranscodingStreams.jl</h1>

<p dir="auto"><a href="https://juliaio.github.io/TranscodingStreams.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliaio.github.io/TranscodingStreams.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaIO/TranscodingStreams.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/JuliaIO/TranscodingStreams.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaIO/TranscodingStreams.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/671ab990bf7c440cc70a66424ccd1f7a5bd333cf0f031d5f00b7e19cf60c8d28/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f5472616e73636f64696e6753747265616d732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaIO/TranscodingStreams.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/docs/src/assets/transcodingstream.png"><img src="/docs/src/assets/transcodingstream.png" alt="TranscodingStream" style="max-width: 100%;"></a></p>
<p dir="auto">TranscodingStreams.jl is a package for transcoding data streams, which is:</p>
<ul dir="auto">
<li><strong>fast</strong>: small overhead and specialized methods,</li>
<li><strong>consistent</strong>: basic I/O operations you already know will work as you expect,</li>
<li><strong>generic</strong>: support any I/O objects like files, buffers, pipes, etc., and</li>
<li><strong>extensible</strong>: you can define a new codec to transcode data.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;TranscodingStreams&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TranscodingStreams<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Installing a <a href="#codec-packages">codec package</a> will install
TranscodingStreams.jl as well, and so in general you don't need to explicitly
install it.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TranscodingStreams, CodecZlib

# Some text.
text = &quot;&quot;&quot;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sollicitudin
mauris non nisi consectetur, a dapibus urna pretium. Vestibulum non posuere
erat. Donec luctus a turpis eget aliquet. Cras tristique iaculis ex, eu
malesuada sem interdum sed. Vestibulum ante ipsum primis in faucibus orci luctus
et ultrices posuere cubilia Curae; Etiam volutpat, risus nec gravida ultricies,
erat ex bibendum ipsum, sed varius ipsum ipsum vitae dui.
&quot;&quot;&quot;

# Streaming API.
stream = IOBuffer(text)
stream = TranscodingStream(GzipCompressor(), stream)
stream = TranscodingStream(GzipDecompressor(), stream)
for line in eachline(stream)
    println(line)
end
close(stream)

# Array API.
array = Vector{UInt8}(text)
array = transcode(GzipCompressor, array)
array = transcode(GzipDecompressor, array)
@assert text == String(array)

# Pre-allocated API
import TranscodingStreams: Buffer
compressed_buffer = Buffer(Vector{UInt8}(undef, ncodeunits(text)))
decompressed_buffer = Buffer(codeunits(text))
transcode(GzipCompressor, decompressed_buffer, compressed_buffer)
transcode(GzipDecompressor, compressed_buffer, decompressed_buffer)
@assert text == String(decompressed_buffer.data)"><pre><span class="pl-k">using</span> TranscodingStreams, CodecZlib

<span class="pl-c"><span class="pl-c">#</span> Some text.</span>
text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sollicitudin</span>
<span class="pl-s">mauris non nisi consectetur, a dapibus urna pretium. Vestibulum non posuere</span>
<span class="pl-s">erat. Donec luctus a turpis eget aliquet. Cras tristique iaculis ex, eu</span>
<span class="pl-s">malesuada sem interdum sed. Vestibulum ante ipsum primis in faucibus orci luctus</span>
<span class="pl-s">et ultrices posuere cubilia Curae; Etiam volutpat, risus nec gravida ultricies,</span>
<span class="pl-s">erat ex bibendum ipsum, sed varius ipsum ipsum vitae dui.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-c"><span class="pl-c">#</span> Streaming API.</span>
stream <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(text)
stream <span class="pl-k">=</span> <span class="pl-c1">TranscodingStream</span>(<span class="pl-c1">GzipCompressor</span>(), stream)
stream <span class="pl-k">=</span> <span class="pl-c1">TranscodingStream</span>(<span class="pl-c1">GzipDecompressor</span>(), stream)
<span class="pl-k">for</span> line <span class="pl-k">in</span> <span class="pl-c1">eachline</span>(stream)
    <span class="pl-c1">println</span>(line)
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(stream)

<span class="pl-c"><span class="pl-c">#</span> Array API.</span>
array <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(text)
array <span class="pl-k">=</span> <span class="pl-c1">transcode</span>(GzipCompressor, array)
array <span class="pl-k">=</span> <span class="pl-c1">transcode</span>(GzipDecompressor, array)
<span class="pl-c1">@assert</span> text <span class="pl-k">==</span> <span class="pl-c1">String</span>(array)

<span class="pl-c"><span class="pl-c">#</span> Pre-allocated API</span>
<span class="pl-k">import</span> TranscodingStreams<span class="pl-k">:</span> Buffer
compressed_buffer <span class="pl-k">=</span> <span class="pl-c1">Buffer</span>(<span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(undef, <span class="pl-c1">ncodeunits</span>(text)))
decompressed_buffer <span class="pl-k">=</span> <span class="pl-c1">Buffer</span>(<span class="pl-c1">codeunits</span>(text))
<span class="pl-c1">transcode</span>(GzipCompressor, decompressed_buffer, compressed_buffer)
<span class="pl-c1">transcode</span>(GzipDecompressor, compressed_buffer, decompressed_buffer)
<span class="pl-c1">@assert</span> text <span class="pl-k">==</span> <span class="pl-c1">String</span>(decompressed_buffer<span class="pl-k">.</span>data)</pre></div>
<p dir="auto">Each codec has an alias to its transcoding stream type for ease of use. For
example, <code>GzipCompressorStream{S} = TranscodingStream{GzipCompressor,S} where S&lt;:IO</code>.</p>
<p dir="auto">Consult the <a href="https://juliaio.github.io/TranscodingStreams.jl/latest/" rel="nofollow">docs</a> for more details and examples.</p>
<h2 dir="auto"><a id="user-content-codec-packages" class="anchor" aria-hidden="true" href="#codec-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Codec packages</h2>
<p dir="auto">TranscodingStreams.jl offers I/O interfaces to users. It also offers a protocol
suite to communicate with various codecs. However, specific codecs are not
included in this package except the <code>Noop</code> codec, which does nothing to data.
The user need to install codecs as a plug-in to do something meaningful.</p>
<p dir="auto">The following codec packages support the protocol suite:</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaIO/CodecZlib.jl">CodecZlib.jl</a></li>
<li><a href="https://github.com/JuliaIO/CodecXz.jl">CodecXz.jl</a></li>
<li><a href="https://github.com/JuliaIO/CodecZstd.jl">CodecZstd.jl</a></li>
<li><a href="https://github.com/JuliaIO/CodecBase.jl">CodecBase.jl</a></li>
<li><a href="https://github.com/JuliaIO/CodecBzip2.jl">CodecBzip2.jl</a></li>
<li><a href="https://github.com/JuliaIO/CodecLz4.jl">CodecLz4.jl</a> by Invenia.</li>
</ul>
</article></div>