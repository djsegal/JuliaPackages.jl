<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-zerosjl" class="anchor" aria-hidden="true" href="#zerosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Zeros.jl</h1>
<p><a href="https://travis-ci.org/perrutquist/Zeros.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/64b6f363fb5fa1ba916b3b6550ba6ff0d78abc2c/68747470733a2f2f7472617669732d63692e6f72672f70657272757471756973742f5a65726f732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/perrutquist/Zeros.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/perrutquist/Zeros.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ef4877fc20421ab25c0924b08fad929d05209679/687474703a2f2f636f6465636f762e696f2f6769746875622f70657272757471756973742f5a65726f732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/perrutquist/Zeros.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This module provides a singular datatype named <code>Zero</code>. All instances of this datatype are identical, and represent the value zero.</p>
<p><code>Zero</code> is a subtype of <code>Integer</code>. The most common operations, such as <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>&lt;</code>, <code>&gt;</code>, etc. are defined. Operations like <code>*</code> propagate the <code>Zero</code> type to their return values in a way that is correct for real numbers, but not for IEEE 754 <code>Inf</code> and <code>NaN</code>. For example, <code>Zero()*x</code> reduces to <code>Zero()</code> at compile-time which has the effect that <code>Zero()*Inf</code> becomes <code>Zero()</code> rather than <code>NaN</code>. A value with this behaviour is sometimes referred to a "strong zero".</p>
<p>Since the value of a <code>Zero</code> is known at compile-time, the complier might be able to make optimisations when functions are called with arguments of this type. (Since Julia 0.7, literal constants are often propagated into functions at compile-time, and this can have a similar effect, but it might be hard to control which literals are propagated.)</p>
<p>Trying to convert a nonzero value to <code>Zero</code> will throw an <code>InexactError</code>.</p>
<p>Attempting to divide by <code>Zero()</code> will throw a <code>DivideError</code> rather than returning <code>Inf</code> or <code>NaN</code>.
(A compile-time zero in the denominator is usually a sign that a piece of code needs to be re-written to work optimally.)</p>
<p>The <code>testzero</code> function can be used to change the type when a variable is equal to zero. For example <code>foo(testzero(a), b)</code> will call <code>foo(a,b)</code> if <code>a</code> is nonzero. But if <code>a</code> is zero, then it will call <code>foo(Zero(),b)</code> instead. The function <code>foo</code> will then be complied specifically for input of the type <code>Zero</code> and this might result in speed-ups that outweigh the cost of branching.</p>
<p>New in v0.1: Attempting to create a <code>Complex</code> with <code>Zero()</code> as its imaginary part will result in a <code>Real</code>, which will typically result in faster code execution. (For more advanced usage of <code>Zero</code> and complex numbers, see the example below.)</p>
<h3><a id="user-content-usage-example-complex-numbers" class="anchor" aria-hidden="true" href="#usage-example-complex-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage example: Complex numbers</h3>
<p>Julia already has complex numbers, of course, but writing code to handle them makes a good example, since the special cases of real numbers (i.e. complex numbers with imaginary part equal to zero) and imaginary numbers (real part equal to zero) are common enough that we might want to create special types for them.</p>
<p>If we use three different classes for real, imaginary and complex numbers, then we need nine different methods to handle every combination of arguments to binary operator. (For example: real times imaginary, imaginary times complex, etc.) With the <code>Zero</code> type, we can define all of these at once. First we define the types and constructors:</p>
<pre><code>using Zeros

abstract type MyAbstractComplex{T&lt;:Real} end

struct MyComplex{T&lt;:Real} &lt;: MyAbstractComplex{T}
  re::T
  im::T
end

struct MyReal{T&lt;:Real} &lt;: MyAbstractComplex{T}
  re::T
  im::Zero
end

struct MyImaginary{T&lt;:Real} &lt;: MyAbstractComplex{T}
  re::Zero
  im::T
end

MyReal(re::T) where {T&lt;:Real} = MyReal{T}(re, Zero())
MyImaginary(im::T) where {T&lt;:Real} = MyImaginary{T}(Zero(), im)
MyComplex(re::Real, im::Zero) = MyReal(re)
MyComplex(re::Zero, im::Real) = MyImaginary(im)
MyComplex(::Zero, ::Zero) = MyComplex{Zero}(Zero(), Zero()) # disambiguation
</code></pre>
<p>It is worth noting that <code>Zero</code> does not require any storage, so <code>MyReal</code> and <code>MyImaginary</code> require half the storage of <code>MyComplex</code>.</p>
<p>Having defined the three types to all have the same fields, we can now define functions and for all using the abstract type. For example, we can define multiplication as:</p>
<pre><code>Base.:*(x::MyAbstractComplex, y::MyAbstractComplex) =
    MyComplex(x.re*y.re - x.im*y.im, x.re*y.im + x.im*y.re)
</code></pre>
<p>This defines multiplication for all combinations of <code>MyReal</code>, <code>MyImaginary</code> and <code>MyComplex</code>.
We can now try multiplying two purely imaginary numbers:</p>
<pre><code>julia&gt; MyImaginary(2)*MyImaginary(3)
MyReal{Int64}(-6, 0Ì¸)
</code></pre>
<p>Through the magic of type inference, Julia has figured out that imaginary times imaginary equals real,
and the result is computed just as efficiently as if we had hand-coded <code>*(a::MyImaginary, b::MyImaginary)</code>.</p>
<h3><a id="user-content-another-example" class="anchor" aria-hidden="true" href="#another-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Another example</h3>
<p>Another use for the <code>Zero</code> type can be found in <a href="https://github.com/perrutquist/DoubleDoubles.jl">DoubleDoubles.jl</a>.
It defines a <code>Double</code> type which has a <code>.hi</code> and a <code>.lo</code> field. The case where the <code>.lo</code> field is zero is common enough that a separate type <code>Single</code> is defined for this. Instead of a type with no <code>.lo</code> field, we create one where it is of the <code>Zero</code> type (and thus requires no storage).</p>
<p>Existing functions may require some modifications to work with the <code>Zero</code> type. In particular, type assertions might be too restrictive.</p>
</article></div>