<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-namedgraphs" class="anchor" aria-hidden="true" href="#namedgraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NamedGraphs</h1>
<p dir="auto"><a href="https://mtfishman.github.io/NamedGraphs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://mtfishman.github.io/NamedGraphs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/mtfishman/NamedGraphs.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/mtfishman/NamedGraphs.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mtfishman/NamedGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/40687cc78966fcf702830fdabf1e28e58f16475d1bbd3bf764c87165aa810a6b/68747470733a2f2f636f6465636f762e696f2f67682f6d74666973686d616e2f4e616d65644772617068732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mtfishman/NamedGraphs.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install the package using Julia's package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add NamedGraphs"><pre>julia<span class="pl-k">&gt;</span> ] add NamedGraphs</pre></div>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">This packages introduces graph types with named edges, which are built on top of the <code>Graph</code>/<code>SimpleGraph</code> type in the <a href="https://github.com/JuliaGraphs/Graphs.jl">Graphs.jl</a> package that only have contiguous integer edges (i.e. linear indexing).</p>
<p dir="auto">There is a supertype <code>AbstractNamedGraph</code> that defines an interface and fallback implementations of standard
Graphs.jl operations, and two implementations: <code>NamedGraph</code> and <code>NamedDiGraph</code>.</p>
<h2 dir="auto"><a id="user-content-namedgraph" class="anchor" aria-hidden="true" href="#namedgraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>NamedGraph</code></h2>
<p dir="auto"><code>NamedGraph</code> simply takes a set of names for the vertices of the graph. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Graphs

julia&gt; using NamedGraphs

julia&gt; g = NamedGraph(grid((4,)), [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;])
NamedGraph{String} with 4 vertices:
4-element Vector{String}:
 &quot;A&quot;
 &quot;B&quot;
 &quot;C&quot;
 &quot;D&quot;

and 3 edge(s):
&quot;A&quot; =&gt; &quot;B&quot;
&quot;B&quot; =&gt; &quot;C&quot;
&quot;C&quot; =&gt; &quot;D&quot;


julia&gt; g = NamedGraph(grid((4,)); vertices=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]) # Same as above
NamedGraph{String} with 4 vertices:
4-element Vector{String}:
 &quot;A&quot;
 &quot;B&quot;
 &quot;C&quot;
 &quot;D&quot;

and 3 edge(s):
&quot;A&quot; =&gt; &quot;B&quot;
&quot;B&quot; =&gt; &quot;C&quot;
&quot;C&quot; =&gt; &quot;D&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Graphs

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NamedGraphs

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">NamedGraph</span>(<span class="pl-c1">grid</span>((<span class="pl-c1">4</span>,)), [<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>])
NamedGraph{String} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>

and <span class="pl-c1">3</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>


julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">NamedGraph</span>(<span class="pl-c1">grid</span>((<span class="pl-c1">4</span>,)); vertices<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> Same as above</span>
NamedGraph{String} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>

and <span class="pl-c1">3</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>
</pre></div>
<p dir="auto">Common operations are defined as you would expect:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; has_vertex(g, &quot;A&quot;)
true

julia&gt; has_edge(g, &quot;A&quot; =&gt; &quot;B&quot;)
true

julia&gt; has_edge(g, &quot;A&quot; =&gt; &quot;C&quot;)
false

julia&gt; neighbors(g, &quot;B&quot;)
2-element Vector{String}:
 &quot;A&quot;
 &quot;C&quot;

julia&gt; g[[&quot;A&quot;, &quot;B&quot;]]
NamedGraph{String} with 2 vertices:
2-element Vector{String}:
 &quot;A&quot;
 &quot;B&quot;

and 1 edge(s):
&quot;A&quot; =&gt; &quot;B&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_vertex</span>(g, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_edge</span>(g, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_edge</span>(g, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">neighbors</span>(g, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> g[[<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>]]
NamedGraph{String} with <span class="pl-c1">2</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>

and <span class="pl-c1">1</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
</pre></div>
<p dir="auto">Internally, this type wraps a <code>SimpleGraph</code>, and stores a <code>Dictionary</code> from the <a href="https://github.com/andyferris/Dictionaries.jl">Dictionaries.jl</a> package that maps the vertex names to the linear indices of the underlying <code>SimpleGraph</code>.</p>
<p dir="auto">Graph operations are implemented by mapping back and forth between the generalized named vertices and the linear index vertices of the <code>SimpleGraph</code>.</p>
<p dir="auto">It is natural to use tuples of integers as the names for the vertices of graphs with grid connectivities.
For this, we use the convention that if a tuple is input, it is interpreted as the grid size and
the vertex names label cartesian coordinates:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; g = NamedGraph(grid((2, 2)); vertices=(2, 2))
NamedGraph{Tuple{Int64, Int64}} with 4 vertices:
4-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 1)
 (1, 2)
 (2, 2)

and 4 edge(s):
(1, 1) =&gt; (2, 1)
(1, 1) =&gt; (1, 2)
(2, 1) =&gt; (2, 2)
(1, 2) =&gt; (2, 2)
"><pre>julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">NamedGraph</span>(<span class="pl-c1">grid</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)); vertices<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">4</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
</pre></div>
<p dir="auto">Internally the vertices are all stored as tuples with a label in each dimension.</p>
<p dir="auto">Vertices can be referred to by their tuples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; has_vertex(g, (1, 1))
true

julia&gt; has_edge(g, (1, 1) =&gt; (2, 1))
true

julia&gt; has_edge(g, (1, 1) =&gt; (2, 2))
false

julia&gt; neighbors(g, (2, 2))
2-element Vector{Tuple{Int64, Int64}}:
 (2, 1)
 (1, 2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_vertex</span>(g, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_edge</span>(g, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_edge</span>(g, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">neighbors</span>(g, (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">You can use vertex names to get <a href="https://juliagraphs.org/Graphs.jl/dev/core_functions/operators/#Graphs.induced_subgraph-Union%7BTuple%7BT%7D,%20Tuple%7BU%7D,%20Tuple%7BT,%20AbstractVector%7BU%7D%7D%7D%20where%20%7BU%3C:Integer,%20T%3C:AbstractGraph%7D" rel="nofollow">induced subgraphs</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; subgraph(v -&gt; v[1] == 1, g)
NamedGraph{Tuple{Int64, Int64}} with 2 vertices:
2-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (1, 2)

and 1 edge(s):
(1, 1) =&gt; (1, 2)


julia&gt; subgraph(v -&gt; v[2] == 2, g)
NamedGraph{Tuple{Int64, Int64}} with 2 vertices:
2-element Vector{Tuple{Int64, Int64}}:
 (1, 2)
 (2, 2)

and 1 edge(s):
(1, 2) =&gt; (2, 2)


julia&gt; g[[(1, 1), (2, 2)]]
NamedGraph{Tuple{Int64, Int64}} with 2 vertices:
2-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 2)

and 0 edge(s):
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">subgraph</span>(v <span class="pl-k">-&gt;</span> v[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>, g)
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">2</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">1</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">subgraph</span>(v <span class="pl-k">-&gt;</span> v[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">2</span>, g)
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">2</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">1</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> g[[(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)]]
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">2</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">0</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
</pre></div>
<p dir="auto">Note that this is similar to multidimensional array slicing, and we may support syntax like <code>subgraph(v, 1, :)</code> in the future.</p>
<p dir="auto">You can also take <a href="https://en.wikipedia.org/wiki/Disjoint_union" rel="nofollow">disjoint unions</a> or concatenations of graphs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; g₁ = g
NamedGraph{Tuple{Int64, Int64}} with 4 vertices:
4-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 1)
 (1, 2)
 (2, 2)

and 4 edge(s):
(1, 1) =&gt; (2, 1)
(1, 1) =&gt; (1, 2)
(2, 1) =&gt; (2, 2)
(1, 2) =&gt; (2, 2)


julia&gt; g₂ = g
NamedGraph{Tuple{Int64, Int64}} with 4 vertices:
4-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 1)
 (1, 2)
 (2, 2)

and 4 edge(s):
(1, 1) =&gt; (2, 1)
(1, 1) =&gt; (1, 2)
(2, 1) =&gt; (2, 2)
(1, 2) =&gt; (2, 2)


julia&gt; disjoint_union(g₁, g₂)
NamedGraph{Tuple{Tuple{Int64, Int64}, Int64}} with 8 vertices:
8-element Vector{Tuple{Tuple{Int64, Int64}, Int64}}:
 ((1, 1), 1)
 ((2, 1), 1)
 ((1, 2), 1)
 ((2, 2), 1)
 ((1, 1), 2)
 ((2, 1), 2)
 ((1, 2), 2)
 ((2, 2), 2)

and 8 edge(s):
((1, 1), 1) =&gt; ((2, 1), 1)
((1, 1), 1) =&gt; ((1, 2), 1)
((2, 1), 1) =&gt; ((2, 2), 1)
((1, 2), 1) =&gt; ((2, 2), 1)
((1, 1), 2) =&gt; ((2, 1), 2)
((1, 1), 2) =&gt; ((1, 2), 2)
((2, 1), 2) =&gt; ((2, 2), 2)
((1, 2), 2) =&gt; ((2, 2), 2)


julia&gt; g₁ ⊔ g₂ # Same as above
NamedGraph{Tuple{Tuple{Int64, Int64}, Int64}} with 8 vertices:
8-element Vector{Tuple{Tuple{Int64, Int64}, Int64}}:
 ((1, 1), 1)
 ((2, 1), 1)
 ((1, 2), 1)
 ((2, 2), 1)
 ((1, 1), 2)
 ((2, 1), 2)
 ((1, 2), 2)
 ((2, 2), 2)

and 8 edge(s):
((1, 1), 1) =&gt; ((2, 1), 1)
((1, 1), 1) =&gt; ((1, 2), 1)
((2, 1), 1) =&gt; ((2, 2), 1)
((1, 2), 1) =&gt; ((2, 2), 1)
((1, 1), 2) =&gt; ((2, 1), 2)
((1, 1), 2) =&gt; ((1, 2), 2)
((2, 1), 2) =&gt; ((2, 2), 2)
((1, 2), 2) =&gt; ((2, 2), 2)
"><pre>julia<span class="pl-k">&gt;</span> g₁ <span class="pl-k">=</span> g
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">4</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> g₂ <span class="pl-k">=</span> g
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">4</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">disjoint_union</span>(g₁, g₂)
NamedGraph{Tuple{Tuple{Int64, Int64}, Int64}} with <span class="pl-c1">8</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element Vector{Tuple{Tuple{Int64, Int64}, Int64}}<span class="pl-k">:</span>
 ((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
 ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)

and <span class="pl-c1">8</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> g₁ ⊔ g₂ <span class="pl-c"><span class="pl-c">#</span> Same as above</span>
NamedGraph{Tuple{Tuple{Int64, Int64}, Int64}} with <span class="pl-c1">8</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element Vector{Tuple{Tuple{Int64, Int64}, Int64}}<span class="pl-k">:</span>
 ((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
 ((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
 ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
 ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)

and <span class="pl-c1">8</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
((<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> ((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>)
</pre></div>
<p dir="auto">The symbol <code>⊔</code> is just an alias for <code>disjoint_union</code> and can be written in the terminal
or in your favorite <a href="https://julialang.org/" rel="nofollow">ide with the appropriate Julia extension</a> with <code>\sqcup&lt;tab&gt;</code></p>
<p dir="auto">By default, this maps the vertices <code>v₁ ∈ vertices(g₁)</code> to <code>(v₁, 1)</code> and the vertices <code>v₂ ∈ vertices(g₂)</code>
to <code>(v₂, 1)</code>, so the resulting vertices of the unioned graph will always be unique.
The resulting graph will have no edges between vertices <code>(v₁, 1)</code> and <code>(v₂, 1)</code>, these would have to
be added manually.</p>
<p dir="auto">The original graphs can be obtained from subgraphs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; rename_vertices(v -&gt; v[1], subgraph(v -&gt; v[2] == 1, g₁ ⊔ g₂))
NamedGraph{Tuple{Int64, Int64}} with 4 vertices:
4-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 1)
 (1, 2)
 (2, 2)

and 4 edge(s):
(1, 1) =&gt; (2, 1)
(1, 1) =&gt; (1, 2)
(2, 1) =&gt; (2, 2)
(1, 2) =&gt; (2, 2)


julia&gt; rename_vertices(v -&gt; v[1], subgraph(v -&gt; v[2] == 2, g₁ ⊔ g₂))
NamedGraph{Tuple{Int64, Int64}} with 4 vertices:
4-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 1)
 (1, 2)
 (2, 2)

and 4 edge(s):
(1, 1) =&gt; (2, 1)
(1, 1) =&gt; (1, 2)
(2, 1) =&gt; (2, 2)
(1, 2) =&gt; (2, 2)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rename_vertices</span>(v <span class="pl-k">-&gt;</span> v[<span class="pl-c1">1</span>], <span class="pl-c1">subgraph</span>(v <span class="pl-k">-&gt;</span> v[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>, g₁ ⊔ g₂))
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">4</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">rename_vertices</span>(v <span class="pl-k">-&gt;</span> v[<span class="pl-c1">1</span>], <span class="pl-c1">subgraph</span>(v <span class="pl-k">-&gt;</span> v[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">2</span>, g₁ ⊔ g₂))
NamedGraph{Tuple{Int64, Int64}} with <span class="pl-c1">4</span> vertices<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

and <span class="pl-c1">4</span> <span class="pl-c1">edge</span>(s)<span class="pl-k">:</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
</pre></div>
<h2 dir="auto"><a id="user-content-generating-this-readme" class="anchor" aria-hidden="true" href="#generating-this-readme"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating this README</h2>
<p dir="auto">This file was generated with <a href="https://github.com/JunoLab/Weave.jl">weave.jl</a> with the following commands:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NamedGraphs, Weave
weave(
  joinpath(pkgdir(NamedGraphs), &quot;examples&quot;, &quot;README.jl&quot;);
  doctype=&quot;github&quot;,
  out_path=pkgdir(NamedGraphs),
)"><pre><span class="pl-k">using</span> NamedGraphs, Weave
<span class="pl-c1">weave</span>(
  <span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(NamedGraphs), <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>README.jl<span class="pl-pds">"</span></span>);
  doctype<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>github<span class="pl-pds">"</span></span>,
  out_path<span class="pl-k">=</span><span class="pl-c1">pkgdir</span>(NamedGraphs),
)</pre></div>
</article></div>