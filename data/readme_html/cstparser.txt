<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cstparser" class="anchor" aria-hidden="true" href="#cstparser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSTParser</h1>
<p><a href="https://www.julia-vscode.org/CSTParser.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/julia-vscode/CSTParser.jl/workflows/Run%20CI%20on%20master/badge.svg"><img src="https://github.com/julia-vscode/CSTParser.jl/workflows/Run%20CI%20on%20master/badge.svg" alt="" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/julia-vscode/CSTParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/544e9ffe24292ceca38e1c1a788103c5a9b256cc/68747470733a2f2f636f6465636f762e696f2f67682f6a756c69612d7673636f64652f4353545061727365722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/julia-vscode/CSTParser.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A parser for Julia using <a href="https://github.com/JuliaLang/Tokenize.jl/">Tokenize</a> that aims to extend the built-in parser by providing additional meta information along with the resultant AST.</p>
<h2><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation and Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CSTParser<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CSTParser</pre></div>
<p><strong>Documentation</strong>: <a href="https://www.julia-vscode.org/CSTParser.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h3><a id="user-content-additional-output" class="anchor" aria-hidden="true" href="#additional-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional Output</h3>
<ul>
<li>
<p><code>EXPR</code>'s are iterable producing children in the order that they appear in the source code, including punctuation.</p>
<p>Example:</p>
<pre><code>f(x) = x*2 becomes [f(x), =, x*2]
f(x) becomes [f, (, x, )]
</code></pre>
</li>
<li>
<p>The byte span of each <code>EXPR</code> is stored allowing a mapping between byte position in the source code and the releveant parsed expression. The span of a single token includes any trailing whitespace, newlines or comments. This also allows for fast partial parsing of modified source code.</p>
</li>
<li>
<p>Formatting hints are generated as the source code is parsed (e.g. mismatched indents for blocks, missing white space around operators).</p>
</li>
<li>
<p>The declaration of modules, functions, datatypes and variables are tracked and stored in the relevant hierarchical scopes attatched to the expressions that declare the scope. This allows for a mapping between any identifying symbol and the relevant code that it refers to.</p>
</li>
</ul>
<h3><a id="user-content-structure" class="anchor" aria-hidden="true" href="#structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structure</h3>
<p>Expressions are represented solely by the following types:</p>
<pre><code>Parser.SyntaxNode
  Parser.EXPR
  Parser.INSTANCE
    Parser.HEAD{K}
    Parser.IDENTIFIER
    Parser.KEYWORD{K}
    Parser.LITERAL{K}
    Parser.OPERATOR{P,K,dot}
    Parser.PUNCTUATION
  Parser.QUOTENODE
</code></pre>
<p>The <code>K</code> parameterisation refers to the <code>kind</code> of the associated token as specified by <code>Tokenize.Tokens.Kind</code>. The <code>P</code> and <code>dot</code> parameters for operators refers to the precedence of the operator and whether it is dotted (e.g. <code>.+</code>).</p>
<p><code>INSTANCE</code>s represent singular objects that may have a concrete or implicit relation to a portion of the source text. In the the former case they have a <code>span</code> storing the width in bytes that they occupy in the source text, in the latter case their span is 0. Additionally, <code>IDENTIFIER</code>s store their value as a <code>Symbol</code> and <code>LITERAL</code>s as a <code>String</code>.</p>
<p><code>EXPR</code> are equivalent to <code>Base.Expr</code> but have extra fields to store their span and any punctuation tokens.</p>
</article></div>