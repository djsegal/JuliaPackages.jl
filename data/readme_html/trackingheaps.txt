<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-trackingheaps" class="anchor" aria-hidden="true" href="#trackingheaps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TrackingHeaps</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/henriquebecker91/TrackingHeaps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c63a7b6e074cd33d464e014d177d7d7e2b49ec76aaff44f7ddefee7c7ae13d04/68747470733a2f2f7472617669732d63692e636f6d2f68656e72697175656265636b657239312f547261636b696e6748656170732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/henriquebecker91/TrackingHeaps.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/henriquebecker91/TrackingHeaps.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6fcb38c790d42bdda5b3bf239ad9d47d8d83490cfe0bc977417422c67e33d6b0/687474703a2f2f636f6465636f762e696f2f6769746875622f68656e72697175656265636b657239312f547261636b696e6748656170732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/henriquebecker91/TrackingHeaps.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Check the complete documentation here: <a href="https://henriquebecker91.github.io/TrackingHeaps.jl/latest/" rel="nofollow">https://henriquebecker91.github.io/TrackingHeaps.jl/latest/</a></p>
<p dir="auto">TrackingHeaps offers a heap with a tracking system for the stored values.</p>
<p dir="auto">Inserting a value into a TrackingHeap returns a tracker for the value. The
tracker can be used to access, update, and delete the value without searching
for it first. Heap order do not allow for <code>O(log m)</code> search (where <code>m</code> is the
number of values currently stored inside the heap), just for <code>O(m)</code> search, so
this feature allow for some performance gain if you need to manipulate values
anywhere in the heap (not just on top of the heap). Besides access, which is
<code>O(1)</code>, update and delete are <code>O(log m)</code> as they may need to rebalance the
tree.</p>
<p dir="auto">If the tracking system is not needed, there is little reason to use this heap.</p>
<p dir="auto">I wrote this package because the MutableBinaryHeap of DataStructures.jl did not
allow some behavior I wanted; behavior as:</p>
<ol dir="auto">
<li>a non-top value can be deleted without being made top first;</li>
<li>convenience methods allow to <code>pop!</code>/<code>delete!</code> stored values and
immediatelly <code>track!</code> others, avoiding double-rebalancing;</li>
<li>after a value is deleted, its tracker can be re-reused to re-insert
that value or insert a new value (but this is not done automatically);</li>
<li>the arity of the heap (binary, trinary, etc..) can be defined by the
user (by parametric type) and inccur in minimal overhead (I hope);</li>
<li>all the stored values are in a <code>Vector{V}</code> in heap order, for easy
backdoor/hacking access;</li>
<li>the integer type that is the tracker type can be defined by the user.</li>
</ol>
<p dir="auto">A soft introduction to the package will be written here in the future.</p>
</article></div>