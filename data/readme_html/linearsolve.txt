<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-linearsolvejl" class="anchor" aria-hidden="true" href="#linearsolvejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LinearSolve.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/LinearSolve/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://app.codecov.io/gh/SciML/LinearSolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/30b77d4fe4f54e5139c1b6e7275106a4843769b75015bb274580194016bfb7ab/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f4c696e656172536f6c76652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/LinearSolve.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/LinearSolvers.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/LinearSolvers.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://buildkite.com/julialang/linearsolve-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/74cbcff0626d01413ca733ca3e5c68b0e30155f5bc0f114b4a53e63e2abc7a33/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f37343639393736346365323234353134633936333265323735306530386637376336643137346335626137636433383239372e7376673f6272616e63683d6d61696e" alt="Build status" data-canonical-src="https://badge.buildkite.com/74699764ce224514c9632e2750e08f77c6d174c5ba7cd38297.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">Fast implementations of linear solving algorithms in Julia that satisfy the SciML
common interface. LinearSolve.jl makes it easy to define high level algorithms
which allow for swapping out the linear solver that is used while maintaining
maximum efficiency. Specifically, LinearSolve.jl includes:</p>
<ul dir="auto">
<li>Fast pure Julia LU factorizations which outperform standard BLAS</li>
<li>KLU for faster sparse LU factorization on unstructured matrices</li>
<li>UMFPACK for faster sparse LU factorization on matrices with some repeated structure</li>
<li>MKLPardiso wrappers for handling many sparse matrices faster than SuiteSparse (KLU, UMFPACK) methods</li>
<li>Sparspak.jl for sparse LU factorization in pure Julia for generic number types and for non-GPL distributions</li>
<li>GPU-offloading for large dense matrices</li>
<li>Wrappers to all of the Krylov implementations (Krylov.jl, IterativeSolvers.jl, KrylovKit.jl) for easy
testing of all of them. LinearSolve.jl handles the API differences, especially with the preconditioner
definitions</li>
<li>A polyalgorithm that smartly chooses between these methods</li>
<li>A caching interface which automates caching of symbolic factorizations and numerical factorizations
as optimally as possible</li>
</ul>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/LinearSolve/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/LinearSolve/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-high-level-examples" class="anchor" aria-hidden="true" href="#high-level-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>High Level Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n = 4
A = rand(n, n)
b1 = rand(n);
b2 = rand(n);
prob = LinearProblem(A, b1)

linsolve = init(prob)
sol1 = solve(linsolve)

sol1.u
#=
4-element Vector{Float64}:
 -0.9247817429364165
 -0.0972021708185121
  0.6839050402960025
  1.8385599677530706
=#

linsolve = LinearSolve.set_b(linsolve, b2)
sol2 = solve(linsolve)

sol2.u
#=
4-element Vector{Float64}:
  1.0321556637762768
  0.49724400693338083
 -1.1696540870182406
 -0.4998342686003478
=#

linsolve = LinearSolve.set_b(linsolve, b2)
sol2 = solve(linsolve, IterativeSolversJL_GMRES()) # Switch to GMRES
sol2.u
#=
4-element Vector{Float64}:
  1.0321556637762768
  0.49724400693338083
 -1.1696540870182406
 -0.4998342686003478
=#

A2 = rand(n, n)
linsolve = LinearSolve.set_A(linsolve, A2)
sol3 = solve(linsolve)

sol3.u
#=
4-element Vector{Float64}:
 -6.793605395935224
  2.8673042300837466
  1.1665136934977371
 -0.4097250749016653
=#"><pre>n <span class="pl-k">=</span> <span class="pl-c1">4</span>
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n, n)
b1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n);
b2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n);
prob <span class="pl-k">=</span> <span class="pl-c1">LinearProblem</span>(A, b1)

linsolve <span class="pl-k">=</span> <span class="pl-c1">init</span>(prob)
sol1 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(linsolve)

sol1<span class="pl-k">.</span>u
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">4-element Vector{Float64}:</span>
<span class="pl-c"> -0.9247817429364165</span>
<span class="pl-c"> -0.0972021708185121</span>
<span class="pl-c">  0.6839050402960025</span>
<span class="pl-c">  1.8385599677530706</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

linsolve <span class="pl-k">=</span> LinearSolve<span class="pl-k">.</span><span class="pl-c1">set_b</span>(linsolve, b2)
sol2 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(linsolve)

sol2<span class="pl-k">.</span>u
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">4-element Vector{Float64}:</span>
<span class="pl-c">  1.0321556637762768</span>
<span class="pl-c">  0.49724400693338083</span>
<span class="pl-c"> -1.1696540870182406</span>
<span class="pl-c"> -0.4998342686003478</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

linsolve <span class="pl-k">=</span> LinearSolve<span class="pl-k">.</span><span class="pl-c1">set_b</span>(linsolve, b2)
sol2 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(linsolve, <span class="pl-c1">IterativeSolversJL_GMRES</span>()) <span class="pl-c"><span class="pl-c">#</span> Switch to GMRES</span>
sol2<span class="pl-k">.</span>u
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">4-element Vector{Float64}:</span>
<span class="pl-c">  1.0321556637762768</span>
<span class="pl-c">  0.49724400693338083</span>
<span class="pl-c"> -1.1696540870182406</span>
<span class="pl-c"> -0.4998342686003478</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

A2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n, n)
linsolve <span class="pl-k">=</span> LinearSolve<span class="pl-k">.</span><span class="pl-c1">set_A</span>(linsolve, A2)
sol3 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(linsolve)

sol3<span class="pl-k">.</span>u
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">4-element Vector{Float64}:</span>
<span class="pl-c"> -6.793605395935224</span>
<span class="pl-c">  2.8673042300837466</span>
<span class="pl-c">  1.1665136934977371</span>
<span class="pl-c"> -0.4097250749016653</span>
<span class="pl-c"><span class="pl-c">=#</span></span></pre></div>
</article></div>