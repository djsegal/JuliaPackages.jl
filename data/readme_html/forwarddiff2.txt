<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-forwarddiff2" class="anchor" aria-hidden="true" href="#forwarddiff2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ForwardDiff2</h1>
<p><a href="https://travis-ci.org/YingboMa/ForwardDiff2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/43b22ab3ebe7397db69f0eeff024f1d1cb16a832/68747470733a2f2f7472617669732d63692e6f72672f59696e67626f4d612f466f727761726444696666322e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/YingboMa/ForwardDiff2.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/YingboMa/ForwardDiff2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/990443cc1b0db896cb11b44c91f4922b463b8d28/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f466f727761726444696666322e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/YingboMa/ForwardDiff2.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>ForwardDiff2</code> = <code>ForwardDiff.jl</code> + <code>ChainRules.jl</code> + Struct of arrays</p>
<h3><a id="user-content-warning-this-package-is-still-work-in-progress" class="anchor" aria-hidden="true" href="#warning-this-package-is-still-work-in-progress"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warning!!!: This package is still work-in-progress</h3>
<p>User API:
<code>D(f)(x)</code> returns a lazy representation of the derivative.</p>
<p><code>D(f)(x) * v</code> computes <code>df(x)/dx ⋅ v</code>, taking advantage of the laziness in <code>D(f)(x)</code>.</p>
<p><code>DI(f)(x)</code> is a convenience function to materialize the derivative, gradient or
Jacobian of <code>f</code> at <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random; Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">123</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ForwardDiff2<span class="pl-k">:</span> D, DI; <span class="pl-k">using</span> LinearAlgebra

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(sin)(<span class="pl-c1">10</span>) <span class="pl-k">*</span> <span class="pl-c1">11</span> <span class="pl-k">===</span> <span class="pl-c1">cos</span>(<span class="pl-c1">10</span>) <span class="pl-k">*</span> <span class="pl-c1">11</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(prod)(x) <span class="pl-c"><span class="pl-c">#</span> lazy gradient</span>
<span class="pl-c1">D</span>(prod)([<span class="pl-c1">0.768448</span>, <span class="pl-c1">0.940515</span>, <span class="pl-c1">0.673959</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(prod)(x) <span class="pl-k">*</span> I <span class="pl-c"><span class="pl-c">#</span> materialize the gradient by multiplying by I</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> Adjoint{Float64,SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">1</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.633868</span>  <span class="pl-c1">0.517902</span>  <span class="pl-c1">0.722737</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(cumsum)(x) <span class="pl-k">*</span> I <span class="pl-c"><span class="pl-c">#</span> Jacobian</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Adjoint{Float64,Array{Float64,<span class="pl-c1">2</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(cumsum)(x) <span class="pl-k">*</span> v <span class="pl-c"><span class="pl-c">#</span> Jacobian-vector product</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.3954531123351086</span>
 <span class="pl-c1">0.7086970681426272</span>
 <span class="pl-c1">1.3712518846162807</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">DI</span>(<span class="pl-c1">DI</span>(prod))(x) <span class="pl-c"><span class="pl-c">#</span> Hessian</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> SArray{Tuple{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>},Float64,<span class="pl-c1">2</span>,<span class="pl-c1">9</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.673959</span>  <span class="pl-c1">0.940515</span>
 <span class="pl-c1">0.673959</span>  <span class="pl-c1">0.0</span>       <span class="pl-c1">0.768448</span>
 <span class="pl-c1">0.940515</span>  <span class="pl-c1">0.768448</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">DI</span>(<span class="pl-c1">DI</span>(prod))(x) <span class="pl-k">*</span> v <span class="pl-c"><span class="pl-c">#</span> Hessian-vector product</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.8342562312269415</span>
 <span class="pl-c1">0.775657771761718</span>
 <span class="pl-c1">0.6126411738403423</span></pre></div>
<p>Note that <code>ForwardDiff2.jl</code> also works with <code>ModelingToolkit.jl</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ModelingToolkit

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@variables</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] v[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
(Operation[x₁, x₂, x₃], Operation[v₁, v₂, v₃])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(sin)(x[<span class="pl-c1">1</span>]) <span class="pl-k">*</span> <span class="pl-c1">11</span>
<span class="pl-c1">cos</span>(x₁) <span class="pl-k">*</span> <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(prod)(x) <span class="pl-k">*</span> I <span class="pl-c"><span class="pl-c">#</span> gradient</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> Adjoint{Operation,StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">3</span>},Operation,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">1</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">conj</span>((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₃ <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))  …  <span class="pl-c1">conj</span>((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₃ <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(cumsum)(x) <span class="pl-k">*</span> I <span class="pl-c"><span class="pl-c">#</span> Jacobian</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Adjoint{Operation,Array{Expression,<span class="pl-c1">2</span>}}<span class="pl-k">:</span>
                               <span class="pl-c1">conj</span>(<span class="pl-c1">1</span>)                      <span class="pl-c1">conj</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))                      <span class="pl-c1">conj</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))
                 <span class="pl-c1">conj</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>)                  <span class="pl-c1">conj</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))        <span class="pl-c1">conj</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))
 <span class="pl-c1">conj</span>((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> <span class="pl-c1">1</span>)  <span class="pl-c1">conj</span>((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))  <span class="pl-c1">conj</span>((<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(cumsum)(x) <span class="pl-k">*</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> Jacobian-vector product</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(cumsum)(x) <span class="pl-k">*</span> v <span class="pl-c"><span class="pl-c">#</span> Jacobian-vector product</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Operation,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
             v₁
        v₂ <span class="pl-k">+</span> v₁
 (v₃ <span class="pl-k">+</span> v₂) <span class="pl-k">+</span> v₁

julia<span class="pl-k">&gt;</span> <span class="pl-c1">DI</span>(<span class="pl-c1">DI</span>(prod))(x) <span class="pl-c"><span class="pl-c">#</span> Hessian</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>},Operation,<span class="pl-c1">2</span>,<span class="pl-c1">9</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
           <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>))))  …            <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>))))
           <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>))))               <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>))))
 <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>))))     <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>))))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">DI</span>(<span class="pl-c1">DI</span>(prod))(x) <span class="pl-k">*</span> v <span class="pl-c"><span class="pl-c">#</span> Hessian-vector product</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">3</span>},Operation,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
                               (<span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₁ <span class="pl-k">+</span> <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₂) <span class="pl-k">+</span> <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₃
                               (<span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₁ <span class="pl-k">+</span> <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₂) <span class="pl-k">+</span> <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₃
 (<span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₁ <span class="pl-k">+</span> <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₂) <span class="pl-k">+</span> <span class="pl-c1">conj</span>(((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> (x₁ <span class="pl-k">*</span> x₂) <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> x₂ <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x₃ <span class="pl-k">*</span> ((<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">+</span> x₁ <span class="pl-k">*</span> <span class="pl-c1">0</span>) <span class="pl-k">+</span> (<span class="pl-c1">identity</span>(<span class="pl-c1">identity</span>(<span class="pl-c1">0</span>)) <span class="pl-k">*</span> <span class="pl-c1">identity</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> x₂ <span class="pl-k">*</span> <span class="pl-c1">0</span>)))) <span class="pl-k">*</span> v₃</pre></div>
<p>Planned features:</p>
<ul>
<li>works both on GPU and CPU</li>
<li><a href="http://docs.juliadiffeq.org/latest/basics/faq.html#I-get-Dual-number-errors-when-I-solve-my-ODE-with-Rosenbrock-or-SDIRK-methods...?-1" rel="nofollow">Dual cache</a></li>
<li>user-extensible scalar and tensor derivative definitions</li>
<li>in-place function</li>
<li>sparsity exploitation (color vector support)</li>
<li>complex differentiation (use <code>ChainRules.jl</code>)</li>
<li>plays nicely with Zygote</li>
</ul>
<p>The <code>ForwardDiff2</code> source code follows the <a href="https://github.com/jrevels/YASGuide">YASGuide</a>.</p>
</article></div>