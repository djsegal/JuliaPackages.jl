<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hierarchical-temporal-memory" class="anchor" aria-hidden="true" href="#hierarchical-temporal-memory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hierarchical Temporal Memory</h1>
<p><a href="https://github.com/oblynx/HierarchicalTemporalMemory.jl/actions"><img src="https://github.com/oblynx/HierarchicalTemporalMemory.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/oblynx/HierarchicalTemporalMemory.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1e84733827cb2a4277a1c3c4356b2f3fbde94a2f/68747470733a2f2f636f6465636f762e696f2f67682f6f626c796e782f48696572617263686963616c54656d706f72616c4d656d6f72792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/oblynx/HierarchicalTemporalMemory.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Julia implementation of core <a href="https://numenta.com/" rel="nofollow">Numenta HTM</a> algorithms</p>
<p>This package implements Numenta's <strong>Hierarchical Temporal Memory</strong> in simple, expressive language,
relying on <strong>linear algebra</strong> as much as possible.
It strives to provide great performance as a 2nd consideration.</p>
<p>It is a <em>work in progress</em>.
Currently implemented algorithms:</p>
<ul>
<li><a href="https://www.frontiersin.org/articles/10.3389/fncom.2017.00111/full" rel="nofollow">Spatial Pooler</a></li>
<li><a href="https://www.mitpressjournals.org/doi/full/10.1162/NECO_a_00893" rel="nofollow">Temporal Memory</a> (section 3.3)</li>
</ul>
<p><strong>Note</strong>  both implementations are currently in the process of simplification. <em>Expect half the code to go.</em></p>
<h2><a id="user-content-design-sources" class="anchor" aria-hidden="true" href="#design-sources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Design sources</h2>
<p>The sources for this implementation are primarily the published papers for the <a href="https://www.frontiersin.org/articles/10.3389/fncom.2017.00111/full" rel="nofollow">Spatial Pooler</a>
and the <a href="https://www.mitpressjournals.org/doi/full/10.1162/NECO_a_00893" rel="nofollow">Temporal Memory</a>.
For some details <a href="https://numenta.com/assets/pdf/biological-and-machine-intelligence/BAMI-Complete.pdf" rel="nofollow">BAMI</a> provides extra info, but the pseudocode used there is pretty different from the definitions in this implementation.
For example, BAMI's Temporal Memory implementation processes each column separately in an imperative style,
while this implementation groups operations on data structures together as much as possible.</p>
<h2><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Roadmap</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Timeseries prediction tests, NAB results</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Explore temporal pooling ideas, influenced by forum discussions such as <a href="https://discourse.numenta.org/t/exploring-the-repeating-inputs-problem/5498/14?u=oblynx" rel="nofollow">this</a>.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Maybe Backtracking TM? This non-biological spin on the TM algorithm hacks into <a href="https://discourse.numenta.org/t/my-analysis-on-why-temporal-memory-prediction-doesnt-work-on-sequential-data/3141" rel="nofollow">the problem of learning repeating inputs</a>.
The only reference is the <a href="https://github.com/numenta/nupic/blob/master/src/nupic/algorithms/backtracking_tm.py">NUPIC implementation</a>,
<a href="https://github.com/numenta/nupic/blob/1aea72abde4457878a16288d6786ffb088f69164/src/nupic/algorithms/backtracking_tm.py#L1666">focusing here</a>.
It isn't relevant to the current HTM research, only to applications.</li>
</ul>
<h1><a id="user-content-pkgtemplate" class="anchor" aria-hidden="true" href="#pkgtemplate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PkgTemplate</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PkgTemplates
t<span class="pl-k">=</span> <span class="pl-c1">Template</span>(user<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>oblynx<span class="pl-pds">"</span></span>, dir<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, plugins<span class="pl-k">=</span>[<span class="pl-c1">GitHubActions</span>(),<span class="pl-c1">Codecov</span>(),<span class="pl-c1">Documenter</span><span class="pl-c1">{GitHubActions}</span>(),<span class="pl-c1">Develop</span>()])
<span class="pl-c1">t</span>(<span class="pl-s"><span class="pl-pds">"</span>HierarchicalTemporalMemory<span class="pl-pds">"</span></span>)</pre></div>
</article></div>