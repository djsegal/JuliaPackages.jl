<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simpleposets" class="anchor" aria-hidden="true" href="#simpleposets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimplePosets</h1>
<p dir="auto">This module defines a <code>SimplePoset</code> type for Julia. A <em>poset</em> is a
pair <code>(X,&lt;)</code> where <code>X</code> is a set of elements and <code>&lt;</code> is a relation on
<code>X</code> that is irreflexive, antisymmetric, and transitive.</p>
<h2 dir="auto"><a id="user-content-basic-constructor" class="anchor" aria-hidden="true" href="#basic-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic constructor</h2>
<p dir="auto">Use <code>SimplePoset(T)</code> to create a new <code>SimplePoset</code> with elements
having type <code>T</code> (which defaults to <code>Any</code>).</p>
<h2 dir="auto"><a id="user-content-adddelete-elementsrelations" class="anchor" aria-hidden="true" href="#adddelete-elementsrelations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Add/delete elements/relations</h2>
<p dir="auto">Elements and relations can be added to or deleted from a poset using
these functions:</p>
<ul dir="auto">
<li><code>add!(P,x)</code> adds a new element <code>x</code> to the ground set of <code>P</code>.</li>
<li><code>add!(P,x,y)</code> inserts the relation <code>x&lt;y</code> into <code>P</code>. If one (or both)
of <code>x</code> and <code>y</code> is not in <code>P</code>, it is added as well.</li>
<li><code>delete!(P,x)</code> deletes element <code>x</code> from this poset.</li>
<li><code>delete!(P,x,y)</code> delete the relation <code>x&lt;y</code> from <code>P</code> and for any <code>z</code>
with <code>x &lt; z &lt; y</code>, also delete <code>x&lt;z</code> and <code>z&lt;y</code>.</li>
</ul>
<p dir="auto">More detail on element/relation addition/deletion can be found in the
document <code>addition-deletion.pdf</code> found in the <code>doc</code> folder.</p>
<h2 dir="auto"><a id="user-content-basic-inspection" class="anchor" aria-hidden="true" href="#basic-inspection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic inspection</h2>
<ul dir="auto">
<li><code>elements(P)</code> returns a list of the elements in <code>P</code></li>
<li><code>card(P)</code> returns the cardinality of <code>P</code> (number of elements).</li>
<li><code>relations(P)</code> returns a list of all pairs <code>(x,y)</code> with <code>x&lt;y</code> in
this poset.</li>
<li><code>incomparables(P)</code> returns a list of all incomparable pairs. If
<code>(x,y)</code> is listed, we do not also list <code>(y,x)</code>.</li>
<li><code>has(P,x)</code> determine if <code>x</code> is an element of <code>P</code>.</li>
<li><code>has(P,x,y)</code> determine if <code>x&lt;y</code> in the poset <code>P</code>. <strong>Note</strong>: Calling
<code>has(P,x,x)</code> for an element <code>x</code> of this poset returns <code>false</code>. All
our methods concern the strict relation <code>&lt;</code>.</li>
<li><code>above(P,x)</code> returns a list of all elements above <code>x</code> in <code>P</code>.</li>
<li><code>below(P,x)</code> returns a list of all elements below <code>x</code> in <code>P</code>.</li>
<li><code>interval(P,x,y)</code> returns a list of all elements <code>z</code> that satisfy
<code>x&lt;z&lt;y</code>.</li>
<li><code>maximals(P)</code> returns a list of the maximal elements of <code>P</code>.</li>
<li><code>minimals(P)</code> returns a list of the minimal elements of <code>P</code>.</li>
</ul>
<p dir="auto">The following functions are not likely to be called by the casual user.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>check(P)</code> returns <code>true</code> provided the internal data structures of
<code>P</code> are valid and <code>false</code> otherwise. <strong>Note</strong>: There should be no
reason to use this function if the poset is created and manipulated
by the functions provided in this module.</p>
</li>
<li>
<p dir="auto"><code>hash(P)</code> computes a hash value for the poset. This enables <code>SimplePoset</code>
objects to serve as keys in dictionaries, and so forth.</p>
</li>
<li>
<p dir="auto"><code>eltype(P)</code> returns the datatype of the elements in this poset. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; P = BooleanLattice(3);

julia&gt; eltype(P)
SimplePoset{String} (8 elements)"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">BooleanLattice</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eltype</span>(P)
SimplePoset{String} (<span class="pl-c1">8</span> elements)</pre></div>
</li>
</ul>
<h2 dir="auto"><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructors</h2>
<ul dir="auto">
<li><code>Antichain(n)</code> creates an antichain with elements <code>1:n</code>. The
function <code>IntPoset(n)</code> is a synonym.</li>
<li><code>Antichain(list)</code> creates an antichain with elements drawn from
<code>list</code>, a one-dimensional array.</li>
<li><code>BooleanLattice(n)</code> creates the subsets of an <code>n</code>-set poset in which
elements are named as <code>n</code>-long binary strings.</li>
<li><code>Chain(n)</code> creates a chain with elements <code>1:n</code> in which
<code>1&lt;2&lt;3&lt;...&lt;n</code>.</li>
<li><code>Chain(list)</code> creates a chain with elements drawn from <code>list</code> (in that
order) in.</li>
<li><code>Divisors(n)</code> creates the poset whose elements are the divisors of
<code>n</code> ordered by divisibility.</li>
<li><code>PartitionLattice(n)</code> creates the poset whose elements are the partitions of
<code>{1,2,...,n}</code> ordered by refinement.</li>
<li><code>RandomPoset(n,d)</code> creates a random <code>d</code>-dimensional poset on <code>n</code>
elements.</li>
<li><code>SimplePoset(G::SimpleGraph)</code> creates the vertex-edge poset of <code>G</code>.</li>
<li><code>StandardExample(n)</code> creates the canonical <code>n</code>-dimensional poset
with <code>2n</code> elements in two layers. The lower layer elements are named
from <code>-1</code> to <code>-n</code> and the upper layer from <code>1</code> to <code>n</code>. We have
<code>-i&lt;j</code> exactly when <code>i!=j</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operations</h2>
<ul dir="auto">
<li>
<p dir="auto"><code>inv(P)</code> creates the inverse poset of <code>P</code>, i.e., we have <code>x&lt;y</code> in
<code>P</code> iff we have <code>y&lt;x</code> in <code>inv(P)</code>. We can use <code>P'</code> as a synonym for
<code>inv(P)</code>.</p>
</li>
<li>
<p dir="auto"><code>intersect(P,Q)</code> creates the intersection of the two posets (which
must be of the same element type). Typically the two posets have the
same elements, but this is not necessary. The resulting poset's
elements is the intersection of the two element sets, and relations
in the result are those relations common to both <code>P</code> and <code>Q</code>.</p>
</li>
<li>
<p dir="auto"><code>induce(P,A)</code> forms the induced subposet of <code>P</code> using the elements
in the set <code>A</code>.</p>
</li>
<li>
<p dir="auto"><code>P*Q</code> is the Cartesian product of the two posets (that may be of different types).</p>
</li>
<li>
<p dir="auto"><code>P+Q</code> is the disjoint union of two (or more) posets. The posets must
all be of the same type. Each summand's elements is extended with an
integer (starting at 1) corresponding to its position in the
sum. That is, if <code>x</code> is an element of summand number <code>i</code>, then in
the sum it becomes the element <code>(x,i)</code>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; P = Chain(2)+Chain(3)+Chain(4)
SimplePoset{(Int64,Int64)} (9 elements)

julia&gt; elements(P)
9-element Array{(Int64,Int64),1}:
 (1,1)
 (1,2)
 (1,3)
 (2,1)
 (2,2)
 (2,3)
 (3,2)
 (3,3)
 (4,3)"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">Chain</span>(<span class="pl-c1">3</span>)<span class="pl-k">+</span><span class="pl-c1">Chain</span>(<span class="pl-c1">4</span>)
SimplePoset{(Int64,Int64)} (<span class="pl-c1">9</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">elements</span>(P)
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{(Int64,Int64),<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
 (<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)
 (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
 (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>)
 (<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
 (<span class="pl-c1">4</span>,<span class="pl-c1">3</span>)</pre></div>
</li>
<li>
<p dir="auto"><code>stack(Plist...)</code> creates a new poset from the ones in the argument
list by stacking one atop the next. The first poset in the list is
at the bottom.  Element labeling
is as in <code>+</code>.</p>
</li>
<li>
<p dir="auto"><code>relabel(P,labels)</code> is used to create a new poset in which the elements
have new names (as given by the dictionary <code>labels</code>). Calling
<code>relabel(P)</code> gives a new poset in which the new element names are
the integers <code>1</code> through <code>n</code>. Here's an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; P = Chain(3) + Chain(3)
SimplePoset{(Int64,Int64)} (6 elements)

julia&gt; elements(P)
6-element Array{(Int64,Int64),1}:
 (1,1)
 (1,2)
 (2,1)
 (2,2)
 (3,1)
 (3,2)

julia&gt; Q = relabel(P)
SimplePoset{Int64} (6 elements)

julia&gt; elements(Q)
6-element Array{Int64,1}:
 1
 2
 3
 4
 5
 6"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">3</span>) <span class="pl-k">+</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">3</span>)
SimplePoset{(Int64,Int64)} (<span class="pl-c1">6</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">elements</span>(P)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{(Int64,Int64),<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
 (<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)
 (<span class="pl-c1">3</span>,<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> Q <span class="pl-k">=</span> <span class="pl-c1">relabel</span>(P)
SimplePoset{Int64} (<span class="pl-c1">6</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">elements</span>(Q)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span></pre></div>
</li>
</ul>
<h2 dir="auto"><a id="user-content-poset-properties" class="anchor" aria-hidden="true" href="#poset-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Poset properties</h2>
<ul dir="auto">
<li><code>ComparabilityGraph(P)</code> returns a <code>SimpleGraph</code> whose vertices are
the elements of <code>P</code> and in which two distinct vertices are adjacent
iff they are comparable in <code>P</code>.</li>
<li><code>CoverDigraph(P)</code> returns a directed graph whose vertices are the
elements of <code>P</code> in which <code>(x,y)</code> is an edges provided both <code>x&lt;y</code> in <code>P</code>
and there is no <code>z</code> for which <code>x&lt;z&lt;y</code>. These are the edges that would
appear in a Hasse diagram of <code>P</code>.</li>
<li><code>mobius(P)</code> creates the Mobius function for this poset (as a
dictionary from pairs of elements to <code>Int</code> values).</li>
<li><code>mobius_matrix(P)</code> is the inverse of <code>zeta_matrix(P)</code>.</li>
<li><code>zeta(P)</code> creates the zeta function for this poset (as a dictionary
from pairs of elements to <code>Int</code> values). We have <code>(x,y) ==&gt; 1</code>
provided <code>x==y</code> or <code>x&lt;y</code>, and <code>(x,y) ==&gt; 0</code> otherwise.</li>
<li><code>zeta_matrix(P)</code> produces the zeta matrix. Order of elements is the
same as produced by <code>elements(P)</code>.</li>
<li><code>height(P)</code> returns the maximum size of a chain.</li>
</ul>
<h2 dir="auto"><a id="user-content-linear-extensions" class="anchor" aria-hidden="true" href="#linear-extensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear extensions</h2>
<ul dir="auto">
<li><code>linear_extension(P)</code> finds one linear extension of the poset (as an
<code>Array</code>).</li>
<li><code>random_linear_extension(P)</code> returns a random linear extension. See the
help message for more detail.</li>
<li><code>all_linear_extensions(P)</code> returns a <code>Set</code> containing all the linear
extensions of the poset. This is a <em>very</em> expensive operation in
both time and memory. It is memoized to make it more efficient, but
the memory it uses is <em>not</em> freed after use.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; P = Divisors(12)
SimplePoset{Int64} (6 elements)

julia&gt; linear_extension(P)'
1×6 LinearAlgebra.Adjoint{Int64,Array{Int64,1}}:
 1  2  3  4  6  12

julia&gt; random_linear_extension(P)'
1×6 LinearAlgebra.Adjoint{Int64,Array{Int64,1}}:
 1  3  2  6  4  12

julia&gt; collect(all_linear_extensions(P))
5-element Array{Array{Int64,1},1}:
 [1, 3, 2, 4, 6, 12]
 [1, 3, 2, 6, 4, 12]
 [1, 2, 3, 6, 4, 12]
 [1, 2, 3, 4, 6, 12]
 [1, 2, 4, 3, 6, 12]"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Divisors</span>(<span class="pl-c1">12</span>)
SimplePoset{Int64} (<span class="pl-c1">6</span> elements)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">linear_extension</span>(P)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">6</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Int64,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">random_linear_extension</span>(P)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">6</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Int64,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">4</span>  <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">all_linear_extensions</span>(P))
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Array{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">12</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">6</span>, <span class="pl-c1">4</span>, <span class="pl-c1">12</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>, <span class="pl-c1">4</span>, <span class="pl-c1">12</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">12</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>, <span class="pl-c1">12</span>]</pre></div>
<h2 dir="auto"><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Miscellaneous</h2>
<h3 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the hood</h3>
<p dir="auto">A <code>SimplePoset</code> is a wrapper around a <code>DirectedGraph</code> object. The
functions for creating and manipulating a <code>SimplePoset</code> ensure that
the underlying digraph has directed edges <code>(x,y)</code> exactly for those
pairs of elements with <code>x&lt;y</code>.</p>
</article></div>