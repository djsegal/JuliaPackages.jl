<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-takagifactorizationjl" class="anchor" aria-hidden="true" href="#takagifactorizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TakagiFactorization.jl</h1>
<p><a href="https://travis-ci.org/JLTastet/TakagiFactorization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/312cea3e23afee3256d67e2dd915ca9caf9f7b0ba03ab460765ad97de34aa06d/68747470733a2f2f7472617669732d63692e6f72672f4a4c5461737465742f54616b616769466163746f72697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JLTastet/TakagiFactorization.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JLTastet/TakagiFactorization.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bc9e96d6293b208344b4a7f260bf15f79705bce525a10cd2418edc8dd53fe067/687474703a2f2f636f6465636f762e696f2f6769746875622f4a4c5461737465742f54616b616769466163746f72697a6174696f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JLTastet/TakagiFactorization.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://www.tidyverse.org/lifecycle/#experimental" rel="nofollow"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a></p>
<p>This package is a Julia translation of Thomas Hahn's Takagi factorization routine (<a href="http://www.feynarts.de/diag/" rel="nofollow">http://www.feynarts.de/diag/</a>).</p>
<p>Its main advantage (besides being written entirely in Julia) is that it can handle arbitrary precision arithmetics out of the box (e.g. using <code>BigFloat</code>).</p>
<p>All credit goes to the original author (except for bugs). If you use this package in your research, please cite:</p>
<ul>
<li><a href="https://arxiv.org/abs/physics/0607103" rel="nofollow"><em>Routines for the diagonalization of complex matrices</em>, T. Hahn, arXiv:0607103</a></li>
</ul>
<p>If you find any bugs, please file an issue here. Bonus points if you check that the bug is absent from the original version :)</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage:</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TakagiFactorization
using LinearAlgebra

A₁ = convert(Matrix{Complex{Float64}}, [1.0 2.0; 2.0 1.0])
d₁, U₁ = takagi_factor(A₁, sort=-1)
@assert A₁ ≈ transpose(U₁) * d₁ * U₁
@assert d₁ ≈ Diagonal([3.0, 1.0])
@assert U₁ ≈ [1 1; -1im 1im] / √2

# Using arbitrary precision
Base.MPFR.setprecision(512)
A₂ = convert(Matrix{Complex{BigFloat}}, [0.0 1.0; 1.0 0.0])
d₂, U₂ = takagi_factor(A₂)
@assert A₂ ≈ transpose(U₂) * d₂ * U₂
@assert d₂ ≈ Diagonal([1.0, 1.0])
@assert U₂ ≈ [1 1; -1im 1im] / √big(2)
"><pre><span class="pl-k">using</span> TakagiFactorization
<span class="pl-k">using</span> LinearAlgebra

A₁ <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Matrix{Complex{Float64}}, [<span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span>])
d₁, U₁ <span class="pl-k">=</span> <span class="pl-c1">takagi_factor</span>(A₁, sort<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">@assert</span> A₁ <span class="pl-k">≈</span> <span class="pl-c1">transpose</span>(U₁) <span class="pl-k">*</span> d₁ <span class="pl-k">*</span> U₁
<span class="pl-c1">@assert</span> d₁ <span class="pl-k">≈</span> <span class="pl-c1">Diagonal</span>([<span class="pl-c1">3.0</span>, <span class="pl-c1">1.0</span>])
<span class="pl-c1">@assert</span> U₁ <span class="pl-k">≈</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1im</span> <span class="pl-c1">1im</span>] <span class="pl-k">/</span> <span class="pl-k">√</span><span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> Using arbitrary precision</span>
Base<span class="pl-k">.</span>MPFR<span class="pl-k">.</span><span class="pl-c1">setprecision</span>(<span class="pl-c1">512</span>)
A₂ <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Matrix{Complex{BigFloat}}, [<span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>])
d₂, U₂ <span class="pl-k">=</span> <span class="pl-c1">takagi_factor</span>(A₂)
<span class="pl-c1">@assert</span> A₂ <span class="pl-k">≈</span> <span class="pl-c1">transpose</span>(U₂) <span class="pl-k">*</span> d₂ <span class="pl-k">*</span> U₂
<span class="pl-c1">@assert</span> d₂ <span class="pl-k">≈</span> <span class="pl-c1">Diagonal</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])
<span class="pl-c1">@assert</span> U₂ <span class="pl-k">≈</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1im</span> <span class="pl-c1">1im</span>] <span class="pl-k">/</span> <span class="pl-k">√</span><span class="pl-c1">big</span>(<span class="pl-c1">2</span>)</pre></div>
</article></div>