<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-takagifactorizationjl" class="anchor" aria-hidden="true" href="#takagifactorizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TakagiFactorization.jl</h1>
<p><a href="https://travis-ci.org/JLTastet/TakagiFactorization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ca4174c2c827c195afbbea32273f02884f7546d9/68747470733a2f2f7472617669732d63692e6f72672f4a4c5461737465742f54616b616769466163746f72697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JLTastet/TakagiFactorization.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JLTastet/TakagiFactorization.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/14784afe17392c454980045fecc0b54f065f2ccc/687474703a2f2f636f6465636f762e696f2f6769746875622f4a4c5461737465742f54616b616769466163746f72697a6174696f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JLTastet/TakagiFactorization.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://www.tidyverse.org/lifecycle/#experimental" rel="nofollow"><img src="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a></p>
<p>This package is a Julia translation of Thomas Hahn's Takagi factorization routine (<a href="http://www.feynarts.de/diag/" rel="nofollow">http://www.feynarts.de/diag/</a>).</p>
<p>Its main advantage (besides being written entirely in Julia) is that it can handle arbitrary precision arithmetics out of the box (e.g. using <code>BigFloat</code>).</p>
<p>All credit goes to the original author (except for bugs). If you use this package in your research, please cite:</p>
<ul>
<li><a href="https://arxiv.org/abs/physics/0607103" rel="nofollow"><em>Routines for the diagonalization of complex matrices</em>, T. Hahn, arXiv:0607103</a></li>
</ul>
<p>If you find any bugs, please file an issue here. Bonus points if you check that the bug is absent from the original version :)</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage:</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TakagiFactorization
<span class="pl-k">using</span> LinearAlgebra

A₁ <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Matrix{Complex{Float64}}, [<span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span>])
d₁, U₁ <span class="pl-k">=</span> <span class="pl-c1">takagi_factor</span>(A₁, sort<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">@assert</span> A₁ <span class="pl-k">≈</span> <span class="pl-c1">transpose</span>(U₁) <span class="pl-k">*</span> d₁ <span class="pl-k">*</span> U₁
<span class="pl-c1">@assert</span> d₁ <span class="pl-k">≈</span> <span class="pl-c1">Diagonal</span>([<span class="pl-c1">3.0</span>, <span class="pl-c1">1.0</span>])
<span class="pl-c1">@assert</span> U₁ <span class="pl-k">≈</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1im</span> <span class="pl-c1">1im</span>] <span class="pl-k">/</span> <span class="pl-k">√</span><span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> Using arbitrary precision</span>
Base<span class="pl-k">.</span>MPFR<span class="pl-k">.</span><span class="pl-c1">setprecision</span>(<span class="pl-c1">512</span>)
A₂ <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Matrix{Complex{BigFloat}}, [<span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>])
d₂, U₂ <span class="pl-k">=</span> <span class="pl-c1">takagi_factor</span>(A₂)
<span class="pl-c1">@assert</span> A₂ <span class="pl-k">≈</span> <span class="pl-c1">transpose</span>(U₂) <span class="pl-k">*</span> d₂ <span class="pl-k">*</span> U₂
<span class="pl-c1">@assert</span> d₂ <span class="pl-k">≈</span> <span class="pl-c1">Diagonal</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])
<span class="pl-c1">@assert</span> U₂ <span class="pl-k">≈</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1im</span> <span class="pl-c1">1im</span>] <span class="pl-k">/</span> <span class="pl-k">√</span><span class="pl-c1">big</span>(<span class="pl-c1">2</span>)</pre></div>
</article></div>