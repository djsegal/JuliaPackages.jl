<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-icnfjl" class="anchor" aria-hidden="true" href="#icnfjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ICNF.jl</h1>
<p dir="auto"><a href="https://impICNF.github.io/ICNF.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://impICNF.github.io/ICNF.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/impICNF/ICNF.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/impICNF/ICNF.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/impICNF/ICNF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1bd3b9616ddd3d40e2bb8a7a541180585f601f3ea21557082851426b7ec814a8/68747470733a2f2f636f6465636f762e696f2f67682f696d7049434e462f49434e462e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/impICNF/ICNF.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/impICNF/ICNF.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/053b2d94a1a5bd0268681164f7a34b258eb58b439cceaded6f3b4673b973fb72/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f696d7049434e462f49434e462e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage" data-canonical-src="https://coveralls.io/repos/github/impICNF/ICNF.jl/badge.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">Implementations of Infinitesimal Continuous Normalizing Flows Algorithms in Julia</p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">See <a href="CITATION.bib"><code>CITATION.bib</code></a> for the relevant reference(s).</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To add this package, we can do it by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(; url = &quot;https://github.com/impICNF/ICNF.jl&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(; url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/impICNF/ICNF.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">To use this package, here is an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ICNF
using Distributions, Lux
# using Flux
# using ForwardDiff, Optimization
# using CUDA, ComputationalResources

# Parameters
nvars = 1
n = 1024

# Data
data_dist = Beta(2.0f0, 4.0f0)
r = rand(data_dist, nvars, n)

# Model
nn = Lux.Chain(Lux.Dense(nvars =&gt; 4 * nvars, tanh), Lux.Dense(4 * nvars =&gt; nvars, tanh)) # use Lux
# nn = Flux.Chain(Flux.Dense(nvars =&gt; 4 * nvars, tanh), Flux.Dense(4 * nvars =&gt; nvars, tanh)) |&gt; FluxCompatLayer # use Flux

icnf = construct(RNODE, nn, nvars; tspan = (0.0f0, 4.0f0)) # process data one by one
# icnf = construct(RNODE, nn, nvars; tspan = (0.0f0, 4.0f0), compute_mode = ZygoteMatrixMode) # process data in batches
# icnf = construct(RNODE, nn, nvars; tspan = (0.0f0, 4.0f0), array_type = CuArray) # process data by GPU

# Training
using DataFrames, MLJBase
df = DataFrame(transpose(r), :auto)
model = ICNFModel(icnf) # use Zygote
# model = ICNFModel(icnf; adtype = Optimization.AutoForwardDiff()) # use ForwardDiff
# model = ICNFModel(icnf; resource = CUDALibs()) # use GPU
mach = machine(model, df)
fit!(mach)
ps, st = fitted_params(mach)

# Use It
d = ICNFDist(icnf, ps, st)
actual_pdf = pdf.(data_dist, vec(r))
estimated_pdf = pdf(d, r)
new_data = rand(d, n)

# Evaluation
using Distances
mad_ = meanad(estimated_pdf, actual_pdf)
msd_ = msd(estimated_pdf, actual_pdf)
tv_dis = totalvariation(estimated_pdf, actual_pdf) / n"><pre><span class="pl-k">using</span> ICNF
<span class="pl-k">using</span> Distributions, Lux
<span class="pl-c"><span class="pl-c">#</span> using Flux</span>
<span class="pl-c"><span class="pl-c">#</span> using ForwardDiff, Optimization</span>
<span class="pl-c"><span class="pl-c">#</span> using CUDA, ComputationalResources</span>

<span class="pl-c"><span class="pl-c">#</span> Parameters</span>
nvars <span class="pl-k">=</span> <span class="pl-c1">1</span>
n <span class="pl-k">=</span> <span class="pl-c1">1024</span>

<span class="pl-c"><span class="pl-c">#</span> Data</span>
data_dist <span class="pl-k">=</span> <span class="pl-c1">Beta</span>(<span class="pl-c1">2.0f0</span>, <span class="pl-c1">4.0f0</span>)
r <span class="pl-k">=</span> <span class="pl-c1">rand</span>(data_dist, nvars, n)

<span class="pl-c"><span class="pl-c">#</span> Model</span>
nn <span class="pl-k">=</span> Lux<span class="pl-k">.</span><span class="pl-c1">Chain</span>(Lux<span class="pl-k">.</span><span class="pl-c1">Dense</span>(nvars <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> nvars, tanh), Lux<span class="pl-k">.</span><span class="pl-c1">Dense</span>(<span class="pl-c1">4</span> <span class="pl-k">*</span> nvars <span class="pl-k">=&gt;</span> nvars, tanh)) <span class="pl-c"><span class="pl-c">#</span> use Lux</span>
<span class="pl-c"><span class="pl-c">#</span> nn = Flux.Chain(Flux.Dense(nvars =&gt; 4 * nvars, tanh), Flux.Dense(4 * nvars =&gt; nvars, tanh)) |&gt; FluxCompatLayer # use Flux</span>

icnf <span class="pl-k">=</span> <span class="pl-c1">construct</span>(RNODE, nn, nvars; tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0f0</span>, <span class="pl-c1">4.0f0</span>)) <span class="pl-c"><span class="pl-c">#</span> process data one by one</span>
<span class="pl-c"><span class="pl-c">#</span> icnf = construct(RNODE, nn, nvars; tspan = (0.0f0, 4.0f0), compute_mode = ZygoteMatrixMode) # process data in batches</span>
<span class="pl-c"><span class="pl-c">#</span> icnf = construct(RNODE, nn, nvars; tspan = (0.0f0, 4.0f0), array_type = CuArray) # process data by GPU</span>

<span class="pl-c"><span class="pl-c">#</span> Training</span>
<span class="pl-k">using</span> DataFrames, MLJBase
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">transpose</span>(r), <span class="pl-c1">:auto</span>)
model <span class="pl-k">=</span> <span class="pl-c1">ICNFModel</span>(icnf) <span class="pl-c"><span class="pl-c">#</span> use Zygote</span>
<span class="pl-c"><span class="pl-c">#</span> model = ICNFModel(icnf; adtype = Optimization.AutoForwardDiff()) # use ForwardDiff</span>
<span class="pl-c"><span class="pl-c">#</span> model = ICNFModel(icnf; resource = CUDALibs()) # use GPU</span>
mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(model, df)
<span class="pl-c1">fit!</span>(mach)
ps, st <span class="pl-k">=</span> <span class="pl-c1">fitted_params</span>(mach)

<span class="pl-c"><span class="pl-c">#</span> Use It</span>
d <span class="pl-k">=</span> <span class="pl-c1">ICNFDist</span>(icnf, ps, st)
actual_pdf <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(data_dist, <span class="pl-c1">vec</span>(r))
estimated_pdf <span class="pl-k">=</span> <span class="pl-c1">pdf</span>(d, r)
new_data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(d, n)

<span class="pl-c"><span class="pl-c">#</span> Evaluation</span>
<span class="pl-k">using</span> Distances
mad_ <span class="pl-k">=</span> <span class="pl-c1">meanad</span>(estimated_pdf, actual_pdf)
msd_ <span class="pl-k">=</span> <span class="pl-c1">msd</span>(estimated_pdf, actual_pdf)
tv_dis <span class="pl-k">=</span> <span class="pl-c1">totalvariation</span>(estimated_pdf, actual_pdf) <span class="pl-k">/</span> n</pre></div>
</article></div>