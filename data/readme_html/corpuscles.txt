<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://github.com/KM3NeT/Corpuscles.jl/raw/master/docs/src/assets/corpuscles.png"><img src="https://github.com/KM3NeT/Corpuscles.jl/raw/master/docs/src/assets/corpuscles.png" alt="" style="max-width:100%;"></a></p>
<p><a href="https://KM3NeT.github.io/Corpuscles.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://KM3NeT.github.io/Corpuscles.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/KM3NeT/Corpuscles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7c21e2e114d2acafd8c613926c231c26109fadab/68747470733a2f2f7472617669732d63692e636f6d2f4b4d334e65542f436f72707573636c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/KM3NeT/Corpuscles.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/KM3NeT/Corpuscles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8437d926111feb3b862427fd1a39ebeffc7fe66/68747470733a2f2f636f6465636f762e696f2f67682f4b4d334e65542f436f72707573636c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/KM3NeT/Corpuscles.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-corpusclesjl" class="anchor" aria-hidden="true" href="#corpusclesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Corpuscles.jl</h1>
<p><strong>Corpuscles.jl</strong> is a package which gives easy access to particle
properties and identification codes summarised and defined by the
<a href="https://pdg.lbl.gov" rel="nofollow">Particle Data Group (PDG)</a> collaboration.
The cleaned CSV versions of these data are provided by courtesy
of the <a href="https://scikit-hep.org" rel="nofollow">Scikit-HEP project</a> and are part
of the <a href="https://github.com/scikit-hep/particle">Particle</a> Python
module which inspired us to create a similar package for the
<a href="https://www.julialang.org" rel="nofollow">Julia Language</a>. <strong>Corpusles.jl</strong>
is by far not as feature complete as <strong>Particle</strong>, but we add
functionality continuously, as needed. Feel free to create an
<a href="https://github.com/KM3NeT/Corpuscles.jl/issues/new">Issue</a> or pull request if
you find any bugs or have suggestions to improve.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The <code>Particle</code> struct can be used to create a particle. If an integer value is
passed, it will be interpreted as PDG ID, which is the primary particle
encoding in <strong>Corpuscles.jl</strong>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Corpuscles

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>)
<span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(e)<span class="pl-pds">'</span></span></pre></div>
<p>To get an overview of the available particle information, use <code>print()</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(p)
Name<span class="pl-k">:</span>    <span class="pl-c1">K</span>(<span class="pl-c1">4</span>)<span class="pl-k">*</span>(<span class="pl-c1">2045</span>)
PDG ID<span class="pl-k">:</span>  <span class="pl-k">-</span><span class="pl-c1">319</span>
LaTeX<span class="pl-k">:</span>   <span class="pl-k">$</span><span class="pl-k">\</span>bar{K}_{<span class="pl-c1">4</span>}<span class="pl-k">^</span>{<span class="pl-k">*</span>}(<span class="pl-c1">2045</span>)<span class="pl-k">^</span>{<span class="pl-c1">0</span>}$
Status<span class="pl-k">:</span>  Common
Width <span class="pl-k">=</span> <span class="pl-c1">198.0</span> MeV ± <span class="pl-c1">30.0</span> MeV
Q (charge) <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span> e
Composition <span class="pl-k">=</span> Ds
Isospin <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>
Mass <span class="pl-k">=</span> <span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV
P (space parity) <span class="pl-k">=</span> <span class="pl-c1">1</span></pre></div>
<p>The properties are accessible via attributes:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(Particle)
(<span class="pl-c1">:pdgid</span>, <span class="pl-c1">:mass</span>, <span class="pl-c1">:width</span>, <span class="pl-c1">:charge</span>, <span class="pl-c1">:isospin</span>, <span class="pl-c1">:parity</span>, <span class="pl-c1">:gparity</span>, <span class="pl-c1">:cparity</span>, <span class="pl-c1">:antiprop</span>, <span class="pl-c1">:rank</span>, <span class="pl-c1">:status</span>, <span class="pl-c1">:name</span>, <span class="pl-c1">:quarks</span>, <span class="pl-c1">:latex</span>)

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>quarks
<span class="pl-s"><span class="pl-pds">"</span>Ds<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>isospin
<span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass
<span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV</pre></div>
<h2><a id="user-content-units" class="anchor" aria-hidden="true" href="#units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Units</h2>
<p>For some properties like <code>mass</code> and <code>width</code> we use the
<a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a> package, which makes it
easy to combine values with physical units:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(p<span class="pl-k">.</span>mass)
Corpuscles<span class="pl-k">.</span>MeasuredValue{𝐋<span class="pl-k">^</span><span class="pl-c1">2</span> 𝐌 𝐓<span class="pl-k">^-</span><span class="pl-c1">2</span>}

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass
<span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass<span class="pl-k">.</span>value
<span class="pl-c1">2045.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass<span class="pl-k">.</span>lower_limit
<span class="pl-c1">9.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass<span class="pl-k">.</span>upper_limit
<span class="pl-c1">9.0</span> MeV</pre></div>
<p>and also <code>Base.isless</code> and <code>Base.isapprox</code> are implemented so that the
lower and upper limits are taken into account, as seen here:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass
<span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass <span class="pl-k">&gt;</span> <span class="pl-c1">2036</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>MeV<span class="pl-pds">"</span></span>
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass <span class="pl-k">&gt;</span> <span class="pl-c1">2035</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>MeV<span class="pl-pds">"</span></span>
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-particle-codes" class="anchor" aria-hidden="true" href="#particle-codes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Particle Codes</h2>
<p>Corpuscles currently supports conversions of Pythia and Geant3 codes to PDG
using the <code>Pythia</code> and <code>Geant3ID</code> types. The corresponding number is simply
passed to the type and then to the <code>Particle</code> itself. The PDG ID will be
converted if possible, otherwise an error will be raised.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">Geant3ID</span>(<span class="pl-c1">5</span>))
<span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13</span>) <span class="pl-s"><span class="pl-pds">'</span>mu<span class="pl-pds">'</span></span></pre></div>
<h2><a id="user-content-finding-particles" class="anchor" aria-hidden="true" href="#finding-particles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Finding Particles</h2>
<p>The <code>particles()</code> functions returns a <code>Vector</code> containing all the particles
of the currently selected catalog. To search for particles, the <code>filter()</code>
function comes in hand which can be combined with string comparison functions
like <code>startswith()</code> or <code>occursin()</code>.</p>
<p>Here is an example how to find all particles with names starting with <code>"nu"</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(p<span class="pl-k">-&gt;</span><span class="pl-c1">startswith</span>(p<span class="pl-k">.</span>name, <span class="pl-s"><span class="pl-pds">"</span>nu<span class="pl-pds">"</span></span>), <span class="pl-c1">particles</span>())
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Particle,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">14</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(mu)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">16</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(tau)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">12</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(e)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">14</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(mu)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">16</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(tau)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(e)<span class="pl-pds">'</span></span></pre></div>
<p>A more powerful way to filter particles based
on patterns in their name is using [regular
expressions](<a href="https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressio" rel="nofollow">https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressio</a> ns-1)
with e.g. <code>occursin()</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(p<span class="pl-k">-&gt;</span><span class="pl-c1">occursin</span>(<span class="pl-sr"><span class="pl-pds">r"</span>D<span class="pl-cce">\(\d</span>*<span class="pl-cce">\)</span><span class="pl-pds">"</span></span>, p<span class="pl-k">.</span>name), <span class="pl-c1">particles</span>())
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Particle,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">10421</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">10411</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">425</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">10411</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">10421</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">10423</span>) <span class="pl-s"><span class="pl-pds">'</span>D(1)(2420)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">425</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">10423</span>) <span class="pl-s"><span class="pl-pds">'</span>D(1)(2420)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">415</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">415</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span></pre></div>
</article></div>