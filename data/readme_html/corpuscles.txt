<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPhysics/Corpuscles.jl/raw/master/docs/src/assets/corpuscles.png"><img src="https://github.com/JuliaPhysics/Corpuscles.jl/raw/master/docs/src/assets/corpuscles.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://JuliaPhysics.github.io/Corpuscles.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaPhysics.github.io/Corpuscles.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaPhysics/Corpuscles.jl/actions"><img src="https://github.com/JuliaPhysics/Corpuscles.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPhysics/Corpuscles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cd1df238eb72110ed2f087318486266bd79c9861bd46a4cc62beb37719e7b306/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506879736963732f436f72707573636c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaPhysics/Corpuscles.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3933364" rel="nofollow"><img src="https://camo.githubusercontent.com/9df141c817a833f9f01b8fde4f16f726e44328639d9fcb554fe2876efc557da8/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333933333336342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3933364.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-corpusclesjl" class="anchor" aria-hidden="true" href="#corpusclesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Corpuscles.jl</h1>
<p dir="auto"><strong>Corpuscles.jl</strong> is a package which gives easy access to particle
properties and identification codes summarised and defined by the
<a href="https://pdg.lbl.gov" rel="nofollow">Particle Data Group (PDG)</a> collaboration.
The cleaned CSV versions of these data are provided by courtesy
of the <a href="https://scikit-hep.org" rel="nofollow">Scikit-HEP project</a> and are part
of the <a href="https://github.com/scikit-hep/particle">Particle</a> Python
module which inspired us to create a similar package for the
<a href="https://www.julialang.org" rel="nofollow">Julia Language</a>. <strong>Corpuscles.jl</strong>
is by far not as feature complete as <strong>Particle</strong>, but we add
functionality continuously, as needed. Feel free to create an
<a href="https://github.com/JuliaPhysics/Corpuscles.jl/issues/new">Issue</a> or pull request if
you find any bugs or have suggestions to improve.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The <code>Particle</code> struct can be used to create a particle. If an integer value is
passed, it will be interpreted as <a href="http://pdg.lbl.gov/2019/reviews/rpp2019-rev-monte-carlo-numbering.pdf" rel="nofollow">PDG ID</a>, which is the primary particle
encoding in <strong>Corpuscles.jl</strong>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Corpuscles

julia&gt; p = Particle(12)
Particle(12) 'nu(e)'"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Corpuscles

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>)
<span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(e)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">To get an overview of the available particle information, use <code>print()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; print(p)
Name:    K(4)*(2045)
PDG ID:  -319
LaTeX:   $\bar{K}_{4}^{*}(2045)^{0}$
Status:  Common
Width = 198.0 MeV ± 30.0 MeV
Q (charge) = 0//1 e
Composition = Ds
Isospin = 1//2
Mass = 2045.0 MeV ± 9.0 MeV
P (space parity) = 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(p)
Name<span class="pl-k">:</span>    <span class="pl-c1">K</span>(<span class="pl-c1">4</span>)<span class="pl-k">*</span>(<span class="pl-c1">2045</span>)
PDG ID<span class="pl-k">:</span>  <span class="pl-k">-</span><span class="pl-c1">319</span>
LaTeX<span class="pl-k">:</span>   <span class="pl-k">$</span><span class="pl-k">\</span>bar{K}_{<span class="pl-c1">4</span>}<span class="pl-k">^</span>{<span class="pl-k">*</span>}(<span class="pl-c1">2045</span>)<span class="pl-k">^</span>{<span class="pl-c1">0</span>}$
Status<span class="pl-k">:</span>  Common
Width <span class="pl-k">=</span> <span class="pl-c1">198.0</span> MeV ± <span class="pl-c1">30.0</span> MeV
Q (charge) <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span> e
Composition <span class="pl-k">=</span> Ds
Isospin <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>
Mass <span class="pl-k">=</span> <span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV
P (space parity) <span class="pl-k">=</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">The properties are accessible via attributes:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fieldnames(Particle)
(:pdgid, :mass, :width, :charge, :isospin, :parity, :gparity, :cparity, :antiprop, :rank, :status, :name, :quarks, :latex)

julia&gt; p.quarks
&quot;Ds&quot;

julia&gt; p.isospin
1//2

julia&gt; p.mass
2045.0 MeV ± 9.0 MeV"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(Particle)
(<span class="pl-c1">:pdgid</span>, <span class="pl-c1">:mass</span>, <span class="pl-c1">:width</span>, <span class="pl-c1">:charge</span>, <span class="pl-c1">:isospin</span>, <span class="pl-c1">:parity</span>, <span class="pl-c1">:gparity</span>, <span class="pl-c1">:cparity</span>, <span class="pl-c1">:antiprop</span>, <span class="pl-c1">:rank</span>, <span class="pl-c1">:status</span>, <span class="pl-c1">:name</span>, <span class="pl-c1">:quarks</span>, <span class="pl-c1">:latex</span>)

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>quarks
<span class="pl-s"><span class="pl-pds">"</span>Ds<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>isospin
<span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass
<span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV</pre></div>
<p dir="auto">There are tons of helper functions to check other properties:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; filter(hasstrange, particles())
257-element Array{Particle,1}:
 Particle(3224) Sigma(1385)
 Particle(23124) Lambda(1890)
 Particle(-13324) Xi(1820)
 Particle(-329) K(4)*(2045)
 ⋮
 Particle(13124) Lambda(1690)
 Particle(-100321) K(1460)
 Particle(20433) D(s1)(2460)
julia&gt; filter(islepton, particles())
16-element Array{Particle,1}:
 Particle(18) nu(tau')
 Particle(15) tau
 Particle(11) e
 Particle(13) mu
 Particle(14) nu(mu)
 Particle(17) tau'
 ⋮
 Particle(12) nu(e)
 Particle(-14) nu(mu)
 Particle(-16) nu(tau)
 Particle(-12) nu(e)
 Particle(-13) mu"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(hasstrange, <span class="pl-c1">particles</span>())
<span class="pl-c1">257</span><span class="pl-k">-</span>element Array{Particle,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">3224</span>) <span class="pl-c1">Sigma</span>(<span class="pl-c1">1385</span>)
 <span class="pl-c1">Particle</span>(<span class="pl-c1">23124</span>) <span class="pl-c1">Lambda</span>(<span class="pl-c1">1890</span>)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13324</span>) <span class="pl-c1">Xi</span>(<span class="pl-c1">1820</span>)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">329</span>) <span class="pl-c1">K</span>(<span class="pl-c1">4</span>)<span class="pl-k">*</span>(<span class="pl-c1">2045</span>)
 ⋮
 <span class="pl-c1">Particle</span>(<span class="pl-c1">13124</span>) <span class="pl-c1">Lambda</span>(<span class="pl-c1">1690</span>)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">100321</span>) <span class="pl-c1">K</span>(<span class="pl-c1">1460</span>)
 <span class="pl-c1">Particle</span>(<span class="pl-c1">20433</span>) <span class="pl-c1">D</span>(s1)(<span class="pl-c1">2460</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(islepton, <span class="pl-c1">particles</span>())
<span class="pl-c1">16</span><span class="pl-k">-</span>element Array{Particle,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">18</span>) <span class="pl-c1">nu</span>(tau<span class="pl-k">'</span>)
 <span class="pl-c1">Particle</span>(<span class="pl-c1">15</span>) tau
 <span class="pl-c1">Particle</span>(<span class="pl-c1">11</span>) e
 <span class="pl-c1">Particle</span>(<span class="pl-c1">13</span>) mu
 <span class="pl-c1">Particle</span>(<span class="pl-c1">14</span>) <span class="pl-c1">nu</span>(mu)
 <span class="pl-c1">Particle</span>(<span class="pl-c1">17</span>) tau<span class="pl-k">'</span>
 ⋮
 <span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>) <span class="pl-c1">nu</span>(e)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">14</span>) <span class="pl-c1">nu</span>(mu)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">16</span>) <span class="pl-c1">nu</span>(tau)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">12</span>) <span class="pl-c1">nu</span>(e)
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13</span>) mu</pre></div>
<h2 dir="auto"><a id="user-content-units" class="anchor" aria-hidden="true" href="#units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Units</h2>
<p dir="auto">For some properties like <code>mass</code> and <code>width</code> we use the
<a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a> package, which makes it
easy to combine values with physical units:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; typeof(p.mass)
Corpuscles.MeasuredValue{𝐋^2 𝐌 𝐓^-2}

julia&gt; p.mass
2045.0 MeV ± 9.0 MeV

julia&gt; p.mass.value
2045.0 MeV

julia&gt; p.mass.lower_limit
9.0 MeV

julia&gt; p.mass.upper_limit
9.0 MeV"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(p<span class="pl-k">.</span>mass)
Corpuscles<span class="pl-k">.</span>MeasuredValue{𝐋<span class="pl-k">^</span><span class="pl-c1">2</span> 𝐌 𝐓<span class="pl-k">^-</span><span class="pl-c1">2</span>}

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass
<span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass<span class="pl-k">.</span>value
<span class="pl-c1">2045.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass<span class="pl-k">.</span>lower_limit
<span class="pl-c1">9.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass<span class="pl-k">.</span>upper_limit
<span class="pl-c1">9.0</span> MeV</pre></div>
<p dir="auto">and also <code>Base.isless</code> and <code>Base.isapprox</code> are implemented so that the
lower and upper limits are taken into account, as seen here:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Unitful

julia&gt; p.mass
2045.0 MeV ± 9.0 MeV

julia&gt; p.mass &gt; 2036u&quot;MeV&quot;
false

julia&gt; p.mass &gt; 2035u&quot;MeV&quot;
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass
<span class="pl-c1">2045.0</span> MeV ± <span class="pl-c1">9.0</span> MeV

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass <span class="pl-k">&gt;</span> <span class="pl-c1">2036</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>MeV<span class="pl-pds">"</span></span>
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>mass <span class="pl-k">&gt;</span> <span class="pl-c1">2035</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>MeV<span class="pl-pds">"</span></span>
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-particle-codes" class="anchor" aria-hidden="true" href="#particle-codes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Particle Codes</h2>
<p dir="auto">Corpuscles currently supports conversions of Pythia and Geant3 codes to PDG
using the <code>Pythia</code> and <code>Geant3ID</code> types. The corresponding number is simply
passed to the type and then to the <code>Particle</code> itself. The PDG ID will be
converted if possible, otherwise an error will be raised.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Particle(Geant3ID(5))
Particle(-13) 'mu'"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">Geant3ID</span>(<span class="pl-c1">5</span>))
<span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13</span>) <span class="pl-s"><span class="pl-pds">'</span>mu<span class="pl-pds">'</span></span></pre></div>
<h2 dir="auto"><a id="user-content-finding-particles" class="anchor" aria-hidden="true" href="#finding-particles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finding Particles</h2>
<p dir="auto">The <code>particles()</code> functions returns a <code>Vector</code> containing all the particles
of the currently selected catalog. To search for particles, the <code>filter()</code>
function comes in hand which can be combined with string comparison functions
like <code>startswith()</code> or <code>occursin()</code>.</p>
<p dir="auto">Here is an example how to find all particles with names starting with <code>"nu"</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; filter(p-&gt;startswith(p.name, &quot;nu&quot;), particles())
6-element Array{Particle,1}:
 Particle(-14) 'nu(mu)'
 Particle(-16) 'nu(tau)'
 Particle(-12) 'nu(e)'
 Particle(14) 'nu(mu)'
 Particle(16) 'nu(tau)'
 Particle(12) 'nu(e)'"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(p<span class="pl-k">-&gt;</span><span class="pl-c1">startswith</span>(p<span class="pl-k">.</span>name, <span class="pl-s"><span class="pl-pds">"</span>nu<span class="pl-pds">"</span></span>), <span class="pl-c1">particles</span>())
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Particle,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">14</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(mu)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">16</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(tau)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">12</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(e)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">14</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(mu)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">16</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(tau)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">12</span>) <span class="pl-s"><span class="pl-pds">'</span>nu(e)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">A more powerful way to filter particles based
on patterns in their name is using [regular
expressions](<a href="https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressio" rel="nofollow">https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressio</a> ns-1)
with e.g. <code>occursin()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; filter(p-&gt;occursin(r&quot;D\(\d*\)&quot;, p.name), particles())
10-element Array{Particle,1}:
 Particle(-10421) 'D(0)*(2300)'
 Particle(-10411) 'D(0)*(2300)'
 Particle(425) 'D(2)*(2460)'
 Particle(10411) 'D(0)*(2300)'
 Particle(10421) 'D(0)*(2300)'
 Particle(10423) 'D(1)(2420)'
 Particle(-425) 'D(2)*(2460)'
 Particle(-10423) 'D(1)(2420)'
 Particle(415) 'D(2)*(2460)'
 Particle(-415) 'D(2)*(2460)'"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(p<span class="pl-k">-&gt;</span><span class="pl-c1">occursin</span>(<span class="pl-sr"><span class="pl-pds">r"</span>D<span class="pl-cce">\(\d</span>*<span class="pl-cce">\)</span><span class="pl-pds">"</span></span>, p<span class="pl-k">.</span>name), <span class="pl-c1">particles</span>())
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Particle,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">10421</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">10411</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">425</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">10411</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">10421</span>) <span class="pl-s"><span class="pl-pds">'</span>D(0)*(2300)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">10423</span>) <span class="pl-s"><span class="pl-pds">'</span>D(1)(2420)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">425</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">10423</span>) <span class="pl-s"><span class="pl-pds">'</span>D(1)(2420)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-c1">415</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span>
 <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">415</span>) <span class="pl-s"><span class="pl-pds">'</span>D(2)*(2460)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">Another useful feature is the <code>Particle(n::String, anti=false)</code> which directly
creates a (anti-)particle from a given name -- as long as it exists in the
currently loaded particle dataset:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Particle(&quot;mu&quot;) == Particle(13)
true

julia&gt; -Particle(&quot;mu&quot;) == Particle(-13)
true

julia&gt; Particle(&quot;anti-mu&quot;) == Particle(-13)
true

julia&gt; Particle(&quot;mu~&quot;) == Particle(-13)
true

julia&gt; Particle(&quot;muon&quot;) == Particle(13)
true

julia&gt; Particle(&quot;mu-&quot;) == Particle(13)
true

julia&gt; Particle(&quot;mu+&quot;) == -Particle(13)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>mu<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">-</span><span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>mu<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>anti-mu<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>mu~<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Particle</span>(<span class="pl-k">-</span><span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>muon<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>mu-<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">Particle</span>(<span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Particle</span>(<span class="pl-s"><span class="pl-pds">"</span>mu+<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">Particle</span>(<span class="pl-c1">13</span>)
<span class="pl-c1">true</span></pre></div>
</article></div>