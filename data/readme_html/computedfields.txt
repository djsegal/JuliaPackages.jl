<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-computedfields" class="anchor" aria-hidden="true" href="#computedfields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ComputedFields</h1>
<p dir="auto"><a href="https://github.com/skleinbo/ComputedFields.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/skleinbo/ComputedFields.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Convenient overloading of <code>setproperty!</code> for lightweight reactive structs.</p>
<p dir="auto">This package exports the macro</p>
<h2 dir="auto"><a id="user-content-computed" class="anchor" aria-hidden="true" href="#computed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@computed</code></h2>
<p dir="auto">Annotating a (mutable) struct definition with <code>@computed</code> facilitates the definition of fields (<em>dependent variables</em>), which are automatically computed when an instance is created. If the struct is declared as <code>mutable</code>, the corresponding dependent fields are re-computed whenever an <em>independent variable (field)</em> is updated. Care is taken to ensure the correct order of computations.</p>
<p dir="auto">The macro defines</p>
<ul dir="auto">
<li>The struct (e.g. <code>TheType</code>) with field types as annotated.</li>
<li>A constructor <code>TheType(indep_vars...)</code></li>
<li><strong>(<code>mutable</code> only)</strong> A method <code>computeproperty!(::TheType, dep_var::Symbol)</code> that recomputes the field <code>dep_var</code>. The computation propagates and triggers re-computations downstream in the computational graph by default. Set <code>propagate=false</code> if it should not.</li>
<li><strong>(<code>mutable</code> only)</strong> A method <code>setproperty!(::TheType, indep_var::Symbol, value)</code> that sets <code>field</code> to <code>value</code> and triggers computation of dependent variables.</li>
</ul>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @computed struct SinCos
    x::Float64
    thesincos::Tuple{Float64,Float64} = sincos(x)
end

julia&gt; sc = SinCos(pi/2)
SinCos(1.5707963267948966, (1.0, 6.123233995736766e-17))

## Mutable

julia&gt; @computed mutable struct MSinCos
    x::Float64
    thesincos::Tuple{Float64,Float64} = sincos(x)
end

julia&gt; sc = MSinCos(0.0)
MSinCos(0.0, (0.0, 1.0))

julia&gt; sc.x = pi/2
1.5707963267948966

julia&gt; sc.thesincos
(1.0, 6.123233995736766e-17)

# trying to set a computed field errors
julia&gt; sc.thesincos = (0.0, 0.0)
ERROR: cannot set calculated field thesincos
[...]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@computed</span> <span class="pl-k">struct</span> SinCos
    x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    thesincos<span class="pl-k">::</span><span class="pl-c1">Tuple{Float64,Float64}</span> <span class="pl-k">=</span> <span class="pl-c1">sincos</span>(x)
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> sc <span class="pl-k">=</span> <span class="pl-c1">SinCos</span>(<span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">SinCos</span>(<span class="pl-c1">1.5707963267948966</span>, (<span class="pl-c1">1.0</span>, <span class="pl-c1">6.123233995736766e-17</span>))

<span class="pl-c"><span class="pl-c">#</span># Mutable</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@computed</span> <span class="pl-k">mutable struct</span> MSinCos
    x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    thesincos<span class="pl-k">::</span><span class="pl-c1">Tuple{Float64,Float64}</span> <span class="pl-k">=</span> <span class="pl-c1">sincos</span>(x)
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> sc <span class="pl-k">=</span> <span class="pl-c1">MSinCos</span>(<span class="pl-c1">0.0</span>)
<span class="pl-c1">MSinCos</span>(<span class="pl-c1">0.0</span>, (<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>))

julia<span class="pl-k">&gt;</span> sc<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">2</span>
<span class="pl-c1">1.5707963267948966</span>

julia<span class="pl-k">&gt;</span> sc<span class="pl-k">.</span>thesincos
(<span class="pl-c1">1.0</span>, <span class="pl-c1">6.123233995736766e-17</span>)

<span class="pl-c"><span class="pl-c">#</span> trying to set a computed field errors</span>
julia<span class="pl-k">&gt;</span> sc<span class="pl-k">.</span>thesincos <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
ERROR<span class="pl-k">:</span> cannot set calculated field thesincos
[<span class="pl-k">...</span>]</pre></div>
<p dir="auto">Parametric types are supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @computed mutable struct VectorAndNorm{N,T}
           v::SVector{N,T}
           norm::T = LinearAlgebra.norm(v)
       end

julia&gt; vec_and_norm = VectorAndNorm(@SVector [1.0,2.0,3.0])
VectorAndNorm{3, Float64}([1.0, 2.0, 3.0], 3.7416573867739413)

julia&gt; vec_and_norm.norm
3.7416573867739413"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@computed</span> <span class="pl-k">mutable struct</span> VectorAndNorm{N,T}
           v<span class="pl-k">::</span><span class="pl-c1">SVector{N,T}</span>
           norm<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> LinearAlgebra<span class="pl-k">.</span><span class="pl-c1">norm</span>(v)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> vec_and_norm <span class="pl-k">=</span> <span class="pl-c1">VectorAndNorm</span>(<span class="pl-c1">@SVector</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>])
<span class="pl-c1">VectorAndNorm</span><span class="pl-c1">{3, Float64}</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>], <span class="pl-c1">3.7416573867739413</span>)

julia<span class="pl-k">&gt;</span> vec_and_norm<span class="pl-k">.</span>norm
<span class="pl-c1">3.7416573867739413</span></pre></div>
<h2 dir="auto"><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>(Current) Limitations</h2>
<ul dir="auto">
<li>
<p dir="auto">It's the user's responsibility to make sure no circular dependencies amongst fields are introduced.</p>
</li>
<li>
<p dir="auto">Computed fields must be explicitly type annotated, or they default to <code>Any</code>.</p>
</li>
<li>
<p dir="auto">Re-computations are triggered by mutating fields. Thus, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@computed mutable struct VectorMax
  v::Vector{Float64}
  max::Float64 = maximum(v)
end

vm = VectorMax([1.0,2.0,3.0])
# vm.max == 3.0
vm.v[1] = 10.0
# vm.max is _not_ 10.0 now
# call computeproperty!(vm, :max) explicitly instead."><pre><span class="pl-c1">@computed</span> <span class="pl-k">mutable struct</span> VectorMax
  v<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
  max<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(v)
<span class="pl-k">end</span>

vm <span class="pl-k">=</span> <span class="pl-c1">VectorMax</span>([<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>])
<span class="pl-c"><span class="pl-c">#</span> vm.max == 3.0</span>
vm<span class="pl-k">.</span>v[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
<span class="pl-c"><span class="pl-c">#</span> vm.max is _not_ 10.0 now</span>
<span class="pl-c"><span class="pl-c">#</span> call computeproperty!(vm, :max) explicitly instead.</span></pre></div>
<p dir="auto">does not work.</p>
</li>
<li>
<p dir="auto">Updating multiple independent fields simultaneously is not (yet) supported.</p>
</li>
<li>
<p dir="auto">Because an inner constructor is automatically defined, you cannot provide your own.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To-do</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Support immutable struct: setting an independent field returns a new instance.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Multi-update</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Propagating re-computation of dependent fields.</li>
</ul>
</article></div>