<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rationalgenerators" class="anchor" aria-hidden="true" href="#rationalgenerators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>RationalGenerators</code></h1>
<p dir="auto">This module provides iterators for creating positive rational numbers
without repetition.</p>
<ul dir="auto">
<li>Use <code>RationalGenerator(n)</code> to create all rational numbers of the form <code>a//b</code>
where <code>a</code> and <code>b</code> are relatively prime and <code>a+b ≤ n</code>.</li>
<li>Use <code>RationalGenerator()</code> to create all rational numbers.</li>
</ul>
<h2 dir="auto"><a id="user-content-order" class="anchor" aria-hidden="true" href="#order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Order</h2>
<p dir="auto">The first rational number produced is <code>1//1</code>. Then <code>1//2</code> and <code>2//1</code>. Then, for <code>n</code> equal to <code>4</code> and up, we have, in increasing order,
the rational numbers of the form <code>a//b</code> where <code>a+b = n</code> and <code>gcd(a,b) = 1</code>.</p>
<p dir="auto">This figure illustrates the order in which rational numbers are generated:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./order.png"><img src="./order.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using RationalGenerators

julia&gt; collect(RationalGenerator(5))'
1×9 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
 1//1  1//2  2//1  1//3  3//1  1//4  2//3  3//2  4//1

julia&gt; [r for r in RationalGenerator(7) if r &lt; 1]'
1×8 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
 1//2  1//3  1//4  2//3  1//5  1//6  2//5  3//4

julia&gt; sum(RationalGenerator(9))
8899//168

julia&gt; for r in RationalGenerator()
            if r &gt; 8//3
                println(r)
                break
            end
        end
3//1

julia&gt; [t for t in RationalGenerator(20) if denominator(t) == 10]
4-element Vector{Rational{Int64}}:
 1//10
 3//10
 7//10
 9//10"><pre class="notranslate"><code>julia&gt; using RationalGenerators

julia&gt; collect(RationalGenerator(5))'
1×9 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
 1//1  1//2  2//1  1//3  3//1  1//4  2//3  3//2  4//1

julia&gt; [r for r in RationalGenerator(7) if r &lt; 1]'
1×8 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
 1//2  1//3  1//4  2//3  1//5  1//6  2//5  3//4

julia&gt; sum(RationalGenerator(9))
8899//168

julia&gt; for r in RationalGenerator()
            if r &gt; 8//3
                println(r)
                break
            end
        end
3//1

julia&gt; [t for t in RationalGenerator(20) if denominator(t) == 10]
4-element Vector{Rational{Int64}}:
 1//10
 3//10
 7//10
 9//10
</code></pre></div>
<h2 dir="auto"><a id="user-content-small-rationals" class="anchor" aria-hidden="true" href="#small-rationals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Small Rationals</h2>
<p dir="auto">To generate rational numbers (without repetition) restricted to
the interval <code>(0,1]</code>, use <code>SmallRationalGenerator</code>.</p>
<ul dir="auto">
<li><code>SmallRationalGenerator(last_den)</code> generates all rationals in <code>(0,1]</code>
whose denominators are at most <code>last_den</code>.</li>
<li><code>SmallRationalGenerator()</code> generates all rationals in <code>(0,1]</code>.</li>
</ul>
<p dir="auto"><code>SmallRatGen</code> is an abbreviation for <code>SmallRationalGenerator</code>.</p>
<p dir="auto">The rationals are produced with successively larger denominators,
starting with <code>1</code>, and then successively larger numerators.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; collect(SmallRatGen(6))'
1×12 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
 1//1  1//2  1//3  2//3  1//4  3//4  1//5  2//5  3//5  4//5  1//6  5//6

julia&gt; [t for t in SmallRatGen(10) if denominator(t) == 9]
6-element Vector{Rational{Int64}}:
 1//9
 2//9
 4//9
 5//9
 7//9
 8//9"><pre class="notranslate"><code>julia&gt; collect(SmallRatGen(6))'
1×12 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
 1//1  1//2  1//3  2//3  1//4  3//4  1//5  2//5  3//5  4//5  1//6  5//6

julia&gt; [t for t in SmallRatGen(10) if denominator(t) == 9]
6-element Vector{Rational{Int64}}:
 1//9
 2//9
 4//9
 5//9
 7//9
 8//9
</code></pre></div>
<p dir="auto">To create rationals strictly between <code>0</code> and <code>1</code>, one can do this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; X = (t for t in SmallRatGen(4) if t&lt;1);

julia&gt; collect(X)'
1×5 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
1//2  1//3  2//3  1//4  3//4"><pre class="notranslate"><code>julia&gt; X = (t for t in SmallRatGen(4) if t&lt;1);

julia&gt; collect(X)'
1×5 adjoint(::Vector{Rational{Int64}}) with eltype Rational{Int64}:
1//2  1//3  2//3  1//4  3//4
</code></pre></div>
<h2 dir="auto"><a id="user-content-negative-argument" class="anchor" aria-hidden="true" href="#negative-argument"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Negative Argument</h2>
<p dir="auto">For both <code>RationalGenerator</code> and <code>SmallRationalGenerator</code>, a negative argument
creates an infinite generator.  That is, <code>RationalGenerator(-1)</code> has the same
effect as <code>RationalGenerator()</code>.</p>
</article></div>