<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-juliaparser" class="anchor" aria-hidden="true" href="#juliaparser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaParser</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaLang/JuliaParser.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/71fda20c928374b2c1ae1c6a42a2102e2f136f573396169e259b161a0ea52b8e/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614c616e672f4a756c69615061727365722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaLang/JuliaParser.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Note:</strong> This package is unmaintained and heavily bitrotted. It will not parse up to date Julia code correctly!</p>
<p dir="auto">A pure Julia port of <a href="https://github.com/JuliaLang/julia">Julia</a>'s <a href="https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm">parser</a>.  It strives to be fully compatible with Julia's built-in parser.</p>
<h2 dir="auto"><a id="user-content-differences-with-julias-built-in-parser" class="anchor" aria-hidden="true" href="#differences-with-julias-built-in-parser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Differences with Julia's built-in parser</h2>
<ul dir="auto">
<li><code>BigInt</code> and <code>Int128</code> numbers are treated as literal values instead of expressions.</li>
<li>Literal negation is done as negated literals rather than using <code>Expr(:-)</code></li>
<li><code>QuoteNode</code>s are replaced with <code>Expr(:quote)</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-using-juliaparser-as-your-primary-parser" class="anchor" aria-hidden="true" href="#using-juliaparser-as-your-primary-parser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using JuliaParser as your primary parser</h2>
<p dir="auto">JuliaParser provides a script that will replace the built-in parser by itself.
You may load it as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia -L ~/.julia/v0.5/JuliaParser/bin/repl.jl"><pre class="notranslate"><code>julia -L ~/.julia/v0.5/JuliaParser/bin/repl.jl
</code></pre></div>
<h2 dir="auto"><a id="user-content-todo-items" class="anchor" aria-hidden="true" href="#todo-items"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO items</h2>
<ul dir="auto">
<li>performance improvements</li>
<li>refactor number tokenization</li>
<li>refactor to make it more useful to use as a library (right now it is pretty monolithic)</li>
</ul>
<h2 dir="auto"><a id="user-content-trying-it-out" class="anchor" aria-hidden="true" href="#trying-it-out"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Trying it out</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.clone(&quot;JuliaParser&quot;)

julia&gt; import JuliaParser.Parser
julia&gt; import JuliaParser.Lexer

julia&gt; src = &quot;&quot;&quot;
              function test(x::Int)
                  return x ^ 2
              end
              &quot;&quot;&quot;
julia&gt; ts = Lexer.TokenStream(src);

julia&gt; Lexer.next_token(ts)
:function

julia&gt; Lexer.next_token(ts)
:test

julia&gt; Lexer.next_token(ts)
'('

julia&gt; Lexer.next_token(ts)
:x

julia&gt; Lexer.next_token(ts)
:(::)

julia&gt; Lexer.next_token(ts)
:Int

julia&gt; ast = Parser.parse(src);

julia&gt; Meta.show_sexpr(ast)
(:function, (:call, :test, (:(::), :x, :Int)), (:block,
    (:line, 2, :none),
    (:return, (:call, :^, :x, 2))
  ))

julia&gt; dump(ast)
Expr 
  head: Symbol function
  args: Array(Any,(2,))
    1: Expr 
      head: Symbol call
      args: Array(Any,(2,))
        1: Symbol test
        2: Expr 
          head: Symbol ::
          args: Array(Any,(2,))
          typ: Any
      typ: Any
    2: Expr 
      head: Symbol block
      args: Array(Any,(2,))
        1: Expr 
          head: Symbol line
          args: Array(Any,(2,))
          typ: Any
        2: Expr 
          head: Symbol return
          args: Array(Any,(1,))
          typ: Any
      typ: Any
  typ: Any"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaParser<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> JuliaParser<span class="pl-k">.</span>Parser
julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> JuliaParser<span class="pl-k">.</span>Lexer

julia<span class="pl-k">&gt;</span> src <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">              function test(x::Int)</span>
<span class="pl-s">                  return x ^ 2</span>
<span class="pl-s">              end</span>
<span class="pl-s">              <span class="pl-pds">"""</span></span>
julia<span class="pl-k">&gt;</span> ts <span class="pl-k">=</span> Lexer<span class="pl-k">.</span><span class="pl-c1">TokenStream</span>(src);

julia<span class="pl-k">&gt;</span> Lexer<span class="pl-k">.</span><span class="pl-c1">next_token</span>(ts)
<span class="pl-c1">:function</span>

julia<span class="pl-k">&gt;</span> Lexer<span class="pl-k">.</span><span class="pl-c1">next_token</span>(ts)
<span class="pl-c1">:test</span>

julia<span class="pl-k">&gt;</span> Lexer<span class="pl-k">.</span><span class="pl-c1">next_token</span>(ts)
<span class="pl-s"><span class="pl-pds">'</span>(<span class="pl-pds">'</span></span>

julia<span class="pl-k">&gt;</span> Lexer<span class="pl-k">.</span><span class="pl-c1">next_token</span>(ts)
<span class="pl-c1">:x</span>

julia<span class="pl-k">&gt;</span> Lexer<span class="pl-k">.</span><span class="pl-c1">next_token</span>(ts)
:(<span class="pl-k">::</span>)

julia<span class="pl-k">&gt;</span> Lexer<span class="pl-k">.</span><span class="pl-c1">next_token</span>(ts)
<span class="pl-c1">:Int</span>

julia<span class="pl-k">&gt;</span> ast <span class="pl-k">=</span> Parser<span class="pl-k">.</span><span class="pl-c1">parse</span>(src);

julia<span class="pl-k">&gt;</span> Meta<span class="pl-k">.</span><span class="pl-c1">show_sexpr</span>(ast)
(<span class="pl-c1">:function</span>, (<span class="pl-c1">:call</span>, <span class="pl-c1">:test</span>, (:(<span class="pl-k">::</span>), <span class="pl-c1">:x</span>, <span class="pl-c1">:Int</span>)), (<span class="pl-c1">:block</span>,
    (<span class="pl-c1">:line</span>, <span class="pl-c1">2</span>, <span class="pl-c1">:none</span>),
    (<span class="pl-c1">:return</span>, (<span class="pl-c1">:call</span>, :<span class="pl-k">^</span>, <span class="pl-c1">:x</span>, <span class="pl-c1">2</span>))
  ))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dump</span>(ast)
Expr 
  head<span class="pl-k">:</span> Symbol <span class="pl-k">function</span>
  args<span class="pl-k">:</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">2</span>,))
    <span class="pl-c1">1</span><span class="pl-k">:</span> Expr 
      head<span class="pl-k">:</span> Symbol call
      args<span class="pl-k">:</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">2</span>,))
        <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol test
        <span class="pl-c1">2</span><span class="pl-k">:</span> Expr 
          head<span class="pl-k">:</span> Symbol <span class="pl-k">::</span>
          args<span class="pl-k">:</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">2</span>,))
          typ<span class="pl-k">:</span> Any
      typ<span class="pl-k">:</span> Any
    <span class="pl-c1">2</span><span class="pl-k">:</span> Expr 
      head<span class="pl-k">:</span> Symbol block
      args<span class="pl-k">:</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">2</span>,))
        <span class="pl-c1">1</span><span class="pl-k">:</span> Expr 
          head<span class="pl-k">:</span> Symbol line
          args<span class="pl-k">:</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">2</span>,))
          typ<span class="pl-k">:</span> Any
        <span class="pl-c1">2</span><span class="pl-k">:</span> Expr 
          head<span class="pl-k">:</span> Symbol <span class="pl-k">return</span>
          args<span class="pl-k">:</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">1</span>,))
          typ<span class="pl-k">:</span> Any
      typ<span class="pl-k">:</span> Any
  typ<span class="pl-k">:</span> Any</pre></div>
</article></div>