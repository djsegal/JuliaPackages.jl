<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-logcompose" class="anchor" aria-hidden="true" href="#logcompose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LogCompose</h1>
<p><a href="https://github.com/tanmaykm/LogCompose.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/tanmaykm/LogCompose.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tanmaykm/logroller-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/8c28a25eb3a2eb4f0f6b929e1cb3b5dab5d93263c909d74e88d0ce2a89758245/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f74616e6d61796b6d2f4c6f67436f6d706f73652e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/tanmaykm/LogCompose.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tanmaykm/LogCompose.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ec2bea479279ea13e6ecadff358d3236d01c3b59dcd2d06da28dfb2614cda926/687474703a2f2f636f6465636f762e696f2f6769746875622f74616e6d61796b6d2f4c6f67436f6d706f73652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tanmaykm/LogCompose.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Provides a way to specify hierarchical logging configuration in a file.</p>
<p>Configuration file is in the form of a TOML file. Configuration sections are named,
with each section specifying a logger type and parameters needed for its construction.
Sections inherit parameter values from preceeding sections and can override them as well.
Loggers can be constructed by providing the name of a section.</p>
<p><a href="example.toml">Here</a> is what a configuration that allows logging to several types of loggers may look like.</p>
<h2><a id="user-content-plugging-in-a-logger" class="anchor" aria-hidden="true" href="#plugging-in-a-logger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plugging in a Logger</h2>
<p>Support for a logger can be added by providing an implementation of <code>LogCompose.logcompose</code> for the target logger type.
The implementation needs to be of the following form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function LogCompose.logcompose(::Type{MyLoggerType},
        config::Dict{String,Any},           # config: the entire logging configuration file
        logger_config::Dict{String,Any})    # logger_config: configuration relevant for the
                                            #      section specified to `LogCompose.logger`
                                            #      with the hierarchy flattened out
    # provides support for MyLoggerType in LogCompose
end
"><pre><span class="pl-k">function</span> LogCompose<span class="pl-k">.</span><span class="pl-en">logcompose</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyLoggerType}</span>,
        config<span class="pl-k">::</span><span class="pl-c1">Dict{String,Any}</span>,           <span class="pl-c"><span class="pl-c">#</span> config: the entire logging configuration file</span>
        logger_config<span class="pl-k">::</span><span class="pl-c1">Dict{String,Any}</span>)    <span class="pl-c"><span class="pl-c">#</span> logger_config: configuration relevant for the</span>
                                            <span class="pl-c"><span class="pl-c">#</span>      section specified to `LogCompose.logger`</span>
                                            <span class="pl-c"><span class="pl-c">#</span>      with the hierarchy flattened out</span>
    <span class="pl-c"><span class="pl-c">#</span> provides support for MyLoggerType in LogCompose</span>
<span class="pl-k">end</span></pre></div>
<p>For complete examples, refer to any of the existing implementations listed below.</p>
<h2><a id="user-content-loggers-supported" class="anchor" aria-hidden="true" href="#loggers-supported"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loggers Supported</h2>
<p>LogCompose has in-built support for the loggers provided in the stdlib logging package.
They are listed below with example configuration sections illustrating parameters they accept.</p>
<ul>
<li>Logging.SimpleLogger
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[loggers.simple]
type = &quot;Logging.SimpleLogger&quot;
# min_level = &quot;Debug&quot;             # Debug, Info (default) or Error
stream = &quot;simple.log&quot;             # file to log to
"><pre><code>[loggers.simple]
type = "Logging.SimpleLogger"
# min_level = "Debug"             # Debug, Info (default) or Error
stream = "simple.log"             # file to log to
</code></pre></div>
</li>
<li>Logging.ConsoleLogger
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[loggers.console]
type = &quot;Logging.ConsoleLogger&quot;
# min_level = &quot;Debug&quot;             # Debug, Info (default) or Error
stream = &quot;stdout&quot;                 # stdout (default), stderr or a filepath
"><pre><code>[loggers.console]
type = "Logging.ConsoleLogger"
# min_level = "Debug"             # Debug, Info (default) or Error
stream = "stdout"                 # stdout (default), stderr or a filepath
</code></pre></div>
</li>
<li>Logging.NullLogger
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[loggers.null]
type = &quot;Logging.NullLogger&quot;
"><pre><code>[loggers.null]
type = "Logging.NullLogger"
</code></pre></div>
</li>
</ul>
<p>There are external packages that provide support for a few other types of loggers as well:</p>
<ul>
<li>LoggingExtras: <a href="https://github.com/tanmaykm/LoggingExtrasCompose.jl">LoggingExtrasCompose.jl</a></li>
<li>LogRoller: <a href="https://github.com/tanmaykm/LogRollerCompose.jl">LogRollerCompose.jl</a></li>
<li>SyslogLogging: <a href="https://github.com/tanmaykm/SyslogLoggingCompose.jl">SyslogLoggingCompose.jl</a></li>
</ul>
<p>For loggers supplied by external packages, LogCompose looks for the logger implementation type
(the one mentioned in <code>type</code> configuration attribute) in the <code>Main</code> module by default. But if
your code imports the external loggers within your module instead of the Main module, then the
module name where the logger type can be found must be specified in the (otherwise optional)
<code>topmodule</code> configuration parameter. E.g.:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[loggers.rollinglog]
type = &quot;LogRoller.RollingFileLogger&quot;
topmodule = &quot;MyModule&quot;
...
"><pre><code>[loggers.rollinglog]
type = "LogRoller.RollingFileLogger"
topmodule = "MyModule"
...
</code></pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Here is an example configuration using multiple logger types, from different logging packages.</p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="[file]
type = &quot;LogRoller.RollingLogger&quot;
min_level = &quot;Info&quot;
nfiles = 5

[syslog]
type = &quot;SyslogLogging.SyslogLogger&quot;
facility = &quot;user&quot;

[file.testapp1]
filename = &quot;/tmp/testapp1.log&quot;

[file.testapp2]
filename = &quot;/tmp/testapp2.log&quot;
min_level = &quot;Debug&quot;     # overrides min_level to Debug for testapp2
nfiles = 10             # overrides nfiles to 10 for testapp2

[syslog.testapp1]
identity = &quot;testapp1&quot;
facility = &quot;daemon&quot;     # facility set to daemon instead of default user

[syslog.testapp2]
identity = &quot;testapp2&quot;

[testapp1]
type = &quot;LoggingExtras.TeeLogger&quot;
destinations = [&quot;file.testapp1&quot;, &quot;syslog.testapp1&quot;]

[testapp2]
type = &quot;LoggingExtras.TeeLogger&quot;
destinations = [&quot;file.testapp2&quot;, &quot;syslog.testapp2&quot;]
"><pre>[<span class="pl-en">file</span>]
<span class="pl-smi">type</span> = <span class="pl-s"><span class="pl-pds">"</span>LogRoller.RollingLogger<span class="pl-pds">"</span></span>
<span class="pl-smi">min_level</span> = <span class="pl-s"><span class="pl-pds">"</span>Info<span class="pl-pds">"</span></span>
<span class="pl-smi">nfiles</span> = <span class="pl-c1">5</span>

[<span class="pl-en">syslog</span>]
<span class="pl-smi">type</span> = <span class="pl-s"><span class="pl-pds">"</span>SyslogLogging.SyslogLogger<span class="pl-pds">"</span></span>
<span class="pl-smi">facility</span> = <span class="pl-s"><span class="pl-pds">"</span>user<span class="pl-pds">"</span></span>

[<span class="pl-en">file</span>.<span class="pl-en">testapp1</span>]
<span class="pl-smi">filename</span> = <span class="pl-s"><span class="pl-pds">"</span>/tmp/testapp1.log<span class="pl-pds">"</span></span>

[<span class="pl-en">file</span>.<span class="pl-en">testapp2</span>]
<span class="pl-smi">filename</span> = <span class="pl-s"><span class="pl-pds">"</span>/tmp/testapp2.log<span class="pl-pds">"</span></span>
<span class="pl-smi">min_level</span> = <span class="pl-s"><span class="pl-pds">"</span>Debug<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> overrides min_level to Debug for testapp2</span>
<span class="pl-smi">nfiles</span> = <span class="pl-c1">10</span>             <span class="pl-c"><span class="pl-c">#</span> overrides nfiles to 10 for testapp2</span>

[<span class="pl-en">syslog</span>.<span class="pl-en">testapp1</span>]
<span class="pl-smi">identity</span> = <span class="pl-s"><span class="pl-pds">"</span>testapp1<span class="pl-pds">"</span></span>
<span class="pl-smi">facility</span> = <span class="pl-s"><span class="pl-pds">"</span>daemon<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> facility set to daemon instead of default user</span>

[<span class="pl-en">syslog</span>.<span class="pl-en">testapp2</span>]
<span class="pl-smi">identity</span> = <span class="pl-s"><span class="pl-pds">"</span>testapp2<span class="pl-pds">"</span></span>

[<span class="pl-en">testapp1</span>]
<span class="pl-smi">type</span> = <span class="pl-s"><span class="pl-pds">"</span>LoggingExtras.TeeLogger<span class="pl-pds">"</span></span>
<span class="pl-smi">destinations</span> = [<span class="pl-s"><span class="pl-pds">"</span>file.testapp1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>syslog.testapp1<span class="pl-pds">"</span></span>]

[<span class="pl-en">testapp2</span>]
<span class="pl-smi">type</span> = <span class="pl-s"><span class="pl-pds">"</span>LoggingExtras.TeeLogger<span class="pl-pds">"</span></span>
<span class="pl-smi">destinations</span> = [<span class="pl-s"><span class="pl-pds">"</span>file.testapp2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>syslog.testapp2<span class="pl-pds">"</span></span>]</pre></div>
<p>And below is a snippet of Julia code that make use of this configuration:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LogCompose, Logging

julia&gt; using LogRoller, LogRollerCompose

julia&gt; using SyslogLogging, SyslogLoggingCompose

julia&gt; using LoggingExtras, LoggingExtrasCompose

julia&gt; logger1 = LogCompose.logger(&quot;testconfig.toml&quot;, &quot;testapp1&quot;);

julia&gt; typeof(logger1)
TeeLogger{Tuple{RollingLogger,SyslogLogger}}

julia&gt; logger2 = LogCompose.logger(&quot;testconfig.toml&quot;, &quot;testapp2&quot;);

julia&gt; typeof(logger2)
TeeLogger{Tuple{RollingLogger,SyslogLogger}}

julia&gt; first(logger1.loggers).stream.filename
&quot;/tmp/testapp1.log&quot;

julia&gt; first(logger2.loggers).stream.filename
&quot;/tmp/testapp2.log&quot;

julia&gt; first(logger2.loggers).stream.nfiles
10

julia&gt; with_logger(logger1) do
           @info(&quot;hello from app1&quot;)
       end

shell&gt; cat /tmp/testapp1.log
┌ Info: 2020-04-02T12:03:03.588: hello from app1
└ @ Main REPL[13]:2

julia&gt; with_logger(logger2) do
           @info(&quot;hello from app2&quot;)
       end

shell&gt; cat /tmp/testapp2.log
┌ Info: 2020-04-02T12:04:13.156: hello from app2
└ @ Main REPL[15]:2

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogCompose, Logging

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogRoller, LogRollerCompose

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SyslogLogging, SyslogLoggingCompose

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras, LoggingExtrasCompose

julia<span class="pl-k">&gt;</span> logger1 <span class="pl-k">=</span> LogCompose<span class="pl-k">.</span><span class="pl-c1">logger</span>(<span class="pl-s"><span class="pl-pds">"</span>testconfig.toml<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>testapp1<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(logger1)
TeeLogger{Tuple{RollingLogger,SyslogLogger}}

julia<span class="pl-k">&gt;</span> logger2 <span class="pl-k">=</span> LogCompose<span class="pl-k">.</span><span class="pl-c1">logger</span>(<span class="pl-s"><span class="pl-pds">"</span>testconfig.toml<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>testapp2<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(logger2)
TeeLogger{Tuple{RollingLogger,SyslogLogger}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(logger1<span class="pl-k">.</span>loggers)<span class="pl-k">.</span>stream<span class="pl-k">.</span>filename
<span class="pl-s"><span class="pl-pds">"</span>/tmp/testapp1.log<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(logger2<span class="pl-k">.</span>loggers)<span class="pl-k">.</span>stream<span class="pl-k">.</span>filename
<span class="pl-s"><span class="pl-pds">"</span>/tmp/testapp2.log<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(logger2<span class="pl-k">.</span>loggers)<span class="pl-k">.</span>stream<span class="pl-k">.</span>nfiles
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger1) <span class="pl-k">do</span>
           <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>hello from app1<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>testapp1<span class="pl-k">.</span>log
┌ Info<span class="pl-k">:</span> <span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">04</span><span class="pl-k">-</span><span class="pl-c1">02</span>T12<span class="pl-k">:</span><span class="pl-c1">03</span><span class="pl-k">:</span><span class="pl-c1">03.588</span><span class="pl-k">:</span> hello from app1
└ @ Main REPL[<span class="pl-c1">13</span>]<span class="pl-k">:</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger2) <span class="pl-k">do</span>
           <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>hello from app2<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>testapp2<span class="pl-k">.</span>log
┌ Info<span class="pl-k">:</span> <span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">04</span><span class="pl-k">-</span><span class="pl-c1">02</span>T12<span class="pl-k">:</span><span class="pl-c1">04</span><span class="pl-k">:</span><span class="pl-c1">13.156</span><span class="pl-k">:</span> hello from app2
└ @ Main REPL[<span class="pl-c1">15</span>]<span class="pl-k">:</span><span class="pl-c1">2</span>
</pre></div>
</article></div>