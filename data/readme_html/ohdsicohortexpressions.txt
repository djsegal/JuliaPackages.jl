<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ohdsicohortexpressionsjl" class="anchor" aria-hidden="true" href="#ohdsicohortexpressionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OHDSICohortExpressions.jl</h1>
<p dir="auto"><em>OHDSI Cohort Expressions is a re-implementation of OHDSI's Circe</em></p>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/237221-biology-health-and-medicine" rel="nofollow"><img src="https://camo.githubusercontent.com/79870c182a82f89b1415d1c14a5a58425743d91949f430723d2426a36da3f6c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6a756c69612d2d7a756c69702d626c7565" alt="Zulip Chat" data-canonical-src="https://img.shields.io/badge/chat-julia--zulip-blue" style="max-width: 100%;"></a>
<a href="https://github.com/MechanicalRabbit/OHDSICohortExpressions.jl/issues"><img src="https://camo.githubusercontent.com/fa8f0975088e0cb257f7a59919a83564ab981d9fe7184c4775c9c50d2318190f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4d656368616e6963616c5261626269742f4f48445349436f686f727445787072657373696f6e732e6a6c2e737667" alt="Open Issues" data-canonical-src="https://img.shields.io/github/issues/MechanicalRabbit/OHDSICohortExpressions.jl.svg" style="max-width: 100%;"></a>
<a href="https://raw.githubusercontent.com/MechanicalRabbit/OHDSICohortExpressions.jl/master/LICENSE" rel="nofollow"><img src="https://camo.githubusercontent.com/e576c9f025296cdf14ed1e2fe6f6abb73352ac5ae94b6d48d975df9233aa89bd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4170616368652d626c75652e737667" alt="Apache License" data-canonical-src="https://img.shields.io/badge/license-Apache-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a proof-of-concept implementation of a conversion from the JSON
cohort definitions used in the OHDSI ecosystem into an SQL transaction.</p>
<h3 dir="auto"><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Status</h3>
<p dir="auto">At this time, this implementation is able to convert all 797 cohorts
from PhenotypeLibrary v0.1 to generate SQL that works against Amazon
RedShift, Microsoft SQL Server, and PostgreSQL.</p>
<p dir="auto">There are significant gaps in functionality. Many expressions available
in the JSON cohort definition have yet to be translated. In these cases,
an assertion error should arise. We have yet to write documentation,
perform code review, or construct regression tests. The API is in a
provisional form and very likely to change.</p>
<h3 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h3>
<p dir="auto">Following is an example given the <code>demo/ex-10-2.json</code> cohort. This
corresponds to <a href="https://ohdsi.github.io/TheBookOfOhdsi/Cohorts.html#exr:exerciseCohortsSql" rel="nofollow">excercise 10.2</a> from the Book of OHDSI.
Supported dialects are <code>:redshift</code>, <code>:sqlserver</code>, and <code>:postgresql</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cohort = read(&quot;demo/ex-10-2.json&quot;, String)

julia&gt; using OHDSICohortExpressions: translate, Model

julia&gt; model = Model(cdm_version=v&quot;5.3.1&quot;, cdm_schema=&quot;cdm&quot;,
                     vocabulary_schema=&quot;vcb&quot;, results_schema=&quot;res&quot;,
                     target_schema=&quot;res&quot;, target_table=&quot;cohort&quot;);

julia&gt; tsql = translate(cohort, dialect=:sqlserver, model=model,
                         cohort_definition_id=1);

julia&gt; println(tsql)"><pre>julia<span class="pl-k">&gt;</span> cohort <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>demo/ex-10-2.json<span class="pl-pds">"</span></span>, String)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OHDSICohortExpressions<span class="pl-k">:</span> translate, Model

julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(cdm_version<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>5.3.1<span class="pl-pds">"</span></span>, cdm_schema<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cdm<span class="pl-pds">"</span></span>,
                     vocabulary_schema<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>vcb<span class="pl-pds">"</span></span>, results_schema<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>res<span class="pl-pds">"</span></span>,
                     target_schema<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>res<span class="pl-pds">"</span></span>, target_table<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cohort<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> tsql <span class="pl-k">=</span> <span class="pl-c1">translate</span>(cohort, dialect<span class="pl-k">=</span><span class="pl-c1">:sqlserver</span>, model<span class="pl-k">=</span>model,
                         cohort_definition_id<span class="pl-k">=</span><span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(tsql)</pre></div>
<p dir="auto">The return value, <code>tsql</code> is a SQL string with a transaction that
populates the <code>cohort</code> table for cohort definition <code>1</code>.</p>
<h3 dir="auto"><a id="user-content-usage-from-r" class="anchor" aria-hidden="true" href="#usage-from-r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage from "R"</h3>
<p dir="auto">Using <a href="https://www.rdocumentation.org/packages/JuliaCall/versions/0.17.4" rel="nofollow">JuliaCall</a> library, one could call this function from
"R". First, one must install <code>JuliaCall</code>.</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; install.packages(&quot;JuliaCall&quot;)"><pre><span class="pl-k">&gt;</span> install.packages(<span class="pl-s"><span class="pl-pds">"</span>JuliaCall<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">You could then initialize the Julia environment, and install this
library to the Julia environment.</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(&quot;JuliaCall&quot;)
&gt; julia_setup(installJulia = TRUE)
&gt; julia_install_package_if_needed(&quot;OHDSICohortExpressions&quot;)"><pre><span class="pl-k">&gt;</span> library(<span class="pl-s"><span class="pl-pds">"</span>JuliaCall<span class="pl-pds">"</span></span>)
<span class="pl-k">&gt;</span> julia_setup(<span class="pl-v">installJulia</span> <span class="pl-k">=</span> <span class="pl-c1">TRUE</span>)
<span class="pl-k">&gt;</span> julia_install_package_if_needed(<span class="pl-s"><span class="pl-pds">"</span>OHDSICohortExpressions<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Construct an "R" proxy, <code>oce</code>, to the <code>Model</code> and <code>translate</code> functions.</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; oce &lt;- julia_pkg_import(&quot;OHDSICohortExpressions&quot;,
                          func_list = c(&quot;Model&quot;, &quot;translate&quot;))"><pre><span class="pl-k">&gt;</span> <span class="pl-smi">oce</span> <span class="pl-k">&lt;-</span> julia_pkg_import(<span class="pl-s"><span class="pl-pds">"</span>OHDSICohortExpressions<span class="pl-pds">"</span></span>,
                          <span class="pl-v">func_list</span> <span class="pl-k">=</span> c(<span class="pl-s"><span class="pl-pds">"</span>Model<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>translate<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">Construct a <code>model</code> object with data model parameters.</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; model = oce$Model(cdm_version=&quot;5.3.1&quot;, cdm_schema=&quot;cdm&quot;,
                    vocabulary_schema=&quot;vcb&quot;, results_schema=&quot;res&quot;,
                    target_schema=&quot;res&quot;, target_table=&quot;cohort&quot;)"><pre><span class="pl-k">&gt;</span> <span class="pl-v">model</span> <span class="pl-k">=</span> <span class="pl-smi">oce</span><span class="pl-k">$</span>Model(<span class="pl-v">cdm_version</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>5.3.1<span class="pl-pds">"</span></span>, <span class="pl-v">cdm_schema</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cdm<span class="pl-pds">"</span></span>,
                    <span class="pl-v">vocabulary_schema</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>vcb<span class="pl-pds">"</span></span>, <span class="pl-v">results_schema</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>res<span class="pl-pds">"</span></span>,
                    <span class="pl-v">target_schema</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>res<span class="pl-pds">"</span></span>, <span class="pl-v">target_table</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cohort<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Read the <code>cohort</code> file into an R variable.</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; library(&quot;readr&quot;)
&gt; cohort &lt;- read_file(&quot;demo/ex-10-2.json&quot;)"><pre><span class="pl-k">&gt;</span> library(<span class="pl-s"><span class="pl-pds">"</span>readr<span class="pl-pds">"</span></span>)
<span class="pl-k">&gt;</span> <span class="pl-smi">cohort</span> <span class="pl-k">&lt;-</span> read_file(<span class="pl-s"><span class="pl-pds">"</span>demo/ex-10-2.json<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Translate this cohort definition into the SQL transaction.</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; tsql = oce$translate(cohort, dialect=&quot;sqlserver&quot;, model=model,
                       cohort_definition_id=1)"><pre><span class="pl-k">&gt;</span> <span class="pl-v">tsql</span> <span class="pl-k">=</span> <span class="pl-smi">oce</span><span class="pl-k">$</span>translate(<span class="pl-smi">cohort</span>, <span class="pl-v">dialect</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sqlserver<span class="pl-pds">"</span></span>, <span class="pl-v">model</span><span class="pl-k">=</span><span class="pl-smi">model</span>,
                       <span class="pl-v">cohort_definition_id</span><span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
</article></div>