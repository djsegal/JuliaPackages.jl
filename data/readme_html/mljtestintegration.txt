<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mljtestintegrationjl" class="anchor" aria-hidden="true" href="#mljtestintegrationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MLJTestIntegration.jl</h1>
<p dir="auto">Package for applying integration tests to models implementing the
<a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a> model
interface.</p>
<p dir="auto"><strong>To test implementations of the MLJ model interface, use <a href="https://github.com/JuliaAI/MLJTestInterface.jl">MLJTestInterface.jl</a>
instead.</strong></p>
<p dir="auto"><a href="https://github.com/bcgov/repomountie/blob/master/doc/lifecycle-badges.md"><img src="https://camo.githubusercontent.com/efb39371ed834c15976d5a75e03476a9474ac8bbd77768d9887d95e4a9f3cd0b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6966656379636c652d4578706572696d656e74616c2d333339393939" alt="Lifecycle:Experimental" data-canonical-src="https://img.shields.io/badge/Lifecycle-Experimental-339999" style="max-width: 100%;"></a> <a href="https://github.com/JuliaAI/MLJTestIntegration.jl/actions"><img src="https://github.com/JuliaAI/MLJTestIntegration.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/github/JuliaAI/MLJTestIntegration.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7ba114af26bdfa907f40a45ef3c654f16fdefd18c49dd3636b2f674629a4cb81/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696141492f4d4c4a54657374496e746567726174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaAI/MLJTestIntegration.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;MLJTestIntegration&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MLJTestIntegration<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">This package provides a method for testing a collection of <code>models</code>
(types or named tuples with keys <code>:name</code> and <code>:package_name</code>) using
the specified training <code>data</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MLJTestIntegration.test(models, data...; mod=Main, level=2, throw=false, verbosity=1) 
    -&gt; failures, summary"><pre>MLJTestIntegration<span class="pl-k">.</span><span class="pl-c1">test</span>(models, data<span class="pl-k">...</span>; mod<span class="pl-k">=</span>Main, level<span class="pl-k">=</span><span class="pl-c1">2</span>, throw<span class="pl-k">=</span><span class="pl-c1">false</span>, verbosity<span class="pl-k">=</span><span class="pl-c1">1</span>) 
    <span class="pl-k">-&gt;</span> failures, summary</pre></div>
<p dir="auto">For detailed documentation, run <code>using MLJTestIntegration; @doc MLJTestIntegration.test</code>.</p>
<p dir="auto">For convenience, a number of specializations of this method are also provided:</p>
<ul dir="auto">
<li><code>test_single_target_classifiers</code></li>
<li><code>test_single_target_regressors</code></li>
<li><code>test_single_target_count_regressors</code></li>
<li><code>test_continuous_table_transformers</code></li>
</ul>
<p dir="auto">Query the document strings for details, or see
<a href="examples/bigtest/notebook.jl">examples/bigtest/notebook.jl</a>.</p>
<h1 dir="auto"><a id="user-content-example-testing-models-filtered-from-the-mlj-model-registry" class="anchor" aria-hidden="true" href="#example-testing-models-filtered-from-the-mlj-model-registry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Testing models filtered from the MLJ model registry</h1>
<p dir="auto">The following applies comprehensive integration tests to all
regressors provided by the package GLM.jl appearing in the MLJ Model
Registry. Since GLM.jl models are provided through the interface
package <code>MLJGLMInterface</code>, this must be in the current environment:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;MLJGLMInterface&quot;)
import MLJBase, MLJTestIntegration
using DataFrames # to view summary
X, y = MLJTestIntegration.MLJ.make_regression();
regressors = MLJTestIntegration.MLJ.models(matching(X, y)) do m
    m.package_name == &quot;GLM&quot;
end

# to test code loading:
failures, summary = 
    MLJTestIntegration.test(regressors, X, y, verbosity=2, mod=@__MODULE__, level=1)
@assert isempty(failures)

# comprehensive tests:
failures, summary =
    MLJTestIntegration.test(regressors, X, y, verbosity=2, mod=@__MODULE__, level=4)

summary |&gt; DataFrame"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MLJGLMInterface<span class="pl-pds">"</span></span>)
<span class="pl-k">import</span> MLJBase, MLJTestIntegration
<span class="pl-k">using</span> DataFrames <span class="pl-c"><span class="pl-c">#</span> to view summary</span>
X, y <span class="pl-k">=</span> MLJTestIntegration<span class="pl-k">.</span>MLJ<span class="pl-k">.</span><span class="pl-c1">make_regression</span>();
regressors <span class="pl-k">=</span> MLJTestIntegration<span class="pl-k">.</span>MLJ<span class="pl-k">.</span><span class="pl-c1">models</span>(<span class="pl-c1">matching</span>(X, y)) <span class="pl-k">do</span> m
    m<span class="pl-k">.</span>package_name <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>GLM<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> to test code loading:</span>
failures, summary <span class="pl-k">=</span> 
    MLJTestIntegration<span class="pl-k">.</span><span class="pl-c1">test</span>(regressors, X, y, verbosity<span class="pl-k">=</span><span class="pl-c1">2</span>, mod<span class="pl-k">=</span><span class="pl-c1">@__MODULE__</span>, level<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">isempty</span>(failures)

<span class="pl-c"><span class="pl-c">#</span> comprehensive tests:</span>
failures, summary <span class="pl-k">=</span>
    MLJTestIntegration<span class="pl-k">.</span><span class="pl-c1">test</span>(regressors, X, y, verbosity<span class="pl-k">=</span><span class="pl-c1">2</span>, mod<span class="pl-k">=</span><span class="pl-c1">@__MODULE__</span>, level<span class="pl-k">=</span><span class="pl-c1">4</span>)

summary <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<h1 dir="auto"><a id="user-content-datasets" class="anchor" aria-hidden="true" href="#datasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Datasets</h1>
<p dir="auto">The following commands generate datasets of the form <code>(X, y)</code> suitable for integration
tests:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>MLJTestIntegration.make_binary</code></p>
</li>
<li>
<p dir="auto"><code>MLJTestIntegration.make_multiclass</code></p>
</li>
<li>
<p dir="auto"><code>MLJTestIntegration.make_regression</code></p>
</li>
<li>
<p dir="auto"><code>MLJTestIntegration.make_count</code></p>
</li>
</ul>
</article></div>