<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-integralarrays" class="anchor" aria-hidden="true" href="#integralarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IntegralArrays</h1>
<p dir="auto">Julia Implementation of Integral Arrays</p>
<p dir="auto"><a href="https://github.com/JuliaImages/IntegralArrays.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaImages/IntegralArrays.jl/actions/workflows/CI.yml/badge.svg" alt="Build status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/JuliaImages/IntegralArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/75a2550764b9371483acde245a7047ec50ac9cb48b59d914a42ac3c350d5d2de/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961496d616765732f496e74656772616c4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d6f507a38664a766a4450" alt="Coverage status" data-canonical-src="https://codecov.io/gh/JuliaImages/IntegralArrays.jl/branch/master/graph/badge.svg?token=oPz8fJvjDP" style="max-width: 100%;"></a></p>
<p dir="auto">IntegralArrays are useful for summing arrays over rectangular regions. Once created, the sum of an arbitrarily-large rectangular region
can be computed in <code>O(2^d)</code> adds, where <code>d</code> is the dimensionality.</p>
<p dir="auto">Demo:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using IntegralArrays, IntervalSets

julia&gt; A = [1 2 3 4 5;
            10 20 30 40 50;
            100 200 300 400 500]
3×5 Matrix{Int64}:
   1    2    3    4    5
  10   20   30   40   50
 100  200  300  400  500

julia&gt; Ai = IntegralArray(A)
3×5 IntegralArray{Int64, 2, Matrix{Int64}}:
   1    3    6    10    15
  11   33   66   110   165
 111  333  666  1110  1665

julia&gt; sum(A[1:2, 1:2]) == Ai[2, 2]
true

julia&gt; sum(A[1:3, 2:4]) == Ai[1..3, 2..4] 
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IntegralArrays, IntervalSets

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>;
            <span class="pl-c1">10</span> <span class="pl-c1">20</span> <span class="pl-c1">30</span> <span class="pl-c1">40</span> <span class="pl-c1">50</span>;
            <span class="pl-c1">100</span> <span class="pl-c1">200</span> <span class="pl-c1">300</span> <span class="pl-c1">400</span> <span class="pl-c1">500</span>]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Int64}<span class="pl-k">:</span>
   <span class="pl-c1">1</span>    <span class="pl-c1">2</span>    <span class="pl-c1">3</span>    <span class="pl-c1">4</span>    <span class="pl-c1">5</span>
  <span class="pl-c1">10</span>   <span class="pl-c1">20</span>   <span class="pl-c1">30</span>   <span class="pl-c1">40</span>   <span class="pl-c1">50</span>
 <span class="pl-c1">100</span>  <span class="pl-c1">200</span>  <span class="pl-c1">300</span>  <span class="pl-c1">400</span>  <span class="pl-c1">500</span>

julia<span class="pl-k">&gt;</span> Ai <span class="pl-k">=</span> <span class="pl-c1">IntegralArray</span>(A)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> IntegralArray{Int64, <span class="pl-c1">2</span>, Matrix{Int64}}<span class="pl-k">:</span>
   <span class="pl-c1">1</span>    <span class="pl-c1">3</span>    <span class="pl-c1">6</span>    <span class="pl-c1">10</span>    <span class="pl-c1">15</span>
  <span class="pl-c1">11</span>   <span class="pl-c1">33</span>   <span class="pl-c1">66</span>   <span class="pl-c1">110</span>   <span class="pl-c1">165</span>
 <span class="pl-c1">111</span>  <span class="pl-c1">333</span>  <span class="pl-c1">666</span>  <span class="pl-c1">1110</span>  <span class="pl-c1">1665</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(A[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]) <span class="pl-k">==</span> Ai[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(A[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>]) <span class="pl-k">==</span> Ai[<span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">3</span>, <span class="pl-c1">2</span><span class="pl-k">..</span><span class="pl-c1">4</span>] 
<span class="pl-c1">true</span></pre></div>
<p dir="auto">When one needs to compute the sum/average of all blocks extracted from an image, pre-building
the integral array usually provides a more efficient computation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools, IntegralArrays

# simplified 3x3 mean filter; only for demo purpose
function mean_filter_naive!(out, X)
    Δ = CartesianIndex(1, 1)
    for i in CartesianIndex(2, 2):CartesianIndex(size(X).-1)
        block = @view X[i-Δ: i+Δ]
        out[i] = mean(block)
    end
    return out
end
function mean_filter_integral!(out, X)
    iX = IntegralArray(X)
    for i in CartesianIndex(2, 2):CartesianIndex(size(X).-1)
        x, y = i.I
        out[i] = iX[x±1, y±1]/9
    end
    return out
end

X = Float32.(rand(1:5, 64, 64));
m1 = copy(X);
m2 = copy(X);

@btime mean_filter_naive!($m1, $X); # 65.078 μs (0 allocations: 0 bytes)
@btime mean_filter_integral!($m2, $X); # 12.161 μs (4 allocations: 16.17 KiB)
m1 == m2 # true"><pre><span class="pl-k">using</span> BenchmarkTools, IntegralArrays

<span class="pl-c"><span class="pl-c">#</span> simplified 3x3 mean filter; only for demo purpose</span>
<span class="pl-k">function</span> <span class="pl-en">mean_filter_naive!</span>(out, X)
    Δ <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)<span class="pl-k">:</span><span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">size</span>(X)<span class="pl-k">.-</span><span class="pl-c1">1</span>)
        block <span class="pl-k">=</span> <span class="pl-c1">@view</span> X[i<span class="pl-k">-</span>Δ: i<span class="pl-k">+</span>Δ]
        out[i] <span class="pl-k">=</span> <span class="pl-c1">mean</span>(block)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> out
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">mean_filter_integral!</span>(out, X)
    iX <span class="pl-k">=</span> <span class="pl-c1">IntegralArray</span>(X)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)<span class="pl-k">:</span><span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">size</span>(X)<span class="pl-k">.-</span><span class="pl-c1">1</span>)
        x, y <span class="pl-k">=</span> i<span class="pl-k">.</span>I
        out[i] <span class="pl-k">=</span> iX[x±<span class="pl-c1">1</span>, y±<span class="pl-c1">1</span>]<span class="pl-k">/</span><span class="pl-c1">9</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> out
<span class="pl-k">end</span>

X <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">64</span>, <span class="pl-c1">64</span>));
m1 <span class="pl-k">=</span> <span class="pl-c1">copy</span>(X);
m2 <span class="pl-k">=</span> <span class="pl-c1">copy</span>(X);

<span class="pl-c1">@btime</span> <span class="pl-c1">mean_filter_naive!</span>(<span class="pl-k">$</span>m1, <span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> 65.078 μs (0 allocations: 0 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">mean_filter_integral!</span>(<span class="pl-k">$</span>m2, <span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> 12.161 μs (4 allocations: 16.17 KiB)</span>
m1 <span class="pl-k">==</span> m2 <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
</article></div>