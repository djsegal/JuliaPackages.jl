<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-integralarrays" class="anchor" aria-hidden="true" href="#integralarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IntegralArrays</h1>
<p>Julia Implementation of Integral Arrays</p>
<p><a href="https://github.com/JuliaImages/IntegralArrays.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaImages/IntegralArrays.jl/actions/workflows/CI.yml/badge.svg" alt="Build status" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/JuliaImages/IntegralArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/75a2550764b9371483acde245a7047ec50ac9cb48b59d914a42ac3c350d5d2de/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961496d616765732f496e74656772616c4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d6f507a38664a766a4450" alt="Coverage status" data-canonical-src="https://codecov.io/gh/JuliaImages/IntegralArrays.jl/branch/master/graph/badge.svg?token=oPz8fJvjDP" style="max-width:100%;"></a></p>
<p>IntegralArrays are useful for summing arrays over rectangular regions. Once created, the sum of an arbitrarily-large rectangular region
can be computed in <code>O(2^d)</code> adds, where <code>d</code> is the dimensionality.</p>
<p>Demo:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using IntegralArrays, IntervalSets

julia&gt; A = [1 2 3 4 5;
            10 20 30 40 50;
            100 200 300 400 500]
3×5 Matrix{Int64}:
   1    2    3    4    5
  10   20   30   40   50
 100  200  300  400  500

julia&gt; Ai = IntegralArray(A)
3×5 IntegralArray{Int64, 2, Matrix{Int64}}:
   1    3    6    10    15
  11   33   66   110   165
 111  333  666  1110  1665

julia&gt; sum(A[1:2, 1:2])
33

julia&gt; Ai[1..2, 1..2]
33

julia&gt; Ai[1..3, 2..4]
999

julia&gt; sum(A[1:3, 2:4])
999
"><pre><code>julia&gt; using IntegralArrays, IntervalSets

julia&gt; A = [1 2 3 4 5;
            10 20 30 40 50;
            100 200 300 400 500]
3×5 Matrix{Int64}:
   1    2    3    4    5
  10   20   30   40   50
 100  200  300  400  500

julia&gt; Ai = IntegralArray(A)
3×5 IntegralArray{Int64, 2, Matrix{Int64}}:
   1    3    6    10    15
  11   33   66   110   165
 111  333  666  1110  1665

julia&gt; sum(A[1:2, 1:2])
33

julia&gt; Ai[1..2, 1..2]
33

julia&gt; Ai[1..3, 2..4]
999

julia&gt; sum(A[1:3, 2:4])
999
</code></pre></div>
</article></div>