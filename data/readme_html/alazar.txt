<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.org/PainterQubits/Alazar.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4860d0d379c4ffafaa0127f320f1db2c2f578038f1fd7db7e56b56839542aaf/68747470733a2f2f7472617669732d63692e6f72672f5061696e7465725175626974732f416c617a61722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/PainterQubits/Alazar.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/PainterQubits/Alazar.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/106d513235165ca4d03f9458b2e6848e9d68961f205f1e0429c80820f7275024/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f5061696e7465725175626974732f416c617a61722e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/PainterQubits/Alazar.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/PainterQubits/Alazar.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a19e196d9ac7e830c53afd808e10679a18050e4646977c68cdca1a1ab4ec2a5e/687474703a2f2f636f6465636f762e696f2f6769746875622f5061696e7465725175626974732f416c617a61722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/PainterQubits/Alazar.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-alazarjl" class="anchor" aria-hidden="true" href="#alazarjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alazar.jl</h1>
<p dir="auto"><a href="http://www.alazartech.com" rel="nofollow">AlazarTech</a> API wrapper for Julia, bare bones.</p>
<p dir="auto">Adapted from the C and Python APIs by Andrew Keller (<a href="mailto:andrew.keller.09@gmail.com">andrew.keller.09@gmail.com</a>)</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/PainterQubits/Alazar.jl.git&quot;)
using Alazar"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/PainterQubits/Alazar.jl.git<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> Alazar</pre></div>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">This module provides a thin wrapper on top of the AlazarTech C API. Nearly all the exported
methods directly map to underlying C functions. Please see the ATS-SDK Guide for detailed
specification of these functions. It is up to the user to provide error handling.</p>
<p dir="auto"><code>alazaropen()</code>, which loads the shared libraries, must be called once and only once after
loading this package. When using multiple Julia worker processes, do not call it from
workers or undefined behavior may occur. No manual cleanup is necessary upon exiting Julia.</p>
<h2 dir="auto"><a id="user-content-types-introduced" class="anchor" aria-hidden="true" href="#types-introduced"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types introduced</h2>
<h3 dir="auto"><a id="user-content-dmabufferarray" class="anchor" aria-hidden="true" href="#dmabufferarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DMABufferArray</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    struct DMABufferVector{S,T} &lt;: AbstractVector{S}"><pre class="notranslate"><code>    struct DMABufferVector{S,T} &lt;: AbstractVector{S}
</code></pre></div>
<p dir="auto">AlazarTech digitizers use direct memory access (DMA) to transfer data from digitizers to
the computer's main memory. This struct abstracts memory buffers on the host. The elements
of a <code>DMABufferVector</code> are pointers to the individual buffers, which are each page-aligned,
since a page-aligned backing array is required (e.g. <code>Base.SharedVector</code> or
<code>Alazar.PageAlignedVector</code>). In keeping with convention for <code>AbstractVector{S}</code>, we have
<code>eltype(::DMABufferVector{S}) = S</code>. We also have <code>S = Ptr{eltype(T)}</code>.</p>
<p dir="auto"><code>DMABufferVector</code> may be constructed as, for example,
<code>DMABufferVector(SharedVector{UInt8}, bytes_buf, n_buf)</code> or
<code>DMABufferVector(Alazar.PageAlignedVector{UInt8}, bytes_buf, n_buf)</code>.</p>
<p dir="auto">The fields of a <code>DMABufferVector{S,T}</code> are:</p>
<ul dir="auto">
<li><code>bytes_buf::Int</code>: The number of bytes per buffer. If there is more than one buffer it
should be a multiple of Base.Mmap.PAGESIZE. This is enforced in the inner constructor.</li>
<li><code>n_buf::Int</code>: The number of buffers to allocate.</li>
<li><code>backing::T</code>: The page-aligned backing array.</li>
</ul>
<p dir="auto">This code may not support 32-bit systems.</p>
<h3 dir="auto"><a id="user-content-pagealignedarray" class="anchor" aria-hidden="true" href="#pagealignedarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PageAlignedArray</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    mutable struct PageAlignedArray{T,N} &lt;: AbstractArray{T,N}"><pre class="notranslate"><code>    mutable struct PageAlignedArray{T,N} &lt;: AbstractArray{T,N}
</code></pre></div>
<p dir="auto">An <code>N</code>-dimensional array of eltype <code>T</code> which is guaranteed to have its memory be
page-aligned. This has to be a mutable struct because finalizers are used to clean up the
memory allocated by C calls when there remain no references to the PageAlignedArray object
in Julia.</p>
<h3 dir="auto"><a id="user-content-type-aliases" class="anchor" aria-hidden="true" href="#type-aliases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Type aliases</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>PageAlignedVector{T} = PageAlignedArray{T,1}</code>.</p>
</li>
<li>
<p dir="auto"><code>U32</code>, <code>U16</code>, <code>U8</code>, <code>S32</code>, <code>S16</code> are aliased to their respective unsigned and signed
N-bit C types.</p>
</li>
<li>
<p dir="auto"><code>dsp_module_handle = Ptr{Void}</code>.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-alazarbits" class="anchor" aria-hidden="true" href="#alazarbits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AlazarBits</h3>
<ul dir="auto">
<li><code>Alazar8Bit</code>, <code>Alazar12Bit</code>, <code>Alazar16Bit</code>. These encapsulate 8-bit, 12-bit, and 16-bit
unsigned integers in the Alazar format. They have very little overhead being declared
immutable, but have the advantage that 12-bit and 16-bit formats are distinguishable by
type.</li>
</ul>
<h3 dir="auto"><a id="user-content-alazarfftoutputformat" class="anchor" aria-hidden="true" href="#alazarfftoutputformat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AlazarFFTOutputFormat</h3>
<ul dir="auto">
<li><code>U16Log</code>, <code>U16Amp2</code>, <code>U8Log</code>, <code>U8Amp2</code>, <code>S32Real</code>, <code>S32Imag</code>, <code>FloatLog</code>, <code>FloatAmp2</code>.
Similar strategy as for <code>AlazarBits</code> types. Permits efficient encoding of FFT output data
while distinguishing between e.g. <code>S32Real</code> and <code>S32Imag</code>.</li>
</ul>
</article></div>