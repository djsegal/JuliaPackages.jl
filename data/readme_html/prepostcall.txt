<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-prepostcall" class="anchor" aria-hidden="true" href="#prepostcall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrePostCall</h1>
<p dir="auto">PrePostCall is a package which offers an intuitive syntax for making preceding and subsequent function calls to other functions using macros.</p>
<p dir="auto"><a href="https://travis-ci.org/sebastianpech/PrePostCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a6537ceb412345e56994312c9c84a92bf89e1c50217f9f3cfe46b18bc5b346f/68747470733a2f2f7472617669732d63692e6f72672f73656261737469616e706563682f507265506f737443616c6c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sebastianpech/PrePostCall.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/sebastianpech/PrePostCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f48b3c25e18d7066e97c6f119f846c37f535a3e5fc2fcd58a49ebde294a205d2/68747470733a2f2f636f6465636f762e696f2f67682f73656261737469616e706563682f507265506f737443616c6c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/sebastianpech/PrePostCall.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/sebastianpech/PrePostCall.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5578f713731b4fe7c456f5c066568b3052a5d28ac2bae70995ef6054a1afb02e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73656261737469616e706563682f507265506f737443616c6c2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sebastianpech/PrePostCall.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Example</h3>
<p dir="auto">Here is a very simple example showing how to define a macro with PrePostCall which checks that</p>
<ul dir="auto">
<li>all passed arguments to a function are positive and</li>
<li>the return value of a function is not <code>Inf</code></li>
</ul>
<p dir="auto">Pre and post calls can be defined with <code>@pre</code> and <code>@post</code> respectively.
So first the new macros are defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@pre positive(x::Number) = x&lt;0 &amp;&amp; error(&quot;Passed values must be positive!&quot;)
@post notInf(x::Number) = isinf(x) &amp;&amp; error(&quot;The return value is Inf&quot;)"><pre><span class="pl-c1">@pre</span> <span class="pl-en">positive</span>(x<span class="pl-k">::</span><span class="pl-c1">Number</span>) <span class="pl-k">=</span> x<span class="pl-k">&lt;</span><span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Passed values must be positive!<span class="pl-pds">"</span></span>)
<span class="pl-c1">@post</span> <span class="pl-en">notInf</span>(x<span class="pl-k">::</span><span class="pl-c1">Number</span>) <span class="pl-k">=</span> <span class="pl-c1">isinf</span>(x) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>The return value is Inf<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Now both macros <code>@positive</code> and <code>@notInf</code> can be applied to another function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@notInf @positive x y z function foo(x,y,z)
    (x+y)/z
end"><pre><span class="pl-c1">@notInf</span> <span class="pl-c1">@positive</span> x y z <span class="pl-k">function</span> <span class="pl-en">foo</span>(x,y,z)
    (x<span class="pl-k">+</span>y)<span class="pl-k">/</span>z
<span class="pl-k">end</span></pre></div>
<p dir="auto">Calls to <code>foo</code> with various arguments now result in the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; foo(1,2,3)
1.0

julia&gt; foo(1,-2,3)
ERROR: Passed values must be positive!

julia&gt; foo(1,2,0)
ERROR: The return value is Inf"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
ERROR<span class="pl-k">:</span> Passed values must be positive!

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>)
ERROR<span class="pl-k">:</span> The <span class="pl-k">return</span> value is <span class="pl-c1">Inf</span></pre></div>
<h3 dir="auto"><a id="user-content-example-with-a-mutable-struct" class="anchor" aria-hidden="true" href="#example-with-a-mutable-struct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example with a mutable struct</h3>
<p dir="auto">In the following toy example you have a <code>mutable struct</code> where one field can either be an <code>Int</code> or <code>nothing</code>.
A function that is called with this <code>mutable struct</code> should only be usable if the field is <strong>not</strong> <code>nothing</code>.
Another function that is called with this <code>mutable struct</code> should only be usable if the field is <strong>not</strong> <code>nothing</code> and <strong>at least</strong> has a value of <code>3</code>.
(This example is minimized to illustrated the usage of PrePostCall.)</p>
<p dir="auto">First define the struct:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct Bar
    val::Union{Int,Nothing}
end"><pre><span class="pl-k">mutable struct</span> Bar
    val<span class="pl-k">::</span><span class="pl-c1">Union{Int,Nothing}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Then define the check functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@pre alive(b::Bar) = b.val == nothing &amp;&amp; error(&quot;Bar must not be nothing&quot;)
@pre large(b::Bar) = b.val &lt; 3 &amp;&amp; error(&quot;The value of bar must be &gt;= 3&quot;)"><pre><span class="pl-c1">@pre</span> <span class="pl-en">alive</span>(b<span class="pl-k">::</span><span class="pl-c1">Bar</span>) <span class="pl-k">=</span> b<span class="pl-k">.</span>val <span class="pl-k">==</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Bar must not be nothing<span class="pl-pds">"</span></span>)
<span class="pl-c1">@pre</span> <span class="pl-en">large</span>(b<span class="pl-k">::</span><span class="pl-c1">Bar</span>) <span class="pl-k">=</span> b<span class="pl-k">.</span>val <span class="pl-k">&lt;</span> <span class="pl-c1">3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>The value of bar must be &gt;= 3<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The actual functions used on the <code>mutable type</code> can now be created with a clear, dense and easily readable definition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@alive addOne(b::Bar) = b.val += 1
@alive @large addTen(b::Bar) = b.val += 10"><pre><span class="pl-c1">@alive</span> <span class="pl-en">addOne</span>(b<span class="pl-k">::</span><span class="pl-c1">Bar</span>) <span class="pl-k">=</span> b<span class="pl-k">.</span>val <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-c1">@alive</span> <span class="pl-c1">@large</span> <span class="pl-en">addTen</span>(b<span class="pl-k">::</span><span class="pl-c1">Bar</span>) <span class="pl-k">=</span> b<span class="pl-k">.</span>val <span class="pl-k">+=</span> <span class="pl-c1">10</span></pre></div>
<p dir="auto">If no variable names are given for the newly created macros, the variables checked are assumed to have the same name as the ones used on the <code>@pre</code> (or <code>@post</code>) definitions.</p>
<p dir="auto">Calls to the defined function with various <code>Bar</code>-types now result in the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = Bar(1)
Bar(1)

julia&gt; addOne(a)
2

julia&gt; a.val = nothing

julia&gt; addOne(a)
ERROR: Bar must not be nothing

julia&gt; b = Bar(1)
Bar(1)

julia&gt; addTen(b)
ERROR: The value of bar must be &gt;= 3

julia&gt; addOne(b)
2

julia&gt; addOne(b)
3

julia&gt; addTen(b)
13

julia&gt; b.val = nothing

julia&gt; addTen(b)
ERROR: Bar must not be nothing"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Bar</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">Bar</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addOne</span>(a)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> a<span class="pl-k">.</span>val <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addOne</span>(a)
ERROR<span class="pl-k">:</span> Bar must not be <span class="pl-c1">nothing</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Bar</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">Bar</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addTen</span>(b)
ERROR<span class="pl-k">:</span> The value of bar must be <span class="pl-k">&gt;=</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addOne</span>(b)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addOne</span>(b)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addTen</span>(b)
<span class="pl-c1">13</span>

julia<span class="pl-k">&gt;</span> b<span class="pl-k">.</span>val <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addTen</span>(b)
ERROR<span class="pl-k">:</span> Bar must not be <span class="pl-c1">nothing</span></pre></div>
</article></div>