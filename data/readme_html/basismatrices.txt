<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-basismatrices" class="anchor" aria-hidden="true" href="#basismatrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BasisMatrices</h1>
<p><a href="https://travis-ci.org/QuantEcon/BasisMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/167b3f112e17e4a16f6568872dc525d27e669793/68747470733a2f2f7472617669732d63692e6f72672f5175616e7445636f6e2f42617369734d617472696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/QuantEcon/BasisMatrices.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/QuantEcon/BasisMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/82bfed301ab136d15924b7e5968cb12475138dd6/687474703a2f2f636f6465636f762e696f2f6769746875622f5175616e7445636f6e2f42617369734d617472696365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/QuantEcon/BasisMatrices.jl/coverage.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/QuantEcon/BasisMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a3c7b220e9fe6250373d9c544aad6dce090cfaaa/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f5175616e7445636f6e2f42617369734d617472696365732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/QuantEcon/BasisMatrices.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>Portions of this library are inspired by the <a href="http://www4.ncsu.edu/~pfackler/compecon/toolbox.html" rel="nofollow">CompEcon Matlab toolbox</a> by Paul Fackler and Mario Miranda. The original Matlab code was written to accompany the publication</p>
<blockquote>
<p>Miranda, Mario J., and Paul L. Fackler. Applied computational economics and finance. MIT press, 2004.</p>
</blockquote>
<p>The portions of this package that are based on their code have been licensed with their permission.</p>
<h2><a id="user-content-quick-and-incomplete-intro" class="anchor" aria-hidden="true" href="#quick-and-incomplete-intro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick (and incomplete intro)</h2>
<h3><a id="user-content-matlab-esque-interface" class="anchor" aria-hidden="true" href="#matlab-esque-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Matlab-esque interface</h3>
<p>For an API similar to the original <a href="http://www4.ncsu.edu/~pfackler/compecon/toolbox.html" rel="nofollow">CompEcon Matlab package</a> by Miranda and Fackler, please see the <a href="https://github.com/QuantEcon/CompEcon.jl">CompEcon.jl</a> package.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>Here's an example of how to use the Julia-based API to set up multi-dimensional basis matrix and work with it.</p>
<div class="highlight highlight-source-julia"><pre>ygrid0 <span class="pl-k">=</span> <span class="pl-c1">linspace</span>(<span class="pl-k">-</span><span class="pl-c1">4</span>, <span class="pl-c1">4</span>, <span class="pl-c1">10</span>)
agrid0 <span class="pl-k">=</span> <span class="pl-c1">linspace</span>(<span class="pl-c1">0.0</span><span class="pl-k">.^</span><span class="pl-c1">0.4</span>, <span class="pl-c1">100.0</span><span class="pl-k">.^</span><span class="pl-c1">0.4</span>, <span class="pl-c1">25</span>)<span class="pl-k">.^</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0.4</span>)

<span class="pl-c"><span class="pl-c">#</span> method one, using the Basis constructor multiple times</span>
basis <span class="pl-k">=</span> <span class="pl-c1">Basis</span>(<span class="pl-c1">SplineParams</span>(agrid0, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>),  <span class="pl-c"><span class="pl-c">#</span> cubic spline</span>
              <span class="pl-c1">SplineParams</span>(ygrid0, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>))  <span class="pl-c"><span class="pl-c">#</span> linear</span>

<span class="pl-c"><span class="pl-c">#</span> method two, constructing separately, then calling `Basis` with the two</span>
a_basis <span class="pl-k">=</span> <span class="pl-c1">Basis</span>(<span class="pl-c1">SplineParams</span>(agrid0, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
y_basis <span class="pl-k">=</span> <span class="pl-c1">Basis</span>(<span class="pl-c1">SplineParams</span>(ygrid0, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>))
basis <span class="pl-k">=</span> <span class="pl-c1">Basis</span>(a_basis, y_basis)

<span class="pl-c"><span class="pl-c">#</span> Construct state vector (matrix). Note that for higher order splines points</span>
<span class="pl-c"><span class="pl-c">#</span> are added to the input vector, so let's extract the actual grid points used</span>
<span class="pl-c"><span class="pl-c">#</span> from the second argument</span>
S, (agrid, ygrid) <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(basis)

<span class="pl-c"><span class="pl-c">#</span> construct basis matrix and its lu-factorization for very fast inversion</span>
<span class="pl-c"><span class="pl-c">#</span> NOTE: I am doing this in a round-about way. I could have just done</span>
<span class="pl-c"><span class="pl-c">#</span>       Φ = BasisMatrix(basis), but doing it this way gives me the direct</span>
<span class="pl-c"><span class="pl-c">#</span>       representation so I get Φ_y without repeating any calculations</span>
Φ_direct <span class="pl-k">=</span> <span class="pl-c1">BasisMatrix</span>(basis, <span class="pl-c1">Direct</span>(), S, [<span class="pl-c1">0</span> <span class="pl-c1">0</span>])
Φ_y <span class="pl-k">=</span> Φ_direct<span class="pl-k">.</span>vals[<span class="pl-c1">2</span>]
Φ <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Expanded, Φ_direct, [<span class="pl-c1">0</span> <span class="pl-c1">0</span>])<span class="pl-k">.</span>vals[<span class="pl-c1">1</span>]
lu_Φ <span class="pl-k">=</span> <span class="pl-c1">lufact</span>(Φ)</pre></div>
<h2><a id="user-content-basic-overview-of-julian-api" class="anchor" aria-hidden="true" href="#basic-overview-of-julian-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Overview of Julian API</h2>
<p>This section provides a sketch of the type based Julian API.</p>
<h3><a id="user-content-theoretical-foundation" class="anchor" aria-hidden="true" href="#theoretical-foundation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Theoretical Foundation</h3>
<p>To understand the Julian API and type system, we first need to understand the fundamental theory behind the interpolation scheme implemented here. Interpolation in BasisMatrices is built around three key concepts:</p>
<ol>
<li>An functional <code>Basis</code>: for each dimension, the basis specifies
<ul>
<li>family of basis function (B spline, Chebyshev polynomials, ect.)</li>
<li>domain (bounds)</li>
<li>interpolation nodes (grid on domain)</li>
</ul>
</li>
<li>A <code>BasisMatrix</code>:
<ul>
<li>Represents the evaluation of basis functions at the interpolation nodes</li>
<li>Constructed one dimension at a time, then combined with tensor product</li>
</ul>
</li>
<li>A coefficient vector: used to map from domain of the <code>Basis</code> into real line</li>
</ol>
<h3><a id="user-content-core-types" class="anchor" aria-hidden="true" href="#core-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Core types</h3>
<p>Functionality implemented around 5 core types (or type families) that relate closely to the theoretical concepts outlined above.</p>
<h4><a id="user-content-representing-the-basis" class="anchor" aria-hidden="true" href="#representing-the-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Representing the <code>Basis</code></h4>
<p>The first two groups of type are helper types used to facilitate construction of the <code>Basis</code>. They are the <code>BasisFamily</code> and the <code>BasisParams</code> types:</p>
<p>First is the <code>BasisFamily</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">abstract type</span> BasisFamily <span class="pl-k">end</span>
<span class="pl-k">struct</span> Cheb <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisFamily</span> <span class="pl-k">end</span>
<span class="pl-k">struct</span> Lin <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisFamily</span> <span class="pl-k">end</span>
<span class="pl-k">struct</span> Spline <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisFamily</span> <span class="pl-k">end</span>

<span class="pl-k">abstract type</span> BasisParams <span class="pl-k">end</span>
<span class="pl-k">mutable struct</span> ChebParams <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisParams</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>
    a<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    b<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-k">mutable struct</span> SplineParams <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisParams</span>
    breaks<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    evennum<span class="pl-k">::</span><span class="pl-c1">Int</span>
    k<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">mutable struct</span> LinParams <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisParams</span>
    breaks<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    evennum<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span></pre></div>
<p><code>BasisFamily</code> is an abstract type, whose subtypes are singletons that specify the class of functions in the basis.</p>
<p><code>BasisParams</code> is an abstract type, whose subtypes are type types that hold all information needed to construct the Basis of a particular class</p>
<p>Then we have the central <code>Basis</code> type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> Basis{N,TP<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>}
    params<span class="pl-k">::</span><span class="pl-c1">TP</span>     <span class="pl-c"><span class="pl-c">#</span> params to construct basis</span>
<span class="pl-k">end</span></pre></div>
<p>The <code>params</code> field of this type contains an <code>N</code> element tuple, where each
element is a subtype of <code>BasisParams</code>. This represents an <code>N</code> dimensional
basis.</p>
<p>The <code>Basis</code> has support for the following methods:</p>
<ul>
<li>A whole slew of constructors</li>
<li><code>getindex(b::Basis, i::Int)</code>: which extracts the univariate <code>Basis</code> along the <code>i</code>th dimension</li>
<li><code>ndims</code>: The number of dimensions</li>
<li><code>length</code>: the product of the <code>n</code> field</li>
<li><code>size(b::Basis, i::Int)</code>: The <code>i</code>th element of the <code>n</code> field (number of basis functions in dimension <code>i</code>)</li>
<li><code>size(b::Basis)</code>: <code>b.n</code> as a tuple instead of a vector (similar to <code>size(a::Array)</code>)</li>
<li><code>==</code>: test two basis for equality</li>
<li><code>nodes(b::Basis)-&gt;(Matrix, Vector{Vector{Float64}})</code>: the interpolation nodes. the first element is the tensor product of all dimensions, second element is a vector of vectors, where the <code>i</code>th element contains the nodes along dimension <code>i</code>.</li>
<li><code>min</code> and <code>max</code> gives an <code>N</code> element tuple of the lower and upper bounds of the domain in each dimension.</li>
</ul>
<h4><a id="user-content-basismatrix-representation" class="anchor" aria-hidden="true" href="#basismatrix-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BasisMatrix</code> representation</h4>
<p>Next we turn to representing the <code>BasisMatrix</code>, which is responsible for keeping track of the basis functions evaluated at the interpolation nodes. To keep track of this representation, we have another family of helper types:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">abstract type</span> AbstractBasisMatrixRep <span class="pl-k">end</span>
<span class="pl-k">const</span> ABSR <span class="pl-k">=</span> AbstractBasisMatrixRep

<span class="pl-k">struct</span> Tensor <span class="pl-k">&lt;:</span> <span class="pl-c1">ABSR</span> <span class="pl-k">end</span>
<span class="pl-k">struct</span> Direct <span class="pl-k">&lt;:</span> <span class="pl-c1">ABSR</span> <span class="pl-k">end</span>
<span class="pl-k">struct</span> Expanded <span class="pl-k">&lt;:</span> <span class="pl-c1">ABSR</span> <span class="pl-k">end</span></pre></div>
<p><code>AbstractBasisMatrixRep</code> is an abstract types, whose subtypes are singletons that specify how the basis matrices are stored. To understand how they are different, we need to see the structure of the <code>BasisMatrix</code> type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> BasisMatrix{BST<span class="pl-k">&lt;:</span><span class="pl-c1">ABSR</span>, TM<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractMatrix</span>}
    order<span class="pl-k">::</span><span class="pl-c1">Matrix{Int}</span>
    vals<span class="pl-k">::</span><span class="pl-c1">Matrix{TM}</span>
<span class="pl-k">end</span></pre></div>
<p>The <code>order</code> field keeps track of what order of derivative or integral the arrays inside <code>vals</code> correspond to.</p>
<p>The content inside <code>vals</code> will vary based on the type Parameter <code>BST&lt;:AbstractBasisMatrixRep</code>:</p>
<ol>
<li>for <code>BST==Tensor</code> <code>vals</code> will store the evaluation of the basis functions at each of the integration nodes independently. Thus, the <code>[d, i]</code> element will be the derivative order <code>d</code> Basis at the interpolation nodes along the <code>i</code>th dimension (each column is a basis function, each row is an interpolation node). This is the most compact and memory efficient representation</li>
<li>For <code>BST==Direct</code> <code>vals</code> will expand along the first dimension (rows) of the array so that for each <code>i</code>, the <code>[d, i]</code> element will have <code>length(basis)</code> rows and <code>basis.n[i]</code> (modulo loss or addition of basis functions from derivative/integral operators.)</li>
<li>For <code>BST==Expanded</code> <code>vals</code> will be expanded along both the rows and the columns and will contain a single <code>Matrix</code> for each desired derivative order. This format is the least memory efficient, but simplest conceptually for thinking about how to compute a coefficient vector (if <code>y</code> is <code>f(x)</code> then <code>coefs[d] = b.vals[d] \ y</code>)</li>
</ol>
<p>See the file
<a href="https://github.com/QuantEcon/BasisMatrices.jl/blob/master/demo/basis_mat_formats.jl">demo/basis_mat_formats.jl</a>
for a more detailed description of the basis matrix formats.</p>
<h4><a id="user-content-convenience-interpoland-type" class="anchor" aria-hidden="true" href="#convenience-interpoland-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Convenience <code>Interpoland</code> type</h4>
<p>Finally the convenient <code>Interpoland</code> type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> Interpoland{TB<span class="pl-k">&lt;:</span><span class="pl-c1">Basis</span>,TC<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractArray</span>,TBM<span class="pl-k">&lt;:</span><span class="pl-c1">BasisMatrix{Tensor}</span>}
    basis<span class="pl-k">::</span><span class="pl-c1">TB</span>  <span class="pl-c"><span class="pl-c">#</span> the basis -- can't change</span>
    coefs<span class="pl-k">::</span><span class="pl-c1">TC</span>  <span class="pl-c"><span class="pl-c">#</span> coefficients -- might change</span>
    bmat<span class="pl-k">::</span><span class="pl-c1">TBM</span>  <span class="pl-c"><span class="pl-c">#</span> BasisMatrix at nodes of `b` -- can't change</span>
<span class="pl-k">end</span></pre></div>
<p>The main purpose of this type is to keep track of the coefficient vector and the <code>Basis</code> so the user doesn't have to carry both of them around. It also holds a <code>BasisMatrix</code> for the evaluation of the basis matrices at the interpolation nodes. This means that if the coefficient vector needs to be updated, this <code>BasisMatrix</code> will not be re-computed.</p>
</article></div>