<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-abaqusreaderjl---parse-abaqus-mesh-files-to-julia" class="anchor" aria-hidden="true" href="#abaqusreaderjl---parse-abaqus-mesh-files-to-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbaqusReader.jl - parse ABAQUS mesh files to Julia</h1>
<p><a href="https://github.com/JuliaFEM/AbaqusReader.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaFEM/AbaqusReader.jl/workflows/CI/badge.svg" alt="ci" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaFEM/AbaqusReader.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/571261c2911605e37e63d7b85d55ed092424927a3a21250ee7e6bd1a832ff4e5/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696146454d2f4162617175735265616465722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d33615a474a6a44735939" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaFEM/AbaqusReader.jl/branch/master/graph/badge.svg?token=3aZGJjDsY9" style="max-width:100%;"></a>
<a href="https://juliafem.github.io/AbaqusReader.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliafem.github.io/AbaqusReader.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>AbaqusReader.jl can be used to parse ABAQUS .inp file format. Two functions is
exported: <code>abaqus_read_mesh(filename::String)</code> can be used to parse mesh to
simple Dict-based structure. With function <code>abaqus_read_model(filename::String)</code>
it's also possible to parse more information from model, like boundary
conditions and steps.</p>
<p>Reading mesh is made simple:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AbaqusReader
abaqus_read_mesh(&quot;cube_tet4.inp&quot;)
"><pre><span class="pl-k">using</span> AbaqusReader
<span class="pl-c1">abaqus_read_mesh</span>(<span class="pl-s"><span class="pl-pds">"</span>cube_tet4.inp<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Dict{String,Dict} with 7 entries:
  &quot;nodes&quot;         =&gt; Dict(7=&gt;[0.0, 10.0, 10.0],4=&gt;[10.0, 0.0, 0.0],9=&gt;[10.0, 10…
  &quot;element_sets&quot;  =&gt; Dict(&quot;CUBE&quot;=&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…
  &quot;element_types&quot; =&gt; Dict{Integer,Symbol}(Pair{Integer,Symbol}(2, :Tet4),Pair{I…
  &quot;elements&quot;      =&gt; Dict{Integer,Array{Integer,1}}(Pair{Integer,Array{Integer,…
  &quot;surface_sets&quot;  =&gt; Dict(&quot;LOAD&quot;=&gt;Tuple{Int64,Symbol}[(16, :S1), (8, :S1)],&quot;ORD…
  &quot;surface_types&quot; =&gt; Dict(&quot;LOAD&quot;=&gt;:ELEMENT,&quot;ORDER&quot;=&gt;:ELEMENT)
  &quot;node_sets&quot;     =&gt; Dict(&quot;SYM23&quot;=&gt;[5, 6, 7, 8],&quot;SYM12&quot;=&gt;[5, 6, 3, 4],&quot;NALL&quot;=&gt;[…
"><pre lang="text"><code>Dict{String,Dict} with 7 entries:
  "nodes"         =&gt; Dict(7=&gt;[0.0, 10.0, 10.0],4=&gt;[10.0, 0.0, 0.0],9=&gt;[10.0, 10…
  "element_sets"  =&gt; Dict("CUBE"=&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…
  "element_types" =&gt; Dict{Integer,Symbol}(Pair{Integer,Symbol}(2, :Tet4),Pair{I…
  "elements"      =&gt; Dict{Integer,Array{Integer,1}}(Pair{Integer,Array{Integer,…
  "surface_sets"  =&gt; Dict("LOAD"=&gt;Tuple{Int64,Symbol}[(16, :S1), (8, :S1)],"ORD…
  "surface_types" =&gt; Dict("LOAD"=&gt;:ELEMENT,"ORDER"=&gt;:ELEMENT)
  "node_sets"     =&gt; Dict("SYM23"=&gt;[5, 6, 7, 8],"SYM12"=&gt;[5, 6, 3, 4],"NALL"=&gt;[…
</code></pre></div>
<p>Like said, <code>mesh</code> is a simple dictionary containing other dictionaries like
<code>elements</code>, <code>nodes</code>, <code>element_sets</code> and so on. This is a good  starting point to
construct own finite element implementations based on real models done using
ABAQUS.</p>
<p>If boundary conditions are also requested, <code>abaqus_read_model</code> must be used:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = abaqus_read_model(&quot;abaqus_file.inp&quot;)
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">abaqus_read_model</span>(<span class="pl-s"><span class="pl-pds">"</span>abaqus_file.inp<span class="pl-pds">"</span></span>)</pre></div>
<p>This returns <code>AbaqusReader.Model</code> instance.</p>
<h2><a id="user-content-supported-elements" class="anchor" aria-hidden="true" href="#supported-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported elements</h2>
<ul>
<li>C3D4</li>
<li>C3D8</li>
<li>C3D10</li>
<li>C3D20</li>
<li>C3D20E</li>
<li>S3</li>
<li>STRI65</li>
<li>CPS4</li>
<li>T2D2</li>
<li>T3D2</li>
</ul>
</article></div>