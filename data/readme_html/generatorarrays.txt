<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-generatorarrays" class="anchor" aria-hidden="true" href="#generatorarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GeneratorArrays</h1>
<p dir="auto"><a href="https://travis-ci.org/KlausC/GeneratorArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5956c48f96d0e4e09ec1d8d177576a54eb9c6c82ec585cb099eb4bdbf3c5e725/68747470733a2f2f7472617669732d63692e6f72672f4b6c617573432f47656e657261746f724172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/KlausC/GeneratorArrays.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/KlausC/GeneratorArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/34fb02d9c9d4129803a62b01e8f3d103101f0d8756d2eb4c9b8f709f3c288234/687474703a2f2f636f6465636f762e696f2f6769746875622f4b6c617573432f47656e657261746f724172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/KlausC/GeneratorArrays.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-array-view-to-generators-and-iterators" class="anchor" aria-hidden="true" href="#array-view-to-generators-and-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Array view to Generators and Iterators</h2>
<p dir="auto">Effectively provide an <code>AbstractArray</code> view of a generator or iterator.</p>
<p dir="auto">That means it will be possible to pass a generator to methods expecting
arrays. The only exported function is called <code>array</code> and <code>array(g)</code> can be
used like a read-only abstract array.</p>
<p dir="auto">The restrictions to the generators and iterators are that they need to have
a <code>size</code>.</p>
<p dir="auto">Usage:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="
    using GeneratorArrays

    a = array(x^2 for x in 0:0.01:1)

    a[1] == 0
    a[51] ≈ 0.25
    a[101] == 1

"><pre lang="juliadoc" class="notranslate"><code>
    using GeneratorArrays

    a = array(x^2 for x in 0:0.01:1)

    a[1] == 0
    a[51] ≈ 0.25
    a[101] == 1


</code></pre></div>
<p dir="auto">For example you can exploit the binary-search functionality of
<code>searchsorted</code> without evaluating the function at all grid points.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    using GeneratorArrays

    n = 10^6
    a = randn(ComplexF64, n);
    p = sortperm(a, by=real);

    # positions in a[p] where numbers in corresponding vertical stripes are found
    res = Int[]
    for h in -3:0.1:3
        x = searchsortedfirst(array(real(a[p[i]]) for i in 1:n), h)
        push!(res, x)
    end
    
    mysin(x) = begin println(x); sin(x); end
    # finding inverse value of a monotonic function
    searchsortedfirst(array(mysin(x) for x in 0:0.001:3.14), 0.5)


    using Primes
    # first prime greater than 10^6 ( note: primes(10^6, 10^6+100) is much better)
    searchsortedfirst(array(prime(i) for i = 5*10^4:10^5), 10^6)
"><pre class="notranslate"><code>    using GeneratorArrays

    n = 10^6
    a = randn(ComplexF64, n);
    p = sortperm(a, by=real);

    # positions in a[p] where numbers in corresponding vertical stripes are found
    res = Int[]
    for h in -3:0.1:3
        x = searchsortedfirst(array(real(a[p[i]]) for i in 1:n), h)
        push!(res, x)
    end
    
    mysin(x) = begin println(x); sin(x); end
    # finding inverse value of a monotonic function
    searchsortedfirst(array(mysin(x) for x in 0:0.001:3.14), 0.5)


    using Primes
    # first prime greater than 10^6 ( note: primes(10^6, 10^6+100) is much better)
    searchsortedfirst(array(prime(i) for i = 5*10^4:10^5), 10^6)

</code></pre></div>
</article></div>