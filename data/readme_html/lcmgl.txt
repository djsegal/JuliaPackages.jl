<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lcmgl" class="anchor" aria-hidden="true" href="#lcmgl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LCMGL</h1>
<p><a href="https://travis-ci.org/rdeits/LCMGL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6416d1945c198a367e47dc857a5c00f1aeaf8b7a78077a2cf2628cf3b9d3da9a/68747470733a2f2f7472617669732d63692e6f72672f7264656974732f4c434d474c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rdeits/LCMGL.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rdeits/LCMGL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d07dd7e27f70f869cb7047941c96742ae5109ab5730bb951ec74d3c650b4adcc/68747470733a2f2f636f6465636f762e696f2f67682f7264656974732f4c434d474c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/rdeits/LCMGL.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package provides Julia bindings for the <a href="https://github.com/RobotLocomotion/libbot/tree/master/bot2-lcmgl">libbot lcmgl package</a>, which allows OpenGL commands to be executed from a remote process using the <a href="https://lcm-proj.github.io/" rel="nofollow">LCM</a> message passing system. It uses Julia's native C support to call directly into the <code>libbot2-lcmgl-client</code> library, so it should perform well with minimal overhead.</p>
<p>To use LCMGL, you'll need a viewer capable of listening to and displaying the resulting drawing commands. One excellent LCMGL-capable viewer is the <code>drake-visualizer</code> app, which is part of the free <a href="drake.mit.edu">Drake</a> robotics toolbox.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Construct a named LCMGL Client with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lcmgl = LCMGLClient(&quot;client_name&quot;)
"><pre>lcmgl <span class="pl-k">=</span> <span class="pl-c1">LCMGLClient</span>(<span class="pl-s"><span class="pl-pds">"</span>client_name<span class="pl-pds">"</span></span>)</pre></div>
<p>LCMGL functions are mapped to Julia functions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="color(lcmgl, rand(4)...)
sphere(lcmgl, rand(3), 0.1, 20, 20)
switch_buffer(lcmgl)
"><pre><span class="pl-c1">color</span>(lcmgl, <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)<span class="pl-k">...</span>)
<span class="pl-c1">sphere</span>(lcmgl, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), <span class="pl-c1">0.1</span>, <span class="pl-c1">20</span>, <span class="pl-c1">20</span>)
<span class="pl-c1">switch_buffer</span>(lcmgl)</pre></div>
<p>Multiple <code>LCMGL</code> clients can also share the same <code>LCM</code> object:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lcm = LCM()
gl1 = LCMGLClient(lcm, &quot;gl1&quot;)
gl2 = LCMGLClient(lcm, &quot;gl2&quot;)
"><pre>lcm <span class="pl-k">=</span> <span class="pl-c1">LCM</span>()
gl1 <span class="pl-k">=</span> <span class="pl-c1">LCMGLClient</span>(lcm, <span class="pl-s"><span class="pl-pds">"</span>gl1<span class="pl-pds">"</span></span>)
gl2 <span class="pl-k">=</span> <span class="pl-c1">LCMGLClient</span>(lcm, <span class="pl-s"><span class="pl-pds">"</span>gl2<span class="pl-pds">"</span></span>)</pre></div>
<p>A <code>do</code>-block syntax is also provided to make it easy to automatically construct and destroy an lcmgl client:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="LCMGLClient(&quot;test&quot;) do lcmgl
    color(lcmgl, rand(4)...)
    sphere(lcmgl, rand(3), 0.1, 20, 20)
end
"><pre><span class="pl-c1">LCMGLClient</span>(<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> lcmgl
    <span class="pl-c1">color</span>(lcmgl, <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)<span class="pl-k">...</span>)
    <span class="pl-c1">sphere</span>(lcmgl, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), <span class="pl-c1">0.1</span>, <span class="pl-c1">20</span>, <span class="pl-c1">20</span>)
<span class="pl-k">end</span></pre></div>
<p>The <code>do</code>-block syntax will also automatically call <code>switch_buffer()</code> at the end of the block if there are any drawing commands waiting to be displayed.</p>
<h2><a id="user-content-memory-management" class="anchor" aria-hidden="true" href="#memory-management"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Memory Management</h2>
<p>When an <code>LCM</code> or <code>LCMGLClient</code> object is finalized by the Julia garbage collector, the appropriate C function will also be called to destroy the underlying C object. If you want to explicitly free that C object early, you can call <code>close(lcm)</code> or <code>close(lcmgl)</code> yourself. You may find this useful if you get errors about too many file objects being used by LCM. Calling <code>close()</code> multiple times on the same Julia object is safe.</p>
<h2><a id="user-content-function-names" class="anchor" aria-hidden="true" href="#function-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function Names</h2>
<p>This package attempts to provide a consistent naming scheme for exported lcmgl functions: the <code>bot2_lcmgl_</code> prefix is always removed, and suffixes that exist only to indicate the number or type of arguments have also been removed. So, for example, <code>bot_lcmgl_vertex2d</code> has become <code>vertex(lcmgl, x, y)</code> and <code>bot_lcmgl_vertex3d</code> has become <code>vertex(lcmgl, x, y, z)</code>. There are a few exceptions: <code>begin</code> and <code>end</code> are reserved keywords in Julia, so they have become <code>begin_mode(lcmgl, mode)</code> and <code>end_mode(lcmgl)</code>, and <code>scale</code> is already defined in <code>Base</code>, so it has become <code>scale_axes(lcmgl, x_scale, y_scale, z_scale)</code>.</p>
</article></div>