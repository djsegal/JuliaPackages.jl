<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-meshvizjl" class="anchor" aria-hidden="true" href="#meshvizjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MeshViz.jl</h1>
<p dir="auto">Makie.jl recipes for visualization of <a href="https://github.com/JuliaGeometry/Meshes.jl">Meshes.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Get the latest stable release with Julia's package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add MeshViz"><pre>] add MeshViz</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Meshes, MeshViz

# choose a Makie backend
import GLMakie as Mke

using PlyIO: load_ply

function loadply(fname)
  ply = load_ply(fname)
  x = ply[&quot;vertex&quot;][&quot;x&quot;]
  y = ply[&quot;vertex&quot;][&quot;y&quot;]
  z = ply[&quot;vertex&quot;][&quot;z&quot;]
  I = ply[&quot;face&quot;][&quot;vertex_indices&quot;]
  points = Point.(x, y, z)
  connec = [connect(Tuple(i.+1)) for i in I]
  SimpleMesh(points, connec)
end

mesh = loadply(&quot;beethoven.ply&quot;)

viz(mesh, showfacets = true)"><pre><span class="pl-k">using</span> Meshes, MeshViz

<span class="pl-c"><span class="pl-c">#</span> choose a Makie backend</span>
<span class="pl-k">import</span> GLMakie <span class="pl-k">as</span> Mke

<span class="pl-k">using</span> PlyIO<span class="pl-k">:</span> load_ply

<span class="pl-k">function</span> <span class="pl-en">loadply</span>(fname)
  ply <span class="pl-k">=</span> <span class="pl-c1">load_ply</span>(fname)
  x <span class="pl-k">=</span> ply[<span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>]
  y <span class="pl-k">=</span> ply[<span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>]
  z <span class="pl-k">=</span> ply[<span class="pl-s"><span class="pl-pds">"</span>vertex<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>]
  I <span class="pl-k">=</span> ply[<span class="pl-s"><span class="pl-pds">"</span>face<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>vertex_indices<span class="pl-pds">"</span></span>]
  points <span class="pl-k">=</span> <span class="pl-c1">Point</span>.(x, y, z)
  connec <span class="pl-k">=</span> [<span class="pl-c1">connect</span>(<span class="pl-c1">Tuple</span>(i<span class="pl-k">.+</span><span class="pl-c1">1</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> I]
  <span class="pl-c1">SimpleMesh</span>(points, connec)
<span class="pl-k">end</span>

mesh <span class="pl-k">=</span> <span class="pl-c1">loadply</span>(<span class="pl-s"><span class="pl-pds">"</span>beethoven.ply<span class="pl-pds">"</span></span>)

<span class="pl-c1">viz</span>(mesh, showfacets <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/beethoven.png"><img src="figs/beethoven.png" alt="beethoven" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mesh = loadply(&quot;dragon.ply&quot;)

# for vertex coloring pass a vector of colors
# with the same length of the number of vertices
viz(mesh, color = 1:nvertices(mesh), colorscheme = :Spectral)"><pre>mesh <span class="pl-k">=</span> <span class="pl-c1">loadply</span>(<span class="pl-s"><span class="pl-pds">"</span>dragon.ply<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> for vertex coloring pass a vector of colors</span>
<span class="pl-c"><span class="pl-c">#</span> with the same length of the number of vertices</span>
<span class="pl-c1">viz</span>(mesh, color <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">nvertices</span>(mesh), colorscheme <span class="pl-k">=</span> <span class="pl-c1">:Spectral</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/dragon.png"><img src="figs/dragon.png" alt="dragon" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="grid = CartesianGrid(10,10)

viz(grid, showfacets = true)"><pre>grid <span class="pl-k">=</span> <span class="pl-c1">CartesianGrid</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)

<span class="pl-c1">viz</span>(grid, showfacets <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/grid2d.png"><img src="figs/grid2d.png" alt="grid2d" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# for element coloring pass a vector of colors
# with the same length of the number of elements
viz(grid, color = 1:nelements(grid))"><pre><span class="pl-c"><span class="pl-c">#</span> for element coloring pass a vector of colors</span>
<span class="pl-c"><span class="pl-c">#</span> with the same length of the number of elements</span>
<span class="pl-c1">viz</span>(grid, color <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">nelements</span>(grid))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/grid2d-color.png"><img src="figs/grid2d-color.png" alt="grid2d-color" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="grid = CartesianGrid(10,10,10)

viz(grid, showfacets = true)"><pre>grid <span class="pl-k">=</span> <span class="pl-c1">CartesianGrid</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)

<span class="pl-c1">viz</span>(grid, showfacets <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/grid3d.png"><img src="figs/grid3d.png" alt="grid3d" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="viz(grid, color = 1:nelements(grid))"><pre><span class="pl-c1">viz</span>(grid, color <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">nelements</span>(grid))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/grid3d-color.png"><img src="figs/grid3d-color.png" alt="grid3d-color" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GeoTables

# Brazil states as Meshes.jl polygons
BRA = GeoTables.gadm(&quot;BRA&quot;, depth = 1)

viz(BRA.geometry, decimation = 0.02)"><pre><span class="pl-k">using</span> GeoTables

<span class="pl-c"><span class="pl-c">#</span> Brazil states as Meshes.jl polygons</span>
BRA <span class="pl-k">=</span> GeoTables<span class="pl-k">.</span><span class="pl-c1">gadm</span>(<span class="pl-s"><span class="pl-pds">"</span>BRA<span class="pl-pds">"</span></span>, depth <span class="pl-k">=</span> <span class="pl-c1">1</span>)

<span class="pl-c1">viz</span>(BRA<span class="pl-k">.</span>geometry, decimation <span class="pl-k">=</span> <span class="pl-c1">0.02</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/brazil.png"><img src="figs/brazil.png" alt="brazil" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="RIO = GeoTables.gadm(&quot;BRA&quot;, &quot;Rio de Janeiro&quot;, depth = 1)

viz(RIO.geometry, decimation = 0.001)"><pre>RIO <span class="pl-k">=</span> GeoTables<span class="pl-k">.</span><span class="pl-c1">gadm</span>(<span class="pl-s"><span class="pl-pds">"</span>BRA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Rio de Janeiro<span class="pl-pds">"</span></span>, depth <span class="pl-k">=</span> <span class="pl-c1">1</span>)

<span class="pl-c1">viz</span>(RIO<span class="pl-k">.</span>geometry, decimation <span class="pl-k">=</span> <span class="pl-c1">0.001</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/rio.png"><img src="figs/rio.png" alt="rio" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="viz(BRA.geometry, color = 1:length(BRA.geometry))"><pre><span class="pl-c1">viz</span>(BRA<span class="pl-k">.</span>geometry, color <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(BRA<span class="pl-k">.</span>geometry))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/brazil-color.png"><img src="figs/brazil-color.png" alt="brazil-color" style="max-width: 100%;"></a></p>
<p dir="auto">Please check the docstring <code>?viz</code> for available attributes.</p>
</article></div>