<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-numericextensionsjl" class="anchor" aria-hidden="true" href="#numericextensionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NumericExtensions.jl</h2>
<p><a href="https://travis-ci.org/lindahua/NumericExtensions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1f3e5fcc80c659a3011d85773b549dc055fb5a297385b804c0bd3b0c9a5ee18d/68747470733a2f2f7472617669732d63692e6f72672f6c696e64616875612f4e756d65726963457874656e73696f6e732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/lindahua/NumericExtensions.jl.png" style="max-width:100%;"></a></p>
<p>Julia extensions to provide high performance computational support.</p>
<p><strong>Notes:</strong></p>
<p>Some of the implementations that were originally in this package has been migrated to the Julia base:</p>
<ul>
<li>improved implementation of <code>sum</code>.  <a href="https://github.com/JuliaLang/julia/pull/5235">#5235</a></li>
<li>improved implementation of <code>maximum</code> and <code>minimum</code>. <a href="https://github.com/JuliaLang/julia/pull/5256">#5256</a></li>
<li>performant implementation of <code>sum</code>, <code>maximum</code>, and <code>minimum</code> along given dimensions. <a href="https://github.com/JuliaLang/julia/pull/5294">#5294</a></li>
</ul>
<hr>
<p>Julia is a fantastic technical computing environment that allows you to write codes that are both performant and generic. However, as it is still at its early stage, some functions are not as performant as they can be and writing computational algorithms directly based on builtin functions may not give you the best performance. This package provides you with a variety of tools to address such issues.</p>
<p>To see how this package may help you, let's first consider a simple example, that is, to compute the sum of squared difference between two vectors. This can be easily done in Julia in one line as follows</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r = sum(abs2(x - y))
"><pre>r <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">abs2</span>(x <span class="pl-k">-</span> y))</pre></div>
<p>Whereas this expression is simple, it involves some unnecessary operations that lead to suboptimal performance: (1) it creates two temporary arrays respectively to store <code>x - y</code> and <code>abs(x - y)</code>, (2) it completes the computation through three passes over the data -- computing <code>x - y</code>, computing <code>abs2(x - y)</code>, and finally computing the sum. Julia provides a <code>mapreduce</code> function which allows you to complete the operation in a single pass without creating any temporaries:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r = mapreduce((x, y) -&gt; abs2(x - y), +, x, y)
"><pre>r <span class="pl-k">=</span> <span class="pl-c1">mapreduce</span>((x, y) <span class="pl-k">-&gt;</span> <span class="pl-c1">abs2</span>(x <span class="pl-k">-</span> y), <span class="pl-k">+</span>, x, y)</pre></div>
<p>However, if you really run this you may probably find that this is even slower. The culprit here is that the anonymous function <code>(x, y) -&gt; abs2(x - y)</code> is not inlined, which will be resolved and called at each iteration. Therefore, to compute this efficiently, one has to write loops as below</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = 0.
for i = 1 : length(x)
	s += abs2(x[i] - y[i])
end
"><pre>s <span class="pl-k">=</span> <span class="pl-c1">0.</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">length</span>(x)
	s <span class="pl-k">+=</span> <span class="pl-c1">abs2</span>(x[i] <span class="pl-k">-</span> y[i])
<span class="pl-k">end</span></pre></div>
<p>This is not too bad though, until you have more complex needs, e.g. computing this along each row/column of the matrix. Then writing the loops can become more involved, and it is more tricky to implement it in a cache-friendly way.</p>
<p>With this package, we can compute this efficiently without writing loops, as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r = sumfdiff(Abs2Fun(), x, y)

# to compute this along a specific dimension
r = sumfdiff(Abs2Fun(), x, y, dim)
"><pre>r <span class="pl-k">=</span> <span class="pl-c1">sumfdiff</span>(<span class="pl-c1">Abs2Fun</span>(), x, y)

<span class="pl-c"><span class="pl-c">#</span> to compute this along a specific dimension</span>
r <span class="pl-k">=</span> <span class="pl-c1">sumfdiff</span>(<span class="pl-c1">Abs2Fun</span>(), x, y, dim)</pre></div>
<p>Here, <code>Abs2Fun</code> and <code>Add</code> are <em>typed functors</em> provided by this package, which, unlike normal functions, can still be properly inlined with passed into a higher order function (thus causing zero overhead). This package extends <code>map</code>, <code>foldl</code>, <code>sum</code>, <code>maximum</code> etc to accept typed functors and as well introduces additional higher order functions like <code>sumfdiff</code> and <code>scan</code> etc to simplify their use in other common cases.</p>
<p>Benchmarks show that writing in this way is over <em>9x faster</em> than <code>sum(abs2(x - y))</code>.</p>
<p>This package also provides a collection of specific functions to directly support very common computation. For this particular example, you can write <code>sumsqdiff(x, y)</code>, where <code>sumsqdiff</code> is one of such functions provided here.</p>
<h4><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Main features</h4>
<p>Main features of this package are highlighted below:</p>
<ul>
<li>Pre-defined functors that cover most typical mathematical computation;</li>
<li>Easy ways for user to define customized functors;</li>
<li>Extended/specialized methods for <code>map</code>, <code>map!</code>, <code>foldl</code>, and <code>foldr</code>. These methods are carefully optimized, which often result in <em>2x - 10x</em> speed up;</li>
<li>Additional functions such as <code>map1!</code>, <code>reduce!</code>, and <code>mapreduce!</code> that allow inplace updating or writing results to preallocated arrays;</li>
<li>Extended methods for <code>sum</code>, <code>maximum</code>, <code>minimum</code> that allow reduction over function values (e.g. <code>sum(Abs2(), x)</code>). It also introduces <code>sum!</code>, <code>maximum!</code>, and <code>minimum!</code> that allows writing results to preallocated storage when performing reduction along a specific dimension.</li>
<li>A collection of highly optimized numerical computation functions, e.g. <code>sumabs</code>, <code>sumsq</code>, <code>sumabsdiff</code>, <code>sumsqdiff</code>, etc.</li>
<li>Highly optimized statistical functions, e.g. <code>varm</code>, <code>var</code>, <code>stdm</code>, <code>std</code>, <code>logsumexp</code>, and <code>softmax</code>, etc.</li>
<li>Vector broadcasting computation (supporting both inplace updating and writing results to new arrays).</li>
<li>Fast shared-memory views of arrays.</li>
</ul>
<h4><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h4>
<p>Functions in this package are carefully optimized. In particular, several tricks lead to performance improvements:</p>
<ul>
<li>computation is performed in a cache-friendly manner;</li>
<li>computation completes in a single pass without creating intermediate arrays;</li>
<li>kernels are inlined via the use of typed functors;</li>
<li>inner loops use linear indexing (with pre-computed offset);</li>
<li>opportunities for using BLAS are exploited.</li>
</ul>
<p>Below is a table that compares the performance of several reduction/map-reduction functions with vectorized Julia expressions (the numbers in the table are speed-up ratio of the functions in this package as opposed to the Julia expressions):</p>
<table>
<thead>
<tr>
<th></th>
<th align="right">full reduction</th>
<th align="right">colwise reduction</th>
<th align="right">rowwise reduction</th>
</tr>
</thead>
<tbody>
<tr>
<td>sum</td>
<td align="right">2.0937</td>
<td align="right">2.8078</td>
<td align="right">10.4734</td>
</tr>
<tr>
<td>mean</td>
<td align="right">1.9904</td>
<td align="right">2.1337</td>
<td align="right">10.5682</td>
</tr>
<tr>
<td>max</td>
<td align="right">1.5099</td>
<td align="right">1.8758</td>
<td align="right">6.4157</td>
</tr>
<tr>
<td>min</td>
<td align="right">1.4989</td>
<td align="right">1.8951</td>
<td align="right">6.3920</td>
</tr>
<tr>
<td>var</td>
<td align="right">1.3661</td>
<td align="right">7.8874</td>
<td align="right">13.3508</td>
</tr>
<tr>
<td>std</td>
<td align="right">1.3478</td>
<td align="right">7.6905</td>
<td align="right">12.5884</td>
</tr>
<tr>
<td>sumabs</td>
<td align="right">15.3186</td>
<td align="right">12.0027</td>
<td align="right">11.9859</td>
</tr>
<tr>
<td>maxabs</td>
<td align="right">3.3363</td>
<td align="right">3.3574</td>
<td align="right">8.8502</td>
</tr>
<tr>
<td>minabs</td>
<td align="right">3.9176</td>
<td align="right">3.3089</td>
<td align="right">8.1781</td>
</tr>
<tr>
<td>sumsq</td>
<td align="right">28.4254</td>
<td align="right">10.9547</td>
<td align="right">12.9004</td>
</tr>
<tr>
<td>dot</td>
<td align="right">10.1431</td>
<td align="right">6.1043</td>
<td align="right">9.1512</td>
</tr>
<tr>
<td>sumabsdiff</td>
<td align="right">6.9483</td>
<td align="right">8.1992</td>
<td align="right">11.8763</td>
</tr>
<tr>
<td>maxabsdiff</td>
<td align="right">4.9515</td>
<td align="right">4.8702</td>
<td align="right">8.6670</td>
</tr>
<tr>
<td>minabsdiff</td>
<td align="right">4.8202</td>
<td align="right">4.8156</td>
<td align="right">8.7172</td>
</tr>
<tr>
<td>sumsqdiff</td>
<td align="right">9.2721</td>
<td align="right">8.9602</td>
<td align="right">13.8102</td>
</tr>
<tr>
<td>logsumexp</td>
<td align="right">4.8980</td>
<td align="right">6.0000</td>
<td align="right">6.0321</td>
</tr>
<tr>
<td>softmax</td>
<td align="right">4.6224</td>
<td align="right">4.8134</td>
<td align="right">5.1364</td>
</tr>
</tbody>
</table>
<p>(Updated on Dec 19, 2013, Julia version 0.3.0-prerelease+579, NumericExtensions version 0.3.0)</p>
<p>You can notice remarkable speed up for many of these functions.</p>
<h4><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h4>
<p>Please refer to <a href="http://numericextensionsjl.readthedocs.org/en/latest/" rel="nofollow">here</a> for detailed documentation.</p>
</article></div>