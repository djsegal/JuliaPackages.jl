<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-html5" class="anchor" aria-hidden="true" href="#html5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>html5</h1>


<p dir="auto">html5 makes it easy to build strings of valid HTML5 via R functions. This can
be used to create entire HTML documents or dynamically created HTML snippets.</p>
<p dir="auto">It also can create nicely indented HTML by setting the environment variable
html5_vars$formatted to TRUE, but this comes with a performance slow down.</p>
<p dir="auto">Generates valid HTML tag strings for HTML5 elements documented by Mozilla.
Attributes are passed as named lists, with names being the attribute name and values being the attribute value.
Attribute values are automatically double-quoted. To declare a DOCTYPE, wrap html() with function doctype().
Mozilla's documentation for HTML5 is available here: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/HTML/Element</a>.
Elements marked as obsolete are not included.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install the package html5 from <a href="https://cran.r-project.org/" rel="nofollow">CRAN</a> with:</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="install.packages(&quot;html5&quot;)"><pre>install.packages(<span class="pl-s"><span class="pl-pds">"</span>html5<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">You can install the development version of html5 from <a href="https://github.com/">GitHub</a> with:</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# install.packages(&quot;devtools&quot;)
devtools::install_github(&quot;tconwell/html5&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> install.packages("devtools")</span>
<span class="pl-e">devtools</span><span class="pl-k">::</span>install_github(<span class="pl-s"><span class="pl-pds">"</span>tconwell/html5<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-example-creating-a-html-document" class="anchor" aria-hidden="true" href="#example-creating-a-html-document"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Creating a HTML document:</h2>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="library(html5)
doctype(
  html(
    head(
      meta(attr = c(name = &quot;author&quot;, content = &quot;Timothy Conwell&quot;))
    ),
    body(
      div(
        attr = c(class = &quot;example class&quot;),
        h1(&quot;Hello&quot;),
        p(&quot;Here is some HTML&quot;)
      )
    )
  )
)"><pre>library(<span class="pl-smi">html5</span>)
doctype(
  html(
    head(
      meta(<span class="pl-v">attr</span> <span class="pl-k">=</span> c(<span class="pl-v">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>author<span class="pl-pds">"</span></span>, <span class="pl-v">content</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Timothy Conwell<span class="pl-pds">"</span></span>))
    ),
    body(
      div(
        <span class="pl-v">attr</span> <span class="pl-k">=</span> c(<span class="pl-v">class</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example class<span class="pl-pds">"</span></span>),
        h1(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>),
        p(<span class="pl-s"><span class="pl-pds">"</span>Here is some HTML<span class="pl-pds">"</span></span>)
      )
    )
  )
)</pre></div>
<h2 dir="auto"><a id="user-content-example-creating-a-formatted-html-document" class="anchor" aria-hidden="true" href="#example-creating-a-formatted-html-document"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Creating a formatted HTML document:</h2>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="library(html5)
html5_vars$formatted &lt;- TRUE
doctype(
  html(
    head(
      meta(attr = c(name = &quot;author&quot;, content = &quot;Timothy Conwell&quot;))
    ),
    body(
      div(
        attr = c(class = &quot;example class&quot;),
        h1(&quot;Hello&quot;),
        p(&quot;Here is some HTML&quot;)
      )
    )
  )
)"><pre>library(<span class="pl-smi">html5</span>)
<span class="pl-smi">html5_vars</span><span class="pl-k">$</span><span class="pl-smi">formatted</span> <span class="pl-k">&lt;-</span> <span class="pl-c1">TRUE</span>
doctype(
  html(
    head(
      meta(<span class="pl-v">attr</span> <span class="pl-k">=</span> c(<span class="pl-v">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>author<span class="pl-pds">"</span></span>, <span class="pl-v">content</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Timothy Conwell<span class="pl-pds">"</span></span>))
    ),
    body(
      div(
        <span class="pl-v">attr</span> <span class="pl-k">=</span> c(<span class="pl-v">class</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example class<span class="pl-pds">"</span></span>),
        h1(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>),
        p(<span class="pl-s"><span class="pl-pds">"</span>Here is some HTML<span class="pl-pds">"</span></span>)
      )
    )
  )
)</pre></div>
<h2 dir="auto"><a id="user-content-example-creating-separate-tags-for-each-input-item" class="anchor" aria-hidden="true" href="#example-creating-separate-tags-for-each-input-item"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Creating separate tags for each input item</h2>
<p dir="auto">This shows you how to create separate tags for each item of a vector (this is
usually faster than using lapply but might be confusing when reviewing code):</p>
<div class="highlight highlight-source-r notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="library(html5)
## passing a vector
li(
  c(&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;)
)
## not a vector, but setting separate = TRUE
li(
  &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;,
  separate = TRUE
)
## it also works with attributes if attr is a list.
li(
  c(&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;), 
  attr = list(class = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)),
  separate = TRUE
)"><pre>library(<span class="pl-smi">html5</span>)
<span class="pl-c"><span class="pl-c">#</span># passing a vector</span>
li(
  c(<span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>)
)
<span class="pl-c"><span class="pl-c">#</span># not a vector, but setting separate = TRUE</span>
li(
  <span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>,
  <span class="pl-v">separate</span> <span class="pl-k">=</span> <span class="pl-c1">TRUE</span>
)
<span class="pl-c"><span class="pl-c">#</span># it also works with attributes if attr is a list.</span>
li(
  c(<span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>), 
  <span class="pl-v">attr</span> <span class="pl-k">=</span> <span class="pl-k">list</span>(<span class="pl-v">class</span> <span class="pl-k">=</span> c(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>)),
  <span class="pl-v">separate</span> <span class="pl-k">=</span> <span class="pl-c1">TRUE</span>
)</pre></div>
</article></div>