<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-blockmatching" class="anchor" aria-hidden="true" href="#blockmatching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BlockMatching</h1>
<p dir="auto"><a href="https://johnnychen94.github.io/BlockMatching.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://johnnychen94.github.io/BlockMatching.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/johnnychen94/BlockMatching.jl/actions"><img src="https://github.com/johnnychen94/BlockMatching.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/johnnychen94/BlockMatching.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c7e1de9c4bd7da7b422ad5da7f543650bd91c63c604a7d23cd17166203eeae7/68747470733a2f2f636f6465636f762e696f2f67682f6a6f686e6e796368656e39342f426c6f636b4d61746368696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/johnnychen94/BlockMatching.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>BlockMatching</code> aims to provide a sophisticated implementation on common <a href="https://en.wikipedia.org/wiki/Block-matching_algorithm" rel="nofollow">block matching
algorithms</a> for image processing and
computer vision tasks. Block matching is a data and computational intense algorithm, performance is
of high priority for this package.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="construction" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png">ðŸš§</g-emoji> This is still a WIP project.</p>
<p dir="auto">Two functions are provided as the standard API:</p>
<ul dir="auto">
<li><code>best_match</code>: finds the best matching candidate. This is also known as nearest neighbor search.</li>
<li><code>multi_match</code>: sort the similarities of all candidates and return the smallest K results. This is sometimes known as K nearest neighbor search or top-k selection.</li>
</ul>
<p dir="auto">Available block matching strategies:</p>
<ul dir="auto">
<li><code>FullSearch</code>(brute force): search among all possible candidates. This gives the most accurate result
but is computationally intensive. CUDA is supported for commonly used distances defined in
<a href="https://github.com/JuliaStats/Distances.jl">Distances.jl</a>.</li>
</ul>
</article></div>