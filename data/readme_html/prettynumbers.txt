<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-prettynumbersjl" class="anchor" aria-hidden="true" href="#prettynumbersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrettyNumbers.jl</h1>
<p dir="auto"><a href="https://github.com/ronisbr/PrettyNumbers.jl/actions/workflows/ci.yml"><img src="https://github.com/ronisbr/PrettyNumbers.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ronisbr/PrettyNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a9edb5ba49de0b24f41dcc2708ae8cc8e762f26551564050a5be50e52772a015/68747470733a2f2f636f6465636f762e696f2f67682f726f6e697362722f5072657474794e756d626572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d5052524c544158315639" alt="codecov" data-canonical-src="https://codecov.io/gh/ronisbr/PrettyNumbers.jl/branch/main/graph/badge.svg?token=PRRLTAX1V9" style="max-width: 100%;"></a></p>
<p dir="auto">This package has the purpose to provide a way to render numbers in a more visual
way for data analysis. Currently, we only have the text backend.</p>
<p dir="auto">The function to pretty print the numbers have the following signature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pretty_number([io::IO, | String, ]number::Number; kwargs...)"><pre><span class="pl-c1">pretty_number</span>([io<span class="pl-k">::</span><span class="pl-c1">IO</span>, <span class="pl-k">|</span> String, ]number<span class="pl-k">::</span><span class="pl-c1">Number</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p dir="auto">If the first argument is an <code>io</code>, then the number is printed to it. If it is
a <code>String</code>, then a string is returned with the printed number. It it is omitted,
then it defaults to <code>stdout</code>.</p>
<h2 dir="auto"><a id="user-content-keywords" class="anchor" aria-hidden="true" href="#keywords"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keywords</h2>
<p dir="auto">The following keywords are available to modify the number printing. Those
arguments depends on the type of the number.</p>
<h3 dir="auto"><a id="user-content-rational" class="anchor" aria-hidden="true" href="#rational"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rational</h3>
<p dir="auto">If <code>number</code> is <code>Rational</code>, then the following keywords are available:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>compact::Bool</code>: If <code>true</code>, then the rational number will be printed
compactly, in one line like <code>³/₄</code>. Otherwise, the rational number is printed
using multiple lines, like (<strong>Default</strong> = <code>true</code>):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  123
  ————
  4567"><pre class="notranslate"><code>  123
  ————
  4567
</code></pre></div>
</li>
</ul>
<h3 dir="auto"><a id="user-content-numbers" class="anchor" aria-hidden="true" href="#numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Numbers</h3>
<p dir="auto">Otherwise, the <code>number</code> is printed using the scientific notation in the base 10.
In this case, the following keywords are available:</p>
<ul dir="auto">
<li><code>always_print_base::Bool</code>: If <code>true</code>, then the base is always printed even if
the base exponent is 0. (<strong>Default</strong> = <code>false</code>)</li>
<li><code>multiplication_sign::Char</code>: The multiplication sign that will be used between
the significand and the decimal base, common options are <code>'⋅'</code> and <code>'×'</code>.
(<strong>Default</strong> = <code>'×'</code>)</li>
<li><code>significand_format::String</code>: The format that will be used to print the
signifcand, as described by the function <a href="@ref"><code>Printf.@printf</code></a>.
(<strong>Default</strong> = <code>"%g"</code>)</li>
<li><code>show_base::Bool</code>: If <code>true</code>, then the base will be printed. Otherwise, it
will be omitted. (<strong>Default</strong> = <code>true</code>)</li>
<li><code>show_significand::Bool</code>: If <code>true</code>, then the significand will be printed.
Otherwise, it will be omitted. (<strong>Default</strong> = <code>true</code>)</li>
<li><code>new_decimal_base::Union{Nothing, Number}</code>: If it is a number, then the
decimal base of the number will be converted to this number. If it is
<code>nothing</code>, then the base is not changed. (<strong>Default</strong> = <code>nothing</code>)</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pretty_number(19//86)
¹⁹/₈₆

julia&gt; pretty_number(19//86; compact = false)
19
——
86

julia&gt; pretty_number(1906.1896)
1.90619 × 10³

julia&gt; pretty_number(1906.1896, significand_format = &quot;%.10f&quot;)
1.9061896000 × 10³

julia&gt; pretty_number(1906.1896; new_decimal_base = 4)
0.190619 × 10⁴

julia&gt; pretty_number(1906.1896; multiplication_sign = '⋅')
1.90619 ⋅ 10³"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">pretty_number</span>(<span class="pl-c1">19</span><span class="pl-k">//</span><span class="pl-c1">86</span>)
¹⁹<span class="pl-k">/</span>₈₆

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pretty_number</span>(<span class="pl-c1">19</span><span class="pl-k">//</span><span class="pl-c1">86</span>; compact <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-c1">19</span>
——
<span class="pl-c1">86</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pretty_number</span>(<span class="pl-c1">1906.1896</span>)
<span class="pl-c1">1.90619</span> <span class="pl-k">×</span> <span class="pl-c1">10</span>³

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pretty_number</span>(<span class="pl-c1">1906.1896</span>, significand_format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>%.10f<span class="pl-pds">"</span></span>)
<span class="pl-c1">1.9061896000</span> <span class="pl-k">×</span> <span class="pl-c1">10</span>³

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pretty_number</span>(<span class="pl-c1">1906.1896</span>; new_decimal_base <span class="pl-k">=</span> <span class="pl-c1">4</span>)
<span class="pl-c1">0.190619</span> <span class="pl-k">×</span> <span class="pl-c1">10</span>⁴

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pretty_number</span>(<span class="pl-c1">1906.1896</span>; multiplication_sign <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>⋅<span class="pl-pds">'</span></span>)
<span class="pl-c1">1.90619</span> <span class="pl-k">⋅</span> <span class="pl-c1">10</span>³</pre></div>
</article></div>