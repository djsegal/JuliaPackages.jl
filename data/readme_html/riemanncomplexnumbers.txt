<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-riemanncomplexnumbers" class="anchor" aria-hidden="true" href="#riemanncomplexnumbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RiemannComplexNumbers</h1>
<p dir="auto"><a href="https://travis-ci.com/scheinerman/RiemannComplexNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f485ac47558398900f6682b73986b58ed1a8007b504fda0e923563e39530de94/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f5269656d616e6e436f6d706c65784e756d626572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/RiemannComplexNumbers.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia module gives an alternative to <code>Complex</code> numbers and their
operations to give mathematically more sensible results.</p>
<h2 dir="auto"><a id="user-content-the-complex-problem" class="anchor" aria-hidden="true" href="#the-complex-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Complex Problem</h2>
<p dir="auto">Standard complex field operations in Julia work fine; the problems
begin to arise when dividing by zero. It is logical to extend the real
numbers with a positive infinity and a negative infinity. And we have
both <code>+Inf</code> and <code>-Inf</code> in Julia. However, there are problems with the
implementation of infinite values for Julia <code>Complex</code> numbers. Here
are some examples.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# For real numbers, division by 0 gives an infinite result
julia&gt; 1/0
Inf

# This division by 0 for complex numbers is fine
julia&gt; (2+3im)/0
Inf + Inf*im

# But this one doesn't make sense
julia&gt; 2im/0
NaN + Inf*im

# For real numbers we have the following sensible result
julia&gt; (Inf + 3) == (Inf + 2)
true

# But it breaks for complex numbers
julia&gt; (Inf + 3im) == (Inf + 2im)
false"><pre><span class="pl-c"><span class="pl-c">#</span> For real numbers, division by 0 gives an infinite result</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>
<span class="pl-c1">Inf</span>

<span class="pl-c"><span class="pl-c">#</span> This division by 0 for complex numbers is fine</span>
julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>)<span class="pl-k">/</span><span class="pl-c1">0</span>
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

<span class="pl-c"><span class="pl-c">#</span> But this one doesn't make sense</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">2im</span><span class="pl-k">/</span><span class="pl-c1">0</span>
<span class="pl-c1">NaN</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

<span class="pl-c"><span class="pl-c">#</span> For real numbers we have the following sensible result</span>
julia<span class="pl-k">&gt;</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>) <span class="pl-k">==</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> But it breaks for complex numbers</span>
julia<span class="pl-k">&gt;</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>) <span class="pl-k">==</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>)
<span class="pl-c1">false</span></pre></div>
<h2 dir="auto"><a id="user-content-this-solution" class="anchor" aria-hidden="true" href="#this-solution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>This Solution</h2>
<p dir="auto">This module defines an alternative to <code>Complex</code> numbers in which there is a
single infinite value (we call <code>ComplexInfinity</code>). We introduce a new type
called <code>RC</code> (an abbreviation for Riemann Complex number). Let's see how the
previous calculations work in this new context:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RiemannComplexNumbers

julia&gt; (2+3IM)/0
ComplexInf

julia&gt; 2IM/0
ComplexInf

julia&gt; Inf + 3IM == Inf + 2IM
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RiemannComplexNumbers

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3</span>IM)<span class="pl-k">/</span><span class="pl-c1">0</span>
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>IM<span class="pl-k">/</span><span class="pl-c1">0</span>
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>IM <span class="pl-k">==</span> <span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>IM
<span class="pl-c1">true</span></pre></div>
<p dir="auto">The constant <code>IM</code> is the replacement for <code>im</code> that can be used to construct
Riemann Complex numbers. In general, wrapping values in <code>RC</code> will work:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; RC(2)
2 + 0IM

julia&gt; RC(3-im)
3 - 1IM"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">RC</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">0</span>IM

julia<span class="pl-k">&gt;</span> <span class="pl-c1">RC</span>(<span class="pl-c1">3</span><span class="pl-k">-</span>im)
<span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>IM</pre></div>
<p dir="auto">Dividing by zero gives the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (2-3IM)/0
ComplexInf

julia&gt; 3/0IM
ComplexInf

julia&gt; 0/0IM
ComplexNaN"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">3</span>IM)<span class="pl-k">/</span><span class="pl-c1">0</span>
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">0</span>IM
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0</span><span class="pl-k">/</span><span class="pl-c1">0</span>IM
ComplexNaN</pre></div>
<p dir="auto">To convert an <code>RC</code> number to a <code>Complex</code> do this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; z = 3.5 - 5IM
3.5 - 5.0IM

julia&gt; Complex(z)
3.5 - 5.0im"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">3.5</span> <span class="pl-k">-</span> <span class="pl-c1">5</span>IM
<span class="pl-c1">3.5</span> <span class="pl-k">-</span> <span class="pl-c1">5.0</span>IM

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Complex</span>(z)
<span class="pl-c1">3.5</span> <span class="pl-k">-</span> <span class="pl-c1">5.0im</span></pre></div>
<p dir="auto">Basic arithmetic operations work exactly the same for <code>RC</code> numbers as for <code>Complex</code>
but will be slower (to deal with division by zero and operations with <code>ComplexInf</code>
and <code>ComplexNaN</code>).</p>
<p dir="auto">Some basic functions (such as <code>sqrt</code> and <code>exp</code>) are provided. See the <code>functions.jl</code>
file in the <code>src</code> directory.</p>
<h2 dir="auto"><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To Do</h2>
<p dir="auto">Some <code>LinearAlgebra</code> operations don't work; I'm not sure why. For example,
evaluating the determinant of an <code>RC</code> matrix throws errors.</p>
</article></div>