<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-the-riemanncomplexnumbers-module" class="anchor" aria-hidden="true" href="#the-riemanncomplexnumbers-module"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>RiemannComplexNumbers</code> module</h1>
<p><a href="https://travis-ci.org/scheinerman/RiemannComplexNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/59acaedfebf583b4395371eb91f5d95c87f0ea81/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f5269656d616e6e436f6d706c65784e756d626572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/RiemannComplexNumbers.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/RiemannComplexNumbers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5f6220316e19109c9a6838ee0c7a77022e7bf8e8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f5269656d616e6e436f6d706c65784e756d626572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/RiemannComplexNumbers.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/RiemannComplexNumbers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b741e8a813052b60d1f1da7c153c6e83481457b9/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f5269656d616e6e436f6d706c65784e756d626572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/RiemannComplexNumbers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This Julia module gives an alternative to <code>Complex</code> numbers and their
operations to give mathematically more sensible results.</p>
<h2><a id="user-content-the-complex-problem" class="anchor" aria-hidden="true" href="#the-complex-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Complex Problem</h2>
<p>Standard complex field operations in Julia work fine; the problems
begin to arise when dividing by zero. It is logical to extend the real
numbers with a positive infinity and a negative infinity. And we have
both <code>+Inf</code> and <code>-Inf</code> in Julia. However, there are problems with the
implementation of infinite values for Julia <code>Complex</code> numbers. Here
are some examples.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> For real numbers, division by 0 gives an infinite result</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>
<span class="pl-c1">Inf</span>

<span class="pl-c"><span class="pl-c">#</span> This division by 0 for complex numbers is fine</span>
julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>)<span class="pl-k">/</span><span class="pl-c1">0</span>
<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

<span class="pl-c"><span class="pl-c">#</span> But this one doesn't make sense</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">2im</span><span class="pl-k">/</span><span class="pl-c1">0</span>
<span class="pl-c1">NaN</span> <span class="pl-k">+</span> <span class="pl-c1">Inf</span><span class="pl-k">*</span>im

<span class="pl-c"><span class="pl-c">#</span> For real numbers we have the following sensible result</span>
julia<span class="pl-k">&gt;</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>) <span class="pl-k">==</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> But it breaks for complex numbers</span>
julia<span class="pl-k">&gt;</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>) <span class="pl-k">==</span> (<span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>)
<span class="pl-c1">false</span></pre></div>
<h2><a id="user-content-this-solution" class="anchor" aria-hidden="true" href="#this-solution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This Solution</h2>
<p>This module defines an alternative to <code>Complex</code> numbers in which there is a
single infinite value (we call <code>ComplexInfinity</code>). We introduce a new type
called <code>RC</code> (an abbreviation for Riemann Complex number). Let's see how the
previous calculations work in this new context:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RiemannComplexNumbers

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3</span>IM)<span class="pl-k">/</span><span class="pl-c1">0</span>
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>IM<span class="pl-k">/</span><span class="pl-c1">0</span>
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>IM <span class="pl-k">==</span> <span class="pl-c1">Inf</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>IM
<span class="pl-c1">true</span></pre></div>
<p>The constant <code>IM</code> is the replacement for <code>im</code> that can be used to construct
Riemann Complex numbers. In general, wrapping values in <code>RC</code> will work:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">RC</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">0</span>IM

julia<span class="pl-k">&gt;</span> <span class="pl-c1">RC</span>(<span class="pl-c1">3</span><span class="pl-k">-</span>im)
<span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>IM</pre></div>
<p>Dividing by zero gives the following:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">3</span>IM)<span class="pl-k">/</span><span class="pl-c1">0</span>
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">0</span>IM
ComplexInf

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0</span><span class="pl-k">/</span><span class="pl-c1">0</span>IM
ComplexNaN</pre></div>
<p>To convert an <code>RC</code> number to a <code>Complex</code> do this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">3.5</span> <span class="pl-k">-</span> <span class="pl-c1">5</span>IM
<span class="pl-c1">3.5</span> <span class="pl-k">-</span> <span class="pl-c1">5.0</span>IM

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Complex</span>(z)
<span class="pl-c1">3.5</span> <span class="pl-k">-</span> <span class="pl-c1">5.0im</span></pre></div>
<p>Basic arithmetic operations work exactly the same for <code>RC</code> numbers as for <code>Complex</code>
but will be slower (to deal with division by zero and operations with <code>ComplexInf</code>
and <code>ComplexNaN</code>).</p>
<p>Some basic functions (such as <code>sqrt</code> and <code>exp</code>) are provided. See the <code>functions.jl</code>
file in the <code>src</code> directory.</p>
<h2><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Do</h2>
<p>Some <code>LinearAlgebra</code> operations don't work; I'm not sure why. For example,
evaluating the determinant of an <code>RC</code> matrix throws errors.</p>
</article></div>