<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-feedbackparticlefiltersjl" class="anchor" aria-hidden="true" href="#feedbackparticlefiltersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FeedbackParticleFilters.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width: 100%;"></a>
<a href="http://simsurace.github.io/FeedbackParticleFilters.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com//simsurace/FeedbackParticleFilters.jl/actions/workflows/ci.yaml"><img src="https://github.com//simsurace/FeedbackParticleFilters.jl/actions/workflows/ci.yml/badge.svg" alt="ci" style="max-width: 100%;"></a>
<a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/simsurace/FeedbackParticleFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7192d09f3642118c8c9daa1ba9c3d00eda294a61e8eadd95ebfa7e0c1b7672bf/68747470733a2f2f636f6465636f762e696f2f67682f73696d7375726163652f466565646261636b5061727469636c6546696c746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/simsurace/FeedbackParticleFilters.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package's aim is to provide a versatile and efficient feedback particle filter implementation in Julia, with abstractions to flexibly construct, run, and analyze feedback particle filters for a variety of uni- and multivariate filtering problems with both diffusion and point process observations.</p>
<p dir="auto">It provides implementations of the following algorithms:</p>
<ul dir="auto">
<li>Kalman-Bucy filter <code>KBF</code></li>
<li>Feedback Particle Filter <code>FPF</code></li>
<li>Bootstrap Particle Filter (weighted) <code>BPF</code></li>
<li>Point-process Feedback Particle Filter <code>ppFPF</code></li>
<li>Ensemble Kushner-Stratonovich-Poisson Filter <code>EKSPF</code></li>
</ul>
<p dir="auto">as well as</p>
<ul dir="auto">
<li>Hidden state and observation models: diffusions, Poisson processes, etc.</li>
<li>A variety of gain estimation methods: constant gain, semigroup, reproducing kernel Hilbert space, etc.</li>
<li>Deterministic particle flow</li>
</ul>
<p dir="auto">If you have questions or comments, please open an issue!</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is officially registered.
To install it, use the built-in package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add FeedbackParticleFilters"><pre>pkg<span class="pl-k">&gt;</span> add FeedbackParticleFilters</pre></div>
<p dir="auto">The package is currently tested on Julia 1.6-1.8, but should work on earlier versions too.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To load the package, use the command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FeedbackParticleFilters"><pre><span class="pl-k">using</span> FeedbackParticleFilters</pre></div>
<p dir="auto">Set up a basic one-dimensional linear-Gaussian continuous-time filtering problem:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributions
state_model = ScalarDiffusionStateModel(x-&gt;-x, x-&gt;sqrt(2.), Normal())
obs_model   = ScalarDiffusionObservationModel(x-&gt;x)

filt_prob   = FilteringProblem(state_model, obs_model)"><pre><span class="pl-k">using</span> Distributions
state_model <span class="pl-k">=</span> <span class="pl-c1">ScalarDiffusionStateModel</span>(x<span class="pl-k">-&gt;</span><span class="pl-k">-</span>x, x<span class="pl-k">-&gt;</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">2.</span>), <span class="pl-c1">Normal</span>())
obs_model   <span class="pl-k">=</span> <span class="pl-c1">ScalarDiffusionObservationModel</span>(x<span class="pl-k">-&gt;</span>x)

filt_prob   <span class="pl-k">=</span> <span class="pl-c1">FilteringProblem</span>(state_model, obs_model)</pre></div>
<p dir="auto">Once the filtering problem is defined, an appropriate filtering algorithm can be defined like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="method = ConstantGainApproximation()
filter = FPF(filt_prob, method, 100)"><pre>method <span class="pl-k">=</span> <span class="pl-c1">ConstantGainApproximation</span>()
filter <span class="pl-k">=</span> <span class="pl-c1">FPF</span>(filt_prob, method, <span class="pl-c1">100</span>)</pre></div>
<p dir="auto">The package comes with methods to automatically simulate a given system:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="simulation = ContinuousTimeSimulation(filt_prob, filter, 10000, 0.01)
run!(simulation)"><pre>simulation <span class="pl-k">=</span> <span class="pl-c1">ContinuousTimeSimulation</span>(filt_prob, filter, <span class="pl-c1">10000</span>, <span class="pl-c1">0.01</span>)
<span class="pl-c1">run!</span>(simulation)</pre></div>
<p dir="auto">To learn more about how to use this package, please check out some tutorials or the documentation linked below.</p>
<h2 dir="auto"><a id="user-content-tutorials" class="anchor" aria-hidden="true" href="#tutorials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials</h2>
<p dir="auto">There are various Jupyter notebooks that explore various key functions of the package:</p>
<ol dir="auto">
<li><a href="https://github.com/simsurace/FeedbackParticleFilters.jl/blob/master/notebooks/Getting_started.ipynb">Getting started</a></li>
<li>Gain estimation using the <a href="https://github.com/simsurace/FeedbackParticleFilters.jl/blob/master/notebooks/Gain_semigroup.ipynb">semigroup method</a></li>
<li><a href="https://github.com/simsurace/FeedbackParticleFilters.jl/blob/master/notebooks/Harmonic_oscillator.ipynb">Harmonic oscillator example</a></li>
</ol>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto"><a href="https://simsurace.github.io/FeedbackParticleFilters.jl/dev" rel="nofollow">In development...</a></p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">This package was developed as part of academic research at Department of Physiology, University of Bern, Switzerland.
The research was funded by the Swiss National Science Foundation.</p>
</article></div>