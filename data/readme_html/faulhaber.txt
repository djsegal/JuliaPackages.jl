<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-faulhaber" class="anchor" aria-hidden="true" href="#faulhaber"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faulhaber</h1>
<p dir="auto"><a href="https://YingboMa.github.io/Faulhaber.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://YingboMa.github.io/Faulhaber.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/YingboMa/Faulhaber.jl/actions"><img src="https://github.com/YingboMa/Faulhaber.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/YingboMa/Faulhaber.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e39cd4177181db63018abcdee3a357053e5c929882057a4e5ee1873edb8742be/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f4661756c68616265722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/YingboMa/Faulhaber.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Faulhaber.jl exports the <code>faulhaber(m, ::Val{p})</code> function which computes the
summation <code>sum(i-&gt;i^p, 1:m)</code> in <code>O(p)</code> time. When <code>m</code> is an integer, the
function returns an exact integer solution assuming integer overflows don't
occur. When <code>m</code> is a floating-point number, then it returns a less accurate
float solution.</p>
<p dir="auto">Examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools, Faulhaber

julia&gt; @btime faulhaber(Ref(Int128(2000))[], Val(7))
  1.143 ns (0 allocations: 0 bytes)
32064037333328666667000000

julia&gt; @btime sum(i-&gt;i^7, 1:Int128(2000))
  12.282 μs (0 allocations: 0 bytes)
32064037333328666667000000

julia&gt; @btime faulhaber(Ref(2000.0)[], Val(7))
  1.134 ns (0 allocations: 0 bytes)
3.2064037333328662e25"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, Faulhaber

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">faulhaber</span>(<span class="pl-c1">Ref</span>(<span class="pl-c1">Int128</span>(<span class="pl-c1">2000</span>))[], <span class="pl-c1">Val</span>(<span class="pl-c1">7</span>))
  <span class="pl-c1">1.143</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">32064037333328666667000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sum</span>(i<span class="pl-k">-&gt;</span>i<span class="pl-k">^</span><span class="pl-c1">7</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">Int128</span>(<span class="pl-c1">2000</span>))
  <span class="pl-c1">12.282</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">32064037333328666667000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">faulhaber</span>(<span class="pl-c1">Ref</span>(<span class="pl-c1">2000.0</span>)[], <span class="pl-c1">Val</span>(<span class="pl-c1">7</span>))
  <span class="pl-c1">1.134</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">3.2064037333328662e25</span></pre></div>
</article></div>