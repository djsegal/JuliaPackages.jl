<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cartesianjl" class="anchor" aria-hidden="true" href="#cartesianjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cartesian.jl</h1>
<p>Fast multidimensional algorithms for the Julia language.</p>
<p>This package provides macros that currently appear to be the most performant way
to implement numerous multidimensional algorithms in Julia.</p>
<h2><a id="user-content-news-cartesian-is-in-base-and-backwards-compatibility" class="anchor" aria-hidden="true" href="#news-cartesian-is-in-base-and-backwards-compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NEWS: Cartesian is in Base, and backwards compatibility</h2>
<p>If you're using at least a pre-release version of Julia 0.3, I recommend using the version
in base, which you can access with <code>using Base.Cartesian</code>.
I also recommend the base <a href="http://docs.julialang.org/en/latest/devdocs/cartesian/" rel="nofollow">documentation</a>.</p>
<p>At this point, the best purpose for this package is to provide a base-compatible
implementation of Cartesian for Julia 0.2. This was implemented in the
the 0.2 release of this package. Unfortunately, this changed several features,
including the naming convention for variables
(from <code>i1</code> to <code>i_1</code>). If you directly use these names (most likely, you do not), this will break your code.
Sorry about that. You can either pin the package at the 0.1.5 release, or make changes in your code.</p>
<h1><a id="user-content-legacy-documentation" class="anchor" aria-hidden="true" href="#legacy-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Legacy documentation</h1>
<p>The following documentation applies only for this package's 0.1 series. Use the
<a href="http://docs.julialang.org/en/latest/devdocs/cartesian/" rel="nofollow">Julia documentation</a> if you are using
a more recent version of this package.</p>
<h2><a id="user-content-caution" class="anchor" aria-hidden="true" href="#caution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caution</h2>
<p>In practice, <code>Cartesian</code> effectively introduces a separate "dialect" of
Julia. There is reason to hope that the main language will eventually
support much of this functionality, and if/when that happens some or all of this
should become obsolete. In the meantime, this package appears to be the most
powerful way to write efficient multidimensional algorithms.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install with the package manager, <code>Pkg.add("Cartesian")</code>.</p>
<h2><a id="user-content-principles-of-usage" class="anchor" aria-hidden="true" href="#principles-of-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Principles of usage</h2>
<p>Most macros in this package work like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nloops 3 i A begin
    s += @nref 3 A i
end
"><pre><code>@nloops 3 i A begin
    s += @nref 3 A i
end
</code></pre></div>
<p>which generates the following code:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for i3 = 1:size(A,3)
    for i2 = 1:size(A,2)
        for i1 = 1:size(A,1)
            s += A[i1,i2,i3]
        end
    end
end
"><pre><code>for i3 = 1:size(A,3)
    for i2 = 1:size(A,2)
        for i1 = 1:size(A,1)
            s += A[i1,i2,i3]
        end
    end
end
</code></pre></div>
<p>The (basic) syntax of <code>@nloops</code> is as follows:</p>
<ul>
<li>The first argument must be an integer (<em>not</em> a variable) specifying the number
of loops.</li>
<li>The second argument is the symbol-prefix used for the iterator variable. Here
we used <code>i</code>, and variables <code>i1, i2, i3</code> were generated.</li>
<li>The third argument specifies the range for each iterator variable. If you use
a variable (symbol) here, it's taken as <code>1:size(A,dim)</code>. More flexibly, you can
use the anonymous-function expression syntax described below.</li>
<li>The last argument is the body of the loop. Here, that's what appears between
the <code>begin...end</code>.</li>
</ul>
<p>There are some additional features described
<a href="https://github.com/timholy/Cartesian.jl#core-macros">below</a>.</p>
<p><code>@nref</code> follows a similar pattern, generating <code>A[i1,i2,i3]</code> from <code>@nref 3 A i</code>.
The general practice is to read from left to right, which is why
<code>@nloops</code> is <code>@nloops 3 i A expr</code> (as in <code>for i2 = 1:size(A,2)</code>, where <code>i2</code> is
to the left and the range is to the right) whereas <code>@nref</code> is <code>@nref 3 A i</code> (as
in <code>A[i1,i2,i3]</code>, where the array comes first).</p>
<p>If you're developing code with Cartesian, you may find that debugging is made
easier when you can see the generated code. This is possible via the
(unexported) underscore-function variants:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Cartesian._nref(3, :A, :i)
:($(Expr(:escape, :(A[i1,i2,i3]))))
"><pre><code>julia&gt; Cartesian._nref(3, :A, :i)
:($(Expr(:escape, :(A[i1,i2,i3]))))
</code></pre></div>
<p>and similarly for <code>Cartesian._nloops</code>.</p>
<p>There are two additional important general points described below.</p>
<h4><a id="user-content-supplying-the-dimensionality-from-functions" class="anchor" aria-hidden="true" href="#supplying-the-dimensionality-from-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supplying the dimensionality from functions</h4>
<p>The first argument to both of these macros is the dimensionality, which must be
an integer. When you're writing a function that you intend to work in multiple
dimensions, this may not be something you want to hard-code. Fortunately, it's
straightforward to use an <code>@eval</code> construct, like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for N = 1:4
    @eval begin
        function laplacian{T}(A::Array{T,$N})
            B = similar(A)
            @nloops $N i A begin
                ...
            end
        end
    end
end
"><pre><code>for N = 1:4
    @eval begin
        function laplacian{T}(A::Array{T,$N})
            B = similar(A)
            @nloops $N i A begin
                ...
            end
        end
    end
end
</code></pre></div>
<p>This would generate versions of <code>laplacian</code> for dimensions 1 through 4. While
it's somewhat more awkward, you can generate truly arbitrary-dimension functions
using a wrapper that keeps track of whether it has already compiled a version of
the function for different dimensionalities and data types:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="let _mysum_defined = Dict{Any, Bool}()
global mysum
function mysum{T,N}(A::StridedArray{T,N})
    def = get(_mysum_defined, typeof(A), false)
    if !def
        ex = quote
            function _mysum{T}(A::StridedArray{T,$N})
                s = zero(T)
                @nloops $N i A begin
                    s += @nref $N A i
                end
                s
            end
        end
        eval(current_module(), ex)
        _mysum_defined[typeof(A)] = true
    end
    _mysum(A)
end
end
"><pre><code>let _mysum_defined = Dict{Any, Bool}()
global mysum
function mysum{T,N}(A::StridedArray{T,N})
    def = get(_mysum_defined, typeof(A), false)
    if !def
        ex = quote
            function _mysum{T}(A::StridedArray{T,$N})
                s = zero(T)
                @nloops $N i A begin
                    s += @nref $N A i
                end
                s
            end
        end
        eval(current_module(), ex)
        _mysum_defined[typeof(A)] = true
    end
    _mysum(A)
end
end
</code></pre></div>
<p>In addition to being longer than the first version, there's a (small)
performance price for checking the dictionary.</p>
<h4><a id="user-content-anonymous-function-expressions-as-macro-arguments" class="anchor" aria-hidden="true" href="#anonymous-function-expressions-as-macro-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Anonymous-function expressions as macro arguments</h4>
<p>Perhaps the single most powerful feature in <code>Cartesian</code> is the ability to supply
anonymous-function expressions to many macros. Let's consider implementing the
<code>laplacian</code> function mentioned above. The (discrete) laplacian of a two
dimensional array would be calculated as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="lap[i,j] = A[i+1,j] + A[i-1,j] + A[i,j+1] + A[i,j-1] - 4A[i,j]
"><pre><code>lap[i,j] = A[i+1,j] + A[i-1,j] + A[i,j+1] + A[i,j-1] - 4A[i,j]
</code></pre></div>
<p>One obvious issue with this formula is how to handle the edges, where <code>A[i-1,j]</code>
might not exist. As a first illustration of anonymous-function expressions,
for now let's take the easy way out and avoid dealing with them (later you'll
see how you can handle them properly). In 2d we might write
such code as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for i2 = 2:size(A,2)-1
    for i1 = 2:size(A,1)-1
        lap[i1,i2] = ...
    end
end
"><pre><code>for i2 = 2:size(A,2)-1
    for i1 = 2:size(A,1)-1
        lap[i1,i2] = ...
    end
end
</code></pre></div>
<p>where one should note that the range <code>2:size(A,2)-1</code> omits the first and last
index.</p>
<p>In <code>Cartesian</code> this can be written in the following way:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nloops 2 i d-&gt;(2:size(A,d)-1) begin
    (@nref 2 lap i) = ...
end
"><pre><code>@nloops 2 i d-&gt;(2:size(A,d)-1) begin
    (@nref 2 lap i) = ...
end
</code></pre></div>
<p>Note here that the range argument is being supplied as an anonymous function. A
key point is that this anonymous function is <em>evaluated when the macro runs</em>.
(Whatever symbol appears as the variable of the anonymous function, here <code>d</code>, is
looped over the dimensionality.) Effectively, this expression gets <em>inlined</em>,
and hence generates exactly the code above with no extra runtime overhead.</p>
<p>There is an important bit of extra syntax associated with these expressions: the
expression <code>i_d</code>, for <code>d=3</code>, is translated into <code>i3</code>. Suppose we have two sets
of variables, a "main" group of indices <code>i1</code>, <code>i2</code>, and <code>i3</code>, and an "offset" group
of indices <code>j1</code>, <code>j2</code>, and <code>j3</code>. Then the expression</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nref 3 A d-&gt;(i_d+j_d)
"><pre><code>@nref 3 A d-&gt;(i_d+j_d)
</code></pre></div>
<p>gets translated into</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="A[i1+j1, i2+j2, i3+j3]
"><pre><code>A[i1+j1, i2+j2, i3+j3]
</code></pre></div>
<p>The <code>_</code> notation mimics the subscript notation of LaTeX; also like LaTeX, you
can use curly-braces to group sub-expressions. For example,
<code>d-&gt;p_{d-1}=p_d-1</code> generates <code>p2 = p3 - 1</code>.</p>
<h2><a id="user-content-a-complete-example-implementing-imfilter" class="anchor" aria-hidden="true" href="#a-complete-example-implementing-imfilter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A complete example: implementing <code>imfilter</code></h2>
<p>With this, we have enough machinery to implement a simple multidimensional
function <code>imfilter</code>, which computes the correlation (similar to a convolution)
between an array <code>A</code> and a filtering kernel <code>kern</code>. We're going to require that
<code>kernel</code> has odd-valued sizes along each dimension, say of size <code>2*w[d]+1</code>, and
suppose that there is a function <code>padarray</code> that pads <code>A</code> with width <code>w[d]</code>
along each edge in dimension <code>d</code>, using whatever boundary conditions the user
desires.</p>
<p>A complete implementation of <code>imfilter</code> is:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for N = 1:5
    @eval begin
        function imfilter{T}(A::Array{T,$N}, kern::Array{T,$N}, boundaryargs...)
            w = [div(size(kern, d), 2) for d = 1:$N]
            for d = 1:$N
                if size(kern, d) != 2*w[d]+1
                    error(&quot;kernel must have odd size in each dimension&quot;)
                end
            end
            Apad = padarray(A, w, boundaryargs...)
            B = similar(A)
            @nloops $N i A begin
                # Compute the filtered value
                tmp = zero(T)
                @nloops $N j kern begin
                    tmp += (@nref $N Apad d-&gt;(i_d+j_d-1))*(@nref $N kern j)
                end
                # Store the result
                (@nref $N B i) = tmp     # note the ()
            end
            B
        end
    end
end
"><pre><code>for N = 1:5
    @eval begin
        function imfilter{T}(A::Array{T,$N}, kern::Array{T,$N}, boundaryargs...)
            w = [div(size(kern, d), 2) for d = 1:$N]
            for d = 1:$N
                if size(kern, d) != 2*w[d]+1
                    error("kernel must have odd size in each dimension")
                end
            end
            Apad = padarray(A, w, boundaryargs...)
            B = similar(A)
            @nloops $N i A begin
                # Compute the filtered value
                tmp = zero(T)
                @nloops $N j kern begin
                    tmp += (@nref $N Apad d-&gt;(i_d+j_d-1))*(@nref $N kern j)
                end
                # Store the result
                (@nref $N B i) = tmp     # note the ()
            end
            B
        end
    end
end
</code></pre></div>
<p>The line</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="tmp += (@nref $N Apad d-&gt;(i_d+j_d-1))*(@nref $N kern j)
"><pre><code>tmp += (@nref $N Apad d-&gt;(i_d+j_d-1))*(@nref $N kern j)
</code></pre></div>
<p>gets translated into</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="tmp += Apad[i1+j1-1, i2+j2-1, ...] * kern[j1, j2, ...]
"><pre><code>tmp += Apad[i1+j1-1, i2+j2-1, ...] * kern[j1, j2, ...]
</code></pre></div>
<p>We also note that the assignment to <code>B</code> requires parenthesis around the <code>@nref</code>,
because otherwise the expression <code>i = tmp</code> would be passed as the final argument
of the <code>@nref</code> macro.</p>
<h2><a id="user-content-a-complete-example-implementing-laplacian" class="anchor" aria-hidden="true" href="#a-complete-example-implementing-laplacian"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A complete example: implementing <code>laplacian</code></h2>
<p>We could implement the laplacian with <code>imfilter</code>, but that would be quite
wasteful: we don't need the "corners" of the 3x3x... grid, just its edges and
center. Consequently, we can write a considerably faster algorithm, where the
advantage over <code>imfilter</code> would grow rapidly with dimensionality. Implementing
this algorithm will further illustrate the flexibility of anonymous-function
range expressions as well as another key macro, <code>@nexprs</code>.</p>
<p>In two dimensions, we'll generate the following code, which uses "replicating
boundary conditions" to handle the edges gracefully:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function laplacian{T}(A::Array{T,2})
    B = similar(A)
    for i2 = 1:size(A,2), i1 = 1:size(A,1)
        tmp = zero(T)
        tmp += i1 &lt; size(A,1) ? A[i1+1,i2] : A[i1,i2]
        tmp += i2 &lt; size(A,2) ? A[i1,i2+1] : A[i1,i2]
        tmp += i1 &gt; 1 ? A[i1-1,i2] : A[i1,i2]
        tmp += i2 &gt; 1 ? A[i1,i2-1] : A[i1,i2]
        B[i1,i2] = tmp - 4*A[i1,i2]
    end
    B
end
"><pre><code>function laplacian{T}(A::Array{T,2})
    B = similar(A)
    for i2 = 1:size(A,2), i1 = 1:size(A,1)
        tmp = zero(T)
        tmp += i1 &lt; size(A,1) ? A[i1+1,i2] : A[i1,i2]
        tmp += i2 &lt; size(A,2) ? A[i1,i2+1] : A[i1,i2]
        tmp += i1 &gt; 1 ? A[i1-1,i2] : A[i1,i2]
        tmp += i2 &gt; 1 ? A[i1,i2-1] : A[i1,i2]
        B[i1,i2] = tmp - 4*A[i1,i2]
    end
    B
end
</code></pre></div>
<p>To generate those terms with all but one of the indices unaltered, we'll use
an anonymous function like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="d2-&gt;(d2 == d1) ? i_d2+1 : i_d2
"><pre><code>d2-&gt;(d2 == d1) ? i_d2+1 : i_d2
</code></pre></div>
<p>which shifts by 1 only when <code>d2 == d1</code>. We'll use the macro <code>@nexprs</code>
(documented below) to generate the <code>N</code> expressions we need. Here is the complete
implementation for dimensions 1 through 5:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for N = 1:5
    @eval begin
        function laplacian{T}(A::Array{T,$N})
            B = similar(A)
            @nloops $N i A begin
                tmp = zero(T)
                # Do the shift by +1.
                @nexprs $N d1-&gt;begin
                    tmp += (i_d1 &lt; size(A,d1)) ? (@nref $N A d2-&gt;(d2==d1)?i_d2+1:i_d2) : (@nref $N A i)
                end
                # Do the shift by -1.
                @nexprs $N d1-&gt;begin
                    tmp += (i_d1 &gt; 1) ? (@nref $N A d2-&gt;(d2==d1)?i_d2-1:i_d2) : (@nref $N A i)
                end
                # Subtract the center and store the result
                (@nref $N B i) = tmp - 2*$N*(@nref $N A i)
            end
            B
        end
    end
end
"><pre><code>for N = 1:5
    @eval begin
        function laplacian{T}(A::Array{T,$N})
            B = similar(A)
            @nloops $N i A begin
                tmp = zero(T)
                # Do the shift by +1.
                @nexprs $N d1-&gt;begin
                    tmp += (i_d1 &lt; size(A,d1)) ? (@nref $N A d2-&gt;(d2==d1)?i_d2+1:i_d2) : (@nref $N A i)
                end
                # Do the shift by -1.
                @nexprs $N d1-&gt;begin
                    tmp += (i_d1 &gt; 1) ? (@nref $N A d2-&gt;(d2==d1)?i_d2-1:i_d2) : (@nref $N A i)
                end
                # Subtract the center and store the result
                (@nref $N B i) = tmp - 2*$N*(@nref $N A i)
            end
            B
        end
    end
end
</code></pre></div>
<h2><a id="user-content-reductions-and-broadcasting" class="anchor" aria-hidden="true" href="#reductions-and-broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reductions and broadcasting</h2>
<p>Cartesian makes it easy to implement reductions and broadcasting,
using the "pre" and "post" expression syntax described
<a href="https://github.com/timholy/Cartesian.jl#core-macros">below</a>.
Suppose we want to implement a function that can compute the maximum
along user-supplied dimensions of an array:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="B = maxoverdims(A, (1,2))  # computes the max of A along dimensions 1&amp;2
"><pre><code>B = maxoverdims(A, (1,2))  # computes the max of A along dimensions 1&amp;2
</code></pre></div>
<p>but allow the user to choose these dimensions arbitrarily. For two-dimensional arrays,
we might hand-write such code in the following way:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function maxoverdims{T}(A::AbstractMatrix{T}, region)
    szout = [size(A,1), size(A,2)]
    szout[[region...]] = 1   # output has unit-size in chosen dimensions
    B = fill(typemin(T), szout...)::Array{T,2}  # julia can't infer dimensionality here
    szout1 = szout[1]
    szout2 = szout[2]
    for i2 = 1:size(A, 2)
        j2 = szout2 == 1 ? 1 : i2
        for i1 = 1:size(A, 1)
            j1 = szout1 == 1 ? 1 : i1
            @inbounds B[j1,j2] = max(B[j1,j2], A[i1,i2])
        end
    end
    B
end
"><pre><code>function maxoverdims{T}(A::AbstractMatrix{T}, region)
    szout = [size(A,1), size(A,2)]
    szout[[region...]] = 1   # output has unit-size in chosen dimensions
    B = fill(typemin(T), szout...)::Array{T,2}  # julia can't infer dimensionality here
    szout1 = szout[1]
    szout2 = szout[2]
    for i2 = 1:size(A, 2)
        j2 = szout2 == 1 ? 1 : i2
        for i1 = 1:size(A, 1)
            j1 = szout1 == 1 ? 1 : i1
            @inbounds B[j1,j2] = max(B[j1,j2], A[i1,i2])
        end
    end
    B
end
</code></pre></div>
<p>This code can be generated for arbitrary dimensions in the following way:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for N = 1:4
    @eval begin
        function maxoverdims{T}(A::AbstractArray{T,$N}, region)
            szout = [size(A,d) for d = 1:$N]
            szout[[region...]] = 1
            B = fill(typemin(T), szout...)::Array{T,$N}
            Cartesian.@nextract $N szout szout
            Cartesian.@nloops $N i A d-&gt;(j_d = szout_d==1 ? 1 : i_d) begin
                @inbounds (Cartesian.@nref $N B j) = max((Cartesian.@nref $N B j), (Cartesian.@nref $N A i))
            end
            B
        end
    end
end
"><pre><code>for N = 1:4
    @eval begin
        function maxoverdims{T}(A::AbstractArray{T,$N}, region)
            szout = [size(A,d) for d = 1:$N]
            szout[[region...]] = 1
            B = fill(typemin(T), szout...)::Array{T,$N}
            Cartesian.@nextract $N szout szout
            Cartesian.@nloops $N i A d-&gt;(j_d = szout_d==1 ? 1 : i_d) begin
                @inbounds (Cartesian.@nref $N B j) = max((Cartesian.@nref $N B j), (Cartesian.@nref $N A i))
            end
            B
        end
    end
end
</code></pre></div>
<p>You might be slightly concerned about the conditional expression
inside the inner-most loop, and what influence that might have on performance.
Fortunately, in most cases the impact seems to be very modest (in the
author's tests, a few percent). The reason is that on any given execution of
this function, each one of these branches always resolves the same way.
Consequently, the CPU can learn to predict, with 100% accuracy, which branch
will be taken. The computation time is therefore dominated by the cache-misses
generated by traversing the array.</p>
<h2><a id="user-content-macro-reference" class="anchor" aria-hidden="true" href="#macro-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Macro reference</h2>
<h3><a id="user-content-core-macros" class="anchor" aria-hidden="true" href="#core-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Core macros</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nloops N itersym rangeexpr bodyexpr
@nloops N itersym rangeexpr preexpr bodyexpr
@nloops N itersym rangeexpr preexpr postexpr bodyexpr
"><pre><code>@nloops N itersym rangeexpr bodyexpr
@nloops N itersym rangeexpr preexpr bodyexpr
@nloops N itersym rangeexpr preexpr postexpr bodyexpr
</code></pre></div>
<p>Generate <code>N</code> nested loops, using <code>itersym</code> as the prefix for the iteration
variables. <code>rangeexpr</code> may be an anonymous-function expression, or a simple
symbol <code>var</code> in which case the range is <code>1:size(var,d)</code> for dimension <code>d</code>.</p>
<p>Optionally, you can provide "pre" and "post" expressions. These get executed
first and last, respectively, in the body of each loop. For example,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nloops 2 i A d-&gt;j_d=min(i_d,5) begin
    s += @nref 2 A j
end
"><pre><code>@nloops 2 i A d-&gt;j_d=min(i_d,5) begin
    s += @nref 2 A j
end
</code></pre></div>
<p>would generate</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for i2 = 1:size(A, 2)
    j2 = min(i2, 5)
    for i1 = 1:size(A, 1)
        j1 = min(i1, 5)
        s += A[j1, j2]
    end
end
"><pre><code>for i2 = 1:size(A, 2)
    j2 = min(i2, 5)
    for i1 = 1:size(A, 1)
        j1 = min(i1, 5)
        s += A[j1, j2]
    end
end
</code></pre></div>
<p>If you want just a post-expression, supply <code>nothing</code> for the pre-expression.
Using parenthesis and semicolons, you can supply multi-statement expressions.</p>
<br>
```
@nref N A indexexpr
```
Generate expressions like `A[i1,i2,...]`. `indexexpr` can either be an
iteration-symbol prefix, or an anonymous-function expression.
<br>
```
@nexpr N expr
```
Generate `N` expressions. `expr` should be an anonymous-function expression. See
the `laplacian` example above.
<br>
```
@nextract N esym isym
```
Given a tuple or vector `I` of length `N`, `@nextract 3 I I` would generate the
expression `I1, I2, I3 = I`, thereby extracting each element of `I` into a
separate variable.
<br>
```
@nall N expr
```
`@nall 3 d-&gt;(i_d &gt; 1)` would generate the expression
`(i1 &gt; 1 &amp;&amp; i2 &gt; 1 &amp;&amp; i3 &gt; 1)`. This can be convenient for bounds-checking.
<br>
```
P, k = @nlinear N A indexexpr
```
Given an `Array` or `SubArray` `A`, `P, k = @nlinear N A indexexpr` generates an
array `P` and a linear index `k` for which `P[k]` is equivalent to
`@nref N A indexexpr`. Use this when it would be most convenient to implement an
algorithm
using linear-indexing.
<p>This is particularly useful when an anonymous-function
expression cannot be evaluated at compile-time. For example, using an
example from <code>Images</code>, suppose you wanted to iterate over each pixel and perform
a calculation base on the color dimension of an array. In particular, we have a
function <code>rgb</code> which generates an RGB color from 3 numbers. We can do this for
each pixel of the array in the following way:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sz = [size(img,d) for d = 1:ndims(img)]
cd = colordim(img)  # determine which dimension of img represents color
sz[cd] = 1          # we'll &quot;iterate&quot; over color separately
strd = stride(img, cd)
@nextract $N sz sz
A = data(img)
@nloops $N i d-&gt;1:sz_d begin
    P, k = @nlinear $N A i
    rgbval = rgb(P[k], P[k+strd], P[k+2strd])
end
"><pre><code>sz = [size(img,d) for d = 1:ndims(img)]
cd = colordim(img)  # determine which dimension of img represents color
sz[cd] = 1          # we'll "iterate" over color separately
strd = stride(img, cd)
@nextract $N sz sz
A = data(img)
@nloops $N i d-&gt;1:sz_d begin
    P, k = @nlinear $N A i
    rgbval = rgb(P[k], P[k+strd], P[k+2strd])
end
</code></pre></div>
<p>It appears to be difficult to generate code like this just using <code>@nref</code>,
because the expression <code>d-&gt;(d==cd)</code> could not be evaluated at compile-time.</p>
<h3><a id="user-content-additional-macros" class="anchor" aria-hidden="true" href="#additional-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional macros</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@ntuple N itersym
@ntuple N expr
"><pre><code>@ntuple N itersym
@ntuple N expr
</code></pre></div>
<p>Generates an <code>N</code>-tuple from a symbol prefix (e.g., <code>(i1,i2,...)</code>) or an
anonymous-function expression.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nrefshift N A i j
"><pre><code>@nrefshift N A i j
</code></pre></div>
<p>Generates <code>A[i1+j1,i2+j2,...]</code>. This is legacy from before <code>@nref</code> accepted
anonymous-function expressions.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@nlookup N A I i
"><pre><code>@nlookup N A I i
</code></pre></div>
<p>Generates <code>A[I1[i1], I2[i2], ...]</code>. This can also be easily achieved with
<code>@nref</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@indexedvariable N i
"><pre><code>@indexedvariable N i
</code></pre></div>
<p>Generates the expression <code>iN</code>, e.g., <code>@indexedvariable 2 i</code> would generate <code>i2</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@forcartesian itersym sz bodyexpr
"><pre><code>@forcartesian itersym sz bodyexpr
</code></pre></div>
<p>This is the oldest macro in the collection, and quite an outlier in terms of
functionality:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sz = [5,3]
@forcartesian c sz begin
    println(c)
end
"><pre><code>sz = [5,3]
@forcartesian c sz begin
    println(c)
end
</code></pre></div>
<p>This generates the following output:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[1, 1]
[2, 1]
[3, 1]
[4, 1]
[5, 1]
[1, 2]
[2, 2]
[3, 2]
[4, 2]
[5, 2]
[1, 3]
[2, 3]
[3, 3]
[4, 3]
[5, 3]
"><pre><code>[1, 1]
[2, 1]
[3, 1]
[4, 1]
[5, 1]
[1, 2]
[2, 2]
[3, 2]
[4, 2]
[5, 2]
[1, 3]
[2, 3]
[3, 3]
[4, 3]
[5, 3]
</code></pre></div>
<p>From the simple example above, <code>@forcartesian</code> generates a block of code like
this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="if !(isempty(sz) || prod(sz) == 0)
    N = length(sz)
    c = ones(Int, N)
    sz1 = sz[1]
    isdone = false
    while !isdone
        println(c)           # This is whatever code we put inside the &quot;loop&quot;
        if (c[1]+=1) &gt; sz1
            idim = 1
            while c[idim] &gt; sz[idim] &amp;&amp; idim &lt; N
                c[idim] = 1
                idim += 1
                c[idim] += 1
            end
            isdone = c[end] &gt; sz[end]
        end
    end
end
"><pre><span class="pl-k">if</span> <span class="pl-k">!</span>(<span class="pl-c1">isempty</span>(sz) <span class="pl-k">||</span> <span class="pl-c1">prod</span>(sz) <span class="pl-k">==</span> <span class="pl-c1">0</span>)
    N <span class="pl-k">=</span> <span class="pl-c1">length</span>(sz)
    c <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Int, N)
    sz1 <span class="pl-k">=</span> sz[<span class="pl-c1">1</span>]
    isdone <span class="pl-k">=</span> <span class="pl-c1">false</span>
    <span class="pl-k">while</span> <span class="pl-k">!</span>isdone
        <span class="pl-c1">println</span>(c)           <span class="pl-c"><span class="pl-c">#</span> This is whatever code we put inside the "loop"</span>
        <span class="pl-k">if</span> (c[<span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-c1">1</span>) <span class="pl-k">&gt;</span> sz1
            idim <span class="pl-k">=</span> <span class="pl-c1">1</span>
            <span class="pl-k">while</span> c[idim] <span class="pl-k">&gt;</span> sz[idim] <span class="pl-k">&amp;&amp;</span> idim <span class="pl-k">&lt;</span> N
                c[idim] <span class="pl-k">=</span> <span class="pl-c1">1</span>
                idim <span class="pl-k">+=</span> <span class="pl-c1">1</span>
                c[idim] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
            <span class="pl-k">end</span>
            isdone <span class="pl-k">=</span> c[<span class="pl-c1">end</span>] <span class="pl-k">&gt;</span> sz[<span class="pl-c1">end</span>]
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>This has more overhead than the direct for-loop approach of <code>@nloops</code>, but for
many algorithms this shouldn't matter. Its advantage is that the dimensionality
does not need to be known at compile-time.</p>
<h2><a id="user-content-performance-improvements-for-subarrays" class="anchor" aria-hidden="true" href="#performance-improvements-for-subarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance improvements for SubArrays</h2>
<p>Julia currently lacks efficient linear-indexing for generic <code>SubArrays</code>.
Consequently, cartesian indexing is the only high-performance way to
address elements of <code>SubArray</code>s. Many simple algorithms, like <code>sum</code>, can have
their performance boosted immensely by implementing them for <code>SubArray</code>s using
<code>Cartesian</code>. For example, in 3d it's easy to get a boost on the scale of
100-fold.</p>
</article></div>