<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text">
<div align="center" dir="auto"> <a target="_blank" rel="noopener noreferrer" href="ome-logo.png"><img src="ome-logo.png" alt="OMEinsum logo" width="510" style="max-width: 100%;"></a>
<h1 dir="auto"><a id="user-content-omeinsum---one-more-einsum" class="anchor" aria-hidden="true" href="#omeinsum---one-more-einsum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OMEinsum - One More Einsum</h1>
</div>
<p dir="auto"><a href="https://under-Peter.github.io/OMEinsum.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/under-Peter/OMEinsum.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b143cb107c64218459067f6659cf66ed9d84a0b7df4a5bbd4a152458376889c/68747470733a2f2f7472617669732d63692e636f6d2f756e6465722d50657465722f4f4d45696e73756d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/under-Peter/OMEinsum.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/under-Peter/OMEinsum.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f466a02e1d3de92dc6e73b6ca1f262f4dd9a2e1483a71f0633588311addd232f/68747470733a2f2f636f6465636f762e696f2f67682f756e6465722d50657465722f4f4d45696e73756d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/under-Peter/OMEinsum.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a repository for the <em>Google Summer of Code</em> project on <em>Differentiable Tensor Networks</em>.
It implements one function that both computer scientists and physicists love, the <em>Einstein summation</em></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/under-Peter/OMEinsum.jl/blob/master/docs/einsum_define.png?raw=true"><img alt="einsum definition" src="https://github.com/under-Peter/OMEinsum.jl/raw/master/docs/einsum_define.png?raw=true" width="300/" style="max-width: 100%;"></a></p>
<p dir="auto">To find out the details about einsum, please check out my <a href="https://nextjournal.com/under-Peter/julia-summer-of-einsum" rel="nofollow">nextjournal-article</a> or the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html" rel="nofollow">numpy-manual</a>.</p>
<p dir="auto">Einstein summation can be implemented in no more than 20 lines of Julia code, the automatic differentiation is also <a href="https://giggleliu.github.io/2019/04/02/einsumbp.html" rel="nofollow">straightforward</a>. The main effort of this package is improving the <a href="https://github.com/under-Peter/OMEinsum-Benchmarks">performance</a> utilizing Julia <a href="https://white.ucc.asn.au/2018/10/03/Dispatch,-Traits-and-Metaprogramming-Over-Reflection.html" rel="nofollow">multiple dispatch on traits</a>. So that people can enjoy the speed of faster specific implementations like BLAS functions, <code>sum</code> and <code>permutedims</code> on both CPU and GPU without suffering from runtime overhead.</p>
<p dir="auto"><em>Note: why the test coverage is not 100%</em> - GPU-code coverage is not evaluated although we test the GPU code properly on gitlab. Ignoring the GPU-code, the actual coverage is at about <em>97%</em>.</p>
<p dir="auto"><em>Warning: since v0.4, OMEinsum does not optimize the contraction order anymore. One has to use nested einsum to specify the contraction order manually, e.g. <code>ein"(ijk,jkl),klm-&gt;im"(x, y, z)</code>.</em></p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<p dir="auto">To install, type <code>]</code> in a julia (&gt;=1.5) REPL and then input</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add OMEinsum"><pre>pkg<span class="pl-k">&gt;</span> add OMEinsum</pre></div>
<h2 dir="auto"><a id="user-content-learn-by-examples" class="anchor" aria-hidden="true" href="#learn-by-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Learn by Examples</h2>
<p dir="auto">To avoid runtime overhead, we recommend users to use <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/#Non-Standard-String-Literals-1" rel="nofollow">non-standard string literal</a> <code>@ein_str</code>. The following examples illustrates how <code>einsum</code> works</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OMEinsum, SymEngine

julia&gt; catty = fill(Basic(:🐱), 2, 2)
2×2 Array{Basic,2}:
 🐱  🐱
 🐱  🐱

julia&gt; fish = fill(Basic(:🐟), 2, 3, 2)
2×3×2 Array{Basic,3}:
[:, :, 1] =
 🐟  🐟  🐟
 🐟  🐟  🐟

[:, :, 2] =
 🐟  🐟  🐟
 🐟  🐟  🐟

julia&gt; snake = fill(Basic(:🐍), 3, 3)
3×3 Array{Basic,2}:
 🐍  🐍  🐍
 🐍  🐍  🐍
 🐍  🐍  🐍

julia&gt; medicine = ein&quot;ij,jki,kk-&gt;k&quot;(catty, fish, snake)
3-element Array{Basic,1}:
 4*🐱*🐍*🐟
 4*🐱*🐍*🐟
 4*🐱*🐍*🐟

julia&gt; ein&quot;ik,kj -&gt; ij&quot;(catty, catty) # multiply two matrices `a` and `b`
2×2 Array{Basic,2}:
 2*🐱^2  2*🐱^2
 2*🐱^2  2*🐱^2

julia&gt; ein&quot;ij -&gt; &quot;(catty)[] # sum a matrix, output 0-dimensional array
4*🐱

julia&gt; ein&quot;-&gt;ii&quot;(asarray(snake[1,1]), size_info=Dict('i'=&gt;5)) # get 5 x 5 identity matrix
5×5 Array{Basic,2}:
 🐍  0  0  0  0
 0  🐍  0  0  0
 0  0  🐍  0  0
 0  0  0  🐍  0
 0  0  0  0  🐍"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OMEinsum, SymEngine

julia<span class="pl-k">&gt;</span> catty <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">Basic</span>(<span class="pl-c1">:🐱</span>), <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Basic,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 🐱  🐱
 🐱  🐱

julia<span class="pl-k">&gt;</span> fish <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">Basic</span>(<span class="pl-c1">:🐟</span>), <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Basic,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 🐟  🐟  🐟
 🐟  🐟  🐟

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 🐟  🐟  🐟
 🐟  🐟  🐟

julia<span class="pl-k">&gt;</span> snake <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">Basic</span>(<span class="pl-c1">:🐍</span>), <span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Basic,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 🐍  🐍  🐍
 🐍  🐍  🐍
 🐍  🐍  🐍

julia<span class="pl-k">&gt;</span> medicine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>ij,jki,kk-&gt;k<span class="pl-pds">"</span></span>(catty, fish, snake)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Basic,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span><span class="pl-k">*</span>🐱<span class="pl-k">*</span>🐍<span class="pl-k">*</span>🐟
 <span class="pl-c1">4</span><span class="pl-k">*</span>🐱<span class="pl-k">*</span>🐍<span class="pl-k">*</span>🐟
 <span class="pl-c1">4</span><span class="pl-k">*</span>🐱<span class="pl-k">*</span>🐍<span class="pl-k">*</span>🐟

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>ik,kj -&gt; ij<span class="pl-pds">"</span></span>(catty, catty) <span class="pl-c"><span class="pl-c">#</span> multiply two matrices `a` and `b`</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Basic,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span><span class="pl-k">*</span>🐱<span class="pl-k">^</span><span class="pl-c1">2</span>  <span class="pl-c1">2</span><span class="pl-k">*</span>🐱<span class="pl-k">^</span><span class="pl-c1">2</span>
 <span class="pl-c1">2</span><span class="pl-k">*</span>🐱<span class="pl-k">^</span><span class="pl-c1">2</span>  <span class="pl-c1">2</span><span class="pl-k">*</span>🐱<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>ij -&gt; <span class="pl-pds">"</span></span>(catty)[] <span class="pl-c"><span class="pl-c">#</span> sum a matrix, output 0-dimensional array</span>
<span class="pl-c1">4</span><span class="pl-k">*</span>🐱

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>-&gt;ii<span class="pl-pds">"</span></span>(<span class="pl-c1">asarray</span>(snake[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]), size_info<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">'</span>i<span class="pl-pds">'</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">5</span>)) <span class="pl-c"><span class="pl-c">#</span> get 5 x 5 identity matrix</span>
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Basic,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 🐍  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  🐍  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  🐍  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  🐍  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  🐍</pre></div>
<p dir="auto">Alternatively, people can specify the contraction with a construction approach, which is useful when the contraction code can only be obtained at run time</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; einsum(EinCode((('i','k'),('k','j')),('i','j')),(a,b))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">einsum</span>(<span class="pl-c1">EinCode</span>(((<span class="pl-s"><span class="pl-pds">'</span>i<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>k<span class="pl-pds">'</span></span>),(<span class="pl-s"><span class="pl-pds">'</span>k<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>j<span class="pl-pds">'</span></span>)),(<span class="pl-s"><span class="pl-pds">'</span>i<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>j<span class="pl-pds">'</span></span>)),(a,b))</pre></div>
<p dir="auto">or a macro based interface, <code>@ein</code> macro,
which is closer to the standard way of writing einsum-operations in physics</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @ein c[i,j] := a[i,k] * b[k,j];"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@ein</span> c[i,j] <span class="pl-k">:=</span> a[i,k] <span class="pl-k">*</span> b[k,j];</pre></div>
<h4 dir="auto"><a id="user-content-a-table-for-reference" class="anchor" aria-hidden="true" href="#a-table-for-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A table for reference</h4>
<table>
<thead>
<tr>
<th>code</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ein"ij,jk-&gt;ik"</code></td>
<td>matrix matrix multiplication</td>
</tr>
<tr>
<td><code>ein"ijl,jkl-&gt;ikl"</code></td>
<td>batched - matrix matrix multiplication</td>
</tr>
<tr>
<td><code>ein"ij,j-&gt;i"</code></td>
<td>matrix vector multiplication</td>
</tr>
<tr>
<td><code>ein"ij,ik,il-&gt;jkl"</code></td>
<td>star contraction</td>
</tr>
<tr>
<td><code>ein"ii-&gt;"</code></td>
<td>trace</td>
</tr>
<tr>
<td><code>ein"ij-&gt;i"</code></td>
<td>sum</td>
</tr>
<tr>
<td><code>ein"ii-&gt;i"</code></td>
<td>take the diagonal part of a matrix</td>
</tr>
<tr>
<td><code>ein"ijkl-&gt;ilkj"</code></td>
<td>permute the dimensions of a tensor</td>
</tr>
<tr>
<td><code>ein"i-&gt;ii"</code></td>
<td>construct a diagonal matrix</td>
</tr>
<tr>
<td><code>ein"-&gt;ii"</code></td>
<td>broadcast a scalar to the diagonal part of a matrix</td>
</tr>
<tr>
<td><code>ein"ij,ij-&gt;ij"</code></td>
<td>element wise product</td>
</tr>
<tr>
<td><code>ein"ij,kl-&gt;ijkl"</code></td>
<td>outer product</td>
</tr>
</tbody>
</table>
<p dir="auto">Many of these are handled by special kernels
(<a href="https://under-peter.github.io/OMEinsum.jl/stable/implementation/" rel="nofollow">listed in the docs</a>),
but there is also a fallback which handles other cases
(more like what <a href="https://github.com/ahwillia/Einsum.jl">Einsum.jl</a> does, plus a GPU version).</p>
<p dir="auto">It is sometimes helpful to specify the order of operations, by inserting brackets,
either because you know this will be more efficient,
or to help the computer see what kernels can be used.
For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @ein Z[o,s] := x[i,s] * (W[o,i,j] * y[j,s]);   # macro style

julia&gt; Z = ein&quot;is, (oij, js) -&gt; os&quot;(x, W, y);         # string style"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@ein</span> Z[o,s] <span class="pl-k">:=</span> x[i,s] <span class="pl-k">*</span> (W[o,i,j] <span class="pl-k">*</span> y[j,s]);   <span class="pl-c"><span class="pl-c">#</span> macro style</span>

julia<span class="pl-k">&gt;</span> Z <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>is, (oij, js) -&gt; os<span class="pl-pds">"</span></span>(x, W, y);         <span class="pl-c"><span class="pl-c">#</span> string style</span></pre></div>
<p dir="auto">This performs matrix multiplication (summing over <code>j</code>)
followed by batched matrix multiplication (summing over <code>i</code>, batch label <code>s</code>).
Without the brackets, instead it uses the fallback <code>loop_einsum</code>, which is slower.
Calling <code>allow_loops(false)</code> will print an error to help you spot such cases:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @ein Zl[o,s] := x[i,s] * W[o,i,j] * y[j,s];

julia&gt; Z ≈ Zl
true

julia&gt; allow_loops(false);

julia&gt; Zl = ein&quot;is, oij, js -&gt; os&quot;(x, W, y);
┌ Error: using `loop_einsum` to evaluate
│   code = is, oij, js -&gt; os
│   size.(xs) = ((10, 50), (20, 10, 10), (10, 50))
│   size(y) = (20, 50)
└ @ OMEinsum ~/.julia/dev/OMEinsum/src/loop_einsum.jl:26"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@ein</span> Zl[o,s] <span class="pl-k">:=</span> x[i,s] <span class="pl-k">*</span> W[o,i,j] <span class="pl-k">*</span> y[j,s];

julia<span class="pl-k">&gt;</span> Z <span class="pl-k">≈</span> Zl
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">allow_loops</span>(<span class="pl-c1">false</span>);

julia<span class="pl-k">&gt;</span> Zl <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>is, oij, js -&gt; os<span class="pl-pds">"</span></span>(x, W, y);
┌ Error<span class="pl-k">:</span> <span class="pl-k">using</span> <span class="pl-s"><span class="pl-pds">`</span>loop_einsum<span class="pl-pds">`</span></span> to evaluate
│   code <span class="pl-k">=</span> is, oij, js <span class="pl-k">-&gt;</span> os
│   <span class="pl-c1">size</span>.(xs) <span class="pl-k">=</span> ((<span class="pl-c1">10</span>, <span class="pl-c1">50</span>), (<span class="pl-c1">20</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">10</span>, <span class="pl-c1">50</span>))
│   <span class="pl-en">size</span>(y) <span class="pl-k">=</span> (<span class="pl-c1">20</span>, <span class="pl-c1">50</span>)
└ @ OMEinsum <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>OMEinsum<span class="pl-k">/</span>src<span class="pl-k">/</span>loop_einsum<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">26</span></pre></div>
<p dir="auto">To see more examples using the GPU and autodiff, check out our asciinema-demo here:
<a href="https://asciinema.org/a/wE4CtIzWUC3R0GkVV28rVBRFb" rel="nofollow"><img src="https://camo.githubusercontent.com/c71cc8b40f3a9b598c2cb78dc6e9a985fcc53e64f4c5489853f5bf92ea5ee11f/68747470733a2f2f61736369696e656d612e6f72672f612f7745344374497a575543335230476b565632387256425246622e737667" alt="asciicast" data-canonical-src="https://asciinema.org/a/wE4CtIzWUC3R0GkVV28rVBRFb.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-application" class="anchor" aria-hidden="true" href="#application"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Application</h2>
<p dir="auto">For an application in tensor network algorithms, check out the <a href="https://github.com/under-Peter/TensorNetworkAD.jl">TensorNetworkAD</a>
package, where <code>OMEinsum</code> is used to evaluate tensor-contractions, permutations and summations.</p>
<h4 dir="auto"><a id="user-content-toy-application-solving-a-3-coloring-problem-on-the-petersen-graph" class="anchor" aria-hidden="true" href="#toy-application-solving-a-3-coloring-problem-on-the-petersen-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Toy Application: solving a 3-coloring problem on the Petersen graph</h4>
<p dir="auto">Let us focus on graphs
with vertices with three edges each. A question one might ask is:
How many different ways are there to colour the edges of the graph with
three different colours such that no vertex has a duplicate colour on its edges?</p>
<p dir="auto">The counting problem can be transformed into a contraction of rank-3 tensors
representing the edges. Consider the tensor <code>s</code> defined as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; s = map(x-&gt;Int(length(unique(x.I)) == 3), CartesianIndices((3,3,3)))"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">Int</span>(<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(x<span class="pl-k">.</span>I)) <span class="pl-k">==</span> <span class="pl-c1">3</span>), <span class="pl-c1">CartesianIndices</span>((<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)))</pre></div>
<p dir="auto">Then we can simply contract <code>s</code> tensors to get the number of 3 colourings satisfying the above condition!
E.g. for two vertices, we get 6 distinct colourings:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ein&quot;ijk,ijk-&gt;&quot;(s,s)[]
6"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>ijk,ijk-&gt;<span class="pl-pds">"</span></span>(s,s)[]
<span class="pl-c1">6</span></pre></div>
<p dir="auto">Using that method, it's easy to find that e.g. the peterson graph allows no 3 colouring, since</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ein&quot;afl,bhn,cjf,dlh,enj,ago,big,cki,dmk,eom-&gt;&quot;(fill(s, 10)...)[]
0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>afl,bhn,cjf,dlh,enj,ago,big,cki,dmk,eom-&gt;<span class="pl-pds">"</span></span>(<span class="pl-c1">fill</span>(s, <span class="pl-c1">10</span>)<span class="pl-k">...</span>)[]
<span class="pl-c1">0</span></pre></div>
<p dir="auto">The peterson graph consists of 10 vertices and 15 edges and looks like a pentagram
embedded in a pentagon as depicted here:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/33c359b0ec83bfbf3b76f59ed3271feaa49de80d212e8c5e704568fd28de60ec/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f662f66352f506574657273656e5f67726170682e7376672f32353270782d506574657273656e5f67726170682e7376672e706e67"><img src="https://camo.githubusercontent.com/33c359b0ec83bfbf3b76f59ed3271feaa49de80d212e8c5e704568fd28de60ec/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f662f66352f506574657273656e5f67726170682e7376672f32353270782d506574657273656e5f67726170682e7376672e706e67" alt="" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Petersen_graph.svg/252px-Petersen_graph.svg.png" style="max-width: 100%;"></a></p>
<p dir="auto">Confronted with the above result, we can ask whether the peterson graph allows a relaxed variation of 3 colouring, having one vertex that might accept duplicate colours. The answer to that can be found using the gradient w.r.t a vertex:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Zygote: gradient

julia&gt; gradient(x-&gt;ein&quot;afl,bhn,cjf,dlh,enj,ago,big,cki,dmk,eom-&gt;&quot;(x,s,s,s,s,s,s,s,s,s)[], s)[1] |&gt; sum
0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zygote<span class="pl-k">:</span> gradient

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gradient</span>(x<span class="pl-k">-&gt;</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>afl,bhn,cjf,dlh,enj,ago,big,cki,dmk,eom-&gt;<span class="pl-pds">"</span></span>(x,s,s,s,s,s,s,s,s,s)[], s)[<span class="pl-c1">1</span>] <span class="pl-k">|&gt;</span> sum
<span class="pl-c1">0</span></pre></div>
<p dir="auto">This tells us that even if we allow duplicates on one vertex, there are no 3-colourings for the peterson graph.</p>
<h2 dir="auto"><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contribute</h2>
<p dir="auto">Suggestions and Comments in the <em>Issues</em> are welcome.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">MIT License</p>
</article></div>