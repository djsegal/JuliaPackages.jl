<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-p4est_wrapper" class="anchor" aria-hidden="true" href="#p4est_wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>p4est_wrapper</h1>
<p>Julia wrappers for p4est library (<a href="http://www.p4est.org/" rel="nofollow">Parallel AMR on Forests of Octrees</a>)</p>
<p><a href="https://travis-ci.com/gridap/p4est_wrapper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5126362c6afff1bf1901310854b53ce873398fdf7d97f0f84de063b956c195bb/68747470733a2f2f7472617669732d63692e636f6d2f6772696461702f70346573745f777261707065722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/gridap/p4est_wrapper.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/p4est_wrapper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/34f8240c7fa2f97ccc78168464e8b0da426afb2cf073c56d2594b33fc8a3cf30/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f70346573745f777261707065722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/p4est_wrapper.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MPI
using p4est_wrapper
using Test

sc_init(MPI.COMM_WORLD, Cint(true), Cint(true), C_NULL, p4est_wrapper.SC_LP_DEFAULT)
p4est_init(C_NULL, p4est_wrapper.SC_LP_DEFAULT)
unitsquare_connectivity = p4est_connectivity_new_unitsquare() 
unitsquare_forest = p4est_new(MPI.COMM_WORLD, unitsquare_connectivity, 0, C_NULL, C_NULL) 
...
p4est_destroy(unitsquare_forest)
p4est_connectivity_destroy(unitsquare_connectivity)
sc_finalize()

MPI.Finalize()
"><pre><span class="pl-k">using</span> MPI
<span class="pl-k">using</span> p4est_wrapper
<span class="pl-k">using</span> Test

<span class="pl-c1">sc_init</span>(MPI<span class="pl-k">.</span>COMM_WORLD, <span class="pl-c1">Cint</span>(<span class="pl-c1">true</span>), <span class="pl-c1">Cint</span>(<span class="pl-c1">true</span>), <span class="pl-c1">C_NULL</span>, p4est_wrapper<span class="pl-k">.</span>SC_LP_DEFAULT)
<span class="pl-c1">p4est_init</span>(<span class="pl-c1">C_NULL</span>, p4est_wrapper<span class="pl-k">.</span>SC_LP_DEFAULT)
unitsquare_connectivity <span class="pl-k">=</span> <span class="pl-c1">p4est_connectivity_new_unitsquare</span>() 
unitsquare_forest <span class="pl-k">=</span> <span class="pl-c1">p4est_new</span>(MPI<span class="pl-k">.</span>COMM_WORLD, unitsquare_connectivity, <span class="pl-c1">0</span>, <span class="pl-c1">C_NULL</span>, <span class="pl-c1">C_NULL</span>) 
<span class="pl-k">...</span>
<span class="pl-c1">p4est_destroy</span>(unitsquare_forest)
<span class="pl-c1">p4est_connectivity_destroy</span>(unitsquare_connectivity)
<span class="pl-c1">sc_finalize</span>()

MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><strong>p4est_wrapper.jl</strong> itself is installed when you add and use it into another project.</p>
<p>Please, ensure that your system fulfill the requirements.</p>
<p>To include into your project form Julia REPL, use the following commands:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add p4est_wrapper
julia&gt; using p4est_wrapper
"><pre><code>pkg&gt; add p4est_wrapper
julia&gt; using p4est_wrapper
</code></pre></div>
<p>If, for any reason, you need to manually build the project, write down the following commands in Julia REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add p4est_wrapper
pkg&gt; build p4est_wrapper
julia&gt; using p4est_wrapper
"><pre><code>pkg&gt; add p4est_wrapper
pkg&gt; build p4est_wrapper
julia&gt; using p4est_wrapper
</code></pre></div>
<h3><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h3>
<ul>
<li><code>p4est &gt;= 2.2</code></li>
<li><code>MPI</code></li>
</ul>
<p><code>p4est_wrapper</code> julia package requires <code>p4est</code> library (<a href="http://www.p4est.org/" rel="nofollow">Parallel AMR on Forests of Octrees</a>), and (optionally) <code>MPI</code> to work correctly.</p>
<ul>
<li>Latests versions of julia <code>MPI</code> use artifacts to locally install a MPI distribution. You should take care with the compatibility (version/vendor/distribution) between the parallel <code>p4est</code> and <code>MPI</code> libraries. If you want julia <code>MPI</code> library to wrap your local MPI library, you must export <code>JULIA_MPI_BINARY="system"</code> before installing the package.</li>
<li>Parallel <code>p4est</code> library can be manually installed in a custom path on your local machine. In order to succesfull describe your custom installation to be discovered by <code>p4est_wrapper</code>, you must export <code>P4EST_ROOT_DIR</code> environment variable pointing to the installation directory. If this environment variable is not available, and <code>julia &gt;= 1.3</code>, <code>p4est_wrapper</code> will try to  use <a href="https://github.com/JuliaBinaryWrappers/P4est_jll.jl"><code>P4est_jll</code> artifact</a>, but you should take into account that this artifact is not for parallel computations (MPI not enabled). Finally, in other case <code>p4est_wrapper</code> will try to find the <code>p4est</code> library in the usual linux user library directory (<code>/usr/lib</code>).</li>
</ul>
<h4><a id="user-content-basic-openmpi-installation-in-debian-based-systems" class="anchor" aria-hidden="true" href="#basic-openmpi-installation-in-debian-based-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic OpenMPI installation in debian based systems</h4>
<p><code>MPI</code> can be obtained from the default repositories of your Debian-based OS by means of <code>apt</code> tool.</p>
<p>Basic <code>MPI</code> installation in order to use it from <code>p4est_wrapper</code> julia package is as follows:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="apt-get update
apt-get openmpi-bin libpenmpi3 libopenmpi-dev
export JULIA_MPI_BINARY=&quot;system&quot;
"><pre><code>apt-get update
apt-get openmpi-bin libpenmpi3 libopenmpi-dev
export JULIA_MPI_BINARY="system"
</code></pre></div>
<h4><a id="user-content-p4est-22-installation-in-linux-based-systems" class="anchor" aria-hidden="true" href="#p4est-22-installation-in-linux-based-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>p4est 2.2 installation in linux based systems</h4>
<p>To install <code>p4est</code> in your local machine, you can use the following shell script:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# Install p4est 2.2 from sources
CURR_DIR=$(pwd)
PACKAGE=p4est
VERSION=2.2
INSTALL_ROOT=/opt
P4EST_INSTALL=$INSTALL_ROOT/$PACKAGE/$VERSION
TAR_FILE=$PACKAGE-$VERSION.tar.gz
URL=&quot;https://github.com/p4est/p4est.github.io/raw/master/release&quot;
ROOT_DIR=/tmp
SOURCES_DIR=$ROOT_DIR/$PACKAGE-$VERSION
BUILD_DIR=$SOURCES_DIR/build
wget -q $URL/$TAR_FILE -O $ROOT_DIR/$TAR_FILE
mkdir -p $SOURCES_DIR
tar xzf $ROOT_DIR/$TAR_FILE -C $SOURCES_DIR --strip-components=1
cd $SOURCES_DIR
./configure --prefix=$P4EST_INSTALL --without-blas --without-lapack --enable-mpi --disable-dependency-tracking
make --quiet
make --quiet install
rm -rf $ROOT_DIR/$TAR_FILE $SOURCES_DIR
export P4EST_ROOT_DIR=$P4EST_INSTALL
cd $CURR_DIR
"><pre><code># Install p4est 2.2 from sources
CURR_DIR=$(pwd)
PACKAGE=p4est
VERSION=2.2
INSTALL_ROOT=/opt
P4EST_INSTALL=$INSTALL_ROOT/$PACKAGE/$VERSION
TAR_FILE=$PACKAGE-$VERSION.tar.gz
URL="https://github.com/p4est/p4est.github.io/raw/master/release"
ROOT_DIR=/tmp
SOURCES_DIR=$ROOT_DIR/$PACKAGE-$VERSION
BUILD_DIR=$SOURCES_DIR/build
wget -q $URL/$TAR_FILE -O $ROOT_DIR/$TAR_FILE
mkdir -p $SOURCES_DIR
tar xzf $ROOT_DIR/$TAR_FILE -C $SOURCES_DIR --strip-components=1
cd $SOURCES_DIR
./configure --prefix=$P4EST_INSTALL --without-blas --without-lapack --enable-mpi --disable-dependency-tracking
make --quiet
make --quiet install
rm -rf $ROOT_DIR/$TAR_FILE $SOURCES_DIR
export P4EST_ROOT_DIR=$P4EST_INSTALL
cd $CURR_DIR
</code></pre></div>
<p>Note: you need the following tools:</p>
<ul>
<li>wget</li>
<li>tar</li>
<li>make</li>
</ul>
<h2><a id="user-content-automated-p4est-wrapper-generator" class="anchor" aria-hidden="true" href="#automated-p4est-wrapper-generator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Automated p4est wrapper generator</h2>
<p><code>p4est_wrapper</code> bindings are automatically generated by using <a href="https://github.com/JuliaInterop/Clang.jl">Clang</a> package.</p>
<p>To learn more about how it works, please read the README file at <a href="https://github.com/gridap/p4est_wrapper.jl/tree/master/gen">gen directory</a>.</p>
</article></div>