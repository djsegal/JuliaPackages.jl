<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qcintegralsjl" class="anchor" aria-hidden="true" href="#qcintegralsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QCIntegrals.jl</h1>
<p dir="auto">QCIntegrals is a simple package written in Julia for computing common Integrals for Quantum Chemistry calculations.</p>
<h2 dir="auto"><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basics</h2>
<p dir="auto">The following code defines the geometry of a molecule in Bohrs, and compute one-electron integrals.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
mol = QCIntegrals.build_molecule(&quot;&quot;&quot;
O   0.000000  0.000000  0.000000
H   0.277400  0.892900  0.254400
H   0.606800 -0.238300 -0.716900
&quot;&quot;&quot;)

shells = QCIntegrals.build_basis(molecule,&quot;aug-cc-pvdz&quot;)

S = QCIntegrals.build_S(shells)
T = QCIntegrals.build_T(shells)
V = QCIntegrals.build_V(shells,mol.Zs,mol.coords)"><pre>mol <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_molecule</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">O   0.000000  0.000000  0.000000</span>
<span class="pl-s">H   0.277400  0.892900  0.254400</span>
<span class="pl-s">H   0.606800 -0.238300 -0.716900</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)

shells <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_basis</span>(molecule,<span class="pl-s"><span class="pl-pds">"</span>aug-cc-pvdz<span class="pl-pds">"</span></span>)

S <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_S</span>(shells)
T <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_T</span>(shells)
V <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_V</span>(shells,mol<span class="pl-k">.</span>Zs,mol<span class="pl-k">.</span>coords)</pre></div>
<p dir="auto">Two-electron integrals can also be computed</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="I4 = QCIntegrals.build_I4(shells)

shells_aux = QCIntegrals.build_basis(mol,&quot;aug-cc-pvdz-jkfit&quot;,normalized=false,auxiliar=true)
I2 = QCIntegrals.build_I2(shells_aux)
I3 = QCIntegrals.build_I3(shells,shells_aux)"><pre>I4 <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_I4</span>(shells)

shells_aux <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_basis</span>(mol,<span class="pl-s"><span class="pl-pds">"</span>aug-cc-pvdz-jkfit<span class="pl-pds">"</span></span>,normalized<span class="pl-k">=</span><span class="pl-c1">false</span>,auxiliar<span class="pl-k">=</span><span class="pl-c1">true</span>)
I2 <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_I2</span>(shells_aux)
I3 <span class="pl-k">=</span> QCIntegrals<span class="pl-k">.</span><span class="pl-c1">build_I3</span>(shells,shells_aux)</pre></div>
</article></div>