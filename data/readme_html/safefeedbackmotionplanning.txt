<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-safefeedbackmotionplanning" class="anchor" aria-hidden="true" href="#safefeedbackmotionplanning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SafeFeedbackMotionPlanning</h1>
<p><em>This package is under active development</em></p>
<p>Design safe controllers for nonlinear systems in the presence of disturbances. The controllers ensure that the system state remains in a tunable <em>safe tube</em> around the desired state. Find out more about it in our <a href="https://github.com/arlk/SafeFeedbackMotionPlanning/blob/master/arxiv.pdf">paper</a>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@article{lakshmanan2020safe,
  title={Safe Feedback Motion Planning: A Contraction Theory and $\mathcal{L}_1$-Adaptive Control Based Approach},
  author={Lakshmanan, Arun and Gahlawat, Aditya and Hovakimyan, Naira},
  journal={arXiv preprint arXiv:2004.01142},
  year={2020}
}
"><pre><code>@article{lakshmanan2020safe,
  title={Safe Feedback Motion Planning: A Contraction Theory and $\mathcal{L}_1$-Adaptive Control Based Approach},
  author={Lakshmanan, Arun and Gahlawat, Aditya and Hovakimyan, Naira},
  journal={arXiv preprint arXiv:2004.01142},
  year={2020}
}
</code></pre></div>
<h2><a id="user-content-problem-formulation" class="anchor" aria-hidden="true" href="#problem-formulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Problem Formulation</h2>
<p>Consider a system of the form</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ẋ = f(x) + B(x)u
"><pre>ẋ <span class="pl-k">=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">+</span> <span class="pl-c1">B</span>(x)u</pre></div>
<p>where <code>x(t), f(x) ∈ ℝⁿ</code>, <code>u(t) ∈ ℝᵐ</code>, and <code>B(x) ∈ ℝⁿˣᵐ</code>, that is facing disturbances <code>h(t,x)  ∈ ℝᵐ</code> (either/both state and time dependent) that is matched with the control channel:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ẋ = f(x) + B(x)(u + h(t,x))
"><pre>ẋ <span class="pl-k">=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">+</span> <span class="pl-c1">B</span>(x)(u <span class="pl-k">+</span> <span class="pl-c1">h</span>(t,x))</pre></div>
<p>Given a desired state-control trajectory pair <code>(x*,u*)</code> (feasible under the nominal system) that the actual system is required to follow, design a controller <code>u(t)</code> such that the states remain inside a tube <code>Ω(ρ, x*(t)) = {ℝⁿ : ||y - x*(t)|| ≤ ρ}</code> of some user defined width <code>ρ &gt; 0</code>.</p>
<p>In this package you can design controllers to do exactly this! A more in-depth review of the control architecture can be found in the paper.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add https://github.com/arlk/SafeFeedbackMotionPlanning.jl
"><pre>julia<span class="pl-k">&gt;</span> ] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>arlk<span class="pl-k">/</span>SafeFeedbackMotionPlanning<span class="pl-k">.</span>jl</pre></div>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SafeFeedbackMotionPlanning
using DifferentialEquations
using Plots
using LinearAlgebra

# Define system matrices or functions
f(x) = [-x[1] + 2*x[2];
        -0.25*x[2]^3 - 3*x[1] + 4*x[2]]
B = [0.5, -2.0]

# Simulation time span
tspan = (0., 5.)

# Intial condition of the system
x0 = [1.0, -1.0]

# Define desired regulation point or trajectories (as functions)
xs = [0.0, 0.0]
us = 0.0

# Dual of the control contraction metric matrix (or as a function if state-dependent)
W = [4.25828 -0.93423; -0.93423 3.76692]
λ = 1.74

# Uncertainty unknown to the controller
h(t, x) = -2*sin(2*t) -0.01*x'*x

# Upper bound on the norm of the uncertainty
# for any x ∈ Ω(ρ = √2) and t ≥ 0 (see paper for more details).
Δh = 2.1
ω = 90
Γ = 4e7

# Construct objects using the parameters you just defined
sys_p = sys_params(f, B)
ccm_p = ccm_params(xs, us, λ, W)
l1_p = l1_params(ω, Γ, Δh)

# CCM only system without perturbations
nom_sys = nominal_system(sys_p, ccm_p)
nom_sol = solve(nom_sys, x0, tspan, Tsit5(), progress = true, progress_steps = 1)

# CCM only system with perturbations
ptb_sys = nominal_system(sys_p, ccm_p, h)
ptb_sol = solve(ptb_sys, x0, tspan, Tsit5(), progress = true, progress_steps = 1)

# L1 Reference sysem with perturbations AKA (non-implementable) ideal
# performance of the L1 system with full knowledge of the uncertainty
ref_sys = reference_system(sys_p, ccm_p, ω, h)
ref_sol = solve(ref_sys, x0, tspan, Tsit5(), progress = true, progress_steps = 1)

# L1 + CCM system with perturbations
l1_sys = l1_system(sys_p, ccm_p, l1_p, h)
l1_sol = solve(l1_sys, x0, tspan, Rosenbrock23(), progress = true, progress_steps = 1, saveat = 0.01)

l = @layout [a b; c d]
p1 = plot(nom_sol, vars=[(0,1),(0,2)], title=&quot;Ideal CCM performance&quot;, legend=:none)
p2 = plot(ptb_sol, vars=[(0,1),(0,2)], title=&quot;CCM with perturbations&quot;, legend=:none)
p3 = plot(ref_sol, vars=[(0,1),(0,2)], title=&quot;Ideal L1+CCM with perturbations\n (non-implementable)&quot;, legend=:none)
p4 = plot(l1_sol, vars=[(0,1),(0,2)], title=&quot;L1+CCM with perturbations&quot;, legend=:none)
plot(p1, p2, p3, p4, layout=l)
"><pre><span class="pl-k">using</span> SafeFeedbackMotionPlanning
<span class="pl-k">using</span> DifferentialEquations
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Define system matrices or functions</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> [<span class="pl-k">-</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>];
        <span class="pl-k">-</span><span class="pl-c1">0.25</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>]]
B <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">2.0</span>]

<span class="pl-c"><span class="pl-c">#</span> Simulation time span</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.</span>, <span class="pl-c1">5.</span>)

<span class="pl-c"><span class="pl-c">#</span> Intial condition of the system</span>
x0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>]

<span class="pl-c"><span class="pl-c">#</span> Define desired regulation point or trajectories (as functions)</span>
xs <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
us <span class="pl-k">=</span> <span class="pl-c1">0.0</span>

<span class="pl-c"><span class="pl-c">#</span> Dual of the control contraction metric matrix (or as a function if state-dependent)</span>
W <span class="pl-k">=</span> [<span class="pl-c1">4.25828</span> <span class="pl-k">-</span><span class="pl-c1">0.93423</span>; <span class="pl-k">-</span><span class="pl-c1">0.93423</span> <span class="pl-c1">3.76692</span>]
λ <span class="pl-k">=</span> <span class="pl-c1">1.74</span>

<span class="pl-c"><span class="pl-c">#</span> Uncertainty unknown to the controller</span>
<span class="pl-en">h</span>(t, x) <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>t) <span class="pl-k">-</span><span class="pl-c1">0.01</span><span class="pl-k">*</span>x<span class="pl-k">'</span><span class="pl-k">*</span>x

<span class="pl-c"><span class="pl-c">#</span> Upper bound on the norm of the uncertainty</span>
<span class="pl-c"><span class="pl-c">#</span> for any x ∈ Ω(ρ = √2) and t ≥ 0 (see paper for more details).</span>
Δh <span class="pl-k">=</span> <span class="pl-c1">2.1</span>
ω <span class="pl-k">=</span> <span class="pl-c1">90</span>
Γ <span class="pl-k">=</span> <span class="pl-c1">4e7</span>

<span class="pl-c"><span class="pl-c">#</span> Construct objects using the parameters you just defined</span>
sys_p <span class="pl-k">=</span> <span class="pl-c1">sys_params</span>(f, B)
ccm_p <span class="pl-k">=</span> <span class="pl-c1">ccm_params</span>(xs, us, λ, W)
l1_p <span class="pl-k">=</span> <span class="pl-c1">l1_params</span>(ω, Γ, Δh)

<span class="pl-c"><span class="pl-c">#</span> CCM only system without perturbations</span>
nom_sys <span class="pl-k">=</span> <span class="pl-c1">nominal_system</span>(sys_p, ccm_p)
nom_sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(nom_sys, x0, tspan, <span class="pl-c1">Tsit5</span>(), progress <span class="pl-k">=</span> <span class="pl-c1">true</span>, progress_steps <span class="pl-k">=</span> <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> CCM only system with perturbations</span>
ptb_sys <span class="pl-k">=</span> <span class="pl-c1">nominal_system</span>(sys_p, ccm_p, h)
ptb_sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(ptb_sys, x0, tspan, <span class="pl-c1">Tsit5</span>(), progress <span class="pl-k">=</span> <span class="pl-c1">true</span>, progress_steps <span class="pl-k">=</span> <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> L1 Reference sysem with perturbations AKA (non-implementable) ideal</span>
<span class="pl-c"><span class="pl-c">#</span> performance of the L1 system with full knowledge of the uncertainty</span>
ref_sys <span class="pl-k">=</span> <span class="pl-c1">reference_system</span>(sys_p, ccm_p, ω, h)
ref_sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(ref_sys, x0, tspan, <span class="pl-c1">Tsit5</span>(), progress <span class="pl-k">=</span> <span class="pl-c1">true</span>, progress_steps <span class="pl-k">=</span> <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> L1 + CCM system with perturbations</span>
l1_sys <span class="pl-k">=</span> <span class="pl-c1">l1_system</span>(sys_p, ccm_p, l1_p, h)
l1_sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(l1_sys, x0, tspan, <span class="pl-c1">Rosenbrock23</span>(), progress <span class="pl-k">=</span> <span class="pl-c1">true</span>, progress_steps <span class="pl-k">=</span> <span class="pl-c1">1</span>, saveat <span class="pl-k">=</span> <span class="pl-c1">0.01</span>)

l <span class="pl-k">=</span> <span class="pl-c1">@layout</span> [a b; c d]
p1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(nom_sol, vars<span class="pl-k">=</span>[(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>)], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Ideal CCM performance<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:none</span>)
p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(ptb_sol, vars<span class="pl-k">=</span>[(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>)], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CCM with perturbations<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:none</span>)
p3 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(ref_sol, vars<span class="pl-k">=</span>[(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>)], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Ideal L1+CCM with perturbations<span class="pl-cce">\n</span> (non-implementable)<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:none</span>)
p4 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(l1_sol, vars<span class="pl-k">=</span>[(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>)], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>L1+CCM with perturbations<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:none</span>)
<span class="pl-c1">plot</span>(p1, p2, p3, p4, layout<span class="pl-k">=</span>l)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/arlk/SafeFeedbackMotionPlanning.jl/raw/master/examples/readme_ex.png"><img src="https://github.com/arlk/SafeFeedbackMotionPlanning.jl/raw/master/examples/readme_ex.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul>
<li>CCM metric search using SumofSquares.jl</li>
<li>Automatically computing ω and Γ from the tube bounds</li>
</ul>
</article></div>