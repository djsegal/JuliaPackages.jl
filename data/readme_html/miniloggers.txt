<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-miniloggersjl" class="anchor" aria-hidden="true" href="#miniloggersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MiniLoggers.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>JuliaHub</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://JuliaLogging.github.io/MiniLoggers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a><a href="https://JuliaLogging.github.io/MiniLoggers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaLogging/MiniLoggers.jl/actions"><img src="https://github.com/JuliaLogging/MiniLoggers.jl/workflows/CI/badge.svg" alt="Build" style="max-width: 100%;"></a><a href="https://codecov.io/gh/JuliaLogging/MiniLoggers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/25a1e40d21adbdd006eabd7bcddc03d81f250a8f2f5fd54bafc2c5cfe233e70d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614c6f6767696e672f4d696e694c6f67676572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaLogging/MiniLoggers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://juliahub.com/ui/Packages/MiniLoggers/5ppWi" rel="nofollow"><img src="https://camo.githubusercontent.com/373d5115a797d21f835c3b1fb253656b4a2ee325e39c7d46c27eb12782aa25b2/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4d696e694c6f67676572732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/MiniLoggers/pkgeval.svg" style="max-width: 100%;"></a><a href="https://juliahub.com/ui/Packages/MiniLoggers/5ppWi" rel="nofollow"><img src="https://camo.githubusercontent.com/91a3e51135915108f20742f5000ede3f9e679b2ac8a47cc80b5c41d61a1c9c3b/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4d696e694c6f67676572732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/MiniLoggers/version.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><code>MiniLoggers.jl</code> provides Julia logger with minimal setup and simple yet powerful format of logging strings. It allows to build custom and compact logging, which supports coloring, output to external files, timestamps and many more.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto"><code>MiniLoggers.jl</code> is a part of General registry, so it should be installed with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;MiniLoggers&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MiniLoggers<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-examples-of-usage" class="anchor" aria-hidden="true" href="#examples-of-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples of usage</h1>
<p dir="auto">In it's most simple form, <code>MiniLoggers.jl</code> is used as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MiniLoggers

MiniLogger(minlevel = MiniLoggers.Debug) |&gt; global_logger

x = 1
y = &quot;asd&quot;

@debug &quot;Values: &quot; x y
@info &quot;Values: &quot; x y
@warn &quot;Values: &quot; x y
@error &quot;Values: &quot; x y"><pre><span class="pl-k">using</span> MiniLoggers

<span class="pl-c1">MiniLogger</span>(minlevel <span class="pl-k">=</span> MiniLoggers<span class="pl-k">.</span>Debug) <span class="pl-k">|&gt;</span> global_logger

x <span class="pl-k">=</span> <span class="pl-c1">1</span>
y <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>asd<span class="pl-pds">"</span></span>

<span class="pl-c1">@debug</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y
<span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y
<span class="pl-c1">@warn</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y
<span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y</pre></div>
<p dir="auto">and produces</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/default_fmt2.png"><img src="images/default_fmt2.png" alt="default_fmt" style="max-width: 100%;"></a></p>
<p dir="auto">But one can make it more colourful and add more details with initilization like the following</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MiniLogger(minlevel = MiniLoggers.Debug, 
           format = &quot;{[{timestamp}] - {level} - :func}{{module}@{basename}:{line:cyan}:light_green}: {message}&quot;) |&gt; global_logger

@debug &quot;Values: &quot; x y
@info &quot;Values: &quot; x y
@warn &quot;Values: &quot; x y
@error &quot;Values: &quot; x y"><pre><span class="pl-c1">MiniLogger</span>(minlevel <span class="pl-k">=</span> MiniLoggers<span class="pl-k">.</span>Debug, 
           format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{[{timestamp}] - {level} - :func}{{module}@{basename}:{line:cyan}:light_green}: {message}<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> global_logger

<span class="pl-c1">@debug</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y
<span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y
<span class="pl-c1">@warn</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y
<span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>Values: <span class="pl-pds">"</span></span> x y</pre></div>
<p dir="auto">which yields</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/colour1_fmt.png"><img src="images/colour1_fmt.png" alt="colour1_fmt" style="max-width: 100%;"></a></p>
<p dir="auto">Or, we can add small unicode magic and get fancy two-line logging format</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MiniLogger(minlevel = MiniLoggers.Debug, 
           format = &quot;╭{[{timestamp}] - {level} - :func}{{module}@{basename}:{line:cyan}:light_green}\n╰→ {message}&quot;) |&gt; global_logger"><pre><span class="pl-c1">MiniLogger</span>(minlevel <span class="pl-k">=</span> MiniLoggers<span class="pl-k">.</span>Debug, 
           format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>╭{[{timestamp}] - {level} - :func}{{module}@{basename}:{line:cyan}:light_green}<span class="pl-cce">\n</span>╰→ {message}<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> global_logger</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/colour3_fmt.png"><img src="images/colour3_fmt.png" alt="colour3_fmt" style="max-width: 100%;"></a></p>
<p dir="auto">Format constructor is very flexible, so the output of log messages is mostly limited by your imagination.</p>
<p dir="auto">At the same time, you can go other way arround and remove all extra details completely turning it effectively to a basic <code>println</code> command, thus making it convinient to plug minilogger in packages like <a href="https://github.com/JuliaLogging/LoggingExtras.jl">LoggingExtras.jl</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MiniLogger(minlevel = MiniLoggers.Debug, format = &quot;{message}&quot;) |&gt; global_logger"><pre><span class="pl-c1">MiniLogger</span>(minlevel <span class="pl-k">=</span> MiniLoggers<span class="pl-k">.</span>Debug, format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{message}<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> global_logger</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/minimal_fmt.png"><img src="images/minimal_fmt.png" alt="minimal_fmt" style="max-width: 100%;"></a></p>
<p dir="auto">Also <code>MiniLoggers.jl</code> support Julia exceptions, so you can generate error messages in a usual way</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MiniLogger(minlevel = MiniLoggers.Debug, 
           format = &quot;{[{timestamp}] {level}:func} {module}@{basename}:{line:cyan}: {message}&quot;) |&gt; global_logger

try
    error(&quot;Some error&quot;)
catch err
    @error (err, catch_backtrace())
end"><pre><span class="pl-c1">MiniLogger</span>(minlevel <span class="pl-k">=</span> MiniLoggers<span class="pl-k">.</span>Debug, 
           format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{[{timestamp}] {level}:func} {module}@{basename}:{line:cyan}: {message}<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> global_logger

<span class="pl-k">try</span>
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Some error<span class="pl-pds">"</span></span>)
<span class="pl-k">catch</span> err
    <span class="pl-c1">@error</span> (err, <span class="pl-c1">catch_backtrace</span>())
<span class="pl-k">end</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/error_fmt.png"><img src="images/error_fmt.png" alt="error_fmt" style="max-width: 100%;"></a></p>
</article></div>