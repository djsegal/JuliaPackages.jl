<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-omnipackage" class="anchor" aria-hidden="true" href="#omnipackage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OmniPackage</h1>
<p dir="auto"><a href="https://github.com/chriselrod/OmniPackage.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/chriselrod/OmniPackage.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chriselrod/OmniPackage.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/159d81189434ea6e0a6aeaa40c80513ccc05eac68befa8ca0f06cc30968f3344/68747470733a2f2f636f6465636f762e696f2f67682f6368726973656c726f642f4f6d6e695061636b6167652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/chriselrod/OmniPackage.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The purpose of this package is to be big, to answer the question "what happens if we load a huge chunk of the open source ecosytem at the same time?"
In the future, it may be worth additionally adding code snippets making use of these open repositories.</p>
<p dir="auto">Great example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@time using OmniPackage, Test
x = create_array_of_ps()
@testset &quot;Compiling in a TestSet makes this slow&quot; begin
  @test x[1] isa Vector{OmniPackage.ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}
end
# even in a fresh session, this is fast
@time @eval x[1] isa Vector{OmniPackage.ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}
versioninfo()"><pre><span class="pl-c1">@time</span> <span class="pl-k">using</span> OmniPackage, Test
x <span class="pl-k">=</span> <span class="pl-c1">create_array_of_ps</span>()
<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Compiling in a TestSet makes this slow<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
  <span class="pl-c1">@test</span> x[<span class="pl-c1">1</span>] <span class="pl-k">isa</span> Vector{OmniPackage<span class="pl-k">.</span>ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> even in a fresh session, this is fast</span>
<span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> x[<span class="pl-c1">1</span>] <span class="pl-k">isa</span> Vector{OmniPackage<span class="pl-k">.</span>ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}
<span class="pl-c1">versioninfo</span>()</pre></div>
<p dir="auto">Sample result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time using OmniPackage, Test
 29.925019 seconds (37.83 M allocations: 2.529 GiB, 3.58% gc time, 70.85% compilation time: 49% of which was recompilation)

julia&gt; x = create_array_of_ps()
2-element Vector{Vector{OmniPackage.ParametricStruct{Float64, Float64, Float64, Float64, Float64, Float64, Int64}}}:
 [OmniPackage.ParametricStruct{Float64, Float64, Float64, Float64, Float64, Float64, Int64}(1.0, 2.0, 3, 4.0, 5.0, 6.0, 7.0, OmniPackage.apple, 1, 2), OmniPackage.ParametricStruct{Float64, Float64, Float64, Float64, Float64, Float64, Int64}(1.0, 2.0, 3, 4.0, 5.0, 6.0, 7.0, OmniPackage.apple, 1, 2)]
 [OmniPackage.ParametricStruct{Float64, Float64, Float64, Float64, Float64, Float64, Int64}(1.0, 2.0, 3, 4.0, 5.0, 6.0, 7.0, OmniPackage.apple, 1, 2), OmniPackage.ParametricStruct{Float64, Float64, Float64, Float64, Float64, Float64, Int64}(1.0, 2.0, 3, 4.0, 5.0, 6.0, 7.0, OmniPackage.apple, 1, 2)]

julia&gt; @testset &quot;Compiling in a TestSet makes this slow&quot; begin
         @test x[1] isa Vector{OmniPackage.ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}
       end
Test Summary:                          | Pass  Total   Time
Compiling in a TestSet makes this slow |    1      1  14.7s
Test.DefaultTestSet(&quot;Compiling in a TestSet makes this slow&quot;, Any[], 1, false, false, true, 1.683043618670673e9, 1.683043633367204e9, false)

julia&gt; # even in a fresh session, this is fast
       @time @eval x[1] isa Vector{OmniPackage.ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}   
  0.000217 seconds (68 allocations: 3.719 KiB)
true

julia&gt; versioninfo()
Julia Version 1.10.0-DEV.1159
Commit 1a973c7a7a (2023-05-02 03:46 UTC)
Platform Info:
  OS: Linux (x86_64-generic-linux)
  CPU: 28 × Intel(R) Core(TM) i9-9940X CPU @ 3.30GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-14.0.6 (ORCJIT, skylake-avx512)
  Threads: 41 on 28 virtual cores
Environment:
  JULIA_PATH = @.
  LD_LIBRARY_PATH = /usr/local/lib/
  JULIA_NUM_THREADS = 28"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-k">using</span> OmniPackage, Test
 <span class="pl-c1">29.925019</span> seconds (<span class="pl-c1">37.83</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">2.529</span> GiB, <span class="pl-c1">3.58</span><span class="pl-k">%</span> gc time, <span class="pl-c1">70.85</span><span class="pl-k">%</span> compilation time<span class="pl-k">:</span> <span class="pl-c1">49</span><span class="pl-k">%</span> of which was recompilation)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">create_array_of_ps</span>()
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{OmniPackage<span class="pl-k">.</span>ParametricStruct{Float64, Float64, Float64, Float64, Float64, Float64, Int64}}}<span class="pl-k">:</span>
 [OmniPackage<span class="pl-k">.</span><span class="pl-c1">ParametricStruct</span><span class="pl-c1">{Float64, Float64, Float64, Float64, Float64, Float64, Int64}</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">7.0</span>, OmniPackage<span class="pl-k">.</span>apple, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>), OmniPackage<span class="pl-k">.</span><span class="pl-c1">ParametricStruct</span><span class="pl-c1">{Float64, Float64, Float64, Float64, Float64, Float64, Int64}</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">7.0</span>, OmniPackage<span class="pl-k">.</span>apple, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)]
 [OmniPackage<span class="pl-k">.</span><span class="pl-c1">ParametricStruct</span><span class="pl-c1">{Float64, Float64, Float64, Float64, Float64, Float64, Int64}</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">7.0</span>, OmniPackage<span class="pl-k">.</span>apple, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>), OmniPackage<span class="pl-k">.</span><span class="pl-c1">ParametricStruct</span><span class="pl-c1">{Float64, Float64, Float64, Float64, Float64, Float64, Int64}</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">7.0</span>, OmniPackage<span class="pl-k">.</span>apple, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Compiling in a TestSet makes this slow<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
         <span class="pl-c1">@test</span> x[<span class="pl-c1">1</span>] <span class="pl-k">isa</span> Vector{OmniPackage<span class="pl-k">.</span>ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}
       <span class="pl-k">end</span>
Test Summary<span class="pl-k">:</span>                          <span class="pl-k">|</span> Pass  Total   Time
Compiling <span class="pl-k">in</span> a TestSet makes this slow <span class="pl-k">|</span>    <span class="pl-c1">1</span>      <span class="pl-c1">1</span>  <span class="pl-c1">14.7</span>s
Test<span class="pl-k">.</span><span class="pl-c1">DefaultTestSet</span>(<span class="pl-s"><span class="pl-pds">"</span>Compiling in a TestSet makes this slow<span class="pl-pds">"</span></span>, Any[], <span class="pl-c1">1</span>, <span class="pl-c1">false</span>, <span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">1.683043618670673e9</span>, <span class="pl-c1">1.683043633367204e9</span>, <span class="pl-c1">false</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> even in a fresh session, this is fast</span>
       <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> x[<span class="pl-c1">1</span>] <span class="pl-k">isa</span> Vector{OmniPackage<span class="pl-k">.</span>ParametricStruct{Float64,Float64,Float64,Float64,Float64,Float64,Int}}   
  <span class="pl-c1">0.000217</span> seconds (<span class="pl-c1">68</span> allocations<span class="pl-k">:</span> <span class="pl-c1">3.719</span> KiB)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">versioninfo</span>()
Julia Version <span class="pl-c1">1.10</span>.<span class="pl-c1">0</span><span class="pl-k">-</span>DEV.<span class="pl-c1">1159</span>
Commit <span class="pl-c1">1</span>a973c7a7a (<span class="pl-c1">2023</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">02</span> <span class="pl-c1">03</span><span class="pl-k">:</span><span class="pl-c1">46</span> UTC)
Platform Info<span class="pl-k">:</span>
  OS<span class="pl-k">:</span> Linux (x86_64<span class="pl-k">-</span>generic<span class="pl-k">-</span>linux)
  CPU<span class="pl-k">:</span> <span class="pl-c1">28</span> <span class="pl-k">×</span> <span class="pl-c1">Intel</span>(R) <span class="pl-c1">Core</span>(TM) i9<span class="pl-k">-</span><span class="pl-c1">9940</span>X CPU @ <span class="pl-c1">3.30</span>GHz
  WORD_SIZE<span class="pl-k">:</span> <span class="pl-c1">64</span>
  LIBM<span class="pl-k">:</span> libopenlibm
  LLVM<span class="pl-k">:</span> libLLVM<span class="pl-k">-</span><span class="pl-c1">14.0</span>.<span class="pl-c1">6</span> (ORCJIT, skylake<span class="pl-k">-</span>avx512)
  Threads<span class="pl-k">:</span> <span class="pl-c1">41</span> on <span class="pl-c1">28</span> virtual cores
Environment<span class="pl-k">:</span>
  JULIA_PATH <span class="pl-k">=</span> <span class="pl-c1">@.</span>
  LD_LIBRARY_PATH <span class="pl-k">=</span> <span class="pl-k">/</span>usr<span class="pl-k">/</span><span class="pl-k">local</span><span class="pl-k">/</span>lib<span class="pl-k">/</span>
  JULIA_NUM_THREADS <span class="pl-k">=</span> <span class="pl-c1">28</span></pre></div>
<p dir="auto">The compile time seems far too high for such a trivial function.</p>
<p dir="auto">The examples can be made better:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time using OmniPackage
109.203194 seconds (145.90 M allocations: 10.906 GiB, 3.72% gc time, 33.63% compilation time: 67% of which was recompilation)

julia&gt; @time @eval OmniPackage.ode_bench0();
 22.158457 seconds (66.41 M allocations: 4.468 GiB, 4.42% gc time, 1621.91% compilation time: &lt;1% of which was recompilation)

julia&gt; @time @eval OmniPackage.ode_bench1();
 23.134631 seconds (63.82 M allocations: 4.685 GiB, 7.40% gc time, 2412.01% compilation time)

julia&gt; @time @eval OmniPackage.ode_bench2();
 28.841720 seconds (70.07 M allocations: 8.748 GiB, 8.43% gc time, 2841.13% compilation time)

julia&gt; @time @eval OmniPackage.ode_bench3();
 52.567942 seconds (81.21 M allocations: 24.759 GiB, 9.31% gc time, 3084.69% compilation time)

julia&gt; @time @eval OmniPackage.expm_bench0();
  1.210070 seconds (1.52 M allocations: 97.891 MiB, 129.45% compilation time)

julia&gt; @time @eval OmniPackage.expm_bench1();
 40.579424 seconds (25.14 M allocations: 1.713 GiB, 1.64% gc time, 2861.26% compilation time)

julia&gt; @time @eval OmniPackage.expm_bench2();
  8.791431 seconds (16.71 M allocations: 1.068 GiB, 3.72% gc time, 2136.02% compilation time)

julia&gt; @time @eval OmniPackage.expm_bench3();
 17.525862 seconds (24.00 M allocations: 1.504 GiB, 2.02% gc time, 3543.73% compilation time)

julia&gt; @benchmark OmniPackage.ode_bench0()
BenchmarkTools.Trial: 5 samples with 1 evaluation.
 Range (min … max):   68.610 ms … 634.197 ms  ┊ GC (min … max):  0.00% … 86.24%
 Time  (median):      91.490 ms               ┊ GC (median):     0.00%
 Time  (mean ± σ):   295.385 ms ± 296.068 ms  ┊ GC (mean ± σ):  69.24% ± 45.24%

  ███                                                      █  █  
  ███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█ ▁
  68.6 ms          Histogram: frequency by time          634 ms &lt;

 Memory estimate: 1.19 GiB, allocs estimate: 14264981.

julia&gt; @benchmark OmniPackage.ode_bench1()
BenchmarkTools.Trial: 1 sample with 1 evaluation.
 Single result which took 1.009 s (48.32% GC) to evaluate,
 with a memory estimate of 2.50 GiB, over 29699983 allocations.

julia&gt; @benchmark OmniPackage.ode_bench2()
BenchmarkTools.Trial: 1 sample with 1 evaluation.
 Single result which took 1.885 s (52.97% GC) to evaluate,
 with a memory estimate of 6.25 GiB, over 30041702 allocations.

julia&gt; @benchmark OmniPackage.ode_bench3()
BenchmarkTools.Trial: 1 sample with 1 evaluation.
 Single result which took 8.121 s (50.21% GC) to evaluate,
 with a memory estimate of 21.87 GiB, over 30537088 allocations.

julia&gt; @benchmark OmniPackage.expm_bench0()
BenchmarkTools.Trial: 4032 samples with 1 evaluation.
 Range (min … max):   95.260 μs … 744.183 ms  ┊ GC (min … max):  0.00% … 99.94%
 Time  (median):     170.214 μs               ┊ GC (median):     0.00%
 Time  (mean ± σ):   367.274 μs ±  11.717 ms  ┊ GC (mean ± σ):  50.22% ±  1.57%

        ▁▂▄▅█▃▅▅▇█▇▅▆▄▄▃▂▁▂                                      
  ▁▂▂▄▅▆███████████████████▇█▇█▇▇▅▆▆▅▄▄▄▃▄▄▃▃▄▃▄▄▃▂▃▂▂▂▂▂▂▁▁▁▂▁ ▄
  95.3 μs          Histogram: frequency by time          341 μs &lt;

 Memory estimate: 1.34 MiB, allocs estimate: 14828.

julia&gt; @benchmark OmniPackage.expm_bench1()
BenchmarkTools.Trial: 964 samples with 1 evaluation.
 Range (min … max):  512.796 μs … 297.928 ms  ┊ GC (min … max):  0.00% … 99.65%
 Time  (median):     694.463 μs               ┊ GC (median):     0.00%
 Time  (mean ± σ):     1.026 ms ±   9.574 ms  ┊ GC (mean ± σ):  30.00% ±  3.21%

       ▂▅█▇▄▇▄▃▁                                                 
  ▂▂▄▆██████████▅▆▅▃▃▃▃▃▂▂▁▁▁▁▁▁▂▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▁▂ ▃
  513 μs           Histogram: frequency by time         1.71 ms &lt;

 Memory estimate: 3.10 MiB, allocs estimate: 18846.

julia&gt; @benchmark OmniPackage.expm_bench2()
BenchmarkTools.Trial: 228 samples with 1 evaluation.
 Range (min … max):  1.243 ms … 355.496 ms  ┊ GC (min … max):  0.00% … 99.39%
 Time  (median):     1.544 ms               ┊ GC (median):     0.00%
 Time  (mean ± σ):   4.543 ms ±  32.044 ms  ┊ GC (mean ± σ):  66.09% ±  9.29%

        ▆█▂█▆▁ ▄▇▅▆▂▆▃                                         
  ▅▄▇▆▇▅██████▅███████▇▇▄▄▃▁▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▄
  1.24 ms         Histogram: frequency by time        2.61 ms &lt;

 Memory estimate: 11.92 MiB, allocs estimate: 19996.

julia&gt; @benchmark OmniPackage.expm_bench3()
BenchmarkTools.Trial: 5 samples with 1 evaluation.
 Range (min … max):  212.128 ms … 252.034 ms  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     249.440 ms               ┊ GC (median):    0.00%
 Time  (mean ± σ):   242.600 ms ±  17.116 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▁                                                     ▁  ▁  █  
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█▁▁█ ▁
  212 ms           Histogram: frequency by time          252 ms &lt;

 Memory estimate: 54.54 MiB, allocs estimate: 20946."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-k">using</span> OmniPackage
<span class="pl-c1">109.203194</span> seconds (<span class="pl-c1">145.90</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">10.906</span> GiB, <span class="pl-c1">3.72</span><span class="pl-k">%</span> gc time, <span class="pl-c1">33.63</span><span class="pl-k">%</span> compilation time<span class="pl-k">:</span> <span class="pl-c1">67</span><span class="pl-k">%</span> of which was recompilation)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench0</span>();
 <span class="pl-c1">22.158457</span> seconds (<span class="pl-c1">66.41</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">4.468</span> GiB, <span class="pl-c1">4.42</span><span class="pl-k">%</span> gc time, <span class="pl-c1">1621.91</span><span class="pl-k">%</span> compilation time<span class="pl-k">:</span> <span class="pl-k">&lt;</span><span class="pl-c1">1</span><span class="pl-k">%</span> of which was recompilation)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench1</span>();
 <span class="pl-c1">23.134631</span> seconds (<span class="pl-c1">63.82</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">4.685</span> GiB, <span class="pl-c1">7.40</span><span class="pl-k">%</span> gc time, <span class="pl-c1">2412.01</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench2</span>();
 <span class="pl-c1">28.841720</span> seconds (<span class="pl-c1">70.07</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">8.748</span> GiB, <span class="pl-c1">8.43</span><span class="pl-k">%</span> gc time, <span class="pl-c1">2841.13</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench3</span>();
 <span class="pl-c1">52.567942</span> seconds (<span class="pl-c1">81.21</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">24.759</span> GiB, <span class="pl-c1">9.31</span><span class="pl-k">%</span> gc time, <span class="pl-c1">3084.69</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench0</span>();
  <span class="pl-c1">1.210070</span> seconds (<span class="pl-c1">1.52</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">97.891</span> MiB, <span class="pl-c1">129.45</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench1</span>();
 <span class="pl-c1">40.579424</span> seconds (<span class="pl-c1">25.14</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.713</span> GiB, <span class="pl-c1">1.64</span><span class="pl-k">%</span> gc time, <span class="pl-c1">2861.26</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench2</span>();
  <span class="pl-c1">8.791431</span> seconds (<span class="pl-c1">16.71</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.068</span> GiB, <span class="pl-c1">3.72</span><span class="pl-k">%</span> gc time, <span class="pl-c1">2136.02</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">@eval</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench3</span>();
 <span class="pl-c1">17.525862</span> seconds (<span class="pl-c1">24.00</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.504</span> GiB, <span class="pl-c1">2.02</span><span class="pl-k">%</span> gc time, <span class="pl-c1">3543.73</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench0</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">5</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>   <span class="pl-c1">68.610</span> ms … <span class="pl-c1">634.197</span> ms  ┊ GC (min … max)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">86.24</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>      <span class="pl-c1">91.490</span> ms               ┊ GC (median)<span class="pl-k">:</span>     <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">295.385</span> ms ± <span class="pl-c1">296.068</span> ms  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">69.24</span><span class="pl-k">%</span> ± <span class="pl-c1">45.24</span><span class="pl-k">%</span>

  ███                                                      █  █  
  ███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█ ▁
  <span class="pl-c1">68.6</span> ms          Histogram<span class="pl-k">:</span> frequency by time          <span class="pl-c1">634</span> ms <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">1.19</span> GiB, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">14264981.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench1</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">1</span> sample with <span class="pl-c1">1</span> evaluation.
 Single result which took <span class="pl-c1">1.009</span> s (<span class="pl-c1">48.32</span><span class="pl-k">%</span> GC) to evaluate,
 with a memory estimate of <span class="pl-c1">2.50</span> GiB, over <span class="pl-c1">29699983</span> allocations.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench2</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">1</span> sample with <span class="pl-c1">1</span> evaluation.
 Single result which took <span class="pl-c1">1.885</span> s (<span class="pl-c1">52.97</span><span class="pl-k">%</span> GC) to evaluate,
 with a memory estimate of <span class="pl-c1">6.25</span> GiB, over <span class="pl-c1">30041702</span> allocations.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">ode_bench3</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">1</span> sample with <span class="pl-c1">1</span> evaluation.
 Single result which took <span class="pl-c1">8.121</span> s (<span class="pl-c1">50.21</span><span class="pl-k">%</span> GC) to evaluate,
 with a memory estimate of <span class="pl-c1">21.87</span> GiB, over <span class="pl-c1">30537088</span> allocations.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench0</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">4032</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>   <span class="pl-c1">95.260</span> μs … <span class="pl-c1">744.183</span> ms  ┊ GC (min … max)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">99.94</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">170.214</span> μs               ┊ GC (median)<span class="pl-k">:</span>     <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">367.274</span> μs ±  <span class="pl-c1">11.717</span> ms  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">50.22</span><span class="pl-k">%</span> ±  <span class="pl-c1">1.57</span><span class="pl-k">%</span>

        ▁▂▄▅█▃▅▅▇█▇▅▆▄▄▃▂▁▂                                      
  ▁▂▂▄▅▆███████████████████▇█▇█▇▇▅▆▆▅▄▄▄▃▄▄▃▃▄▃▄▄▃▂▃▂▂▂▂▂▂▁▁▁▂▁ ▄
  <span class="pl-c1">95.3</span> μs          Histogram<span class="pl-k">:</span> frequency by time          <span class="pl-c1">341</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">1.34</span> MiB, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">14828.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench1</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">964</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">512.796</span> μs … <span class="pl-c1">297.928</span> ms  ┊ GC (min … max)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">99.65</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">694.463</span> μs               ┊ GC (median)<span class="pl-k">:</span>     <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>     <span class="pl-c1">1.026</span> ms ±   <span class="pl-c1">9.574</span> ms  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">30.00</span><span class="pl-k">%</span> ±  <span class="pl-c1">3.21</span><span class="pl-k">%</span>

       ▂▅█▇▄▇▄▃▁                                                 
  ▂▂▄▆██████████▅▆▅▃▃▃▃▃▂▂▁▁▁▁▁▁▂▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▁▂ ▃
  <span class="pl-c1">513</span> μs           Histogram<span class="pl-k">:</span> frequency by time         <span class="pl-c1">1.71</span> ms <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">3.10</span> MiB, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">18846.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench2</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">228</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">1.243</span> ms … <span class="pl-c1">355.496</span> ms  ┊ GC (min … max)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">99.39</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">1.544</span> ms               ┊ GC (median)<span class="pl-k">:</span>     <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">4.543</span> ms ±  <span class="pl-c1">32.044</span> ms  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">66.09</span><span class="pl-k">%</span> ±  <span class="pl-c1">9.29</span><span class="pl-k">%</span>

        ▆█▂█▆▁ ▄▇▅▆▂▆▃                                         
  ▅▄▇▆▇▅██████▅███████▇▇▄▄▃▁▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▄
  <span class="pl-c1">1.24</span> ms         Histogram<span class="pl-k">:</span> frequency by time        <span class="pl-c1">2.61</span> ms <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">11.92</span> MiB, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">19996.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> OmniPackage<span class="pl-k">.</span><span class="pl-c1">expm_bench3</span>()
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">5</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">212.128</span> ms … <span class="pl-c1">252.034</span> ms  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">249.440</span> ms               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">242.600</span> ms ±  <span class="pl-c1">17.116</span> ms  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

  ▁                                                     ▁  ▁  █  
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█▁▁█ ▁
  <span class="pl-c1">212</span> ms           Histogram<span class="pl-k">:</span> frequency by time          <span class="pl-c1">252</span> ms <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">54.54</span> MiB, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">20946.</span></pre></div>
<p dir="auto">Contributions welcome.</p>
</article></div>