<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jwts" class="anchor" aria-hidden="true" href="#jwts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JWTs</h1>
<p><a href="https://github.com/tanmaykm/JWTs.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/tanmaykm/JWTs.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tanmaykm/JWTs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a869bbc8bf43e0c7de9f0d93d4b3cf1c9e575551e170178264ebecfb5c6e316e/68747470733a2f2f636f6465636f762e696f2f67682f74616e6d61796b6d2f4a5754732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d564b374a5a32684d5178" alt="codecov" data-canonical-src="https://codecov.io/gh/tanmaykm/JWTs.jl/branch/master/graph/badge.svg?token=VK7JZ2hMQx" style="max-width:100%;"></a></p>
<p>JSON Web Tokens (JWT) are an open, industry standard <a href="https://tools.ietf.org/html/rfc7519" rel="nofollow">RFC 7519</a> method for representing and transferring claims securely between two parties.</p>
<h2><a id="user-content-keys-and-key-sets" class="anchor" aria-hidden="true" href="#keys-and-key-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Keys and Key Sets</h2>
<p><strong>JWK</strong> represents a JWK Key (either for signing or verification). JWK can be either a <strong>JWKRSA</strong> or <strong>JWKSymmetric</strong>. A RSA key can represent either the public or private key.</p>
<p><strong>JWKSet</strong> holds a set of keys, fetched from a OpenId key URL, each key identified by a key id. The OpenId key URL is usually found in the OpenId configuration (e.g. <code>jwks_uri</code> element in <a href="https://accounts.google.com/.well-known/openid-configuration" rel="nofollow">https://accounts.google.com/.well-known/openid-configuration</a>).</p>
<p>To create or verify JWT, using a JWKSet is preferred as it provides mechanism of dealing with key rotation. To refresh a JWKSet, or to load keys for the first time, call the <code>refresh!</code> method on it.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using JWTs

julia&gt; keyset = JWKSet(&quot;https://www.googleapis.com/oauth2/v3/certs&quot;)
JWKSet 0 keys (https://www.googleapis.com/oauth2/v3/certs)

julia&gt; refresh!(keyset)

julia&gt; keyset
JWKSet 2 keys (https://www.googleapis.com/oauth2/v3/certs)

julia&gt; for (k,v) in keyset.keys
           println(&quot;    &quot;, k, &quot; =&gt; &quot;, v.key)
       end
    7978a91347261a291bd71dcab4a464be7d279666 =&gt; MbedTLS.RSA(Ptr{MbedTLS.mbedtls_rsa_context} @0x0000000001e337e0)
    8aad66bdefc1b43d8db27e65e2e2ef301879d3e8 =&gt; MbedTLS.RSA(Ptr{MbedTLS.mbedtls_rsa_context} @0x0000000001d77390)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JWTs

julia<span class="pl-k">&gt;</span> keyset <span class="pl-k">=</span> <span class="pl-c1">JWKSet</span>(<span class="pl-s"><span class="pl-pds">"</span>https://www.googleapis.com/oauth2/v3/certs<span class="pl-pds">"</span></span>)
JWKSet <span class="pl-c1">0</span> keys (https<span class="pl-k">:</span><span class="pl-k">//</span>www<span class="pl-k">.</span>googleapis<span class="pl-k">.</span>com<span class="pl-k">/</span>oauth2<span class="pl-k">/</span>v3<span class="pl-k">/</span>certs)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">refresh!</span>(keyset)

julia<span class="pl-k">&gt;</span> keyset
JWKSet <span class="pl-c1">2</span> keys (https<span class="pl-k">:</span><span class="pl-k">//</span>www<span class="pl-k">.</span>googleapis<span class="pl-k">.</span>com<span class="pl-k">/</span>oauth2<span class="pl-k">/</span>v3<span class="pl-k">/</span>certs)

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (k,v) <span class="pl-k">in</span> keyset<span class="pl-k">.</span>keys
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>    <span class="pl-pds">"</span></span>, k, <span class="pl-s"><span class="pl-pds">"</span> =&gt; <span class="pl-pds">"</span></span>, v<span class="pl-k">.</span>key)
       <span class="pl-k">end</span>
    <span class="pl-c1">7978</span>a91347261a291bd71dcab4a464be7d279666 <span class="pl-k">=&gt;</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">RSA</span>(Ptr{MbedTLS<span class="pl-k">.</span>mbedtls_rsa_context} @<span class="pl-c1">0x0000000001e337e0</span>)
    <span class="pl-c1">8</span>aad66bdefc1b43d8db27e65e2e2ef301879d3e8 <span class="pl-k">=&gt;</span> MbedTLS<span class="pl-k">.</span><span class="pl-c1">RSA</span>(Ptr{MbedTLS<span class="pl-k">.</span>mbedtls_rsa_context} @<span class="pl-c1">0x0000000001d77390</span>)</pre></div>
<h2><a id="user-content-tokens" class="anchor" aria-hidden="true" href="#tokens"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tokens</h2>
<p><strong>JWT</strong> represents a JSON Web Token containing the payload at the minimum. When signed, it holds the header (with key id and algorithm used) and signature too. The parts are stored in encoded form.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using JSON

julia&gt; using JWTs

julia&gt; payload = JSON.parse(&quot;&quot;&quot;{
           &quot;iss&quot;: &quot;https://auth2.juliacomputing.io/dex&quot;,
           &quot;sub&quot;: &quot;ChUxjfgsajfurjsjdut0483672kdhgstgy283jssZQ&quot;,
           &quot;aud&quot;: &quot;example-audience&quot;,
           &quot;exp&quot;: 1536080651,
           &quot;iat&quot;: 1535994251,
           &quot;nonce&quot;: &quot;1777777777777aaaaaaaaabbbbbbbbbb&quot;,
           &quot;at_hash&quot;: &quot;222222-G-JJJJJJJJJJJJJ&quot;,
           &quot;email&quot;: &quot;user@example.com&quot;,
           &quot;email_verified&quot;: true,
           &quot;name&quot;: &quot;Example User&quot;
       }&quot;&quot;&quot;);

julia&gt; jwt = JWT(; payload=payload)
eyJuYW1lIjoiRXhhbXBsZSBVc2VyIiwiZXhwIjoxNTM2MDgwNjUxLCJhdWQiOiJleGFtcGxlLWF1ZGllbmNlIiwic3ViIjoiQ2hVeGpmZ3NhamZ1cmpzamR1dDA0ODM2NzJrZGhnc3RneTI4M2pzc1pRIiwiaWF0IjoxNTM1OTk0MjUxLCJpc3MiOiJodHRwczovL2F1dGgyLmp1bGlhY29tcHV0aW5nLmlvL2RleCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiMjIyMjIyLUctSkpKSkpKSkpKSkpKSiIsIm5vbmNlIjoiMTc3Nzc3Nzc3Nzc3N2FhYWFhYWFhYWJiYmJiYmJiYmIiLCJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20ifQ
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JSON

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JWTs

julia<span class="pl-k">&gt;</span> payload <span class="pl-k">=</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"""</span>{</span>
<span class="pl-s">           "iss": "https://auth2.juliacomputing.io/dex",</span>
<span class="pl-s">           "sub": "ChUxjfgsajfurjsjdut0483672kdhgstgy283jssZQ",</span>
<span class="pl-s">           "aud": "example-audience",</span>
<span class="pl-s">           "exp": 1536080651,</span>
<span class="pl-s">           "iat": 1535994251,</span>
<span class="pl-s">           "nonce": "1777777777777aaaaaaaaabbbbbbbbbb",</span>
<span class="pl-s">           "at_hash": "222222-G-JJJJJJJJJJJJJ",</span>
<span class="pl-s">           "email": "user@example.com",</span>
<span class="pl-s">           "email_verified": true,</span>
<span class="pl-s">           "name": "Example User"</span>
<span class="pl-s">       }<span class="pl-pds">"""</span></span>);

julia<span class="pl-k">&gt;</span> jwt <span class="pl-k">=</span> <span class="pl-c1">JWT</span>(; payload<span class="pl-k">=</span>payload)
eyJuYW1lIjoiRXhhbXBsZSBVc2VyIiwiZXhwIjoxNTM2MDgwNjUxLCJhdWQiOiJleGFtcGxlLWF1ZGllbmNlIiwic3ViIjoiQ2hVeGpmZ3NhamZ1cmpzamR1dDA0ODM2NzJrZGhnc3RneTI4M2pzc1pRIiwiaWF0IjoxNTM1OTk0MjUxLCJpc3MiOiJodHRwczovL2F1dGgyLmp1bGlhY29tcHV0aW5nLmlvL2RleCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiMjIyMjIyLUctSkpKSkpKSkpKSkpKSiIsIm5vbmNlIjoiMTc3Nzc3Nzc3Nzc3N2FhYWFhYWFhYWJiYmJiYmJiYmIiLCJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20ifQ</pre></div>
<p>A JWT can be signed using the <code>sign!</code> method, passing a key set and a key id to sign it with.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; issigned(jwt)
false

julia&gt; keyset = JWKSet(&quot;file:///my/secret/location/jwkkey.json&quot;);

julia&gt; refresh!(keyset)

julia&gt; keyid = first(first(keyset.keys)) # using the first key in the key set
&quot;4Fytp3LfBhriD0eZ-k3aNS042bDiCZXg6bQNJmYoaE&quot;

julia&gt; sign!(jwt, keyset, keyid)

julia&gt; issigned(jwt)
true

julia&gt; jwt # note the additional header and signature
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjRGeXRwM0xmQmhyaUQwZVotazNhTlMwNDJiRGlDWlhnNmJRTkptWW9hRSJ9.eyJuYW1lIjoiRXhhbXBsZSBVc2VyIiwiZXhwIjoxNTM2MDgwNjUxLCJhdWQiOiJleGFtcGxlLWF1ZGllbmNlIiwic3ViIjoiQ2hVeGpmZ3NhamZ1cmpzamR1dDA0ODM2NzJrZGhnc3RneTI4M2pzc1pRIiwiaWF0IjoxNTM1OTk0MjUxLCJpc3MiOiJodHRwczovL2F1dGgyLmp1bGlhY29tcHV0aW5nLmlvL2RleCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiMjIyMjIyLUctSkpKSkpKSkpKSkpKSiIsIm5vbmNlIjoiMTc3Nzc3Nzc3Nzc3N2FhYWFhYWFhYWJiYmJiYmJiYmIiLCJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20ifQ.zfq-DT4Ft_MSU34pwFrMaealWGs0j7Ynhs9iKjf5Uf4
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">issigned</span>(jwt)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> keyset <span class="pl-k">=</span> <span class="pl-c1">JWKSet</span>(<span class="pl-s"><span class="pl-pds">"</span>file:///my/secret/location/jwkkey.json<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">refresh!</span>(keyset)

julia<span class="pl-k">&gt;</span> keyid <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">first</span>(keyset<span class="pl-k">.</span>keys)) <span class="pl-c"><span class="pl-c">#</span> using the first key in the key set</span>
<span class="pl-s"><span class="pl-pds">"</span>4Fytp3LfBhriD0eZ-k3aNS042bDiCZXg6bQNJmYoaE<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sign!</span>(jwt, keyset, keyid)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">issigned</span>(jwt)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> jwt <span class="pl-c"><span class="pl-c">#</span> note the additional header and signature</span>
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjRGeXRwM0xmQmhyaUQwZVotazNhTlMwNDJiRGlDWlhnNmJRTkptWW9hRSJ9<span class="pl-k">.</span>eyJuYW1lIjoiRXhhbXBsZSBVc2VyIiwiZXhwIjoxNTM2MDgwNjUxLCJhdWQiOiJleGFtcGxlLWF1ZGllbmNlIiwic3ViIjoiQ2hVeGpmZ3NhamZ1cmpzamR1dDA0ODM2NzJrZGhnc3RneTI4M2pzc1pRIiwiaWF0IjoxNTM1OTk0MjUxLCJpc3MiOiJodHRwczovL2F1dGgyLmp1bGlhY29tcHV0aW5nLmlvL2RleCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiMjIyMjIyLUctSkpKSkpKSkpKSkpKSiIsIm5vbmNlIjoiMTc3Nzc3Nzc3Nzc3N2FhYWFhYWFhYWJiYmJiYmJiYmIiLCJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20ifQ<span class="pl-k">.</span>zfq<span class="pl-k">-</span>DT4Ft_MSU34pwFrMaealWGs0j7Ynhs9iKjf5Uf4</pre></div>
<p>The <code>kid</code> method shows the key id used to sign a JWT. This is useful while validating a JWT.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; kid(jwt)
&quot;4Fytp3LfBhriD0eZ-k3aNS042bDiCZXg6bQNJmYoaE&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">kid</span>(jwt)
<span class="pl-s"><span class="pl-pds">"</span>4Fytp3LfBhriD0eZ-k3aNS042bDiCZXg6bQNJmYoaE<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-validation" class="anchor" aria-hidden="true" href="#validation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Validation</h2>
<p>To validate a JWT against a key, call the <code>validate!</code> method, passing a key set and the key id to use.</p>
<p>The <code>isvalid</code> method can be used to check if a JWT is valid (or has been validated at all). It returns <code>nothing</code> if validation has not been attempted and a <code>Bool</code> indicating validity if it has been validated earlier.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; isvalid(jwt2)

julia&gt; validate!(jwt, keyset, keyname)
true

julia&gt; isvalid(jwt)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">isvalid</span>(jwt2)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">validate!</span>(jwt, keyset, keyname)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isvalid</span>(jwt)
<span class="pl-c1">true</span></pre></div>
</article></div>