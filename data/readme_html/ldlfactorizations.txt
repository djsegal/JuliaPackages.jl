<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ldlfactorizations-factorization-of-symmetric-matrices" class="anchor" aria-hidden="true" href="#ldlfactorizations-factorization-of-symmetric-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LDLFactorizations: Factorization of Symmetric Matrices</h1>
<p><a href="https://travis-ci.org/JuliaSmoothOptimizers/LDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/79dabe89ef5a83d5b2877d621b492006e18cb0b5/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f4c444c466163746f72697a6174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/LDLFactorizations.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dpo/ldlfactorizations-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/cc000ac5288edac4ce216203404d09f63ecfd694/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f65797972676f3771673775786276786d2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/eyyrgo7qg7uxbvxm/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/LDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51490daa2be844511db81755a320e4f1d39658da/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c444c466163746f72697a6174696f6e732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaSmoothOptimizers/LDLFactorizations.jl.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaSmoothOptimizers/LDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/85db9e607e4b5bf791924c862dade305576a55eb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c444c466163746f72697a6174696f6e732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaSmoothOptimizers/LDLFactorizations.jl/badge.svg" style="max-width:100%;"></a></p>
<p>A translation of Tim Davis's Concise LDLᵀ Factorization, part of <a href="http://faculty.cse.tamu.edu/davis/suitesparse.html" rel="nofollow">SuiteSparse</a>.</p>
<p>This package is appropriate for matrices A that possess a factorization of the
form LDLᵀ without pivoting, where L is unit lower triangular and D is <em>diagonal</em> (indefinite in general), including definite and quasi-definite matrices.</p>
<p>LDLFactorizations.jl should not be expected to be as fast, as robust or as accurate as factorization
packages such as <a href="https://github.com/JuliaSmoothOptimizers/HSL.jl">HSL.jl</a>, <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl">MUMPS.jl</a> or <a href="https://github.com/JuliaSparse/Pardiso.jl">Pardiso.jl</a>.
Those are multifrontal and/or implement various forms of parallelism, and
employ sophisticated pivot strategies.</p>
<p>The main advantages of LDLFactorizations.jl are that</p>
<ol>
<li>
<p>it is very short and has a small footprint;</p>
</li>
<li>
<p>it is in pure Julia, and so</p>
<p>2.a. it does not require external compiled dependencies;</p>
<p>2.b. it will work with multiple input data types.</p>
</li>
</ol>
<p>Whereas MUMPS.jl, HSL.jl and Pardiso.jl only work with single and double precision
reals and complex data types, LDLFactorizations.jl accepts any numerical data type.</p>
<h1><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h1>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add LDLFactorizations</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>The only exported functions are <code>ldl()</code>, <code>\</code> and <code>ldiv!</code>.
Calling <code>ldl()</code> with a dense array converts it to a sparse matrix.
A permutation ordering can be supplied: <code>ldl(A, p)</code> where <code>p</code> is an <code>Int</code>
array representing a permutation of the integers between 1 and the order
of <code>A</code>.
If no permutation is supplied, one is automatically computed using <a href="https://github.com/JuliaSmoothOptimizers/AMD.jl">AMD.jl</a>.
Only the upper triangle of <code>A</code> is accessed.</p>
<p><code>ldl</code> returns a factorization in the form of a <code>LDLFactorization</code> object.
The <code>\</code> and <code>ldiv!</code> methods are implemented for objects of type <code>LDLFactorization</code> so that
solving a linear system is as easy as</p>
<div class="highlight highlight-source-julia"><pre>LDLT <span class="pl-k">=</span> <span class="pl-c1">ldl</span>(A)  <span class="pl-c"><span class="pl-c">#</span> LDLᵀ factorization of A</span>

x <span class="pl-k">=</span> LDLT <span class="pl-k">\</span> b   <span class="pl-c"><span class="pl-c">#</span> solves Ax = b</span>

<span class="pl-c1">ldiv!</span>(LDLT, b)     <span class="pl-c"><span class="pl-c">#</span> computes LDLT \ b in-place and overwriting b to store the result</span>
y <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b)
<span class="pl-c1">ldiv!</span>(y, LDLT, b)  <span class="pl-c"><span class="pl-c">#</span> computes LDLT \ b in-place and store the result in y</span></pre></div>
<p>The factorization can of course be reused to solve for multiple right-hand
sides.</p>
<p>Factors can be accessed as <code>LDLT.L</code> and <code>LDLT.D</code>, and the permutation vector as <code>LDLT.P</code>.
Because the L factor is unit lower triangular, its diagonal is not stored.
Thus the factors satisfy: PAPᵀ = (L + I) D (L + I)ᵀ.</p>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<p>Timothy A. Davis. 2005. Algorithm 849: A concise sparse Cholesky factorization package. ACM Trans. Math. Softw. 31, 4 (December 2005), 587-591. DOI <a href="http://dx.doi.org/10.1145/1114268.1114277" rel="nofollow">10.1145/1114268.1114277</a>.</p>
<p>Like the original LDL, this package is distributed under the LGPL.</p>
<p><a href="http://www.gnu.org/licenses/lgpl.html" title="LGPLv3" rel="nofollow"><img src="https://camo.githubusercontent.com/166e728afb14dbf4308f223ece7c6ec0d4e51773/687474703a2f2f7777772e676e752e6f72672f67726170686963732f6c67706c76332d38387833312e706e67" alt="LGPLv3" data-canonical-src="http://www.gnu.org/graphics/lgplv3-88x31.png" style="max-width:100%;"></a></p>
</article></div>