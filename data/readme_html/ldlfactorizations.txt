<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ldlfactorizations-factorization-of-symmetric-matrices" class="anchor" aria-hidden="true" href="#ldlfactorizations-factorization-of-symmetric-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LDLFactorizations: Factorization of Symmetric Matrices</h1>
<p dir="auto">A translation of Tim Davis's Concise LDLᵀ Factorization, part of <a href="http://faculty.cse.tamu.edu/davis/suitesparse.html" rel="nofollow">SuiteSparse</a> with several improvements.</p>
<p dir="auto">Please cite this repository if you use LDLFactorizations.jl in your work: see <a href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl/blob/main/CITATION.bib"><code>CITATION.bib</code></a>.</p>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/98073166" rel="nofollow"><img src="https://camo.githubusercontent.com/1db7c7fcaa82a5be037688610ecb2663c56696047f49f18a9b8fbe11bd324f10/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39383037333136362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/98073166.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl/workflows/CI/badge.svg?branch=main"><img src="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl/workflows/CI/badge.svg?branch=main" alt="CI" style="max-width: 100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/LDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/69c8f042d7a4aa8d77350491909ee9d7b1b0f48f7c39109d9575f6b0e377f7fd/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c444c466163746f72697a6174696f6e732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaSmoothOptimizers/LDLFactorizations.jl.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSmoothOptimizers/LDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b5ce5efd9e07d65a98bcfa2508b3cbde026afa328d8fd7bc7e07042c36bae91/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961536d6f6f74684f7074696d697a6572732f4c444c466163746f72697a6174696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaSmoothOptimizers/LDLFactorizations.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/LDLFactorizations.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation/stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/LDLFactorizations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation/dev" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is appropriate for matrices A that possess a factorization of the
form LDLᵀ without pivoting, where L is unit lower triangular and D is <em>diagonal</em> (indefinite in general), including definite and quasi-definite matrices.</p>
<p dir="auto">LDLFactorizations.jl should not be expected to be as fast, as robust or as accurate as factorization
packages such as <a href="https://github.com/JuliaSmoothOptimizers/HSL.jl">HSL.jl</a>, <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl">MUMPS.jl</a> or <a href="https://github.com/JuliaSparse/Pardiso.jl">Pardiso.jl</a>.
Those are multifrontal and/or implement various forms of parallelism, and
employ sophisticated pivot strategies.</p>
<p dir="auto">The main advantages of LDLFactorizations.jl are that</p>
<ol dir="auto">
<li>
<p dir="auto">it is very short and has a small footprint;</p>
</li>
<li>
<p dir="auto">it is in pure Julia, and so</p>
<p dir="auto">2.a. it does not require external compiled dependencies;</p>
<p dir="auto">2.b. it will work with multiple input data types.</p>
</li>
</ol>
<p dir="auto">Whereas MUMPS.jl, HSL.jl and Pardiso.jl only work with single and double precision
reals and complex data types, LDLFactorizations.jl accepts any numerical data type.</p>
<h1 dir="auto"><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add LDLFactorizations"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add LDLFactorizations</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">The only exported functions are <code>ldl()</code>, <code>\</code> and <code>ldiv!</code>.
Calling <code>ldl()</code> with a dense array converts it to a sparse matrix.
A permutation ordering can be supplied: <code>ldl(A, p)</code> where <code>p</code> is an <code>Int</code>
array representing a permutation of the integers between 1 and the order
of <code>A</code>.
If no permutation is supplied, one is automatically computed using <a href="https://github.com/JuliaSmoothOptimizers/AMD.jl">AMD.jl</a>.
Only the upper triangle of <code>A</code> is accessed.</p>
<p dir="auto"><code>ldl</code> returns a factorization in the form of a <code>LDLFactorization</code> object.
The <code>\</code> and <code>ldiv!</code> methods are implemented for objects of type <code>LDLFactorization</code> so that
solving a linear system is as easy as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="LDLT = ldl(A)  # LDLᵀ factorization of A

x = LDLT \ b   # solves Ax = b

ldiv!(LDLT, b)     # computes LDLT \ b in-place and overwriting b to store the result
y = similar(b)
ldiv!(y, LDLT, b)  # computes LDLT \ b in-place and store the result in y"><pre>LDLT <span class="pl-k">=</span> <span class="pl-c1">ldl</span>(A)  <span class="pl-c"><span class="pl-c">#</span> LDLᵀ factorization of A</span>

x <span class="pl-k">=</span> LDLT <span class="pl-k">\</span> b   <span class="pl-c"><span class="pl-c">#</span> solves Ax = b</span>

<span class="pl-c1">ldiv!</span>(LDLT, b)     <span class="pl-c"><span class="pl-c">#</span> computes LDLT \ b in-place and overwriting b to store the result</span>
y <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b)
<span class="pl-c1">ldiv!</span>(y, LDLT, b)  <span class="pl-c"><span class="pl-c">#</span> computes LDLT \ b in-place and store the result in y</span></pre></div>
<p dir="auto">The factorization can of course be reused to solve for multiple right-hand
sides.</p>
<p dir="auto">Factors can be accessed as <code>LDLT.L</code> and <code>LDLT.D</code>, and the permutation vector as <code>LDLT.P</code>.
Because the L factor is unit lower triangular, its diagonal is not stored.
Thus the factors satisfy: PAPᵀ = (L + I) D (L + I)ᵀ.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">Timothy A. Davis. 2005. Algorithm 849: A concise sparse Cholesky factorization package. ACM Trans. Math. Softw. 31, 4 (December 2005), 587-591. DOI <a href="http://dx.doi.org/10.1145/1114268.1114277" rel="nofollow">10.1145/1114268.1114277</a>.</p>
<p dir="auto">Like the original LDL, this package is distributed under the LGPL.</p>
<p dir="auto"><a href="http://www.gnu.org/licenses/lgpl.html" title="LGPLv3" rel="nofollow"><img src="https://camo.githubusercontent.com/44002d8b2f35476d89809548d1ad3dc776f3134e2458f06919ad321d34d5bc47/687474703a2f2f7777772e676e752e6f72672f67726170686963732f6c67706c76332d38387833312e706e67" alt="LGPLv3" data-canonical-src="http://www.gnu.org/graphics/lgplv3-88x31.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-bug-reports-and-discussions" class="anchor" aria-hidden="true" href="#bug-reports-and-discussions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bug reports and discussions</h2>
<p dir="auto">If you think you found a bug, feel free to open an <a href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl/issues">issue</a>.
Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.</p>
<p dir="auto">If you want to ask a question not suited for a bug report, feel free to start a discussion <a href="https://github.com/JuliaSmoothOptimizers/Organization/discussions">here</a>. This forum is for general discussion about this repository and the <a href="https://github.com/JuliaSmoothOptimizers">JuliaSmoothOptimizers</a> organization, so questions about any of our packages are welcome.</p>
</article></div>