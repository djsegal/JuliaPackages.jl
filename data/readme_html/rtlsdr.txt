<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rtlsdr" class="anchor" aria-hidden="true" href="#rtlsdr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RTLSDR</h1>
<p>A wrapper for the librtlsdr C libraries.
Currently, this only works on Linux (I think).
You need to download the librtlsdr libraries.</p>
<p>This code is heavily based off the
<a href="https://github.com/roger-/pyrtlsdr">pyrtlsdr libary</a> by github user <code>roger-</code>.</p>
<h2><a id="user-content-librtlsdr-c-libraries" class="anchor" aria-hidden="true" href="#librtlsdr-c-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>librtlsdr C libraries</h2>
<p>Julia needs to find <code>librtlsdr.so</code> somewhere on your system.
To see if Julia can find it, you can use <code>find_library</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Libdl
find_library(&quot;librtlsdr&quot;)   # returns empty string if library not found
"><pre><span class="pl-k">using</span> Libdl
<span class="pl-c1">find_library</span>(<span class="pl-s"><span class="pl-pds">"</span>librtlsdr<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> returns empty string if library not found</span></pre></div>
<p>You can also type the following into an Ubuntu shell to help find it:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="ldconfig -p | grep librtlsdr
"><pre>ldconfig -p <span class="pl-k">|</span> grep librtlsdr</pre></div>
<h2><a id="user-content-quick-example" class="anchor" aria-hidden="true" href="#quick-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RTLSDR

r = RtlSdr()

set_rate(r, 2.0e6)
set_freq(r, 88.5e6)		# if we wanted the center freq on NPR

samples = read_samples(r, 1024)

# plot power spectral density
using PyPlot
psd(samples)
"><pre><span class="pl-k">using</span> RTLSDR

r <span class="pl-k">=</span> <span class="pl-c1">RtlSdr</span>()

<span class="pl-c1">set_rate</span>(r, <span class="pl-c1">2.0e6</span>)
<span class="pl-c1">set_freq</span>(r, <span class="pl-c1">88.5e6</span>)		<span class="pl-c"><span class="pl-c">#</span> if we wanted the center freq on NPR</span>

samples <span class="pl-k">=</span> <span class="pl-c1">read_samples</span>(r, <span class="pl-c1">1024</span>)

<span class="pl-c"><span class="pl-c">#</span> plot power spectral density</span>
<span class="pl-k">using</span> PyPlot
<span class="pl-c1">psd</span>(samples)</pre></div>
<h2><a id="user-content-function-list" class="anchor" aria-hidden="true" href="#function-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function list</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r = RtlSdr()            # creates RtlSdr object with dongle pointer

set_rate(r, rate_Hz)      # rtlsdr_set_sample_rate
get_rate(r)

set_freq(r, freq_Hz)    # rtlsdr_set_center_freq
get_freq(r)

set_agc_mode(r, mode)               # rtlsdr_set_agc_mode
set_tuner_gain_mode(r, manual)      # rtlsdr_set_tuner_gain_mode

close(r)    # rtlsdr_close. cannot read from r once this is called

# rtlsdr_read_sync
# returns vector of length num_bytes with Uint8 (bytes)
# num_bytes must be multiple of 512
read_bytes(r, num_bytes)

# converts vector of Uint8 into a vector (half as long) of complex iq samples
packed_bytes_to_iq(bytes)

# equivalent to read_bytes + packed_bytes_to_iq
# returns a vector of length num_samples with complex samples
# num_samples must be multiple of 256
read_samples(r, num_samples)
"><pre>r <span class="pl-k">=</span> <span class="pl-c1">RtlSdr</span>()            <span class="pl-c"><span class="pl-c">#</span> creates RtlSdr object with dongle pointer</span>

<span class="pl-c1">set_rate</span>(r, rate_Hz)      <span class="pl-c"><span class="pl-c">#</span> rtlsdr_set_sample_rate</span>
<span class="pl-c1">get_rate</span>(r)

<span class="pl-c1">set_freq</span>(r, freq_Hz)    <span class="pl-c"><span class="pl-c">#</span> rtlsdr_set_center_freq</span>
<span class="pl-c1">get_freq</span>(r)

<span class="pl-c1">set_agc_mode</span>(r, mode)               <span class="pl-c"><span class="pl-c">#</span> rtlsdr_set_agc_mode</span>
<span class="pl-c1">set_tuner_gain_mode</span>(r, manual)      <span class="pl-c"><span class="pl-c">#</span> rtlsdr_set_tuner_gain_mode</span>

<span class="pl-c1">close</span>(r)    <span class="pl-c"><span class="pl-c">#</span> rtlsdr_close. cannot read from r once this is called</span>

<span class="pl-c"><span class="pl-c">#</span> rtlsdr_read_sync</span>
<span class="pl-c"><span class="pl-c">#</span> returns vector of length num_bytes with Uint8 (bytes)</span>
<span class="pl-c"><span class="pl-c">#</span> num_bytes must be multiple of 512</span>
<span class="pl-c1">read_bytes</span>(r, num_bytes)

<span class="pl-c"><span class="pl-c">#</span> converts vector of Uint8 into a vector (half as long) of complex iq samples</span>
<span class="pl-c1">packed_bytes_to_iq</span>(bytes)

<span class="pl-c"><span class="pl-c">#</span> equivalent to read_bytes + packed_bytes_to_iq</span>
<span class="pl-c"><span class="pl-c">#</span> returns a vector of length num_samples with complex samples</span>
<span class="pl-c"><span class="pl-c">#</span> num_samples must be multiple of 256</span>
<span class="pl-c1">read_samples</span>(r, num_samples)</pre></div>
<p><a href="https://travis-ci.org/dressel/RTLSDR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52c83dabd714789103f34e9b96bac05ea8caef2d7d42cd93b4d3b6b9be8050e0/68747470733a2f2f7472617669732d63692e6f72672f6472657373656c2f52544c5344522e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dressel/RTLSDR.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/dressel/RTLSDR.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2979efaf58ecefe16f88050d0593105e0a12fd9d1f0b485d2c8926ce5e91d0f4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6472657373656c2f52544c5344522e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/dressel/RTLSDR.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/dressel/RTLSDR.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/34c25ae1e4e1a3c74dc316d05333dd7f394b67c8a422f32128cf32e5d9460510/687474703a2f2f636f6465636f762e696f2f6769746875622f6472657373656c2f52544c5344522e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/dressel/RTLSDR.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
</article></div>