<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-progressbarsjl-formerly-tqdmjl" class="anchor" aria-hidden="true" href="#progressbarsjl-formerly-tqdmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ProgressBars.jl (formerly Tqdm.jl)</h1>
<p>A fast, extensible progress bar for Julia. This is a Julia clone of the great Python package  <a href="https://pypi.python.org/pypi/tqdm" rel="nofollow"><code>tqdm</code></a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Run the following in a julia prompt:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ProgressBars&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ProgressBars<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ProgressBars

julia&gt; for i in ProgressBar(1:100000) #wrap any iterator
          #code
       end
100.00%┣█████████████████████████████████████████████████┫ 100000/100000 [00:12&lt;00:00 , 8616.43 it/s]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ProgressBars

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100000</span>) <span class="pl-c"><span class="pl-c">#</span>wrap any iterator</span>
          <span class="pl-c"><span class="pl-c">#</span>code</span>
       <span class="pl-k">end</span>
<span class="pl-c1">100.00</span><span class="pl-k">%</span>┣█████████████████████████████████████████████████┫ <span class="pl-c1">100000</span><span class="pl-k">/</span><span class="pl-c1">100000</span> [<span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">12</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> , <span class="pl-c1">8616.43</span> it<span class="pl-k">/</span>s]</pre></div>
<p>There is a <code>tqdm</code> alias, so that people coming from python will feel right at home :)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ProgressBars

julia&gt; for i in tqdm(1:100000) #wrap any iterator
          #code
       end
100.00%┣█████████████████████████████████████████████████┫ 100000/100000 [00:12&lt;00:00 , 8616.43 it/s]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ProgressBars

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">tqdm</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100000</span>) <span class="pl-c"><span class="pl-c">#</span>wrap any iterator</span>
          <span class="pl-c"><span class="pl-c">#</span>code</span>
       <span class="pl-k">end</span>
<span class="pl-c1">100.00</span><span class="pl-k">%</span>┣█████████████████████████████████████████████████┫ <span class="pl-c1">100000</span><span class="pl-k">/</span><span class="pl-c1">100000</span> [<span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">12</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> , <span class="pl-c1">8616.43</span> it<span class="pl-k">/</span>s]</pre></div>
<p>Or with a set description (e.g. for loss values when training neural networks)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; iter = ProgressBar(1:100)
       for i in iter
          # ... Neural Network Training Code
          loss = exp(-i)
          set_description(iter, string(@sprintf(&quot;Loss: %.2f&quot;, loss)))
       end
Loss: 0.02 3.00%┣█▌                                                  ┫ 3/100 00:00&lt;00:02, 64.27 it/s]
"><pre>julia<span class="pl-k">&gt;</span> iter <span class="pl-k">=</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)
       <span class="pl-k">for</span> i <span class="pl-k">in</span> iter
          <span class="pl-c"><span class="pl-c">#</span> ... Neural Network Training Code</span>
          loss <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>i)
          <span class="pl-c1">set_description</span>(iter, <span class="pl-c1">string</span>(<span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>Loss: %.2f<span class="pl-pds">"</span></span>, loss)))
       <span class="pl-k">end</span>
Loss<span class="pl-k">:</span> <span class="pl-c1">0.02</span> <span class="pl-c1">3.00</span><span class="pl-k">%</span>┣█▌                                                  ┫ <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">100</span> <span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">02</span>, <span class="pl-c1">64.27</span> it<span class="pl-k">/</span>s]</pre></div>
<p>Printing persistent messages while using a ProgressBar:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; iter = ProgressBar(1:5)
       for i in iter
         println(iter, &quot;Printing from iteration $i&quot;)
         sleep(0.2)
       end
Printing from iteration 1
Printing from iteration 2
Printing from iteration 3
Printing from iteration 4
Printing from iteration 5
100.0%┣█████████████████████████████████████████████████████████████████┫ 5/5 [00:03&lt;00:00, 1.5 it/s]
"><pre>julia<span class="pl-k">&gt;</span> iter <span class="pl-k">=</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
       <span class="pl-k">for</span> i <span class="pl-k">in</span> iter
         <span class="pl-c1">println</span>(iter, <span class="pl-s"><span class="pl-pds">"</span>Printing from iteration <span class="pl-v">$i</span><span class="pl-pds">"</span></span>)
         <span class="pl-c1">sleep</span>(<span class="pl-c1">0.2</span>)
       <span class="pl-k">end</span>
Printing from iteration <span class="pl-c1">1</span>
Printing from iteration <span class="pl-c1">2</span>
Printing from iteration <span class="pl-c1">3</span>
Printing from iteration <span class="pl-c1">4</span>
Printing from iteration <span class="pl-c1">5</span>
<span class="pl-c1">100.0</span><span class="pl-k">%</span>┣█████████████████████████████████████████████████████████████████┫ <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">5</span> [<span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">03</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>, <span class="pl-c1">1.5</span> it<span class="pl-k">/</span>s]</pre></div>
<p>Postfixes are also possible, if that's your kind of thing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; iter = ProgressBar(1:100)
       for i in iter
          # ... Neural Network Training Code
          loss = exp(-i)
          set_postfix(iter, Loss=@sprintf(&quot;%.2f&quot;, loss))
       end
100.0%┣█████████████████████████████████████████████┫ 1000/1000 [00:02&lt;00:00, 420.4 it/s, Loss: 0.37]
"><pre>julia<span class="pl-k">&gt;</span> iter <span class="pl-k">=</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)
       <span class="pl-k">for</span> i <span class="pl-k">in</span> iter
          <span class="pl-c"><span class="pl-c">#</span> ... Neural Network Training Code</span>
          loss <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>i)
          <span class="pl-c1">set_postfix</span>(iter, Loss<span class="pl-k">=</span><span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%.2f<span class="pl-pds">"</span></span>, loss))
       <span class="pl-k">end</span>
<span class="pl-c1">100.0</span><span class="pl-k">%</span>┣█████████████████████████████████████████████┫ <span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span> [<span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">02</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>, <span class="pl-c1">420.4</span> it<span class="pl-k">/</span>s, Loss<span class="pl-k">:</span> <span class="pl-c1">0.37</span>]</pre></div>
<p>You can also use multi-line postfixes, like so:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; iter = ProgressBar(1:100)
       for i in iter
          # ... Neural Network Training Code
          loss = exp(-i)
          set_multiline_postfix(iter, &quot;Test 1: $(rand())\nTest 2: $(rand())\nTest 3: $loss)&quot;)
       end
100.0%┣█████████████████████████████████████████████████████████┫ 1000/1000 [00:02&lt;00:00, 420.4 it/s]
Test1: 0.6740503146383823
Test2: 0.23694728303439727
Test3: 0.06787944117144233
"><pre>julia<span class="pl-k">&gt;</span> iter <span class="pl-k">=</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)
       <span class="pl-k">for</span> i <span class="pl-k">in</span> iter
          <span class="pl-c"><span class="pl-c">#</span> ... Neural Network Training Code</span>
          loss <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>i)
          <span class="pl-c1">set_multiline_postfix</span>(iter, <span class="pl-s"><span class="pl-pds">"</span>Test 1: <span class="pl-v">$(<span class="pl-c1">rand</span>())</span><span class="pl-cce">\n</span>Test 2: <span class="pl-v">$(<span class="pl-c1">rand</span>())</span><span class="pl-cce">\n</span>Test 3: <span class="pl-v">$loss</span>)<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
<span class="pl-c1">100.0</span><span class="pl-k">%</span>┣█████████████████████████████████████████████████████████┫ <span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span> [<span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">02</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>, <span class="pl-c1">420.4</span> it<span class="pl-k">/</span>s]
Test1<span class="pl-k">:</span> <span class="pl-c1">0.6740503146383823</span>
Test2<span class="pl-k">:</span> <span class="pl-c1">0.23694728303439727</span>
Test3<span class="pl-k">:</span> <span class="pl-c1">0.06787944117144233</span></pre></div>
<h3><a id="user-content-parallel-for-loops" class="anchor" aria-hidden="true" href="#parallel-for-loops"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel for-loops</h3>
<p>Now with added support for <code>Threads.@threads for</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = []
       Threads.@threads for i in ProgressBar(1:1000)
         push!(a, i * 2)
       end
100.00%┣██████████████████████████████████████████████████████┫ 1000/1000 00:00&lt;00:00, 28753.50 it/s]
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> []
       Threads<span class="pl-k">.</span><span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>)
         <span class="pl-c1">push!</span>(a, i <span class="pl-k">*</span> <span class="pl-c1">2</span>)
       <span class="pl-k">end</span>
<span class="pl-c1">100.00</span><span class="pl-k">%</span>┣██████████████████████████████████████████████████████┫ <span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span> <span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>, <span class="pl-c1">28753.50</span> it<span class="pl-k">/</span>s]</pre></div>
<h3><a id="user-content-printing-delay" class="anchor" aria-hidden="true" href="#printing-delay"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Printing Delay</h3>
<p>By default, the progress bar will update at most every 50ms in order to prevent the string IO from slowing down very fast iterations.
This can be adjusted by passing the desired printing delay (in seconds) to the <code>printing_delay</code>-parameter when constructing the progress bar:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; for i in ProgressBar(1:1000, printing_delay=0.001)
         # do stuff
       end
100.0%┣████████████████████████████████████████████████████████┫ 1000/1000 [00:00&lt;00:00, 3006.8 it/s]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">ProgressBar</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>, printing_delay<span class="pl-k">=</span><span class="pl-c1">0.001</span>)
         <span class="pl-c"><span class="pl-c">#</span> do stuff</span>
       <span class="pl-k">end</span>
<span class="pl-c1">100.0</span><span class="pl-k">%</span>┣████████████████████████████████████████████████████████┫ <span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span> [<span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">&lt;</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>, <span class="pl-c1">3006.8</span> it<span class="pl-k">/</span>s]</pre></div>
</article></div>