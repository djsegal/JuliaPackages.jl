<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-recursivefactorization" class="anchor" aria-hidden="true" href="#recursivefactorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RecursiveFactorization</h1>
<p dir="auto"><a href="https://github.com/YingboMa/RecursiveFactorization.jl/actions"><img src="https://github.com/YingboMa/RecursiveFactorization.jl/workflows/CI/badge.svg" alt="Github Action CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/YingboMa/RecursiveFactorization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3e4c245da4bf2c386da6a39ebd8457ef35400644cd9f8859fca6b25652cb2381/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f526563757273697665466163746f72697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/YingboMa/RecursiveFactorization.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<hr>
<p dir="auto"><code>RecursiveFactorization.jl</code> is a package that collects various recursive matrix
factorization algorithms.</p>
<h4 dir="auto"><a id="user-content-implemented-algorithms" class="anchor" aria-hidden="true" href="#implemented-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implemented Algorithms:</h4>
<ul dir="auto">
<li>Sivan Toledo's recursive left-looking LU algorithm. DOI:
<a href="https://epubs.siam.org/doi/10.1137/S0895479896297744" rel="nofollow">10.1137/S0895479896297744</a></li>
</ul>
<h4 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage:</h4>
<p dir="auto"><code>RecursiveFactorization</code> does not export any functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RecursiveFactorization

julia&gt; A = rand(5, 5);

julia&gt; RecursiveFactorization.lu(A); # out-of-place

julia&gt; RecursiveFactorization.lu!(copy(A)); # in-place

julia&gt; RecursiveFactorization.lu!(copy(A), Vector{Int}(undef, size(A, 2))); # in-place w/ pivoting vector"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecursiveFactorization

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> RecursiveFactorization<span class="pl-k">.</span><span class="pl-c1">lu</span>(A); <span class="pl-c"><span class="pl-c">#</span> out-of-place</span>

julia<span class="pl-k">&gt;</span> RecursiveFactorization<span class="pl-k">.</span><span class="pl-c1">lu!</span>(<span class="pl-c1">copy</span>(A)); <span class="pl-c"><span class="pl-c">#</span> in-place</span>

julia<span class="pl-k">&gt;</span> RecursiveFactorization<span class="pl-k">.</span><span class="pl-c1">lu!</span>(<span class="pl-c1">copy</span>(A), <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(undef, <span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>))); <span class="pl-c"><span class="pl-c">#</span> in-place w/ pivoting vector</span></pre></div>
<h4 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance:</h4>
<p dir="auto">For small to medium sized matrices, it is beneficial to use
<code>RecursiveFactorization</code> over <code>OpenBLAS</code>. The benchmark script is available in
<code>perf/lu.jl</code></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/17304743/81491200-555b1a80-9259-11ea-95c1-ae98b36f3779.png"><img src="https://user-images.githubusercontent.com/17304743/81491200-555b1a80-9259-11ea-95c1-ae98b36f3779.png" alt="lubench" style="max-width: 100%;"></a></p>
</article></div>