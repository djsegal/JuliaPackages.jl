<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-recursivefactorization" class="anchor" aria-hidden="true" href="#recursivefactorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RecursiveFactorization</h1>
<p><a href="https://travis-ci.org/YingboMa/RecursiveFactorization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc18f59b371471a917275fe40a16d5ff12c7411a/68747470733a2f2f7472617669732d63692e6f72672f59696e67626f4d612f526563757273697665466163746f72697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/YingboMa/RecursiveFactorization.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/YingboMa/RecursiveFactorization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/940b4d0d646bd8622dc697636b6cc204da8d5c6c/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f526563757273697665466163746f72697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/YingboMa/RecursiveFactorization.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<hr>
<p><code>RecursiveFactorization.jl</code> is a package that collects various recursive matrix
factorization algorithms.</p>
<h4><a id="user-content-implemented-algorithms" class="anchor" aria-hidden="true" href="#implemented-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implemented Algorithms:</h4>
<ul>
<li>Sivan Toledo's recursive left-looking LU algorithm. DOI:
<a href="https://epubs.siam.org/doi/10.1137/S0895479896297744" rel="nofollow">10.1137/S0895479896297744</a></li>
</ul>
<h4><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage:</h4>
<p><code>RecursiveFactorization</code> does not export any functions.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecursiveFactorization

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> RecursiveFactorization<span class="pl-k">.</span><span class="pl-c1">lu</span>(A); <span class="pl-c"><span class="pl-c">#</span> out-of-place</span>

julia<span class="pl-k">&gt;</span> RecursiveFactorization<span class="pl-k">.</span><span class="pl-c1">lu!</span>(<span class="pl-c1">copy</span>(A)); <span class="pl-c"><span class="pl-c">#</span> in-place</span>

julia<span class="pl-k">&gt;</span> RecursiveFactorization<span class="pl-k">.</span><span class="pl-c1">lu!</span>(<span class="pl-c1">copy</span>(A), <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(undef, <span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>))); <span class="pl-c"><span class="pl-c">#</span> in-place w/ pivoting vector</span></pre></div>
<h4><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance:</h4>
<p>For small to medium sized matrices, it is beneficial to use
<code>RecursiveFactorization</code> over <code>OpenBLAS</code>. The benchmark script is available in
<code>perf/lu.jl</code></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/17304743/53050761-1714e800-3468-11e9-916a-148fbb4fbbf8.png"><img src="https://user-images.githubusercontent.com/17304743/53050761-1714e800-3468-11e9-916a-148fbb4fbbf8.png" alt="lubench" style="max-width:100%;"></a></p>
</article></div>