<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-adaptivedistancefields" class="anchor" aria-hidden="true" href="#adaptivedistancefields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AdaptiveDistanceFields</h1>
<p><a href="https://travis-ci.org/rdeits/AdaptiveDistanceFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/565da12ced261038743daab4f59038ffbe7b04bc0a72f7a4d96aea9a286ebaf3/68747470733a2f2f7472617669732d63692e6f72672f7264656974732f416461707469766544697374616e63654669656c64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rdeits/AdaptiveDistanceFields.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rdeits/AdaptiveDistanceFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/503fc1ad5a91e67f583fa44afff1b7129e3b55e9a2a69b45cb76f81912c8732b/68747470733a2f2f636f6465636f762e696f2f67682f7264656974732f416461707469766544697374616e63654669656c64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/rdeits/AdaptiveDistanceFields.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements the adaptively sampled distance fields (ADFs) introduced by Frisken et al. [1]. An ADF represents an arbitrary signed distance function by locally approximating that function with a bilinear interpolation over a quadtree (in 2D) or a trilinear interpolation over an octree (in 3D). When the ADF is created, each cell in the tree is subdivided until the multilinear approximation is a sufficiently close match to the real signed distance function over that cell.</p>
<p>The quadtree and octree data structures and the general adaptive sampling framework are provided by <a href="https://github.com/rdeits/RegionTrees.jl">RegionTrees.jl</a>. This package adds the ADF interpolation functions using <a href="https://github.com/tlycken/Interpolations.jl">Interpolations.jl</a>.</p>
<p>[1] Sarah F. Frisken, Ronald N. Perry, and Thouis R. Jones. "Adaptively Sampled Distance Fields: A General Representation of Shape for Computer Graphics". SIGGRAPH 2000.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Check out the <code>examples</code> folder for additional demonstrations.</p>
<p>To construct the adaptively sampled distance field, you need to at least provide the true signed distance function (typically one which is very expensive to compute) and a range over which to approximate it:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AdaptiveDistanceFields
using StaticArrays

# Define our true signed distance function
true_signed_distance(x) = norm(x - SVector(0, 0))

# Approximate the signed distance function over the 
# range [-1, 1] in x and y:
origin = SVector(-1, -1)
widths = SVector(2, 2)
adf = AdaptiveDistanceField(true_signed_distance, origin, widths)

# Now we can call the adaptive distance field instead 
# of the original function
adf(SVector(0.6, 0.75))
"><pre><span class="pl-k">using</span> AdaptiveDistanceFields
<span class="pl-k">using</span> StaticArrays

<span class="pl-c"><span class="pl-c">#</span> Define our true signed distance function</span>
<span class="pl-en">true_signed_distance</span>(x) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x <span class="pl-k">-</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>))

<span class="pl-c"><span class="pl-c">#</span> Approximate the signed distance function over the </span>
<span class="pl-c"><span class="pl-c">#</span> range [-1, 1] in x and y:</span>
origin <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
widths <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
adf <span class="pl-k">=</span> <span class="pl-c1">AdaptiveDistanceField</span>(true_signed_distance, origin, widths)

<span class="pl-c"><span class="pl-c">#</span> Now we can call the adaptive distance field instead </span>
<span class="pl-c"><span class="pl-c">#</span> of the original function</span>
<span class="pl-c1">adf</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.6</span>, <span class="pl-c1">0.75</span>))</pre></div>
<p>The accuracy of the approximation can be controlled with the <code>atol</code> and <code>rtol</code> parameters, which set absolute and relative distance error tolerance, respectively:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="rtol = 1e-2
atol = 1e-2
adf = AdaptiveDistanceField(true_signed_distance, origin, widths, rtol, atol)
"><pre>rtol <span class="pl-k">=</span> <span class="pl-c1">1e-2</span>
atol <span class="pl-k">=</span> <span class="pl-c1">1e-2</span>
adf <span class="pl-k">=</span> <span class="pl-c1">AdaptiveDistanceField</span>(true_signed_distance, origin, widths, rtol, atol)</pre></div>
<p>The meanings of <code>rtol</code> and <code>atol</code> are equivalent to those used by the built-in <code>isapprox()</code>: a cell is divided if <code>norm(true - approximate) &lt;= atol + rtol*max(norm(true), norm(approximate))</code>, evaluated at the center of the cell and and the center of each of its faces.</p>
<h2><a id="user-content-using-meshes" class="anchor" aria-hidden="true" href="#using-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using meshes</h2>
<p>The <a href="https://github.com/rdeits/EnhancedGJK.jl">EnhancedGJK.jl</a> package provides tools for computing the signed distance between convex bodies. In particular, it provides the <code>ReferenceDistance.signed_distance</code> function to compute the distance from a mesh to a point using a slow but straightforward algorithm. That particular method is ideal for adaptive approximation:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;EnhancedGJK&quot;)

julia&gt; using MeshIO

julia&gt; using FileIO

julia&gt; using BenchmarkTools

julia&gt; mesh = load(joinpath(Pkg.dir(&quot;EnhancedGJK&quot;), &quot;test&quot;, &quot;meshes&quot;, &quot;base_link.obj&quot;))

HomogenousMesh(
    normals: 52xGeometryTypes.Normal{3,Float32},     vertices: 52xFixedSizeArrays.Point{3,Float32},     faces: 100xGeometryTypes.Face{3,UInt32,-1}, )


julia&gt; adf = AdaptiveDistanceField(ReferenceDistance.signed_distance(mesh),
                                   SVector(-4., -4, -4), SVector(8., 8, 8),
                                   0.05, 0.05)
(::AdaptiveDistanceField) (generic function with 1 method)

julia&gt; p = SVector(0.2, 0.1, 0.15)
3-element StaticArrays.SVector{3,Float64}:
 0.2
 0.1
 0.15

julia&gt; @benchmark(ConvexMesh.signed_distance($mesh, $p))
BenchmarkTools.Trial:
  memory estimate:  1.94 KiB
  allocs estimate:  8
  --------------
  minimum time:     10.346 μs (0.00% GC)
  median time:      10.678 μs (0.00% GC)
  mean time:        11.914 μs (2.06% GC)
  maximum time:     2.510 ms (97.94% GC)
  --------------
  samples:          10000
  evals/sample:     1
  time tolerance:   5.00%
  memory tolerance: 1.00%

julia&gt; @benchmark($adf($p))
BenchmarkTools.Trial:
  memory estimate:  64 bytes
  allocs estimate:  4
  --------------
  minimum time:     145.978 ns (0.00% GC)
  median time:      148.954 ns (0.00% GC)
  mean time:        161.464 ns (2.11% GC)
  maximum time:     1.786 μs (89.29% GC)
  --------------
  samples:          10000
  evals/sample:     832
  time tolerance:   5.00%
  memory tolerance: 1.00%
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EnhancedGJK<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MeshIO

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FileIO

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> mesh <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>EnhancedGJK<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>meshes<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>base_link.obj<span class="pl-pds">"</span></span>))

<span class="pl-c1">HomogenousMesh</span>(
    normals<span class="pl-k">:</span> <span class="pl-c1">52</span>xGeometryTypes<span class="pl-k">.</span>Normal{<span class="pl-c1">3</span>,Float32},     vertices<span class="pl-k">:</span> <span class="pl-c1">52</span>xFixedSizeArrays<span class="pl-k">.</span>Point{<span class="pl-c1">3</span>,Float32},     faces<span class="pl-k">:</span> <span class="pl-c1">100</span>xGeometryTypes<span class="pl-k">.</span>Face{<span class="pl-c1">3</span>,UInt32,<span class="pl-k">-</span><span class="pl-c1">1</span>}, )


julia<span class="pl-k">&gt;</span> adf <span class="pl-k">=</span> <span class="pl-c1">AdaptiveDistanceField</span>(ReferenceDistance<span class="pl-k">.</span><span class="pl-c1">signed_distance</span>(mesh),
                                   <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">4.</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">8.</span>, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>),
                                   <span class="pl-c1">0.05</span>, <span class="pl-c1">0.05</span>)
(<span class="pl-k">::</span><span class="pl-c1">AdaptiveDistanceField</span>) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.2</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.15</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">3</span>,Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.1</span>
 <span class="pl-c1">0.15</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span>(ConvexMesh<span class="pl-k">.</span><span class="pl-c1">signed_distance</span>(<span class="pl-k">$</span>mesh, <span class="pl-k">$</span>p))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">1.94</span> KiB
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">8</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">10.346</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">10.678</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">11.914</span> μs (<span class="pl-c1">2.06</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">2.510</span> ms (<span class="pl-c1">97.94</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span>
  time tolerance<span class="pl-k">:</span>   <span class="pl-c1">5.00</span><span class="pl-k">%</span>
  memory tolerance<span class="pl-k">:</span> <span class="pl-c1">1.00</span><span class="pl-k">%</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span>(<span class="pl-k">$</span><span class="pl-c1">adf</span>(<span class="pl-k">$</span>p))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">64</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">4</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">145.978</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">148.954</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">161.464</span> ns (<span class="pl-c1">2.11</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">1.786</span> μs (<span class="pl-c1">89.29</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">832</span>
  time tolerance<span class="pl-k">:</span>   <span class="pl-c1">5.00</span><span class="pl-k">%</span>
  memory tolerance<span class="pl-k">:</span> <span class="pl-c1">1.00</span><span class="pl-k">%</span></pre></div>
</article></div>