<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-adaptivedistancefields" class="anchor" aria-hidden="true" href="#adaptivedistancefields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AdaptiveDistanceFields</h1>
<p><a href="https://travis-ci.org/rdeits/AdaptiveDistanceFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/13e8a3936c94cc629a2940d10a4d962cb6af5c4c/68747470733a2f2f7472617669732d63692e6f72672f7264656974732f416461707469766544697374616e63654669656c64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rdeits/AdaptiveDistanceFields.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rdeits/AdaptiveDistanceFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b60ac58ddba9ddfe92c88aa4db26700a12273ef/68747470733a2f2f636f6465636f762e696f2f67682f7264656974732f416461707469766544697374616e63654669656c64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/rdeits/AdaptiveDistanceFields.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements the adaptively sampled distance fields (ADFs) introduced by Frisken et al. [1]. An ADF represents an arbitrary signed distance function by locally approximating that function with a bilinear interpolation over a quadtree (in 2D) or a trilinear interpolation over an octree (in 3D). When the ADF is created, each cell in the tree is subdivided until the multilinear approximation is a sufficiently close match to the real signed distance function over that cell.</p>
<p>The quadtree and octree data structures and the general adaptive sampling framework are provided by <a href="https://github.com/rdeits/RegionTrees.jl">RegionTrees.jl</a>. This package adds the ADF interpolation functions using <a href="https://github.com/tlycken/Interpolations.jl">Interpolations.jl</a>.</p>
<p>[1] Sarah F. Frisken, Ronald N. Perry, and Thouis R. Jones. "Adaptively Sampled Distance Fields: A General Representation of Shape for Computer Graphics". SIGGRAPH 2000.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>Check out the <code>examples</code> folder for additional demonstrations.</p>
<p>To construct the adaptively sampled distance field, you need to at least provide the true signed distance function (typically one which is very expensive to compute) and a range over which to approximate it:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AdaptiveDistanceFields
<span class="pl-k">using</span> StaticArrays

<span class="pl-c"><span class="pl-c">#</span> Define our true signed distance function</span>
<span class="pl-en">true_signed_distance</span>(x) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x <span class="pl-k">-</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>))

<span class="pl-c"><span class="pl-c">#</span> Approximate the signed distance function over the </span>
<span class="pl-c"><span class="pl-c">#</span> range [-1, 1] in x and y:</span>
origin <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
widths <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
adf <span class="pl-k">=</span> <span class="pl-c1">AdaptiveDistanceField</span>(true_signed_distance, origin, widths)

<span class="pl-c"><span class="pl-c">#</span> Now we can call the adaptive distance field instead </span>
<span class="pl-c"><span class="pl-c">#</span> of the original function</span>
<span class="pl-c1">adf</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.6</span>, <span class="pl-c1">0.75</span>))</pre></div>
<p>The accuracy of the approximation can be controlled with the <code>atol</code> and <code>rtol</code> parameters, which set absolute and relative distance error tolerance, respectively:</p>
<div class="highlight highlight-source-julia"><pre>rtol <span class="pl-k">=</span> <span class="pl-c1">1e-2</span>
atol <span class="pl-k">=</span> <span class="pl-c1">1e-2</span>
adf <span class="pl-k">=</span> <span class="pl-c1">AdaptiveDistanceField</span>(true_signed_distance, origin, widths, rtol, atol)</pre></div>
<p>The meanings of <code>rtol</code> and <code>atol</code> are equivalent to those used by the built-in <code>isapprox()</code>: a cell is divided if <code>norm(true - approximate) &lt;= atol + rtol*max(norm(true), norm(approximate))</code>, evaluated at the center of the cell and and the center of each of its faces.</p>
<h2><a id="user-content-using-meshes" class="anchor" aria-hidden="true" href="#using-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using meshes</h2>
<p>The <a href="https://github.com/rdeits/EnhancedGJK.jl">EnhancedGJK.jl</a> package provides tools for computing the signed distance between convex bodies. In particular, it provides the <code>ReferenceDistance.signed_distance</code> function to compute the distance from a mesh to a point using a slow but straightforward algorithm. That particular method is ideal for adaptive approximation:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EnhancedGJK<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MeshIO

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FileIO

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> mesh <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>EnhancedGJK<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>meshes<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>base_link.obj<span class="pl-pds">"</span></span>))

<span class="pl-c1">HomogenousMesh</span>(
    normals<span class="pl-k">:</span> <span class="pl-c1">52</span>xGeometryTypes<span class="pl-k">.</span>Normal{<span class="pl-c1">3</span>,Float32},     vertices<span class="pl-k">:</span> <span class="pl-c1">52</span>xFixedSizeArrays<span class="pl-k">.</span>Point{<span class="pl-c1">3</span>,Float32},     faces<span class="pl-k">:</span> <span class="pl-c1">100</span>xGeometryTypes<span class="pl-k">.</span>Face{<span class="pl-c1">3</span>,UInt32,<span class="pl-k">-</span><span class="pl-c1">1</span>}, )


julia<span class="pl-k">&gt;</span> adf <span class="pl-k">=</span> <span class="pl-c1">AdaptiveDistanceField</span>(ReferenceDistance<span class="pl-k">.</span><span class="pl-c1">signed_distance</span>(mesh),
                                   <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">4.</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">8.</span>, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>),
                                   <span class="pl-c1">0.05</span>, <span class="pl-c1">0.05</span>)
(<span class="pl-k">::</span><span class="pl-c1">AdaptiveDistanceField</span>) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.2</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.15</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">3</span>,Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.1</span>
 <span class="pl-c1">0.15</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span>(ConvexMesh<span class="pl-k">.</span><span class="pl-c1">signed_distance</span>(<span class="pl-k">$</span>mesh, <span class="pl-k">$</span>p))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">1.94</span> KiB
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">8</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">10.346</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">10.678</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">11.914</span> μs (<span class="pl-c1">2.06</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">2.510</span> ms (<span class="pl-c1">97.94</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span>
  time tolerance<span class="pl-k">:</span>   <span class="pl-c1">5.00</span><span class="pl-k">%</span>
  memory tolerance<span class="pl-k">:</span> <span class="pl-c1">1.00</span><span class="pl-k">%</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span>(<span class="pl-k">$</span><span class="pl-c1">adf</span>(<span class="pl-k">$</span>p))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">64</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">4</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">145.978</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">148.954</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">161.464</span> ns (<span class="pl-c1">2.11</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">1.786</span> μs (<span class="pl-c1">89.29</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">832</span>
  time tolerance<span class="pl-k">:</span>   <span class="pl-c1">5.00</span><span class="pl-k">%</span>
  memory tolerance<span class="pl-k">:</span> <span class="pl-c1">1.00</span><span class="pl-k">%</span></pre></div>
</article></div>