<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-polynomialmatrices" class="anchor" aria-hidden="true" href="#polynomialmatrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PolynomialMatrices</h1>
<p><a href="https://travis-ci.org/JuliaPolynomialMatrices/PolynomialMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e8be7751a759e4ac79d992be025f035bb8d797c247b5a67e998e67f13fc3924e/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961506f6c796e6f6d69616c4d617472696365732f506f6c796e6f6d69616c4d617472696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPolynomialMatrices/PolynomialMatrices.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaPolynomialMatrices/PolynomialMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8001f71333474c684624d47044514c4361c6d1c0ccdbbb6a99357c48dbb70112/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961506f6c796e6f6d69616c4d617472696365732f506f6c796e6f6d69616c4d617472696365732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaPolynomialMatrices/PolynomialMatrices.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaPolynomialMatrices/PolynomialMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d26916fb659170ecd9437ded741f12eed7abf4f70d5ab5228ca741f63570a30a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506f6c796e6f6d69616c4d617472696365732f506f6c796e6f6d69616c4d617472696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaPolynomialMatrices/PolynomialMatrices.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>The <code>PolynomialMatrices</code> Julia package provides a support for calculations with univariate <a href="https://en.wikipedia.org/wiki/Polynomial_matrix" rel="nofollow">polynomial matrices</a>, that is, matrices whose entries are univariate polynomials, such as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="        [ 3s²+2s+1     1 ]
P(s) =  |                |
        [    2s        s ].
"><pre lang="math"><code>        [ 3s²+2s+1     1 ]
P(s) =  |                |
        [    2s        s ].
</code></pre></div>
<p>Tighly related to systems of linear ordinary differential or difference equations, these mathematical objects are useful in disciplines such as automatic control and signal processing.</p>
<h2><a id="user-content-polynomial-matrix-in-julia-as-an-array-of-polynomials" class="anchor" aria-hidden="true" href="#polynomial-matrix-in-julia-as-an-array-of-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial matrix in Julia as an <code>Array</code> of polynomials</h2>
<p>A matrix of univariate polynomials can be created in Julia by combining the functionality of the standard Julia <code>Array</code> (or <code>Matrix</code>) type and the <code>Poly</code> type provided by the <a href="https://github.com/JuliaMath/Polynomials.jl"><code>Polynomials</code></a> package. Our example polynomial matrix can be entered in Julia as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Polynomials

julia&gt; M = [Poly([1, 2, 3]) Poly([1]); Poly([0,2]) Poly([0,1])]
2×2 Array{Polynomials.Poly{Int64,2}:
  Poly(1 + 2⋅x + 3⋅x^2)  Poly(1)
  Poly(2⋅x)              Poly(x)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polynomials

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> [<span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]) <span class="pl-c1">Poly</span>([<span class="pl-c1">1</span>]); <span class="pl-c1">Poly</span>([<span class="pl-c1">0</span>,<span class="pl-c1">2</span>]) <span class="pl-c1">Poly</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>])]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Polynomials<span class="pl-k">.</span>Poly{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">⋅</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">⋅</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span>)
  <span class="pl-c1">Poly</span>(<span class="pl-c1">2</span><span class="pl-k">⋅</span>x)              <span class="pl-c1">Poly</span>(x)</pre></div>
<p>The trouble with the resulting matrix is that the number of operations we can do over such objest is quite limited. If, for example, we want to check column-reducedness or perform triangularization, plain Julia has no functionality for that. And now <code>PolynomialMatrices</code> package enters the stage...</p>
<h2><a id="user-content-polynomial-matrix-in-julia-as-polymatrix" class="anchor" aria-hidden="true" href="#polynomial-matrix-in-julia-as-polymatrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial matrix in Julia as <code>PolyMatrix</code></h2>
<p>Using <code>PolynomialMatrices</code> package, we convert our array of polynomials into a <code>PolyMatrix</code> type as in</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PolynomialMatrices

julia&gt; P = PolyMatrix(M)
2×2 PolyArray{Int64,2}:
  Poly(1 + 2⋅x + 3⋅x^2)  Poly(1)
  Poly(2⋅x)              Poly(x)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PolynomialMatrices

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">PolyMatrix</span>(M)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> PolyArray{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">⋅</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">⋅</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span>)
  <span class="pl-c1">Poly</span>(<span class="pl-c1">2</span><span class="pl-k">⋅</span>x)              <span class="pl-c1">Poly</span>(x)</pre></div>
<p>for which many operations are now defined. For example, the matrix can be evaluated at a given value of its independent variable</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; P(1)
2×2 Array{Int64,2}:
  6  1
  2  1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">P</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">6</span>  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">1</span></pre></div>
<p>Or, a polynomial matrix <code>P</code> can be transformed into an upper triangular <code>R</code> by premultplication by unimodular <code>U</code> using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; R,U = rtriang(P)
(Poly{Float64}[Poly(-0.5454545454545455) Poly(-0.5454545454545454 + 0.6666666666666669*x + 0.5757575757575755*x^2 - 0.36363636363636365*x^3); Poly(0.0) Poly(-0.2357022603955159*x + 0.4714045207910319*x^2 + 0.7071067811865472*x^3)], Poly{Float64}[Poly(-0.5454545454545454 + 0.24242424242424268*x) Poly(0.4242424242424243 + 0.5757575757575756*x - 0.36363636363636365*x^2); Poly(-0.4714045207910317*x) Poly(0.23570226039551567 + 0.47140452079103196*x + 0.7071067811865472*x^2)])

julia&gt; R
2×2 PolyMatrix{Float64,Array{Float64,2},Val{:x},2}:
 Poly(-0.545455)  Poly(-0.545455 + 0.666667*x + 0.575758*x^2 - 0.363636*x^3)
 Poly(0.0)        Poly(-0.235702*x + 0.471405*x^2 + 0.707107*x^3)
"><pre>julia<span class="pl-k">&gt;</span> R,U <span class="pl-k">=</span> <span class="pl-c1">rtriang</span>(P)
(Poly{Float64}[<span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.5454545454545455</span>) <span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.5454545454545454</span> <span class="pl-k">+</span> <span class="pl-c1">0.6666666666666669</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">0.5757575757575755</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">0.36363636363636365</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>); <span class="pl-c1">Poly</span>(<span class="pl-c1">0.0</span>) <span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.2357022603955159</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">0.4714045207910319</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">0.7071067811865472</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)], Poly{Float64}[<span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.5454545454545454</span> <span class="pl-k">+</span> <span class="pl-c1">0.24242424242424268</span><span class="pl-k">*</span>x) <span class="pl-c1">Poly</span>(<span class="pl-c1">0.4242424242424243</span> <span class="pl-k">+</span> <span class="pl-c1">0.5757575757575756</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">0.36363636363636365</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>); <span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.4714045207910317</span><span class="pl-k">*</span>x) <span class="pl-c1">Poly</span>(<span class="pl-c1">0.23570226039551567</span> <span class="pl-k">+</span> <span class="pl-c1">0.47140452079103196</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">0.7071067811865472</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)])

julia<span class="pl-k">&gt;</span> R
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> PolyMatrix{Float64,Array{Float64,<span class="pl-c1">2</span>},Val{<span class="pl-c1">:x</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.545455</span>)  <span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.545455</span> <span class="pl-k">+</span> <span class="pl-c1">0.666667</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">0.575758</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">0.363636</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)
 <span class="pl-c1">Poly</span>(<span class="pl-c1">0.0</span>)        <span class="pl-c1">Poly</span>(<span class="pl-k">-</span><span class="pl-c1">0.235702</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">0.471405</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">0.707107</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p>And some more computation with polynomial matrices is offered by the package.</p>
<h2><a id="user-content-polynomial-matrix-viewed-and-entered-as-a-matrix-polynomial" class="anchor" aria-hidden="true" href="#polynomial-matrix-viewed-and-entered-as-a-matrix-polynomial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial matrix viewed (and entered) as a matrix polynomial</h2>
<p>A very useful interpretation of a polynomial matrix is that of a matrix polynomial. That is, a polynomial whose coefficients are not just numbers but matrices. Our original example can thus be written as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="        [ 1  1 ]   [ 2  0 ]     [ 3  0 ]
P(s) =  |      | + |      | s + |      | s²
        [ 0  0 ]   [ 2  1 ]     [ 0  0 ].
"><pre lang="math"><code>        [ 1  1 ]   [ 2  0 ]     [ 3  0 ]
P(s) =  |      | + |      | s + |      | s²
        [ 0  0 ]   [ 2  1 ]     [ 0  0 ].
</code></pre></div>
<p>Hence, a natural way to enter a polynomial matrix in Julia is by entering a 3D array of coefficients matrices (of the corresponding matrix polynomial).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = zeros(Int,2,2,3);
julia&gt; A[:,:,1] = [1 1;0 0];
julia&gt; A[:,:,2] = [2 0;2 1];
julia&gt; A[:,:,3] = [3 0;0 0];

julia&gt; P = PolyMatrix(A,:s)
2×2 PolyArray{Int64,2}:
  Poly(1 + 2⋅s + 3⋅s^2)  Poly(1)
  Poly(2⋅s)              Poly(s)
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>);
julia<span class="pl-k">&gt;</span> A[:,:,<span class="pl-c1">1</span>] <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>;<span class="pl-c1">0</span> <span class="pl-c1">0</span>];
julia<span class="pl-k">&gt;</span> A[:,:,<span class="pl-c1">2</span>] <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-c1">0</span>;<span class="pl-c1">2</span> <span class="pl-c1">1</span>];
julia<span class="pl-k">&gt;</span> A[:,:,<span class="pl-c1">3</span>] <span class="pl-k">=</span> [<span class="pl-c1">3</span> <span class="pl-c1">0</span>;<span class="pl-c1">0</span> <span class="pl-c1">0</span>];

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">PolyMatrix</span>(A,<span class="pl-c1">:s</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> PolyArray{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">⋅</span>s <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">⋅</span>s<span class="pl-k">^</span><span class="pl-c1">2</span>)  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span>)
  <span class="pl-c1">Poly</span>(<span class="pl-c1">2</span><span class="pl-k">⋅</span>s)              <span class="pl-c1">Poly</span>(s)</pre></div>
<h2><a id="user-content-polynomial-matrix-stored-internally-and-entered-as-a-dictionary" class="anchor" aria-hidden="true" href="#polynomial-matrix-stored-internally-and-entered-as-a-dictionary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial matrix stored internally (and entered) as a dictionary</h2>
<p>A <code>PolyMatrix</code> is implemented and stored as a <code>dict</code>, mapping from the powers (of the variables) to the coefficient matrices. It can thus also be constructed from a <code>dict</code> as in</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d = Dict(0=&gt;[1 1;0 0], 1=&gt;[2 0;2 1], 2=&gt;[3 0;0 0]);
julia&gt; P = PolyMatrix(d,:s)
2×2 PolyArray{Int64,2}:
  Poly(1 + 2⋅s + 3⋅s^2)  Poly(1)
  Poly(2⋅s)              Poly(s)
"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">1</span> <span class="pl-c1">1</span>;<span class="pl-c1">0</span> <span class="pl-c1">0</span>], <span class="pl-c1">1</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">2</span> <span class="pl-c1">0</span>;<span class="pl-c1">2</span> <span class="pl-c1">1</span>], <span class="pl-c1">2</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">3</span> <span class="pl-c1">0</span>;<span class="pl-c1">0</span> <span class="pl-c1">0</span>]);
julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">PolyMatrix</span>(d,<span class="pl-c1">:s</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> PolyArray{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">⋅</span>s <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">⋅</span>s<span class="pl-k">^</span><span class="pl-c1">2</span>)  <span class="pl-c1">Poly</span>(<span class="pl-c1">1</span>)
  <span class="pl-c1">Poly</span>(<span class="pl-c1">2</span><span class="pl-k">⋅</span>s)              <span class="pl-c1">Poly</span>(s)</pre></div>
<p>Individual coefficient matrices can be accessed accordingly --- the coefficient dictionary is obtained using <code>coeffs</code> function and the individual coefficient matrices are accessed using keys. For example, the coefficient matrix with the 1st power of the variable can be obtained using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; C = coeffs(P)
DataStructures.SortedDict{Int64,Array{Int64,2},Base.Order.ForwardOrdering} with 3 entries:
  0 =&gt; [1 1; 0 0]
  1 =&gt; [2 0; 2 1]
  2 =&gt; [3 0; 0 0]

julia&gt; C[1]
2×2 Array{Int64,2}:
 2  0
 2  1
"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">coeffs</span>(P)
DataStructures<span class="pl-k">.</span>SortedDict{Int64,Array{Int64,<span class="pl-c1">2</span>},Base<span class="pl-k">.</span>Order<span class="pl-k">.</span>ForwardOrdering} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span> <span class="pl-c1">0</span>; <span class="pl-c1">2</span> <span class="pl-c1">1</span>]
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">3</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>]

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">1</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">1</span></pre></div>
<h2><a id="user-content-list-of-functions-for-polymatrix-objects" class="anchor" aria-hidden="true" href="#list-of-functions-for-polymatrix-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>List of functions for <code>PolyMatrix</code> objects</h2>
<p>The functions for polynomial matrices implemented in <code>PolynomialMatrices</code> package are:</p>
<h3><a id="user-content-inquiry-about-parameters-of-the-polynomial-matrix" class="anchor" aria-hidden="true" href="#inquiry-about-parameters-of-the-polynomial-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inquiry about parameters of the polynomial matrix</h3>
<ul>
<li><code>coeffs</code>: dictionary of coefficient matrices, keys are the powers</li>
<li><code>degree</code>, <code>col_degree</code>, <code>row_degree</code>: degree, column and row degrees</li>
<li><code>variable</code>, <code>vartype</code>: polynomial corresponding to the variable, symbol of the variable</li>
<li><code>high_col_deg_matrix</code>, <code>high_row_deg_matrix</code>: coefficient matrices corresponding to leading column and row degrees, respectively.</li>
</ul>
<h3><a id="user-content-analysis" class="anchor" aria-hidden="true" href="#analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Analysis</h3>
<ul>
<li><code>is_col_proper</code>, <code>is_row_proper</code>: checking if the matrix is column- and row-proper (also column- and row-reduced)</li>
</ul>
<h3><a id="user-content-reductions-conversions" class="anchor" aria-hidden="true" href="#reductions-conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reductions, conversions</h3>
<ul>
<li><code>colred</code>, <code>rowred</code>: column and row degree reduction of a polynomial matrix</li>
<li><code>ltriang</code>, <code>rtriang</code>: conversion to a lower left and uppper right triangular polynomial matrix</li>
<li><code>hermite</code>: conversion to hermite form.</li>
</ul>
<h2><a id="user-content-future-plans" class="anchor" aria-hidden="true" href="#future-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future plans</h2>
<ul>
<li><code>det</code> for computing the determinant of a polynomial matrix</li>
<li><code>roots</code> for computing the roots (or zeros) of a polynomial matrix</li>
<li>some state space realization from a fraction of two polynomial matrices</li>
<li>...</li>
<li>separate (but related) packages <code>PolynomialMatrixEquations</code> and <code>PolynomialMatrixFactorizations</code> are planned.</li>
</ul>
<h2><a id="user-content-polynomialmatrices-package-is-restricted-to-univariate-polynomials-only-for-multivariate-polynomials-look-elsewhere" class="anchor" aria-hidden="true" href="#polynomialmatrices-package-is-restricted-to-univariate-polynomials-only-for-multivariate-polynomials-look-elsewhere"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>PolynomialMatrices</code> package is restricted to univariate polynomials only, for multivariate polynomials look elsewhere</h2>
<p>As it is implemented now, <code>PolyMatrix</code> objects do not allow for mixing
different variables --- a <code>PolyMatrix</code> object can only operate together
with <code>PolyMatrix</code> objects with the same variable. For multivariate polynomials, you may want to check <a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl"><code>MultivariatePolynomials</code></a> package.</p>
</article></div>