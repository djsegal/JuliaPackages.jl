<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-customunitranges" class="anchor" aria-hidden="true" href="#customunitranges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CustomUnitRanges</h1>
<p><a href="https://travis-ci.org/JuliaArrays/CustomUnitRanges.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7519aaf8a6ea685f4e50689e8d9b8f0ad4a543179c91d9d4262cbee0c2b1925f/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f437573746f6d556e697452616e6765732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/CustomUnitRanges.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaArrays/CustomUnitRanges.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/763bf4f7707660114589445b8506dce17ca6533d060f9e3183826d86a2ec3f3e/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f437573746f6d556e697452616e6765732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/CustomUnitRanges.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This Julia package supports the creation of array types with
"unconventional" indices, i.e., when the indices may not start at 1.
With this package, each custom array type can have a corresponding
<code>axes</code> range type, consequently providing a means for consistency
in allocation by <code>similar</code>.</p>
<p>See <a href="http://docs.julialang.org/en/latest/devdocs/offset-arrays.html" rel="nofollow">http://docs.julialang.org/en/latest/devdocs/offset-arrays.html</a> for
more information about defining and using array types with non-1
indices.</p>
<h1><a id="user-content-whats-in-this-package" class="anchor" aria-hidden="true" href="#whats-in-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What's in this package</h1>
<p>Currently this package defines two <code>AbstractUnitRange</code> types:</p>
<ul>
<li>
<p><code>ZeroRange</code>, where <code>ZeroRange(n)</code> is the equivalent of <code>0:n-1</code>, except that
Julia's type system knows that the lower bound is 0. (This is
analogous to <code>Base</code>'s <code>OneTo</code> type.) This is useful for defining
arrays that are indexed starting with 0.</p>
</li>
<li>
<p><code>URange</code>, a parallel to <code>UnitRange</code>, for defining arbitrary range indices.</p>
</li>
</ul>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>This package has a somewhat atypical usage: you should <code>include</code> files
from this repository at the source level. The reason is that this
package's range types should be <strong>private</strong> to the module that needs
them; consequently you don't want to define a module in the global
namespace.</p>
<p>Instead, suppose you're defining an array type that supports arbitrary
indices. In broad terms, your module might look like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="module MyArrayType

using CustomUnitRanges: filename_for_urange
include(filename_for_urange)

struct MyArray{T,N} &lt;: AbstractArray{T,N}
    ...
end

Base.axes(A::MyArray) = Base.Slice.(map(URange, #=starting indices=#, #=ending indices=#))

...

end
"><pre><span class="pl-k">module</span> MyArrayType

<span class="pl-k">using</span> CustomUnitRanges<span class="pl-k">:</span> filename_for_urange
<span class="pl-c1">include</span>(filename_for_urange)

<span class="pl-k">struct</span> MyArray{T,N} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractArray{T,N}</span>
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

Base<span class="pl-k">.</span><span class="pl-en">axes</span>(A<span class="pl-k">::</span><span class="pl-c1">MyArray</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">Slice</span>.(<span class="pl-c1">map</span>(URange, <span class="pl-c"><span class="pl-c">#=</span>starting indices<span class="pl-c">=#</span></span>, <span class="pl-c"><span class="pl-c">#=</span>ending indices<span class="pl-c">=#</span></span>))

<span class="pl-k">...</span>

<span class="pl-k">end</span></pre></div>
<p>Here,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using CustomUnitRanges: filename_for_urange
"><pre><code>using CustomUnitRanges: filename_for_urange
</code></pre></div>
<p>brings a non-exported string, <code>filename_for_urange</code>, into the scope of
<code>MyArrayType</code>. The key line is the <code>include(filename_for_urange)</code>
statement, which will load (at source-level) the code for the <code>URange</code>
type into your <code>MyArrayType</code> module.  We chose <code>"URange.jl"</code> because
here we want arbitrary indices; had we wanted zero-based indices, we
would have chosen <code>"ZeroRange.jl"</code> instead. Second, note that the
output of <code>axes</code> is a <code>Slice</code> containing a <code>URange</code> type. More specifically, it's
creating a tuple of slices with <code>MyArrayType.URange</code>---there is no "global"
<code>URange</code> type, so the indices-tuple is therefore <em>specific to this
package</em>.</p>
<p>The important result is that two packages, defining <code>MyArray</code> and
<code>OtherArray</code>, can independently exploit <code>URange</code>.  If <code>MyArrayType</code>
includes the specialization</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function Base.similar(f::Union{Type,Function}, shape::Tuple{URange,Vararg{URange}}
    MyArray(f(map(length, shape)), #=something for the offset=#)
end
"><pre><span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">similar</span>(f<span class="pl-k">::</span><span class="pl-c1">Union{Type,Function}</span>, shape<span class="pl-k">::</span><span class="pl-c1">Tuple{URange,Vararg{URange}}</span>
    <span class="pl-c1">MyArray</span>(<span class="pl-c1">f</span>(<span class="pl-c1">map</span>(length, shape)), <span class="pl-c"><span class="pl-c">#=</span>something for the offset<span class="pl-c">=#</span></span>)
<span class="pl-k">end</span></pre></div>
<p>and similarly for <code>OtherArrayType</code>. Then, if <code>A</code> is a <code>MyArray</code> and
<code>B</code> is an <code>OtherArray</code>,</p>
<ul>
<li><code>similar(Array{Int}, axes(A))</code> will create another <code>MyArray</code></li>
<li><code>similar(Array{Int}, axes(B))</code> will create another <code>OtherArray</code></li>
</ul>
<p>despite the fact that they both use <code>URange</code>.</p>
</article></div>