<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-profilecanvas--" class="anchor" aria-hidden="true" href="#profilecanvas--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProfileCanvas <a href="https://github.com/pfitzseb/ProfileCanvas.jl/actions/workflows/CI.yml"><img src="https://github.com/pfitzseb/ProfileCanvas.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a> <a href="https://juliahub.com/ui/Packages/ProfileCanvas/T2dXl" rel="nofollow"><img src="https://camo.githubusercontent.com/bf132ffc86d9733bdbe4116cfe044aba7dcbf8121fd75be999e7165982f49cc0/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f50726f66696c6543616e7661732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/ProfileCanvas/version.svg" style="max-width: 100%;"></a></h1>
<p dir="auto">This package is intended as a drop-in replacement for <a href="https://github.com/timholy/ProfileView.jl">ProfileView.jl</a> and <a href="https://github.com/kimikage/ProfileSVG.jl">ProfileSVG.jl</a>.</p>
<p dir="auto">It exposes the HTML canvas based <a href="https://github.com/pfitzseb/jl-profile.js">profile viewer UI</a> used by the <a href="https://www.julia-vscode.org/docs/stable/userguide/profiler/" rel="nofollow">Julia extension for VS Code</a> in the REPL and environments that can display HTML (like Pluto notebooks). Performance should be significantly better than SVG-based solutions, especially for very large traces.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProfileCanvas
function profile_test(n)
    for i = 1:n
        A = randn(100,100,20)
        m = maximum(A)
        Am = mapslices(sum, A; dims=2)
        B = A[:,:,5]
        Bsort = mapslices(sort, B; dims=1)
        b = rand(100)
        C = B.*b
    end
end

@profview profile_test(1)  # run once to trigger compilation (ignore this one)
@profview profile_test(10)"><pre><span class="pl-k">using</span> ProfileCanvas
<span class="pl-k">function</span> <span class="pl-en">profile_test</span>(n)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
        A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>,<span class="pl-c1">100</span>,<span class="pl-c1">20</span>)
        m <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(A)
        Am <span class="pl-k">=</span> <span class="pl-c1">mapslices</span>(sum, A; dims<span class="pl-k">=</span><span class="pl-c1">2</span>)
        B <span class="pl-k">=</span> A[:,:,<span class="pl-c1">5</span>]
        Bsort <span class="pl-k">=</span> <span class="pl-c1">mapslices</span>(sort, B; dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
        b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
        C <span class="pl-k">=</span> B<span class="pl-k">.*</span>b
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@profview</span> <span class="pl-c1">profile_test</span>(<span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> run once to trigger compilation (ignore this one)</span>
<span class="pl-c1">@profview</span> <span class="pl-c1">profile_test</span>(<span class="pl-c1">10</span>)</pre></div>
<p dir="auto">The controls are <em>mouse wheel</em> to scroll, and <em>click</em> on a cell to base the zoom on it.
The end result depends on the julia version, but it might be something like this:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/flamegraph.png"><img src="assets/flamegraph.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">when run from the REPL and</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/flamegraph-pluto.png"><img src="assets/flamegraph-pluto.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">in a <a href="https://github.com/fonsp/Pluto.jl">Pluto</a> notebook.</p>
<p dir="auto">On Julia 1.8 and newer you can also use the allocation profiler with <code>@profview_allocs</code>/<code>view_allocs</code>.</p>
</article></div>