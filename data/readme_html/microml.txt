<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-micromljl" class="anchor" aria-hidden="true" href="#micromljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MicroML.jl</h1>
<p>A tree-walking interpreter for a simple ML-like language.</p>
<p>Rewrite <a href="https://github.com/hellerve/microml">hellerve/microml</a> in julia.</p>
<blockquote>
<p>Note that hellerve' implement can compile MicroML' code to C and do compiled execution. I haven't finished this part yet, branch <code>genc</code> contain some progress.</p>
</blockquote>
<p>Most test copy from:</p>
<ul>
<li><a href="https://github.com/eliben/code-for-blog/tree/master/2018/type-inference">2018/type-inference · eliben/code-for-blog</a></li>
<li><a href="https://github.com/eliben/code-for-blog/tree/master/2018/unif">2018/unif · eliben/code-for-blog</a></li>
</ul>
<p>You may want to read Eli Bendersky’s blog post to get some idea about:</p>
<ul>
<li><a href="https://eli.thegreenplace.net/2018/type-inference/" rel="nofollow">Type inference - Eli Bendersky's website</a></li>
<li><a href="https://eli.thegreenplace.net/2018/unification/" rel="nofollow">Unification - Eli Bendersky's website</a></li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>You can open a REPL by typing <code>julia mml.jl</code> in the <code>src</code> folder of this repository.</p>
<pre><code>MicroML.jl/src$ julia mml.jl
μML&gt; 

μML&gt; x y z = y + z
x = (lambda y, z -&gt; (y + z)) :: (Int -&gt; Int -&gt; Int)
μML&gt; main = lambda -&gt; print(x(1, 2))
main = (lambda  -&gt; print(x(1, 2))) :: (-&gt; Int)
μML&gt;:i
3
μML&gt;main = lambda -&gt; print(1+1)
[Warning] Redefining main!
main = (lambda  -&gt; print((1 + 1))) :: (-&gt; Int)
μML&gt;:i
2
μML&gt;main = lambda -&gt; print(0)
[Warning] Redefining main!
main = (lambda  -&gt; print(0)) :: (-&gt; Int)
μML&gt;:i
0
μML&gt;

μML&gt; foo f g x = if f(x) then g(x) else 20
foo = (lambda f, g, x -&gt; (if f(x) then g(x) else 20)) :: ((a -&gt; Bool) -&gt; (a -&gt; Int) -&gt; a -&gt; Int)
μML&gt; foo f x = if x then lambda t -&gt; f(t) else lambda j -&gt; f(x)
[Warning] Redefining foo!
foo = (lambda f, x -&gt; (if x then (lambda t -&gt; f(t)) else (lambda j -&gt; f(x)))) :: ((Bool -&gt; a) -&gt; Bool -&gt; (Bool -&gt; a))
μML&gt;:q
Moriturus te saluto!
</code></pre>
<p>Read some test code in <a href="./test/runtests.jl"><code>runtests.jl</code></a> to get some idea about how to use functions in this package.</p>
</article></div>