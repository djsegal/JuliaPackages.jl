<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-deprecated" class="anchor" aria-hidden="true" href="#deprecated"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DEPRECATED</h1>
<p dir="auto">This package is deprecated.</p>
<h1 dir="auto"><a id="user-content-openaigym" class="anchor" aria-hidden="true" href="#openaigym"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OpenAIGym</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaML/OpenAIGym.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c849c39830d4aac725c49fcf5e2e9c1582555638100271f264b8966c79a204cf/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d4c2f4f70656e414947796d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaML/OpenAIGym.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://gitter.im/reinforcejl/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/f569b600ff4bf907c91fe4f69649346100d7f6c948a1c91092782895c358bbef/68747470733a2f2f6261646765732e6769747465722e696d2f7265696e666f7263656a6c2f4c6f6262792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/reinforcejl/Lobby.svg" style="max-width: 100%;"></a></p>
<h4 dir="auto"><a id="user-content-author-thomas-breloff-tbreloff" class="anchor" aria-hidden="true" href="#author-thomas-breloff-tbreloff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author: Thomas Breloff (@tbreloff)</h4>
<p dir="auto">This wraps the open source python library <code>gym</code>, released by OpenAI.
See <a href="https://gym.openai.com/" rel="nofollow">their website</a> for more information.
Collaboration welcome!</p>
<hr>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<h3 dir="auto"><a id="user-content-install-gym" class="anchor" aria-hidden="true" href="#install-gym"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install gym</h3>
<p dir="auto">First install <code>gym</code>. If you use Python on your system, and wish to use the same installation of gym in both Python and Julia, follow the system-wide instructions. If you only need <code>gym</code> within Julia, follow the Julia-specific instructions.</p>
<ol dir="auto">
<li>
<p dir="auto">System-wide Python</p>
<p dir="auto">Install gym into Python, following the instructions <a href="https://gym.openai.com/docs" rel="nofollow">here</a>.</p>
<p dir="auto">In Julia, ensure that the Python environment variable points to the correct executable, and build <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ENV[&quot;PYTHON&quot;] = &quot;... path of the python executable ...&quot;
julia&gt; # ENV[&quot;PYTHON&quot;] = &quot;C:\\Python37-x64\\python.exe&quot; # example for Windows
julia&gt; # ENV[&quot;PYTHON&quot;] = &quot;/usr/bin/python3.7&quot;           # example for *nix/Mac
julia&gt; Pkg.build(&quot;PyCall&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>PYTHON<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>... path of the python executable ...<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> ENV["PYTHON"] = "C:\\Python37-x64\\python.exe" # example for Windows</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> ENV["PYTHON"] = "/usr/bin/python3.7"           # example for *nix/Mac</span>
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>PyCall<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Finally, re-launch Julia.</p>
</li>
<li>
<p dir="auto">Julia-specific Python</p>
<p dir="auto">Julia also has its own miniconda installation of Python, via <a href="https://github.com/JuliaPy/Conda.jl">Conda.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;PyCall&quot;)
withenv(&quot;PYTHON&quot; =&gt; &quot;&quot;) do
   Pkg.build(&quot;PyCall&quot;)
end"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PyCall<span class="pl-pds">"</span></span>)
<span class="pl-c1">withenv</span>(<span class="pl-s"><span class="pl-pds">"</span>PYTHON<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
   Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>PyCall<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">then install gym from the command line:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="~/.julia/conda/3/bin/pip install 'gym[all]==0.11.0'"><pre class="notranslate"><code>~/.julia/conda/3/bin/pip install 'gym[all]==0.11.0'
</code></pre></div>
<p dir="auto">We only test with gym v0.11.0 at this moment.</p>
</li>
</ol>
<h3 dir="auto"><a id="user-content-install-openaigymjl" class="anchor" aria-hidden="true" href="#install-openaigymjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install OpenAIGym.jl</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(&quot;https://github.com/JuliaML/OpenAIGym.jl.git&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaML/OpenAIGym.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hello world!</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OpenAIGym
env = GymEnv(:CartPole, :v0)
for i ∈ 1:20
  T = 0
  R = run_episode(env, RandomPolicy()) do (s, a, r, s′)
    render(env)
    T += 1
  end
  @info(&quot;Episode $i finished after $T steps. Total reward: $R&quot;)
end
close(env)"><pre><span class="pl-k">using</span> OpenAIGym
env <span class="pl-k">=</span> <span class="pl-c1">GymEnv</span>(<span class="pl-c1">:CartPole</span>, <span class="pl-c1">:v0</span>)
<span class="pl-k">for</span> i <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>
  T <span class="pl-k">=</span> <span class="pl-c1">0</span>
  R <span class="pl-k">=</span> <span class="pl-c1">run_episode</span>(env, <span class="pl-c1">RandomPolicy</span>()) <span class="pl-k">do</span> (s, a, r, s′)
    <span class="pl-c1">render</span>(env)
    T <span class="pl-k">+=</span> <span class="pl-c1">1</span>
  <span class="pl-k">end</span>
  <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>Episode <span class="pl-v">$i</span> finished after <span class="pl-v">$T</span> steps. Total reward: <span class="pl-v">$R</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(env)</pre></div>
<p dir="auto">(The <code>′</code> character is a prime; if using the REPL, type <code>\prime</code>.) If everything works you should see output like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[ Info: Episode 1 finished after 10 steps. Total reward: 10.0
[ Info: Episode 2 finished after 46 steps. Total reward: 46.0
[ Info: Episode 3 finished after 14 steps. Total reward: 14.0
[ Info: Episode 4 finished after 19 steps. Total reward: 19.0
[ Info: Episode 5 finished after 15 steps. Total reward: 15.0
[ Info: Episode 6 finished after 32 steps. Total reward: 32.0
[ Info: Episode 7 finished after 36 steps. Total reward: 36.0
[ Info: Episode 8 finished after 13 steps. Total reward: 13.0
[ Info: Episode 9 finished after 62 steps. Total reward: 62.0
[ Info: Episode 10 finished after 14 steps. Total reward: 14.0
[ Info: Episode 11 finished after 14 steps. Total reward: 14.0
[ Info: Episode 12 finished after 28 steps. Total reward: 28.0
[ Info: Episode 13 finished after 21 steps. Total reward: 21.0
[ Info: Episode 14 finished after 15 steps. Total reward: 15.0
[ Info: Episode 15 finished after 12 steps. Total reward: 12.0
[ Info: Episode 16 finished after 20 steps. Total reward: 20.0
[ Info: Episode 17 finished after 19 steps. Total reward: 19.0
[ Info: Episode 18 finished after 17 steps. Total reward: 17.0
[ Info: Episode 19 finished after 35 steps. Total reward: 35.0
[ Info: Episode 20 finished after 23 steps. Total reward: 23.0"><pre class="notranslate"><code>[ Info: Episode 1 finished after 10 steps. Total reward: 10.0
[ Info: Episode 2 finished after 46 steps. Total reward: 46.0
[ Info: Episode 3 finished after 14 steps. Total reward: 14.0
[ Info: Episode 4 finished after 19 steps. Total reward: 19.0
[ Info: Episode 5 finished after 15 steps. Total reward: 15.0
[ Info: Episode 6 finished after 32 steps. Total reward: 32.0
[ Info: Episode 7 finished after 36 steps. Total reward: 36.0
[ Info: Episode 8 finished after 13 steps. Total reward: 13.0
[ Info: Episode 9 finished after 62 steps. Total reward: 62.0
[ Info: Episode 10 finished after 14 steps. Total reward: 14.0
[ Info: Episode 11 finished after 14 steps. Total reward: 14.0
[ Info: Episode 12 finished after 28 steps. Total reward: 28.0
[ Info: Episode 13 finished after 21 steps. Total reward: 21.0
[ Info: Episode 14 finished after 15 steps. Total reward: 15.0
[ Info: Episode 15 finished after 12 steps. Total reward: 12.0
[ Info: Episode 16 finished after 20 steps. Total reward: 20.0
[ Info: Episode 17 finished after 19 steps. Total reward: 19.0
[ Info: Episode 18 finished after 17 steps. Total reward: 17.0
[ Info: Episode 19 finished after 35 steps. Total reward: 35.0
[ Info: Episode 20 finished after 23 steps. Total reward: 23.0
</code></pre></div>
<p dir="auto">Note: this is equivalent to the python code:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import gym
env = gym.make('CartPole-v0')
for i_episode in xrange(20):
    total_reward = 0.0
    observation = env.reset()
    for t in xrange(100):
        # env.render()
        # print observation
        action = env.action_space.sample()
        observation, reward, done, info = env.step(action)
        env.render()
        total_reward += reward
        if done:
            print &quot;Episode {} finished after {} timesteps. Total reward: {}&quot;.format(i_episode, t+1, total_reward)
            break"><pre><span class="pl-k">import</span> <span class="pl-s1">gym</span>
<span class="pl-s1">env</span> <span class="pl-c1">=</span> <span class="pl-s1">gym</span>.<span class="pl-en">make</span>(<span class="pl-s">'CartPole-v0'</span>)
<span class="pl-k">for</span> <span class="pl-s1">i_episode</span> <span class="pl-c1">in</span> <span class="pl-en">xrange</span>(<span class="pl-c1">20</span>):
    <span class="pl-s1">total_reward</span> <span class="pl-c1">=</span> <span class="pl-c1">0.0</span>
    <span class="pl-s1">observation</span> <span class="pl-c1">=</span> <span class="pl-s1">env</span>.<span class="pl-en">reset</span>()
    <span class="pl-k">for</span> <span class="pl-s1">t</span> <span class="pl-c1">in</span> <span class="pl-en">xrange</span>(<span class="pl-c1">100</span>):
        <span class="pl-c"># env.render()</span>
        <span class="pl-c"># print observation</span>
        <span class="pl-s1">action</span> <span class="pl-c1">=</span> <span class="pl-s1">env</span>.<span class="pl-s1">action_space</span>.<span class="pl-en">sample</span>()
        <span class="pl-s1">observation</span>, <span class="pl-s1">reward</span>, <span class="pl-s1">done</span>, <span class="pl-s1">info</span> <span class="pl-c1">=</span> <span class="pl-s1">env</span>.<span class="pl-en">step</span>(<span class="pl-s1">action</span>)
        <span class="pl-s1">env</span>.<span class="pl-en">render</span>()
        <span class="pl-s1">total_reward</span> <span class="pl-c1">+=</span> <span class="pl-s1">reward</span>
        <span class="pl-k">if</span> <span class="pl-s1">done</span>:
            <span class="pl-k">print</span> <span class="pl-s">"Episode {} finished after {} timesteps. Total reward: {}"</span>.<span class="pl-en">format</span>(<span class="pl-s1">i_episode</span>, <span class="pl-s1">t</span><span class="pl-c1">+</span><span class="pl-c1">1</span>, <span class="pl-s1">total_reward</span>)
            <span class="pl-k">break</span></pre></div>
<hr>
<p dir="auto">We're using the <code>RandomPolicy</code> from Reinforce.jl.  To do something better, you can create your own policy simply by implementing the <code>action</code> method, which takes a reward, a state, and an action set, then returns an action selection:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="type RandomPolicy &lt;: AbstractPolicy end
Reinforce.action(policy::AbstractPolicy, r, s, A) = rand(A)"><pre>type RandomPolicy <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractPolicy</span> <span class="pl-k">end</span>
Reinforce<span class="pl-k">.</span><span class="pl-en">action</span>(policy<span class="pl-k">::</span><span class="pl-c1">AbstractPolicy</span>, r, s, A) <span class="pl-k">=</span> <span class="pl-c1">rand</span>(A)</pre></div>
<p dir="auto">Note: You can override default behavior of in the <code>run_episode</code> method.
Just iterate yourself:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ep = Episode(env, policy)
for (s, a, r, s′) in ep
    # do something special?
    OpenAIGym.render(env)
end
R = ep.total_reward
N = ep.niter"><pre>ep <span class="pl-k">=</span> <span class="pl-c1">Episode</span>(env, policy)
<span class="pl-k">for</span> (s, a, r, s′) <span class="pl-k">in</span> ep
    <span class="pl-c"><span class="pl-c">#</span> do something special?</span>
    OpenAIGym<span class="pl-k">.</span><span class="pl-c1">render</span>(env)
<span class="pl-k">end</span>
R <span class="pl-k">=</span> ep<span class="pl-k">.</span>total_reward
N <span class="pl-k">=</span> ep<span class="pl-k">.</span>niter</pre></div>
</article></div>