<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-manifoldlearning" class="anchor" aria-hidden="true" href="#manifoldlearning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ManifoldLearning</h1>
<p><em>A Julia package for manifold learning and nonlinear dimensionality reduction.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://wildart.github.io/ManifoldLearning.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://wildart.github.io/ManifoldLearning.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/wildart/ManifoldLearning.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/385e01dd668793a0a061c2f5e76c830f3eb7aed1797c87883b2ce216e22d150e/68747470733a2f2f7472617669732d63692e6f72672f77696c646172742f4d616e69666f6c644c6561726e696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/wildart/ManifoldLearning.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/r/wildart/ManifoldLearning.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/850f597c029d252d3675c9e8600886fb7a8cb7b08af65ba090f62c182c55e646/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77696c646172742f4d616e69666f6c644c6561726e696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/wildart/ManifoldLearning.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods</h2>
<ul>
<li>Isomap</li>
<li>Diffusion maps</li>
<li>Locally Linear Embedding (LLE)</li>
<li>Hessian Eigenmaps (HLLE)</li>
<li>Laplacian Eigenmaps (LEM)</li>
<li>Local tangent space alignment (LTSA)</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package can be installed with the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ManifoldLearning
"><pre><code>pkg&gt; add ManifoldLearning
</code></pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>A simple example of using the <em>Isomap</em> reduction method.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; X, _ = ManifoldLearning.swiss_roll();

julia&gt; X
3×1000 Array{Float64,2}:
  -3.19512  3.51939   -0.0390153  …  -9.46166   3.44159
  29.1222   9.99283    2.25296       25.1417   28.8007
 -10.1861   6.59074  -11.037         -1.04484  13.4034

julia&gt; M = fit(Isomap, X)
Isomap(outdim = 2, neighbors = 12)

julia&gt; Y = transform(M)
2×1000 Array{Float64,2}:
 11.0033  -13.069   16.7116  …  -3.26095   25.7771
 18.4133   -6.2693  10.6698     20.0646   -24.8973
"><pre>julia<span class="pl-k">&gt;</span> X, _ <span class="pl-k">=</span> ManifoldLearning<span class="pl-k">.</span><span class="pl-c1">swiss_roll</span>();

julia<span class="pl-k">&gt;</span> X
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1000</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-k">-</span><span class="pl-c1">3.19512</span>  <span class="pl-c1">3.51939</span>   <span class="pl-k">-</span><span class="pl-c1">0.0390153</span>  …  <span class="pl-k">-</span><span class="pl-c1">9.46166</span>   <span class="pl-c1">3.44159</span>
  <span class="pl-c1">29.1222</span>   <span class="pl-c1">9.99283</span>    <span class="pl-c1">2.25296</span>       <span class="pl-c1">25.1417</span>   <span class="pl-c1">28.8007</span>
 <span class="pl-k">-</span><span class="pl-c1">10.1861</span>   <span class="pl-c1">6.59074</span>  <span class="pl-k">-</span><span class="pl-c1">11.037</span>         <span class="pl-k">-</span><span class="pl-c1">1.04484</span>  <span class="pl-c1">13.4034</span>

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Isomap, X)
<span class="pl-c1">Isomap</span>(outdim <span class="pl-k">=</span> <span class="pl-c1">2</span>, neighbors <span class="pl-k">=</span> <span class="pl-c1">12</span>)

julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> <span class="pl-c1">transform</span>(M)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1000</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">11.0033</span>  <span class="pl-k">-</span><span class="pl-c1">13.069</span>   <span class="pl-c1">16.7116</span>  …  <span class="pl-k">-</span><span class="pl-c1">3.26095</span>   <span class="pl-c1">25.7771</span>
 <span class="pl-c1">18.4133</span>   <span class="pl-k">-</span><span class="pl-c1">6.2693</span>  <span class="pl-c1">10.6698</span>     <span class="pl-c1">20.0646</span>   <span class="pl-k">-</span><span class="pl-c1">24.8973</span></pre></div>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>Most of the methods use <em>k</em>-nearest neighbors method for constructing local subspace representation. By default, neighbors are computed from a <em>distance matrix</em> of a dataset. This is not an efficient method, especially, for large datasets.</p>
<p>Consider using a custom <em>k</em>-nearest neighbors function, e.g. from <a href="https://github.com/KristofferC/NearestNeighbors.jl">NearestNeighbors.jl</a> or <a href="https://github.com/wildart/FLANN.jl">FLANN.jl</a>.</p>
<p>See example of custom <code>knn</code> function <a href="misc/nearestneighbors.jl">here</a>.</p>
</article></div>