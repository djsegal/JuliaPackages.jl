<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quantumcumulantsjl" class="anchor" aria-hidden="true" href="#quantumcumulantsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuantumCumulants.jl</h1>
<p><strong>QuantumCumulants.jl</strong> is a package for the symbolic derivation of mean-field equations for quantum mechanical operators in Julia. The equations are derived using fundamental commutation relations of operators. When averaging these equations they can be automatically expanded in terms of cumulants to an arbitrary order (generalized mean-field approximation). This results in a closed set of symbolic differential equations, which can also be solved numerically.</p>
<p>For the application of commutation relations <strong>QuantumCumulants.jl</strong> implements a simple noncommutative algebra, where any commutation relations are applied immediately. All other symbolic simplification and rewriting is done using the <a href="https://github.com/JuliaSymbolics/Symbolics.jl">Symbolics.jl</a> package.</p>
<p>To obtain a numerical solution, equations derived with <strong>QuantumCumulants.jl</strong> can be converted to <a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a> and subsequently solved with <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a>.</p>
<h2><a id="user-content-development-status" class="anchor" aria-hidden="true" href="#development-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Development status</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/qojulia/QuantumCumulants.jl/workflows/CI/badge.svg"><img src="https://github.com/qojulia/QuantumCumulants.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a> <a href="https://codecov.io/gh/qojulia/QuantumCumulants.jl/branch/master/" rel="nofollow"><img src="https://camo.githubusercontent.com/8ae245930160df426d8bac092a98cae6b46dcfcf6b35113a6a551bd174d43308/68747470733a2f2f636f6465636f762e696f2f67682f716f6a756c69612f5175616e74756d43756d756c616e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/qojulia/QuantumCumulants.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a> <a href="https://qojulia.github.io/QuantumCumulants.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://qojulia.github.io/QuantumCumulants.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Note that <strong>QuantumCumulants.jl</strong> is still at an early stage of development.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package can be installed with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="|pkg&gt; add QuantumCumulants
"><pre><span class="pl-k">|</span>pkg<span class="pl-k">&gt;</span> add QuantumCumulants</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Please refer to the latest <a href="https://qojulia.github.io/QuantumCumulants.jl/stable/" rel="nofollow">Documentation</a> for more details and examples.</p>
<h2><a id="user-content-short-example" class="anchor" aria-hidden="true" href="#short-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Short example</h2>
<p>To briefly illustrate how <strong>QuantumCumulants.jl</strong> works, here's how you can implement a first-order mean-field model of a laser with a single atom as a gain medium:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using QuantumCumulants

h_cav = FockSpace(:cavity)
h_atom = NLevelSpace(:atom, (:g,:e))
h = tensor(h_cav, h_atom)

@cnumbers Δ g κ γ ν
@qnumbers a::Destroy(h) σ::Transition(h)

H = Δ*a'*a + g*(a'*σ(:g,:e) + a*σ(:e,:g))
J = [a,σ(:g,:e),σ(:e,:g)]
rates = [κ,γ,ν]

eqs = meanfield([a,σ(:g,:e),σ(:e,:e)], H, J; rates=rates, order=1)

using ModelingToolkit, OrdinaryDiffEq
sys = ODESystem(eqs)
p0 = (Δ=&gt;0, g=&gt;1.5, κ=&gt;1, γ=&gt;0.25, ν=&gt;4)
u0 = ComplexF64[1e-2, 0, 0]
prob = ODEProblem(sys,u0,(0.0,50.0),p0)
sol = solve(prob,RK4())

using Plots
n = abs2.(sol[a])
plot(sol.t, n, xlabel=&quot;t&quot;, label=&quot;n&quot;)
"><pre><span class="pl-k">using</span> QuantumCumulants

h_cav <span class="pl-k">=</span> <span class="pl-c1">FockSpace</span>(<span class="pl-c1">:cavity</span>)
h_atom <span class="pl-k">=</span> <span class="pl-c1">NLevelSpace</span>(<span class="pl-c1">:atom</span>, (<span class="pl-c1">:g</span>,<span class="pl-c1">:e</span>))
h <span class="pl-k">=</span> <span class="pl-c1">tensor</span>(h_cav, h_atom)

<span class="pl-c1">@cnumbers</span> Δ g κ γ ν
<span class="pl-c1">@qnumbers</span> a<span class="pl-k">::</span><span class="pl-c1">Destroy</span>(h) σ<span class="pl-k">::</span><span class="pl-c1">Transition</span>(h)

H <span class="pl-k">=</span> Δ<span class="pl-k">*</span>a<span class="pl-k">'</span><span class="pl-k">*</span>a <span class="pl-k">+</span> g<span class="pl-k">*</span>(a<span class="pl-k">'</span><span class="pl-k">*</span><span class="pl-c1">σ</span>(<span class="pl-c1">:g</span>,<span class="pl-c1">:e</span>) <span class="pl-k">+</span> a<span class="pl-k">*</span><span class="pl-c1">σ</span>(<span class="pl-c1">:e</span>,<span class="pl-c1">:g</span>))
J <span class="pl-k">=</span> [a,<span class="pl-c1">σ</span>(<span class="pl-c1">:g</span>,<span class="pl-c1">:e</span>),<span class="pl-c1">σ</span>(<span class="pl-c1">:e</span>,<span class="pl-c1">:g</span>)]
rates <span class="pl-k">=</span> [κ,γ,ν]

eqs <span class="pl-k">=</span> <span class="pl-c1">meanfield</span>([a,<span class="pl-c1">σ</span>(<span class="pl-c1">:g</span>,<span class="pl-c1">:e</span>),<span class="pl-c1">σ</span>(<span class="pl-c1">:e</span>,<span class="pl-c1">:e</span>)], H, J; rates<span class="pl-k">=</span>rates, order<span class="pl-k">=</span><span class="pl-c1">1</span>)

<span class="pl-k">using</span> ModelingToolkit, OrdinaryDiffEq
sys <span class="pl-k">=</span> <span class="pl-c1">ODESystem</span>(eqs)
p0 <span class="pl-k">=</span> (Δ<span class="pl-k">=&gt;</span><span class="pl-c1">0</span>, g<span class="pl-k">=&gt;</span><span class="pl-c1">1.5</span>, κ<span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, γ<span class="pl-k">=&gt;</span><span class="pl-c1">0.25</span>, ν<span class="pl-k">=&gt;</span><span class="pl-c1">4</span>)
u0 <span class="pl-k">=</span> ComplexF64[<span class="pl-c1">1e-2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(sys,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">50.0</span>),p0)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">RK4</span>())

<span class="pl-k">using</span> Plots
n <span class="pl-k">=</span> <span class="pl-c1">abs2</span>.(sol[a])
<span class="pl-c1">plot</span>(sol<span class="pl-k">.</span>t, n, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/18166442/114183684-3ae76080-9944-11eb-9d21-94bf4069bb60.png"><img src="https://user-images.githubusercontent.com/18166442/114183684-3ae76080-9944-11eb-9d21-94bf4069bb60.png" alt="photon-number" style="max-width:100%;"></a></p>
<p>The above code implements the Jaynes-Cummings Hamiltonian describing an optical cavity mode that couples to a two-level atom. Additionally, the decay processes are specified. Then, mean-field equations for the average values of the operators <code>[a,σ(:g,:e),σ(:e,:e)]</code> are derived and expanded to first order (average values of products are factorized). For the numerical solution an <code>ODESystem</code> (from <a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a>) is created and solved with the <a href="https://github.com/SciML/OrdinaryDiffEq.jl">OrdinaryDiffEq.jl</a> library. Finally, the time dynamics of the photon number <code>n</code> is plotted.</p>
<h2><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing</h2>
<p>If you find <strong>QuantumCumulants.jl</strong> useful in your research, please consider citing <a href="https://arxiv.org/abs/2105.01657" rel="nofollow">this paper</a>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@article{plankensteiner2021quantumcumulants,
  title={{QuantumCumulants.jl}: {A Julia} framework for generalized mean-field equations in open quantum systems},
  author={Plankensteiner, David and Hotter, Christoph and Ritsch, Helmut},
  journal={arXiv preprint arXiv:2105.01657},
  year={2021},
  url={https://arxiv.org/abs/2105.01657}
}
"><pre><code>@article{plankensteiner2021quantumcumulants,
  title={{QuantumCumulants.jl}: {A Julia} framework for generalized mean-field equations in open quantum systems},
  author={Plankensteiner, David and Hotter, Christoph and Ritsch, Helmut},
  journal={arXiv preprint arXiv:2105.01657},
  year={2021},
  url={https://arxiv.org/abs/2105.01657}
}
</code></pre></div>
</article></div>