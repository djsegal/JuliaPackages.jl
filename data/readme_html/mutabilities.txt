<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mutabilities-a-type-level-tool-for-ownership-by-convention" class="anchor" aria-hidden="true" href="#mutabilities-a-type-level-tool-for-ownership-by-convention"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mutabilities: a type-level tool for ownership-by-convention</h1>
<p><a href="https://tkf.github.io/Mutabilities.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/tkf/Mutabilities.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/tkf/Mutabilities.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>Mutabilities.jl is a type-level tool for describing
mutabilities and ownership of objects in a composable manner.</p>
<p>See more in the
<a href="https://tkf.github.io/Mutabilities.jl/dev" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary</h2>
<ul>
<li><code>readonly</code>: create read-only view</li>
<li><code>freeze</code>, <code>freezevalue</code>, <code>freezeindex</code>, <code>freezeproperties</code>: create
immutable copies</li>
<li><code>melt</code>, <code>meltvalue</code>, <code>meltindex</code>, <code>meltproperties</code>: create mutable copies</li>
<li><code>move!</code>: manually elides copies with freeze/melt APIs.</li>
</ul>
<h2><a id="user-content-high-level-interface" class="anchor" aria-hidden="true" href="#high-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-level interface</h2>
<h3><a id="user-content-read-only-view" class="anchor" aria-hidden="true" href="#read-only-view"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Read-only view</h3>
<p>The most easy-to-use interface is <code>readonly(x)</code> which creates a
read-only "view" to <code>x</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Mutabilities

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>];

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">readonly</span>(x)
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">readonly</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> z[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">111</span>
ERROR<span class="pl-k">:</span> setindex! not defined <span class="pl-k">for</span> Mutabilities<span class="pl-k">.</span>ReadOnlyArray{Int64,<span class="pl-c1">1</span>,Array{Int64,<span class="pl-c1">1</span>}}</pre></div>
<p>Note that changes in <code>x</code> would still be reflected to <code>z</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">111</span>;

julia<span class="pl-k">&gt;</span> z
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">readonly</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">111</span>
   <span class="pl-c1">2</span>
   <span class="pl-c1">3</span></pre></div>
<h3><a id="user-content-freezemelt" class="anchor" aria-hidden="true" href="#freezemelt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Freeze/melt</h3>
<p>Use <code>freeze(x)</code> to get an independent immutable (shallow) <em>copy</em> of
<code>x</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>];

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">freeze</span>(x)
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> x[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">111</span>;

julia<span class="pl-k">&gt;</span> z
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p><code>freeze</code> can be reverted by <code>melt</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">melt</span>(z)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>It returns an independent mutable (shallow) <em>copy</em> of <code>y</code>.  Thus, <code>y</code>
can be safely mutated:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> y[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">111</span>;

julia<span class="pl-k">&gt;</span> z
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<h3><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h3>
<p>Julia's <code>view</code> is dangerous to use if the indices can be mutated after
creating it:</p>
<div class="highlight highlight-source-julia"><pre>idx <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
x <span class="pl-k">=</span> <span class="pl-c1">view</span>([<span class="pl-c1">1</span>], idx)
x[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> OK</span>
idx[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10_000_000_000</span>
x[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> segfault</span></pre></div>
<p>This can be avoided by freezing the index array:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">view</span>([<span class="pl-c1">1</span>], <span class="pl-c1">freeze</span>(idx))</pre></div>
<p>Note that <code>readonly</code> is not enough.</p>
<h3><a id="user-content-variants" class="anchor" aria-hidden="true" href="#variants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Variants</h3>
<p><code>freeze</code> and <code>melt</code> work both on <em>indices (keys) and values</em>.  It is
possible to create an append-only vector by freezing the values:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> append_only <span class="pl-k">=</span> <span class="pl-c1">freezevalue</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(append_only, <span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">freezevalue</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> append_only[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
ERROR<span class="pl-k">:</span> setindex! not defined <span class="pl-k">for</span> Mutabilities<span class="pl-k">.</span>AppendOnlyVector{Int64,Array{Int64,<span class="pl-c1">1</span>}}</pre></div>
<p>It is possible to create a shape-frozen vector by freezing the indices:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> shape_frozen <span class="pl-k">=</span> <span class="pl-c1">freezeindex</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freezeindex</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> shape_frozen <span class="pl-k">.*=</span> <span class="pl-c1">10</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freezeindex</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">20</span>
 <span class="pl-c1">30</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(shape_frozen, <span class="pl-c1">4</span>)
ERROR<span class="pl-k">:</span> push! on <span class="pl-c1">freezeindex</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) not allowed</pre></div>
<h2><a id="user-content-low-level-interface" class="anchor" aria-hidden="true" href="#low-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-level interface</h2>
<p>Using <code>freeze</code> and <code>melt</code> at API boundaries is a good way to ensure
correctness of the programs.  However,
<a href="https://github.com/JuliaLang/julia/pull/31630">until the <code>julia</code> compiler gets a borrow checker</a>
and automatically elides such copies, it may be very expensive to use
them in some situations.  Until then, Mutabilities.jl provides
an "escape hatch"; i.e., an API to let the programmer declare that
there is no sharing of the given object:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">freeze</span>(<span class="pl-c1">move!</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]))  <span class="pl-c"><span class="pl-c">#</span> no copy</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">melt</span>(<span class="pl-c1">move!</span>(z))  <span class="pl-c"><span class="pl-c">#</span> no copy</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>This allows Julia programs to compose well, without defining immutable
<code>f</code> and mutable <code>f!</code> variants of the API and without documenting the
particular memory ownership for each function.</p>
<p>For example, <code>melt</code> is simply defined as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">melt</span>(x) <span class="pl-k">=</span> <span class="pl-c1">meltvalue</span>(<span class="pl-c1">move!</span>(<span class="pl-c1">meltindex</span>(x)))</pre></div>
<p><code>move!</code> can be useful when, e.g., input values can be re-used for
output values:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">add</span>(x, y)
           out <span class="pl-k">=</span> <span class="pl-c1">melt</span>(x)
           out <span class="pl-k">.+</span><span class="pl-k">=</span> y
           <span class="pl-k">return</span> <span class="pl-c1">freeze</span>(<span class="pl-c1">move!</span>(out))
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>)
       y <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">add</span>(<span class="pl-c1">move!</span>(x), y)  <span class="pl-c"><span class="pl-c">#</span> no allocations</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">melt</span>(<span class="pl-c1">move!</span>(z)) <span class="pl-k">===</span> x  <span class="pl-c"><span class="pl-c">#</span> `x` is mutated</span>
<span class="pl-c1">true</span></pre></div>
<p>(<em>Note</em>: Above example intentionally violates the rule for using
<code>move!</code> to show how it works.  After <code>add(move!(x), y)</code>, it is not
allowed to use <code>x</code>, as done in the last statement.)</p>
<h2><a id="user-content-supported-collections-and-types" class="anchor" aria-hidden="true" href="#supported-collections-and-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported collections and types</h2>
<ul>
<li><code>AbstractArray</code></li>
<li><code>AbstractDict</code></li>
<li><code>AbstractSet</code></li>
<li><a href="https://juliadata.github.io/StructTypes.jl/stable/#DataTypes-1" rel="nofollow">Data types</a>
("plain <code>struct</code>")</li>
</ul>
<h2><a id="user-content-interop" class="anchor" aria-hidden="true" href="#interop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interop</h2>
<h3><a id="user-content-staticarrays" class="anchor" aria-hidden="true" href="#staticarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StaticArrays</h3>
<p>Static arrays are converted to appropriate types instead of the
wrapper arrays:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> SA[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">3</span>},Int64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">melt</span>(a)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">meltvalue</span>(a)
<span class="pl-c1">3</span><span class="pl-k">-</span>element MArray{Tuple{<span class="pl-c1">3</span>},Int64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeze</span>(<span class="pl-c1">MVector</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>))  <span class="pl-c"><span class="pl-c">#</span> or freezevalue</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">3</span>},Int64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<h3><a id="user-content-structarrays" class="anchor" aria-hidden="true" href="#structarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StructArrays</h3>
<p>Mutabilities.jl is aware of mutability of each field arrays
wrapped in struct arrays:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructArrays

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>);  <span class="pl-c"><span class="pl-c">#</span> x.a is not mutable</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">melt</span>(x)
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>,),Tuple{Int64}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>,)
 (a <span class="pl-k">=</span> <span class="pl-c1">2</span>,)
 (a <span class="pl-k">=</span> <span class="pl-c1">3</span>,)

julia<span class="pl-k">&gt;</span> y<span class="pl-k">.</span>a
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">freeze</span>(<span class="pl-c1">StructArray</span>(a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]))
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>)) with eltype NamedTuple{(<span class="pl-c1">:a</span>,),Tuple{Int64}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>,)
 (a <span class="pl-k">=</span> <span class="pl-c1">2</span>,)
 (a <span class="pl-k">=</span> <span class="pl-c1">3</span>,)

julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>a
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">freeze</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related packages</h2>
<ul>
<li><a href="https://github.com/andyferris/Freeze.jl">https://github.com/andyferris/Freeze.jl</a></li>
<li><a href="https://github.com/bkamins/ReadOnlyArrays.jl">https://github.com/bkamins/ReadOnlyArrays.jl</a></li>
</ul>
</article></div>