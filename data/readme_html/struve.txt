<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-struvejl" class="anchor" aria-hidden="true" href="#struvejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Struve.jl</h1>
<p>This package provides methods to compute the
<a href="https://dlmf.nist.gov/11" rel="nofollow">Struve functions</a> H, K, L, and M.</p>
<p><a href="https://travis-ci.org/gwater/Struve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ab77f7eddb079046fa9225f09789bf61de9ac7f81692fcc07dcf542bee8c9539/68747470733a2f2f7472617669732d63692e6f72672f6777617465722f5374727576652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gwater/Struve.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gwater/Struve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/65146ea64a8d80bd7144042bd644b6450aef69799c42c43db8bdb028e4d21271/68747470733a2f2f636f6465636f762e696f2f67682f6777617465722f5374727576652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/gwater/Struve.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="./example.png"><img alt="plot of four Struve functions (H₀, K₀, L₀, M₀) on the real axis" src="./example.png" width="480" style="max-width:100%;"></a></p>
<p>The default methods currently use integral representations of the functions
which are computed numerically using
<a href="https://github.com/JuliaMath/QuadGK.jl">QuadGK.jl</a> and
<a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>.</p>
<p>It also implements
<a href="http://dx.doi.org/10.1121/1.4968792" rel="nofollow">fast approximations for H₀ and H₁</a> on the
real axis (with absolute error below 2×10⁻³).
For fast, high accuracy approximations <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun.jl</a> may be used.</p>
<p>Note that methods are not exported; instead they can be accessed via
dot-syntax, e.g. <code>Struve.K0(z)</code>. The currently available methods are:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Struve.H(ν, z)
Struve.K(ν, z)
Struve.L(ν, z)
Struve.M(ν, z)

Struve.H0(z)
Struve.K0(z)
Struve.L0(z)
Struve.M0(z)

Struve.H0_fast(x)
Struve.H1_fast(x)
"><pre><code>Struve.H(ν, z)
Struve.K(ν, z)
Struve.L(ν, z)
Struve.M(ν, z)

Struve.H0(z)
Struve.K0(z)
Struve.L0(z)
Struve.M0(z)

Struve.H0_fast(x)
Struve.H1_fast(x)
</code></pre></div>
<p>Please note: Implementations have not been systematically verified yet; bug
reports and test cases are welcome.</p>
</article></div>