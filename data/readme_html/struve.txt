<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-struvejl" class="anchor" aria-hidden="true" href="#struvejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Struve.jl</h1>
<p>This package provides methods to compute the
<a href="https://dlmf.nist.gov/11" rel="nofollow">Struve functions</a> H, K, L, and M.</p>
<p><a href="https://travis-ci.org/gwater/Struve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9542d72bcc2458d9ac4eabe530439e0194369909/68747470733a2f2f7472617669732d63692e6f72672f6777617465722f5374727576652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gwater/Struve.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gwater/Struve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/452eaba62b37e6121bafd11da4e87e4c238ead4b/68747470733a2f2f636f6465636f762e696f2f67682f6777617465722f5374727576652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/gwater/Struve.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="./example.png"><img alt="plot of four Struve functions (H₀, K₀, L₀, M₀) on the real axis" src="./example.png" width="480" style="max-width:100%;"></a></p>
<p>The default methods currently use integral representations of the functions
which are computed numerically using
<a href="https://github.com/JuliaMath/QuadGK.jl">QuadGK.jl</a> and
<a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>.</p>
<p>It also implements
<a href="http://dx.doi.org/10.1121/1.4968792" rel="nofollow">fast approximations for H₀ and H₁</a> on the
real axis (with absolute error below 2×10⁻³).
For fast, high accuracy approximations <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun.jl</a> may be used.</p>
<p>Note that methods are not exported; instead they can be accessed via
dot-syntax, e.g. <code>Struve.K0(z)</code>. The currently available methods are:</p>
<pre><code>Struve.H(ν, z)
Struve.K(ν, z)
Struve.L(ν, z)
Struve.M(ν, z)

Struve.H0(z)
Struve.K0(z)
Struve.L0(z)
Struve.M0(z)

Struve.H0_fast(x)
Struve.H1_fast(x)
</code></pre>
<p>Please note: Implementations have not been systematically verified yet; bug
reports and test cases are welcome.</p>
</article></div>