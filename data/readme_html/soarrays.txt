<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structsofarrays" class="anchor" aria-hidden="true" href="#structsofarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructsOfArrays</h1>
<p dir="auto"><a href="https://travis-ci.org/simonster/StructsOfArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c94c6801eb268199bf1cf32e6b0a8de52716c872726d57c30b202d5adccd98e1/68747470733a2f2f7472617669732d63692e6f72672f73696d6f6e737465722f537472756374734f664172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/simonster/StructsOfArrays.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/simonster/StructsOfArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/17748a22f733bc297f519ca45b7adc011855b1f4795b3d2c2ca3584606af0d8f/687474703a2f2f636f6465636f762e696f2f6769746875622f73696d6f6e737465722f537472756374734f664172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/simonster/StructsOfArrays.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A traditional Julia array of immutable objects is an array of structures. Fields
of a given object are stored adjacent in memory. However, this often inhibits
SIMD optimizations. StructsOfArrays implements the classic structure of arrays
optimization. The contents of a given field for all objects is stored linearly
in memory, and different fields are stored in different arrays. This permits
SIMD optimizations in more cases and can also save a bit of memory if the object
contains padding. It is especially useful for arrays of complex numbers.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">You can construct a StructOfArrays directly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructsOfArrays
A = StructOfArrays(Complex128, 10, 10)"><pre><span class="pl-k">using</span> StructsOfArrays
A <span class="pl-k">=</span> <span class="pl-c1">StructOfArrays</span>(Complex128, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>)</pre></div>
<p dir="auto">or by converting an AbstractArray:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = convert(StructOfArrays, complex(randn(10), randn(10)))"><pre>A <span class="pl-k">=</span> <span class="pl-c1">convert</span>(StructOfArrays, <span class="pl-c1">complex</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)))</pre></div>
<p dir="auto">Beyond that, there's not much to say. Assignment and indexing works as with
other AbstractArray types. Indexing a <code>StructOfArrays{T}</code> yields an object of
type <code>T</code>, and you can assign objects of type <code>T</code> to a given index. The "magic"
is in the optimizations that the alternative memory layout allows LLVM to
perform.</p>
<p dir="auto">While you can create a StructOfArrays of non-<code>isbits</code> immutables, this is
probably slower than an ordinary array, since a new object must be heap
allocated every time the StructOfArrays is indexed. In practice, StructsOfArrays
works best with <code>isbits</code> immutables such as <code>Complex{T}</code>.</p>
<h2 dir="auto"><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructsOfArrays
regular = complex(randn(1000000), randn(1000000))
soa = convert(StructOfArrays, regular)

function f(x, a)
    s = zero(eltype(x))
    @simd for i in 1:length(x)
        @inbounds s += x[i] * a
    end
    s
end

using Benchmarks
@benchmark f(regular, 0.5+0.5im)
@benchmark f(soa, 0.5+0.5im)"><pre><span class="pl-k">using</span> StructsOfArrays
regular <span class="pl-k">=</span> <span class="pl-c1">complex</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1000000</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">1000000</span>))
soa <span class="pl-k">=</span> <span class="pl-c1">convert</span>(StructOfArrays, regular)

<span class="pl-k">function</span> <span class="pl-en">f</span>(x, a)
    s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(x))
    <span class="pl-c1">@simd</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)
        <span class="pl-c1">@inbounds</span> s <span class="pl-k">+=</span> x[i] <span class="pl-k">*</span> a
    <span class="pl-k">end</span>
    s
<span class="pl-k">end</span>

<span class="pl-k">using</span> Benchmarks
<span class="pl-c1">@benchmark</span> <span class="pl-c1">f</span>(regular, <span class="pl-c1">0.5</span><span class="pl-k">+</span><span class="pl-c1">0.5im</span>)
<span class="pl-c1">@benchmark</span> <span class="pl-c1">f</span>(soa, <span class="pl-c1">0.5</span><span class="pl-k">+</span><span class="pl-c1">0.5im</span>)</pre></div>
<p dir="auto">The time for <code>f(regular, 0.5+0.5im)</code> is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Average elapsed time: 1.244 ms
  95% CI for average: [1.183 ms, 1.305 ms]
Minimum elapsed time: 1.177 ms"><pre class="notranslate"><code>Average elapsed time: 1.244 ms
  95% CI for average: [1.183 ms, 1.305 ms]
Minimum elapsed time: 1.177 ms
</code></pre></div>
<p dir="auto">and for <code>f(soa, 0.5+0.5im)</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Average elapsed time: 832.198 μs
  95% CI for average: [726.349 μs, 938.048 μs]
Minimum elapsed time: 713.730 μs"><pre class="notranslate"><code>Average elapsed time: 832.198 μs
  95% CI for average: [726.349 μs, 938.048 μs]
Minimum elapsed time: 713.730 μs
</code></pre></div>
<p dir="auto">In this case, StructsOfArrays are about 1.5x faster than ordinary arrays.
Inspection of generated code demonstrates that <code>f(soa, a)</code> uses SIMD
instructions, while <code>f(regular, a)</code> does not.</p>
</article></div>