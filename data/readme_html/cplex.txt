<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><strong>CPLEX.jl underwent a major rewrite between versions 0.6.6 and 0.7.0. Users of
JuMP should see no breaking changes, but if you used the lower-level C API
(e.g., for callbacks), you will need to update your code accordingly. For a full
description of the changes, read <a href="https://discourse.julialang.org/t/ann-upcoming-breaking-changes-to-cplex-jl-and-gurobi-jl/47814" rel="nofollow">this discourse post</a>.</strong></p>
<p><strong>To revert to the old API, use:</strong></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(Pkg.PackageSpec(name = &quot;CPLEX&quot;, version = v&quot;0.6&quot;))
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>, version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>0.6<span class="pl-pds">"</span></span>))</pre></div>
<p><strong>Then restart Julia for the change to take effect.</strong></p>
<h1><a id="user-content-cplexjl" class="anchor" aria-hidden="true" href="#cplexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CPLEX.jl</h1>
<p>CPLEX.jl is a wrapper for the <a href="https://www.ibm.com/products/ilog-cplex-optimization-studio" rel="nofollow">IBM® ILOG® CPLEX® Optimization
Studio</a></p>
<p>You cannot use CPLEX.jl without having purchased and installed a copy of CPLEX
Optimization Studio from <a href="http://www.ibm.com/" rel="nofollow">IBM</a>. However, CPLEX is
available for free to <a href="http://ibm.biz/Bdzvqw" rel="nofollow">academics and students</a>.</p>
<p>CPLEX.jl has two components:</p>
<ul>
<li>a thin wrapper around the complete C API</li>
<li>an interface to <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a></li>
</ul>
<p>The C API can be accessed via <code>CPLEX.CPXxx</code> functions, where the names and
arguments are identical to the C API. See the <a href="https://www.ibm.com/support/knowledgecenter/SSSA5P_12.10.0/COS_KC_home.html" rel="nofollow">CPLEX documentation</a>
for details.</p>
<p><em>Note: This wrapper is maintained by the JuMP community and is not
officially supported by IBM. However, we thank IBM for providing us with a
CPLEX license to test <code>CPLEX.jl</code> on GitHub. If you are a commercial customer
interested in official support for CPLEX in Julia, let them know!.</em></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><strong>Minimum version requirement:</strong> CPLEX.jl requires CPLEX version 12.10 or 20.1.</p>
<p>First, obtain a license of CPLEX and install CPLEX solver, following the
instructions on <a href="https://www.ibm.com/analytics/cplex-optimizer" rel="nofollow">IBM's website</a>. Then, set the
<code>CPLEX_STUDIO_BINARIES</code> environment variable as appropriate and run
<code>Pkg.add("CPLEX")</code>, then <code>Pkg.build("CPLEX")</code>. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# On Windows, this might be
ENV[&quot;CPLEX_STUDIO_BINARIES&quot;] = &quot;C:\\Program Files\\CPLEX_Studio1210\\cplex\\bin\\x86-64_win\\&quot;
import Pkg
Pkg.add(&quot;CPLEX&quot;)
Pkg.build(&quot;CPLEX&quot;)

# On OSX, this might be
ENV[&quot;CPLEX_STUDIO_BINARIES&quot;] = &quot;/Applications/CPLEX_Studio1210/cplex/bin/x86-64_osx/&quot;
import Pkg
Pkg.add(&quot;CPLEX&quot;)
Pkg.build(&quot;CPLEX&quot;)

# On Unix, this might be
ENV[&quot;CPLEX_STUDIO_BINARIES&quot;] = &quot;/opt/CPLEX_Studio1210/cplex/bin/x86-64_linux/&quot;
import Pkg
Pkg.add(&quot;CPLEX&quot;)
Pkg.build(&quot;CPLEX&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> On Windows, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CPLEX_STUDIO_BINARIES<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>Program Files<span class="pl-cce">\\</span>CPLEX_Studio1210<span class="pl-cce">\\</span>cplex<span class="pl-cce">\\</span>bin<span class="pl-cce">\\</span>x86-64_win<span class="pl-cce">\\</span><span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> On OSX, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CPLEX_STUDIO_BINARIES<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Applications/CPLEX_Studio1210/cplex/bin/x86-64_osx/<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> On Unix, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CPLEX_STUDIO_BINARIES<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/CPLEX_Studio1210/cplex/bin/x86-64_linux/<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEX<span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Note: your path may differ. Check which folder you installed CPLEX in, and
update the path accordingly.</strong></p>
<h2><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use with JuMP</h2>
<p>We highly recommend that you use the <em>CPLEX.jl</em> package with higher level
packages such as <a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a>.</p>
<p>This can be done using the <code>CPLEX.Optimizer</code> object. Here is how to create a
<em>JuMP</em> model that uses CPLEX as the solver.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, CPLEX

model = Model(CPLEX.Optimizer)
set_optimizer_attribute(model, &quot;CPX_PARAM_EPINT&quot;, 1e-8)
"><pre><span class="pl-k">using</span> JuMP, CPLEX

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(CPLEX<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>CPX_PARAM_EPINT<span class="pl-pds">"</span></span>, <span class="pl-c1">1e-8</span>)</pre></div>
<p>Parameters match those of the C API in the <a href="https://www.ibm.com/support/knowledgecenter/SSSA5P_12.10.0/ilog.odms.cplex.help/CPLEX/Parameters/topics/introListAlpha.html" rel="nofollow">CPLEX documentation</a>.</p>
<h2><a id="user-content-callbacks" class="anchor" aria-hidden="true" href="#callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Callbacks</h2>
<p>Here is an example using CPLEX's solver-specific callbacks.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, CPLEX, Test

model = direct_model(CPLEX.Optimizer())
set_silent(model)

# This is very, very important!!! Only use callbacks in single-threaded mode.
MOI.set(model, MOI.NumberOfThreads(), 1)

@variable(model, 0 &lt;= x &lt;= 2.5, Int)
@variable(model, 0 &lt;= y &lt;= 2.5, Int)
@objective(model, Max, y)
cb_calls = Clong[]
function my_callback_function(cb_data::CPLEX.CallbackContext, context_id::Clong)
    # You can reference variables outside the function as normal
    push!(cb_calls, context_id)
    # You can select where the callback is run
    if context_id != CPX_CALLBACKCONTEXT_CANDIDATE
        return
    end
    ispoint_p = Ref{Cint}()
    ret = CPXcallbackcandidateispoint(cb_data, ispoint_p)
    if ret != 0 || ispoint_p[] == 0
        return  # No candidate point available or error
    end
    # You can query CALLBACKINFO items
    valueP = Ref{Cdouble}()
    ret = CPXcallbackgetinfodbl(cb_data, CPXCALLBACKINFO_BEST_BND, valueP)
    @info &quot;Best bound is currently: $(valueP[])&quot;
    # As well as any other C API
    x_p = Vector{Cdouble}(undef, 2)
    obj_p = Ref{Cdouble}()
    ret = CPXcallbackgetincumbent(cb_data, x_p, 0, 1, obj_p)
    if ret == 0
        @info &quot;Objective incumbent is: $(obj_p[])&quot;
        @info &quot;Incumbent solution is: $(x_p)&quot;
        # Use CPLEX.column to map between variable references and the 1-based
        # column.
        x_col = CPLEX.column(cb_data, index(x))
        @info &quot;x = $(x_p[x_col])&quot;
    else
        # Unable to query incumbent.
    end

    # Before querying `callback_value`, you must call:
    CPLEX.load_callback_variable_primal(cb_data, context_id)
    x_val = callback_value(cb_data, x)
    y_val = callback_value(cb_data, y)
    # You can submit solver-independent MathOptInterface attributes such as
    # lazy constraints, user-cuts, and heuristic solutions.
    if y_val - x_val &gt; 1 + 1e-6
        con = @build_constraint(y - x &lt;= 1)
        MOI.submit(model, MOI.LazyConstraint(cb_data), con)
    elseif y_val + x_val &gt; 3 + 1e-6
        con = @build_constraint(y + x &lt;= 3)
        MOI.submit(model, MOI.LazyConstraint(cb_data), con)
    end
end
MOI.set(model, CPLEX.CallbackFunction(), my_callback_function)
optimize!(model)
@test termination_status(model) == MOI.OPTIMAL
@test primal_status(model) == MOI.FEASIBLE_POINT
@test value(x) == 1
@test value(y) == 2
"><pre><span class="pl-k">using</span> JuMP, CPLEX, Test

model <span class="pl-k">=</span> <span class="pl-c1">direct_model</span>(CPLEX<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>())
<span class="pl-c1">set_silent</span>(model)

<span class="pl-c"><span class="pl-c">#</span> This is very, very important!!! Only use callbacks in single-threaded mode.</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">NumberOfThreads</span>(), <span class="pl-c1">1</span>)

<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">2.5</span>, Int)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">2.5</span>, Int)
<span class="pl-c1">@objective</span>(model, Max, y)
cb_calls <span class="pl-k">=</span> Clong[]
<span class="pl-k">function</span> <span class="pl-en">my_callback_function</span>(cb_data<span class="pl-k">::</span><span class="pl-c1">CPLEX.CallbackContext</span>, context_id<span class="pl-k">::</span><span class="pl-c1">Clong</span>)
    <span class="pl-c"><span class="pl-c">#</span> You can reference variables outside the function as normal</span>
    <span class="pl-c1">push!</span>(cb_calls, context_id)
    <span class="pl-c"><span class="pl-c">#</span> You can select where the callback is run</span>
    <span class="pl-k">if</span> context_id <span class="pl-k">!=</span> CPX_CALLBACKCONTEXT_CANDIDATE
        <span class="pl-k">return</span>
    <span class="pl-k">end</span>
    ispoint_p <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Cint}</span>()
    ret <span class="pl-k">=</span> <span class="pl-c1">CPXcallbackcandidateispoint</span>(cb_data, ispoint_p)
    <span class="pl-k">if</span> ret <span class="pl-k">!=</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> ispoint_p[] <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-k">return</span>  <span class="pl-c"><span class="pl-c">#</span> No candidate point available or error</span>
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> You can query CALLBACKINFO items</span>
    valueP <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Cdouble}</span>()
    ret <span class="pl-k">=</span> <span class="pl-c1">CPXcallbackgetinfodbl</span>(cb_data, CPXCALLBACKINFO_BEST_BND, valueP)
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Best bound is currently: <span class="pl-v">$(valueP[])</span><span class="pl-pds">"</span></span>
    <span class="pl-c"><span class="pl-c">#</span> As well as any other C API</span>
    x_p <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Cdouble}</span>(undef, <span class="pl-c1">2</span>)
    obj_p <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Cdouble}</span>()
    ret <span class="pl-k">=</span> <span class="pl-c1">CPXcallbackgetincumbent</span>(cb_data, x_p, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, obj_p)
    <span class="pl-k">if</span> ret <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Objective incumbent is: <span class="pl-v">$(obj_p[])</span><span class="pl-pds">"</span></span>
        <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Incumbent solution is: <span class="pl-v">$(x_p)</span><span class="pl-pds">"</span></span>
        <span class="pl-c"><span class="pl-c">#</span> Use CPLEX.column to map between variable references and the 1-based</span>
        <span class="pl-c"><span class="pl-c">#</span> column.</span>
        x_col <span class="pl-k">=</span> CPLEX<span class="pl-k">.</span><span class="pl-c1">column</span>(cb_data, <span class="pl-c1">index</span>(x))
        <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>x = <span class="pl-v">$(x_p[x_col])</span><span class="pl-pds">"</span></span>
    <span class="pl-k">else</span>
        <span class="pl-c"><span class="pl-c">#</span> Unable to query incumbent.</span>
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> Before querying `callback_value`, you must call:</span>
    CPLEX<span class="pl-k">.</span><span class="pl-c1">load_callback_variable_primal</span>(cb_data, context_id)
    x_val <span class="pl-k">=</span> <span class="pl-c1">callback_value</span>(cb_data, x)
    y_val <span class="pl-k">=</span> <span class="pl-c1">callback_value</span>(cb_data, y)
    <span class="pl-c"><span class="pl-c">#</span> You can submit solver-independent MathOptInterface attributes such as</span>
    <span class="pl-c"><span class="pl-c">#</span> lazy constraints, user-cuts, and heuristic solutions.</span>
    <span class="pl-k">if</span> y_val <span class="pl-k">-</span> x_val <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>
        con <span class="pl-k">=</span> <span class="pl-c1">@build_constraint</span>(y <span class="pl-k">-</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)
        MOI<span class="pl-k">.</span><span class="pl-c1">submit</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">LazyConstraint</span>(cb_data), con)
    <span class="pl-k">elseif</span> y_val <span class="pl-k">+</span> x_val <span class="pl-k">&gt;</span> <span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>
        con <span class="pl-k">=</span> <span class="pl-c1">@build_constraint</span>(y <span class="pl-k">+</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
        MOI<span class="pl-k">.</span><span class="pl-c1">submit</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">LazyConstraint</span>(cb_data), con)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, CPLEX<span class="pl-k">.</span><span class="pl-c1">CallbackFunction</span>(), my_callback_function)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">@test</span> <span class="pl-c1">termination_status</span>(model) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>OPTIMAL
<span class="pl-c1">@test</span> <span class="pl-c1">primal_status</span>(model) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>FEASIBLE_POINT
<span class="pl-c1">@test</span> <span class="pl-c1">value</span>(x) <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test</span> <span class="pl-c1">value</span>(y) <span class="pl-k">==</span> <span class="pl-c1">2</span></pre></div>
</article></div>