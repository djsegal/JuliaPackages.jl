<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-singlefloatsjl" class="anchor" aria-hidden="true" href="#singlefloatsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SingleFloats.jl</h1>
<p>Float32 results are computed using Float64s</p>
<h4><a id="user-content-copyright--2015-2019-by-jeffrey-sarnoff" class="anchor" aria-hidden="true" href="#copyright--2015-2019-by-jeffrey-sarnoff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Copyright Â© 2015-2019 by Jeffrey Sarnoff.</h4>
<h4><a id="user-content-this-work-is-released-under-the-mit-license" class="anchor" aria-hidden="true" href="#this-work-is-released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>This work is released under The MIT License.</h4>
<hr>
<h2><a id="user-content--" class="anchor" aria-hidden="true" href="#-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://travis-ci.org/JeffreySarnoff/SingleFloats.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/14fb10bf4f5cc7697ed2eabcca714bc28b69e9cd/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f53696e676c65466c6f6174732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/SingleFloats.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/JeffreySarnoff/SingleFloats.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/305935557ac2fd5f5f5058d371cacc96be03991d/68747470733a2f2f636f6465636f762e696f2f67682f4a6566667265795361726e6f66662f53696e676c65466c6f6174732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JeffreySarnoff/SingleFloats.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></h2>
<p>There is one export, the type <code>Single32</code>.  Use it in place of <code>Float32</code> for results that are more reliable,
reporting numerical results with greater accuracy through the low-order bits of significands' precision.</p>
<p><code>Single32</code> values look like <code>Float32</code> values and act like <code>Float32</code> values.  Their computational results
are exceed the expectations for accuracy with <code>Float32s</code>.  With relatively stable algorithms, <code>Single32s</code>
are much better at preserving information present in significands' low-order bits.</p>
<p>Mathematical operations with <code>Single32s</code> are computed using <code>Float64</code> internally.  To get the benefit
that they afford, it is <strong>necessary</strong> that you do not reach inside these values to see or to use any
part that is not shown in regular use.  This works only if the values you provide are Float32s and
the values you obtain are Float32s.</p>
<p>The translation from an array of <code>Float32</code> to an array of <code>Single32</code> is done with broadcasting.
After completing the computational work, the translation back to <code>Float32</code> is just as easy:</p>
<pre><code>using SingleFloats

               # original_data must be Float32

data_at_work   = Single32.(original_data)
value_obtains  = process(data_at_work)
result_of_work = Float32.(value_obtains)

               # result_of_work must be Float32
</code></pre>
<p>The intent is to provide robust coverage of <code>Float32</code> ops.  Let me know of requests. PRs welcome.</p>
<hr>
<h3><a id="user-content-additional-reliability-comes-with-using-single32s" class="anchor" aria-hidden="true" href="#additional-reliability-comes-with-using-single32s"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional reliability comes with using <code>Single32s</code>.</h3>
<pre><code>using SingleFloats

xs_fwd(::Type{T}) where T = T.(collect(1.0:20.0))
ys_fwd(::Type{T}) where T = cot.(xs_fwd(T))
sumfwd(::Type{T}) where T = sum(ys_fwd(T))

xs_rev(::Type{T}) where T = reverse(xs_fwd(T))
ys_rev(::Type{T}) where T = cot.(xs_rev(T))
sumrev(::Type{T}) where T = sum(ys_rev(T))

epsmax(a, b) = eps(max(a, b))

function muddybits(::Type{T}) where T
   fwd = sumfwd(T)
   rev = sumrev(T)
   muddy = round(Int32, abs(fwd - rev) / epsmax(fwd, rev))

   lsbits = 31 - leading_zeros(muddy)
   return max(0, lsbits)
end


#  How many low-order bits of these type's significands have become
#  opaque, replacing confirmatory valuation with inessential noise?

(Single32 = muddybits(Single32),
 Float32  = muddybits(Float32),
 Float64  = muddybits(Float64))

(Single32 = 0, Float32 = 6, Float64 = 7)


</code></pre>
</article></div>