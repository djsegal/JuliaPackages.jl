<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-halfintegers" class="anchor" aria-hidden="true" href="#halfintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HalfIntegers</h1>
<p><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/7419ed8f87340c461d79c97de255705c67b165231185324ba61ecfc259f1452c/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f482f48616c66496e7465676572732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/H/HalfIntegers.svg" style="max-width:100%;"></a>
<a href="https://github.com/sostock/HalfIntegers.jl/actions?query=workflow%3ACI"><img src="https://github.com/sostock/HalfIntegers.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/sostock/HalfIntegers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/26d305a30370876091bc39ab59e5686ff50bcff00ff083597fcb9491cd320936/68747470733a2f2f636f6465636f762e696f2f67682f736f73746f636b2f48616c66496e7465676572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/sostock/HalfIntegers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://sostock.github.io/HalfIntegers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://sostock.github.io/HalfIntegers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>This package provides data types for half-integer numbers. Here, any number <em>n</em>/2 where <em>n</em>
is an integer is considered a half-integer – contrary to the
<a href="https://en.wikipedia.org/wiki/Half-integer" rel="nofollow">common definition</a>,
<em>n</em> does not have to be odd, i.e., the integers are a subset of the half-integers.</p>
<p>For example, the <code>HalfInt</code> type provided by this package can be used to represent numbers
<em>n</em>/2 where <em>n</em> is an <code>Int</code>. Likewise, there exist half-integer types for all of Julia’s
signed and unsigned integer types, e.g., <code>HalfInt8</code>, <code>HalfUInt128</code>, and <code>BigHalfInt</code> for
arbitrarily large half-integers. All half-integer types are subtypes of the abstract type
<code>HalfInteger</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>HalfIntegers.jl is compatible with Julia ≥ 1.0.
It can be installed by typing</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add HalfIntegers
"><pre><code>] add HalfIntegers
</code></pre></div>
<p>in the Julia REPL or via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;HalfIntegers&quot;)
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>HalfIntegers<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h2>
<p><code>HalfInteger</code>s can be created from any other number type by using constructors or <code>convert</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; HalfInt(-2.5)
-5/2

julia&gt; convert(HalfUInt16, 7//2)
7/2

julia&gt; BigHalfInt(2)
2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">HalfInt</span>(<span class="pl-k">-</span><span class="pl-c1">2.5</span>)
<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(HalfUInt16, <span class="pl-c1">7</span><span class="pl-k">//</span><span class="pl-c1">2</span>)
<span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">BigHalfInt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span></pre></div>
<p>Another way of creating an <code>HalfInteger</code> is the <code>half</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; half(11)
11/2

julia&gt; half(HalfInt8, -3)
-3/2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">half</span>(<span class="pl-c1">11</span>)
<span class="pl-c1">11</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">half</span>(HalfInt8, <span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">2</span></pre></div>
<p><code>HalfInteger</code> types support all standard arithmetic operations. Furthermore, this package
defines the function <code>twice</code>. For any number <em>x</em>, the function <code>twice</code> returns the number
2<em>x</em>. For <code>HalfInteger</code> types, it returns an <code>Integer</code> type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; twice(1.5)
3.0

julia&gt; twice(HalfInt64(1.5))
3

julia&gt; typeof(ans)
Int64
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">twice</span>(<span class="pl-c1">1.5</span>)
<span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">twice</span>(<span class="pl-c1">HalfInt64</span>(<span class="pl-c1">1.5</span>))
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
Int64</pre></div>
<h2><a id="user-content-the-halftinteger-type" class="anchor" aria-hidden="true" href="#the-halftinteger-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>Half{T&lt;:Integer}</code> type</h2>
<p>All concrete half-integer types provided by this package are actually just aliases for
<code>Half{T}</code> with a specific <code>T</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; typeof(HalfInt64(1/2))
Half{Int64}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">HalfInt64</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>))
Half{Int64}</pre></div>
<p>The type <code>Half{T}</code> accepts arbitrary <code>&lt;:Integer</code> types as parameter. It can be used to
define half-integers based on other (non-standard) integers. For example, since <code>HalfInt</code>
etc. are based on standard integer arithmetic, they are subject to
<a href="https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Overflow-behavior-1" rel="nofollow">integer overflow</a>.
If you prefer checked arithmetic, you can use the
<a href="https://github.com/JeffreySarnoff/SaferIntegers.jl">SaferIntegers</a>
package and use <code>Half{SafeInt}</code> instead of <code>HalfInt</code>.</p>
<h2><a id="user-content-alternatives-to-this-package" class="anchor" aria-hidden="true" href="#alternatives-to-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternatives to this package</h2>
<ul>
<li><a href="https://github.com/JuliaMath/FixedPointNumbers.jl">FixedPointNumbers.jl</a> implements
numbers with a fixed number of fraction bits. Thus, the <code>Fixed{Int,1}</code> type from
<code>FixedPointNumbers</code> can be considered equivalent to the <code>HalfInt</code> type from this package.
However, the types behave differently in some ways. For example, multiplying two
<code>Fixed{T,f}</code> numbers results in another <code>Fixed{T,f}</code> number, whereas multiplying two
<code>HalfInteger</code>s results in a floating-point number.</li>
</ul>
</article></div>