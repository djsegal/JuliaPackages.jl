<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-halfintegers" class="anchor" aria-hidden="true" href="#halfintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HalfIntegers</h1>
<p><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/29be18b01759b11878f625105717a78aa647ad51/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f482f48616c66496e7465676572732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/H/HalfIntegers.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/sostock/HalfIntegers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b08141d378db013c2579331daefe288a9c19203/68747470733a2f2f7472617669732d63692e636f6d2f736f73746f636b2f48616c66496e7465676572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/sostock/HalfIntegers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/sostock/halfintegers-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/fb9ad26248f7f657241effd9fa1bd2c3946944f6/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6c7370386b756962766d6d39616775742f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/lsp8kuibvmm9agut/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/sostock/HalfIntegers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/def5ab701121d6ee29c308bad2c1470786f8855e/68747470733a2f2f636f6465636f762e696f2f67682f736f73746f636b2f48616c66496e7465676572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/sostock/HalfIntegers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/sostock/HalfIntegers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9f4b6bbc2fcad15c4e4a2fecd47ed8dee36b6768/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f736f73746f636b2f48616c66496e7465676572732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sostock/HalfIntegers.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://sostock.github.io/HalfIntegers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://sostock.github.io/HalfIntegers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><strong>If you are using version 0.1 of this package, it is highly recommended that you upgrade to version 1.0. It is backwards compatible except for removing support for Julia 0.7.</strong></p>
<p>This package provides data types for half-integer numbers. Here, any number <em>n</em>/2 where <em>n</em>
is an integer is considered a half-integer – contrary to the
<a href="https://en.wikipedia.org/wiki/Half-integer" rel="nofollow">common definition</a>,
<em>n</em> does not have to be odd, i.e., the integers are a subset of the half-integers.</p>
<p>For example, the <code>HalfInt</code> type provided by this package can be used to represent numbers
<em>n</em>/2 where <em>n</em> is an <code>Int</code>. Likewise, there exist half-integer types for all of Julia’s
signed and unsigned integer types, e.g., <code>HalfInt8</code>, <code>HalfUInt128</code>, and <code>BigHalfInt</code> for
arbitrarily large half-integers. All half-integer types are subtypes of the abstract type
<code>HalfInteger</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>HalfIntegers.jl is compatible with Julia ≥ 1.0.
It can be installed by typing</p>
<pre><code>] add HalfIntegers
</code></pre>
<p>in the Julia REPL or via</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>HalfIntegers<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic usage</h2>
<p><code>HalfInteger</code>s can be created from any other number type by using constructors or <code>convert</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">HalfInt</span>(<span class="pl-k">-</span><span class="pl-c1">2.5</span>)
<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(HalfUInt16, <span class="pl-c1">7</span><span class="pl-k">//</span><span class="pl-c1">2</span>)
<span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">BigHalfInt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span></pre></div>
<p>Another way of creating an <code>HalfInteger</code> is the <code>half</code> function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">half</span>(<span class="pl-c1">11</span>)
<span class="pl-c1">11</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">half</span>(HalfInt8, <span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">2</span></pre></div>
<p><code>HalfInteger</code> types support all standard arithmetic operations. Furthermore, this package
defines the function <code>twice</code>. For any number <em>x</em>, the function <code>twice</code> returns the number
2<em>x</em>. For <code>HalfInteger</code> types, it returns an <code>Integer</code> type.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">twice</span>(<span class="pl-c1">1.5</span>)
<span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">twice</span>(<span class="pl-c1">HalfInt64</span>(<span class="pl-c1">1.5</span>))
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
Int64</pre></div>
<h2><a id="user-content-the-halftinteger-type" class="anchor" aria-hidden="true" href="#the-halftinteger-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>Half{T&lt;:Integer}</code> type</h2>
<p>All concrete half-integer types provided by this package are actually just aliases for
<code>Half{T}</code> with a specific <code>T</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">HalfInt64</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>))
Half{Int64}</pre></div>
<p>The type <code>Half{T}</code> accepts arbitrary <code>&lt;:Integer</code> types as parameter. It can be used to
define half-integers based on other (non-standard) integers. For example, since <code>HalfInt</code>
etc. are based on standard integer arithmetic, they are subject to
<a href="https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Overflow-behavior-1" rel="nofollow">integer overflow</a>.
If you prefer checked arithmetic, you can use the
<a href="https://github.com/JeffreySarnoff/SaferIntegers.jl">SaferIntegers</a>
package and use <code>Half{SafeInt}</code> instead of <code>HalfInt</code>.</p>
</article></div>