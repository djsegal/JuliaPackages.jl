<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/JuliaPOMDP/LocalApproximationValueIteration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0301800a76db09af1610acc13bc7ae7b321db774/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961504f4d44502f4c6f63616c417070726f78696d6174696f6e56616c7565497465726174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPOMDP/LocalApproximationValueIteration.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaPOMDP/LocalApproximationValueIteration.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8b1f6830d338fda4824927a033c6791a4a05769d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961504f4d44502f4c6f63616c417070726f78696d6174696f6e56616c7565497465726174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaPOMDP/LocalApproximationValueIteration.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-localapproximationvalueiteration" class="anchor" aria-hidden="true" href="#localapproximationvalueiteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LocalApproximationValueIteration</h1>
<p>This package implements the Local Approximation Value Iteration algorithm in Julia for solving
Markov Decision Processes (MDPs). Algorithmically it is very similar to the <a href="https://github.com/JuliaPOMDP/DiscreteValueIteration.jl">DiscreteValueIteration.jl</a>
package, but it represents the state space in a fundamentally different manner, as explained below.
As with <code>DiscreteValueIteration</code>, the user should define the problem according to the API in
<a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a>. Examples of problem definitions can be found in
<a href="https://github.com/JuliaPOMDP/POMDPModels.jl">POMDPModels.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You need to have <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a> already and the registry added (see its README).
Thereafter, you can add LocalApproximationValueIteration from package manager mode in the Julia REPL</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LocalApproximationValueIteration<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How it Works</h2>
<p>This solver is one example of <em>Approximate Dynamic Programming</em>, which tries to find approximately optimal
value functions and policies for large or continuous state spaces. The approach of Local Approximation Value
Iteration assumes that states that are <em>near</em> each other (by some appropriate distance metric) will have similar
values, and it computes the values at some (user-defined) finite set of states, and interpolates the value
function over the entire state space using some local function approximation technique. Details of this approach
are described in <strong>Section 4.5.1</strong> of the book <a href="https://dl.acm.org/citation.cfm?id=2815660" rel="nofollow">Decision Making Under Uncertainty : Theory and Application</a>.</p>
<h2><a id="user-content-state-space-representation" class="anchor" aria-hidden="true" href="#state-space-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State Space Representation</h2>
<p>For value function approximation, the solver depends on the <a href="https://github.com/sisl/LocalFunctionApproximation.jl">LocalFunctionApproximation.jl</a>
package. The <code>LocalApproximationValueIteration</code> solver must be
initialized with an appropriate <code>LocalFunctionApproximator</code> object that approximates
the computed value function over the entire state space by either interpolation over a multi-dimensional grid discretization
of the state space, or by k-nearest-neighbor averaging
with a randomly drawn set of state space samples. The resulting policy uses this object to compute the action-value
function or the best action for any arbitrary state query.</p>
<p>A key operational requirement that the solver has from the MDP is that any state can be represented via an equivalent
real-valued vector. This is enforced by the two <code>convert_s</code> function requirements that convert an instance of
the MDP State type to a real-valued vector and vice versa. The signatures for these methods are:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">convert_s</span>(<span class="pl-k">::</span><span class="pl-c1">Type{S}</span>,<span class="pl-k">::</span><span class="pl-c1">V</span> <span class="pl-k">where</span> V <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector{Float64}</span>,<span class="pl-k">::</span><span class="pl-c1">P</span>)
<span class="pl-c1">convert_s</span>(<span class="pl-k">::</span><span class="pl-c1">Type{V}</span> <span class="pl-k">where</span> V <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector{Float64}</span>,<span class="pl-k">::</span><span class="pl-c1">S</span>,<span class="pl-k">::</span><span class="pl-c1">P</span>)</pre></div>
<p>The user is required to implement the above two functions for the <code>State</code> type of their MDP problem model. An example of this
is shown in <code>test/runtests_versus_discrete_vi.jl</code> for the <a href="https://github.com/JuliaPOMDP/POMDPModels.jl/blob/master/src/gridworld.jl">GridWorld</a> model.
:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> POMDPs<span class="pl-k">.</span><span class="pl-en">convert_s</span>(<span class="pl-k">::</span><span class="pl-c1">Type{V}</span> <span class="pl-k">where</span> V <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector{Float64}</span>, s<span class="pl-k">::</span><span class="pl-c1">GridWorldState</span>, mdp<span class="pl-k">::</span><span class="pl-c1">GridWorld</span>)
    v <span class="pl-k">=</span> <span class="pl-c1">SVector</span><span class="pl-c1">{3,Float64}</span>(s<span class="pl-k">.</span>x, s<span class="pl-k">.</span>y, <span class="pl-c1">convert</span>(Float64,s<span class="pl-k">.</span>done))
    <span class="pl-k">return</span> v
<span class="pl-k">end</span>

<span class="pl-k">function</span> POMDPs<span class="pl-k">.</span><span class="pl-en">convert_s</span>(<span class="pl-k">::</span><span class="pl-c1">Type{GridWorldState}</span>, v<span class="pl-k">::</span><span class="pl-c1">AbstractVector{Float64}</span>, mdp<span class="pl-k">::</span><span class="pl-c1">GridWorld</span>)
    s <span class="pl-k">=</span> <span class="pl-c1">GridWorldState</span>(<span class="pl-c1">round</span>(Int64, v[<span class="pl-c1">1</span>]), <span class="pl-c1">round</span>(Int64, v[<span class="pl-c1">2</span>]), <span class="pl-c1">convert</span>(Bool, v[<span class="pl-c1">3</span>]))
<span class="pl-k">end</span></pre></div>
<p>Note that <code>SVector</code> must be imported through <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p><code>POMDPs.jl</code> has a macro <code>@requirements_info</code> that determines the functions necessary to use some solver on some specific MDP model. As mentioned above, the
<code>LocalApproximationValueIteration</code> solver depends on a <code>LocalFunctionApproximator</code> object and so that object must first be created to invoke
the requirements of the solver accordingly (check <a href="http://juliapomdp.github.io/POMDPs.jl/latest/requirements" rel="nofollow">here</a> for more information). From our running example in <code>test/runtests_versus_discrete_vi.jl</code>, a function approximation object that uses grid interpolation
(<code>LocalGIFunctionApproximator</code>) is created, after the appropriate <code>RectangleGrid</code> is
constructed (Look at <a href="https://github.com/sisl/GridInterpolations.jl/blob/master/src/GridInterpolations.jl/">GridInterpolations.jl</a> for more details about this).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> POMDPs, POMDPModels
<span class="pl-k">using</span> GridInterpolations
<span class="pl-k">using</span> LocalFunctionApproximation
<span class="pl-k">using</span> LocalApproximationValueIteration

VERTICES_PER_AXIS <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> Controls the resolutions along the grid axis</span>
grid <span class="pl-k">=</span> <span class="pl-c1">RectangleGrid</span>(<span class="pl-c1">range</span>(<span class="pl-c1">1</span>, stop<span class="pl-k">=</span><span class="pl-c1">100</span>, length<span class="pl-k">=</span>VERTICES_PER_AXIS), <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, stop<span class="pl-k">=</span><span class="pl-c1">100</span>, length<span class="pl-k">=</span>VERTICES_PER_AXIS), [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>]) <span class="pl-c"><span class="pl-c">#</span> Create the interpolating grid</span>
interp <span class="pl-k">=</span> <span class="pl-c1">LocalGIFunctionApproximator</span>(grid)  <span class="pl-c"><span class="pl-c">#</span> Create the local function approximator using the grid</span>

<span class="pl-c1">@requirements_info</span> <span class="pl-c1">LocalApproximationValueIterationSolver</span>(interp) <span class="pl-c1">GridWorld</span>() <span class="pl-c"><span class="pl-c">#</span> Check if the solver requirements are met</span></pre></div>
<p>The user should modify the above steps depending on the kind of interpolation and the necessary parameters they want. We have delegated this step to the user
as it is extremely problem and domain specific. Note that the solver supports both explicit and generative transition models for the MDP (more on that <a href="http://juliapomdp.github.io/POMDPs.jl/latest/def_pomdp" rel="nofollow">here</a>).
The <code>.is_mdp_generative</code> and <code>.n_generative_samples</code> arguments of the <code>LocalApproximationValueIteration</code> solver should be set accordingly, and there are different
<code>@requirements</code> depending on which kind of model the MDP has.</p>
<p>Once all the necessary functions have been defined, the solver can be created.  A <code>GridWorld</code> MDP is defined with grid size 100 x 100 and appropriate reward states:</p>
<div class="highlight highlight-source-julia"><pre>mdp <span class="pl-k">=</span> <span class="pl-c1">GridWorld</span>(sx<span class="pl-k">=</span><span class="pl-c1">100</span>, sy<span class="pl-k">=</span><span class="pl-c1">100</span>, rs<span class="pl-k">=</span>rstates, rv<span class="pl-k">=</span>rvect)</pre></div>
<p>Finally, the solver can be created using the function approximation object and other necessary parameters
(this model is explicit), and the MDP can be solved:</p>
<div class="highlight highlight-source-julia"><pre>approx_solver <span class="pl-k">=</span> <span class="pl-c1">LocalApproximationValueIterationSolver</span>(interp, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>, max_iterations<span class="pl-k">=</span><span class="pl-c1">1000</span>, is_mdp_generative<span class="pl-k">=</span><span class="pl-c1">false</span>)
approx_policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(approx_solver, mdp)</pre></div>
<p>The API for querying the final policy object is identical to <code>DiscreteValueIteration</code>, i.e. the <code>action</code> and <code>value</code> functions can be called for the solved MDP:</p>
<div class="highlight highlight-source-julia"><pre>v <span class="pl-k">=</span> <span class="pl-c1">value</span>(approx_policy, s)  <span class="pl-c"><span class="pl-c">#</span> returns the approximately optimal value for state s</span>
a <span class="pl-k">=</span> <span class="pl-c1">action</span>(approx_policy, s) <span class="pl-c"><span class="pl-c">#</span> returns the approximately optimal action for state s</span></pre></div>
</article></div>