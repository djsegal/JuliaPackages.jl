<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/nnfem.gif"><img src="docs/src/assets/nnfem.gif" alt="NNFEM" data-animated-image="" style="max-width: 100%;"></a>
</p>
<p dir="auto">NNFEM is a</p>
<ul dir="auto">
<li>lightweight educational 2D finite element library with <strong>truss and 2D quadrilateral elements</strong>. Different constitutive relations are supported, including <strong>plane stress/strain</strong>, <strong>hyperelasticity</strong>, <strong>elasto-plasticity</strong>, etc. It supports <strong>unstructured grid</strong>.</li>
<li>neural network-enabled finite element library, which supports learning a neural network-based constitutive relations with both direct data (i.e, strain-stress pairs) and indirect data (i.e. full displacement field) via <strong>automatic differentiation</strong>, and solving finite element problems with <strong>network-based constitutive relations</strong>. In principle, it allows you to insert and learn a neural network anywhere in your finite element codes.</li>
</ul>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> NNFEM.jl is now superseded by <a href="https://github.com/kailaix/AdFem.jl">AdFem.jl</a>, a computational-graph-based finite element library for inverse modeling. NNFEM.jl will be no longer actively developed.</p>
<table>
<thead>
<tr>
<th>Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://kailaix.github.io/NNFEM.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-install-nnfem" class="anchor" aria-hidden="true" href="#install-nnfem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install <code>NNFEM</code></h2>
<p dir="auto">Install via Julia registery</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;NNFEM&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NNFEM<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">If you intend to develop the package (add new features, modify current functions, etc.), we suggest developing the package (in the current directory (NNFEM.jl))</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; dev ."><pre class="notranslate"><code>julia&gt; ]
pkg&gt; dev .
</code></pre></div>
<p dir="auto">When necessary, you can delete the package (in the current directory (NNFEM.jl))</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; rm NNFEM"><pre class="notranslate"><code>julia&gt; ]
pkg&gt; rm NNFEM
</code></pre></div>
<p dir="auto">If you only want to use the package and do not want to install the dependencies manually, do</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; activate .
(NNFEM) pkg&gt; instantiate"><pre class="notranslate"><code>julia&gt; ]
pkg&gt; activate .
(NNFEM) pkg&gt; instantiate
</code></pre></div>
<h2 dir="auto"><a id="user-content-code-structure" class="anchor" aria-hidden="true" href="#code-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Code structure</h2>
<h3 dir="auto"><a id="user-content-basic-finite-element-library" class="anchor" aria-hidden="true" href="#basic-finite-element-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic finite element library</h3>
<ul dir="auto">
<li>
<p dir="auto">elements are in /src/elements, including finite/small strain 2D quad and 1D truss elements.</p>
</li>
<li>
<p dir="auto">constitutive relations are in /src/materials, including plane stress/strain, hyperelasticity, elasto-plasticity, etc.</p>
</li>
<li>
<p dir="auto">solvers are in /src/solvers/Solver.jl, including generalized-alpha solver, etc.</p>
</li>
<li>
<p dir="auto">finite element domain, and core functions are in /src/fem.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-neural-network-based-constitutive-relations" class="anchor" aria-hidden="true" href="#neural-network-based-constitutive-relations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Neural network based constitutive relations</h3>
<ul dir="auto">
<li>
<p dir="auto">neural network based constitutive relations are in /src/materials/NeuralNetwork1D.jl and src/materials/NeuralNetwork2D.jl.</p>
</li>
<li>
<p dir="auto">neural network based finite element solvers are in /src/solvers/NNSolver.jl, which compute the loss for indirect data training.</p>
</li>
<li>
<p dir="auto">different customized neural networks are in /deps/CustomOp, which enables designing constraint-embedded neural networks.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-applications" class="anchor" aria-hidden="true" href="#applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Applications</h3>
<p dir="auto">There are several applications in <code>research/ConstitutiveRelations/Plate</code> and <code>research/ConstitutiveRelations/Truss/Case1D</code></p>
<ul dir="auto">
<li>
<p dir="auto"><code>Data_*</code> runs the finite element solver to generate the test data and produces <code>Data/1.dat</code> and <code>Data/domain.jld2</code></p>
</li>
<li>
<p dir="auto"><code>NNLearn.jl</code> learns an ANN with strain-to-stress data generated previously (extracted from each Gaussian quadrature points of the train sets). It produces <code>learned_nn.mat</code>. This is refered as direct training.</p>
</li>
<li>
<p dir="auto"><code>Train_NN*</code> learns an ANN from displacement data and associated loading condition. This is refered as indirect training.</p>
</li>
<li>
<p dir="auto"><code>Test_NN*</code> substitutes the constitutive law with the learned NN and test the hybrid model (NN + FEM) on the test sets.</p>
</li>
<li>
<p dir="auto"><code>NN_Test_All*</code> substitutes the constitutive law with the learned NN and test the hybrid model (NN + FEM) on the all test cases, and visualize the time-histories of the displacement and von-Mises stress fields.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Troubleshooting</h2>
<h3 dir="auto"><a id="user-content-python-dependencies" class="anchor" aria-hidden="true" href="#python-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python dependencies</h3>
<p dir="auto">NNFEM is based on ADCME, you need to first install ADCME.jl, which will install a private Python environment for you. Take it easy, it will NOT mess your local environment!</p>
<p dir="auto">A bit more about what is under the hood: PyCall relies on the python version installed in <code>$HOME/.julia/conda/3/bin/python</code>, you can check the path with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using PyCall
julia&gt; PyCall.python"><pre class="notranslate"><code>julia&gt; using PyCall
julia&gt; PyCall.python
</code></pre></div>
<p dir="auto">If you want to use Python packages via PyCall, install python packages, e.g., <code>tikzplotlib</code>, via</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$HOME/.julia/conda/3/bin/python -m pip install tikzplotlib"><pre class="notranslate"><code>$HOME/.julia/conda/3/bin/python -m pip install tikzplotlib
</code></pre></div>
<h3 dir="auto"><a id="user-content-build-customized-operators" class="anchor" aria-hidden="true" href="#build-customized-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Build customized operators</h3>
<p dir="auto">NNFEM includes some custom operators. Those operators are implemented in C++ and will be compiled automatically when you invoke <code>Pkg.build("NNFEM")</code>. However, in the case you encounter any compilation issue, you can go into the <code>deps</code> directory, and run <code>build.jl</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd deps
julia build.jl"><pre class="notranslate"><code>cd deps
julia build.jl
</code></pre></div>
<h3 dir="auto"><a id="user-content-submit-an-issue" class="anchor" aria-hidden="true" href="#submit-an-issue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Submit an issue</h3>
<p dir="auto">You are welcome to submit an issue for any questions related to NNFEM.</p>
<h2 dir="auto"><a id="user-content-research" class="anchor" aria-hidden="true" href="#research"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Research</h2>
<ol dir="auto">
<li>
<p dir="auto">Huang, Daniel Z., Kailai Xu, Charbel Farhat, and Eric Darve. "<a href="https://arxiv.org/pdf/1905.12530.pdf" rel="nofollow">Learning Constitutive Relations from Indirect Observations Using Deep Neural Networks</a>"</p>
</li>
<li>
<p dir="auto">Kailai Xu, Huang, Daniel Z., and Eric Darve. "<a href="https://arxiv.org/pdf/2004.00265.pdf" rel="nofollow">Learning Constitutive Relations using  Symmetric Positive Definite Neural Networks</a>"</p>
</li>
</ol>
</article></div>