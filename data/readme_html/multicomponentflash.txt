<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-multicomponentflash" class="anchor" aria-hidden="true" href="#multicomponentflash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MultiComponentFlash</h1>
<p dir="auto"><a href="https://moyner.github.io/MultiComponentFlash.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://moyner.github.io/MultiComponentFlash.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/moyner/MultiComponentFlash.jl/actions"><img src="https://github.com/moyner/MultiComponentFlash.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/moyner/MultiComponentFlash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/668eb8d537527ad026afca30bdc6851b01a3b1b20a09be23e284cff203ddedf4/68747470733a2f2f636f6465636f762e696f2f67682f6d6f796e65722f4d756c7469436f6d706f6e656e74466c6173682e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/moyner/MultiComponentFlash.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h1>
<p dir="auto">This package implements several equations of state for multicomponent vapor-liquid equilibrium, also called flash, for mixtures. These can be used to determine vapor fractions, molar partition between the phases and predict properties such as density and volume.</p>
<p dir="auto">The following equations of state (EOS) are implemented as a class of generic cubics:</p>
<ul dir="auto">
<li><a href="https://doi.org/10.1021/i160057a011" rel="nofollow">Peng-Robinson</a></li>
<li><a href="https://doi.org/10.1021/cr60137a013" rel="nofollow">Redlich-Kwong</a></li>
<li><a href="https://doi.org/10.1016/0009-2509(72)80096-4" rel="nofollow">Soave-Redlich-Kwong</a></li>
<li><a href="https://doi.org/10.1002/aic.690160122" rel="nofollow">Zudkevitch-Joffe</a></li>
</ul>
<p dir="auto">The code is fully type stable, easy to use and fairly performant, with additional options to avoid allocations if you need to perform many flashes. The main implementation goal is to have a compact, performant and easy to use code suitable for integration in simulators of multiphase flow.</p>
<h1 dir="auto"><a id="user-content-highlights" class="anchor" aria-hidden="true" href="#highlights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Highlights</h1>
<p dir="auto">We highlight a few of the features. For more details, please see the API and the <a href="@ref">Basic usage</a> examples.</p>
<ul dir="auto">
<li>Support for different solution methods (successive substition (SSI), Newton, SSI+Newton) and type dispatch makes it easy for users to add their own.</li>
<li>User friendly interface - with options to pre-allocate for increase performance.</li>
<li>Compatible with AD. Mostly tested with <code>ForwardDiff</code>.</li>
<li>Phase stability test.</li>
<li>Rachford-Rice for constant K-values.</li>
<li>Useful utilities for molar density, molar volume, single-phase liquid-vapor estimation and Lohrenz-Bray-Clark viscosity correlations that are compatible with custom types and AD.</li>
</ul>
<p dir="auto">For more details, please see the <a href="https://moyner.github.io/MultiComponentFlash.jl/stable" rel="nofollow">documentation</a></p>
<h1 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h1>
<h2 dir="auto"><a id="user-content-vapor-fraction-for-constant-k-values" class="anchor" aria-hidden="true" href="#vapor-fraction-for-constant-k-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vapor fraction for constant K-values</h2>
<p dir="auto">We solve the Rachford-Rice equations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MultiComponentFlash
K = [0.1, 9.0] # K-values
z = [0.7, 0.3] # Mole fractions
V = solve_rachford_rice(K, z)"><pre><span class="pl-k">using</span> MultiComponentFlash
K <span class="pl-k">=</span> [<span class="pl-c1">0.1</span>, <span class="pl-c1">9.0</span>] <span class="pl-c"><span class="pl-c">#</span> K-values</span>
z <span class="pl-k">=</span> [<span class="pl-c1">0.7</span>, <span class="pl-c1">0.3</span>] <span class="pl-c"><span class="pl-c">#</span> Mole fractions</span>
V <span class="pl-k">=</span> <span class="pl-c1">solve_rachford_rice</span>(K, z)</pre></div>
<p dir="auto"><code>V</code> now holds the vapor fraction:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="0.24583333333333332"><pre class="notranslate"><code>0.24583333333333332
</code></pre></div>
<h2 dir="auto"><a id="user-content-flash-with-cubic-equations-of-state" class="anchor" aria-hidden="true" href="#flash-with-cubic-equations-of-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Flash with cubic equations of state</h2>
<p dir="auto">Solve vapor-liquid equilibrium with a two-component mixture and the Peng-Robinson equation of state:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="props = MolecularProperty.([&quot;Methane&quot;, &quot;n-Decane&quot;])
mixture = MultiComponentMixture(props)
eos = GenericCubicEOS(mixture, PengRobinson())
# Define conditions to flash at
p = 5e6        # 5 000 000 Pa, or 50 bar
T = 303.15     # 30 °C = 303.15 °K
z = [0.4, 0.6] # 4 mole methane per 6 moles of decane
conditions = (p = p, T = T, z = z)
# Perform a flash to get the vapor fraction
V = flash_2ph(eos, conditions)"><pre>props <span class="pl-k">=</span> <span class="pl-c1">MolecularProperty</span>.([<span class="pl-s"><span class="pl-pds">"</span>Methane<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>n-Decane<span class="pl-pds">"</span></span>])
mixture <span class="pl-k">=</span> <span class="pl-c1">MultiComponentMixture</span>(props)
eos <span class="pl-k">=</span> <span class="pl-c1">GenericCubicEOS</span>(mixture, <span class="pl-c1">PengRobinson</span>())
<span class="pl-c"><span class="pl-c">#</span> Define conditions to flash at</span>
p <span class="pl-k">=</span> <span class="pl-c1">5e6</span>        <span class="pl-c"><span class="pl-c">#</span> 5 000 000 Pa, or 50 bar</span>
T <span class="pl-k">=</span> <span class="pl-c1">303.15</span>     <span class="pl-c"><span class="pl-c">#</span> 30 °C = 303.15 °K</span>
z <span class="pl-k">=</span> [<span class="pl-c1">0.4</span>, <span class="pl-c1">0.6</span>] <span class="pl-c"><span class="pl-c">#</span> 4 mole methane per 6 moles of decane</span>
conditions <span class="pl-k">=</span> (p <span class="pl-k">=</span> p, T <span class="pl-k">=</span> T, z <span class="pl-k">=</span> z)
<span class="pl-c"><span class="pl-c">#</span> Perform a flash to get the vapor fraction</span>
V <span class="pl-k">=</span> <span class="pl-c1">flash_2ph</span>(eos, conditions)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; V
0.20785284212697513"><pre>julia<span class="pl-k">&gt;</span> V
<span class="pl-c1">0.20785284212697513</span></pre></div>
<h2 dir="auto"><a id="user-content-get-k-values-and-calculate-liquid-and-vapor-mole-fractions" class="anchor" aria-hidden="true" href="#get-k-values-and-calculate-liquid-and-vapor-mole-fractions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Get K-values and calculate liquid and vapor mole fractions</h2>
<p dir="auto">If we also want to know how the components are partitioned in the two phases, we can turn on the <code>extra_out</code> flag.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="V, K, = flash_2ph(eos, conditions, extra_out = true)
x = liquid_mole_fraction.(z, K, V)
y = vapor_mole_fraction.(z, K, V)"><pre>V, K, <span class="pl-k">=</span> <span class="pl-c1">flash_2ph</span>(eos, conditions, extra_out <span class="pl-k">=</span> <span class="pl-c1">true</span>)
x <span class="pl-k">=</span> <span class="pl-c1">liquid_mole_fraction</span>.(z, K, V)
y <span class="pl-k">=</span> <span class="pl-c1">vapor_mole_fraction</span>.(z, K, V)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x
2-element Vector{Float64}:
 0.24266084237653415
 0.7573391576234659

julia&gt; y
2-element Vector{Float64}:
 0.999634651410856
 0.00036534858914410106

julia&gt; K
2-element Vector{Float64}:
 4.119472435769978
 0.00048241080032170367"><pre>julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.24266084237653415</span>
 <span class="pl-c1">0.7573391576234659</span>

julia<span class="pl-k">&gt;</span> y
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.999634651410856</span>
 <span class="pl-c1">0.00036534858914410106</span>

julia<span class="pl-k">&gt;</span> K
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">4.119472435769978</span>
 <span class="pl-c1">0.00048241080032170367</span></pre></div>
<h2 dir="auto"><a id="user-content-generation-of-phase-diagrams" class="anchor" aria-hidden="true" href="#generation-of-phase-diagrams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generation of phase diagrams</h2>
<p dir="auto">More examples, and details are found in the <a href="https://moyner.github.io/MultiComponentFlash.jl/stable" rel="nofollow">documentation</a>. Here is a p-T phase diagram for methane, n-decane and carbon dioxide found in the advanced examples:
<a target="_blank" rel="noopener noreferrer" href="docs/src/assets/phase_diagram_simple.png"><img src="docs/src/assets/phase_diagram_simple.png" alt="Phase diagram" style="max-width: 100%;"></a></p>
</article></div>