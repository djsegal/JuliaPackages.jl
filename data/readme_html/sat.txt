<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-satjl" class="anchor" aria-hidden="true" href="#satjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SAT.jl</h1>
<p dir="auto">Heuristic algorithms based on message passing for solving large instances of <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem" rel="nofollow">boolean satisfaction problems</a>, written in julia.
Consider using <a href="https://github.com/jakebolewski/PicoSAT.jl">PicoSAT.jl</a> if you are looking
for an exact solver.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SAT
cnf = randomcnf(N=1000, k=3, α=0.5) # generate a random k-SAT instance
σ = solve(cnf)"><pre><span class="pl-k">using</span> SAT
cnf <span class="pl-k">=</span> <span class="pl-c1">randomcnf</span>(N<span class="pl-k">=</span><span class="pl-c1">1000</span>, k<span class="pl-k">=</span><span class="pl-c1">3</span>, α<span class="pl-k">=</span><span class="pl-c1">0.5</span>) <span class="pl-c"><span class="pl-c">#</span> generate a random k-SAT instance</span>
σ <span class="pl-k">=</span> <span class="pl-c1">solve</span>(cnf)</pre></div>
<p dir="auto">The solution <code>σ</code> will be a vector of <code>N</code>  ints taking values <code>-1</code> or <code>+1</code>.</p>
<h2 dir="auto"><a id="user-content-formulas" class="anchor" aria-hidden="true" href="#formulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Formulas</h2>
<p dir="auto">Formulas in conjunctive normal form (<a href="https://en.wikipedia.org/wiki/Conjunctive_normal_form" rel="nofollow">CNF</a>) can be either read/written to files</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cnf = readcnf(&quot;formula.cnf&quot;)
writecnf(&quot;formula.cnf&quot;, cnf)"><pre>cnf <span class="pl-k">=</span> <span class="pl-c1">readcnf</span>(<span class="pl-s"><span class="pl-pds">"</span>formula.cnf<span class="pl-pds">"</span></span>)
<span class="pl-c1">writecnf</span>(<span class="pl-s"><span class="pl-pds">"</span>formula.cnf<span class="pl-pds">"</span></span>, cnf)</pre></div>
<p dir="auto">or randomly generated from the k-SAT ensemble</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cnf = randomcnf(N=1000, k=4, α=0.5, seed=17)"><pre>cnf <span class="pl-k">=</span> <span class="pl-c1">randomcnf</span>(N<span class="pl-k">=</span><span class="pl-c1">1000</span>, k<span class="pl-k">=</span><span class="pl-c1">4</span>, α<span class="pl-k">=</span><span class="pl-c1">0.5</span>, seed<span class="pl-k">=</span><span class="pl-c1">17</span>)</pre></div>
<h2 dir="auto"><a id="user-content-solvers" class="anchor" aria-hidden="true" href="#solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solvers</h2>
<h3 dir="auto"><a id="user-content-bp--reinforcement-default" class="anchor" aria-hidden="true" href="#bp--reinforcement-default"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BP + reinforcement (default)</h3>
<p dir="auto">Solve random instance with Belief Propagation (BP) inspired procedures.
<code>r</code> is the initial value of the reinforcement parameter (<code>r=0</code> default).
<code>rstep</code> determines its moltiplicative increment.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="σ = solve(cnf, rstep=0.001, maxiters=1000);"><pre>σ <span class="pl-k">=</span> <span class="pl-c1">solve</span>(cnf, rstep<span class="pl-k">=</span><span class="pl-c1">0.001</span>, maxiters<span class="pl-k">=</span><span class="pl-c1">1000</span>);</pre></div>
<p dir="auto">If having errors or unable to find a solution, try to reduce <code>rstep</code>.</p>
<h3 dir="auto"><a id="user-content-decimation" class="anchor" aria-hidden="true" href="#decimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>decimation</h3>
<p dir="auto">TODO</p>
</article></div>