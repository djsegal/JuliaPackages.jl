<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fileio" class="anchor" aria-hidden="true" href="#fileio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FileIO</h1>
<p><a href="https://travis-ci.org/JuliaIO/FileIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/15668b6ca3cd3c72c090074989a404cf9de4f89d/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f46696c65494f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/FileIO.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/SimonDanisch/fileio-jl-t5dw5/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/8a303cab607cec757e954be539306647d6f616f2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6a30327265706f796f37356d74796a6e2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/j02repoyo75mtyjn/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaIO/FileIO.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/25013c6a4f2ab27c7d2e5ba58b4462fbcfe330be/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961494f2f46696c65494f2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaIO/FileIO.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>FileIO aims to provide a common framework for detecting file formats
and dispatching to appropriate readers/writers.  The two core
functions in this package are called <code>load</code> and <code>save</code>, and offer
high-level support for formatted files (in contrast with julia's
low-level <code>read</code> and <code>write</code>).  To avoid name conflicts, packages that
provide support for standard file formats through functions named
<code>load</code> and <code>save</code> are encouraged to extend the definitions here.
<a href="docs/registry.md">Supported Files</a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install FileIO via <code>Pkg.add("FileIO")</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>If your format has been registered, it might be as simple as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO
obj <span class="pl-k">=</span> <span class="pl-c1">load</span>(filename)</pre></div>
<p>to read data from a formatted file.  Likewise, saving might be as simple as</p>
<pre><code>save(filename, obj)
</code></pre>
<p>If you just want to inspect a file to determine its format, then</p>
<div class="highlight highlight-source-julia"><pre>file <span class="pl-k">=</span> <span class="pl-c1">query</span>(filename)
s <span class="pl-k">=</span> <span class="pl-c1">query</span>(io)   <span class="pl-c"><span class="pl-c">#</span> io is a stream</span></pre></div>
<p>will return a <code>File</code> or <code>Stream</code> object that also encodes the detected
file format.</p>
<p>Sometimes you want to read or write files that are larger than your available
memory, or might be an unknown or infinite length (e.g. reading an audio or
video stream from a socket). In these cases it might not make sense to process
the whole file at once, but instead process it a chunk at a time. For these
situations FileIO provides the <code>loadstreaming</code> and <code>savestreaming</code> functions,
which return an object that you can <code>read</code> or <code>write</code>, rather than the file data
itself.</p>
<p>This would look something like:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO
audio <span class="pl-k">=</span> <span class="pl-c1">loadstreaming</span>(<span class="pl-s"><span class="pl-pds">"</span>bigfile.wav<span class="pl-pds">"</span></span>)
<span class="pl-k">try</span>
    <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(audio)
        chunk <span class="pl-k">=</span> <span class="pl-c1">read</span>(audio, <span class="pl-c1">4096</span>) <span class="pl-c"><span class="pl-c">#</span> read 4096 frames</span>
        <span class="pl-c"><span class="pl-c">#</span> process the chunk</span>
    <span class="pl-k">end</span>
<span class="pl-k">finally</span>
    <span class="pl-c1">close</span>(audio)
<span class="pl-k">end</span></pre></div>
<p>or use <code>do</code> syntax to auto-close the stream:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO
<span class="pl-c1">loadstreaming</span>(<span class="pl-s"><span class="pl-pds">"</span>bigfile.wav<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> audio
    <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(audio)
        chunk <span class="pl-k">=</span> <span class="pl-c1">read</span>(audio, <span class="pl-c1">4096</span>) <span class="pl-c"><span class="pl-c">#</span> read 4096 frames</span>
        <span class="pl-c"><span class="pl-c">#</span> process the chunk</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Note that in these cases you may want to use <code>read!</code> with a pre-allocated buffer
for maximum efficiency.</p>
<h2><a id="user-content-adding-new-formats" class="anchor" aria-hidden="true" href="#adding-new-formats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding new formats</h2>
<p>You register a new format by adding <code>add_format(fmt, magic, extension)</code> to the <a href="https://github.com/JuliaIO/FileIO.jl/blob/master/src/registry.jl">registry</a>. To do so, please just open a pull request (you can just edit the file in Github).
<code>fmt</code> is a <code>DataFormat</code> type, most conveniently created
as <code>format"IDENTIFIER"</code>.  <code>magic</code> typically contains the magic bytes
that identify the format.  Here are some examples:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> A straightforward format</span>
<span class="pl-c1">add_format</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>PNG<span class="pl-pds">"</span></span>, [<span class="pl-c1">0x89</span>,<span class="pl-c1">0x50</span>,<span class="pl-c1">0x4e</span>,<span class="pl-c1">0x47</span>,<span class="pl-c1">0x0d</span>,<span class="pl-c1">0x0a</span>,<span class="pl-c1">0x1a</span>,<span class="pl-c1">0x0a</span>], <span class="pl-s"><span class="pl-pds">"</span>.png<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> A format that uses only ASCII characters in its magic bytes, and can</span>
<span class="pl-c"><span class="pl-c">#</span> have one of two possible file extensions</span>
<span class="pl-c1">add_format</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>NRRD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>NRRD<span class="pl-pds">"</span></span>, [<span class="pl-s"><span class="pl-pds">"</span>.nrrd<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>.nhdr<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> A format whose magic bytes might not be at the beginning of the file,</span>
<span class="pl-c"><span class="pl-c">#</span> necessitating a custom function `detecthdf5` to find them</span>
<span class="pl-c1">add_format</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>HDF5<span class="pl-pds">"</span></span>, detecthdf5, [<span class="pl-s"><span class="pl-pds">"</span>.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.hdf5<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> A fictitious format that, unfortunately, provides no magic</span>
<span class="pl-c"><span class="pl-c">#</span> bytes. Here we have to place our faith in the file extension.</span>
<span class="pl-c1">add_format</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>DICEY<span class="pl-pds">"</span></span>, (), <span class="pl-s"><span class="pl-pds">"</span>.dcy<span class="pl-pds">"</span></span>)</pre></div>
<p>You can also declare that certain formats require certain packages for
I/O support:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">add_loader</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>HDF5<span class="pl-pds">"</span></span>, <span class="pl-c1">:HDF5</span>)
<span class="pl-c1">add_saver</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>PNG<span class="pl-pds">"</span></span>, <span class="pl-c1">:ImageMagick</span>)</pre></div>
<p>These packages will be automatically loaded as needed.
You can also define the loaders and savers in a short form like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">add_format</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>OFF<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>OFF<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.off<span class="pl-pds">"</span></span>, [<span class="pl-c1">:MeshIO</span>])</pre></div>
<p>This means MeshIO supports loading and saving of the <code>off</code> format.
You can add multiple loaders and specifiers like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">add_format</span>(
    <span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>BMP<span class="pl-pds">"</span></span>,
    UInt8[<span class="pl-c1">0x42</span>,<span class="pl-c1">0x4d</span>],
    <span class="pl-s"><span class="pl-pds">"</span>.bmp<span class="pl-pds">"</span></span>,
    [<span class="pl-c1">:OSXNativeIO</span>, LOAD, OSX],
    [<span class="pl-c1">:ImageMagick</span>]
)</pre></div>
<p>This means, OSXNative has first priority (gets loaded first) and only supports loading <code>bmp</code> on <code>OSX</code>.
So on windows, <code>OSXNativeIO</code> will be ignored and <code>ImageMagick</code> has first priority.
You can add any combination of <code>LOAD</code>, <code>SAVE</code>, <code>OSX</code>, <code>Unix</code>, <code>Windows</code> and <code>Linux</code>.</p>
<p>Users are encouraged to contribute these definitions to the
<code>registry.jl</code> file of this package, so that information about file
formats exists in a centralized location.</p>
<h2><a id="user-content-implementing-loaderssavers" class="anchor" aria-hidden="true" href="#implementing-loaderssavers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementing loaders/savers</h2>
<p>In your package, write code like the following:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO

<span class="pl-c"><span class="pl-c">#</span> See important note about scope below</span>
<span class="pl-k">function</span> <span class="pl-en">load</span>(f<span class="pl-k">::</span><span class="pl-c1">File{format"PNG"}</span>)
    <span class="pl-c1">open</span>(f) <span class="pl-k">do</span> s
        <span class="pl-c1">skipmagic</span>(s)  <span class="pl-c"><span class="pl-c">#</span> skip over the magic bytes</span>
        <span class="pl-c"><span class="pl-c">#</span> You can just call the method below...</span>
        ret <span class="pl-k">=</span> <span class="pl-c1">load</span>(s)
        <span class="pl-c"><span class="pl-c">#</span> ...or implement everything here instead</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> You can support streams and add keywords:</span>
<span class="pl-k">function</span> <span class="pl-en">load</span>(s<span class="pl-k">::</span><span class="pl-c1">Stream{format"PNG"}</span>; keywords<span class="pl-k">...</span>)
    <span class="pl-c"><span class="pl-c">#</span> s is already positioned after the magic bytes</span>
    <span class="pl-c"><span class="pl-c">#</span> Do the stuff to read a PNG file</span>
    chunklength <span class="pl-k">=</span> <span class="pl-c1">read</span>(s, UInt32)
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">save</span>(f<span class="pl-k">::</span><span class="pl-c1">File{format"PNG"}</span>, data)
    <span class="pl-c1">open</span>(f, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> s
        <span class="pl-c"><span class="pl-c">#</span> Don't forget to write the magic bytes!</span>
        <span class="pl-c1">write</span>(s, <span class="pl-c1">magic</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>PNG<span class="pl-pds">"</span></span>))
        <span class="pl-c"><span class="pl-c">#</span> Do the rest of the stuff needed to save in PNG format</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Note that these are <code>load</code> and <code>save</code>, <strong>not</strong> <code>FileIO.load</code> and <code>FileIO.save</code>.
Because a given format might have multiple packages that are capable of reading it,
FileIO will dispatch to these using module-scoping, e.g., <code>SomePkg.load(args...)</code>.
Consequently, <strong>packages should define "private" <code>load</code> and <code>save</code> methods (also
<code>loadstreaming</code> and <code>savestreaming</code> if you implement them), and not extend
(import) FileIO's</strong>.</p>
<p>If you run into a naming conflict with the <code>load</code> and <code>save</code> functions
(for example, you already have another function in your package that has
one of these names), you can instead name your loaders <code>fileio_load</code>,
<code>fileio_save</code> etc. Note that you cannot mix and match these styles: either
all your loaders have to be named <code>load</code>, or all of them should be called
<code>fileio_load</code>, but you cannot use both conventions in one module.</p>
<p><code>load(::File)</code> and <code>save(::File)</code> should close any streams
they open.  (If you use the <code>do</code> syntax, this happens for you
automatically even if the code inside the <code>do</code> scope throws an error.)
Conversely, <code>load(::Stream)</code> and <code>save(::Stream)</code> should not close the
input stream.</p>
<p><code>loadstreaming</code> and <code>savestreaming</code> use the same query mechanism, but return a
decoded stream that users can <code>read</code> or <code>write</code>. You should also implement a
<code>close</code> method on your reader or writer type. Just like with <code>load</code> and <code>save</code>,
if the user provided a filename, your <code>close</code> method should be responsible for
closing any streams you opened in order to read or write the file. If you are
given a <code>Stream</code>, your <code>close</code> method should only do the clean up for your
reader or writer type, not close the stream.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> WAVReader
    io<span class="pl-k">::</span><span class="pl-c1">IO</span>
    ownstream<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">read</span>(reader<span class="pl-k">::</span><span class="pl-c1">WAVReader</span>, frames<span class="pl-k">::</span><span class="pl-c1">Int</span>)
    <span class="pl-c"><span class="pl-c">#</span> read and decode audio samples from reader.io</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">close</span>(reader<span class="pl-k">::</span><span class="pl-c1">WAVReader</span>)
    <span class="pl-c"><span class="pl-c">#</span> do whatever cleanup the reader needs</span>
    reader<span class="pl-k">.</span>ownstream <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">close</span>(reader<span class="pl-k">.</span>io)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> FileIO has fallback functions that make these work using `do` syntax as well,</span>
<span class="pl-c"><span class="pl-c">#</span> and will automatically call `close` on the returned object.</span>
<span class="pl-en">loadstreaming</span>(f<span class="pl-k">::</span><span class="pl-c1">File{format"WAV"}</span>) <span class="pl-k">=</span> <span class="pl-c1">WAVReader</span>(<span class="pl-c1">open</span>(f), <span class="pl-c1">true</span>)
<span class="pl-en">loadstreaming</span>(s<span class="pl-k">::</span><span class="pl-c1">Stream{format"WAV"}</span>) <span class="pl-k">=</span> <span class="pl-c1">WAVReader</span>(s, <span class="pl-c1">false</span>)</pre></div>
<p>If you choose to implement <code>loadstreaming</code> and <code>savestreaming</code> in your package,
you can easily add <code>save</code> and <code>load</code> methods in the form of:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">save</span>(q<span class="pl-k">::</span><span class="pl-c1">Formatted{format"WAV"}</span>, data, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)
    <span class="pl-c1">savestreaming</span>(q, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">do</span> stream
        <span class="pl-c1">write</span>(stream, data)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">load</span>(q<span class="pl-k">::</span><span class="pl-c1">Formatted{format"WAV"}</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)
    <span class="pl-c1">loadstreaming</span>(q, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">do</span> stream
        <span class="pl-c1">read</span>(stream)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-help" class="anchor" aria-hidden="true" href="#help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Help</h2>
<p>You can get an API overview by typing <code>?FileIO</code> at the REPL prompt.
Individual functions have their own help too, e.g., <code>?add_format</code>.</p>
</article></div>