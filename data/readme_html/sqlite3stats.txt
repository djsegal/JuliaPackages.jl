<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://jbytecode.github.io/Sqlite3Stats.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Doc" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jbytecode/Sqlite3Stats.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f960af8bf9b71623347bdd41974ff6f133bdde3394a79376e0ef5cd5f445bd2b/68747470733a2f2f636f6465636f762e696f2f67682f6a62797465636f64652f53716c6974653353746174732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d37314539593942435436" alt="codecov" data-canonical-src="https://codecov.io/gh/jbytecode/Sqlite3Stats.jl/branch/main/graph/badge.svg?token=71E9Y9BCT6" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-sqlite3stats" class="anchor" aria-hidden="true" href="#sqlite3stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sqlite3Stats</h1>
<p dir="auto">Injecting StatsBase functions into any SQLite database in Julia.</p>
<h1 dir="auto"><a id="user-content-in-short" class="anchor" aria-hidden="true" href="#in-short"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>In Short</h1>
<p dir="auto">Makes it possible to call</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="select MEDIAN(fieldname) from tablename"><pre><span class="pl-k">select</span> MEDIAN(fieldname) <span class="pl-k">from</span> tablename</pre></div>
<p dir="auto">in Julia where median is defined in Julia and related packages and the function is <em>injected</em> to use within SQLite. <strong>Database file is not modified</strong>.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Sqlite3Stats&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Sqlite3Stats<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-simple-use" class="anchor" aria-hidden="true" href="#simple-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple use</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SQLite
using Sqlite3Stats 
using DataFrames 

# Any SQLite database
# In our case, it is dbfile.db
db = SQLite.DB(&quot;dbfile.db&quot;)

# Injecting functions 
Sqlite3Stats.register_functions(db)"><pre><span class="pl-k">using</span> SQLite
<span class="pl-k">using</span> Sqlite3Stats 
<span class="pl-k">using</span> DataFrames 

<span class="pl-c"><span class="pl-c">#</span> Any SQLite database</span>
<span class="pl-c"><span class="pl-c">#</span> In our case, it is dbfile.db</span>
db <span class="pl-k">=</span> SQLite<span class="pl-k">.</span><span class="pl-c1">DB</span>(<span class="pl-s"><span class="pl-pds">"</span>dbfile.db<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Injecting functions </span>
Sqlite3Stats<span class="pl-k">.</span><span class="pl-c1">register_functions</span>(db)</pre></div>
<h1 dir="auto"><a id="user-content-registered-functions-and-examples" class="anchor" aria-hidden="true" href="#registered-functions-and-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Registered Functions and Examples</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SQLite
using Sqlite3Stats 
using DataFrames 

db = SQLite.DB(&quot;dbfile.db&quot;)

# Injecting functions 
Sqlite3Stats.register_functions(db)

# 1st Quartile 
result = DBInterface.execute(db, &quot;select Q1(num) from table&quot;) |&gt; DataFrame 

# 2st Quartile 
result = DBInterface.execute(db, &quot;select Q2(num) from table&quot;) |&gt; DataFrame 

# Median (Equals to Q2) 
result = DBInterface.execute(db, &quot;select MEDIAN(num) from table&quot;) |&gt; DataFrame 

# 3rd Quartile 
result = DBInterface.execute(db, &quot;select Q3(num) from table&quot;) |&gt; DataFrame 

# QUANTILE
result = DBInterface.execute(db, &quot;select QUANTILE(num, 0.25) from table&quot;) |&gt; DataFrame 
result = DBInterface.execute(db, &quot;select QUANTILE(num, 0.50) from table&quot;) |&gt; DataFrame 
result = DBInterface.execute(db, &quot;select QUANTILE(num, 0.75) from table&quot;) |&gt; DataFrame 


# Covariance 
result = DBInterface.execute(db, &quot;select COV(num, other) from table&quot;) |&gt; DataFrame 

# Pearson Correlation 
result = DBInterface.execute(db, &quot;select COR(num, other) from table&quot;) |&gt; DataFrame 

# Spearman Correlation
result = DBInterface.execute(db, &quot;select SPEARMANCOR(num, other) from table&quot;) |&gt; DataFrame 

# Kendall Correlation
result = DBInterface.execute(db, &quot;select KENDALLCOR(num, other) from table&quot;) |&gt; DataFrame 

# Median Absolute Deviations 
result = DBInterface.execute(db, &quot;select MAD(num) from table&quot;) |&gt; DataFrame 

# Inter-Quartile Range
result = DBInterface.execute(db, &quot;select IQR(num) from table&quot;) |&gt; DataFrame 

# Skewness 
result = DBInterface.execute(db, &quot;select SKEWNESS(num) from table&quot;) |&gt; DataFrame 

# Kurtosis 
result = DBInterface.execute(db, &quot;select KURTOSIS(num) from table&quot;) |&gt; DataFrame 

# Geometric Mean
result = DBInterface.execute(db, &quot;select GEOMEAN(num) from table&quot;) |&gt; DataFrame 

# Harmonic Mean
result = DBInterface.execute(db, &quot;select HARMMEAN(num) from table&quot;) |&gt; DataFrame 

# Maximum absolute deviations
result = DBInterface.execute(db, &quot;select MAXAD(num) from table&quot;) |&gt; DataFrame 

# Mean absolute deviations
result = DBInterface.execute(db, &quot;select MEANAD(num) from table&quot;) |&gt; DataFrame 

# Mean squared deviations
result = DBInterface.execute(db, &quot;select MSD(num) from table&quot;) |&gt; DataFrame 

# Mode
result = DBInterface.execute(db, &quot;select MODE(num) from table&quot;) |&gt; DataFrame 

# WMEAN for weighted mean
result = DBInterface.execute(db, &quot;select WMEAN(num, weights) from table&quot;) |&gt; DataFrame 

# WMEDIAN for weighted mean
result = DBInterface.execute(db, &quot;select WMEDIAN(num, weights) from table&quot;) |&gt; DataFrame 

# Entropy
result = DBInterface.execute(db, &quot;select ENTROPY(probs) from table&quot;) |&gt; DataFrame 

# Slope (a) of linear regression y = b + ax
result = DBInterface.execute(db, &quot;select LINSLOPE(x, y) from table&quot;) |&gt; DataFrame 

# Intercept (b) of linear regression y = b + ax
result = DBInterface.execute(db, &quot;select LININTERCEPT(x, y) from table&quot;) |&gt; DataFrame "><pre><span class="pl-k">using</span> SQLite
<span class="pl-k">using</span> Sqlite3Stats 
<span class="pl-k">using</span> DataFrames 

db <span class="pl-k">=</span> SQLite<span class="pl-k">.</span><span class="pl-c1">DB</span>(<span class="pl-s"><span class="pl-pds">"</span>dbfile.db<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Injecting functions </span>
Sqlite3Stats<span class="pl-k">.</span><span class="pl-c1">register_functions</span>(db)

<span class="pl-c"><span class="pl-c">#</span> 1st Quartile </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select Q1(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> 2st Quartile </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select Q2(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Median (Equals to Q2) </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select MEDIAN(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> 3rd Quartile </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select Q3(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> QUANTILE</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select QUANTILE(num, 0.25) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select QUANTILE(num, 0.50) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select QUANTILE(num, 0.75) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 


<span class="pl-c"><span class="pl-c">#</span> Covariance </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select COV(num, other) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Pearson Correlation </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select COR(num, other) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Spearman Correlation</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select SPEARMANCOR(num, other) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Kendall Correlation</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select KENDALLCOR(num, other) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Median Absolute Deviations </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select MAD(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Inter-Quartile Range</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select IQR(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Skewness </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select SKEWNESS(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Kurtosis </span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select KURTOSIS(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Geometric Mean</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select GEOMEAN(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Harmonic Mean</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select HARMMEAN(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Maximum absolute deviations</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select MAXAD(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Mean absolute deviations</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select MEANAD(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Mean squared deviations</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select MSD(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Mode</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select MODE(num) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> WMEAN for weighted mean</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select WMEAN(num, weights) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> WMEDIAN for weighted mean</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select WMEDIAN(num, weights) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Entropy</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select ENTROPY(probs) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Slope (a) of linear regression y = b + ax</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select LINSLOPE(x, y) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Intercept (b) of linear regression y = b + ax</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select LININTERCEPT(x, y) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame </pre></div>
<h1 dir="auto"><a id="user-content-well-known-probability-related-functions" class="anchor" aria-hidden="true" href="#well-known-probability-related-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Well-known Probability Related Functions</h1>
<p dir="auto">This family of functions implement QXXX(), PXXX(), and RXXX() for a probability density or mass function XXX. Q for quantile, p for propability or cdf value, R for random number.</p>
<p dir="auto"><code>QNORM(p, mean, stddev)</code> returns the quantile value <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$q$</math-renderer></p>
<p dir="auto">whereas</p>
<p dir="auto"><code>PNORM(q, mean, stddev)</code> returns <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$p$</math-renderer> using the equation</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$$
\int_{-\infty}^{q} f(x; \mu, \sigma)dx = p
$$</math-renderer></p>
<p dir="auto">and <code>RNORM(mean, stddev)</code> draws a random number from a Normal distribution with mean <code>mean</code> ( <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$\mu$</math-renderer> ) and standard deviation <code>stddev</code> ( <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$\sigma$</math-renderer> ) which is defined as</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$$
f(x; \mu, \sigma) = \frac{1}{\sigma\sqrt{2\pi}} e^{-\frac{1}{2} (\frac{x-\mu}{\sigma})^2}
$$</math-renderer></p>
<p dir="auto">and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="49bcdd8a5febcf488dac9b1ab9379537">$-\infty &amp;lt; x &amp;lt; \infty$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Quantile of Normal Distribution with mean 0 and standard deviation 1
result = DBInterface.execute(db, &quot;select QNORM(0.025, 0.0, 1.0) from table&quot;) |&gt; DataFrame 

# Probability of Normal Distribution with mean 0 and standard deviation 1
result = DBInterface.execute(db, &quot;select PNORM(-1.96, 0.0, 1.0) from table&quot;) |&gt; DataFrame 

# Random number drawn from a Normal Distribution with mean * and standard deviation 1
result = DBInterface.execute(db, &quot;select RNORM(0.0, 1.0) from table&quot;) |&gt; DataFrame "><pre><span class="pl-c"><span class="pl-c">#</span> Quantile of Normal Distribution with mean 0 and standard deviation 1</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select QNORM(0.025, 0.0, 1.0) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Probability of Normal Distribution with mean 0 and standard deviation 1</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select PNORM(-1.96, 0.0, 1.0) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame 

<span class="pl-c"><span class="pl-c">#</span> Random number drawn from a Normal Distribution with mean * and standard deviation 1</span>
result <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">execute</span>(db, <span class="pl-s"><span class="pl-pds">"</span>select RNORM(0.0, 1.0) from table<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame </pre></div>
<h1 dir="auto">
<a id="user-content-other-functions-for-distributions" class="anchor" aria-hidden="true" href="#other-functions-for-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other functions for distributions</h1>
<p dir="auto">Note that Q, P, and R prefix correspond to Quantile, CDF (Probability), and Random (number), respectively.</p>
<ul dir="auto">
<li>
<code>QT(x, dof)</code>, <code>PT(x, dof)</code>, <code>RT(dof)</code> for Student-T Distribution</li>
<li>
<code>QCHISQ(x, dof)</code>, <code>PCHISQ(x, dof)</code>, <code>RCHISQ(dof)</code> for ChiSquare Distribution</li>
<li>
<code>QF(x, dof1, dof2)</code>, <code>PF(x, dof1, dof2)</code>, <code>RF(dof1, dof2)</code> for F Distribution</li>
<li>
<code>QPOIS(x, lambda)</code>,<code>RPOIS(x, lambda)</code>, <code>RPOIS(lambda)</code> for Poisson Distribution</li>
<li>
<code>QBINOM(x, n, p)</code>, <code>PBINOM(x, n, p)</code>, <code>RBINOM(n, p)</code> for Binomial Distribution</li>
<li>
<code>QUNIF(x, a, b)</code>, <code>PUNIF(x, a, b)</code>, <code>RUNIF(a, b)</code> for Uniform Distribution</li>
<li>
<code>QEXP(x, theta)</code>, <code>PEXP(x, theta)</code>, <code>REXP(theta)</code> for Exponential Distribution</li>
<li>
<code>QBETA(x, alpha, beta)</code>, <code>PGAMMA(x, alpha, beta)</code>, <code>RGAMMA(alpha, beta)</code> for Beta Distribution</li>
<li>
<code>QCAUCHY(x, location, scale)</code>, <code>PCAUCHY(x, location, scale)</code>, <code>RCAUCHY(location, scale)</code> for Cauchy Distribution</li>
<li>
<code>QGAMMA(x, alpha, theta)</code>, <code>PGAMMA(x, alpha, theta)</code>, <code>RGAMMA(alpha, theta)</code> for Gamma Distribution</li>
<li>
<code>QFRECHET(x, alpha)</code>, <code>PFRECHET(x, alpha)</code>, <code>RFRECHET(alpha)</code> for Frechet Distribution</li>
<li>
<code>QPARETO(x, alpha, theta)</code>, <code>PPARETO(x, alpha, theta)</code>, <code>RPARETO(alpha, theta)</code> for Pareto Distribution</li>
<li>
<code>QWEIBULL(x, alpha, theta)</code>, <code>PWEIBULL(x, alpha, theta)</code>, <code>RWEIBULL(alpha, theta)</code> for Weibull Distribution</li>
</ul>
<h1 dir="auto">
<a id="user-content-hypothesis-tests" class="anchor" aria-hidden="true" href="#hypothesis-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hypothesis Tests</h1>
<ul dir="auto">
<li>
<code>JB(x)</code> for Jarque-Bera Normality Test (returns the p-value)</li>
</ul>
<h1 dir="auto">
<a id="user-content-the-logic" class="anchor" aria-hidden="true" href="#the-logic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Logic</h1>
<p dir="auto">The package mainly uses the <code>register</code> function. For example, a single variable
function <code>MEDIAN</code> is registered as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQLite.register(db, [], 
        (x,y) -&gt; vcat(x, y), 
        x -&gt; StatsBase.quantile(x, 0.50), 
        name = &quot;MEDIAN&quot;)"><pre>SQLite<span class="pl-k">.</span><span class="pl-c1">register</span>(db, [], 
        (x,y) <span class="pl-k">-&gt;</span> <span class="pl-c1">vcat</span>(x, y), 
        x <span class="pl-k">-&gt;</span> StatsBase<span class="pl-k">.</span><span class="pl-c1">quantile</span>(x, <span class="pl-c1">0.50</span>), 
        name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MEDIAN<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">whereas, the two-variable function <code>COR</code> is registered as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQLite.register(db, Array{Float64, 2}(undef, (0, 2)), 
        (x, a, b) -&gt; vcat(x, [a, b]'), 
        x -&gt; StatsBase.cor(x[:,1], x[:,2]), 
        name = &quot;COR&quot;, nargs = 2)"><pre>SQLite<span class="pl-k">.</span><span class="pl-c1">register</span>(db, <span class="pl-c1">Array</span><span class="pl-c1">{Float64, 2}</span>(undef, (<span class="pl-c1">0</span>, <span class="pl-c1">2</span>)), 
        (x, a, b) <span class="pl-k">-&gt;</span> <span class="pl-c1">vcat</span>(x, [a, b]<span class="pl-k">'</span>), 
        x <span class="pl-k">-&gt;</span> StatsBase<span class="pl-k">.</span><span class="pl-c1">cor</span>(x[:,<span class="pl-c1">1</span>], x[:,<span class="pl-c1">2</span>]), 
        name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>COR<span class="pl-pds">"</span></span>, nargs <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">for Pearson's correlation coefficient.</p>
</article></div>