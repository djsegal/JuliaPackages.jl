<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-avrdevicesjl" class="anchor" aria-hidden="true" href="#avrdevicesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AVRDevices.jl</h1>
<p dir="auto">This package contains register definitions and some utility functions for programming on AVR boards. Compilation of code using
this package is best done using <a href="https://github.com/Seelengrab/AVRCompiler.jl">AVRCompiler.jl</a>.</p>
<p dir="auto">Currently only the ATmega328P is supported, due to ressource limitations of the author.</p>
<p dir="auto">To install this package, simply <code>]add https://github.com/Seelengrab/AVRDevices.jl</code>.</p>
<p dir="auto">You can find examples of how to use this package in the <code>examples</code> subdirectory of this repository.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Simply do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AVRDevices.Common
using AVRDevices.ATmega328P"><pre><span class="pl-k">using</span> AVRDevices<span class="pl-k">.</span>Common
<span class="pl-k">using</span> AVRDevices<span class="pl-k">.</span>ATmega328P</pre></div>
<p dir="auto">or equivalent and start programming! Each board has definitions for the individual registers.</p>
<p dir="auto">!!! warn
Don't try to run any of the functions from <code>Common</code> or any of the device submodules on your development machine.
The code will try to write to some (for a regular PC) pretty unusual pointers and will most likely segfault. If you need to inspect
the generated code, use <code>@code_llvm dump_module=true</code> or inspect the generated AVR assembly after compilation with <a href="https://github.com/Seelengrab/AVRCompiler.jl">AVRCompiler.jl</a>.</p>
<p dir="auto">The <code>Common</code> submodule has definitions for a <code>Register</code> struct, as well as some utility functions for loading/storing
from them (and pointers) in a way such that LLVM does not eliminate the loads &amp; stores.</p>
<p dir="auto">Registers can be read from like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="val = r[]"><pre>val <span class="pl-k">=</span> r[]</pre></div>
<p dir="auto">and set like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r[] = val
# or this, if rpin1 is bit1 of register r
r[] = rpin1"><pre>r[] <span class="pl-k">=</span> val
<span class="pl-c"><span class="pl-c">#</span> or this, if rpin1 is bit1 of register r</span>
r[] <span class="pl-k">=</span> rpin1</pre></div>
<p dir="auto">All the usual operations like masking are supported via <code>r[] &amp;= mask</code>. These register operations use volatile loading/storing under the hood.</p>
</article></div>