<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dimarraysjl" class="anchor" aria-hidden="true" href="#dimarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DimArrays.jl</h1>
<p>This packages provides Julia arrays with named dimensions.
Like the built-in Array type these are mutable objects,
unlike <a href="https://github.com/davidavdav/NamedArrays.jl">NamedArrays</a> and <a href="https://github.com/JuliaArrays/AxisArrays.jl">AxisArrays</a> which are immutable.</p>
<p>The idea was to have a convenient way to gather results of calculations in a script or notebook, rather than for anything high-performance.
For example, here I have a matrix of results at each iteration, and <code>nest</code> these into a 3-tensor, whose axis order I need not remember:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DimArrays

list <span class="pl-k">=</span> [];
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">33</span>
    slowcalc <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(i) <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">13</span>) <span class="pl-k">.+</span> i
    <span class="pl-c1">push!</span>(list, <span class="pl-c1">DimArray</span>(slowcalc, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span> ))  <span class="pl-c"><span class="pl-c">#</span> add labels for 1st and 2nd dimensions  </span>
<span class="pl-k">end</span>

list3 <span class="pl-k">=</span> <span class="pl-c1">nest</span>(list, <span class="pl-c1">:iter</span>)   <span class="pl-c"><span class="pl-c">#</span> now i is the 3rd index, and named "iter"</span>

<span class="pl-k">using</span> Statistics

<span class="pl-c1">mean</span>(list3, dims<span class="pl-k">=</span><span class="pl-c1">:iter</span>)     <span class="pl-c"><span class="pl-c">#</span> equivalent to dropdims(mean(list3, dims=3), dims=3)</span></pre></div>
<p>For quick plots, dimension names are used for axes and series:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots

<span class="pl-c1">plot</span>(<span class="pl-c1">selectdim</span>(list3, <span class="pl-c1">:b</span>, <span class="pl-c1">1</span>)<span class="pl-k">'</span> , legend<span class="pl-k">=</span><span class="pl-c1">:bottomright</span>)</pre></div>
<p>Here <code>selectdim(list3, :b, 1) == list3[:,1,:]</code> in contents, but retains the labels.</p>
<p>Besides each dimension's name (which is a Symbol, strings will be converted) it can also store a function, which is used in plotting to scale the axes etc.
(But only the output, <code>getindex</code> uses original integer indices).
You can pass a number by which to scale the index, or a dictionary, instead of a function.</p>
<p>For example, this plots data saved every 4 iterations correctly over the above example:</p>
<div class="highlight highlight-source-julia"><pre>saveevery <span class="pl-k">=</span> <span class="pl-c1">4</span>
list4 <span class="pl-k">=</span> <span class="pl-c1">DimArray</span>([], <span class="pl-c1">:iter</span>, saveevery);     <span class="pl-c"><span class="pl-c">#</span> equivalent to function  i-&gt;4i</span>
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">33</span>
    slowcalc <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(i) <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">23</span>) <span class="pl-k">.+</span> i
    slownice <span class="pl-k">=</span> <span class="pl-c1">DimArray</span>(slowcalc, [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>], [<span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>)], <span class="pl-c1">:stuff</span> )
                                            <span class="pl-c"><span class="pl-c">#</span> equivalent to  i-&gt;Dict(...)[i]</span>
    <span class="pl-c1">rem</span>(i,saveevery)<span class="pl-k">==</span><span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">push!</span>(list4, slownice)
<span class="pl-k">end</span>
<span class="pl-c1">nest</span>(list4)

<span class="pl-c1">plot!</span>(<span class="pl-c1">mean</span>(<span class="pl-c1">nest</span>(list4), dims<span class="pl-k">=</span><span class="pl-c1">:b</span>)<span class="pl-k">'</span>, s<span class="pl-k">=</span><span class="pl-c1">:dash</span>)</pre></div>
<p>If you do not provide a name for a dimension (or give an empty string "")
then you can still refer to it by default names like <code>size(x, :row) == size(x,1)</code> or <code>maximum(y, :col)</code> etc.
However these defaults are not stored, and not manipulated by <code>transpose(x)</code> or <code>kron(x,y)</code>.</p>
<p>For now, the list of functions supported is:</p>
<ul>
<li><code>DimArray</code>, <code>DimVector</code>, <code>DimMatrix</code> create one, taking names and functions for dimensions in the order given.</li>
<li><code>dictvector</code> defines a DimVector whose function is a Dict.</li>
<li><code>nest</code> converts arrays of arrays, and <code>squeeze</code> drops dimensions of size 1.</li>
</ul>
<p>and these built-in functions:</p>
<ul>
<li><code>selectdim, size</code> understand a dimension's name.</li>
<li><code>sum, maximum, minimum, dropdims</code> and <code>Statistics.mean, std</code>: all can be called with a dimension's name, in which case by default <code>squeeze=true</code> on that dimension, like <code>mean(..., dims=:b)</code> above.
They can also be called with a list of dimensions: <code>sum(x, dims=[1,:c])</code> etc.</li>
<li><code>push!, append!, hcat, vcat, transpose, ctranspose, permutedims</code>.</li>
<li>Matrix multiplication <code>*</code> will warn (once) if you multiply along directions with mismatched names... which may be a terrible idea.
And <code>kron</code>ecker products produce new names like <code>:a_b</code>.</li>
<li><code>collect</code>, implicitly used by comprehensions like <code>[ sqrt(n) for n in DimVector(1:10, "int")' ]</code> which thus inherit the names of the array being iterated over.</li>
</ul>
<p>Since <code>DimArray &lt;: AbstractArray</code> anything else will fall back on their methods, and forget the dimension labels.</p>
<p>See also:</p>
<ul>
<li><a href="https://github.com/davidavdav/NamedArrays.jl">NamedArrays</a></li>
<li><a href="https://github.com/JuliaArrays/AxisArrays.jl">AxisArrays</a></li>
<li><a href="https://github.com/JuliaDiffEq/RecursiveArrayTools.jl">RecursiveArrayTools</a></li>
<li><a href="https://github.com/bramtayl/JuliennedArrays.jl">JuliennedArrays</a></li>
</ul>
<p>ToDo:</p>
<ul>
<li>Make things like <code>x[:, 1:10:end]</code> and <code>hcat(a,b)</code> update the functions correctly.</li>
<li>Figure out Julia 0.7's new broadcasting machinery.</li>
</ul>
<p>Michael Abbott,
January 2018, mostly (as I had a grant to write).</p>
<p><a href="https://travis-ci.org/mcabbott/DimArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b3190e93862f356a01e7d1734e2a3bba9cc7635/68747470733a2f2f7472617669732d63692e6f72672f6d636162626f74742f44696d4172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mcabbott/DimArrays.jl.svg?branch=master" style="max-width:100%;"></a></p>
 

</article></div>