<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-exactpredicatesjl" class="anchor" aria-hidden="true" href="#exactpredicatesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExactPredicates.jl</h1>
<p>→ <a href="https://lairez.github.io/ExactPredicates.jl/" rel="nofollow">Documentation</a></p>
<p>This package provides fast and robust predicates for Euclidean geometry. It is
implemented as a code generator that transform any homogeneous polynomial into
an algorithm that rigorously determines its sign on any given input points.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add ExactPredicates
"><pre>]add ExactPredicates</pre></div>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>Planar predicates: <code>orient</code> (left or right of a line), <code>incircle</code> (inside or
outside a circle), <code>closest</code> (closer to this or that point), <code>meet</code> (intersection of line segments), etc.</li>
<li>Spatial predicates: <code>orient</code> (above or below a plane), <code>insphere</code> (inside or
outside a ball), <code>closest</code> (closer to this or that point), etc.</li>
<li>Simplistic API, points are just <code>Tuple{Float64,Float64}</code> or <code>Tuple{Float64,Float64,Float64}</code></li>
<li>Accepts anything convertible to <code>Tuple</code></li>
<li>Extensible</li>
<li>MIT license</li>
</ul>
<h3><a id="user-content-robust" class="anchor" aria-hidden="true" href="#robust"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Robust</h3>
<p>Robust means that the code:</p>
<ul>
<li>raises an exception on <code>NaN</code> and <code>Inf</code> arguments;</li>
<li>gives a correct answer on all other inputs with <code>Float64</code> coordinates, no matter what (overflow, underflow, etc.);</li>
<li>in particular, no restriction on the coordinate range.</li>
</ul>
<h4><a id="user-content-why-robustness-matter" class="anchor" aria-hidden="true" href="#why-robustness-matter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why robustness matter?</h4>
<p>When the input data is approximate it looks absurd to insist on exact
computation. To determine if a point is inside or outside a circle, one may need
more precision than the data really convey. So what is the point?</p>
<p>Robust computation is important because it guarantees <em>soundness</em> with respect
to some combinatorial properties of the predicates, on which many algorithms
rely. For example</p>
<blockquote>
<p><code>orient(a, b, c) == orient(b, c, a) == orient(c, a, b)</code>,</p>
</blockquote>
<p>this
is a very basic geometric observation, but a floating computation may fail to
see this.</p>
<blockquote>
<p>“Inexact versions of these tests <em>[orient and incircle]</em> are vulnerable to roundoff error, and the wrong
answers they produce can cause geometric algorithms to hang, crash, or produce
incorrect output.”</p>
<p>—Jonathan Shewchuk, <em>Robust Adaptive Floating-point Geometric Predicates</em></p>
</blockquote>
<h3><a id="user-content-fast" class="anchor" aria-hidden="true" href="#fast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fast</h3>
<p>The reference point is the cost of the pure floating point evaluation, without any certification.
To evaluate the performance, one need to distinguish several scenarios.</p>
<h4><a id="user-content-the-quick-path" class="anchor" aria-hidden="true" href="#the-quick-path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The quick path</h4>
<p>For normal input (for example random input), the floating point computation is
correct. The only overhead is the computation of the error bound. Expect a 2×
slowdown with respect to the reference. On complicated predicates, like
<code>insphere</code>, the floating point computation dominates and the slowdown is only
1.3×.</p>
<p>The emphasis in the package is to make the quick path as fast as possible.</p>
<h4><a id="user-content-the-slow-path" class="anchor" aria-hidden="true" href="#the-slow-path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The slow path</h4>
<p>If the error estimation fails to certify the floating point computation, the
code falls back to interval arithmetic, using <a href="https://github.com/JuliaIntervals/IntervalArithmetic.jl">IntervalArithmetic.jl</a>. It will works especially well if the input points have small integer coordinates.
Expect a 50× slowdown.</p>
<p>In this scenario, adaptive methods, like the one famously implemented by <a href="https://www.cs.cmu.edu/~quake/robust.html" rel="nofollow">Shewchuk</a>, may be more performant.</p>
<h4><a id="user-content-the-worst-path" class="anchor" aria-hidden="true" href="#the-worst-path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The worst path</h4>
<p>When the input points are maximally degenerate, the code will resort to exact arithmetic using <code>Rational{BigInt}</code>.
The computation will always succeed, but expect a 50-100× slowdown.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h3>
<p>The type for representing points is <code>NTuple{N, Float64}</code>, where <code>N</code> is 2 or 3. Very concretly, that is <code>Tuple{Float64,Float64}</code> or <code>Tuple{Float64,Float64,Float64}</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="p, q, r, a = (1.0, 3.0), (1.5, 10.0), (-87.0, 1e64), (1e-100, 3.0)

incircle(p, q, r, a)
# -&gt; 1
"><pre>p, q, r, a <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>, <span class="pl-c1">3.0</span>), (<span class="pl-c1">1.5</span>, <span class="pl-c1">10.0</span>), (<span class="pl-k">-</span><span class="pl-c1">87.0</span>, <span class="pl-c1">1e64</span>), (<span class="pl-c1">1e-100</span>, <span class="pl-c1">3.0</span>)

<span class="pl-c1">incircle</span>(p, q, r, a)
<span class="pl-c"><span class="pl-c">#</span> -&gt; 1</span></pre></div>
<h3><a id="user-content-working-with-other-types-of-points" class="anchor" aria-hidden="true" href="#working-with-other-types-of-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Working with other types of points</h3>
<p>All the predicates will work with a type <code>T</code>, if one of the function <code>Tuple(::T)</code> or
<code>coord(::T)</code> is defined and outputs a <code>NTuple{N, Float64}</code> that contains the coordinates the
coordinates. Naturally, the computation is only robust if the conversion is robust too.
Here is a typical use.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExactPredicates
struct Point
    x :: Float64
    y :: Float64
end

Tuple(p :: Point) = (p.x, p.y)
incircle(Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0), Point(.5, .5))
"><pre><span class="pl-k">using</span> ExactPredicates
<span class="pl-k">struct</span> Point
    x <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
    y <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-en">Tuple</span>(p <span class="pl-k">::</span> <span class="pl-c1">Point</span>) <span class="pl-k">=</span> (p<span class="pl-k">.</span>x, p<span class="pl-k">.</span>y)
<span class="pl-c1">incircle</span>(<span class="pl-c1">Point</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">.5</span>, <span class="pl-c1">.5</span>))</pre></div>
<p>A nice type to represent points in the plane is <code>Complex{Float64}</code>.
It is not desirable to redefine <code>Tuple(::Complex)</code>, so we overload <code>coord</code> instead.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="coord(p :: Float64) = (p, 0.0)
coord(p :: Complex) = reim(p)
incircle(0.0, 1.0, complex(0.0, 1.0), complex(.5, .5))
"><pre><span class="pl-en">coord</span>(p <span class="pl-k">::</span> <span class="pl-c1">Float64</span>) <span class="pl-k">=</span> (p, <span class="pl-c1">0.0</span>)
<span class="pl-en">coord</span>(p <span class="pl-k">::</span> <span class="pl-c1">Complex</span>) <span class="pl-k">=</span> <span class="pl-c1">reim</span>(p)
<span class="pl-c1">incircle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">complex</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">complex</span>(<span class="pl-c1">.5</span>, <span class="pl-c1">.5</span>))</pre></div>
<p>Another interesting type for points is <code>SVector</code> from <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays</a>.
<code>Tuple</code> is already defined for this type, so we can use them readily.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StaticArrays
incircle(SVector(0.0, 0.0), SVector(1.0, 0.0), SVector(0.0, 1.0), SVector(.5, .5))
"><pre><span class="pl-k">using</span> StaticArrays
<span class="pl-c1">incircle</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">.5</span>, <span class="pl-c1">.5</span>))</pre></div>
<p>In all the examples above, the conversion has no overhead.</p>
<h2><a id="user-content-extensibility" class="anchor" aria-hidden="true" href="#extensibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extensibility</h2>
<p>The code generator turns any piece of code that evaluates a homogeneous polynomial
into a robust piece of code that evaluates the sign of the same polynomial.
It only needs hint to group variables into homogeneous groups.</p>
<p>For example the discriminant of a degree 2 polynomial <code>a x^2 + bx + c</code> is <code>b^2 - 4ac</code>, which is a homogeneous polynomial in <code>a</code>, <code>b</code> and <code>c</code>.
With ExactPredicates, you can write</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExactPredicates
using ExactPredicates.Codegen

@genpredicate function discriminant(a, b, c)
    Codegen.group!(a, b, c)
    b*b - 4*a*c
end
"><pre><span class="pl-k">using</span> ExactPredicates
<span class="pl-k">using</span> ExactPredicates<span class="pl-k">.</span>Codegen

<span class="pl-c1">@genpredicate</span> <span class="pl-k">function</span> <span class="pl-en">discriminant</span>(a, b, c)
    Codegen<span class="pl-k">.</span><span class="pl-c1">group!</span>(a, b, c)
    b<span class="pl-k">*</span>b <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">*</span>c
<span class="pl-k">end</span></pre></div>
<p>It will define a function <code>discriminant(a :: Float64, b :: Float64, c :: Float64)</code> that returns 1, –1 or 0 depending on the sign of the determinant.</p>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it works</h2>
<p>This package implements the method used by CGAL and described in:</p>
<ul>
<li>Olivier Devillers, Sylvain Pion. “Efficient Exact Geometric Predicates for Delaunay Triangulations”. RR-4351, INRIA. 2002. <a href="https://hal.inria.fr/inria-00072237" rel="nofollow">⟨inria-00072237⟩</a></li>
<li>Guillaume Melquiond, Sylvain Pion. “Formally Certified Floating-Point Filters For Homogeneous Geometric Predicates”. RAIRO, EDP Sciences, 2007, 41, pp. 57-69. <a href="https://dx.doi.org/10.1051/ita:2007005" rel="nofollow">⟨10.1051/ita:2007005⟩</a> <a href="https://hal.inria.fr/inria-00071232" rel="nofollow">⟨inria-00071232v2⟩</a></li>
<li>Andreas Meyer, Sylvain Pion. “FPG: A code generator for fast and certified geometric predicates”. Real Numbers and Computers, Jun 2008, Santiago de Compostela, Spain. pp.47-60. <a href="https://hal.inria.fr/inria-00344297" rel="nofollow">⟨inria-00344297⟩</a></li>
</ul>
<p>The implementation relies on Julia's facilities for code generation and
evaluates <em>a priori</em> the precision of the floating evaluation, relatively to the
magnitude of the input variables.</p>
</article></div>