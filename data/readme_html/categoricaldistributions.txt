<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-categoricaldistributionsjl" class="anchor" aria-hidden="true" href="#categoricaldistributionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CategoricalDistributions.jl</h1>
<p dir="auto">Probability distributions and measures for finite sample spaces whose
elements are <em>labeled</em> (consist of the class pool of a
<code>CategoricalArray</code>).</p>
<p dir="auto">Designed for performance in machine learning applications. For
example, probabilistic classifiers in
<a href="https://alan-turing-institute.github.io/MLJ.jl/dev/" rel="nofollow">MLJ</a> typically
predict the <code>UnivariateFiniteVector</code> objects defined in this package.</p>
<p dir="auto">For probability distributions over integers see the
<a href="https://juliastats.org/Distributions.jl/stable/univariate/#Discrete-Distributions" rel="nofollow">Distributions.jl</a>
package, whose methods the current package extends.</p>
<table>
<thead>
<tr>
<th align="left">Linux</th>
<th align="left">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="https://github.com/JuliaAI/CategoricalDistributions.jl/actions"><img src="https://github.com/JuliaAI/CategoricalDistributions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="left"><a href="https://codecov.io/github/JuliaAI/CategoricalDistributions.jl?branch=dev" rel="nofollow"><img src="https://camo.githubusercontent.com/cb6b5b04758208d2229f973972d357a08fe43f80903e80e682a96daa3ef7b6a8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696141492f43617465676f726963616c446973747269627574696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaAI/CategoricalDistributions.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;CategoricalDistributions&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CategoricalDistributions<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<p dir="auto">The sample space of the <code>UnivariateFinite</code> distributions provided by
this package is the class pool of a <code>CategoricalArray</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CategoricalDistributions
using CategoricalArrays
import Distributions
import UnicodePlots # for optional pretty display
data = [&quot;no&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;maybe&quot;, &quot;maybe&quot;, &quot;no&quot;,
       &quot;maybe&quot;, &quot;no&quot;, &quot;maybe&quot;] |&gt; categorical
julia&gt; d = Distributions.fit(UnivariateFinite, data)
               UnivariateFinite{Multiclass{3}}
         ┌                                        ┐
   maybe ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.4
      no ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.5
     yes ┤■■■■■■■ 0.1
         └                                        ┘
julia&gt; pdf(d, &quot;no&quot;)
0.5

julia&gt; mode(d)
CategoricalValue{String, UInt32} &quot;no&quot;"><pre><span class="pl-k">using</span> CategoricalDistributions
<span class="pl-k">using</span> CategoricalArrays
<span class="pl-k">import</span> Distributions
<span class="pl-k">import</span> UnicodePlots <span class="pl-c"><span class="pl-c">#</span> for optional pretty display</span>
data <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>,
       <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>] <span class="pl-k">|&gt;</span> categorical
julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> Distributions<span class="pl-k">.</span><span class="pl-c1">fit</span>(UnivariateFinite, data)
               UnivariateFinite{Multiclass{<span class="pl-c1">3</span>}}
         ┌                                        ┐
   maybe ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.4</span>
      no ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.5</span>
     yes ┤■■■■■■■ <span class="pl-c1">0.1</span>
         └                                        ┘
julia<span class="pl-k">&gt;</span> <span class="pl-c1">pdf</span>(d, <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>)
<span class="pl-c1">0.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mode</span>(d)
CategoricalValue{String, UInt32} <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">A <code>UnivariateFinite</code> distribution can also be constructed directly
from a probability vector:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d2 = UnivariateFinite([&quot;no&quot;, &quot;yes&quot;], [0.15, 0.85], pool=data)
             UnivariateFinite{Multiclass{3}}
       ┌                                        ┐
    no ┤■■■■■■ 0.15
   yes ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.85
       └                                        ┘"><pre>julia<span class="pl-k">&gt;</span> d2 <span class="pl-k">=</span> <span class="pl-c1">UnivariateFinite</span>([<span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>], [<span class="pl-c1">0.15</span>, <span class="pl-c1">0.85</span>], pool<span class="pl-k">=</span>data)
             UnivariateFinite{Multiclass{<span class="pl-c1">3</span>}}
       ┌                                        ┐
    no ┤■■■■■■ <span class="pl-c1">0.15</span>
   yes ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.85</span>
       └                                        ┘</pre></div>
<p dir="auto">A <code>UnivariateFinite</code> distribution tracks all classes in the pool:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="levels(d2)
3-element Vector{String}:
 &quot;maybe&quot;
 &quot;no&quot;
 &quot;yes&quot;

julia&gt; pdf(d2, &quot;maybe&quot;)
0.0

julia&gt; pdf(d2, &quot;okay&quot;)
ERROR: DomainError with Value okay not in pool. :"><pre><span class="pl-c1">levels</span>(d2)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pdf</span>(d2, <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>)
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pdf</span>(d2, <span class="pl-s"><span class="pl-pds">"</span>okay<span class="pl-pds">"</span></span>)
ERROR<span class="pl-k">:</span> DomainError with Value okay not <span class="pl-k">in</span> pool. <span class="pl-k">:</span></pre></div>
<p dir="auto">Arrays of <code>UnivariateFinite</code> distributions are defined using the same
constructor. Broadcasting methods, such as <code>pdf</code>, are optimized for
such arrays:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; v = UnivariateFinite([&quot;no&quot;, &quot;yes&quot;], [0.1, 0.2, 0.3, 0.4], augment=true, pool=data)
4-element UnivariateFiniteArray{Multiclass{3}, String, UInt32, Float64, 1}:
 UnivariateFinite{Multiclass{3}}(no=&gt;0.9, yes=&gt;0.1)
 UnivariateFinite{Multiclass{3}}(no=&gt;0.8, yes=&gt;0.2)
 UnivariateFinite{Multiclass{3}}(no=&gt;0.7, yes=&gt;0.3)
 UnivariateFinite{Multiclass{3}}(no=&gt;0.6, yes=&gt;0.4)

julia&gt; pdf.(v, &quot;no&quot;)
4-element Vector{Float64}:
 0.9
 0.8
 0.7
 0.6
"><pre class="notranslate"><code>julia&gt; v = UnivariateFinite(["no", "yes"], [0.1, 0.2, 0.3, 0.4], augment=true, pool=data)
4-element UnivariateFiniteArray{Multiclass{3}, String, UInt32, Float64, 1}:
 UnivariateFinite{Multiclass{3}}(no=&gt;0.9, yes=&gt;0.1)
 UnivariateFinite{Multiclass{3}}(no=&gt;0.8, yes=&gt;0.2)
 UnivariateFinite{Multiclass{3}}(no=&gt;0.7, yes=&gt;0.3)
 UnivariateFinite{Multiclass{3}}(no=&gt;0.6, yes=&gt;0.4)

julia&gt; pdf.(v, "no")
4-element Vector{Float64}:
 0.9
 0.8
 0.7
 0.6

</code></pre></div>
<p dir="auto">Query the <code>UnivariateFinite</code> doc-string for advanced constructor options.</p>
<p dir="auto">A (non-standard) implementation of <code>pdf</code> allows for extraction of the full
probability array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; L = levels(data)
3-element Vector{String}:
 &quot;maybe&quot;
 &quot;no&quot;
 &quot;yes&quot;

julia&gt; pdf(v, L)
4×3 Matrix{Float64}:
 0.0  0.9  0.1
 0.0  0.8  0.2
 0.0  0.7  0.3
 0.0  0.6  0.4"><pre>julia<span class="pl-k">&gt;</span> L <span class="pl-k">=</span> <span class="pl-c1">levels</span>(data)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>maybe<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pdf</span>(v, L)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.9</span>  <span class="pl-c1">0.1</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.8</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.7</span>  <span class="pl-c1">0.3</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.6</span>  <span class="pl-c1">0.4</span></pre></div>
<h2 dir="auto"><a id="user-content-measures-over-finite-labeled-sets" class="anchor" aria-hidden="true" href="#measures-over-finite-labeled-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Measures over finite labeled sets</h2>
<p dir="auto">There is, in fact, no enforcement that probabilities in a
<code>UnivariateFinite</code> distribution sum to one, only that they be belong
to a type <code>T</code> for which <code>zero(T)</code> is defined. In particular
<code>UnivariateFinite</code> objects implement arbitrary non-negative, signed,
or complex measures over a finite labeled set.</p>
<h2 dir="auto"><a id="user-content-what-does-this-package-provide" class="anchor" aria-hidden="true" href="#what-does-this-package-provide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What does this package provide?</h2>
<ul dir="auto">
<li>
<p dir="auto">A new type <code>UnivariateFinite{S}</code> for representing probability
distributions over the pool of a <code>CategoricalArray</code>, that is, over
finite <em>labeled</em> sets. Here <code>S</code> is a subtype of <code>OrderedFactor</code>
from ScientificTypesBase.jl, if the pool is ordered, or of
<code>Multiclass</code> if the pool is unordered.</p>
</li>
<li>
<p dir="auto">A new array type <code>UnivariateFiniteArray{S} &lt;: AbstractArray{&lt;:UnivariateFinite{S}}</code> for efficiently manipulating
arrays of <code>UnivariateFinite</code> distributions.</p>
</li>
<li>
<p dir="auto">Implementations of <code>rand</code> for generating random samples of a
<code>UnivariateFinite</code> distribution.</p>
</li>
<li>
<p dir="auto">Implementations of the <code>pdf</code>, <code>logpdf</code> and <code>mode</code> methods of
Distributions.jl, with efficient broadcasting over the new array
type.</p>
</li>
<li>
<p dir="auto">Implementation of <code>Distributions.fit</code> from Distributions.jl for
<code>UnivariateFinite</code> distributions.</p>
</li>
<li>
<p dir="auto">A single constructor for constructing <code>UnivariateFinite</code>
distributions and arrays thereof, from arrays of probabilities.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">The initial release of this package is based almost entirely on code
originally residing in
<a href="https://github.com/JuliaAI/MLJBase.jl">MLJBase.jl</a> with contributions
from Anthony Blaom, Thibaut Lienart, Samuel Okon, and Chad
Scherrer. These contributions are not reflected in the current
repository's commit history.</p>
</article></div>