<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nanstatistics" class="anchor" aria-hidden="true" href="#nanstatistics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NaNStatistics</h1>
<p><em>Because</em> <code>NaN</code> <em>is just</em> <code>missing</code> <em>with hardware support!</em></p>
<p><a href="https://brenhinkeller.github.io/NaNStatistics.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/brenhinkeller/NaNStatistics.jl/actions?query=workflow%3ACI"><img src="https://github.com/brenhinkeller/NaNStatistics.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/brenhinkeller/NaNStatistics.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/81d4866baa8fb5586ebc12842d630e2ef95bbdab8ee3b284aadb0ec08cc7c99e/687474703a2f2f636f6465636f762e696f2f6769746875622f6272656e68696e6b656c6c65722f4e614e537461746973746963732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov.io" data-canonical-src="http://codecov.io/github/brenhinkeller/NaNStatistics.jl/coverage.svg?branch=main" style="max-width:100%;"></a></p>
<p>Fast (often <a href="https://github.com/JuliaSIMD/LoopVectorization.jl">LoopVectorization</a>-based) summary statistics, histograms, and binning — all ignoring <code>NaN</code>s, as if <code>NaN</code> represented missing data.</p>
<h3><a id="user-content-summary-statistics" class="anchor" aria-hidden="true" href="#summary-statistics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary statistics</h3>
<p>Summary statistics exported by NaNStatistics are generally named the same as their normal counterparts, but with "nan" in front of the name, similar to the Matlab and NumPy conventions. Options include:</p>
<ul>
<li><code>nansum</code></li>
<li><code>nanmean</code></li>
<li><code>nanmedian</code></li>
<li><code>nanpctile</code></li>
<li><code>nanstd</code> (standard deviation)</li>
<li><code>nanmad</code> (median absolute deviation from the median)</li>
<li><code>nanaad</code> (mean (average) absolute deviation from the mean)</li>
<li><code>nanminimum</code></li>
<li><code>nanmaximum</code></li>
<li><code>nanextrema</code></li>
<li><code>nanrange</code> (range between nanmaximum and nanminimum)</li>
</ul>
<p>These functions will generally support the same <code>dims</code> keyword as their normal Julia counterparts (though are most efficient when operating on an entire collection).</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = rand(100000);

julia&gt; @btime minimum($a)
  51.950 μs (0 allocations: 0 bytes)
7.630517166790085e-6

julia&gt; using NaNStatistics

julia&gt; @btime nanminimum($a)
  19.690 μs (0 allocations: 0 bytes)
7.630517166790085e-6

julia&gt; a[rand(1:100000, 10000)] .= NaN;

julia&gt; @btime nanminimum($a)
  19.663 μs (0 allocations: 0 bytes)
7.630517166790085e-6
"><pre><code>julia&gt; a = rand(100000);

julia&gt; @btime minimum($a)
  51.950 μs (0 allocations: 0 bytes)
7.630517166790085e-6

julia&gt; using NaNStatistics

julia&gt; @btime nanminimum($a)
  19.690 μs (0 allocations: 0 bytes)
7.630517166790085e-6

julia&gt; a[rand(1:100000, 10000)] .= NaN;

julia&gt; @btime nanminimum($a)
  19.663 μs (0 allocations: 0 bytes)
7.630517166790085e-6
</code></pre></div>
<h3><a id="user-content-histograms" class="anchor" aria-hidden="true" href="#histograms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Histograms</h3>
<p>The main histogram function is <code>histcounts</code> (with an in-place variant <code>histcounts!</code>), and will, as you might expect for this package, ignore NaNs. However, it might be worth using for speed even if your data don't contain any NaNs:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; b = 10 * rand(100000);

julia&gt; using StatsBase

julia&gt; @btime fit(Histogram, $b, 0:1:10, closed=:right)
  2.633 ms (2 allocations: 224 bytes)
Histogram{Int64, 1, Tuple{StepRange{Int64, Int64}}}
edges:
  0:1:10
weights: [10128, 10130, 10084, 9860, 9973, 10062, 10003, 10045, 9893, 9822]
closed: right
isdensity: false

julia&gt; using NaNStatistics

julia&gt; @btime histcounts($b, 0:1:10)
  1.037 ms (1 allocation: 160 bytes)
10-element Vector{Int64}:
 10128
 10130
 10084
  9860
  9973
 10062
 10003
 10045
  9893
  9822
"><pre><code>julia&gt; b = 10 * rand(100000);

julia&gt; using StatsBase

julia&gt; @btime fit(Histogram, $b, 0:1:10, closed=:right)
  2.633 ms (2 allocations: 224 bytes)
Histogram{Int64, 1, Tuple{StepRange{Int64, Int64}}}
edges:
  0:1:10
weights: [10128, 10130, 10084, 9860, 9973, 10062, 10003, 10045, 9893, 9822]
closed: right
isdensity: false

julia&gt; using NaNStatistics

julia&gt; @btime histcounts($b, 0:1:10)
  1.037 ms (1 allocation: 160 bytes)
10-element Vector{Int64}:
 10128
 10130
 10084
  9860
  9973
 10062
 10003
 10045
  9893
  9822
</code></pre></div>
<h3><a id="user-content-binning" class="anchor" aria-hidden="true" href="#binning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Binning</h3>
<p>NaNStatistics also provides functions that will efficiently calculate the summary statistics of a given dependent variable <code>y</code> binned by an independent variable <code>x</code>. These currently include:</p>
<ul>
<li><code>nanbinmean</code> / <code>nanbinmean!</code></li>
<li><code>nanbinmedian</code> / <code>nanbinmedian!</code></li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; x = 10 * rand(100000);

julia&gt; y = x.^2 .+ randn.();

julia&gt; xmin, xmax, nbins = 0, 10, 10;

julia&gt; @btime nanbinmean($x,$y,xmin,xmax,nbins)
  364.082 μs (2 allocations: 320 bytes)
10-element Vector{Float64}:
  0.3421697507351903
  2.3065542448799015
  6.322448227456871
 12.340306767007629
 20.353233411797074
 30.347815506059405
 42.31866909140384
 56.32256214256441
 72.35387230251672
 90.35682945641588
"><pre><code>julia&gt; x = 10 * rand(100000);

julia&gt; y = x.^2 .+ randn.();

julia&gt; xmin, xmax, nbins = 0, 10, 10;

julia&gt; @btime nanbinmean($x,$y,xmin,xmax,nbins)
  364.082 μs (2 allocations: 320 bytes)
10-element Vector{Float64}:
  0.3421697507351903
  2.3065542448799015
  6.322448227456871
 12.340306767007629
 20.353233411797074
 30.347815506059405
 42.31866909140384
 56.32256214256441
 72.35387230251672
 90.35682945641588
</code></pre></div>
<h3><a id="user-content-other-functions" class="anchor" aria-hidden="true" href="#other-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other functions</h3>
<ul>
<li><code>movmean</code>
There is also a simple moving average function, <code>movmean</code>, which can operate in 1D or 2D.</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; A = rand(1:10, 4,4)
4×4 Matrix{Int64}:
 3  5  10  3
 4  2   5  8
 5  6   8  8
 2  6  10  6

julia&gt; movmean(A, 3)
4×4 Matrix{Float64}:
 3.5      4.83333  5.5      6.5
 4.16667  5.33333  6.11111  7.0
 4.16667  5.33333  6.55556  7.5
 4.75     6.16667  7.33333  8.0
"><pre><code>julia&gt; A = rand(1:10, 4,4)
4×4 Matrix{Int64}:
 3  5  10  3
 4  2   5  8
 5  6   8  8
 2  6  10  6

julia&gt; movmean(A, 3)
4×4 Matrix{Float64}:
 3.5      4.83333  5.5      6.5
 4.16667  5.33333  6.11111  7.0
 4.16667  5.33333  6.55556  7.5
 4.75     6.16667  7.33333  8.0
</code></pre></div>
<h3><a id="user-content-room-for-future-improvement-prs-welcome" class="anchor" aria-hidden="true" href="#room-for-future-improvement-prs-welcome"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Room for future improvement (PRs welcome!):</h3>
<ul>
<li>Currently, <code>nanmedian</code>, <code>nanbinmedian</code>, etc. simply filter for <code>NaN</code>s and then fall back to <code>Statistics.median</code>. Similarly, <code>nanpctile</code> falls back to <code>StatsBase.percentile</code>. Adding fast pure-julia SIMD median and percentile implementations would allow for significant performance improvement.</li>
<li>Sufficiently high-dimensional or multidiminsional summary statistics (e.g. <code>nanmean(ones(10,10,10,10), dims=(2,4))</code>) could probably be made faster, and are not currently supported for <code>nanmedian</code> or <code>nanpctile</code></li>
</ul>
</article></div>