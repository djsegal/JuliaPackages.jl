<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mldatautils" class="anchor" aria-hidden="true" href="#mldatautils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MLDataUtils</h1>
<p><em>Utility package for generating, loading, partitioning, and
processing Machine Learning datasets. This package serves as a
end-user friendly front end to the data related JuliaML
packages.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Package Status</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/c9414bd5708e8b65ba4384fe4d1f6779a11df3fcec79d3a818cff8a99478f7cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a> <a href="https://mldatautilsjl.readthedocs.io/en/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/74470ac8796bb7bd7587878d5718e133dcaef33dc18f7aa33b1d2acb3a34d545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e7376673f7374796c653d666c6174" alt="Documentation Status" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/1d4c49b44a94bce48d99c90d5a3fc591ca30bc13462ed584cb6209cfa95f178b/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4d2f4d4c446174615574696c732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/M/MLDataUtils.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaML/MLDataUtils.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaML/MLDataUtils.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaML/MLDataUtils.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b3481ed602acb59a54f444816b8b7ce43544c4e0bd7bd21ca41e2a93d9d4e1e6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614d4c2f4d4c446174615574696c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaML/MLDataUtils.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This package is designed to be the end-user facing frond-end to
all the data related functionalty that is spread out accross the
<a href="https://github.com/JuliaML">JuliaML</a> ecosystem. Most of the
following sub-categories are covered by a single back-end package
that is specialized on that specific problem. Consequently, if
one of the following topics is of special interest to you, make
sure to check out the corresponding documentation of that
package.</p>
<ul>
<li>
<p><strong>Label Encodings</strong> provided by
<a href="https://github.com/JuliaML/MLLabelUtils.jl">MLLabelUtils.jl</a></p>
<p><a href="http://mllabelutilsjl.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/74470ac8796bb7bd7587878d5718e133dcaef33dc18f7aa33b1d2acb3a34d545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e7376673f7374796c653d666c6174" alt="Documentation Status" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat" style="max-width:100%;"></a></p>
<p>Various tools needed to deal with classification targets of
arbitrary format. This includes asserting if the targets are
of a desired encoding, inferring the concrete encoding the
targets are in and how many classes they represent, and
converting from their native encoding to the desired one.</p>
<ul>
<li>
<p>[<a href="http://mllabelutilsjl.readthedocs.io/en/latest/api/interface.html#infer" rel="nofollow">docs</a>] Infer which encoding some classification targets use.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; enc = labelenc([-1,1,1,-1,1])
# MLLabelUtils.LabelEnc.MarginBased{Int64}()
"><pre>julia<span class="pl-k">&gt;</span> enc <span class="pl-k">=</span> <span class="pl-c1">labelenc</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>])
<span class="pl-c"><span class="pl-c">#</span> MLLabelUtils.LabelEnc.MarginBased{Int64}()</span></pre></div>
</li>
<li>
<p>[<a href="http://mllabelutilsjl.readthedocs.io/en/latest/api/interface.html#assert" rel="nofollow">docs</a>] Assert if some classification targets are of the encoding I need them in.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; islabelenc([0,1,1,0,1], LabelEnc.MarginBased)
# false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">islabelenc</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>], LabelEnc<span class="pl-k">.</span>MarginBased)
<span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
</li>
<li>
<p>[<a href="http://mllabelutilsjl.readthedocs.io/en/latest/api/interface.html#convert" rel="nofollow">docs</a>] Convert targets into a specific encoding that my model requires.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; convertlabel(LabelEnc.OneOfK{Float32}, [-1,1,-1,1,1,-1])
# 2×6 Array{Float32,2}:
#  0.0  1.0  0.0  1.0  1.0  0.0
#  1.0  0.0  1.0  0.0  0.0  1.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>OneOfK{Float32}, [<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-c"><span class="pl-c">#</span> 2×6 Array{Float32,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0  1.0  0.0  1.0  1.0  0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  1.0  0.0  1.0  0.0  0.0  1.0</span></pre></div>
</li>
<li>
<p>[<a href="http://mllabelutilsjl.readthedocs.io/en/latest/api/interface.html#obsdim" rel="nofollow">docs</a>] Work with matrices in which the user can choose of the rows or the columns denote the observations.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; convertlabel(LabelEnc.OneOfK{Float32}, Int8[-1,1,-1,1,1,-1], obsdim = 1)
# 6×2 Array{Float32,2}:
#  0.0  1.0
#  1.0  0.0
#  0.0  1.0
#  1.0  0.0
#  1.0  0.0
#  0.0  1.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>OneOfK{Float32}, Int8[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>], obsdim <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> 6×2 Array{Float32,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0  1.0</span>
<span class="pl-c"><span class="pl-c">#</span>  1.0  0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0  1.0</span>
<span class="pl-c"><span class="pl-c">#</span>  1.0  0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  1.0  0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0  1.0</span></pre></div>
</li>
<li>
<p>[<a href="http://mllabelutilsjl.readthedocs.io/en/latest/api/targets.html#group" rel="nofollow">docs</a>] Group observations according to their class-label.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; labelmap([0, 1, 1, 0, 0])
# Dict{Int64,Array{Int64,1}} with 2 entries:
#   0 =&gt; [1,4,5]
#   1 =&gt; [2,3]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">labelmap</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>])
<span class="pl-c"><span class="pl-c">#</span> Dict{Int64,Array{Int64,1}} with 2 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>   0 =&gt; [1,4,5]</span>
<span class="pl-c"><span class="pl-c">#</span>   1 =&gt; [2,3]</span></pre></div>
</li>
<li>
<p>[<a href="http://mllabelutilsjl.readthedocs.io/en/latest/api/interface.html#classify" rel="nofollow">docs</a>] Classify model predictions into class labels appropriate for the encoding of the targets.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; classify(-0.3, LabelEnc.MarginBased())
# -1.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-k">-</span><span class="pl-c1">0.3</span>, LabelEnc<span class="pl-k">.</span><span class="pl-c1">MarginBased</span>())
<span class="pl-c"><span class="pl-c">#</span> -1.0</span></pre></div>
</li>
</ul>
</li>
<li>
<p><strong>Data Access Pattern</strong> provided by
<a href="https://github.com/JuliaML/MLDataPattern.jl">MLDataPattern.jl</a></p>
<p><a href="http://mldatapatternjl.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/74470ac8796bb7bd7587878d5718e133dcaef33dc18f7aa33b1d2acb3a34d545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e7376673f7374796c653d666c6174" alt="Documentation Status" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat" style="max-width:100%;"></a></p>
<p>Native and generic Julia implementation for commonly used
data access pattern in Machine Learning. Most notably we
provide a number of pattern for shuffling, partitioning, and
resampling data sets of various types and origin. At its
core, the package was designed around the key requirement of
allowing any user-defined type to serve as a custom data
source and/or access pattern in a first class manner. That
said, there was also a lot of attention focused on first
class support for those types that are most commonly employed
to represent the data of interest, such as <code>DataFrame</code> and
<code>Array</code>.</p>
<ul>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/datasubset.html" rel="nofollow">docs</a>] Create a lazy data subset of some data.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; X = rand(2, 6)
# 2×6 Array{Float64,2}:
#  0.226582  0.933372  0.505208   0.0443222  0.812814  0.11202
#  0.504629  0.522172  0.0997825  0.722906   0.245457  0.000341996

julia&gt; datasubset(X, 2:3)
# 2×2 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,UnitRange{Int64}},true}:
#  0.933372  0.505208
#  0.522172  0.0997825
"><pre>julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">6</span>)
<span class="pl-c"><span class="pl-c">#</span> 2×6 Array{Float64,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.226582  0.933372  0.505208   0.0443222  0.812814  0.11202</span>
<span class="pl-c"><span class="pl-c">#</span>  0.504629  0.522172  0.0997825  0.722906   0.245457  0.000341996</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">datasubset</span>(X, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> 2×2 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,UnitRange{Int64}},true}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.933372  0.505208</span>
<span class="pl-c"><span class="pl-c">#</span>  0.522172  0.0997825</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/datasubset.html#shuffle" rel="nofollow">docs</a>] Shuffle the observations of a data container.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; shuffleobs(X)
# 2×6 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,Array{Int64,1}},false}:
#  0.505208   0.812814  0.11202      0.0443222  0.933372  0.226582
#  0.0997825  0.245457  0.000341996  0.722906   0.522172  0.504629
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">shuffleobs</span>(X)
<span class="pl-c"><span class="pl-c">#</span> 2×6 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,Array{Int64,1}},false}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.505208   0.812814  0.11202      0.0443222  0.933372  0.226582</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0997825  0.245457  0.000341996  0.722906   0.522172  0.504629</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/datasubset.html#split" rel="nofollow">docs</a>] Split data into train/test subsets.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; train, test = splitobs(X, at = 0.7);

julia&gt; train
# 2×4 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,UnitRange{Int64}},true}:
#  0.226582  0.933372  0.505208   0.0443222
#  0.504629  0.522172  0.0997825  0.722906

julia&gt; test
# 2×2 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,UnitRange{Int64}},true}:
#  0.812814  0.11202
#  0.245457  0.000341996
"><pre>julia<span class="pl-k">&gt;</span> train, test <span class="pl-k">=</span> <span class="pl-c1">splitobs</span>(X, at <span class="pl-k">=</span> <span class="pl-c1">0.7</span>);

julia<span class="pl-k">&gt;</span> train
<span class="pl-c"><span class="pl-c">#</span> 2×4 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,UnitRange{Int64}},true}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.226582  0.933372  0.505208   0.0443222</span>
<span class="pl-c"><span class="pl-c">#</span>  0.504629  0.522172  0.0997825  0.722906</span>

julia<span class="pl-k">&gt;</span> test
<span class="pl-c"><span class="pl-c">#</span> 2×2 SubArray{Float64,2,Array{Float64,2},Tuple{Colon,UnitRange{Int64}},true}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.812814  0.11202</span>
<span class="pl-c"><span class="pl-c">#</span>  0.245457  0.000341996</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/targets.html#stratified" rel="nofollow">docs</a>] Partition data into train/test subsets using stratified sampling.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; train, test = stratifiedobs([:a,:a,:b,:b,:b,:b], p = 0.5)
# (Symbol[:b,:b,:a],Symbol[:b,:b,:a])

julia&gt; train
# 3-element SubArray{Symbol,1,Array{Symbol,1},Tuple{Array{Int64,1}},false}:
# :b
# :b
# :a

julia&gt; test
# 3-element SubArray{Symbol,1,Array{Symbol,1},Tuple{Array{Int64,1}},false}:
# :b
# :b
# :a
"><pre>julia<span class="pl-k">&gt;</span> train, test <span class="pl-k">=</span> <span class="pl-c1">stratifiedobs</span>([<span class="pl-c1">:a</span>,<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:b</span>], p <span class="pl-k">=</span> <span class="pl-c1">0.5</span>)
<span class="pl-c"><span class="pl-c">#</span> (Symbol[:b,:b,:a],Symbol[:b,:b,:a])</span>

julia<span class="pl-k">&gt;</span> train
<span class="pl-c"><span class="pl-c">#</span> 3-element SubArray{Symbol,1,Array{Symbol,1},Tuple{Array{Int64,1}},false}:</span>
<span class="pl-c"><span class="pl-c">#</span> :b</span>
<span class="pl-c"><span class="pl-c">#</span> :b</span>
<span class="pl-c"><span class="pl-c">#</span> :a</span>

julia<span class="pl-k">&gt;</span> test
<span class="pl-c"><span class="pl-c">#</span> 3-element SubArray{Symbol,1,Array{Symbol,1},Tuple{Array{Int64,1}},false}:</span>
<span class="pl-c"><span class="pl-c">#</span> :b</span>
<span class="pl-c"><span class="pl-c">#</span> :b</span>
<span class="pl-c"><span class="pl-c">#</span> :a</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/introduction/design.html#tuples" rel="nofollow">docs</a>] Group multiple variables together and treat them as a single data set.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; shuffleobs(([1,2,3], [:a,:b,:c]))
([3,1,2],Symbol[:c,:a,:b])
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">shuffleobs</span>(([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], [<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>]))
([<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>],Symbol[<span class="pl-c1">:c</span>,<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>])</pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/datasubset.html#customsubset" rel="nofollow">docs</a>] Support my own custom user-defined data container type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DataTables, LearnBase

julia&gt; LearnBase.nobs(dt::AbstractDataTable) = nrow(dt)

julia&gt; LearnBase.getobs(dt::AbstractDataTable, idx) = dt[idx,:]

julia&gt; LearnBase.datasubset(dt::AbstractDataTable, idx, ::ObsDim.Undefined) = view(dt, idx)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataTables, LearnBase

julia<span class="pl-k">&gt;</span> LearnBase<span class="pl-k">.</span><span class="pl-en">nobs</span>(dt<span class="pl-k">::</span><span class="pl-c1">AbstractDataTable</span>) <span class="pl-k">=</span> <span class="pl-c1">nrow</span>(dt)

julia<span class="pl-k">&gt;</span> LearnBase<span class="pl-k">.</span><span class="pl-en">getobs</span>(dt<span class="pl-k">::</span><span class="pl-c1">AbstractDataTable</span>, idx) <span class="pl-k">=</span> dt[idx,:]

julia<span class="pl-k">&gt;</span> LearnBase<span class="pl-k">.</span><span class="pl-en">datasubset</span>(dt<span class="pl-k">::</span><span class="pl-c1">AbstractDataTable</span>, idx, <span class="pl-k">::</span><span class="pl-c1">ObsDim.Undefined</span>) <span class="pl-k">=</span> <span class="pl-c1">view</span>(dt, idx)</pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/targets.html#resampling" rel="nofollow">docs</a>] Over- or undersample an imbalanced labeled data set.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; undersample([:a,:b,:b,:a,:b,:b])
# 4-element SubArray{Symbol,1,Array{Symbol,1},Tuple{Array{Int64,1}},false}:
#  :a
#  :b
#  :b
#  :a
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">undersample</span>([<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:b</span>])
<span class="pl-c"><span class="pl-c">#</span> 4-element SubArray{Symbol,1,Array{Symbol,1},Tuple{Array{Int64,1}},false}:</span>
<span class="pl-c"><span class="pl-c">#</span>  :a</span>
<span class="pl-c"><span class="pl-c">#</span>  :b</span>
<span class="pl-c"><span class="pl-c">#</span>  :b</span>
<span class="pl-c"><span class="pl-c">#</span>  :a</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/folds.html#k-folds" rel="nofollow">docs</a>] Repartition a data container using a k-folds scheme.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; folds = kfolds([1,2,3,4,5,6,7,8,9,10], k = 5)
# 5-fold MLDataPattern.FoldsView of 10 observations:
#   data: 10-element Array{Int64,1}
#   training: 8 observations/fold
#   validation: 2 observations/fold
#   obsdim: :last

julia&gt; folds[1]
# ([3, 4, 5, 6, 7, 8, 9, 10], [1, 2])
"><pre>julia<span class="pl-k">&gt;</span> folds <span class="pl-k">=</span> <span class="pl-c1">kfolds</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>], k <span class="pl-k">=</span> <span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> 5-fold MLDataPattern.FoldsView of 10 observations:</span>
<span class="pl-c"><span class="pl-c">#</span>   data: 10-element Array{Int64,1}</span>
<span class="pl-c"><span class="pl-c">#</span>   training: 8 observations/fold</span>
<span class="pl-c"><span class="pl-c">#</span>   validation: 2 observations/fold</span>
<span class="pl-c"><span class="pl-c">#</span>   obsdim: :last</span>

julia<span class="pl-k">&gt;</span> folds[<span class="pl-c1">1</span>]
<span class="pl-c"><span class="pl-c">#</span> ([3, 4, 5, 6, 7, 8, 9, 10], [1, 2])</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/dataview.html" rel="nofollow">docs</a>] Iterate over my data one observation or batch at a time.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; obsview(([1 2 3; 4 5 6], [:a, :b, :c]))
# 3-element MLDataPattern.ObsView{Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Colon,Int64},true},SubArray{Symbol,0,Array{Symbol,1},Tuple{Int64},false}},Tuple{Array{Int64,2},Array{Symbol,1}},Tuple{LearnBase.ObsDim.Last,LearnBase.ObsDim.Last}}:
#  ([1,4],:a)
#  ([2,5],:b)
#  ([3,6],:c)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">obsview</span>(([<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>], [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>]))
<span class="pl-c"><span class="pl-c">#</span> 3-element MLDataPattern.ObsView{Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Colon,Int64},true},SubArray{Symbol,0,Array{Symbol,1},Tuple{Int64},false}},Tuple{Array{Int64,2},Array{Symbol,1}},Tuple{LearnBase.ObsDim.Last,LearnBase.ObsDim.Last}}:</span>
<span class="pl-c"><span class="pl-c">#</span>  ([1,4],:a)</span>
<span class="pl-c"><span class="pl-c">#</span>  ([2,5],:b)</span>
<span class="pl-c"><span class="pl-c">#</span>  ([3,6],:c)</span></pre></div>
</li>
<li>
<p>[<a href="http://mldatapatternjl.readthedocs.io/en/latest/documentation/dataview.html" rel="nofollow">docs</a>] Prepare sequence data such as text for supervised learning.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; txt = split(&quot;The quick brown fox jumps over the lazy dog&quot;)
# 9-element Array{SubString{String},1}:
# &quot;The&quot;
# &quot;quick&quot;
# &quot;brown&quot;
# ⋮
# &quot;the&quot;
# &quot;lazy&quot;
# &quot;dog&quot;

julia&gt; seq = slidingwindow(i-&gt;i+2, txt, 2, stride=1)
# 7-element slidingwindow(::##9#10, ::Array{SubString{String},1}, 2, stride = 1) with element type Tuple{...}:
# ([&quot;The&quot;, &quot;quick&quot;], &quot;brown&quot;)
# ([&quot;quick&quot;, &quot;brown&quot;], &quot;fox&quot;)
# ([&quot;brown&quot;, &quot;fox&quot;], &quot;jumps&quot;)
# ([&quot;fox&quot;, &quot;jumps&quot;], &quot;over&quot;)
# ([&quot;jumps&quot;, &quot;over&quot;], &quot;the&quot;)
# ([&quot;over&quot;, &quot;the&quot;], &quot;lazy&quot;)
# ([&quot;the&quot;, &quot;lazy&quot;], &quot;dog&quot;)

julia&gt; seq = slidingwindow(i-&gt;[i-2:i-1; i+1:i+2], txt, 1)
# 5-element slidingwindow(::##11#12, ::Array{SubString{String},1}, 1) with element type Tuple{...}:
# ([&quot;brown&quot;], [&quot;The&quot;, &quot;quick&quot;, &quot;fox&quot;, &quot;jumps&quot;])
# ([&quot;fox&quot;], [&quot;quick&quot;, &quot;brown&quot;, &quot;jumps&quot;, &quot;over&quot;])
# ([&quot;jumps&quot;], [&quot;brown&quot;, &quot;fox&quot;, &quot;over&quot;, &quot;the&quot;])
# ([&quot;over&quot;], [&quot;fox&quot;, &quot;jumps&quot;, &quot;the&quot;, &quot;lazy&quot;])
# ([&quot;the&quot;], [&quot;jumps&quot;, &quot;over&quot;, &quot;lazy&quot;, &quot;dog&quot;])
"><pre>julia<span class="pl-k">&gt;</span> txt <span class="pl-k">=</span> <span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">"</span>The quick brown fox jumps over the lazy dog<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> 9-element Array{SubString{String},1}:</span>
<span class="pl-c"><span class="pl-c">#</span> "The"</span>
<span class="pl-c"><span class="pl-c">#</span> "quick"</span>
<span class="pl-c"><span class="pl-c">#</span> "brown"</span>
<span class="pl-c"><span class="pl-c">#</span> ⋮</span>
<span class="pl-c"><span class="pl-c">#</span> "the"</span>
<span class="pl-c"><span class="pl-c">#</span> "lazy"</span>
<span class="pl-c"><span class="pl-c">#</span> "dog"</span>

julia<span class="pl-k">&gt;</span> seq <span class="pl-k">=</span> <span class="pl-c1">slidingwindow</span>(i<span class="pl-k">-&gt;</span>i<span class="pl-k">+</span><span class="pl-c1">2</span>, txt, <span class="pl-c1">2</span>, stride<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> 7-element slidingwindow(::##9#10, ::Array{SubString{String},1}, 2, stride = 1) with element type Tuple{...}:</span>
<span class="pl-c"><span class="pl-c">#</span> (["The", "quick"], "brown")</span>
<span class="pl-c"><span class="pl-c">#</span> (["quick", "brown"], "fox")</span>
<span class="pl-c"><span class="pl-c">#</span> (["brown", "fox"], "jumps")</span>
<span class="pl-c"><span class="pl-c">#</span> (["fox", "jumps"], "over")</span>
<span class="pl-c"><span class="pl-c">#</span> (["jumps", "over"], "the")</span>
<span class="pl-c"><span class="pl-c">#</span> (["over", "the"], "lazy")</span>
<span class="pl-c"><span class="pl-c">#</span> (["the", "lazy"], "dog")</span>

julia<span class="pl-k">&gt;</span> seq <span class="pl-k">=</span> <span class="pl-c1">slidingwindow</span>(i<span class="pl-k">-&gt;</span>[i<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span>i<span class="pl-k">-</span><span class="pl-c1">1</span>; i<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">2</span>], txt, <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> 5-element slidingwindow(::##11#12, ::Array{SubString{String},1}, 1) with element type Tuple{...}:</span>
<span class="pl-c"><span class="pl-c">#</span> (["brown"], ["The", "quick", "fox", "jumps"])</span>
<span class="pl-c"><span class="pl-c">#</span> (["fox"], ["quick", "brown", "jumps", "over"])</span>
<span class="pl-c"><span class="pl-c">#</span> (["jumps"], ["brown", "fox", "over", "the"])</span>
<span class="pl-c"><span class="pl-c">#</span> (["over"], ["fox", "jumps", "the", "lazy"])</span>
<span class="pl-c"><span class="pl-c">#</span> (["the"], ["jumps", "over", "lazy", "dog"])</span></pre></div>
</li>
</ul>
</li>
<li>
<p><strong>Data Processing:</strong>
This package contains a number of simple pre-processing
strategies that are often applied for ML purposes, such as
feature centering and rescaling.</p>
</li>
<li>
<p><strong>Data Generators:</strong>
When studying learning algorithm or other ML related
functionality, it is usually of high interest to empirically
test the behaviour of the system under specific conditions.
Generators can provide the means to fabricate artificial data
sets that observe certain attributes, which can help to
deepen the understanding of the system under investigation.</p>
</li>
<li>
<p><strong>Example Datasets:</strong>
We provide a small number of toy datasets. These are mainly
intended for didactic and testing purposes.</p>
</li>
</ul>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Check out the <a href="http://mldatautilsjl.readthedocs.io/en/latest/" rel="nofollow">latest documentation</a></p>
<p>Additionally, you can make use of Julia's native docsystem. The
following example shows how to get additional information on
<code>kfolds</code> within Julia's REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="?kfolds
"><pre><code>?kfolds
</code></pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is registered in <code>METADATA.jl</code> and can be installed
as usual. Just start up Julia and type the following code-snipped
into the REPL. It makes use of the native Julia package manger.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;MLDataUtils&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MLDataUtils<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This code is free to use under the terms of the MIT license</p>
</article></div>