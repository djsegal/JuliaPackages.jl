<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tariteratorsjl" class="anchor" aria-hidden="true" href="#tariteratorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TarIterators.jl</h1>
<p dir="auto"><a href="https://github.com/KlausC/TarIterators.jl/actions?query=workflow%3ACI"><img src="https://github.com/KlausC/TarIterators.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>     <a href="https://codecov.io/gh/KlausC/TarIterators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62e9d6a2ebc51d6c79247666e2b178bcdbd9088cbfff2cac2dea7eff72522a43/68747470733a2f2f636f6465636f762e696f2f67682f4b6c617573432f5461724974657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/KlausC/TarIterators.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>TarIterators</code> package can read from individual elements of POSIX TAR archives ("tarballs") as specified in <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html" rel="nofollow">POSIX 1003.1-2001</a>.</p>
<h2 dir="auto"><a id="user-content-api--usage" class="anchor" aria-hidden="true" href="#api--usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API &amp; Usage</h2>
<p dir="auto">The public API of <code>TarIterators</code> includes only standard functions and one type:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>TarIterator</code> — struct representing a file stream opened for reading a TAR file, may be restricted by predicates</p>
</li>
<li>
<p dir="auto"><code>iterate</code> — deliver pairs of <code>Tar.header</code> and <code>BoundedInputStream</code> for each element</p>
</li>
<li>
<p dir="auto"><code>close</code> - close wrapped stream</p>
</li>
<li>
<p dir="auto"><code>open</code>  - deliver <code>BoundedInputStream</code> for the next element of tar file or process all elements in a loop</p>
</li>
<li>
<p dir="auto"><code>seekstart</code> - reset input to start</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
    using TarIterators

    ti = TarIterator(&quot;/tmp/AB.tar&quot;, :file)
    for (h, io) in ti
        x = read(io, String)
        println(x)
    end

    # reset to start
    seekstart(ti)

    # or equivalently
    open(ti) do h, io
        x = read(io, String)
        println(x)
    end

    using CodecZlib
    cio = GzipDecompressorStream(open(&quot;/tmp/AB.tar.gz&quot;))

    # process first file named &quot;B&quot;
    io = open(TarIterator(cio, &quot;B&quot;, close_stream=true))
    x = read(io, 10)
    close(io) # cio is closed implicitly"><pre>    <span class="pl-k">using</span> TarIterators

    ti <span class="pl-k">=</span> <span class="pl-c1">TarIterator</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/AB.tar<span class="pl-pds">"</span></span>, <span class="pl-c1">:file</span>)
    <span class="pl-k">for</span> (h, io) <span class="pl-k">in</span> ti
        x <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, String)
        <span class="pl-c1">println</span>(x)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> reset to start</span>
    <span class="pl-c1">seekstart</span>(ti)

    <span class="pl-c"><span class="pl-c">#</span> or equivalently</span>
    <span class="pl-c1">open</span>(ti) <span class="pl-k">do</span> h, io
        x <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, String)
        <span class="pl-c1">println</span>(x)
    <span class="pl-k">end</span>

    <span class="pl-k">using</span> CodecZlib
    cio <span class="pl-k">=</span> <span class="pl-c1">GzipDecompressorStream</span>(<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/AB.tar.gz<span class="pl-pds">"</span></span>))

    <span class="pl-c"><span class="pl-c">#</span> process first file named "B"</span>
    io <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-c1">TarIterator</span>(cio, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, close_stream<span class="pl-k">=</span><span class="pl-c1">true</span>))
    x <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, <span class="pl-c1">10</span>)
    <span class="pl-c1">close</span>(io) <span class="pl-c"><span class="pl-c">#</span> cio is closed implicitly</span></pre></div>
</article></div>