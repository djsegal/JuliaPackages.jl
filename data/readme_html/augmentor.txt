<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://evizero.github.io/Augmentor.jl/" rel="nofollow"><img src="https://raw.githubusercontent.com/JuliaML/FileStorage/master/Augmentor/readme/header.png" alt="Augmentor" style="max-width:100%;"></a></p>
<p>A <strong>fast</strong> Julia library for increasing the number of training
images by applying various transformations.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Package Status</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a> <a href="https://evizero.github.io/Augmentor.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/f2d8f24c508816bc9c3a19b46c13de78f56f0fdb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e7376673f7374796c653d666c6174" alt="Documentation Status" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=Augmentor" rel="nofollow"><img src="https://camo.githubusercontent.com/d842171d8a5db6bccffd87fb1d4303e02678943d/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175676d656e746f725f302e362e737667" alt="Julia Pkg 0.6" data-canonical-src="http://pkg.julialang.org/badges/Augmentor_0.6.svg" style="max-width:100%;"></a> <a href="http://pkg.julialang.org/?pkg=Augmentor" rel="nofollow"><img src="https://camo.githubusercontent.com/33ea9ea55549d20b2d94ea56d2b4c21fb92ee286/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175676d656e746f725f302e372e737667" alt="Julia Pkg 0.7" data-canonical-src="http://pkg.julialang.org/badges/Augmentor_0.7.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/Evizero/Augmentor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4c90c9227c0d76371f6478a9d0247692094d019/68747470733a2f2f7472617669732d63692e6f72672f4576697a65726f2f4175676d656e746f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Status" data-canonical-src="https://travis-ci.org/Evizero/Augmentor.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/Evizero/augmentor-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3f0bf7336ca15c3e05c63cdf1cb52f4192475368/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7374666778323835367238636b736b773f7376673d74727565" alt="AppVeyor status" data-canonical-src="https://ci.appveyor.com/api/projects/status/stfgx2856r8ckskw?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/github/Evizero/Augmentor.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/30ce0590bab9897dd7878d54076b750f26d830d7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4576697a65726f2f4175676d656e746f722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Evizero/Augmentor.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Augmentor is a real-time image augmentation library designed to
render the process of artificial dataset enlargement more
convenient, less error prone, and easier to reproduce. It offers
the user the ability to build a <em>stochastic image-processing
pipeline</em> -- which we will also refer to as <em>augmentation
pipeline</em> -- using image operations as building blocks. For our
purposes, an augmentation pipeline can be understood as a
sequence of operations for which the parameters can (but need
not) be random variables.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> pipeline <span class="pl-k">=</span> <span class="pl-c1">FlipX</span>(<span class="pl-c1">0.5</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Rotate</span>([<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-k">-</span><span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>]) <span class="pl-k">|&gt;</span> <span class="pl-c1">CropSize</span>(<span class="pl-c1">64</span>,<span class="pl-c1">64</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Zoom</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1.2</span>)
<span class="pl-c"><span class="pl-c">#</span> 4-step Augmentor.ImmutablePipeline:</span>
<span class="pl-c"><span class="pl-c">#</span>  1.) Either: (50%) Flip the X axis. (50%) No operation.</span>
<span class="pl-c"><span class="pl-c">#</span>  2.) Rotate by θ ∈ [-5, -3, 0, 3, 5] degree</span>
<span class="pl-c"><span class="pl-c">#</span>  3.) Crop a 64×64 window around the center</span>
<span class="pl-c"><span class="pl-c">#</span>  4.) Zoom by I ∈ {1.0×1.0, 1.1×1.1, 1.2×1.2}</span></pre></div>
<p>The Julia version of Augmentor is engineered specifically for
high performance applications. It makes use of multiple
heuristics to generate efficient tailor-made code for the
concrete user-specified augmentation pipeline. In particular
Augmentor tries to avoid the need for any intermediate images,
but instead aims to compute the output image directly from the
input in one single pass.</p>
<p><strong>Augmentor.jl</strong> is the <a href="http://julialang.org" rel="nofollow">Julia</a>
implementation for Augmentor. The Python version of the same name
is available <a href="https://github.com/mdbloice/Augmentor">here</a>.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>The following code snippet shows how an augmentation pipeline can
be specified using simple building blocks that we call
"operations". In order to give the example some meaning, we will
use a real medical image from the publicly available <a href="https://isic-archive.com/" rel="nofollow">ISIC
archive</a> as input. The concrete image
can be downloaded
<a href="https://isic-archive.com/api/v1/image/5592ac599fc3c13155a57a85/thumbnail" rel="nofollow">here</a>
using their <a href="https://isic-archive.com/api/v1" rel="nofollow">Web API</a>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Augmentor, ISICArchive

julia<span class="pl-k">&gt;</span> img <span class="pl-k">=</span> <span class="pl-c1">get</span>(<span class="pl-c1">ImageThumbnailRequest</span>(id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>5592ac599fc3c13155a57a85<span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> 169×256 Array{RGB{N0f8},2}:</span>
<span class="pl-c"><span class="pl-c">#</span> [...]</span>

julia<span class="pl-k">&gt;</span> pl <span class="pl-k">=</span> <span class="pl-c1">Either</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">FlipX</span>(), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">FlipY</span>(), <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">NoOp</span>()) <span class="pl-k">|&gt;</span>
            <span class="pl-c1">Rotate</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">360</span>) <span class="pl-k">|&gt;</span>
            <span class="pl-c1">ShearX</span>(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">*</span> <span class="pl-c1">ShearY</span>(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">|&gt;</span>
            <span class="pl-c1">CropSize</span>(<span class="pl-c1">165</span>, <span class="pl-c1">165</span>) <span class="pl-k">|&gt;</span>
            <span class="pl-c1">Zoom</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">1.2</span>) <span class="pl-k">|&gt;</span>
            <span class="pl-c1">Resize</span>(<span class="pl-c1">64</span>, <span class="pl-c1">64</span>)
<span class="pl-c"><span class="pl-c">#</span> 6-step Augmentor.ImmutablePipeline:</span>
<span class="pl-c"><span class="pl-c">#</span>  1.) Either: (25%) Flip the X axis. (25%) Flip the Y axis. (50%) No operation.</span>
<span class="pl-c"><span class="pl-c">#</span>  2.) Rotate by θ ∈ 0:360 degree</span>
<span class="pl-c"><span class="pl-c">#</span>  3.) Either: (50%) ShearX by ϕ ∈ -5:5 degree. (50%) ShearY by ψ ∈ -5:5 degree.</span>
<span class="pl-c"><span class="pl-c">#</span>  4.) Crop a 165×165 window around the center</span>
<span class="pl-c"><span class="pl-c">#</span>  5.) Zoom by I ∈ {1.0×1.0, 1.05×1.05, 1.1×1.1, 1.15×1.15, 1.2×1.2}</span>
<span class="pl-c"><span class="pl-c">#</span>  6.) Resize to 64×64</span>

julia<span class="pl-k">&gt;</span> img_new <span class="pl-k">=</span> <span class="pl-c1">augment</span>(img, pl)
<span class="pl-c"><span class="pl-c">#</span> 64×64 Array{RGB{N0f8},2}:</span>
<span class="pl-c"><span class="pl-c">#</span> [...]</span></pre></div>
<p>The function <code>augment</code> will generate a single augmented image
from the given input image and pipeline. To visualize the effect
we compiled a few resulting output images into a GIF using the
plotting library
<a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a> with the
<a href="https://github.com/JuliaPy/PyPlot.jl">PyPlot.jl</a> back-end. The
code that generated the two figures below can be found
<a href="https://github.com/JuliaML/FileStorage/blob/master/Augmentor/readme_isic.jl">here</a>.</p>
<table>
<thead>
<tr>
<th align="center">Input (<code>img</code>)</th>
<th align="center"></th>
<th align="center">Output (<code>img_new</code>)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaML/FileStorage/master/Augmentor/readme/isic_in.png"><img src="https://raw.githubusercontent.com/JuliaML/FileStorage/master/Augmentor/readme/isic_in.png" alt="input" style="max-width:100%;"></a></td>
<td align="center">→</td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaML/FileStorage/master/Augmentor/readme/isic_out.gif"><img src="https://raw.githubusercontent.com/JuliaML/FileStorage/master/Augmentor/readme/isic_out.gif" alt="output" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-performance-aspects" class="anchor" aria-hidden="true" href="#performance-aspects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance Aspects</h2>
<p>While we just used a small preview image in the above example
(note the term "thumbnail" in the code), it is already possible
to observe Augmentor's behaviour when comparing the memory
footprint of <code>augment</code> to a simple <code>copy</code> of the original.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">augment</span>(<span class="pl-k">$</span>img, <span class="pl-k">$</span>pl);
  <span class="pl-c1">312.121</span> μs (<span class="pl-c1">150</span> allocations<span class="pl-k">:</span> <span class="pl-c1">22.47</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">copy</span>(<span class="pl-k">$</span>img);
  <span class="pl-c1">5.866</span> μs (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">126.83</span> KiB)</pre></div>
<p>Note how the <em>whole</em> process for producing an augmented version
of <code>img</code> allocates less memory than a simple unaltered <code>copy</code> of
the original. The reason for this is that the output image
<code>img_new</code> is smaller than the input image <code>img</code>. Augmentor tries
to compose all operations of the pipeline into one single
function, which it then queries for each individual pixel in the
<em>output</em> image. In general this means that the memory footprint
and the runtime depends on the size of the output image.</p>
<p>To take the output-dependent behaviour to its extreme, consider
the full sized version of the above thumbnail, which is about 80
MiB in uncompressed size. We will modify our pipeline slightly and
insert a <code>Scale</code> operation as the <em>fourth</em> step. Doing this will
cause <code>augment</code> to produce a similar looking output as in our
original example.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> img_big <span class="pl-k">=</span> <span class="pl-c1">get</span>(<span class="pl-c1">ImageDownloadRequest</span>(id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>5592ac599fc3c13155a57a85<span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> 4399×6628 Array{RGB{N0f8},2}:</span>
<span class="pl-c"><span class="pl-c">#</span> [...]</span>

julia<span class="pl-k">&gt;</span> pl_big <span class="pl-k">=</span> <span class="pl-c1">Either</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">FlipX</span>(), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">FlipY</span>(), <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">NoOp</span>()) <span class="pl-k">|&gt;</span>
                <span class="pl-c1">Rotate</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">360</span>) <span class="pl-k">|&gt;</span>
                <span class="pl-c1">ShearX</span>(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">*</span> <span class="pl-c1">ShearY</span>(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">|&gt;</span>
                <span class="pl-c1">Scale</span>(<span class="pl-c1">0.05</span>) <span class="pl-k">|&gt;</span> <span class="pl-c"><span class="pl-c">#</span> NEW</span>
                <span class="pl-c1">CropSize</span>(<span class="pl-c1">165</span>, <span class="pl-c1">165</span>) <span class="pl-k">|&gt;</span>
                <span class="pl-c1">Zoom</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">1.2</span>) <span class="pl-k">|&gt;</span>
                <span class="pl-c1">Resize</span>(<span class="pl-c1">64</span>, <span class="pl-c1">64</span>);

julia<span class="pl-k">&gt;</span> img_new <span class="pl-k">=</span> <span class="pl-c1">augment</span>(img_big, pl_big)
<span class="pl-c"><span class="pl-c">#</span> 64×64 Array{RGB{N0f8},2}:</span>
<span class="pl-c"><span class="pl-c">#</span> [...]</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">augment</span>(<span class="pl-k">$</span>img_big, <span class="pl-k">$</span>pl_big);
  <span class="pl-c1">333.493</span> μs (<span class="pl-c1">152</span> allocations<span class="pl-k">:</span> <span class="pl-c1">22.64</span> KiB)</pre></div>
<p>As we can see the allocated memory did not change notably.
Furthermore, it is worth pointing out explicitly how we added the
<code>Scale</code> operation as the fourth step in the pipeline and not the
first. This highlights how the operations aren't just applied
naively one after the other, but instead combined intelligently
before ever computing a single pixel.</p>
<p>Aside from the memory requirement we can also measure how the
execution time remains approximately constant, even though the
image is significantly larger and we added an additional
operation to the pipeline.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">augment</span>(<span class="pl-k">$</span>img, <span class="pl-k">$</span>pl); <span class="pl-c"><span class="pl-c">#</span> small image</span>
  <span class="pl-c1">312.610</span> μs (<span class="pl-c1">150</span> allocations<span class="pl-k">:</span> <span class="pl-c1">22.47</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">augment</span>(<span class="pl-k">$</span>img_big, <span class="pl-k">$</span>pl_big); <span class="pl-c"><span class="pl-c">#</span> big image</span>
  <span class="pl-c1">335.518</span> μs (<span class="pl-c1">152</span> allocations<span class="pl-k">:</span> <span class="pl-c1">22.64</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">copy</span>(<span class="pl-k">$</span>img_big); <span class="pl-c"><span class="pl-c">#</span> simple memory copy</span>
  <span class="pl-c1">18.304</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">83.42</span> MiB)</pre></div>
<p>To be fair, the way we aggressively downscaled the large image in
this example was rather untypical, because doing it this way
would cause aliasing effects that may not be tolerable (although
for this particular image these weren't that bad). The point of
this example was to convey an intuition of how Augmentor works.</p>
<pre><code>shell&gt; date
Thu Jun 22 11:31:24 CEST 2017

shell&gt; git show --oneline -s
6086196 drop 0.5 support

julia&gt; versioninfo()
Julia Version 0.6.1-pre.0
Commit dcf39a1 (2017-06-19 13:06 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-1650 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Haswell)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
</code></pre>
<h2><a id="user-content-package-overview" class="anchor" aria-hidden="true" href="#package-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Package Overview</h2>
<p>Images are a special class of data that have some interesting
properties in respect to their structure. For example do the
dimensions of an image (i.e. the pixel) exhibit a spatial
relationship to each other. As such, a lot of commonly used
augmentation strategies for image data revolve around affine
transformations, such as translations or rotations.</p>
<p>Augmentor ships with a number of predefined operations that
should be sufficient to describe some of the most commonly used
augmentation strategies. Each operation is a represented as its
own unique type (see table below for a concise overview). For a
more detailed description of all the predefined operations take a
look at the corresponding section of the
<a href="https://evizero.github.io/Augmentor.jl/operations/" rel="nofollow">documentation</a>.</p>
<table>
<thead>
<tr>
<th align="right">Category</th>
<th align="left">Operation</th>
<th align="center">Preview</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><em>Mirroring:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/flipx" rel="nofollow"><code>FlipX</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/adee62e7647ae24fb5a84dbeb3fa0d8bc7b8a338/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f466c6970582e706e67"><img src="https://camo.githubusercontent.com/adee62e7647ae24fb5a84dbeb3fa0d8bc7b8a338/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f466c6970582e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_FlipX.png" style="max-width:100%;"></a></td>
<td align="left">Reverse the order of each pixel row.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/flipy" rel="nofollow"><code>FlipY</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a65d07ea438e03bff9acd2ee4dae55328c7d3fdf/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f466c6970592e706e67"><img src="https://camo.githubusercontent.com/a65d07ea438e03bff9acd2ee4dae55328c7d3fdf/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f466c6970592e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_FlipY.png" style="max-width:100%;"></a></td>
<td align="left">Reverse the order of each pixel column.</td>
</tr>
<tr>
<td align="right"><em>Rotating:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/rotate90" rel="nofollow"><code>Rotate90</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0097ea7a743c68c8dbc7fc9a0f609127fbc1f967/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f7461746539302e706e67"><img src="https://camo.githubusercontent.com/0097ea7a743c68c8dbc7fc9a0f609127fbc1f967/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f7461746539302e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Rotate90.png" style="max-width:100%;"></a></td>
<td align="left">Rotate upwards 90 degree.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/rotate270" rel="nofollow"><code>Rotate270</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e7c13219e703fd58b9bf97ab78d21ae60270c142/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f746174653237302e706e67"><img src="https://camo.githubusercontent.com/e7c13219e703fd58b9bf97ab78d21ae60270c142/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f746174653237302e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Rotate270.png" style="max-width:100%;"></a></td>
<td align="left">Rotate downwards 90 degree.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/rotate180" rel="nofollow"><code>Rotate180</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/60c773e39fbd42cf77e4493166dcc072477f7450/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f746174653138302e706e67"><img src="https://camo.githubusercontent.com/60c773e39fbd42cf77e4493166dcc072477f7450/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f746174653138302e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Rotate180.png" style="max-width:100%;"></a></td>
<td align="left">Rotate 180 degree.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/rotate" rel="nofollow"><code>Rotate</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1f80dca1eaee5c7fce79290fead68256959e21a2/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f746174652e706e67"><img src="https://camo.githubusercontent.com/1f80dca1eaee5c7fce79290fead68256959e21a2/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526f746174652e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Rotate.png" style="max-width:100%;"></a></td>
<td align="left">Rotate for any arbitrary angle(s).</td>
</tr>
<tr>
<td align="right"><em>Shearing:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/shearx" rel="nofollow"><code>ShearX</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1e4a65639113ad0af009c95090bf8029087d5068/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5368656172582e706e67"><img src="https://camo.githubusercontent.com/1e4a65639113ad0af009c95090bf8029087d5068/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5368656172582e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_ShearX.png" style="max-width:100%;"></a></td>
<td align="left">Shear horizontally for the given degree(s).</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/sheary" rel="nofollow"><code>ShearY</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e41e842bc158e366d40ffecd406ccead80014962/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5368656172592e706e67"><img src="https://camo.githubusercontent.com/e41e842bc158e366d40ffecd406ccead80014962/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5368656172592e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_ShearY.png" style="max-width:100%;"></a></td>
<td align="left">Shear vertically for the given degree(s).</td>
</tr>
<tr>
<td align="right"><em>Resizing:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/scale" rel="nofollow"><code>Scale</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0342559513d2f56aa2a9ed2940a99296bb4b0e29/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5363616c652e706e67"><img src="https://camo.githubusercontent.com/0342559513d2f56aa2a9ed2940a99296bb4b0e29/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5363616c652e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Scale.png" style="max-width:100%;"></a></td>
<td align="left">Scale X and Y axis by some (random) factor(s).</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/zoom" rel="nofollow"><code>Zoom</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6d68a27eaec6bb5cfe7f06eacc6abe0ffef94ee5/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5a6f6f6d2e706e67"><img src="https://camo.githubusercontent.com/6d68a27eaec6bb5cfe7f06eacc6abe0ffef94ee5/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5a6f6f6d2e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Zoom.png" style="max-width:100%;"></a></td>
<td align="left">Scale X and Y axis while preserving image size.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/resize" rel="nofollow"><code>Resize</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6becc146f9a27320a719af76e7565a2ac3055dc4/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526573697a652e706e67"><img src="https://camo.githubusercontent.com/6becc146f9a27320a719af76e7565a2ac3055dc4/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f526573697a652e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Resize.png" style="max-width:100%;"></a></td>
<td align="left">Resize image to the specified pixel dimensions.</td>
</tr>
<tr>
<td align="right"><em>Distorting:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/elasticdistortion" rel="nofollow"><code>ElasticDistortion</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/02c97d70a6e8dcac922845bd4b717f75cd33a1b8/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f4544312e706e67"><img src="https://camo.githubusercontent.com/02c97d70a6e8dcac922845bd4b717f75cd33a1b8/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f4544312e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_ED1.png" style="max-width:100%;"></a></td>
<td align="left">Displace image with a smoothed random vector field.</td>
</tr>
<tr>
<td align="right"><em>Cropping:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/crop" rel="nofollow"><code>Crop</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3a40254d5ae9b7b27d9fd249e633a97a0d52ecfa/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f702e706e67"><img src="https://camo.githubusercontent.com/3a40254d5ae9b7b27d9fd249e633a97a0d52ecfa/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f702e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_Crop.png" style="max-width:100%;"></a></td>
<td align="left">Crop specific region of the image.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/cropnative" rel="nofollow"><code>CropNative</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7550d64d8c1517ca0c96581a0c28bd3977b27819/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f704e61746976652e706e67"><img src="https://camo.githubusercontent.com/7550d64d8c1517ca0c96581a0c28bd3977b27819/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f704e61746976652e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_CropNative.png" style="max-width:100%;"></a></td>
<td align="left">Crop specific region of the image in relative space.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/cropsize" rel="nofollow"><code>CropSize</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6c9df43651688f418c9f54891204674195807932/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f7053697a652e706e67"><img src="https://camo.githubusercontent.com/6c9df43651688f418c9f54891204674195807932/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f7053697a652e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_CropSize.png" style="max-width:100%;"></a></td>
<td align="left">Crop area around the center with specified size.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/cropratio" rel="nofollow"><code>CropRatio</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b0c131011cb628467b05edd6727b9805c807eeb6/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f70526174696f2e706e67"><img src="https://camo.githubusercontent.com/b0c131011cb628467b05edd6727b9805c807eeb6/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f43726f70526174696f2e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_CropRatio.png" style="max-width:100%;"></a></td>
<td align="left">Crop to specified aspect ratio.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/rcropratio" rel="nofollow"><code>RCropRatio</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/78999a5b39846e3a93ba74dec13c3c3b1eb697c5/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5243726f70526174696f2e706e67"><img src="https://camo.githubusercontent.com/78999a5b39846e3a93ba74dec13c3c3b1eb697c5/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f5243726f70526174696f2e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_RCropRatio.png" style="max-width:100%;"></a></td>
<td align="left">Crop random window of specified aspect ratio.</td>
</tr>
<tr>
<td align="right"><em>Conversion:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/converteltype" rel="nofollow"><code>ConvertEltype</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/251305cbdf3b8757b08cbeb6b632a51c2ac2d17b/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f436f6e76657274456c747970652e706e67"><img src="https://camo.githubusercontent.com/251305cbdf3b8757b08cbeb6b632a51c2ac2d17b/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f436f6e76657274456c747970652e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_ConvertEltype.png" style="max-width:100%;"></a></td>
<td align="left">Convert the array elements to the given type.</td>
</tr>
<tr>
<td align="right"><em>Mapping:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/mapfun" rel="nofollow"><code>MapFun</code></a></td>
<td align="center">-</td>
<td align="left">Map custom function over image</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/aggmapfun" rel="nofollow"><code>AggregateThenMapFun</code></a></td>
<td align="center">-</td>
<td align="left">Map aggregated value over image</td>
</tr>
<tr>
<td align="right"><em>Layout:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/splitchannels" rel="nofollow"><code>SplitChannels</code></a></td>
<td align="center">-</td>
<td align="left">Separate the color channels into a dedicated array dimension.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/combinechannels" rel="nofollow"><code>CombineChannels</code></a></td>
<td align="center">-</td>
<td align="left">Collapse the first dimension into a specific colorant.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/permutedims" rel="nofollow"><code>PermuteDims</code></a></td>
<td align="center">-</td>
<td align="left">Reorganize the array dimensions into a specific order.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/reshape" rel="nofollow"><code>Reshape</code></a></td>
<td align="center">-</td>
<td align="left">Change or reinterpret the shape of the array.</td>
</tr>
<tr>
<td align="right"><em>Utilities:</em></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/noop" rel="nofollow"><code>NoOp</code></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ad66545dafeabf52f3f6d97118dea17d3423c483/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f7061747465726e2e706e67"><img src="https://camo.githubusercontent.com/ad66545dafeabf52f3f6d97118dea17d3423c483/68747470733a2f2f6576697a65726f2e6769746875622e696f2f4175676d656e746f722e6a6c2f6173736574732f74696e795f7061747465726e2e706e67" alt="" data-canonical-src="https://evizero.github.io/Augmentor.jl/assets/tiny_pattern.png" style="max-width:100%;"></a></td>
<td align="left">Identity function. Pass image along unchanged.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/cacheimage" rel="nofollow"><code>CacheImage</code></a></td>
<td align="center">-</td>
<td align="left">Buffer the current image into (preallocated) memory.</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"><a href="https://evizero.github.io/Augmentor.jl/operations/either" rel="nofollow"><code>Either</code></a></td>
<td align="center">-</td>
<td align="left">Apply one of the given operations at random.</td>
</tr>
</tbody>
</table>
<p>The purpose of an operation is to simply serve as a "dumb
placeholder" to specify the intent and parameters of the desired
transformation. What that means is that a pipeline of operations
can be thought of as a list of instructions (a cookbook of
sorts), that Augmentor uses internally to construct the required
code that implements the desired behaviour in the most efficient
way it can.</p>
<p>The way an operation is implemented depends on the rest of the
specified pipeline. For example, Augmentor knows three different
ways to implement the behaviour of the operation <code>Rotate90</code> and
will choose the one that best coincides with the other operations
of the pipeline and their concrete order.</p>
<ol>
<li>
<p>Call the function <code>rotl90</code> of Julia's base library, which
makes use of the fact that a 90 degree rotation can be
implemented very efficiently. While by itself this is the
fastest way to compute the result, this function is "eager"
and will allocate a new array. If <code>Rotate90</code> is followed by
another operation this may not be the best choice, since it
will cause a temporary image that is later discarded.</p>
</li>
<li>
<p>Create a <code>SubArray</code> of a <code>PermutedDimsArray</code>. This is more or
less a lazy version of <code>rotl90</code> that makes use of the fact
that a 90 degree rotation can be described 1-to-1 using just
the original pixels. By itself this strategy is slower than
<code>rotl90</code>, but if it is followed by an operation such as <code>Crop</code>
or <code>CropSize</code> it can be significantly faster. The reason for
this is that it avoids the computation of unused pixels and
also any allocation of temporary memory. The computation
overhead per output pixel, while small, grows linearly with
the number of chained operations.</p>
</li>
<li>
<p>Create an <code>AffineMap</code> using a rotation matrix that describes a
90 degree rotation around the center of the image. This will
result in a lazy transformation of the original image that is
further compose-able with other <code>AffineMap</code>. This is the
slowest available strategy, unless multiple affine operations
are chained together. If that is the case, then chaining the
operations can be reduced to composing the tiny affine maps
instead. This effectively fuses multiple operations into a
single operation for which the computation overhead per output
pixel remains approximately constant in respect to the number
of chained operations.</p>
</li>
</ol>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>For a more detailed treatment check out the <strong><a href="https://evizero.github.io/Augmentor.jl/" rel="nofollow">latest
documentation</a></strong>.</p>
<p>Additionally, you can make use of Julia's native docsystem.
The following example shows how to get additional information
on <code>augment</code> within Julia's REPL:</p>
<div class="highlight highlight-source-julia"><pre>?augment</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install <code>Augmentor.jl</code>, start up Julia and type the following
code snipped into the REPL. It makes use of the native Julia
package manager. Once installed the Augmentor package can be
imported just as any other Julia package.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Augmentor<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> Augmentor</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p>This code is free to use under the terms of the MIT license.</p>
<h2><a id="user-content-citing-augmentor" class="anchor" aria-hidden="true" href="#citing-augmentor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Citing Augmentor</h2>
<p>If you use Augmentor for academic research and wish to cite it,
please use the following paper.</p>
<p>Marcus D. Bloice, Christof Stocker, and Andreas Holzinger,
<em>Augmentor: An Image Augmentation Library for Machine Learning</em>,
arXiv preprint <strong>arXiv:1708.04680</strong>,
<a href="https://arxiv.org/abs/1708.04680" rel="nofollow">https://arxiv.org/abs/1708.04680</a>, 2017.</p>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgments</h2>
<p>This package makes heavy use of the following packages in order
to provide it's main functionality. To see at full list of
utilized packages, please take a look at the <a href="./REQUIRE">REQUIRE</a>
file.</p>
<ul>
<li><a href="https://github.com/FugroRoames/CoordinateTransformations.jl">FugroRoames/CoordinateTransformations.jl</a></li>
<li><a href="https://github.com/JuliaImages/ImageTransformations.jl">JuliaImages/ImageTransformations.jl</a></li>
<li><a href="https://github.com/JuliaMath/Interpolations.jl">JuliaMath/Interpolations.jl</a></li>
<li><a href="https://github.com/JuliaArrays/IdentityRanges.jl">JuliaArrays/IdentityRanges.jl</a></li>
</ul>
<p>Note that this version <code>Augmentor.jl</code> is a complete rewrite of an
initial implementation that had the same name. The old
implementation is now located at
<a href="https://github.com/Evizero/AugmentorDeprecated.jl">AugmentorDeprecated.jl</a>.</p>
</article></div>