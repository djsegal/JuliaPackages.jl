<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pearsonhash" class="anchor" aria-hidden="true" href="#pearsonhash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PearsonHash</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/darsnack/PearsonHash.jl/workflows/CI/badge.svg"><img src="https://github.com/darsnack/PearsonHash.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>This package provides utility functions for <a href="https://en.wikipedia.org/wiki/Pearson_hashing" rel="nofollow">Pearson hashing</a>. You can use the standard 8-bit hash function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; hash8(&quot;Test&quot;)
77
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hash8</span>(<span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>)
<span class="pl-c1">77</span></pre></div>
<p>Or use <code>hashn</code> to get multiple of 8 bits (i.e. (<code>8*n</code>)-bit hash) where <code>n</code> is based on the return type specified):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; hashn(UInt16, &quot;Test&quot;)
0x424d
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hashn</span>(UInt16, <span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>)
<span class="pl-c1">0x424d</span></pre></div>
<p>Note that <code>hashn</code> converts the data passed in using <code>Vector{UInt8}(data)</code>. This will result in extra allocations if <code>data</code> is mutable.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>For this simple package, just use the REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ?hash8
julia&gt; ?hashn!
julia&gt; ?hashn
"><pre>julia<span class="pl-k">&gt;</span> ?hash8
julia<span class="pl-k">&gt;</span> ?hashn!
julia<span class="pl-k">&gt;</span> ?hashn</pre></div>
</article></div>