<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dotplusinheritance" class="anchor" aria-hidden="true" href="#dotplusinheritance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DotPlusInheritance</h1>
<p><a href="https://travis-ci.org/DANA-Laboratory/DotPlusInheritance.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ea5ef0b15d0e7bedf13b99ebcb296e183f11a6001406a932923b6b36ee0d7feb/68747470733a2f2f7472617669732d63692e6f72672f44414e412d4c61626f7261746f72792f446f74506c7573496e6865726974616e63652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/DANA-Laboratory/DotPlusInheritance.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h3><a id="user-content-what-is-this" class="anchor" aria-hidden="true" href="#what-is-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is this?</h3>
<p>Not really a solution for inheritance, but a simple way for evaluating expressions when u think having inheritance relationships between involved types could simplifies expressions and help modeler do better.</p>
<h3><a id="user-content-how-when-and-for-whom-it-helps" class="anchor" aria-hidden="true" href="#how-when-and-for-whom-it-helps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How, when, and for whom it helps?</h3>
<p>Julia dose not supports inheritance like standard object oriented langs e.g.(c++ or java).
But inheritance really is a good feature when creating mathematical models of real world objects.
I solve this problem for myself (when modeling process equipments) by writing a this simple module that simulates Type Inheritance.
This trick creates a direct way to address all variables of member variables with special prefix before their names (at this time prefix is <em><code>__base__</code></em>) by using their Symbols.
Although it's not really inheritance, now i can define a <em>Special Pump</em> type that have all variables of a <em>Basic</em> one.
and evaluate expressions like:
<code>:(mypump.anSpecialPump_variable*mypump.aBasicPump_variable)</code>
in place of<br>
<code>:(mypump.anSpecialPump_mv*mypump.basicPumpModel.aBasicPump_mv)</code>
this really simplifies creating large models of various equipment each with many equations.</p>
<h3><a id="user-content-defines" class="anchor" aria-hidden="true" href="#defines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defines:</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dotplus(t::DataType,ex::Union(Expr,Symbol)) 
dotplus(var::Symbol,ex::Union(Expr,Symbol)) 
(.+)(var::Symbol,ex::Union(Expr,Symbol))
"><pre><span class="pl-c1">dotplus</span>(t<span class="pl-k">::</span><span class="pl-c1">DataType</span>,ex<span class="pl-k">::</span><span class="pl-c1">Union(Expr,Symbol)</span>) 
<span class="pl-c1">dotplus</span>(var<span class="pl-k">::</span><span class="pl-c1">Symbol</span>,ex<span class="pl-k">::</span><span class="pl-c1">Union(Expr,Symbol)</span>) 
(<span class="pl-k">.+</span>)(var<span class="pl-k">::</span><span class="pl-c1">Symbol</span>,ex<span class="pl-k">::</span><span class="pl-c1">Union(Expr,Symbol)</span>)</pre></div>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage:</h3>
<p>1- install, download package files and copy DotPlusInheritance.jl folder to your <code>Pkg.dir()</code></p>
<p>2- <code>use DotPlusInheritance</code></p>
<p>3- in child type use base as a member with <strong>_base_</strong> prefix</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="type BaseModel
  a
  b
end
type ChildModel
  _base_1::BaseModel
  a
  c
end
"><pre>type BaseModel
  a
  b
<span class="pl-k">end</span>
type ChildModel
  _base_1<span class="pl-k">::</span><span class="pl-c1">BaseModel</span>
  a
  c
<span class="pl-k">end</span></pre></div>
<p>4- generate a dot expression to address a <strong>base member</strong> from <strong>child type</strong></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@test dotplus(ChildModel,:b) == :(_base_1.b)
"><pre><span class="pl-c1">@test</span> <span class="pl-c1">dotplus</span>(ChildModel,<span class="pl-c1">:b</span>) <span class="pl-k">==</span> :(_base_1<span class="pl-k">.</span>b)</pre></div>
<p>5- use <code>dotplus(::Symbol,::Union(Expr,Symbol))</code> to address a <strong>base member</strong> from a <strong>drived variable</strong></p>
<p>6- or use <code>.+</code> to get value</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m1=BaseModel(1,2)
@test dotplus(:m1,:a) == :(m1.a)
@test :m1.+:a == m1.a
m2=ChildModel(m1,3,4)
#Over write
@test dotplus(:m2,:a) == :(m2.a)
@test :m2.+:a == m2.a
#Base member 
@test dotplus(:m2,:b) == :(m2._base_1.b)
@test :m2.+:b == m2._base_1.b
@test dotplus(:m2,:c) == :(m2.c)
@test :m2.+:c == m2.c
"><pre>m1<span class="pl-k">=</span><span class="pl-c1">BaseModel</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">dotplus</span>(<span class="pl-c1">:m1</span>,<span class="pl-c1">:a</span>) <span class="pl-k">==</span> :(m1<span class="pl-k">.</span>a)
<span class="pl-c1">@test</span> <span class="pl-c1">:m1</span><span class="pl-k">.+</span><span class="pl-c1">:a</span> <span class="pl-k">==</span> m1<span class="pl-k">.</span>a
m2<span class="pl-k">=</span><span class="pl-c1">ChildModel</span>(m1,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
<span class="pl-c"><span class="pl-c">#</span>Over write</span>
<span class="pl-c1">@test</span> <span class="pl-c1">dotplus</span>(<span class="pl-c1">:m2</span>,<span class="pl-c1">:a</span>) <span class="pl-k">==</span> :(m2<span class="pl-k">.</span>a)
<span class="pl-c1">@test</span> <span class="pl-c1">:m2</span><span class="pl-k">.+</span><span class="pl-c1">:a</span> <span class="pl-k">==</span> m2<span class="pl-k">.</span>a
<span class="pl-c"><span class="pl-c">#</span>Base member </span>
<span class="pl-c1">@test</span> <span class="pl-c1">dotplus</span>(<span class="pl-c1">:m2</span>,<span class="pl-c1">:b</span>) <span class="pl-k">==</span> :(m2<span class="pl-k">.</span>_base_1<span class="pl-k">.</span>b)
<span class="pl-c1">@test</span> <span class="pl-c1">:m2</span><span class="pl-k">.+</span><span class="pl-c1">:b</span> <span class="pl-k">==</span> m2<span class="pl-k">.</span>_base_1<span class="pl-k">.</span>b
<span class="pl-c1">@test</span> <span class="pl-c1">dotplus</span>(<span class="pl-c1">:m2</span>,<span class="pl-c1">:c</span>) <span class="pl-k">==</span> :(m2<span class="pl-k">.</span>c)
<span class="pl-c1">@test</span> <span class="pl-c1">:m2</span><span class="pl-k">.+</span><span class="pl-c1">:c</span> <span class="pl-k">==</span> m2<span class="pl-k">.</span>c</pre></div>
</article></div>