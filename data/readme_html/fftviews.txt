<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fftviews" class="anchor" aria-hidden="true" href="#fftviews"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FFTViews</h1>
<p><a href="https://travis-ci.org/JuliaArrays/FFTViews.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb9cc7346a16e0f6fb8bb44f5c410c0bcd53d8291e8d159a46a4032a58c09d76/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f46465456696577732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/FFTViews.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaArrays/FFTViews.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/df9940a2245521fe61ffbd48e49bcc94427cdebca96bbcdc090daebef4c41405/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f46465456696577732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/FFTViews.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package for simplifying operations that involve Fourier
transforms. An FFTView of an array uses periodic boundary conditions
for indexing, and shifts all indices of the array downward by 1.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Let's create a random signal:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="

julia&gt; using FFTViews

julia&gt; a = rand(8)
8-element Array{Float64,1}:
 0.720657
 0.42337
 0.207867
 0.959567
 0.371366
 0.907781
 0.852526
 0.689934
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FFTViews

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">8</span>)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.720657</span>
 <span class="pl-c1">0.42337</span>
 <span class="pl-c1">0.207867</span>
 <span class="pl-c1">0.959567</span>
 <span class="pl-c1">0.371366</span>
 <span class="pl-c1">0.907781</span>
 <span class="pl-c1">0.852526</span>
 <span class="pl-c1">0.689934</span></pre></div>
<p>Now let's take its Fourier transform, and wrap the result as an <code>FFTView</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; afft = fft(a)
8-element Array{Complex{Float64},1}:
   5.13307+0.0im
 -0.183898+0.796529im
   0.03163+0.31835im
   0.88248-0.492787im
 -0.828236+0.0im
   0.88248+0.492787im
   0.03163-0.31835im
 -0.183898-0.796529im

julia&gt; v = FFTView(afft)
FFTViews.FFTView{Complex{Float64},1,Array{Complex{Float64},1}} with indices FFTViews.URange(0,7):
   5.13307+0.0im
 -0.183898+0.796529im
   0.03163+0.31835im
   0.88248-0.492787im
 -0.828236+0.0im
   0.88248+0.492787im
   0.03163-0.31835im
 -0.183898-0.796529im
"><pre>julia<span class="pl-k">&gt;</span> afft <span class="pl-k">=</span> <span class="pl-c1">fft</span>(a)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Complex{Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
   <span class="pl-c1">5.13307</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.183898</span><span class="pl-k">+</span><span class="pl-c1">0.796529im</span>
   <span class="pl-c1">0.03163</span><span class="pl-k">+</span><span class="pl-c1">0.31835im</span>
   <span class="pl-c1">0.88248</span><span class="pl-k">-</span><span class="pl-c1">0.492787im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.828236</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.88248</span><span class="pl-k">+</span><span class="pl-c1">0.492787im</span>
   <span class="pl-c1">0.03163</span><span class="pl-k">-</span><span class="pl-c1">0.31835im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.183898</span><span class="pl-k">-</span><span class="pl-c1">0.796529im</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FFTView</span>(afft)
FFTViews<span class="pl-k">.</span>FFTView{Complex{Float64},<span class="pl-c1">1</span>,Array{Complex{Float64},<span class="pl-c1">1</span>}} with indices FFTViews<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">7</span>)<span class="pl-k">:</span>
   <span class="pl-c1">5.13307</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.183898</span><span class="pl-k">+</span><span class="pl-c1">0.796529im</span>
   <span class="pl-c1">0.03163</span><span class="pl-k">+</span><span class="pl-c1">0.31835im</span>
   <span class="pl-c1">0.88248</span><span class="pl-k">-</span><span class="pl-c1">0.492787im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.828236</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.88248</span><span class="pl-k">+</span><span class="pl-c1">0.492787im</span>
   <span class="pl-c1">0.03163</span><span class="pl-k">-</span><span class="pl-c1">0.31835im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.183898</span><span class="pl-k">-</span><span class="pl-c1">0.796529im</span></pre></div>
<p>Now we can easily look at the zero-frequency bin:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; v[0]
5.133068739504999 + 0.0im

julia&gt; sum(a)
5.133068739504998
"><pre>julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">0</span>]
<span class="pl-c1">5.133068739504999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(a)
<span class="pl-c1">5.133068739504998</span></pre></div>
<p>or negative as well as positive frequencies:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; v[-4:3]
8-element Array{Complex{Float64},1}:
 -0.828236+0.0im
   0.88248+0.492787im
   0.03163-0.31835im
 -0.183898-0.796529im
   5.13307+0.0im
 -0.183898+0.796529im
   0.03163+0.31835im
   0.88248-0.492787im
"><pre>julia<span class="pl-k">&gt;</span> v[<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Complex{Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.828236</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.88248</span><span class="pl-k">+</span><span class="pl-c1">0.492787im</span>
   <span class="pl-c1">0.03163</span><span class="pl-k">-</span><span class="pl-c1">0.31835im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.183898</span><span class="pl-k">-</span><span class="pl-c1">0.796529im</span>
   <span class="pl-c1">5.13307</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.183898</span><span class="pl-k">+</span><span class="pl-c1">0.796529im</span>
   <span class="pl-c1">0.03163</span><span class="pl-k">+</span><span class="pl-c1">0.31835im</span>
   <span class="pl-c1">0.88248</span><span class="pl-k">-</span><span class="pl-c1">0.492787im</span></pre></div>
<p>Perhaps even more interestingly, one can also simplify the process of
convolution. Let's create a "delta-function" signal:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; b = zeros(8); b[3] = 1; b  # the signal
8-element Array{Float64,1}:
 0.0
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">8</span>); b[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>; b  <span class="pl-c"><span class="pl-c">#</span> the signal</span>
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<p>and then create the kernel using an <code>FFTView</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; kernel = FFTView(zeros(8))
FFTViews.FFTView{Float64,1,Array{Float64,1}} with indices FFTViews.URange(0,7):
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0

julia&gt; kernel[-1:1] = rand(3)
3-element Array{Float64,1}:
 0.16202
 0.446872
 0.649135

julia&gt; kernel
FFTViews.FFTView{Float64,1,Array{Float64,1}} with indices FFTViews.URange(0,7):
 0.446872
 0.649135
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16202
"><pre>julia<span class="pl-k">&gt;</span> kernel <span class="pl-k">=</span> <span class="pl-c1">FFTView</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">8</span>))
FFTViews<span class="pl-k">.</span>FFTView{Float64,<span class="pl-c1">1</span>,Array{Float64,<span class="pl-c1">1</span>}} with indices FFTViews<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">7</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> kernel[<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.16202</span>
 <span class="pl-c1">0.446872</span>
 <span class="pl-c1">0.649135</span>

julia<span class="pl-k">&gt;</span> kernel
FFTViews<span class="pl-k">.</span>FFTView{Float64,<span class="pl-c1">1</span>,Array{Float64,<span class="pl-c1">1</span>}} with indices FFTViews<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">7</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.446872</span>
 <span class="pl-c1">0.649135</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.16202</span></pre></div>
<p>Now compute the convolution via the FFT:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; real(ifft(fft(b).*fft(kernel)))
8-element Array{Float64,1}:
  0.0
  0.16202
  0.446872
  0.649135
  0.0
 -5.55112e-17
  0.0
 -6.93889e-17
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">real</span>(<span class="pl-c1">ifft</span>(<span class="pl-c1">fft</span>(b)<span class="pl-k">.*</span><span class="pl-c1">fft</span>(kernel)))
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.16202</span>
  <span class="pl-c1">0.446872</span>
  <span class="pl-c1">0.649135</span>
  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">5.55112e-17</span>
  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">6.93889e-17</span></pre></div>
<p>or alternatively</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; irfft(rfft(b).*rfft(kernel),8)
8-element Array{Float64,1}:
  0.0
  0.16202
  0.446872
  0.649135
  0.0
 -2.77556e-17
  0.0
 -5.55112e-17
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">irfft</span>(<span class="pl-c1">rfft</span>(b)<span class="pl-k">.*</span><span class="pl-c1">rfft</span>(kernel),<span class="pl-c1">8</span>)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.16202</span>
  <span class="pl-c1">0.446872</span>
  <span class="pl-c1">0.649135</span>
  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">2.77556e-17</span>
  <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">5.55112e-17</span></pre></div>
<p>This simplifies the process of remembering how to pack your kernel.</p>
<h2><a id="user-content-caution-fftviews-are-not-composable" class="anchor" aria-hidden="true" href="#caution-fftviews-are-not-composable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caution: FFTViews are not composable</h2>
<p>In Julia, almost all other view types are composable: you can make a
<code>ReshapedArray</code> of a <code>SubArray</code> of a <code>StaticArray</code> of a .... In
contrast, <code>FFTViews</code> are <em>not safe</em> when placed inside other
containers. The reason is that the <code>*fft</code> methods are specialized for
<code>FFTViews</code>, and strip off the outer container; this does not happen if
you wrap an <code>FFTView</code> inside of some other array type.  If you do wrap
<code>FFTViews</code>, you might see strange off-by-1 bugs due to the FFTView
translating the indices.</p>
<p>Another way of saying the same thing is the following: for a general vector <code>x</code>, its FFT is defined as</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/eq1.png"><img src="docs/eq1.png" alt="eq1" style="max-width:100%;"></a></p>
<p>Here <code>x[n]</code> is defined with periodic boundary conditions, so that if the indices of <code>x</code> are not naturally from 1 to N, this formula still holds.</p>
<p>However, if <code>y = FFTView(x)</code>, then in terms of <code>y</code> we have</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/eq2.png"><img src="docs/eq2.png" alt="eq1" style="max-width:100%;"></a></p>
<p>which is shifted by 1. Since <code>FFTView</code>s use a different definition of
the FFT compared to all other array types, they need to be used with
caution. It's recommended that the FFTView wrapper be applied only for
the process of setting up or analyzing the result of the transform;
for all other operations, pass the <code>parent</code> array (obtainable from
<code>parent(y)</code> or just by reference to <code>x</code> itself).</p>
</article></div>