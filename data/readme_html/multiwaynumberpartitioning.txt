<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/beacon-biosignals/MultiwayNumberPartitioning.jl/actions/workflows/CI.yml"><img src="https://github.com/beacon-biosignals/MultiwayNumberPartitioning.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/beacon-biosignals/MultiwayNumberPartitioning.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f93dc807af3366463060a8e6c1a02064f60ee49c109b2210f775b1ef376d8ccf/68747470733a2f2f636f6465636f762e696f2f67682f626561636f6e2d62696f7369676e616c732f4d756c74697761794e756d626572506172746974696f6e696e672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d56413546583832344e39" alt="codecov" data-canonical-src="https://codecov.io/gh/beacon-biosignals/MultiwayNumberPartitioning.jl/branch/main/graph/badge.svg?token=VA5FX824N9" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-multiwaynumberpartitioning" class="anchor" aria-hidden="true" href="#multiwaynumberpartitioning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MultiwayNumberPartitioning</h1>
<p dir="auto">A simple Julia package to optimally solve the <a href="https://en.wikipedia.org/wiki/Multiway_number_partitioning" rel="nofollow">multiway number partitioning</a> problem
using a JuMP model with mixed-integer programming.</p>
<p dir="auto">There is one main function <code>partition</code> which tries to accomplish the following task:
given a collection of numbers <code>S</code> and a number <code>k</code>, try to partition <code>S</code> into <code>k</code> subsets of roughly equal sum.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MultiwayNumberPartitioning, HiGHS

julia&gt; S =  [1, 1, 1, 3, 2, 1];

julia&gt; inds = partition(S, 3; optimizer = HiGHS.Optimizer)
6-element Vector{Int64}:
 2
 2
 3
 1
 3
 2

julia&gt; S[inds .== 1] # group 1
1-element Vector{Int64}:
 3

julia&gt; S[inds .== 2] # group 2
3-element Vector{Int64}:
 1
 1
 1

julia&gt; S[inds .== 3] # group 3
2-element Vector{Int64}:
 1
 2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MultiwayNumberPartitioning, HiGHS

julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span>  [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> inds <span class="pl-k">=</span> <span class="pl-c1">partition</span>(S, <span class="pl-c1">3</span>; optimizer <span class="pl-k">=</span> HiGHS<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> S[inds <span class="pl-k">.==</span> <span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> group 1</span>
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> S[inds <span class="pl-k">.==</span> <span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> group 2</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> S[inds <span class="pl-k">.==</span> <span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> group 3</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span></pre></div>
<p dir="auto">We can see all three groups here have equal sum.</p>
<p dir="auto">See the <a href="./example/example.jl">example</a> for a more detailed usage example.</p>
<h2 dir="auto"><a id="user-content-choice-of-objective-function" class="anchor" aria-hidden="true" href="#choice-of-objective-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Choice of objective function</h2>
<p dir="auto">We can choose various objective functions for the algorithm to use during the optimization procedure when finding a partitioning configuration.</p>
<p dir="auto">MultiwayNumberPartitioning.jl provides three objective functions:</p>
<ul dir="auto">
<li><code>partition_min_largest!</code>: minimize sum of the largest subset</li>
<li><code>partition_max_smallest!</code>: maximize the sum of the smallest subset</li>
<li><code>partition_min_range!</code>: minimize the difference between the sum of the largest subset and the smallest</li>
</ul>
<p dir="auto">(where here "largest" and "smallest" refer to the sums of the subsets).</p>
</article></div>