<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-higherkindedpolymorphisms" class="anchor" aria-hidden="true" href="#higherkindedpolymorphisms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HigherKindedPolymorphisms</h1>
<p><a href="https://thautwarm.github.io/HigherKindedPolymorphisms.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/HigherKindedPolymorphisms.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/thautwarm/HigherKindedPolymorphisms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2694a8c2f522372be06d59c07a94886bdcdd73246ade9064fc66606a97481191/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f4869676865724b696e646564506f6c796d6f72706869736d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/HigherKindedPolymorphisms.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/HigherKindedPolymorphisms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aed915db055dae2d6072fd75dc6d71bb8db7723cfebc2c563caec7314533ae78/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f4869676865724b696e646564506f6c796d6f72706869736d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/HigherKindedPolymorphisms.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>It's full featured but has performance issues now.</p>
<p>Also, without structural function types, some advanced
polymorhisms might not be that useful, unless you feel okay
to annotate functions here and there.</p>
<p>I made this for using <a href="http://okmij.org/ftp/tagless-final/index.html" rel="nofollow">tagless-final style</a> in Julia.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HigherKindedPolymorphisms

abstract type VectSig end
@def_hkt VectSig{T} where T = Vector{T}


using CanonicalTraits
import FunctionWrappers: FunctionWrapper

Fn{A, B} = FunctionWrapper{B, Tuple{A}}
@trait Functor{F} begin
    fmap :: [Fn{A, B}, App{F, A}] where {A, B} =&gt; App{F, B}
end

@implement Functor{VectSig} begin
    fmap(f :: Fn{A, B}, a::App{VectSig, A}) where {A, B} =
        B[f(e) for e in prj(a)] |&gt; inj
end

f = Fn{Int, String)(string)
a = inj([1, 2, 3])
fmap(f, a) |&gt; prj

#=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]
"><pre><span class="pl-k">using</span> HigherKindedPolymorphisms

<span class="pl-k">abstract type</span> VectSig <span class="pl-k">end</span>
<span class="pl-c1">@def_hkt</span> VectSig{T} <span class="pl-k">where</span> T <span class="pl-k">=</span> Vector{T}


<span class="pl-k">using</span> CanonicalTraits
<span class="pl-k">import</span> FunctionWrappers<span class="pl-k">:</span> FunctionWrapper

Fn{A, B} <span class="pl-k">=</span> FunctionWrapper{B, Tuple{A}}
<span class="pl-c1">@trait</span> Functor{F} <span class="pl-k">begin</span>
    fmap <span class="pl-k">::</span> [Fn{A, B}, App{F, A}] <span class="pl-k">where</span> {A, B} <span class="pl-k">=&gt;</span> App{F, B}
<span class="pl-k">end</span>

<span class="pl-c1">@implement</span> Functor{VectSig} <span class="pl-k">begin</span>
    <span class="pl-en">fmap</span>(f <span class="pl-k">::</span> <span class="pl-c1">Fn{A, B}</span>, a<span class="pl-k">::</span><span class="pl-c1">App{VectSig, A}</span>) <span class="pl-k">where</span> {A, B} <span class="pl-k">=</span>
        B[<span class="pl-c1">f</span>(e) <span class="pl-k">for</span> e <span class="pl-k">in</span> <span class="pl-c1">prj</span>(a)] <span class="pl-k">|&gt;</span> inj
<span class="pl-k">end</span>

f <span class="pl-k">=</span> Fn{Int, String)(string)
a <span class="pl-k">=</span> <span class="pl-c1">inj</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">fmap</span>(f, a) <span class="pl-k">|&gt;</span> prj

<span class="pl-c"><span class="pl-c">#=</span>&gt; ["1", "2", "3"]</span></pre></div>
</article></div>