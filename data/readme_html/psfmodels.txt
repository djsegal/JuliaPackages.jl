<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-psfmodelsjl" class="anchor" aria-hidden="true" href="#psfmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PSFModels.jl</h1>
<p><a href="https://github.com/juliaastro/PSFModels.jl/actions"><img src="https://github.com/juliaastro/PSFModels.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/bcb5846531d55dde422ae3970a5bab6a3b808035320a6eb19b35e0ad36abf1f6/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f502f5053464d6f64656c732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/P/PSFModels.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/juliaastro/PSFModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ab26fb160e6c33cc9a143dc9986ee11d4f67afb5843f6e0e7cd10f5bd4d1808c/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961617374726f2f5053464d6f64656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliaastro/PSFModels.jl/branch/master/graph/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width:100%;"></a></p>
<p><a href="https://juliaastro.github.io/PSFModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliaastro.github.io/PSFModels.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Fast, allocation-free point-spread function (PSF) representations</p>
<h2><a id="user-content-models" class="anchor" aria-hidden="true" href="#models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Models</h2>
<ul>
<li><code>PSFModels.Gaussian</code> (or <code>Normal</code>)</li>
<li><code>PSFModels.AiryDisk</code></li>
<li><code>PSFModels.Moffat</code></li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>From the Julia REPL</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]

(@v1.5) pkg&gt; add PSFModels
"><pre>julia<span class="pl-k">&gt;</span> ]

(<span class="pl-c1">@v1</span>.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add PSFModels</pre></div>
<p>To import the library</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PSFModels
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PSFModels</pre></div>
<p>None of the models are exported to avoid namespace clashes, but it can be verbose. You can either import names directly</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PSFModels: Gaussian

julia&gt; model = Gaussian(8)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PSFModels<span class="pl-k">:</span> Gaussian

julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">Gaussian</span>(<span class="pl-c1">8</span>)</pre></div>
<p>or you can create an alias for <code>PSFModels</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# julia version 1.5 or below
using PSFModels
const M = PSFModels
# julia version 1.6 or above
using PSFModels as M

model = M.Gaussian(10)
"><pre><span class="pl-c"><span class="pl-c">#</span> julia version 1.5 or below</span>
<span class="pl-k">using</span> PSFModels
<span class="pl-k">const</span> M <span class="pl-k">=</span> PSFModels
<span class="pl-c"><span class="pl-c">#</span> julia version 1.6 or above</span>
<span class="pl-k">using</span> PSFModels as M

model <span class="pl-k">=</span> M<span class="pl-k">.</span><span class="pl-c1">Gaussian</span>(<span class="pl-c1">10</span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>For more in-depth usage and examples, please see the <a href="https://juliaastro.github.io/PSFModels.jl/dev/" rel="nofollow">documentation</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PSFModels

m = PSFModels.Gaussian(8)           # bivariate gaussian with a FWHM of 8 pixels
m = PSFModels.Gaussian((7.4, 8.2))  # specify FWHM for each axis
m = PSFModels.Gaussian([1 0; 0 1])  # specify FWHM as a correlated matrix

m = PSFModels.Gaussian(12, 25, 8.2) # specifiy location in pixel coordinates
m = PSFModels.Gaussian([12, 25], 8.2)

mf0 = PSFModels.Gaussian{Float32}(8.2) # output guaranteed to be Float32
"><pre><span class="pl-k">using</span> PSFModels

m <span class="pl-k">=</span> PSFModels<span class="pl-k">.</span><span class="pl-c1">Gaussian</span>(<span class="pl-c1">8</span>)           <span class="pl-c"><span class="pl-c">#</span> bivariate gaussian with a FWHM of 8 pixels</span>
m <span class="pl-k">=</span> PSFModels<span class="pl-k">.</span><span class="pl-c1">Gaussian</span>((<span class="pl-c1">7.4</span>, <span class="pl-c1">8.2</span>))  <span class="pl-c"><span class="pl-c">#</span> specify FWHM for each axis</span>
m <span class="pl-k">=</span> PSFModels<span class="pl-k">.</span><span class="pl-c1">Gaussian</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>])  <span class="pl-c"><span class="pl-c">#</span> specify FWHM as a correlated matrix</span>

m <span class="pl-k">=</span> PSFModels<span class="pl-k">.</span><span class="pl-c1">Gaussian</span>(<span class="pl-c1">12</span>, <span class="pl-c1">25</span>, <span class="pl-c1">8.2</span>) <span class="pl-c"><span class="pl-c">#</span> specifiy location in pixel coordinates</span>
m <span class="pl-k">=</span> PSFModels<span class="pl-k">.</span><span class="pl-c1">Gaussian</span>([<span class="pl-c1">12</span>, <span class="pl-c1">25</span>], <span class="pl-c1">8.2</span>)

mf0 <span class="pl-k">=</span> PSFModels<span class="pl-k">.</span><span class="pl-c1">Gaussian</span><span class="pl-c1">{Float32}</span>(<span class="pl-c1">8.2</span>) <span class="pl-c"><span class="pl-c">#</span> output guaranteed to be Float32</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m[0, 0]      # &quot;index&quot; the model at [y, x]
m[:, 0]
m(0.3, 1.0)  # directly query value at (x, y)
m([1.2, 0.4])

# scalar multiplication or division will create a ScaledPSFModel
20 * m # or `m * 20`
m / 20

# evaluate `m` over its indices forming an array
collect(m)

# broadcasting will take the axes of the other arrays
arr = randn(101, 101)
m .* arr

## (nearly) allocation-free loss function
# get overlapped cutouts for the PSF and the array
inds = map(intersect, axes(arr), axes(m))
arr_stamp = @view arr[inds...]
m_stamp = @view m[inds...]
amp = 1.24
resid = sum(abs2, arr_stamp .- amp .* m_stamp) # chi-square loss
"><pre>m[<span class="pl-c1">0</span>, <span class="pl-c1">0</span>]      <span class="pl-c"><span class="pl-c">#</span> "index" the model at [y, x]</span>
m[:, <span class="pl-c1">0</span>]
<span class="pl-c1">m</span>(<span class="pl-c1">0.3</span>, <span class="pl-c1">1.0</span>)  <span class="pl-c"><span class="pl-c">#</span> directly query value at (x, y)</span>
<span class="pl-c1">m</span>([<span class="pl-c1">1.2</span>, <span class="pl-c1">0.4</span>])

<span class="pl-c"><span class="pl-c">#</span> scalar multiplication or division will create a ScaledPSFModel</span>
<span class="pl-c1">20</span> <span class="pl-k">*</span> m <span class="pl-c"><span class="pl-c">#</span> or `m * 20`</span>
m <span class="pl-k">/</span> <span class="pl-c1">20</span>

<span class="pl-c"><span class="pl-c">#</span> evaluate `m` over its indices forming an array</span>
<span class="pl-c1">collect</span>(m)

<span class="pl-c"><span class="pl-c">#</span> broadcasting will take the axes of the other arrays</span>
arr <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">101</span>, <span class="pl-c1">101</span>)
m <span class="pl-k">.*</span> arr

<span class="pl-c"><span class="pl-c">#</span># (nearly) allocation-free loss function</span>
<span class="pl-c"><span class="pl-c">#</span> get overlapped cutouts for the PSF and the array</span>
inds <span class="pl-k">=</span> <span class="pl-c1">map</span>(intersect, <span class="pl-c1">axes</span>(arr), <span class="pl-c1">axes</span>(m))
arr_stamp <span class="pl-k">=</span> <span class="pl-c1">@view</span> arr[inds<span class="pl-k">...</span>]
m_stamp <span class="pl-k">=</span> <span class="pl-c1">@view</span> m[inds<span class="pl-k">...</span>]
amp <span class="pl-k">=</span> <span class="pl-c1">1.24</span>
resid <span class="pl-k">=</span> <span class="pl-c1">sum</span>(abs2, arr_stamp <span class="pl-k">.-</span> amp <span class="pl-k">.*</span> m_stamp) <span class="pl-c"><span class="pl-c">#</span> chi-square loss</span></pre></div>
</article></div>