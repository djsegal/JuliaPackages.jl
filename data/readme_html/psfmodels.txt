<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-psfmodelsjl" class="anchor" aria-hidden="true" href="#psfmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PSFModels.jl</h1>
<p dir="auto"><a href="https://github.com/juliaastro/PSFModels.jl/actions"><img src="https://github.com/juliaastro/PSFModels.jl/workflows/CI/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/bcb5846531d55dde422ae3970a5bab6a3b808035320a6eb19b35e0ad36abf1f6/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f502f5053464d6f64656c732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/P/PSFModels.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/juliaastro/PSFModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/17e3d308330aed3c8019626bee0b30cc30bbd22806db5f710a56a06207e85fff/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961617374726f2f5053464d6f64656c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliaastro/PSFModels.jl/branch/main/graph/badge.svg?branch=main" style="max-width: 100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/fb1b9d29b67a8f854fb72915cc2ac577d59a493bf626ad832b2e0db13c8db94f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4a756c6961417374726f2f5053464d6f64656c732e6a6c3f636f6c6f723d79656c6c6f77" alt="License" data-canonical-src="https://img.shields.io/github/license/JuliaAstro/PSFModels.jl?color=yellow" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliaastro.github.io/PSFModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliaastro.github.io/PSFModels.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Fast, allocation-free point-spread function (PSF) representations</p>
<h2 dir="auto"><a id="user-content-models" class="anchor" aria-hidden="true" href="#models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Models</h2>
<ul dir="auto">
<li><code>gaussian</code> (or <code>normal</code>)</li>
<li><code>airydisk</code></li>
<li><code>moffat</code></li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">From the Julia REPL</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]

(@v1.5) pkg&gt; add PSFModels"><pre>julia<span class="pl-k">&gt;</span> ]

(<span class="pl-c1">@v1</span>.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add PSFModels</pre></div>
<p dir="auto">To import the library</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PSFModels"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PSFModels</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PSFModels: gaussian

julia&gt; model = gaussian(x=0, y=0, fwhm=8)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PSFModels<span class="pl-k">:</span> gaussian

julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">gaussian</span>(x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span><span class="pl-c1">0</span>, fwhm<span class="pl-k">=</span><span class="pl-c1">8</span>)</pre></div>
<p dir="auto">or you can create an alias for <code>PSFModels</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# julia version 1.5 or below
using PSFModels
const M = PSFModels
# julia version 1.6 or above
import PSFModels as M

model = M.gaussian(fwhm=10)"><pre><span class="pl-c"><span class="pl-c">#</span> julia version 1.5 or below</span>
<span class="pl-k">using</span> PSFModels
<span class="pl-k">const</span> M <span class="pl-k">=</span> PSFModels
<span class="pl-c"><span class="pl-c">#</span> julia version 1.6 or above</span>
<span class="pl-k">import</span> PSFModels <span class="pl-k">as</span> M

model <span class="pl-k">=</span> M<span class="pl-k">.</span><span class="pl-c1">gaussian</span>(fwhm<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">For more in-depth usage and examples, please see the <a href="https://juliaastro.github.io/PSFModels.jl/dev/" rel="nofollow">documentation</a>.</p>
<p dir="auto">First, load the package</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PSFModels"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PSFModels</pre></div>
<h3 dir="auto"><a id="user-content-evaluating-models" class="anchor" aria-hidden="true" href="#evaluating-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Evaluating models</h3>
<p dir="auto">Directly evaluating the functions is the most straightforward way to use this package</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gaussian(0, 0; x=0, y=0, fwhm=3)
1.0

julia&gt; gaussian(BigFloat, 0, 0; x=0, y=0, fwhm=3, amp=0.1)
0.1000000000000000055511151231257827021181583404541015625"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gaussian</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>; x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span><span class="pl-c1">0</span>, fwhm<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gaussian</span>(BigFloat, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>; x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span><span class="pl-c1">0</span>, fwhm<span class="pl-k">=</span><span class="pl-c1">3</span>, amp<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
<span class="pl-c1">0.1000000000000000055511151231257827021181583404541015625</span></pre></div>
<p dir="auto">We also provide "curried" versions of the functions, which allow you to specify the parameters and evaluate the PSF later</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; model = gaussian(x=0, y=0, fwhm=3);

julia&gt; model(0, 0)
1.0"><pre>julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">gaussian</span>(x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span><span class="pl-c1">0</span>, fwhm<span class="pl-k">=</span><span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">model</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
<span class="pl-c1">1.0</span></pre></div>
<p dir="auto">If we want to collect the model into a dense matrix, simply iterate over indices</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; inds = CartesianIndices((-2:2, -2:2));

julia&gt; model.(inds) # broadcasting
5×5 Matrix{Float64}:
 0.0850494  0.214311  0.291632  0.214311  0.0850494
 0.214311   0.54003   0.734867  0.54003   0.214311
 0.291632   0.734867  1.0       0.734867  0.291632
 0.214311   0.54003   0.734867  0.54003   0.214311
 0.0850494  0.214311  0.291632  0.214311  0.0850494"><pre>julia<span class="pl-k">&gt;</span> inds <span class="pl-k">=</span> <span class="pl-c1">CartesianIndices</span>((<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">model</span>.(inds) <span class="pl-c"><span class="pl-c">#</span> broadcasting</span>
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0850494</span>  <span class="pl-c1">0.214311</span>  <span class="pl-c1">0.291632</span>  <span class="pl-c1">0.214311</span>  <span class="pl-c1">0.0850494</span>
 <span class="pl-c1">0.214311</span>   <span class="pl-c1">0.54003</span>   <span class="pl-c1">0.734867</span>  <span class="pl-c1">0.54003</span>   <span class="pl-c1">0.214311</span>
 <span class="pl-c1">0.291632</span>   <span class="pl-c1">0.734867</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.734867</span>  <span class="pl-c1">0.291632</span>
 <span class="pl-c1">0.214311</span>   <span class="pl-c1">0.54003</span>   <span class="pl-c1">0.734867</span>  <span class="pl-c1">0.54003</span>   <span class="pl-c1">0.214311</span>
 <span class="pl-c1">0.0850494</span>  <span class="pl-c1">0.214311</span>  <span class="pl-c1">0.291632</span>  <span class="pl-c1">0.214311</span>  <span class="pl-c1">0.0850494</span></pre></div>
<p dir="auto">This makes it very easy to evaluate the PSF on the same axes as an image (array)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; img = randn(5, 5);

julia&gt; model.(CartesianIndices(img))
5×5 Matrix{Float64}:
 0.54003      0.214311     0.0459292    0.00531559   0.000332224
 0.214311     0.0850494    0.018227     0.00210949   0.000131843
 0.0459292    0.018227     0.00390625   0.000452087  2.82555e-5
 0.00531559   0.00210949   0.000452087  5.2322e-5    3.27013e-6
 0.000332224  0.000131843  2.82555e-5   3.27013e-6   2.04383e-7"><pre>julia<span class="pl-k">&gt;</span> img <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">model</span>.(<span class="pl-c1">CartesianIndices</span>(img))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.54003</span>      <span class="pl-c1">0.214311</span>     <span class="pl-c1">0.0459292</span>    <span class="pl-c1">0.00531559</span>   <span class="pl-c1">0.000332224</span>
 <span class="pl-c1">0.214311</span>     <span class="pl-c1">0.0850494</span>    <span class="pl-c1">0.018227</span>     <span class="pl-c1">0.00210949</span>   <span class="pl-c1">0.000131843</span>
 <span class="pl-c1">0.0459292</span>    <span class="pl-c1">0.018227</span>     <span class="pl-c1">0.00390625</span>   <span class="pl-c1">0.000452087</span>  <span class="pl-c1">2.82555e-5</span>
 <span class="pl-c1">0.00531559</span>   <span class="pl-c1">0.00210949</span>   <span class="pl-c1">0.000452087</span>  <span class="pl-c1">5.2322e-5</span>    <span class="pl-c1">3.27013e-6</span>
 <span class="pl-c1">0.000332224</span>  <span class="pl-c1">0.000131843</span>  <span class="pl-c1">2.82555e-5</span>   <span class="pl-c1">3.27013e-6</span>   <span class="pl-c1">2.04383e-7</span></pre></div>
<p dir="auto">this is trivially expanded to fit "stamps" in images</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; big_img = randn(1000, 1000);

julia&gt; stamp_inds = (750:830, 400:485);

julia&gt; stamp = @view big_img[stamp_inds...];

julia&gt; stamp_model = model.(CartesianIndices(stamp_inds));"><pre>julia<span class="pl-k">&gt;</span> big_img <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>);

julia<span class="pl-k">&gt;</span> stamp_inds <span class="pl-k">=</span> (<span class="pl-c1">750</span><span class="pl-k">:</span><span class="pl-c1">830</span>, <span class="pl-c1">400</span><span class="pl-k">:</span><span class="pl-c1">485</span>);

julia<span class="pl-k">&gt;</span> stamp <span class="pl-k">=</span> <span class="pl-c1">@view</span> big_img[stamp_inds<span class="pl-k">...</span>];

julia<span class="pl-k">&gt;</span> stamp_model <span class="pl-k">=</span> <span class="pl-c1">model</span>.(<span class="pl-c1">CartesianIndices</span>(stamp_inds));</pre></div>
<p dir="auto">or we can create a loss function for fitting PSFs without allocating any memory. We are simply iterating over the image array!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Statistics

julia&gt; mse = mean(I -&gt; (big_img[I] - model(I))^2, CartesianIndices(stamp_inds));"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Statistics

julia<span class="pl-k">&gt;</span> mse <span class="pl-k">=</span> <span class="pl-c1">mean</span>(I <span class="pl-k">-&gt;</span> (big_img[I] <span class="pl-k">-</span> <span class="pl-c1">model</span>(I))<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">CartesianIndices</span>(stamp_inds));</pre></div>
<h3 dir="auto"><a id="user-content-fitting-data" class="anchor" aria-hidden="true" href="#fitting-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fitting data</h3>
<p dir="auto">There exists a simple, yet powerful, API for fitting data with these PSF models. See the <a href="https://juliaastro.github.io/PSFModels.jl/dev" rel="nofollow">full documentation</a> for more details and examples.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# `fit` is not exported to avoid namespace clashes
using PSFModels: fit

data = # load data
stamp_inds = # optionally choose indices to &quot;cutout&quot;

# use an isotropic Gaussian
P0 = (x=12, y=13, fwhm=3.2, amp=0.1)
params, synthpsf = fit(gaussian, P0, data, stamp_inds)

# elliptical, rotated Gaussian
P0 = (x=12, y=13, fwhm=(3.2, 3.2), amp=0.1, theta=0)
params, synthpsf = fit(gaussian, P0, data, stamp_inds)

# obscured Airy disk
P0 = (x=12, y=13, fwhm=3.2, amp=0.1, ratio=0.3)
params, synthpsf = fit(airydisk, P0, data, stamp_inds)

# bivariate Moffat with arbitrary alpha
P0 = (x=12, y=13, fwhm=(3.2, 3.2), amp=0.1, alpha=1)
# fixed (&quot;frozen&quot;) rotation angle
func_kwargs = (;theta=15)
params, synthpsf = fit(moffat, P0, data, stamp_inds; func_kwargs)"><pre><span class="pl-c"><span class="pl-c">#</span> `fit` is not exported to avoid namespace clashes</span>
<span class="pl-k">using</span> PSFModels<span class="pl-k">:</span> fit

data <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> load data</span>
stamp_inds <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> optionally choose indices to "cutout"</span>

<span class="pl-c"><span class="pl-c">#</span> use an isotropic Gaussian</span>
P0 <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">12</span>, y<span class="pl-k">=</span><span class="pl-c1">13</span>, fwhm<span class="pl-k">=</span><span class="pl-c1">3.2</span>, amp<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
params, synthpsf <span class="pl-k">=</span> <span class="pl-c1">fit</span>(gaussian, P0, data, stamp_inds)

<span class="pl-c"><span class="pl-c">#</span> elliptical, rotated Gaussian</span>
P0 <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">12</span>, y<span class="pl-k">=</span><span class="pl-c1">13</span>, fwhm<span class="pl-k">=</span>(<span class="pl-c1">3.2</span>, <span class="pl-c1">3.2</span>), amp<span class="pl-k">=</span><span class="pl-c1">0.1</span>, theta<span class="pl-k">=</span><span class="pl-c1">0</span>)
params, synthpsf <span class="pl-k">=</span> <span class="pl-c1">fit</span>(gaussian, P0, data, stamp_inds)

<span class="pl-c"><span class="pl-c">#</span> obscured Airy disk</span>
P0 <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">12</span>, y<span class="pl-k">=</span><span class="pl-c1">13</span>, fwhm<span class="pl-k">=</span><span class="pl-c1">3.2</span>, amp<span class="pl-k">=</span><span class="pl-c1">0.1</span>, ratio<span class="pl-k">=</span><span class="pl-c1">0.3</span>)
params, synthpsf <span class="pl-k">=</span> <span class="pl-c1">fit</span>(airydisk, P0, data, stamp_inds)

<span class="pl-c"><span class="pl-c">#</span> bivariate Moffat with arbitrary alpha</span>
P0 <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">12</span>, y<span class="pl-k">=</span><span class="pl-c1">13</span>, fwhm<span class="pl-k">=</span>(<span class="pl-c1">3.2</span>, <span class="pl-c1">3.2</span>), amp<span class="pl-k">=</span><span class="pl-c1">0.1</span>, alpha<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> fixed ("frozen") rotation angle</span>
func_kwargs <span class="pl-k">=</span> (;theta<span class="pl-k">=</span><span class="pl-c1">15</span>)
params, synthpsf <span class="pl-k">=</span> <span class="pl-c1">fit</span>(moffat, P0, data, stamp_inds; func_kwargs)</pre></div>
<h3 dir="auto"><a id="user-content-plotting-models" class="anchor" aria-hidden="true" href="#plotting-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting models</h3>
<p dir="auto">We provide simple user recipes from <a href="https://github.com/JuliaPlots/RecipesBase.jl">RecipesBase.jl</a>, which can be called with <code>psfplot</code>/<code>psfplot!</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots

inds = (1:30, 1:30)
model = airydisk(x=12, y=13, fwhm=(4.5, 6.7), theta=12, ratio=0.3)
psfplot(model, inds, colorbar_scale=:log10)"><pre><span class="pl-k">using</span> Plots

inds <span class="pl-k">=</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">30</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">30</span>)
model <span class="pl-k">=</span> <span class="pl-c1">airydisk</span>(x<span class="pl-k">=</span><span class="pl-c1">12</span>, y<span class="pl-k">=</span><span class="pl-c1">13</span>, fwhm<span class="pl-k">=</span>(<span class="pl-c1">4.5</span>, <span class="pl-c1">6.7</span>), theta<span class="pl-k">=</span><span class="pl-c1">12</span>, ratio<span class="pl-k">=</span><span class="pl-c1">0.3</span>)
<span class="pl-c1">psfplot</span>(model, inds, colorbar_scale<span class="pl-k">=</span><span class="pl-c1">:log10</span>)</pre></div>
<h2 dir="auto"><a id="user-content-contributing-and-support" class="anchor" aria-hidden="true" href="#contributing-and-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing and Support</h2>
<p dir="auto">If you would like to contribute, feel free to open a <a href="https://github.com/JuliaAstro/PSFModels.jl/pulls">pull request</a>. If you want to discuss something before contributing, head over to <a href="https://github.com/JuliaAstro/PSFModels.jl/discussions">discussions</a> and join or open a new topic. If you're having problems with something, please open an <a href="https://github.com/JuliaAstro/PSFModels.jl/issues">issue</a>.</p>
</article></div>