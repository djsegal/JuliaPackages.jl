<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/kevin-tracy/DCOL.jl/blob/master/extras/images/DCOL_logo.png"><img width="600" src="https://github.com/kevin-tracy/DCOL.jl/raw/master/extras/images/DCOL_logo.png" style="max-width: 100%;"></a>
</p>
<p dir="auto">A library for differential collision detection, as implemented from <a href="https://arxiv.org/abs/2207.00669" rel="nofollow">Differentiable Collision Detection for a Set of Convex Primitives</a>. The core algorithmn, DCOL, computes collision information between the following convex primitives:</p>
<ul dir="auto">
<li>polytopes</li>
<li>capsules</li>
<li>cylinders</li>
<li>cones</li>
<li>spheres</li>
<li>ellipsoids</li>
<li>padded polygons</li>
</ul>
<p dir="auto">A limited version of DCOL is available in Python/JAX as <a href="https://github.com/kevin-tracy/dpax">dpax</a>.</p>
<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<p dir="auto">DCOL works by creating a struct for each shape, and calling a function to query a proximity value between them.</p>
<h4 dir="auto"><a id="user-content-primitives" class="anchor" aria-hidden="true" href="#primitives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Primitives</h4>
<p dir="auto">Each primitive is implemented as a struct in DCOL. The defining dimensions for each primitive is described in the <a href="https://arxiv.org/abs/2207.00669" rel="nofollow">paper</a>, and the primitives can be constructed as the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import DifferentiableCollisions as dc

polytope = dc.Polytope(A, b)   # polytope is described by Ax &lt;= b
capsule  = dc.Capsule(R, L)    # radius R, length L
cylinder = dc.Cylinder(R, L)   # radius R, length L
cone     = dc.Cone(H, β)       # height H, half angle β
sphere   = dc.Sphere(R)        # radius R
ellips   = dc.Ellipsoid(P)     # x'*P*x ≦ 1
polygon  = dc.Polygon(A, b, R) # polygon is described by Ay &lt;= b, cushion radius R"><pre><span class="pl-k">import</span> DifferentiableCollisions <span class="pl-k">as</span> dc

polytope <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Polytope</span>(A, b)   <span class="pl-c"><span class="pl-c">#</span> polytope is described by Ax &lt;= b</span>
capsule  <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Capsule</span>(R, L)    <span class="pl-c"><span class="pl-c">#</span> radius R, length L</span>
cylinder <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Cylinder</span>(R, L)   <span class="pl-c"><span class="pl-c">#</span> radius R, length L</span>
cone     <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Cone</span>(H, β)       <span class="pl-c"><span class="pl-c">#</span> height H, half angle β</span>
sphere   <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Sphere</span>(R)        <span class="pl-c"><span class="pl-c">#</span> radius R</span>
ellips   <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Ellipsoid</span>(P)     <span class="pl-c"><span class="pl-c">#</span> x'*P*x ≦ 1</span>
polygon  <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Polygon</span>(A, b, R) <span class="pl-c"><span class="pl-c">#</span> polygon is described by Ay &lt;= b, cushion radius R</span></pre></div>
<p dir="auto">where all of these structs are <code>::AbstractPrimitive</code>, and use a quaternion for attitude. The position and attitude of a primitive <code>P1::AbstractPrimitive</code> are updated in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StaticArrays
P1 =  dc.Polytope(A,  b)::AbstractPrimitive
P1.r = SA[1, 2, 3.0]     # position in world frame W
P1.q = SA[1.0, 0, 0, 0]  # quaternion ᵂqᴮ"><pre><span class="pl-k">using</span> StaticArrays
P1 <span class="pl-k">=</span>  dc<span class="pl-k">.</span><span class="pl-c1">Polytope</span>(A,  b)<span class="pl-k">::</span><span class="pl-c1">AbstractPrimitive</span>
P1<span class="pl-k">.</span>r <span class="pl-k">=</span> SA[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>]     <span class="pl-c"><span class="pl-c">#</span> position in world frame W</span>
P1<span class="pl-k">.</span>q <span class="pl-k">=</span> SA[<span class="pl-c1">1.0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]  <span class="pl-c"><span class="pl-c">#</span> quaternion ᵂqᴮ</span></pre></div>
<h4 dir="auto"><a id="user-content-mrp-support" class="anchor" aria-hidden="true" href="#mrp-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MRP Support</h4>
<p dir="auto">In cases where a three-parameter attitude parameterization is more convenient, a Modified Rodrigues Parameter (MRP) can be used in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="P1 = dc.PolytopeMRP(A, b)::AbstractPrimitiveMRP
P1.r = SA[1, 2, 3.0]    # position in world frame W
P1.p = SA[0.0, 0, 0]    # MRP ᵂpᴮ"><pre>P1 <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">PolytopeMRP</span>(A, b)<span class="pl-k">::</span><span class="pl-c1">AbstractPrimitiveMRP</span>
P1<span class="pl-k">.</span>r <span class="pl-k">=</span> SA[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>]    <span class="pl-c"><span class="pl-c">#</span> position in world frame W</span>
P1<span class="pl-k">.</span>p <span class="pl-k">=</span> SA[<span class="pl-c1">0.0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]    <span class="pl-c"><span class="pl-c">#</span> MRP ᵂpᴮ</span></pre></div>
<h4 dir="auto"><a id="user-content-proximity-functions" class="anchor" aria-hidden="true" href="#proximity-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proximity Functions</h4>
<p dir="auto">DCOL exposes a function <code>proximity</code> for collision detection, as well as <code>proximity_jacobian</code> for collision detection and derivatives. Two optional arguments are included that pertain to the optimization solver under the hood,  <code>verbose</code> turns on logging for this solver, and <code>pdip_tol</code> is the termination criteria.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# return min scaling α and intersection x
α, x = dc.proximity(P1, P2; verbose = false, pdip_tol = 1e-6)

# return min scaling α and gradient of α wrt configurations 
α, dα_dstate = dc.proximity_gradient(P1, P2; verbose = false, pdip_tol = 1e-6)

# return min scaling α, intersection x, and jacobian J (*)
α, x, J = dc.proximity_jacobian(P1, P2; verbose = false, pdip_tol = 1e-6)"><pre><span class="pl-c"><span class="pl-c">#</span> return min scaling α and intersection x</span>
α, x <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">proximity</span>(P1, P2; verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>, pdip_tol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>)

<span class="pl-c"><span class="pl-c">#</span> return min scaling α and gradient of α wrt configurations </span>
α, dα_dstate <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">proximity_gradient</span>(P1, P2; verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>, pdip_tol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>)

<span class="pl-c"><span class="pl-c">#</span> return min scaling α, intersection x, and jacobian J (*)</span>
α, x, J <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">proximity_jacobian</span>(P1, P2; verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>, pdip_tol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>)</pre></div>
<p dir="auto">These functions output <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$\alpha$</math-renderer> as the minimum scaling, with the following significance:</p>
<ul dir="auto">
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$\alpha \leq 1$</math-renderer> means there <strong>is</strong> a collision between the two primitives</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$\alpha &amp;gt;1$</math-renderer> means there <strong>is not</strong> a collision between the two primitives</li>
</ul>
<p dir="auto">Also, returned is <code>x</code> which is the intersection point between the scaled shapes (see algorithm for significance), and a Jacobian <code>J</code> which is the following:</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$$
\begin{align*}
J &amp;= \frac{\partial (x,\alpha) }{\partial (r_1,q_1,r_2,q_2)}
\end{align*}
$$</math-renderer></p>
<p dir="auto">In the case where <code>AbstractPrimitiveMRP</code>'s are used, <code>proximity_jacobian</code> will automatically return the following Jacobian:</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$$
\begin{align*}
J &amp;= \frac{\partial (x,\alpha) }{\partial (r_1,p_1,r_2,p_2)}
\end{align*}
$$</math-renderer></p>
<h2 dir="auto">
<a id="user-content-visualizer" class="anchor" aria-hidden="true" href="#visualizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualizer</h2>
<p dir="auto">All of the primitives (both quaternion and MRP) can be visualized in <a href="https://github.com/rdeits/MeshCat.jl">MeshCat</a>. Below is an example of visualization for a cone:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import DCOL as dc
import MeshCat as mc

vis = mc.Visualizer()
mc.open(vis)

cone = dc.Cone(3.0, deg2rad(22))
cone.r = @SVector randn(3)
cone.q = normalize((@SVector randn(4)))

# build primitive scaled by α = 1.0
dc.build_primitive!(vis, cone, :cone; α = 1.0, color = mc.RGBA(1,0,0,1.0))

# update position and attitude
dc.update_pose!(vis[:cone], cone)"><pre><span class="pl-k">import</span> DCOL <span class="pl-k">as</span> dc
<span class="pl-k">import</span> MeshCat <span class="pl-k">as</span> mc

vis <span class="pl-k">=</span> mc<span class="pl-k">.</span><span class="pl-c1">Visualizer</span>()
mc<span class="pl-k">.</span><span class="pl-c1">open</span>(vis)

cone <span class="pl-k">=</span> dc<span class="pl-k">.</span><span class="pl-c1">Cone</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">deg2rad</span>(<span class="pl-c1">22</span>))
cone<span class="pl-k">.</span>r <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)
cone<span class="pl-k">.</span>q <span class="pl-k">=</span> <span class="pl-c1">normalize</span>((<span class="pl-c1">@SVector</span> <span class="pl-c1">randn</span>(<span class="pl-c1">4</span>)))

<span class="pl-c"><span class="pl-c">#</span> build primitive scaled by α = 1.0</span>
dc<span class="pl-k">.</span><span class="pl-c1">build_primitive!</span>(vis, cone, <span class="pl-c1">:cone</span>; α <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, color <span class="pl-k">=</span> mc<span class="pl-k">.</span><span class="pl-c1">RGBA</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1.0</span>))

<span class="pl-c"><span class="pl-c">#</span> update position and attitude</span>
dc<span class="pl-k">.</span><span class="pl-c1">update_pose!</span>(vis[<span class="pl-c1">:cone</span>], cone)</pre></div>
<h2 dir="auto">
<a id="user-content-algorithm" class="anchor" aria-hidden="true" href="#algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithm</h2>
<p dir="auto">DCOL calculates the collision information between two primitives by solving for the minimum scaling applied to both primitives that result in an intersection. This is done by forming an optimization problem with the following primal variables:</p>
<ul dir="auto">
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$\alpha \in \mathbb{R}$</math-renderer>, the scaling applied to each primitive</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$x \in \mathbb{R}^3$</math-renderer>, an intersection point in the world frame</li>
</ul>
<p dir="auto">The following optimization problem solves for the minimum scaling α such that a point x exists in the scaled versions of two primitives P1 and P2.</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="857fdba33403e5ce610e1a12da001e53">$$
\begin{align*}
\underset{x,\alpha}{\text{minimize}} &amp; \quad \alpha \\
\text{subject to} &amp; \quad  \alpha \geq 0, \\
&amp; \quad  x \in P_1(\alpha),\\
&amp; \quad  x \in P_2(\alpha)
\end{align*}
$$</math-renderer></p>
<p dir="auto">This problem is a convex optimization problem with conic constraints, and is solved with a custom primal-dual interior-point method inspired by <a href="http://www.seas.ucla.edu/~vandenbe/publications/coneprog.pdf" rel="nofollow">cvxopt</a>. If the minimum scaling α &gt; 1, then there is no collision because each primitive had to be scaled up in order to find an intersection. Alternatively, this means that if α ≤ 1, the two primitives are in contact. The solution to this optimization problem can be differentiated with respect to the position and orientation of each primitive using the implicit function theorem. By using a primal-dual interior-point method and returning a solution at a <code>pdip_tol</code> of <code>[1e-4,1e-8]</code>, the log barrier will effectively smooth out the corners of the primitives to return useful and smooth derivatives.</p>
<h2 dir="auto">
<a id="user-content-paper-examples" class="anchor" aria-hidden="true" href="#paper-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Paper Examples</h2>
<p dir="auto">Examples from <a href="https://arxiv.org/abs/2207.00669" rel="nofollow">our paper</a> are available here:</p>
<ul dir="auto">
<li><code>examples/trajectory_optimization/piano_mover.jl</code></li>
<li><code>examples/trajectory_optimization/cluttered_hallway_quadrotor.jl</code></li>
<li><code>examples/trajectory_optimization/cone_through_wall.jl</code></li>
<li><code>examples/contact_physics/ncp_contact_simulation.jl</code></li>
</ul>
</article></div>