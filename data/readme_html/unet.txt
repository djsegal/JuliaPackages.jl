<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-unetjl" class="anchor" aria-hidden="true" href="#unetjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UNet.jl</h1>
<p><a href="https://github.com/dhairyagandhi96/UNet.jl/actions"><img src="https://github.com/dhairyagandhi96/UNet.jl/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"></a></p>
<p>This pacakge provides a generic UNet implemented in Julia.</p>
<p>The package is built on top of Flux.jl, and therefore can be extended as needed</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">Unet</span>()
UNet<span class="pl-k">:</span>
  <span class="pl-c1">ConvDown</span>(<span class="pl-c1">64</span>, <span class="pl-c1">64</span>)
  <span class="pl-c1">ConvDown</span>(<span class="pl-c1">128</span>, <span class="pl-c1">128</span>)
  <span class="pl-c1">ConvDown</span>(<span class="pl-c1">256</span>, <span class="pl-c1">256</span>)
  <span class="pl-c1">ConvDown</span>(<span class="pl-c1">512</span>, <span class="pl-c1">512</span>)


  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">3</span>, <span class="pl-c1">64</span>)
  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">64</span>, <span class="pl-c1">128</span>)
  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">128</span>, <span class="pl-c1">256</span>)
  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">256</span>, <span class="pl-c1">512</span>)
  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">512</span>, <span class="pl-c1">1024</span>)
  <span class="pl-c1">UNetConvBlock</span>(<span class="pl-c1">1024</span>, <span class="pl-c1">1024</span>)


  <span class="pl-c1">UNetUpBlock</span>(<span class="pl-c1">1024</span>, <span class="pl-c1">512</span>)
  <span class="pl-c1">UNetUpBlock</span>(<span class="pl-c1">1024</span>, <span class="pl-c1">256</span>)
  <span class="pl-c1">UNetUpBlock</span>(<span class="pl-c1">512</span>, <span class="pl-c1">128</span>)
  <span class="pl-c1">UNetUpBlock</span>(<span class="pl-c1">256</span>, <span class="pl-c1">64</span>)</pre></div>
<p>To default input channel dimension is expected to be <code>1</code> ie. grayscale. To support different channel images, you can pass the <code>channels</code> to <code>Unet</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">Unet</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> for RGB images</span></pre></div>
<p>The input size can be any power of two sized batch. Something like <code>(256,256, channels, batch_size)</code>.</p>
<h2><a id="user-content-gpu-support" class="anchor" aria-hidden="true" href="#gpu-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GPU Support</h2>
<p>To train the model on UNet, it is as simple as calling <code>gpu</code> on the model.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">gpu</span>(u);

julia<span class="pl-k">&gt;</span> r <span class="pl-k">=</span> <span class="pl-c1">gpu</span>(<span class="pl-c1">rand</span>(Float32, <span class="pl-c1">256</span>, <span class="pl-c1">256</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(<span class="pl-c1">u</span>(r))
(<span class="pl-c1">256</span>, <span class="pl-c1">256</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-training" class="anchor" aria-hidden="true" href="#training"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Training</h2>
<p>Training UNet is a breeze too.</p>
<p>You can define your own loss function, or use a provided Binary Cross Entropy implementation via <code>bce</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">256</span>,<span class="pl-c1">256</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> w′ <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">256</span>,<span class="pl-c1">256</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">loss</span>(x, y)
         op <span class="pl-k">=</span> <span class="pl-c1">clamp</span>.(<span class="pl-c1">u</span>(x), <span class="pl-c1">0.001</span>f0, <span class="pl-c1">1.</span>f0)
         <span class="pl-c1">mean</span>(<span class="pl-c1">bce</span>(op, y))
       <span class="pl-k">end</span>
loss (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Base<span class="pl-k">.</span>Iterators

julia<span class="pl-k">&gt;</span> rep <span class="pl-k">=</span> Iterators<span class="pl-k">.</span><span class="pl-c1">repeated</span>((w, w′), <span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> opt <span class="pl-k">=</span> <span class="pl-c1">Momentum</span>()
<span class="pl-c1">Momentum</span>(<span class="pl-c1">0.01</span>, <span class="pl-c1">0.9</span>, <span class="pl-c1">IdDict</span><span class="pl-c1">{Any,Any}</span>())

julia<span class="pl-k">&gt;</span> Flux<span class="pl-k">.</span><span class="pl-c1">train!</span>(loss, Flux<span class="pl-k">.</span><span class="pl-c1">params</span>(u), rep, opt);</pre></div>
<h2><a id="user-content-further-reading" class="anchor" aria-hidden="true" href="#further-reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Further Reading</h2>
<p>The package is an implementation of the <a href="https://arxiv.org/pdf/1505.04597.pdf" rel="nofollow">paper</a>, and all credits of the model itself go to the respective authors.</p>
</article></div>