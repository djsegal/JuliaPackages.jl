<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-miraibots" class="anchor" aria-hidden="true" href="#miraibots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MiraiBots</h1>
<p dir="auto"><a href="https://github.com/project-mirai/mirai-api-http">mirai-api-http</a>的Julia接口，通过<a href="https://github.com/JuliaWeb/HTTP.jl">HTTP</a>监听，并利用<a href="https://github.com/quinnj/JSON3.jl">JSON3</a>实现序列化，将消息对应到结构体。</p>
<p dir="auto">支持mirai-api-http v2的HTTP和WebSocket接口，分别对应<code>HTTPAdapter</code>和<code>WebSocketAdapter</code>。同时<code>HTTPCompatAdapter</code>支持mirai-api-http v1的HTTP接口。</p>
<h2 dir="auto"><a id="user-content-设计" class="anchor" aria-hidden="true" href="#设计"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>设计</h2>
<h3 dir="auto"><a id="user-content-顶层api" class="anchor" aria-hidden="true" href="#顶层api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>顶层API</h3>
<p dir="auto">顶层的API收发普通的Julia结构体，接口是<code>register(callbck, broadcaster)</code>和<code>send(adapter, command)</code>。各种类型的结构体（命令、消息、事件等）及各部分的含义参考<a href="https://github.com/project-mirai/mirai-api-http/blob/v2.4.0/docs/adapter/WebsocketAdapter.md">mirai-api-http的WebsocketAdapter接口</a>。</p>
<ul dir="auto">
<li><code>register(callback, broadcaster::Broadcaster)</code>: 在广播器中记录一个回调函数，这个函数会在mirai收到对应类型的参数时调用，给出的参数是用于<code>send</code>的接口适配器以及对应的事件或消息。</li>
<li><code>send(adapter::ProtocolAdapter, command::Commands.AbstractCommand)</code>：通过接口适配器（<code>ProtocolAdapter</code>）向mirai发送一条命令，并将收到的回复转换为对应的Julia类型。</li>
</ul>
<h3 dir="auto"><a id="user-content-底层api" class="anchor" aria-hidden="true" href="#底层api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>底层API</h3>
<p dir="auto">发送消息时，<code>send(adapter, command::Commands.AbstractCommand)</code>给命令补上各接口适配器都通用的请求信息，构造<code>GeneralCommand</code>。<code>GeneralCommand</code>被传给<code>send(adapter, command::GeneralCommand)</code>，根据不同的接口适配器的要求，将根据对应的信息将命令序列化为JSON、表单或query string。序列化后的消息将通过接口适配器要求的方法传输到mirai。</p>
<p dir="auto">接口适配器在发送消息的回复直接以<code>JSON3.Object</code>形式返回。<code>send(adapter, command::Commands.AbstractCommand)</code>收到JSON对象后反序列化。反序列化的类型由命令决定，用<code>response_type</code>（或<code>response_type_compat</code>）计算。</p>
<p dir="auto">HTTP协议的接口适配器发送的过程比较简单，只需要根据数据的类型选择正确的方法发送到mirai即可。而WebSocket接口是异步回复的，但我们希望<code>send</code>是同步的，因此发送比较复杂。WebSocket的协议的回复消息中包含一个<code>syncId</code>成员用于指示回复的对象。因此在发送时会将每条命令的<code>syncId</code>的值存入一个字典中，以便在收到回复时做出对应的操作。本库在发送时构造一个<code>Channel</code>用于接收回复，并等待这个<code>Channel</code>被填充。接口适配器会在收到回复时根据<code>syncId</code>向对应的<code>Channel</code>发送回复，<code>send</code>收到这个回复后才会返回。</p>
<h2 dir="auto"><a id="user-content-示例" class="anchor" aria-hidden="true" href="#示例"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>示例</h2>
<h3 dir="auto"><a id="user-content-广播器示例" class="anchor" aria-hidden="true" href="#广播器示例"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>广播器示例</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MiraiBots, MiraiBots.Messages, MiraiBots.Events, MiraiBots.MessageChains
using MiraiBots: Commands, send
broadcaster = MiraiBots.Broadcaster(MiraiBots.HTTPAdapter())
# 匿名函数
MiraiBots.register(broadcaster) do bot, msg::FriendMessage
    chain = msg.messageChain
    send(bot, Commands.sendFriendMessage(
        target = msg.sender.id, quoteId = chain[1].id, 
        messageChain = chain[2:end])) |&gt; println
    throw(MiraiBots.ShutdownBroadcaster())
end
# 命名函数
register(f) = MiraiBots.register(f, broadcaster)
function logger(bot, msg)
    @info &quot;$(now()): $msg&quot;
end |&gt; register
# 启动
MiraiBots.launch(broadcaster, server, qq, key)"><pre><span class="pl-k">using</span> MiraiBots, MiraiBots<span class="pl-k">.</span>Messages, MiraiBots<span class="pl-k">.</span>Events, MiraiBots<span class="pl-k">.</span>MessageChains
<span class="pl-k">using</span> MiraiBots<span class="pl-k">:</span> Commands, send
broadcaster <span class="pl-k">=</span> MiraiBots<span class="pl-k">.</span><span class="pl-c1">Broadcaster</span>(MiraiBots<span class="pl-k">.</span><span class="pl-c1">HTTPAdapter</span>())
<span class="pl-c"><span class="pl-c">#</span> 匿名函数</span>
MiraiBots<span class="pl-k">.</span><span class="pl-c1">register</span>(broadcaster) <span class="pl-k">do</span> bot, msg<span class="pl-k">::</span><span class="pl-c1">FriendMessage</span>
    chain <span class="pl-k">=</span> msg<span class="pl-k">.</span>messageChain
    <span class="pl-c1">send</span>(bot, Commands<span class="pl-k">.</span><span class="pl-c1">sendFriendMessage</span>(
        target <span class="pl-k">=</span> msg<span class="pl-k">.</span>sender<span class="pl-k">.</span>id, quoteId <span class="pl-k">=</span> chain[<span class="pl-c1">1</span>]<span class="pl-k">.</span>id, 
        messageChain <span class="pl-k">=</span> chain[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>])) <span class="pl-k">|&gt;</span> println
    <span class="pl-c1">throw</span>(MiraiBots<span class="pl-k">.</span><span class="pl-c1">ShutdownBroadcaster</span>())
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> 命名函数</span>
<span class="pl-en">register</span>(f) <span class="pl-k">=</span> MiraiBots<span class="pl-k">.</span><span class="pl-c1">register</span>(f, broadcaster)
<span class="pl-k">function</span> <span class="pl-en">logger</span>(bot, msg)
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">now</span>())</span>: <span class="pl-v">$msg</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span> <span class="pl-k">|&gt;</span> register
<span class="pl-c"><span class="pl-c">#</span> 启动</span>
MiraiBots<span class="pl-k">.</span><span class="pl-c1">launch</span>(broadcaster, server, qq, key)</pre></div>
<h3 dir="auto"><a id="user-content-不用广播器示例" class="anchor" aria-hidden="true" href="#不用广播器示例"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>不用广播器示例</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MiraiBots, MiraiBots.Messages, MiraiBots.Events, MiraiBots.MessageChains
using MiraiBots: Commands, send
bot = MiraiBots.HTTPAdapter()
@sync begin
    @async MiraiBots.loop(bot, server, qq, key)
    # 需等待首条消息才算连接到HTTP API
    MiraiBots.receive_or_throw(bot)

    @async for msg in MiraiBots.get_output_channel(bot)
        if msg isa MiraiBots.ExceptionAndBacktrace
            @error &quot;Error occurred in adapter&quot; exception = (msg.exception, msg.backtrace)
        elseif msg isa FriendMessage
            chain = msg.messageChain
            send(bot, Commands.sendFriendMessage(
                target = msg.sender.id, quoteId = chain[1].id, 
                messageChain = chain[2:end])) |&gt; println
        elseif msg isa NewFriendRequestEvent
            send(bot, Commands.resp_newFriendRequestEvent(
                eventId = msg.eventId, fromId = msg.fromId, groupId = msg.groupId, 
                operate = Commands.NewFriendOperations.REFUSE, message = &quot;sorry~&quot;))
        else
            @show msg
        end
    end

    sleep(10)
    close(bot)
end"><pre><span class="pl-k">using</span> MiraiBots, MiraiBots<span class="pl-k">.</span>Messages, MiraiBots<span class="pl-k">.</span>Events, MiraiBots<span class="pl-k">.</span>MessageChains
<span class="pl-k">using</span> MiraiBots<span class="pl-k">:</span> Commands, send
bot <span class="pl-k">=</span> MiraiBots<span class="pl-k">.</span><span class="pl-c1">HTTPAdapter</span>()
<span class="pl-c1">@sync</span> <span class="pl-k">begin</span>
    <span class="pl-c1">@async</span> MiraiBots<span class="pl-k">.</span><span class="pl-c1">loop</span>(bot, server, qq, key)
    <span class="pl-c"><span class="pl-c">#</span> 需等待首条消息才算连接到HTTP API</span>
    MiraiBots<span class="pl-k">.</span><span class="pl-c1">receive_or_throw</span>(bot)

    <span class="pl-c1">@async</span> <span class="pl-k">for</span> msg <span class="pl-k">in</span> MiraiBots<span class="pl-k">.</span><span class="pl-c1">get_output_channel</span>(bot)
        <span class="pl-k">if</span> msg <span class="pl-k">isa</span> MiraiBots<span class="pl-k">.</span>ExceptionAndBacktrace
            <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>Error occurred in adapter<span class="pl-pds">"</span></span> exception <span class="pl-k">=</span> (msg<span class="pl-k">.</span>exception, msg<span class="pl-k">.</span>backtrace)
        <span class="pl-k">elseif</span> msg <span class="pl-k">isa</span> FriendMessage
            chain <span class="pl-k">=</span> msg<span class="pl-k">.</span>messageChain
            <span class="pl-c1">send</span>(bot, Commands<span class="pl-k">.</span><span class="pl-c1">sendFriendMessage</span>(
                target <span class="pl-k">=</span> msg<span class="pl-k">.</span>sender<span class="pl-k">.</span>id, quoteId <span class="pl-k">=</span> chain[<span class="pl-c1">1</span>]<span class="pl-k">.</span>id, 
                messageChain <span class="pl-k">=</span> chain[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>])) <span class="pl-k">|&gt;</span> println
        <span class="pl-k">elseif</span> msg <span class="pl-k">isa</span> NewFriendRequestEvent
            <span class="pl-c1">send</span>(bot, Commands<span class="pl-k">.</span><span class="pl-c1">resp_newFriendRequestEvent</span>(
                eventId <span class="pl-k">=</span> msg<span class="pl-k">.</span>eventId, fromId <span class="pl-k">=</span> msg<span class="pl-k">.</span>fromId, groupId <span class="pl-k">=</span> msg<span class="pl-k">.</span>groupId, 
                operate <span class="pl-k">=</span> Commands<span class="pl-k">.</span>NewFriendOperations<span class="pl-k">.</span>REFUSE, message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sorry~<span class="pl-pds">"</span></span>))
        <span class="pl-k">else</span>
            <span class="pl-c1">@show</span> msg
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    <span class="pl-c1">sleep</span>(<span class="pl-c1">10</span>)
    <span class="pl-c1">close</span>(bot)
<span class="pl-k">end</span></pre></div>
</article></div>