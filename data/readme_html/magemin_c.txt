<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-magemin_cjl" class="anchor" aria-hidden="true" href="#magemin_cjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MAGEMin_C.jl</h1>
<p dir="auto"><a href="https://github.com/ComputationalThermodynamics/MAGEMin_C.jl/actions"><img src="https://github.com/ComputationalThermodynamics/MAGEMin_C.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Julia interface to the MAGEMin C package, which performs thermodynamic equilibrium calculations.
See the <a href="https://github.com/ComputationalThermodynamics/MAGEMin">MAGEMin</a> page for more details on the package &amp; how to use it.</p>
<h2 dir="auto"><a id="user-content-using-the-julia-interface" class="anchor" aria-hidden="true" href="#using-the-julia-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using the julia interface</h2>
<p dir="auto">First install julia. We recommend downloading the official binary from the <a href="julialang.org">julia</a> webpage.</p>
<p dir="auto">Next, install the <code>MAGEMin_C</code> package with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add MAGEMin_C"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add MAGEMin_C</pre></div>
<p dir="auto">You can check if it works on your system by running the build-in test suite:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; test MAGEMin_C"><pre>pkg<span class="pl-k">&gt;</span> test MAGEMin_C</pre></div>
<p dir="auto">By pushing <code>backspace</code> you return from the package manager to the main julia terminal. This will download a compiled version of the library as well as some wrapper functions to your system.</p>
<p dir="auto">Next, you can do calculations with</p>
<h3 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1</h3>
<p dir="auto">This is an example of how to use it for a predefined bulk rock composition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gv, z_b, DB, splx_data      = init_MAGEMin();
julia&gt; test        = 0;
julia&gt; sys_in      = &quot;mol&quot;     #default is mol, if wt is provided conversion will be done internally (MAGEMin works on mol basis)
julia&gt; gv          = use_predefined_bulk_rock(gv, test);
julia&gt; P           = 8.0;
julia&gt; T           = 800.0;
julia&gt; gv.verbose  = -1;        # switch off any verbose
julia&gt; out         = point_wise_minimization(P,T, gv, z_b, DB, splx_data, sys_in)
Pressure          : 8.0      [kbar]
Temperature       : 800.0    [Celcius]
     Stable phase | Fraction (mol 1 atom basis) 
              opx   0.24229 
               ol   0.58808 
              cpx   0.14165 
              spn   0.02798 
     Stable phase | Fraction (wt fraction) 
              opx   0.23908 
               ol   0.58673 
              cpx   0.14583 
              spn   0.02846 
Gibbs free energy : -797.749183  (26 iterations; 94.95 ms)
Oxygen fugacity          : 9.645393319147175e-12"><pre>julia<span class="pl-k">&gt;</span> gv, z_b, DB, splx_data      <span class="pl-k">=</span> <span class="pl-c1">init_MAGEMin</span>();
julia<span class="pl-k">&gt;</span> test        <span class="pl-k">=</span> <span class="pl-c1">0</span>;
julia<span class="pl-k">&gt;</span> sys_in      <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mol<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span>default is mol, if wt is provided conversion will be done internally (MAGEMin works on mol basis)</span>
julia<span class="pl-k">&gt;</span> gv          <span class="pl-k">=</span> <span class="pl-c1">use_predefined_bulk_rock</span>(gv, test);
julia<span class="pl-k">&gt;</span> P           <span class="pl-k">=</span> <span class="pl-c1">8.0</span>;
julia<span class="pl-k">&gt;</span> T           <span class="pl-k">=</span> <span class="pl-c1">800.0</span>;
julia<span class="pl-k">&gt;</span> gv<span class="pl-k">.</span>verbose  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;        <span class="pl-c"><span class="pl-c">#</span> switch off any verbose</span>
julia<span class="pl-k">&gt;</span> out         <span class="pl-k">=</span> <span class="pl-c1">point_wise_minimization</span>(P,T, gv, z_b, DB, splx_data, sys_in)
Pressure          <span class="pl-k">:</span> <span class="pl-c1">8.0</span>      [kbar]
Temperature       <span class="pl-k">:</span> <span class="pl-c1">800.0</span>    [Celcius]
     Stable phase <span class="pl-k">|</span> Fraction (mol <span class="pl-c1">1</span> atom basis) 
              opx   <span class="pl-c1">0.24229</span> 
               ol   <span class="pl-c1">0.58808</span> 
              cpx   <span class="pl-c1">0.14165</span> 
              spn   <span class="pl-c1">0.02798</span> 
     Stable phase <span class="pl-k">|</span> Fraction (wt fraction) 
              opx   <span class="pl-c1">0.23908</span> 
               ol   <span class="pl-c1">0.58673</span> 
              cpx   <span class="pl-c1">0.14583</span> 
              spn   <span class="pl-c1">0.02846</span> 
Gibbs free energy <span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">797.749183</span>  (<span class="pl-c1">26</span> iterations; <span class="pl-c1">94.95</span> ms)
Oxygen fugacity          <span class="pl-k">:</span> <span class="pl-c1">9.645393319147175e-12</span></pre></div>
<h3 dir="auto"><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2</h3>
<p dir="auto">And here a case in which you specify your own bulk rock composition.
We convert that in the correct format, using the <code>convertBulk4MAGEMin</code> function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MAGEMin_C
julia&gt; gv, z_b, DB, splx_data      = init_MAGEMin();
julia&gt; bulk_in_ox = [&quot;SiO2&quot;; &quot;Al2O3&quot;; &quot;CaO&quot;; &quot;MgO&quot;; &quot;FeO&quot;; &quot;Fe2O3&quot;; &quot;K2O&quot;; &quot;Na2O&quot;; &quot;TiO2&quot;; &quot;Cr2O3&quot;; &quot;H2O&quot;];
julia&gt; bulk_in    = [48.43; 15.19; 11.57; 10.13; 6.65; 1.64; 0.59; 1.87; 0.68; 0.0; 3.0];
julia&gt; sys_in     = &quot;wt&quot;
julia&gt; bulk_rock  = convertBulk4MAGEMin(bulk_in,bulk_in_ox,sys_in);
julia&gt; gv         = define_bulk_rock(gv, bulk_rock);
julia&gt; P,T         = 10.0, 1100.0;
julia&gt; gv.verbose  = -1;        # switch off any verbose
julia&gt; out         = point_wise_minimization(P,T, gv, z_b, DB, splx_data, sys_in)
Pressure          : 10.0      [kbar]
Temperature       : 1100.0    [Celcius]
     Stable phase | Fraction (mol 1 atom basis) 
             pl4T   0.01114 
              liq   0.74789 
              cpx   0.21862 
              opx   0.02154 
     Stable phase | Fraction (wt fraction) 
             pl4T   0.01168 
              liq   0.72576 
              cpx   0.23872 
              opx   0.02277 
Gibbs free energy : -907.27887  (47 iterations; 187.11 ms)
Oxygen fugacity          : 0.02411835177808492"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MAGEMin_C
julia<span class="pl-k">&gt;</span> gv, z_b, DB, splx_data      <span class="pl-k">=</span> <span class="pl-c1">init_MAGEMin</span>();
julia<span class="pl-k">&gt;</span> bulk_in_ox <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>SiO2<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>Al2O3<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>CaO<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>MgO<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>FeO<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>Fe2O3<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>K2O<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>Na2O<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>TiO2<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>Cr2O3<span class="pl-pds">"</span></span>; <span class="pl-s"><span class="pl-pds">"</span>H2O<span class="pl-pds">"</span></span>];
julia<span class="pl-k">&gt;</span> bulk_in    <span class="pl-k">=</span> [<span class="pl-c1">48.43</span>; <span class="pl-c1">15.19</span>; <span class="pl-c1">11.57</span>; <span class="pl-c1">10.13</span>; <span class="pl-c1">6.65</span>; <span class="pl-c1">1.64</span>; <span class="pl-c1">0.59</span>; <span class="pl-c1">1.87</span>; <span class="pl-c1">0.68</span>; <span class="pl-c1">0.0</span>; <span class="pl-c1">3.0</span>];
julia<span class="pl-k">&gt;</span> sys_in     <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>wt<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> bulk_rock  <span class="pl-k">=</span> <span class="pl-c1">convertBulk4MAGEMin</span>(bulk_in,bulk_in_ox,sys_in);
julia<span class="pl-k">&gt;</span> gv         <span class="pl-k">=</span> <span class="pl-c1">define_bulk_rock</span>(gv, bulk_rock);
julia<span class="pl-k">&gt;</span> P,T         <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, <span class="pl-c1">1100.0</span>;
julia<span class="pl-k">&gt;</span> gv<span class="pl-k">.</span>verbose  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;        <span class="pl-c"><span class="pl-c">#</span> switch off any verbose</span>
julia<span class="pl-k">&gt;</span> out         <span class="pl-k">=</span> <span class="pl-c1">point_wise_minimization</span>(P,T, gv, z_b, DB, splx_data, sys_in)
Pressure          <span class="pl-k">:</span> <span class="pl-c1">10.0</span>      [kbar]
Temperature       <span class="pl-k">:</span> <span class="pl-c1">1100.0</span>    [Celcius]
     Stable phase <span class="pl-k">|</span> Fraction (mol <span class="pl-c1">1</span> atom basis) 
             pl4T   <span class="pl-c1">0.01114</span> 
              liq   <span class="pl-c1">0.74789</span> 
              cpx   <span class="pl-c1">0.21862</span> 
              opx   <span class="pl-c1">0.02154</span> 
     Stable phase <span class="pl-k">|</span> Fraction (wt fraction) 
             pl4T   <span class="pl-c1">0.01168</span> 
              liq   <span class="pl-c1">0.72576</span> 
              cpx   <span class="pl-c1">0.23872</span> 
              opx   <span class="pl-c1">0.02277</span> 
Gibbs free energy <span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">907.27887</span>  (<span class="pl-c1">47</span> iterations; <span class="pl-c1">187.11</span> ms)
Oxygen fugacity          <span class="pl-k">:</span> <span class="pl-c1">0.02411835177808492</span></pre></div>
<p dir="auto">After the calculation is finished, the structure <code>out</code> holds all the information about the stable assemblage, including seismic velocities, melt content, melt chemistry, densities etc.
You can show a full overview of that with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; print_info(out)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_info</span>(out)</pre></div>
<p dir="auto">If you are interested in the density or seismic velocity at the point,  access it with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; out.rho
3144.282577840362
julia&gt; out.Vp
5.919986959559542"><pre>julia<span class="pl-k">&gt;</span> out<span class="pl-k">.</span>rho
<span class="pl-c1">3144.282577840362</span>
julia<span class="pl-k">&gt;</span> out<span class="pl-k">.</span>Vp
<span class="pl-c1">5.919986959559542</span></pre></div>
<p dir="auto">Once you are done with all calculations, release the memory with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; finalize_MAGEMin(gv,DB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">finalize_MAGEMin</span>(gv,DB)</pre></div>
<h2 dir="auto"><a id="user-content-installing-it-on-hpc-systems" class="anchor" aria-hidden="true" href="#installing-it-on-hpc-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing it on HPC systems</h2>
<p dir="auto">Essentially all high-performance computer systems currently available use MPI versions that are specifically compiled for that system. As a result, you typically have to recompile your code using those MPI libraries for it to work. In the case of <code>MAGEMin</code>, this involves compiling <code>NLopt</code> and using the correct <code>BLAS/LAPACK</code> libraries as well, which can be sometimes cumbersome.</p>
<p dir="auto">Luckily there is a solution thanks to the great work of <code>@eschnett</code> and colleagues, who developed <a href="https://github.com/eschnett/MPItrampoline">MPITrampoline</a> which is an intermediate layer between the HPC-system-specific MPI libraries and the precompiled <code>MAGEMin</code> binaries.</p>
<p dir="auto">It essentially consists of two steps: 1) compile a small package (<a href="https://github.com/eschnett/MPIwrapper">MPIwrapper</a>), and 2) make sure that you download the version of <code>MAGEMin</code> that was compiled versus <code>MPItrampoline</code>.</p>
<p dir="auto">Here step-by-step instructions (for linux, as that is what essentially all HPC systems use):</p>
<ol dir="auto">
<li>Download <a href="https://github.com/eschnett/MPIwrapper">MPIwrapper</a>:</li>
</ol>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$git clone https://github.com/eschnett/MPIwrapper.git 
$cd MPIwrapper"><pre><span class="pl-smi">$git</span> clone https://github.com/eschnett/MPIwrapper.git 
<span class="pl-smi">$cd</span> MPIwrapper</pre></div>
<ol start="2" dir="auto">
<li>Install it after making sure that <code>mpiexec</code> points to the one you want (you may have to load some modules, depending on your system):</li>
</ol>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cmake -S . -B build -DMPIEXEC_EXECUTABLE=mpiexec -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper
cmake --build build
cmake --install build"><pre>cmake -S <span class="pl-c1">.</span> -B build -DMPIEXEC_EXECUTABLE=mpiexec -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=<span class="pl-smi">$HOME</span>/mpiwrapper
cmake --build build
cmake --install build</pre></div>
<p dir="auto">At this stage, <code>MPItrampoline</code> is installed in <code>$HOME/mpiwrapper</code></p>
<ol start="3" dir="auto">
<li>Set the correct wrapper:</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$export MPITRAMPOLINE_LIB=$HOME/mpiwrapper/lib64/libmpiwrapper.so"><pre class="notranslate"><code>$export MPITRAMPOLINE_LIB=$HOME/mpiwrapper/lib64/libmpiwrapper.so
</code></pre></div>
<p dir="auto">Depending on the system it may be called <code>lib</code> instead of <code>lib64</code> (check!).</p>
<ol start="4" dir="auto">
<li>Start julia and install the <code>MPI</code> and <code>MPIPreferences</code> packages:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$julia
julia&gt; ]
pkg&gt;add MPI, MPIPreferences"><pre><span class="pl-k">$</span>julia
julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span>add MPI, MPIPreferences</pre></div>
<ol start="5" dir="auto">
<li>Set the preference to use <code>MPItrampoline</code></li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MPIPreferences; MPIPreferences.use_jll_binary(&quot;MPItrampoline_jll&quot;)
┌ Info: MPIPreferences unchanged
└   binary = &quot;MPItrampoline_jll&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPIPreferences; MPIPreferences<span class="pl-k">.</span><span class="pl-c1">use_jll_binary</span>(<span class="pl-s"><span class="pl-pds">"</span>MPItrampoline_jll<span class="pl-pds">"</span></span>)
┌ Info<span class="pl-k">:</span> MPIPreferences unchanged
└   binary <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MPItrampoline_jll<span class="pl-pds">"</span></span></pre></div>
<ol start="6" dir="auto">
<li>Load <code>MPI</code> and verify it is the correct one</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MPI
julia&gt; MPI.Get_library_version()
&quot;MPIwrapper 2.10.3, using MPIABI 2.9.0, wrapping:\nOpen MPI v4.1.4, package: Open MPI boris@Pluton Distribution, ident: 4.1.4, repo rev: v4.1.4, May 26, 2022&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPI
julia<span class="pl-k">&gt;</span> MPI<span class="pl-k">.</span><span class="pl-c1">Get_library_version</span>()
<span class="pl-s"><span class="pl-pds">"</span>MPIwrapper 2.10.3, using MPIABI 2.9.0, wrapping:<span class="pl-cce">\n</span>Open MPI v4.1.4, package: Open MPI boris@Pluton Distribution, ident: 4.1.4, repo rev: v4.1.4, May 26, 2022<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">After this, restart julia.</p>
<ol start="7" dir="auto">
<li>Now load <code>MAGEMin_jll</code> and check that it uses the <code>mpitrampoline</code> version:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MAGEMin_jll
julia&gt; MAGEMin_jll.host_platform
Linux x86_64 {cxxstring_abi=cxx11, julia_version=1.8.1, libc=glibc, libgfortran_version=5.0.0, mpi=mpitrampoline}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MAGEMin_jll
julia<span class="pl-k">&gt;</span> MAGEMin_jll<span class="pl-k">.</span>host_platform
Linux x86_64 {cxxstring_abi<span class="pl-k">=</span>cxx11, julia_version<span class="pl-k">=</span><span class="pl-c1">1.8</span>.<span class="pl-c1">1</span>, libc<span class="pl-k">=</span>glibc, libgfortran_version<span class="pl-k">=</span><span class="pl-c1">5.0</span>.<span class="pl-c1">0</span>, mpi<span class="pl-k">=</span>mpitrampoline}</pre></div>
<p dir="auto">And you are all set!</p>
</article></div>