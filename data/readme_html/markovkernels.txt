<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-markovkernelsjl" class="anchor" aria-hidden="true" href="#markovkernelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MarkovKernels.jl</h1>
<p dir="auto">A package implementing distributions, Markov kernels, and likelihoods that all play nice with eachother.
The main motivation is to simplify the implementation of Bayesian filtering and smoothing algorithms.
Let <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$\pi(x)$</math-renderer> be a probability distribution and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$k(y\mid x)$</math-renderer> a Markov kernel then only the following operations are required for Bayesian state estimation</p>
<ul dir="auto">
<li>Marginalization:</li>
</ul>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$$
k(y) = \int k(y\mid x) \pi(x) \mathrm{d} x,
$$</math-renderer></p>
<p dir="auto">which gives the prediction step in Bayesian filtering.</p>
<ul dir="auto">
<li>Inverse factorization:</li>
</ul>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$$
k(y\mid x)\pi(x) = \pi(x \mid y) k(y),
$$</math-renderer></p>
<p dir="auto">where evaluation of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$\pi(x \mid y)$</math-renderer> at <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$y$</math-renderer> gives Bayes' rule and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$k(y)$</math-renderer> is the marginal distribution of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$y$</math-renderer> (used for prediction error decomposition of the marginal likelihood). In fact, the prediction step may be implemented with the inverse factorization operation as well, in which case <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8be92457cedf81b14ed2830376cab0c3">$\pi(x\mid y)$</math-renderer> is the backwards kernel used to compute smoothing distributions in the Rauch-Tung-Striebel recursion.
Please see the tutorials in the documentation.</p>
<p dir="auto"><a href="https://filtron.github.io/MarkovKernels.jl/stable/" rel="nofollow"><img src="https://img.shields.io/badge/docs-stable-blue.svg" alt="Stable" style="max-width: 100%;"></a>
<a href="https://filtron.github.io/MarkovKernels.jl/dev/" rel="nofollow"><img src="https://img.shields.io/badge/docs-dev-blue.svg" alt="Dev" style="max-width: 100%;"></a>
<a href="https://github.com/filtron/MarkovKernels.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/filtron/MarkovKernels.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/filtron/MarkovKernels.jl" rel="nofollow"><img src="https://codecov.io/gh/filtron/MarkovKernels.jl/branch/main/graph/badge.svg" alt="Coverage" style="max-width: 100%;"></a></p>
<h2 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add MarkovKernels"><pre>] add MarkovKernels</pre></div>
<h2 dir="auto">
<a id="user-content-package-specific-types" class="anchor" aria-hidden="true" href="#package-specific-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package specific types</h2>
<p dir="auto">Types for representing marginal distributions, Markov kernels, and likelihoods:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type AbstractAffineMap end # used to represent affine conditional means

abstract type AbstractDistribution end
abstract type AbstractMarkovKernel end
abstract type AbstractLikelihood end"><pre><span class="pl-k">abstract type</span> AbstractAffineMap <span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> used to represent affine conditional means</span>

<span class="pl-k">abstract type</span> AbstractDistribution <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> AbstractMarkovKernel <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> AbstractLikelihood <span class="pl-k">end</span></pre></div>
<p dir="auto">Currently, the following concrete types are defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Normal # Vector valued Normal distributons 
Dirac  # Vector valued Dirac distributions 

NormalKernel # Vector valued Normal kernels 
DiracKernel  # Vector valued Dirac kernels 

Likelihood   # AbstractMarkovKernel paired with a measurement "><pre>Normal <span class="pl-c"><span class="pl-c">#</span> Vector valued Normal distributons </span>
Dirac  <span class="pl-c"><span class="pl-c">#</span> Vector valued Dirac distributions </span>

NormalKernel <span class="pl-c"><span class="pl-c">#</span> Vector valued Normal kernels </span>
DiracKernel  <span class="pl-c"><span class="pl-c">#</span> Vector valued Dirac kernels </span>

Likelihood   <span class="pl-c"><span class="pl-c">#</span> AbstractMarkovKernel paired with a measurement </span></pre></div>
<p dir="auto">The following type union is used to represent the (conditional) covariance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const CovarianceParameter{T} = Union{HermOrSym{T},Factorization{T}}"><pre><span class="pl-k">const</span> CovarianceParameter{T} <span class="pl-k">=</span> Union{HermOrSym{T},Factorization{T}}</pre></div>
<p dir="auto">Additionally, the following aliases are defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const AffineNormalKernel{T} = NormalKernel{T,&lt;:AbstractAffineMap,&lt;:CovarianceParameter}
const AffineDiracKernel{T} = DiracKernel{T,&lt;:AbstractAffineMap}"><pre><span class="pl-k">const</span> AffineNormalKernel{T} <span class="pl-k">=</span> NormalKernel{T,<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractAffineMap</span>,<span class="pl-k">&lt;:</span><span class="pl-c1">CovarianceParameter</span>}
<span class="pl-k">const</span> AffineDiracKernel{T} <span class="pl-k">=</span> DiracKernel{T,<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractAffineMap</span>}</pre></div>
<h2 dir="auto">
<a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<p dir="auto">For the purpose of Bayesian state estimation, ideally the following functions are defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="marginalize(D::AbstractDistribution, K::AbstractMarkovKernel)
invert(D::AbstractDistribution, K::AbstractMarkovKernel)
bayes_rule(D::AbstractDistribution, L::AbstractLikelihood)"><pre><span class="pl-c1">marginalize</span>(D<span class="pl-k">::</span><span class="pl-c1">AbstractDistribution</span>, K<span class="pl-k">::</span><span class="pl-c1">AbstractMarkovKernel</span>)
<span class="pl-c1">invert</span>(D<span class="pl-k">::</span><span class="pl-c1">AbstractDistribution</span>, K<span class="pl-k">::</span><span class="pl-c1">AbstractMarkovKernel</span>)
<span class="pl-c1">bayes_rule</span>(D<span class="pl-k">::</span><span class="pl-c1">AbstractDistribution</span>, L<span class="pl-k">::</span><span class="pl-c1">AbstractLikelihood</span>)</pre></div>
<p dir="auto">These are currently implemented for Normal, AffineNormalKernel, AffineDiracKernel.
Additionally, marginalize is implemented for Dirac with respect to the aforementioned kernels.</p>
<p dir="auto">In practice, these functions can not be implemented exactly for a given distribution / Markov kernel pair.
Therefore, it is up to the user to define, when required, appropriate approximations, i.e.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="predict(D::AbstractDistribution, K::AbstractMarkovKernel)
update(D::AbstractDistribution, L::AbstractLikelihood)"><pre><span class="pl-c1">predict</span>(D<span class="pl-k">::</span><span class="pl-c1">AbstractDistribution</span>, K<span class="pl-k">::</span><span class="pl-c1">AbstractMarkovKernel</span>)
<span class="pl-c1">update</span>(D<span class="pl-k">::</span><span class="pl-c1">AbstractDistribution</span>, L<span class="pl-k">::</span><span class="pl-c1">AbstractLikelihood</span>)</pre></div>
<h2 dir="auto">
<a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO:</h2>
<ol dir="auto">
<li>Implement Mixture ditributions / kernels (e.g. for particle filtering).</li>
<li>Normal distributions in information vector / matrix parametrisation.</li>
</ol>
</article></div>