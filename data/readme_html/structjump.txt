<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structjump" class="anchor" aria-hidden="true" href="#structjump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructJuMP</h1>
<p dir="auto">The StructJuMP package provides a parallel algebraic modeling framework for block structured optimization models in Julia. StructJuMP, originally known as StochJuMP, is tailored to two-stage stochastic optimization problems and uses MPI to enable a parallel, distributed memory instantiation of the problem. StructJuMP.jl is an extension of the <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a> package, which is as fast as <a href="http://ampl.com" rel="nofollow">AMPL</a> and faster than any other modeling tools such as <a href="http://www.gams.com" rel="nofollow">GAMS</a> and <a href="http://www.pyomo.org" rel="nofollow">Pyomo</a> (see <a href="http://arxiv.org/pdf/1312.1431.pdf" rel="nofollow">this</a>).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/82c93fe19f9e47b1d19ad4726c75525da740ee64dfcc3440a2eabc2481fb82de/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f5374727563744a754d502f5374727563744a754d502e6a6c3f6c6162656c3d72656c6561736526736f72743d73656d766572"><img src="https://camo.githubusercontent.com/82c93fe19f9e47b1d19ad4726c75525da740ee64dfcc3440a2eabc2481fb82de/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f5374727563744a754d502f5374727563744a754d502e6a6c3f6c6162656c3d72656c6561736526736f72743d73656d766572" alt="GitHub tag (latest SemVer)" data-canonical-src="https://img.shields.io/github/v/tag/StructJuMP/StructJuMP.jl?label=release&amp;sort=semver" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/StructJuMP/StructJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6d4c44e26978ce9025b78d2268cd20b34083f1a08d7bfe4e9e259e64905cd89/68747470733a2f2f7472617669732d63692e6f72672f5374727563744a754d502f5374727563744a754d502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/StructJuMP/StructJuMP.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add StructJuMP"><pre>] add StructJuMP</pre></div>
<h2 dir="auto"><a id="user-content-an-example" class="anchor" aria-hidden="true" href="#an-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>An example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructJuMP

numScen = 2
m = StructuredModel(num_scenarios=numScen)
@variable(m, x[1:2])
@NLconstraint(m, x[1] + x[2] == 100)
@NLobjective(m, Min, x[1]^2 + x[2]^2 + x[1]*x[2])

for i in 1:numScen
    bl = StructuredModel(parent=m, id=i)
    @variable(bl, y[1:2])
    @NLconstraint(bl, x[1] + y[1] + y[2] ≥  0)
    @NLconstraint(bl, x[2] + y[1] + y[2] ≤ 50)
    @NLobjective(bl, Min, y[1]^2 + y[2]^2 + y[1]*y[2])
end"><pre><span class="pl-k">using</span> StructJuMP

numScen <span class="pl-k">=</span> <span class="pl-c1">2</span>
m <span class="pl-k">=</span> <span class="pl-c1">StructuredModel</span>(num_scenarios<span class="pl-k">=</span>numScen)
<span class="pl-c1">@variable</span>(m, x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>])
<span class="pl-c1">@NLconstraint</span>(m, x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> x[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">100</span>)
<span class="pl-c1">@NLobjective</span>(m, Min, x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>])

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>numScen
    bl <span class="pl-k">=</span> <span class="pl-c1">StructuredModel</span>(parent<span class="pl-k">=</span>m, id<span class="pl-k">=</span>i)
    <span class="pl-c1">@variable</span>(bl, y[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>])
    <span class="pl-c1">@NLconstraint</span>(bl, x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">≥</span>  <span class="pl-c1">0</span>)
    <span class="pl-c1">@NLconstraint</span>(bl, x[<span class="pl-c1">2</span>] <span class="pl-k">+</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">≤</span> <span class="pl-c1">50</span>)
    <span class="pl-c1">@NLobjective</span>(bl, Min, y[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y[<span class="pl-c1">1</span>]<span class="pl-k">*</span>y[<span class="pl-c1">2</span>])
<span class="pl-k">end</span></pre></div>
<p dir="auto">The above example builds a two level structured model <code>m</code> with 2 scenarios.</p>
<h2 dir="auto"><a id="user-content-available-solvers-for-structjump" class="anchor" aria-hidden="true" href="#available-solvers-for-structjump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available Solvers for StructJuMP</h2>
<h3 dir="auto"><a id="user-content-nonlinear-solvers" class="anchor" aria-hidden="true" href="#nonlinear-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nonlinear Solvers</h3>
<p dir="auto">Problems modeled in StructJuMP models can be solved in parallel using the <a href="https://github.com/Argonne-National-Laboratory/PIPS">PIPS-NLP</a> parallel optimization solver. In addition, StructJuMP models can be solved (in serial only) using <a href="https://projects.coin-or.org/Ipopt" rel="nofollow">Ipopt</a>. The SturctJuMP models interface with the solvers via <a href="https://github.com/Argonne-National-Laboratory/StructJuMPSolverInterface.jl">StructJuMPSolverInterface.jl</a>.</p>
<h3 dir="auto"><a id="user-content-mixed-integer-solvers" class="anchor" aria-hidden="true" href="#mixed-integer-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mixed-Integer Solvers</h3>
<p dir="auto"><a href="https://github.com/Argonne-National-Laboratory/DSP.git">DSP</a> can read models from StructJuMP via <a href="https://github.com/kibaekkim/DSPopt.jl.git">DSPopt.jl</a>. In particular, <code>DSP</code> can solver problems with integer variables in parallel.</p>
<h3 dir="auto"><a id="user-content-stochastic-dual-dynamic-programming-sddp" class="anchor" aria-hidden="true" href="#stochastic-dual-dynamic-programming-sddp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stochastic Dual Dynamic Programming (SDDP)</h3>
<p dir="auto"><a href="https://github.com/blegat/StructDualDynProg.jl">StructDualDynProg</a> can run the SDDP algorithm on multi-stage models from StructJuMP.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">StructJuMP has been developed under the financial support of Department of Energy (DOE), Office of Advanced Scientific Computing Research, Office of Electricity Delivery and Energy Reliability, and Grid Modernization Laboratory Consortium (GMLC) (PIs: Cosmin G. Petra, Lawrence Livermore National Laboratory and Mihai Anitescu, Argonne National Laboratory).</p>
</article></div>