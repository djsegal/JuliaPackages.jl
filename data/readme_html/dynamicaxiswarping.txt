<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dynamicaxiswarpingjl" class="anchor" aria-hidden="true" href="#dynamicaxiswarpingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DynamicAxisWarping.jl</h1>
<p><a href="https://github.com/baggepinnen/DynamicAxisWarping.jl/actions"><img src="https://github.com/baggepinnen/DynamicAxisWarping.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/DynamicAxisWarping.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/424b35397cf4ffc54e4beb2f04d68858a99760c3ea5491319b256caf55be6368/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f44796e616d69634178697357617270696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/DynamicAxisWarping.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/docs/DynamicAxisWarping/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation, latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>Dynamic Time Warping (DTW), matrix profile and related algorithms in Julia.</p>
<p>This package supports arbitrary metrics and arbitrary "spaces", i.e., as long as you are passing a vector or higher dimensional array of something that your distance can operate on, you're good to go. Time is always considered to be the last dimension.</p>
<p>This package is registered and can be installed with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add DynamicAxisWarping&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add DynamicAxisWarping<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-simple-usage" class="anchor" aria-hidden="true" href="#simple-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple usage</h2>
<p>Inputs of dimension larger than 1 will be treated as sequences where time is in the last dimension. When using higher-dimensional series, make sure the provided distance accepts them.</p>
<p>Any distance implementing the <a href="https://github.com/JuliaStats/Distances.jl">Distances.jl</a> interface works, as well as functions on the form <code>dist(x,y) -&gt; ‚Ñù</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DynamicAxisWarping, Distances, Plots
cost, i1, i2 = dtw(a,b, [dist=SqEuclidean()]; transportcost = 1)
cost, i1, i2 = fastdtw(a,b, dist, radius) # note https://arxiv.org/abs/2003.11246
cost = dtw_cost(a, b, dist, radius) # Optimized method that only returns cost. Supports early stopping, see docstring. Can be made completely allocation free.

# dtw supports arbitrary upper and lower bound vectors constraining the warping path.
imin,imax = radiuslimits(5,20,20), plot([imin imax])
dtw(a, b, dist, imin, imax) # Cost equivalent to dtw_cost(a, b, dist, 5)

# The Distances.jl interface is supported
d = DTW(radius=5)
d(a,b)
"><pre><span class="pl-k">using</span> DynamicAxisWarping, Distances, Plots
cost, i1, i2 <span class="pl-k">=</span> <span class="pl-c1">dtw</span>(a,b, [dist<span class="pl-k">=</span><span class="pl-c1">SqEuclidean</span>()]; transportcost <span class="pl-k">=</span> <span class="pl-c1">1</span>)
cost, i1, i2 <span class="pl-k">=</span> <span class="pl-c1">fastdtw</span>(a,b, dist, radius) <span class="pl-c"><span class="pl-c">#</span> note https://arxiv.org/abs/2003.11246</span>
cost <span class="pl-k">=</span> <span class="pl-c1">dtw_cost</span>(a, b, dist, radius) <span class="pl-c"><span class="pl-c">#</span> Optimized method that only returns cost. Supports early stopping, see docstring. Can be made completely allocation free.</span>

<span class="pl-c"><span class="pl-c">#</span> dtw supports arbitrary upper and lower bound vectors constraining the warping path.</span>
imin,imax <span class="pl-k">=</span> <span class="pl-c1">radiuslimits</span>(<span class="pl-c1">5</span>,<span class="pl-c1">20</span>,<span class="pl-c1">20</span>), <span class="pl-c1">plot</span>([imin imax])
<span class="pl-c1">dtw</span>(a, b, dist, imin, imax) <span class="pl-c"><span class="pl-c">#</span> Cost equivalent to dtw_cost(a, b, dist, 5)</span>

<span class="pl-c"><span class="pl-c">#</span> The Distances.jl interface is supported</span>
d <span class="pl-k">=</span> <span class="pl-c1">DTW</span>(radius<span class="pl-k">=</span><span class="pl-c1">5</span>)
<span class="pl-c1">d</span>(a,b)</pre></div>
<h2><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plotting</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dtwplot(a, b, [dist=SqEuclidean()]; transportcost = 1)
matchplot(a, b, [dist=SqEuclidean()])
"><pre><span class="pl-c1">dtwplot</span>(a, b, [dist<span class="pl-k">=</span><span class="pl-c1">SqEuclidean</span>()]; transportcost <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">matchplot</span>(a, b, [dist<span class="pl-k">=</span><span class="pl-c1">SqEuclidean</span>()])</pre></div>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DynamicAxisWarping, Plots

fs = 70
t  = range(0,stop=1,step=1/fs)
y0 = sin.(2pi .*t)
y1 = sin.(3pi .*t)
y  = [y0;y1[2:end]] .+ 0.01 .* randn.()
q  = [y0;y0[2:end]] .+ 0.01 .* randn.()
y[10:15] .+= 0.5
q[13:25] .+= 0.5

f1 = plot([q y])
f2 = dtwplot(q,y,lc=:green, lw=1)
f3 = matchplot(q,y,ds=3,separation=1)
plot(f1,f2,f3, legend=false, layout=3, grid=false)
"><pre><span class="pl-k">using</span> DynamicAxisWarping, Plots

fs <span class="pl-k">=</span> <span class="pl-c1">70</span>
t  <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,stop<span class="pl-k">=</span><span class="pl-c1">1</span>,step<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>fs)
y0 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi <span class="pl-k">.*</span>t)
y1 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">3</span>pi <span class="pl-k">.*</span>t)
y  <span class="pl-k">=</span> [y0;y1[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]] <span class="pl-k">.+</span> <span class="pl-c1">0.01</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.()
q  <span class="pl-k">=</span> [y0;y0[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]] <span class="pl-k">.+</span> <span class="pl-c1">0.01</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.()
y[<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">15</span>] <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">0.5</span>
q[<span class="pl-c1">13</span><span class="pl-k">:</span><span class="pl-c1">25</span>] <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">0.5</span>

f1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>([q y])
f2 <span class="pl-k">=</span> <span class="pl-c1">dtwplot</span>(q,y,lc<span class="pl-k">=</span><span class="pl-c1">:green</span>, lw<span class="pl-k">=</span><span class="pl-c1">1</span>)
f3 <span class="pl-k">=</span> <span class="pl-c1">matchplot</span>(q,y,ds<span class="pl-k">=</span><span class="pl-c1">3</span>,separation<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot</span>(f1,f2,f3, legend<span class="pl-k">=</span><span class="pl-c1">false</span>, layout<span class="pl-k">=</span><span class="pl-c1">3</span>, grid<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="examples/doppler.svg"><img src="examples/doppler.svg" alt="figure" style="max-width:100%;"></a></p>
<h2><a id="user-content-find-a-short-pattern-in-a-long-time-series" class="anchor" aria-hidden="true" href="#find-a-short-pattern-in-a-long-time-series"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Find a short pattern in a long time series</h2>
<p>The function <code>dtwnn</code> searches for a pattern in a long time series. By default, it <em>does not normalize</em> the data over each window, to do this, pass, e.g., <code>ZNormalizer</code> as the fifth argument.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DynamicAxisWarping, Distances
radius = 5
a      = sin.(0.1 .* (1:100))     .+ 0.1 .* randn.()
b      = sin.(0.1 .* (1:100_000)) .+ 0.1 .* randn.()
res    = dtwnn(a, b, SqEuclidean(), radius, saveall=false, bsf_multiplier=1) # takes &lt; 0.1s # DynamicAxisWarping.DTWSearchResult(0.4625287975222824, 73452, (prune_end = 79108, prune_env = 0))
plot([a b[eachindex(a) .+ (res.loc-1)]])
"><pre><span class="pl-k">using</span> DynamicAxisWarping, Distances
radius <span class="pl-k">=</span> <span class="pl-c1">5</span>
a      <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">0.1</span> <span class="pl-k">.*</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>))     <span class="pl-k">.+</span> <span class="pl-c1">0.1</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.()
b      <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">0.1</span> <span class="pl-k">.*</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100_000</span>)) <span class="pl-k">.+</span> <span class="pl-c1">0.1</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.()
res    <span class="pl-k">=</span> <span class="pl-c1">dtwnn</span>(a, b, <span class="pl-c1">SqEuclidean</span>(), radius, saveall<span class="pl-k">=</span><span class="pl-c1">false</span>, bsf_multiplier<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> takes &lt; 0.1s # DynamicAxisWarping.DTWSearchResult(0.4625287975222824, 73452, (prune_end = 79108, prune_env = 0))</span>
<span class="pl-c1">plot</span>([a b[<span class="pl-c1">eachindex</span>(a) <span class="pl-k">.+</span> (res<span class="pl-k">.</span>loc<span class="pl-k">-</span><span class="pl-c1">1</span>)]])</pre></div>
<ul>
<li><code>saveall</code> causes the entire distance profile to be computed. This will take longer time to compute. It is stored in <code>res.dists</code>.</li>
<li><code>bsf_multiplier = 1</code>: If &gt; 1, require lower bound to exceed <code>bsf_multiplier*best_so_far</code>. This allows you to find several nearby points without having to compute the entire distance profile.</li>
<li>Available normalizers are: <code>ZNormalizer, DiagonalZNormalizer, NormNormalizer</code></li>
</ul>
<h3><a id="user-content-multi-threaded-search" class="anchor" aria-hidden="true" href="#multi-threaded-search"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multi-threaded search</h3>
<p>Below is an example of how several long series <code>y ‚àà Y</code> can be searched for the occurance of query <code>q</code> in a multithreaded fashion, using <code>tmap</code> from <a href="https://github.com/baggepinnen/ThreadTools.jl">ThreadTools.jl</a>. In this example, we first create a unique workspace object for each thread to save on allocations</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ThreadTools
const workspaces = map(1:Threads.nthreads()) do i
    DTWWorkspace(q, dist, radius)
end
@time results = tmap(Y) do y
    dtwnn(workspaces[Threads.threadid()], y, showprogress = false)
end
mincost, minind = findmin(results) # special method for Vector{DTWSearchResult}
"><pre><span class="pl-k">using</span> ThreadTools
<span class="pl-k">const</span> workspaces <span class="pl-k">=</span> <span class="pl-c1">map</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>()) <span class="pl-k">do</span> i
    <span class="pl-c1">DTWWorkspace</span>(q, dist, radius)
<span class="pl-k">end</span>
<span class="pl-c1">@time</span> results <span class="pl-k">=</span> <span class="pl-c1">tmap</span>(Y) <span class="pl-k">do</span> y
    <span class="pl-c1">dtwnn</span>(workspaces[Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>()], y, showprogress <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-k">end</span>
mincost, minind <span class="pl-k">=</span> <span class="pl-c1">findmin</span>(results) <span class="pl-c"><span class="pl-c">#</span> special method for Vector{DTWSearchResult}</span></pre></div>
<h3><a id="user-content-optimizations" class="anchor" aria-hidden="true" href="#optimizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optimizations</h3>
<p>The following optimizations are implemented.</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Endpoint lower bound pruning</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Envelope lower bound pruning</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> DTW early termination</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Online normalization (see <code>ZNormalizer</code>)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Sorting of query series</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> All algorithms operate on arbitrary precision numbers. If you pass them <code>Float32</code> instead of <code>Float64</code>, they can become up to twice as fast.</li>
</ul>
<p><code>dtwnn</code> is fairly performant, below is a small benchmark performed on a 2014 laptop</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = sin.(0.1f0 .* (1:100))    .+ 0.1f0 .* randn.(Float32)
b = sin.(0.1f0 .* (1:1000_000)) .+ 0.1f0 .* randn.(Float32)
@btime dtwnn($a, $b, SqEuclidean(), 5, ZNormalizer, prune_endpoints = true, prune_envelope = true)
# 853.336 ms (25519 allocations: 5.00 MiB)
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">0.1f0</span> <span class="pl-k">.*</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>))    <span class="pl-k">.+</span> <span class="pl-c1">0.1f0</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.(Float32)
b <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">0.1f0</span> <span class="pl-k">.*</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000_000</span>)) <span class="pl-k">.+</span> <span class="pl-c1">0.1f0</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.(Float32)
<span class="pl-c1">@btime</span> <span class="pl-c1">dtwnn</span>(<span class="pl-k">$</span>a, <span class="pl-k">$</span>b, <span class="pl-c1">SqEuclidean</span>(), <span class="pl-c1">5</span>, ZNormalizer, prune_endpoints <span class="pl-k">=</span> <span class="pl-c1">true</span>, prune_envelope <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c"><span class="pl-c">#</span> 853.336 ms (25519 allocations: 5.00 MiB)</span></pre></div>
<h2><a id="user-content-differentiable-soft-dtw" class="anchor" aria-hidden="true" href="#differentiable-soft-dtw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Differentiable Soft-DTW</h2>
<p>The <a href="https://arxiv.org/pdf/1703.01541.pdf" rel="nofollow">Soft-DTW</a> algorithm is provided through the function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="soft_dtw_cost(a, b, [SqEuclidean()]; Œ≥ = 1, transportcost = 1)
"><pre><span class="pl-c1">soft_dtw_cost</span>(a, b, [<span class="pl-c1">SqEuclidean</span>()]; Œ≥ <span class="pl-k">=</span> <span class="pl-c1">1</span>, transportcost <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<p><code>Œ≥</code> is the smoothing parameters and a smaller value of <code>Œ≥</code> makes the distance closer to the standard DTW distance.</p>
<p>To differentiate w.r.t. the first argument, try</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ReverseDiff
da = ReverseDiff.gradient(a-&gt;soft_dtw_cost(a,b; Œ≥=1), a)
"><pre><span class="pl-k">using</span> ReverseDiff
da <span class="pl-k">=</span> ReverseDiff<span class="pl-k">.</span><span class="pl-c1">gradient</span>(a<span class="pl-k">-&gt;</span><span class="pl-c1">soft_dtw_cost</span>(a,b; Œ≥<span class="pl-k">=</span><span class="pl-c1">1</span>), a)</pre></div>
<p>Zygote.jl will not work due to the array-mutation limitation.
See also function <code>soft_dtw_cost_matrix</code>.</p>
<p>The following <a href="https://github.com/baggepinnen/DynamicAxisWarping.jl/blob/master/examples/softDTW.jl">example</a> illustrates how to calculate a barycenter (generalized average) using Soft DTW and <a href="https://github.com/JuliaNLSolvers/Optim.jl">Optim.jl</a>, the result is shown below, together with three instances of the input series</p>
<p><a target="_blank" rel="noopener noreferrer" href="examples/barycenter.svg"><img src="examples/barycenter.svg" alt="barycenter" style="max-width:100%;"></a></p>
<h2><a id="user-content-generalized-dtw" class="anchor" aria-hidden="true" href="#generalized-dtw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Generalized DTW</h2>
<p>The <code>gdtw</code> function implements the algorithm from <a href="https://arxiv.org/abs/1905.12893" rel="nofollow"><em>A General Optimization Framework for Dynamic Time Warping</em></a>, which takes two continuous-time signals <code>x</code> and <code>y</code> on the interval <code>[0,1]</code>, and warps them by means of warping functions <code>œï, œà</code>, so that <code>x ‚àò œï ‚âà y ‚àò œà</code>, where either
<code>œà(s) = 2s - œï(s)</code> (both signals warped symmetrically, the default), or <code>œà(s)=s</code> (only the <code>x</code> signal is warped). The method allows regularization by imposing penalties on <code>œï(t) - t</code> (the "cumulative warping") and on <code>œï'(t) - 1</code> (the "instantaneous warping").</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LinearAlgebra
ts = range(0, stop=4œÄ, length=128)
x = LinearInterpolation(sin.(ts) .+ 0.1 .* randn.())
y = LinearInterpolation(sin.(1.1 .* ts))

norm(x.(ts) - y.(ts)) # 1.7184237220575787

cost, œï, œà = gdtw(x,y)

norm(x.(œï.(ts)) - y.(œà.(ts))) # 0.9266090849096682

"><pre><span class="pl-k">using</span> LinearAlgebra
ts <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span><span class="pl-c1">4</span>œÄ, length<span class="pl-k">=</span><span class="pl-c1">128</span>)
x <span class="pl-k">=</span> <span class="pl-c1">LinearInterpolation</span>(<span class="pl-c1">sin</span>.(ts) <span class="pl-k">.+</span> <span class="pl-c1">0.1</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.())
y <span class="pl-k">=</span> <span class="pl-c1">LinearInterpolation</span>(<span class="pl-c1">sin</span>.(<span class="pl-c1">1.1</span> <span class="pl-k">.*</span> ts))

<span class="pl-c1">norm</span>(<span class="pl-c1">x</span>.(ts) <span class="pl-k">-</span> <span class="pl-c1">y</span>.(ts)) <span class="pl-c"><span class="pl-c">#</span> 1.7184237220575787</span>

cost, œï, œà <span class="pl-k">=</span> <span class="pl-c1">gdtw</span>(x,y)

<span class="pl-c1">norm</span>(<span class="pl-c1">x</span>.(<span class="pl-c1">œï</span>.(ts)) <span class="pl-k">-</span> <span class="pl-c1">y</span>.(<span class="pl-c1">œà</span>.(ts))) <span class="pl-c"><span class="pl-c">#</span> 0.9266090849096682</span>
</pre></div>
<h2><a id="user-content-clustering-and-barycenter-averaging" class="anchor" aria-hidden="true" href="#clustering-and-barycenter-averaging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clustering and barycenter averaging</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="barycenter = dba(vector_of_arrays)
result     = dbaclust(data, nclust, DTW())
"><pre>barycenter <span class="pl-k">=</span> <span class="pl-c1">dba</span>(vector_of_arrays)
result     <span class="pl-k">=</span> <span class="pl-c1">dbaclust</span>(data, nclust, <span class="pl-c1">DTW</span>())</pre></div>
<p>Note that <code>dba</code> is known to not always produce the best barycenters. See, e.g., <code>soft_dtw_cost</code> above and <a href="https://arxiv.org/pdf/1703.01541.pdf" rel="nofollow">"Soft-DTW: a Differentiable Loss Function for Time-Series"</a> or <a href="https://arxiv.org/pdf/1910.03860.pdf" rel="nofollow">"Spatio-Temporal Alignments: Optimal transport through space and time"</a> for a method that produces better barycenters at the expense of a much higher computational cost.</p>
<h2><a id="user-content-sparse-distance-matrix" class="anchor" aria-hidden="true" href="#sparse-distance-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sparse distance matrix</h2>
<p>The early termination and some of the stopping heuristics can be used to efficiently calculate a sparse distance matrix where only the k nearest neighbors are fully caluclated and stored. To this end, we have the function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dists, inds = sparse_distmat(y::Vector{Vector}, k, dist, radius)
"><pre>dists, inds <span class="pl-k">=</span> <span class="pl-c1">sparse_distmat</span>(y<span class="pl-k">::</span><span class="pl-c1">Vector{Vector}</span>, k, dist, radius)</pre></div>
<h2><a id="user-content-matrix-profile" class="anchor" aria-hidden="true" href="#matrix-profile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Matrix Profile</h2>
<p>This package defines specialized methods for <a href="https://github.com/baggepinnen/MatrixProfile.jl"><code>MatrixProfile</code></a><code>.matrix_profile</code>, making use of early stopping to accelerate the computation of the matrix profile. The interface is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="profile = matrix_profile(y, m, DTW(radius, [transportcost]))
"><pre>profile <span class="pl-k">=</span> <span class="pl-c1">matrix_profile</span>(y, m, <span class="pl-c1">DTW</span>(radius, [transportcost]))</pre></div>
<h2><a id="user-content-transportcost" class="anchor" aria-hidden="true" href="#transportcost"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>transportcost</code></h2>
<p><code>transportcost</code> adds an additional penalty multiplier for "transporting", i.e., deviations from the Euclidean matching. The standard DTW distance does not consider this added cost and the default is 1. A value greater than 1 multiplies the cost of moving horizontally or vertically in the coupling matrix, promoting a diagonal move, corresponding to the standard Euclidean matching. The influence of the transport cost can be visualized with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = sin.(1:100); b = sin.(1:100) .+ randn.();
dtwplot(a,b, transportcost=1)    # Default
dtwplot(a,b, transportcost=1.01) # Should be &quot;more diagonal&quot;
dtwplot(a,b, transportcost=1.1)  # Should be almost completely diagonal
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>); b <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>) <span class="pl-k">.+</span> <span class="pl-c1">randn</span>.();
<span class="pl-c1">dtwplot</span>(a,b, transportcost<span class="pl-k">=</span><span class="pl-c1">1</span>)    <span class="pl-c"><span class="pl-c">#</span> Default</span>
<span class="pl-c1">dtwplot</span>(a,b, transportcost<span class="pl-k">=</span><span class="pl-c1">1.01</span>) <span class="pl-c"><span class="pl-c">#</span> Should be "more diagonal"</span>
<span class="pl-c1">dtwplot</span>(a,b, transportcost<span class="pl-k">=</span><span class="pl-c1">1.1</span>)  <span class="pl-c"><span class="pl-c">#</span> Should be almost completely diagonal</span></pre></div>
<p>You can try a <code>transportcost &lt; 1</code> as well, but then it is preferable to make weird alignments and I'm not sure how much sense that would make.</p>
<p>See also the keyword argument <code>postprocess</code> that allows you to pass a function <code>D-&gt;f(D)</code> that is used to filter/post-process the cost matrix. Low-pass filtering can be used to effectively remove small-scale warping.</p>
<h2><a id="user-content-combine-with-optimal-transport" class="anchor" aria-hidden="true" href="#combine-with-optimal-transport"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Combine with optimal transport</h2>
<p>The distance between two datapoints can be any distance supporting the <a href="https://github.com/JuliaStats/Distances.jl/">Distances.jl</a> interface.</p>
<p>See the file <a href="https://github.com/baggepinnen/DynamicAxisWarping.jl/blob/master/examples/frequency_warping.jl"><code>frequency_warping.jl</code></a> (<a href="https://nbviewer.jupyter.org/github/baggepinnen/julia_examples/blob/master/frequency_warping.ipynb" rel="nofollow">notebook</a>) for an example combining dynamic time warping with optimal transport along the frequency axis for spectrograms. This example makes use of <a href="https://github.com/baggepinnen/SpectralDistances.jl">SpectralDistances.jl</a>.</p>
<h2><a id="user-content-distancesjl-interface" class="anchor" aria-hidden="true" href="#distancesjl-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Distances.jl interface</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="d = DTW(radius=radius, dist=SqEuclidean()) # Or FastDTW / SoftDTW
d(a,b)
"><pre>d <span class="pl-k">=</span> <span class="pl-c1">DTW</span>(radius<span class="pl-k">=</span>radius, dist<span class="pl-k">=</span><span class="pl-c1">SqEuclidean</span>()) <span class="pl-c"><span class="pl-c">#</span> Or FastDTW / SoftDTW</span>
<span class="pl-c1">d</span>(a,b)</pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>This package is a fork of <a href="https://github.com/ahwillia/TimeWarp.jl">https://github.com/ahwillia/TimeWarp.jl</a> which is no longer maintained.</p>
<p>Special thanks to Joseph Fowler (<a href="https://github.com/joefowler">@joefowler</a>) who contributed a substantial portion of the initial code for TimeWarp.jl</p>
</article></div>