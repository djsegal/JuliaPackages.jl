<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sequentialsamplingmodels" class="anchor" aria-hidden="true" href="#sequentialsamplingmodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SequentialSamplingModels</h1>
<p dir="auto">This package is a collection of sequential sampling models and is based on the Distributions.jl API.
The examples below show basic usage. Addition information can be found in the REPL with the help function, e.i., <code>? LNR</code>.</p>
<h2 dir="auto"><a id="user-content-lognormal-race-model" class="anchor" aria-hidden="true" href="#lognormal-race-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lognormal Race Model</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
dist = LNR(μ=[-2,-3], σ=1.0, ϕ=.3)
data = rand(dist, 10)
like = pdf.(dist, data)
loglike = logpdf.(dist, data)"><pre><span class="pl-k">using</span> SequentialSamplingModels
dist <span class="pl-k">=</span> <span class="pl-c1">LNR</span>(μ<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">3</span>], σ<span class="pl-k">=</span><span class="pl-c1">1.0</span>, ϕ<span class="pl-k">=</span>.<span class="pl-c1">3</span>)
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dist, <span class="pl-c1">10</span>)
like <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(dist, data)
loglike <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>.(dist, data)</pre></div>
<h2 dir="auto"><a id="user-content-linear-ballistic-accumulator" class="anchor" aria-hidden="true" href="#linear-ballistic-accumulator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Ballistic Accumulator</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
dist = LBA(ν=[3.0,2.0], A = .8, k = .2, τ = .3) 
choice,rt = rand(dist, 10)
like = pdf.(dist, choice, rt)
loglike = logpdf.(dist, choice, rt)"><pre><span class="pl-k">using</span> SequentialSamplingModels
dist <span class="pl-k">=</span> <span class="pl-c1">LBA</span>(ν<span class="pl-k">=</span>[<span class="pl-c1">3.0</span>,<span class="pl-c1">2.0</span>], A <span class="pl-k">=</span> .<span class="pl-c1">8</span>, k <span class="pl-k">=</span> .<span class="pl-c1">2</span>, τ <span class="pl-k">=</span> .<span class="pl-c1">3</span>) 
choice,rt <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dist, <span class="pl-c1">10</span>)
like <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(dist, choice, rt)
loglike <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>.(dist, choice, rt)</pre></div>
<h2 dir="auto"><a id="user-content-shifted-wald" class="anchor" aria-hidden="true" href="#shifted-wald"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Shifted Wald</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
dist = Wald(ν=3.0, α=.5, θ=.130)
rt = rand(dist, 10)
like = pdf.(dist, rt)
loglike = logpdf.(dist, rt)"><pre><span class="pl-k">using</span> SequentialSamplingModels
dist <span class="pl-k">=</span> <span class="pl-c1">Wald</span>(ν<span class="pl-k">=</span><span class="pl-c1">3.0</span>, α<span class="pl-k">=</span>.<span class="pl-c1">5</span>, θ<span class="pl-k">=</span>.<span class="pl-c1">130</span>)
rt <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dist, <span class="pl-c1">10</span>)
like <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(dist, rt)
loglike <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>.(dist, rt)</pre></div>
<h2 dir="auto"><a id="user-content-wald-mixture" class="anchor" aria-hidden="true" href="#wald-mixture"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Wald Mixture</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
dist = WaldMixture(ν=3.0, σ=.2, α=.5, θ=.130)
rt = rand(dist, 10)
like = pdf.(dist, rt)
loglike = logpdf.(dist, rt)"><pre><span class="pl-k">using</span> SequentialSamplingModels
dist <span class="pl-k">=</span> <span class="pl-c1">WaldMixture</span>(ν<span class="pl-k">=</span><span class="pl-c1">3.0</span>, σ<span class="pl-k">=</span>.<span class="pl-c1">2</span>, α<span class="pl-k">=</span>.<span class="pl-c1">5</span>, θ<span class="pl-k">=</span>.<span class="pl-c1">130</span>)
rt <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dist, <span class="pl-c1">10</span>)
like <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(dist, rt)
loglike <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>.(dist, rt)</pre></div>
<h2 dir="auto"><a id="user-content-racing-diffusion-model" class="anchor" aria-hidden="true" href="#racing-diffusion-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Racing Diffusion Model</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
dist = DiffusionRace(;ν=[1.0,.5], k=0.5, A=1.0, θ=.2)
data = rand(dist, 10)
like = pdf.(dist, data)
loglike = logpdf.(dist, data)"><pre><span class="pl-k">using</span> SequentialSamplingModels
dist <span class="pl-k">=</span> <span class="pl-c1">DiffusionRace</span>(;ν<span class="pl-k">=</span>[<span class="pl-c1">1.0</span>,.<span class="pl-c1">5</span>], k<span class="pl-k">=</span><span class="pl-c1">0.5</span>, A<span class="pl-k">=</span><span class="pl-c1">1.0</span>, θ<span class="pl-k">=</span>.<span class="pl-c1">2</span>)
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dist, <span class="pl-c1">10</span>)
like <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(dist, data)
loglike <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>.(dist, data)</pre></div>
<h2 dir="auto"><a id="user-content-attentional-diffusion-model" class="anchor" aria-hidden="true" href="#attentional-diffusion-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Attentional Diffusion Model</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
using StatsBase

mutable struct Transition
    state::Int 
    n::Int
    mat::Array{Float64,2} 
 end

 function Transition(mat)
    n = size(mat,1)
    state = rand(1:n)
    return Transition(state, n, mat)
 end
 
 function attend(transition)
     (;mat,n,state) = transition
     w = mat[state,:]
     next_state = sample(1:n, Weights(w))
     transition.state = next_state
     return next_state
 end

 model = AttentionalDiffusion()
 
 tmat = Transition([.98 .015 .005;
                    .015 .98 .005;
                    .45 .45 .1])

 rts = rand(model, 1000, attend, tmat)"><pre><span class="pl-k">using</span> SequentialSamplingModels
<span class="pl-k">using</span> StatsBase

<span class="pl-k">mutable struct</span> Transition
    state<span class="pl-k">::</span><span class="pl-c1">Int</span> 
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>
    mat<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span> 
 <span class="pl-k">end</span>

 <span class="pl-k">function</span> <span class="pl-en">Transition</span>(mat)
    n <span class="pl-k">=</span> <span class="pl-c1">size</span>(mat,<span class="pl-c1">1</span>)
    state <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n)
    <span class="pl-k">return</span> <span class="pl-c1">Transition</span>(state, n, mat)
 <span class="pl-k">end</span>
 
 <span class="pl-k">function</span> <span class="pl-en">attend</span>(transition)
     (;mat,n,state) <span class="pl-k">=</span> transition
     w <span class="pl-k">=</span> mat[state,:]
     next_state <span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n, <span class="pl-c1">Weights</span>(w))
     transition<span class="pl-k">.</span>state <span class="pl-k">=</span> next_state
     <span class="pl-k">return</span> next_state
 <span class="pl-k">end</span>

 model <span class="pl-k">=</span> <span class="pl-c1">AttentionalDiffusion</span>()
 
 tmat <span class="pl-k">=</span> <span class="pl-c1">Transition</span>([.<span class="pl-c1">98</span> .<span class="pl-c1">015</span> .<span class="pl-c1">005</span>;
                    .<span class="pl-c1">015</span> .<span class="pl-c1">98</span> .<span class="pl-c1">005</span>;
                    .<span class="pl-c1">45</span> .<span class="pl-c1">45</span> .<span class="pl-c1">1</span>])

 rts <span class="pl-k">=</span> <span class="pl-c1">rand</span>(model, <span class="pl-c1">1000</span>, attend, tmat)</pre></div>
<h1 dir="auto"><a id="user-content-multiattribute-attentional-drift-diffusion" class="anchor" aria-hidden="true" href="#multiattribute-attentional-drift-diffusion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiattribute Attentional Drift Diffusion</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SequentialSamplingModels
using StatsBase

model = maaDDM()

mutable struct Transition
   state::Int 
   n::Int
   mat::Array{Float64,2} 
end

function Transition(mat)
   n = size(mat,1)
   state = rand(1:n)
   return Transition(state, n, mat)
end

function attend(transition)
    (;mat,n,state) = transition
    w = mat[state,:]
    next_state = sample(1:n, Weights(w))
    transition.state = next_state
    return next_state
end

# transition within alternatives.
# columns 
# 1. alternative 1, attribute 1
# 2. alternative 1, attribute 2
# 3. alternative 2, attribute 1
# 4. alternative 2, attribute 2
tmat = Transition([.98 .015 .0025 .0025;
                   .015 .98 .0025 .0025;
                   .0025 .0025 .98 .015;
                   .0025 .0025 .015 .98])

rts = rand(model, 1000, attend, tmat)"><pre><span class="pl-k">using</span> SequentialSamplingModels
<span class="pl-k">using</span> StatsBase

model <span class="pl-k">=</span> <span class="pl-c1">maaDDM</span>()

<span class="pl-k">mutable struct</span> Transition
   state<span class="pl-k">::</span><span class="pl-c1">Int</span> 
   n<span class="pl-k">::</span><span class="pl-c1">Int</span>
   mat<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span> 
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Transition</span>(mat)
   n <span class="pl-k">=</span> <span class="pl-c1">size</span>(mat,<span class="pl-c1">1</span>)
   state <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n)
   <span class="pl-k">return</span> <span class="pl-c1">Transition</span>(state, n, mat)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">attend</span>(transition)
    (;mat,n,state) <span class="pl-k">=</span> transition
    w <span class="pl-k">=</span> mat[state,:]
    next_state <span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n, <span class="pl-c1">Weights</span>(w))
    transition<span class="pl-k">.</span>state <span class="pl-k">=</span> next_state
    <span class="pl-k">return</span> next_state
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> transition within alternatives.</span>
<span class="pl-c"><span class="pl-c">#</span> columns </span>
<span class="pl-c"><span class="pl-c">#</span> 1. alternative 1, attribute 1</span>
<span class="pl-c"><span class="pl-c">#</span> 2. alternative 1, attribute 2</span>
<span class="pl-c"><span class="pl-c">#</span> 3. alternative 2, attribute 1</span>
<span class="pl-c"><span class="pl-c">#</span> 4. alternative 2, attribute 2</span>
tmat <span class="pl-k">=</span> <span class="pl-c1">Transition</span>([.<span class="pl-c1">98</span> .<span class="pl-c1">015</span> .<span class="pl-c1">0025</span> .<span class="pl-c1">0025</span>;
                   .<span class="pl-c1">015</span> .<span class="pl-c1">98</span> .<span class="pl-c1">0025</span> .<span class="pl-c1">0025</span>;
                   .<span class="pl-c1">0025</span> .<span class="pl-c1">0025</span> .<span class="pl-c1">98</span> .<span class="pl-c1">015</span>;
                   .<span class="pl-c1">0025</span> .<span class="pl-c1">0025</span> .<span class="pl-c1">015</span> .<span class="pl-c1">98</span>])

rts <span class="pl-k">=</span> <span class="pl-c1">rand</span>(model, <span class="pl-c1">1000</span>, attend, tmat)</pre></div>
</article></div>