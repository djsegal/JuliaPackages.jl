<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cooperativegamesjl" class="anchor" aria-hidden="true" href="#cooperativegamesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CooperativeGames.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/logo.svg"><img src="./docs/logo.svg" width="250px" style="max-width:100%;"></a></p>  
<p>A package to initiate and apply various solution methods to <a href="https://en.wikipedia.org/wiki/Cooperative_game_theory" rel="nofollow">cooperative transferable utility games</a>.</p>
<h3><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h3>
<p>You can install using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;CooperativeGames&quot;)
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CooperativeGames<span class="pl-pds">"</span></span>)</pre></div>
<p>and load with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CooperativeGames
"><pre><span class="pl-k">using</span> CooperativeGames</pre></div>
<h3><a id="user-content-what-can-you-do" class="anchor" aria-hidden="true" href="#what-can-you-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What can you do</h3>
<p><em>Implements</em> simple, graph, link, and <a href="https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1029/WR005i004p00749" rel="nofollow">river</a> games.</p>
<p><em>Solve</em> with Harsanyi dividends, Shapley, Myerson, Banhaf value.</p>
<p><em>Test</em> for core and fairness.</p>
<h3><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h3>
<p>Get started by defining a set of player <code>N</code> and a measure on <code>powerset(N)</code>, <code>v</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="N = [1, 2, 3] 

v(S::Int) = v([S])
function v(S::Players)
  if isempty(S) return 0. end
  # Mapping from S subset of N onto R
end

G = SimpleGame(N, v)
"><pre>N <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] 

<span class="pl-en">v</span>(S<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">v</span>([S])
<span class="pl-k">function</span> <span class="pl-en">v</span>(S<span class="pl-k">::</span><span class="pl-c1">Players</span>)
  <span class="pl-k">if</span> <span class="pl-c1">isempty</span>(S) <span class="pl-k">return</span> <span class="pl-c1">0.</span> <span class="pl-k">end</span>
  <span class="pl-c"><span class="pl-c">#</span> Mapping from S subset of N onto R</span>
<span class="pl-k">end</span>

G <span class="pl-k">=</span> <span class="pl-c1">SimpleGame</span>(N, v)</pre></div>
<p>If your game has a graph structure, simply do,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="L = [(1, 2), (2, 3)]

G = GraphGame(N, v, L)
"><pre>L <span class="pl-k">=</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)]

G <span class="pl-k">=</span> <span class="pl-c1">GraphGame</span>(N, v, L)</pre></div>
<p>This implementation relies on <code>LightGraphs</code>.</p>
</article></div>