<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-structarrays" class="anchor" aria-hidden="true" href="#structarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StructArrays</h1>
<p><a href="https://travis-ci.org/JuliaArrays/StructArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/44733e91b1221007a200486d22019bfb65d0b9d8/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f5374727563744172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/StructArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaArrays/StructArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a4b3ca23dea1dddeee3e22dbcfba1d9a565b36f6/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f5374727563744172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/StructArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package introduces the type <code>StructArray</code> which is an <code>AbstractArray</code> whose elements are <code>struct</code> (for example <code>NamedTuples</code>,  or <code>ComplexF64</code>, or a custom user defined <code>struct</code>). While a <code>StructArray</code> iterates <code>structs</code>, the layout is column based (meaning each field of the <code>struct</code> is stored in a separate <code>Array</code>).</p>
<p><code>Base.getproperty</code> or the dot syntax can be used to access columns, whereas rows can be accessed with <code>getindex</code>.</p>
<p>The package was largely inspired by the <code>Columns</code> type in <a href="https://github.com/JuliaComputing/IndexedTables.jl">IndexedTables</a> which it now replaces.</p>
<h2><a id="user-content-example-usage-to-store-complex-numbers" class="anchor" aria-hidden="true" href="#example-usage-to-store-complex-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage to store complex numbers</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructArrays, Random

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">StructArray</span><span class="pl-c1">{ComplexF64}</span>((<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>) with eltype Complex{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.680079</span><span class="pl-k">+</span><span class="pl-c1">0.625239im</span>   <span class="pl-c1">0.92407</span><span class="pl-k">+</span><span class="pl-c1">0.267358im</span>
 <span class="pl-c1">0.874437</span><span class="pl-k">+</span><span class="pl-c1">0.737254im</span>  <span class="pl-c1">0.929336</span><span class="pl-k">+</span><span class="pl-c1">0.804478im</span>

julia<span class="pl-k">&gt;</span> s[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
<span class="pl-c1">0.680079235935741</span> <span class="pl-k">+</span> <span class="pl-c1">0.6252391193298537im</span>

julia<span class="pl-k">&gt;</span> s<span class="pl-k">.</span>re
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.680079</span>  <span class="pl-c1">0.92407</span>
 <span class="pl-c1">0.874437</span>  <span class="pl-c1">0.929336</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldarrays</span>(s) <span class="pl-c"><span class="pl-c">#</span> obtain all field arrays as a named tuple</span>
(re <span class="pl-k">=</span> [<span class="pl-c1">0.680079</span> <span class="pl-c1">0.92407</span>; <span class="pl-c1">0.874437</span> <span class="pl-c1">0.929336</span>], im <span class="pl-k">=</span> [<span class="pl-c1">0.625239</span> <span class="pl-c1">0.267358</span>; <span class="pl-c1">0.737254</span> <span class="pl-c1">0.804478</span>])</pre></div>
<p>Note that the same approach can be used directly from an <code>Array</code> of complex numbers:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">StructArray</span>([<span class="pl-c1">1</span><span class="pl-k">+</span>im, <span class="pl-c1">3</span><span class="pl-k">-</span><span class="pl-c1">2im</span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype Complex{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1im</span>
 <span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">2im</span></pre></div>
<h3><a id="user-content-collection-and-initialization" class="anchor" aria-hidden="true" href="#collection-and-initialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Collection and initialization</h3>
<p>One can also create a <code>StructArrray</code> from an iterable of structs without creating an intermediate <code>Array</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">StructArray</span>(<span class="pl-c1">log</span>(j<span class="pl-k">+</span><span class="pl-c1">2.0</span><span class="pl-k">*</span>im) <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>) with eltype Complex{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.8047189562170501</span> <span class="pl-k">+</span> <span class="pl-c1">1.1071487177940904im</span>
 <span class="pl-c1">1.0397207708399179</span> <span class="pl-k">+</span> <span class="pl-c1">0.7853981633974483im</span>
 <span class="pl-c1">1.2824746787307684</span> <span class="pl-k">+</span> <span class="pl-c1">0.5880026035475675im</span>
 <span class="pl-c1">1.4978661367769954</span> <span class="pl-k">+</span> <span class="pl-c1">0.4636476090008061im</span>
  <span class="pl-c1">1.683647914993237</span> <span class="pl-k">+</span> <span class="pl-c1">0.3805063771123649im</span>
 <span class="pl-c1">1.8444397270569681</span> <span class="pl-k">+</span> <span class="pl-c1">0.3217505543966422im</span>
  <span class="pl-c1">1.985145956776061</span> <span class="pl-k">+</span> <span class="pl-c1">0.27829965900511133im</span>
 <span class="pl-c1">2.1097538525880535</span> <span class="pl-k">+</span> <span class="pl-c1">0.24497866312686414im</span>
 <span class="pl-c1">2.2213256282451583</span> <span class="pl-k">+</span> <span class="pl-c1">0.21866894587394195im</span>
 <span class="pl-c1">2.3221954495706862</span> <span class="pl-k">+</span> <span class="pl-c1">0.19739555984988078im</span></pre></div>
<p>Another option is to create an uninitialized <code>StructArray</code> and then fill it with data. Just like in normal arrays, this is done with the <code>undef</code> syntax:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">StructArray</span><span class="pl-c1">{ComplexF64}</span>(undef, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>) with eltype Complex{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">6.91646e-310</span><span class="pl-k">+</span><span class="pl-c1">6.91646e-310im</span>  <span class="pl-c1">6.91646e-310</span><span class="pl-k">+</span><span class="pl-c1">6.91646e-310im</span>
 <span class="pl-c1">6.91646e-310</span><span class="pl-k">+</span><span class="pl-c1">6.91646e-310im</span>  <span class="pl-c1">6.91646e-310</span><span class="pl-k">+</span><span class="pl-c1">6.91646e-310im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand!</span>(s)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>) with eltype Complex{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.680079</span><span class="pl-k">+</span><span class="pl-c1">0.874437im</span>  <span class="pl-c1">0.625239</span><span class="pl-k">+</span><span class="pl-c1">0.737254im</span>
  <span class="pl-c1">0.92407</span><span class="pl-k">+</span><span class="pl-c1">0.929336im</span>  <span class="pl-c1">0.267358</span><span class="pl-k">+</span><span class="pl-c1">0.804478im</span></pre></div>
<h3><a id="user-content-using-custom-array-types" class="anchor" aria-hidden="true" href="#using-custom-array-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using custom array types</h3>
<p>StructArrays supports using custom array types. It is always possible to pass field arrays of a custom type. The "custom array of structs to struct of custom arrays" transformation will use the <code>similar</code> method of the custom array type. This can be useful when working on the GPU for example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructArrays, CuArrays

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">CuArray</span>(<span class="pl-c1">rand</span>(Float32, <span class="pl-c1">10</span>));

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">CuArray</span>(<span class="pl-c1">rand</span>(Float32, <span class="pl-c1">10</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StructArray</span><span class="pl-c1">{ComplexF32}</span>((a, b))
<span class="pl-c1">10</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">CuArray{Float32,1}</span>, <span class="pl-k">::</span><span class="pl-c1">CuArray{Float32,1}</span>) with eltype Complex{Float32}<span class="pl-k">:</span>
  <span class="pl-c1">0.19555175</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.9604322</span>f0im
  <span class="pl-c1">0.68348145</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.5778245</span>f0im
  <span class="pl-c1">0.69664395</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.79825306</span>f0im
 <span class="pl-c1">0.118531585</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.3031248</span>f0im
  <span class="pl-c1">0.80057466</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.8964418</span>f0im
  <span class="pl-c1">0.63772964</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.2923274</span>f0im
  <span class="pl-c1">0.65374136</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.7932533</span>f0im
   <span class="pl-c1">0.6043732</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.65964353</span>f0im
   <span class="pl-c1">0.1106627</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.090207934</span>f0im
    <span class="pl-c1">0.707458</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.1700114</span>f0im

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">CuArray</span>(<span class="pl-c1">rand</span>(ComplexF32, <span class="pl-c1">10</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">StructArray</span>(c)
<span class="pl-c1">10</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float32,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float32,1}</span>) with eltype Complex{Float32}<span class="pl-k">:</span>
  <span class="pl-c1">0.7176411</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.864058</span>f0im
   <span class="pl-c1">0.252609</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.14824867</span>f0im
 <span class="pl-c1">0.26842773</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.9084332</span>f0im
 <span class="pl-c1">0.33128333</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.5106474</span>f0im
  <span class="pl-c1">0.6509278</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.87059164</span>f0im
  <span class="pl-c1">0.9522146</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.053706646</span>f0im
   <span class="pl-c1">0.899577</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.63242567</span>f0im
   <span class="pl-c1">0.325814</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.59225655</span>f0im
 <span class="pl-c1">0.56267905</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.21927536</span>f0im
 <span class="pl-c1">0.49719965</span>f0 <span class="pl-k">+</span> <span class="pl-c1">0.754143</span>f0im</pre></div>
<p>If you already have your data in a <code>StructArray</code> with field arrays of a given format (say plain <code>Array</code>) you can change them with <code>replace_storage</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>([<span class="pl-c1">1.0</span><span class="pl-k">+</span>im, <span class="pl-c1">2.0</span><span class="pl-k">-</span>im])
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>) with eltype Complex{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>
 <span class="pl-c1">2.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">replace_storage</span>(CuArray, s)
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">CuArray{Float64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">CuArray{Float64,1}</span>) with eltype Complex{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>
 <span class="pl-c1">2.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span></pre></div>
<h2><a id="user-content-example-usage-to-store-a-data-table" class="anchor" aria-hidden="true" href="#example-usage-to-store-a-data-table"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage to store a data table</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>((a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], b <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>]))
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{String,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Int64,String}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">1</span>]
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> t<span class="pl-k">.</span>a
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(t, (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{String,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Int64,String}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-lazy-row-iteration" class="anchor" aria-hidden="true" href="#lazy-row-iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lazy row iteration</h3>
<p>StructArrays also provides a <code>LazyRow</code> wrapper for lazy row iteration. <code>LazyRow(t, i)</code> does not materialize the i-th row but returns a lazy wrapper around it on which <code>getproperty</code> does the correct thing. This is useful when the row has many fields only some of which are necessary. It also allows changing columns in place.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>((a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], b <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>]));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LazyRow</span>(t, <span class="pl-c1">2</span>)<span class="pl-k">.</span>a
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LazyRow</span>(t, <span class="pl-c1">2</span>)<span class="pl-k">.</span>a <span class="pl-k">=</span> <span class="pl-c1">123</span>
<span class="pl-c1">123</span>

julia<span class="pl-k">&gt;</span> t
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{String,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Int64,String}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">123</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)</pre></div>
<p>To iterate in a lazy way one can simply iterate <code>LazyRows</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(t <span class="pl-k">-&gt;</span> t<span class="pl-k">.</span>b <span class="pl-k">^</span> t<span class="pl-k">.</span>a, <span class="pl-c1">LazyRows</span>(t))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>yy<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-advanced-structures-with-non-standard-data-layout" class="anchor" aria-hidden="true" href="#advanced-structures-with-non-standard-data-layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: structures with non-standard data layout</h2>
<p>StructArrays support structures with non-standard data layout (where <code>getproperty</code> has been overloaded or where the constructors are non-standard). The user is required to provide an overloaded <code>staticschema</code> for their type (to give the names and types of the properties of a given type) as well as a <code>createinstance</code> method. Here is an example of a type <code>MyType</code> that has as properties either its field <code>data</code> or properties of its field <code>rest</code> (which is a named tuple):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StructArrays
<span class="pl-k">struct</span> MyType{NT<span class="pl-k">&lt;:</span><span class="pl-c1">NamedTuple</span>}
    data<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    rest<span class="pl-k">::</span><span class="pl-c1">NT</span>
<span class="pl-k">end</span>

<span class="pl-en">MyType</span>(x; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">MyType</span>(x, <span class="pl-c1">values</span>(kwargs))

Base<span class="pl-k">.</span><span class="pl-en">getproperty</span>(b<span class="pl-k">::</span><span class="pl-c1">MyType</span>, s<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> s <span class="pl-k">==</span> <span class="pl-c1">:data</span> ? <span class="pl-c1">getfield</span>(b, <span class="pl-c1">1</span>) : <span class="pl-c1">getproperty</span>(<span class="pl-c1">getfield</span>(b, <span class="pl-c1">2</span>), s)

<span class="pl-en">getnamestypes</span>(<span class="pl-k">::</span><span class="pl-c1">Type{NamedTuple{names, types}}</span>) <span class="pl-k">where</span> {names, types} <span class="pl-k">=</span> (names, types)
<span class="pl-en">getnamestypes</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyType{NT}}</span>) <span class="pl-k">where</span> NT <span class="pl-k">=</span> <span class="pl-c1">getnamestypes</span>(NT)

<span class="pl-k">function</span> StructArrays<span class="pl-k">.</span><span class="pl-en">staticschema</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">MyType</span>}
    names, types <span class="pl-k">=</span> <span class="pl-c1">getnamestypes</span>(T)
    NamedTuple{(<span class="pl-c1">:data</span>, names<span class="pl-k">...</span>), Base<span class="pl-k">.</span><span class="pl-c1">tuple_type_cons</span>(Float64, types)}
<span class="pl-k">end</span>

<span class="pl-k">function</span> StructArrays<span class="pl-k">.</span><span class="pl-en">createinstance</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>, x, args<span class="pl-k">...</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">MyType</span>}
    names, types <span class="pl-k">=</span> <span class="pl-c1">getnamestypes</span>(T)
    <span class="pl-c1">MyType</span>(x, <span class="pl-c1">NamedTuple</span><span class="pl-c1">{names, types}</span>(args))
<span class="pl-k">end</span>

s <span class="pl-k">=</span> [<span class="pl-c1">MyType</span>(<span class="pl-c1">rand</span>(), a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
<span class="pl-c1">StructArray</span>(s)</pre></div>
<h2><a id="user-content-advanced-mutate-or-widen-style-accumulation" class="anchor" aria-hidden="true" href="#advanced-mutate-or-widen-style-accumulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: mutate-or-widen style accumulation</h2>
<p>StructArrays provides a function <code>StructArrays.append!!(dest, src)</code> (unexported) for "mutate-or-widen" style accumulation.  This function can be used via <a href="https://tkf.github.io/BangBang.jl/dev/#BangBang.append!!-Tuple%7BAny,Any%7D" rel="nofollow"><code>BangBang.append!!</code></a> and <a href="https://tkf.github.io/BangBang.jl/dev/#BangBang.push!!-Tuple%7BAny,Any,Any,Vararg%7BAny,N%7D%20where%20N%7D" rel="nofollow"><code>BangBang.push!!</code></a> as well.</p>
<p><code>StructArrays.append!!</code> works like <code>append!(dest, src)</code> if <code>dest</code> can contain all element types in <code>src</code> iterator; i.e., it <em>mutates</em> <code>dest</code> in-place:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> dest <span class="pl-k">=</span> <span class="pl-c1">StructVector</span>((a<span class="pl-k">=</span>[<span class="pl-c1">1</span>], b<span class="pl-k">=</span>[<span class="pl-c1">2</span>]))
<span class="pl-c1">1</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Int64,Int64}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> StructArrays<span class="pl-k">.</span><span class="pl-c1">append!!</span>(dest, [(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">4</span>)])
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Int64,Int64}}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> ans <span class="pl-k">===</span> dest
<span class="pl-c1">true</span></pre></div>
<p>Unlike <code>append!</code>, <code>append!!</code> can also <em>widen</em> element type of <code>dest</code> array:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> StructArrays<span class="pl-k">.</span><span class="pl-c1">append!!</span>(dest, [(a <span class="pl-k">=</span> <span class="pl-c1">missing</span>, b <span class="pl-k">=</span> <span class="pl-c1">6</span>)])
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Union{Missing, Int64},1}</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>) with eltype NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Union{Missing, Int64},Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">NamedTuple</span><span class="pl-c1">{(:a, :b),Tuple{Union{Missing, Int64},Int64}}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))
 <span class="pl-c1">NamedTuple</span><span class="pl-c1">{(:a, :b),Tuple{Union{Missing, Int64},Int64}}</span>((<span class="pl-c1">3</span>, <span class="pl-c1">4</span>))
 <span class="pl-c1">NamedTuple</span><span class="pl-c1">{(:a, :b),Tuple{Union{Missing, Int64},Int64}}</span>((<span class="pl-c1">missing</span>, <span class="pl-c1">6</span>))

julia<span class="pl-k">&gt;</span> ans <span class="pl-k">===</span> dest
<span class="pl-c1">false</span></pre></div>
<p>Since the original array <code>dest</code> cannot hold the input, a new array is created (<code>ans !== dest</code>).</p>
<p>Combined with <a href="https://docs.julialang.org/en/latest/manual/performance-tips/#kernel-functions-1" rel="nofollow">function barriers</a>, <code>append!!</code> is a useful building block for implementing <code>collect</code>-like functions.</p>
<h2><a id="user-content-advanced-using-structarrays-in-cuda-kernels" class="anchor" aria-hidden="true" href="#advanced-using-structarrays-in-cuda-kernels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: using StructArrays in CUDA kernels</h2>
<p>It is possible to combine StructArrays with <a href="https://github.com/JuliaGPU/CUDAnative.jl">CUDAnative</a>, in order to create CUDA kernels that work on StructArrays directly on the GPU. Make sure you are familiar with the CUDAnative documentation (esp. kernels with plain <code>CuArray</code>s) before experimenting with kernels based on <code>StructArray</code>s.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CUDAnative, CuArrays, StructArrays
d <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>(a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>), b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>))

<span class="pl-c"><span class="pl-c">#</span> move to GPU</span>
dd <span class="pl-k">=</span> <span class="pl-c1">replace_storage</span>(CuArray, d)
de <span class="pl-k">=</span> <span class="pl-c1">similar</span>(dd)

<span class="pl-c"><span class="pl-c">#</span> a simple kernel, to copy the content of `dd` onto `de`</span>
<span class="pl-k">function</span> <span class="pl-en">kernel!</span>(dest, src)
    i <span class="pl-k">=</span> (<span class="pl-c1">blockIdx</span>()<span class="pl-k">.</span>x<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">blockDim</span>()<span class="pl-k">.</span>x <span class="pl-k">+</span> <span class="pl-c1">threadIdx</span>()<span class="pl-k">.</span>x
    <span class="pl-k">if</span> i <span class="pl-k">&lt;=</span> <span class="pl-c1">length</span>(dest)
        dest[i] <span class="pl-k">=</span> src[i]
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

threads <span class="pl-k">=</span> <span class="pl-c1">1024</span>
blocks <span class="pl-k">=</span> <span class="pl-c1">cld</span>(<span class="pl-c1">length</span>(dd),threads)

<span class="pl-c1">@cuda</span> threads<span class="pl-k">=</span>threads blocks<span class="pl-k">=</span>blocks <span class="pl-c1">kernel!</span>(de, dd)</pre></div>
</article></div>