<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-conditionally-optimize-julia-code" class="anchor" aria-hidden="true" href="#conditionally-optimize-julia-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conditionally optimize Julia code</h1>
<table>
<thead>
<tr>
<th align="left"><strong>License</strong></th>
<th align="left"><strong>Build Status</strong></th>
<th align="left"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="./LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="left"><a href="https://travis-ci.com/emmt/MayOptimize.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d1fb73f1a82d37405dea9998054a028096bb8ba0b9271508d344d0dd72eeab64/68747470733a2f2f7472617669732d63692e636f6d2f656d6d742f4d61794f7074696d697a652e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/emmt/MayOptimize.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/emmt/MayOptimize-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/da6d6912ec1419546add35af5d23f24ed03f8d64b0527d6e7c51f26c5606a3b7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656d6d742f4d61794f7074696d697a652e6a6c3f6272616e63683d6d6173746572" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/emmt/MayOptimize.jl?branch=master" style="max-width:100%;"></a></td>
<td align="left"><a href="https://coveralls.io/github/emmt/MayOptimize.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4c2ed23a8fd85eb3a5fde16255d6b283f41b28705de75633d916ce73af0110d4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f656d6d742f4d61794f7074696d697a652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="" data-canonical-src="https://coveralls.io/repos/emmt/MayOptimize.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/emmt/MayOptimize.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c9824b0a7bac2f422e43c79ea932abce1cb664e73757f08090da2ade382d0a45/687474703a2f2f636f6465636f762e696f2f6769746875622f656d6d742f4d61794f7074696d697a652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="http://codecov.io/github/emmt/MayOptimize.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>When writing high performance <a href="https://julialang.org/" rel="nofollow">Julia</a> code, you may want to keep a
reference code that perform bound checking, another version that assumes valid
indices (and thus avoid bound checking) and perhaps a more heavily optimized
version that requires loop vectorization.  The <a href="https://github.com/emmt/MayOptimize.jl">MayOptimize</a>
package let you have the 3 variants available with a <em>single</em> version of the
code.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>The usage of <a href="https://github.com/emmt/MayOptimize.jl">MayOptimize</a> is summarized in the following short
example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MayOptimize

function foo!(::Type{P}, x::AbstractArray{T}) where {T&lt;:Real, P&lt;:OptimLevel}
    s = zero(T)
    # Loop 1: compute the sum of values.
    @maybe_inbounds P for i in eachindex(x)
        s += x[i]
    end
    # Loop 2: fill with sum of values.
    @maybe_vectorized P for i in eachindex(x)
        x[i] += s
    end
    return x, s
end
"><pre><span class="pl-k">using</span> MayOptimize

<span class="pl-k">function</span> <span class="pl-en">foo!</span>(<span class="pl-k">::</span><span class="pl-c1">Type{P}</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>, P<span class="pl-k">&lt;:</span><span class="pl-c1">OptimLevel</span>}
    s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(T)
    <span class="pl-c"><span class="pl-c">#</span> Loop 1: compute the sum of values.</span>
    <span class="pl-c1">@maybe_inbounds</span> P <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(x)
        s <span class="pl-k">+=</span> x[i]
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> Loop 2: fill with sum of values.</span>
    <span class="pl-c1">@maybe_vectorized</span> P <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(x)
        x[i] <span class="pl-k">+=</span> s
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> x, s
<span class="pl-k">end</span></pre></div>
<p>Note that the two above loops are preceded by the macros <code>@maybe_inbounds</code> and
<code>@maybe_vectorized</code> which both take 2 arguments: a parameter <code>P</code> and an
expression or a block of code (the 2nd argument must be a simple <code>for</code> loop for
the <code>@maybe_vectorized</code> macro).</p>
<p>How is compiled the expression or the block of code is determined by the
type parameter <code>P</code>:</p>
<ul>
<li>
<p><code>P &lt;: Debug</code> for debugging or reference code that performs bound checking and
no vectorization.</p>
</li>
<li>
<p><code>P &lt;: InBounds</code> for code that assumes valid indices and thus avoids bound
checking.</p>
</li>
<li>
<p><code>P &lt;: Vectorize</code> for code that assumes valid indices and requires
vectorization.</p>
</li>
</ul>
<p>A block of code provided to the <code>@maybe_inbounds</code> macro will be compiled with
bound checking (and thus no vectorization) if <code>P &lt;: Debug</code> and without bound
checking (as if <code>@inbounds</code> was specified) if <code>P &lt;: InBounds</code>.  Since
<code>Vectorize &lt;: InBounds</code>, specifying <code>Vectorize</code> in <code>@maybe_inbounds</code> also avoid
bound checking.</p>
<p>A block of code provided to the <code>@maybe_vectorized</code> macro will be compiled with
bound checking and no vectorization if <code>P &lt;: Debug</code>, with no bound checking if
<code>P &lt;: InBounds</code> (as if <code>@inbounds</code> was specified) and with no bound checking
and vectorization if <code>P &lt;: Vectorize</code> (as if both <code>@inbounds</code> and <code>@simd</code> were
specified).</p>
<p>Hence which version of <code>foo!</code> is called is decided by Julia method dispatcher
according to the abstract types <code>Debug</code>, <code>InBounds</code> or <code>Vectorize</code> exported by
<code>MayOptimize</code>.  Calling:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="foo!(Debug, x)
"><pre><span class="pl-c1">foo!</span>(Debug, x)</pre></div>
<p>executes a version that checks bounds and does no vectorization, while calling:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="foo!(InBounds, x)
"><pre><span class="pl-c1">foo!</span>(InBounds, x)</pre></div>
<p>executes a version that avoids bound checking (in the 2 loops) and finally
calling:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="foo!(Vectorize, x)
"><pre><span class="pl-c1">foo!</span>(Vectorize, x)</pre></div>
<p>executes a version that avoids bound checking (in the 2 loops) and vectorizes
the second loop.</p>
<p>It is easy to provide a default version so that other users need not have to
bother choosing which version to use.  For instance, assuming that you have
checked that your code has no issues with indexing but that vectorization makes
almost no difference, you may write:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="foo!(x::AbstractArray{T}) where {T&lt;:Real} = foo!(InBounds, x)
"><pre><span class="pl-en">foo!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>} <span class="pl-k">=</span> <span class="pl-c1">foo!</span>(InBounds, x)</pre></div>
<p>and decide later to change the default optimization level.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In Julia, hit the <code>]</code> key to switch to the package manager REPL (you should get
a <code>... pkg&gt;</code> prompt) and type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="add https://github.com/emmt/MayOptimize.jl
"><pre>add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>emmt<span class="pl-k">/</span>MayOptimize<span class="pl-k">.</span>jl</pre></div>
<p>No other packages are needed.</p>
</article></div>