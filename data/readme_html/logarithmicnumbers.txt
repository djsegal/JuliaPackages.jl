<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-logarithmicnumbersjl" class="anchor" aria-hidden="true" href="#logarithmicnumbersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LogarithmicNumbers.jl</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://docs.juliahub.com/LogarithmicNumbers" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cjdoris/LogarithmicNumbers.jl/actions?query=workflow%3ATests"><img src="https://github.com/cjdoris/LogarithmicNumbers.jl/workflows/Tests/badge.svg" alt="Test Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cjdoris/LogarithmicNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2098202c1a4796ad5990ce4bd51b0a294d8dd8dbaef5f086cb6d542d3a52272b/68747470733a2f2f636f6465636f762e696f2f67682f636a646f7269732f4c6f6761726974686d69634e756d626572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4145434357474b52564a" alt="codecov" data-canonical-src="https://codecov.io/gh/cjdoris/LogarithmicNumbers.jl/branch/main/graph/badge.svg?token=AECCWGKRVJ" style="max-width: 100%;"></a></p>
<p dir="auto">A <a href="https://en.wikipedia.org/wiki/Logarithmic_number_system" rel="nofollow"><strong>logarithmic number system</strong></a>
for Julia.</p>
<p dir="auto">Provides the signed <code>Logarithmic</code> and unsigned <code>ULogarithmic</code> types for representing real
numbers on a logarithmic scale.</p>
<p dir="auto">This is useful when numbers are too big or small to fit accurately into a <code>Float64</code> and you
only really care about magnitude.</p>
<p dir="auto">For example, it can be useful to represent probabilities in this form, and you don't need to
worry about getting zero when multiplying many of them together.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add LogarithmicNumbers"><pre class="notranslate"><code>pkg&gt; add LogarithmicNumbers
</code></pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LogarithmicNumbers

julia&gt; ULogarithmic(2.7)
exp(0.9932517730102834)

julia&gt; float(ans)
2.7

julia&gt; x = exp(ULogarithmic, 1000) - exp(ULogarithmic, 998)
exp(999.8545865421312)

julia&gt; float(x) # overflows
Inf

julia&gt; log(x)
999.8545865421312"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogarithmicNumbers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ULogarithmic</span>(<span class="pl-c1">2.7</span>)
<span class="pl-c1">exp</span>(<span class="pl-c1">0.9932517730102834</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(ans)
<span class="pl-c1">2.7</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">exp</span>(ULogarithmic, <span class="pl-c1">1000</span>) <span class="pl-k">-</span> <span class="pl-c1">exp</span>(ULogarithmic, <span class="pl-c1">998</span>)
<span class="pl-c1">exp</span>(<span class="pl-c1">999.8545865421312</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(x) <span class="pl-c"><span class="pl-c">#</span> overflows</span>
<span class="pl-c1">Inf</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">log</span>(x)
<span class="pl-c1">999.8545865421312</span></pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<h3 dir="auto"><a id="user-content-exported-types" class="anchor" aria-hidden="true" href="#exported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported types</h3>
<ul dir="auto">
<li><code>ULogarithmic{T}</code> represents a non-negative real number by its logarithm of type <code>T</code>.</li>
<li><code>Logarithmic{T}</code> represents a real number by its absolute value as a <code>ULogarithmic{T}</code> and
a sign bit.</li>
<li><code>LogFloat64</code> is an alias for <code>Logarithmic{Float64}</code>. There are also <code>ULogFloat16</code>,
<code>ULogFloat32</code>, <code>ULogFloat64</code>, <code>LogFloat16</code>, and <code>LogFloat32</code>.</li>
</ul>
<h3 dir="auto"><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructors</h3>
<ul dir="auto">
<li><code>ULogarithmic(x)</code> and <code>Logarithmic(x)</code> represent the number <code>x</code>.</li>
<li><code>exp(ULogarithmic, logx)</code> represents <code>exp(logx)</code>, and <code>logx</code> can be huge. Use this when
you already know the logarithm <code>logx</code> of your number <code>x</code>.</li>
</ul>
<h3 dir="auto"><a id="user-content-functions-in-base" class="anchor" aria-hidden="true" href="#functions-in-base"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions in Base</h3>
<ul dir="auto">
<li><strong>Arithmetic:</strong> <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code>, <code>inv</code>, <code>prod</code>, <code>sum</code>.</li>
<li><strong>Ordering:</strong> <code>==</code>, <code>&lt;</code>, <code>â‰¤</code>, <code>cmp</code>, <code>isless</code>, <code>isequal</code>, <code>sign</code>, <code>signbit</code>, <code>abs</code>.</li>
<li><strong>Logarithm:</strong> <code>log</code>, <code>log2</code>, <code>log10</code>, <code>log1p</code>. These are returned as the base (non-logarithmic) type.</li>
<li><strong>Conversion:</strong> <code>float</code>, <code>unsigned</code>, <code>signed</code>, <code>widen</code>, <code>big</code>. These also operate on types.</li>
<li><strong>Special values:</strong> <code>zero</code>, <code>one</code>, <code>typemin</code>, <code>typemax</code>.</li>
<li><strong>Predicates:</strong> <code>iszero</code>, <code>isone</code>, <code>isinf</code>, <code>isfinite</code>, <code>isnan</code>.</li>
<li><strong>IO:</strong> <code>show</code>, <code>write</code>, <code>read</code>.</li>
<li><strong>Random:</strong> <code>rand(ULogarithmic)</code> is a random number in the unit interval.</li>
<li><strong>Misc:</strong> <code>nextfloat</code>, <code>prevfloat</code>, <code>hash</code>.</li>
<li><strong>Note:</strong> Any functions not mentioned here might be inaccurate.</li>
</ul>
<h3 dir="auto"><a id="user-content-interoperability-with-other-packages" class="anchor" aria-hidden="true" href="#interoperability-with-other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interoperability with other packages</h3>
<p dir="auto">It is natural to use this package in conjunction with other packages which return
logarithms. The general pattern is that you can use <code>exp(ULogarithmic, logfunc(args...))</code>
instead of <code>func(args...)</code> to get the answer as a logarithmic number. Here are some
possibilities for <code>func</code>:</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaStats/StatsFuns.jl">StatsFuns.jl</a>:
<code>normpdf</code>, <code>normcdf</code>, <code>normccdf</code>, plus equivalents for other distributions.</li>
<li><a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a>:
<code>pdf</code>, <code>cdf</code>, <code>ccdf</code>.</li>
<li><a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>:
<code>gamma</code>, <code>factorial</code>, <code>beta</code>, <code>erfc</code>, <code>erfcx</code>.</li>
</ul>
</article></div>