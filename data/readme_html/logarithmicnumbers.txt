<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-logarithmicnumbersjl" class="anchor" aria-hidden="true" href="#logarithmicnumbersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LogarithmicNumbers.jl</h1>
<p>A <a href="https://en.wikipedia.org/wiki/Logarithmic_number_system" rel="nofollow">logarithmic number system</a> for Julia.</p>
<p>Provides the types <code>ULogarithmic</code>, <code>Logarithmic</code> and <code>CLogarithmic</code> for representing non-negative real numbers, real numbers and complex numbers in log-space.</p>
<p>This is useful when numbers are too big or small to fit accurately into a <code>Float64</code> and you only really care about magnitude.</p>
<p>For example, it can be useful to represent probabilities in this form, and you don't need to worry about getting zero when multiplying many of them together.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add LogarithmicNumbers
"><pre><code>] add LogarithmicNumbers
</code></pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using LogarithmicNumbers

julia&gt; ULogarithmic(2.7)
exp(0.9932517730102834)

julia&gt; float(ans)
2.7

julia&gt; x = exp(ULogarithmic, 1000) - exp(ULogarithmic, 998)
exp(999.8545865421312)

julia&gt; float(x) # overflows
Inf

julia&gt; log(x)
999.8545865421312
"><pre><code>julia&gt; using LogarithmicNumbers

julia&gt; ULogarithmic(2.7)
exp(0.9932517730102834)

julia&gt; float(ans)
2.7

julia&gt; x = exp(ULogarithmic, 1000) - exp(ULogarithmic, 998)
exp(999.8545865421312)

julia&gt; float(x) # overflows
Inf

julia&gt; log(x)
999.8545865421312
</code></pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Three main types are exported:</p>
<ul>
<li>Type <code>ULogarithmic{T}</code>, which represents a non-negative real number by its logarithm of type <code>T</code>.</li>
<li>Type <code>Logarithmic{T}</code>, which represents a real number by its absolute value as a <code>ULogarithmic{T}</code> and a sign bit.</li>
<li>Type <code>CLogarithmic{T}</code>, which represents a complex number by its absolute value as a <code>ULogarithmic{T}</code> and an angle of type <code>T</code>.</li>
</ul>
<p>Also exports type aliases <code>ULogFloat64</code>, <code>LogFloat64</code>, <code>CLogFloat64</code>, <code>ULogFloat32</code>, <code>LogFloat32</code>, <code>CLogFloat32</code>, <code>ULogFloat16</code>, <code>LogFloat16</code>, <code>CLogFloat16</code>, <code>ULogBigFloat</code>, <code>LogBigFloat</code>, <code>CLogBigFloat</code>.</p>
<p>Features:</p>
<ul>
<li><code>ULogarithmic(x)</code> (and <code>Logarithmic(x)</code>, etc.) represents the number <code>x</code>.</li>
<li><code>exp(ULogarithmic, x)</code> represents <code>exp(x)</code> (and <code>x</code> can be huge).</li>
<li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code>, <code>inv</code>, <code>log</code>, <code>prod</code>, <code>sum</code>.</li>
<li>Comparisons: equality, ordering, <code>cmp</code>, <code>isless</code>.</li>
<li>Random: <code>rand(ULogarithmic)</code> is a random number in the unit interval.</li>
<li>Other functions: <code>float</code>, <code>big</code>, <code>unsigned</code> (converts <code>ULogarithmic</code> to <code>Logarithmic</code>), <code>signed</code> (vice versa), <code>widen</code>, <code>typemin</code>, <code>typemax</code>, <code>zero</code>, <code>one</code>, <code>iszero</code>, <code>isone</code>, <code>isinf</code>, <code>isfinite</code>, <code>isnan</code>, <code>sign</code>, <code>signbit</code>, <code>abs</code>, <code>nextfloat</code>, <code>prevfloat</code>, <code>write</code>, <code>read</code>.</li>
</ul>
<h2><a id="user-content-interoperability-with-other-packages" class="anchor" aria-hidden="true" href="#interoperability-with-other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interoperability with other packages</h2>
<h3><a id="user-content-statsfunsjl" class="anchor" aria-hidden="true" href="#statsfunsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StatsFuns.jl</h3>
<p>Calling <code>normcdf(ULogarithmic, ...)</code> is like calling <code>normcdf(...)</code> but returns the answer as a <code>ULogarithmic</code> (and calls <code>normlogcdf(...)</code> internally).</p>
<p>Similarly there is <code>normpdf(ULogarithmic, ...)</code> and <code>normccdf(ULogarithmic, ...)</code> and equivalents for other distributions.</p>
<h3><a id="user-content-distributionsjl" class="anchor" aria-hidden="true" href="#distributionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Distributions.jl</h3>
<p>Calling <code>cdf(ULogarithmic, ...)</code> is like calling <code>cdf(...)</code> but returns the answer as a <code>ULogarithmic</code> (and calls <code>logcdf(...)</code> internally).</p>
<p>Similarly there is <code>ccdf(ULogarithmic, ...)</code> and <code>pdf(ULogarithmic, ...)</code>.</p>
</article></div>