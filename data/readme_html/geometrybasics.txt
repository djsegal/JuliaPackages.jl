<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.com/SimonDanisch/GeometryBasics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb98e542f7249957aa7f245fc1cd69c9c193e87f/68747470733a2f2f6170692e7472617669732d63692e6f72672f53696d6f6e44616e697363682f47656f6d657472794261736963732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.org/SimonDanisch/GeometryBasics.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/SimonDanisch/GeometryBasics-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b9573ac4a115f514aeab6b081d2a91a42dd20e3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f53696d6f6e44616e697363682f47656f6d657472794261736963732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/SimonDanisch/GeometryBasics.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SimonDanisch/GeometryBasics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/45d71d4059a0ec4408c6d7dd3d10e48975d8eaa2/68747470733a2f2f636f6465636f762e696f2f67682f53696d6f6e44616e697363682f47656f6d657472794261736963732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/SimonDanisch/GeometryBasics.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-geometrybasicsjl" class="anchor" aria-hidden="true" href="#geometrybasicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GeometryBasics.jl</h1>
<p>Basic Geometry Types.
This package aimes to offer a standard set of Geometry types, which easily work with metadata, query frameworks on geometries and different memory layouts.
The aim is to create a solid basis for Graphics/Plotting, finite elements analysis, Geo applications, and general geometry manipulations - while offering a julian API, that still allows performant C-interop.</p>
<p>It is planned to merge this package with <a href="https://github.com/JuliaGeometry/GeometryTypes.jl/">GeometryTypes</a> once it's fully mature, or simply replace it!</p>
<p>To get an idea, look at the runtests:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GeometryBasics
<span class="pl-k">using</span> GeometryBasics<span class="pl-k">:</span> Polygon, MultiPolygon, Point, LineFace, Polytope, Line
<span class="pl-k">using</span> GeometryBasics<span class="pl-k">:</span> Simplex, connect, Triangle, NSimplex, Tetrahedron
<span class="pl-k">using</span> GeometryBasics<span class="pl-k">:</span> QuadFace, hascolumn, getcolumn, metafree, coordinates, TetrahedronFace
<span class="pl-k">using</span> GeometryBasics<span class="pl-k">:</span> TupleView, TriangleFace, SimplexFace, LineString, Mesh, meta
<span class="pl-k">using</span> Test, Random, Query, StructArrays, Tables
<span class="pl-k">using</span> StaticArrays


<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>embedding metadata<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Meshes<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>

        <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>per vertex attributes<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
            points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Point{<span class="pl-c1">3</span>, Float64}, <span class="pl-c1">8</span>)
            tfaces <span class="pl-k">=</span> TetrahedronFace{Int}[(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>)]
            normals <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SVector{<span class="pl-c1">3</span>, Float64}, <span class="pl-c1">8</span>)
            stress <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>)
            mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(<span class="pl-c1">meta</span>(points, normals <span class="pl-k">=</span> normals, stress <span class="pl-k">=</span> stress), tfaces)

            <span class="pl-c1">@test</span> <span class="pl-c1">hascolumn</span>(<span class="pl-c1">coordinates</span>(mesh), <span class="pl-c1">:stress</span>)
            <span class="pl-c1">@test</span> <span class="pl-c1">hascolumn</span>(<span class="pl-c1">coordinates</span>(mesh), <span class="pl-c1">:normals</span>)
            <span class="pl-c1">@test</span> <span class="pl-c1">coordinates</span>(mesh)<span class="pl-k">.</span>stress <span class="pl-k">===</span> stress
            <span class="pl-c1">@test</span> <span class="pl-c1">coordinates</span>(mesh)<span class="pl-k">.</span>normals <span class="pl-k">===</span> normals
            <span class="pl-c1">@test</span> <span class="pl-c1">coordinates</span>(mesh)<span class="pl-k">.</span>normals <span class="pl-k">===</span> normals
            <span class="pl-c1">@test</span> GeometryBasics<span class="pl-k">.</span><span class="pl-c1">faces</span>(mesh) <span class="pl-k">===</span> tfaces

        <span class="pl-k">end</span>

        <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>per face attributes<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>

            <span class="pl-c"><span class="pl-c">#</span> Construct a cube out of Quads</span>
            points <span class="pl-k">=</span> Point{<span class="pl-c1">3</span>, Float64}[
                (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>),
                (<span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>),
                (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">12.0</span>), (<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">12.0</span>),
                (<span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">12.0</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">12.0</span>)
            ]

            facets <span class="pl-k">=</span> QuadFace{Cint}[
                <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>,
                <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">8</span>,
                [<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>],
                [<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">3</span>],
                [<span class="pl-c1">3</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">4</span>],
                [<span class="pl-c1">4</span>, <span class="pl-c1">8</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>]
            ]

            markers <span class="pl-k">=</span> Cint[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
            <span class="pl-c"><span class="pl-c">#</span> attach some additional information to our faces!</span>
            mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(points, <span class="pl-c1">meta</span>(facets, markers <span class="pl-k">=</span> markers))
            <span class="pl-c1">@test</span> <span class="pl-c1">hascolumn</span>(GeometryBasics<span class="pl-k">.</span><span class="pl-c1">faces</span>(mesh), <span class="pl-c1">:markers</span>)
            <span class="pl-c"><span class="pl-c">#</span> test with === to assert we're not doing any copies</span>
            <span class="pl-c1">@test</span> <span class="pl-c1">getcolumn</span>(GeometryBasics<span class="pl-k">.</span><span class="pl-c1">faces</span>(mesh), <span class="pl-c1">:markers</span>) <span class="pl-k">===</span> markers
            <span class="pl-c1">@test</span> <span class="pl-c1">coordinates</span>(mesh) <span class="pl-k">===</span> points
            <span class="pl-c1">@test</span> <span class="pl-c1">metafree</span>(GeometryBasics<span class="pl-k">.</span><span class="pl-c1">faces</span>(mesh)) <span class="pl-k">===</span> facets

        <span class="pl-k">end</span>

    <span class="pl-k">end</span>
    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>polygon with metadata<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        polys <span class="pl-k">=</span> [<span class="pl-c1">Polygon</span>(<span class="pl-c1">rand</span>(Point{<span class="pl-c1">2</span>, Float32}, <span class="pl-c1">20</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
        pnames <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">4</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
        numbers <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">10</span>)
        bin <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool, <span class="pl-c1">10</span>)
        <span class="pl-c"><span class="pl-c">#</span> create just an array</span>
        plain <span class="pl-k">=</span> <span class="pl-c1">meta</span>(polys, name <span class="pl-k">=</span> pnames, value <span class="pl-k">=</span> numbers, category <span class="pl-k">=</span> bin)
        <span class="pl-c"><span class="pl-c">#</span> create a MultiPolygon with the right type &amp; meta information!</span>
        multipoly <span class="pl-k">=</span> <span class="pl-c1">MultiPolygon</span>(polys; name <span class="pl-k">=</span> pnames, value <span class="pl-k">=</span> numbers, category <span class="pl-k">=</span> bin)
        <span class="pl-k">for</span> x <span class="pl-k">in</span> (plain, multipoly)
            <span class="pl-k">for</span> (mp, p, n, num, b) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(x, polys, pnames, numbers, bin)
                <span class="pl-c1">@test</span> mp<span class="pl-k">.</span>polygon <span class="pl-k">==</span> p
                <span class="pl-c1">@test</span> mp<span class="pl-k">.</span>name <span class="pl-k">==</span> n
                <span class="pl-c1">@test</span> mp<span class="pl-k">.</span>value <span class="pl-k">==</span> num
                <span class="pl-c1">@test</span> mp<span class="pl-k">.</span>category <span class="pl-k">==</span> b
            <span class="pl-k">end</span>

            filtered <span class="pl-k">=</span> <span class="pl-c1">@from</span> i <span class="pl-k">in</span> x <span class="pl-k">begin</span>
                <span class="pl-c1">@where</span> i<span class="pl-k">.</span>value <span class="pl-k">&lt;</span> <span class="pl-c1">0.7</span>
                <span class="pl-c1">@select</span> i
                <span class="pl-c1">@collect</span>
            <span class="pl-k">end</span>
            <span class="pl-c1">@test</span> <span class="pl-c1">length</span>(filtered) <span class="pl-k">==</span> <span class="pl-c1">7</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>view<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>TupleView<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        x <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]
        y <span class="pl-k">=</span> <span class="pl-c1">TupleView</span><span class="pl-c1">{2, 1}</span>(x)
        <span class="pl-c1">@test</span> y <span class="pl-k">==</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)]

        y <span class="pl-k">=</span> <span class="pl-c1">TupleView</span><span class="pl-c1">{2}</span>(x)
        <span class="pl-c1">@test</span> y <span class="pl-k">==</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)]

        y <span class="pl-k">=</span> <span class="pl-c1">TupleView</span><span class="pl-c1">{2, 3}</span>(x)
        <span class="pl-c1">@test</span> y <span class="pl-k">==</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>)]

        y <span class="pl-k">=</span> <span class="pl-c1">TupleView</span><span class="pl-c1">{3, 1}</span>(x)
        <span class="pl-c1">@test</span> y <span class="pl-k">==</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>), (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>)]

        y <span class="pl-k">=</span> <span class="pl-c1">TupleView</span><span class="pl-c1">{2, 1}</span>(x, connect <span class="pl-k">=</span> <span class="pl-c1">true</span>)
        <span class="pl-c1">@test</span> y <span class="pl-k">==</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>), (<span class="pl-c1">6</span>, <span class="pl-c1">1</span>)]

    <span class="pl-k">end</span>
    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>connected views<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        numbers <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]
        x <span class="pl-k">=</span> <span class="pl-c1">connect</span>(numbers, Point{<span class="pl-c1">2</span>})

        <span class="pl-c1">@test</span> x <span class="pl-k">==</span> Point[(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)]

        line <span class="pl-k">=</span> <span class="pl-c1">connect</span>(x, Line, <span class="pl-c1">1</span>)
        <span class="pl-c1">@test</span> line <span class="pl-k">==</span> [<span class="pl-c1">Line</span>(<span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Line</span>(<span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>))]

        triangles <span class="pl-k">=</span> <span class="pl-c1">connect</span>(x, Triangle)
        <span class="pl-c1">@test</span> triangles <span class="pl-k">==</span> [<span class="pl-c1">Triangle</span>(<span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>))]
        x <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>], Point{<span class="pl-c1">2</span>})
        tetrahedra <span class="pl-k">=</span> <span class="pl-c1">connect</span>(x, NSimplex{<span class="pl-c1">4</span>})
        <span class="pl-c1">@test</span> tetrahedra <span class="pl-k">==</span> [<span class="pl-c1">Tetrahedron</span>(x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>], x[<span class="pl-c1">3</span>], x[<span class="pl-c1">4</span>])]

        <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>matrix non-copy point views<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
            <span class="pl-c"><span class="pl-c">#</span> point in row</span>
            points <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">1</span> <span class="pl-c1">4</span>; <span class="pl-c1">66</span> <span class="pl-c1">77</span>]
            comparison <span class="pl-k">=</span> [<span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">66</span>, <span class="pl-c1">77</span>)]
            <span class="pl-c1">@test</span> <span class="pl-c1">connect</span>(points, Point{<span class="pl-c1">2</span>}) <span class="pl-k">==</span> comparison
            <span class="pl-c"><span class="pl-c">#</span> point in column</span>
            points <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">66</span>; <span class="pl-c1">2</span> <span class="pl-c1">4</span> <span class="pl-c1">77</span>]
            <span class="pl-c"><span class="pl-c">#</span> huh, reinterpret array doesn't seem to like `==`</span>
            <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(((a,b),)<span class="pl-k">-&gt;</span> a<span class="pl-k">==</span>b, <span class="pl-c1">zip</span>(<span class="pl-c1">connect</span>(points, Point{<span class="pl-c1">2</span>}), comparison))
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>face views<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        numbers <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]
        points <span class="pl-k">=</span> <span class="pl-c1">connect</span>(numbers, Point{<span class="pl-c1">2</span>})
        faces <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], TriangleFace)
        triangles <span class="pl-k">=</span> <span class="pl-c1">connect</span>(points, faces)
        <span class="pl-c1">@test</span> triangles <span class="pl-k">==</span> [<span class="pl-c1">Triangle</span>(<span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>))]
        x <span class="pl-k">=</span> <span class="pl-c1">Point</span><span class="pl-c1">{3}</span>(<span class="pl-c1">1.0</span>)
        triangles <span class="pl-k">=</span> <span class="pl-c1">connect</span>([x], [<span class="pl-c1">TriangleFace</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)])
        <span class="pl-c1">@test</span> triangles <span class="pl-k">==</span> [<span class="pl-c1">Triangle</span>(x, x, x)]
        points <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>], Point{<span class="pl-c1">2</span>})
        faces <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], SimplexFace{<span class="pl-c1">4</span>})
        triangles <span class="pl-k">=</span> <span class="pl-c1">connect</span>(points, faces)
        <span class="pl-c1">@test</span> triangles <span class="pl-k">==</span> [<span class="pl-c1">Tetrahedron</span>(points<span class="pl-k">...</span>)]
    <span class="pl-k">end</span>

<span class="pl-k">end</span>


<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>constructors<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>LineFace<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>

        points <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], Point{<span class="pl-c1">2</span>})
        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>(points)
        <span class="pl-c1">@test</span> linestring <span class="pl-k">==</span> [<span class="pl-c1">Line</span>(points[<span class="pl-c1">1</span>], points[<span class="pl-c1">2</span>]), <span class="pl-c1">Line</span>(points[<span class="pl-c1">2</span>], points[<span class="pl-c1">3</span>])]

        points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Point{<span class="pl-c1">2</span>, Float64}, <span class="pl-c1">4</span>)
        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>(points, <span class="pl-c1">2</span>)
        <span class="pl-c1">@test</span> linestring <span class="pl-k">==</span> [<span class="pl-c1">Line</span>(points[<span class="pl-c1">1</span>], points[<span class="pl-c1">2</span>]), <span class="pl-c1">Line</span>(points[<span class="pl-c1">3</span>], points[<span class="pl-c1">4</span>])]

        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>([points[<span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> points[<span class="pl-c1">2</span>], points[<span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> points[<span class="pl-c1">3</span>]])
        <span class="pl-c1">@test</span> linestring <span class="pl-k">==</span> [<span class="pl-c1">Line</span>(points[<span class="pl-c1">1</span>], points[<span class="pl-c1">2</span>]), <span class="pl-c1">Line</span>(points[<span class="pl-c1">2</span>], points[<span class="pl-c1">3</span>])]

        faces <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>(points, faces)
        <span class="pl-c1">@test</span> linestring <span class="pl-k">==</span> <span class="pl-c1">LineString</span>([points[<span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> points[<span class="pl-c1">2</span>], points[<span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> points[<span class="pl-c1">3</span>]])
        a, b, c, d <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">7</span>, <span class="pl-c1">8</span>)
        points <span class="pl-k">=</span> [a, b, c, d]; faces <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>(points, faces, <span class="pl-c1">2</span>)
        <span class="pl-c1">@test</span> linestring <span class="pl-k">==</span> <span class="pl-c1">LineString</span>([a <span class="pl-k">=&gt;</span> b, c <span class="pl-k">=&gt;</span> d])

        faces <span class="pl-k">=</span> [<span class="pl-c1">LineFace</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">LineFace</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)]
        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>(points, faces)
        <span class="pl-c1">@test</span> linestring <span class="pl-k">==</span> <span class="pl-c1">LineString</span>([a <span class="pl-k">=&gt;</span> b, c <span class="pl-k">=&gt;</span> d])
    <span class="pl-k">end</span>

    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Polygon<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>

        points <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], Point{<span class="pl-c1">2</span>})
        polygon <span class="pl-k">=</span> <span class="pl-c1">Polygon</span>(points)
        <span class="pl-c1">@test</span> polygon <span class="pl-k">==</span> <span class="pl-c1">Polygon</span>(<span class="pl-c1">LineString</span>(points))

        points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Point{<span class="pl-c1">2</span>, Float64}, <span class="pl-c1">4</span>)
        linestring <span class="pl-k">=</span> <span class="pl-c1">LineString</span>(points, <span class="pl-c1">2</span>)
        <span class="pl-c1">@test</span> <span class="pl-c1">Polygon</span>(points, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">Polygon</span>(linestring)

        faces <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
        polygon <span class="pl-k">=</span> <span class="pl-c1">Polygon</span>(points, faces)
        <span class="pl-c1">@test</span> polygon <span class="pl-k">==</span> <span class="pl-c1">Polygon</span>(<span class="pl-c1">LineString</span>(points, faces))

        a, b, c, d <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">7</span>, <span class="pl-c1">8</span>)
        points <span class="pl-k">=</span> [a, b, c, d]; faces <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
        polygon <span class="pl-k">=</span> <span class="pl-c1">Polygon</span>(points, faces, <span class="pl-c1">2</span>)
        <span class="pl-c1">@test</span> polygon <span class="pl-k">==</span> <span class="pl-c1">Polygon</span>(<span class="pl-c1">LineString</span>(points, faces, <span class="pl-c1">2</span>))

        faces <span class="pl-k">=</span> [<span class="pl-c1">LineFace</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">LineFace</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)]
        polygon <span class="pl-k">=</span> <span class="pl-c1">Polygon</span>(points, faces)
        <span class="pl-c1">@test</span> polygon <span class="pl-k">==</span> <span class="pl-c1">Polygon</span>(<span class="pl-c1">LineString</span>(points, faces))
    <span class="pl-k">end</span>

    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Mesh<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>

        numbers <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]
        points <span class="pl-k">=</span> <span class="pl-c1">connect</span>(numbers, Point{<span class="pl-c1">2</span>})

        mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(points, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
        <span class="pl-c1">@test</span> mesh <span class="pl-k">==</span> [<span class="pl-c1">Triangle</span>(points<span class="pl-k">...</span>)]

        x <span class="pl-k">=</span> <span class="pl-c1">Point</span><span class="pl-c1">{3}</span>(<span class="pl-c1">1.0</span>)
        mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>([x], [<span class="pl-c1">TriangleFace</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)])
        <span class="pl-c1">@test</span> mesh <span class="pl-k">==</span> [<span class="pl-c1">Triangle</span>(x, x, x)]

        points <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>], Point{<span class="pl-c1">2</span>})
        faces <span class="pl-k">=</span> <span class="pl-c1">connect</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], SimplexFace{<span class="pl-c1">4</span>})
        mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(points, faces)
        <span class="pl-c1">@test</span> mesh <span class="pl-k">==</span> [<span class="pl-c1">Tetrahedron</span>(points<span class="pl-k">...</span>)]

    <span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
</article></div>