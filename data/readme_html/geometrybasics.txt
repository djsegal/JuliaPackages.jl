<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/JuliaGeometry/GeometryBasics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff0fbb8177e2de722c0dbf15fdbd8b7823733325/68747470733a2f2f6170692e7472617669732d63692e6f72672f4a756c696147656f6d657472792f47656f6d657472794261736963732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.org/JuliaGeometry/GeometryBasics.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaGeometry/GeometryBasics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/75a20190b194a15d17de57947848f4eb8aebd991/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696147656f6d657472792f47656f6d657472794261736963732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaGeometry/GeometryBasics.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><strong>Documentation</strong>:
<a href="http://juliageometry.github.io/GeometryBasics.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/61cc44bb88a9b8d0d9690f8a1574a1d2eb0f6eb4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d6c69676874677265792e737667" alt="Docs - stable" data-canonical-src="https://img.shields.io/badge/docs-stable-lightgrey.svg" style="max-width:100%;"></a>
<a href="http://juliageometry.github.io/GeometryBasics.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs - dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-geometrybasicsjl" class="anchor" aria-hidden="true" href="#geometrybasicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeometryBasics.jl</h1>
<p>Basic Geometry Types.
This package aimes to offer a standard set of Geometry types, which easily work with metadata, query frameworks on geometries and different memory layouts.
The aim is to create a solid basis for Graphics/Plotting, finite elements analysis, Geo applications, and general geometry manipulations - while offering a julian API, that still allows performant C-interop.</p>
<p>This package is a replacement for the discontinued <a href="https://github.com/JuliaGeometry/GeometryTypes.jl/">GeometryTypes</a>.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GeometryBasics

<span class="pl-c"><span class="pl-c">#</span> create some points</span>
julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Point{<span class="pl-c1">2</span>,Int64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> p2 <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> p3 <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>);

<span class="pl-c"><span class="pl-c">#</span> geometries can carry metadata</span>
julia<span class="pl-k">&gt;</span> poi <span class="pl-k">=</span> <span class="pl-c1">meta</span>(p1, city<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Abuja<span class="pl-pds">"</span></span>, rainfall<span class="pl-k">=</span><span class="pl-c1">1221.2</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element PointMeta{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},(<span class="pl-c1">:city</span>, <span class="pl-c1">:rainfall</span>),Tuple{String,Float64}} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> metadata is stored in a NamedTuple and can be retrieved as such</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">meta</span>(poi)
(city <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Abuja<span class="pl-pds">"</span></span>, rainfall <span class="pl-k">=</span> <span class="pl-c1">1221.2</span>)

<span class="pl-c"><span class="pl-c">#</span> specific metadata attributes can be directly retrieved</span>
julia<span class="pl-k">&gt;</span> poi<span class="pl-k">.</span>rainfall
<span class="pl-c1">1221.2</span>

<span class="pl-c"><span class="pl-c">#</span> to remove the metadata and keep only the geometry, use metafree</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">metafree</span>(poi)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Point{<span class="pl-c1">2</span>,Int64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> connect the points with lines</span>
julia<span class="pl-k">&gt;</span> l1 <span class="pl-k">=</span> <span class="pl-c1">Line</span>(p1, p2)
<span class="pl-c1">Line</span>([<span class="pl-c1">3</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>])

julia<span class="pl-k">&gt;</span> l2 <span class="pl-k">=</span> <span class="pl-c1">Line</span>(p2, p3);

<span class="pl-c"><span class="pl-c">#</span> connect the lines in a linestring</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">LineString</span>([l1, l2])
<span class="pl-c1">2</span><span class="pl-k">-</span>element LineString{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},Array{GeometryBasics<span class="pl-k">.</span>Ngon{<span class="pl-c1">2</span>,Int64,<span class="pl-c1">2</span>,Point{<span class="pl-c1">2</span>,Int64}},<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">Line</span>([<span class="pl-c1">3</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>])
 <span class="pl-c1">Line</span>([<span class="pl-c1">1</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">4</span>, <span class="pl-c1">4</span>])

<span class="pl-c"><span class="pl-c">#</span> linestrings can also be constructed directly from points</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">LineString</span>([p1, p2, p3])
<span class="pl-c1">2</span><span class="pl-k">-</span>element LineString{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},Base<span class="pl-k">.</span>ReinterpretArray{GeometryBasics<span class="pl-k">.</span>Ngon{<span class="pl-c1">2</span>,Int64,<span class="pl-c1">2</span>,Point{<span class="pl-c1">2</span>,Int64}},<span class="pl-c1">1</span>,Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}},TupleView{Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}}, <span class="pl-c1">1</span>}}}<span class="pl-k">:</span>
 <span class="pl-c1">Line</span>([<span class="pl-c1">3</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>])
 <span class="pl-c1">Line</span>([<span class="pl-c1">1</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">4</span>, <span class="pl-c1">4</span>])

<span class="pl-c"><span class="pl-c">#</span> the same goes for polygons</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Polygon</span>(Point{<span class="pl-c1">2</span>, Int}[(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">4</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">4</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">1</span>)])
Polygon{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},LineString{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},Base<span class="pl-k">.</span>ReinterpretArray{GeometryBasics<span class="pl-k">.</span>Ngon{<span class="pl-c1">2</span>,Int64,<span class="pl-c1">2</span>,Point{<span class="pl-c1">2</span>,Int64}},<span class="pl-c1">1</span>,Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}},TupleView{Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}}, <span class="pl-c1">1</span>}}},Array{LineString{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},Base<span class="pl-k">.</span>ReinterpretArray{GeometryBasics<span class="pl-k">.</span>Ngon{<span class="pl-c1">2</span>,Int64,<span class="pl-c1">2</span>,Point{<span class="pl-c1">2</span>,Int64}},<span class="pl-c1">1</span>,Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}},TupleView{Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}}, <span class="pl-c1">1</span>}}},<span class="pl-c1">1</span>}}(GeometryBasics<span class="pl-k">.</span>Ngon{<span class="pl-c1">2</span>,Int64,<span class="pl-c1">2</span>,Point{<span class="pl-c1">2</span>,Int64}}[<span class="pl-c1">Line</span>([<span class="pl-c1">3</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">4</span>, <span class="pl-c1">4</span>]), <span class="pl-c1">Line</span>([<span class="pl-c1">4</span>, <span class="pl-c1">4</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]), <span class="pl-c1">Line</span>([<span class="pl-c1">2</span>, <span class="pl-c1">4</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]), <span class="pl-c1">Line</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> [<span class="pl-c1">3</span>, <span class="pl-c1">1</span>])], LineString{<span class="pl-c1">2</span>,Int64,Point{<span class="pl-c1">2</span>,Int64},Base<span class="pl-k">.</span>ReinterpretArray{GeometryBasics<span class="pl-k">.</span>Ngon{<span class="pl-c1">2</span>,Int64,<span class="pl-c1">2</span>,Point{<span class="pl-c1">2</span>,Int64}},<span class="pl-c1">1</span>,Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}},TupleView{Tuple{Point{<span class="pl-c1">2</span>,Int64},Point{<span class="pl-c1">2</span>,Int64}}, <span class="pl-c1">1</span>}}}[])

<span class="pl-c"><span class="pl-c">#</span> create a rectangle placed at the origin with unit widths</span>
julia<span class="pl-k">&gt;</span> rect <span class="pl-k">=</span> <span class="pl-c1">Rect</span>(<span class="pl-c1">Vec</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Vec</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>))
GeometryBasics<span class="pl-k">.</span><span class="pl-c1">HyperRectangle</span><span class="pl-c1">{2,Float64}</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])

<span class="pl-c"><span class="pl-c">#</span> decompose the rectangle into two triangular faces</span>
julia<span class="pl-k">&gt;</span> rect_faces <span class="pl-k">=</span> <span class="pl-c1">decompose</span>(TriangleFace{Int}, rect)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{NgonFace{<span class="pl-c1">3</span>,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">TriangleFace</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
 <span class="pl-c1">TriangleFace</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> decompose the rectangle into four vertices</span>
julia<span class="pl-k">&gt;</span> rect_vertices <span class="pl-k">=</span> <span class="pl-c1">decompose</span>(Point{<span class="pl-c1">2</span>, Float64}, rect)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Point{<span class="pl-c1">2</span>,Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
 [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>]
 [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>]
 [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]

<span class="pl-c"><span class="pl-c">#</span> combine the vertices and faces into a triangle mesh</span>
julia<span class="pl-k">&gt;</span> mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(rect_vertices, rect_faces)
Mesh{<span class="pl-c1">2</span>, Float64, Triangle}<span class="pl-k">:</span>
 <span class="pl-c1">Triangle</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])
 <span class="pl-c1">Triangle</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>])</pre></div>
</article></div>