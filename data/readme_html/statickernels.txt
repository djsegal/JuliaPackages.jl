<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-statickernels" class="anchor" aria-hidden="true" href="#statickernels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StaticKernels</h1>
<p>Julia-native non-allocating kernel operations on arrays.
Current features include</p>
<ul>
<li>custom kernel functions in arbitrary dimensions</li>
<li>custom boundary/extension handling</li>
<li>kernel acts as a function in <code>map</code>, <code>map!</code></li>
<li>package is small and dependency free</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StaticKernels
a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>)

<span class="pl-c"><span class="pl-c">#</span> laplace</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> w[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">+</span> w[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>] <span class="pl-k">+</span> w[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">+</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1,-1:1)}</span>(kf)
<span class="pl-c1">map</span>(k, a)

<span class="pl-c"><span class="pl-c">#</span> erosion</span>
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1,-1:1)}</span>(w <span class="pl-k">-&gt;</span> <span class="pl-c1">minimum</span>(<span class="pl-c1">Tuple</span>(w)))
<span class="pl-c1">map</span>(k, a)

<span class="pl-c"><span class="pl-c">#</span> laplace, zero boundary condition</span>
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1,-1:1)}</span>(kf, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionConstant</span>(<span class="pl-c1">0</span>))
<span class="pl-c1">map</span>(k, a)

<span class="pl-c"><span class="pl-c">#</span> forward-gradient (non-skalar kernel), neumann boundary condition</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> (w[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">-</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>], w[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>] <span class="pl-k">-</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>])
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(0:1, 0:1)}</span>(kf, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionReplicate</span>())
<span class="pl-c1">map</span>(k, a)

<span class="pl-c"><span class="pl-c">#</span> custom boundary using `nothing`</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> <span class="pl-c1">something</span>(w[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>], w[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">0</span>)
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1, -1:1)}</span>(kf, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionNothing</span>())
<span class="pl-c1">map</span>(k, a)</pre></div>
<h2><a id="user-content-user-notes" class="anchor" aria-hidden="true" href="#user-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>User Notes</h2>
<ul>
<li>for best performance you should annotate kernel functions with <code>@inline</code> and
<code>@inbounds</code></li>
<li>the package is aimed at small kernels, use different algorithms for larger
kernels (inplace formulations or fft)</li>
<li>(currently) high compilation time for larger kernels or higher dimensions for
boundary specializations</li>
</ul>
<h2><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation Notes</h2>
<p>We use a statically sized array view <code>StaticKernels.Window</code> on which the
user-defined kernel function is applied. Access outside the window size returns
<code>nothing</code> instead of throwing an out-of-bounds error.</p>
<p>The user-supplied kernel function is specialized for all different <code>Windows</code>
(appropriately cropped versions on boundaries) and thus infers away checks like
e.g. <code>something(w[1,0], 0)</code> by leveraging constant propagation.</p>
<p>These components together with the auto-vectorizing Julia compiler allow for
fast execution.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h2>
<ul>
<li>generic mapreduce to allow e.g. <code>sum(k, a)</code></li>
<li>nicer (but type-instable) interface for kernel creation</li>
<li>abstract/strided array interface for windows (blocked by julia issue)</li>
<li>multi-window kernels for e.g. <code>map(k, a1, a2)</code></li>
<li>think about more specific kernel types and composability</li>
<li>syntactic sugar for determining kernel size through index access:
<code>@kernel(w -&gt; w[1] - w[0]) == Kernel{(2,),(1,)}(w -&gt; w[1] - w[0])</code></li>
</ul>
</article></div>