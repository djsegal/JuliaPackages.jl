<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-statickernels" class="anchor" aria-hidden="true" href="#statickernels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StaticKernels</h1>
<p>Julia-native non-allocating kernel operations on arrays.
Current features include</p>
<ul>
<li>custom kernel functions in arbitrary dimensions</li>
<li>efficient custom boundary extensions</li>
<li>kernel acts as a function in e.g. <code>map</code> or <code>mapreduce</code></li>
<li>package is small and dependency free</li>
</ul>
<p>This package is not a big zoo of different kernels and filters, but instead
enables you to write them easily and efficiently yourself.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StaticKernels
a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>)

<span class="pl-c"><span class="pl-c">#</span> laplace</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> w[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">+</span> w[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>] <span class="pl-k">+</span> w[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">+</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1,-1:1)}</span>(kf)
<span class="pl-c1">map</span>(k, a)

<span class="pl-c"><span class="pl-c">#</span> erosion</span>
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1,-1:1)}</span>(w <span class="pl-k">-&gt;</span> <span class="pl-c1">minimum</span>(<span class="pl-c1">Tuple</span>(w)))
<span class="pl-c1">map</span>(k, a)

<span class="pl-c"><span class="pl-c">#</span> laplace, zero boundary condition</span>
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1,-1:1)}</span>(kf)
<span class="pl-c1">map</span>(k, <span class="pl-c1">extend</span>(a, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionConstant</span>(<span class="pl-c1">0</span>)))

<span class="pl-c"><span class="pl-c">#</span> forward-gradient (non-skalar kernel), neumann boundary condition</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> (w[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">-</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>], w[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>] <span class="pl-k">-</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>])
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(0:1, 0:1)}</span>(kf)
<span class="pl-c1">map</span>(k, <span class="pl-c1">extend</span>(a, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionReplicate</span>()))

<span class="pl-c"><span class="pl-c">#</span> custom boundary using `nothing`</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> <span class="pl-c1">something</span>(w[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>], w[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">0</span>)
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(-1:1, -1:1)}</span>(kf)
<span class="pl-c1">map</span>(k, <span class="pl-c1">extend</span>(a, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionNothing</span>()))

<span class="pl-c"><span class="pl-c">#</span> total variation</span>
<span class="pl-en">kf</span>(w) <span class="pl-k">=</span> <span class="pl-c1">abs</span>(w[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>] <span class="pl-k">-</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>]) <span class="pl-k">+</span> <span class="pl-c1">abs</span>(w[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>] <span class="pl-k">-</span> w[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>])
k <span class="pl-k">=</span> <span class="pl-c1">Kernel</span><span class="pl-c1">{(0:1,0:1)}</span>(kf)
<span class="pl-c1">sum</span>(k, <span class="pl-c1">extend</span>(a, StaticKernels<span class="pl-k">.</span><span class="pl-c1">ExtensionReplicate</span>()))</pre></div>
<h2><a id="user-content-user-notes" class="anchor" aria-hidden="true" href="#user-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>User Notes</h2>
<ul>
<li>for best performance you should annotate kernel functions with <code>@inline</code> and
<code>@inbounds</code></li>
<li>the package is currently aimed at small kernels, for bigger kernels consider
using different algorithms (inplace formulations or fft)</li>
<li>(currently) high compilation time for larger kernels or higher dimensions for
boundary specializations</li>
</ul>
<h2><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation Notes</h2>
<ul>
<li>a statically sized array view <code>StaticKernels.Window</code> with relative indexing
is supplied to the user-defined kernel function</li>
<li>the user-supplied kernel function is specialized for all cropped windows on
the boundary, thus eliminating run-time checks.</li>
<li>for cache efficiency boundaries are handled along with the interior instead
of separately.</li>
<li>for fully inlined kernel functions the Julia compiler manages to
auto-vectorize the kernel loop efficiently in most cases.</li>
</ul>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul>
<li>make <code>k(a)</code> create a broadcastable object (define broadcast style, use
windowloop in <code>copy!(bc)</code> and define appropriate axes)</li>
<li>introduce elementary kernel <code>shift(a, CartesianIndex(1, 1))</code>, <code>@shift a[1,1]</code></li>
<li>nicer (but type-instable) interface for kernel creation</li>
<li>abstract/strided array interface for windows (blocked by julia issue)</li>
<li>think about more specific kernel types and composability</li>
<li>syntactic sugar for determining kernel size through index access:
<code>@kernel(w -&gt; w[1] - w[0]) == Kernel{(0:1,)}(w -&gt; w[1] - w[0])</code></li>
</ul>
</article></div>