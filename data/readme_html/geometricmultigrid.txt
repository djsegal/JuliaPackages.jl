<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-geometric-multigrid" class="anchor" aria-hidden="true" href="#geometric-multigrid"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Geometric Multigrid</h1>
<p dir="auto">High speed Geometric Multigrid solver in pure Julia.</p>
<table>
<thead>
<tr>
<th align="center"><a target="_blank" rel="noopener noreferrer" href="benchmark/MGscaling.png"><img src="benchmark/MGscaling.png" alt="mg solver benchmark" style="max-width: 100%;"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="benchmark/benchmark.jl">Benchmark example</a> for <code>mg!</code> solver demonstrating approximately linear solution time scaling with the length of the solution vector.</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Define a matrix and solution</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GeometricMultigrid

julia&gt; function setup_2D(n=128,T::Type=Float64)
           L = zeros(T,n+2,n+2,2); L[3:n+1,2:n+1,1] .= 1; L[2:n+1,3:n+1,2] .= 1; 
           x = T[i-1 for i ∈ 1:n+2, j ∈ 1:n+2]
           Poisson(L),FieldVector(x)
       end

julia&gt; A,x = setup_2D(4);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeometricMultigrid

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">setup_2D</span>(n<span class="pl-k">=</span><span class="pl-c1">128</span>,T<span class="pl-k">::</span><span class="pl-c1">Type</span><span class="pl-k">=</span>Float64)
           L <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(T,n<span class="pl-k">+</span><span class="pl-c1">2</span>,n<span class="pl-k">+</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>); L[<span class="pl-c1">3</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">.=</span> <span class="pl-c1">1</span>; L[<span class="pl-c1">2</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">.=</span> <span class="pl-c1">1</span>; 
           x <span class="pl-k">=</span> T[i<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">for</span> i <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">2</span>, j <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n<span class="pl-k">+</span><span class="pl-c1">2</span>]
           <span class="pl-c1">Poisson</span>(L),<span class="pl-c1">FieldVector</span>(x)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> A,x <span class="pl-k">=</span> <span class="pl-c1">setup_2D</span>(<span class="pl-c1">4</span>);</pre></div>
<p dir="auto">Define the source term and solve.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; b = A*x;

julia&gt; y,it = mg(A,b);

julia&gt; print(&quot;number of iterations=&quot;,it)
number of iterations=6

julia&gt; y
16-element FieldVector{Float64, 2, Matrix{Float64}}:
 -1.487754625809229
 -0.48775463361508725
  0.5122453605258042
  1.5122453584556865
 -1.4877546258567003
  ⋮
  1.5122453627041033
 -1.487754626187825
 -0.4877546300066085
  0.512245365911722
  1.5122453643079126"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> A<span class="pl-k">*</span>x;

julia<span class="pl-k">&gt;</span> y,it <span class="pl-k">=</span> <span class="pl-c1">mg</span>(A,b);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>number of iterations=<span class="pl-pds">"</span></span>,it)
number of iterations<span class="pl-k">=</span><span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> y
<span class="pl-c1">16</span><span class="pl-k">-</span>element FieldVector{Float64, <span class="pl-c1">2</span>, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.487754625809229</span>
 <span class="pl-k">-</span><span class="pl-c1">0.48775463361508725</span>
  <span class="pl-c1">0.5122453605258042</span>
  <span class="pl-c1">1.5122453584556865</span>
 <span class="pl-k">-</span><span class="pl-c1">1.4877546258567003</span>
  ⋮
  <span class="pl-c1">1.5122453627041033</span>
 <span class="pl-k">-</span><span class="pl-c1">1.487754626187825</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4877546300066085</span>
  <span class="pl-c1">0.512245365911722</span>
  <span class="pl-c1">1.5122453643079126</span></pre></div>
<p dir="auto">Check solution</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A*y ≈ b
true"><pre>julia<span class="pl-k">&gt;</span> A<span class="pl-k">*</span>y <span class="pl-k">≈</span> b
<span class="pl-c1">true</span></pre></div>
<p dir="auto">To use the in-place version, you need to set up a multi-grid <code>SolveState</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; st = mg_state(A,zero(x),b)
SolveState{Float64}:
   residual=2.8284271247461903
   residual=0.0
   nothing"><pre>julia<span class="pl-k">&gt;</span> st <span class="pl-k">=</span> <span class="pl-c1">mg_state</span>(A,<span class="pl-c1">zero</span>(x),b)
SolveState{Float64}<span class="pl-k">:</span>
   residual<span class="pl-k">=</span><span class="pl-c1">2.8284271247461903</span>
   residual<span class="pl-k">=</span><span class="pl-c1">0.0</span>
   <span class="pl-c1">nothing</span></pre></div>
<p dir="auto">This shows the residual on each level of the grid. Since there are only 4-grid points in each dimension, the grid can only be resitricted once. Restricting further to a 1x1 grid would produce the singular equation <code>0*x=b</code>.</p>
<p dir="auto">The system can now be solved in-place without further allocation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @allocated mg!(st)
0

julia&gt; st
SolveState{Float64}:
   residual=1.5436920360020765e-8
   residual=2.335855716890062e-16
   nothing

julia&gt; st.x
16-element FieldVector{Float64, 2, Matrix{Float64}}:
 -1.487754625809229
 -0.48775463361508725
  0.5122453605258042
  1.5122453584556865
 -1.4877546258567003
  ⋮
  1.5122453627041033
 -1.487754626187825
 -0.4877546300066085
  0.512245365911722
  1.5122453643079126"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@allocated</span> <span class="pl-c1">mg!</span>(st)
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> st
SolveState{Float64}<span class="pl-k">:</span>
   residual<span class="pl-k">=</span><span class="pl-c1">1.5436920360020765e-8</span>
   residual<span class="pl-k">=</span><span class="pl-c1">2.335855716890062e-16</span>
   <span class="pl-c1">nothing</span>

julia<span class="pl-k">&gt;</span> st<span class="pl-k">.</span>x
<span class="pl-c1">16</span><span class="pl-k">-</span>element FieldVector{Float64, <span class="pl-c1">2</span>, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.487754625809229</span>
 <span class="pl-k">-</span><span class="pl-c1">0.48775463361508725</span>
  <span class="pl-c1">0.5122453605258042</span>
  <span class="pl-c1">1.5122453584556865</span>
 <span class="pl-k">-</span><span class="pl-c1">1.4877546258567003</span>
  ⋮
  <span class="pl-c1">1.5122453627041033</span>
 <span class="pl-k">-</span><span class="pl-c1">1.487754626187825</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4877546300066085</span>
  <span class="pl-c1">0.512245365911722</span>
  <span class="pl-c1">1.5122453643079126</span></pre></div>
<h2 dir="auto"><a id="user-content-method" class="anchor" aria-hidden="true" href="#method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Method</h2>
<p dir="auto">Geometric <a href="https://en.wikipedia.org/wiki/Multigrid_method" rel="nofollow">multigrid methods</a> use a recursive approach to solve linear algebra problems stemming from partial differential equations posed on a structured numerical grid. <a href="https://github.com/JuliaLinearAlgebra/AlgebraicMultigrid.jl">Algebraic multigrid</a> methods apply to a broader class of problems, but are typically not as fast as Geometric Multigrid when applicable.</p>
<p dir="auto">The problem on the fine grid is <em>restricted</em> down to a coarsened grid, which is therefore faster to solve, and the solution is <em>prolongated</em> back up to the fine grid where any remaining high-frequency errors are <em>smoothed</em>. In this package the coarse grid is simply half the size in every dimension, the restriction operation is a sum over the local points and prolongation is a copy back up to those points. This is done recursively until halving is no longer possible, and then the solution is prolongated all the way back up to the top level in a process called a <em>V-cycle</em>. The default smoother is 3 iterations of the Gauss-Sidel method. The benchmark plot above shows this results in solution time with approximately linear scaling with the vector length.</p>
<h2 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h2>
<p dir="auto">Geometric Multigrid methods make use of the regular spatial connectivity of the grid to define the <em>restriction</em> and <em>prolongation</em> operators. These concepts are built into the package using the <code>FieldVector</code> type, which is simply a wrapper around a multi-dimensional array.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; _,x = setup_2D(3);

julia&gt; x
9-element FieldVector{Float64, 2, Matrix{Float64}}:
 1.0
 2.0
 3.0
 1.0
 2.0
 3.0
 1.0
 2.0
 3.0

julia&gt; x.data
5×5 Matrix{Float64}:
 0.0  0.0  0.0  0.0  0.0
 1.0  1.0  1.0  1.0  1.0
 2.0  2.0  2.0  2.0  2.0
 3.0  3.0  3.0  3.0  3.0
 4.0  4.0  4.0  4.0  4.0

julia&gt; x.R
3×3 CartesianIndices{2, Tuple{UnitRange{Int64}, UnitRange{Int64}}}:
 CartesianIndex(2, 2)  CartesianIndex(2, 3)  CartesianIndex(2, 4)
 CartesianIndex(3, 2)  CartesianIndex(3, 3)  CartesianIndex(3, 4)
 CartesianIndex(4, 2)  CartesianIndex(4, 3)  CartesianIndex(4, 4)

julia&gt; norm(x,Inf)  # does not include buffer elements in x.data
3.0"><pre>julia<span class="pl-k">&gt;</span> _,x <span class="pl-k">=</span> <span class="pl-c1">setup_2D</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">9</span><span class="pl-k">-</span>element FieldVector{Float64, <span class="pl-c1">2</span>, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> x<span class="pl-k">.</span>data
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">3.0</span>  <span class="pl-c1">3.0</span>  <span class="pl-c1">3.0</span>  <span class="pl-c1">3.0</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> x<span class="pl-k">.</span>R
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> CartesianIndices{<span class="pl-c1">2</span>, Tuple{UnitRange{Int64}, UnitRange{Int64}}}<span class="pl-k">:</span>
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)  <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)  <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)  <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)  <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
 <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">2</span>)  <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>)  <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(x,<span class="pl-c1">Inf</span>)  <span class="pl-c"><span class="pl-c">#</span> does not include buffer elements in x.data</span>
<span class="pl-c1">3.0</span></pre></div>
<p dir="auto">The <code>R</code> field holds the <code>CartesianIndices</code> range of the points in the field excluding any buffer elements, with the default being a buffer layer 1-element thick on all boundaries. Note that a <code>FieldVector</code> <em>acts</em> like a 1D vector by default, despite the underlying multidimensional data and buffer. This allows general linear algebra functions to be applied, as shown above.</p>
<p dir="auto">The extension of <code>FieldVector</code>s to matrices is the <code>FieldMatrix</code> type. Currently, this type only defines symmetric matrices with <code>M=length(dims)</code> subdiagonals held in an <code>M+1</code> dimensional array <code>L</code>. The <code>Poisson</code> function builds a matrix from <code>L</code> with zero-sum rows, which is a requirement for conservative Poisson equations: ∫ ∇⋅β∇ϕ dv = ∮ β ∂ϕ/∂n da.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A,_ = setup_2D(3);

julia&gt; A
9×9 FieldMatrix{Float64, 2, Array{Float64, 3}, Matrix{Float64}}:
 -2.0   1.0   0.0   1.0   0.0   0.0   0.0   0.0   0.0
  1.0  -3.0   1.0   0.0   1.0   0.0   0.0   0.0   0.0
  0.0   1.0  -2.0   0.0   0.0   1.0   0.0   0.0   0.0
  1.0   0.0   0.0  -3.0   1.0   0.0   1.0   0.0   0.0
  0.0   1.0   0.0   1.0  -4.0   1.0   0.0   1.0   0.0
  0.0   0.0   1.0   0.0   1.0  -3.0   0.0   0.0   1.0
  0.0   0.0   0.0   1.0   0.0   0.0  -2.0   1.0   0.0
  0.0   0.0   0.0   0.0   1.0   0.0   1.0  -3.0   1.0
  0.0   0.0   0.0   0.0   0.0   1.0   0.0   1.0  -2.0

julia&gt; diag(A).data
5×5 Matrix{Float64}:
 0.0   0.0   0.0   0.0  0.0
 0.0  -2.0  -3.0  -2.0  0.0
 0.0  -3.0  -4.0  -3.0  0.0
 0.0  -2.0  -3.0  -2.0  0.0
 0.0   0.0   0.0   0.0  0.0

julia&gt; eigen(A).values
9-element Vector{Float64}:
 -5.999999999999996
 -3.999999999999999
 -3.999999999999995
 -3.000000000000001
 -3.0
 -2.0000000000000018
 -0.9999999999999999
 -0.9999999999999986
  5.551115175576828e-16"><pre>julia<span class="pl-k">&gt;</span> A,_ <span class="pl-k">=</span> <span class="pl-c1">setup_2D</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> A
<span class="pl-c1">9</span><span class="pl-k">×</span><span class="pl-c1">9</span> FieldMatrix{Float64, <span class="pl-c1">2</span>, Array{Float64, <span class="pl-c1">3</span>}, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>   <span class="pl-c1">1.0</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">diag</span>(A)<span class="pl-k">.</span>data
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">2.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eigen</span>(A)<span class="pl-k">.</span>values
<span class="pl-c1">9</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">5.999999999999996</span>
 <span class="pl-k">-</span><span class="pl-c1">3.999999999999999</span>
 <span class="pl-k">-</span><span class="pl-c1">3.999999999999995</span>
 <span class="pl-k">-</span><span class="pl-c1">3.000000000000001</span>
 <span class="pl-k">-</span><span class="pl-c1">3.0</span>
 <span class="pl-k">-</span><span class="pl-c1">2.0000000000000018</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9999999999999999</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9999999999999986</span>
  <span class="pl-c1">5.551115175576828e-16</span></pre></div>
<p dir="auto">Again, this wrapper allows familiar linear algebra functions to be used, without losing the underlying geometric structure of the data. Fast custom linear algebra functions are defined for <code>norm(x)</code>, <code>dot(x,b)</code>, <code>dot(x,A,b)</code>, <code>mul!(b,A,x)</code> and <code>*</code>.</p>
<p dir="auto">Finally the <code>SolveState</code> is a recursive type which holds the required arrays for the <code>mg!</code> function.</p>
</article></div>