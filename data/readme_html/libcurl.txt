<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libcurljl" class="anchor" aria-hidden="true" href="#libcurljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibCURL.jl</h1>
<p dir="auto"><em>Julia wrapper for libCURL</em></p>
<p dir="auto"><a href="https://github.com/JuliaWeb/LibCURL.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaWeb/LibCURL.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaWeb/LibCURL.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a81e982ec4ac8697da808c3f882375c1fceea09c694bf82e0afd9c8ed092a185/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f4c69624355524c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaWeb/LibCURL.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<hr>
<p dir="auto">This is a simple Julia wrapper around <a href="http://curl.haxx.se/libcurl/" rel="nofollow">http://curl.haxx.se/libcurl/</a> generated using <a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a>. Please see the <a href="https://curl.haxx.se/libcurl/c/" rel="nofollow">libcurl API documentation</a> for help on how to use this package.</p>
<h3 dir="auto"><a id="user-content-example-fetch-a-url" class="anchor" aria-hidden="true" href="#example-fetch-a-url"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example (fetch a URL)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LibCURL

# init a curl handle
curl = curl_easy_init()

# set the URL and request to follow redirects
curl_easy_setopt(curl, CURLOPT_URL, &quot;http://example.com&quot;)
curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1)


# setup the callback function to recv data
function curl_write_cb(curlbuf::Ptr{Cvoid}, s::Csize_t, n::Csize_t, p_ctxt::Ptr{Cvoid})
    sz = s * n
    data = Array{UInt8}(undef, sz)

    ccall(:memcpy, Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, UInt64), data, curlbuf, sz)
    println(&quot;recd: &quot;, String(data))

    sz::Csize_t
end

c_curl_write_cb = @cfunction(curl_write_cb, Csize_t, (Ptr{Cvoid}, Csize_t, Csize_t, Ptr{Cvoid}))
curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, c_curl_write_cb)


# execute the query
res = curl_easy_perform(curl)
println(&quot;curl url exec response : &quot;, res)

# retrieve HTTP code
http_code = Array{Clong}(undef, 1)
curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, http_code)
println(&quot;httpcode : &quot;, http_code)

# release handle
curl_easy_cleanup(curl)
"><pre><span class="pl-k">using</span> LibCURL

<span class="pl-c"><span class="pl-c">#</span> init a curl handle</span>
curl <span class="pl-k">=</span> <span class="pl-c1">curl_easy_init</span>()

<span class="pl-c"><span class="pl-c">#</span> set the URL and request to follow redirects</span>
<span class="pl-c1">curl_easy_setopt</span>(curl, CURLOPT_URL, <span class="pl-s"><span class="pl-pds">"</span>http://example.com<span class="pl-pds">"</span></span>)
<span class="pl-c1">curl_easy_setopt</span>(curl, CURLOPT_FOLLOWLOCATION, <span class="pl-c1">1</span>)


<span class="pl-c"><span class="pl-c">#</span> setup the callback function to recv data</span>
<span class="pl-k">function</span> <span class="pl-en">curl_write_cb</span>(curlbuf<span class="pl-k">::</span><span class="pl-c1">Ptr{Cvoid}</span>, s<span class="pl-k">::</span><span class="pl-c1">Csize_t</span>, n<span class="pl-k">::</span><span class="pl-c1">Csize_t</span>, p_ctxt<span class="pl-k">::</span><span class="pl-c1">Ptr{Cvoid}</span>)
    sz <span class="pl-k">=</span> s <span class="pl-k">*</span> n
    data <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{UInt8}</span>(undef, sz)

    <span class="pl-c1">ccall</span>(<span class="pl-c1">:memcpy</span>, Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, UInt64), data, curlbuf, sz)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>recd: <span class="pl-pds">"</span></span>, <span class="pl-c1">String</span>(data))

    sz<span class="pl-k">::</span><span class="pl-c1">Csize_t</span>
<span class="pl-k">end</span>

c_curl_write_cb <span class="pl-k">=</span> <span class="pl-c1">@cfunction</span>(curl_write_cb, Csize_t, (Ptr{Cvoid}, Csize_t, Csize_t, Ptr{Cvoid}))
<span class="pl-c1">curl_easy_setopt</span>(curl, CURLOPT_WRITEFUNCTION, c_curl_write_cb)


<span class="pl-c"><span class="pl-c">#</span> execute the query</span>
res <span class="pl-k">=</span> <span class="pl-c1">curl_easy_perform</span>(curl)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>curl url exec response : <span class="pl-pds">"</span></span>, res)

<span class="pl-c"><span class="pl-c">#</span> retrieve HTTP code</span>
http_code <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Clong}</span>(undef, <span class="pl-c1">1</span>)
<span class="pl-c1">curl_easy_getinfo</span>(curl, CURLINFO_RESPONSE_CODE, http_code)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>httpcode : <span class="pl-pds">"</span></span>, http_code)

<span class="pl-c"><span class="pl-c">#</span> release handle</span>
<span class="pl-c1">curl_easy_cleanup</span>(curl)
</pre></div>
<h3 dir="auto"><a id="user-content-binaries" class="anchor" aria-hidden="true" href="#binaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Binaries</h3>
<p dir="auto">This package uses the <a href="https://github.com/JuliaBinaryWrappers/libCURL_jll.jl">LibCURL_jll</a> binary package to install compiled libCURL binaries on all supported platforms. The following products are defined in the jll</p>
<ul dir="auto">
<li><code>libcurl</code>: A <code>LibraryProduct</code> referencing the shared library</li>
<li><code>curl</code>: An <code>ExecutableProduct</code> referencing the binary</li>
</ul>
<p dir="auto">This package also uses the <a href="https://github.com/JuliaBinaryWrappers/MozillaCACerts_jll.jl">MozillaCACerts_jll</a> package to supply the Mozilla CA root certificate bundle. Note that the <code>cacert</code> symbol is re-exported from this package for ease of use.</p>
<ul dir="auto">
<li><code>cacert</code>: A <code>FileProduct</code> referencing the Mozilla CA certificate bundle</li>
</ul>
<h3 dir="auto"><a id="user-content-ssl-certificates" class="anchor" aria-hidden="true" href="#ssl-certificates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SSL certificates</h3>
<p dir="auto">Making SSL/TLS connections usually needs access to a CA certificate to validate peers. The Mozilla CA bundle can be used via this package. To use this certificate bundle, set the following option:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="curl_easy_setopt(curl, CURLOPT_CAINFO, LibCURL.cacert)"><pre><span class="pl-c1">curl_easy_setopt</span>(curl, CURLOPT_CAINFO, LibCURL<span class="pl-k">.</span>cacert)</pre></div>
</article></div>