<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-iocapture" class="anchor" aria-hidden="true" href="#iocapture"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IOCapture</h1>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/IOCapture/shLGd" rel="nofollow"><img src="https://camo.githubusercontent.com/616fc0e3b6b4064deda487a372747b65a294604b752d4b517fccd9818a3c2139/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f494f436170747572652f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/IOCapture/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/docs/IOCapture/shLGd" rel="nofollow"><img src="https://camo.githubusercontent.com/ac5d960d3533153238283f2d0cb61bfa266340cf0b42c0f1dedfaaa5cd16f7f1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d4a756c69614875622d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-JuliaHub-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaDocs/IOCapture.jl/actions"><img src="https://github.com/JuliaDocs/IOCapture.jl/workflows/CI/badge.svg" alt="Run tests" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/IOCapture/shLGd" rel="nofollow"><img src="https://camo.githubusercontent.com/74813bc2dd4b3ee4df51e986fb8a07edbfc546b2c48bb65729814128cd3159da/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f494f436170747572652f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/IOCapture/pkgeval.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaDocs/IOCapture.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0fc386d6fb9b9cf07d8cb46bab1bdfe3fae26f13b5714d24a1c2f58345e1eac9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961446f63732f494f436170747572652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaDocs/IOCapture.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Provides the <code>IOCapture.capture(f)</code> function which evaluates the function <code>f</code>, captures the
standard output and standard error, and returns it as a string, together with the return
value. For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; c = IOCapture.capture() do
           println(&quot;test&quot;)
           return 42
       end;

julia&gt; c.value, c.output
(42, &quot;test\n&quot;)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; c = IOCapture.capture() do
           println("test")
           return 42
       end;

julia&gt; c.value, c.output
(42, "test\n")
</code></pre></div>
<p dir="auto">See the docstring for full documentation.</p>
<h2 dir="auto"><a id="user-content-known-limitations" class="anchor" aria-hidden="true" href="#known-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known limitations</h2>
<h3 dir="auto"><a id="user-content-separately-stored-stdout-or-stderr-objects" class="anchor" aria-hidden="true" href="#separately-stored-stdout-or-stderr-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Separately stored <code>stdout</code> or <code>stderr</code> objects</h3>
<p dir="auto">The capturing does not work properly if <code>f</code> prints to the <code>stdout</code> object that has been
stored in a separate variable or object, e.g.:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; const original_stdout = stdout;

julia&gt; c = IOCapture.capture() do
           println(&quot;output to stdout&quot;)
           println(original_stdout, &quot;output to original stdout&quot;)
       end;
output to original stdout

julia&gt; c.output
&quot;output to stdout\n&quot;"><pre lang="julia-repl" class="notranslate"><code>julia&gt; const original_stdout = stdout;

julia&gt; c = IOCapture.capture() do
           println("output to stdout")
           println(original_stdout, "output to original stdout")
       end;
output to original stdout

julia&gt; c.output
"output to stdout\n"
</code></pre></div>
<p dir="auto">Relatedly, it is possible to run into errors if the <code>stdout</code> or <code>stderr</code> objects from
within a <code>capture</code> are being used in a subsequent <code>capture</code> or outside of the capture:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; c = IOCapture.capture() do
           return stdout
       end;

julia&gt; println(c.value, &quot;test&quot;)
ERROR: IOError: stream is closed or unusable
Stacktrace:
 [1] check_open at ./stream.jl:328 [inlined]
 [2] uv_write_async(::Base.PipeEndpoint, ::Ptr{UInt8}, ::UInt64) at ./stream.jl:959
 ..."><pre lang="julia-repl" class="notranslate"><code>julia&gt; c = IOCapture.capture() do
           return stdout
       end;

julia&gt; println(c.value, "test")
ERROR: IOError: stream is closed or unusable
Stacktrace:
 [1] check_open at ./stream.jl:328 [inlined]
 [2] uv_write_async(::Base.PipeEndpoint, ::Ptr{UInt8}, ::UInt64) at ./stream.jl:959
 ...
</code></pre></div>
<p dir="auto">This is because <code>stdout</code> and <code>stderr</code> within an <code>capture</code> actually refer to the temporary
redirect streams which get cleaned up at the end of the <code>capture</code> call.</p>
<h3 dir="auto"><a id="user-content-ansi-color--escape-sequences" class="anchor" aria-hidden="true" href="#ansi-color--escape-sequences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ANSI color / escape sequences</h3>
<p dir="auto">On Julia 1.5 and earlier, setting <code>color</code> to <code>true</code> has no effect, because the <a href="https://github.com/JuliaLang/julia/pull/36688" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/36688/hovercard">ability to
set <code>IOContext</code> attributes on redirected streams was added in
1.6</a>. I.e. on those older Julia versions the
captured output will generally not contain ANSI color escape sequences.</p>
<h2 dir="auto"><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar packages</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaIO/Suppressor.jl">Suppressor.jl</a> provides similar functionality,
but with a macro-based interface.</li>
</ul>
</article></div>