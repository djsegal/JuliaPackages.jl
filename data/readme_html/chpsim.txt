<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chpsim" class="anchor" aria-hidden="true" href="#chpsim"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChpSim</h1>
<p>A simple simulator for quantum stabilizer circuits based on
<a href="https://arxiv.org/abs/quant-ph/0406196" rel="nofollow">Scott Aaronson, Daniel Gottesman, <em>Improved Simulation of Stabilizer Circuits</em></a>
for <a href="https://julialang.org/" rel="nofollow">Julia</a>.
Adapted from <a href="https://github.com/Strilanc/python-chp-stabilizer-simulator">a Python implementation</a>
and uses a similar API.</p>
<p>This simulator can efficiently simulate Clifford operations on many qubits but does not support non-Clifford operations.</p>
<h1><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h1>
<p>Install ChpSim with Julia's package manager:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia -e 'using Pkg; Pkg.add(&quot;ChpSim&quot;)'
"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.add("ChpSim")<span class="pl-pds">'</span></span></pre></div>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ChpSim
sim = ChpState(6)

hadamard!(sim, 1)     # Hadamard gate on the first qubit
phase!(sim, 6)        # S gate on the last qubit
cnot!(sim, 2, 3)      # CNOT gate with control on qubit 2 and target on 3
r = measure!(sim, 3)  # Measure qubit 3

r.value       # The boolean measurement, true or false
r.determined  # False if the qubit was in superposition before measurement
"><pre><span class="pl-k">using</span> ChpSim
sim <span class="pl-k">=</span> <span class="pl-c1">ChpState</span>(<span class="pl-c1">6</span>)

<span class="pl-c1">hadamard!</span>(sim, <span class="pl-c1">1</span>)     <span class="pl-c"><span class="pl-c">#</span> Hadamard gate on the first qubit</span>
<span class="pl-c1">phase!</span>(sim, <span class="pl-c1">6</span>)        <span class="pl-c"><span class="pl-c">#</span> S gate on the last qubit</span>
<span class="pl-c1">cnot!</span>(sim, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)      <span class="pl-c"><span class="pl-c">#</span> CNOT gate with control on qubit 2 and target on 3</span>
r <span class="pl-k">=</span> <span class="pl-c1">measure!</span>(sim, <span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> Measure qubit 3</span>

r<span class="pl-k">.</span>value       <span class="pl-c"><span class="pl-c">#</span> The boolean measurement, true or false</span>
r<span class="pl-k">.</span>determined  <span class="pl-c"><span class="pl-c">#</span> False if the qubit was in superposition before measurement</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Uses 1/8 the memory but is typically slower
using ChpSim
sim = ChpState(6, bitpack=true)
"><pre><span class="pl-c"><span class="pl-c">#</span> Uses 1/8 the memory but is typically slower</span>
<span class="pl-k">using</span> ChpSim
sim <span class="pl-k">=</span> <span class="pl-c1">ChpState</span>(<span class="pl-c1">6</span>, bitpack<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
</article></div>