<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-trafficassignmentjl" class="anchor" aria-hidden="true" href="#trafficassignmentjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TrafficAssignment.jl</h1>
<p><a href="https://github.com/chkwon/TrafficAssignment.jl/actions?query=workflow%3ACI"><img src="https://github.com/chkwon/TrafficAssignment.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chkwon/TrafficAssignment.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/302dd9f753ed4072ab0ce77e7a3d37b0292bd51b2d97ed43d2f31a2104cc65f9/68747470733a2f2f636f6465636f762e696f2f67682f63686b776f6e2f5472616666696341737369676e6d656e742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chkwon/TrafficAssignment.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package for <a href="http://www.julialang.org" rel="nofollow">the Julia Language</a> does basically two tasks: (1) loading a network data and (2) finding a user equilibrium traffic pattern. See <a href="https://en.wikipedia.org/wiki/Route_assignment" rel="nofollow">Traffic Assignment</a>.</p>
<h1><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;TrafficAssignment&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TrafficAssignment<span class="pl-pds">"</span></span>)</pre></div>
<p>This will install <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a> and <a href="https://github.com/JuliaOpt/Optim.jl">Optim.jl</a>, if you don't have them already.</p>
<p>To check if works</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.test(&quot;TrafficAssignment&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>TrafficAssignment<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-load_ta_network" class="anchor" aria-hidden="true" href="#load_ta_network"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>load_ta_network</h1>
<p>This function loads a network data available in <a href="https://github.com/bstabler/TransportationNetworks">this TNTP github repository</a>. The network name must match with the directory name in the TNTP repository.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TrafficAssignment
ta_data = load_ta_network(&quot;SiouxFalls&quot;)
# ta_data = load_ta_network(&quot;Anaheim&quot;)
# ta_data = load_ta_network(&quot;Barcelona&quot;)
# ta_data = load_ta_network(&quot;Winnipeg&quot;)
"><pre><span class="pl-k">using</span> TrafficAssignment
ta_data <span class="pl-k">=</span> <span class="pl-c1">load_ta_network</span>(<span class="pl-s"><span class="pl-pds">"</span>SiouxFalls<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> ta_data = load_ta_network("Anaheim")</span>
<span class="pl-c"><span class="pl-c">#</span> ta_data = load_ta_network("Barcelona")</span>
<span class="pl-c"><span class="pl-c">#</span> ta_data = load_ta_network("Winnipeg")</span></pre></div>
<p>The return value is of the TA_Data type, which is defined as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mutable struct TA_Data
    network_name::String

    number_of_zones::Int
    number_of_nodes::Int
    first_thru_node::Int
    number_of_links::Int

    init_node::Array{Int,1}
    term_node::Array{Int,1}
    capacity::Array{Float64,1}
    link_length::Array{Float64,1}
    free_flow_time::Array{Float64,1}
    b::Array{Float64,1}
    power::Array{Float64,1}
    speed_limit::Array{Float64,1}
    toll::Array{Float64,1}
    link_type::Array{Int64,1}

    total_od_flow::Float64

    travel_demand::Array{Float64,2}
    od_pairs::Array{Tuple{Int64,Int64},1}

    toll_factor::Float64
    distance_factor::Float64

    best_objective::Float64
end
"><pre><span class="pl-k">mutable struct</span> TA_Data
    network_name<span class="pl-k">::</span><span class="pl-c1">String</span>

    number_of_zones<span class="pl-k">::</span><span class="pl-c1">Int</span>
    number_of_nodes<span class="pl-k">::</span><span class="pl-c1">Int</span>
    first_thru_node<span class="pl-k">::</span><span class="pl-c1">Int</span>
    number_of_links<span class="pl-k">::</span><span class="pl-c1">Int</span>

    init_node<span class="pl-k">::</span><span class="pl-c1">Array{Int,1}</span>
    term_node<span class="pl-k">::</span><span class="pl-c1">Array{Int,1}</span>
    capacity<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    link_length<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    free_flow_time<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    b<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    power<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    speed_limit<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    toll<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>
    link_type<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>

    total_od_flow<span class="pl-k">::</span><span class="pl-c1">Float64</span>

    travel_demand<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>
    od_pairs<span class="pl-k">::</span><span class="pl-c1">Array{Tuple{Int64,Int64},1}</span>

    toll_factor<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    distance_factor<span class="pl-k">::</span><span class="pl-c1">Float64</span>

    best_objective<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-ta_frank_wolfe" class="anchor" aria-hidden="true" href="#ta_frank_wolfe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ta_frank_wolfe</h1>
<p>This function implements methods to find traffic equilibrium flows: currently, Frank-Wolfe (FW) method, Conjugate FW (CFW) method, and Bi-conjugate FW (BFW) method.</p>
<p>References:</p>
<ul>
<li><a href="http://pubsonline.informs.org/doi/abs/10.1287/trsc.1120.0409" rel="nofollow">Mitradjieva, M., &amp; Lindberg, P. O. (2013). The Stiff Is Moving-Conjugate Direction Frank-Wolfe Methods with Applications to Traffic Assignment. <em>Transportation Science</em>, 47(2), 280-293.</a></li>
</ul>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="link_flow, link_travel_time, objective = ta_frank_wolfe(ta_data, log=&quot;off&quot;, tol=1e-2)
"><pre>link_flow, link_travel_time, objective <span class="pl-k">=</span> <span class="pl-c1">ta_frank_wolfe</span>(ta_data, log<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>off<span class="pl-pds">"</span></span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-2</span>)</pre></div>
<p>Available optional arguments:</p>
<ul>
<li>method=:fw / :cfw / :bfw (default=:bfw)</li>
<li>step="exact" / "newton" : exact line search using golden section / a simple Newton-type step (default=:exact)</li>
<li>log=:on / :off : displays information from each iteration or not (default=:off)</li>
<li>max_iter_no=<em>integer value</em> : maximum number of iterations (default=2000)</li>
<li>tol=<em>numeric value</em> : tolerance for the Average Excess Cost (AEC) (default=1e-3)</li>
</ul>
<p>For example, one may do:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ta_data = load_ta_network(&quot;SiouxFalls&quot;)
link_flow, link_travel_time, objective =
ta_frank_wolfe(ta_data, method=:cfw, max_iter_no=50000, step=:newton, log=:on, tol=1e-5)
"><pre>ta_data <span class="pl-k">=</span> <span class="pl-c1">load_ta_network</span>(<span class="pl-s"><span class="pl-pds">"</span>SiouxFalls<span class="pl-pds">"</span></span>)
link_flow, link_travel_time, objective <span class="pl-k">=</span>
<span class="pl-c1">ta_frank_wolfe</span>(ta_data, method<span class="pl-k">=</span><span class="pl-c1">:cfw</span>, max_iter_no<span class="pl-k">=</span><span class="pl-c1">50000</span>, step<span class="pl-k">=</span><span class="pl-c1">:newton</span>, log<span class="pl-k">=</span><span class="pl-c1">:on</span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>)</pre></div>
<p>The total system travel time can be simply computed as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LinearAlgebra
system_travel_time = dot(link_travel_time, link_flow)
"><pre><span class="pl-k">using</span> LinearAlgebra
system_travel_time <span class="pl-k">=</span> <span class="pl-c1">dot</span>(link_travel_time, link_flow)</pre></div>
<h1><a id="user-content-contributor" class="anchor" aria-hidden="true" href="#contributor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributor</h1>
<p>This package is written and maintained by <a href="http://www.chkwon.net" rel="nofollow">Changhyun Kwon</a>.</p>
</article></div>