<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-this-has-been-deprecated-in-favour-of-pairsmacrosjl" class="anchor" aria-hidden="true" href="#this-has-been-deprecated-in-favour-of-pairsmacrosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>This has been deprecated in favour of <a href="https://github.com/matthieugomez/PairsMacros.jl">PairsMacros.jl</a></h1>
<h2 dir="auto"><a id="user-content-pairaspipejl" class="anchor" aria-hidden="true" href="#pairaspipejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PairAsPipe.jl</h2>
<p dir="auto"><strong>P</strong>air<strong>A</strong>s<strong>P</strong>ipe (<code>@pap</code>) is friendly with DataFrames.jl's API.</p>
<p dir="auto">The macro <code>@pap</code> is designed to transform <code>newcol = fn(:col)</code> to <code>:col =&gt; fn =&gt; :newcol</code> which is an elegant (ab)use of pairs syntax (<code>a =&gt; b</code>) as pipes. Hence the name of the package.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">Some examples</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataFrames, PairAsPipe

df = DataFrame(a = 1:3)

transform(df, @pap b = :a .* 2) # same as transform(df, :a =&gt; a-&gt;a.*2 =&gt; :b)

transform(df, @pap :a .* 2) # same as transform(df, :a =&gt; a-&gt;a.*2); except for output column name

transform(df, @pap sum(:a)) # same as transform(df, :a =&gt; mean); except for output column name

filter(@pap(:a == 1), df) # same as filter([:a] =&gt; a -&gt; a == 1, df)"><pre><span class="pl-k">using</span> DataFrames, PairAsPipe

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)

<span class="pl-c1">transform</span>(df, <span class="pl-c1">@pap</span> b <span class="pl-k">=</span> <span class="pl-c1">:a</span> <span class="pl-k">.*</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> same as transform(df, :a =&gt; a-&gt;a.*2 =&gt; :b)</span>

<span class="pl-c1">transform</span>(df, <span class="pl-c1">@pap</span> <span class="pl-c1">:a</span> <span class="pl-k">.*</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> same as transform(df, :a =&gt; a-&gt;a.*2); except for output column name</span>

<span class="pl-c1">transform</span>(df, <span class="pl-c1">@pap</span> <span class="pl-c1">sum</span>(<span class="pl-c1">:a</span>)) <span class="pl-c"><span class="pl-c">#</span> same as transform(df, :a =&gt; mean); except for output column name</span>

<span class="pl-c1">filter</span>(<span class="pl-c1">@pap</span>(<span class="pl-c1">:a</span> <span class="pl-k">==</span> <span class="pl-c1">1</span>), df) <span class="pl-c"><span class="pl-c">#</span> same as filter([:a] =&gt; a -&gt; a == 1, df)</span></pre></div>
<h3 dir="auto"><a id="user-content-similar-work" class="anchor" aria-hidden="true" href="#similar-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar Work</h3>
<ul dir="auto">
<li><a href="https://github.com/matthieugomez/PairsMacros.jl">PairsMacros.jl</a></li>
<li><a href="https://github.com/JuliaData/DataFramesMeta.jl">DataFramesMeta.jl</a></li>
</ul>
</article></div>