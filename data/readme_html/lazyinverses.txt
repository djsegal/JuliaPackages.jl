<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazyinversesjl" class="anchor" aria-hidden="true" href="#lazyinversesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyInverses.jl</h1>
<p dir="auto"><a href="https://github.com/SebastianAment/LazyInverses.jl/actions/workflows/CI.yml"><img src="https://github.com/SebastianAment/LazyInverses.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/SebastianAment/LazyInverses.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e86d8888484de20cf3c21c515dabab977d854a44ab19d58f6041e131bb16c989/68747470733a2f2f636f6465636f762e696f2f67682f53656261737469616e416d656e742f4c617a79496e7665727365732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d364f5736513235433630" alt="codecov" data-canonical-src="https://codecov.io/gh/SebastianAment/LazyInverses.jl/branch/main/graph/badge.svg?token=6OW6Q25C60" style="max-width: 100%;"></a></p>
<p dir="auto">LazyInverses provides a lazy wrapper for a matrix inverse, akin to Adjoint in Julia Base.
See the README for example use cases.</p>
<p dir="auto">A current highlight is
the package's implementation of a type of energetic inner product (ternary dot product)
for which a <strong>7-fold increase in performance</strong> is observed compared to a naïve implementation.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Simply type <code>]</code> follwed by <code>add LazyInverses</code> in the REPL.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">The package exports two types <code>Inverse</code> and <code>PseudoInverse</code>,
and their corresponding "smart" constructors <code>inverse</code> and <code>pinverse</code>, which
return the lazy wrappers, unless the input is a number or a 1 x 1 matrix, in which case the inverse is returned directly.
This first example highlights the lazy behavior of <code>inverse</code>, and contrasts it to <code>inv</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LazyInverses
using LinearAlgebra

n = 1024
x = randn(n)
A = randn(n, n)
@time B = inv(A)
  0.058023 seconds (5 allocations: 8.508 MiB)
@time C = inverse(A)
  0.000003 seconds (1 allocation: 16 bytes)
A \ x ≈ C * x
  true
A * x ≈ C \ x
  true"><pre><span class="pl-k">using</span> LazyInverses
<span class="pl-k">using</span> LinearAlgebra

n <span class="pl-k">=</span> <span class="pl-c1">1024</span>
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n)
A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n, n)
<span class="pl-c1">@time</span> B <span class="pl-k">=</span> <span class="pl-c1">inv</span>(A)
  <span class="pl-c1">0.058023</span> seconds (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">8.508</span> MiB)
<span class="pl-c1">@time</span> C <span class="pl-k">=</span> <span class="pl-c1">inverse</span>(A)
  <span class="pl-c1">0.000003</span> seconds (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">16</span> bytes)
A <span class="pl-k">\</span> x <span class="pl-k">≈</span> C <span class="pl-k">*</span> x
  <span class="pl-c1">true</span>
A <span class="pl-k">*</span> x <span class="pl-k">≈</span> C <span class="pl-k">\</span> x
  <span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-use-cases" class="anchor" aria-hidden="true" href="#use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Cases</h2>
<h3 dir="auto"><a id="user-content-mahalanobis-norms-and-energetic-inner-products" class="anchor" aria-hidden="true" href="#mahalanobis-norms-and-energetic-inner-products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mahalanobis Norms and Energetic Inner Products</h3>
<p dir="auto">In a number of important models, including any that rely on computations with a multivariate Normal distribution,
it is necessary to compute a <a href="https://en.wikipedia.org/wiki/Mahalanobis_distance" rel="nofollow">Mahalanobis norm</a> with an <em>inverse of a positive semi-definite matrix</em>.
In order to allow for a particularly efficient implementation of this operation,
LazyInverses.jl extends the ternary dot product like so:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dot(::AbstractVector, ::Inverse{&lt;:Number, &lt;:Union{&lt;:Cholesky, &lt;:CholeskyPivoted}}, ::AbstractVector)"><pre><span class="pl-c1">dot</span>(<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, <span class="pl-k">::</span><span class="pl-c1">Inverse{&lt;:Number, &lt;:Union{&lt;:Cholesky, &lt;:CholeskyPivoted}}</span>, <span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)</pre></div>
<p dir="auto">Benchmarking the package's implementation against a naïve implementation,
we observe an up to <strong>7-fold increase in performance</strong>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LazyInverses
using LinearAlgebra
using BenchmarkTools

n = 1024
x = randn(n)
y = randn(n)
A = randn(n, n)
A = A'A
C = cholesky(A)
invC = inverse(C)

println(&quot;ternary dot-product multiplication&quot;)
@btime dot($x, $invC, $x)
  121.794 μs (3 allocations: 8.16 KiB)
@btime dot($x, $invC, $y)
  172.736 μs (15 allocations: 17.06 KiB)
@btime dot($x, $C \ $x)
  855.008 μs (1 allocation: 8.12 KiB)
@btime dot($x, $C \ $y)
  850.760 μs (1 allocation: 8.12 KiB)"><pre><span class="pl-k">using</span> LazyInverses
<span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> BenchmarkTools

n <span class="pl-k">=</span> <span class="pl-c1">1024</span>
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n)
y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n)
A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n, n)
A <span class="pl-k">=</span> A<span class="pl-k">'</span>A
C <span class="pl-k">=</span> <span class="pl-c1">cholesky</span>(A)
invC <span class="pl-k">=</span> <span class="pl-c1">inverse</span>(C)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>ternary dot-product multiplication<span class="pl-pds">"</span></span>)
<span class="pl-c1">@btime</span> <span class="pl-c1">dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>invC, <span class="pl-k">$</span>x)
  <span class="pl-c1">121.794</span> μs (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">8.16</span> KiB)
<span class="pl-c1">@btime</span> <span class="pl-c1">dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>invC, <span class="pl-k">$</span>y)
  <span class="pl-c1">172.736</span> μs (<span class="pl-c1">15</span> allocations<span class="pl-k">:</span> <span class="pl-c1">17.06</span> KiB)
<span class="pl-c1">@btime</span> <span class="pl-c1">dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>C <span class="pl-k">\</span> <span class="pl-k">$</span>x)
  <span class="pl-c1">855.008</span> μs (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">8.12</span> KiB)
<span class="pl-c1">@btime</span> <span class="pl-c1">dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>C <span class="pl-k">\</span> <span class="pl-k">$</span>y)
  <span class="pl-c1">850.760</span> μs (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">8.12</span> KiB)</pre></div>
<p dir="auto">Further, we observe a <strong>speed-up of up to a factor of 2</strong> for a ternary matrix multiplication,
where the middle matrix is an inverse Cholesky factorization.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="k = n
X = randn(k, n)
Y = randn(n, k)
println(&quot;ternary multiplication&quot;)
@btime *($X, $invC, $X')
  32.755 ms (5 allocations: 16.00 MiB)
@btime *($X, $invC, $Y)
  54.706 ms (4 allocations: 16.00 MiB)
@btime *($X, $C \ $X')
  59.221 ms (4 allocations: 16.00 MiB)
@btime *($X, $C \ $Y)
  56.177 ms (4 allocations: 16.00 MiB)"><pre>k <span class="pl-k">=</span> n
X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(k, n)
Y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n, k)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>ternary multiplication<span class="pl-pds">"</span></span>)
<span class="pl-c1">@btime</span> <span class="pl-k">*</span>(<span class="pl-k">$</span>X, <span class="pl-k">$</span>invC, <span class="pl-k">$</span>X<span class="pl-k">'</span>)
  <span class="pl-c1">32.755</span> ms (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">16.00</span> MiB)
<span class="pl-c1">@btime</span> <span class="pl-k">*</span>(<span class="pl-k">$</span>X, <span class="pl-k">$</span>invC, <span class="pl-k">$</span>Y)
  <span class="pl-c1">54.706</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">16.00</span> MiB)
<span class="pl-c1">@btime</span> <span class="pl-k">*</span>(<span class="pl-k">$</span>X, <span class="pl-k">$</span>C <span class="pl-k">\</span> <span class="pl-k">$</span>X<span class="pl-k">'</span>)
  <span class="pl-c1">59.221</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">16.00</span> MiB)
<span class="pl-c1">@btime</span> <span class="pl-k">*</span>(<span class="pl-k">$</span>X, <span class="pl-k">$</span>C <span class="pl-k">\</span> <span class="pl-k">$</span>Y)
  <span class="pl-c1">56.177</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">16.00</span> MiB)</pre></div>
<p dir="auto">Notably, the implementation takes advantage of threaded parallelism starting at a vector dimension of 1024,
but calls a single-threaded implementation for smaller vectors to minimize constants and maximize performance.</p>
<h3 dir="auto"><a id="user-content-woodburyidentityjl" class="anchor" aria-hidden="true" href="#woodburyidentityjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WoodburyIdentity.jl</h3>
<p dir="auto">Coming soon.</p>
<h3 dir="auto"><a id="user-content-kroneckerproductsjl" class="anchor" aria-hidden="true" href="#kroneckerproductsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KroneckerProducts.jl</h3>
<p dir="auto">Coming soon.</p>
<h3 dir="auto"><a id="user-content-zygotejl" class="anchor" aria-hidden="true" href="#zygotejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Zygote.jl</h3>
<p dir="auto">Coming soon.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">The experiments were run on a 2017 MacBook Pro with an i7 dual core and 16 GB of RAM.</p>
</article></div>