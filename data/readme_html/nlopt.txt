<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-the-nlopt-module-for-julia" class="anchor" aria-hidden="true" href="#the-nlopt-module-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The NLopt module for Julia</h1>
<p><a href="https://travis-ci.org/JuliaOpt/NLopt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2c0e144a85a152110f24ec96037a1fd691c77829/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f4e4c6f70742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/NLopt.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/StevenGJohnson/nlopt-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f757bdef5f0b37d274a25270f55fb6f743318676/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6571773979623263796e387378766f393f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/eqw9yb2cyn8sxvo9?svg=true" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=NLopt&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/b859646c3cdf717206f71a7c035acb81492e5621/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4e4c6f70745f302e332e737667" alt="NLopt" data-canonical-src="http://pkg.julialang.org/badges/NLopt_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=NLopt&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/d9801fa79892a47f118ad7c06a54d3c0d6accab7/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4e4c6f70745f302e342e737667" alt="NLopt" data-canonical-src="http://pkg.julialang.org/badges/NLopt_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=NLopt&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/52cb86c7d09c462068ef37d7edf46420337d73d7/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4e4c6f70745f302e352e737667" alt="NLopt" data-canonical-src="http://pkg.julialang.org/badges/NLopt_0.5.svg" style="max-width:100%;"></a></p>
<p>This module provides a <a href="http://julialang.org/" rel="nofollow">Julia-language</a> interface to
the free/open-source <a href="http://ab-initio.mit.edu/nlopt" rel="nofollow">NLopt library</a> for
nonlinear optimization. NLopt provides a common interface for many different
optimization algorithms, including:</p>
<ul>
<li>Both global and local optimization</li>
<li>Algorithms using function values only (derivative-free) and also algorithms
exploiting user-supplied gradients.</li>
<li>Algorithms for unconstrained optimization, bound-constrained optimization,
and general nonlinear inequality/equality constraints.</li>
</ul>
<p>See the <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Introduction" rel="nofollow">NLopt introduction</a>
for a further overview of the types of problems it addresses.</p>
<p>NLopt can be used either by accessing it's specialized API or by using the generic <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a> interface for nonlinear
optimization. Both methods are documented below.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Within Julia, you can install the NLopt.jl package with the package manager: <code>Pkg.add("NLopt")</code></p>
<p>On Windows and OS X platforms, NLopt binaries will be automatically installed.
On other platforms, Julia will attempt to build NLopt from source;
be sure to have a compiler installed.</p>
<h2><a id="user-content-using-with-mathprogbase" class="anchor" aria-hidden="true" href="#using-with-mathprogbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using with MathProgBase</h2>
<p>NLopt implements the <a href="http://mathprogbasejl.readthedocs.org/en/latest/nlp.html" rel="nofollow">MathProgBase interface</a> for nonlinear optimization, which means that it can be used interchangeably with other optimization packages from modeling packages like <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> or when providing hand-written derivatives. Note that NLopt does not exploit sparsity of Jacobians.</p>
<p>The NLopt solver is named <code>NLoptSolver</code> and takes parameters:</p>
<ul>
<li><code>algorithm</code></li>
<li><code>stopval</code></li>
<li><code>ftol_rel</code></li>
<li><code>ftol_abs</code></li>
<li><code>xtol_rel</code></li>
<li><code>xtol_abs</code></li>
<li><code>constrtol_abs</code></li>
<li><code>maxeval</code></li>
<li><code>maxtime</code></li>
<li><code>initial_step</code></li>
<li><code>population</code></li>
<li><code>seed</code></li>
<li><code>vector_storage</code></li>
</ul>
<p>The <code>algorithm</code> parameter is required, and all others are optional. The meaning and acceptable values of all parameters, except <code>constrtol_abs</code>, match the descriptions below from the specialized NLopt API. The <code>constrtol_abs</code> parameter is an absolute feasibility tolerance applied to all constraints.</p>
<h2><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h2>
<p>The following example code solves the nonlinearly constrained minimization
problem from the <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Tutorial" rel="nofollow">NLopt Tutorial</a>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NLopt

<span class="pl-k">function</span> <span class="pl-en">myfunc</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector</span>, grad<span class="pl-k">::</span><span class="pl-c1">Vector</span>)
    <span class="pl-k">if</span> <span class="pl-c1">length</span>(grad) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
        grad[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
        grad[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">2</span>])
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">sqrt</span>(x[<span class="pl-c1">2</span>])
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">myconstraint</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector</span>, grad<span class="pl-k">::</span><span class="pl-c1">Vector</span>, a, b)
    <span class="pl-k">if</span> <span class="pl-c1">length</span>(grad) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
        grad[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>a <span class="pl-k">*</span> (a<span class="pl-k">*</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b)<span class="pl-k">^</span><span class="pl-c1">2</span>
        grad[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-k">end</span>
    (a<span class="pl-k">*</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b)<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> x[<span class="pl-c1">2</span>]
<span class="pl-k">end</span>

opt <span class="pl-k">=</span> <span class="pl-c1">Opt</span>(<span class="pl-c1">:LD_MMA</span>, <span class="pl-c1">2</span>)
opt<span class="pl-k">.</span>lower_bounds <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">Inf</span>, <span class="pl-c1">0.</span>]
opt<span class="pl-k">.</span>xtol_rel <span class="pl-k">=</span> <span class="pl-c1">1e-4</span>

opt<span class="pl-k">.</span>min_objective <span class="pl-k">=</span> myfunc
<span class="pl-c1">inequality_constraint!</span>(opt, (x,g) <span class="pl-k">-&gt;</span> <span class="pl-c1">myconstraint</span>(x,g,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>), <span class="pl-c1">1e-8</span>)
<span class="pl-c1">inequality_constraint!</span>(opt, (x,g) <span class="pl-k">-&gt;</span> <span class="pl-c1">myconstraint</span>(x,g,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>), <span class="pl-c1">1e-8</span>)

(minf,minx,ret) <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(opt, [<span class="pl-c1">1.234</span>, <span class="pl-c1">5.678</span>])
numevals <span class="pl-k">=</span> opt<span class="pl-k">.</span>numevals <span class="pl-c"><span class="pl-c">#</span> the number of function evaluations</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>got <span class="pl-v">$minf</span> at <span class="pl-v">$minx</span> after <span class="pl-v">$numevals</span> iterations (returned <span class="pl-v">$ret</span>)<span class="pl-pds">"</span></span>)</pre></div>
<p>The output should be:</p>
<pre><code>got 0.5443310476200902 at [0.3333333346933468,0.29629628940318486] after 11 iterations (returned XTOL_REACHED)
</code></pre>
<p>Much like the NLopt interfaces in other languages, you create an
<code>Opt</code> object (analogous to <code>nlopt_opt</code> in C) which encapsulates the
dimensionality of your problem (here, 2) and the algorithm to be used
(here, <code>LD_MMA</code>) and use various functions to specify the constraints
and stopping criteria (along with any other aspects of the problem).</p>
<p>The same problem can be solved by using the JuMP interface to NLopt:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> NLopt

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">NLoptSolver</span>(algorithm<span class="pl-k">=</span><span class="pl-c1">:LD_MMA</span>))

a1 <span class="pl-k">=</span> <span class="pl-c1">2</span>
b1 <span class="pl-k">=</span> <span class="pl-c1">0</span>
a2 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
b2 <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-c1">@variable</span>(m, x1)
<span class="pl-c1">@variable</span>(m, x2 <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c1">@NLobjective</span>(m, Min, <span class="pl-c1">sqrt</span>(x2))
<span class="pl-c1">@NLconstraint</span>(m, x2 <span class="pl-k">&gt;=</span> (a1<span class="pl-k">*</span>x1<span class="pl-k">+</span>b1)<span class="pl-k">^</span><span class="pl-c1">3</span>)
<span class="pl-c1">@NLconstraint</span>(m, x2 <span class="pl-k">&gt;=</span> (a2<span class="pl-k">*</span>x1<span class="pl-k">+</span>b2)<span class="pl-k">^</span><span class="pl-c1">3</span>)

<span class="pl-c1">setvalue</span>(x1, <span class="pl-c1">1.234</span>)
<span class="pl-c1">setvalue</span>(x2, <span class="pl-c1">5.678</span>)

status <span class="pl-k">=</span> <span class="pl-c1">solve</span>(m)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>got <span class="pl-pds">"</span></span>, <span class="pl-c1">getobjectivevalue</span>(m), <span class="pl-s"><span class="pl-pds">"</span> at <span class="pl-pds">"</span></span>, [<span class="pl-c1">getvalue</span>(x1),<span class="pl-c1">getvalue</span>(x2)])</pre></div>
<p>The output should be:</p>
<pre><code>got 0.5443310477213124 at [0.3333333342139688,0.29629628951338166]
</code></pre>
<p>Note that the MathProgBase interface sets slightly different convergence tolerances by default,
so the outputs from the two problems are not identical.</p>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reference</h2>
<p>The main purpose of this section is to document the syntax and unique
features of the Julia interface; for more detail on the underlying
features, please refer to the C documentation in the <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference" rel="nofollow">NLopt
Reference</a>.</p>
<h3><a id="user-content-using-the-julia-api" class="anchor" aria-hidden="true" href="#using-the-julia-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the Julia API</h3>
<p>To use NLopt in Julia, your Julia program should include the line:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NLopt</pre></div>
<p>which imports the NLopt module and its symbols.  (Alternatively, you
can use <code>import NLopt</code> if you want to keep all the NLopt symbols in
their own namespace.  You would then prefix all functions below with
<code>NLopt.</code>, e.g. <code>NLopt.Opt</code> and so on.)</p>
<h3><a id="user-content-the-opt-type" class="anchor" aria-hidden="true" href="#the-opt-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>Opt</code> type</h3>
<p>The NLopt API revolves around an object of type <code>Opt</code>. Via functions
acting on this object, all of the parameters of the optimization are
specified (dimensions, algorithm, stopping criteria, constraints,
objective function, etcetera), and then one finally calls the
<code>optimize</code> function in order to perform the optimization. The object
should normally be created via the constructor:</p>
<div class="highlight highlight-source-julia"><pre>opt <span class="pl-k">=</span> <span class="pl-c1">Opt</span>(algorithm, n)</pre></div>
<p>given an algorithm (see <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Algorithms" rel="nofollow">NLopt
Algorithms</a>
for possible values) and the dimensionality of the problem (<code>n</code>, the
number of optimization parameters). Whereas in C the algorithms are
specified by <code>nlopt_algorithm</code> constants of the form <code>NLOPT_LD_MMA</code>,
<code>NLOPT_LN_COBYLA</code>, etcetera, the Julia <code>algorithm</code> values are symbols
of the form <code>:LD_MMA</code>, <code>:LN_COBYLA</code>, etcetera (with the <code>NLOPT_</code> prefix
replaced by <code>:</code> to create a Julia symbol).</p>
<p>There is also a <code>copy(opt::Opt)</code> function to make a copy of a given
object (equivalent to <code>nlopt_copy</code> in the C API).</p>
<p>If there is an error in these functions, an exception is thrown.</p>
<p>The algorithm and dimension parameters of the object are immutable (cannot be changed without constructing a new object), but you can query them for a given object by:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ndims</span>(opt)
opt<span class="pl-k">.</span>algorithm</pre></div>
<p>You can get a string description of the algorithm via:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">algorithm_name</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>)</pre></div>
<h3><a id="user-content-objective-function" class="anchor" aria-hidden="true" href="#objective-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Objective function</h3>
<p>The objective function is specified by setting one of the properties:</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>min_objective <span class="pl-k">=</span> f
opt<span class="pl-k">.</span>max_objective <span class="pl-k">=</span> f</pre></div>
<p>depending on whether one wishes to minimize or maximize the objective function <code>f</code>, respectively. The function <code>f</code> should be of the form:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector</span>, grad<span class="pl-k">::</span><span class="pl-c1">Vector</span>)<span class="pl-k">:</span>
    <span class="pl-k">if</span> <span class="pl-c1">length</span>(grad) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span><span class="pl-k">:</span>
        <span class="pl-k">...</span>set grad to gradient, in<span class="pl-k">-</span>place<span class="pl-k">...</span>
    <span class="pl-k">return</span> <span class="pl-k">...</span>value of <span class="pl-c1">f</span>(x)<span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p>The return value should be the value of the function at the point <code>x</code>,
where <code>x</code> is a (<code>Float64</code>) array of length <code>n</code> of the optimization
parameters (the same as the dimension passed to the <code>Opt</code> constructor).</p>
<p>In addition, if the argument <code>grad</code> is not empty [i.e. <code>length(grad)</code>&gt;0],
then <code>grad</code> is a (<code>Float64</code>) array of length <code>n</code> which should (upon return) be
set to the gradient of the function with respect to the optimization
parameters at <code>x</code>. That is, <code>grad[i]</code> should upon return contain the
partial derivative ∂<code>f</code>/∂<code>x</code><sub><code>i</code></sub>, for 1≤<code>i</code>≤<code>n</code>, if
<code>grad</code> is non-empty. Not all of the optimization algorithms (below) use
the gradient information: for algorithms listed as "derivative-free,"
the <code>grad</code> argument will always be empty and need never be
computed. (For algorithms that do use gradient information, however,
<code>grad</code> may still be empty for some calls.)</p>
<p>Note that <code>grad</code> must be modified <em>in-place</em> by your function <code>f</code>. Generally, this means using indexing operations <code>grad[...] = ...</code> to overwrite the contents of <code>grad</code>.  For example <code>grad = 2x</code> will <em>not</em> work, because it points <code>grad</code> to a new array <code>2x</code> rather than overwriting the old contents; instead, use an explicit loop or use <code>grad[:] = 2x</code>.</p>
<h3><a id="user-content-bound-constraints" class="anchor" aria-hidden="true" href="#bound-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bound constraints</h3>
<p>The bound constraints can be specified by setting one of the properties:</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>lower_bounds <span class="pl-k">=</span> lb<span class="pl-k">::</span><span class="pl-c1">Union{AbstractVector,Real}</span>
opt<span class="pl-k">.</span>upper_bounds <span class="pl-k">=</span> ub<span class="pl-k">::</span><span class="pl-c1">Union{AbstractVector,Real}</span></pre></div>
<p>where <code>lb</code> and <code>ub</code> are real arrays of length <code>n</code> (the same as the
dimension passed to the <code>Opt</code> constructor). For convenience, you can
instead use a single scalar for <code>lb</code> or <code>ub</code> in
order to set the lower/upper bounds for all optimization parameters to
a single constant.</p>
<p>To retrieve the values of the lower/upper bounds, you can use the properties</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>lower_bounds
opt<span class="pl-k">.</span>upper_bounds</pre></div>
<p>both of which return <code>Vector{Float64}</code> arrays.</p>
<p>To specify an unbounded dimension, you can use <code>±Inf</code>.</p>
<h3><a id="user-content-nonlinear-constraints" class="anchor" aria-hidden="true" href="#nonlinear-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nonlinear constraints</h3>
<p>Just as for nonlinear constraints in C, you can specify nonlinear
inequality and equality constraints by the functions:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">inequality_constraint!</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>, fc, tol<span class="pl-k">=</span><span class="pl-c1">0</span>)
<span class="pl-c1">equality_constraint!</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>, h, tol<span class="pl-k">=</span><span class="pl-c1">0</span>)</pre></div>
<p>where the arguments <code>fc</code> and <code>h</code> have the same form as the objective
function above. The optional <code>tol</code> arguments specify a tolerance
(which defaults to zero) in judging feasibility for the purposes of
stopping the optimization, as in C.   For the default <code>tol=0</code>, you can
also use <code>opt.inequality_constraint = fc</code> or <code>opt.equality_constraint = hc</code>.</p>
<p>Each call to these function <em>adds</em> a new constraint to the set of constraints,
rather than replacing the constraints.
To remove all of the inequality and equality constraints from a given problem, you can call the following functions:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">remove_constraints!</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>)</pre></div>
<h3><a id="user-content-vector-valued-constraints" class="anchor" aria-hidden="true" href="#vector-valued-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vector-valued constraints</h3>
<p>Just as for nonlinear constraints in C, you can specify vector-valued
nonlinear inequality and equality constraints by the functions</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">inequality_constraint!</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>, c, tol<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)
<span class="pl-c1">equality_constraint!</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>, c, tol<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)</pre></div>
<p>Here, <code>tol</code> is an array of the tolerances in each constraint
dimension; the dimensionality <code>m</code> of the constraint is determined by
<code>length(tol)</code>. The constraint function <code>c</code> must be of the form:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">c</span>(result<span class="pl-k">::</span><span class="pl-c1">Vector</span>, x<span class="pl-k">::</span><span class="pl-c1">Vector</span>, grad<span class="pl-k">::</span><span class="pl-c1">Matrix</span>)<span class="pl-k">:</span>
    <span class="pl-k">if</span> <span class="pl-c1">length</span>(grad) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span><span class="pl-k">:</span>
        <span class="pl-k">...</span>set grad to gradient, in<span class="pl-k">-</span>place<span class="pl-k">...</span>
    result[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">...</span>value of <span class="pl-c1">c1</span>(x)<span class="pl-k">...</span>
    result[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">...</span>value of <span class="pl-c1">c2</span>(x)<span class="pl-k">...</span>
    <span class="pl-k">...</span></pre></div>
<p><code>result</code> is a (<code>Float64</code>) array whose length equals the dimensionality
<code>m</code> of the constraint (same as the length of <code>tol</code> above), which upon
return should be set <em>in-place</em> (see also above) to the constraint
results at the point <code>x</code> (a <code>Float64</code> array whose length <code>n</code> is the
same as the dimension passed to the <code>Opt</code> constructor). Any return value of
the function is ignored.</p>
<p>In addition, if the argument <code>grad</code> is not empty
[i.e. <code>length(grad)</code>&gt;0], then <code>grad</code> is a 2d array of size
<code>n</code>×<code>m</code> which should (upon return) be set in-place (see above)
to the gradient of the function with respect to the optimization
parameters at <code>x</code>. That is, <code>grad[j,i]</code> should upon return contain the
partial derivative ∂c<sub><code>i</code></sub>/∂x<sub><code>j</code></sub> if
<code>grad</code> is non-empty. Not all of the optimization algorithms (below)
use the gradient information: for algorithms listed as
"derivative-free," the <code>grad</code> argument will always be empty and need
never be computed. (For algorithms that do use gradient information,
however, <code>grad</code> may still be empty for some calls.)</p>
<p>An inequality constraint corresponds to c<sub><code>i</code></sub>≤0 for
1≤<code>i</code>≤<code>m</code>, and an equality constraint corresponds to
c<sub>i</sub>=0, in both cases with tolerance <code>tol[i]</code> for purposes of
termination criteria.</p>
<p>(You can add multiple vector-valued constraints and/or scalar
constraints in the same problem.)</p>
<h3><a id="user-content-stopping-criteria" class="anchor" aria-hidden="true" href="#stopping-criteria"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stopping criteria</h3>
<p>As explained in the <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference" rel="nofollow">C API
Reference</a>
and the
<a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Introduction" rel="nofollow">Introduction</a>),
you have multiple options for different stopping criteria that you can
specify. (Unspecified stopping criteria are disabled; i.e., they have
innocuous defaults.)</p>
<p>For each stopping criteria, there is a property of the <code>opt::Opt</code> object
that you can use to get/set the value of the stopping criterion.
The meanings of each criterion are exactly the same as in the C API:</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>stopval</pre></div>
<p>Stop when an objective value of at least <code>stopval</code> is found.
(Defaults to <code>-Inf</code>.)</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>ftol_rel
opt<span class="pl-k">.</span>ftol_abs</pre></div>
<p>Relative or absolute tolerance on function value. (Defaults to <code>0</code>.)</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>xtol_rel
opt<span class="pl-k">.</span>xtol_abs</pre></div>
<p>Absolute or relative tolerances on the optimization parameters.
(Both default to <code>0</code>.)
In the case of <code>xtol_abs</code>, you can either set it to a scalar
(to use the same tolerance for all inputs) or a vector of
length <code>n</code> (the dimension specified in the <code>Opt</code> constructor)
to use a different tolerance for each parameter.</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>maxeval</pre></div>
<p>Stop when the number of function evaluations exceeds <code>mev</code>. (0 or
negative for no limit, which is the default.)</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>maxtime</pre></div>
<p>Stop when the optimization time (in seconds) exceeds <code>t</code>. (0 or
negative for no limit, which is the default.)</p>
<h3><a id="user-content-forced-termination" class="anchor" aria-hidden="true" href="#forced-termination"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Forced termination</h3>
<p>In certain cases, the caller may wish to force the optimization to
halt, for some reason unknown to NLopt. For example, if the user
presses Ctrl-C, or there is an error of some sort in the objective
function. You can do this by throwing any exception inside your
objective/constraint functions: the optimization will be halted
gracefully, and the same exception will be thrown to the caller. See
below regarding exceptions. The Julia equivalent of <code>nlopt_forced_stop</code>
from the C API is to throw a <code>ForcedStop</code> exception.</p>
<h3><a id="user-content-performing-the-optimization" class="anchor" aria-hidden="true" href="#performing-the-optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performing the optimization</h3>
<p>Once all of the desired optimization parameters have been specified in
a given object <code>opt::Opt</code>, you can perform the optimization by calling:</p>
<div class="highlight highlight-source-julia"><pre>(optf,optx,ret) <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)</pre></div>
<p>On input, <code>x</code> is an array of length <code>n</code> (the dimension of the problem
from the <code>Opt</code> constructor) giving an initial guess for the
optimization parameters. The return value <code>optx</code> is a array containing
the optimized values of the optimization parameters. <code>optf</code> contains
the optimized value of the objective function, and <code>ret</code> contains a
symbol indicating the NLopt return code (below).</p>
<p>Alternatively,</p>
<div class="highlight highlight-source-julia"><pre>(optf,optx,ret) <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(opt<span class="pl-k">::</span><span class="pl-c1">Opt</span>, x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)</pre></div>
<p>is the same but modifies <code>x</code> in-place (as well as returning <code>optx=x</code>).</p>
<p>On failure (negative return codes), optimize() throws an
exception (see Exceptions, below).</p>
<h3><a id="user-content-return-values" class="anchor" aria-hidden="true" href="#return-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Return values</h3>
<p>The possible return values are the same as the <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference#Return_values" rel="nofollow">return values in the C
API</a>,
except that the <code>NLOPT_</code> prefix is replaced with <code>:</code>.  That is, the return values are <code>:SUCCESS</code>, <code>:XTOL_REACHED</code>, etcetera (instead of <code>NLOPT_SUCCESS</code> etcetera).</p>
<h3><a id="user-content-exceptions" class="anchor" aria-hidden="true" href="#exceptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exceptions</h3>
<p>The error codes in the C API are replaced in the Julia API by thrown
exceptions. The following exceptions are thrown by the various
routines:</p>
<p>If your objective/constraint functions throw any exception during the
execution of <code>optimize</code>, it will be caught by NLopt and the
optimization will be halted gracefully, and opt.optimize will re-throw
the same exception to its caller.</p>
<h3><a id="user-content-localsubsidiary-optimization-algorithm" class="anchor" aria-hidden="true" href="#localsubsidiary-optimization-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Local/subsidiary optimization algorithm</h3>
<p>Some of the algorithms, especially MLSL and AUGLAG, use a different
optimization algorithm as a subroutine, typically for local
optimization. You can change the local search algorithm and its
tolerances by setting:</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>local_optimizer <span class="pl-k">=</span> local_opt<span class="pl-k">::</span><span class="pl-c1">Opt</span></pre></div>
<p>Here, <code>local_opt</code> is another <code>Opt</code> object whose parameters are used to determine the local search algorithm, its stopping criteria, and other algorithm parameters. (However, the objective function, bounds, and nonlinear-constraint parameters of <code>local_opt</code> are ignored.) The dimension <code>n</code> of <code>local_opt</code> must match that of <code>opt</code>.</p>
<p>This makes a copy of the <code>local_opt</code> object, so you can freely change your original <code>local_opt</code> afterwards without affecting <code>opt</code>.</p>
<h3><a id="user-content-initial-step-size" class="anchor" aria-hidden="true" href="#initial-step-size"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Initial step size</h3>
<p>Just <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference#Initial_step_size" rel="nofollow">as in the C
API</a>,
you can set the initial step sizes for derivative-free
optimization algorithms via the <code>opt.initial_step</code> property:</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>initial_step <span class="pl-k">=</span> dx</pre></div>
<p>Here, <code>dx</code> is an array of the (nonzero) initial steps for each
dimension, or a single number if you wish to use the same initial
steps for all dimensions. <code>initial_step(opt::Opt, x::AbstractVector)</code> returns the initial step that will be used for a
starting guess of <code>x</code> in <code>optimize(opt,x)</code>.</p>
<h3><a id="user-content-stochastic-population" class="anchor" aria-hidden="true" href="#stochastic-population"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stochastic population</h3>
<p>Just <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference#Stochastic_population" rel="nofollow">as in the C
API</a>,
you can get and set the initial population for stochastic optimization
algorithms by the property</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>population</pre></div>
<p>(A <code>population</code> of zero, the default, implies that the heuristic default will be used as decided upon by individual algorithms.)</p>
<h3><a id="user-content-pseudorandom-numbers" class="anchor" aria-hidden="true" href="#pseudorandom-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pseudorandom numbers</h3>
<p>For stochastic optimization algorithms, NLopt uses pseudorandom numbers
generated by the Mersenne Twister algorithm, based on code from Makoto
Matsumoto. By default, the seed for the random numbers is generated
from the system time, so that you will get a different sequence of
pseudorandom numbers each time you run your program. If you want to
use a "deterministic" sequence of pseudorandom numbers, i.e. the same
sequence from run to run, you can set the seed by calling:</p>
<div class="highlight highlight-source-julia"><pre>NLopt<span class="pl-k">.</span><span class="pl-c1">srand</span>(seed<span class="pl-k">::</span><span class="pl-c1">Integer</span>)</pre></div>
<p>To reset the seed based on the system time, you can call <code>NLopt.srand_time()</code>.</p>
<p>(Normally, you don't need to call this as it is called
automatically. However, it might be useful if you want to
"re-randomize" the pseudorandom numbers after calling <code>nlopt.srand</code> to
set a deterministic seed.)</p>
<h3><a id="user-content-vector-storage-for-limited-memory-quasi-newton-algorithms" class="anchor" aria-hidden="true" href="#vector-storage-for-limited-memory-quasi-newton-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vector storage for limited-memory quasi-Newton algorithms</h3>
<p>Just <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference#Vector_storage_for_limited-memory_quasi-Newton_algorithms" rel="nofollow">as in the C API</a>, you can get and set the number M of stored vectors for limited-memory quasi-Newton algorithms, via integer-valued property</p>
<div class="highlight highlight-source-julia"><pre>opt<span class="pl-k">.</span>vector_storage</pre></div>
<p>(The default is <code>0</code>, in which case NLopt uses a heuristic nonzero value as
determined by individual algorithms.)</p>
<h3><a id="user-content-version-number" class="anchor" aria-hidden="true" href="#version-number"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Version number</h3>
<p>The version number of NLopt is given by the global variable:</p>
<div class="highlight highlight-source-julia"><pre>NLOPT_VERSION<span class="pl-k">::</span><span class="pl-c1">VersionNumber</span></pre></div>
<p>where <code>VersionNumber</code> is a built-in Julia type from the Julia standard library.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Author</h2>
<p>This module was initially written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven G. Johnson</a>,
with subsequent contributions by several other authors (see the git history).</p>
</article></div>