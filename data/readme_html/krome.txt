<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kromejl" class="anchor" aria-hidden="true" href="#kromejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KROME.jl</h1>
<p dir="auto"><a href="https://github.com/trixi-framework/KROME.jl/actions?query=workflow%3ACI"><img src="https://github.com/trixi-framework/KROME.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/trixi-framework/KROME.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/a0ab919a1d131e84f09fd85c85e6ee4d43f494426653b440a71ffb7240467a72/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74726978692d6672616d65776f726b2f4b524f4d452e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/trixi-framework/KROME.jl/badge.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2da4b47047416995ad40532496f4b028e9aeca4a9ad036ed17bee5d2fb753b32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d737563636573732e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-success.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>KROME.jl</strong> is a Julia package that wraps <a href="http://kromepackage.org" rel="nofollow">KROME</a>, a
Fortran library for including chemistry and microphysics in astrophysics
simulations.</p>
<p dir="auto"><strong>NOTE: This package is in its early stages and still highly experimental!
Some things might not work yet, and implementation details may change
at any time without warning.</strong></p>
<h2 dir="auto"><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prerequisites</h2>
<p dir="auto">The following programs and tools must be available in the <code>PATH</code> such that they
can be called by the Julia process while building the package:</p>
<ul dir="auto">
<li>Python 3 (<code>python3</code>)</li>
<li><code>make</code></li>
<li>GNU Fortran compiler (<code>gfortran</code>)</li>
</ul>
<p dir="auto">Also note that KROME has primarily been developed for Linux, but also works on
macOS. Both OS are automatically tested with KROME.jl. Windows is not supported
by KROME.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">If you have not yet installed Julia, please <a href="https://julialang.org/downloads/platform/" rel="nofollow">follow the instructions for your
operating system</a>. KROMEjl works
with Julia v1.5.</p>
<p dir="auto">You can then install KROME.jl by executing</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia -e 'using Pkg; Pkg.add(&quot;KROME&quot;)'"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.add("KROME")<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">By default, this will build the KROME library with the <code>hello</code> test activated,
i.e., passing <code>-test=hello</code> to the KROME preprocessing script. However, usually
you will want to pass your own network file and possibly other options to KROME
during preprocessing. This can be achieved via the environment variable
<code>JULIA_KROME_CUSTOM_ARGS</code>, which accepts a <code>;</code>-separated list of arguments that
will be passed to the <code>krome</code> preprocessor. For example, to provide a custom
network file while disabling the recombinations check, you can run the build
command above with</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="JULIA_KROME_CUSTOM_ARGS=&quot;-n;abs/path/to/react_skynet&quot; julia -e 'using Pkg; Pkg.build(&quot;KROME&quot;)'"><pre>JULIA_KROME_CUSTOM_ARGS=<span class="pl-s"><span class="pl-pds">"</span>-n;abs/path/to/react_skynet<span class="pl-pds">"</span></span> julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.build("KROME")<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">Please note that you have to specify the <em>absolute</em> path to the network file.</p>
<p dir="auto">Next to the arguments to the <code>krome</code> preprocessing script, you can also
configure which Python 3 executable to use by setting the environment variable
<code>JULIA_KROME_PYTHON3_EXEC</code> to its full path. Furthermore, you can disable
compiler optimizations for the KROME library by setting the environment variable
<code>JULIA_KROME_OPTIMIZED_BUILD</code> to something other than <code>true</code>. By default,
optimizations are enabled.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Have a look at the examples in <a href="examples/">examples/</a> to find out how to use
KROME.jl. Right now there are two examples available.</p>
<h3 dir="auto"><a id="user-content-test_hello" class="anchor" aria-hidden="true" href="#test_hello"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>test_hello</h3>
<p dir="auto">To run this example, start Julia and execute the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using KROME

julia&gt; include(joinpath(KROME.examples_dir(), &quot;test_hello&quot;, &quot;test_hello.jl&quot;));

julia&gt; test_hello()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> KROME

julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(KROME<span class="pl-k">.</span><span class="pl-c1">examples_dir</span>(), <span class="pl-s"><span class="pl-pds">"</span>test_hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test_hello.jl<span class="pl-pds">"</span></span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">test_hello</span>()</pre></div>
<p dir="auto">This will print out the abundancies as the chemical network evolves in time. To
store the results in a file, e.g., <code>test_hello.txt</code>, change the last line of the
snippet above to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; open(&quot;test_hello.txt&quot;, &quot;w+&quot;) do io; test_hello(io); end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>test_hello.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io; <span class="pl-c1">test_hello</span>(io); <span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-av-slab-benchmark" class="anchor" aria-hidden="true" href="#av-slab-benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>av-slab-benchmark</h3>
<p dir="auto">To run this example, you first need to build KROME.jl with a different network
file by executing</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="KROME_NETWORK_FILE=$(julia -e 'using KROME; println(joinpath(KROME.examples_dir(), &quot;av-slab-benchmark&quot;, &quot;react_chnet5&quot;))') \
  JULIA_KROME_CUSTOM_ARGS=&quot;-n;$KROME_NETWORK_FILE;-noRecCheck&quot; \
  julia -e 'using Pkg; Pkg.build(&quot;KROME&quot;)'"><pre>KROME_NETWORK_FILE=<span class="pl-s"><span class="pl-pds">$(</span>julia -e <span class="pl-s"><span class="pl-pds">'</span>using KROME; println(joinpath(KROME.examples_dir(), "av-slab-benchmark", "react_chnet5"))<span class="pl-pds">'</span></span><span class="pl-pds">)</span></span> \
  JULIA_KROME_CUSTOM_ARGS=<span class="pl-s"><span class="pl-pds">"</span>-n;<span class="pl-smi">$KROME_NETWORK_FILE</span>;-noRecCheck<span class="pl-pds">"</span></span> \
  julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.build("KROME")<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">The command</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia -e 'using KROME; println(joinpath(KROME.examples_dir(), &quot;av-slab-benchmark&quot;, &quot;react_chnet5&quot;))'"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using KROME; println(joinpath(KROME.examples_dir(), "av-slab-benchmark", "react_chnet5"))<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">is used here to obtain the path to the chemical network file from the
corresponding example directory of the KROME.jl package.</p>
<p dir="auto">After re-building KROME.jl successfully, start Julia and execute the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using KROME

julia&gt; include(joinpath(KROME.examples_dir(), &quot;av-slab-benchmark&quot;, &quot;av_slab.jl&quot;))

julia&gt; av_slab()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> KROME

julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(KROME<span class="pl-k">.</span><span class="pl-c1">examples_dir</span>(), <span class="pl-s"><span class="pl-pds">"</span>av-slab-benchmark<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>av_slab.jl<span class="pl-pds">"</span></span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">av_slab</span>()</pre></div>
<p dir="auto">This will start the example and printing the chemical network updates as they
are computed. Note that this example takes a minute or two to fully run through.</p>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<p dir="auto">KROME.jl was initiated by
<a href="https://www.mi.uni-koeln.de/NumSim/schlottke-lakemper" rel="nofollow">Michael Schlottke-Lakemper</a>
(University of Cologne, Germany).
The <a href="http://kromepackage.org" rel="nofollow">KROME</a> package itself is developed and maintained by
Tommaso Grassi, Stefano Bovino, and many others.</p>
<h2 dir="auto"><a id="user-content-license-and-contributing" class="anchor" aria-hidden="true" href="#license-and-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License and contributing</h2>
<p dir="auto">KROME.jl is licensed under the MIT license (see <a href="LICENSE.md">LICENSE.md</a>).
The <a href="http://kromepackage.org" rel="nofollow">KROME</a> package itself is licensed under the GNU
General Public License, version 3.</p>
</article></div>