<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-newicktreejl" class="anchor" aria-hidden="true" href="#newicktreejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NewickTree.jl</h1>
<p>Read a <a href="http://evolution.genetics.washington.edu/phylip/newicktree.html" rel="nofollow">newick tree</a> to a tree data structure. The resulting data structure supports the <a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees.jl</a> interface.</p>
<h2><a id="user-content-reading-trees" class="anchor" aria-hidden="true" href="#reading-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading trees</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NewickTree
t <span class="pl-k">=</span> <span class="pl-c1">readnw</span>(<span class="pl-s"><span class="pl-pds">"</span>((A:1.2,B:1.4)86:0.2,C:0.6);<span class="pl-pds">"</span></span>)
<span class="pl-c1">print_tree</span>(t)</pre></div>
<pre><code>((A:1.2,B:1.4)86.0:1.4,C:0.6);
├─ (A:1.2,B:1.4);
│  ├─ A:1.2
│  └─ B:1.4
└─ C:0.6
</code></pre>
<p>Use <code>readnw(readline("your_file.nw"))</code> to read a newick tree from a file. Use <code>readnw.(readlines("your_file.nw"))</code> to read a vector of trees from a file with a newick tree on each line.</p>
<p>Note that trees should adhere to the Newick standard, they should end with a semicolon and can only contain (1) leaf names, (2) support values <em>or</em> internal names and (3) branch lengths as node information. Failure to provide a valid Newick string will trigger an error:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">try</span>
    t <span class="pl-k">=</span> <span class="pl-c1">readnw</span>(<span class="pl-s"><span class="pl-pds">"</span>((A:1.2,B:1.4)86:0.2,C:0.6)<span class="pl-pds">"</span></span>)
<span class="pl-k">catch</span> ex
    <span class="pl-c1">@show</span> ex
<span class="pl-k">end</span></pre></div>
<pre><code>"Malformed Newick string '((A:1.2,B:1.4)86:0.2,C:0.6)'"
</code></pre>
<p>The tree data structure is pretty straightforward, with nodes storing the following fields:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">fieldnames</span>(<span class="pl-c1">typeof</span>(t))</pre></div>
<pre><code>(:id, :data, :parent, :children)
</code></pre>
<p>Functions from <code>AbstractTrees</code> can be used, for instance</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AbstractTrees
<span class="pl-c1">collect</span>(<span class="pl-c1">Leaves</span>(t))</pre></div>
<pre><code>3-element Array{Node{UInt16,NewickTree.NewickData{Float64,String}},1}:
 A:1.2
 B:1.4
 C:0.6
</code></pre>
<p>or</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">collect</span>(<span class="pl-c1">PostOrderDFS</span>(t))</pre></div>
<pre><code>5-element Array{Node{UInt16,NewickTree.NewickData{Float64,String}},1}:
 A:1.2
 B:1.4
 (A:1.2,B:1.4)86.0:0.2;
 C:0.6
 ((A:1.2,B:1.4)86.0:0.2,C:0.6);
</code></pre>
<p>some simple recursive tree traversals are also implemented</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">postwalk</span>(t)
<span class="pl-c1">prewalk</span>(t)</pre></div>
<pre><code>5-element Array{Node{UInt16,NewickTree.NewickData{Float64,String}},1}:
 ((A:1.2,B:1.4)86.0:0.2,C:0.6);
 (A:1.2,B:1.4)86.0:0.2;
 A:1.2
 B:1.4
 C:0.6
</code></pre>
<p>these tend to be faster (at least for small trees?)</p>
<h2><a id="user-content-writing-trees" class="anchor" aria-hidden="true" href="#writing-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing trees</h2>
<p><code>nwstr</code> converts a tree data structure that implements the required functions (see below) to a Newick string:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">nwstr</span>(t)</pre></div>
<pre><code>"((A:1.2,B:1.4)86.0:0.2,C:0.6);"
</code></pre>
<p><code>writenw</code> uses this to write to a stream or file.</p>
<div class="highlight highlight-source-julia"><pre>io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
<span class="pl-c1">writenw</span>(io, t)
<span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(io))</pre></div>
<pre><code>"((A:1.2,B:1.4)86.0:0.2,C:0.6);"
</code></pre>
<h2><a id="user-content-support-for-writing-other-tree-structured-data-to-newick-strings" class="anchor" aria-hidden="true" href="#support-for-writing-other-tree-structured-data-to-newick-strings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Support for writing other tree structured data to Newick strings</h2>
<p>Any data structure that implements the AbstractTrees interface (i.e. defines <code>AbstractTrees.children</code>) can be written to a Newick structure provided several functions are defined. For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AbstractTrees
t <span class="pl-k">=</span> (((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>),<span class="pl-c1">3</span>),(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">print_tree</span>(t)</pre></div>
<pre><code>(((1, 2), 3), (4, 5))
├─ ((1, 2), 3)
│  ├─ (1, 2)
│  │  ├─ 1
│  │  └─ 2
│  └─ 3
└─ (4, 5)
   ├─ 4
   └─ 5
</code></pre>
<p>The following functions should be defined</p>
<div class="highlight highlight-source-julia"><pre>NewickTree<span class="pl-k">.</span><span class="pl-en">name</span>(x<span class="pl-k">::</span><span class="pl-c1">Tuple</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
NewickTree<span class="pl-k">.</span><span class="pl-en">name</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">string</span>(x)
NewickTree<span class="pl-k">.</span><span class="pl-en">support</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{Int,Tuple}</span>) <span class="pl-k">=</span> <span class="pl-c1">NaN</span>
NewickTree<span class="pl-k">.</span><span class="pl-en">distance</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{Int,Tuple}</span>) <span class="pl-k">=</span> <span class="pl-c1">NaN</span>
NewickTree<span class="pl-k">.</span><span class="pl-en">isleaf</span>(x) <span class="pl-k">=</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">==</span> Int ? <span class="pl-c1">true</span> : <span class="pl-c1">false</span></pre></div>
<p>This enables us to use the <code>nwstr</code> and <code>writenw</code> functions</p>
<div class="highlight highlight-source-julia"><pre>s <span class="pl-k">=</span> <span class="pl-c1">nwstr</span>(t)</pre></div>
<pre><code>"(((1,2),3),(4,5));"
</code></pre>
<p>now we can read the Newick string</p>
<div class="highlight highlight-source-julia"><pre>n <span class="pl-k">=</span> <span class="pl-c1">readnw</span>(s)
<span class="pl-c1">print_tree</span>(n)</pre></div>
<pre><code>(((1,2),3),(4,5));
├─ ((1,2),3);
│  ├─ (1,2);
│  │  ├─ 1
│  │  └─ 2
│  └─ 3
└─ (4,5);
   ├─ 4
   └─ 5
</code></pre>
<hr>
<p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>