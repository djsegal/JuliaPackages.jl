<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/arzwa/NewickTree.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/97b7ad82af06ef8cb807791f7d8d248f5bd4517298e828590a090bff082b8363/68747470733a2f2f7472617669732d63692e636f6d2f61727a77612f4e657769636b547265652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/arzwa/NewickTree.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-newicktreejl" class="anchor" aria-hidden="true" href="#newicktreejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NewickTree.jl</h1>
<p>Read a <a href="http://evolution.genetics.washington.edu/phylip/newicktree.html" rel="nofollow">newick tree</a> to a tree data structure. The resulting data structure supports the <a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees.jl</a> interface.</p>
<h2><a id="user-content-reading-trees" class="anchor" aria-hidden="true" href="#reading-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading trees</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NewickTree
t = readnw(&quot;((A:1.2,B:1.4)86:0.2,C:0.6);&quot;)
print_tree(t)
"><pre><span class="pl-k">using</span> NewickTree
t <span class="pl-k">=</span> <span class="pl-c1">readnw</span>(<span class="pl-s"><span class="pl-pds">"</span>((A:1.2,B:1.4)86:0.2,C:0.6);<span class="pl-pds">"</span></span>)
<span class="pl-c1">print_tree</span>(t)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="((A:1.2,B:1.4)86.0:1.4,C:0.6);
├─ (A:1.2,B:1.4);
│  ├─ A:1.2
│  └─ B:1.4
└─ C:0.6
"><pre><code>((A:1.2,B:1.4)86.0:1.4,C:0.6);
├─ (A:1.2,B:1.4);
│  ├─ A:1.2
│  └─ B:1.4
└─ C:0.6
</code></pre></div>
<p>Use <code>readnw(readline("your_file.nw"))</code> to read a newick tree from a file. Use <code>readnw.(readlines("your_file.nw"))</code> to read a vector of trees from a file with a newick tree on each line.</p>
<p>Note that trees should adhere to the Newick standard, they should end with a semicolon and can only contain (1) leaf names, (2) support values <em>or</em> internal names and (3) branch lengths as node information. Failure to provide a valid Newick string will trigger an error:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="try
    t = readnw(&quot;((A:1.2,B:1.4)86:0.2,C:0.6)&quot;)
catch ex
    @show ex
end
"><pre><span class="pl-k">try</span>
    t <span class="pl-k">=</span> <span class="pl-c1">readnw</span>(<span class="pl-s"><span class="pl-pds">"</span>((A:1.2,B:1.4)86:0.2,C:0.6)<span class="pl-pds">"</span></span>)
<span class="pl-k">catch</span> ex
    <span class="pl-c1">@show</span> ex
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;Malformed Newick string '((A:1.2,B:1.4)86:0.2,C:0.6)' (no trailing semicolon?)&quot;
"><pre><code>"Malformed Newick string '((A:1.2,B:1.4)86:0.2,C:0.6)' (no trailing semicolon?)"
</code></pre></div>
<p>The tree data structure is pretty straightforward, with nodes storing the following fields:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="fieldnames(typeof(t))
"><pre><span class="pl-c1">fieldnames</span>(<span class="pl-c1">typeof</span>(t))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(:id, :data, :parent, :children)
"><pre><code>(:id, :data, :parent, :children)
</code></pre></div>
<p>Some simple recursive tree traversals are implemented</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="postwalk(t)
prewalk(t)
"><pre><span class="pl-c1">postwalk</span>(t)
<span class="pl-c1">prewalk</span>(t)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="5-element Array{Node{UInt16,NewickData{Float64,String}},1}:
 ((A:1.2,B:1.4)86.0:0.2,C:0.6);
 (A:1.2,B:1.4)86.0:0.2;
 A:1.2;
 B:1.4;
 C:0.6;
"><pre><code>5-element Array{Node{UInt16,NewickData{Float64,String}},1}:
 ((A:1.2,B:1.4)86.0:0.2,C:0.6);
 (A:1.2,B:1.4)86.0:0.2;
 A:1.2;
 B:1.4;
 C:0.6;
</code></pre></div>
<p>There are also the following self-explanatory functions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getleaves(t)
getroot(t)
getlca(t, &quot;A&quot;, &quot;B&quot;)  # get last common ancestor
"><pre><span class="pl-c1">getleaves</span>(t)
<span class="pl-c1">getroot</span>(t)
<span class="pl-c1">getlca</span>(t, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> get last common ancestor</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(A:1.2,B:1.4)86.0:0.2;
"><pre><code>(A:1.2,B:1.4)86.0:0.2;
</code></pre></div>
<p>Functions from <code>AbstractTrees</code> can also be used, for instance</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AbstractTrees
collect(Leaves(t))
collect(PostOrderDFS(t))
"><pre><span class="pl-k">using</span> AbstractTrees
<span class="pl-c1">collect</span>(<span class="pl-c1">Leaves</span>(t))
<span class="pl-c1">collect</span>(<span class="pl-c1">PostOrderDFS</span>(t))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="5-element Array{Node{UInt16,NewickData{Float64,String}},1}:
 A:1.2;
 B:1.4;
 (A:1.2,B:1.4)86.0:0.2;
 C:0.6;
 ((A:1.2,B:1.4)86.0:0.2,C:0.6);
"><pre><code>5-element Array{Node{UInt16,NewickData{Float64,String}},1}:
 A:1.2;
 B:1.4;
 (A:1.2,B:1.4)86.0:0.2;
 C:0.6;
 ((A:1.2,B:1.4)86.0:0.2,C:0.6);
</code></pre></div>
<h2><a id="user-content-writing-trees" class="anchor" aria-hidden="true" href="#writing-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writing trees</h2>
<p><code>nwstr</code> converts a tree data structure that implements the required functions (see below) to a Newick string:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="nwstr(t)
"><pre><span class="pl-c1">nwstr</span>(t)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;((A:1.2,B:1.4)86.0:0.2,C:0.6);&quot;
"><pre><code>"((A:1.2,B:1.4)86.0:0.2,C:0.6);"
</code></pre></div>
<p><code>writenw</code> uses this to write to a stream or file.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="io = IOBuffer()
writenw(io, t)
String(take!(io))
"><pre>io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
<span class="pl-c1">writenw</span>(io, t)
<span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(io))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;((A:1.2,B:1.4)86.0:0.2,C:0.6);&quot;
"><pre><code>"((A:1.2,B:1.4)86.0:0.2,C:0.6);"
</code></pre></div>
<h2><a id="user-content-support-for-writing-other-tree-structured-data-to-newick-strings" class="anchor" aria-hidden="true" href="#support-for-writing-other-tree-structured-data-to-newick-strings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Support for writing other tree structured data to Newick strings</h2>
<p>Any data structure that implements the AbstractTrees interface (i.e. defines <code>AbstractTrees.children</code>) can be written to a Newick structure provided several functions are defined. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = (((1,2),3),(4,5))
NewickTree.isleaf(::Int) = true
NewickTree.isleaf(::Tuple) = false
print_tree(t)
"><pre>t <span class="pl-k">=</span> (((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>),<span class="pl-c1">3</span>),(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>))
NewickTree<span class="pl-k">.</span><span class="pl-en">isleaf</span>(<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span>
NewickTree<span class="pl-k">.</span><span class="pl-en">isleaf</span>(<span class="pl-k">::</span><span class="pl-c1">Tuple</span>) <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-c1">print_tree</span>(t)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(((1, 2), 3), (4, 5))
├─ ((1, 2), 3)
│  ├─ (1, 2)
│  │  ├─ 1
│  │  └─ 2
│  └─ 3
└─ (4, 5)
   ├─ 4
   └─ 5
"><pre><code>(((1, 2), 3), (4, 5))
├─ ((1, 2), 3)
│  ├─ (1, 2)
│  │  ├─ 1
│  │  └─ 2
│  └─ 3
└─ (4, 5)
   ├─ 4
   └─ 5
</code></pre></div>
<p>This enables us to use the <code>nwstr</code> and <code>writenw</code> functions</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = nwstr(t)
"><pre>s <span class="pl-k">=</span> <span class="pl-c1">nwstr</span>(t)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;(((1,2),3),(4,5));&quot;
"><pre><code>"(((1,2),3),(4,5));"
</code></pre></div>
<p>now we can read the Newick string</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="n = readnw(s)
print_tree(n)
"><pre>n <span class="pl-k">=</span> <span class="pl-c1">readnw</span>(s)
<span class="pl-c1">print_tree</span>(n)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(((1,2),3),(4,5));
├─ ((1,2),3);
│  ├─ (1,2);
│  │  ├─ 1
│  │  └─ 2
│  └─ 3
└─ (4,5);
   ├─ 4
   └─ 5
"><pre><code>(((1,2),3),(4,5));
├─ ((1,2),3);
│  ├─ (1,2);
│  │  ├─ 1
│  │  └─ 2
│  └─ 3
└─ (4,5);
   ├─ 4
   └─ 5
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Literate
Literate.markdown(
    joinpath(@__DIR__, &quot;README.jl&quot;),
    joinpath(@__DIR__, &quot;../&quot;),
    documenter=false, execute=true)
"><pre><span class="pl-k">using</span> Literate
Literate<span class="pl-k">.</span><span class="pl-c1">markdown</span>(
    <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>README.jl<span class="pl-pds">"</span></span>),
    <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>../<span class="pl-pds">"</span></span>),
    documenter<span class="pl-k">=</span><span class="pl-c1">false</span>, execute<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<hr>
<p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>