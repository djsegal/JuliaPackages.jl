<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mathml" class="anchor" aria-hidden="true" href="#mathml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathML</h1>
<p dir="auto"><a href="https://github.com/SciML/MathML.jl/actions"><img src="https://github.com/SciML/MathML.jl/workflows/CI/badge.svg" alt="Github Action CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/SciML/MathML.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/d64e5063a3d197001c25a2672b815f0cc5a6e50fae8523bfa649a1d48818832a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5363694d4c2f4d6174684d4c2e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/SciML/MathML.jl/badge.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://SciML.github.io/MathML.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://SciML.github.io/MathML.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">A parser for the <a href="https://en.wikipedia.org/wiki/MathML" rel="nofollow">MathML</a> XML standard.</p>
<p dir="auto">Uses Symbolics.jl under the hood for defining equations and uses EzXML.jl for XML parsing.</p>
<p dir="auto">MathML Specification: <a href="https://www.w3.org/TR/MathML3/" rel="nofollow">https://www.w3.org/TR/MathML3/</a></p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathML, EzXML, Symbolics, AbstractTrees
xml = xml&quot;&quot;&quot;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;
   &lt;apply&gt;
      &lt;times /&gt;
      &lt;ci&gt;compartment&lt;/ci&gt;
      &lt;ci&gt;k1&lt;/ci&gt;
      &lt;ci&gt;S1&lt;/ci&gt;
   &lt;/apply&gt;
&lt;/math&gt;&quot;&quot;&quot;

num = parse_node(xml)
# 1-element Vector{Num}:
#  S1*compartment*k1

# to pretty print the tree use `print_tree`
print_tree(xml)
# math
# └─ apply
#    ├─ times
#    ├─ ci
#    ├─ ci
#    └─ ci

# you can also just go directly from EzXML.Document or String
str = &quot;&lt;apply&gt;&lt;power/&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;cn&gt;3&lt;/cn&gt;&lt;/apply&gt;&quot;
MathML.parse_str(str)
# x^3

# derivatives also work!
str = &quot;&quot;&quot;
&lt;apply&gt;&lt;diff/&gt;
  &lt;bvar&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;degree&gt;&lt;cn&gt;2&lt;/cn&gt;&lt;/degree&gt;&lt;/bvar&gt;
  &lt;apply&gt;&lt;power/&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;cn&gt;4&lt;/cn&gt;&lt;/apply&gt;
&lt;/apply&gt;
&quot;&quot;&quot;
expand_derivatives(MathML.parse_str(str))
# 12(x^2)

# there is also a macro @MathML_str to directly call `parse_str`
ml = MathML&quot;&quot;&quot;
&lt;apply&gt;&lt;diff/&gt;
  &lt;bvar&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;degree&gt;&lt;cn&gt;2&lt;/cn&gt;&lt;/degree&gt;&lt;/bvar&gt;
  &lt;apply&gt;&lt;power/&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;cn&gt;4&lt;/cn&gt;&lt;/apply&gt;
&lt;/apply&gt;
&quot;&quot;&quot;
expand_derivatives(ml)
# 12(x^2)"><pre><span class="pl-k">using</span> MathML, EzXML, Symbolics, AbstractTrees
xml <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">xml</span>"""</span>&lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;</span>
<span class="pl-s">   &lt;apply&gt;</span>
<span class="pl-s">      &lt;times /&gt;</span>
<span class="pl-s">      &lt;ci&gt;compartment&lt;/ci&gt;</span>
<span class="pl-s">      &lt;ci&gt;k1&lt;/ci&gt;</span>
<span class="pl-s">      &lt;ci&gt;S1&lt;/ci&gt;</span>
<span class="pl-s">   &lt;/apply&gt;</span>
<span class="pl-s">&lt;/math&gt;<span class="pl-pds">"""</span></span>

num <span class="pl-k">=</span> <span class="pl-c1">parse_node</span>(xml)
<span class="pl-c"><span class="pl-c">#</span> 1-element Vector{Num}:</span>
<span class="pl-c"><span class="pl-c">#</span>  S1*compartment*k1</span>

<span class="pl-c"><span class="pl-c">#</span> to pretty print the tree use `print_tree`</span>
<span class="pl-c1">print_tree</span>(xml)
<span class="pl-c"><span class="pl-c">#</span> math</span>
<span class="pl-c"><span class="pl-c">#</span> └─ apply</span>
<span class="pl-c"><span class="pl-c">#</span>    ├─ times</span>
<span class="pl-c"><span class="pl-c">#</span>    ├─ ci</span>
<span class="pl-c"><span class="pl-c">#</span>    ├─ ci</span>
<span class="pl-c"><span class="pl-c">#</span>    └─ ci</span>

<span class="pl-c"><span class="pl-c">#</span> you can also just go directly from EzXML.Document or String</span>
str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;apply&gt;&lt;power/&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;cn&gt;3&lt;/cn&gt;&lt;/apply&gt;<span class="pl-pds">"</span></span>
MathML<span class="pl-k">.</span><span class="pl-c1">parse_str</span>(str)
<span class="pl-c"><span class="pl-c">#</span> x^3</span>

<span class="pl-c"><span class="pl-c">#</span> derivatives also work!</span>
str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">&lt;apply&gt;&lt;diff/&gt;</span>
<span class="pl-s">  &lt;bvar&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;degree&gt;&lt;cn&gt;2&lt;/cn&gt;&lt;/degree&gt;&lt;/bvar&gt;</span>
<span class="pl-s">  &lt;apply&gt;&lt;power/&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;cn&gt;4&lt;/cn&gt;&lt;/apply&gt;</span>
<span class="pl-s">&lt;/apply&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">expand_derivatives</span>(MathML<span class="pl-k">.</span><span class="pl-c1">parse_str</span>(str))
<span class="pl-c"><span class="pl-c">#</span> 12(x^2)</span>

<span class="pl-c"><span class="pl-c">#</span> there is also a macro @MathML_str to directly call `parse_str`</span>
ml <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">MathML</span>"""</span></span>
<span class="pl-s">&lt;apply&gt;&lt;diff/&gt;</span>
<span class="pl-s">  &lt;bvar&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;degree&gt;&lt;cn&gt;2&lt;/cn&gt;&lt;/degree&gt;&lt;/bvar&gt;</span>
<span class="pl-s">  &lt;apply&gt;&lt;power/&gt;&lt;ci&gt;x&lt;/ci&gt;&lt;cn&gt;4&lt;/cn&gt;&lt;/apply&gt;</span>
<span class="pl-s">&lt;/apply&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">expand_derivatives</span>(ml)
<span class="pl-c"><span class="pl-c">#</span> 12(x^2)</span></pre></div>
<p dir="auto">Check the tests in <code>test/parse.jl</code> to see a more exaustive list of what is covered.</p>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO:</h2>
<ul dir="auto">
<li>calculus:
<ul dir="auto">
<li>ivars fix, make ODESystem(parse_node(readxml("lorenz.xml").root)) work</li>
<li>partial derivatives <code>partialdiff</code> tags</li>
<li>integration <code>int</code> tags - needs <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="817875391" data-permission-text="Title is private" data-url="https://github.com/JuliaSymbolics/Symbolics.jl/issues/58" data-hovercard-type="issue" data-hovercard-url="/JuliaSymbolics/Symbolics.jl/issues/58/hovercard" href="https://github.com/JuliaSymbolics/Symbolics.jl/issues/58">JuliaSymbolics/Symbolics.jl#58</a>
<ul dir="auto">
<li>often a var like dPidt is assigned to Differential(time)(Pi) where dPidt is refered to after this &lt;eq&gt; (I think solution is <code>Symbolics.diff2term</code>)</li>
</ul>
</li>
<li><code>diff</code>s with no independent variable: like <code>&lt;apply&gt;&lt;diff/&gt;&lt;ci&gt;f&lt;/ci&gt;&lt;/apply&gt;</code></li>
</ul>
</li>
<li>to_mathml: julia expr -&gt; mathml. round tripping</li>
</ul>
<h2 dir="auto"><a id="user-content-done" class="anchor" aria-hidden="true" href="#done"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DONE:</h2>
<ul dir="auto">
<li>nested apply</li>
<li>fix sep/ tags in cn, take <code>type</code> attribute into account
<ul dir="auto">
<li>rational, e-notation, complex, complex polar</li>
</ul>
</li>
<li>basic diff handling</li>
<li>bound variables like bvar, might be lingering issues though</li>
<li><code>eq</code> nodes sometimes needs to be ~ and sometimes needs to be =</li>
<li>fix <code>sep</code> tags in <code>ci</code>s, take <code>type</code> attribute into account</li>
<li><code>piecewise</code> tags: make heaviside test work</li>
<li>fix undefined namespacing issues <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="829449029" data-permission-text="Title is private" data-url="https://github.com/JuliaIO/EzXML.jl/issues/156" data-hovercard-type="issue" data-hovercard-url="/JuliaIO/EzXML.jl/issues/156/hovercard" href="https://github.com/JuliaIO/EzXML.jl/issues/156">JuliaIO/EzXML.jl#156</a>
<ul dir="auto">
<li>parsers like SBML and CellMLToolkit should be handling</li>
</ul>
</li>
</ul>
</article></div>