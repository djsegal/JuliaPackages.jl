<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tblisjl" class="anchor" aria-hidden="true" href="#tblisjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TBLIS.jl</h1>
<p><a href="https://github.com/FermiQC/TBLIS.jl/actions/workflows/CI.yml"><img src="https://github.com/FermiQC/TBLIS.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a></p>
<p>Julia wrapper for TBLIS tensor contraction library.</p>
<p>Currently only tensor addition and multiplication are implemented - please file an issue if you need
other functionality from TBLIS.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt;]
pkg&gt;add TBLIS
"><pre><code>julia&gt;]
pkg&gt;add TBLIS
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using TBLIS
TBLIS.init()

TT = Float32
O = 10
V = 50

_A = rand(TT,O,O,O,O)
_B = rand(TT,O,O,V,V)
_C = zeros(TT,O,O,V,V)
"><pre><code>using TBLIS
TBLIS.init()

TT = Float32
O = 10
V = 50

_A = rand(TT,O,O,O,O)
_B = rand(TT,O,O,V,V)
_C = zeros(TT,O,O,V,V)
</code></pre></div>
<p>Arrays must be converted to TTensor objects.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="A = TBLIS.TTensor{TT}(_A)
B = TBLIS.TTensor{TT}(_B)
C = TBLIS.TTensor{TT}(_C)
"><pre><code>A = TBLIS.TTensor{TT}(_A)
B = TBLIS.TTensor{TT}(_B)
C = TBLIS.TTensor{TT}(_C)
</code></pre></div>
<p>This object only creates a pointer to the original data.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; A.data === _A
true
"><pre><code>julia&gt; A.data === _A
true
</code></pre></div>
<ul>
<li>
<p>For a general contraction, the syntax is <code>TBLIS.mul!(C, A, B, Aind, Bind, Cind)</code>
where <code>Aind</code>, <code>Bind</code>, and <code>Cind</code> are strings following Einstein's notation.</p>
</li>
<li>
<p>Addition is performing following <code>TBLIS.add!(A, B, Aind, Bind)</code>.</p>
</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# C[i,j,a,b] += A[i,j,k,l]*B[k,l,a,b]
TBLIS.mul!(C, A, B, &quot;ijkl&quot;, &quot;klab&quot;, &quot;ijab&quot;)

# B += A
TBLIS.add!(A, B, &quot;ijkl&quot;, &quot;ijkl&quot;)
"><pre><code># C[i,j,a,b] += A[i,j,k,l]*B[k,l,a,b]
TBLIS.mul!(C, A, B, "ijkl", "klab", "ijab")

# B += A
TBLIS.add!(A, B, "ijkl", "ijkl")
</code></pre></div>
</article></div>