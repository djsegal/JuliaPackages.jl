<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-physicaltreesjl" class="anchor" aria-hidden="true" href="#physicaltreesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PhysicalTrees.jl</h1>
<p><a href="https://codecov.io/gh/JuliaAstroSim/PhysicalTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f96a0a5741ad59a93376a8eb482cf346ee18576eb8cf71bca8a952c96660711/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417374726f53696d2f506879736963616c54726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaAstroSim/PhysicalTrees.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Distributed Octree for Nbody simulation.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add PhysicalTrees
"><pre>]add PhysicalTrees</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add https://github.com/JuliaAstroSim/PhysicalTrees.jl
"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaAstroSim<span class="pl-k">/</span>PhysicalTrees<span class="pl-k">.</span>jl</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Distributed
addprocs(1)

@everywhere using PhysicalTrees

# discrete points
pos = [PVector(1.0, 1.0, 1.0), PVector(-1.0, -1.0, -1.0),
       PVector(1.0, 0.0, -1.0), PVector(-1.0, 0.0, 1.0),
       PVector(0.0, 0.0, -1.0), PVector(-1.0, 0.0, 0.0)]

# Build octree from point data
tree1 = octree(pos)

# Or, build octree from particles
particles = [Massless() for i in 1:6]
assign_particles(particles, :Pos, pos)
tree2 = octree(particles, pids = [2])
"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">1</span>)

<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> PhysicalTrees

<span class="pl-c"><span class="pl-c">#</span> discrete points</span>
pos <span class="pl-k">=</span> [<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">PVector</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>),
       <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c1">PVector</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>),
       <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c1">PVector</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)]

<span class="pl-c"><span class="pl-c">#</span> Build octree from point data</span>
tree1 <span class="pl-k">=</span> <span class="pl-c1">octree</span>(pos)

<span class="pl-c"><span class="pl-c">#</span> Or, build octree from particles</span>
particles <span class="pl-k">=</span> [<span class="pl-c1">Massless</span>() <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>]
<span class="pl-c1">assign_particles</span>(particles, <span class="pl-c1">:Pos</span>, pos)
tree2 <span class="pl-k">=</span> <span class="pl-c1">octree</span>(particles, pids <span class="pl-k">=</span> [<span class="pl-c1">2</span>])</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li><a href="https://wwwmpa.mpa-garching.mpg.de/gadget/" rel="nofollow">Gadget2 by V. Springel</a></li>
</ul>
<h2><a id="user-content-package-ecosystem" class="anchor" aria-hidden="true" href="#package-ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package ecosystem</h2>
<ul>
<li>Basic data structure: <a href="https://github.com/JuliaAstroSim/PhysicalParticles.jl">PhysicalParticles.jl</a></li>
<li>File I/O: <a href="https://github.com/JuliaAstroSim/AstroIO.jl">AstroIO.jl</a></li>
<li>Initial Condition: <a href="https://github.com/JuliaAstroSim/AstroIC.jl">AstroIC.jl</a></li>
<li>Parallelism: <a href="https://github.com/JuliaAstroSim/ParallelOperations.jl">ParallelOperations.jl</a></li>
<li>Trees: <a href="https://github.com/JuliaAstroSim/PhysicalTrees.jl">PhysicalTrees.jl</a></li>
<li>Meshes: <a href="https://github.com/JuliaAstroSim/PhysicalMeshes.jl">PhysicalMeshes.jl</a></li>
<li>Plotting: <a href="https://github.com/JuliaAstroSim/AstroPlot.jl">AstroPlot.jl</a></li>
<li>Simulation: <a href="https://github.com/JuliaAstroSim/ISLENT">ISLENT</a></li>
</ul>
</article></div>