<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-protobufjl" class="anchor" aria-hidden="true" href="#protobufjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProtoBuf.jl</h1>
<p dir="auto"><a href="https://juliaio.github.io/ProtoBuf.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a Julia package that provides a compiler and a codec for Protocol Buffers.</p>
<p dir="auto"><a href="https://developers.google.com/protocol-buffers" rel="nofollow">Protocol Buffers</a> are a language-neutral, platform-neutral extensible mechanism for serializing structured data.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Given a <code>test.proto</code> file in your current working directory:</p>
<div class="highlight highlight-source-proto notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="syntax = &quot;proto3&quot;;

message MyMessage {
    sint32 a = 1;
    repeated string b = 2;
}"><pre><span class="pl-k">syntax</span> <span class="pl-k">=</span> <span class="pl-s">"proto3"</span>;

<span class="pl-k">message</span> <span class="pl-en">MyMessage</span> {
    <span class="pl-k">sint32</span> <span class="pl-smi">a</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;
    <span class="pl-k">repeated</span> <span class="pl-k">string</span> <span class="pl-smi">b</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>;
}</pre></div>
<p dir="auto">You can generate Julia bindings with the <code>protojl</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProtoBuf
protojl(&quot;test.proto&quot;, &quot;.&quot;, &quot;output_dir&quot;)"><pre><span class="pl-k">using</span> ProtoBuf
<span class="pl-c1">protojl</span>(<span class="pl-s"><span class="pl-pds">"</span>test.proto<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>output_dir<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This will create a Julia file at <code>output_dir/test_pb.jl</code> which you can simply <code>include</code> and start using it to encode and decode messages:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="include(&quot;output_dir/test_pb.jl&quot;)
# Main.test_pb

io = IOBuffer();

e = ProtoEncoder(io);

encode(e, test_pb.MyMessage(-1, [&quot;a&quot;, &quot;b&quot;]))
# 8

seekstart(io);

d = ProtoDecoder(io);

decode(d, test_pb.MyMessage)
# Main.test_pb.MyMessage(-1, [&quot;a&quot;, &quot;b&quot;])"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>output_dir/test_pb.jl<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Main.test_pb</span>

io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>();

e <span class="pl-k">=</span> <span class="pl-c1">ProtoEncoder</span>(io);

<span class="pl-c1">encode</span>(e, test_pb<span class="pl-k">.</span><span class="pl-c1">MyMessage</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>]))
<span class="pl-c"><span class="pl-c">#</span> 8</span>

<span class="pl-c1">seekstart</span>(io);

d <span class="pl-k">=</span> <span class="pl-c1">ProtoDecoder</span>(io);

<span class="pl-c1">decode</span>(d, test_pb<span class="pl-k">.</span>MyMessage)
<span class="pl-c"><span class="pl-c">#</span> Main.test_pb.MyMessage(-1, ["a", "b"])</span></pre></div>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">We'd like to thank the authors of the following packages, as we took inspiration from their projects:</p>
<ul dir="auto">
<li>We used <a href="https://github.com/JuliaLang/Tokenize.jl">Tokenize.jl</a> as a reference when implementing the Lexer/Parser.</li>
<li>We used the pre-1.0 version of <code>ProtoBuf.jl</code> as a giant shoulder to stand on:).</li>
</ul>
</article></div>