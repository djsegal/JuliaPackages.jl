<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dfcontrol" class="anchor" aria-hidden="true" href="#dfcontrol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DFControl</h1>
<p><a href="https://travis-ci.org/louisponet/DFControl.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c1bc3090a99c3b7dfd3e7b75f76f6eb96742466/68747470733a2f2f7472617669732d63692e6f72672f6c6f756973706f6e65742f4446436f6e74726f6c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/louisponet/DFControl.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/louisponet/dfcontrol-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2a409578b98bc80cac07011997365b277a46ebe4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3035766b7462796a33397534377573613f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/05vktbyj39u47usa?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/louisponet/DFControl.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7d4ced3871d46f664b102803e0699914d63e6077/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c6f756973706f6e65742f4446436f6e74726f6c2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/louisponet/DFControl.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://louisponet.github.io/DFControl.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>This package is a tool to interact with DFT related packages. Currently best support is for Quantum-Espresso and WANNIER90.
The support for Abinit is highly experimental and will get updated very soon.
There is some integration with Juno, namely the display of various Types is specifically tuned for ease of use.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is registered, but the recommended way to install it is by:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/louisponet/DFControl.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>DFControl<span class="pl-pds">"</span></span>)</pre></div>
<p>Since the package has changed quite a lot since the last release.</p>
<p>This will create a directory <code>user_defaults</code> with file <code>user_defaults.jl</code> inside the <code>DFControl</code> source folder. This is done because it allows one to define certain variables and defaults that will get loaded when <code>using DFControl</code> is called. The main use for this is to define various defaults, which make a lot of actions more streamlined.</p>
<h2><a id="user-content-defaultssetup" class="anchor" aria-hidden="true" href="#defaultssetup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defaults/Setup</h2>
<p>After installation it is recommended to define a couple of those defaults.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DFControl</pre></div>
<p>default server:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setdefault_server</span>(<span class="pl-s"><span class="pl-pds">"</span>blabla@server.com<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span>default server</span></pre></div>
<p>default pseudo potentials:
this defines a directory on the server to look through for the pseudo potentials for each element. This will be used for certain options when changing atom properties etc.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setdefault_pseudodir</span>(<span class="pl-c1">:pbesol</span>,  <span class="pl-s"><span class="pl-pds">"</span>pseudos/pbesol/<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span>change to your pseudo_set_name and directory of choice</span>
<span class="pl-c1">setdefault_pseudodir</span>(<span class="pl-c1">:pbesolrel</span>, <span class="pl-s"><span class="pl-pds">"</span>pseudos/pbesolrel/<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>more sets can be defined</span></pre></div>
<p>followed by the actual loading of the various pseudo filenames:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">configuredefault_pseudos</span>()</pre></div>
<p>This will then connect to the server, look through all the defined pseudo sets inside the <code>default_pseudos</code> and tries to link for each element, for each set the correct filename.
To find out the filename of a certain atom for a certain pseudo set, or to check whether your config worked, you can do:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">getdefault_pseudo</span>(<span class="pl-c1">:O</span>, <span class="pl-c1">:pbesolrel</span>) <span class="pl-c"><span class="pl-c">#</span>again change `pbesolrel` to the set you defined before</span></pre></div>
<p>This should return you the filename for the pseudo potential file of Oxygen, <code>:O</code>, the format for elements in general is e.g. <code>:Mn</code>.
If multiple pseudos are defined for one set and element, you can specify keyword <code>pseudo_fuzzy = ...</code> to pull out the one you want to use.
For more info on other default functionality please look in the documentation and examples.</p>
<h2><a id="user-content-general-usage" class="anchor" aria-hidden="true" href="#general-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General Usage</h2>
<p>The main types in around which the package revolves are the <code>DFJob</code>, <code>DFInput</code>.
A <code>DFJob</code> is comprised of a <code>Structure</code>, representing the structure that is simulated in the job, and a collection of calculations to be done. Other fields in <code>DFJob</code> are auxiliary properties, such as name, directories, etc.</p>
<p>At this point, the main way the package works is by reading slurm job scripts such as the <code>test/test_job/job.tt</code> one.
What is most important for succesfully parsing these is the format used in the lines that do the actual calculations, i.e. <code>runcommand exec &lt;input_file.in&gt; output_file.out</code>, for example: <code>mpirun -np 24 ~/bin/projwfc.x  &lt;projwfc.in&gt; projwfc.out</code>.
The parsing is sort of robust but one should probably stick to this format.
All other not recognized lines will be saved in the <code>header</code> field of the <code>DFJob</code>.
The calculations in commented out lines will also be read and loaded, but they will have a field <code>DFInput.run=false</code>.
When the <code>job.tt</code> file gets written upon saving of the <code>DFJob</code>, calculations which are marked to not run will be written in the <code>job.tt</code> file, but be commented out.</p>
<p>As a quick start to see this in action you can do (Juno is highly recommended, for reading clarity)</p>
<div class="highlight highlight-source-julia"><pre>job <span class="pl-k">=</span> <span class="pl-c1">DFJob</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(<span class="pl-s"><span class="pl-pds">"</span>DFControl<span class="pl-pds">"</span></span>)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test/test_job/<span class="pl-pds">"</span></span>))</pre></div>
<p>It will automatically look through the directory for a file which matches the fuzzy <code>*job*</code>. This can be specified through kwargs, further info in the documentation and examples.</p>
<p>To do something similar on a directory on a server, you can do</p>
<div class="highlight highlight-source-julia"><pre>job <span class="pl-k">=</span> <span class="pl-c1">DFJob</span>(<span class="pl-s"><span class="pl-pds">"</span>path/to/job/starting_from_home<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>local_dir<span class="pl-pds">"</span></span>, server<span class="pl-k">=</span><span class="pl-c1">getdefault_server</span>())</pre></div>
<p>If the <code>local_dir</code> doesn't exist it will be first created before pulling the <code>job</code> script and the calculations that it read from this file.</p>
<p>If you ran some calculations, you should be able to pull the outputs into the <code>local_dir</code> of the <code>job</code>, followed by reading them:</p>
<div class="highlight highlight-source-julia"><pre>outs <span class="pl-k">=</span> <span class="pl-c1">pulloutputs</span>(job)
outdata<span class="pl-k">=</span> <span class="pl-c1">outputdata</span>(job)</pre></div>
<p>If one of the calculations that were performed was a calculation that produced <code>bands</code> of some sort (currently both outputs of <code>nscf</code> and <code>bands</code> calculations count) using Quantum-Espresso, you can do</p>
<div class="highlight highlight-source-julia"><pre>bands <span class="pl-k">=</span> outdata[<span class="pl-s"><span class="pl-pds">"</span>name_of_calculation(e.g. nscf)<span class="pl-pds">"</span></span>]
<span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(bands, fermi<span class="pl-k">=</span>outdata[<span class="pl-s"><span class="pl-pds">"</span>nscf<span class="pl-pds">"</span></span>][<span class="pl-c1">:fermi</span>])</pre></div>
<p>Calculations can be set to run or not by</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setflow!</span>(job, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span>none will run</span>
<span class="pl-c1">setflow!</span>(job, <span class="pl-s"><span class="pl-pds">"</span>nscf<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>, <span class="pl-s"><span class="pl-pds">"</span>bands<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span>args..., and they are matched fuzzily</span></pre></div>
<p>A job can be submitted by</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">submit</span>(job)</pre></div>
<p>If the job had "localhost" as it's server, it will run <code>qsub job.tt</code> locally, whereas if server and server_dir are something else, it will push the files and subsequently run them on the server.</p>
<p>This gave just a very small overview of the functionality, please look into the <a href="https://louisponet.github.io/DFControl.jl/latest" rel="nofollow">documentation</a> and the examples for more.</p>
</article></div>