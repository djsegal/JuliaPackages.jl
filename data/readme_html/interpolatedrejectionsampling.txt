<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-interpolatedrejectionsamplingjl" class="anchor" aria-hidden="true" href="#interpolatedrejectionsamplingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InterpolatedRejectionSampling.jl</h1>
<p><a href="https://travis-ci.com/m-wells/InterpolatedRejectionSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/35f025af9b561e49e364df924181ee2182161aafd0b1c8c19b2bead97824f015/68747470733a2f2f7472617669732d63692e636f6d2f6d2d77656c6c732f496e746572706f6c6174656452656a656374696f6e53616d706c696e672e6a6c2e7376673f746f6b656e3d717452437858514a6e384232484e31663668336b266272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/m-wells/InterpolatedRejectionSampling.jl.svg?token=qtRCxXQJn8B2HN1f6h3k&amp;branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/m-wells/InterpolatedRejectionSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/816b457bdbe274e8b3d4c507f27f0edcacefc5f55a5dccef32653d5ccccfdec9/68747470733a2f2f636f6465636f762e696f2f67682f6d2d77656c6c732f496e746572706f6c6174656452656a656374696f6e53616d706c696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/m-wells/InterpolatedRejectionSampling.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/m-wells/InterpolatedPDFs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ae73b8caca3e5f6e8482651c14f895785766ac49ee3e86d003b8154c1cc59efa/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f6d2d77656c6c732f496e746572706f6c6174656452656a656374696f6e53616d706c696e672e6a6c" alt="Coveralls github" data-canonical-src="https://img.shields.io/coveralls/github/m-wells/InterpolatedRejectionSampling.jl" style="max-width:100%;"></a></p>
<h2><a id="user-content-draw-samples-from-discrete-multivariate-distributions" class="anchor" aria-hidden="true" href="#draw-samples-from-discrete-multivariate-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Draw samples from discrete multivariate distributions</h2>
<p>For a given discrete (n-dimensional) grid of values and the vectors that describe the span of the underlying space we can draw samples.
The interpolation of the space is handled by  <a href="https://github.com/JuliaMath/Interpolations.jl"><code>Interpolations.jl</code></a></p>
<h1><a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A simple example</h1>
<p>First we need to setup a discrete distribution</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; X = range(0, π, length=10)
julia&gt; Y = range(0, π/4, length=9)
julia&gt; knots = (X,Y)
julia&gt; prob = [sin(x)+tan(y) for x in X, y in Y]
10×9 Array{Float64,2}:
 0.0          0.0984914  0.198912  0.303347  …  0.668179  0.820679  1.0    
 0.34202      0.440512   0.540933  0.645367     1.0102    1.1627    1.34202
 0.642788     0.741279   0.8417    0.946134     1.31097   1.46347   1.64279
 0.866025     0.964517   1.06494   1.16937      1.5342    1.6867    1.86603
 0.984808     1.0833     1.18372   1.28815      1.65299   1.80549   1.98481
 0.984808     1.0833     1.18372   1.28815   …  1.65299   1.80549   1.98481
 0.866025     0.964517   1.06494   1.16937      1.5342    1.6867    1.86603
 0.642788     0.741279   0.8417    0.946134     1.31097   1.46347   1.64279
 0.34202      0.440512   0.540933  0.645367     1.0102    1.1627    1.34202
 1.22465e-16  0.0984914  0.198912  0.303347     0.668179  0.820679  1.0    
"><pre><code>julia&gt; X = range(0, π, length=10)
julia&gt; Y = range(0, π/4, length=9)
julia&gt; knots = (X,Y)
julia&gt; prob = [sin(x)+tan(y) for x in X, y in Y]
10×9 Array{Float64,2}:
 0.0          0.0984914  0.198912  0.303347  …  0.668179  0.820679  1.0    
 0.34202      0.440512   0.540933  0.645367     1.0102    1.1627    1.34202
 0.642788     0.741279   0.8417    0.946134     1.31097   1.46347   1.64279
 0.866025     0.964517   1.06494   1.16937      1.5342    1.6867    1.86603
 0.984808     1.0833     1.18372   1.28815      1.65299   1.80549   1.98481
 0.984808     1.0833     1.18372   1.28815   …  1.65299   1.80549   1.98481
 0.866025     0.964517   1.06494   1.16937      1.5342    1.6867    1.86603
 0.642788     0.741279   0.8417    0.946134     1.31097   1.46347   1.64279
 0.34202      0.440512   0.540933  0.645367     1.0102    1.1627    1.34202
 1.22465e-16  0.0984914  0.198912  0.303347     0.668179  0.820679  1.0    
</code></pre></div>
<p>We can visualize the probability density matrix like so:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using PyPlot
julia&gt; imshow(transpose(prob);
              extent = (knots[1][1], knots[1][end], knots[2][1], knots[2][end]),
              aspect = &quot;auto&quot;,
              origin = &quot;lower&quot;)
julia&gt; ax = gca()
julia&gt; ax.set_xlabel(&quot;x-axis [sin(x)]&quot;)
julia&gt; ax.set_ylabel(&quot;y-axis [tan(y)]&quot;)
"><pre><code>julia&gt; using PyPlot
julia&gt; imshow(transpose(prob);
              extent = (knots[1][1], knots[1][end], knots[2][1], knots[2][end]),
              aspect = "auto",
              origin = "lower")
julia&gt; ax = gca()
julia&gt; ax.set_xlabel("x-axis [sin(x)]")
julia&gt; ax.set_ylabel("y-axis [tan(y)]")
</code></pre></div>
<p>To perform a sampling</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using InterpolatedRejectionSampling
julia&gt; n = 100_000
julia&gt; xy = irsample(knots,prob,n)
julia&gt; hist2D(xy[1,:],xy[2,:])
julia&gt; ax = gca()
julia&gt; ax.set_xlabel(&quot;x-axis [sin(x)]&quot;)
julia&gt; ax.set_ylabel(&quot;y-axis [tan(y)]&quot;)
"><pre><code>julia&gt; using InterpolatedRejectionSampling
julia&gt; n = 100_000
julia&gt; xy = irsample(knots,prob,n)
julia&gt; hist2D(xy[1,:],xy[2,:])
julia&gt; ax = gca()
julia&gt; ax.set_xlabel("x-axis [sin(x)]")
julia&gt; ax.set_ylabel("y-axis [tan(y)]")
</code></pre></div>
</article></div>