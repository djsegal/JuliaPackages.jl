<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-easypkg" class="anchor" aria-hidden="true" href="#easypkg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EasyPkg</h2>
<p dir="auto"><a href="https://travis-ci.org/oschulz/EasyPkg.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2437440ebce5fb8fc38a61f9a3c3c989a1b60e179fc05510e30fdee344afa1e7/68747470733a2f2f7472617669732d63692e6f72672f6f736368756c7a2f45617379506b672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/oschulz/EasyPkg.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/oschulz/easypkg-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/774624f9276dd5bcd564e97240de441e4b035b520dc5667df59a1b29e1eb2974/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f676338346e6c726172366c30613364382f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/gc84nlrar6l0a3d8/branch/master?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package to simplify package development. EasyPkg aims to reduce the
boilerplate code typically found in a Julia project's "src/.jl" and
"test/runtests.jl".</p>
<h2 dir="auto"><a id="user-content-package-source-code" class="anchor" aria-hidden="true" href="#package-source-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package Source code</h2>
<p dir="auto">EasyPkg can include all Julia source files in your package automatically,
or assist with manual source file handing.</p>
<h3 dir="auto"><a id="user-content-automatic-source-file-handling" class="anchor" aria-hidden="true" href="#automatic-source-file-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Automatic source file handling</h3>
<p dir="auto">Use <code>include_all_sources()</code> to reduce the average Julia project's
"src/.jl" to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
__precompile__()

module &lt;PrjName&gt;

import EasyPkg
EasyPkg.include_all_sources()

function __init__()
    ...
end

end # module
"><pre><span class="pl-c1">__precompile__</span>()

<span class="pl-k">module</span> <span class="pl-k">&lt;</span>PrjName<span class="pl-k">&gt;</span>

<span class="pl-k">import</span> EasyPkg
EasyPkg<span class="pl-k">.</span><span class="pl-c1">include_all_sources</span>()

<span class="pl-k">function</span> <span class="pl-en">__init__</span>()
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> module</span>
</pre></div>
<p dir="auto">For this to work, the structure of the sources files must not depend on
a specific inclusion order - so the source files should not contain any
initialization steps that depend on another source file. For precompiled
packages, this shouldn't be an issue, as all initialization steps will
reside in <code>__init()__</code> anyhow.</p>
<h3 dir="auto"><a id="user-content-manual-source-file-handling" class="anchor" aria-hidden="true" href="#manual-source-file-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Manual source file handling</h3>
<p dir="auto">If you need control over the order in which source files are included, you
can use <code>EasyPkg.include_sources(name...)</code> to shorten your source inclusion
code a little and handle subdirectories in a modular fashion.</p>
<p dir="auto">Given a package structure like</p>
<ul dir="auto">
<li>src
<ul dir="auto">
<li>foo/foo.jl</li>
<li>foo/xyz.jl</li>
<li>bar.jl</li>
</ul>
</li>
</ul>
<p dir="auto">use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="EasyPkg.include_sources(
    &quot;foo&quot;,
    &quot;bar.jl&quot;,
)"><pre>EasyPkg<span class="pl-k">.</span><span class="pl-c1">include_sources</span>(
    <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>bar.jl<span class="pl-pds">"</span></span>,
)</pre></div>
<p dir="auto">to include "foo/foo.jl" and "bar.jl". Obviously, "foo/foo.jl" will be
responsible for including "foo/xyz.jl" and other files in the "foo"
subdirectory (e.g using <code>EasyPkg.include_sources</code> again).</p>
<p dir="auto">Note: The source file structure of EasyPkg itself is not necessarily a good
template - it is a bit complicated and deeply nested on purpose, so that
EasyPkg can tests it's own functionality.</p>
<h2 dir="auto"><a id="user-content-package-tests" class="anchor" aria-hidden="true" href="#package-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package Tests</h2>
<p dir="auto">Use <code>EasyPkg.run_all_tests()</code> to reduce "test/runtests.jl" for a typical
Julia project to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import EasyPkg
EasyPkg.run_all_tests()"><pre><span class="pl-k">import</span> EasyPkg
EasyPkg<span class="pl-k">.</span><span class="pl-c1">run_all_tests</span>()</pre></div>
<p dir="auto">It will automatically find and include all your test source files (may
reside in nested directories). They should look like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import EasyPkg
@EasyPkg.using_BaseTest

@testset &quot;Some tests&quot; begin
    @test ...
    @test ...
    ...
end

@testset &quot;Some more tests&quot; ..."><pre><span class="pl-k">import</span> EasyPkg
<span class="pl-c1">@EasyPkg</span><span class="pl-k">.</span>using_BaseTest

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Some tests<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-k">...</span>
    <span class="pl-c1">@test</span> <span class="pl-k">...</span>
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Some more tests<span class="pl-pds">"</span></span> <span class="pl-k">...</span></pre></div>
</article></div>