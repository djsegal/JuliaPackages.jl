<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-constructivegeometry" class="anchor" aria-hidden="true" href="#constructivegeometry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ConstructiveGeometry</h1>
<p><a href="https://plut.github.io/ConstructiveGeometry.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation|Dev" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>Algorithms and syntax to define CSG objects in Julia.</p>
<p>This module is currently a work in progress,
roughly at the “proof of concept” stage.
The following work at least in some cases:</p>
<ul>
<li>an easy-to-use syntax for defining solids and CSG operations;</li>
<li>meshing of most 2d and 3d operations;</li>
<li>output as an OpenSCAD file.</li>
</ul>
<p>It is possible to use this module to define basic 3d models:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s1 = sphere(20)
s2 = cube(20)
mesh(s1 ∪ s2)
mesh(s1 ∩ s2)
mesh(s1 \ s2)
mesh(hull(s1, s2))
"><pre>s1 <span class="pl-k">=</span> <span class="pl-c1">sphere</span>(<span class="pl-c1">20</span>)
s2 <span class="pl-k">=</span> <span class="pl-c1">cube</span>(<span class="pl-c1">20</span>)
<span class="pl-c1">mesh</span>(s1 <span class="pl-k">∪</span> s2)
<span class="pl-c1">mesh</span>(s1 <span class="pl-k">∩</span> s2)
<span class="pl-c1">mesh</span>(s1 <span class="pl-k">\</span> s2)
<span class="pl-c1">mesh</span>(<span class="pl-c1">hull</span>(s1, s2))</pre></div>
<p>gives the following output:
<a target="_blank" rel="noopener noreferrer" href="examples/sphere_cube.png"><img src="examples/sphere_cube.png" alt="CSG operations on a sphere and a cube" style="max-width:100%;"></a></p>
<p><em>(although the meshes were computed by the Julia module,
OpenSCAD was used for rendering the image.
This will change in a future release.)</em></p>
<p>It is also possible to export a model as a <code>.svg</code> (for 2d shapes)
or <code>.stl</code> (for 3d volumes) file.</p>
<p>The roadmap now includes at least the following:</p>
<ul>
<li>built-in visualization of models;</li>
<li><code>.stl</code> file import, and I/O to more formats;</li>
<li>add more convenience constructors (e.g. for transforms);</li>
<li>implement missing operators: 3d Minkowski sum; 2d/3d Minkowski;
path extrusion; <code>text()</code>;</li>
<li>add an annotation system to ease the design of complex models;</li>
<li>add an anchor system.</li>
</ul>
<p>Any contributions are welcome!</p>
</article></div>