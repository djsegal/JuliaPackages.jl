<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-constructivegeometry" class="anchor" aria-hidden="true" href="#constructivegeometry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ConstructiveGeometry</h1>
<p dir="auto"><a href="https://plut.github.io/ConstructiveGeometry.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation|Dev" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Defining CSG objects from within Julia.</p>
<p dir="auto"><code>ConstructiveGeometry.jl</code> provides functions for defining 2d shapes
and 3d solids via basic primitives and CSG operations, as well as
functions for displaying these objects and output to SVG or STL files.</p>
<p dir="auto">It is possible to use this module to define basic 3d models.
Examples are included in the <a href="examples/">examples subdirectory</a>:</p>
<ul dir="auto">
<li><a href="examples/sphere_cube.jl"><img src="examples/sphere_cube.png" alt="CSG operations on a sphere and a cube" style="max-width: 100%;"></a>;</li>
<li><a href="examples/crown.jl"><img src="examples/crown.png" alt="Crown with fleur-de-lis" style="max-width: 100%;"></a>;
The images were rendered by the <code>CairoMakie</code> back-end.
It is also possible to export a model as a <code>.svg</code> (for 2d shapes)
or <code>.stl</code> (for 3d volumes) file.</li>
</ul>
<p dir="auto">The following features should be mostly working now:</p>
<ul dir="auto">
<li>2d shapes: square, circle, polygon, path stroke;</li>
<li>3d shapes: cube, sphere, cylinder, cone, explicit surface;</li>
<li>boolean operations, linear transformations;</li>
<li>2d-&gt;3d extrusions (linear, cone, revolution, curvilinear);</li>
<li>3d-&gt;2d projection and slicing;</li>
<li>convex hull and Minkowski sum (2d, 3d, mixed dimensions);</li>
<li>offset (2d and 3d);</li>
<li>surface decimation, refining, and Loop subdivision;</li>
<li>volume deformation using user-supplied functions;</li>
<li>import from STL and PLY, and export to STL, PLY and SVG.</li>
</ul>
<h2 dir="auto"><a id="user-content-global-philosophy" class="anchor" aria-hidden="true" href="#global-philosophy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Global philosophy</h2>
<p dir="auto">This package defines both a structure for abstract­geometric objects
and a way to convert such “ideal” objects to concrete meshes.
These meshes are implemented as triangulated surfaces
using the IGL graphics library.</p>
<h2 dir="auto"><a id="user-content-why-write-this-when-openscad-exists" class="anchor" aria-hidden="true" href="#why-write-this-when-openscad-exists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why write this when OpenSCAD exists?</h2>
<p dir="auto">Our goal is to replicate what OpenSCAD proved works well
(a simple syntax for script-based CAD)
while fixing some of the less-fun parts.</p>
<p dir="auto">We believe that using Julia provides the following advantages:</p>
<ul dir="auto">
<li>a more complete (and easier to use) programming language
(e.g. a language which natively contains linear algebra is easier to
use for constraint-based design);</li>
<li>the ability to link external libraries (e.g. defining surfaces as
solutions of differential equations or least-square fits);</li>
<li>giving the user access to the internal representation of all 3d models
(whereas OpenSCAD's modules are closed) for e.g. implementing custom
deformations;</li>
<li>ease of extending the basic functions of the library (e.g. ultimately
implementing Minkowski difference or swung volumes should not be too
hard, and some form of splines should be possible too), whereas such
attempts in OpenSCAD often lead to “rewriting OpenSCAD in OpenSCAD”;</li>
<li>file I/O is easier to implement (and in more formats);</li>
<li>IGL's triangulated surfaces are likely faster (and more adapted to
CAD) than CGAL's Nef polyedra, although this package has not reached
the “speed benchmarks” phase yet.</li>
</ul>
<p dir="auto">On the other hand, one notable drawback of Julia (in particular with many
dependencies) is the long “time-to-first-plot”. Once everything is loaded
however, the second, third plots etc. are much faster.</p>
<p dir="auto">Reaching feature-parity (at least for static designs)
is one of the first goals of this package.
The main missing part for this is the primitive <code>text</code>.
On the other hand, this package already provides a few constructions
absent from (base) OpenSCAD, such as 3d offsetting or surface sweep.</p>
<h2 dir="auto"><a id="user-content-future-goals" class="anchor" aria-hidden="true" href="#future-goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future goals</h2>
<p dir="auto">Once this feature parity is achieved, we plan to move on to
include more content (e.g. some of what is usually implemented
library-side in OpenSCAD), such as:</p>
<ul dir="auto">
<li>add an annotation system to ease the design of complex models;</li>
<li>add an anchor system;</li>
<li>use splines and NURBs to define models.</li>
</ul>
<h2 dir="auto"><a id="user-content-libraries-used" class="anchor" aria-hidden="true" href="#libraries-used"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Libraries used</h2>
<p dir="auto">Currently (as of 2021-08), <code>ConstructiveGeometry.jl</code> happily uses
the following libraries:</p>
<ul dir="auto">
<li><a href="https://libigl.github.io/" rel="nofollow"><code>libigl</code></a> for 3d mesh operations;</li>
<li><a href="https://github.com/JuliaGeometry/Clipper.jl"><code>Clipper</code></a> for polygon operations;</li>
<li><a href="https://github.com/JuliaPlots/Makie.jl"><code>Makie</code></a> for visualization;</li>
<li><a href="https://cvdlab.github.io/Triangle.jl/" rel="nofollow"><code>Triangle</code></a> for triangulation;</li>
<li><a href="https://github.com/JuliaPolyhedra/Polyhedra.jl"><code>Polyhedra</code></a> and <a href="https://github.com/jump-dev/GLPK.jl"><code>GLPK</code></a> for convex hull.</li>
</ul>
<h2 dir="auto"><a id="user-content-joining-the-project" class="anchor" aria-hidden="true" href="#joining-the-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Joining the project</h2>
<p dir="auto">This project is currently still at the “one-person effort” stage,
although it is not indended that it remain here. There are multiple parts
which could use some help; apart from the Todo-list above, even something
as simple as playtesting the project would be appreciable help.</p>
</article></div>