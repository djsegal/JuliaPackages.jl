<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qxtools" class="anchor" aria-hidden="true" href="#qxtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QXTools</h1>
<p dir="auto"><a href="https://JuliaQX.github.io/QXTools.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaQX.github.io/QXTools.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaQX/QXTools.jl/actions"><img src="https://github.com/JuliaQX/QXTools.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaQX/QXTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/299179fab001b3146195bacd2d1b69283d5b6663dbd776164f69d9cb837168c0/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696151582f5158546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaQX/QXTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">QXTools is a Julia package for simulating quantum circuits using tensor networking approaches. It targets large distributed memory clusters with hardware
accelerators. It was developed as part of the QuantEx project, one of the individual software projects of WP8 of PRACE 6IP.</p>
<p dir="auto">QXTools depends on a number of other Julia packages developed that were also developed as part of the QuantEx project. These include QXZoo which
is capable of generating and manipulating quantum circuits, QXTns which features data structures and functions for manipulating tensor networks,
QXGraphDecompositions which implements a number of graph algorithms for finding good contraction plans and QXContexts which is designed to run on large distributed
clusters.</p>
<p dir="auto">Documentation can be found <a href="https://JuliaQX.github.io/QXTools.jl/dev" rel="nofollow">here</a>.</p>
<p dir="auto">The design and implementation of QXTools and related packages was inspired by many other frameworks and packages including ITensors.jl, TensorOperations.jl,
Yao.jl, TAL-SH and ExaTN.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">QXTools is a Julia package and can be installed using Julia's inbuilt package manager from the Julia REPL using.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;QXTools&quot;)"><pre class="notranslate"><code>import Pkg
Pkg.add("QXTools")
</code></pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">An example of how QXTools can be used to calculate a set of amplitudes for small GHZ preparation circuit looks like</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using QXTools
using QXTools.Circuits

# Create ghz circuit
circ = create_ghz_circuit(3)

# Convert the circuit to a tensor network circuit
tnc = convert_to_tnc(circ)

# Find a good contraction plan
plan = flow_cutter_contraction_plan(tnc; time=10)

# Contract the network using this plan to find the given amplitude for different outputs
@show QXTools.single_amplitude(tnc, plan, &quot;000&quot;)
@show QXTools.single_amplitude(tnc, plan, &quot;111&quot;)
@show QXTools.single_amplitude(tnc, plan, &quot;100&quot;)"><pre class="notranslate"><code>using QXTools
using QXTools.Circuits

# Create ghz circuit
circ = create_ghz_circuit(3)

# Convert the circuit to a tensor network circuit
tnc = convert_to_tnc(circ)

# Find a good contraction plan
plan = flow_cutter_contraction_plan(tnc; time=10)

# Contract the network using this plan to find the given amplitude for different outputs
@show QXTools.single_amplitude(tnc, plan, "000")
@show QXTools.single_amplitude(tnc, plan, "111")
@show QXTools.single_amplitude(tnc, plan, "100")
</code></pre></div>
<p dir="auto">This is only recommended for small test cases. For larger scale runs one can call the <code>generate_simulation_files</code>
which will do the conversion to a network, find the contraction plan and create output files describing the required
calculations. For example</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using QXTools
using QXTools.Circuits

# Create ghz circuit
circ = create_ghz_circuit(3)

generate_simulation_files(circ, &quot;ghz_3&quot;, time=10)"><pre class="notranslate"><code>using QXTools
using QXTools.Circuits

# Create ghz circuit
circ = create_ghz_circuit(3)

generate_simulation_files(circ, "ghz_3", time=10)
</code></pre></div>
<p dir="auto">will generate the files:</p>
<ul dir="auto">
<li><code>ghz_3.qx</code>: A DSL file with instructions</li>
<li><code>ghz_3.jld2</code>: A data file with initial tensors</li>
<li><code>ghz_3.yml</code>: A parameter file with parameters controlling the simulation</li>
</ul>
<p dir="auto">These can be used as input to QXContexts to run the simulation on distributed clusters.
For more details and options see the documentation at <a href="https://juliaqx.github.io/QXContexts.jl/dev/" rel="nofollow">docs</a>.</p>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Contributions from users are welcome and we encourage users to open issues and submit merge/pull requests for any problems or feature requests they have. The
<a href="CONTRIBUTING.md">CONTRIBUTING.md</a> has further details of the contribution guidelines.</p>
<h2 dir="auto"><a id="user-content-building-documentation" class="anchor" aria-hidden="true" href="#building-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building documentation</h2>
<p dir="auto">QXTools.jl using <a href="https://juliadocs.github.io/Documenter.jl/stable/" rel="nofollow">Documenter.jl</a> to generate documentation. To build
the documentation locally run the following from the <code>docs</code> folder.</p>
<p dir="auto">The first time it is will be necessary to instantiate the environment to install dependencies</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project -e 'import Pkg; Pkg.instantiate()'"><pre class="notranslate"><code>julia --project -e 'import Pkg; Pkg.instantiate()'
</code></pre></div>
<p dir="auto">and then to build the documentation</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project make.jl"><pre class="notranslate"><code>julia --project make.jl
</code></pre></div>
<p dir="auto">To serve the generated documentation locally use</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project -e 'using LiveServer; serve(dir=&quot;build&quot;)'"><pre class="notranslate"><code>julia --project -e 'using LiveServer; serve(dir="build")'
</code></pre></div>
<p dir="auto">Or with python3 using from the <code>docs/build</code> folder using</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="python3 -m http.server"><pre class="notranslate"><code>python3 -m http.server
</code></pre></div>
<p dir="auto">The generated documentation should now be viewable locally in a browser at <code>http://localhost:8000</code>.</p>
</article></div>