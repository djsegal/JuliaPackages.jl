<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-unalignedvectors" class="anchor" aria-hidden="true" href="#unalignedvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UnalignedVectors</h1>
<p><strong>NOTE</strong>: This package is deprecated. On Julia 0.7 or higher, use <code>reinterpret</code> directly.</p>
<p><a href="https://travis-ci.org/JuliaArrays/UnalignedVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49ccd30b46bb3ff38de20e75fa2fec5b2a9909de/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f556e616c69676e6564566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/UnalignedVectors.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/timholy/unalignedvectors-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/6168da292601456719c028ffac24436d09340c9c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f65357337327235306730786978376f362f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/e5s72r50g0xix7o6/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaArrays/UnalignedVectors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/88c2925b5d145147c7e888690b05c36b8fc6577d/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f556e616c69676e6564566563746f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/UnalignedVectors.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Julia allows you to create arrays from a pointer to a memory buffer,
but an <code>Array{T}</code> requires a pointer that is a multiple of
<code>sizeof(T)</code>. This package allows you to create an <code>AbstractArray</code> with
element type <code>T</code> even when the pointer lacks proper alignment.</p>
<h2><a id="user-content-usage-example-memory-mapping" class="anchor" aria-hidden="true" href="#usage-example-memory-mapping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage example: memory mapping</h2>
<p>A common usage might be memory mapping, using Julia's <code>Mmap.mmap</code>
functionality. Let's create a fake file format with the following
structure:</p>
<ul>
<li>magic bytes "BIGARRAY" followed a newline</li>
<li>the number of dimensions in the array</li>
<li>the size of the array</li>
<li>the data of the array (always <code>Float64</code>)</li>
</ul>
<p>The rub is that the data will always start with an odd offset, because
the magic bytes (plus the newline) total 9 bytes, and the dimension
information always adds an even number of types. As a consequence, the
memory buffer is not properly aligned for <code>Float64</code> (which requires
the pointer address to be a multiple of 8) and consequently ordinary
<code>mmap</code> operations will fail.</p>
<p>To try this out, first let's write such a file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/testfile.bga<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">write</span>(io, <span class="pl-s"><span class="pl-pds">"</span>BIGARRAY<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    A <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span>;
         <span class="pl-c1">3.0</span> <span class="pl-c1">4.0</span>]
    <span class="pl-c1">write</span>(io, <span class="pl-c1">ndims</span>(A))
    <span class="pl-k">for</span> s <span class="pl-k">in</span> <span class="pl-c1">size</span>(A)
        <span class="pl-c1">write</span>(io, s)
    <span class="pl-k">end</span>
    <span class="pl-c1">write</span>(io, A)
<span class="pl-k">end</span></pre></div>
<p>Now let's create a format reader (note that the best way to define a
new format is using <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a>,
but for simplicity we'll keep things very low level):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">reader</span>(io)
    <span class="pl-c1">String</span>(<span class="pl-c1">read</span>(io, <span class="pl-c1">9</span>)) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>BIGARRAY<span class="pl-cce">\n</span><span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>file is not a BIGARRAY file<span class="pl-pds">"</span></span>)
    n <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int)             <span class="pl-c"><span class="pl-c">#</span> read the number of dimensions</span>
    sz <span class="pl-k">=</span> (<span class="pl-c1">read</span>(io, Int, n)<span class="pl-k">...</span>)    <span class="pl-c"><span class="pl-c">#</span> read the size</span>
    <span class="pl-c"><span class="pl-c">#</span> Mmap the buffer:</span>
    a <span class="pl-k">=</span> Mmap<span class="pl-k">.</span><span class="pl-c1">mmap</span>(io, Vector{UInt8}, <span class="pl-c1">sizeof</span>(Float64)<span class="pl-k">*</span><span class="pl-c1">prod</span>(sz), <span class="pl-c1">position</span>(io))
    <span class="pl-c"><span class="pl-c">#</span> Create an array of the desired eltype and size:</span>
    v <span class="pl-k">=</span> <span class="pl-c1">UnalignedVector</span><span class="pl-c1">{Float64}</span>(a)
    <span class="pl-c1">reshape</span>(v, sz)
<span class="pl-k">end</span></pre></div>
<p>The key thing to note about this implementation is that we <code>mmap</code>ed
the buffer as a <code>Vector{UInt8}</code>; had we tried a <code>Vector{Float64}</code>,
more recent versions of Julia would have given us an error that would
look something like this:</p>
<div class="highlight highlight-source-julia"><pre>ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> unsafe_wrap<span class="pl-k">:</span> pointer <span class="pl-c1">0x7f89817ae021</span> is not properly aligned to <span class="pl-c1">8</span> bytes
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span>mmap#1(::Bool, ::Bool, ::Function, ::IOStream, ::Type{Array{Float64,2}}, ::Tuple{Int64,Int64}, ::Int64) at ./mmap.jl:139</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">mmap</span>(<span class="pl-k">::</span><span class="pl-c1">IOStream</span>, <span class="pl-k">::</span><span class="pl-c1">Type{Array{Float64,2}}</span>, <span class="pl-k">::</span><span class="pl-c1">Tuple{Int64,Int64}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>mmap<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">102</span>
 [<span class="pl-c1">3</span>] <span class="pl-c1">reader</span>(<span class="pl-k">::</span><span class="pl-c1">IOStream</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">4</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
 [<span class="pl-c1">4</span>] <span class="pl-c1">open</span>(<span class="pl-k">::</span><span class="pl-c"><span class="pl-c">#</span>#5#6, ::String) at ./iostream.jl:152</span></pre></div>
<p>In contrast, since <code>UInt8</code> has an alignment of 1, it's always safe for <code>mmap</code>ping.</p>
<p>To create the array with desired element type, the
<code>UnalignedVector{Float64}(a)</code> call creates an
<code>AbstractVector{Float64}</code> out of the memory buffer, which we then
reshape to the desired size. If you want to try this, just read the file with</p>
<div class="highlight highlight-source-julia"><pre>B <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/testfile.bga<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">reader</span>(io)
<span class="pl-k">end</span></pre></div>
<p>and you should see that <code>B == A</code>.</p>
</article></div>