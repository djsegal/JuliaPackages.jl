<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-valuehistories" class="anchor" aria-hidden="true" href="#valuehistories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ValueHistories</h1>
<p><em>Utility package for efficient tracking of optimization histories,
training curves or other information of arbitrary types and at
arbitrarily spaced sampling times</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Package License</strong></th>
<th align="center"><strong>PkgEval (Nanosoldier)</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/V/ValueHistories.html" rel="nofollow"><img src="https://camo.githubusercontent.com/631f3c81fa3b011d716111810ee6aaee116df756/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f562f56616c7565486973746f726965732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/V/ValueHistories.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaML/ValueHistories.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fe5101307f309441952bee4c6436e3feac744e6c/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d4c2f56616c7565486973746f726965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaML/ValueHistories.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/Evizero/valuehistories-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/b3b0c415fa0d74b88daee3268e191996084f1cc3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3876316e396871666e6e356a736c796e2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/8v1n9hqfnn5jslyn/branch/master?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaML/ValueHistories.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9a51465c1c07752681b39094bdf42e0165e118c1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d4c2f56616c7565486973746f726965732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaML/ValueHistories.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is registered in <code>METADATA.jl</code> and can be installed as usual</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add ValueHistories</pre></div>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>We provide two basic approaches for logging information over time
or iterations. The sample points do not have to be equally spaced as
long as time/iteration is strictly increasing.</p>
<ul>
<li><strong>Univalue histories</strong>: Intended for tracking the evolution of
a single value over time.</li>
<li><strong>Multivalue histories</strong>: Track an arbitrary amount of values over
time, each of which can be of a different type and associated with
a label</li>
</ul>
<p><em>Note that both approaches are typestable.</em></p>
<h3><a id="user-content-univalue-histories" class="anchor" aria-hidden="true" href="#univalue-histories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Univalue Histories</h3>
<p>This package provide two different concrete implementations</p>
<ul>
<li><code>QHistory</code>: Logs the values using a <code>Dequeue</code></li>
<li><code>History</code>: Logs the values using a <code>Vector</code></li>
</ul>
<p>Supported operations for univalue histories:</p>
<ul>
<li><code>push!(history, iteration, value)</code>: Appends a value to the history</li>
<li><code>get(history)</code>: Returns all available observations as two vectors. The first vector contains the iterations and the second vector contains the values.</li>
<li><code>enumerate(history)</code> Returns an enumerator over the observations (as tuples)</li>
<li><code>first(history)</code>: First stored observation (as tuple)</li>
<li><code>last(history)</code>: Last stored observation (as tuple)</li>
<li><code>length(history)</code>: Number of stored observations</li>
<li><code>increment!(history, iteration, value)</code>: Similar to <code>push!</code> but increments the <code>value</code> if the <code>iteration</code> already exists. Only supported by <code>History</code>.</li>
</ul>
<p>Here is a little example code showing the basic usage:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Primes

<span class="pl-c"><span class="pl-c">#</span> Specify the type of value you wish to track</span>
history <span class="pl-k">=</span> <span class="pl-c1">QHistory</span>(Float64)

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
  <span class="pl-c"><span class="pl-c">#</span> Store some value of the specified type</span>
  <span class="pl-c"><span class="pl-c">#</span> Note how the sampling times are not equally spaced</span>
  <span class="pl-c1">isprime</span>(i) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">push!</span>(history, i, <span class="pl-c1">sin</span>(<span class="pl-c1">.1</span><span class="pl-k">*</span>i))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Access stored values as arrays</span>
x, y <span class="pl-k">=</span> <span class="pl-c1">get</span>(history)
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Int}</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(y) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Float64}</span>

<span class="pl-c"><span class="pl-c">#</span> You can also enumerate over the observations</span>
<span class="pl-k">for</span> (x, y) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(history)
  <span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>
  <span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(y) <span class="pl-k">&lt;:</span> <span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Let's see how this prints to the REPL</span>
history</pre></div>
<pre><code>QHistory
    types: Int64, Float64
    length: 25
</code></pre>
<p>For easy visualisation we also provide recipes for <code>Plots.jl</code>.
Note that this is only supported for <code>Real</code> types.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(history, legend<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b04f614b7d37253357b983adc76eb59cc1368ecf/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f56616c7565486973746f726965732f71686973746f72792e737667"><img src="https://camo.githubusercontent.com/b04f614b7d37253357b983adc76eb59cc1368ecf/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f56616c7565486973746f726965732f71686973746f72792e737667" alt="qhistory" data-canonical-src="https://rawgithub.com/JuliaML/FileStorage/master/ValueHistories/qhistory.svg" style="max-width:100%;"></a></p>
<h3><a id="user-content-multivalue-histories" class="anchor" aria-hidden="true" href="#multivalue-histories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multivalue Histories</h3>
<p>Multivalue histories are more or less a dynamic collection of a number
of univalue histories. Each individual univalue history is associated
with a symbol <code>key</code>. If the user stores a value under a <code>key</code> that
has no univalue history associated with it, then a new one is allocated
and specialized for the given type.</p>
<p>Supported operations for multivalue histories:</p>
<ul>
<li><code>push!(history, key, iteration, value)</code>: Appends a value to the multivalue history</li>
<li><code>get(history, key)</code>: Returns all available observations as two vectors. The first vector contains the iterations and the second vector contains the values.</li>
<li><code>enumerate(history, key)</code> Returns an enumerator over the observations (as tuples)</li>
<li><code>first(history, key)</code>: First stored observation (as tuple)</li>
<li><code>last(history, key)</code>: Last stored observation (as tuple)</li>
<li><code>length(history, key)</code>: Number of stored observations</li>
<li><code>increment!(history, key, iteration, value)</code>: Similar to <code>push!</code> but increments the <code>value</code> if the <code>key</code> and <code>iteration</code> combination already exists.</li>
</ul>
<p>Here is a little example code showing the basic usage:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ValueHistories, Primes
history <span class="pl-k">=</span> <span class="pl-c1">MVHistory</span>()

<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    x <span class="pl-k">=</span> <span class="pl-c1">0.1</span>i

    <span class="pl-c"><span class="pl-c">#</span> Store any kind of value without losing type stability</span>
    <span class="pl-c"><span class="pl-c">#</span> The first push! to a key defines the tracked type</span>
    <span class="pl-c"><span class="pl-c">#</span>   push!(history, key, iter, value)</span>
    <span class="pl-c1">push!</span>(history, <span class="pl-c1">:mysin</span>, x, <span class="pl-c1">sin</span>(x))
    <span class="pl-c1">push!</span>(history, <span class="pl-c1">:mystring</span>, i, <span class="pl-s"><span class="pl-pds">"</span>i=<span class="pl-v">$i</span><span class="pl-pds">"</span></span>)

    <span class="pl-c"><span class="pl-c">#</span> Sampling times can be arbitrarily spaced</span>
    <span class="pl-c"><span class="pl-c">#</span> Note how we store the sampling time as a Float32 this time</span>
    <span class="pl-c1">isprime</span>(i) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">push!</span>(history, <span class="pl-c1">:mycos</span>, <span class="pl-c1">Float32</span>(x), <span class="pl-c1">cos</span>(x))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Access stored values as arrays</span>
x, y <span class="pl-k">=</span> <span class="pl-c1">get</span>(history, <span class="pl-c1">:mysin</span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">length</span>(x) <span class="pl-k">==</span> <span class="pl-c1">length</span>(y) <span class="pl-k">==</span> <span class="pl-c1">100</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Float64}</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(y) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Float64}</span>

<span class="pl-c"><span class="pl-c">#</span> Each key can be queried individually</span>
x, y <span class="pl-k">=</span> <span class="pl-c1">get</span>(history, <span class="pl-c1">:mystring</span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">length</span>(x) <span class="pl-k">==</span> <span class="pl-c1">length</span>(y) <span class="pl-k">==</span> <span class="pl-c1">100</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Int64}</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(y) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{String}</span>
<span class="pl-c1">@assert</span> y[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>i=1<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> You can also enumerate over the observations</span>
<span class="pl-k">for</span> (x, y) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(history, <span class="pl-c1">:mycos</span>)
  <span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">&lt;:</span> <span class="pl-c1">Float32</span>
  <span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(y) <span class="pl-k">&lt;:</span> <span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Let's see how this prints to the REPL</span>
history</pre></div>
<pre><code>MVHistory{ValueHistories.History{I,V}}
  :mysin =&gt; 100 elements {Float64,Float64}
  :mystring =&gt; 100 elements {Int64,String}
  :mycos =&gt; 25 elements {Float32,Float64}
</code></pre>
<p>For easy visualisation we also provide recipes for <code>Plots.jl</code>.
Note that this is only supported for <code>Real</code> types.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(history)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5bcd3483ce80f836fc522ea5deaa284abad1dc73/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f56616c7565486973746f726965732f6d76686973746f72792e737667"><img src="https://camo.githubusercontent.com/5bcd3483ce80f836fc522ea5deaa284abad1dc73/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f56616c7565486973746f726965732f6d76686973746f72792e737667" alt="mvhistory" data-canonical-src="https://rawgithub.com/JuliaML/FileStorage/master/ValueHistories/mvhistory.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This code is free to use under the terms of the MIT license.</p>
</article></div>