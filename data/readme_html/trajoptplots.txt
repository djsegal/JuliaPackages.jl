<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-trajoptplotsjl" class="anchor" aria-hidden="true" href="#trajoptplotsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TrajOptPlots.jl</h1>
<p dir="auto">This package provides methods for visualizing 2D and 3D systems, and is part of the <a href="https://github.com/RoboticExplorationLab/TrajectoryOptimization.jl">TrajectoryOptimization.jl</a>
ecosystem. This package depends heavily upon <a href="https://github.com/rdeits/MeshCat.jl">MeshCat.jl</a>, which is used as the visualization backend. This package
is basically a simple wrapper around MeshCat, providing convenient methods for the types defined in
<a href="https://github.com/RoboticExplorationLab/RobotDynamics.jl">RobotDynamics.jl</a> and
<a href="https://github.com/RoboticExplorationLab/TrajectoryOptimization.jl">TrajectoryOptimization.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install, use the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] # activate package manager
(@v1.5) pkg&gt; add TrajOptPlots"><pre>julia<span class="pl-k">&gt;</span> ] <span class="pl-c"><span class="pl-c">#</span> activate package manager</span>
(<span class="pl-c1">@v1</span>.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add TrajOptPlots</pre></div>
<p dir="auto">We also recommend using the package manager to add the following packages to your environment:</p>
<ul dir="auto">
<li><a href="https://github.com/rdeits/MeshCat.jl">MeshCat.jl</a>: Provides visualization</li>
<li><a href="https://github.com/RoboticExplorationLab/RobotDynamics.jl">RobotDynamics.jl</a>: Defines dynamical systems</li>
<li><a href="https://github.com/RoboticExplorationLab/RobotZoo.jl">RobotZoo.jl</a>: Provides a handful of canoncial dynamical systems. All of these sytems can be visualized using TrajOptPlots</li>
<li><a href="https://github.com/RoboticExplorationLab/TrajectoryOptimization.jl">TrajectoryOptimization.jl</a>: Defines trajectory optimization problems</li>
<li><a href="https://github.com/RoboticExplorationLab/Altro.jl">Altro.jl</a>: Fast solver for trajectory optimization problems</li>
<li><a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a>: Fast stack-allocated arrays</li>
</ul>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">Basic usage will usually follow something like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TrajOptPlots
using RobotZoo: Cartpole
using MeshCat
using StaticArrays

# Start visualizer
vis = Visualizer()
open(vis)

# Display the model
model = Cartpole()
TrajOptPlots.set_mesh!(vis, model)

# Visualize a single state
x = SA[0.5, pi/3, 0, 0]
visualize!(vis, model, x)

# Visualize a trajectory
tf = 2.0
X = [SA[sin(t), cos(t), 0, 0] for t in range(0, 2.0, length=21)]
visualize!(vis, model, tf, X)"><pre><span class="pl-k">using</span> TrajOptPlots
<span class="pl-k">using</span> RobotZoo<span class="pl-k">:</span> Cartpole
<span class="pl-k">using</span> MeshCat
<span class="pl-k">using</span> StaticArrays

<span class="pl-c"><span class="pl-c">#</span> Start visualizer</span>
vis <span class="pl-k">=</span> <span class="pl-c1">Visualizer</span>()
<span class="pl-c1">open</span>(vis)

<span class="pl-c"><span class="pl-c">#</span> Display the model</span>
model <span class="pl-k">=</span> <span class="pl-c1">Cartpole</span>()
TrajOptPlots<span class="pl-k">.</span><span class="pl-c1">set_mesh!</span>(vis, model)

<span class="pl-c"><span class="pl-c">#</span> Visualize a single state</span>
x <span class="pl-k">=</span> SA[<span class="pl-c1">0.5</span>, <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
<span class="pl-c1">visualize!</span>(vis, model, x)

<span class="pl-c"><span class="pl-c">#</span> Visualize a trajectory</span>
tf <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
X <span class="pl-k">=</span> [SA[<span class="pl-c1">sin</span>(t), <span class="pl-c1">cos</span>(t), <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] <span class="pl-k">for</span> t <span class="pl-k">in</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2.0</span>, length<span class="pl-k">=</span><span class="pl-c1">21</span>)]
<span class="pl-c1">visualize!</span>(vis, model, tf, X)</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">For more detailed examples, see the <a href="https://github.com/RoboticExplorationLab/TrajOptPlots.jl/tree/master/notebooks">notebooks</a></p>
</article></div>