<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fefmmjl" class="anchor" aria-hidden="true" href="#fefmmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FEFMM.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/jbmuir/FEFMM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4b4432d0cc84708933d6137252dc12e2a4dc70c06335d65bb6e402b8babf709f/68747470733a2f2f7472617669732d63692e636f6d2f6a626d7569722f4645464d4d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jbmuir/FEFMM.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This is a lightweight, Julia 1.0+ compatible version of Treister &amp; Haber's Factored Eikonal Fast Marching Method.</p>
<p dir="auto">See:
Eran Treister and Eldad Haber, <em>A fast marching algorithm for the factored eikonal equation</em>, Journal of Computational Physics, 324, 210-225, 2016.</p>
<p dir="auto">with implementation at <a href="https://github.com/JuliaInv/FactoredEikonalFastMarching.jl">https://github.com/JuliaInv/FactoredEikonalFastMarching.jl</a></p>
<p dir="auto">This module exports a single function, e.g.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    using FEFMM
    k2 = ones(100,100) #slowness squared
    dx = [1.0, 1.0] # grid spacing
    x0 = CartesianIndex(1,1) # source location index
    t = fefmm(k2,dx,x0) #the function gives the time estimate (t) "><pre class="notranslate"><code>    using FEFMM
    k2 = ones(100,100) #slowness squared
    dx = [1.0, 1.0] # grid spacing
    x0 = CartesianIndex(1,1) # source location index
    t = fefmm(k2,dx,x0) #the function gives the time estimate (t) 
</code></pre></div>
<h1 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h1>
<ul dir="auto">
<li>Julia 1.0+</li>
<li>DataStructures.jl</li>
<li>UnicodePlots.jl [test]</li>
<li>Test.jl [test]</li>
<li>LinearAlgebra.jl [test]</li>
</ul>
</article></div>