<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symbolicsjl" class="anchor" aria-hidden="true" href="#symbolicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Symbolics.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaSymbolics/Symbolics.jl/actions"><img src="https://github.com/JuliaSymbolics/Symbolics.jl/workflows/CI/badge.svg" alt="Github Action CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSymbolics/Symbolics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7012ae6a162b5d16d7614fc7bd2c3edb8bf5364a259fcb78fcf280f2d5fb92ab/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153796d626f6c6963732f53796d626f6c6963732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaSymbolics/Symbolics.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSymbolics/Symbolics.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaSymbolics/Symbolics.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://symbolics.juliasymbolics.org/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://symbolics.juliasymbolics.org/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Symbolics.jl is a fast and modern Computer Algebra System (CAS) for a fast and modern
programming language (Julia). The goal is to have a high-performance and parallelized
symbolic algebra system that is directly extendable in the same language as the users.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install Symbolics.jl, use the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Symbolics&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Symbolics<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">For information on using the package, see the <a href="https://juliasymbolics.github.io/Symbolics.jl/stable/" rel="nofollow">stable documentation</a>.
Use the <a href="https://juliasymbolics.github.io/Symbolics.jl/dev/" rel="nofollow">in-development documentation</a>
for the version of the documentation which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-relationship-to-other-packages" class="anchor" aria-hidden="true" href="#relationship-to-other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Relationship to Other Packages</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaSymbolics/SymbolicUtils.jl">SymbolicUtils.jl</a>: This is a
rule-rewriting system that is the core of Symbolics.jl. Symbolics.jl builds off of
SymbolicUtils.jl to extend it to a whole symbolic algebra system, complete with
support for differentiation, solving symbolic systems of equations, etc. If you're
looking for the barebones to build a new CAS for specific algebras, SymbolicUtils.jl
is that foundation. Otherwise, Symbolics.jl is for you.</li>
<li><a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a>: This is a
symbolic-numeric modeling system for the SciML ecosystem. It heavily uses Symbolics.jl
for its representation of symbolic equations along with tools like differentiation,
and adds the representation of common modeling systems like ODEs, SDEs, and more.</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Symbolics

julia&gt; @variables t x y
julia&gt; D = Differential(t)

julia&gt; z = t + t^2
julia&gt; D(z) # symbolic representation of derivative(t + t^2, t)
Differential(t)(t + t^2)

julia&gt; expand_derivatives(D(z))
1 + 2t

julia&gt; Symbolics.jacobian([x + x*y, x^2 + y],[x, y])
2×2 Matrix{Num}:
 1 + y  x
    2x  1

julia&gt; B = simplify.([t^2 + t + t^2  2t + 4t
                  x + y + y + 2t  x^2 - x^2 + y^2])
2×2 Matrix{Num}:
  t + 2(t^2)   6t
 x + 2t + 2y  y^2

julia&gt; simplify.(substitute.(B, (Dict(x =&gt; y^2),)))
2×2 Matrix{Num}:
    t + 2(t^2)   6t
 2t + y^2 + 2y  y^2

julia&gt; substitute.(B, (Dict(x =&gt; 2.0, y =&gt; 3.0, t =&gt; 4.0),))
2×2 Matrix{Num}:
 36.0  24.0
 16.0   9.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Symbolics

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@variables</span> t x y
julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(t)

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> t <span class="pl-k">+</span> t<span class="pl-k">^</span><span class="pl-c1">2</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(z) <span class="pl-c"><span class="pl-c">#</span> symbolic representation of derivative(t + t^2, t)</span>
<span class="pl-c1">Differential</span>(t)(t <span class="pl-k">+</span> t<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">expand_derivatives</span>(<span class="pl-c1">D</span>(z))
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>t

julia<span class="pl-k">&gt;</span> Symbolics<span class="pl-k">.</span><span class="pl-c1">jacobian</span>([x <span class="pl-k">+</span> x<span class="pl-k">*</span>y, x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y],[x, y])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Num}<span class="pl-k">:</span>
 <span class="pl-c1">1</span> <span class="pl-k">+</span> y  x
    <span class="pl-c1">2</span>x  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">simplify</span>.([t<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> t <span class="pl-k">+</span> t<span class="pl-k">^</span><span class="pl-c1">2</span>  <span class="pl-c1">2</span>t <span class="pl-k">+</span> <span class="pl-c1">4</span>t
                  x <span class="pl-k">+</span> y <span class="pl-k">+</span> y <span class="pl-k">+</span> <span class="pl-c1">2</span>t  x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Num}<span class="pl-k">:</span>
  t <span class="pl-k">+</span> <span class="pl-c1">2</span>(t<span class="pl-k">^</span><span class="pl-c1">2</span>)   <span class="pl-c1">6</span>t
 x <span class="pl-k">+</span> <span class="pl-c1">2</span>t <span class="pl-k">+</span> <span class="pl-c1">2</span>y  y<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simplify</span>.(<span class="pl-c1">substitute</span>.(B, (<span class="pl-c1">Dict</span>(x <span class="pl-k">=&gt;</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>),)))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Num}<span class="pl-k">:</span>
    t <span class="pl-k">+</span> <span class="pl-c1">2</span>(t<span class="pl-k">^</span><span class="pl-c1">2</span>)   <span class="pl-c1">6</span>t
 <span class="pl-c1">2</span>t <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>y  y<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">substitute</span>.(B, (<span class="pl-c1">Dict</span>(x <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>, y <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span>, t <span class="pl-k">=&gt;</span> <span class="pl-c1">4.0</span>),))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Num}<span class="pl-k">:</span>
 <span class="pl-c1">36.0</span>  <span class="pl-c1">24.0</span>
 <span class="pl-c1">16.0</span>   <span class="pl-c1">9.0</span></pre></div>
<h2 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h2>
<p dir="auto">If you use Symbolics.jl, please <a href="https://dl.acm.org/doi/10.1145/3511528.3511535" rel="nofollow">cite this paper</a>
(or see the free <a href="https://arxiv.org/abs/2105.03949" rel="nofollow">arxiv version</a>)</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@article{10.1145/3511528.3511535,
author = {Gowda, Shashi and Ma, Yingbo and Cheli, Alessandro and Gw\'{o}\'{z}zd\'{z}, Maja and Shah, Viral B. and Edelman, Alan and Rackauckas, Christopher},
title = {High-Performance Symbolic-Numerics via Multiple Dispatch},
year = {2022},
issue_date = {September 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {55},
number = {3},
issn = {1932-2240},
url = {https://doi.org/10.1145/3511528.3511535},
doi = {10.1145/3511528.3511535},
abstract = {As mathematical computing becomes more democratized in high-level languages, high-performance symbolic-numeric systems are necessary for domain scientists and engineers to get the best performance out of their machine without deep knowledge of code optimization. Naturally, users need different term types either to have different algebraic properties for them, or to use efficient data structures. To this end, we developed Symbolics.jl, an extendable symbolic system which uses dynamic multiple dispatch to change behavior depending on the domain needs. In this work we detail an underlying abstract term interface which allows for speed without sacrificing generality. We show that by formalizing a generic API on actions independent of implementation, we can retroactively add optimized data structures to our system without changing the pre-existing term rewriters. We showcase how this can be used to optimize term construction and give a 113x acceleration on general symbolic transformations. Further, we show that such a generic API allows for complementary term-rewriting implementations. Exploiting this feature, we demonstrate the ability to swap between classical term-rewriting simplifiers and e-graph-based term-rewriting simplifiers. We illustrate how this symbolic system improves numerical computing tasks by showcasing an e-graph ruleset which minimizes the number of CPU cycles during expression evaluation, and demonstrate how it simplifies a real-world reaction-network simulation to halve the runtime. Additionally, we show a reaction-diffusion partial differential equation solver which is able to be automatically converted into symbolic expressions via multiple dispatch tracing, which is subsequently accelerated and parallelized to give a 157x simulation speedup. Together, this presents Symbolics.jl as a next-generation symbolic-numeric computing environment geared towards modeling and simulation.},
journal = {ACM Commun. Comput. Algebra},
month = {jan},
pages = {92–96},
numpages = {5}
}"><pre><span class="pl-k">@article</span>{<span class="pl-en">10.1145/3511528.3511535</span>,
<span class="pl-s">author</span> = <span class="pl-s"><span class="pl-pds">{</span>Gowda, Shashi and Ma, Yingbo and Cheli, Alessandro and Gw\'{o}\'{z}zd\'{z}, Maja and Shah, Viral B. and Edelman, Alan and Rackauckas, Christopher<span class="pl-pds">}</span></span>,
<span class="pl-s">title</span> = <span class="pl-s"><span class="pl-pds">{</span>High-Performance Symbolic-Numerics via Multiple Dispatch<span class="pl-pds">}</span></span>,
<span class="pl-s">year</span> = <span class="pl-s"><span class="pl-pds">{</span>2022<span class="pl-pds">}</span></span>,
<span class="pl-s">issue_date</span> = <span class="pl-s"><span class="pl-pds">{</span>September 2021<span class="pl-pds">}</span></span>,
<span class="pl-s">publisher</span> = <span class="pl-s"><span class="pl-pds">{</span>Association for Computing Machinery<span class="pl-pds">}</span></span>,
<span class="pl-s">address</span> = <span class="pl-s"><span class="pl-pds">{</span>New York, NY, USA<span class="pl-pds">}</span></span>,
<span class="pl-s">volume</span> = <span class="pl-s"><span class="pl-pds">{</span>55<span class="pl-pds">}</span></span>,
<span class="pl-s">number</span> = <span class="pl-s"><span class="pl-pds">{</span>3<span class="pl-pds">}</span></span>,
<span class="pl-s">issn</span> = <span class="pl-s"><span class="pl-pds">{</span>1932-2240<span class="pl-pds">}</span></span>,
<span class="pl-s">url</span> = <span class="pl-s"><span class="pl-pds">{</span>https://doi.org/10.1145/3511528.3511535<span class="pl-pds">}</span></span>,
<span class="pl-s">doi</span> = <span class="pl-s"><span class="pl-pds">{</span>10.1145/3511528.3511535<span class="pl-pds">}</span></span>,
abstract = {As mathematical computing becomes more democratized in high-level languages, high-performance symbolic-numeric systems are necessary for domain scientists and engineers to get the best performance out of their machine without deep knowledge of code optimization. Naturally, users need different term types either to have different algebraic properties for them, or to use efficient data structures. To this end, we developed Symbolics.jl, an extendable symbolic system which uses dynamic multiple dispatch to change behavior depending on the domain needs. In this work we detail an underlying abstract term interface which allows for speed without sacrificing generality. We show that by formalizing a generic API on actions independent of implementation, we can retroactively add optimized data structures to our system without changing the pre-existing term rewriters. We showcase how this can be used to optimize term construction and give a 113x acceleration on general symbolic transformations. Further, we show that such a generic API allows for complementary term-rewriting implementations. Exploiting this feature, we demonstrate the ability to swap between classical term-rewriting simplifiers and e-graph-based term-rewriting simplifiers. We illustrate how this symbolic system improves numerical computing tasks by showcasing an e-graph ruleset which minimizes the number of CPU cycles during expression evaluation, and demonstrate how it simplifies a real-world reaction-network simulation to halve the runtime. Additionally, we show a reaction-diffusion partial differential equation solver which is able to be automatically converted into symbolic expressions via multiple dispatch tracing, which is subsequently accelerated and parallelized to give a 157x simulation speedup. Together, this presents Symbolics.jl as a next-generation symbolic-numeric computing environment geared towards modeling and simulation.},
<span class="pl-s">journal</span> = <span class="pl-s"><span class="pl-pds">{</span>ACM Commun. Comput. Algebra<span class="pl-pds">}</span></span>,
<span class="pl-s">month</span> = <span class="pl-s"><span class="pl-pds">{</span>jan<span class="pl-pds">}</span></span>,
<span class="pl-s">pages</span> = <span class="pl-s"><span class="pl-pds">{</span>92–96<span class="pl-pds">}</span></span>,
<span class="pl-s">numpages</span> = <span class="pl-s"><span class="pl-pds">{</span>5<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>