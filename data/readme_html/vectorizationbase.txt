<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-vectorizationbase" class="anchor" aria-hidden="true" href="#vectorizationbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VectorizationBase</h1>
<p><a href="https://JuliaSIMD.github.io/VectorizationBase.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaSIMD.github.io/VectorizationBase.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaSIMD/VectorizationBase.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaSIMD/VectorizationBase.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://github.com/JuliaSIMD/VectorizationBase.jl/actions?query=workflow%3A%22CI+%28Julia+nightly%29%22"><img src="https://github.com/JuliaSIMD/VectorizationBase.jl/workflows/CI%20(Julia%20nightly)/badge.svg" alt="CI (Julia nightly)" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/VectorizationBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/539df6ab88aa7c0dff2ce6e472757fc6f6caeca6b5aa401e4d818db5fe837b1b/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f566563746f72697a6174696f6e426173652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaSIMD/VectorizationBase.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<hr>
<p>This is a library providing basic SIMD support in Julia. VectorizationBase exists in large part to serve the needs of <a href="https://github.com/JuliaSIMD/LoopVectorization.jl">LoopVectorization.jl</a>'s code gen, prioritizing this over a stable user-facing API. Thus, you may wish to consider <a href="https://github.com/eschnett/SIMD.jl">SIMD.jl</a> as an alternative when writing explicit SIMD code in Julia. That said, the <code>Vec</code> and <code>VecUnroll</code> types are meant to "just work" as much as possible when passed to user-defined functions, so it should be reasonably stable in practice. Other parts of the code -- e.g, loading and storing vectors as well as the <code>stridedpointer</code> function -- will hopefully converge reasonably soon, and have support for various <code>AbstractArray</code> types propogated through the ecosystem by taking advantage of <a href="https://github.com/SciML/ArrayInterface.jl">ArrayInterface.jl</a>, so that VectorizationBase can begin to offer a stable, ergonomic, and well supported API fairly soon.</p>
<p>It additionally provides some information on the host computer it is running on, which can be used to automate target-specific optimizations. Currently, x86_64 support is best on that front, but I'm looking to improve the quality of information provided for other architectures.</p>
<p><code>Vec</code>s are <code>Number</code>s and behave as a single objects; they just happen to contain multiple <code>Float64</code>. Therefore, it will behave like a single number rather than a collection with respect to indexing and reductions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using VectorizationBase

julia&gt; vx = Vec(ntuple(_ -&gt; 10randn(), VectorizationBase.pick_vector_width(Float64))...)
Vec{8,Float64}&lt;14.424983437388981, -7.7378330531368045, -3.499708331670689, -3.358981392002452, 22.519898671389406, -13.08647686033593, 13.96943264299162, -9.518537139443254&gt;

julia&gt; vx[1]
Vec{8,Float64}&lt;14.424983437388981, -7.7378330531368045, -3.499708331670689, -3.358981392002452, 22.519898671389406, -13.08647686033593, 13.96943264299162, -9.518537139443254&gt;

julia&gt; sum(vx)
Vec{8,Float64}&lt;14.424983437388981, -7.7378330531368045, -3.499708331670689, -3.358981392002452, 22.519898671389406, -13.08647686033593, 13.96943264299162, -9.518537139443254&gt;

julia&gt; a = 1.2;

julia&gt; a[1]
1.2

julia&gt; sum(a)
1.2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> VectorizationBase

julia<span class="pl-k">&gt;</span> vx <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">ntuple</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">10</span><span class="pl-c1">randn</span>(), VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector_width</span>(Float64))<span class="pl-k">...</span>)
Vec{<span class="pl-c1">8</span>,Float64}<span class="pl-k">&lt;</span><span class="pl-c1">14.424983437388981</span>, <span class="pl-k">-</span><span class="pl-c1">7.7378330531368045</span>, <span class="pl-k">-</span><span class="pl-c1">3.499708331670689</span>, <span class="pl-k">-</span><span class="pl-c1">3.358981392002452</span>, <span class="pl-c1">22.519898671389406</span>, <span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>, <span class="pl-c1">13.96943264299162</span>, <span class="pl-k">-</span><span class="pl-c1">9.518537139443254</span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> vx[<span class="pl-c1">1</span>]
Vec{<span class="pl-c1">8</span>,Float64}<span class="pl-k">&lt;</span><span class="pl-c1">14.424983437388981</span>, <span class="pl-k">-</span><span class="pl-c1">7.7378330531368045</span>, <span class="pl-k">-</span><span class="pl-c1">3.499708331670689</span>, <span class="pl-k">-</span><span class="pl-c1">3.358981392002452</span>, <span class="pl-c1">22.519898671389406</span>, <span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>, <span class="pl-c1">13.96943264299162</span>, <span class="pl-k">-</span><span class="pl-c1">9.518537139443254</span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(vx)
Vec{<span class="pl-c1">8</span>,Float64}<span class="pl-k">&lt;</span><span class="pl-c1">14.424983437388981</span>, <span class="pl-k">-</span><span class="pl-c1">7.7378330531368045</span>, <span class="pl-k">-</span><span class="pl-c1">3.499708331670689</span>, <span class="pl-k">-</span><span class="pl-c1">3.358981392002452</span>, <span class="pl-c1">22.519898671389406</span>, <span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>, <span class="pl-c1">13.96943264299162</span>, <span class="pl-k">-</span><span class="pl-c1">9.518537139443254</span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">1.2</span>;

julia<span class="pl-k">&gt;</span> a[<span class="pl-c1">1</span>]
<span class="pl-c1">1.2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(a)
<span class="pl-c1">1.2</span></pre></div>
<p>To extract elements from a <code>Vec</code>, you call it, using parenthesis to index as you would in Fortran or MATLAB:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; vx(1), vx(2)
(14.424983437388981, -7.7378330531368045)

julia&gt; ntuple(vx, Val(8))
(14.424983437388981, -7.7378330531368045, -3.499708331670689, -3.358981392002452, 22.519898671389406, -13.08647686033593, 13.96943264299162, -9.518537139443254)

julia&gt; Tuple(vx) # defined for convenience
(14.424983437388981, -7.7378330531368045, -3.499708331670689, -3.358981392002452, 22.519898671389406, -13.08647686033593, 13.96943264299162, -9.518537139443254)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">vx</span>(<span class="pl-c1">1</span>), <span class="pl-c1">vx</span>(<span class="pl-c1">2</span>)
(<span class="pl-c1">14.424983437388981</span>, <span class="pl-k">-</span><span class="pl-c1">7.7378330531368045</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ntuple</span>(vx, <span class="pl-c1">Val</span>(<span class="pl-c1">8</span>))
(<span class="pl-c1">14.424983437388981</span>, <span class="pl-k">-</span><span class="pl-c1">7.7378330531368045</span>, <span class="pl-k">-</span><span class="pl-c1">3.499708331670689</span>, <span class="pl-k">-</span><span class="pl-c1">3.358981392002452</span>, <span class="pl-c1">22.519898671389406</span>, <span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>, <span class="pl-c1">13.96943264299162</span>, <span class="pl-k">-</span><span class="pl-c1">9.518537139443254</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Tuple</span>(vx) <span class="pl-c"><span class="pl-c">#</span> defined for convenience</span>
(<span class="pl-c1">14.424983437388981</span>, <span class="pl-k">-</span><span class="pl-c1">7.7378330531368045</span>, <span class="pl-k">-</span><span class="pl-c1">3.499708331670689</span>, <span class="pl-k">-</span><span class="pl-c1">3.358981392002452</span>, <span class="pl-c1">22.519898671389406</span>, <span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>, <span class="pl-c1">13.96943264299162</span>, <span class="pl-k">-</span><span class="pl-c1">9.518537139443254</span>)</pre></div>
<p>Unfortunately, this means no support for indexing with <code>begin</code>/<code>end</code>.</p>
<p>Reductions are like the ordinary version, but prefixed with <code>v</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using VectorizationBase: vsum, vprod, vmaximum, vminimum

julia&gt; vsum(vx), sum(Tuple(vx))
(13.712777975180877, 13.712777975180877)

julia&gt; vprod(vx), prod(Tuple(vx))
(-5.141765647043406e7, -5.141765647043406e7)

julia&gt; vmaximum(vx), maximum(Tuple(vx))
(22.519898671389406, 22.519898671389406)

julia&gt; vminimum(vx), minimum(Tuple(vx))
(-13.08647686033593, -13.08647686033593)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> VectorizationBase<span class="pl-k">:</span> vsum, vprod, vmaximum, vminimum

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vsum</span>(vx), <span class="pl-c1">sum</span>(<span class="pl-c1">Tuple</span>(vx))
(<span class="pl-c1">13.712777975180877</span>, <span class="pl-c1">13.712777975180877</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vprod</span>(vx), <span class="pl-c1">prod</span>(<span class="pl-c1">Tuple</span>(vx))
(<span class="pl-k">-</span><span class="pl-c1">5.141765647043406e7</span>, <span class="pl-k">-</span><span class="pl-c1">5.141765647043406e7</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vmaximum</span>(vx), <span class="pl-c1">maximum</span>(<span class="pl-c1">Tuple</span>(vx))
(<span class="pl-c1">22.519898671389406</span>, <span class="pl-c1">22.519898671389406</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vminimum</span>(vx), <span class="pl-c1">minimum</span>(<span class="pl-c1">Tuple</span>(vx))
(<span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>, <span class="pl-k">-</span><span class="pl-c1">13.08647686033593</span>)</pre></div>
</article></div>