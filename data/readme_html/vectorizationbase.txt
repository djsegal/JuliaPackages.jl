<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-vectorizationbase" class="anchor" aria-hidden="true" href="#vectorizationbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VectorizationBase</h1>
<p><a href="https://chriselrod.github.io/VectorizationBase.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://chriselrod.github.io/VectorizationBase.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/chriselrod/VectorizationBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/952b71619beddadbf6898976b301976c57e1b096/68747470733a2f2f7472617669732d63692e636f6d2f6368726973656c726f642f566563746f72697a6174696f6e426173652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/chriselrod/VectorizationBase.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chriselrod/VectorizationBase-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/093d0f3d926c31dcdde133fecc074052bf1b3d3f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6368726973656c726f642f566563746f72697a6174696f6e426173652e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/chriselrod/VectorizationBase.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chriselrod/VectorizationBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3c094bbe5cd87f11adf5a087dc068f324e433c9/68747470733a2f2f636f6465636f762e696f2f67682f6368726973656c726f642f566563746f72697a6174696f6e426173652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/chriselrod/VectorizationBase.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<hr>
<p>This library provides some basic functionality meant to aid in in vectorizing code on x86 architectures (most laptops, desktops, and servers). Building it depends on <a href="https://github.com/m-j-w/CpuId.jl">CpuID.jl</a>, which creates a file defining a fewconstants important to vectorization, such as the SIMD widths. For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> VectorizationBase

julia<span class="pl-k">&gt;</span> VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector_width</span>(Float64)
<span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector_width</span>(Float32)
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector</span>(Float64)
NTuple{<span class="pl-c1">8</span>,VecElement{Float64}}</pre></div>
<p>This means that on the computer that ran this code, a single vector register can hold 8 elements of type <code>Float64</code> or 16 <code>Float32</code>.</p>
<p>For more information on <code>VecElement</code>s, please see <a href="https://docs.julialang.org/en/v1/base/simd-types/" rel="nofollow">Julia's documentation</a> or Kristoffer Carlson's blog post <a href="http://kristofferc.github.io/post/intrinsics/" rel="nofollow">SIMD and SIMD-intrinsics in Julia</a>. In short, they are lowered as <a href="https://llvm.org/docs/LangRef.html#vector-type" rel="nofollow">LLVM vectors</a>, which (while housing multiple elements) are treated as single values, to be operated on in parallel with SIMD instructions. This is contrast with an array, which is an aggregate collection of values.</p>
<p>The libraries <a href="https://github.com/chriselrod/SIMDPirates.jl">SIMDPirates</a> and <a href="https://github.com/chriselrod/SLEEFPirates.jl">SLEEFPirates</a> (which are themselves forks of <a href="https://github.com/eschnett/SIMD.jl">SIMD.jl</a> and <a href="https://github.com/musm/SLEEF.jl">SLEEF.jl</a>) define many functions operating on tuples of <code>VecElement</code>s, for writing explicit SIMD code.</p>
<p>Perhaps used more often than <code>VectorizationBase.pick_vector_width</code> is <code>VectorizationBase.pick_vector_width_shift</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> W, Wshift <span class="pl-k">=</span> VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector_width_shift</span>(Float64)
(<span class="pl-c1">8</span>, <span class="pl-c1">3</span>)</pre></div>
<p>This function returns the ideal vector width for the type, as well as <code>log2(width)</code>. This is useful for calculating the number of loop iterations. For example, if we wish to iterate over a vector of length 117:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">117</span> <span class="pl-k">&gt;&gt;</span> Wshift
<span class="pl-c1">14</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">117</span> <span class="pl-k">&amp;</span> (W <span class="pl-k">-</span> <span class="pl-c1">1</span>)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">14</span>W <span class="pl-k">+</span> <span class="pl-c1">5</span>
<span class="pl-c1">117</span></pre></div>
<p>We would want 14 iterations of 8, leaving us a remainder of 5. We could either loop over this remainder one at a time, or use masked instructions. <code>VectorizationBase.mask</code> provides a convenience function for producing a mask:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> VectorizationBase<span class="pl-k">.</span><span class="pl-c1">mask</span>(Float64, <span class="pl-c1">5</span>)
<span class="pl-c1">0x1f</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bitstring</span>(ans)
<span class="pl-s"><span class="pl-pds">"</span>00011111<span class="pl-pds">"</span></span></pre></div>
<p>Masks are to be read from right to left. For example, we could define a masked load as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@inline</span> <span class="pl-k">function</span> <span class="pl-en">vload8d</span>(ptr<span class="pl-k">::</span><span class="pl-c1">Ptr{Float64}</span>, mask<span class="pl-k">::</span><span class="pl-c1">UInt8</span>)
	Base<span class="pl-k">.</span><span class="pl-c1">llvmcall</span>(
		(<span class="pl-s"><span class="pl-pds">"</span>declare &lt;8 x double&gt; @llvm.masked.load.v8f64(&lt;8 x double&gt;*, i32, &lt;8 x i1&gt;, &lt;8 x double&gt;)<span class="pl-pds">"</span></span>,
		<span class="pl-s"><span class="pl-pds">"""</span>%ptr = inttoptr i64 %0 to &lt;8 x double&gt;*</span>
<span class="pl-s">		%mask = bitcast i8 %1 to &lt;8 x i1&gt;</span>
<span class="pl-s">		%res = call &lt;8 x double&gt; @llvm.masked.load.v8f64(&lt;8 x double&gt;* %ptr, i32 8, &lt;8 x i1&gt; %mask, &lt;8 x double&gt; zeroinitializer)</span>
<span class="pl-s">		ret &lt;8 x double&gt; %res<span class="pl-pds">"""</span></span>),
		Vec{<span class="pl-c1">8</span>, Float64}, Tuple{Ptr{Float64}, UInt8}, ptr, mask
	)
<span class="pl-k">end</span></pre></div>
<p>This allows us to load just 5 elements (and therefore avoid segmentation faults):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>); x<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">5</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.928247</span>  <span class="pl-c1">0.889502</span>  <span class="pl-c1">0.533114</span>  <span class="pl-c1">0.285248</span>  <span class="pl-c1">0.275795</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">8</span>); y<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">8</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.402572</span>  <span class="pl-c1">0.771600</span>  <span class="pl-c1">0.242454</span>  <span class="pl-c1">0.699283</span>  <span class="pl-c1">0.618579</span>  <span class="pl-c1">0.804612</span>  <span class="pl-c1">0.904894</span>  <span class="pl-c1">0.234704</span>
 
julia<span class="pl-k">&gt;</span> <span class="pl-c1">vload8d</span>(<span class="pl-c1">pointer</span>(x), <span class="pl-c1">0x1f</span>)
(<span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.9282465954844357</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.8895020822839887</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.5331136178366147</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.28524793374254176</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.2757945162086832</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vload8d</span>(<span class="pl-c1">pointer</span>(y), <span class="pl-c1">0x1f</span>)
(<span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.4025719724148169</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.7715998492280507</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.242453946944301</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.6992828239389028</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.6185788376359711</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vload8d</span>(<span class="pl-c1">pointer</span>(y) <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-c1">sizeof</span>(Float64), <span class="pl-c1">0x1f</span>)
(<span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.6992828239389028</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.6185788376359711</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.8046118255195078</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.904893953223624</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.23470368695369492</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">VecElement</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>))</pre></div>
<p>This compiles to efficient native code on the host machine:</p>
<div class="highlight highlight-source-assembly"><pre><span class="pl-en">julia&gt; @code_native debuginfo=:none vload8d(pointer(x)</span><span class="pl-s1">,</span><span class="pl-en"> </span><span class="pl-c1">0x1f</span><span class="pl-en">)</span>
<span class="pl-en">	.text</span>
<span class="pl-en">	kmovd	%</span><span class="pl-v">esi</span><span class="pl-s1">,</span><span class="pl-en"> %k1</span>
<span class="pl-en">	</span><span class="pl-k">vmovupd</span><span class="pl-en">	(%</span><span class="pl-v">rdi</span><span class="pl-en">)</span><span class="pl-s1">,</span><span class="pl-en"> %zmm0 {%k1} {z}</span>
<span class="pl-en">	retq</span>
<span class="pl-en">	nopl	(%</span><span class="pl-v">rax</span><span class="pl-s1">,</span><span class="pl-en">%</span><span class="pl-v">rax</span><span class="pl-en">)</span></pre></div>
<p>You don't need to know LLVM to use this library, <code>SIMDPirates</code>, or <code>SLEEFPirates</code>; they should abstract everything away. If you have any feature requests, or would like any helper functions such as those mentioned here, please don't hesitate to file an issue or open a pull request.</p>
</article></div>