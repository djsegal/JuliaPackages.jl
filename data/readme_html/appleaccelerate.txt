<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-appleacceleratejl" class="anchor" aria-hidden="true" href="#appleacceleratejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AppleAccelerate.jl</h1>
<p dir="auto">This provides a Julia interface to some of the
<a href="https://developer.apple.com/documentation/accelerate" rel="nofollow">macOS Accelerate framework</a>. At
the moment, this package provides:</p>
<ol dir="auto">
<li>Access to Accelerate BLAS and LAPACK using the <a href="https://github.com/JuliaLinearAlgebra/libblastrampoline">libblastrampoline</a> framework,</li>
<li>An interface to the <a href="https://developer.apple.com/library/mac/documentation/Performance/Conceptual/vecLib/index.html#//apple_ref/doc/uid/TP30000414-357225" rel="nofollow">array-oriented functions</a>,
which provide a vectorised form for many common mathematical functions</li>
</ol>
<p dir="auto">The performance is significantly better than using standard libm functions in some cases, though there does appear to be some reduced accuracy.</p>
<h2 dir="auto"><a id="user-content-os-requirements" class="anchor" aria-hidden="true" href="#os-requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OS Requirements</h2>
<p dir="auto">MacOS 13.3 is required in order to run AppleAccelerate.jl, especially for the libblastrampoline forwarding. On older MacOS versions, your mileage may vary.</p>
<h2 dir="auto"><a id="user-content-supported-functions" class="anchor" aria-hidden="true" href="#supported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported Functions</h2>
<p dir="auto">The following functions are supported:</p>
<ul dir="auto">
<li><em>Rounding</em>: <code>ceil</code>, <code>floor</code>, <code>trunc</code>, <code>round</code></li>
<li><em>Logarithmic</em>: <code>exp</code>, <code>exp2</code>, <code>expm1</code>, <code>log</code>, <code>log1p</code>, <code>log2</code>, <code>log10</code></li>
<li><em>Trigonometric</em>: <code>sin</code>, <code>sinpi</code>, <code>cos</code>, <code>cospi</code>, <code>tan</code>, <code>tanpi</code>, <code>asin</code>, <code>acos</code>, <code>atan</code>, <code>atan2</code>, <code>cis</code></li>
<li><em>Hyperbolic</em>: <code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>asinh</code>, <code>acosh</code>, <code>atanh</code></li>
<li><em>Convolution</em>: <code>conv</code>, <code>xcorr</code></li>
<li><em>Other</em>: <code>sqrt</code>, <code>copysign</code>, <code>exponent</code>, <code>abs</code>, <code>rem</code></li>
</ul>
<p dir="auto">Note there are some slight differences from behaviour in Base:</p>
<ul dir="auto">
<li>No <code>DomainError</code>s are raised, instead <code>NaN</code> values are returned.</li>
<li><code>round</code> breaks ties (values with a fractional part of 0.5) by choosing the
nearest even value.</li>
<li><code>exponent</code> returns a floating point value of the same type (instead of an <code>Int</code>).</li>
</ul>
<p dir="auto">Some additional functions that are also available:</p>
<ul dir="auto">
<li><code>rec(x)</code>: reciprocal (<code>1.0 ./ x</code>)</li>
<li><code>rsqrt(x)</code>: reciprocal square-root (<code>1.0 ./ sqrt(x)</code>)</li>
<li><code>pow(x,y)</code>: power (<code>x .^ y</code> in Base)</li>
<li><code>fdiv(x,y)</code>: divide (<code>x ./ y</code> in Base)</li>
<li><code>sincos(x)</code>: returns <code>(sin(x), cos(x))</code></li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">To use the Accelerate BLAS and LAPACK, simply load the library:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; peakflops(4096)
3.6024175318268243e11

julia&gt; using AppleAccelerate

julia&gt; peakflops(4096)
5.832806459434183e11"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">peakflops</span>(<span class="pl-c1">4096</span>)
<span class="pl-c1">3.6024175318268243e11</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AppleAccelerate

julia<span class="pl-k">&gt;</span> <span class="pl-c1">peakflops</span>(<span class="pl-c1">4096</span>)
<span class="pl-c1">5.832806459434183e11</span></pre></div>
<p dir="auto">To avoid naming conflicts with Base, methods are not exported and so need to
be accessed via the namespace:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AppleAccelerate
using BenchmarkTools
X = randn(1_000_000);
@btime exp.($X); # standard libm function
@btime AppleAccelerate.exp($X); # Accelerate array-oriented function"><pre><span class="pl-k">using</span> AppleAccelerate
<span class="pl-k">using</span> BenchmarkTools
X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1_000_000</span>);
<span class="pl-c1">@btime</span> <span class="pl-c1">exp</span>.(<span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> standard libm function</span>
<span class="pl-c1">@btime</span> AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">exp</span>(<span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> Accelerate array-oriented function</span></pre></div>
<p dir="auto">The <code>@replaceBase</code> macro replaces the relevant Base methods directly</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@btime sin.($X); # standard libm function
AppleAccelerate.@replaceBase sin cos tan
@btime sin($X);  # will use AppleAccelerate methods for vectorised operations

X = randn(1_000_000);
Y = fill(3.0, 1_000_000);
@btime $X .^ $Y;
AppleAccelerate.@replaceBase(^, /) # use parenthesised form for infix ops
@btime $X ^ $Y;"><pre><span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>.(<span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> standard libm function</span>
AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">@replaceBase</span> sin cos tan
<span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>(<span class="pl-k">$</span>X);  <span class="pl-c"><span class="pl-c">#</span> will use AppleAccelerate methods for vectorised operations</span>

X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1_000_000</span>);
Y <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">1_000_000</span>);
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>X <span class="pl-k">.^</span> <span class="pl-k">$</span>Y;
AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">@replaceBase</span>(<span class="pl-k">^</span>, <span class="pl-k">/</span>) <span class="pl-c"><span class="pl-c">#</span> use parenthesised form for infix ops</span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>X <span class="pl-k">^</span> <span class="pl-k">$</span>Y;</pre></div>
<p dir="auto">Output arrays can be specified as first arguments of the functions suffixed
with <code>!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="out = zeros(Float64, 1_000_000)
@btime AppleAccelerate.exp!($out, $X)"><pre>out <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float64, <span class="pl-c1">1_000_000</span>)
<span class="pl-c1">@btime</span> AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">exp!</span>(<span class="pl-k">$</span>out, <span class="pl-k">$</span>X)</pre></div>
<p dir="auto"><strong>Warning</strong>: no dimension checks are performed on the <code>!</code> functions, so ensure
your input and output arrays are of the same length.</p>
<p dir="auto">Operations can be performed in-place by specifying the output array as the
input array (e.g. <code>AppleAccelerate.exp!(X,X)</code>). This is not mentioned in the
Accelerate docs, but <a href="http://stackoverflow.com/a/28833191/392585" rel="nofollow">this comment</a> by one of the authors indicates that it is safe.</p>
</article></div>