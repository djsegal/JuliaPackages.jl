<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-appleacceleratejl" class="anchor" aria-hidden="true" href="#appleacceleratejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AppleAccelerate.jl</h1>
<p><a href="https://travis-ci.org/JuliaMath/AppleAccelerate.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d42b2ebf2cfa9d532c5f196d8e0c0040a97103fa/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f4170706c65416363656c65726174652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/AppleAccelerate.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This provides a Julia interface to some of
<a href="https://developer.apple.com/library/mac/documentation/Accelerate/Reference/AccelerateFWRef/" rel="nofollow">OS X's Accelerate framework</a>. At
the moment, the package consists mostly of an interface to the
<a href="https://developer.apple.com/library/mac/documentation/Performance/Conceptual/vecLib/index.html#//apple_ref/doc/uid/TP30000414-357225" rel="nofollow">array-oriented functions</a>,
which provide a vectorised form of many common mathematical functions, however the package does provide access to several other vectorized operations and more are being added on a regular basis.   In
general, the performance is significantly better than using standard libm
functions, though there does appear to be some reduced accuracy.</p>
<p>The following functions are supported:</p>
<ul>
<li><em>Rounding</em>: <code>ceil</code>, <code>floor</code>, <code>trunc</code>, <code>round</code></li>
<li><em>Logarithmic</em>: <code>exp</code>, <code>exp2</code>, <code>expm1</code>, <code>log</code>, <code>log1p</code>, <code>log2</code>, <code>log10</code></li>
<li><em>Trigonometric</em>: <code>sin</code>, <code>sinpi</code>, <code>cos</code>, <code>cospi</code>, <code>tan</code>, <code>tanpi</code>, <code>asin</code>, <code>acos</code>, <code>atan</code>, <code>atan2</code>, <code>cis</code></li>
<li><em>Hyperbolic</em>: <code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>asinh</code>, <code>acosh</code>, <code>atanh</code></li>
<li><em>Convolution</em>: <code>conv</code>, <code>xcorr</code></li>
<li><em>Other</em>: <code>sqrt</code>, <code>copysign</code>, <code>exponent</code>, <code>abs</code>, <code>rem</code></li>
</ul>
<p>Note there are some slight differences from behaviour in Base:</p>
<ul>
<li>No <code>DomainError</code>s are raised, instead <code>NaN</code> values are returned.</li>
<li><code>round</code> breaks ties (values with a fractional part of 0.5) by choosing the
nearest even value.</li>
<li><code>exponent</code> returns a floating point value of the same type (instead of an <code>Int</code>).</li>
</ul>
<p>Some additional functions that are also available:</p>
<ul>
<li><code>rec(x)</code>: reciprocal (<code>1.0 ./ x</code>)</li>
<li><code>rsqrt(x)</code>: reciprocal square-root (<code>1.0 ./ sqrt(x)</code>)</li>
<li><code>pow(x,y)</code>: power (<code>x .^ y</code> in Base)</li>
<li><code>fdiv(x,y)</code>: divide (<code>x ./ y</code> in Base)</li>
<li><code>sincos(x)</code>: returns <code>(sin(x), cos(x))</code></li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>To avoid naming conflicts with Base, methods are not exported and so need to
be accessed via the namespace:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AppleAccelerate
<span class="pl-k">using</span> BenchmarkTools
X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1_000_000</span>);
<span class="pl-c1">@btime</span> <span class="pl-c1">exp</span>.(<span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> standard libm function</span>
<span class="pl-c1">@btime</span> AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">exp</span>(<span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> Accelerate array-oriented function</span></pre></div>
<p>The <code>@replaceBase</code> macro replaces the relevant Base methods directly</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>.(<span class="pl-k">$</span>X); <span class="pl-c"><span class="pl-c">#</span> standard libm function</span>
AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">@replaceBase</span> sin cos tan
<span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>(<span class="pl-k">$</span>X);  <span class="pl-c"><span class="pl-c">#</span> will use AppleAccelerate methods for vectorised operations</span>

X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1_000_000</span>);
Y <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">1_000_000</span>);
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>X <span class="pl-k">.^</span> <span class="pl-k">$</span>Y;
AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">@replaceBase</span>(<span class="pl-k">^</span>, <span class="pl-k">/</span>) <span class="pl-c"><span class="pl-c">#</span> use parenthesised form for infix ops</span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>X <span class="pl-k">^</span> <span class="pl-k">$</span>Y;</pre></div>
<p>Output arrays can be specified as first arguments of the functions suffixed
with <code>!</code>:</p>
<div class="highlight highlight-source-julia"><pre>out <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float64, <span class="pl-c1">1_000_000</span>)
<span class="pl-c1">@btime</span> AppleAccelerate<span class="pl-k">.</span><span class="pl-c1">exp!</span>(<span class="pl-k">$</span>out, <span class="pl-k">$</span>X)</pre></div>
<p><strong>Warning</strong>: no dimension checks are performed on the <code>!</code> functions, so ensure
your input and output arrays are of the same length.</p>
<p>Operations can be performed in-place by specifying the output array as the
input array (e.g. <code>AppleAccelerate.exp!(X,X)</code>). This is not mentioned in the
Accelerate docs, but <a href="http://stackoverflow.com/a/28833191/392585" rel="nofollow">this comment</a> by one of the authors indicates that it is safe.</p>
</article></div>