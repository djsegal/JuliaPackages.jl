<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-absynthjl" class="anchor" aria-hidden="true" href="#absynthjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Absynth.jl</h1>
<blockquote>
<p><strong>A</strong>lgebra-<strong>b</strong>ased loop <strong>synth</strong>esizer</p>
</blockquote>
<p>Absynth is a Julia package for synthesizing loops from a given polynomial loop invariant.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ] add Absynth
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Absynth</pre></div>
<p>Absynth makes use of SMT solving at its core. As such you should have an SMT solver like <a href="https://github.com/Z3Prover/z3">Z3</a> or <a href="http://yices.csl.sri.com/" rel="nofollow">Yices</a> installed.</p>
<p>You can check if Absynth can find Z3 or Yices by trying to call the constructor of the solver, that is, <code>Z3()</code> or <code>Yices()</code>. If this does not throw an error, then Z3 and/or Yices are available.</p>
<p>Then we can create a loop invariant which is allowed to be a Boolean combination of polynomial equations.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> inv <span class="pl-k">=</span> <span class="pl-c1">@invariant</span> a <span class="pl-k">==</span> b<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>The result of calling <code>synth</code> is in fact a first-order recurrence system.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> recsys <span class="pl-k">=</span> <span class="pl-c1">synth</span>(inv, solver<span class="pl-k">=</span>Z3)
RecSystem of size <span class="pl-c1">3</span><span class="pl-k">:</span>
  ⎛ <span class="pl-c1">a</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>)  ⎞   ⎛ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">1</span> ⎞⎛ <span class="pl-c1">a</span>(n)  ⎞	⎛ <span class="pl-c1">a</span>(<span class="pl-c1">0</span>)  ⎞   ⎛ <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">16</span> ⎞
  ⎜ <span class="pl-c1">b</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>)  ⎟ <span class="pl-k">=</span> ⎜ <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span> ⎟⎜ <span class="pl-c1">b</span>(n)  ⎟	⎜ <span class="pl-c1">b</span>(<span class="pl-c1">0</span>)  ⎟ <span class="pl-k">=</span> ⎜ <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">4</span> ⎟
  ⎝ <span class="pl-c1">_c</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>) ⎠   ⎝ <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span> ⎠⎝ <span class="pl-c1">_c</span>(n) ⎠	⎝ <span class="pl-c1">_c</span>(<span class="pl-c1">0</span>) ⎠   ⎝ <span class="pl-c1">1</span>     ⎠</pre></div>
<p>We turn the recurrence system into a loop by calling <code>loop(recsys)</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">loop</span>(recsys)
<span class="pl-k">quote</span>
    a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">16</span>
    b <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">4</span>
    <span class="pl-k">while</span> <span class="pl-c1">true</span>
        a <span class="pl-k">=</span> a <span class="pl-k">+</span> <span class="pl-c1">2</span>b <span class="pl-k">+</span> <span class="pl-c1">1</span>
        b <span class="pl-k">=</span> b <span class="pl-k">+</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>