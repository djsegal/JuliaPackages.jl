<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-progenytestingtools" class="anchor" aria-hidden="true" href="#progenytestingtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ProgenyTestingTools</h1>
<p><a href="https://travis-ci.org/masuday/ProgenyTestingTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1febe43c5118f0412e1c3790953ae9aba7d75b04159e490c29d50b4978b715be/68747470733a2f2f7472617669732d63692e6f72672f6d6173756461792f50726f67656e7954657374696e67546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/masuday/ProgenyTestingTools.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>This package helps to perform a simulation for progeny testing, which is (used to be) the standard in livestock breeding. It simulates pedigree-based breeding plans, i.e., BLUP selection. This package can also handle genomic markers if you supply the genotypes (generated by QMSim) in the base population.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ProgenyTestingTools

# genetic parameters
par = PTParameters(50, 100, 0.36, 0, 0, 1.0)

# historical population
hp = generate_population(par,nm=20,nf=20)

# current population
pop = generate_population(par)

# initial bulls and cows
bulls = migrate_from_hp!(hp,pop,random_sampling(hp,2,male=true))
cows = migrate_from_hp!(hp,pop,random_sampling(hp,3,female=true))

# define groups for bulls and cows
mgroup = generate_group(pop, sires=bulls)
fgroup = generate_group(pop, dams=cows)

# mating between groups
mating!(mgroup, fgroup, &quot;fgroup&quot;, method=&quot;dairy_standard_ai&quot;)

# generate phenotypes; only females, no repeated records
assign_phenotype!(fgroup, female=true, repeated=false)

# calving
calving!(fgroup)

# BLUP evaluation
genetic_evaluation!(pop, method=&quot;blup&quot;, repeated=false)

# cull 1 male with the lowest EBV
cull!(pop, selectid([:male]=&gt;x-&gt;x==true, pop, sortby=:ebv, rev=false, limit=1))
"><pre><span class="pl-k">using</span> ProgenyTestingTools

<span class="pl-c"><span class="pl-c">#</span> genetic parameters</span>
par <span class="pl-k">=</span> <span class="pl-c1">PTParameters</span>(<span class="pl-c1">50</span>, <span class="pl-c1">100</span>, <span class="pl-c1">0.36</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1.0</span>)

<span class="pl-c"><span class="pl-c">#</span> historical population</span>
hp <span class="pl-k">=</span> <span class="pl-c1">generate_population</span>(par,nm<span class="pl-k">=</span><span class="pl-c1">20</span>,nf<span class="pl-k">=</span><span class="pl-c1">20</span>)

<span class="pl-c"><span class="pl-c">#</span> current population</span>
pop <span class="pl-k">=</span> <span class="pl-c1">generate_population</span>(par)

<span class="pl-c"><span class="pl-c">#</span> initial bulls and cows</span>
bulls <span class="pl-k">=</span> <span class="pl-c1">migrate_from_hp!</span>(hp,pop,<span class="pl-c1">random_sampling</span>(hp,<span class="pl-c1">2</span>,male<span class="pl-k">=</span><span class="pl-c1">true</span>))
cows <span class="pl-k">=</span> <span class="pl-c1">migrate_from_hp!</span>(hp,pop,<span class="pl-c1">random_sampling</span>(hp,<span class="pl-c1">3</span>,female<span class="pl-k">=</span><span class="pl-c1">true</span>))

<span class="pl-c"><span class="pl-c">#</span> define groups for bulls and cows</span>
mgroup <span class="pl-k">=</span> <span class="pl-c1">generate_group</span>(pop, sires<span class="pl-k">=</span>bulls)
fgroup <span class="pl-k">=</span> <span class="pl-c1">generate_group</span>(pop, dams<span class="pl-k">=</span>cows)

<span class="pl-c"><span class="pl-c">#</span> mating between groups</span>
<span class="pl-c1">mating!</span>(mgroup, fgroup, <span class="pl-s"><span class="pl-pds">"</span>fgroup<span class="pl-pds">"</span></span>, method<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dairy_standard_ai<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> generate phenotypes; only females, no repeated records</span>
<span class="pl-c1">assign_phenotype!</span>(fgroup, female<span class="pl-k">=</span><span class="pl-c1">true</span>, repeated<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> calving</span>
<span class="pl-c1">calving!</span>(fgroup)

<span class="pl-c"><span class="pl-c">#</span> BLUP evaluation</span>
<span class="pl-c1">genetic_evaluation!</span>(pop, method<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blup<span class="pl-pds">"</span></span>, repeated<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> cull 1 male with the lowest EBV</span>
<span class="pl-c1">cull!</span>(pop, <span class="pl-c1">selectid</span>([<span class="pl-c1">:male</span>]<span class="pl-k">=&gt;</span>x<span class="pl-k">-&gt;</span>x<span class="pl-k">==</span><span class="pl-c1">true</span>, pop, sortby<span class="pl-k">=</span><span class="pl-c1">:ebv</span>, rev<span class="pl-k">=</span><span class="pl-c1">false</span>, limit<span class="pl-k">=</span><span class="pl-c1">1</span>))</pre></div>
</article></div>