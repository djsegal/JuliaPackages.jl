<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-regressionformulae" class="anchor" aria-hidden="true" href="#regressionformulae"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RegressionFormulae</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle: experimental" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://kleinschmidt.github.io/RegressionFormulae.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://kleinschmidt.github.io/RegressionFormulae.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kleinschmidt/RegressionFormulae.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8b60fd01cd93c179592160bb726307b292f745833d7230ba88bdeb4984b988c9/68747470733a2f2f636f6465636f762e696f2f67682f6b6c65696e7363686d6964742f52656772657373696f6e466f726d756c61652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/kleinschmidt/RegressionFormulae.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Extended <a href="https://www.github.com/JuliaStats/StatsModels.jl">StatsModels.jl
<code>@formula</code></a> syntax for
regression modeling.</p>
<p dir="auto">Note that the functionality in this package is very new: please verify that the resulting schematized formulae and model coefficient (names) are what you were expecting, especially if you are combining multiple "advanced" formula features.</p>

<h2 dir="auto"><a id="user-content-supported-syntax" class="anchor" aria-hidden="true" href="#supported-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported syntax</h2>
<h3 dir="auto"><a id="user-content-nesting-syntax" class="anchor" aria-hidden="true" href="#nesting-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nesting syntax</h3>
<p dir="auto"><code>a / b</code> expands to <code>a + fulldummy(a) &amp; b</code>.</p>
<p dir="auto">Numeric constants are special cased so that <code>/</code> performs division, making it possible to e.g. convert time to speed in the formula:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fit(MyModelType, @formula(time_in_milliseconds / 1000 ~ 1 + x), my_data)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fit</span>(MyModelType, <span class="pl-c1">@formula</span>(time_in_milliseconds <span class="pl-k">/</span> <span class="pl-c1">1000</span> <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> x), my_data)</pre></div>
<h3 dir="auto"><a id="user-content-raising-terms-to-a-power" class="anchor" aria-hidden="true" href="#raising-terms-to-a-power"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Raising terms to a power</h3>
<p dir="auto">Generate all main effects and interactions up to the specified order.  For
instance, <code>(a+b+c)^2</code> generates <code>a + b + c + a&amp;b + a&amp;c + b&amp;c</code>, but not <code>a&amp;b&amp;c</code>.</p>
<p dir="auto"><strong>NB:</strong> The presence of interaction terms within the base will result in redundant terms and is currently unsupported.</p>
<h2 dir="auto"><a id="user-content-approach" class="anchor" aria-hidden="true" href="#approach"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Approach</h2>
<p dir="auto">Extended syntax is supported at two levels.  First, RegressionFormulae.jl
defines <code>apply_schema</code> methods that capture calls within a <code>@formula</code> to the
special syntax (<code>^</code>, <code>/</code>, etc.).  Second, we define methods for the
corresponding functions in <code>Base</code> (<code>Base.:(^)</code>, <code>Base.:(/)</code>, etc.) for arguments
that are <code>&lt;:AbstractTerm</code> which implement the special behavior, returning the
appropriate terms.  This allows the syntax to be used both within a <code>@formula</code>
and for constructing terms programmatically at run-time.</p>
<p dir="auto">If using <code>apply_schema</code> directly, please note that you need to pass an appropriate model type as context.
Currently, the extensions here are defined for <a href="https://github.com/JuliaStats/StatsAPI.jl/blob/main/src/regressionmodel.jl"><code>StatsAPI.RegressionModel</code></a> and subtypes:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f = apply_schema(f, s, RegressionModel)"><pre>f <span class="pl-k">=</span> <span class="pl-c1">apply_schema</span>(f, s, RegressionModel)</pre></div>
</article></div>