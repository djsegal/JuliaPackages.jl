<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-restacker-put-immutables-back-in-the-stack" class="anchor" aria-hidden="true" href="#restacker-put-immutables-back-in-the-stack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Restacker: put immutables back in the stack</h1>
<p><a href="https://github.com/tkf/ThreadsX.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/tkf/ThreadsX.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>In Julia (as of 1.4) immutable objects containing heap-allocated
objects <em>may not</em> be stack-allocated sometimes⁽¹⁾ and that's why using
something like <code>view</code> can degrade performance substantially.
Restacker.jl provides an API</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="immutable_object = restack(immutable_object)
"><pre><code>immutable_object = restack(immutable_object)
</code></pre></div>
<p>to put <code>immutable_object</code> in the stack and avoid this performance
pitfall.</p>
<p>⁽¹⁾ It seems that this tends to happen when such an object crosses
non-inlined function call boundaries. See also
<a href="https://stackoverflow.com/a/47607539" rel="nofollow">this in-depth StackOverflow answer by Tim Holy</a>,
<a href="https://discourse.julialang.org/t/stack-allocation-for-structs-with-heap-references/2293" rel="nofollow">this</a>
and
<a href="https://discourse.julialang.org/t/immutables-with-reference-fields-why-boxed/7706" rel="nofollow">this</a>
discussions in Discourse and also this old PR
<a href="https://github.com/JuliaLang/julia/pull/18632">JuliaLang/julia#18632</a>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Consider simple computation kernel</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@noinline function f!(ys, xs)
    @inbounds for i in eachindex(ys, xs)
        x = xs[i]
        if -0.5 &lt; x &lt; 0.5
            ys[i] = 2x
        end
    end
end
"><pre><span class="pl-c1">@noinline</span> <span class="pl-k">function</span> <span class="pl-en">f!</span>(ys, xs)
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(ys, xs)
        x <span class="pl-k">=</span> xs[i]
        <span class="pl-k">if</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span> <span class="pl-k">&lt;</span> x <span class="pl-k">&lt;</span> <span class="pl-c1">0.5</span>
            ys[i] <span class="pl-k">=</span> <span class="pl-c1">2</span>x
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>This works great with raw-<code>Array</code> but the performance with <code>view</code>ed
array is not great:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools

julia&gt; xs = randn(10_000);

julia&gt; @benchmark f!($(zero(xs)), $xs)
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     1.989 μs (0.00% GC)
  median time:      2.033 μs (0.00% GC)
  mean time:        2.189 μs (0.00% GC)
  maximum time:     6.785 μs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     10

julia&gt; @benchmark f!($(view(zero(xs), :)), $(view(xs, :)))
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     47.223 μs (0.00% GC)
  median time:      49.227 μs (0.00% GC)
  mean time:        51.072 μs (0.00% GC)
  maximum time:     133.803 μs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">f!</span>(<span class="pl-k">$</span>(<span class="pl-c1">zero</span>(xs)), <span class="pl-k">$</span>xs)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">1.989</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">2.033</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">2.189</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">6.785</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">f!</span>(<span class="pl-k">$</span>(<span class="pl-c1">view</span>(<span class="pl-c1">zero</span>(xs), :)), <span class="pl-k">$</span>(<span class="pl-c1">view</span>(xs, :)))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">47.223</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">49.227</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">51.072</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">133.803</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span></pre></div>
<p>It turned out that <code>restack</code>ing the destination array <code>ys</code> is enough
to fix the problem in <code>f!</code> above:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Restacker

@noinline function g!(ys, xs)
    ys = restack(ys)
    @inbounds for i in eachindex(ys, xs)
        x = xs[i]
        if -0.5 &lt; x &lt; 0.5
            ys[i] = 2x
        end
    end
end
"><pre><span class="pl-k">using</span> Restacker

<span class="pl-c1">@noinline</span> <span class="pl-k">function</span> <span class="pl-en">g!</span>(ys, xs)
    ys <span class="pl-k">=</span> <span class="pl-c1">restack</span>(ys)
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(ys, xs)
        x <span class="pl-k">=</span> xs[i]
        <span class="pl-k">if</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span> <span class="pl-k">&lt;</span> x <span class="pl-k">&lt;</span> <span class="pl-c1">0.5</span>
            ys[i] <span class="pl-k">=</span> <span class="pl-c1">2</span>x
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Calling this function on <code>view</code> is now as fast as the raw-<code>Vector</code>
version:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @benchmark g!($(view(zero(xs), :)), $(view(xs, :)))
BenchmarkTools.Trial:
  memory estimate:  48 bytes
  allocs estimate:  1
  --------------
  minimum time:     2.021 μs (0.00% GC)
  median time:      2.097 μs (0.00% GC)
  mean time:        2.265 μs (0.00% GC)
  maximum time:     6.663 μs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     10
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">g!</span>(<span class="pl-k">$</span>(<span class="pl-c1">view</span>(<span class="pl-c1">zero</span>(xs), :)), <span class="pl-k">$</span>(<span class="pl-c1">view</span>(xs, :)))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">48</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">1</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">2.021</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">2.097</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">2.265</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">6.663</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">10</span></pre></div>
<p>Notice the slight increase in the memory consumption.  This is because
<code>restack</code> re-creates the object in the stack.</p>
<p>See more examples in
<a href="https://github.com/tkf/Restacker.jl/tree/master/benchmark"><code>benchmark/</code></a>
directory.</p>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it works</h2>
<p>Consider an immutable type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct ABC{A,B,C}
    a::A
    b::B
    c::C
end
"><pre><span class="pl-k">struct</span> ABC{A,B,C}
    a<span class="pl-k">::</span><span class="pl-c1">A</span>
    b<span class="pl-k">::</span><span class="pl-c1">B</span>
    c<span class="pl-k">::</span><span class="pl-c1">C</span>
<span class="pl-k">end</span></pre></div>
<p>Then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="abc = restack(abc)
"><pre>abc <span class="pl-k">=</span> <span class="pl-c1">restack</span>(abc)</pre></div>
<p>is equivalent to</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="abc = ABC(
    restack(abc.a),
    restack(abc.b),
    restack(abc.c),
)
"><pre>abc <span class="pl-k">=</span> <span class="pl-c1">ABC</span>(
    <span class="pl-c1">restack</span>(abc<span class="pl-k">.</span>a),
    <span class="pl-c1">restack</span>(abc<span class="pl-k">.</span>b),
    <span class="pl-c1">restack</span>(abc<span class="pl-k">.</span>c),
)</pre></div>
<p>For mutable object like <code>x :: Array</code>, <code>restack</code> return the input as-is.</p>
<p>In general, <code>restack</code> is an identity function such that</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="restack(x) === x
"><pre><span class="pl-c1">restack</span>(x) <span class="pl-k">===</span> x</pre></div>
<p>Notice the triple-equality <code>===</code>.  It means that <code>restack</code> does not
change the behavior of the program while it may benefit run-time
performance by sacrificing the memory consumption (slightly) and
compile-time.</p>
<p>(Side notes: There is an even more experimental function
<code>Restacker.unsafe_restack</code> to re-construct <code>mutable struct</code> as well.
This is unsafe because it breaks the identity (<code>===</code>) and breaks the
assumption of the code relying on <code>finalize</code>.)</p>
<p>Under the hood, <code>restack</code> on <code>struct</code> types work by directly invoking
the
<a href="https://docs.julialang.org/en/latest/devdocs/ast/#Expr-types-1" rel="nofollow"><code>new</code> expression</a>.
This skips evaluating user-defined constructors and minimizes the
run-time overhead.</p>
</article></div>