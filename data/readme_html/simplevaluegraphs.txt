<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplevaluegraphsjl" class="anchor" aria-hidden="true" href="#simplevaluegraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleValueGraphs.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/SimpleValueGraphs/aub6U" rel="nofollow"><img src="https://camo.githubusercontent.com/df9729ba63ce1ced104093bfe612d2d7f0bd9445f368a4a885c08c0151e5bbad/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53696d706c6556616c75654772617068732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/SimpleValueGraphs/version.svg" style="max-width:100%;"></a>
<a href="https://simonschoelly.github.io/SimpleValueGraphs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://simonschoelly.github.io/SimpleValueGraphs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/simonschoelly/SimpleValueGraphs.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/simonschoelly/SimpleValueGraphs.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/simonschoelly/SimpleValueGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/17db38ae93103e43d0d136d9a7a95c64fd4e5fcce7b5649ad8072e0854ca47d9/68747470733a2f2f636f6465636f762e696f2f67682f73696d6f6e7363686f656c6c792f53696d706c6556616c75654772617068732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/simonschoelly/SimpleValueGraphs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://julialang.zulipchat.com/#narrow/stream/228745-graphs" rel="nofollow"><img src="https://camo.githubusercontent.com/8059194a37ae9fcd6b0ee4f44a4389b92653122d67c3e2fee37ca25e737401aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d5a756c69702532336772617068732d79656c6c6f77" alt="" data-canonical-src="https://img.shields.io/badge/chat-Zulip%23graphs-yellow" style="max-width:100%;"></a></p>
<p>SimpleValueGraphs is as <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a> compatible package for graphs with multiple, homogeneous vertex, edge and graph metadata. In particular it provides:</p>
<ul>
<li>an abstract interface for graphs with metadata</li>
<li>concrete implementations of mutable graphs with metadata</li>
</ul>
<p>Compared to <a href="https://github.com/JuliaGraphs/SimpleWeightedGraphs.jl">SimpleWeightedGraphs.jl</a> it has the following advantages:</p>
<ul>
<li>vertex and graph metadata</li>
<li>multiple edge metadata</li>
<li>faster structural modifications of graphs</li>
</ul>
<p>Compared to <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs.jl</a> it has the following advantages:</p>
<ul>
<li>faster access and modifications of metadata</li>
<li>better type stability when accessing metadata</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SimpleValueGraphs

using LightGraphs: smallgraph
using Plots
using GraphRecipes: graphplot
using Colors: RGB, Color

# Load a LightGraphs.SimpleGraph
gs = smallgraph(:house)

# Convert to a ValGraph with vertex and edge values
gv = ValGraph(gs;
    # Two names vertex values:
    # - color: A random color
    # - label: The vertex identifier as a string
    vertexval_types=(color=Color, label=String),
    vertexval_init=v -&gt; (rand(RGB), string(v)),
    # One unnamed edge value:
    # A string s -- d from source to destination of each edge
    edgeval_types=(String, ),
    edgeval_init=(s, d) -&gt; (&quot;$s -- $d&quot;,)
)

# Plot this graph using the vertex and edge values
graphplot(gv;
    nodecolor = [get_vertexval(gv, v, :color) for v in vertices(gv)],
    names = [get_vertexval(gv, v, :label) for v in vertices(gv)],
    edgelabel=weights(gv; zerovalue=&quot;&quot;)
)
"><pre><span class="pl-k">using</span> SimpleValueGraphs

<span class="pl-k">using</span> LightGraphs<span class="pl-k">:</span> smallgraph
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> GraphRecipes<span class="pl-k">:</span> graphplot
<span class="pl-k">using</span> Colors<span class="pl-k">:</span> RGB, Color

<span class="pl-c"><span class="pl-c">#</span> Load a LightGraphs.SimpleGraph</span>
gs <span class="pl-k">=</span> <span class="pl-c1">smallgraph</span>(<span class="pl-c1">:house</span>)

<span class="pl-c"><span class="pl-c">#</span> Convert to a ValGraph with vertex and edge values</span>
gv <span class="pl-k">=</span> <span class="pl-c1">ValGraph</span>(gs;
    <span class="pl-c"><span class="pl-c">#</span> Two names vertex values:</span>
    <span class="pl-c"><span class="pl-c">#</span> - color: A random color</span>
    <span class="pl-c"><span class="pl-c">#</span> - label: The vertex identifier as a string</span>
    vertexval_types<span class="pl-k">=</span>(color<span class="pl-k">=</span>Color, label<span class="pl-k">=</span>String),
    vertexval_init<span class="pl-k">=</span>v <span class="pl-k">-&gt;</span> (<span class="pl-c1">rand</span>(RGB), <span class="pl-c1">string</span>(v)),
    <span class="pl-c"><span class="pl-c">#</span> One unnamed edge value:</span>
    <span class="pl-c"><span class="pl-c">#</span> A string s -- d from source to destination of each edge</span>
    edgeval_types<span class="pl-k">=</span>(String, ),
    edgeval_init<span class="pl-k">=</span>(s, d) <span class="pl-k">-&gt;</span> (<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$s</span> -- <span class="pl-v">$d</span><span class="pl-pds">"</span></span>,)
)

<span class="pl-c"><span class="pl-c">#</span> Plot this graph using the vertex and edge values</span>
<span class="pl-c1">graphplot</span>(gv;
    nodecolor <span class="pl-k">=</span> [<span class="pl-c1">get_vertexval</span>(gv, v, <span class="pl-c1">:color</span>) <span class="pl-k">for</span> v <span class="pl-k">in</span> <span class="pl-c1">vertices</span>(gv)],
    names <span class="pl-k">=</span> [<span class="pl-c1">get_vertexval</span>(gv, v, <span class="pl-c1">:label</span>) <span class="pl-k">for</span> v <span class="pl-k">in</span> <span class="pl-c1">vertices</span>(gv)],
    edgelabel<span class="pl-k">=</span><span class="pl-c1">weights</span>(gv; zerovalue<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/simonschoelly/SimpleValueGraphs.jl/blob/master/docs/assets/readme-example-output.png"><img src="https://github.com/simonschoelly/SimpleValueGraphs.jl/raw/master/docs/assets/readme-example-output.png" alt="example output" style="max-width:100%;"></a></p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>This is a comparison of running <code>LightGraphs.dijkstra_shortest_paths</code> on the <a href="https://snap.stanford.edu/data/egonets-Facebook.html" rel="nofollow">egonets-Facebook</a> graph for multiple graph types.</p>
<table>
<thead>
<tr>
<th>graph type</th>
<th>time (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>LightGraphs.SimpleGraph + Matrix weights</td>
<td>6.5</td>
</tr>
<tr>
<td>LightGraphs.SimpleGraph + SparseMatrixCSC weights</td>
<td>11.4</td>
</tr>
<tr>
<td>SimpleWeightedGraphs.SimpleWeightedGraph</td>
<td>11.7</td>
</tr>
<tr>
<td>MetaGraphs.MetaGraph</td>
<td>141.9</td>
</tr>
<tr>
<td>SimpleValueGraphs.ValGraph</td>
<td>12.4</td>
</tr>
</tbody>
</table>
<p>Currently a lot of LightGraphs algorithm do not optimally work with graphs that store edge metadata
internally. The next benchmark is an optimized version of the same algorithm that can be found
in <code>SimpleValueGraphs.Experimental.dijkstra_shortests_pasts</code>. Clearly, this is a huge improvement for
<code>ValGraph</code> and <code>SimpleWeightedGraph</code>.</p>
<table>
<thead>
<tr>
<th>graph type</th>
<th>time (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>LightGraphs.SimpleGraph + Matrix weights</td>
<td>6.8</td>
</tr>
<tr>
<td>LightGraphs.SimpleGraph + SparseMatrixCSC weights</td>
<td>10.8</td>
</tr>
<tr>
<td>SimpleWeightedGraphs.SimpleWeightedGraph</td>
<td>2.9</td>
</tr>
<tr>
<td>MetaGraphs.MetaGraph</td>
<td>147.3</td>
</tr>
<tr>
<td>SimpleValueGraphs.ValGraph</td>
<td>3.1</td>
</tr>
</tbody>
</table>
</article></div>