<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-vlasiatormakiejl" class="anchor" aria-hidden="true" href="#vlasiatormakiejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VlasiatorMakie.jl</h1>
<p dir="auto"><a href="https://github.com/henry2004y/VlasiatorMakie.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/henry2004y/VlasiatorMakie.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/henry2004y/VlasiatorMakie.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6aead34a68f1483884535bd2997fc9ad091687f35670fa668a58bebb3c9fb00b/68747470733a2f2f636f6465636f762e696f2f67682f68656e727932303034792f566c61736961746f724d616b69652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/henry2004y/VlasiatorMakie.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Makie recipes for visualization of <a href="https://github.com/henry2004y/Vlasiator.jl.git">Vlasiator.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add VlasiatorMakie"><pre>] add VlasiatorMakie</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Both simple type conversion recipes for 1D and 2D data and full recipes for customized and interactive plots are provided.
See more example outputs in <a href="https://henry2004y.github.io/Vlasiator.jl/dev/gallery/#Makie" rel="nofollow">Vlasiator gallery</a> and detailed usages in the <a href="https://henry2004y.github.io/Vlasiator.jl/dev/manual/#Makie-Backend" rel="nofollow">manual</a> and test scripts. Due to the current limitation of the full recipes from Makie, it is recommended to work with the simpler type recipes, i.e. identical plotting functions as in Makie but with the first two arguments being <code>meta</code> and <code>var</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Vlasiator, VlasiatorMakie, GLMakie

file = &quot;bulk.0000001.vlsv&quot;
meta = load(file)

heatmap(meta, &quot;proton/vg_rho&quot;)"><pre><span class="pl-k">using</span> Vlasiator, VlasiatorMakie, GLMakie

file <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>bulk.0000001.vlsv<span class="pl-pds">"</span></span>
meta <span class="pl-k">=</span> <span class="pl-c1">load</span>(file)

<span class="pl-c1">heatmap</span>(meta, <span class="pl-s"><span class="pl-pds">"</span>proton/vg_rho<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">3D isosurface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fig = volume(meta, &quot;fg_b&quot;, EARTH, 3; algorithm=:iso, isovalue=0.0, isorange=1e-9)"><pre>fig <span class="pl-k">=</span> <span class="pl-c1">volume</span>(meta, <span class="pl-s"><span class="pl-pds">"</span>fg_b<span class="pl-pds">"</span></span>, EARTH, <span class="pl-c1">3</span>; algorithm<span class="pl-k">=</span><span class="pl-c1">:iso</span>, isovalue<span class="pl-k">=</span><span class="pl-c1">0.0</span>, isorange<span class="pl-k">=</span><span class="pl-c1">1e-9</span>)</pre></div>
<p dir="auto">Single figure contour plot:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fig = Figure(resolution=(700, 600), fontsize=18)
ga = fig[1,1] = GridLayout()
ax = Axis(fig[1,1],
   aspect = DataAspect(),
   title = &quot;t = $(round(meta.time, digits=1))s&quot;,
   xlabel = L&quot;x [$R_E$]&quot;,
   ylabel = L&quot;y [$R_E$]&quot;
)
hmap = heatmap!(meta, &quot;proton/vg_rho&quot;, colormap=:turbo)
cbar = Colorbar(fig, hmap, label=L&quot;$\rho$ [amu/cc]&quot;, width=13,
                ticksize=13, tickalign=1, height=Relative(1))
fig[1,2] = cbar
colgap!(ga, 1)"><pre>fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>(resolution<span class="pl-k">=</span>(<span class="pl-c1">700</span>, <span class="pl-c1">600</span>), fontsize<span class="pl-k">=</span><span class="pl-c1">18</span>)
ga <span class="pl-k">=</span> fig[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">GridLayout</span>()
ax <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],
   aspect <span class="pl-k">=</span> <span class="pl-c1">DataAspect</span>(),
   title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>t = <span class="pl-v">$(<span class="pl-c1">round</span>(meta<span class="pl-k">.</span>time, digits<span class="pl-k">=</span><span class="pl-c1">1</span>))</span>s<span class="pl-pds">"</span></span>,
   xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x [$R_E$]<span class="pl-pds">"</span></span>,
   ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>y [$R_E$]<span class="pl-pds">"</span></span>
)
hmap <span class="pl-k">=</span> <span class="pl-c1">heatmap!</span>(meta, <span class="pl-s"><span class="pl-pds">"</span>proton/vg_rho<span class="pl-pds">"</span></span>, colormap<span class="pl-k">=</span><span class="pl-c1">:turbo</span>)
cbar <span class="pl-k">=</span> <span class="pl-c1">Colorbar</span>(fig, hmap, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>$<span class="pl-cce">\r</span>ho$ [amu/cc]<span class="pl-pds">"</span></span>, width<span class="pl-k">=</span><span class="pl-c1">13</span>,
                ticksize<span class="pl-k">=</span><span class="pl-c1">13</span>, tickalign<span class="pl-k">=</span><span class="pl-c1">1</span>, height<span class="pl-k">=</span><span class="pl-c1">Relative</span>(<span class="pl-c1">1</span>))
fig[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> cbar
<span class="pl-c1">colgap!</span>(ga, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">Multi-figure contour plots:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fig = Figure(resolution=(1100, 800), fontsize=18)

axes = []
v_str = [&quot;CellID&quot;, &quot;proton/vg_rho&quot;, &quot;proton/vg_v&quot;,
   &quot;vg_pressure&quot;, &quot;vg_b_vol&quot;, &quot;vg_e_vol&quot;]
c_str = [&quot;&quot;, L&quot;$\rho$ [amu/cc]&quot;, &quot;[m/s]&quot;, &quot;[Pa]&quot;, &quot;[T]&quot;, &quot;[V/m]&quot;]
c = 1

for i in 1:2, j in 1:2:5
   ax = Axis(fig[i,j], aspect=DataAspect(),
      xgridvisible=false, ygridvisible=false,
      title = v_str[c],
      xlabel = L&quot;x [$R_E$]&quot;,
      ylabel = L&quot;y [$R_E$]&quot;)
   hmap = heatmap!(meta, v_str[c], colormap=:turbo)
   cbar = Colorbar(fig, hmap, label=c_str[c], width=13,
                ticksize=13, tickalign=1, height=Relative(1))
   fig[i, j+1] = cbar
   c += 1
   push!(axes, ax) # just in case you need them later.
end

fig[0, :] = Label(fig, &quot;t = $(round(meta.time, digits=1))s&quot;)"><pre>fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>(resolution<span class="pl-k">=</span>(<span class="pl-c1">1100</span>, <span class="pl-c1">800</span>), fontsize<span class="pl-k">=</span><span class="pl-c1">18</span>)

axes <span class="pl-k">=</span> []
v_str <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>CellID<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>proton/vg_rho<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>proton/vg_v<span class="pl-pds">"</span></span>,
   <span class="pl-s"><span class="pl-pds">"</span>vg_pressure<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>vg_b_vol<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>vg_e_vol<span class="pl-pds">"</span></span>]
c_str <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>$<span class="pl-cce">\r</span>ho$ [amu/cc]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[m/s]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[Pa]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[T]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[V/m]<span class="pl-pds">"</span></span>]
c <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>
   ax <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(fig[i,j], aspect<span class="pl-k">=</span><span class="pl-c1">DataAspect</span>(),
      xgridvisible<span class="pl-k">=</span><span class="pl-c1">false</span>, ygridvisible<span class="pl-k">=</span><span class="pl-c1">false</span>,
      title <span class="pl-k">=</span> v_str[c],
      xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x [$R_E$]<span class="pl-pds">"</span></span>,
      ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>y [$R_E$]<span class="pl-pds">"</span></span>)
   hmap <span class="pl-k">=</span> <span class="pl-c1">heatmap!</span>(meta, v_str[c], colormap<span class="pl-k">=</span><span class="pl-c1">:turbo</span>)
   cbar <span class="pl-k">=</span> <span class="pl-c1">Colorbar</span>(fig, hmap, label<span class="pl-k">=</span>c_str[c], width<span class="pl-k">=</span><span class="pl-c1">13</span>,
                ticksize<span class="pl-k">=</span><span class="pl-c1">13</span>, tickalign<span class="pl-k">=</span><span class="pl-c1">1</span>, height<span class="pl-k">=</span><span class="pl-c1">Relative</span>(<span class="pl-c1">1</span>))
   fig[i, j<span class="pl-k">+</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> cbar
   c <span class="pl-k">+=</span> <span class="pl-c1">1</span>
   <span class="pl-c1">push!</span>(axes, ax) <span class="pl-c"><span class="pl-c">#</span> just in case you need them later.</span>
<span class="pl-k">end</span>

fig[<span class="pl-c1">0</span>, :] <span class="pl-k">=</span> <span class="pl-c1">Label</span>(fig, <span class="pl-s"><span class="pl-pds">"</span>t = <span class="pl-v">$(<span class="pl-c1">round</span>(meta<span class="pl-k">.</span>time, digits<span class="pl-k">=</span><span class="pl-c1">1</span>))</span>s<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Adjusting axis limits:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="location = [0, 0, 0]
fig = VlasiatorMakie.vdfslice(meta, location)
xlims!(fig.content[1], -1000, 1000)
ylims!(fig.content[1], -1000, 1000)
limits!(fig.content[1], 0, 10, 0, 10) # xmin, xmax, ymin, ymax"><pre>location <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
fig <span class="pl-k">=</span> VlasiatorMakie<span class="pl-k">.</span><span class="pl-c1">vdfslice</span>(meta, location)
<span class="pl-c1">xlims!</span>(fig<span class="pl-k">.</span>content[<span class="pl-c1">1</span>], <span class="pl-k">-</span><span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>)
<span class="pl-c1">ylims!</span>(fig<span class="pl-k">.</span>content[<span class="pl-c1">1</span>], <span class="pl-k">-</span><span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>)
<span class="pl-c1">limits!</span>(fig<span class="pl-k">.</span>content[<span class="pl-c1">1</span>], <span class="pl-c1">0</span>, <span class="pl-c1">10</span>, <span class="pl-c1">0</span>, <span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> xmin, xmax, ymin, ymax</span></pre></div>
<p dir="auto">Saving figure:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fig = vdfvolume(meta, location)
save(&quot;output.png&quot;, fig)"><pre>fig <span class="pl-k">=</span> <span class="pl-c1">vdfvolume</span>(meta, location)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p dir="auto">The resolution is a property of the Figure object returned from the function.</p>
</article></div>