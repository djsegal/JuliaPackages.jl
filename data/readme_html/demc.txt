<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-demc---differential-evolution-markov-chain-monte-carlo" class="anchor" aria-hidden="true" href="#demc---differential-evolution-markov-chain-monte-carlo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DEMC - Differential Evolution Markov Chain Monte Carlo</h1>
<p><a href="https://chrished.github.io/DEMC.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/chrished/DEMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62e115ff72f9aec36514f441ac96b22872a2fde201c49fdd2f47a3a4fdf1d22d/68747470733a2f2f7472617669732d63692e636f6d2f63687269736865642f44454d432e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/chrished/DEMC.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chrished/DEMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ef8c8287f04142a8fe09de741204e493c1d33ba0bfdbf307de41634ebc2af8ee/68747470733a2f2f636f6465636f762e696f2f67682f63687269736865642f44454d432e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/chrished/DEMC.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/chrished/DEMC.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/795aab1c05606e44319906e92476903e2f48b60bae3e8c90e670e98492c245ae/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63687269736865642f44454d432e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/chrished/DEMC.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<ul>
<li>implementation of the "DEMCz"  algorithm proposed in Ter Braak and Vrugt (2008)</li>
</ul>
<h2><a id="user-content-use-cases" class="anchor" aria-hidden="true" href="#use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use Cases</h2>
<ul>
<li>
<p>useful for simulating distributions that are <strong>not easily differentiable</strong>, have moderate dimensionality (&gt;1, &lt;5?), and dimensions are potentially <strong>highly correlated</strong>. One example is to simulate parameter distributions in indirect inference estimators.</p>
</li>
<li>
<p>moderate dimensionality is somewhat unclear, tests work alright with 10-20 dimensions, but behavior deteriorates. See <a href="https://mc-stan.org/users/documentation/case-studies/curse-dims.html" rel="nofollow">https://mc-stan.org/users/documentation/case-studies/curse-dims.html</a></p>
</li>
</ul>
<h2><a id="user-content-sample-usage" class="anchor" aria-hidden="true" href="#sample-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Distributions
using DEMC

μ = zeros(5)
A = rand(5,5)
Σ = A'*A
distr = MvNormal(μ, Σ)
logobj(mean) = logpdf(distr, mean)
Zinit = rand(distr, 100)'
# sample from distr using standard options
opts = DEMC.demcopt(ndim)
mc, Z = DEMC.demcz_sample(logobj, Zinit, opts)
# see tests for further examples (also annealing and parallel)

# options you can set
# fieldnames(typeof(opts))
# :N - number of chains
# :K - add current draw to Z every K steps
# :Ngeneration - total number of steps
# :Nblocks - number of blocks
# :blockindex - subset of parameters in each block
# :eps_scale - scale of random draw around DE step
# :γ - scale of DE step (2.38 for normal distribution)
# :verbose - print avg value and avg parameters of chain  
# :print_step - print every ... steps
# :T0 - initial temperature (only for annealing)
# :TN - final temperature (only for annealing)
# :autostop - :Rhat is only possibility so far (stop when Gelman-Rubin Rhat falls below a threshold)
# :autostop_every - checks autostop criterion every autostop_every generations (only for serial computation, in parallel mode checks when chains sync
# :autostop_Rhat - maximum Rhat to trigger autostop (should be close to 1, e.g. below 1.1)

"><pre><span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> DEMC

μ <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">5</span>)
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)
Σ <span class="pl-k">=</span> A<span class="pl-k">'</span><span class="pl-k">*</span>A
distr <span class="pl-k">=</span> <span class="pl-c1">MvNormal</span>(μ, Σ)
<span class="pl-en">logobj</span>(mean) <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(distr, mean)
Zinit <span class="pl-k">=</span> <span class="pl-c1">rand</span>(distr, <span class="pl-c1">100</span>)<span class="pl-k">'</span>
<span class="pl-c"><span class="pl-c">#</span> sample from distr using standard options</span>
opts <span class="pl-k">=</span> DEMC<span class="pl-k">.</span><span class="pl-c1">demcopt</span>(ndim)
mc, Z <span class="pl-k">=</span> DEMC<span class="pl-k">.</span><span class="pl-c1">demcz_sample</span>(logobj, Zinit, opts)
<span class="pl-c"><span class="pl-c">#</span> see tests for further examples (also annealing and parallel)</span>

<span class="pl-c"><span class="pl-c">#</span> options you can set</span>
<span class="pl-c"><span class="pl-c">#</span> fieldnames(typeof(opts))</span>
<span class="pl-c"><span class="pl-c">#</span> :N - number of chains</span>
<span class="pl-c"><span class="pl-c">#</span> :K - add current draw to Z every K steps</span>
<span class="pl-c"><span class="pl-c">#</span> :Ngeneration - total number of steps</span>
<span class="pl-c"><span class="pl-c">#</span> :Nblocks - number of blocks</span>
<span class="pl-c"><span class="pl-c">#</span> :blockindex - subset of parameters in each block</span>
<span class="pl-c"><span class="pl-c">#</span> :eps_scale - scale of random draw around DE step</span>
<span class="pl-c"><span class="pl-c">#</span> :γ - scale of DE step (2.38 for normal distribution)</span>
<span class="pl-c"><span class="pl-c">#</span> :verbose - print avg value and avg parameters of chain  </span>
<span class="pl-c"><span class="pl-c">#</span> :print_step - print every ... steps</span>
<span class="pl-c"><span class="pl-c">#</span> :T0 - initial temperature (only for annealing)</span>
<span class="pl-c"><span class="pl-c">#</span> :TN - final temperature (only for annealing)</span>
<span class="pl-c"><span class="pl-c">#</span> :autostop - :Rhat is only possibility so far (stop when Gelman-Rubin Rhat falls below a threshold)</span>
<span class="pl-c"><span class="pl-c">#</span> :autostop_every - checks autostop criterion every autostop_every generations (only for serial computation, in parallel mode checks when chains sync</span>
<span class="pl-c"><span class="pl-c">#</span> :autostop_Rhat - maximum Rhat to trigger autostop (should be close to 1, e.g. below 1.1)</span>
</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., &amp; Rubin, D. B. (2014). Bayesian data analysis (Vol. 2). Boca Raton, FL: CRC press.</p>
<p>Ter Braak, Cajo JF (2006). A Markov Chain Monte Carlo version of the genetic algorithm Differential Evolution: easy Bayesian computing for real parameter spaces. Statistics and Computing, 16(3), 239-249.</p>
<p>ter Braak, Cajo JF, and Jasper A. Vrugt. "Differential evolution Markov chain with snooker updater and fewer chains." Statistics and Computing 18.4 (2008): 435-446.</p>
</article></div>