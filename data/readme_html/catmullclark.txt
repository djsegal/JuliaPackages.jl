<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-catmullclarkjl" class="anchor" aria-hidden="true" href="#catmullclarkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CatmullClark.jl</h1>
<p dir="auto"><a href="https://ci.appveyor.com/project/wherrera10/CatmullClark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f00699260237e4a22954b178ff760dc70fdcaeefea522ace1bb9044e9122019c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f636677367065303372666e3971736f6f3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/cfw6pe03rfn9qsoo?svg=true" style="max-width: 100%;"></a>
<a href="https://travis-ci.comg/wherrera10/CatmullClark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e2bf427be29d7997ad2831bba048f4c208dae6353c89d4a0a1051d7428d225d/68747470733a2f2f7472617669732d63692e636f6d2f776865727265726131302f4361746d756c6c436c61726b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/wherrera10/CatmullClark.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/wherrera10/CatmullClark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d88b9dc3847af2d7bd654805abb37bdf89ec100d13bc34dffede378b0f5b748f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f776865727265726131302f4361746d756c6c436c61726b2e6a6c2f62616467652e7376673f736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/wherrera10/CatmullClark.jl/badge.svg?service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/wherrera10/CatmullClark.jl/blob/master/docs/src/donut.png"><img src="https://github.com/wherrera10/CatmullClark.jl/raw/master/docs/src/donut.png" style="max-width: 100%;"></a></p>
<p dir="auto">Julia graphics package for 3D surface smoothing using the Catmull-Clark subdivision algorithm.</p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Face = Vector{Point3f0}"><pre class="notranslate"><code>Face = Vector{Point3f0}
</code></pre></div>
<p dir="auto"><code>Point3f0</code> is a 3-tuple of 32-bit floats for 3-dimensional space, and all <code>Point</code>s are 3D.
A <code>Face</code> is defined by the points that are its vertices, in order.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="struct Edge
    p1::Point3f0
    p2::Point3f0
    Edge(a, b) = new(min(a, b), max(a, b))
end"><pre class="notranslate"><code>struct Edge
    p1::Point3f0
    p2::Point3f0
    Edge(a, b) = new(min(a, b), max(a, b))
end
</code></pre></div>
<p dir="auto">An <code>Edge</code> is a line segment where the two <code>Point</code>s are sorted.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="const colors = [:red, :green, :blue, :gold]
const iterconfig = [0, length(colors), Scene()]"><pre class="notranslate"><code>const colors = [:red, :green, :blue, :gold]
const iterconfig = [0, length(colors), Scene()]
</code></pre></div>
<p dir="auto"><br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="catmullclarkstep(faces)"><pre class="notranslate"><code>catmullclarkstep(faces)
</code></pre></div>
<p dir="auto">Perform a single step of Catmull-Clark subdivision of a surface. See Wikipedia or page 53
of <a href="http://graphics.stanford.edu/courses/cs468-10-fall/LectureSlides/10_Subdivision.pdf" rel="nofollow">http://graphics.stanford.edu/courses/cs468-10-fall/LectureSlides/10_Subdivision.pdf</a>
The <code>faces</code> argument is a <code>Vector{Face}</code> of all the faces of the 3D object's surface.
Returns: a set of the new faces, usually a 4 times larger vector of smaller faces.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="catmullclark(faces, iters, callback=(x)-&gt;0)"><pre class="notranslate"><code>catmullclark(faces, iters, callback=(x)-&gt;0)
</code></pre></div>
<p dir="auto">Perform a multistep Catmull-Clark subdivision of a surface.
Does <code>iters</code> iterations (steps). Will call a callback function
with the results of each iteration (step) if one is provided.
Returns: the faces of the final result.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="drawfaces(faces, colr)"><pre class="notranslate"><code>drawfaces(faces, colr)
</code></pre></div>
<p dir="auto">Draw a set of <code>Faces</code> using color <code>colr</code> and <code>Makie</code>.
Place this in a new <code>Scene</code> (a new output window).
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="drawfaces!(faces, colr)"><pre class="notranslate"><code>drawfaces!(faces, colr)
</code></pre></div>
<p dir="auto">Draw a set of <code>Faces</code> using color <code>colr</code> and <code>Makie</code>.
Add the drawing to the existing scene.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="setscene(scene)"><pre class="notranslate"><code>setscene(scene)
</code></pre></div>
<p dir="auto">Set the <code>Scene</code> for display using <code>Makie</code>.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="displaycallback(faces)"><pre class="notranslate"><code>displaycallback(faces)
</code></pre></div>
<p dir="auto">Display a set of <code>Faces</code> using <code>Makie</code>. This can be used as a
callback to show the steps of the <code>catmullclark</code> function. See
exsmple/demo.jl in this package for an example of usage.
<br><br><br></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Makie, CatmullClark

const inputpoints = [
    [-1.0, -1.0, -1.0],
    [-1.0, -1.0, 1.0],
    [-1.0, 1.0, -1.0],
    [-1.0, 1.0, 1.0],
    [1.0, -1.0, -1.0],
    [1.0, -1.0, 1.0],
    [1.0, 1.0, -1.0],
    [1.0, 1.0, 1.0]]

const inputfaces = [
    [0, 4, 5, 1],
    [4, 6, 7, 5],
    [6, 2, 3, 7],
    [2, 0, 1, 3],
    [1, 5, 7, 3],
    [0, 2, 6, 4]]

const donutpoints = [
    [-2.0, -0.5, -2.0], [-2.0, -0.5, 2.0], [2.0, -0.5, -2.0], [2.0, -0.5, 2.0],
    [-1.0, -0.5, -1.0], [-1.0, -0.5, 1.0], [1.0, -0.5, -1.0], [1.0, -0.5, 1.0],
    [-2.0, 0.5, -2.0], [-2.0, 0.5, 2.0], [2.0,  0.5, -2.0], [2.0, 0.5, 2.0],
    [-1.0, 0.5, -1.0], [-1.0, 0.5, 1.0], [1.0, 0.5, -1.0], [1.0, 0.5, 1.0]]

const donutfaceindices = [
    [4, 5, 1, 0], [3, 1, 5, 7], [0, 2, 6, 4], [2, 3, 7, 6],
    [8,  9, 13, 12], [15, 13, 9, 11], [12, 14, 10, 8], [14, 15, 11, 10],
    [0, 1, 9, 8], [1, 3, 11, 9], [2, 0, 8, 10], [3, 2, 10, 11],
    [12, 13, 5, 4], [13, 15, 7, 5], [14, 12, 4, 6], [15, 14, 6, 7]]

const tetrapoints = [[1.0, 1.0, 1.0], [1.0, -1.0, -1.0], [-1, 1, -1], [-1, -1, 1]]

const tetrafaceindices = [[1, 2, 3], [1, 3, 4], [2, 3, 4], [1, 2, 4]]

const faces = [map(x -&gt; Point3f0(inputpoints[x]), p .+ 1) for p in inputfaces]
const donutfaces = [map(x -&gt; Point3f0(donutpoints[x]), p .+ 1) for p in donutfaceindices]
const tetrafaces = [map(x -&gt; Point3f0(tetrapoints[x]), p) for p in tetrafaceindices]

# cube, rounds toward a sphere
scene = drawfaces(faces, :black)
display(scene)
setscene(scene)
sleep(1)
catmullclark(faces, 4, CatmullClark.displaycallback)

# tetrahedron
scene2 = drawfaces(tetrafaces, :black)
display(scene2)
setscene(scene2)
sleep(2)
catmullclark(tetrafaces, 3, CatmullClark.displaycallback)

# torus
scene3 = drawfaces(donutfaces, :black)
display(scene3)
setscene(scene3)
sleep(1)
catmullclark(donutfaces, 3, CatmullClark.displaycallback)

# if a face missing in cube, makes cuplike shape
sleep(3)
scene4 = drawfaces(faces[2:end], :black)
display(scene4)
setscene(scene4)
sleep(2)
catmullclark(faces[2:end], 3, CatmullClark.displaycallback)

println(&quot;Press Enter to continue&quot;, readline())"><pre class="notranslate"><code>using Makie, CatmullClark

const inputpoints = [
    [-1.0, -1.0, -1.0],
    [-1.0, -1.0, 1.0],
    [-1.0, 1.0, -1.0],
    [-1.0, 1.0, 1.0],
    [1.0, -1.0, -1.0],
    [1.0, -1.0, 1.0],
    [1.0, 1.0, -1.0],
    [1.0, 1.0, 1.0]]

const inputfaces = [
    [0, 4, 5, 1],
    [4, 6, 7, 5],
    [6, 2, 3, 7],
    [2, 0, 1, 3],
    [1, 5, 7, 3],
    [0, 2, 6, 4]]

const donutpoints = [
    [-2.0, -0.5, -2.0], [-2.0, -0.5, 2.0], [2.0, -0.5, -2.0], [2.0, -0.5, 2.0],
    [-1.0, -0.5, -1.0], [-1.0, -0.5, 1.0], [1.0, -0.5, -1.0], [1.0, -0.5, 1.0],
    [-2.0, 0.5, -2.0], [-2.0, 0.5, 2.0], [2.0,  0.5, -2.0], [2.0, 0.5, 2.0],
    [-1.0, 0.5, -1.0], [-1.0, 0.5, 1.0], [1.0, 0.5, -1.0], [1.0, 0.5, 1.0]]

const donutfaceindices = [
    [4, 5, 1, 0], [3, 1, 5, 7], [0, 2, 6, 4], [2, 3, 7, 6],
    [8,  9, 13, 12], [15, 13, 9, 11], [12, 14, 10, 8], [14, 15, 11, 10],
    [0, 1, 9, 8], [1, 3, 11, 9], [2, 0, 8, 10], [3, 2, 10, 11],
    [12, 13, 5, 4], [13, 15, 7, 5], [14, 12, 4, 6], [15, 14, 6, 7]]

const tetrapoints = [[1.0, 1.0, 1.0], [1.0, -1.0, -1.0], [-1, 1, -1], [-1, -1, 1]]

const tetrafaceindices = [[1, 2, 3], [1, 3, 4], [2, 3, 4], [1, 2, 4]]

const faces = [map(x -&gt; Point3f0(inputpoints[x]), p .+ 1) for p in inputfaces]
const donutfaces = [map(x -&gt; Point3f0(donutpoints[x]), p .+ 1) for p in donutfaceindices]
const tetrafaces = [map(x -&gt; Point3f0(tetrapoints[x]), p) for p in tetrafaceindices]

# cube, rounds toward a sphere
scene = drawfaces(faces, :black)
display(scene)
setscene(scene)
sleep(1)
catmullclark(faces, 4, CatmullClark.displaycallback)

# tetrahedron
scene2 = drawfaces(tetrafaces, :black)
display(scene2)
setscene(scene2)
sleep(2)
catmullclark(tetrafaces, 3, CatmullClark.displaycallback)

# torus
scene3 = drawfaces(donutfaces, :black)
display(scene3)
setscene(scene3)
sleep(1)
catmullclark(donutfaces, 3, CatmullClark.displaycallback)

# if a face missing in cube, makes cuplike shape
sleep(3)
scene4 = drawfaces(faces[2:end], :black)
display(scene4)
setscene(scene4)
sleep(2)
catmullclark(faces[2:end], 3, CatmullClark.displaycallback)

println("Press Enter to continue", readline())
</code></pre></div>
<p dir="auto"><br><br><br></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package generally requires Makie, at least for the geometry types defined via that package.</p>
<p dir="auto">You may install the package from Github in the usual way, or to install the current master copy:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;http://github.com/wherrera10/CatmullClark.jl&quot;)"><pre class="notranslate"><code>using Pkg
Pkg.add("http://github.com/wherrera10/CatmullClark.jl")
</code></pre></div>
</article></div>