<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tensorgamesjl" class="anchor" aria-hidden="true" href="#tensorgamesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TensorGames.jl</h1>
<p dir="auto"><a href="https://github.com/forrestlaine/TensorGames.jl/actions/workflows/CI.yml"><img src="https://github.com/forrestlaine/TensorGames.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/forrestlaine/TensorGames.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f65d3347388872148de434808ce94f48b2cb99965be414253fc35ce868e5712b/68747470733a2f2f636f6465636f762e696f2f67682f666f72726573746c61696e652f54656e736f7247616d65732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/forrestlaine/TensorGames.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2bb630e2707a04100cd270fd944d22816241c37b68a5a1629257920c65e17891/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c7565" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue" style="max-width: 100%;"></a></p>
<p dir="auto">Efficient functionality for computing mixed-strategy Nash equilibrium points of a multi-player, finite action, general-sum game. Uses the PATH solver to compute, via <a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage:</h2>
<p dir="auto">Supply a vector of cost tensors (one for each player) as input to the function <code>compute_equilibrium</code>.
<code>cost_tensors[i][j1,j2,...,jN]</code> is the cost faced by player i when player 1 plays action j1, player 2 plays action j2, etc.</p>
<p dir="auto">Additional functionality is provided via ChainRulesCore.jl to automatically differentiate solutions with respect to the elements of the cost tensors.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; d = [3,3,3,3,3,3]; N = 6; cost_tensors = [ randn(d...) for i = 1:N];
julia&gt; sol = compute_equilibrium(cost_tensors);
julia&gt; sol.x
6-element Vector{Vector{Float64}}:
 [0.6147367189021904, 0.0, 0.3852632810978094]
 [0.0, 0.13423377322536922, 0.8657662267746299]
 [0.30978296032333746, 0.6902170396766623, 0.0]
 [0.0, 0.9999999999999994, 0.0]
 [0.5483759176454717, 0.20182657833950027, 0.24979750401502793]
 [0.4761196190151526, 0.38291994996153766, 0.1409604310233093]"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>]; N <span class="pl-k">=</span> <span class="pl-c1">6</span>; cost_tensors <span class="pl-k">=</span> [ <span class="pl-c1">randn</span>(d<span class="pl-k">...</span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N];
julia<span class="pl-k">&gt;</span> sol <span class="pl-k">=</span> <span class="pl-c1">compute_equilibrium</span>(cost_tensors);
julia<span class="pl-k">&gt;</span> sol<span class="pl-k">.</span>x
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{Vector{Float64}}<span class="pl-k">:</span>
 [<span class="pl-c1">0.6147367189021904</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.3852632810978094</span>]
 [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.13423377322536922</span>, <span class="pl-c1">0.8657662267746299</span>]
 [<span class="pl-c1">0.30978296032333746</span>, <span class="pl-c1">0.6902170396766623</span>, <span class="pl-c1">0.0</span>]
 [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.9999999999999994</span>, <span class="pl-c1">0.0</span>]
 [<span class="pl-c1">0.5483759176454717</span>, <span class="pl-c1">0.20182657833950027</span>, <span class="pl-c1">0.24979750401502793</span>]
 [<span class="pl-c1">0.4761196190151526</span>, <span class="pl-c1">0.38291994996153766</span>, <span class="pl-c1">0.1409604310233093</span>]</pre></div>
<p dir="auto">Use the function <code>expected_cost(sol.x, cost_tensor)</code> to compute the equilibrium cost for the player whose objective is represented by cost_tensor.</p>
<p dir="auto">Equilibrium points can also be found when minimum strategy weights are enforced. In other words, for fixed strategies of players (-i), player i's strategy is optimal among those with minimum weight specified by ϵ:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; d = [3,3,3,3,3,3]; N = 6; cost_tensors = [ randn(d...) for i = 1:N];
julia&gt; sol = compute_equilibrium(cost_tensors; ϵ=0.05);
julia&gt; sol.x
6-element Vector{Vector{Float64}}:
 [0.41301195721648803, 0.17743767597659854, 0.40955036680691337]
 [0.05, 0.05, 0.8999999999999998]
 [0.05, 0.28627171177928123, 0.6637282882207187]
 [0.07255559962614289, 0.05, 0.8774444003738571]
 [0.1925535715622543, 0.7574464284377457, 0.05]
 [0.8560862135625118, 0.05, 0.0939137864374882]"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>]; N <span class="pl-k">=</span> <span class="pl-c1">6</span>; cost_tensors <span class="pl-k">=</span> [ <span class="pl-c1">randn</span>(d<span class="pl-k">...</span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N];
julia<span class="pl-k">&gt;</span> sol <span class="pl-k">=</span> <span class="pl-c1">compute_equilibrium</span>(cost_tensors; ϵ<span class="pl-k">=</span><span class="pl-c1">0.05</span>);
julia<span class="pl-k">&gt;</span> sol<span class="pl-k">.</span>x
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{Vector{Float64}}<span class="pl-k">:</span>
 [<span class="pl-c1">0.41301195721648803</span>, <span class="pl-c1">0.17743767597659854</span>, <span class="pl-c1">0.40955036680691337</span>]
 [<span class="pl-c1">0.05</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.8999999999999998</span>]
 [<span class="pl-c1">0.05</span>, <span class="pl-c1">0.28627171177928123</span>, <span class="pl-c1">0.6637282882207187</span>]
 [<span class="pl-c1">0.07255559962614289</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.8774444003738571</span>]
 [<span class="pl-c1">0.1925535715622543</span>, <span class="pl-c1">0.7574464284377457</span>, <span class="pl-c1">0.05</span>]
 [<span class="pl-c1">0.8560862135625118</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.0939137864374882</span>]</pre></div>
<p dir="auto">See additional examples of usage in the test directory, in which checks for the satisfaction of equilibrium conditions and derivative correctness are performed.</p>
</article></div>