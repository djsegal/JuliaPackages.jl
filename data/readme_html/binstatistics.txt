<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-binstatisticsjl" class="anchor" aria-hidden="true" href="#binstatisticsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BinStatistics.jl</h1>
<p dir="auto">Highly flexible and efficient computation of n-dimensional binned statistic(s) for n-variable(s)</p>
<p dir="auto">BinStatistics provides the <code>binstats</code> function that is build on top of DataFrames.jl
and CatagoricalArrays.jl</p>
<p dir="auto"><code>binstats</code> is 2X-10X faster than Python's scipy-1.8.0</p>
<h2 dir="auto"><a id="user-content-binstats-function" class="anchor" aria-hidden="true" href="#binstats-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>binstats function</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
    binstats(df, axis_col, axis_edges, bin_col; 
        grp_function = [nrow], col_function = [mean], missing_bin = false)
    
Returns a DataFrame containing function values for binned variables of `df`.

# Arguments
- `axis_col`: binning axes column(s)
- `axis_edges`: bin edges for `axis_col`
- `bin_col`: column variable(s) to be binned
- `grp_function = [nrow]`: column independent funciton(s) to be applied at group level
- `var_function = [mean]`: column dependent funciton(s) to be applied to `bin_col` at group level
- `missing_bin = false`: include missing bins
&quot;&quot;&quot;"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    binstats(df, axis_col, axis_edges, bin_col; </span>
<span class="pl-s">        grp_function = [nrow], col_function = [mean], missing_bin = false)</span>
<span class="pl-s">    </span>
<span class="pl-s">Returns a DataFrame containing function values for binned variables of `df`.</span>
<span class="pl-s"></span>
<span class="pl-s"># Arguments</span>
<span class="pl-s">- `axis_col`: binning axes column(s)</span>
<span class="pl-s">- `axis_edges`: bin edges for `axis_col`</span>
<span class="pl-s">- `bin_col`: column variable(s) to be binned</span>
<span class="pl-s">- `grp_function = [nrow]`: column independent funciton(s) to be applied at group level</span>
<span class="pl-s">- `var_function = [mean]`: column dependent funciton(s) to be applied to `bin_col` at group level</span>
<span class="pl-s">- `missing_bin = false`: include missing bins</span>
<span class="pl-s"><span class="pl-pds">"""</span></span></pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-load-packages" class="anchor" aria-hidden="true" href="#load-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>load packages</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;BinStatistics&quot;)
Pkg.add(&quot;DataFrames&quot;)
Pkg.add(&quot;Statistics&quot;)
Pkg.add(&quot;CairoMakie&quot;)
using BinStatistics
using DataFrames
using Statistics
using CairoMakie"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BinStatistics<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Statistics<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CairoMakie<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> BinStatistics
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> Statistics
<span class="pl-k">using</span> CairoMakie</pre></div>
<h3 dir="auto"><a id="user-content-make-synthetic-data" class="anchor" aria-hidden="true" href="#make-synthetic-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>make synthetic data</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="begin
    n = 1000000;
    df = DataFrame();
    df.x = rand(n).*20;
    df.y = rand(n).*20;
    df.v1 = cos.(df.x) .+ randn(n)*3;
    df.v2 = cos.(df.x .- df.y) .+ sin.(df.x .+ df.y) .+ randn(n)*3;
    df.v3 = df.v1 .+ df.v2;
end"><pre><span class="pl-k">begin</span>
    n <span class="pl-k">=</span> <span class="pl-c1">1000000</span>;
    df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>();
    df<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n)<span class="pl-k">.*</span><span class="pl-c1">20</span>;
    df<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n)<span class="pl-k">.*</span><span class="pl-c1">20</span>;
    df<span class="pl-k">.</span>v1 <span class="pl-k">=</span> <span class="pl-c1">cos</span>.(df<span class="pl-k">.</span>x) <span class="pl-k">.+</span> <span class="pl-c1">randn</span>(n)<span class="pl-k">*</span><span class="pl-c1">3</span>;
    df<span class="pl-k">.</span>v2 <span class="pl-k">=</span> <span class="pl-c1">cos</span>.(df<span class="pl-k">.</span>x <span class="pl-k">.-</span> df<span class="pl-k">.</span>y) <span class="pl-k">.+</span> <span class="pl-c1">sin</span>.(df<span class="pl-k">.</span>x <span class="pl-k">.+</span> df<span class="pl-k">.</span>y) <span class="pl-k">.+</span> <span class="pl-c1">randn</span>(n)<span class="pl-k">*</span><span class="pl-c1">3</span>;
    df<span class="pl-k">.</span>v3 <span class="pl-k">=</span> df<span class="pl-k">.</span>v1 <span class="pl-k">.+</span> df<span class="pl-k">.</span>v2;
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-example-1-calculate-countnrow-and-mean-of-v1-binned-according-to-x" class="anchor" aria-hidden="true" href="#example-1-calculate-countnrow-and-mean-of-v1-binned-according-to-x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: calculate count/nrow and mean of v1 binned according to x</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df1 = binstats(df, :x, 0:0.1:20, :v1)

200×3 DataFrame
 Row │ x        nrow   v1_mean  
     │ Float64  Int64  Float64  
─────┼──────────────────────────
   1 │    0.05   4932  0.957416
   2 │    0.15   4922  0.966772
  ⋮  │    ⋮       ⋮       ⋮
 199 │   19.85   5085  0.56495
 200 │   19.95   4958  0.491761

 NOTE: `x` labels are bin centers"><pre>df1 <span class="pl-k">=</span> <span class="pl-c1">binstats</span>(df, <span class="pl-c1">:x</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, <span class="pl-c1">:v1</span>)

<span class="pl-c1">200</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ x        nrow   v1_mean  
     │ Float64  Int64  Float64  
─────┼──────────────────────────
   <span class="pl-c1">1</span> │    <span class="pl-c1">0.05</span>   <span class="pl-c1">4932</span>  <span class="pl-c1">0.957416</span>
   <span class="pl-c1">2</span> │    <span class="pl-c1">0.15</span>   <span class="pl-c1">4922</span>  <span class="pl-c1">0.966772</span>
  ⋮  │    ⋮       ⋮       ⋮
 <span class="pl-c1">199</span> │   <span class="pl-c1">19.85</span>   <span class="pl-c1">5085</span>  <span class="pl-c1">0.56495</span>
 <span class="pl-c1">200</span> │   <span class="pl-c1">19.95</span>   <span class="pl-c1">4958</span>  <span class="pl-c1">0.491761</span>

 NOTE<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>x<span class="pl-pds">`</span></span> labels are bin centers</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/alex-s-gardner/BinStatistics.jl/blob/main/assets/images/1.png?raw=true"><img src="https://github.com/alex-s-gardner/BinStatistics.jl/raw/main/assets/images/1.png?raw=true" alt="binstats example 1" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-2-calculate-countnrow-and-mean-of-v1-and-v2-binned-according-to-x" class="anchor" aria-hidden="true" href="#example-2-calculate-countnrow-and-mean-of-v1-and-v2-binned-according-to-x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: calculate count/nrow and mean of v1 and v2 binned according to x</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df2 = binstats(df, :x, 0:0.1:20, [&quot;v1&quot;, &quot;v2&quot;])

200×4 DataFrame
 Row │ x        nrow   v1_mean   v2_mean   
     │ Float64  Int64  Float64   Float64   
─────┼─────────────────────────────────────
   1 │    0.05   4932  0.957416  0.0521698
   2 │    0.15   4922  0.966772  0.134747
  ⋮  │    ⋮       ⋮       ⋮          ⋮
 199 │   19.85   5085  0.56495   0.0731969
 200 │   19.95   4958  0.491761  0.113065"><pre>df2 <span class="pl-k">=</span> <span class="pl-c1">binstats</span>(df, <span class="pl-c1">:x</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, [<span class="pl-s"><span class="pl-pds">"</span>v1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>v2<span class="pl-pds">"</span></span>])

<span class="pl-c1">200</span><span class="pl-k">×</span><span class="pl-c1">4</span> DataFrame
 Row │ x        nrow   v1_mean   v2_mean   
     │ Float64  Int64  Float64   Float64   
─────┼─────────────────────────────────────
   <span class="pl-c1">1</span> │    <span class="pl-c1">0.05</span>   <span class="pl-c1">4932</span>  <span class="pl-c1">0.957416</span>  <span class="pl-c1">0.0521698</span>
   <span class="pl-c1">2</span> │    <span class="pl-c1">0.15</span>   <span class="pl-c1">4922</span>  <span class="pl-c1">0.966772</span>  <span class="pl-c1">0.134747</span>
  ⋮  │    ⋮       ⋮       ⋮          ⋮
 <span class="pl-c1">199</span> │   <span class="pl-c1">19.85</span>   <span class="pl-c1">5085</span>  <span class="pl-c1">0.56495</span>   <span class="pl-c1">0.0731969</span>
 <span class="pl-c1">200</span> │   <span class="pl-c1">19.95</span>   <span class="pl-c1">4958</span>  <span class="pl-c1">0.491761</span>  <span class="pl-c1">0.113065</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/alex-s-gardner/BinStatistics.jl/blob/main/assets/images/2.png?raw=true"><img src="https://github.com/alex-s-gardner/BinStatistics.jl/raw/main/assets/images/2.png?raw=true" alt="binstats example 2" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-3-calculate-countnrow-mean-medain-and-std-of-v1-binned-according-to-x" class="anchor" aria-hidden="true" href="#example-3-calculate-countnrow-mean-medain-and-std-of-v1-binned-according-to-x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: calculate count/nrow, mean, medain and std of v1 binned according to x</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df3 = binstats(df, :x, 0:0.1:20, :v1; col_function = [mean, median, std])

200×5 DataFrame
 Row │ x        nrow   v1_mean   v1_median  v1_std  
     │ Float64  Int64  Float64   Float64    Float64 
─────┼──────────────────────────────────────────────
   1 │    0.05   4932  0.957416   1.01216   2.94134
   2 │    0.15   4922  0.966772   0.990715  2.95307
  ⋮  │    ⋮       ⋮       ⋮          ⋮         ⋮
 199 │   19.85   5085  0.56495    0.617968  3.00214
 200 │   19.95   4958  0.491761   0.487893  2.9561"><pre>df3 <span class="pl-k">=</span> <span class="pl-c1">binstats</span>(df, <span class="pl-c1">:x</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, <span class="pl-c1">:v1</span>; col_function <span class="pl-k">=</span> [mean, median, std])

<span class="pl-c1">200</span><span class="pl-k">×</span><span class="pl-c1">5</span> DataFrame
 Row │ x        nrow   v1_mean   v1_median  v1_std  
     │ Float64  Int64  Float64   Float64    Float64 
─────┼──────────────────────────────────────────────
   <span class="pl-c1">1</span> │    <span class="pl-c1">0.05</span>   <span class="pl-c1">4932</span>  <span class="pl-c1">0.957416</span>   <span class="pl-c1">1.01216</span>   <span class="pl-c1">2.94134</span>
   <span class="pl-c1">2</span> │    <span class="pl-c1">0.15</span>   <span class="pl-c1">4922</span>  <span class="pl-c1">0.966772</span>   <span class="pl-c1">0.990715</span>  <span class="pl-c1">2.95307</span>
  ⋮  │    ⋮       ⋮       ⋮          ⋮         ⋮
 <span class="pl-c1">199</span> │   <span class="pl-c1">19.85</span>   <span class="pl-c1">5085</span>  <span class="pl-c1">0.56495</span>    <span class="pl-c1">0.617968</span>  <span class="pl-c1">3.00214</span>
 <span class="pl-c1">200</span> │   <span class="pl-c1">19.95</span>   <span class="pl-c1">4958</span>  <span class="pl-c1">0.491761</span>   <span class="pl-c1">0.487893</span>  <span class="pl-c1">2.9561</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/alex-s-gardner/BinStatistics.jl/blob/main/assets/images/3.png?raw=true"><img src="https://github.com/alex-s-gardner/BinStatistics.jl/raw/main/assets/images/3.png?raw=true" alt="binstats example 3" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-4-calculate-countnrow--and-mean-of-v2-binned-according-to-y-and-x" class="anchor" aria-hidden="true" href="#example-4-calculate-countnrow--and-mean-of-v2-binned-according-to-y-and-x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 4: calculate count/nrow  and mean of v2 binned according to y and x</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df4 = binstats(df, [:y, :x], [0:.2:20, 0:.2:20], [:v2]; missing_bins = true)

10000×4 DataFrame
   Row │ y        x        nrow   v2_mean 
       │ Float64  Float64  Int64  Float64 
───────┼──────────────────────────────────
     1 │     0.1      0.1    102  1.0629
     2 │     0.1      0.3     87  1.46221
   ⋮   │    ⋮        ⋮       ⋮       ⋮
  9999 │    19.9     19.7     96  1.80224
 10000 │    19.9     19.9     94  2.40527"><pre>df4 <span class="pl-k">=</span> <span class="pl-c1">binstats</span>(df, [<span class="pl-c1">:y</span>, <span class="pl-c1">:x</span>], [<span class="pl-c1">0</span><span class="pl-k">:</span>.<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>, <span class="pl-c1">0</span><span class="pl-k">:</span>.<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>], [<span class="pl-c1">:v2</span>]; missing_bins <span class="pl-k">=</span> <span class="pl-c1">true</span>)

<span class="pl-c1">10000</span><span class="pl-k">×</span><span class="pl-c1">4</span> DataFrame
   Row │ y        x        nrow   v2_mean 
       │ Float64  Float64  Int64  Float64 
───────┼──────────────────────────────────
     <span class="pl-c1">1</span> │     <span class="pl-c1">0.1</span>      <span class="pl-c1">0.1</span>    <span class="pl-c1">102</span>  <span class="pl-c1">1.0629</span>
     <span class="pl-c1">2</span> │     <span class="pl-c1">0.1</span>      <span class="pl-c1">0.3</span>     <span class="pl-c1">87</span>  <span class="pl-c1">1.46221</span>
   ⋮   │    ⋮        ⋮       ⋮       ⋮
  <span class="pl-c1">9999</span> │    <span class="pl-c1">19.9</span>     <span class="pl-c1">19.7</span>     <span class="pl-c1">96</span>  <span class="pl-c1">1.80224</span>
 <span class="pl-c1">10000</span> │    <span class="pl-c1">19.9</span>     <span class="pl-c1">19.9</span>     <span class="pl-c1">94</span>  <span class="pl-c1">2.40527</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/alex-s-gardner/BinStatistics.jl/blob/main/assets/images/4.png?raw=true"><img src="https://github.com/alex-s-gardner/BinStatistics.jl/raw/main/assets/images/4.png?raw=true" alt="binstats example 4" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-5-calculate-median-of-v2-binned-according-to-y-and-x-using-non-uniform-axis_edges" class="anchor" aria-hidden="true" href="#example-5-calculate-median-of-v2-binned-according-to-y-and-x-using-non-uniform-axis_edges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 5: calculate median of v2 binned according to y and x using non-uniform axis_edges</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df5 = binstats(df, [:y, :x], [(0:0.5:4.5).^2, (0:0.5:4.5).^2], [:v2], grp_function = [], col_function = [median], missing_bins = true)

81×3 DataFrame
 Row │ y        x        v2_median   
     │ Float64  Float64  Float64     
─────┼───────────────────────────────
   1 │   0.125    0.125   0.94437
   2 │   0.125    0.625   1.79481
  ⋮  │    ⋮        ⋮          ⋮
  80 │  18.125   14.125  -0.00643648
  81 │  18.125   18.125   0.00196411"><pre>df5 <span class="pl-k">=</span> <span class="pl-c1">binstats</span>(df, [<span class="pl-c1">:y</span>, <span class="pl-c1">:x</span>], [(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">4.5</span>)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>, (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">4.5</span>)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>], [<span class="pl-c1">:v2</span>], grp_function <span class="pl-k">=</span> [], col_function <span class="pl-k">=</span> [median], missing_bins <span class="pl-k">=</span> <span class="pl-c1">true</span>)

<span class="pl-c1">81</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ y        x        v2_median   
     │ Float64  Float64  Float64     
─────┼───────────────────────────────
   <span class="pl-c1">1</span> │   <span class="pl-c1">0.125</span>    <span class="pl-c1">0.125</span>   <span class="pl-c1">0.94437</span>
   <span class="pl-c1">2</span> │   <span class="pl-c1">0.125</span>    <span class="pl-c1">0.625</span>   <span class="pl-c1">1.79481</span>
  ⋮  │    ⋮        ⋮          ⋮
  <span class="pl-c1">80</span> │  <span class="pl-c1">18.125</span>   <span class="pl-c1">14.125</span>  <span class="pl-k">-</span><span class="pl-c1">0.00643648</span>
  <span class="pl-c1">81</span> │  <span class="pl-c1">18.125</span>   <span class="pl-c1">18.125</span>   <span class="pl-c1">0.00196411</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/alex-s-gardner/BinStatistics.jl/blob/main/assets/images/5.png?raw=true"><img src="https://github.com/alex-s-gardner/BinStatistics.jl/raw/main/assets/images/5.png?raw=true" alt="binstats example 5" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-6-apply-custom-function-to-v2-binned-according-to-y-and-x" class="anchor" aria-hidden="true" href="#example-6-apply-custom-function-to-v2-binned-according-to-y-and-x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 6: apply custom function to v2, binned according to y and x</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# create a median absolute deviation function
function mad(x)
    median(abs.(x .- median(x))) 
end
# binstats also accepts anonymous functions but the output will be assinged a generic name

# apply to grouped data
df6 = binstats(df, [:y, :x], [0:1:20, 0:1:20], [:v2], grp_function = [], col_function = [mad],; missing_bins = true)

400×3 DataFrame
 Row │ y        x        v2_mad  
     │ Float64  Float64  Float64 
─────┼───────────────────────────
   1 │     0.5      0.5  2.04322
   2 │     0.5      1.5  2.08714
  ⋮  │    ⋮        ⋮        ⋮
 399 │    19.5     18.5  2.17078
 400 │    19.5     19.5  2.02198"><pre><span class="pl-c"><span class="pl-c">#</span> create a median absolute deviation function</span>
<span class="pl-k">function</span> <span class="pl-en">mad</span>(x)
    <span class="pl-c1">median</span>(<span class="pl-c1">abs</span>.(x <span class="pl-k">.-</span> <span class="pl-c1">median</span>(x))) 
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> binstats also accepts anonymous functions but the output will be assinged a generic name</span>

<span class="pl-c"><span class="pl-c">#</span> apply to grouped data</span>
df6 <span class="pl-k">=</span> <span class="pl-c1">binstats</span>(df, [<span class="pl-c1">:y</span>, <span class="pl-c1">:x</span>], [<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>], [<span class="pl-c1">:v2</span>], grp_function <span class="pl-k">=</span> [], col_function <span class="pl-k">=</span> [mad],; missing_bins <span class="pl-k">=</span> <span class="pl-c1">true</span>)

<span class="pl-c1">400</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ y        x        v2_mad  
     │ Float64  Float64  Float64 
─────┼───────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">0.5</span>      <span class="pl-c1">0.5</span>  <span class="pl-c1">2.04322</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">0.5</span>      <span class="pl-c1">1.5</span>  <span class="pl-c1">2.08714</span>
  ⋮  │    ⋮        ⋮        ⋮
 <span class="pl-c1">399</span> │    <span class="pl-c1">19.5</span>     <span class="pl-c1">18.5</span>  <span class="pl-c1">2.17078</span>
 <span class="pl-c1">400</span> │    <span class="pl-c1">19.5</span>     <span class="pl-c1">19.5</span>  <span class="pl-c1">2.02198</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/alex-s-gardner/BinStatistics.jl/blob/main/assets/images/6.png?raw=true"><img src="https://github.com/alex-s-gardner/BinStatistics.jl/raw/main/assets/images/6.png?raw=true" alt="binstats example 6" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-plotting-script" class="anchor" aria-hidden="true" href="#plotting-script"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting script</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Example 1
begin 
    fig = Figure()
    Axis(fig[1, 1], title = &quot;raw data&quot;)
    scatter!(fig[1, 1], df.x, df.v1)
    Axis(fig[1, 2], title = &quot;binned data&quot;)
    scatter!(fig[1, 2], df1[:,1], df1.v1_mean)  
    fig
end

# Example 2
begin
    fig = Figure()
    Axis(fig[1, 1], title = &quot;raw data&quot;)
    scatter!(fig[1, 1], df.x, df.v1)
    scatter!(fig[1, 1], df.x, df.v2)
    Axis(fig[1, 2], title = &quot;binned data&quot;)
    scatter!(fig[1, 2], df2[:,1], df2.v1_mean, label = &quot;v1&quot;)
    scatter!(fig[1, 2], df2[:,1], df2.v2_mean, label = &quot;v2&quot;)
    axislegend()
    fig
end

# Example 3
begin
    fig = Figure()
    Axis(fig[1, 1], title = &quot;raw data&quot;)
    scatter!(fig[1, 1], df.x, df.v1)
    Axis(fig[1, 2], title = &quot;binned data&quot;)
    scatter!(fig[1, 2], df3[:,1], df3.v1_mean, label = &quot;mean&quot;)
    scatter!(fig[1, 2], df3[:,1], df3.v1_median, label = &quot;median&quot;)
    scatter!(fig[1, 2], df3[:,1], df3.v1_std, label = &quot;std&quot;)
    axislegend()
    fig
end

# Example 4
begin 
    fig = Figure()
    Axis(fig[1, 1], title = &quot;raw data&quot;)
    scatter!(fig[1, 1], df.y, df.x, color = df.v2, colormap = :thermal, markersize = 1)
    xlims!(0, 20); ylims!(0, 20)
    Axis(fig[1, 2], title = &quot;binned data&quot;)
    heatmap!(fig[1, 2], unique(df4[:,1]),unique(df4[:,2]), 
        reshape(df4.v2_mean,length(unique(df4[:,2])),length(unique(df4[:,1]))), 
        colormap = :thermal)
    fig
end

# Example 5
begin 
    fig = Figure()
    Axis(fig[1, 1], title = &quot;raw data&quot;)
    scatter!(fig[1, 1], df.y, df.x, color = df.v2, colormap = :thermal, markersize = 1)
    xlims!(0, 20); ylims!(0, 20)
    Axis(fig[1, 2], title = &quot;binned data&quot;)
    heatmap!(fig[1, 2], unique(df5[:,1]),unique(df5[:,2]),
        reshape(df5.v2_median,length(unique(df5[:,2])),length(unique(df5[:,1]))), colormap = :thermal)
    fig
end

# Example 6
begin 
    fig = Figure()
    Axis(fig[1, 1], title = &quot;raw data&quot;)
    scatter!(fig[1, 1], df.y, df.x, color = df.v2, colormap = :thermal, markersize = 1)
    xlims!(0, 20); ylims!(0, 20)
    Axis(fig[1, 2], title = &quot;binned data&quot;)
    heatmap!(fig[1, 2], unique(df6[:,1]),unique(df6[:,2]), 
        reshape(df6.v2_mad,length(unique(df6[:,2])),length(unique(df6[:,1]))), 
        colormap = :thermal)
    fig
end
"><pre><span class="pl-c"><span class="pl-c">#</span> Example 1</span>
<span class="pl-k">begin</span> 
    fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>raw data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>x, df<span class="pl-k">.</span>v1)
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binned data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], df1[:,<span class="pl-c1">1</span>], df1<span class="pl-k">.</span>v1_mean)  
    fig
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Example 2</span>
<span class="pl-k">begin</span>
    fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>raw data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>x, df<span class="pl-k">.</span>v1)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>x, df<span class="pl-k">.</span>v2)
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binned data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], df2[:,<span class="pl-c1">1</span>], df2<span class="pl-k">.</span>v1_mean, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>v1<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], df2[:,<span class="pl-c1">1</span>], df2<span class="pl-k">.</span>v2_mean, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>v2<span class="pl-pds">"</span></span>)
    <span class="pl-c1">axislegend</span>()
    fig
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Example 3</span>
<span class="pl-k">begin</span>
    fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>raw data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>x, df<span class="pl-k">.</span>v1)
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binned data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], df3[:,<span class="pl-c1">1</span>], df3<span class="pl-k">.</span>v1_mean, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mean<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], df3[:,<span class="pl-c1">1</span>], df3<span class="pl-k">.</span>v1_median, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>median<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], df3[:,<span class="pl-c1">1</span>], df3<span class="pl-k">.</span>v1_std, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>std<span class="pl-pds">"</span></span>)
    <span class="pl-c1">axislegend</span>()
    fig
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Example 4</span>
<span class="pl-k">begin</span> 
    fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>raw data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>y, df<span class="pl-k">.</span>x, color <span class="pl-k">=</span> df<span class="pl-k">.</span>v2, colormap <span class="pl-k">=</span> <span class="pl-c1">:thermal</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">1</span>)
    <span class="pl-c1">xlims!</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>); <span class="pl-c1">ylims!</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>)
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binned data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">heatmap!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">unique</span>(df4[:,<span class="pl-c1">1</span>]),<span class="pl-c1">unique</span>(df4[:,<span class="pl-c1">2</span>]), 
        <span class="pl-c1">reshape</span>(df4<span class="pl-k">.</span>v2_mean,<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(df4[:,<span class="pl-c1">2</span>])),<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(df4[:,<span class="pl-c1">1</span>]))), 
        colormap <span class="pl-k">=</span> <span class="pl-c1">:thermal</span>)
    fig
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Example 5</span>
<span class="pl-k">begin</span> 
    fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>raw data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>y, df<span class="pl-k">.</span>x, color <span class="pl-k">=</span> df<span class="pl-k">.</span>v2, colormap <span class="pl-k">=</span> <span class="pl-c1">:thermal</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">1</span>)
    <span class="pl-c1">xlims!</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>); <span class="pl-c1">ylims!</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>)
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binned data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">heatmap!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">unique</span>(df5[:,<span class="pl-c1">1</span>]),<span class="pl-c1">unique</span>(df5[:,<span class="pl-c1">2</span>]),
        <span class="pl-c1">reshape</span>(df5<span class="pl-k">.</span>v2_median,<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(df5[:,<span class="pl-c1">2</span>])),<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(df5[:,<span class="pl-c1">1</span>]))), colormap <span class="pl-k">=</span> <span class="pl-c1">:thermal</span>)
    fig
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Example 6</span>
<span class="pl-k">begin</span> 
    fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>raw data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">scatter!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], df<span class="pl-k">.</span>y, df<span class="pl-k">.</span>x, color <span class="pl-k">=</span> df<span class="pl-k">.</span>v2, colormap <span class="pl-k">=</span> <span class="pl-c1">:thermal</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">1</span>)
    <span class="pl-c1">xlims!</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>); <span class="pl-c1">ylims!</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>)
    <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>binned data<span class="pl-pds">"</span></span>)
    <span class="pl-c1">heatmap!</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">unique</span>(df6[:,<span class="pl-c1">1</span>]),<span class="pl-c1">unique</span>(df6[:,<span class="pl-c1">2</span>]), 
        <span class="pl-c1">reshape</span>(df6<span class="pl-k">.</span>v2_mad,<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(df6[:,<span class="pl-c1">2</span>])),<span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(df6[:,<span class="pl-c1">1</span>]))), 
        colormap <span class="pl-k">=</span> <span class="pl-c1">:thermal</span>)
    fig
<span class="pl-k">end</span>
</pre></div>
<h1 dir="auto"><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar packages</h1>
<h2 dir="auto"><a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia</h2>
<p dir="auto"><a href="https://github.com/kirklong/BinnedStatistics.jl">BinnedStatistics.jl</a> for single variable 1-D binned statistics</p>
<h2 dir="auto"><a id="user-content-python" class="anchor" aria-hidden="true" href="#python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python</h2>
<p dir="auto">Scipy's <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic.html" rel="nofollow">binned_statistic</a>, <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html" rel="nofollow">binned_statistic_2d</a>, and <a href="scipy.stats.binned_statistic_dd">binned_statistic_dd</a> for single variable 1-, 2-, and n-dimensional binned statistics</p>
</article></div>