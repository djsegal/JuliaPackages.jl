<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pandaslitejl" class="anchor" aria-hidden="true" href="#pandaslitejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PandasLite.jl</h1>
<p dir="auto"><a href="https://github.com/AStupidBear/PandasLite.jl/actions"><img src="https://github.com/AStupidBear/PandasLite.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/AStupidBear/PandasLite.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6acc1466e41fc1efc71d602b8da83843d2642ee4777b98ff314b8780847c9ea0/68747470733a2f2f636f6465636f762e696f2f67682f41537475706964426561722f50616e6461734c6974652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/AStupidBear/PandasLite.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A fork of Pandas.jl whose syntax is closer to native pandas.</p>
<p dir="auto">This package provides a Julia interface to the excellent <a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow">pandas</a> package. It sticks closely to the pandas API. One exception is that integer-based indexing is automatically converted from Python's 0-based indexing to Julia's 1-based indexing.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You must have pandas installed. Usually you can do that on the command line by typing</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pip install pandas"><pre class="notranslate"><code>pip install pandas
</code></pre></div>
<p dir="auto">It also comes with the Anaconda and Enthought Python distributions.</p>
<p dir="auto">Then in Julia, type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;PandasLite&quot;)
using PandasLite"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PandasLite<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> PandasLite</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt; using PandasLite
&gt;&gt; df = DataFrame(Dict(:age=&gt;[27, 29, 27], :name=&gt;[&quot;James&quot;, &quot;Jill&quot;, &quot;Jake&quot;]))
   age   name
0   27  James
1   29   Jill
2   27   Jake

[3 rows x 2 columns]
&gt;&gt; df.describe()
             age
count   3.000000
mean   27.666667
std     1.154701
min    27.000000
25%    27.000000
50%    27.000000
75%    28.000000
max    29.000000

[8 rows x 1 columns]

df[:age]
0    27
1    29
2    27
Name: age, dtype: int64

&gt;&gt; df2 = DataFrame(Dict(:income=&gt;[45, 101, 87]), index=[&quot;Jake&quot;, &quot;James&quot;, &quot;Jill&quot;])
&gt;&gt; df3 = df.merge(df2, left_on=&quot;name&quot;, right_index=true)
   age   name  income
0   27  James     101
1   29   Jill      87
2   27   Jake      45

[3 rows x 3 columns]

&gt;&gt; df3.iloc[1:2, 2:3]
    name  income
0  James     101
1   Jill      87

[2 rows x 2 columns]

&gt;&gt; df3.groupby(&quot;age&quot;).mean()
     income
age
27       73
29       87

[2 rows x 1 columns]

&gt;&gt; df3.query(&quot;income&gt;85&quot;)
   age   name  income
0   27  James     101
1   29   Jill      87

[2 rows x 3 columns]

&gt;&gt; Array(df3)
3x3 Array{Any,2}:
 27  &quot;James&quot;  101
 29  &quot;Jill&quot;    87
 27  &quot;Jake&quot;    45

 &gt;&gt; df3.plot()"><pre><span class="pl-k">&gt;&gt;</span> <span class="pl-k">using</span> PandasLite
<span class="pl-k">&gt;&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:age</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">27</span>, <span class="pl-c1">29</span>, <span class="pl-c1">27</span>], <span class="pl-c1">:name</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>]))
   age   name
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill
<span class="pl-c1">2</span>   <span class="pl-c1">27</span>   Jake

[<span class="pl-c1">3</span> rows x <span class="pl-c1">2</span> columns]
<span class="pl-k">&gt;&gt;</span> df<span class="pl-k">.</span><span class="pl-c1">describe</span>()
             age
count   <span class="pl-c1">3.000000</span>
mean   <span class="pl-c1">27.666667</span>
std     <span class="pl-c1">1.154701</span>
min    <span class="pl-c1">27.000000</span>
<span class="pl-c1">25</span><span class="pl-k">%</span>    <span class="pl-c1">27.000000</span>
<span class="pl-c1">50</span><span class="pl-k">%</span>    <span class="pl-c1">27.000000</span>
<span class="pl-c1">75</span><span class="pl-k">%</span>    <span class="pl-c1">28.000000</span>
max    <span class="pl-c1">29.000000</span>

[<span class="pl-c1">8</span> rows x <span class="pl-c1">1</span> columns]

df[<span class="pl-c1">:age</span>]
<span class="pl-c1">0</span>    <span class="pl-c1">27</span>
<span class="pl-c1">1</span>    <span class="pl-c1">29</span>
<span class="pl-c1">2</span>    <span class="pl-c1">27</span>
Name<span class="pl-k">:</span> age, dtype<span class="pl-k">:</span> int64

<span class="pl-k">&gt;&gt;</span> df2 <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:income</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">45</span>, <span class="pl-c1">101</span>, <span class="pl-c1">87</span>]), index<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>])
<span class="pl-k">&gt;&gt;</span> df3 <span class="pl-k">=</span> df<span class="pl-k">.</span><span class="pl-c1">merge</span>(df2, left_on<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, right_index<span class="pl-k">=</span><span class="pl-c1">true</span>)
   age   name  income
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill      <span class="pl-c1">87</span>
<span class="pl-c1">2</span>   <span class="pl-c1">27</span>   Jake      <span class="pl-c1">45</span>

[<span class="pl-c1">3</span> rows x <span class="pl-c1">3</span> columns]

<span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span>iloc[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
    name  income
<span class="pl-c1">0</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   Jill      <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">2</span> columns]

<span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span><span class="pl-c1">groupby</span>(<span class="pl-s"><span class="pl-pds">"</span>age<span class="pl-pds">"</span></span>)<span class="pl-k">.</span><span class="pl-c1">mean</span>()
     income
age
<span class="pl-c1">27</span>       <span class="pl-c1">73</span>
<span class="pl-c1">29</span>       <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">1</span> columns]

<span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span><span class="pl-c1">query</span>(<span class="pl-s"><span class="pl-pds">"</span>income&gt;85<span class="pl-pds">"</span></span>)
   age   name  income
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill      <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">3</span> columns]

<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">Array</span>(df3)
<span class="pl-c1">3</span>x3 Array{Any,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">27</span>  <span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>  <span class="pl-c1">101</span>
 <span class="pl-c1">29</span>  <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>    <span class="pl-c1">87</span>
 <span class="pl-c1">27</span>  <span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>    <span class="pl-c1">45</span>

 <span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span><span class="pl-c1">plot</span>()</pre></div>
<h2 dir="auto"><a id="user-content-inputoutput" class="anchor" aria-hidden="true" href="#inputoutput"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Input/Output</h2>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df = pd.read_csv(&quot;my_csv_file.csv&quot;) # Read in a CSV file as a dataframe
df.to_json(&quot;my_json_file.json&quot;) # Save a dataframe to disk in JSON format"><pre>df <span class="pl-k">=</span> pd<span class="pl-k">.</span><span class="pl-c1">read_csv</span>(<span class="pl-s"><span class="pl-pds">"</span>my_csv_file.csv<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Read in a CSV file as a dataframe</span>
df<span class="pl-k">.</span><span class="pl-c1">to_json</span>(<span class="pl-s"><span class="pl-pds">"</span>my_json_file.json<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Save a dataframe to disk in JSON format</span></pre></div>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">Most PandasLite operations on medium to large dataframes are very fast, since the overhead of calling into the Python API is small compared to the time spent inside PandasLite' highly efficient C implementation.</p>
<p dir="auto">Setting and getting individual elements of a dataframe or series is slow however, since it requires a round-trip of communication with Python for each operation. Instead, use the <code>values</code> method to get a version of a series or homogeneous dataframe that requires no copying and is as fast to access and write to as a Julia native array. Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt; x_series = Series(randn(10000))
&gt;&gt; @time x[1]
elapsed time: 0.000121945 seconds (2644 bytes allocated)
&gt;&gt; x_values = values(x_series)
&gt;&gt; @time x_values[1]
elapsed time: 2.041e-6 seconds (64 bytes allocated)
&gt;&gt; x_native = randn(10000)
&gt;&gt; @time x[1]
elapsed time: 2.689e-6 seconds (64 bytes allocated)"><pre><span class="pl-k">&gt;&gt;</span> x_series <span class="pl-k">=</span> <span class="pl-c1">Series</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>))
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.000121945</span> seconds (<span class="pl-c1">2644</span> bytes allocated)
<span class="pl-k">&gt;&gt;</span> x_values <span class="pl-k">=</span> <span class="pl-c1">values</span>(x_series)
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x_values[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">2.041e-6</span> seconds (<span class="pl-c1">64</span> bytes allocated)
<span class="pl-k">&gt;&gt;</span> x_native <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>)
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">2.689e-6</span> seconds (<span class="pl-c1">64</span> bytes allocated)</pre></div>
<p dir="auto">Changes to the values(...) array propogate back to the underlying series/dataframe:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt; x_series.iloc[1]
-0.38390854447454037
&gt;&gt; x_values[1] = 10
&gt;&gt; x_series.iloc[1]
10"><pre><span class="pl-k">&gt;&gt;</span> x_series<span class="pl-k">.</span>iloc[<span class="pl-c1">1</span>]
<span class="pl-k">-</span><span class="pl-c1">0.38390854447454037</span>
<span class="pl-k">&gt;&gt;</span> x_values[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-k">&gt;&gt;</span> x_series<span class="pl-k">.</span>iloc[<span class="pl-c1">1</span>]
<span class="pl-c1">10</span></pre></div>
<h2 dir="auto"><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caveats</h2>
<p dir="auto">Panels-related functions are still unwrapped, as well as a few other obscure functions. Note that even if a function is not wrapped explicitly, it can still be called using various methods from <a href="https://github.com/stevengj/PyCall.jl">PyCall</a>.</p>
</article></div>