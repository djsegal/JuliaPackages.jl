<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-pandaslitejl" class="anchor" aria-hidden="true" href="#pandaslitejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PandasLite.jl</h1>
<p>A fork of Pandas.jl whose syntax is closer to native pandas.</p>
<p><a href="https://travis-ci.org//AStupidBear/PandasLite.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df70a20b3dd65be98d7bdecb6ef7095cb93f5de2/68747470733a2f2f7472617669732d63692e6f72672f41537475706964426561722f50616e6461734c6974652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis status" data-canonical-src="https://travis-ci.org/AStupidBear/PandasLite.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>=============</p>
<p>This package provides a Julia interface to the excellent <a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow">pandas</a> package. It sticks closely to the pandas API. One exception is that integer-based indexing is automatically converted from Python's 0-based indexing to Julia's 1-based indexing.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You must have pandas installed. Usually you can do that on the command line by typing</p>
<pre><code>pip install pandas
</code></pre>
<p>It also comes with the Anaconda and Enthought Python distributions.</p>
<p>Then in Julia, type</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PandasLite<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> PandasLite</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;&gt;</span> <span class="pl-k">using</span> PandasLite
<span class="pl-k">&gt;&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:age</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">27</span>, <span class="pl-c1">29</span>, <span class="pl-c1">27</span>], <span class="pl-c1">:name</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>]))
   age   name
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill
<span class="pl-c1">2</span>   <span class="pl-c1">27</span>   Jake

[<span class="pl-c1">3</span> rows x <span class="pl-c1">2</span> columns]
<span class="pl-k">&gt;&gt;</span> df<span class="pl-k">.</span><span class="pl-c1">describe</span>()
             age
count   <span class="pl-c1">3.000000</span>
mean   <span class="pl-c1">27.666667</span>
std     <span class="pl-c1">1.154701</span>
min    <span class="pl-c1">27.000000</span>
<span class="pl-c1">25</span><span class="pl-k">%</span>    <span class="pl-c1">27.000000</span>
<span class="pl-c1">50</span><span class="pl-k">%</span>    <span class="pl-c1">27.000000</span>
<span class="pl-c1">75</span><span class="pl-k">%</span>    <span class="pl-c1">28.000000</span>
max    <span class="pl-c1">29.000000</span>

[<span class="pl-c1">8</span> rows x <span class="pl-c1">1</span> columns]

df[<span class="pl-c1">:age</span>]
<span class="pl-c1">0</span>    <span class="pl-c1">27</span>
<span class="pl-c1">1</span>    <span class="pl-c1">29</span>
<span class="pl-c1">2</span>    <span class="pl-c1">27</span>
Name<span class="pl-k">:</span> age, dtype<span class="pl-k">:</span> int64

<span class="pl-k">&gt;&gt;</span> df2 <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:income</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">45</span>, <span class="pl-c1">101</span>, <span class="pl-c1">87</span>]), index<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>])
<span class="pl-k">&gt;&gt;</span> df3 <span class="pl-k">=</span> df<span class="pl-k">.</span><span class="pl-c1">merge</span>(df2, left_on<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, right_index<span class="pl-k">=</span><span class="pl-c1">true</span>)
   age   name  income
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill      <span class="pl-c1">87</span>
<span class="pl-c1">2</span>   <span class="pl-c1">27</span>   Jake      <span class="pl-c1">45</span>

[<span class="pl-c1">3</span> rows x <span class="pl-c1">3</span> columns]

<span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span>iloc[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
    name  income
<span class="pl-c1">0</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   Jill      <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">2</span> columns]

<span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span><span class="pl-c1">groupby</span>(<span class="pl-s"><span class="pl-pds">"</span>age<span class="pl-pds">"</span></span>)<span class="pl-k">.</span><span class="pl-c1">mean</span>()
     income
age
<span class="pl-c1">27</span>       <span class="pl-c1">73</span>
<span class="pl-c1">29</span>       <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">1</span> columns]

<span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span><span class="pl-c1">query</span>(<span class="pl-s"><span class="pl-pds">"</span>income&gt;85<span class="pl-pds">"</span></span>)
   age   name  income
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill      <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">3</span> columns]

<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">Array</span>(df3)
<span class="pl-c1">3</span>x3 Array{Any,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">27</span>  <span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>  <span class="pl-c1">101</span>
 <span class="pl-c1">29</span>  <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>    <span class="pl-c1">87</span>
 <span class="pl-c1">27</span>  <span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>    <span class="pl-c1">45</span>

 <span class="pl-k">&gt;&gt;</span> df3<span class="pl-k">.</span><span class="pl-c1">plot</span>()</pre></div>
<h2><a id="user-content-inputoutput" class="anchor" aria-hidden="true" href="#inputoutput"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Input/Output</h2>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>df <span class="pl-k">=</span> pd<span class="pl-k">.</span><span class="pl-c1">read_csv</span>(<span class="pl-s"><span class="pl-pds">"</span>my_csv_file.csv<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Read in a CSV file as a dataframe</span>
df<span class="pl-k">.</span><span class="pl-c1">to_json</span>(<span class="pl-s"><span class="pl-pds">"</span>my_json_file.json<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Save a dataframe to disk in JSON format</span></pre></div>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance</h2>
<p>Most PandasLite operations on medium to large dataframes are very fast, since the overhead of calling into the Python API is small compared to the time spent inside PandasLite' highly efficient C implementation.</p>
<p>Setting and getting individual elements of a dataframe or series is slow however, since it requires a round-trip of communication with Python for each operation. Instead, use the <code>values</code> method to get a version of a series or homogeneous dataframe that requires no copying and is as fast to access and write to as a Julia native array. Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;&gt;</span> x_series <span class="pl-k">=</span> <span class="pl-c1">Series</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>))
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.000121945</span> seconds (<span class="pl-c1">2644</span> bytes allocated)
<span class="pl-k">&gt;&gt;</span> x_values <span class="pl-k">=</span> <span class="pl-c1">values</span>(x_series)
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x_values[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">2.041e-6</span> seconds (<span class="pl-c1">64</span> bytes allocated)
<span class="pl-k">&gt;&gt;</span> x_native <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>)
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">2.689e-6</span> seconds (<span class="pl-c1">64</span> bytes allocated)</pre></div>
<p>Changes to the values(...) array propogate back to the underlying series/dataframe:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;&gt;</span> x_series<span class="pl-k">.</span>iloc[<span class="pl-c1">1</span>]
<span class="pl-k">-</span><span class="pl-c1">0.38390854447454037</span>
<span class="pl-k">&gt;&gt;</span> x_values[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-k">&gt;&gt;</span> x_series<span class="pl-k">.</span>iloc[<span class="pl-c1">1</span>]
<span class="pl-c1">10</span></pre></div>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Caveats</h2>
<p>Panels-related functions are still unwrapped, as well as a few other obscure functions. Note that even if a function is not wrapped explicitly, it can still be called using various methods from <a href="https://github.com/stevengj/PyCall.jl">PyCall</a>.</p>
</article></div>