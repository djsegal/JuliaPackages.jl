<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libgeosjl" class="anchor" aria-hidden="true" href="#libgeosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LibGEOS.jl</h1>
<p><a href="https://github.com/JuliaGeo/LibGEOS.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaGeo/LibGEOS.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaGeo/LibGEOS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a0530d5f63266e63df9642e294ba1d3c4f1b72796349cadb1822bdf7d6744d35/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696147656f2f4c696247454f532e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGeo/LibGEOS.jl/badge.svg" style="max-width:100%;"></a></p>
<p>LibGEOS is a package for manipulation and analysis of planar geometric objects, based on the libraries <a href="https://trac.osgeo.org/geos/" rel="nofollow">GEOS</a> (the engine of PostGIS) and JTS (from which GEOS is ported). This package wraps the <a href="https://geos.osgeo.org/doxygen/geos__c_8h_source.html" rel="nofollow">GEOS C API</a>.</p>
<p>Among other things, it allows you to parse <a href="https://en.wikipedia.org/wiki/Well-known_text" rel="nofollow">Well-known Text (WKT)</a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="p1 = readgeom(&quot;POLYGON((0 0,1 0,1 1,0 0))&quot;)
p2 = readgeom(&quot;POLYGON((0 0,1 0,1 1,0 1,0 0))&quot;)
p3 = readgeom(&quot;POLYGON((2 0,3 0,3 1,2 1,2 0))&quot;)
"><pre>p1 <span class="pl-k">=</span> <span class="pl-c1">readgeom</span>(<span class="pl-s"><span class="pl-pds">"</span>POLYGON((0 0,1 0,1 1,0 0))<span class="pl-pds">"</span></span>)
p2 <span class="pl-k">=</span> <span class="pl-c1">readgeom</span>(<span class="pl-s"><span class="pl-pds">"</span>POLYGON((0 0,1 0,1 1,0 1,0 0))<span class="pl-pds">"</span></span>)
p3 <span class="pl-k">=</span> <span class="pl-c1">readgeom</span>(<span class="pl-s"><span class="pl-pds">"</span>POLYGON((2 0,3 0,3 1,2 1,2 0))<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="examples/example1.png"><img src="examples/example1.png" alt="Example 1" style="max-width:100%;"></a></p>
<p>Add a buffer around them</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="g1 = buffer(p1, 0.5)
g2 = buffer(p2, 0.5)
g3 = buffer(p3, 0.5)
"><pre>g1 <span class="pl-k">=</span> <span class="pl-c1">buffer</span>(p1, <span class="pl-c1">0.5</span>)
g2 <span class="pl-k">=</span> <span class="pl-c1">buffer</span>(p2, <span class="pl-c1">0.5</span>)
g3 <span class="pl-k">=</span> <span class="pl-c1">buffer</span>(p3, <span class="pl-c1">0.5</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="examples/example2.png"><img src="examples/example2.png" alt="Example 2" style="max-width:100%;"></a></p>
<p>and take the union of different geometries</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="polygon = LibGEOS.union(g1, g3)
"><pre>polygon <span class="pl-k">=</span> LibGEOS<span class="pl-k">.</span><span class="pl-c1">union</span>(g1, g3)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="examples/example3.png"><img src="examples/example3.png" alt="Example 3" style="max-width:100%;"></a></p>
<p>GEOS functionality is extensive, so coverage is incomplete, but the basic functionality for working with geospatial data is already available. I'm learning as I go along, so documentation is lacking, but if you're interested, you can have a look at the examples in the <code>examples/</code> folder, or the tests in <code>test/test_geo_interface.jl</code> and <code>test/test_geos_operations.jl</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<ol>
<li>At the Julia prompt, run</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add LibGEOS
"><pre>pkg<span class="pl-k">&gt;</span> add LibGEOS</pre></div>
<p>This will install both the Julia package and GEOS shared libraries together. The GEOS build comes from <a href="https://github.com/JuliaBinaryWrappers/GEOS_jll.jl/releases">GEOS_jll</a>, and the build script can be found in <a href="https://github.com/JuliaPackaging/Yggdrasil/tree/master/G/GEOS">Yggdrasil</a>.</p>
<ol start="2">
<li>Test that <code>LibGEOS</code> works by runnning</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; test LibGEOS
"><pre>pkg<span class="pl-k">&gt;</span> test LibGEOS</pre></div>
</article></div>