<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-microhh" class="anchor" aria-hidden="true" href="#microhh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MicroHH</h1>
<p dir="auto">This is a Julia port of the dynamical core of <a href="https://microhh.github.io" rel="nofollow">MicroHH</a>, a 3D CFD code to simulate the atmospheric boundary layer. It is made for educational and exploratory research purposes, including machine learning. In comparison to its C++/CUDA reference it lacks all physical parameterizations, but it comes with the ability to run multiple simulations at the same time and let them interact.</p>
<p dir="auto">A few example cases are in the <code>cases</code> folder.</p>
<p dir="auto">MicroHH is by default precompiled for serial computing with Float64 precision. It can be run on a chosen number of threads:</p>
<ul dir="auto">
<li><code>drycbl</code> with 1 thread(s): <code>julia --project -O3 drycbl_run.nl</code></li>
<li><code>drycbl</code> with 2 thread(s): <code>julia --project -O3 -t2 drycbl_run.nl</code></li>
</ul>
<p dir="auto">MPI mode can be enabled via de <code>set_use_mpi!</code> function that can be run from Julia, and the settings are stored in <code>LocalPreferences.toml</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using MicroHH
MicroHH.set_use_mpi!(true)"><pre class="notranslate"><code>using MicroHH
MicroHH.set_use_mpi!(true)
</code></pre></div>
<p dir="auto">With MPI, the simulation should be started for instance as (if <code>npx = 2</code> and <code>npy = 2</code>)
<code>drycbl</code> with 4 tasks and 2 thread(s): <code>mpiexec -n 4 julia --project -O3 -t2 drycbl_run.nl</code></p>
<p dir="auto">MicroHH can be run at single precision by setting the <code>use_sp</code> flag to <code>true</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using MicroHH
MicroHH.set_use_sp!(true)"><pre class="notranslate"><code>using MicroHH
MicroHH.set_use_sp!(true)
</code></pre></div>
<p dir="auto">In case of MPI enabled, it is recommended to manually precompile before starting a run, to avoid precompilation on all tasks simultaneously.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project -e 'import Pkg; Pkg.precompile()'"><pre class="notranslate"><code>julia --project -e 'import Pkg; Pkg.precompile()'
</code></pre></div>
</article></div>