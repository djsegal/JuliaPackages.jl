<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-alpine-a-global-solver-for-nonconvex-minlps-" class="anchor" aria-hidden="true" href="#alpine-a-global-solver-for-nonconvex-minlps-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alpine, A global solver for nonconvex MINLPs <span></span></h1>
<p>Dev: <a href="https://travis-ci.org/lanl-ansi/Alpine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62ff4a0ef7118aa357777796eaf476f066ff4de0/68747470733a2f2f7472617669732d63692e6f72672f6c616e6c2d616e73692f416c70696e652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/lanl-ansi/Alpine.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/lanl-ansi/Alpine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5574e6acf998e7a97812b6756910c610a586638a/68747470733a2f2f636f6465636f762e696f2f67682f6c616e6c2d616e73692f416c70696e652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lanl-ansi/Alpine.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://lanl-ansi.github.io/Alpine.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>"ALPINE: glob(AL) o(P)timization for mixed-(I)nteger programs with (N)onlinear (E)quations", formerly <strong>POD.jl</strong>, is a novel global optimization solver that uses an adaptive, piecewise convexification scheme and constraints programming methods to solve Mixed-Integer Non-Linear Programs (non-convex MINLPs) efficiently. MINLPs are famously known as the "hard" programming problems that exist in many applications (see <a href="https://github.com/lanl-ansi/MINLPLib.jl">MINLPLib.jl</a>). Alpine is also a good fit for subsets of the MINLP family, e.g., Mixed-Integer Quadradic Convex Programming (MIQCP), Non-Linear Programming (NLP), etc.</p>
<p>Unlike many other state-of-the-art MINLP solvers, Alpine is entirely built upon <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> and <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a> Interface in Julia, which provides incredible flexibility for usage and further development.</p>
<p>Alpine globally solves a given MINLP by:</p>
<ul>
<li>
<p>Analyzing the problem's expressions (objective &amp; constraints) and applies approporite convex relaxations</p>
</li>
<li>
<p>Performing novel adaptive partitioning methods to create piecewise relaxations, bound tightening and polyhedral outer-approximations to guarantee global convergence</p>
</li>
</ul>
<p><strong>Allowable nonlinearities</strong>: Alpine can currently handle MINLPs with polynomials in constraints and/or in the objective.</p>
<p><strong>Alpine currently does not support problems with</strong>: Exponential cones, Positive Semi-Definite (PSD) cones, Nonlinear functions including exp(x), ln(x), x/y, abs(x), x^y, a^x, trigonometric functions (sin(x), cos(x), etc), where 'a' is a constant, and 'x' and 'y' are variables.</p>

<p><strong>Presentation on Alpine.jl at the <a href="http://www.juliaopt.org/meetings/bordeaux2018/" rel="nofollow">2nd Annual JuMP-dev Workshop</a>, held at the Institut de Math√©matiques de Bordeaux, June 2018</strong></p>
<p><a href="https://www.youtube.com/watch?v=mwkhiEIS5JA" rel="nofollow"><img src="https://github.com/lanl-ansi/Alpine.jl/raw/master/alpine_slide.png" width="600" height="350" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Alpine, with it's repository under the LANL-ANSI group, can be installed through the Julia package manager:</p>
<p><code>julia&gt; Pkg.add("Alpine")</code></p>
<p>Developers: Any further development of Alpine can be conducted on a new branch or a forked repo.</p>
<h2><a id="user-content-underlying-solvers" class="anchor" aria-hidden="true" href="#underlying-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Underlying solvers</h2>
<p>Though the algorithm implemented in Alpine is quite involved, most of the hard work and computational bottleneck would arise in the underlying solvers. Since every iteration of Alpine solves a subproblem to optimality, which is typically a convex MILP/MIQCQP and solves a nonconvex NLP/MINLP to local optimality, Alpine's run time heavily depends on the quality of these solvers. For best performance of Alpine, use commercial solvers such as CPLEX/Gurobi. However, due to the flexibility offered by JuMP/MathProgBase, the following solvers are supported in Alpine:</p>
<table>
<thead>
<tr>
<th>Solver</th>
<th>Julia Package</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/" rel="nofollow">CPLEX</a></td>
<td><a href="https://github.com/JuliaOpt/CPLEX.jl">CPLEX.jl</a></td>
</tr>
<tr>
<td><a href="https://projects.coin-or.org/Cbc" rel="nofollow">Cbc</a></td>
<td><a href="https://github.com/JuliaOpt/Clp.jl">Cbc.jl</a></td>
</tr>
<tr>
<td><a href="http://gurobi.com/" rel="nofollow">Gurobi</a></td>
<td><a href="https://github.com/JuliaOpt/Gurobi.jl">Gurobi.jl</a></td>
</tr>
<tr>
<td><a href="https://projects.coin-or.org/Ipopt" rel="nofollow">Ipopt</a></td>
<td><a href="https://github.com/JuliaOpt/Ipopt.jl">Ipopt.jl</a></td>
</tr>
<tr>
<td><a href="https://projects.coin-or.org/Bonmin" rel="nofollow">Bonmin</a></td>
<td><a href="https://github.com/JuliaOpt/AmplNLWriter.jl">Bonmin.jl</a></td>
</tr>
<tr>
<td><a href="http://artelys.com/en/optimization-tools/knitro" rel="nofollow">Artelys KNITRO</a></td>
<td><a href="https://github.com/JuliaOpt/KNITRO.jl">KNITRO.jl</a></td>
</tr>
</tbody>
</table>
<p>As the development of Alpine continues, support for solvers like <a href="http://www.mosek.com/" rel="nofollow">Mosek</a>, <a href="https://github.com/JuliaOpt/Pajarito.jl">Pajarito</a>, <a href="http://www.gnu.org/software/glpk/" rel="nofollow">GLPK</a>, <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt" rel="nofollow">NLopt</a>, <a href="http://www.fico.com/en/products/fico-xpress-optimization-suite" rel="nofollow">Xpress</a> is in the roadmap.</p>
<h2><a id="user-content-bug-reports-and-support" class="anchor" aria-hidden="true" href="#bug-reports-and-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bug reports and support</h2>
<p>Please report any issues via the Github <strong><a href="https://github.com/lanl-ansi/Alpine.jl/issues">issue tracker</a></strong>. All types of issues are welcome and encouraged; this includes bug reports, documentation typos, feature requests, etc.</p>
<h2><a id="user-content-challenging-minlps" class="anchor" aria-hidden="true" href="#challenging-minlps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Challenging MINLPs</h2>
<p>We are seeking out hard benchmark instances for MINLPs. Please get in touch either by opening an issue or <a href="https://harshangrjn.github.io/#contact" rel="nofollow">privately</a> if you would like to share any hard instances. Challenging problems will help us determine how to improve Alpine.</p>
<h2><a id="user-content-citing-alpine" class="anchor" aria-hidden="true" href="#citing-alpine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Citing Alpine</h2>
<p>If you find Alpine useful in your work, we kindly request that you cite the following papers (<a href="http://harshangrjn.github.io/pdf/JOGO_2018.pdf" rel="nofollow">pdf</a>, <a href="http://harshangrjn.github.io/pdf/CP_2016.pdf" rel="nofollow">pdf</a>)</p>
<pre><code>@article{NagarajanLuWangBentSundar2019,
  author = {Nagarajan, Harsha and Lu, Mowen and Wang, Site and Bent, Russell and Sundar, Kaarthik},
  title = {An adaptive, multivariate partitioning algorithm for global optimization of nonconvex programs},
  journal = {Journal of Global Optimization},
  year = {2019},
  issn = {1573-2916},
  doi = {10.1007/s10898-018-00734-1},
}

@inproceedings{NagarajanLuYamangilBent2016,
  title = {Tightening {McC}ormick relaxations for nonlinear programs via dynamic multivariate partitioning},
  author = {Nagarajan, Harsha and Lu, Mowen and Yamangil, Emre and Bent, Russell},
  booktitle = {International Conference on Principles and Practice of Constraint Programming},
  pages = {369--387},
  year = {2016},
  organization = {Springer},
  doi = {10.1007/978-3-319-44953-1_24},
}
</code></pre>
</article></div>