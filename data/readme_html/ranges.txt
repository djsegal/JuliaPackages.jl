<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rangesjl" class="anchor" aria-hidden="true" href="#rangesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ranges.jl</h1>
<p>This package provides additional ways to create a range in Julia. This package has no dependencies other than the Julia standard library.
In doing so, it commits <a href="https://docs.julialang.org/en/v1/manual/style-guide/#Avoid-type-piracy" rel="nofollow">type piracy</a> by extending the method
<code>range</code> to act on types not defined in this package. You are encouraged to examine the implementation of this package so you do not actually
need to use it.</p>
<p>A range is a sequence of numbers or other items that have a <code>start</code> and a <code>stop</code>. Here we focus on arithmetic linear ranges which are actually
arithmetic sequences starting at <code>start</code>, incremented by a <code>step</code> and ending at or before <code>stop</code>. The number of elements in a range
constitutes its <code>length</code>.</p>
<p>Ranges in Julia often start at <code>1</code> by default due to the one-based nature of the language in terms of array indexing
They are often inclusive of their endpoint at <code>stop</code> if reachable by incrementing by <code>step</code>. In particular, this differs
from a language such as Python where ranges start at <code>0</code> and tend not to include the upper bound.</p>
<p>The additional forms added here use the following principles:</p>
<ol>
<li>Provide complementary syntax to <code>start:stop</code> and <code>start:step:stop</code>. That is if you can do it well with the colon syntax, a redundant
<code>range</code> method is not added here. Rather <code>range</code> allows you to construct a sequence not easily done with colon.</li>
<li>Allow for maximum user friendliness, which comes at some cost of sustainable software development.</li>
</ol>
<p>Because of item 1 above, the emphasis here is on providing additional syntax for <code>length</code> since <code>step</code> is well covered by the colon syntax.</p>
<p>The internal design of the package is meant to allow you to copy selected lines if needed or demonstrate how to create a certain
kind of range with limited arguments using Base Julia.</p>
<h2><a id="user-content-positional-syntax" class="anchor" aria-hidden="true" href="#positional-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Positional syntax</h2>
<p>This package adds several positional forms of <code>range</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="range(length) # `1:length`, actually it is `Base.OneTo(length)`
range(start, length) # `start:start+length-1`, or `range(start; length)`
range(start, stop, length) # range(start, stop; length)
range(start, step, stop, length) # Base._range, one arg must be nothing
"><pre><span class="pl-c1">range</span>(length) <span class="pl-c"><span class="pl-c">#</span> `1:length`, actually it is `Base.OneTo(length)`</span>
<span class="pl-c1">range</span>(start, length) <span class="pl-c"><span class="pl-c">#</span> `start:start+length-1`, or `range(start; length)`</span>
<span class="pl-c1">range</span>(start, stop, length) <span class="pl-c"><span class="pl-c">#</span> range(start, stop; length)</span>
<span class="pl-c1">range</span>(start, step, stop, length) <span class="pl-c"><span class="pl-c">#</span> Base._range, one arg must be nothing</span></pre></div>
<p>In the positional syntax, <code>length</code> is always the last argument. It is only argument in the one argument form.</p>
<p><code>start</code> is always the first argument when there are two or more arguments.</p>
<p>The single argument form mimicks the Python version, except that it starts from <code>1</code> and ends with the <code>length</code> argument given.</p>
<p>The two argument form allow for <code>start</code> and <code>length</code> to be provided. The reason <code>range(start,stop)</code> is not implemented is that this
is easily handled by the colon syntax in base Julia: <code>start:stop</code>.</p>
<p>The three argument form allows for <code>start</code>, <code>stop</code>, and <code>length</code> to be specified as positional arguments.</p>
<p>The four argument form allows for <code>start</code>, <code>step</code>, <code>stop</code>, and <code>length</code> to be specified as positional arguments. One of the arguments must be <code>nothing</code>.</p>
<p><code>step</code> is not used here because it can be specified by <code>start:step:stop</code> in base Julia.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Ranges

julia&gt; range(5)
Base.OneTo(5)

julia&gt; range(2, 5)
2:6

julia&gt; range(1, 10, 3)
1.0:4.5:10.0

julia&gt; range(1, nothing, 10, 4)
1.0:3.0:10.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Ranges

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">5</span>)
Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">4.5</span><span class="pl-k">:</span><span class="pl-c1">10.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">nothing</span>, <span class="pl-c1">10</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">3.0</span><span class="pl-k">:</span><span class="pl-c1">10.0</span></pre></div>
<p>Do you find the order of the positional arguments confusing? I do as well, but some people like a pure positional syntax. A more logical approach might have been:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="range(length, start=nothing, stop=nothing) # Not implemented, clashes with default Base.range order!
range(:lbe, length, start=nothing, start=nothing)
"><pre><span class="pl-c1">range</span>(length, start<span class="pl-k">=</span><span class="pl-c1">nothing</span>, stop<span class="pl-k">=</span><span class="pl-c1">nothing</span>) <span class="pl-c"><span class="pl-c">#</span> Not implemented, clashes with default Base.range order!</span>
<span class="pl-c1">range</span>(<span class="pl-c1">:lbe</span>, length, start<span class="pl-k">=</span><span class="pl-c1">nothing</span>, start<span class="pl-k">=</span><span class="pl-c1">nothing</span>)</pre></div>
<h2><a id="user-content-range-pair-syntax-rangestart--stop-length-and-variations" class="anchor" aria-hidden="true" href="#range-pair-syntax-rangestart--stop-length-and-variations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>range Pair Syntax: range(start =&gt; stop, length) and variations.</h2>
<p>Because the order of arguments may not be intuitive, <code>start</code> and <code>stop</code> may be provided as <code>start =&gt; stop</code> which is a <code>Pair</code>.</p>
<p>This allows <code>length</code> to be provided as either the first or last argument.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="range(start =&gt; stop, length) # Same as range(start, stop; length)
range(length, start =&gt; stop) # Same as range(start, stop; length)
range(start =&gt; stop) # Produces a curried function similar to `(length=nothing; step=nothing) -&gt; range(start; stop, length, step)`
"><pre><span class="pl-c1">range</span>(start <span class="pl-k">=&gt;</span> stop, length) <span class="pl-c"><span class="pl-c">#</span> Same as range(start, stop; length)</span>
<span class="pl-c1">range</span>(length, start <span class="pl-k">=&gt;</span> stop) <span class="pl-c"><span class="pl-c">#</span> Same as range(start, stop; length)</span>
<span class="pl-c1">range</span>(start <span class="pl-k">=&gt;</span> stop) <span class="pl-c"><span class="pl-c">#</span> Produces a curried function similar to `(length=nothing; step=nothing) -&gt; range(start; stop, length, step)`</span></pre></div>
<p>The last form returns another function that remembers the <code>start</code> and <code>stop</code> given in the <code>Pair</code>.
It takes a single positional argument of <code>length</code>. It can also optionally take a single keyword argument
of either <code>step</code> or <code>length</code>.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Ranges

julia&gt; range(1 =&gt; 5, 2)
1.0:4.0:5.0

julia&gt; range(2, 1 =&gt; 5)
1.0:4.0:5.0

julia&gt; range(3, 1 =&gt; 5)
1.0:2.0:5.0

julia&gt; r = range(1 =&gt; 5)
Ranges.PartialRange(1, 5)

julia&gt; r(3)
1.0:2.0:5.0

julia&gt; r(step = 2)
1:2:5

julia&gt; r(length = 3)
1.0:2.0:5.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Ranges

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">4.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">4.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> r <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>)
Ranges<span class="pl-k">.</span><span class="pl-c1">PartialRange</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">r</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">r</span>(step <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">r</span>(length <span class="pl-k">=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span></pre></div>
<h2><a id="user-content-range-start-stop-step-length" class="anchor" aria-hidden="true" href="#range-start-stop-step-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>range(; start, stop, step, length)</h2>
<p>If you would like to be clear about all parameters given for a range, all four prameters can be specified as keywords.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Ranges

julia&gt; range(;length = 3, start = 1)
1:3

julia&gt; range(;length = 3, start = 1, stop = 5)
1.0:2.0:5.0

julia&gt; range(; start=3, step = 2, length=100)
3:2:201
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Ranges

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(;length <span class="pl-k">=</span> <span class="pl-c1">3</span>, start <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(;length <span class="pl-k">=</span> <span class="pl-c1">3</span>, start <span class="pl-k">=</span> <span class="pl-c1">1</span>, stop <span class="pl-k">=</span> <span class="pl-c1">5</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(; start<span class="pl-k">=</span><span class="pl-c1">3</span>, step <span class="pl-k">=</span> <span class="pl-c1">2</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">201</span></pre></div>
<h2><a id="user-content-range-with-abbreviations" class="anchor" aria-hidden="true" href="#range-with-abbreviations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>range with abbreviations</h2>
<p>If you liked the flexiblity of the keyword form, but also found it more verbose, this package also provides a single letter abbreviation form
via the <em>BELS</em> system. <em>BELS</em> stands for <code>[b]egin</code>, <code>[e]nd</code>, <code>[l]ength</code>, and <code>[s]tep</code>, drawing inspiration from existing Julia concepts.</p>
<table>
<thead>
<tr>
<th>Current</th>
<th>New</th>
<th>Example</th>
<th>New Abbreviation</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td>begin</td>
<td>a[begin]</td>
<td>b</td>
</tr>
<tr>
<td>stop</td>
<td>end</td>
<td>a[end]</td>
<td>e</td>
</tr>
<tr>
<td>length</td>
<td>length</td>
<td>length(a)</td>
<td>l</td>
</tr>
<tr>
<td>step</td>
<td>step</td>
<td>step(a)</td>
<td>s</td>
</tr>
</tbody>
</table>
<p>Each of these forms involve providing a <code>Symbol</code> as the first argument. If that symbol is <code>:bels</code>, then <code>b</code>, <code>e</code>, <code>l</code>, and <code>s</code> may be provided as keywords.</p>
<p>If the symbol uses less than four letters, then the symbol denotes the order of positional arguments. For example, <code>:bel</code> indicates that the order of arguments
will be <code>[b]egin</code>, <code>[e]nd</code>, and <code>[l]ength</code>. If the symbol was <code>:bes</code>, then the order of arguments will be <code>[b]egin</code>, <code>[e]nd</code>, and <code>[s]tep</code>.</p>
<p>Effort is made to produce a range given any combination of arguments.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="range(:bels; b, e, l, s)
range(:[bels], args...)
"><pre><span class="pl-c1">range</span>(<span class="pl-c1">:bels</span>; b, e, l, s)
<span class="pl-c1">range</span>(:[bels], args<span class="pl-k">...</span>)</pre></div>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Ranges

julia&gt; range(:bels, b=5, e=10, l=3)
5.0:2.5:10.0

julia&gt; range(:bels, e=10, l=3, s=2)
6:2:10

julia&gt; range(:be, 1, 10)
1:10

julia&gt; range(:be, 2, 10)
2:10

julia&gt; range(:bl, 2, 10)
2:11
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Ranges

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:bels</span>, b<span class="pl-k">=</span><span class="pl-c1">5</span>, e<span class="pl-k">=</span><span class="pl-c1">10</span>, l<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">5.0</span><span class="pl-k">:</span><span class="pl-c1">2.5</span><span class="pl-k">:</span><span class="pl-c1">10.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:bels</span>, e<span class="pl-k">=</span><span class="pl-c1">10</span>, l<span class="pl-k">=</span><span class="pl-c1">3</span>, s<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:be</span>, <span class="pl-c1">1</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:be</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:bl</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">11</span></pre></div>
<p>As of <code>v0.2.0</code>, symbols that start with <code>:l</code> like <code>:lbe</code> have default arguments. These defaults calculated from the given arguments or assume <code>start = 1, step = 1</code>.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Ranges # v0.0.2

julia&gt; range(:lbe, 5)
1:5

julia&gt; range(:lbe, 5, 2)
2:6

julia&gt; range(:lbe, 5, 2, 3)
2.0:0.25:3.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Ranges <span class="pl-c"><span class="pl-c">#</span> v0.0.2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:lbe</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:lbe</span>, <span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">:lbe</span>, <span class="pl-c1">5</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">0.25</span><span class="pl-k">:</span><span class="pl-c1">3.0</span></pre></div>
<h3><a id="user-content-change-range-length" class="anchor" aria-hidden="true" href="#change-range-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Change range length</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="length(r::AbstractRange, len)
length(r::Pair, len)
"><pre><span class="pl-c1">length</span>(r<span class="pl-k">::</span><span class="pl-c1">AbstractRange</span>, len)
<span class="pl-c1">length</span>(r<span class="pl-k">::</span><span class="pl-c1">Pair</span>, len)</pre></div>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; length(1:5, 11)
1.0:0.4:5.0

julia&gt; length(1:5, 21)
1.0:0.2:5.0

julia&gt; length(3.5 =&gt; 22.2, 11)
3.5:1.87:22.2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">11</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.4</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">21</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">3.5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">22.2</span>, <span class="pl-c1">11</span>)
<span class="pl-c1">3.5</span><span class="pl-k">:</span><span class="pl-c1">1.87</span><span class="pl-k">:</span><span class="pl-c1">22.2</span></pre></div>
<h3><a id="user-content-change-range-step" class="anchor" aria-hidden="true" href="#change-range-step"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Change range step</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="step(r::AbstractRange, s)
step(r::Pair, s)
"><pre><span class="pl-c1">step</span>(r<span class="pl-k">::</span><span class="pl-c1">AbstractRange</span>, s)
<span class="pl-c1">step</span>(r<span class="pl-k">::</span><span class="pl-c1">Pair</span>, s)</pre></div>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; step(1:5, 2)
1:2:5

julia&gt; step(1:10, 2)
1:2:9

julia&gt; step(1 =&gt; 5.5, 3)
1.0:3.0:4.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">step</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">step</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">step</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.5</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">3.0</span><span class="pl-k">:</span><span class="pl-c1">4.0</span></pre></div>
<h3><a id="user-content-change-first-element" class="anchor" aria-hidden="true" href="#change-first-element"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Change first element</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="first(r::AbstractRange, f)
"><pre><span class="pl-c1">first</span>(r<span class="pl-k">::</span><span class="pl-c1">AbstractRange</span>, f)</pre></div>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; first(1:5, 3)
3:1:5
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span></pre></div>
<h3><a id="user-content-change-last-element" class="anchor" aria-hidden="true" href="#change-last-element"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Change last element</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="last(r::AbstractRange, l)
"><pre><span class="pl-c1">last</span>(r<span class="pl-k">::</span><span class="pl-c1">AbstractRange</span>, l)</pre></div>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; last(1:5, 3)
1:1:3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">last</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span></pre></div>
<h1><a id="user-content-creating-a-range-in-base-julia-a-review" class="anchor" aria-hidden="true" href="#creating-a-range-in-base-julia-a-review"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating a range in Base Julia, a Review</h1>
<p>Let's review the distinct ways to create a range in base Julia. In general, ranges in Base
are iterators and use Julia's iteration protocol. To obtain the actually sequence a method such as <code>collect</code> can be used to obtain all the elements
of the iterator in order.</p>
<h3><a id="user-content-colon-syntax" class="anchor" aria-hidden="true" href="#colon-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Colon Syntax</h3>
<p>The colon syntax allows ranges to be created using <code>start</code>, <code>stop</code>, and optionally <code>step</code>.</p>
<p>The simplest colon syntax is <code>start:stop</code> where <code>step</code> defaults to <code>1</code>. In this case <code>start</code> and <code>stop</code> are included in the iteration.
This produces a Julia struct of type <code>UnitRange</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; 1:5
1:5

julia&gt; print( collect( 1:5 ) )
[1, 2, 3, 4, 5]

julia&gt; typeof(1:5)
UnitRange{Int64}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>( <span class="pl-c1">collect</span>( <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span> ) )
[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
UnitRange{Int64}</pre></div>
<p>A second colon syntax allows you to specify <code>step</code>: <code>start:step:stop</code>. If <code>stop</code> cannot be reached by incrementing by <code>step</code> from <code>start</code>,
<code>stop</code> may not be included in the iteration. This produces a Julia struct of type <code>StepRange</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; 1:2:10
1:2:9

julia&gt; print( collect( 1:2:10 ) )
[1, 3, 5, 7, 9]

julia&gt; typeof(1:2:10)
StepRange{Int64,Int64}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>( <span class="pl-c1">collect</span>( <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span> ) )
[<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">7</span>, <span class="pl-c1">9</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
StepRange{Int64,Int64}</pre></div>
<h3><a id="user-content-rangestart-stop-step-length-syntax" class="anchor" aria-hidden="true" href="#rangestart-stop-step-length-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>range(start; stop, step, length) Syntax</h3>
<p>The method <code>range</code> comes in several forms. The first form takes a single positional argument, <code>start</code>, and accepts
<code>stop</code>, <code>step</code>, and/or <code>length</code> as keyword arguments. This can produce either a <code>UnitRange</code>, <code>StepRange</code>, or <code>StepRangeLen</code>.</p>
<p>The valid combinations of keyword arguments are below.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="range(start; stop) # Redundant with `start:stop`
range(start; length)
range(start; step, length)
"><pre><span class="pl-c1">range</span>(start; stop) <span class="pl-c"><span class="pl-c">#</span> Redundant with `start:stop`</span>
<span class="pl-c1">range</span>(start; length)
<span class="pl-c1">range</span>(start; step, length)</pre></div>
<p>If neither <code>step</code> or <code>length</code> is specified, <code>step</code> defaults to <code>1</code>.</p>
<p>A combination of only <code>start</code> and <code>step</code> will produce an <code>ArgumentError</code>. Specifying all three keywords will also
produce an <code>ArgumentError</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; range(1; stop = 5)
1:5

julia&gt; typeof( range(1; stop = 5) )
UnitRange{Int64}

julia&gt; range(1; stop = 5, length = 3)
1.0:2.0:5.0

julia&gt; typeof( range(1; stop = 5, length = 3) )
StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}

julia&gt; range(1; length = 3, step = 2)
1:2:5

julia&gt; typeof( range(1; length = 3, step = 2) )
StepRange{Int64,Int64}

julia&gt; range(2; length=3)
2:4

julia&gt; range(2; step=3)
ERROR: ArgumentError: At least one of `length` or `stop` must be specified

julia&gt; range(1; stop=5, length = 2, step = 4)
ERROR: ArgumentError: Too many arguments specified; try passing only one of `stop` or `length`
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; stop <span class="pl-k">=</span> <span class="pl-c1">5</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>( <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; stop <span class="pl-k">=</span> <span class="pl-c1">5</span>) )
UnitRange{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; stop <span class="pl-k">=</span> <span class="pl-c1">5</span>, length <span class="pl-k">=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>( <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; stop <span class="pl-k">=</span> <span class="pl-c1">5</span>, length <span class="pl-k">=</span> <span class="pl-c1">3</span>) )
StepRangeLen{Float64,Base<span class="pl-k">.</span>TwicePrecision{Float64},Base<span class="pl-k">.</span>TwicePrecision{Float64}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; length <span class="pl-k">=</span> <span class="pl-c1">3</span>, step <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>( <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; length <span class="pl-k">=</span> <span class="pl-c1">3</span>, step <span class="pl-k">=</span> <span class="pl-c1">2</span>) )
StepRange{Int64,Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">2</span>; length<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">2</span>; step<span class="pl-k">=</span><span class="pl-c1">3</span>)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> At least one of <span class="pl-s"><span class="pl-pds">`</span>length<span class="pl-pds">`</span></span> or <span class="pl-s"><span class="pl-pds">`</span>stop<span class="pl-pds">`</span></span> must be specified

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; stop<span class="pl-k">=</span><span class="pl-c1">5</span>, length <span class="pl-k">=</span> <span class="pl-c1">2</span>, step <span class="pl-k">=</span> <span class="pl-c1">4</span>)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> Too many arguments specified; <span class="pl-k">try</span> passing only one of <span class="pl-s"><span class="pl-pds">`</span>stop<span class="pl-pds">`</span></span> or <span class="pl-s"><span class="pl-pds">`</span>length<span class="pl-pds">`</span></span></pre></div>
<h3><a id="user-content-rangestart-stop-step-length" class="anchor" aria-hidden="true" href="#rangestart-stop-step-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>range(start, stop; step, length)</h3>
<p>A second form of range allows for two positional arguments, <code>start</code> and <code>stop</code>. Exactly one
additional keyword, <code>step</code> or <code>length</code> must be provided. The valid forms are below.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="range(start, stop; step)
range(start, stop; length)
"><pre><span class="pl-c1">range</span>(start, stop; step)
<span class="pl-c1">range</span>(start, stop; length)</pre></div>
<p>It is not valid to provide two positional arguments only. It is also not valid to provide
both keyword arguments in this form. These will throw an <code>ArgumentError</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; range(1, 5, step = 2)
1:2:5

julia&gt; range(1, 5, length = 2)
1.0:4.0:5.0

julia&gt; range(1, 5)
ERROR: ArgumentError: At least one of `length` or `step` must be specified
...

julia&gt; range(1, 5, length = 2, step = 4)
ERROR: ArgumentError: Too many arguments specified; try passing only one of `stop` or `length`
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>, step <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>, length <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">4.0</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> At least one of <span class="pl-s"><span class="pl-pds">`</span>length<span class="pl-pds">`</span></span> or <span class="pl-s"><span class="pl-pds">`</span>step<span class="pl-pds">`</span></span> must be specified
<span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>, length <span class="pl-k">=</span> <span class="pl-c1">2</span>, step <span class="pl-k">=</span> <span class="pl-c1">4</span>)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> Too many arguments specified; <span class="pl-k">try</span> passing only one of <span class="pl-s"><span class="pl-pds">`</span>stop<span class="pl-pds">`</span></span> or <span class="pl-s"><span class="pl-pds">`</span>length<span class="pl-pds">`</span></span></pre></div>
<h3><a id="user-content-tips-for-passing-keywords" class="anchor" aria-hidden="true" href="#tips-for-passing-keywords"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tips for passing keywords</h3>
<p>Julia's has some escoteric keyword passing conventions. For example, if you pass a variable after the semicolon, <code>;</code>, the name of the variable can indicate the keyword.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; let length = 11, step = 3
           range(1; length, step)
       end
1:3:31
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> length <span class="pl-k">=</span> <span class="pl-c1">11</span>, step <span class="pl-k">=</span> <span class="pl-c1">3</span>
           <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; length, step)
       <span class="pl-k">end</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">31</span></pre></div>
<p>You can also use a <code>NamedTuple</code> in the following way about a semicolon, <code>;</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nt = (stop=3, length=11)
(stop = 3, length = 11)

julia&gt; range(1; nt.length, nt.stop) # The property name indicates the keyword
1.0:0.2:3.0

julia&gt; range(1; nt...) # Splatting
1.0:0.2:3.0
"><pre>julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (stop<span class="pl-k">=</span><span class="pl-c1">3</span>, length<span class="pl-k">=</span><span class="pl-c1">11</span>)
(stop <span class="pl-k">=</span> <span class="pl-c1">3</span>, length <span class="pl-k">=</span> <span class="pl-c1">11</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; nt<span class="pl-k">.</span>length, nt<span class="pl-k">.</span>stop) <span class="pl-c"><span class="pl-c">#</span> The property name indicates the keyword</span>
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">range</span>(<span class="pl-c1">1</span>; nt<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> Splatting</span>
<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">3.0</span></pre></div>
<h1><a id="user-content-internal-design" class="anchor" aria-hidden="true" href="#internal-design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Internal Design</h1>
<p>The design of this package is such that each depends minimally on other lines of code in the package.
This allows you to copy a single line out of this package into your code or REPL in order to use that specific syntax.</p>
<p>This also allows you to discover how to perform the action you want via the default <code>range</code> in Base Julia.</p>
<h2><a id="user-content-example-rangestart-stop-length" class="anchor" aria-hidden="true" href="#example-rangestart-stop-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: range(start, stop, length)</h2>
<p>For example, you may really like <code>range(start, stop, length)</code>.
To make only that syntax function, you can copy the following line of code to gain that functionality:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Implements range(start, stop, length)
Base.range(start::Number, stop, length::Integer) = Base.range(start, stop; length) # from src/positional.jl
"><pre><span class="pl-c"><span class="pl-c">#</span> Implements range(start, stop, length)</span>
Base<span class="pl-k">.</span><span class="pl-en">range</span>(start<span class="pl-k">::</span><span class="pl-c1">Number</span>, stop, length<span class="pl-k">::</span><span class="pl-c1">Integer</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">range</span>(start, stop; length) <span class="pl-c"><span class="pl-c">#</span> from src/positional.jl</span></pre></div>
<h2><a id="user-content-example-rangestart--stop-length" class="anchor" aria-hidden="true" href="#example-rangestart--stop-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: range(start =&gt; stop, length)</h2>
<p>Alternatively, you really like <code>range(start =&gt; stop, length)</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Implements range(start =&gt; stop, length)
Base.range(r::Pair, length) = Base.range(r.first, r.second; length) # from src/pair.jl
"><pre><span class="pl-c"><span class="pl-c">#</span> Implements range(start =&gt; stop, length)</span>
Base<span class="pl-k">.</span><span class="pl-en">range</span>(r<span class="pl-k">::</span><span class="pl-c1">Pair</span>, length) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">range</span>(r<span class="pl-k">.</span>first, r<span class="pl-k">.</span>second; length) <span class="pl-c"><span class="pl-c">#</span> from src/pair.jl</span></pre></div>
<h2><a id="user-content-complicated-example-rangelbe-length-start-stop" class="anchor" aria-hidden="true" href="#complicated-example-rangelbe-length-start-stop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Complicated example: range(:lbe, length, start, stop)</h2>
<p>Some of the more complicated examples may require two lines of code to function.
For example <code>range(:lbe, length, start, stop)</code> needs the following.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Implements range(:lbe, length, start, stop)
Base.range(s::Symbol, args... ; kwargs...) = Base.range(Val(s), args... ; kwargs...) # from src/keyword.jl
Base.range(::Val{:lbe}, l, b=1, e=nothing) = Base.range(b, e; length=l)
"><pre><span class="pl-c"><span class="pl-c">#</span> Implements range(:lbe, length, start, stop)</span>
Base<span class="pl-k">.</span><span class="pl-en">range</span>(s<span class="pl-k">::</span><span class="pl-c1">Symbol</span>, args<span class="pl-k">...</span> ; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">range</span>(<span class="pl-c1">Val</span>(s), args<span class="pl-k">...</span> ; kwargs<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> from src/keyword.jl</span>
Base<span class="pl-k">.</span><span class="pl-en">range</span>(<span class="pl-k">::</span><span class="pl-c1">Val{:lbe}</span>, l, b<span class="pl-k">=</span><span class="pl-c1">1</span>, e<span class="pl-k">=</span><span class="pl-c1">nothing</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">range</span>(b, e; length<span class="pl-k">=</span>l)</pre></div>
<h1><a id="user-content-other-rangesjl" class="anchor" aria-hidden="true" href="#other-rangesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Ranges.jl</h1>
<p>This package is unrelated to <a href="https://github.com/JuliaArrays/Ranges.jl">https://github.com/JuliaArrays/Ranges.jl</a> which is obsolete.</p>
</article></div>