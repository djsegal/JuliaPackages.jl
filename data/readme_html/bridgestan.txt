<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bridgestan" class="anchor" aria-hidden="true" href="#bridgestan"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BridgeStan</h1>
<p dir="auto"><a href="https://roualdes.github.io/bridgestan/" rel="nofollow"><img src="https://camo.githubusercontent.com/d5d535f53f2cb047c2b4382b8fd3c2913519abad35badcd4f22bd45d174f450a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c7565" alt="DOCS" data-canonical-src="https://img.shields.io/badge/docs-latest-blue" style="max-width: 100%;"></a> <a href="https://doi.org/10.5281/zenodo.7760173" rel="nofollow"><img src="https://camo.githubusercontent.com/e6173691cb255cdd07a7c97b3a1a5c9d17785fd591848c90b9b8d2465c232b64/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e373736303137332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.7760173.svg" style="max-width: 100%;"></a> <a href="https://github.com/roualdes/bridgestan/actions/workflows/main.yaml"><img src="https://github.com/roualdes/bridgestan/actions/workflows/main.yaml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">BridgeStan provides efficient in-memory access through Python, Julia,
and R to the methods of a <a href="https://mc-stan.org" rel="nofollow">Stan</a> model, including
log densities, gradients, Hessians, and constraining and unconstraining
transforms.  The motivation was developing inference algorithms in
higher-level languages for arbitrary Stan models.</p>
<p dir="auto">Stan is a probabilistic programming language for coding statistical
models.  For an introduction to what can be coded in Stan, see the
<a href="https://mc-stan.org/docs/stan-users-guide/index.html" rel="nofollow"><em>Stan User's Guide</em></a>.</p>
<p dir="auto">BridgeStan is currently shipping with Stan version 2.32.1</p>
<p dir="auto">Documentation is available at <a href="https://roualdes.github.io/bridgestan/" rel="nofollow">https://roualdes.github.io/bridgestan/</a></p>
<h4 dir="auto"><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compatibility</h4>
<p dir="auto">BridgeStan has been tested with the following operating system and C++
compiler combinations.</p>
<ul dir="auto">
<li>Linux: Ubuntu 20.04 with gcc 9.4.0</li>
<li>Apple: Mac OS X 12.2 with Apple clang 11.0.3</li>
<li>Microsoft: Windows 10 with gcc MSYS2 5.3.0</li>
</ul>
<h2 dir="auto"><a id="user-content-installing-bridgestan" class="anchor" aria-hidden="true" href="#installing-bridgestan"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing BridgeStan</h2>
<p dir="auto">Installing the core of BridgeStan is as simple as
<a href="https://mc-stan.org/docs/cmdstan-guide/cmdstan-installation.html#cpp-toolchain" rel="nofollow">installing a C++ toolchain</a>
(libraries, compiler, and the <code>make</code> command), and downloading this
repository. To download the latest development version, you can run</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git clone --recurse-submodules https://github.com/roualdes/bridgestan.git"><pre>git clone --recurse-submodules https://github.com/roualdes/bridgestan.git</pre></div>
<p dir="auto">For a full guide on installing, configuring, and using BridgeStan, consult the
<a href="https://roualdes.github.io/bridgestan/latest/getting-started.html" rel="nofollow">documentation</a></p>
<h2 dir="auto"><a id="user-content-using-bridgestan" class="anchor" aria-hidden="true" href="#using-bridgestan"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using BridgeStan</h2>
<h3 dir="auto"><a id="user-content-compiling-a-stan-program" class="anchor" aria-hidden="true" href="#compiling-a-stan-program"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compiling a Stan program</h3>
<p dir="auto">To compile the Stan model in <code>test_models/multi/multi.stan</code> to a binary
shared object (<code>.so</code> file), use the following.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ cd bridgestan
$ make test_models/multi/multi_model.so"><pre class="notranslate"><code>$ cd bridgestan
$ make test_models/multi/multi_model.so
</code></pre></div>
<p dir="auto">This will require internet access the first time you run it in order
to download the appropriate Stan compiler for your platform into
<code>&lt;bridgestan-dir&gt;/bin/stanc[.exe]</code></p>
<h3 dir="auto"><a id="user-content-example-programs" class="anchor" aria-hidden="true" href="#example-programs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example programs</h3>
<p dir="auto">This repository includes examples of calling Stan through BridgeStan
in Python, Julia, R, and C.</p>
<ul dir="auto">
<li>
<p dir="auto">From Python: <a href="python/example.py"><code>example.py</code></a></p>
</li>
<li>
<p dir="auto">From Julia: <a href="julia/example.jl"><code>example.jl</code></a></p>
</li>
<li>
<p dir="auto">From R: <a href="R/example.R"><code>example.r</code></a></p>
</li>
<li>
<p dir="auto">From C: <a href="c-example/example.c"><code>example.c</code></a></p>
</li>
</ul>
<p dir="auto">Examples of other functionality can be found in the <code>test</code> folder for each interface.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">The Julia and Python APIs were derived from the
<a href="https://github.com/bob-carpenter/stan-model-server/">Stan Model Server</a>
API, which in turn was derived from
<a href="https://github.com/dmuck/redding-stan">ReddingStan</a>.</p>
<p dir="auto">Thanks to Sebastian Weber (GitHub <a href="https://github.com/wds15">@wds15</a>)
for enabling multi-threaded calls from Julia to a single Stan model instance.</p>
</article></div>