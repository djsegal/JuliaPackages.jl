<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-typeparsers" class="anchor" aria-hidden="true" href="#typeparsers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TypeParsers</h1>
<p dir="auto"><a href="https://travis-ci.com/Circo-dev/TypeParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/053d6decaa744cf3ce86454ffc06a0116df75ca44be775d11e2d02883023ef49/68747470733a2f2f7472617669732d63692e636f6d2f436972636f2d6465762f54797065506172736572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Circo-dev/TypeParsers.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Parse strings to Julia types securely (types only, not typed data!).</p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">Retrieving a type from a serialized string is a recurring task. Sometimes we can use Julia serialization, other times it is enough to store every serialized type in a dict, but if we want more flexibility, we need a parser. <code>eval()</code> solves the problem, but it has a huge cost: it is inherently insecure as it allows arbitrary code execution (<a href="https://en.wikipedia.org/wiki/Arbitrary_code_execution" rel="nofollow">ACE on wikipedia</a>).</p>
<p dir="auto">TypeParsers takes the easy route and internally uses <code>eval()</code>. To mitigate the security issue we validate the string before evaluation.
Validation is based on Tom Short's work: <a href="https://gist.github.com/tshort/3835660">https://gist.github.com/tshort/3835660</a> (check the <a href="https://github.com/Circo-dev/TypeParsers.jl/blob/master/test/runtests.jl">validation tests</a>)</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; parsedtype = parsetype(&quot;Array{Int,1}&quot;)
Array{Int64,1}

julia&gt; parsedtype === parsetype(&quot;Base.Array{Int,1}&quot;)
true

julia&gt; array = parsedtype()
0-element Array{Int64,1}"><pre>julia<span class="pl-k">&gt;</span> parsedtype <span class="pl-k">=</span> <span class="pl-c1">parsetype</span>(<span class="pl-s"><span class="pl-pds">"</span>Array{Int,1}<span class="pl-pds">"</span></span>)
Array{Int64,<span class="pl-c1">1</span>}

julia<span class="pl-k">&gt;</span> parsedtype <span class="pl-k">===</span> <span class="pl-c1">parsetype</span>(<span class="pl-s"><span class="pl-pds">"</span>Base.Array{Int,1}<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> array <span class="pl-k">=</span> <span class="pl-c1">parsedtype</span>()
<span class="pl-c1">0</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}</pre></div>
<p dir="auto">You can also pass a module as the second argument.</p>
<h1 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h1>
<p dir="auto">Contributions are welcome!</p>
<p dir="auto">For security issues please use the <code>security</code> label, share  your findings without the sensitive details and request to get in to contact! Thank you very much!</p>
</article></div>