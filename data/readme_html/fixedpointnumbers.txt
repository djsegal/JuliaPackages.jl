<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fixedpointnumbers" class="anchor" aria-hidden="true" href="#fixedpointnumbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FixedPointNumbers</h1>
<p dir="auto"><a href="https://github.com/JuliaMath/FixedPointNumbers.jl/actions"><img src="https://github.com/JuliaMath/FixedPointNumbers.jl/workflows/Unit%20test/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/8293571092f21faacd17e5e6a3edd28e8435f8e56d507f896617be9a6bef526b/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f462f4669786564506f696e744e756d626572732e737667" alt="Build Status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/F/FixedPointNumbers.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMath/FixedPointNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/83c3cc1ad883e77ac6abe429ea736025e111b7509503a4ab811d02ed9aac8dbf/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f4669786564506f696e744e756d626572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="coverage" data-canonical-src="https://codecov.io/gh/JuliaMath/FixedPointNumbers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This library implements fixed-point number types.  A
<a href="http://en.wikipedia.org/wiki/Fixed-point_arithmetic" rel="nofollow">fixed-point number</a> represents a fractional, or
non-integral, number.  In contrast with the more widely known
floating-point numbers, with fixed-point numbers the decimal point
doesn't "float": fixed-point numbers are effectively integers that are
interpreted as being scaled by a constant factor.  Consequently, they
have a fixed number of digits (bits) after the decimal (radix) point.</p>
<p dir="auto">Fixed-point numbers can be used to perform arithmetic. Another practical
application is to implicitly rescale integers without modifying the
underlying representation.</p>
<p dir="auto">This library exports two categories of fixed-point types. Fixed-point types are
used like any other number: they can be added, multiplied, raised to a power,
etc. In some cases these operations result in conversion to floating-point types.</p>
<h1 dir="auto"><a id="user-content-type-hierarchy-and-interpretation" class="anchor" aria-hidden="true" href="#type-hierarchy-and-interpretation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Type hierarchy and interpretation</h1>
<p dir="auto">This library defines an abstract type <code>FixedPoint{T &lt;: Integer, f}</code> as a
subtype of <code>Real</code>. The parameter <code>T</code> is the underlying machine representation and <code>f</code>
is the number of fraction bits.</p>
<p dir="auto">For <code>T&lt;:Signed</code> (a signed integer), there is a fixed-point type
<code>Fixed{T, f}</code>; for <code>T&lt;:Unsigned</code> (an unsigned integer), there is the
<code>Normed{T, f}</code> type. However, there are slight differences in behavior
that go beyond signed/unsigned distinctions.</p>
<p dir="auto">The <code>Fixed{T,f}</code> types use 1 bit for sign, and <code>f</code> bits to represent
the fraction. For example, <code>Fixed{Int8,7}</code> uses 7 bits (all bits
except the sign bit) for the fractional part. The value of the number
is interpreted as if the integer representation has been divided by
<code>2^f</code>. Consequently, <code>Fixed{Int8,7}</code> numbers <code>x</code> satisfy</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="-1.0 = -128/128 ≤ x ≤ 127/128 ≈ 0.992."><pre><span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">128</span><span class="pl-k">/</span><span class="pl-c1">128</span> <span class="pl-k">≤</span> x <span class="pl-k">≤</span> <span class="pl-c1">127</span><span class="pl-k">/</span><span class="pl-c1">128</span> <span class="pl-k">≈</span> <span class="pl-c1">0.992</span>.</pre></div>
<p dir="auto">because the range of <code>Int8</code> is from -128 to 127.</p>
<p dir="auto">In contrast, the <code>Normed{T,f}</code>, with <code>f</code> fraction bits, map the closed
interval [0.0,1.0] to the span of numbers with <code>f</code> bits.  For example,
the <code>N0f8</code> type (aliased to <code>Normed{UInt8,8}</code>) is represented
internally by a <code>UInt8</code>, and makes <code>0x00</code> equivalent to <code>0.0</code> and
<code>0xff</code> to <code>1.0</code>. Consequently, <code>Normed</code> numbers are scaled by <code>2^f-1</code>
rather than <code>2^f</code>.  The type aliases <code>N6f10</code>, <code>N4f12</code>,
<code>N2f14</code>, and <code>N0f16</code> are all based on <code>UInt16</code> and reach the
value <code>1.0</code> at 10, 12, 14, and 16 bits, respectively (<code>0x03ff</code>,
<code>0x0fff</code>, <code>0x3fff</code>, and <code>0xffff</code>). The <code>NXfY</code> notation is used for
compact printing and the <code>fY</code> component informs about the number of
fractional bits and <code>X+Y</code> equals the number of underlying bits used.</p>
<p dir="auto">To construct such a number, use <code>1.3N4f12</code>, <code>N4f12(1.3)</code>, <code>convert(N4f12, 1.3)</code>,
<code>Normed{UInt16,12}(1.3)</code>, or <code>reinterpret(N4f12, 0x14cc)</code>.
The last syntax means to construct a <code>N4f12</code> from the <code>UInt16</code> value <code>0x14cc</code>.</p>
<p dir="auto">More generally, an arbitrary number of bits from any of the standard unsigned
integer widths can be used for the fractional part.  For example:
<code>Normed{UInt32,16}</code>, <code>Normed{UInt64,3}</code>, <code>Normed{UInt128,7}</code>.</p>
<h1 dir="auto"><a id="user-content-computation-with-fixed-and-normed-numbers" class="anchor" aria-hidden="true" href="#computation-with-fixed-and-normed-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computation with Fixed and Normed numbers</h1>
<p dir="auto">You can perform mathematical operations with <code>FixedPoint</code> numbers, but keep in mind
that they are vulnerable to both <a href="https://en.wikipedia.org/wiki/Round-off_error" rel="nofollow">rounding</a> and <a href="https://en.wikipedia.org/wiki/Integer_overflow" rel="nofollow">overflow</a>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = N0f8(0.8)
0.8N0f8

julia&gt; float(x) + x
1.6f0

julia&gt; x + x
0.596N0f8"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">N0f8</span>(<span class="pl-c1">0.8</span>)
<span class="pl-c1">0.8</span>N0f8

julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(x) <span class="pl-k">+</span> x
<span class="pl-c1">1.6f0</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">+</span> x
<span class="pl-c1">0.596</span>N0f8</pre></div>
<p dir="auto">This is a consequence of the rules that govern overflow in integer arithmetic:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; y = reinterpret(x)        # `reinterpret(x::FixedPoint)` reinterprets as the underlying &quot;raw&quot; type
0xcc

julia&gt; reinterpret(N0f8, y + y)  # add two UInt8s and then reinterpret as N0f8
0.596N0f8"><pre>julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">reinterpret</span>(x)        <span class="pl-c"><span class="pl-c">#</span> `reinterpret(x::FixedPoint)` reinterprets as the underlying "raw" type</span>
<span class="pl-c1">0xcc</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reinterpret</span>(N0f8, y <span class="pl-k">+</span> y)  <span class="pl-c"><span class="pl-c">#</span> add two UInt8s and then reinterpret as N0f8</span>
<span class="pl-c1">0.596</span>N0f8</pre></div>
<p dir="auto">Similarly,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = eps(N0f8)             # smallest nonzero `N0f8` number
0.004N0f8

julia&gt; x*x
0.0N0f8"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">eps</span>(N0f8)             <span class="pl-c"><span class="pl-c">#</span> smallest nonzero `N0f8` number</span>
<span class="pl-c1">0.004</span>N0f8

julia<span class="pl-k">&gt;</span> x<span class="pl-k">*</span>x
<span class="pl-c1">0.0</span>N0f8</pre></div>
<p dir="auto">which is rounding-induced <a href="https://en.wikipedia.org/wiki/Arithmetic_underflow" rel="nofollow">underflow</a>.  Finally,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = N4f12(15)
15.0N4f12

julia&gt; x*x
ERROR: ArgumentError: Normed{UInt16,12} is a 16-bit type representing 65536 values from 0.0 to 16.0037; cannot represent 225.0
Stacktrace:
 [1] throw_converterror(::Type{Normed{UInt16,12}}, ::Float32) at /home/tim/.julia/dev/FixedPointNumbers/src/FixedPointNumbers.jl:251
 [2] _convert at /home/tim/.julia/dev/FixedPointNumbers/src/normed.jl:77 [inlined]
 [3] FixedPoint at /home/tim/.julia/dev/FixedPointNumbers/src/FixedPointNumbers.jl:51 [inlined]
 [4] convert at ./number.jl:7 [inlined]
 [5] *(::Normed{UInt16,12}, ::Normed{UInt16,12}) at /home/tim/.julia/dev/FixedPointNumbers/src/normed.jl:254
 [6] top-level scope at REPL[16]:1"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">N4f12</span>(<span class="pl-c1">15</span>)
<span class="pl-c1">15.0</span>N4f12

julia<span class="pl-k">&gt;</span> x<span class="pl-k">*</span>x
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> Normed{UInt16,<span class="pl-c1">12</span>} is a <span class="pl-c1">16</span><span class="pl-k">-</span>bit type representing <span class="pl-c1">65536</span> values from <span class="pl-c1">0.0</span> to <span class="pl-c1">16.0037</span>; cannot represent <span class="pl-c1">225.0</span>
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">throw_converterror</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Normed{UInt16,12}}</span>, <span class="pl-k">::</span><span class="pl-c1">Float32</span>) at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>FixedPointNumbers<span class="pl-k">/</span>src<span class="pl-k">/</span>FixedPointNumbers<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">251</span>
 [<span class="pl-c1">2</span>] _convert at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>FixedPointNumbers<span class="pl-k">/</span>src<span class="pl-k">/</span>normed<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">77</span> [inlined]
 [<span class="pl-c1">3</span>] FixedPoint at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>FixedPointNumbers<span class="pl-k">/</span>src<span class="pl-k">/</span>FixedPointNumbers<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">51</span> [inlined]
 [<span class="pl-c1">4</span>] convert at <span class="pl-k">./</span>number<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">7</span> [inlined]
 [<span class="pl-c1">5</span>] <span class="pl-k">*</span>(<span class="pl-k">::</span><span class="pl-c1">Normed{UInt16,12}</span>, <span class="pl-k">::</span><span class="pl-c1">Normed{UInt16,12}</span>) at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>FixedPointNumbers<span class="pl-k">/</span>src<span class="pl-k">/</span>normed<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">254</span>
 [<span class="pl-c1">6</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">16</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">In some circumstances, it may make most sense to think of <code>FixedPoint</code> numbers as <em>storage types</em>
rather than computational types. You can call <code>float(x)</code> to convert <code>x</code> to a floating-point equivalent that is reasonably
safe for computation; in the type domain, <code>floattype(T::Type)</code> returns the corresponding type.
Note that in some cases <code>floattype(T)</code> differs from <code>float</code>'s behavior on the corresponding "raw" type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; float(UInt8)
Float64

julia&gt; floattype(N0f8)
Float32"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(UInt8)
Float64

julia<span class="pl-k">&gt;</span> <span class="pl-c1">floattype</span>(N0f8)
Float32</pre></div>
<p dir="auto">Because of the role of FixedPointNumbers in domains such as image-processing, this package tries to limit the expansion of the
number of bits needed to store results.</p>
<h2 dir="auto"><a id="user-content-contributing-to-this-package" class="anchor" aria-hidden="true" href="#contributing-to-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing to this package</h2>
<p dir="auto">Please see <a href="CONTRIBUTING.md">CONTRIBUTING.md</a> for information about improving this package.</p>

</article></div>