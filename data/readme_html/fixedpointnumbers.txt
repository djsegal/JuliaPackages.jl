<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fixedpointnumbers" class="anchor" aria-hidden="true" href="#fixedpointnumbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FixedPointNumbers</h1>
<p><a href="https://travis-ci.org/JuliaMath/FixedPointNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/700beb497b33e3ec5b072ad18adb8f4364a958ad/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f4669786564506f696e744e756d626572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/FixedPointNumbers.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaMath/FixedPointNumbers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/30573554e317ed152e2126df478b4b5fae38710c/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614d6174682f4669786564506f696e744e756d626572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaMath/FixedPointNumbers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This library implements fixed-point number types.  A
<a href="http://en.wikipedia.org/wiki/Fixed-point_arithmetic" rel="nofollow">fixed-point number</a> represents a fractional, or
non-integral, number.  In contrast with the more widely known
floating-point numbers, with fixed-point numbers the decimal point
doesn't "float": fixed-point numbers are effectively integers that are
interpreted as being scaled by a constant factor.  Consequently, they
have a fixed number of digits (bits) after the decimal (radix) point.</p>
<p>Fixed-point numbers can be used to perform arithmetic. Another practical
application is to implicitly rescale integers without modifying the
underlying representation.</p>
<p>This library exports two categories of fixed-point types. Fixed-point types are
used like any other number: they can be added, multiplied, raised to a power,
etc. In some cases these operations result in conversion to floating-point types.</p>
<h1><a id="user-content-type-hierarchy-and-interpretation" class="anchor" aria-hidden="true" href="#type-hierarchy-and-interpretation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type hierarchy and interpretation</h1>
<p>This library defines an abstract type <code>FixedPoint{T &lt;: Integer, f}</code> as a
subtype of <code>Real</code>. The parameter <code>T</code> is the underlying machine representation and <code>f</code>
is the number of fraction bits.</p>
<p>For <code>T&lt;:Signed</code> (a signed integer), there is a fixed-point type
<code>Fixed{T, f}</code>; for <code>T&lt;:Unsigned</code> (an unsigned integer), there is the
<code>Normed{T, f}</code> type. However, there are slight differences in behavior
that go beyond signed/unsigned distinctions.</p>
<p>The <code>Fixed{T,f}</code> types use 1 bit for sign, and <code>f</code> bits to represent
the fraction. For example, <code>Fixed{Int8,7}</code> uses 7 bits (all bits
except the sign bit) for the fractional part. The value of the number
is interpreted as if the integer representation has been divided by
<code>2^f</code>. Consequently, <code>Fixed{Int8,7}</code> numbers <code>x</code> satisfy</p>
<pre><code>-1.0 = -128/128 ≤ x ≤ 127/128 ≈ 0.992.
</code></pre>
<p>because the range of <code>Int8</code> is from -128 to 127.</p>
<p>In contrast, the <code>Normed{T,f}</code>, with <code>f</code> fraction bits, map the closed
interval [0.0,1.0] to the span of numbers with <code>f</code> bits.  For example,
the <code>N0f8</code> type (aliased to <code>Normed{UInt8,8}</code>) is represented
internally by a <code>UInt8</code>, and makes <code>0x00</code> equivalent to <code>0.0</code> and
<code>0xff</code> to <code>1.0</code>. Consequently, <code>Normed</code> numbers are scaled by <code>2^f-1</code>
rather than <code>2^f</code>.  The type aliases <code>N6f10</code>, <code>N4f12</code>,
<code>N2f14</code>, and <code>N0f16</code> are all based on <code>UInt16</code> and reach the
value <code>1.0</code> at 10, 12, 14, and 16 bits, respectively (<code>0x03ff</code>,
<code>0x0fff</code>, <code>0x3fff</code>, and <code>0xffff</code>). The <code>NXfY</code> notation is used for
compact printing and the <code>fY</code> component informs about the number of
fractional bits and <code>X+Y</code> equals the number of underlying bits used.</p>
<p>To construct such a number, use <code>convert(N4f12, 1.3)</code>, <code>N4f12(1.3)</code>,
<code>Normed{UInt16,12}(1.3)</code>, or <code>reinterpret(N4f12, 0x14cc)</code>.
The latter syntax means to construct a <code>N4f12</code> (it ends in
<code>uf12</code>) from the <code>UInt16</code> value <code>0x14cc</code>.</p>
<p>More generally, an arbitrary number of bits from any of the standard unsigned
integer widths can be used for the fractional part.  For example:
<code>Normed{UInt32,16}</code>, <code>Normed{UInt64,3}</code>, <code>Normed{UInt128,7}</code>.</p>
</article></div>