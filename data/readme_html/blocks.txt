<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-blocks" class="anchor" aria-hidden="true" href="#blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Blocks</h1>
<p>A framework to:</p>
<ul>
<li>represent chunks of an entity</li>
<li>represent processor affinities of the chunks (if any)</li>
<li>compose actions (both local and remote) on chunks by chaining functions</li>
<li>do map and reduce operations with the above</li>
</ul>
<p>It represents a typical pattern observed across several types of parallel processing tasks. The Blocks framework can be leveraged to build convenience APIs for parallelizing such tasks. The composability of Blocks lends to a convenient and compact syntax.</p>
<p>As examples of its utility, it has been used to implement chunked and distributed operations on disk files, HDFS files, IO streams, arrays, matrices, and dataframes. Some of them are included in the Blocks module while the rest are available as sub modules of Blocks:</p>
<ul>
<li>Blocks.MatOp</li>
</ul>
<p><a href="https://travis-ci.org/JuliaParallel/Blocks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3fe30bdf631478998b71fcfcd85f01c4a0dbc6e4/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961506172616c6c656c2f426c6f636b732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaParallel/Blocks.jl.png" style="max-width:100%;"></a></p>
<h3><a id="user-content-creating-blocks" class="anchor" aria-hidden="true" href="#creating-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Blocks</h3>
<h4><a id="user-content-disk-files" class="anchor" aria-hidden="true" href="#disk-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Disk Files</h4>
<pre><code>using Blocks

Block(file::File, nblocks::Int=0)
    Where nblocks is the number of chunks to divide the file into.
    Number of chunks (nblocks) defaults to number of worker processes.
    Each chunk is represented as the file and the byte range.
    Assumes that the file is available at all processors and chunks can be processed anywhere.
</code></pre>
<h4><a id="user-content-hdfs-files" class="anchor" aria-hidden="true" href="#hdfs-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HDFS Files</h4>
<pre><code>using Blocks
using HDFS

Block(file::HdfsURL)
    Each chunk is a block in HDFS.
    Processor affinity of each chunk is set to machines where this block has been replicated by HDFS.
</code></pre>
<h4><a id="user-content-arrays" class="anchor" aria-hidden="true" href="#arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arrays:</h4>
<pre><code>using Blocks

Block(A::Array, dims::Array)
    Chunks created across dimensions specified in dims.
    Chunks are not pre-distributed and any chunk can be processed at any processor.

Block(A::Array, dim::Int, nblocks::Int)
    Chunked to nblocks chunks on dimension dim.
    Chunks are not pre-distributed and any chunk can be processed at any processor.
</code></pre>
<h4><a id="user-content-matrix-operations" class="anchor" aria-hidden="true" href="#matrix-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Matrix Operations</h4>
<p>Parallelized operations on matrices can be represented and executed using Blocks. Module <code>Blocks.MatOp</code> provides a set of convenience APIs using the <code>MatOpBlock</code> object.</p>
<pre><code>julia&gt; using Blocks

julia&gt; using Blocks.MatOp

julia&gt; # create two matrices

julia&gt; m1 = rand(Int, 6, 10);

julia&gt; m2 = rand(Int, 10, 6);

julia&gt; # create a parallel matrix operation using the two, multiplication in this case

julia&gt; mb = MatOpBlock(m1, m2, :*, 3);

julia&gt; # represent that in blocks

julia&gt; blk = Block(mb);

julia&gt; # execute the operation

julia&gt; result = op(blk);

julia&gt; # verify the result

julia&gt; tr = m1*m2;

julia&gt; all(tr .== result)
true
</code></pre>
<p><code>Blocks.MatOp</code> can be made to work on any <code>AbstractMatrix</code> implementation, as long as there is:</p>
<ul>
<li>a function <code>Blocks(A, splits)</code>, where <code>A</code> is the matrix and <code>splits</code> is a <code>Tuple</code> of ranges (as returned from <code>mat_split_ranges</code>)</li>
<li>a function <code>matrixpart(blk)</code>, which returns a chunk of <code>A</code> that the block <code>blk</code> represents</li>
</ul>
<h4><a id="user-content-streams" class="anchor" aria-hidden="true" href="#streams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Streams:</h4>
<pre><code>using Blocks

Block(stream::Union(IOStream,AsyncStream,IOBuffer,BlockIO), maxsize::Int)
    Iterating on the block thus created would read a chunk of data from `stream`.
    Each chunk will represent a `maxsize` sized data block read from `stream`.

Block(stream::Union(IOStream,AsyncStream,IOBuffer,BlockIO), approxsize::Int, dlm::Char)
    Iterating on the block thus created would read a chunk of data from `stream`.
    Each chunk is  approximately of size `approxsize` and ends with the `dlm` character.
</code></pre>
<h4><a id="user-content-distributed-dataframes-discontinued" class="anchor" aria-hidden="true" href="#distributed-dataframes-discontinued"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Distributed DataFrames (discontinued):</h4>
<p>Blocks introduces a distributed <code>DataFrame</code> type named <code>DDataFrame</code>. It holds referenced to multiple remote data frames, on multiple processors. A large table can be read in parallel into a DDataFrame by using the special <code>dreadtable</code> method.</p>
<pre><code>using Blocks
using DataFrames

dreadtable(filename::String; kwargs...)
dreadtable(blocks::Block; kwargs...)
    Where blocks are created from disk or HDFS files or from streams as described in sections above.
dreadtable(ios::Union(AsyncStream,IOStream), chunk_sz::Int, merge_chunks::Bool=true; kwargs...)
    Where 
        ios is a stream of data
        chunk_sz is the approximate number of bytes to chunk the data into
        merge_chunks indicates whether all chunks on a single processor should be merged. 
        Merging discards positional information but makes the dataframe efficient by having fewer chunks.
</code></pre>
<p>A <code>DDataFrame</code> is easily represented as Blocks. <code>DDataFrame</code> has been used with <code>Blocks</code> to implement most <code>DataFrame</code> operations in a distributed manner. Most methods defined on a DataFrame also work on DDataFrames in a distributed manner using <code>pmap</code> and <code>reduce</code> to operate on chunks parallely.</p>
<pre><code>julia&gt; using Blocks

julia&gt; using DataFrames

julia&gt; dt = dreadtable("test.csv")
100x10 DDataFrame. 2 blocks over 2 processors

julia&gt; head(dt)
6x10 DataFrame:
               x1        x2        x3        x4        x5        x6        x7       x8       x9      x10
[1,]     0.105518  0.173988  0.244224 0.0174508 0.0969595   0.12792  0.316974 0.852373 0.165014 0.886957
[2,]     0.319401 0.0719447 0.0019209  0.285511  0.945343  0.926718  0.162048 0.118748 0.361014 0.611316
[3,]     0.516926  0.473779  0.867099  0.408605  0.579969  0.111174 0.0790296 0.263822 0.073827 0.187637
[4,]     0.579538  0.319672  0.600223  0.707782  0.806437  0.402244  0.670792  0.10981 0.518356 0.604807
[5,]     0.660944  0.648076  0.611529  0.885457  0.550101 0.0634721  0.152263 0.855182 0.408393 0.473676
[6,]    0.0324734   0.22839  0.812387   0.59965  0.143703    0.1337  0.945763 0.296137 0.875762 0.989037

julia&gt; colsums(dt)
1x10 DataFrame:
             x1      x2      x3      x4      x5      x6     x7      x8      x9     x10
[1,]    46.1597 41.9286 51.4197 50.1906 48.2623 44.5622 50.914 50.7266 44.1346 51.1001

julia&gt; all(dt+dt .== 2*dt)
true
</code></pre>
<h3><a id="user-content-composing-actions-on-blocks" class="anchor" aria-hidden="true" href="#composing-actions-on-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Composing Actions on Blocks</h3>
<p>Functions can be chained and then applied on to chunks in a block with a <code>pmap</code> or <code>pmapreduce</code>. The Julia notation <code>|&gt;</code> is used to indicate chaining. For example to read a block of DataFrame from a chunk of a disk file:</p>
<pre><code>b = Block(File(filename)) |&gt; as_io |&gt; as_recordio |&gt; as_dataframe
</code></pre>
<p>Each function in the chain works on the output of the previous function.</p>
<p>Sometimes it is necessary to separate some of the actions that must be applied locally and serially (e.g. reading from an IO stream), from the remaining that can be distributed to remote processors (e.g. creating a dataframe out of the data chunk). Such actions can be chained by prepending the chain of functions with a <code>@prepare</code> macro.</p>
<pre><code>b = Block(File(filename))
b = @prepare b |&gt; as_io |&gt; as_recordio |&gt; as_bytearray
b = b |&gt; as_dataframe |&gt; nrows
</code></pre>
<p>Following is a list of functions provided in the package. User specified functions can be chained in as well:</p>
<ul>
<li><code>as_io</code>: creates an <code>IO</code> instance from streams or files</li>
<li><code>as_recordio</code>: creates an <code>IO</code> instance from streams or files where begin and end positions are adjusted to the boundaries of delimited records</li>
<li><code>as_lines</code>: creates an array of lines from <code>IO</code></li>
<li><code>as_bufferedio</code>: creates buffered <code>IO</code> from any other <code>IO</code></li>
<li><code>as_bytearray</code>: creates bytearray from any <code>IO</code></li>
<li><code>as_dataframe</code>: creates a dataframe from any <code>IO</code></li>
</ul>
<h3><a id="user-content-map-and-reduces-on-blocks" class="anchor" aria-hidden="true" href="#map-and-reduces-on-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Map and Reduces on Blocks</h3>
<p>Regular Julia map-reduce methods can be used on blocks. The map methods receive the chunks as they have been processed by the chain of actions composed into the Blocks.</p>
<pre><code>julia&gt; ba = Block([1:100], 1, 10);

julia&gt; pmap(x-&gt;sum(x), ba)
10-element Any Array:
  55
 155
 255
 355
 455
 555
 655
 755
 855
 955

julia&gt; pmapreduce(x-&gt;sum(x), +, ba)
5050

julia&gt; ba = Block([1:100], 1, 10);

julia&gt; map(x-&gt;sum(x), ba)
10-element Any Array:
  55
 155
 255
 355
 455
 555
 655
 755
 855
 955

julia&gt; mapreduce(x-&gt;sum(x), +, ba)
5050
</code></pre>
<h3><a id="user-content-defining-blocks-for-a-new-type" class="anchor" aria-hidden="true" href="#defining-blocks-for-a-new-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Defining Blocks for a new type</h3>
<p>It is easy to define Blocks for a new type. The minimum requirement is just the constructor: <code>Block(data::T,...)</code>.
In the <code>Block{T}</code> structure returned,</p>
<ul>
<li>elements of <code>block</code> define a chunk of <code>T</code> with enough information that can be serialized to a remote node and recreated</li>
<li>elements of <code>affinity</code> define one or more processors where the corresponding element of <code>block</code> can be accessed</li>
<li>the <code>prepare</code> function pre-processes <code>block</code> elements on the master node, before they are serialized to the remote node</li>
<li>the <code>filter</code> function processes <code>block</code> elements on the remote node</li>
</ul>
<p>Both <code>prepare</code> and <code>filter</code> functions can be chained after construction.</p>
<p>In addition to that, you may also override the default implementations of the following:</p>
<ul>
<li><code>blocks{T}(b::Block{T})</code>: return an iterator over the chunk definitions</li>
<li><code>affinities{T}(b::Block{T})</code>: return an iterator over the chunk affinities</li>
<li><code>localpart(blk::Block)</code>: return only the blocks that are local to the current processor</li>
</ul>
<h3><a id="user-content-sample-use-cases-todo" class="anchor" aria-hidden="true" href="#sample-use-cases-todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sample Use Cases (TODO)</h3>
<ul>
<li>Sorting Disk Files</li>
<li>Distributed DataFrame from streaming data</li>
<li>Continuous summarization of streaming data using DataFrames</li>
</ul>
</article></div>