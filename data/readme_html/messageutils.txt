<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-messageutils" class="anchor" aria-hidden="true" href="#messageutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MessageUtils</h1>
<p>A collection of utilities for messaging</p>
<h2><a id="user-content-channels" class="anchor" aria-hidden="true" href="#channels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Channels</h2>
<p>Channels are like RemoteRefs, execpt that they are modelled as a queue and hence can hold
more than one message.</p>
<p><code>channel(pid=myid(); T=Any, sz=1000)</code> constructs a channel on process <code>pid</code>, holds objects of
type <code>T</code> with a maximum number of entries <code>sz</code>.</p>
<p>The <code>channel</code> constructor returns an object reference of type <code>SyncObjRef{RemoteChannel}</code>
which can be passed around safely across processes.</p>
<p><code>isready(c)</code>, <code>fetch(c)</code>, <code>take!(c)</code> and <code>put!(c, v)</code> have the same behaviour as the <code>RemoteRef</code>
equivalents.</p>
<p><code>fetch</code> and <code>take!</code> block if there are no elements.</p>
<p><code>put!</code> blocks if the channel already has <code>sz</code> elements present.</p>
<p><code>fetch</code>, <code>take!</code> and <code>put!</code> all accept an optional <code>keyword</code> argument <code>timeout</code> which specifies
the maximum number of seconds to block. If the request cannot be fulfilled within the requested
time a <code>MUtilTimeOutEx</code> exception is thrown.</p>
<h2><a id="user-content-tspaces" class="anchor" aria-hidden="true" href="#tspaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TSpaces</h2>
<p>TSpaces are tuple spaces. They store tuples, the first element of each tuple is a key
to the tuple.</p>
<p>The tuples are stored as a queue and duplicates are allowed.</p>
<p><code>tspace(pid=myid(); sz=1000)</code> constructs a new tuple space and returns
a <code>SyncObjRef{RemoteTSpace}</code></p>
<p><code>put!(ts, v::Tuple)</code> adds a tuple <code>v</code> into the space <code>ts</code>.</p>
<p><code>isready(ts,k)</code>, <code>fetch(ts, k)</code> and <code>take!(ts, k)</code> all require the key <code>k</code> to be specified when
used on a tuple space <code>ts</code>. It is matched against the first element of the tuples in the space.</p>
<p>If <code>k</code> is a <code>Regex</code> object, it is matched against all tuples where the firest element is a
<code>String</code></p>
<p><code>fetch</code>, <code>take!</code> and <code>put!</code> all accept an optional <code>keyword</code> argument <code>timeout</code> which specifies
the maximum number of seconds to block. If the request cannot be fulfilled within the requested
time a <code>MUtilTimeOutEx</code> exception is thrown.</p>
<h2><a id="user-content-kvspaces" class="anchor" aria-hidden="true" href="#kvspaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>KVSpaces</h2>
<p>This is a key-value store.</p>
<p><code>kvspace(pid=myid(); sz=1000)</code> constructs a new key-value space and returns
a <code>SyncObjRef{RemoteKVSpace}</code>. Duplicates are not allowed. A <code>put!</code> with an existing key
overwrites the existing value</p>
<p><code>put!(kvs, k, v)</code> adds key <code>k</code> and value <code>v</code> into the space <code>kvs</code>.</p>
<p><code>isready(kvs,k)</code>, <code>fetch(kvs, k)</code> and <code>take!(kvs, k)</code> all require the key <code>k</code> to be specified when
used on a kv space <code>kvs</code>.</p>
<p><code>fetch</code>, <code>take!</code> and <code>put!</code> all accept an optional <code>keyword</code> argument <code>timeout</code> which specifies
the maximum number of seconds to block. If the request cannot be fulfilled within the requested
time a <code>MUtilTimeOutEx</code> exception is thrown.</p>
<h2><a id="user-content-ctasks---tasks-with-channels" class="anchor" aria-hidden="true" href="#ctasks---tasks-with-channels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ctasks - Tasks with Channels</h2>
<p>ctasks are named tasks with channels. The channels are used for messaging with the task.</p>
<p><code>ctask(f::Function; pid=myid(), name="")</code> returns a <code>CTask</code> object that can be passed around
processors.</p>
<p><code>f</code> is the function lanuched on processor <code>pid</code>. The ctask runs till function <code>f</code> terminates.
If <code>name</code> is specified, the task is addressable by name. The name-ctask mapping is stored in
a KV Space on pid 1.</p>
<p>Every ctask has two channels associated with it. One for incoming messages and one for outbound
messages.</p>
<p>The following functions can be used to send/recv messages from these channels.</p>
<p><code>put!(msg::Tuple)</code> appends a message to a tasks outbound channel</p>
<p><code>put!(ct::CTask, msg::Tuple)</code> appends a message to task <code>ct</code>'s inbound channel</p>
<p><code>put!(ctname::String, msg::Tuple)</code> appends a message to task addressed by <code>ctname</code>'s inbound channel</p>
<p><code>take!()</code> pops a message from the current tasks inbound channel</p>
<p><code>take!(ct::CTask)</code> pops a message from task <code>ct</code>'s outbound channel</p>
<p><code>take!(ctname::String)</code> pops a message from the task addressed by <code>ctname</code>'s outbound channel</p>
<p>The pipelining operator <code>|&gt;</code> can be used to send a message to a task. For example:</p>
<p><code>(:test_msg, "Hello") |&gt; ct</code> will add the tuple <code>(:test_msg, "Hello")</code> to <code>ct</code>'s inbound channel</p>
<p><code>put!</code>, <code>take!</code> both accept an optional <code>keyword</code> argument <code>timeout</code> which specifies
the maximum number of seconds to block. If the request cannot be fulfilled within the requested
time a <code>MUtilTimeOutEx</code> exception is thrown.</p>
<p>Note: The Julia 0.3 compatible version has <code>send</code>/<code>recv</code> in place of <code>put!</code>/<code>take</code>.
This has been renamed in 0.4 for consistency.</p>
</article></div>