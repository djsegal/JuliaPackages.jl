<div id="readme" class="org" data-path="README.org"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-solvertracesjl" class="anchor" aria-hidden="true" href="#solvertracesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SolverTraces.jl</h1>
<p dir="auto"><a href="https://jagot.github.io/SolverTraces.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="https://img.shields.io/badge/docs-stable-blue.svg" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
  <a href="https://jagot.github.io/SolverTraces.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="https://img.shields.io/badge/docs-dev-blue.svg" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
  <a href="https://github.com/jagot/SolverTraces.jl/actions"><img src="https://github.com/jagot/SolverTraces.jl/workflows/CI/badge.svg" alt="https://github.com/jagot/SolverTraces.jl/workflows/CI/badge.svg" style="max-width: 100%;"></a>
  <a href="https://codecov.io/gh/jagot/SolverTraces.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e48dbc16356d193bcaac427780c532ecdbb6e53ba6184060dcd3adf0a4e390e8/68747470733a2f2f636f6465636f762e696f2f67682f6a61676f742f536f6c7665725472616365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="https://codecov.io/gh/jagot/SolverTraces.jl/branch/master/graph/badge.svg" data-canonical-src="https://codecov.io/gh/jagot/SolverTraces.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Small utility library for printing solver traces. Based around
  <a href="https://github.com/JuliaIO/Formatting.jl">Formatting.jl</a> and <a href="https://github.com/KristofferC/Crayons.jl">Crayons.jl</a>.</p>
<h1 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SolverTraces
using Formatting
using Crayons

# Custom column type, needs to inherit TraceColumn and have a fmt
# field.
struct Random{R&lt;:Real} &lt;: TraceColumn
    fmt::FormatExpr
    lc::LinearColorant{R}
    header::String
end

Random(::Type{R}=Float64) where R =
    Random{R}(FormatExpr(&quot;{1:s}{2:9.3e}$(crayon&quot;reset&quot;)&quot;),
            LinearColorant(1.0, 0.0, SolverTraces.red_green_scale()),
            &quot;   Random&quot;)

# Also needs to be callable with current step as argument.
function (c::Random)(i::Integer)
    n = rand()
    c.lc(n), n
end

num_steps = 1000
load = 10
trace = SolverTrace(num_steps)
# How much load per second can be handled
push!(trace, Performance(load))
push!(trace, Random())

print_header(trace)
for i = 1:num_steps
    sleep(0.0001rand())
    SolverTraces.next!(trace)
end"><pre><span class="pl-k">using</span> SolverTraces
<span class="pl-k">using</span> Formatting
<span class="pl-k">using</span> Crayons

<span class="pl-c"><span class="pl-c">#</span> Custom column type, needs to inherit TraceColumn and have a fmt</span>
<span class="pl-c"><span class="pl-c">#</span> field.</span>
<span class="pl-k">struct</span> Random{R<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">TraceColumn</span>
    fmt<span class="pl-k">::</span><span class="pl-c1">FormatExpr</span>
    lc<span class="pl-k">::</span><span class="pl-c1">LinearColorant{R}</span>
    header<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-en">Random</span>(<span class="pl-k">::</span><span class="pl-c1">Type{R}</span><span class="pl-k">=</span>Float64) <span class="pl-k">where</span> R <span class="pl-k">=</span>
    <span class="pl-c1">Random</span><span class="pl-c1">{R}</span>(<span class="pl-c1">FormatExpr</span>(<span class="pl-s"><span class="pl-pds">"</span>{1:s}{2:9.3e}<span class="pl-v">$(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">crayon</span>"</span>reset<span class="pl-pds">"</span></span>)</span><span class="pl-pds">"</span></span>),
            <span class="pl-c1">LinearColorant</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, SolverTraces<span class="pl-k">.</span><span class="pl-c1">red_green_scale</span>()),
            <span class="pl-s"><span class="pl-pds">"</span>   Random<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Also needs to be callable with current step as argument.</span>
<span class="pl-k">function</span> (c<span class="pl-k">::</span><span class="pl-c1">Random</span>)(i<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    n <span class="pl-k">=</span> <span class="pl-c1">rand</span>()
    c<span class="pl-k">.</span><span class="pl-c1">lc</span>(n), n
<span class="pl-k">end</span>

num_steps <span class="pl-k">=</span> <span class="pl-c1">1000</span>
load <span class="pl-k">=</span> <span class="pl-c1">10</span>
trace <span class="pl-k">=</span> <span class="pl-c1">SolverTrace</span>(num_steps)
<span class="pl-c"><span class="pl-c">#</span> How much load per second can be handled</span>
<span class="pl-c1">push!</span>(trace, <span class="pl-c1">Performance</span>(load))
<span class="pl-c1">push!</span>(trace, <span class="pl-c1">Random</span>())

<span class="pl-c1">print_header</span>(trace)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>num_steps
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.0001</span><span class="pl-c1">rand</span>())
    SolverTraces<span class="pl-k">.</span><span class="pl-c1">next!</span>(trace)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Output on Linux with 24 bit colours available:
  <a target="_blank" rel="noopener noreferrer" href="figures/linux.png"><img src="figures/linux.png" alt="figures/linux.png" style="max-width: 100%;"></a></p>
<p dir="auto">Output on Windows with 16 colours available:
  <a target="_blank" rel="noopener noreferrer" href="figures/windows.png"><img src="figures/windows.png" alt="figures/windows.png" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-future-ideas" class="anchor" aria-hidden="true" href="#future-ideas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future ideas</h1>
<ul dir="auto">
  <li>Nested solver traces for algorithms where each step necessitates
    inner solves. It would be interesting to support such cases and
    have togglable visibility of nested traces.</li>
  <li>Output to other backends than the terminal,
    e.g. HTML: asynchronous display of solver trace in the web browser
    of a computation running remotely.</li>
</ul>
</article></div>