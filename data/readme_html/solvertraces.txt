<div id="readme" class="org" data-path="README.org"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-solvertracesjl" class="anchor" aria-hidden="true" href="#solvertracesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SolverTraces.jl</h1>
<p><a href="https://jagot.github.io/SolverTraces.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="https://img.shields.io/badge/docs-stable-blue.svg" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
  <a href="https://jagot.github.io/SolverTraces.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="https://img.shields.io/badge/docs-dev-blue.svg" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
  <a href="https://travis-ci.com/jagot/SolverTraces.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b002b6543592b8b58237d2e62e4dcdf551b5c52/68747470733a2f2f7472617669732d63692e636f6d2f6a61676f742f536f6c7665725472616365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.com/jagot/SolverTraces.jl.svg?branch=master" data-canonical-src="https://travis-ci.com/jagot/SolverTraces.jl.svg?branch=master" style="max-width:100%;"></a>
  <a href="https://ci.appveyor.com/project/jagot/SolverTraces-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/953ff5e6ee3ed0a5056ebc112e551a3c7490c2a1/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f6275696c642f6a61676f742f736f6c7665727472616365732d6a6c2e737667" alt="https://img.shields.io/appveyor/build/jagot/solvertraces-jl.svg" data-canonical-src="https://img.shields.io/appveyor/build/jagot/solvertraces-jl.svg" style="max-width:100%;"></a>
  <a href="https://codecov.io/gh/jagot/SolverTraces.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3df8fe8f7570f024562ba57f7b5eeafd6a16b3f2/68747470733a2f2f636f6465636f762e696f2f67682f6a61676f742f536f6c7665725472616365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="https://codecov.io/gh/jagot/SolverTraces.jl/branch/master/graph/badge.svg" data-canonical-src="https://codecov.io/gh/jagot/SolverTraces.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Small utility library for printing solver traces. Based around
  <a href="https://github.com/JuliaIO/Formatting.jl">Formatting.jl</a> and <a href="https://github.com/KristofferC/Crayons.jl">Crayons.jl</a>.</p>
<h1><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SolverTraces
<span class="pl-k">using</span> Formatting
<span class="pl-k">using</span> Crayons

<span class="pl-c"><span class="pl-c">#</span> Custom column type, needs to inherit TraceColumn and have a fmt</span>
<span class="pl-c"><span class="pl-c">#</span> field.</span>
<span class="pl-k">struct</span> Random{R<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">TraceColumn</span>
    fmt<span class="pl-k">::</span><span class="pl-c1">FormatExpr</span>
    lc<span class="pl-k">::</span><span class="pl-c1">LinearColorant{R}</span>
    header<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-en">Random</span>(<span class="pl-k">::</span><span class="pl-c1">Type{R}</span><span class="pl-k">=</span>Float64) <span class="pl-k">where</span> R <span class="pl-k">=</span>
    <span class="pl-c1">Random</span><span class="pl-c1">{R}</span>(<span class="pl-c1">FormatExpr</span>(<span class="pl-s"><span class="pl-pds">"</span>{1:s}{2:9.3e}<span class="pl-v">$(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">crayon</span>"</span>reset<span class="pl-pds">"</span></span>)</span><span class="pl-pds">"</span></span>),
            <span class="pl-c1">LinearColorant</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, SolverTraces<span class="pl-k">.</span><span class="pl-c1">red_green_scale</span>()),
            <span class="pl-s"><span class="pl-pds">"</span>   Random<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Also needs to be callable with current step as argument.</span>
<span class="pl-k">function</span> (c<span class="pl-k">::</span><span class="pl-c1">Random</span>)(i<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    n <span class="pl-k">=</span> <span class="pl-c1">rand</span>()
    c<span class="pl-k">.</span><span class="pl-c1">lc</span>(n), n
<span class="pl-k">end</span>

num_steps <span class="pl-k">=</span> <span class="pl-c1">1000</span>
load <span class="pl-k">=</span> <span class="pl-c1">10</span>
trace <span class="pl-k">=</span> <span class="pl-c1">SolverTrace</span>(num_steps)
<span class="pl-c"><span class="pl-c">#</span> How much load per second can be handled</span>
<span class="pl-c1">push!</span>(trace, <span class="pl-c1">Performance</span>(load))
<span class="pl-c1">push!</span>(trace, <span class="pl-c1">Random</span>())

<span class="pl-c1">print_header</span>(trace)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>num_steps
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.0001</span><span class="pl-c1">rand</span>())
    SolverTraces<span class="pl-k">.</span><span class="pl-c1">next!</span>(trace)
<span class="pl-k">end</span></pre></div>
<p>Output on Linux with 24 bit colours available:
  <a target="_blank" rel="noopener noreferrer" href="figures/linux.png"><img src="figures/linux.png" alt="figures/linux.png" style="max-width:100%;"></a></p>
<p>Output on Windows with 16 colours available:
  <a target="_blank" rel="noopener noreferrer" href="figures/windows.png"><img src="figures/windows.png" alt="figures/windows.png" style="max-width:100%;"></a></p>
<h1><a id="user-content-future-ideas" class="anchor" aria-hidden="true" href="#future-ideas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future ideas</h1>
<ul>
  <li>Nested solver traces for algorithms where each step necessitates
    inner solves. It would be interesting to support such cases and
    have togglable visibility of nested traces.</li>
  <li>Output to other backends than the terminal,
    e.g. HTML: asynchronous display of solver trace in the web browser
    of a computation running remotely.</li>
</ul>
</article></div>