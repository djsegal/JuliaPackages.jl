<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-thermodynamicstable" class="anchor" aria-hidden="true" href="#thermodynamicstable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ThermodynamicsTable</h1>
<p><a href="https://travis-ci.org/DANA-Laboratory/ThermodynamicsTable.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cd2bfec0be3eceec6f093d6a03144d4f87d5d12a/68747470733a2f2f7472617669732d63692e6f72672f44414e412d4c61626f7261746f72792f546865726d6f64796e616d6963735461626c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/DANA-Laboratory/ThermodynamicsTable.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p><code>ThermodynamicsTable</code> calculates different physical properties of materials, in 0.0.4 version, it can retrieves 17 constants and computes
11 temperature dependent and 1 pressure dependent property for a set of 345 compounds.<br>
Main reference for the quantities are <em>Perry chemical engineering handbook ed.8</em>,
but some values have been updated using data from other sources (e.g. YAWS) for more precision or integrity and also some typo errors have been corrected.<br>
Since 0.0.4 this package was fully reviewed for the aim of achieving a similar interface compare to <em>CAPE-Open Themo 1.1 standard</em> in the case of naming, definitions and behavior.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Refer to CAPE-Open standard a Property Package Manager (PPM), is a software component that manages a set of Property Packages (PP) ,and a Property Package is a software component that can calculate Physical Properties and can retrieve constants for a set of Compounds.<br>
Here <code>ThermodynamicsTable</code> behaves more like a PPM that serves one PP.</p>
<pre><code>julia&gt; using ThermodynamicsTable
`perryanalytic` Property Package was created and is ready to use.
</code></pre>
<p>Two interfaces of CAPE-Open thermo 1.1 standard have been implemented and can be used to interact with the system.</p>
<ol>
<li>ICapeThermoUniversalConstants<br>
Description:<br>
Methods implemented by components that can supply the values of Universal Constants.</li>
</ol>
<pre><code>Units:
  * avogadroConstant =&gt; 1/mol
  * boltzmannConstant =&gt; J/K
  * idealGasStateReferencePressure =&gt; Pa
  * molarGasConstant =&gt; J/mol/K
  * speedOfLightInVacuum =&gt; m/s
  * standardAccelerationOfGravity =&gt; m/s2  

Methods:
  * getuniversalconstant()
  * getuniversalconstantlist()
</code></pre>
<ol start="2">
<li>ICapeThermoCompounds<br>
Description:<br>
Methods implemented by components that need to describe the Compounds that occur or can occur in a Material.</li>
</ol>
<pre><code>Methods:
  * getcompoundlist()
  * getcompoundconstant!()
  * getconstproplist()
  * getnumcompounds()
  * getpdependentproperty!()
  * getpdependentproplist()
  * gettdependentproperty!()
  * gettdependentproplist()
</code></pre>
<pre><code>  using ThermodynamicsTable
  getnumcompounds() # =&gt; 345
  compIds,formulae,names,boilTemps,molwts,casnos=getcompoundlist();
  waterid=findfirst(names,"Water") # =&gt; 342
  println("formulae=$(formulae[waterid]) boilTemps=$(boilTemps[waterid]) molwts=$(molwts[waterid]) casnos=$(casnos[waterid])")
# =&gt; formulae=H2O boilTemps=373.1678389916408 molwts=18.015 casnos=7732-18-5
  getconstproplist()
#=  
    17-element Array{String,1}:
     "iupacName"
     "casRegistryNumber"
     "chemicalFormula"
     "standardFormationGibbsEnergyGas"
     "criticalTemperature"
     "standardEntropyGas"
     "criticalVolume"
     "idealGasGibbsFreeEnergyOfFormationAt25C"
     "molecularWeight"
     "criticalPressure"
     "liquidVolumeAt25C"
     "criticalCompressibilityFactor"
     "standardFormationEnthalpyGas"
     "criticalDensity"
     "normalBoilingPoint"
     "liquidDensityAt25C"
     "heatOfVaporizationAtNormalBoilingPoint"
=#
  comps=UInt16[findfirst(names,name) for name in ["Air","Water","Nitrogen"]];
  propvals=Vector{Union{String,Float64}}();
  try
    getcompoundconstant!(["casRegistryNumber","chemicalFormula","criticalPressure","liquidDensityAt25C"],comps,propvals)
  catch err
    if isa(err,ECapeThrmPropertyNotAvailable)
      println("check $propvals for UNDEFIEND values")
    end
  end
  getpdependentproplist() # =&gt; "boilingPointTemperature"
  propvals=Vector{Float64}()
  getpdependentproperty!(["boilingPointTemperature"],80000.,comps,propvals)
</code></pre>
</article></div>