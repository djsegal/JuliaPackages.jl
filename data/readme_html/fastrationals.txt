<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastrationalsjl" class="anchor" aria-hidden="true" href="#fastrationalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastRationals.jl</h1>
<h3 dir="auto"><a id="user-content-rationals-with-unreal-performance-ùì™" class="anchor" aria-hidden="true" href="#rationals-with-unreal-performance-ùì™"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>rationals with unreal performance <sup><a href="#source">ùì™</a></sup></h3>
<h5 dir="auto"><a id="user-content-copyright--2017-2019-by-jeffrey-sarnoff-this-work-is-released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2017-2019-by-jeffrey-sarnoff-this-work-is-released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copyright ¬© 2017-2019 by Jeffrey Sarnoff. This work is released under The MIT License.</h5>
<hr>
<p dir="auto"><a href="https://travis-ci.org/JeffreySarnoff/FastRationals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4550d5e3f6575ae2a429031c57ac1dafd57a7f58949ca7db61b77e9b52955225/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f46617374526174696f6e616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/FastRationals.jl.svg?branch=master" style="max-width: 100%;"></a>¬†¬†¬†¬†¬†¬†<a href="https://codecov.io/gh/JeffreySarnoff/FastRationals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02d2dbf5f95c984e6944b147d578bb5fdfccf00661685a6de6d189152b3edc15/68747470733a2f2f636f6465636f762e696f2f67682f4a6566667265795361726e6f66662f46617374526174696f6e616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JeffreySarnoff/FastRationals.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<hr>
<h4 dir="auto"><a id="user-content-fastrationals" class="anchor" aria-hidden="true" href="#fastrationals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>FastRationals</code></h4>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/FastRationals.jl#fastrationals-using-fast-integers"><code>FastRational{Int64}</code></a></p>
<ul dir="auto">
<li><a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/README.md#performance-relative-to-system-rationals">performance relative to system rationals</a></li>
</ul>
</li>
<li>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/README.md#rationals-using-bigint"><code>FastRational{BigInt}</code></a></p>
<ul dir="auto">
<li><a href="https://github.com/JeffreySarnoff/FastRationals.jl#what-works-well">what works well</a></li>
<li><a href="https://github.com/JeffreySarnoff/FastRationals.jl#what-does-not-work-well">what does not</a></li>
</ul>
</li>
</ul>
<h4 dir="auto"><a id="user-content-additional-functionality" class="anchor" aria-hidden="true" href="#additional-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>additional functionality</h4>
<ul dir="auto">
<li><a href="https://github.com/JeffreySarnoff/FastRationals.jl#rational-compactification">rational compactification</a></li>
<li><a href="https://github.com/JeffreySarnoff/FastRationals.jl#enhanced-rounding">enhanced rounding</a></li>
</ul>
<hr>
<h2 dir="auto"><a id="user-content-fastrational-types" class="anchor" aria-hidden="true" href="#fastrational-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastRational types</h2>
<p dir="auto">System rationals reduce the result of every rational input and each arithmetic operation to lowest terms.  FastRational types (<code>FastQ32</code>, <code>FastQ64</code>, <code>FastQBig</code>) reduce all rational inputs and reduce each rational value prior to presenting the value. Unlike system rationals, the result of a FastRational arithmetic operation is reduced only if overflow occur while it is being calculated.  With appropriately sized numerators and denominators, this takes less time.</p>
<h3 dir="auto"><a id="user-content-fastrationals-using-fast-integers" class="anchor" aria-hidden="true" href="#fastrationals-using-fast-integers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastRationals using fast integers</h3>
<ul dir="auto">
<li>These types use fast integers : <code>FastRational{Int32} (FastQ32)</code> and <code>FastRational{Int64} (FastQ64)</code>.</li>
<li>Arithmetic is 12x..16x faster and matrix ops are 2x..6x faster when using appropriately ranged values.</li>
</ul>
<p dir="auto">These <code>FastRational</code> types are intended for use with <em>smaller</em> rational values.  To compare two rationals or to calculate the sum, difference, product, or ratio of two rationals requires pairwise multiplication of the constituents of one by the constituents of the other.  Whether or not it overflow depends on the number of leading zeros (<code>leading_zeros</code>) in the binary representation of the absolute value of the numerator and the denominator given with each rational.</p>
<p dir="auto">Of the numerator and denominator, we really want whichever is the larger in magnitude from each value used in an arithmetic op. These values determine whether or not their product may be formed without overflow. That is important to know. It is alright to work as though there is a possiblity of overflow where in fact no overflow will occur.  It is not alright to work as though there is no possiblity of overflow where in fact overflow will occur.  In the first instance, some unnecessary yet unharmful effort is extended.  In the second instance, an overflow error stops the computation.</p>
<h3 dir="auto"><a id="user-content-fastrationals-using-large-integers" class="anchor" aria-hidden="true" href="#fastrationals-using-large-integers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastRationals using large integers</h3>
<ul dir="auto">
<li>
<p dir="auto"><strong>FastRationals</strong> exports types <code>FastRational{Int128} (FastQ128)</code> and <code>FastRational{BigInt} (FastQBig)</code>.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>FastQ128</code> is 1.25x..2x faster than <code>Rational{Int128}</code> when using appropriately ranged values.</p>
</li>
<li>
<p dir="auto"><code>FastQBig</code> with large rationals speeds arithmetic by 25x..250x, and excels at <code>sum</code> and <code>prod</code>.</p>
</li>
<li>
<p dir="auto"><code>FastQBig</code> is best with numerators and denominators that have no more than 25_000 decimal digits.</p>
</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-performance-relative-to-system-rationals" class="anchor" aria-hidden="true" href="#performance-relative-to-system-rationals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>performance relative to system rationals</h2>
<table>
<thead>
<tr>
<th align="left">computation</th>
<th align="center">avg rel speedup</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">mul/div</td>
<td align="center">20</td>
</tr>
<tr>
<td align="left">polyval</td>
<td align="center">18</td>
</tr>
<tr>
<td align="left">add/sub</td>
<td align="center">15</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left">mat mul</td>
<td align="center">10</td>
</tr>
<tr>
<td align="left">mat lu</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">mat inv</td>
<td align="center">3</td>
</tr>
</tbody>
</table>
<ul dir="auto">
<li>
<p dir="auto">avg is of FastQ32 and FastQ64</p>
</li>
<li>
<p dir="auto">polynomial degree is 4, matrix size is 4x4</p>
</li>
<li>
<p dir="auto">This script provided the <a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/benchmarks/relspeed_Q32_Q64.jl">relative speedups</a>.</p>
</li>
</ul>
<hr>
<h2 dir="auto"><a id="user-content-rationals-using-bigint" class="anchor" aria-hidden="true" href="#rationals-using-bigint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rationals using BigInt</h2>
<h4 dir="auto"><a id="user-content-harmonic-numbers" class="anchor" aria-hidden="true" href="#harmonic-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>harmonic numbers</h4>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using FastRationals

n = 10_000
qs = [Rational{BigInt}(1,i) for i=1:n];
fastqs = [FastQBig(1,i) for i=1:n];
qs_time = @belapsed sum($qs);
fastqs_time = @belapsed sum($fastqs);
round(qs_time / fastqs_time, digits=2)"><pre class="notranslate"><code>using FastRationals

n = 10_000
qs = [Rational{BigInt}(1,i) for i=1:n];
fastqs = [FastQBig(1,i) for i=1:n];
qs_time = @belapsed sum($qs);
fastqs_time = @belapsed sum($fastqs);
round(qs_time / fastqs_time, digits=2)
</code></pre></div>
<p dir="auto">(I get 17x)</p>
<h4 dir="auto"><a id="user-content-25_000-decimal-digits" class="anchor" aria-hidden="true" href="#25_000-decimal-digits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>25_000 decimal digits</h4>
<p dir="auto">Up to 25_000 digits, FastRational{BigInt}s <code>FastQBigInt</code> handily outperform <code>Rational{BigInt}</code>s in arithmetic calculation.
When applied to appropriate computations, <code>FastQBigInt</code>s often run 2x-5x faster. These speedups were obtained evaluating
<a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/benchmarks/BBP_for_pi.jl">The Bailey‚ÄìBorwein‚ÄìPlouffe formula for œÄ</a>
at various depths (number of iterations) using <code>Rational{BigInt}</code> and <code>FastRational{BigInt}</code>.</p>
<hr>
<h4 dir="auto"><a id="user-content-what-works-well" class="anchor" aria-hidden="true" href="#what-works-well"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>what works well</h4>
<p dir="auto">The first column holds the number of random Rational{Int128}s used<br>
to generate the random <code>Rational{BigInt}</code> values that were processed.</p>
<p dir="auto">These relative performance numbers are throughput multipliers.<br>
In the time it takes to square an 8x8 Rational{BigInt} matrix,<br>
<strong>thirty</strong> 8x8 FastRational{BigInt} matrices may be squared.</p>
<ul dir="auto">
<li><code>sum</code> and <code>prod</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">n rationals</th>
<th align="center"><code>sum</code> relspeed</th>
<th align="center"><code>prod</code> relspeed</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">200</td>
<td align="center">100</td>
<td align="center">200</td>
</tr>
<tr>
<td align="center">500</td>
<td align="center">200</td>
<td align="center">350</td>
</tr>
</tbody>
</table>
<ul dir="auto">
<li>matrix multiply and trace</li>
</ul>
<table>
<thead>
<tr>
<th align="center">n rationals</th>
<th align="center"><code>mul</code> relspeed</th>
<th align="center"><code>tr</code> relspeed</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">64 (8x8)</td>
<td align="center">15</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">225 (15x15)</td>
<td align="center">20</td>
<td align="center">15</td>
</tr>
</tbody>
</table>
<p dir="auto">This script provided the <a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/benchmarks/relspeed_QBigInt.jl">relative speedups</a>.</p>
<hr>
<h4 dir="auto"><a id="user-content-what-does-not-work-well" class="anchor" aria-hidden="true" href="#what-does-not-work-well"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>what does not work well</h4>
<p dir="auto">Other matrix functions (<code>det</code>, <code>lu</code>, <code>inv</code>) take much, much longer.  &gt;&gt; Fixes welcome &lt;&lt;.</p>
<p dir="auto">Meanwhile, some matrix functions convert first convert FastRationals to system rationals,<br>
compute the result, and reconvert to FastRationals.</p>
<hr>
<h3 dir="auto"><a id="user-content-most-performant-ranges-using-fast-integers" class="anchor" aria-hidden="true" href="#most-performant-ranges-using-fast-integers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Most performant ranges using fast integers</h3>
<p dir="auto"><strong>FastRationals</strong> are at their most performant where overflow is absent or uncommon.  And vice versa: where overflow happens frequently, FastRationals have no intrinsic advantage.  How do we know what range of rational values are desireable?  We want to work with rational values that, for the most part, do not overflow when added, subtracted, multiplied or divided.  As rational calculation tends to grow numerator aor denominator magnitudes, it makes sense to further constrain the working range.  These tables are of some guidance.</p>
<hr>
<h3 dir="auto"><a id="user-content-________--fastq32--______________________________--fastq64--__________" class="anchor" aria-hidden="true" href="#________--fastq32--______________________________--fastq64--__________"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>________  FastQ32  ______________________________  FastQ64  __________</h3>
<table>
<thead>
<tr>
<th align="center">range</th>
<th align="center">refinement</th>
<th align="center"></th>
<th align="center">range</th>
<th align="center">refinement</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">¬±215//1</td>
<td align="center">¬±1//215</td>
<td align="center">sweet spot</td>
<td align="center">¬±55_108//1</td>
<td align="center">¬±1//55_108</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">¬±255//1</td>
<td align="center">¬±1//255</td>
<td align="center">preferable</td>
<td align="center">¬±65_535//1</td>
<td align="center">¬±1//65_535</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">¬±1_023//1</td>
<td align="center">¬±1//1_023</td>
<td align="center">workable</td>
<td align="center">¬±262_143//1</td>
<td align="center">¬±1//262_143</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">¬±4_095//1</td>
<td align="center">¬±1//4_095</td>
<td align="center">admissible</td>
<td align="center">¬±1_048_575//1</td>
<td align="center">¬±1//1_048_575</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto">The calculation of these magnitudes appears <a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/docs/src/thestatelessway.md#quantifying-the-desireable">here</a>.</p>
</blockquote>
<hr>
<h2 dir="auto"><a id="user-content-additional-functionality-1" class="anchor" aria-hidden="true" href="#additional-functionality-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>additional functionality</h2>
<h3 dir="auto"><a id="user-content-rational-compactification" class="anchor" aria-hidden="true" href="#rational-compactification"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>rational compactification</h3>
<ul dir="auto">
<li><code>compactify</code>(rational_to_compactify, rational_radius_of_indifference)</li>
</ul>
<p dir="auto">From all rationals that exist in the immediate neighborhood<sup><a href="#def">ùíÉ</a></sup>
of the rational_to_compactify, obtains the unique rational with the smallest denominator.
And, if there be more than one, obtains that rational having the smallest numerator.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using FastRationals

midpoint = 76_963 // 100_003

coarse_radius  = 1//64
fine_radius    = 1//32_768
tiny_radius    = 1//7_896_121_034

coarse_compact = compactify(midpoint, coarse_radius)      #         7//9
fine_compact   = compactify(midpoint, fine_radius)        #       147//191
tiny_compact   = compactify(midpoint, tiny_radius)        #    76_963//100_003

abs(midpoint - tiny_compact)   &lt; tiny_radius    &amp;&amp;
abs(midpoint - fine_compact)   &lt; fine_radius    &amp;&amp;
abs(midpoint - coarse_compact) &lt; coarse_radius            #  true"><pre class="notranslate"><code>using FastRationals

midpoint = 76_963 // 100_003

coarse_radius  = 1//64
fine_radius    = 1//32_768
tiny_radius    = 1//7_896_121_034

coarse_compact = compactify(midpoint, coarse_radius)      #         7//9
fine_compact   = compactify(midpoint, fine_radius)        #       147//191
tiny_compact   = compactify(midpoint, tiny_radius)        #    76_963//100_003

abs(midpoint - tiny_compact)   &lt; tiny_radius    &amp;&amp;
abs(midpoint - fine_compact)   &lt; fine_radius    &amp;&amp;
abs(midpoint - coarse_compact) &lt; coarse_radius            #  true
</code></pre></div>
<p dir="auto"><sup><a name="user-content-neighborhood"></a><a href="#def">ùíÉ</a></sup> This <code>neighborhood</code> is given by
¬±_the radius of indifference_, centered at the rational to compactify.</p>
<h3 dir="auto"><a id="user-content-enhanced-rounding" class="anchor" aria-hidden="true" href="#enhanced-rounding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>enhanced rounding</h3>
<p dir="auto"><code>FastRationals</code> support two kinds of directed rounding, one maintains type, the other yields an integer.</p>
<ul dir="auto">
<li>all rounding modes are available
<ul dir="auto">
<li><code>RoundNearest</code>, <code>RoundUp</code>, <code>RoundDown</code>, <code>RoundToZero</code>, <code>RoundFromZero</code></li>
</ul>
</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt; q = FastQ32(22, 7)
(3//1, 3//1)

&gt; round(q), round(q, RoundNearest), round(-q), round(-q, RoundNearest)
(3//1, 3//1, -3//1, -3//1)

&gt; round(q, RoundToZero), round(q, RoundFromZero), round(-q, RoundToZero), round(-q, RoundFromZero)
(3//1, 4//1, -3//1, -4//1)

&gt; round(q, RoundDown), round(q, RoundUp), round(-q, RoundDown), round(-q, RoundUp)
(3//1, 4//1, -4//1, -3//1)


&gt; round(Integer, q, RoundUp), typeof(round(Integer, q, RoundUp))
4, Int32

&gt; round(Int16, -q, RoundUp), typeof(round(Int16, -q, RoundUp))
-3, Int16"><pre class="notranslate"><code>&gt; q = FastQ32(22, 7)
(3//1, 3//1)

&gt; round(q), round(q, RoundNearest), round(-q), round(-q, RoundNearest)
(3//1, 3//1, -3//1, -3//1)

&gt; round(q, RoundToZero), round(q, RoundFromZero), round(-q, RoundToZero), round(-q, RoundFromZero)
(3//1, 4//1, -3//1, -4//1)

&gt; round(q, RoundDown), round(q, RoundUp), round(-q, RoundDown), round(-q, RoundUp)
(3//1, 4//1, -4//1, -3//1)


&gt; round(Integer, q, RoundUp), typeof(round(Integer, q, RoundUp))
4, Int32

&gt; round(Int16, -q, RoundUp), typeof(round(Int16, -q, RoundUp))
-3, Int16
</code></pre></div>
<hr>
<h3 dir="auto"><a id="user-content-what-is-not-carried-over-from-system-rationals" class="anchor" aria-hidden="true" href="#what-is-not-carried-over-from-system-rationals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>what is not carried over from system rationals</h3>
<ul dir="auto">
<li>There is no <code>FastRational</code> representation for Infinity</li>
<li>There is no support for comparing a <code>FastRational</code> with NaN</li>
</ul>
<hr>
<h2 dir="auto"><a id="user-content-more-about-it" class="anchor" aria-hidden="true" href="#more-about-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>more about it</h2>
<blockquote>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/docs/src/thestatelessway.md">Context Rather Than State</a></p>
</blockquote>
<blockquote>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/docs/src/metaphoricalflashlight.md">what slows FastRationals</a></p>
</blockquote>
<blockquote>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/FastRationals.jl/blob/master/docs/src/mayoverflow.md">the <code>mayoverflow</code> predicate</a></p>
</blockquote>
<hr>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>acknowledgements</h2>
<p dir="auto">Klaus Crusius has contributed to this effort.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>references</h2>
<p dir="auto">This work stems from a <a href="https://github.com/JuliaLang/julia/issues/11522" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/11522/hovercard">discussion</a> that began in 2015.</p>
<p dir="auto">The <a href="https://dl.acm.org/citation.cfm?id=2733711&amp;dl=ACM&amp;coll=DL" rel="nofollow">rational compactifying algorithm</a> paper is in the ACM digital library.</p>
<hr>
<p dir="auto"><sup><a name="user-content-source"></a><a href="#attribution">ùì™</a></sup> Harmen Stoppels on 2019-06-14</p>
</article></div>