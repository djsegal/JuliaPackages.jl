<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-exactoptimaltransportjl-" class="anchor" aria-hidden="true" href="#exactoptimaltransportjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExactOptimalTransport.jl <a href="https://juliaoptimaltransport.github.io/ExactOptimalTransport.jl/dev" rel="nofollow"><img src="docs/src/assets/logo.svg" align="right" height="138.5" style="max-width: 100%;"></a></h1>
<p dir="auto"><em>Solving unregularized optimal transport problems with Julia</em></p>
<p dir="auto"><a href="https://JuliaOptimalTransport.github.io/ExactOptimalTransport.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaOptimalTransport.github.io/ExactOptimalTransport.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaOptimalTransport/ExactOptimalTransport.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/JuliaOptimalTransport/ExactOptimalTransport.jl/workflows/CI/badge.svg?branch=main" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaOptimalTransport/ExactOptimalTransport.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/372ea4a4625ab5fc16585ef13a85249a29bf8c35d0ca16b73c5c39bec8e1e71e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614f7074696d616c5472616e73706f72742f45786163744f7074696d616c5472616e73706f72742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaOptimalTransport/ExactOptimalTransport.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaOptimalTransport/ExactOptimalTransport.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/d1da200f3da273f32f9f315ca3c705f82a5708363d2d80803bd762ec4b1ede2c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614f7074696d616c5472616e73706f72742f45786163744f7074696d616c5472616e73706f72742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaOptimalTransport/ExactOptimalTransport.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides some <a href="https://julialang.org/" rel="nofollow">Julia</a> implementations of algorithms for solving
unregularized optimal transport (Kantorovich) problems.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExactOptimalTransport
using Distances
using Tulip

# uniform histograms
μ = fill(1/250, 250)
ν = fill(1/200, 200)

# random cost matrix
C = pairwise(SqEuclidean(), rand(1, 250), rand(1, 200); dims=2)

# compute optimal transport map with Tulip
lp = Tulip.Optimizer()
P = emd(μ, ν, C, lp)

# compute optimal transport cost without recomputing the plan
emd2(μ, ν, C, lp; plan=P)"><pre><span class="pl-k">using</span> ExactOptimalTransport
<span class="pl-k">using</span> Distances
<span class="pl-k">using</span> Tulip

<span class="pl-c"><span class="pl-c">#</span> uniform histograms</span>
μ <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">250</span>, <span class="pl-c1">250</span>)
ν <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">200</span>, <span class="pl-c1">200</span>)

<span class="pl-c"><span class="pl-c">#</span> random cost matrix</span>
C <span class="pl-k">=</span> <span class="pl-c1">pairwise</span>(<span class="pl-c1">SqEuclidean</span>(), <span class="pl-c1">rand</span>(<span class="pl-c1">1</span>, <span class="pl-c1">250</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">1</span>, <span class="pl-c1">200</span>); dims<span class="pl-k">=</span><span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> compute optimal transport map with Tulip</span>
lp <span class="pl-k">=</span> Tulip<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()
P <span class="pl-k">=</span> <span class="pl-c1">emd</span>(μ, ν, C, lp)

<span class="pl-c"><span class="pl-c">#</span> compute optimal transport cost without recomputing the plan</span>
<span class="pl-c1">emd2</span>(μ, ν, C, lp; plan<span class="pl-k">=</span>P)</pre></div>
<p dir="auto">Please see the documentation pages for further information.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaOptimalTransport/OptimalTransport.jl">OptimalTransport.jl</a>: Julia implementation of
algorithms for regularized optimal transport problems with GPU support.</li>
<li><a href="https://github.com/JuliaOptimalTransport/StochasticOptimalTransport.jl">StochasticOptimalTransport.jl</a>: Julia implementation of stochastic optimization algorithms for large-scale optimal transport.</li>
<li><a href="https://github.com/JuliaOptimalTransport/PythonOT.jl">PythonOT.jl</a>: Julia interface for the <a href="https://pythonot.github.io/" rel="nofollow">Python Optimal Transport (POT) package</a>.</li>
</ul>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Contributions are more than welcome! Please feel free to submit an issue or pull request in this repository.</p>
<h2 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h2>
<p dir="auto">This package was originally part of <a href="https://github.com/JuliaOptimalTransport/OptimalTransport.jl">OptimalTransport.jl</a>.</p>
</article></div>