<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jld2" class="anchor" aria-hidden="true" href="#jld2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JLD2</h1>
<p><strong>NOTE</strong>: This package is now <strong>actively maintained again</strong>! It was not maintained for some time and there still is a backlog of outstanding issues that will be addressed in the near future. You are invited to test JLD2 and raise any issues you come across. However, tread with care as you may come across problems that can potentially cause data loss.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Tests</strong></th>
<th align="center"><strong>CodeCov</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://JuliaIO.github.io/JLD2.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/661356f86ae99407296656b5514b76cfb343dacca3c4a20a0872e9c3c6bfa2b3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6f6e6c696e652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-online-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaIO/JLD2.jl/actions"><img src="https://github.com/juliaio/JLD2.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/github/JuliaIO/JLD2.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6bb4b1680592f576c5fb6da06b2d4d92c1742c13209bd71158fae844b824588d/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f4a4c44322e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaIO/JLD2.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>JLD2 saves and loads Julia data structures in a format comprising a subset of HDF5, without any dependency on the HDF5 C library. It typically outperforms <a href="https://github.com/JuliaIO/JLD.jl">the JLD package</a> (sometimes by multiple orders of magnitude) and often outperforms Julia's built-in serializer. While other HDF5 implementations supporting HDF5 File Format Specification Version 3.0 (i.e. libhdf5 1.10 or later) should be able to read the files that JLD2 produces, JLD2 is likely to be incapable of reading files created or modified by other HDF5 implementations. JLD2 does not aim to be backwards or forwards compatible with the JLD package.</p>
<h2><a id="user-content-reading-and-writing-data" class="anchor" aria-hidden="true" href="#reading-and-writing-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading and writing data</h2>
<h3><a id="user-content-save-and-load-functions" class="anchor" aria-hidden="true" href="#save-and-load-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>save</code> and <code>load</code> functions</h3>
<p>The <code>save</code> and <code>load</code> functions, provided by <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a>, provide a mechanism to read and write data from a JLD2 file. To use these functions, you may either write <code>using FileIO</code> or <code>using JLD2</code>. FileIO will determine the correct package automatically.</p>
<p>The <code>save</code> function accepts an <code>AbstractDict</code> yielding the key/value pairs, where the key is a string representing the name of the dataset and the value represents its contents:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FileIO
save(&quot;example.jld2&quot;, Dict(&quot;hello&quot; =&gt; &quot;world&quot;, &quot;foo&quot; =&gt; :bar))
"><pre><span class="pl-k">using</span> FileIO
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:bar</span>))</pre></div>
<p>The <code>save</code> function can also accept the dataset names and contents as arguments:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="save(&quot;example.jld2&quot;, &quot;hello&quot;, &quot;world&quot;, &quot;foo&quot;, :bar)
"><pre><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">:bar</span>)</pre></div>
<p>When using the <code>save</code> function, the file extension must be <code>.jld2</code>, since the extension <code>.jld</code> currently belongs to the previous JLD package.</p>
<p>If called with a filename argument only, the <code>load</code> function loads all datasets from the given file into a Dict:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="load(&quot;example.jld2&quot;) # -&gt; Dict{String,Any}(&quot;hello&quot; =&gt; &quot;world&quot;, &quot;foo&quot; =&gt; :bar)
"><pre><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> -&gt; Dict{String,Any}("hello" =&gt; "world", "foo" =&gt; :bar)</span></pre></div>
<p>If called with a single dataset name, <code>load</code> returns the contents of that dataset from the file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="load(&quot;example.jld2&quot;, &quot;hello&quot;) # -&gt; &quot;world&quot;
"><pre><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> -&gt; "world"</span></pre></div>
<p>If called with multiple dataset names, <code>load</code> returns the contents of the given datasets as a tuple:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="load(&quot;example.jld2&quot;, &quot;hello&quot;, &quot;foo&quot;) # -&gt; (&quot;world&quot;, :bar)
"><pre><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> -&gt; ("world", :bar)</span></pre></div>
<h3><a id="user-content-a-new-interface-jldsave" class="anchor" aria-hidden="true" href="#a-new-interface-jldsave"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A new interface: jldsave</h3>
<p><code>jldsave</code> makes use of julia's keyword argument syntax to store files,
thus leveraging the parser and not having to rely on macros. To use it, write</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = 1
y = 2
z = 42

# The simplest case:
jldsave(&quot;example.jld2&quot;; x, y, z)
# it is equivalent to 
jldsave(&quot;example.jld2&quot;; x=x, y=y, z=z)

# You can assign new names selectively
jldsave(&quot;example.jld2&quot;; x, a=y, z)

# and if you want to confuse your future self and everyone else, do
jldsave(&quot;example.jld2&quot;; z=x, x=y, y=z)
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">1</span>
y <span class="pl-k">=</span> <span class="pl-c1">2</span>
z <span class="pl-k">=</span> <span class="pl-c1">42</span>

<span class="pl-c"><span class="pl-c">#</span> The simplest case:</span>
<span class="pl-c1">jldsave</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>; x, y, z)
<span class="pl-c"><span class="pl-c">#</span> it is equivalent to </span>
<span class="pl-c1">jldsave</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>; x<span class="pl-k">=</span>x, y<span class="pl-k">=</span>y, z<span class="pl-k">=</span>z)

<span class="pl-c"><span class="pl-c">#</span> You can assign new names selectively</span>
<span class="pl-c1">jldsave</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>; x, a<span class="pl-k">=</span>y, z)

<span class="pl-c"><span class="pl-c">#</span> and if you want to confuse your future self and everyone else, do</span>
<span class="pl-c1">jldsave</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>; z<span class="pl-k">=</span>x, x<span class="pl-k">=</span>y, y<span class="pl-k">=</span>z)</pre></div>
<p>Compression and non-default IO types may be set via positional arguments.</p>
<h3><a id="user-content-file-interface" class="anchor" aria-hidden="true" href="#file-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>File interface</h3>
<p>It is also possible to interact with JLD2 files using a file-like interface. The <code>jldopen</code> function accepts a file name and an argument specifying how the file should be opened:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JLD2

f = jldopen(&quot;example.jld2&quot;, &quot;r&quot;)  # open read-only (default)
f = jldopen(&quot;example.jld2&quot;, &quot;r+&quot;) # open read/write, failing if no file exists
f = jldopen(&quot;example.jld2&quot;, &quot;w&quot;)  # open read/write, overwriting existing file
f = jldopen(&quot;example.jld2&quot;, &quot;a+&quot;) # open read/write, preserving contents of existing file or creating a new file
"><pre><span class="pl-k">using</span> JLD2

f <span class="pl-k">=</span> <span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> open read-only (default)</span>
f <span class="pl-k">=</span> <span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r+<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> open read/write, failing if no file exists</span>
f <span class="pl-k">=</span> <span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> open read/write, overwriting existing file</span>
f <span class="pl-k">=</span> <span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>a+<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> open read/write, preserving contents of existing file or creating a new file</span></pre></div>
<p>Data can be written to the file using <code>write(f, "name", data)</code> or <code>f["name"] = data</code>, or read from the file using <code>read(f, "name")</code> or <code>f["name"]</code>. When you are done with the file, remember to call <code>close(f)</code>.</p>
<p>Like <code>open</code>, <code>jldopen</code> also accepts a function as the first argument, permitting <code>do</code>-block syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="jldopen(&quot;example.jld2&quot;, &quot;w&quot;) do file
    file[&quot;bigdata&quot;] = randn(5)
end
"><pre><span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    file[<span class="pl-s"><span class="pl-pds">"</span>bigdata<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-groups" class="anchor" aria-hidden="true" href="#groups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Groups</h3>
<p>It is possible to construct groups within a JLD2 file, which may or may not be useful for organizing your data. You can create groups explicitly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="jldopen(&quot;example.jld2&quot;, &quot;w&quot;) do file
    mygroup = JLD2.Group(file, &quot;mygroup&quot;)
    mygroup[&quot;mystuff&quot;] = 42
end
"><pre><span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    mygroup <span class="pl-k">=</span> JLD2<span class="pl-k">.</span><span class="pl-c1">Group</span>(file, <span class="pl-s"><span class="pl-pds">"</span>mygroup<span class="pl-pds">"</span></span>)
    mygroup[<span class="pl-s"><span class="pl-pds">"</span>mystuff<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">42</span>
<span class="pl-k">end</span></pre></div>
<p>or implicitly, by saving a variable with a name containing slashes as path delimiters:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="jldopen(&quot;example.jld2&quot;, &quot;w&quot;) do file
    file[&quot;mygroup/mystuff&quot;] = 42
end
# or save(&quot;example.jld2&quot;, &quot;mygroup/mystuff&quot;, 42)
"><pre><span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    file[<span class="pl-s"><span class="pl-pds">"</span>mygroup/mystuff<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">42</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> or save("example.jld2", "mygroup/mystuff", 42)</span></pre></div>
<p>Both of these examples yield the same group structure, which you can see at the REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; file = jldopen(&quot;example.jld2&quot;, &quot;r&quot;)
JLDFile /Users/simon/example.jld2 (read-only)
 └─📂 mygroup
    └─🔢 mystuff
"><pre><code>julia&gt; file = jldopen("example.jld2", "r")
JLDFile /Users/simon/example.jld2 (read-only)
 └─📂 mygroup
    └─🔢 mystuff
</code></pre></div>
<p>Similarly, you can access groups directly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="jldopen(&quot;example.jld2&quot;, &quot;r&quot;) do file
    @assert file[&quot;mygroup&quot;][&quot;mystuff&quot;] == 42
end
"><pre><span class="pl-c1">jldopen</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">@assert</span> file[<span class="pl-s"><span class="pl-pds">"</span>mygroup<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>mystuff<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> <span class="pl-c1">42</span>
<span class="pl-k">end</span></pre></div>
<p>or using slashes as path delimiters:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert load(&quot;example.jld2&quot;, &quot;mygroup/mystuff&quot;) == 42
"><pre><span class="pl-c1">@assert</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>example.jld2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mygroup/mystuff<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">42</span></pre></div>
<h3><a id="user-content-custom-serialization-experimental" class="anchor" aria-hidden="true" href="#custom-serialization-experimental"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Serialization (Experimental)</h3>
<p>Version <code>v0.3.0</code> of introduces support for custom serialization.
For now this feature is considered experimental as it passes tests but
has little testing in the wild. → Please test and report if you encounter problems.</p>
<p>The API is simple enough, to enable custom serialization for your type <code>A</code> you define
a new type e.g. <code>ASerialization</code> that contains the fields you want to store and define
<code>JLD2.writeas(::Type{A}) = ASerialization</code>.
Internally JLD2 will call <code>Base.convert</code> when writing and loading, so you need to make sure to extend that for your type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct A
    x::Int
end

struct ASerialization
    x::Vector{Int}
end

JLD2.writeas(::Type{A}) = ASerialization
Base.convert(::Type{ASerialization}, a::A) = ASerialization([a.x])
Base.convert(::Type{A}, a::ASerialization) = A(only(a.x))
"><pre><span class="pl-k">struct</span> A
    x<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> ASerialization
    x<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
<span class="pl-k">end</span>

JLD2<span class="pl-k">.</span><span class="pl-en">writeas</span>(<span class="pl-k">::</span><span class="pl-c1">Type{A}</span>) <span class="pl-k">=</span> ASerialization
Base<span class="pl-k">.</span><span class="pl-en">convert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{ASerialization}</span>, a<span class="pl-k">::</span><span class="pl-c1">A</span>) <span class="pl-k">=</span> <span class="pl-c1">ASerialization</span>([a<span class="pl-k">.</span>x])
Base<span class="pl-k">.</span><span class="pl-en">convert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{A}</span>, a<span class="pl-k">::</span><span class="pl-c1">ASerialization</span>) <span class="pl-k">=</span> <span class="pl-c1">A</span>(<span class="pl-c1">only</span>(a<span class="pl-k">.</span>x))</pre></div>
<p>If you do not want to overload <code>Base.convert</code> then you can also define</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="JLD2.wconvert(::Type{ASerialization}, a::A) = ASerialization([a.x])
JLD2.rconvert(::Type{A}, a::ASerialization) = A(only(a.x))
"><pre>JLD2<span class="pl-k">.</span><span class="pl-en">wconvert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{ASerialization}</span>, a<span class="pl-k">::</span><span class="pl-c1">A</span>) <span class="pl-k">=</span> <span class="pl-c1">ASerialization</span>([a<span class="pl-k">.</span>x])
JLD2<span class="pl-k">.</span><span class="pl-en">rconvert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{A}</span>, a<span class="pl-k">::</span><span class="pl-c1">ASerialization</span>) <span class="pl-k">=</span> <span class="pl-c1">A</span>(<span class="pl-c1">only</span>(a<span class="pl-k">.</span>x))</pre></div>
<p>instead. This may be particularly relevant when types are involved that are not your own.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct B
    x::Float64
end

JLD2.writeas(::Type{B}) = Float64
JLD2.wconvert(::Type{Float64}, b::B) = b.x
JLD2.rconvert(::Type{B}, x::Float64) = B(x)

arr = [B(rand()) for i=1:10]

jldsave(&quot;test.jld2&quot;; arr)
"><pre><span class="pl-k">struct</span> B
    x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

JLD2<span class="pl-k">.</span><span class="pl-en">writeas</span>(<span class="pl-k">::</span><span class="pl-c1">Type{B}</span>) <span class="pl-k">=</span> Float64
JLD2<span class="pl-k">.</span><span class="pl-en">wconvert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Float64}</span>, b<span class="pl-k">::</span><span class="pl-c1">B</span>) <span class="pl-k">=</span> b<span class="pl-k">.</span>x
JLD2<span class="pl-k">.</span><span class="pl-en">rconvert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{B}</span>, x<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> <span class="pl-c1">B</span>(x)

arr <span class="pl-k">=</span> [<span class="pl-c1">B</span>(<span class="pl-c1">rand</span>()) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]

<span class="pl-c1">jldsave</span>(<span class="pl-s"><span class="pl-pds">"</span>test.jld2<span class="pl-pds">"</span></span>; arr)</pre></div>
<p>In this example JLD2 converts the array of <code>B</code> structs to a plain <code>Vector{Float64}</code> prior to
storing to disk.</p>
</article></div>