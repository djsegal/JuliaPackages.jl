<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-manualmemory" class="anchor" aria-hidden="true" href="#manualmemory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ManualMemory</h1>
<p dir="auto"><a href="https://JuliaSIMD.github.io/ManualMemory.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSIMD.github.io/ManualMemory.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/ManualMemory.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaSIMD/ManualMemory.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/ManualMemory.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0aeb84d8c1463ef55526ea0302c54696d98494f8054c10c4668e77e4342d569e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f4d616e75616c4d656d6f72792e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSIMD/ManualMemory.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Manually managed memory buffers backed by NTuples</p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ManualMemory: MemoryBuffer, load, store!, LazyPreserve, preserve, PseudoPtr, Reference

julia&gt; m = MemoryBuffer{4,Float64}(undef)
MemoryBuffer{4, Float64}((2.283825594e-314, 2.2157350003e-314, 2.216358792e-314, 2.08e-322))

julia&gt; store!(pointer(m), 1.23)

julia&gt; load(pointer(m))
1.23"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ManualMemory<span class="pl-k">:</span> MemoryBuffer, load, store!, LazyPreserve, preserve, PseudoPtr, Reference

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">MemoryBuffer</span><span class="pl-c1">{4,Float64}</span>(undef)
<span class="pl-c1">MemoryBuffer</span><span class="pl-c1">{4, Float64}</span>((<span class="pl-c1">2.283825594e-314</span>, <span class="pl-c1">2.2157350003e-314</span>, <span class="pl-c1">2.216358792e-314</span>, <span class="pl-c1">2.08e-322</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">store!</span>(<span class="pl-c1">pointer</span>(m), <span class="pl-c1">1.23</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(<span class="pl-c1">pointer</span>(m))
<span class="pl-c1">1.23</span></pre></div>
<p dir="auto">Specifying an existing <code>NTuple</code> of data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; s = (1,2,3,4,5);

julia&gt; m = MemoryBuffer(s)
MemoryBuffer{5, Int64}((1, 2, 3, 4, 5))

julia&gt; load(p)
1

julia&gt; load(p+sizeof(Int64))
2

julia&gt; load(p+sizeof(Int64)*2)
3"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">MemoryBuffer</span>(s)
<span class="pl-c1">MemoryBuffer</span><span class="pl-c1">{5, Int64}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(p)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(p<span class="pl-k">+</span><span class="pl-c1">sizeof</span>(Int64))
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(p<span class="pl-k">+</span><span class="pl-c1">sizeof</span>(Int64)<span class="pl-k">*</span><span class="pl-c1">2</span>)
<span class="pl-c1">3</span></pre></div>
</article></div>