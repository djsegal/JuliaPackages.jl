<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fastchebinterp" class="anchor" aria-hidden="true" href="#fastchebinterp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FastChebInterp</h1>
<p><a href="https://travis-ci.org/stevengj/FastChebInterp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b354713f3364fafa5823002c0bcc2fe75bfaff7a428fdc2f678c835914a3507/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f4661737443686562496e746572702e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/FastChebInterp.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Fast multidimensional Chebyshev interpolation on a hypercube (Cartesian-product)
domain, using a separable (tensor-product) grid of Chebyshev interpolation points.</p>
<p>For domain upper and lower bounds <code>lb</code> and <code>ub</code>, and a given <code>order</code>
tuple, you would create an interpolator for a function <code>f</code> via:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using FastChebInterp
x = chebpoints(order, lb, ub) # an array of StaticVector
c = chebfit(f.(x), lb, ub)
"><pre><code>using FastChebInterp
x = chebpoints(order, lb, ub) # an array of StaticVector
c = chebfit(f.(x), lb, ub)
</code></pre></div>
<p>and then evaluate the interpolant for a point <code>y</code> (a vector)
via <code>c(y)</code>.</p>
<p>We also provide a function <code>chebgradient(c,y)</code> that returns a tuple <code>(c(y), âˆ‡c(y))</code> of
the interpolant and its gradient at a point <code>y</code>.</p>
<p>The FastChebInterp package also supports complex and vector-valued functions <code>f</code>.  In
this case, <code>c(y)</code> returns a vector of interpolants, and one can use <code>chebjacobian(c,y)</code>
to compute the tuple <code>(c(y), J(y))</code> of the interpolant and its Jacobian matrix at <code>y</code>.</p>
<p>This package is an experimental replacement for some of the functionality in <a href="https://github.com/RJDennis/ChebyshevApprox.jl">ChebyshevApprox.jl</a> in order to get more performance.  The <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun.jl</a> package also performs Chebyshev interpolation and many other tasks.</p>
</article></div>