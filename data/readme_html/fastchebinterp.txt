<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastchebinterp" class="anchor" aria-hidden="true" href="#fastchebinterp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastChebInterp</h1>
<p dir="auto"><a href="https://github.com/JuliaMath/FastChebInterp.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaMath/FastChebInterp.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Fast multidimensional Chebyshev interpolation on a hypercube (Cartesian-product)
domain, using a separable (tensor-product) grid of Chebyshev interpolation points, as well as Chebyshev regression (least-square fits) from an arbitrary set of points.   In both cases we support arbitrary dimensionality, complex and vector-valued functions, and fast derivative and Jacobian computation.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">For domain upper and lower bounds <code>lb</code> and <code>ub</code>, and a given <code>order</code>
tuple, you would create an interpolator for a function <code>f</code> via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FastChebInterp
x = chebpoints(order, lb, ub) # an array of `SVector` from [StaticArrays.jl](https://github.com/JuliaArrays/StaticArrays.jl), or scalars in 1d
c = chebinterp(f.(x), lb, ub)"><pre><span class="pl-k">using</span> FastChebInterp
x <span class="pl-k">=</span> <span class="pl-c1">chebpoints</span>(order, lb, ub) <span class="pl-c"><span class="pl-c">#</span> an array of `SVector` from [StaticArrays.jl](https://github.com/JuliaArrays/StaticArrays.jl), or scalars in 1d</span>
c <span class="pl-k">=</span> <span class="pl-c1">chebinterp</span>(<span class="pl-c1">f</span>.(x), lb, ub)</pre></div>
<p dir="auto">and then evaluate the interpolant for a point <code>y</code> (a vector)
via <code>c(y)</code>.</p>
<p dir="auto">We also provide a function <code>chebgradient(c,y)</code> that returns a tuple <code>(c(y), ∇c(y))</code> of
the interpolant and its gradient at a point <code>y</code>.  (You can also use automatic differentiation, e.g. via the <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl package</a>,
but <code>chebgradient</code> is slightly faster and also supports derivatives of complex-valued functions, unlike ForwardDiff.   <a href="https://github.com/JuliaDiff/ChainRules.jl">ChainRules</a> are also implemented in this package to speed up derivative computations using AD tools like <a href="https://github.com/FluxML/Zygote.jl">Zygote.jl</a>.)</p>
<p dir="auto">The FastChebInterp package also supports complex and vector-valued functions <code>f</code>.  In
the latter case, <code>c(y)</code> returns a vector of interpolants, and one can use <code>chebjacobian(c,y)</code>
to compute the tuple <code>(c(y), J(y))</code> of the interpolant and its Jacobian matrix at <code>y</code>.</p>
<h3 dir="auto"><a id="user-content-regression-from-arbitrary-points" class="anchor" aria-hidden="true" href="#regression-from-arbitrary-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Regression from arbitrary points</h3>
<p dir="auto">We also have a function <code>chebregression(x, y, [lb, ub,], order)</code> that
can perform multidimensional Chebyshev least-square fitting.  It
returns a Chebyshev polynomial of a given <code>order</code> (tuple) fit
to a set of points <code>x[i]</code> and values <code>y[i]</code>, optionally in a box
with bounds <code>lb, ub</code> (which default to bounding box for <code>x</code>).</p>
<h3 dir="auto"><a id="user-content-1d-example" class="anchor" aria-hidden="true" href="#1d-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1d Example</h3>
<p dir="auto">Here is an example interpolating the (highly oscillatory) 1d function <code>f(x) = sin(2x + 3cos(4x))</code> for <code>0 ≤ x ≤ 10</code>, with a degree-200 Chebyshev polynomial</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x) = sin(2x + 3cos(4x))
x = chebpoints(200, 0, 10)
c = chebinterp(f.(x), 0, 10)"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-c1">cos</span>(<span class="pl-c1">4</span>x))
x <span class="pl-k">=</span> <span class="pl-c1">chebpoints</span>(<span class="pl-c1">200</span>, <span class="pl-c1">0</span>, <span class="pl-c1">10</span>)
c <span class="pl-k">=</span> <span class="pl-c1">chebinterp</span>(<span class="pl-c1">f</span>.(x), <span class="pl-c1">0</span>, <span class="pl-c1">10</span>)</pre></div>
<p dir="auto">We can then compare the "exact" function and its derivative at a set of points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; xx = 0:0.1:10;

julia&gt; maximum(@. abs(c(xx) - f(xx)))
2.6336643132285342e-5"><pre>julia<span class="pl-k">&gt;</span> xx <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">10</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">maximum</span>(<span class="pl-c1">@.</span> <span class="pl-c1">abs</span>(<span class="pl-c1">c</span>(xx) <span class="pl-k">-</span> <span class="pl-c1">f</span>(xx)))
<span class="pl-c1">2.6336643132285342e-5</span></pre></div>
<p dir="auto">and we see that the interpolant <code>c</code> matches <code>f</code> to about five decimal digits.</p>
<p dir="auto">The function <code>chebgradient</code> returns both the interpolant and its derivative, e.g. at <code>x = 1.234</code>, and we can compare it to the exact values</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; chebgradient(c, x)
(0.008334535719968672, -13.700695443638699)

julia&gt; f(x) # exact function value
0.008336024670192028

julia&gt; cos(2x + 3cos(4x)) * (2 - 12sin(4x)) # exact derivative
-13.700760631142602"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chebgradient</span>(c, x)
(<span class="pl-c1">0.008334535719968672</span>, <span class="pl-k">-</span><span class="pl-c1">13.700695443638699</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(x) <span class="pl-c"><span class="pl-c">#</span> exact function value</span>
<span class="pl-c1">0.008336024670192028</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cos</span>(<span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-c1">cos</span>(<span class="pl-c1">4</span>x)) <span class="pl-k">*</span> (<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">12</span><span class="pl-c1">sin</span>(<span class="pl-c1">4</span>x)) <span class="pl-c"><span class="pl-c">#</span> exact derivative</span>
<span class="pl-k">-</span><span class="pl-c1">13.700760631142602</span></pre></div>
<p dir="auto">Interpolation is most efficient and accurate if we evaluate our function at the points given by <code>chebpoints</code>.   However, we can also perform least-square polynomial fitting (in the Chebyshev basis, which is well behaved even at high degree) from an <em>arbitrary</em> set of points — this is useful if the points were specified externally, or if we want to "smooth" the data by fitting to a polynomial of lower degree than for interpolation.    For example, we can fit the same function above, again to a degree-200 Chebyshev polynomial, using 10000 <em>random</em> points in the domain:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xr = rand(10000) * 10 # 10000 uniform random points in [0, 10]
c = chebregression(xr, f.(xr), 0, 10, 200) # fit to a degree-200 polynomial
```jl
julia&gt; maximum(@. abs(c(xx) - f(xx)))
1.4655330320523241e-5"><pre>xr <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10000</span>) <span class="pl-k">*</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> 10000 uniform random points in [0, 10]</span>
c <span class="pl-k">=</span> <span class="pl-c1">chebregression</span>(xr, <span class="pl-c1">f</span>.(xr), <span class="pl-c1">0</span>, <span class="pl-c1">10</span>, <span class="pl-c1">200</span>) <span class="pl-c"><span class="pl-c">#</span> fit to a degree-200 polynomial</span>
<span class="pl-s"><span class="pl-pds">```</span>jl</span>
<span class="pl-s">julia&gt; maximum(@. abs(c(xx) - f(xx)))</span>
<span class="pl-s">1.4655330320523241e-5</span></pre></div>
<h3 dir="auto"><a id="user-content-2d-example" class="anchor" aria-hidden="true" href="#2d-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2d Example</h3>
<p dir="auto">Here is a 2d example, interpolating the function <code>g(x) = sin(x₁ + cos(x₂))</code> for <code>1 ≤ x₁ ≤ 2</code> and <code>3 ≤ x₂ ≤ 4</code>, using order 10 in the <code>x₁</code> direction and order 20 in the <code>x₂</code> direction:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g(x) = sin(x[1] + cos(x[2]))
lb, ub = [1,3], [2, 4] # lower and upper bounds of the domain, respectively
x = chebpoints((10,20), lb, ub)
c = chebinterp(g.(x), lb, ub)"><pre><span class="pl-en">g</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">2</span>]))
lb, ub <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>] <span class="pl-c"><span class="pl-c">#</span> lower and upper bounds of the domain, respectively</span>
x <span class="pl-k">=</span> <span class="pl-c1">chebpoints</span>((<span class="pl-c1">10</span>,<span class="pl-c1">20</span>), lb, ub)
c <span class="pl-k">=</span> <span class="pl-c1">chebinterp</span>(<span class="pl-c1">g</span>.(x), lb, ub)</pre></div>
<p dir="auto">Let's evaluate the interpolant at an arbitrary point <code>(1.2, 3.4)</code> and compare it to the exact value:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c([1.2, 3.4]) # polynomial interpolant
0.23109384193446084

julia&gt; g([1.2, 3.4]) # exact value
0.23109384193445792

julia&gt; g([1.2, 3.4]) - c([1.2, 3.4])
-2.914335439641036e-15"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">c</span>([<span class="pl-c1">1.2</span>, <span class="pl-c1">3.4</span>]) <span class="pl-c"><span class="pl-c">#</span> polynomial interpolant</span>
<span class="pl-c1">0.23109384193446084</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>([<span class="pl-c1">1.2</span>, <span class="pl-c1">3.4</span>]) <span class="pl-c"><span class="pl-c">#</span> exact value</span>
<span class="pl-c1">0.23109384193445792</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>([<span class="pl-c1">1.2</span>, <span class="pl-c1">3.4</span>]) <span class="pl-k">-</span> <span class="pl-c1">c</span>([<span class="pl-c1">1.2</span>, <span class="pl-c1">3.4</span>])
<span class="pl-k">-</span><span class="pl-c1">2.914335439641036e-15</span></pre></div>
<p dir="auto">In this case, because the function is smooth and not very wiggly in the domain, our low-degree polynomial suffices to interpolate to nearly machine (<code>Float64</code>) precision.</p>
<p dir="auto">Note that FastChebInterp uses <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> internally to work with vectors, and e.g. a <code>Vector</code> like <code>[1.2, 3.4]</code> gets converted to an <code>SVector</code> internally.  If you are working with many such coordinate vectors, it is often advisable to <a href="https://docs.julialang.org/en/v1/manual/performance-tips/#Consider-StaticArrays.jl-for-small-fixed-size-vector/matrix-operations" rel="nofollow">use StaticArrays</a> yourself, in which case you can pass <code>SVector</code> coordinates directly to FastChebInterp functions.</p>
<p dir="auto">If we inspect the <code>c</code> object, we see that it is actually of a lower degree than we requested:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c
Chebyshev order (10, 16) interpolator on [1,2] × [3,4]"><pre>julia<span class="pl-k">&gt;</span> c
Chebyshev order (<span class="pl-c1">10</span>, <span class="pl-c1">16</span>) interpolator on [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">×</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]</pre></div>
<p dir="auto">What happened is that <code>chebinterp</code> computed the order-<code>(10,20)</code> polynomial as requested, but found that the order <code>&gt; 16</code> terms in the <code>x₂</code> direction were all smaller than machine precision, so it discarded them (since lower-degree polynomials are cheaper to work with).    You can control this behavior by passing the <code>tol</code> keyword argument to <code>chebinterp</code>: passing <code>tol=0</code> prevents it from discarding any terms, and a larger <code>tol</code> can be used to obtain an even lower-degree polynomial:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; chebinterp(g.(x), lb, ub, tol=0) # prevent terms from being dropped
Chebyshev order (10, 20) interpolator on [1,2] × [3,4]

julia&gt; chebinterp(g.(x), lb, ub, tol=0.01) # request only about 1% accuracy
Chebyshev order (2, 2) interpolator on [1,2] × [3,4]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chebinterp</span>(<span class="pl-c1">g</span>.(x), lb, ub, tol<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span> prevent terms from being dropped</span>
Chebyshev order (<span class="pl-c1">10</span>, <span class="pl-c1">20</span>) interpolator on [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">×</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">chebinterp</span>(<span class="pl-c1">g</span>.(x), lb, ub, tol<span class="pl-k">=</span><span class="pl-c1">0.01</span>) <span class="pl-c"><span class="pl-c">#</span> request only about 1% accuracy</span>
Chebyshev order (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) interpolator on [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">×</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]</pre></div>
<p dir="auto">The <code>chebgradient</code> function now returns the function and its <em>gradient</em> (partial derivatives with respect to <code>x₁</code> and <code>x₂</code>) vector, which we can compare to the analytical gradient:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; chebgradient(c, [1.2, 3.4])
(0.23109384193446084, [0.9729314653248615, 0.248623978845799])

g(x) = sin(x[1] + cos(x[2]))

julia&gt; [cos(1.2 + cos(3.4)), cos(1.2 + cos(3.4)) * -sin(3.4)] # exact gradient
2-element Vector{Float64}:
 0.9729314653252673
 0.24862397884579854"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chebgradient</span>(c, [<span class="pl-c1">1.2</span>, <span class="pl-c1">3.4</span>])
(<span class="pl-c1">0.23109384193446084</span>, [<span class="pl-c1">0.9729314653248615</span>, <span class="pl-c1">0.248623978845799</span>])

<span class="pl-en">g</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">2</span>]))

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">cos</span>(<span class="pl-c1">1.2</span> <span class="pl-k">+</span> <span class="pl-c1">cos</span>(<span class="pl-c1">3.4</span>)), <span class="pl-c1">cos</span>(<span class="pl-c1">1.2</span> <span class="pl-k">+</span> <span class="pl-c1">cos</span>(<span class="pl-c1">3.4</span>)) <span class="pl-k">*</span> <span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">3.4</span>)] <span class="pl-c"><span class="pl-c">#</span> exact gradient</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.9729314653252673</span>
 <span class="pl-c1">0.24862397884579854</span></pre></div>
<p dir="auto">and we see that the derivative matches to high accuracy.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<p dir="auto">This package was inspired by functionality in <a href="https://github.com/RJDennis/ChebyshevApprox.jl">ChebyshevApprox.jl</a>, but was rewritten in order to get more performance and other features.  The <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun.jl</a> package also performs Chebyshev interpolation and many other tasks.   <a href="https://github.com/markmbaum/BasicInterpolators.jl">BasicInterpolators.jl</a> also provides Chebyshev interpolation in 1d and 2d, and <a href="https://github.com/SciML/Surrogates.jl">Surrogates.jl</a> provides some other interpolation schemes.</p>
</article></div>