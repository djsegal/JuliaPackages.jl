<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-juliakara" class="anchor" aria-hidden="true" href="#juliakara"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JuliaKara</h1>
<div align="center">
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4795c3b9e07d1d1115065352b69daba8eed91c29/68747470733a2f2f692e696d6775722e636f6d2f67336e6f5052332e676966"><img src="https://camo.githubusercontent.com/4795c3b9e07d1d1115065352b69daba8eed91c29/68747470733a2f2f692e696d6775722e636f6d2f67336e6f5052332e676966" width="500" data-canonical-src="https://i.imgur.com/g3noPR3.gif" style="max-width:100%;"></a>
</div>
<p><a href="https://travis-ci.org/sebastianpech/JuliaKara.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7aab8cfcb73e510b196379b37f22458b4967d609/68747470733a2f2f7472617669732d63692e6f72672f73656261737469616e706563682f4a756c69614b6172612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sebastianpech/JuliaKara.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/sebastianpech/JuliaKara.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d81feaa35e26becf8aaf5983645fcb2a5038886e/687474703a2f2f636f6465636f762e696f2f6769746875622f73656261737469616e706563682f4a756c69614b6172612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/sebastianpech/JuliaKara.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://sebastianpech.github.io/JuliaKara.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://sebastianpech.github.io/JuliaKara.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>A package that is a port of SwissEducs <a href="http://www.swisseduc.ch/informatik/karatojava/" rel="nofollow">Kara</a> (Page in German).
Kara is a concept for an easy access into the world of programming.
Kara is a tiny ladybug living in a forest with mushrooms, trees and leafs.
Kara can move a single mushroom, place and remove leafs, cannot move trees and is entirely controlled using julia code.
In comparison to the original Kara the interaction manly focuses on using the REPL.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Install within Julia in the Pkg REPL-mode using</p>
<div class="highlight highlight-source-julia"><pre>add JuliaKara</pre></div>
<p>or in Julia 0.6 in REPL-mode using</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaKara<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>Start using JuliaKara by opening Julia and entering <code>using JuliaKara</code> into the REPL.
Next create a new world of size 10x10 with function bindings in global scope by entering <code>@World (10,10)</code>.</p>
<p>You can now use</p>
<ul>
<li><code>move(kara)</code> to make a step into the direction Kara is facing,</li>
<li><code>turnLeft(kara)</code> to turn Kara left,</li>
<li><code>turnRight(kara)</code> to turn Kara right,</li>
<li><code>putLeaf(kara)</code> to place a leaf beneath Kara and</li>
<li><code>removeLeaf(kara)</code> to remove a leaf from beneath Kara</li>
</ul>
<p>and</p>
<ul>
<li><code>treeFront(kara)</code> to check if Kara stands in front of a tree,</li>
<li><code>treeLeft(kara)</code> to check if there is a tree left of Kara,</li>
<li><code>treeRight(kara)</code> to check if there is a tree right of Kara,</li>
<li><code>onLeaf(kara)</code> to check if there is a leaf beneath Kara and</li>
<li><code>mushroomFront(kara)</code> to check if Kara stands in front of a mushroom.</li>
</ul>
<h3><a id="user-content-alternative-methods-of-creatingloading-a-world" class="anchor" aria-hidden="true" href="#alternative-methods-of-creatingloading-a-world"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternative methods of creating/loading a world</h3>
<p>JuliaKara is aware of the xml syntax the original Kara uses for storing worlds in files.
It's possible to load a world through the GUI or with the command <code>@World [path]</code>.
In contrast to the GUI version <code>@World [path]</code> opens a new window and registers <code>world</code> and <code>kara</code> in global scope as references.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@World</span> <span class="pl-s"><span class="pl-pds">"</span>file1.world<span class="pl-pds">"</span></span>
<span class="pl-c1">move</span>(kara) <span class="pl-c"><span class="pl-c">#</span> moves Kara in world from file1.world</span>

<span class="pl-c1">@World</span> <span class="pl-s"><span class="pl-pds">"</span>file2.world<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> kara and world referencing elements from file1.world</span>
<span class="pl-c"><span class="pl-c">#</span> are now overwritten with references to elements from file2.world</span>
<span class="pl-c1">move</span>(kara) <span class="pl-c"><span class="pl-c">#</span> moves Kara in world from file2.world</span>

<span class="pl-c"><span class="pl-c">#</span> Create additional references to world and kara</span>
world_save <span class="pl-k">=</span> world
kara_save <span class="pl-k">=</span> kara

<span class="pl-c1">@World</span> <span class="pl-s"><span class="pl-pds">"</span>file3.world<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> kara and world referencing elements from file2.world</span>
<span class="pl-c"><span class="pl-c">#</span> are now overwritten with references to elements from file3.world</span>
<span class="pl-c1">move</span>(kara) <span class="pl-c"><span class="pl-c">#</span> moves Kara in world from file3.world</span>

<span class="pl-c"><span class="pl-c">#</span> Access stored references</span>
<span class="pl-c1">move</span>(world_save,kara_save) <span class="pl-c"><span class="pl-c">#</span> moves Kara in world from file2.world</span></pre></div>
<p>In case one loads a world through the GUI and wants the above behaviour, the reference to Kara must be restored by:</p>
<div class="highlight highlight-source-julia"><pre>kara <span class="pl-k">=</span> <span class="pl-c1">get_kara</span>(world)</pre></div>
<p>JuliaKara supports multiple worlds and multiple Karas. In case you want to reproduce the example run it from within the test directory of JuliaKara e.g <code>~/.Julia/v0.6/JuliaKara/test</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Load the world contained in example.world.</span>
<span class="pl-c"><span class="pl-c">#</span> This also creates a macro @w1 in global scope to interact with </span>
<span class="pl-c"><span class="pl-c">#</span> the world</span>
<span class="pl-c1">@World</span> w1 <span class="pl-s"><span class="pl-pds">"</span>example.world<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Create an empty world w2</span>
<span class="pl-c1">@World</span> w2 (<span class="pl-c1">10</span>,<span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Place kara in the empty world.</span>
<span class="pl-c"><span class="pl-c">#</span> place_kara() returns a reference to the placed kara.</span>
<span class="pl-c"><span class="pl-c">#</span> @w2 place_kara(1,1) is just syntactic sugar for place_kara(w2,1,1)</span>
kara <span class="pl-k">=</span> <span class="pl-c1">@w2</span> <span class="pl-c1">place_kara</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Kara is already placed in world w1, therefore we fetch it with get_kara()</span>
<span class="pl-c"><span class="pl-c">#</span> Since we can't create two kara references we use lara instead.</span>
lara <span class="pl-k">=</span> <span class="pl-c1">@w1</span> <span class="pl-c1">get_kara</span>()

<span class="pl-c"><span class="pl-c">#</span> Move lara a step in world w1</span>
<span class="pl-c1">@w1</span> <span class="pl-c1">move</span>(lara)
<span class="pl-c"><span class="pl-c">#</span> Alternatively:</span>
<span class="pl-c1">move</span>(w1,lara)

<span class="pl-c"><span class="pl-c">#</span> Move kara a step in world w2</span>
<span class="pl-c1">@w2</span> <span class="pl-c1">move</span>(kara)

<span class="pl-c"><span class="pl-c">#</span> It's even possible to allow kara from world w2 to </span>
<span class="pl-c"><span class="pl-c">#</span> place something in world w1</span>
<span class="pl-c1">@w1</span> <span class="pl-c1">putLeaf</span>(kara)
</pre></div>
<h3><a id="user-content-other-useful-methods" class="anchor" aria-hidden="true" href="#other-useful-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other useful methods</h3>
<ul>
<li><code>reset!(world)</code>: Resets <code>world</code> to the state after loading or the last call to <code>store!(world)</code>.</li>
<li><code>store!(world)</code>: Stores the current state of <code>world</code>.</li>
<li><code>place_kara(world,X,Y,orientation)</code>: Places Kara in <code>world</code> at <code>X</code>, <code>Y</code> oriented <code>orientation</code>. Valid orientations are <code>:NORTH</code>, <code>:EAST</code>, <code>:SOUTH</code> and <code>:WEST</code>. <code>orientation</code> is optional and defaults to <code>:NORTH</code>.</li>
<li><code>place_mushroom(world,X,Y)</code>: Places a mushroom in <code>world</code> at <code>X</code>, <code>Y</code>.</li>
<li><code>place_tree(world,X,Y)</code>: Places a tree in <code>world</code> at <code>X</code>, <code>Y</code>.</li>
<li><code>place_leaf(world,X,Y)</code>: Places a leaf in <code>world</code> at <code>X</code>, <code>Y</code>.</li>
</ul>
<p>The above used macro for interaction e.g. <code>@w1</code> basically translate <code>@w1 f(args...)</code> to <code>f(w1,args...)</code>.
Thus as all the above methods have <code>world</code> as their first argument they can also be called using the world macro.
This also works for custom methods:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">turnAround</span>(wo,ka)
	<span class="pl-c1">turnLeft</span>(wo,ka)
	<span class="pl-c1">turnLeft</span>(wo,ka)
<span class="pl-k">end</span>

<span class="pl-c1">@w1</span> <span class="pl-c1">turnAround</span>(lara)</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>The <a href="https://sebastianpech.github.io/JuliaKara-Examples/" rel="nofollow">examples page</a> for
JuliaKara contains further material showing the usage of JuliaKara.</p>
</article></div>