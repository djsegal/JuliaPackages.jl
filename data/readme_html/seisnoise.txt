<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-seisnoisejl" class="anchor" aria-hidden="true" href="#seisnoisejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SeisNoise.jl</h1>
<p>SeisNoise.jl is designed for fast and easy ambient noise cross-correlation in Julia.</p>
<p><a href="https://tclements.github.io/SeisNoise.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a> <a href="https://travis-ci.org/tclements/SeisNoise.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/19adfa5b0b6991f0b82f7d7d2c3e1523e1ffed1c/68747470733a2f2f7472617669732d63692e6f72672f74636c656d656e74732f536569734e6f6973652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tclements/SeisNoise.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/tclements/SeisNoise.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cad9e25560c75df2f52edf2cc90f0f2e7181ceba/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74636c656d656e74732f536569734e6f6973652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/tclements/SeisNoise.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/assets/logo.png"><img src="/docs/src/assets/logo.png" alt="Noise.jl Logo" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>From the Julia command prompt:</p>
<ol>
<li>Press <code>]</code> to enter <code>pkg</code>.</li>
<li>Type or copy: <code>add SeisNoise</code></li>
<li>Press backspace to exit <code>pkg</code>.</li>
<li>Type or copy: <code>using SeisNoise</code></li>
</ol>
<h2><a id="user-content-package-features" class="anchor" aria-hidden="true" href="#package-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Package Features</h2>
<ul>
<li>Built upon <a href="https://seisio.readthedocs.io/en/latest/" rel="nofollow">SeisIO</a> for easy and fast I/O.</li>
<li>Custom types for saving Fourier Transforms of data and cross-correlations</li>
<li>Array-based processing of raw data and cross-correlation.</li>
<li>Methods for <em>dv/v</em> measurements.</li>
<li>Coming soon: Dispersion analysis.</li>
</ul>
<h2><a id="user-content-seisnoise-cross-correlation-example" class="anchor" aria-hidden="true" href="#seisnoise-cross-correlation-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SeisNoise Cross-Correlation Example</h2>
<p>Once you have installed the package you can type <code>using SeisNoise</code> to start
cross-correlating. For example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SeisNoise, SeisIO
fs <span class="pl-k">=</span> <span class="pl-c1">40.</span> <span class="pl-c"><span class="pl-c">#</span> sampling frequency in Hz</span>
freqmin,freqmax <span class="pl-k">=</span> <span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span> <span class="pl-c"><span class="pl-c">#</span> min and max frequencies </span>
cc_step, cc_len <span class="pl-k">=</span> <span class="pl-c1">450</span>, <span class="pl-c1">1800</span> <span class="pl-c"><span class="pl-c">#</span> corrleation step and length in S</span>
maxlag <span class="pl-k">=</span> <span class="pl-c1">60.</span> <span class="pl-c"><span class="pl-c">#</span> maximum lag time in correlation</span>
s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2019-02-03<span class="pl-pds">"</span></span>
t <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2019-02-04<span class="pl-pds">"</span></span>
S1 <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(<span class="pl-s"><span class="pl-pds">"</span>FDSN<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>CI.SDD..BHZ<span class="pl-pds">"</span></span>,src<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SCEDC<span class="pl-pds">"</span></span>,s<span class="pl-k">=</span>s,t<span class="pl-k">=</span>t)
S2 <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(<span class="pl-s"><span class="pl-pds">"</span>FDSN<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>CI.PER..BHZ<span class="pl-pds">"</span></span>,src<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SCEDC<span class="pl-pds">"</span></span>,s<span class="pl-k">=</span>s,t<span class="pl-k">=</span>t)
<span class="pl-c1">process_raw!</span>(S1,fs)
<span class="pl-c1">process_raw!</span>(S2,fs)
R <span class="pl-k">=</span> <span class="pl-c1">RawData</span>.([S1,S2],cc_len,cc_step)
<span class="pl-c1">detrend!</span>.(R)
<span class="pl-c1">taper!</span>.(R)
<span class="pl-c1">bandpass!</span>.(R,freqmin,freqmax,zerophase<span class="pl-k">=</span><span class="pl-c1">true</span>)
FFT <span class="pl-k">=</span> <span class="pl-c1">compute_fft</span>.(R)
<span class="pl-c1">whiten!</span>.(FFT,freqmin,freqmax)
C <span class="pl-k">=</span> <span class="pl-c1">compute_cc</span>(FFT[<span class="pl-c1">1</span>],FFT[<span class="pl-c1">2</span>],maxlag)
<span class="pl-c1">clean_up!</span>(C,freqmin,freqmax)
<span class="pl-c1">abs_max!</span>(C)
<span class="pl-c1">corrplot</span>(C)</pre></div>
<p>will produce this figure:</p>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/assets/xcorr-example.png"><img src="/docs/src/assets/xcorr-example.png" alt="plot1" style="max-width:100%;"></a></p>
<h2><a id="user-content-cross-correlation-on-the-gpu" class="anchor" aria-hidden="true" href="#cross-correlation-on-the-gpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cross-correlation on the GPU</h2>
<p>SeisNoise can process data and compute cross-correlations on the GPU with CUDA. The <a href="https://github.com/JuliaGPU">JuliaGPU</a> suite provides a high-level interface for CUDA programming through the CuArrays.jl and CUDAnative.jl packages. CuArrays.jl provides an array type for storing data on the GPU. Data in SeisNoise structures (<code>R.x</code>, <code>F.fft</code>, and <code>C.corr</code> fields, for <code>RawData</code>, <code>FFTData</code>, and <code>CorrData</code>, respectively) can move between an <code>Array</code> on the CPU to a <code>CuArray</code> on the GPU using the <code>gpu</code> and <code>cpu</code> functions, as shown below.</p>
<blockquote>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> Only <strong>Nvidia</strong> GPUs are suported at the moment. Hold in there for AMD/OpenCL support...</p>
</blockquote>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> create raw data and send to GPU </span>
R <span class="pl-k">=</span> <span class="pl-c1">RawData</span>(S1, cc_len, cc_step) <span class="pl-k">|&gt;</span> gpu 
R<span class="pl-k">.</span>x
<span class="pl-c1">72000</span><span class="pl-k">×</span><span class="pl-c1">188</span> CuArrays<span class="pl-k">.</span>CuArray{Float32,<span class="pl-c1">2</span>,Nothing}

<span class="pl-c"><span class="pl-c">#</span> send data back to the CPU</span>
R <span class="pl-k">=</span> R <span class="pl-k">|&gt;</span> cpu 
R<span class="pl-k">.</span>x
<span class="pl-c1">72000</span><span class="pl-k">×</span><span class="pl-c1">188</span> Array{Float32,<span class="pl-c1">2</span>}</pre></div>
<p>All basic processing remains the same on the GPU. Here is a complete cross-correlation routine on the GPU:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> send data to GPU </span>
R1 <span class="pl-k">=</span> <span class="pl-c1">RawData</span>(S1, cc_len, cc_step) <span class="pl-k">|&gt;</span> gpu 
R2 <span class="pl-k">=</span> <span class="pl-c1">RawData</span>(S2, cc_len, cc_step) <span class="pl-k">|&gt;</span> gpu
R <span class="pl-k">=</span> [R1,R2]

<span class="pl-c"><span class="pl-c">#</span> preprocess on the GPU </span>
<span class="pl-c1">detrend!</span>.(R)
<span class="pl-c1">taper!</span>.(R)
<span class="pl-c1">bandpass!</span>.(R,freqmin,freqmax,zerophase<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> FFT on GPU </span>
FFT <span class="pl-k">=</span> <span class="pl-c1">compute_fft</span>.(R)
<span class="pl-c1">whiten!</span>.(FFT,freqmin,freqmax)

<span class="pl-c"><span class="pl-c">#</span> compute correlation and send to cpu </span>
C <span class="pl-k">=</span> <span class="pl-c1">compute_cc</span>(FFT[<span class="pl-c1">1</span>],FFT[<span class="pl-c1">2</span>],maxlag) <span class="pl-k">|&gt;</span> cpu </pre></div>
<h3><a id="user-content-routines-implemented-on-the-gpu" class="anchor" aria-hidden="true" href="#routines-implemented-on-the-gpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Routines Implemented on the GPU</h3>
<ul>
<li>Preprocessing:
<ul>
<li><code>detrend</code>,<code>demean</code>, <code>taper</code>, <code>onebit</code>, <code>smooth</code></li>
</ul>
</li>
<li>Filtering:
<ul>
<li><code>bandpass</code>, <code>bandstop</code>, <code>lowpass</code>, <code>highpass</code></li>
</ul>
</li>
<li>Fourier Domain:
<ul>
<li><code>whiten</code>, <code>rfft</code>, <code>irfft</code></li>
</ul>
</li>
<li>Cross-correlation:
<ul>
<li><code>correlate</code>, <code>cross-coherence</code>, <code>deconvolution</code></li>
</ul>
</li>
<li>Post-processing:
<ul>
<li><code>stack</code>, <code>filter</code>s, etc..</li>
</ul>
</li>
</ul>
</article></div>