<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/FluxML/Zygote.jl/master/docs/src/assets/logo.png#gh-light-mode-only"><img width="400px" src="https://raw.githubusercontent.com/FluxML/Zygote.jl/master/docs/src/assets/logo.png#gh-light-mode-only" style="max-width: 100%;"></a>
  <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/FluxML/Zygote.jl/master/docs/src/assets/logo-dark.png#gh-dark-mode-only"><img width="400px" src="https://raw.githubusercontent.com/FluxML/Zygote.jl/master/docs/src/assets/logo-dark.png#gh-dark-mode-only" style="max-width: 100%;"></a>
</p>

<p dir="auto"><a href="https://github.com/FluxML/Zygote.jl/actions"><img src="https://github.com/FluxML/Zygote.jl/workflows/CI/badge.svg" alt="CI Testing" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/FluxML/Zygote.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/86658c3ac75392b5d500d6e38cb7fc3c9e4389b14e06fd2390daf8723755b3f4/68747470733a2f2f636f6465636f762e696f2f67682f466c75784d4c2f5a79676f74652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/FluxML/Zygote.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://fluxml.ai/Zygote.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>] add Zygote</code></p>
<p dir="auto">Zygote provides source-to-source automatic differentiation (AD) in Julia, and is the next-gen AD system for the <a href="https://github.com/FluxML/Flux.jl">Flux</a> differentiable programming framework. For more details and benchmarks of Zygote's technique, see <a href="https://arxiv.org/abs/1810.07951" rel="nofollow">our paper</a>. You may want to check out Flux for more interesting examples of Zygote usage; the documentation here focuses on internals and advanced AD usage.</p>
<p dir="auto">Zygote supports Julia 1.6 onwards, but we highly recommend using Julia 1.8 or later.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Zygote

julia&gt; f(x) = 5x + 3

julia&gt; f(10), f'(10)
(53, 5.0)

julia&gt; @code_llvm f'(10)
define i64 @&quot;julia_#625_38792&quot;(i64) {
top:
  ret i64 5
}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zygote

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">5</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">10</span>), f<span class="pl-k">'</span>(<span class="pl-c1">10</span>)
(<span class="pl-c1">53</span>, <span class="pl-c1">5.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_llvm</span> f<span class="pl-k">'</span>(<span class="pl-c1">10</span>)
define i64 @<span class="pl-s"><span class="pl-pds">"</span>julia_#625_38792<span class="pl-pds">"</span></span>(i64) {
top<span class="pl-k">:</span>
  ret i64 <span class="pl-c1">5</span>
}</pre></div>
<p dir="auto">"Source-to-source" means that Zygote hooks into Julia's compiler, and generates the backwards pass for you â€“ as if you had written it by hand.</p>
<p dir="auto">Zygote supports the flexibility and dynamism of the Julia language, including control flow, recursion, closures, structs, dictionaries, and more.
Mutation and exception handling are currently not supported.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fs = Dict(&quot;sin&quot; =&gt; sin, &quot;cos&quot; =&gt; cos, &quot;tan&quot; =&gt; tan);

julia&gt; gradient(x -&gt; fs[readline()](x), 1)
sin
0.5403023058681398"><pre>julia<span class="pl-k">&gt;</span> fs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>sin<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> sin, <span class="pl-s"><span class="pl-pds">"</span>cos<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> cos, <span class="pl-s"><span class="pl-pds">"</span>tan<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> tan);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gradient</span>(x <span class="pl-k">-&gt;</span> fs[<span class="pl-c1">readline</span>()](x), <span class="pl-c1">1</span>)
sin
<span class="pl-c1">0.5403023058681398</span></pre></div>
<p dir="auto">Zygote benefits from using the <a href="https://github.com/JuliaDiff/ChainRules.jl">ChainRules.jl</a> ruleset.
Custom gradients can be defined by extending the <a href="https://github.com/JuliaDiff/ChainRulesCore.jl">ChainRulesCore.jl</a>'s <code>rrule</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ChainRulesCore

julia&gt; add(a, b) = a + b

julia&gt; function ChainRulesCore.rrule(::typeof(add), a, b)
           add_pb(dy) = (NoTangent(), dy, dy)
           return add(a, b), add_pb
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChainRulesCore

julia<span class="pl-k">&gt;</span> <span class="pl-en">add</span>(a, b) <span class="pl-k">=</span> a <span class="pl-k">+</span> b

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> ChainRulesCore<span class="pl-k">.</span><span class="pl-en">rrule</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(add), a, b)
           <span class="pl-en">add_pb</span>(dy) <span class="pl-k">=</span> (<span class="pl-c1">NoTangent</span>(), dy, dy)
           <span class="pl-k">return</span> <span class="pl-c1">add</span>(a, b), add_pb
       <span class="pl-k">end</span></pre></div>
<p dir="auto">To support large machine learning models with many parameters, Zygote can differentiate implicitly-used parameters, as opposed to just function arguments.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; W, b = rand(2, 3), rand(2);

julia&gt; predict(x) = W*x .+ b;

julia&gt; g = gradient(Params([W, b])) do
         sum(predict([1,2,3]))
       end
Grads(...)

julia&gt; g[W], g[b]
([1.0 2.0 3.0; 1.0 2.0 3.0], [1.0, 1.0])"><pre>julia<span class="pl-k">&gt;</span> W, b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">predict</span>(x) <span class="pl-k">=</span> W<span class="pl-k">*</span>x <span class="pl-k">.+</span> b;

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">gradient</span>(<span class="pl-c1">Params</span>([W, b])) <span class="pl-k">do</span>
         <span class="pl-c1">sum</span>(<span class="pl-c1">predict</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]))
       <span class="pl-k">end</span>
<span class="pl-c1">Grads</span>(<span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> g[W], g[b]
([<span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">3.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">3.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])</pre></div>
</article></div>