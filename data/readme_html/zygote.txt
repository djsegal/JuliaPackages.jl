<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p align="center">
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/FluxML/fluxml.github.io/master/zygote.png"><img width="400px" src="https://raw.githubusercontent.com/FluxML/fluxml.github.io/master/zygote.png" style="max-width:100%;"></a>
</p>
<p><a href="https://travis-ci.org/FluxML/Zygote.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a383c9b8923b8c02f50ec6a7cd2348f1a07df588/68747470733a2f2f7472617669732d63692e6f72672f466c75784d4c2f5a79676f74652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FluxML/Zygote.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://fluxml.ai/Zygote.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><code>] add Zygote</code></p>
<p>Zygote provides source-to-source automatic differentiation (AD) in Julia, and is the next-gen AD system for the <a href="https://github.com/FluxML/Flux.jl">Flux</a> differentiable programming framework. For more details and benchmarks of Zygote's technique, see <a href="https://arxiv.org/abs/1810.07951" rel="nofollow">our paper</a>. You may want to check out Flux for more interesting examples of Zygote usage; the documentation here focuses on internals and advanced AD usage.</p>
<p>Zygote supports Julia 1.0 onwards, but we highly recommend using Julia 1.3 or later.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zygote

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">5</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">10</span>), f<span class="pl-k">'</span>(<span class="pl-c1">10</span>)
(<span class="pl-c1">53</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_llvm</span> f<span class="pl-k">'</span>(<span class="pl-c1">10</span>)
define i64 @<span class="pl-s"><span class="pl-pds">"</span>julia_#625_38792<span class="pl-pds">"</span></span>(i64) {
top<span class="pl-k">:</span>
  ret i64 <span class="pl-c1">5</span>
}</pre></div>
<p>"Source-to-source" means that Zygote hooks into Julia's compiler, and generates the backwards pass for you – as if you had written it by hand.</p>
<p>Without compromising on performance, Zygote supports the full flexibility and dynamism of the Julia language, including control flow, recursion, closures, structs, dictionaries, and more.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> fs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>sin<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> sin, <span class="pl-s"><span class="pl-pds">"</span>cos<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> cos, <span class="pl-s"><span class="pl-pds">"</span>tan<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> tan);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gradient</span>(x <span class="pl-k">-&gt;</span> fs[<span class="pl-c1">readline</span>()](x), <span class="pl-c1">1</span>)
sin
<span class="pl-c1">0.5403023058681398</span></pre></div>
<p>Defining custom gradients is a cinch, and errors have good stacktraces.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zygote<span class="pl-k">:</span> <span class="pl-c1">@adjoint</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">add</span>(a, b) <span class="pl-k">=</span> a <span class="pl-k">+</span> b

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@adjoint</span> <span class="pl-en">add</span>(a, b) <span class="pl-k">=</span> <span class="pl-c1">add</span>(a, b), Δ <span class="pl-k">-&gt;</span> (Δ, Δ)</pre></div>
<p>To support large machine learning models with many parameters, Zygote can differentiate implicitly-used parameters, as opposed to just function arguments.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> W, b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">predict</span>(x) <span class="pl-k">=</span> W<span class="pl-k">*</span>x <span class="pl-k">.+</span> b;

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">gradient</span>(<span class="pl-c1">Params</span>([W, b])) <span class="pl-k">do</span>
         <span class="pl-c1">sum</span>(<span class="pl-c1">predict</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]))
       <span class="pl-k">end</span>
<span class="pl-c1">Grads</span>(<span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> g[W], g[b]
([<span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">3.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">3.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])</pre></div>
</article></div>