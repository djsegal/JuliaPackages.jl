<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ibmqjulia" class="anchor" aria-hidden="true" href="#ibmqjulia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IBMQJulia</h1>
<p><a href="https://travis-ci.com/Sov-trotter/IBMQJulia.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b1d57e949048db16698cbb5622ee70f3560ab9bf57ed0c846966249adb95b706/68747470733a2f2f7472617669732d63692e636f6d2f536f762d74726f747465722f49424d514a756c69612e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.com/Sov-trotter/IBMQJulia.jl.svg?branch=main" style="max-width:100%;"></a>
<a href="undefined"><img src="https://camo.githubusercontent.com/8c48bee3d6e9c71f0664a3c4e8397e4b446c42702a6f8a79d16fcf2aaf301139/68747470733a2f2f636f6465636f762e696f2f67682f536f762d74726f747465722f49424d514a756c69612e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d31594334385850513132" alt="codecov" data-canonical-src="https://codecov.io/gh/Sov-trotter/IBMQJulia.jl/branch/main/graph/badge.svg?token=1YC48XPQ12" style="max-width:100%;"></a></p>
<h1><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h1>
<h2><a id="user-content-login" class="anchor" aria-hidden="true" href="#login"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Login</h2>
<p>The <code>authenticate</code> method will log you in.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="user = authenticate(token)
"><pre><code>user = authenticate(token)
</code></pre></div>
<p>This creates a <code>IBMQUser</code> type.</p>
<h2><a id="user-content-creating-register" class="anchor" aria-hidden="true" href="#creating-register"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating register</h2>
<p>The <code>createreg</code> will make a <code>Yao.AbstractRegister</code> type viz. <code>IBMQReg</code> that holds vital info regarding communication with the IBMQ backend.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="reg = createreg(user)
"><pre><code>reg = createreg(user)
</code></pre></div>
<p>This will list the available backends and an interactive selection.</p>
<h2><a id="user-content-uploading-the-circuit" class="anchor" aria-hidden="true" href="#uploading-the-circuit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Uploading the circuit</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="job = apply!(reg, [qc])
"><pre><code>job = apply!(reg, [qc])
</code></pre></div>
<p>The <code>apply!(::IBMQReg, ::Array{ChainBlock})</code> accepts multiple circuits in an array since some backends are capable of running multiple expertiments in a single job</p>
<h2><a id="user-content-checking-status" class="anchor" aria-hidden="true" href="#checking-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Checking Status</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="stats = status(job)
"><pre><code>stats = status(job)
</code></pre></div>
<p>returns the status of the job.
Possible return values are:
<code>COMPLETED</code>, <code>VALIDATING</code>, <code>QUEUED</code>, <code>RUNNING</code>,  <code>ERROR_VALIDATING_JOB</code>, <code>ERROR_RUNNING_JOB</code></p>
<h2><a id="user-content-fetching-results" class="anchor" aria-hidden="true" href="#fetching-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fetching results</h2>
<p>If the <code>status()</code> method returns <code>COMPLETED</code>, one can fetch the results with the <code>getresult()</code> method.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="getresult(job)
"><pre><code>getresult(job)
</code></pre></div>
<p>The result data is stored in <code>Dict</code> format.</p>
</article></div>