<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dynamicmovementprimitives" class="anchor" aria-hidden="true" href="#dynamicmovementprimitives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DynamicMovementPrimitives</h1>
<p><a href="https://travis-ci.org/baggepinnen/DynamicMovementPrimitives.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/763803d7b753ebba824a25505a226125350cd06a1ddf4599a3664014e5fd53f3/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f44796e616d69634d6f76656d656e745072696d6974697665732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/DynamicMovementPrimitives.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Provides implementations of Ijspeert et al. 2013 and of Martin Karlsson, Fredrik Bagge Carlson, et al. 2017</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;DynamicMovementPrimitives&quot;)
using DynamicMovementPrimitives
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DynamicMovementPrimitives<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> DynamicMovementPrimitives</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-standard-dmp" class="anchor" aria-hidden="true" href="#standard-dmp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Standard DMP</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DynamicMovementPrimitives
Nbasis  = 15
αz      = 25.
αx      = 1.
opts    = DMPopts(Nbasis,αx,αz)

y       = [zeros(10);LinRange(0,2,1000); 2ones(500)]
T       = length(y)
t       = LinRange(0,10,T)
h       = t[2]-t[1] # Sample interval
y       = [y 0.5y]
ẏ       = centraldiff(y) ./h # Differentiate position to get velocity
ÿ       = centraldiff(ẏ) ./h
dmp     = fit(y,ẏ,ÿ,t,opts)

tout,yout,ẏout,xout = solve(dmp,t) # Generate trajectory, see ?solve for options
plot(dmp) # Requires Plots.jl, plots the trajectory from solve with default options
plot(dmp,true)
"><pre><span class="pl-k">using</span> DynamicMovementPrimitives
Nbasis  <span class="pl-k">=</span> <span class="pl-c1">15</span>
αz      <span class="pl-k">=</span> <span class="pl-c1">25.</span>
αx      <span class="pl-k">=</span> <span class="pl-c1">1.</span>
opts    <span class="pl-k">=</span> <span class="pl-c1">DMPopts</span>(Nbasis,αx,αz)

y       <span class="pl-k">=</span> [<span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>);<span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1000</span>); <span class="pl-c1">2</span><span class="pl-c1">ones</span>(<span class="pl-c1">500</span>)]
T       <span class="pl-k">=</span> <span class="pl-c1">length</span>(y)
t       <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">10</span>,T)
h       <span class="pl-k">=</span> t[<span class="pl-c1">2</span>]<span class="pl-k">-</span>t[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> Sample interval</span>
y       <span class="pl-k">=</span> [y <span class="pl-c1">0.5</span>y]
ẏ       <span class="pl-k">=</span> <span class="pl-c1">centraldiff</span>(y) <span class="pl-k">./</span>h <span class="pl-c"><span class="pl-c">#</span> Differentiate position to get velocity</span>
ÿ       <span class="pl-k">=</span> <span class="pl-c1">centraldiff</span>(ẏ) <span class="pl-k">./</span>h
dmp     <span class="pl-k">=</span> <span class="pl-c1">fit</span>(y,ẏ,ÿ,t,opts)

tout,yout,ẏout,xout <span class="pl-k">=</span> <span class="pl-c1">solve</span>(dmp,t) <span class="pl-c"><span class="pl-c">#</span> Generate trajectory, see ?solve for options</span>
<span class="pl-c1">plot</span>(dmp) <span class="pl-c"><span class="pl-c">#</span> Requires Plots.jl, plots the trajectory from solve with default options</span>
<span class="pl-c1">plot</span>(dmp,<span class="pl-c1">true</span>)</pre></div>
<h3><a id="user-content-dmp-with-two-degrees-of-freedom-karlsson-bagge-carlson-et-al-2017" class="anchor" aria-hidden="true" href="#dmp-with-two-degrees-of-freedom-karlsson-bagge-carlson-et-al-2017"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DMP with two degrees of freedom (Karlsson, Bagge Carlson et al. 2017)</h3>
<p>This package also contains an implementation of</p>
<div class="highlight highlight-text-bibtex position-relative" data-snippet-clipboard-copy-content="@inproceedings{karlsson2017dmp,
  title        = {Two-Degree-of-Freedom Control for Trajectory Tracking and Perturbation Recovery during Execution of Dynamical Movement Primitives},
  author       = {Karlsson, Martin and Bagge Carlson, Fredrik and Robertsson, Anders and Johansson, Rolf},
  booktitle    = {20th IFAC World Congress},
  year         = {2017},
}
"><pre><span class="pl-k">@inproceedings</span>{<span class="pl-en">karlsson2017dmp</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Two-Degree-of-Freedom Control for Trajectory Tracking and Perturbation Recovery during Execution of Dynamical Movement Primitives<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Karlsson, Martin and Bagge Carlson, Fredrik and Robertsson, Anders and Johansson, Rolf<span class="pl-pds">}</span></span>,
  <span class="pl-s">booktitle</span>    = <span class="pl-s"><span class="pl-pds">{</span>20th IFAC World Congress<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2017<span class="pl-pds">}</span></span>,
}</pre></div>
<p>We start by upgrading the DMP object to incorporate also the controller parameters for the 2DOF controller</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dmp2opts = DMP2dofopts(kp = 25,kv = 10,kc = 10_000,αe = 5)
dmp2 = DMP2dof(dmp, dmp2opts) # Upgrade dmp to 2DOF version

t,yc,ẏc,x,ya,ẏa,e = solve(dmp2,t)
plot(dmp2) # Requires Plots.jl, plots the trajectory from solve with default options
plot(dmp2,true)
"><pre>dmp2opts <span class="pl-k">=</span> <span class="pl-c1">DMP2dofopts</span>(kp <span class="pl-k">=</span> <span class="pl-c1">25</span>,kv <span class="pl-k">=</span> <span class="pl-c1">10</span>,kc <span class="pl-k">=</span> <span class="pl-c1">10_000</span>,αe <span class="pl-k">=</span> <span class="pl-c1">5</span>)
dmp2 <span class="pl-k">=</span> <span class="pl-c1">DMP2dof</span>(dmp, dmp2opts) <span class="pl-c"><span class="pl-c">#</span> Upgrade dmp to 2DOF version</span>

t,yc,ẏc,x,ya,ẏa,e <span class="pl-k">=</span> <span class="pl-c1">solve</span>(dmp2,t)
<span class="pl-c1">plot</span>(dmp2) <span class="pl-c"><span class="pl-c">#</span> Requires Plots.jl, plots the trajectory from solve with default options</span>
<span class="pl-c1">plot</span>(dmp2,<span class="pl-c1">true</span>)</pre></div>
<p>We test the performance of the 2DOF controller by implementing a solver callback. Between <code>t=2.5</code> and <code>t=4</code>, we stop the evolution of the physical system by setting <code>ẏa = 0</code> through <code>u[3] = uprev[3]</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import OrdinaryDiffEq
condition(u,t,integrator) = 2.5 &lt;= t &lt; 4
affect!(integrator) = (integrator.u[3] = integrator.uprev[3])
cb = OrdinaryDiffEq.DiscreteCallback(condition,affect!)
"><pre><span class="pl-k">import</span> OrdinaryDiffEq
<span class="pl-en">condition</span>(u,t,integrator) <span class="pl-k">=</span> <span class="pl-c1">2.5</span> <span class="pl-k">&lt;=</span> t <span class="pl-k">&lt;</span> <span class="pl-c1">4</span>
<span class="pl-en">affect!</span>(integrator) <span class="pl-k">=</span> (integrator<span class="pl-k">.</span>u[<span class="pl-c1">3</span>] <span class="pl-k">=</span> integrator<span class="pl-k">.</span>uprev[<span class="pl-c1">3</span>])
cb <span class="pl-k">=</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">DiscreteCallback</span>(condition,affect!)</pre></div>
<p>We can call the solve method with our custom callback and plot the result. It should be clear from the figures that this time, the coupled signal <code>yc</code> slows down when there is a nonzero error.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t,yc,ẏc,x,ya,ẏa,e = solve(dmp2,t, solver=OrdinaryDiffEq.Euler(), callback=cb)
plot(t,ẏc, lab=&quot;\$ẏ_c\$&quot;, c=:red, l=(:dash, 3), layout=(2,2), subplot=1)
plot!(t,yc, lab=&quot;\$y_c\$&quot;, c=:red, l=(:dash, 3), subplot=2)
plot!(t,ẏa, lab=&quot;\$ẏ_a\$&quot;, c=:blue, subplot=1)
plot!(t,ya, lab=&quot;\$y_a\$&quot;, c=:blue, subplot=2)
plot!(t,e, lab=&quot;\$e\$&quot;, c=:green, subplot=3)
plot!(t,400 .&lt;= 1:T .&lt; 600, lab=&quot;Disturbance&quot;, c=:green, subplot=4, fillrange=0)
t,yc,ẏc,x,ya,ẏa,e = solve(dmp2,t)
plot!(t,ẏc, lab=&quot;\$ẏ_u\$&quot;, c=:black, l=(:dashdot, 3), subplot=1)
plot!(t,yc, lab=&quot;\$y_u\$&quot;, c=:black, l=(:dashdot, 3), subplot=2)
"><pre>t,yc,ẏc,x,ya,ẏa,e <span class="pl-k">=</span> <span class="pl-c1">solve</span>(dmp2,t, solver<span class="pl-k">=</span>OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">Euler</span>(), callback<span class="pl-k">=</span>cb)
<span class="pl-c1">plot</span>(t,ẏc, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>ẏ_c<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:red</span>, l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>, <span class="pl-c1">3</span>), layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), subplot<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(t,yc, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>y_c<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:red</span>, l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>, <span class="pl-c1">3</span>), subplot<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot!</span>(t,ẏa, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>ẏ_a<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:blue</span>, subplot<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(t,ya, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>y_a<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:blue</span>, subplot<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot!</span>(t,e, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>e<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:green</span>, subplot<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">plot!</span>(t,<span class="pl-c1">400</span> <span class="pl-k">.&lt;=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>T <span class="pl-k">.&lt;</span> <span class="pl-c1">600</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Disturbance<span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:green</span>, subplot<span class="pl-k">=</span><span class="pl-c1">4</span>, fillrange<span class="pl-k">=</span><span class="pl-c1">0</span>)
t,yc,ẏc,x,ya,ẏa,e <span class="pl-k">=</span> <span class="pl-c1">solve</span>(dmp2,t)
<span class="pl-c1">plot!</span>(t,ẏc, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>ẏ_u<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:black</span>, l<span class="pl-k">=</span>(<span class="pl-c1">:dashdot</span>, <span class="pl-c1">3</span>), subplot<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(t,yc, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>y_u<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:black</span>, l<span class="pl-k">=</span>(<span class="pl-c1">:dashdot</span>, <span class="pl-c1">3</span>), subplot<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>In the figure below, the black line represents the evolution with no disturbance, in the paper referred to as the unperturbed evolution. The blue evolution is the actual system evolution whereas the red curve displays the coupled system evolution.
<a target="_blank" rel="noopener noreferrer" href="figs/dmp2.png"><img src="figs/dmp2.png" alt="DMP2dof plot" style="max-width:100%;"></a></p>
</article></div>