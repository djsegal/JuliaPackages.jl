<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-jib" class="anchor" aria-hidden="true" href="#jib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Jib</h1>
<p><strong>A Julia implementation of Interactive Brokers API</strong></p>
<p><code>Jib</code> is a native <a href="https://julialang.org/" rel="nofollow">Julia</a> client that implements
<a href="https://www.interactivebrokers.com/" rel="nofollow">Interactive Brokers</a> API to communicate with their
TWS or IBGateway.</p>
<p>It aims to be feature complete, however it does not intend to support legacy versions.
Currently, only API versions <del><code>v100</code></del> <code>v142+</code> are supported.</p>
<p>The package design follows the official C++/Java
<a href="http://interactivebrokers.github.io/tws-api/" rel="nofollow">IB API</a>,
which is based on an asynchronous request-response communication model
over a TCP socket.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h3>
<p>To install from GitHub:</p>
<div class="highlight highlight-source-julia"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>lbilli<span class="pl-k">/</span>Jib<span class="pl-k">.</span>jl</pre></div>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<p>The user interacts mainly with these two object types:</p>
<ul>
<li><code>Connection</code>: created after establishing a connection with the server and
holding a reference to it.</li>
<li><code>Wrapper</code>: containing the methods that are executed when the server responses are processed.</li>
</ul>
<p>Other data structures, such as <code>Contract</code> and <code>Order</code>, are implemented as Julia <code>struct</code>
that mirror the respective classes in the official IB API.</p>
<p>A complete minimal working example is shown.
For this code to work, an instance of the IB TWS or IBGateway needs to be running
on the local machine, listening on port <code>4002</code>.
<strong>Note:</strong> <em>demo</em> or <em>paper</em> account recommended!! <g-emoji class="g-emoji" alias="smirk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png">üòè</g-emoji></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Jib

wrap <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">Wrapper</span>(
         <span class="pl-c"><span class="pl-c">#</span> Customized methods</span>
         error<span class="pl-k">=</span> (id, errorCode, errorString) <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Error: <span class="pl-v">$(<span class="pl-c1">something</span>(id, <span class="pl-s"><span class="pl-pds">"</span>NA<span class="pl-pds">"</span></span>))</span> <span class="pl-v">$errorCode</span> <span class="pl-v">$errorString</span><span class="pl-pds">"</span></span>),

         nextValidId<span class="pl-k">=</span> (orderId) <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Next OrderId: <span class="pl-v">$orderId</span><span class="pl-pds">"</span></span>),

         managedAccounts<span class="pl-k">=</span> (accountsList) <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Managed Accounts: <span class="pl-v">$accountsList</span><span class="pl-pds">"</span></span>)
       );

<span class="pl-c"><span class="pl-c">#</span> Connect to the server with clientId = 1</span>
ib <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">connect</span>(<span class="pl-c1">4002</span>, <span class="pl-c1">1</span>);

<span class="pl-c"><span class="pl-c">#</span> Start a background Task to process the server responses</span>
Jib<span class="pl-k">.</span><span class="pl-c1">start_reader</span>(ib, wrap);

<span class="pl-c"><span class="pl-c">#</span> Define contract</span>
contract <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">Contract</span>(symbol<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>GOOG<span class="pl-pds">"</span></span>,
                        secType<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>STK<span class="pl-pds">"</span></span>,
                        exchange<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SMART<span class="pl-pds">"</span></span>,
                        currency<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>);

<span class="pl-c"><span class="pl-c">#</span> Define order</span>
order <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">Order</span>();
order<span class="pl-k">.</span>action        <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>BUY<span class="pl-pds">"</span></span>
order<span class="pl-k">.</span>totalQuantity <span class="pl-k">=</span> <span class="pl-c1">10</span>
order<span class="pl-k">.</span>orderType     <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>LMT<span class="pl-pds">"</span></span>
order<span class="pl-k">.</span>lmtPrice      <span class="pl-k">=</span> <span class="pl-c1">1000</span>

orderId <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Should match whatever is returned by the server</span>

<span class="pl-c"><span class="pl-c">#</span> Send order</span>
Jib<span class="pl-k">.</span><span class="pl-c1">placeOrder</span>(ib, orderId, contract, order)

<span class="pl-c"><span class="pl-c">#</span> Disconnect</span>
Jib<span class="pl-k">.</span><span class="pl-c1">disconnect</span>(ib)</pre></div>
<h5><a id="user-content-foreground-vs-background-processing" class="anchor" aria-hidden="true" href="#foreground-vs-background-processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Foreground vs. Background Processing</h5>
<p>It is possible to process the server responses either within the main process
or in a separate background <code>Task</code>:</p>
<ul>
<li><strong>foreground processing</strong> is triggered by invoking <code>Jib.check_all(ib, wrap)</code>.
It is the user's responsability to call it on a <strong>regular basis</strong>,
especially when data are streaming in.</li>
<li><strong>background processing</strong> is started by <code>Jib.start_reader(ib, wrap)</code>.
A separate <code>Task</code> is started in the background, which monitors the connection and processes
the responses as they arrive.</li>
</ul>
<p>To avoid undesired effects, the two approaches should not be mixed together
on the same connection.</p>
<h3><a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation Details</h3>
<p>The package does not export any name, therefore any functions
or types described here need to be prefixed by <code>Jib.*</code>.</p>
<p>As Julia is not an object-oriented language, the functionality of the IB
<code>EClient</code> class is provided here by regular functions. In particular:</p>
<ul>
<li><code>connect(port, clientId, connectOptions)</code>: establish a connection. Return
a <code>Connection</code> object.</li>
<li><code>disconnect(::Connection)</code>: close the connection.</li>
<li><code>check_all(::Connection, ::Wrapper)</code>: process available responses, <strong>not blocking</strong>.
Return the number of messages processed. <strong>Needs to be called regularly</strong>.</li>
<li><code>start_reader(::Connection, ::Wrapper)</code>: start a <code>Task</code> for background processing.</li>
<li>all other methods that send specific requests to the server.
Refer to the official IB <code>EClient</code> class documentation for details and method signatures.
The only caveat is to remeber to pass a <code>Connection</code> as first argument: <em>e.g.</em>
<code>reqContractDetails(ib::Connection, reqId:Int, contract::Contract)</code></li>
</ul>
<h5><a id="user-content-wrapper" class="anchor" aria-hidden="true" href="#wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="src/wrapper.jl"><code>Wrapper</code></a></h5>
<p>Like the official IB <code>EWrapper</code> class, this <code>struct</code> holds the callbacks that are dispatched when
responses are processed.
By default it is filled with dummy functions. The user should override in the constructor
the desired methods, as shown in the <a href="#usage">example</a> above.</p>
<p>A more comprehensive example is provided by <a href="src/wrapper.jl"><code>simple_wrap()</code></a>,
which is used like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Jib<span class="pl-k">:</span> Jib, Contract, reqContractDetails, simple_wrap, start_reader

data, wrap <span class="pl-k">=</span> <span class="pl-c1">simple_wrap</span>();

ib <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">connect</span>(<span class="pl-c1">4002</span>, <span class="pl-c1">1</span>);
<span class="pl-c1">start_reader</span>(ib, wrap);

<span class="pl-c1">reqContractDetails</span>(ib, <span class="pl-c1">99</span>, <span class="pl-c1">Contract</span>(conId<span class="pl-k">=</span><span class="pl-c1">208813720</span>, exchange<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SMART<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Wait for response and then access the "ContractDetails" result:</span>
data[<span class="pl-c1">:cd</span>]</pre></div>
<p>Thanks to closures, <code>data</code> (a <code>Dict</code> in this case) is accessible by all
<code>wrap</code> methods as well as the main program. This way it is possible to easily
propagate the incoming data to different parts of the program.</p>
<p>For more details about callback definitions and signatures,
refer to the official IB <code>EWrapper</code> class documentation.
As reference, the exact signatures used in this package
are found <a href="data/wrapper_signatures.jl">here</a>.</p>
<h4><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes</h4>
<p>Callbacks are generally invoked with arguments and types matching the signatures
as described in the official documentation.
However, there are few notable exceptions:</p>
<ul>
<li><code>tickPrice()</code> has an extra <code>size::Int</code> argument,
which is meaningful only when <code>TickType ‚àà {BID, ASK, LAST}</code>.
In these cases, the official IB API fires an extra <code>tickSize()</code> event instead.</li>
<li><code>historicalData()</code> is invoked only once per request,
presenting all the historical data as a single <code>DataFrame</code>,
whereas the official IB API invokes it row-by-row.</li>
<li><code>scannerData()</code> is also invoked once per request and its arguments
are in fact vectors rather than single values.</li>
</ul>
<p>These modifications make it possible to establish the rule:
<em>one callback per server response</em>.</p>
<p>As a corollary, <code>historicalDataEnd()</code> and <code>scannerDataEnd()</code> are redundant and
thus are <strong>not</strong> used in this package.</p>
<p><code>DataFrame</code> structures are also used as arguments in several other callbacks,
such as: <code>mktDepthExchanges()</code>, <code>smartComponents()</code>, <code>newsProviders()</code>, <code>histogramData()</code>,
<code>marketRule()</code> and the <code>historicalTicks*()</code> family.</p>
<h5><a id="user-content-data-structures" class="anchor" aria-hidden="true" href="#data-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data Structures</h5>
<p>Other classes that mainly hold data are also defined.
They are implemented as Julia <code>struct</code> or <code>mutable struct</code> with names,
types and default values matching the IB API counterparts.
Examples are <code>Contract</code>, <code>Order</code>, <code>ComboLeg</code>, <code>ExecutionFilter</code>, <code>ScannerSubscription</code>
and <code>Condition*</code>.</p>
<p><code>TagValueList</code> are implemented as Julia <code>NamedTuple</code>.
Wherever a TagValue is needed, something like this can be used:</p>
<div class="highlight highlight-source-julia"><pre>tagvaluelist <span class="pl-k">=</span> (tag1<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>value1<span class="pl-pds">"</span></span>, tag2<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>value2<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or, in case of an empty list:</span>
emptylist <span class="pl-k">=</span> <span class="pl-c1">NamedTuple</span>()</pre></div>
<p>Values don't need to be of type <code>String</code>; <code>Int</code> and <code>Float64</code> are also allowed.</p>
</article></div>