<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jib" class="anchor" aria-hidden="true" href="#jib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jib</h1>
<p dir="auto"><strong>A Julia implementation of Interactive Brokers API</strong></p>
<p dir="auto"><code>Jib</code> is a native <a href="https://julialang.org/" rel="nofollow">Julia</a> client that implements
<a href="https://www.interactivebrokers.com/" rel="nofollow">Interactive Brokers</a> API to communicate
with TWS or IBGateway.</p>
<p dir="auto">It aims to be feature complete, however it does not support legacy versions.
Currently, only API versions <code>v176+</code> are supported.</p>
<p dir="auto">The package design follows the official C++/Java
<a href="https://interactivebrokers.github.io/tws-api/" rel="nofollow">IB API</a>,
which is based on an asynchronous communication model over TCP.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto">To install from GitHub:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add https://github.com/lbilli/Jib.jl"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>lbilli<span class="pl-k">/</span>Jib<span class="pl-k">.</span>jl</pre></div>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">The user interacts mainly with these two objects:</p>
<ul dir="auto">
<li><code>Connection</code>: holding a reference to an established connection with the server</li>
<li><code>Wrapper</code>: containing the callbacks that are invoked when the server responses
are processed.</li>
</ul>
<p dir="auto">Other data structures, such as <code>Contract</code> and <code>Order</code>, are implemented as Julia <code>struct</code>
and mirror the respective classes in the official IB API.</p>
<p dir="auto">A complete minimal working example is shown.
For this code to work, an instance of the IB TWS or IBGateway needs to be running
on the local machine, listening on port <code>4002</code>.
<strong>Note:</strong> <em>demo</em> or <em>paper</em> account recommended!! <g-emoji class="g-emoji" alias="smirk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png">üòè</g-emoji></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Jib

wrap = Jib.Wrapper(
         # Customized methods go here
         error= (id, errorCode, errorString, advancedOrderRejectJson) -&gt;
                  println(&quot;Error: $(something(id, &quot;NA&quot;)) $errorCode $errorString $advancedOrderRejectJson&quot;),

         nextValidId= (orderId) -&gt; println(&quot;Next OrderId: $orderId&quot;),

         managedAccounts= (accountsList) -&gt; println(&quot;Managed Accounts: $accountsList&quot;)

         # more method overrides can go here...
       );

# Connect to the server with clientId = 1
ib = Jib.connect(4002, 1);

# Start a background Task to process the server responses
Jib.start_reader(ib, wrap);

# Define contract
contract = Jib.Contract(symbol=&quot;GOOG&quot;,
                        secType=&quot;STK&quot;,
                        exchange=&quot;SMART&quot;,
                        currency=&quot;USD&quot;);

# Define order
order = Jib.Order();
order.action        = &quot;BUY&quot;
order.totalQuantity = 10
order.orderType     = &quot;LMT&quot;
order.lmtPrice      = 1000

orderId = 1    # Should match whatever is returned by the server

# Send order
Jib.placeOrder(ib, orderId, contract, order)

# Disconnect
Jib.disconnect(ib)"><pre><span class="pl-k">using</span> Jib

wrap <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">Wrapper</span>(
         <span class="pl-c"><span class="pl-c">#</span> Customized methods go here</span>
         error<span class="pl-k">=</span> (id, errorCode, errorString, advancedOrderRejectJson) <span class="pl-k">-&gt;</span>
                  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Error: <span class="pl-v">$(<span class="pl-c1">something</span>(id, <span class="pl-s"><span class="pl-pds">"</span>NA<span class="pl-pds">"</span></span>))</span> <span class="pl-v">$errorCode</span> <span class="pl-v">$errorString</span> <span class="pl-v">$advancedOrderRejectJson</span><span class="pl-pds">"</span></span>),

         nextValidId<span class="pl-k">=</span> (orderId) <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Next OrderId: <span class="pl-v">$orderId</span><span class="pl-pds">"</span></span>),

         managedAccounts<span class="pl-k">=</span> (accountsList) <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Managed Accounts: <span class="pl-v">$accountsList</span><span class="pl-pds">"</span></span>)

         <span class="pl-c"><span class="pl-c">#</span> more method overrides can go here...</span>
       );

<span class="pl-c"><span class="pl-c">#</span> Connect to the server with clientId = 1</span>
ib <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">connect</span>(<span class="pl-c1">4002</span>, <span class="pl-c1">1</span>);

<span class="pl-c"><span class="pl-c">#</span> Start a background Task to process the server responses</span>
Jib<span class="pl-k">.</span><span class="pl-c1">start_reader</span>(ib, wrap);

<span class="pl-c"><span class="pl-c">#</span> Define contract</span>
contract <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">Contract</span>(symbol<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>GOOG<span class="pl-pds">"</span></span>,
                        secType<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>STK<span class="pl-pds">"</span></span>,
                        exchange<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SMART<span class="pl-pds">"</span></span>,
                        currency<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>);

<span class="pl-c"><span class="pl-c">#</span> Define order</span>
order <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">Order</span>();
order<span class="pl-k">.</span>action        <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>BUY<span class="pl-pds">"</span></span>
order<span class="pl-k">.</span>totalQuantity <span class="pl-k">=</span> <span class="pl-c1">10</span>
order<span class="pl-k">.</span>orderType     <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>LMT<span class="pl-pds">"</span></span>
order<span class="pl-k">.</span>lmtPrice      <span class="pl-k">=</span> <span class="pl-c1">1000</span>

orderId <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Should match whatever is returned by the server</span>

<span class="pl-c"><span class="pl-c">#</span> Send order</span>
Jib<span class="pl-k">.</span><span class="pl-c1">placeOrder</span>(ib, orderId, contract, order)

<span class="pl-c"><span class="pl-c">#</span> Disconnect</span>
Jib<span class="pl-k">.</span><span class="pl-c1">disconnect</span>(ib)</pre></div>
<h5 dir="auto"><a id="user-content-foreground-vs-background-processing" class="anchor" aria-hidden="true" href="#foreground-vs-background-processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Foreground vs. Background Processing</h5>
<p dir="auto">It is possible to process the server responses either within the main process
or in a separate background <code>Task</code>:</p>
<ul dir="auto">
<li><strong>foreground processing</strong> is triggered by invoking <code>Jib.check_all(ib, wrap)</code>.
It is the user's responsibility to call it on a <strong>regular basis</strong>,
especially when data are streaming in.</li>
<li><strong>background processing</strong> is started by <code>Jib.start_reader(ib, wrap)</code>.
A separate <code>Task</code> is started in the background, which monitors the connection and processes
the responses as they arrive.</li>
</ul>
<p dir="auto">To avoid undesired effects, the two approaches should not be mixed together
on the same connection.</p>
<h3 dir="auto"><a id="user-content-implementation-details" class="anchor" aria-hidden="true" href="#implementation-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation Details</h3>
<p dir="auto">The package does not export any name, therefore any functions
or types described here need to be prefixed by <code>Jib.*</code>.</p>
<p dir="auto">As Julia is not an object-oriented language, the functionality of the IB
<code>EClient</code> class is provided here by regular functions. In particular:</p>
<ul dir="auto">
<li><code>connect(port, clientId, connectOptions)</code>: establish a connection and return
a <code>Connection</code> object.</li>
<li><code>disconnect(::Connection)</code>: terminate the connection.</li>
<li><code>check_all(::Connection, ::Wrapper)</code>: process available responses, <strong>not blocking</strong>.
Return the number of messages processed. <strong>Needs to be called regularly!</strong></li>
<li><code>start_reader(::Connection, ::Wrapper)</code>: start a <code>Task</code> for background processing.</li>
<li>methods that send specific requests to the server.
Refer to the official IB <code>EClient</code> class documentation for further details and method signatures.
The only caveat is to remember to pass a <code>Connection</code> as first argument: <em>e.g.</em>
<code>reqContractDetails(ib::Connection, reqId:Int, contract::Contract)</code></li>
</ul>
<h5 dir="auto"><a id="user-content-wrapper" class="anchor" aria-hidden="true" href="#wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="src/wrapper.jl"><code>Wrapper</code></a></h5>
<p dir="auto">Like the official IB <code>EWrapper</code> class, this <code>struct</code> holds the callbacks
that are dispatched when responses are processed.
The user provides the callback definitions as keyword arguments
in the constructor, as shown <a href="#usage">above</a>, and/or by setting
the property of an existing instance.</p>
<p dir="auto">A more comprehensive example is provided by <a href="src/wrapper.jl#L130"><code>simple_wrap()</code></a>,
which is used like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Jib: Jib, Contract, reqContractDetails, simple_wrap, start_reader

data, wrap = simple_wrap();

ib = Jib.connect(4002, 1);
start_reader(ib, wrap);

reqContractDetails(ib, 99, Contract(conId=208813720, exchange=&quot;SMART&quot;))

# Wait for the response and then access the &quot;ContractDetails&quot; result:
data[:cd]"><pre><span class="pl-k">using</span> Jib<span class="pl-k">:</span> Jib, Contract, reqContractDetails, simple_wrap, start_reader

data, wrap <span class="pl-k">=</span> <span class="pl-c1">simple_wrap</span>();

ib <span class="pl-k">=</span> Jib<span class="pl-k">.</span><span class="pl-c1">connect</span>(<span class="pl-c1">4002</span>, <span class="pl-c1">1</span>);
<span class="pl-c1">start_reader</span>(ib, wrap);

<span class="pl-c1">reqContractDetails</span>(ib, <span class="pl-c1">99</span>, <span class="pl-c1">Contract</span>(conId<span class="pl-k">=</span><span class="pl-c1">208813720</span>, exchange<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SMART<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Wait for the response and then access the "ContractDetails" result:</span>
data[<span class="pl-c1">:cd</span>]</pre></div>
<p dir="auto">Thanks to closures, <code>data</code> (a <code>Dict</code> in this case) is accessible by all
<code>wrap</code> methods as well as the main program. This is one way to
propagate incoming data to different parts of the program.</p>
<p dir="auto">For more details about callback definitions and signatures,
refer to the official IB <code>EWrapper</code> class documentation.
As reference, the exact signatures used in this package
are found <a href="data/wrapper_signatures.jl">here</a>.</p>
<h3 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h3>
<p dir="auto">Callbacks are generally invoked with arguments and types matching the signatures
as described in the official documentation.
However, there are few exceptions:</p>
<ul dir="auto">
<li><code>tickPrice()</code> has an extra <code>size::Float64</code> argument,
which is meaningful only when <code>TickType ‚àà {BID, ASK, LAST}</code>.
In these cases, the official IB API fires an extra <code>tickSize()</code> event instead.</li>
<li><code>historicalData()</code> is invoked only once per request,
presenting all the historical data as a single <code>DataFrame</code>,
whereas the official IB API invokes it row-by-row.</li>
<li><code>scannerData()</code> is also invoked once per request and its arguments
are in fact vectors rather than single values.</li>
</ul>
<p dir="auto">These modifications make it possible to establish the rule:
<em>one callback per server response</em>.</p>
<p dir="auto">Consequently, <code>historicalDataEnd()</code> and <code>scannerDataEnd()</code> are redundant and
are <strong>not</strong> used in this package.</p>
<p dir="auto"><code>DataFrame</code> are passed to several other callbacks, such as:
<code>mktDepthExchanges()</code>, <code>smartComponents()</code>, <code>newsProviders()</code>, <code>histogramData()</code>,
<code>marketRule()</code> and the <code>historicalTicks*()</code> family.</p>
<h5 dir="auto"><a id="user-content-missing-values" class="anchor" aria-hidden="true" href="#missing-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Missing Values</h5>
<p dir="auto">Occasionally, for numerical types, there is the need to represent
the lack of a value.</p>
<p dir="auto">IB API does not have a uniform solution across the board, but rather
it adopts a variety of sentinel values.
They can be either the plain <code>0</code> or the largest representable value
of a given type such as <code>2147483647</code> and <code>9223372036854775807</code>
for 32- and 64-bit integers respectively or <code>1.7976931348623157E308</code>
for 64-bit floating point.</p>
<p dir="auto">This package makes an effort to use Julia built-in <code>Nothing</code>
in all circumstances.</p>
<h5 dir="auto"><a id="user-content-data-structures" class="anchor" aria-hidden="true" href="#data-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Structures</h5>
<p dir="auto">Other classes that mainly hold data are also replicated.
They are implemented as Julia <code>struct</code> or <code>mutable struct</code> with names,
types and default values matching the IB API counterparts: <em>e.g.</em>
<code>Contract</code>, <code>Order</code>, <code>ComboLeg</code>, <code>ExecutionFilter</code>, <code>ScannerSubscription</code>
and <code>Condition*</code>.</p>
<p dir="auto"><code>TagValueList</code> are implemented as Julia <code>NamedTuple</code>.
Wherever a TagValue is needed, something like this can be used:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tagvaluelist = (tag1=&quot;value1&quot;, tag2=&quot;value2&quot;)
# or, in case of an empty list:
emptylist = (;)"><pre>tagvaluelist <span class="pl-k">=</span> (tag1<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>value1<span class="pl-pds">"</span></span>, tag2<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>value2<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or, in case of an empty list:</span>
emptylist <span class="pl-k">=</span> (;)</pre></div>
<p dir="auto">Values don't need to be of type <code>String</code>. <code>Int</code> and <code>Float64</code> are also allowed.</p>
</article></div>