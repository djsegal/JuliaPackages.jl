<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-resultsjl-fallable-computation-for-julia" class="anchor" aria-hidden="true" href="#resultsjl-fallable-computation-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Results.jl: Fallable computation for Julia</h2>
<p>Results.jl provides a <code>Result</code> and <code>Option</code> type for computation,
as featured in Rust, Haskell (as <code>Either</code>), OCaml, and many more.</p>
<p><a href="https://github.com/hexane360/Results.jl/actions?query=workflow%3ACI"><img src="https://github.com/hexane360/Results.jl/workflows/CI/badge.svg" alt="" style="max-width:100%;"></a> <a href="https://codecov.io/gh/hexane360/Results.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4bfedce74e5ca4f59ec59871cfca38969683801c1be3a30a8052f0da7a7675d4/68747470733a2f2f636f6465636f762e696f2f67682f686578616e653336302f526573756c74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4458575a564349443531" alt="" data-canonical-src="https://codecov.io/gh/hexane360/Results.jl/branch/master/graph/badge.svg?token=DXWZVCID51" style="max-width:100%;"></a> <a href="https://github.com/hexane360/Results.jl/commits"><img src="https://camo.githubusercontent.com/8d2ff5c5cfdbb233c0a6bf7407f1e861492656df45bc9c0e2e4ff526203fabb2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f686578616e653336302f526573756c74732e6a6c" alt="" data-canonical-src="https://img.shields.io/github/last-commit/hexane360/Results.jl" style="max-width:100%;"></a> <a href="https://juliahub.com/ui/Packages/Results/05hVy" rel="nofollow"><img src="https://camo.githubusercontent.com/9d50dfcb1cb6ee0a638dfd3fbb2d6a554cdb3e0a50d071e534a3e2e2b77bed28/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f526573756c74732f76657273696f6e2e737667" alt="" data-canonical-src="https://juliahub.com/docs/Results/version.svg" style="max-width:100%;"></a> <a href="https://juliahub.com/docs/Results/" rel="nofollow"><img src="https://camo.githubusercontent.com/82c347c7b50bd81a04b5c6fbc99d91f2a1565fffa213c21f5ed152243e2fccf5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c7565" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue" style="max-width:100%;"></a> <a href="https://hexane360.github.io/Results.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/9e50bd744da332d6eb4aeaf467eadf72db0d6507361d587a4ac2245dc540f934/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c7565" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue" style="max-width:100%;"></a></p>
<p>This library is distributed under the LGPL v3.0 license.</p>
<h2><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About</h2>
<p>The core <code>Result</code> type is simply an alias for <code>Union{Ok{T}, Err{E}}</code>,
allowing you to dispatch on <code>Ok</code> and <code>Err</code> variants separately.
The <code>Option</code> type is defined as <code>Union{Base.Some{T}, Base.Nothing}</code>,
allowing for easy compatibility with other libraries.</p>
<h2><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why?</h2>
<p><code>Results.jl</code> attempts to provide a compromise between strict type-safety
and maximum ergonomics. Compared to exceptions, <code>Results.jl</code> is faster.
Compared with a bare nullable type <code>Union{T, Nothing}</code>, <code>Results.jl</code> is
more correct. And compared to other libraries, <code>Results.jl</code> aims to be
more complete and more ergonomic.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Check out the documentation on <a href="https://juliahub.com/docs/Results/" rel="nofollow">JuliaHub</a>.</p>
<hr>
<p>Pull requests and issues are welcome. This is my first Julia package, so I'm expecting some criticism.</p>
</article></div>