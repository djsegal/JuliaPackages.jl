<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-zurcherjl" class="anchor" aria-hidden="true" href="#zurcherjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zurcher.jl</h1>
<p>Documentation : <a href="https://floswald.github.io/Zurcher.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>GitHub Actions : <a href="https://github.com/floswald/Zurcher.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/floswald/Zurcher.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<ul>
<li>This is a teaching-oriented package for the Bus Engine Replacement Model after Rust (1987) used for my <a href="https://floswald.github.io/NumericalMethods/" rel="nofollow">Computational Econ Course</a></li>
<li>We implement both <em>naive</em> nfxp and mpec estimation. It is <em>naive</em> nfxp because it uses standard VFI instead of the much more performant polyalgorithm developed by Rust in his paper. For a thorough benchmarking exercise I refer to
<ol>
<li>ECTA Comment by <a href="https://www.econometricsociety.org/publications/econometrica/2016/01/01/comment-%E2%80%9Cconstrained-optimization-approaches-estimation" rel="nofollow">Fedor Iskhakov, Jinhyuk Lee, John Rust, Bertel Schjerning, Kyoungwon Seo</a></li>
<li>Matlab implementation which includes the polyalgorithm and analytic derivatives for likelihood function distributed as part of the <a href="https://github.com/dseconf/DSE2019/tree/master/02_DDC_SchjerningIskhakov/code/zurcher">DSE2019</a> summer school. Several parts of my code have been copied and modified from that code base.</li>
</ol>
</li>
</ul>
<h3><a id="user-content-what-is-the-point-of-this-package" class="anchor" aria-hidden="true" href="#what-is-the-point-of-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is the point of this package?</h3>
<ul>
<li>The main point is to demonstrate the relative easiness with which we can tackle an MPEC problem with the <a href="https://jump.dev" rel="nofollow"><code>JuMP.jl</code></a> package. Please look at <a href="https://floswald.github.io/Zurcher.jl/dev" rel="nofollow">docs</a> for some sparse explanation and (above all) a link to the relevant source code.</li>
<li>JuMP is like AMPL, but for free and embedded in a proper programming language.</li>
<li>For a similar demonstration of this please visit <a href="https://github.com/UBCECON567/BLPDemand.jl">https://github.com/UBCECON567/BLPDemand.jl</a>, which is very cool.</li>
</ul>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How To Install</h2>
<ol>
<li><a href="https://julialang.org/downloads/" rel="nofollow">Download julia</a></li>
<li>start julia. you see this:
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.6.0 (2021-03-24)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |
"><pre><code>               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.6.0 (2021-03-24)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |
</code></pre></div>
</li>
<li>Hit the <code>]</code> key to switch to package manager mode. the prompt switches to
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(v1.6) pkg&gt;
"><pre><code>(v1.6) pkg&gt;
</code></pre></div>
</li>
<li>Download this package by pasting this into the <code>(v1.6) pkg&gt;</code> prompt and hitting enter.
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dev https://github.com/floswald/Zurcher.jl
"><pre>dev https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>floswald<span class="pl-k">/</span>Zurcher<span class="pl-k">.</span>jl</pre></div>
</li>
<li>After this is done, hit backspace or <code>ctrl-c</code> to go back to standard <code>julia&gt;</code> prompt.
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; cd(joinpath(DEPOT_PATH[1],&quot;dev&quot;,&quot;Zurcher&quot;))  # go to the location of Zurcher
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">DEPOT_PATH</span>[<span class="pl-c1">1</span>],<span class="pl-s"><span class="pl-pds">"</span>dev<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Zurcher<span class="pl-pds">"</span></span>))  <span class="pl-c"><span class="pl-c">#</span> go to the location of Zurcher</span></pre></div>
</li>
<li>Go back to package mode: type <code>]</code>. then:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.6) pkg&gt; activate .     # tell pkg manager to modify current directory
(Zurcher) pkg&gt; instantiate    # download all dependencies
"><pre>(v1.<span class="pl-c1">6</span>) pkg<span class="pl-k">&gt;</span> activate .     <span class="pl-c"><span class="pl-c">#</span> tell pkg manager to modify current directory</span>
(Zurcher) pkg<span class="pl-k">&gt;</span> instantiate    <span class="pl-c"><span class="pl-c">#</span> download all dependencies</span></pre></div>
</li>
<li>Done! <g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png">ðŸŽ‰</g-emoji> Now try it out</li>
</ol>
<h2><a id="user-content-trying-out" class="anchor" aria-hidden="true" href="#trying-out"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Trying Out</h2>
<p>There are two main functions <code>nfxp</code> and <code>mpec</code> which will run either estimation strategy. Try this first</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Zurcher

julia&gt; Zurcher.nfxp(is_silent = true)
(RC = 7.829239792379837, Î¸c = 4.632167451403739)

julia&gt; Zurcher.mpec(is_silent = true)
(RC = 7.829239917004901, Î¸c = 4.632167887519505)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zurcher

julia<span class="pl-k">&gt;</span> Zurcher<span class="pl-k">.</span><span class="pl-c1">nfxp</span>(is_silent <span class="pl-k">=</span> <span class="pl-c1">true</span>)
(RC <span class="pl-k">=</span> <span class="pl-c1">7.829239792379837</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">4.632167451403739</span>)

julia<span class="pl-k">&gt;</span> Zurcher<span class="pl-k">.</span><span class="pl-c1">mpec</span>(is_silent <span class="pl-k">=</span> <span class="pl-c1">true</span>)
(RC <span class="pl-k">=</span> <span class="pl-c1">7.829239917004901</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">4.632167887519505</span>)</pre></div>
<h2><a id="user-content-how-do-the-jump-mpec-and-nfxp-implementations-differ" class="anchor" aria-hidden="true" href="#how-do-the-jump-mpec-and-nfxp-implementations-differ"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How do the JuMP (MPEC) and NFXP implementations differ?</h2>
<p>I can point to at least 2 things:</p>
<ol>
<li>There is a slight sublety in how function <code>make_trans</code> builds the transition matrix for the nfxp case: it creates the vector or probabilities for the rows as <code>p = [Î¸ ; 1 - sum(Î¸)]</code>, i.e. it adds a safety element in last position to make sure that whatever the solver chooses in terms of Î¸ will be a proper probability distribution. I try to replicate that in the MPEC formulation, but it is not exactly equivalent.</li>
<li>I was not able to implement the centering of values in the MPEC approach because I am not allowed to write something like
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@variable(m, M)
@constraint(m, M == maximum(V))
"><pre><code>@variable(m, M)
@constraint(m, M == maximum(V))
</code></pre></div>
</li>
</ol>
<p>Of course the remaining option is that there is a mistake.</p>
<h2><a id="user-content-all-results" class="anchor" aria-hidden="true" href="#all-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>All Results</h2>
<h3><a id="user-content-accuracy" class="anchor" aria-hidden="true" href="#accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accuracy</h3>
<p>You can run a set of results with the function <code>runall</code> which will return a dict with results and timings for different values of Î² and <code>n</code>. In general, the partial MLE results are ok for both methods, but MPEC never converges to the correct solution with very high values for Î². I think this is because of numerical instability in the log-sum function, which could be solved if I were able to do point 2. above. Full MLE converges to a different optimum in MPEC because of the way I try to implement the <em>last bin issue</em> mentioned above. This can very likely be improved.</p>
<h3><a id="user-content-timing" class="anchor" aria-hidden="true" href="#timing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Timing</h3>
<ul>
<li>The MPEC solution is always orders of magnitude faster than the NFXP.</li>
<li>As mentioned above, this is not a general statement, because in this class of model the NFXP can be massively sped up by implementing Rust's polyalgorithm.</li>
<li><em>Absent</em> the possibility of implementing a Rust-like polyalgorithm and deriving analytical gradients for the likelihood, automatic differentiation via JuMP.jl is a promising method.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d = Zurcher.runall()
"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> Zurcher<span class="pl-k">.</span><span class="pl-c1">runall</span>()</pre></div>
<p>For example,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d[&quot;n=90&quot;][&quot;Î²=0.999&quot;][:nfxp_full]
Dict{Symbol, Any} with 2 entries:
  :res  =&gt; (RC = 9.7051, Î¸c = 2.67984, Î¸p = [0.348995, 0.639116])
  :time =&gt; 54.181
"><pre>julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=90<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.999<span class="pl-pds">"</span></span>][<span class="pl-c1">:nfxp_full</span>]
Dict{Symbol, Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:res</span>  <span class="pl-k">=&gt;</span> (RC <span class="pl-k">=</span> <span class="pl-c1">9.7051</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.67984</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.348995</span>, <span class="pl-c1">0.639116</span>])
  <span class="pl-c1">:time</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">54.181</span></pre></div>
<p>this comes quite close to table 9 of Rust (column 5). The setting in the table with Î²=0.9999 takes too long to run, so only approximate.</p>
<p><a target="_blank" rel="noopener noreferrer" href="Rust-table9.png"><img src="Rust-table9.png" alt="" style="max-width:100%;"></a></p>
<p>For the larger state space, table X in Rust, only the NFXP solution converges for the full MLE. MPEC gets close at Î²=0.99 but fails to converge for higher values. The setting in the table with Î²=0.9999 takes too long to run, so the solution is not the same (column 5).</p>
<p><a target="_blank" rel="noopener noreferrer" href="Rust-table10.png"><img src="Rust-table10.png" alt="" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d[&quot;n=175&quot;][&quot;Î²=0.999&quot;][:nfxp_full]
Dict{Symbol, Any} with 2 entries:
  :res  =&gt; (RC = 9.71799, Î¸c = 1.36965, Î¸p = [0.10693, 0.515465, 0.362037, 0.0143426, 0.000858029])
  :time =&gt; 402.414
"><pre>julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=175<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.999<span class="pl-pds">"</span></span>][<span class="pl-c1">:nfxp_full</span>]
Dict{Symbol, Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:res</span>  <span class="pl-k">=&gt;</span> (RC <span class="pl-k">=</span> <span class="pl-c1">9.71799</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.36965</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.10693</span>, <span class="pl-c1">0.515465</span>, <span class="pl-c1">0.362037</span>, <span class="pl-c1">0.0143426</span>, <span class="pl-c1">0.000858029</span>])
  <span class="pl-c1">:time</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">402.414</span></pre></div>
<p>Here are all results:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d[&quot;n=90&quot;][&quot;Î²=0.99&quot;]
Dict{Any, Any} with 4 entries:
  :nfxp      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.27126, Î¸c = 3.21522), :time=&gt;2.23572)
  :mpec      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.27126, Î¸c = 3.21522), :time=&gt;0.135772)
  :mpec_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 8.79722, Î¸c = 2.89127, Î¸p = [0.34908, 0.639006, 0.0119135]), :time=&gt;0.347827)
  :nfxp_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.27117, Î¸c = 3.21538, Î¸p = [0.348981, 0.639128]), :time=&gt;7.04272)

julia&gt; d[&quot;n=90&quot;][&quot;Î²=0.995&quot;]
Dict{Any, Any} with 4 entries:
  :nfxp      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.49706, Î¸c = 2.91503), :time=&gt;4.09659)
  :mpec      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.49705, Î¸c = 2.91502), :time=&gt;0.13477)
  :mpec_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 8.13258, Î¸c = 2.0859, Î¸p = [0.349273, 0.638827, 0.0119004]), :time=&gt;0.339474)
  :nfxp_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.49694, Î¸c = 2.91518, Î¸p = [0.348988, 0.639121]), :time=&gt;11.2313)

julia&gt; d[&quot;n=90&quot;][&quot;Î²=0.999&quot;]
Dict{Any, Any} with 4 entries:
  :nfxp      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.70523, Î¸c = 2.67968), :time=&gt;20.7043)
  :mpec      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 6.52339, Î¸c = 0.944421), :time=&gt;0.139025)
  :mpec_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 5.76958, Î¸c = 0.543109, Î¸p = [0.349667, 0.638459, 0.0118736]), :time=&gt;0.24028)
  :nfxp_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.7051, Î¸c = 2.67984, Î¸p = [0.348995, 0.639116]), :time=&gt;56.6185)

julia&gt; d[&quot;n=175&quot;][&quot;Î²=0.99&quot;]
Dict{Any, Any} with 4 entries:
  :nfxp      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.28226, Î¸c = 1.64404), :time=&gt;4.88497)
  :mpec      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.28226, Î¸c = 1.64404), :time=&gt;0.170268)
  :mpec_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 5.13849, Î¸c = 0.77846, Î¸p = [0.0743879, 0.446249, 0.416163, 0.0246749, 0.00295022, 0.0355752]), :time=&gt;38.â€¦
  :nfxp_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.28236, Î¸c = 1.64394, Î¸p = [0.106926, 0.51546, 0.362044, 0.0143433, 0.000858095]), :time=&gt;51.7586)

julia&gt; d[&quot;n=175&quot;][&quot;Î²=0.995&quot;]
Dict{Any, Any} with 4 entries:
  :nfxp      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.50888, Î¸c = 1.49028), :time=&gt;11.727)
  :mpec      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.50892, Î¸c = 1.49029), :time=&gt;0.226373)
  :mpec_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 7.64161, Î¸c = 0.908708, Î¸p = [0.107058, 0.515525, 0.361783, 0.0143501, 0.000886562, 0.000397098]), :time=&gt;â€¦
  :nfxp_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.50907, Î¸c = 1.49019, Î¸p = [0.106928, 0.515463, 0.36204, 0.0143429, 0.000858059]), :time=&gt;117.805)

julia&gt; d[&quot;n=175&quot;][&quot;Î²=0.999&quot;]
Dict{Any, Any} with 4 entries:
  :nfxp      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.7178, Î¸c = 1.36977), :time=&gt;62.5056)
  :mpec      =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 6.53308, Î¸c = 0.483032), :time=&gt;0.213384)
  :mpec_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 4.9592, Î¸c = 0.0230143, Î¸p = [0.107947, 0.5164, 0.360075, 0.0142959, 0.000885655, 0.000396517]), :time=&gt;14â€¦
  :nfxp_full =&gt; Dict{Symbol, Any}(:res=&gt;(RC = 9.71799, Î¸c = 1.36965, Î¸p = [0.10693, 0.515465, 0.362037, 0.0143426, 0.000858029]), :time=&gt;432.629)
"><pre>julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=90<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.99<span class="pl-pds">"</span></span>]
Dict{Any, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:nfxp</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.27126</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">3.21522</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">2.23572</span>)
  <span class="pl-c1">:mpec</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.27126</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">3.21522</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.135772</span>)
  <span class="pl-c1">:mpec_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">8.79722</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.89127</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.34908</span>, <span class="pl-c1">0.639006</span>, <span class="pl-c1">0.0119135</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.347827</span>)
  <span class="pl-c1">:nfxp_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.27117</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">3.21538</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.348981</span>, <span class="pl-c1">0.639128</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">7.04272</span>)

julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=90<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.995<span class="pl-pds">"</span></span>]
Dict{Any, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:nfxp</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.49706</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.91503</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">4.09659</span>)
  <span class="pl-c1">:mpec</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.49705</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.91502</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.13477</span>)
  <span class="pl-c1">:mpec_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">8.13258</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.0859</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.349273</span>, <span class="pl-c1">0.638827</span>, <span class="pl-c1">0.0119004</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.339474</span>)
  <span class="pl-c1">:nfxp_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.49694</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.91518</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.348988</span>, <span class="pl-c1">0.639121</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">11.2313</span>)

julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=90<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.999<span class="pl-pds">"</span></span>]
Dict{Any, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:nfxp</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.70523</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.67968</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">20.7043</span>)
  <span class="pl-c1">:mpec</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">6.52339</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">0.944421</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.139025</span>)
  <span class="pl-c1">:mpec_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">5.76958</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">0.543109</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.349667</span>, <span class="pl-c1">0.638459</span>, <span class="pl-c1">0.0118736</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.24028</span>)
  <span class="pl-c1">:nfxp_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.7051</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">2.67984</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.348995</span>, <span class="pl-c1">0.639116</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">56.6185</span>)

julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=175<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.99<span class="pl-pds">"</span></span>]
Dict{Any, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:nfxp</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.28226</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.64404</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">4.88497</span>)
  <span class="pl-c1">:mpec</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.28226</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.64404</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.170268</span>)
  <span class="pl-c1">:mpec_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">5.13849</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">0.77846</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.0743879</span>, <span class="pl-c1">0.446249</span>, <span class="pl-c1">0.416163</span>, <span class="pl-c1">0.0246749</span>, <span class="pl-c1">0.00295022</span>, <span class="pl-c1">0.0355752</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">38.</span>â€¦
  <span class="pl-c1">:nfxp_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.28236</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.64394</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.106926</span>, <span class="pl-c1">0.51546</span>, <span class="pl-c1">0.362044</span>, <span class="pl-c1">0.0143433</span>, <span class="pl-c1">0.000858095</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">51.7586</span>)

julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=175<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.995<span class="pl-pds">"</span></span>]
Dict{Any, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:nfxp</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.50888</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.49028</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">11.727</span>)
  <span class="pl-c1">:mpec</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.50892</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.49029</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.226373</span>)
  <span class="pl-c1">:mpec_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">7.64161</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">0.908708</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.107058</span>, <span class="pl-c1">0.515525</span>, <span class="pl-c1">0.361783</span>, <span class="pl-c1">0.0143501</span>, <span class="pl-c1">0.000886562</span>, <span class="pl-c1">0.000397098</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span>â€¦
  <span class="pl-c1">:nfxp_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.50907</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.49019</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.106928</span>, <span class="pl-c1">0.515463</span>, <span class="pl-c1">0.36204</span>, <span class="pl-c1">0.0143429</span>, <span class="pl-c1">0.000858059</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">117.805</span>)

julia<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>n=175<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>Î²=0.999<span class="pl-pds">"</span></span>]
Dict{Any, Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:nfxp</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.7178</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.36977</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">62.5056</span>)
  <span class="pl-c1">:mpec</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">6.53308</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">0.483032</span>), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">0.213384</span>)
  <span class="pl-c1">:mpec_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">4.9592</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">0.0230143</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.107947</span>, <span class="pl-c1">0.5164</span>, <span class="pl-c1">0.360075</span>, <span class="pl-c1">0.0142959</span>, <span class="pl-c1">0.000885655</span>, <span class="pl-c1">0.000396517</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">14</span>â€¦
  <span class="pl-c1">:nfxp_full</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(<span class="pl-c1">:res</span><span class="pl-k">=&gt;</span>(RC <span class="pl-k">=</span> <span class="pl-c1">9.71799</span>, Î¸c <span class="pl-k">=</span> <span class="pl-c1">1.36965</span>, Î¸p <span class="pl-k">=</span> [<span class="pl-c1">0.10693</span>, <span class="pl-c1">0.515465</span>, <span class="pl-c1">0.362037</span>, <span class="pl-c1">0.0143426</span>, <span class="pl-c1">0.000858029</span>]), <span class="pl-c1">:time</span><span class="pl-k">=&gt;</span><span class="pl-c1">432.629</span>)</pre></div>
</article></div>