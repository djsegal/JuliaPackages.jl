<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-softglobalscope" class="anchor" aria-hidden="true" href="#softglobalscope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SoftGlobalScope</h1>
<p><a href="https://travis-ci.org/stevengj/SoftGlobalScope.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b2525c6c1e14e4d9b8029ee424bb5e1ad7f8637bbdb974bd364c6688226b0710/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f536f6674476c6f62616c53636f70652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/SoftGlobalScope.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>SoftGlobalScope is a package for the <a href="http://julialang.org/" rel="nofollow">Julia language</a> that simplifies the <a href="https://docs.julialang.org/en/stable/manual/variables-and-scoping/" rel="nofollow">variable scoping rules</a> for code in <em>global</em> scope.   It is intended for interactive shells (the REPL, <a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a>, etcetera) to make it easier to work interactively with Julia, especially for beginners.</p>
<p>In particular, SoftGlobalScope provides a function <code>softscope</code> that can transform Julia code from using the default "hard" scoping rules to simpler "soft" scoping rules in global scope only.</p>
<p>In Julia 1.5, "soft scoping" <a href="https://github.com/JuliaLang/julia/pull/33864">became the default</a> for the built-in Julia REPL, and the SoftGlobalScope module simply calls through to the standard-library <code>REPL.softscope</code> function.   The advantage of using the SoftGlobalScope library is that it also works with previous Julia versions.</p>
<h2><a id="user-content-hard-and-soft-global-scopes" class="anchor" aria-hidden="true" href="#hard-and-soft-global-scopes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hard and soft global scopes</h2>
<p><a href="https://github.com/JuliaLang/julia/pull/19324">Starting in Julia 0.7</a>, when you <em>assign to</em> global variables in the context of an inner scope (a <code>for</code> loop or a <code>let</code> statement) you need to explicitly declare the variable
as <code>global</code> in order to distinguish it from declaring a new variable.  We refer to this as "hard" scoping rules.  For example, the following code gives an warning in 0.7:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; s = 0
0

julia&gt; for i = 1:10
           s = s + i
       end
┌ Warning: Deprecated syntax `implicit assignment to global variable `s``.
└ Use `global s` instead.
"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           s <span class="pl-k">=</span> s <span class="pl-k">+</span> i
       <span class="pl-k">end</span>
┌ Warning<span class="pl-k">:</span> Deprecated syntax <span class="pl-s"><span class="pl-pds">`</span>implicit assignment to global variable <span class="pl-pds">`s</span><span class="pl-pds">`</span><span class="pl-pds">`</span></span>.
└ Use <span class="pl-s"><span class="pl-pds">`</span>global s<span class="pl-pds">`</span></span> instead.</pre></div>
<p>and an error in Julia 1.0:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; s = 0
0

julia&gt; for i = 1:10
           s = s + i   # wrong: defines a new local variable s
       end
ERROR: UndefVarError: s not defined
"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           s <span class="pl-k">=</span> s <span class="pl-k">+</span> i   <span class="pl-c"><span class="pl-c">#</span> wrong: defines a new local variable s</span>
       <span class="pl-k">end</span>
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> s not defined</pre></div>
<p>To make it work in 1.0, you need a <code>global</code> declaration:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; for i = 1:10
           global s = s + i
       end

julia&gt; s      # should be 1 + 2 + ⋯ + 10 = 55
55
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           <span class="pl-k">global</span> s <span class="pl-k">=</span> s <span class="pl-k">+</span> i
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> s      <span class="pl-c"><span class="pl-c">#</span> should be 1 + 2 + ⋯ + 10 = 55</span>
<span class="pl-c1">55</span></pre></div>
<p>This only applies to <em>global</em> variables; similar code <em>inside a function</em> (or whenever <code>s</code> is a <em>local</em> variable) works fine without any added keyword:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; function f(n)
           s = 0
           for i = 1:n
               s = s + i
           end
           return s
       end
f (generic function with 1 method)

julia&gt; f(10)
55
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(n)
           s <span class="pl-k">=</span> <span class="pl-c1">0</span>
           <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
               s <span class="pl-k">=</span> s <span class="pl-k">+</span> i
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> s
       <span class="pl-k">end</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p>There were <a href="https://github.com/JuliaLang/julia/pull/19324">various reasons</a> for this scoping rule, e.g. to facilitate <a href="https://en.wikipedia.org/wiki/Static_program_analysis" rel="nofollow">static analysis</a> by the compiler, and it isn't too onerous in "serious" Julia code where <a href="https://docs.julialang.org/en/stable/manual/performance-tips/#Avoid-global-variables-1" rel="nofollow">little code executes in global scope</a>.</p>
<p>However, for <em>interactive</em> use, especially for new users, the necessity of the <code>global</code> keyword, and the difference between code in local and global scopes, <a href="https://github.com/JuliaLang/julia/issues/28789">can be confusing</a> and was <a href="https://github.com/JuliaLang/julia/pull/33864">ultimately reverted</a>.   The SoftGlobalScope package exists to make it easier for <em>interactive shells</em> to automatically insert the <code>global</code> keyword in common cases, what we term "soft" global scope.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The <code>SoftGlobalScope</code> module exports two functions <code>softscope</code> and <code>softscope_include_string</code>, and a macro <code>@softscope</code>:</p>
<p>You can transform the expression using <code>softscope(module, expression)</code> to automatically insert the necessary <code>global</code> keyword.  For example, assuming that the module <code>Main</code> has a global variable <code>s</code> (as above), you can do:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; softscope(Main, :(for i = 1:10
           s += i
       end))
:(for i = 1:10
      #= REPL[3]:2 =#
      global s += i
  end)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">softscope</span>(Main, :(<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           s <span class="pl-k">+=</span> i
       <span class="pl-k">end</span>))
:(<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
      <span class="pl-c"><span class="pl-c">#=</span> REPL[3]:2 <span class="pl-c">=#</span></span>
      <span class="pl-k">global</span> s <span class="pl-k">+=</span> i
  <span class="pl-k">end</span>)</pre></div>
<p>You can then execute the statement with <code>eval</code>. Alternatively, you can decorate the expression with the <code>@softscope</code> macro:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; s = 0;

julia&gt; @softscope for i = 1:10
           s += i
       end

julia&gt; s
55
"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">0</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@softscope</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           s <span class="pl-k">+=</span> i
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> s
<span class="pl-c1">55</span></pre></div>
<p>This macro should only be used in the global scope (e.g., via the REPL); using this macro within a function is likely to lead to unintended consequences.</p>
<p>You can execute an entire sequence of statements using "soft" global scoping rules via <code>softscope_include_string(module, string, filename="string")</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; softscope_include_string(Main, &quot;&quot;&quot;
       s = 0
       for i = 1:10
           s += i
       end
       s
       &quot;&quot;&quot;)
55
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">softscope_include_string</span>(Main, <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">       s = 0</span>
<span class="pl-s">       for i = 1:10</span>
<span class="pl-s">           s += i</span>
<span class="pl-s">       end</span>
<span class="pl-s">       s</span>
<span class="pl-s">       <span class="pl-pds">"""</span></span>)
<span class="pl-c1">55</span></pre></div>
<p>(This function works like <code>include_string</code>, returning the value of the last evaluated expression.)</p>
<p>In Julia 0.6, no code transformations are required, so <code>softscope</code> returns the original expression
and <code>softscope_include_string</code> is equivalent to <code>include_string</code>.  In Julia 1.5, <code>softscope_include_string(m, x)</code> is equivalent to <code>include_string(REPL.softscope, m, x)</code> using the <code>softscope</code> transformation function provided by Julia's <code>REPL</code> standard library.</p>
<h2><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contact</h2>
<p>SoftGlobalScope was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven G. Johnson</a> and is free/open-source software under the <a href="LICENSE.md">MIT/Expat license</a>.  Please file bug reports and feature requests at the <a href="https://github.com/stevengj/SoftGlobalScope.jl">SoftGlobalScope github page</a>.</p>
</article></div>