<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cli" class="anchor" aria-hidden="true" href="#cli"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CLI</h1>
<p dir="auto"><strong>Please use my latest project as a replacement <a href="https://github.com/Roger-luo/Comonicon.jl">Comonicon</a></strong></p>
<p dir="auto">CLI.jl is a library for automatically generating command line interfaces from
absolutely Julia object. Is is highly inspired by <a href="https://github.com/google/python-fire">python-fire</a>. But thanks to Julia's powerful metaprogramming, we are able to do this in a much easier way. CLI.jl make use of Julia's metaprogramming and multiple dispatch feature.</p>
<p dir="auto"><strong>warning</strong> It only supports *nix systems at the moment. I have not tested it
for <strong>Windows</strong>. Julia v0.6+ is required. Still under development.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>modular implementation</li>
<li>compile to binary with <a href="https://github.com/JuliaLang/PackageCompiler.jl">PackageCompiler.jl</a></li>
</ul>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(git@github.com:Roger-luo/CLI.jl.git)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(git<span class="pl-c1">@github</span><span class="pl-k">.</span>com<span class="pl-k">:</span>Roger<span class="pl-k">-</span>luo<span class="pl-k">/</span>CLI<span class="pl-k">.</span>jl<span class="pl-k">.</span>git)</pre></div>
<h1 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h1>
<p dir="auto">You can call <code>@command</code> on julia functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#demo.jl

using CLI

@command &quot;&quot;&quot;
this is a demo CLI
&quot;&quot;&quot;


&quot;&quot;&quot;
add up
&quot;&quot;&quot;
@command function add(x::Int, y::Int; extra::Int=1)
    x + y + extra
end

main()"><pre><span class="pl-c"><span class="pl-c">#</span>demo.jl</span>

<span class="pl-k">using</span> CLI

<span class="pl-c1">@command</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">this is a demo CLI</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>


<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">add up</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">@command</span> <span class="pl-k">function</span> <span class="pl-en">add</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>; extra<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>)
    x <span class="pl-k">+</span> y <span class="pl-k">+</span> extra
<span class="pl-k">end</span>

<span class="pl-c1">main</span>()</pre></div>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; demo.jl --help
[SYNOPSIS]
	demo2.jl [-h,--help] [-v,--version] &lt;command&gt;
[DESCRIPTION]
	this is a demo CLI

[COMMANDS]
	add
	  add up
"><pre><span class="pl-k">&gt;</span> demo.jl --help
[SYNOPSIS]
	demo2.jl [-h,--help] [-v,--version] <span class="pl-k">&lt;</span>command<span class="pl-k">&gt;</span>
[DESCRIPTION]
	this is a demo CLI

[COMMANDS]
	add
	  add up
</pre></div>
<h1 dir="auto"><a id="user-content-advanced" class="anchor" aria-hidden="true" href="#advanced"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced</h1>
<p dir="auto">You can create subcommands using Julia's modules. And then you can compile it
to a binary application by <a href="https://github.com/JuliaLang/PackageCompiler.jl">PackageCompiler.jl</a></p>
<h2 dir="auto"><a id="user-content-use-subcommands-and-compile-to-binary" class="anchor" aria-hidden="true" href="#use-subcommands-and-compile-to-binary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use subcommands and Compile to Binary</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# demo.jl
module demo
using CLI

@command &quot;&quot;&quot;
this is a demo CLI
&quot;&quot;&quot;

module math
using CLI

@command &quot;&quot;&quot;
math calculations
&quot;&quot;&quot;

&quot;&quot;&quot;
add up
&quot;&quot;&quot;
@command function add(x::Int, y::Int; extra::Int=1)
    x + y + extra
end

&quot;&quot;&quot;
multiply two integers
&quot;&quot;&quot;
@command mul(x::Int, y::Int) = x * y

end # math

&quot;&quot;&quot;
plus two integers
&quot;&quot;&quot;
@command function plus(x::Int, y::Int)
    x + y    
end

Base.@ccallable function julia_main(ARGS::Vector{String})::Cint
    main()
end

end"><pre><span class="pl-c"><span class="pl-c">#</span> demo.jl</span>
<span class="pl-k">module</span> demo
<span class="pl-k">using</span> CLI

<span class="pl-c1">@command</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">this is a demo CLI</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-k">module</span> math
<span class="pl-k">using</span> CLI

<span class="pl-c1">@command</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">math calculations</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">add up</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">@command</span> <span class="pl-k">function</span> <span class="pl-en">add</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>; extra<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>)
    x <span class="pl-k">+</span> y <span class="pl-k">+</span> extra
<span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">multiply two integers</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">@command</span> <span class="pl-en">mul</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> x <span class="pl-k">*</span> y

<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> math</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">plus two integers</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">@command</span> <span class="pl-k">function</span> <span class="pl-en">plus</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>)
    x <span class="pl-k">+</span> y    
<span class="pl-k">end</span>

Base<span class="pl-k">.</span><span class="pl-c1">@ccallable</span> <span class="pl-k">function</span> <span class="pl-en">julia_main</span>(<span class="pl-c1">ARGS</span><span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>
    <span class="pl-c1">main</span>()
<span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">then open a Julia REPL, type</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt; julia using PackageCompiler; build_executable(&quot;demo.jl&quot;)"><pre lang="julia-repl" class="notranslate"><code>&gt; julia using PackageCompiler; build_executable("demo.jl")
</code></pre></div>
<p dir="auto">you will get an binary <code>demo</code>, simply copy it to where you want and use it.
This will reduce your CLI start time significantly. Enjoy!</p>
<h2 dir="auto"><a id="user-content-advanced-customize" class="anchor" aria-hidden="true" href="#advanced-customize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced Customize</h2>
<p dir="auto"><strong>CLI.jl</strong> offers several types to store your CLI application. You can directly
use them to build a CLI application.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CLI

add(x::Int, y::Int) = x + y
mul(x::Int, y::Int) = x * y

leaf1 = LeafCommand(:add, add, Signature([Int, Int], []))
leaf2 = LeafCommand(:mul, mul, Signature([Int, Int], []))
node = NodeCommand(&quot;math&quot;, [leaf1, leaf2])

maincmd = MainCommand(&quot;cal&quot;, [], [node])

stream = ARGStream(ARGS)
resolve(stream, maincmd; debug=false)"><pre><span class="pl-k">using</span> CLI

<span class="pl-en">add</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> x <span class="pl-k">+</span> y
<span class="pl-en">mul</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> x <span class="pl-k">*</span> y

leaf1 <span class="pl-k">=</span> <span class="pl-c1">LeafCommand</span>(<span class="pl-c1">:add</span>, add, <span class="pl-c1">Signature</span>([Int, Int], []))
leaf2 <span class="pl-k">=</span> <span class="pl-c1">LeafCommand</span>(<span class="pl-c1">:mul</span>, mul, <span class="pl-c1">Signature</span>([Int, Int], []))
node <span class="pl-k">=</span> <span class="pl-c1">NodeCommand</span>(<span class="pl-s"><span class="pl-pds">"</span>math<span class="pl-pds">"</span></span>, [leaf1, leaf2])

maincmd <span class="pl-k">=</span> <span class="pl-c1">MainCommand</span>(<span class="pl-s"><span class="pl-pds">"</span>cal<span class="pl-pds">"</span></span>, [], [node])

stream <span class="pl-k">=</span> <span class="pl-c1">ARGStream</span>(<span class="pl-c1">ARGS</span>)
<span class="pl-c1">resolve</span>(stream, maincmd; debug<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<h2 dir="auto"><a id="user-content-cli-design-guidance" class="anchor" aria-hidden="true" href="#cli-design-guidance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CLI Design Guidance</h2>
<p dir="auto"><strong>CLI.jl</strong> accepts most CLI design syntax from <a href="https://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces" rel="nofollow">GNU CLI Standard</a>, <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html" rel="nofollow">IEEE</a> and other *nix external programs, e.g <code>git</code>, <code>ls</code>, etc.</p>
<h2 dir="auto"><a id="user-content-future-plans" class="anchor" aria-hidden="true" href="#future-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future Plans</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> support <code>@command</code> for arbitrary Julia objects</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> further performance improvements (CLI start time)</li>
</ul>
<h2 dir="auto"><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author</h2>
<p dir="auto">Roger Luo</p>
</article></div>