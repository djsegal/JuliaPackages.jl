<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nodecalljl" class="anchor" aria-hidden="true" href="#nodecalljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NodeCall.jl</h1>
<p dir="auto"><a href="https://github.com/sunoru/NodeCall.jl/actions/workflows/CI.yml"><img src="https://github.com/sunoru/NodeCall.jl/actions/workflows/CI.yml/badge.svg" alt="CI Test" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/sunoru/NodeCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c919e4aeb4c1d6e8d55dee6a63c96ee3ed366f5a93a68150a64a014bef51646f/68747470733a2f2f636f6465636f762e696f2f67682f73756e6f72752f4e6f646543616c6c2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d385651475a454d484149" alt="codecov" data-canonical-src="https://codecov.io/gh/sunoru/NodeCall.jl/branch/main/graph/badge.svg?token=8VQGZEMHAI" style="max-width: 100%;"></a></p>
<p dir="auto">Call NodeJS from Julia.</p>
<p dir="auto">Currently supports NodeJS v18 (Latest LTS) on 64-bit Linux and macOS platforms.</p>
<h2 dir="auto"><a id="user-content-dependency" class="anchor" aria-hidden="true" href="#dependency"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dependency</h2>
<p dir="auto">This package depends on <a href="https://github.com/JuliaBinaryWrappers/libnode_jll.jl"><code>libnode_jll.jl</code></a>
and <a href="https://github.com/JuliaBinaryWrappers/libjlnode_jll.jl"><code>libjlnode_jll.jl</code></a>.</p>
<p dir="auto">You need to have Julia v1.7+ installed to use this package.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add NodeCall"><pre>] add NodeCall</pre></div>
<p dir="auto">It's recommended to test the package before using it:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] test NodeCall"><pre>] test NodeCall</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">With <code>NodeCall.initialize()</code>, a NodeJS instance will start in the current process.
A new V8 Virtual Machine context
(<a href="https://nodejs.org/docs/latest-v16.x/api/vm.html" rel="nofollow"><code>vm</code></a> in the standard library of NodeJS)
is automatically created.</p>
<p dir="auto">And JavaScript code can be run with <code>node_eval</code> or <code>@node_str</code>
(they are equivalent except the latter supports interpolation):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using NodeCall

# This is not required if you are using NodeCall from REPL.
julia&gt; NodeCall.initialize();

julia&gt; node_eval(&quot;console.log('Hello, world!')&quot;)
Hello, world!

julia&gt; x = 5;
julia&gt; node&quot;2 * $x&quot;
10.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NodeCall

<span class="pl-c"><span class="pl-c">#</span> This is not required if you are using NodeCall from REPL.</span>
julia<span class="pl-k">&gt;</span> NodeCall<span class="pl-k">.</span><span class="pl-c1">initialize</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">node_eval</span>(<span class="pl-s"><span class="pl-pds">"</span>console.log('Hello, world!')<span class="pl-pds">"</span></span>)
Hello, world!

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">5</span>;
julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">node</span>"</span>2 * $x<span class="pl-pds">"</span></span>
<span class="pl-c1">10.0</span></pre></div>
<p dir="auto">You can directly use <code>require</code> to use Node APIs.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; os = require(&quot;os&quot;);

julia&gt; os.type()
&quot;Linux&quot;"><pre>julia<span class="pl-k">&gt;</span> os <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">"</span>os<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> os<span class="pl-k">.</span><span class="pl-c1">type</span>()
<span class="pl-s"><span class="pl-pds">"</span>Linux<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">To install a package from NPM, use something like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; NPM.install(&quot;boxen&quot;);

added 19 packages, and audited 20 packages in 683ms

11 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities"><pre>julia<span class="pl-k">&gt;</span> NPM<span class="pl-k">.</span><span class="pl-c1">install</span>(<span class="pl-s"><span class="pl-pds">"</span>boxen<span class="pl-pds">"</span></span>);

added <span class="pl-c1">19</span> packages, and audited <span class="pl-c1">20</span> packages <span class="pl-k">in</span> <span class="pl-c1">683</span>ms

<span class="pl-c1">11</span> packages are looking <span class="pl-k">for</span> funding
  run <span class="pl-s"><span class="pl-pds">`</span>npm fund<span class="pl-pds">`</span></span> <span class="pl-k">for</span> details

found <span class="pl-c1">0</span> vulnerabilities</pre></div>
<p dir="auto">Note that it is equivalent to running <code>npm install</code> in the current working directory, but with
the specific version of NodeJS provided by <code>NodeCall.jl</code>.</p>
<p dir="auto">And then you can use the installed package as if you are writing JavaScript.
In this example, <code>node_import</code> or <code>@node_import</code> should be used since <code>boxen</code> is an ES Module.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# `node_import` is like the function-like dynamic import in JS, so it is asynchronous and should be awaited.
julia&gt; boxen = (@await node_import(&quot;boxen&quot;)).default;

# or you can use module style import declaration with `@node_import` macro.
julia&gt; @node_import boxen from &quot;boxen&quot;;

julia&gt; boxen(&quot;Generated in JS&quot;) |&gt; println
┌───────────────┐
│Generated in JS│
└───────────────┘

# To pass an option object, the easiest way is to use a `NamedTuple` in Julia:
julia&gt; boxen(&quot;Passing options&quot;, (padding=1, borderStyle=&quot;double&quot;)) |&gt; println
╔═════════════════════╗
║                     ║
║   Passing options   ║
║                     ║
╚═════════════════════╝

# Alternatively, you can just use a node string:
julia&gt; boxen(&quot;Passing a JS Object&quot;, node&quot;{padding: 1}&quot;) |&gt; println
┌─────────────────────────┐
│                         │
│   Passing a JS Object   │
│                         │
└─────────────────────────┘"><pre><span class="pl-c"><span class="pl-c">#</span> `node_import` is like the function-like dynamic import in JS, so it is asynchronous and should be awaited.</span>
julia<span class="pl-k">&gt;</span> boxen <span class="pl-k">=</span> (<span class="pl-c1">@await</span> <span class="pl-c1">node_import</span>(<span class="pl-s"><span class="pl-pds">"</span>boxen<span class="pl-pds">"</span></span>))<span class="pl-k">.</span>default;

<span class="pl-c"><span class="pl-c">#</span> or you can use module style import declaration with `@node_import` macro.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@node_import</span> boxen from <span class="pl-s"><span class="pl-pds">"</span>boxen<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">boxen</span>(<span class="pl-s"><span class="pl-pds">"</span>Generated in JS<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> println
┌───────────────┐
│Generated <span class="pl-k">in</span> JS│
└───────────────┘

<span class="pl-c"><span class="pl-c">#</span> To pass an option object, the easiest way is to use a `NamedTuple` in Julia:</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">boxen</span>(<span class="pl-s"><span class="pl-pds">"</span>Passing options<span class="pl-pds">"</span></span>, (padding<span class="pl-k">=</span><span class="pl-c1">1</span>, borderStyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double<span class="pl-pds">"</span></span>)) <span class="pl-k">|&gt;</span> println
╔═════════════════════╗
║                     ║
║   Passing options   ║
║                     ║
╚═════════════════════╝

<span class="pl-c"><span class="pl-c">#</span> Alternatively, you can just use a node string:</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">boxen</span>(<span class="pl-s"><span class="pl-pds">"</span>Passing a JS Object<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">node</span>"</span>{padding: 1}<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> println
┌─────────────────────────┐
│                         │
│   Passing a JS Object   │
│                         │
└─────────────────────────┘</pre></div>
<p dir="auto">See <a href="./examples"><code>examples/</code></a> or <a href="./test/runtests.jl"><code>test/runtests.jl</code></a> for more examples.</p>
<h2 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known Issues</h2>
<p dir="auto"><del>One important problem of <code>NodeCall.jl</code> is that it cannot work with Julia's
multi-thread/process functions, as well as the asynchronous methods involving <code>Task</code>s.
However, asynchronous features in NodeJS (<code>Promise</code>s) works fine by
awaiting them explicitly.</del></p>
<p dir="auto">You can now use <code>@threadsafe f(args...)</code> to make/call a function in a threadsafe manner.</p>
<p dir="auto">You have to use <code>@await</code> instead of <code>wait</code> or <code>fetch</code> to wait for a <code>Task</code> to finish if
the <code>Task</code> accesses the NodeJS environment, since it calls <code>run_node_uvloop</code> automatically.</p>
<p dir="auto">Another way to asynchronously access the NodeJS environment is to use <code>@node_async</code>.
<code>@node_async</code> works like <code>@async</code> in Julia, but instead of scheduling a <code>Task</code> in Julia,
it creates a <code>JsPromise</code> to wait on. Thus, the tasks are managed by the NodeJS side.</p>
<p dir="auto"><code>jl_yield()</code> is automatically called in NodeJS' event loop, so it won't block other <code>Task</code>s in Julia.</p>
<h2 dir="auto"><a id="user-content-bug-reports--contributing" class="anchor" aria-hidden="true" href="#bug-reports--contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bug Reports &amp; Contributing</h2>
<p dir="auto">Please feel free to file issues and pull requests. Any feedback or help would be greatly appriciated.</p>
<p dir="auto">To contribute, you can firstly have a look at the <a href="https://github.com/sunoru/NodeCall.jl/issues/3" data-hovercard-type="issue" data-hovercard-url="/sunoru/NodeCall.jl/issues/3/hovercard">TODO list</a>.</p>
<p dir="auto">It may also be helpful to edit the C++ code in <a href="https://github.com/sunoru/jlnode">jlnode</a>
to define some utility functions.
It is mainly because in pure Julia it is difficult to handle pointers, especially those of functions.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto"><a href="./LICENSE">MIT License</a></p>
</article></div>