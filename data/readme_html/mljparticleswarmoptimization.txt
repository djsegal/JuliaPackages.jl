<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mljparticleswarmoptimization" class="anchor" aria-hidden="true" href="#mljparticleswarmoptimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MLJParticleSwarmOptimization</h1>
<p dir="auto">Particle swarm optimization for hyperparameter tuning in <a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a>.</p>
<p dir="auto"><a href="https://github.com/JuliaAI/MLJTuning.jl/actions"><img src="https://github.com/JuliaAI/MLJParticleSwarmOptimization.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaAI/MLJParticleSwarmOptimization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a4e18b32ec9bae06c25c3e7cf7f51c338d9c99c13a7c14f4659496eae08903d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696141492f4d4c4a5061727469636c65537761726d4f7074696d697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d573731414d475a344957" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaAI/MLJParticleSwarmOptimization.jl/branch/master/graph/badge.svg?token=W71AMGZ4IW" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/JuliaAI/MLJParticleSwarmOptimization.jl/">MLJParticleSwarmOptimization</a> offers a suite of different particle swarm algorithms, extending <a href="https://github.com/JuliaAI/MLJTuning.jl">MLJTuning</a>'s existing collection of tuning strategies. Currently supported variants and planned releases include:</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <code>ParticleSwarm</code>: the original algorithm as conceived by Kennedy and Eberhart [1]</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <code>AdaptiveParticleSwarm</code>: Zhan et. al.'s variant with adaptive control of swarm coefficients [2]</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>OMOPSO</code>: Sierra and Coello's multi-objective particle swarm variant [3]</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is registered, and can be installed via the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add MLJParticleSwarmOptimization"><pre>julia<span class="pl-k">&gt;</span> ]add MLJParticleSwarmOptimization</pre></div>
<h2 dir="auto"><a id="user-content-discrete-hyperparameter-handling" class="anchor" aria-hidden="true" href="#discrete-hyperparameter-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Discrete Hyperparameter Handling</h2>
<p dir="auto">Most particle swarm algorithms are designed for problems in continuous domains. To extend support for <a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a>'s integer <code>NumericRange</code> and <code>NominalRange</code>, we encode discrete hyperparameters with an internal continuous representation, as proposed by Strasser et. al. [4]. See the tuning strategies' documentation and reference the paper for more details.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MLJ, MLJDecisionTreeInterface, MLJParticleSwarmOptimization, Plots, StableRNGs

julia&gt; rng = StableRNG(1234);

julia&gt; X = MLJ.table(rand(rng, 100, 10));

julia&gt; y = 2X.x1 - X.x2 + 0.05*rand(rng, 100);

julia&gt; Tree = @load DecisionTreeRegressor pkg=DecisionTree verbosity=0;

julia&gt; tree = Tree();

julia&gt; forest = EnsembleModel(atom=tree);

julia&gt; r1 = range(forest, :(atom.n_subfeatures), lower=1, upper=9);

julia&gt; r2 = range(forest, :bagging_fraction, lower=0.4, upper=1.0);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MLJ, MLJDecisionTreeInterface, MLJParticleSwarmOptimization, Plots, StableRNGs

julia<span class="pl-k">&gt;</span> rng <span class="pl-k">=</span> <span class="pl-c1">StableRNG</span>(<span class="pl-c1">1234</span>);

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> MLJ<span class="pl-k">.</span><span class="pl-c1">table</span>(<span class="pl-c1">rand</span>(rng, <span class="pl-c1">100</span>, <span class="pl-c1">10</span>));

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">2</span>X<span class="pl-k">.</span>x1 <span class="pl-k">-</span> X<span class="pl-k">.</span>x2 <span class="pl-k">+</span> <span class="pl-c1">0.05</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(rng, <span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> Tree <span class="pl-k">=</span> <span class="pl-c1">@load</span> DecisionTreeRegressor pkg<span class="pl-k">=</span>DecisionTree verbosity<span class="pl-k">=</span><span class="pl-c1">0</span>;

julia<span class="pl-k">&gt;</span> tree <span class="pl-k">=</span> <span class="pl-c1">Tree</span>();

julia<span class="pl-k">&gt;</span> forest <span class="pl-k">=</span> <span class="pl-c1">EnsembleModel</span>(atom<span class="pl-k">=</span>tree);

julia<span class="pl-k">&gt;</span> r1 <span class="pl-k">=</span> <span class="pl-c1">range</span>(forest, :(atom<span class="pl-k">.</span>n_subfeatures), lower<span class="pl-k">=</span><span class="pl-c1">1</span>, upper<span class="pl-k">=</span><span class="pl-c1">9</span>);

julia<span class="pl-k">&gt;</span> r2 <span class="pl-k">=</span> <span class="pl-c1">range</span>(forest, <span class="pl-c1">:bagging_fraction</span>, lower<span class="pl-k">=</span><span class="pl-c1">0.4</span>, upper<span class="pl-k">=</span><span class="pl-c1">1.0</span>);</pre></div>
<h3 dir="auto"><a id="user-content-particleswarm" class="anchor" aria-hidden="true" href="#particleswarm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ParticleSwarm</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; self_tuning_forest = TunedModel(
           model=forest,
           tuning=ParticleSwarm(rng=StableRNG(0)),
           resampling=CV(nfolds=6, rng=StableRNG(1)),
           range=[r1, r2],
           measure=rms,
           n=15
       );

julia&gt; mach = machine(self_tuning_forest, X, y);

julia&gt; fit!(mach, verbosity=0);

julia&gt; plot(mach)"><pre>julia<span class="pl-k">&gt;</span> self_tuning_forest <span class="pl-k">=</span> <span class="pl-c1">TunedModel</span>(
           model<span class="pl-k">=</span>forest,
           tuning<span class="pl-k">=</span><span class="pl-c1">ParticleSwarm</span>(rng<span class="pl-k">=</span><span class="pl-c1">StableRNG</span>(<span class="pl-c1">0</span>)),
           resampling<span class="pl-k">=</span><span class="pl-c1">CV</span>(nfolds<span class="pl-k">=</span><span class="pl-c1">6</span>, rng<span class="pl-k">=</span><span class="pl-c1">StableRNG</span>(<span class="pl-c1">1</span>)),
           range<span class="pl-k">=</span>[r1, r2],
           measure<span class="pl-k">=</span>rms,
           n<span class="pl-k">=</span><span class="pl-c1">15</span>
       );

julia<span class="pl-k">&gt;</span> mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(self_tuning_forest, X, y);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fit!</span>(mach, verbosity<span class="pl-k">=</span><span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(mach)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaAI/MLJParticleSwarmOptimization.jl/blob/assets/basic.svg"><img src="https://github.com/JuliaAI/MLJParticleSwarmOptimization.jl/raw/assets/basic.svg" alt="basic" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-adaptiveparticleswarm" class="anchor" aria-hidden="true" href="#adaptiveparticleswarm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>AdaptiveParticleSwarm</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; self_tuning_forest = TunedModel(
           model=forest,
           tuning=AdaptiveParticleSwarm(rng=StableRNG(0)),
           resampling=CV(nfolds=6, rng=StableRNG(1)),
           range=[r1, r2],
           measure=rms,
           n=15
       );

julia&gt; mach = machine(self_tuning_forest, X, y);

julia&gt; fit!(mach, verbosity=0);

julia&gt; plot(mach)"><pre>julia<span class="pl-k">&gt;</span> self_tuning_forest <span class="pl-k">=</span> <span class="pl-c1">TunedModel</span>(
           model<span class="pl-k">=</span>forest,
           tuning<span class="pl-k">=</span><span class="pl-c1">AdaptiveParticleSwarm</span>(rng<span class="pl-k">=</span><span class="pl-c1">StableRNG</span>(<span class="pl-c1">0</span>)),
           resampling<span class="pl-k">=</span><span class="pl-c1">CV</span>(nfolds<span class="pl-k">=</span><span class="pl-c1">6</span>, rng<span class="pl-k">=</span><span class="pl-c1">StableRNG</span>(<span class="pl-c1">1</span>)),
           range<span class="pl-k">=</span>[r1, r2],
           measure<span class="pl-k">=</span>rms,
           n<span class="pl-k">=</span><span class="pl-c1">15</span>
       );

julia<span class="pl-k">&gt;</span> mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(self_tuning_forest, X, y);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fit!</span>(mach, verbosity<span class="pl-k">=</span><span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(mach)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaAI/MLJParticleSwarmOptimization.jl/blob/assets/adaptive.svg"><img src="https://github.com/JuliaAI/MLJParticleSwarmOptimization.jl/raw/assets/adaptive.svg" alt="adaptive" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">[1] <a href="https://ieeexplore.ieee.org/abstract/document/488968/" rel="nofollow">Kennedy, J., &amp; Eberhart, R. (1995, November). Particle swarm optimization. In Proceedings of ICNN'95-international conference on neural networks (Vol. 4, pp. 1942-1948). IEEE.</a></p>
<p dir="auto">[2] <a href="https://ieeexplore.ieee.org/abstract/document/4812104/" rel="nofollow">Zhan, Z. H., Zhang, J., Li, Y., &amp; Chung, H. S. H. (2009). Adaptive particle swarm optimization. IEEE Transactions on Systems, Man, and Cybernetics, Part B (Cybernetics), 39(6), 1362-1381.</a></p>
<p dir="auto">[3] <a href="https://link.springer.com/chapter/10.1007/978-3-540-31880-4_35" rel="nofollow">Sierra, M. R., &amp; Coello, C. A. C. (2005, March). Improving PSO-based multi-objective optimization using crowding, mutation and∈-dominance. In International conference on evolutionary multi-criterion optimization (pp. 505-519). Springer, Berlin, Heidelberg.</a></p>
<p dir="auto">[4] <a href="https://dl.acm.org/doi/abs/10.1145/2908812.2908935" rel="nofollow">Strasser, S., Goodman, R., Sheppard, J., &amp; Butcher, S. (2016, July). A new discrete particle swarm optimization algorithm. In Proceedings of the Genetic and Evolutionary Computation Conference 2016 (pp. 53-60).</a></p>
</article></div>