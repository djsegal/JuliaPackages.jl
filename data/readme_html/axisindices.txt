<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-axisindicesjl" class="anchor" aria-hidden="true" href="#axisindicesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AxisIndices.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/Tokazama/AxisIndices.jl/workflows/CI/badge.svg"><img src="https://github.com/Tokazama/AxisIndices.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/AxisIndices.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable-docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/AxisIndices.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev-docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Tokazama/AxisIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dd987238f7b4024411179167b409702006b1bbab2c178b06f606cac596440ccf/68747470733a2f2f636f6465636f762e696f2f67682f546f6b617a616d612f41786973496e64696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d546e3643436931684738" alt="codecov" data-canonical-src="https://codecov.io/gh/Tokazama/AxisIndices.jl/branch/master/graph/badge.svg?token=Tn6CCi1hG8" style="max-width:100%;"></a></p>
<p>Here are some reasons you should try AxisIndices</p>
<ul>
<li><strong>Flexible design</strong> for <strong>customizing multidimensional indexing</strong> behavior</li>
<li><strong>It's fast</strong>. <a href="https://github.com/Tokazama/StaticRanges.jl">StaticRanges</a> are used to speed up indexing ranges. If something is slow, please create a detailed issue.</li>
<li><strong>Works with Julia's standard library</strong> (in progress). The end goal of AxisIndices is to fully integrate with the standard library wherever possible. If you can find a relevant method that isn't supported in <code>Base</code>or  <code>Statistics</code> then it's likely an oversight, so make an issue. <code>LinearAlgebra</code>, <code>MappedArrays</code>, <code>OffsetArrays</code>, and <code>NamedDims</code> also have some form of support.</li>
</ul>
<p>Note that in the Julia REPL an <code>AxisArray</code> prints as follows, which may not be apparent in the online documentation.
<a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/show_array.png"><img src="./docs/src/assets/show_array.png" alt="REPL AxisArray" style="max-width:100%;"></a></p>
<h2><a id="user-content-a-simple-axisarray" class="anchor" aria-hidden="true" href="#a-simple-axisarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A Simple <code>AxisArray</code></h2>
<p>The simplest form of an <code>AxisArray</code> just wraps a standard array.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using AxisIndices

julia&gt; x = reshape(1:8, 2, 4);

julia&gt; ax = AxisArray(x)
2×4 AxisArray(reshape(::UnitRange{Int64}, 2, 4)
  • axes:
     1 = 1:2
     2 = 1:4
)
     1  2  3  4
  1  1  3  5  7
  2  2  4  6  8  

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AxisIndices

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(x)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  
</pre></div>
<p>Simply wrapping <code>x</code> allows us to use functions to access its elements.
When using functions as indexing arguments, the axis corresponding to each argument is ultimately filtered by the function.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax[:, &gt;(2)]
2×2 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = 1:2
)
     1  2
  1  5  7
  2  6  8  

julia&gt; ax[:, &gt;(2)] == ax[:,filter(&gt;(2), axes(ax, 2))] == ax[:, 3:4]
true
"><pre>julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-k">&gt;</span>(<span class="pl-c1">2</span>)]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  

julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-k">&gt;</span>(<span class="pl-c1">2</span>)] <span class="pl-k">==</span> ax[:,<span class="pl-c1">filter</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">2</span>), <span class="pl-c1">axes</span>(ax, <span class="pl-c1">2</span>))] <span class="pl-k">==</span> ax[:, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>]
<span class="pl-c1">true</span></pre></div>
<p>This can be particularly helpful when indexing arguments for large arrays would otherwise require combining two or more non-continuous sets of indices.
For example, if we wanted to get every element except for those at one index along the second dimension you would need to do something like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; not_index = 2;      # the index we don't want to include

julia&gt; axis = axes(x, 2);  # the axis that we want to refer to

julia&gt; inds_before = firstindex(axis):(not_index - 1);  # all of the indices before `not_index` 

julia&gt; inds_after = (not_index + 1):lastindex(axis);    # all of the indices after `not_index`

julia&gt; x[:, vcat(inds_before, inds_after)]
2×3 Matrix{Int64}:
 1  5  7
 2  6  8

"><pre>julia<span class="pl-k">&gt;</span> not_index <span class="pl-k">=</span> <span class="pl-c1">2</span>;      <span class="pl-c"><span class="pl-c">#</span> the index we don't want to include</span>

julia<span class="pl-k">&gt;</span> axis <span class="pl-k">=</span> <span class="pl-c1">axes</span>(x, <span class="pl-c1">2</span>);  <span class="pl-c"><span class="pl-c">#</span> the axis that we want to refer to</span>

julia<span class="pl-k">&gt;</span> inds_before <span class="pl-k">=</span> <span class="pl-c1">firstindex</span>(axis)<span class="pl-k">:</span>(not_index <span class="pl-k">-</span> <span class="pl-c1">1</span>);  <span class="pl-c"><span class="pl-c">#</span> all of the indices before `not_index` </span>

julia<span class="pl-k">&gt;</span> inds_after <span class="pl-k">=</span> (not_index <span class="pl-k">+</span> <span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">lastindex</span>(axis);    <span class="pl-c"><span class="pl-c">#</span> all of the indices after `not_index`</span>

julia<span class="pl-k">&gt;</span> x[:, <span class="pl-c1">vcat</span>(inds_before, inds_after)]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>
</pre></div>
<p>Using an <code>AxisArray</code>, this only requires one line of code</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax[:, !=(2)]
2×3 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = 1:3
)
     1  2  3
  1  1  5  7
  2  2  6  8  
"><pre>julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-k">!=</span>(<span class="pl-c1">2</span>)]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  </pre></div>
<p>We can using <code>ChainedFixes</code> to combine multiple functions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ChainedFixes

julia&gt; ax[:, or(&lt;(2), &gt;(3))]  # == ax[:, [1, 4]]
2×2 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = 1:2
)
     1  2
  1  1  7
  2  2  8  

julia&gt; ax[:, and(&gt;(1), &lt;(4))]
2×2 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = 1:2
)
     1  2
  1  3  5
  2  4  6  

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChainedFixes

julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-c1">or</span>(<span class="pl-k">&lt;</span>(<span class="pl-c1">2</span>), <span class="pl-k">&gt;</span>(<span class="pl-c1">3</span>))]  <span class="pl-c"><span class="pl-c">#</span> == ax[:, [1, 4]]</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">8</span>  

julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-c1">and</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">4</span>))]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  
</pre></div>
<p>Although these examples are simple and could be done by hand (i.e. without producing the indices programmatically), arrays that are larger or have unknown indices are more easily managed.</p>
<h2><a id="user-content-an-axisarray-with-keys" class="anchor" aria-hidden="true" href="#an-axisarray-with-keys"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>An <code>AxisArray</code> with Keys</h2>
<p>All arguments after the array passed to <code>AxisArray</code> are applied to corresponding axes.
We can bind a set of keys to an axis when constructing an <code>AxisArray</code> by providing them in the corresponding axis argument position.
Whenever altering an axis we need to provide an argument for each dimension.
In the following example we pass <code>nothing, (.1:.1:.4)s</code>, which means the first axis won't be changed and the second axis will have <code>(.1:.1:.4)s</code> bound to it.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Unitful: s

julia&gt; ax = AxisArray(x, nothing, (.1:.1:.4)s)
2×4 AxisArray(reshape(::UnitRange{Int64}, 2, 4)
  • axes:
     1 = 1:2
     2 = (0.1:0.1:0.4) s
)
     0.1 s  0.2 s  0.3 s  0.4 s
  1      1      3      5      7
  2      2      4      6      8  

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Unitful<span class="pl-k">:</span> s

julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">nothing</span>, (<span class="pl-c1">.1</span><span class="pl-k">:</span><span class="pl-c1">.1</span><span class="pl-k">:</span><span class="pl-c1">.4</span>)s)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.4</span>) s
)
     <span class="pl-c1">0.1</span> s  <span class="pl-c1">0.2</span> s  <span class="pl-c1">0.3</span> s  <span class="pl-c1">0.4</span> s
  <span class="pl-c1">1</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>      <span class="pl-c1">5</span>      <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>      <span class="pl-c1">2</span>      <span class="pl-c1">4</span>      <span class="pl-c1">6</span>      <span class="pl-c1">8</span>  
</pre></div>
<p>We can still use functions to access these elements</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax[:, &lt;(0.3s)]
2×2 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = (0.1:0.1:0.2) s
)
     0.1 s  0.2 s
  1      1      3
  2      2      4  

"><pre>julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-k">&lt;</span>(<span class="pl-c1">0.3</span>s)]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.2</span>) s
)
     <span class="pl-c1">0.1</span> s  <span class="pl-c1">0.2</span> s
  <span class="pl-c1">1</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>
  <span class="pl-c1">2</span>      <span class="pl-c1">2</span>      <span class="pl-c1">4</span>  
</pre></div>
<p>This also allows us to use keys as indexing arguments...</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax[1, 0.1s]
1
"><pre>julia<span class="pl-k">&gt;</span> ax[<span class="pl-c1">1</span>, <span class="pl-c1">0.1</span>s]
<span class="pl-c1">1</span></pre></div>
<p>...or as intervals.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax[:, 0.1s..0.3s]
2×3 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = (0.1:0.1:0.3) s
)
     0.1 s  0.2 s  0.3 s
  1      1      3      5
  2      2      4      6  

"><pre>julia<span class="pl-k">&gt;</span> ax[:, <span class="pl-c1">0.1</span>s<span class="pl-k">..</span><span class="pl-c1">0.3</span>s]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.3</span>) s
)
     <span class="pl-c1">0.1</span> s  <span class="pl-c1">0.2</span> s  <span class="pl-c1">0.3</span> s
  <span class="pl-c1">1</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>      <span class="pl-c1">5</span>
  <span class="pl-c1">2</span>      <span class="pl-c1">2</span>      <span class="pl-c1">4</span>      <span class="pl-c1">6</span>  
</pre></div>
<h2><a id="user-content-offset-indexing" class="anchor" aria-hidden="true" href="#offset-indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Offset Indexing</h2>
<p>Indices don't have to start at one if we don't want them to.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax = AxisArray(x, 2:3, 2:5)
2×4 AxisArray(reshape(::UnitRange{Int64}, 2, 4)
  • axes:
     1 = 2:3
     2 = 2:5
)
     2  3  4  5
  2  1  3  5  7
  3  2  4  6  8  

julia&gt; ax[:,2]
2-element AxisArray(::Vector{Int64}
  • axes:
     1 = 2:3
)
     1
  2  1
  3  2  

"><pre>julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>
)
     <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  

julia<span class="pl-k">&gt;</span> ax[:,<span class="pl-c1">2</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>
)
     <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">1</span>
  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  
</pre></div>
<p>If you don't know the length of each axis beforehand you can use <code>offset</code>.
The argument passed to offset specifies how much the standard indices should be adjusted by.
To start indexing at <code>2</code> we need to offset one-based indexing by +1.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax = AxisArray(x, offset(1), offset(1))
2×4 AxisArray(reshape(::UnitRange{Int64}, 2, 4)
  • axes:
     1 = 2:3
     2 = 2:5
)
     2  3  4  5
  2  1  3  5  7
  3  2  4  6  8  

"><pre>julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">offset</span>(<span class="pl-c1">1</span>), <span class="pl-c1">offset</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>
)
     <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  
</pre></div>
<p>We can also center each axis.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax = AxisArray(x, center, center)
2×4 AxisArray(reshape(::UnitRange{Int64}, 2, 4)
  • axes:
     1 = -1:0
     2 = -2:1
)
      -2  -1  0  1
  -1   1   3  5  7
  0    2   4  6  8  

"><pre>julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(x, center, center)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">1</span>
)
      <span class="pl-k">-</span><span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">0</span>    <span class="pl-c1">2</span>   <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  
</pre></div>
<p>The default origin of each centered axis is zero, but we can choose any origin.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax = AxisArray(reshape(1:9, 3, 3), center(10), center(10))
3×3 AxisArray(reshape(::UnitRange{Int64}, 3, 3)
  • axes:
     1 = 9:11
     2 = 9:11
)
      9  10  11
  9   1   4   7
  10  2   5   8
  11  3   6   9  

"><pre>julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">center</span>(<span class="pl-c1">10</span>), <span class="pl-c1">center</span>(<span class="pl-c1">10</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-c1">11</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-c1">11</span>
)
      <span class="pl-c1">9</span>  <span class="pl-c1">10</span>  <span class="pl-c1">11</span>
  <span class="pl-c1">9</span>   <span class="pl-c1">1</span>   <span class="pl-c1">4</span>   <span class="pl-c1">7</span>
  <span class="pl-c1">10</span>  <span class="pl-c1">2</span>   <span class="pl-c1">5</span>   <span class="pl-c1">8</span>
  <span class="pl-c1">11</span>  <span class="pl-c1">3</span>   <span class="pl-c1">6</span>   <span class="pl-c1">9</span>  
</pre></div>
<h2><a id="user-content-static-sizing" class="anchor" aria-hidden="true" href="#static-sizing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Static Sizing</h2>
<p>Sometimes we know the size of the arrays we'll be working with beforehand.
This can be encoded in the axis using <code>ArrayInterface.StaticInt</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ArrayInterface

julia&gt; import ArrayInterface: StaticInt

julia&gt; ax = AxisArray{Int}(
          undef,                      # initialize empty array
          StaticInt(1):StaticInt(2),  # first  axis with known size of two
          StaticInt(1):StaticInt(2)   # second axis with known size of two
       );

julia&gt; ArrayInterface.known_length(typeof(ax)) # size is known at compile time
4

julia&gt; ax[1:2, 1:2] .= x[1:2, 1:2];  # underlying type is mutable `Array`, so we can assign new values

julia&gt; ax
2×2 AxisArray(::Matrix{Int64}
  • axes:
     1 = 1:2
     2 = 1:2
)
     1  2
  1  1  3
  2  2  4  

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ArrayInterface

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> ArrayInterface<span class="pl-k">:</span> StaticInt

julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span><span class="pl-c1">{Int}</span>(
          undef,                      <span class="pl-c"><span class="pl-c">#</span> initialize empty array</span>
          <span class="pl-c1">StaticInt</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">StaticInt</span>(<span class="pl-c1">2</span>),  <span class="pl-c"><span class="pl-c">#</span> first  axis with known size of two</span>
          <span class="pl-c1">StaticInt</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">StaticInt</span>(<span class="pl-c1">2</span>)   <span class="pl-c"><span class="pl-c">#</span> second axis with known size of two</span>
       );

julia<span class="pl-k">&gt;</span> ArrayInterface<span class="pl-k">.</span><span class="pl-c1">known_length</span>(<span class="pl-c1">typeof</span>(ax)) <span class="pl-c"><span class="pl-c">#</span> size is known at compile time</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> ax[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">.=</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>];  <span class="pl-c"><span class="pl-c">#</span> underlying type is mutable `Array`, so we can assign new values</span>

julia<span class="pl-k">&gt;</span> ax
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  
</pre></div>
<h2><a id="user-content-encoding-types-as-axes" class="anchor" aria-hidden="true" href="#encoding-types-as-axes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Encoding Types as Axes</h2>
<p>If each element along a particular axis corresponds to a field of a type then we can encode that information in the axis.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ax = AxisArray(reshape(1:4, 2, 2), StructAxis{ComplexF64}(), [:a, :b])
2×2 AxisArray(reshape(::UnitRange{Int64}, 2, 2)
  • axes:
     1 = [:re, :im]
     2 = [:a, :b]
)
       :a   :b 
  :re  1    3
  :im  2    4  

"><pre>julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">StructAxis</span><span class="pl-c1">{ComplexF64}</span>(), [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> [<span class="pl-c1">:re</span>, <span class="pl-c1">:im</span>]
     <span class="pl-c1">2</span> <span class="pl-k">=</span> [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>]
)
       <span class="pl-c1">:a</span>   <span class="pl-c1">:b</span> 
  <span class="pl-c1">:re</span>  <span class="pl-c1">1</span>    <span class="pl-c1">3</span>
  <span class="pl-c1">:im</span>  <span class="pl-c1">2</span>    <span class="pl-c1">4</span>  
</pre></div>
<p>We can then create a lazy mapping of that type across views of the array.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; axview = struct_view(ax)
2-element AxisArray(mappedarray(ComplexF64, view(reshape(::UnitRange{Int64}, 2, 2), 1, :), view(reshape(::UnitRange{Int64}, 2, 2), 2, :))
  • axes:
     1 = [:a, :b]
)
      1    
  :a  1.0 + 2.0im
  :b  3.0 + 4.0im  

julia&gt; axview[:b]
3.0 + 4.0im

"><pre>julia<span class="pl-k">&gt;</span> axview <span class="pl-k">=</span> <span class="pl-c1">struct_view</span>(ax)
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-c1">mappedarray</span>(ComplexF64, <span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>, :), <span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">2</span>, :))
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>]
)
      <span class="pl-c1">1</span>    
  <span class="pl-c1">:a</span>  <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">2.0im</span>
  <span class="pl-c1">:b</span>  <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">4.0im</span>  

julia<span class="pl-k">&gt;</span> axview[<span class="pl-c1">:b</span>]
<span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">4.0im</span>
</pre></div>
<h2><a id="user-content-attaching-metadata" class="anchor" aria-hidden="true" href="#attaching-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Attaching Metadata</h2>
<p>Using the <code>Metadata</code> package, metadata can be added to an <code>AxisArray</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Metadata

julia&gt; mx = attach_metadata(AxisArray(x))
2×4 attach_metadata(AxisArray(reshape(::UnitRange{Int64}, 2, 4)
  • axes:
     1 = 1:2
     2 = 1:4
), ::Dict{Symbol, Any}
  • metadata:
)
     1  2  3  4
  1  1  3  5  7
  2  2  4  6  8

julia&gt; mx.m1 = 1;

julia&gt; mx.m1
1

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Metadata

julia<span class="pl-k">&gt;</span> mx <span class="pl-k">=</span> <span class="pl-c1">attach_metadata</span>(<span class="pl-c1">AxisArray</span>(x))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">attach_metadata</span>(<span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
     <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
), <span class="pl-k">::</span><span class="pl-c1">Dict{Symbol, Any}</span>
  • metadata<span class="pl-k">:</span>
)
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>
  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> mx<span class="pl-k">.</span>m1 <span class="pl-k">=</span> <span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> mx<span class="pl-k">.</span>m1
<span class="pl-c1">1</span>
</pre></div>
<p>Metadata can also be attached to an axis.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; m = (a = 1, b = 2);

julia&gt; ax = AxisArray(x, nothing, attach_metadata(m));

julia&gt; metadata(ax, dim=2)
(a = 1, b = 2)

"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> ax <span class="pl-k">=</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">nothing</span>, <span class="pl-c1">attach_metadata</span>(m));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">metadata</span>(ax, dim<span class="pl-k">=</span><span class="pl-c1">2</span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
</pre></div>
<h2><a id="user-content-padded-axes" class="anchor" aria-hidden="true" href="#padded-axes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Padded Axes</h2>
<p>We can also pad axes in various ways.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = [:a, :b, :c, :d];

julia&gt; AxisArray(x, circular_pad(first_pad=2, last_pad=2))
8-element AxisArray(::Vector{Symbol}
  • axes:
     1 = -1:6
)
      1
  -1   :c
  0    :d
  1    :a
  2    :b
  3    :c
  4    :d
  5    :a
  6    :b  

julia&gt; AxisArray(x, replicate_pad(first_pad=2, last_pad=2))
8-element AxisArray(::Vector{Symbol}
  • axes:
     1 = -1:6
)
      1
  -1   :a
  0    :a
  1    :a
  2    :b
  3    :c
  4    :d
  5    :d
  6    :d  

julia&gt; AxisArray(x, symmetric_pad(first_pad=2, last_pad=2))
8-element AxisArray(::Vector{Symbol}
  • axes:
     1 = -1:6
)
      1
  -1   :c
  0    :b
  1    :a
  2    :b
  3    :c
  4    :d
  5    :c
  6    :b  

julia&gt; AxisArray(x, reflect_pad(first_pad=2, last_pad=2))
8-element AxisArray(::Vector{Symbol}
  • axes:
     1 = -1:6
)
      1
  -1   :b
  0    :a
  1    :a
  2    :b
  3    :c
  4    :d
  5    :d
  6    :c  

julia&gt; AxisArray(3:4, zero_pad(sym_pad=2))
6-element AxisArray(::UnitRange{Int64}
  • axes:
     1 = -1:4
)
      1
  -1  0
  0   0
  1   3
  2   4
  3   0
  4   0  

julia&gt; AxisArray(3:4, one_pad(sym_pad=2))
6-element AxisArray(::UnitRange{Int64}
  • axes:
     1 = -1:4
)
      1
  -1  1
  0   1
  1   3
  2   4
  3   1
  4   1  

"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">circular_pad</span>(first_pad<span class="pl-k">=</span><span class="pl-c1">2</span>, last_pad<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">8</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>
)
      <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">:c</span>
  <span class="pl-c1">0</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">1</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">2</span>    <span class="pl-c1">:b</span>
  <span class="pl-c1">3</span>    <span class="pl-c1">:c</span>
  <span class="pl-c1">4</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">5</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">6</span>    <span class="pl-c1">:b</span>  

julia<span class="pl-k">&gt;</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">replicate_pad</span>(first_pad<span class="pl-k">=</span><span class="pl-c1">2</span>, last_pad<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">8</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>
)
      <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">:a</span>
  <span class="pl-c1">0</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">1</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">2</span>    <span class="pl-c1">:b</span>
  <span class="pl-c1">3</span>    <span class="pl-c1">:c</span>
  <span class="pl-c1">4</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">5</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">6</span>    <span class="pl-c1">:d</span>  

julia<span class="pl-k">&gt;</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">symmetric_pad</span>(first_pad<span class="pl-k">=</span><span class="pl-c1">2</span>, last_pad<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">8</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>
)
      <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">:c</span>
  <span class="pl-c1">0</span>    <span class="pl-c1">:b</span>
  <span class="pl-c1">1</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">2</span>    <span class="pl-c1">:b</span>
  <span class="pl-c1">3</span>    <span class="pl-c1">:c</span>
  <span class="pl-c1">4</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">5</span>    <span class="pl-c1">:c</span>
  <span class="pl-c1">6</span>    <span class="pl-c1">:b</span>  

julia<span class="pl-k">&gt;</span> <span class="pl-c1">AxisArray</span>(x, <span class="pl-c1">reflect_pad</span>(first_pad<span class="pl-k">=</span><span class="pl-c1">2</span>, last_pad<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">8</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>
)
      <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">:b</span>
  <span class="pl-c1">0</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">1</span>    <span class="pl-c1">:a</span>
  <span class="pl-c1">2</span>    <span class="pl-c1">:b</span>
  <span class="pl-c1">3</span>    <span class="pl-c1">:c</span>
  <span class="pl-c1">4</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">5</span>    <span class="pl-c1">:d</span>
  <span class="pl-c1">6</span>    <span class="pl-c1">:c</span>  

julia<span class="pl-k">&gt;</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">zero_pad</span>(sym_pad<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">6</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
)
      <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">0</span>
  <span class="pl-c1">0</span>   <span class="pl-c1">0</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">3</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">4</span>
  <span class="pl-c1">3</span>   <span class="pl-c1">0</span>
  <span class="pl-c1">4</span>   <span class="pl-c1">0</span>  

julia<span class="pl-k">&gt;</span> <span class="pl-c1">AxisArray</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">one_pad</span>(sym_pad<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">6</span><span class="pl-k">-</span>element <span class="pl-c1">AxisArray</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>
  • axes<span class="pl-k">:</span>
     <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
)
      <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">1</span>
  <span class="pl-c1">0</span>   <span class="pl-c1">1</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">3</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">4</span>
  <span class="pl-c1">3</span>   <span class="pl-c1">1</span>
  <span class="pl-c1">4</span>   <span class="pl-c1">1</span>  
</pre></div>
<h2><a id="user-content-named-axes" class="anchor" aria-hidden="true" href="#named-axes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Named Axes</h2>
<p>Names can be attached to each dimension/axis using <code>NamedAxisArray</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nax = NamedAxisArray(reshape(1:4, 2, 2), x = [:a, :b], y = [&quot;c&quot;, &quot;d&quot;])
2×2 NamedDimsArray(AxisArray(reshape(::UnitRange{Int64}, 2, 2)
  • axes:
     x = [:a, :b]
     y = [&quot;c&quot;, &quot;d&quot;]
))
      &quot;c&quot;   &quot;d&quot; 
  :a  1     3
  :b  2     4  

"><pre>julia<span class="pl-k">&gt;</span> nax <span class="pl-k">=</span> <span class="pl-c1">NamedAxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>), x <span class="pl-k">=</span> [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>], y <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">NamedDimsArray</span>(<span class="pl-c1">AxisArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
  • axes<span class="pl-k">:</span>
     x <span class="pl-k">=</span> [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>]
     y <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>]
))
      <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>   <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span> 
  <span class="pl-c1">:a</span>  <span class="pl-c1">1</span>     <span class="pl-c1">3</span>
  <span class="pl-c1">:b</span>  <span class="pl-c1">2</span>     <span class="pl-c1">4</span>  
</pre></div>
</article></div>