<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fluxprune" class="anchor" aria-hidden="true" href="#fluxprune"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FluxPrune</h1>
<p dir="auto"><a href="https://github.com/darsnack/FluxPrune.jl/actions"><img src="https://github.com/darsnack/FluxPrune.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">FluxPrune.jl provides iterative pruning algorithms for Flux models. Pruning strategies can be <em>unstructured</em> or <em>structured</em>. Unstructured strategies operate on arrays, while structured strategies operate on layers.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-unstructured-edge-pruning" class="anchor" aria-hidden="true" href="#unstructured-edge-pruning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unstructured edge pruning</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Flux, FluxPrune
using MLUtils: flatten

m = Chain(Conv((3, 3), 3 =&gt; 16), Conv((3, 3), 16 =&gt; 32), flatten, Dense(512, 10))
# prune all weights to 70% sparsity
m̄ = prune(LevelPrune(0.7), m)
# prune all weights with magnitude lower than 0.5
m̄ = prune(ThresholdPrune(0.5), m)
# prune each layer in a Chain at a different rate
# (just uses broadcasting then re-Chains)
m̄ = prune([LevelPrune(0.4), LevelPrune(0.6), identity, LevelPrune(0.7)], m)"><pre><span class="pl-k">using</span> Flux, FluxPrune
<span class="pl-k">using</span> MLUtils<span class="pl-k">:</span> flatten

m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">16</span>), <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">16</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32</span>), flatten, <span class="pl-c1">Dense</span>(<span class="pl-c1">512</span>, <span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> prune all weights to 70% sparsity</span>
m̄ <span class="pl-k">=</span> <span class="pl-c1">prune</span>(<span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.7</span>), m)
<span class="pl-c"><span class="pl-c">#</span> prune all weights with magnitude lower than 0.5</span>
m̄ <span class="pl-k">=</span> <span class="pl-c1">prune</span>(<span class="pl-c1">ThresholdPrune</span>(<span class="pl-c1">0.5</span>), m)
<span class="pl-c"><span class="pl-c">#</span> prune each layer in a Chain at a different rate</span>
<span class="pl-c"><span class="pl-c">#</span> (just uses broadcasting then re-Chains)</span>
m̄ <span class="pl-k">=</span> <span class="pl-c1">prune</span>([<span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.4</span>), <span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.6</span>), identity, <span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.7</span>)], m)</pre></div>
<h3 dir="auto"><a id="user-content-structured-channel-pruning" class="anchor" aria-hidden="true" href="#structured-channel-pruning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Structured channel pruning</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Flux, FluxPrune
using MLUtils: flatten

m = Chain(Conv((3, 3), 3 =&gt; 16), Conv((3, 3), 16 =&gt; 32), flatten, Dense(512, 10))
# prune all conv layer channels to 30% sparsity
m̄ = prune(ChannelPrune(0.3), m)"><pre><span class="pl-k">using</span> Flux, FluxPrune
<span class="pl-k">using</span> MLUtils<span class="pl-k">:</span> flatten

m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">16</span>), <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">16</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32</span>), flatten, <span class="pl-c1">Dense</span>(<span class="pl-c1">512</span>, <span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> prune all conv layer channels to 30% sparsity</span>
m̄ <span class="pl-k">=</span> <span class="pl-c1">prune</span>(<span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.3</span>), m)</pre></div>
<h3 dir="auto"><a id="user-content-mixed-pruning" class="anchor" aria-hidden="true" href="#mixed-pruning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mixed pruning</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Flux, FluxPrune
using MLUtils: flatten

m = Chain(Conv((3, 3), 3 =&gt; 16), Conv((3, 3), 16 =&gt; 32), flatten, Dense(512, 10))
# apply channel and edge pruning
m̄ = prune([ChannelPrune(0.3), ChannelPrune(0.4), identity, LevelPrune(0.8)], m)"><pre><span class="pl-k">using</span> Flux, FluxPrune
<span class="pl-k">using</span> MLUtils<span class="pl-k">:</span> flatten

m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">16</span>), <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">16</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32</span>), flatten, <span class="pl-c1">Dense</span>(<span class="pl-c1">512</span>, <span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> apply channel and edge pruning</span>
m̄ <span class="pl-k">=</span> <span class="pl-c1">prune</span>([<span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.3</span>), <span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.4</span>), identity, <span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.8</span>)], m)</pre></div>
<h3 dir="auto"><a id="user-content-iterative-pruning" class="anchor" aria-hidden="true" href="#iterative-pruning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iterative pruning</h3>
<p dir="auto">Target pruning levels step-by-step.
The first argument to iterativeprune (or the function block after the <code>do</code> statement) will finetune the model and return true to indicate moving onto the next stage, or false to indicate that finetune must be called again.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Flux, FluxPrune
using MLUtils: flatten
using Statistics: mean

features = rand(Float32, 8, 8, 3, 100);
labels = Flux.onehotbatch(rand(0:9, 100), 0:9);
data = (features, labels);
loss(m, x, y) = Flux.Losses.mse(m(x), y)
accuracy(m, data) = mean(Flux.onecold(m(data[1]), 0:9) .== Flux.onecold(data[2], 0:9))
target_accuracy = 0.08 # random data, so this is a low target

m = Chain(Conv((3, 3), 3 =&gt; 16), Conv((3, 3), 16 =&gt; 32), flatten, Dense(512, 10), softmax)
opt_state = Flux.setup(Momentum(), m);

stages = [
    [ChannelPrune(0.1), ChannelPrune(0.1), identity, LevelPrune(0.4), identity],
    [ChannelPrune(0.2), ChannelPrune(0.3), identity, LevelPrune(0.7), identity],
    [ChannelPrune(0.3), ChannelPrune(0.5), identity, LevelPrune(0.9), identity]
]
m̄ = iterativeprune(stages, m) do m̄
    for epoch in 1:10
        Flux.train!(loss, m̄, [data], opt_state)
    end
    return accuracy(m̄, data) &gt; target_accuracy
end"><pre><span class="pl-k">using</span> Flux, FluxPrune
<span class="pl-k">using</span> MLUtils<span class="pl-k">:</span> flatten
<span class="pl-k">using</span> Statistics<span class="pl-k">:</span> mean

features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>, <span class="pl-c1">3</span>, <span class="pl-c1">100</span>);
labels <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">onehotbatch</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">100</span>), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">9</span>);
data <span class="pl-k">=</span> (features, labels);
<span class="pl-en">loss</span>(m, x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span>Losses<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">m</span>(x), y)
<span class="pl-en">accuracy</span>(m, data) <span class="pl-k">=</span> <span class="pl-c1">mean</span>(Flux<span class="pl-k">.</span><span class="pl-c1">onecold</span>(<span class="pl-c1">m</span>(data[<span class="pl-c1">1</span>]), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">9</span>) <span class="pl-k">.==</span> Flux<span class="pl-k">.</span><span class="pl-c1">onecold</span>(data[<span class="pl-c1">2</span>], <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">9</span>))
target_accuracy <span class="pl-k">=</span> <span class="pl-c1">0.08</span> <span class="pl-c"><span class="pl-c">#</span> random data, so this is a low target</span>

m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">16</span>), <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">16</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32</span>), flatten, <span class="pl-c1">Dense</span>(<span class="pl-c1">512</span>, <span class="pl-c1">10</span>), softmax)
opt_state <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">setup</span>(<span class="pl-c1">Momentum</span>(), m);

stages <span class="pl-k">=</span> [
    [<span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.1</span>), <span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.1</span>), identity, <span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.4</span>), identity],
    [<span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.2</span>), <span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.3</span>), identity, <span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.7</span>), identity],
    [<span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.3</span>), <span class="pl-c1">ChannelPrune</span>(<span class="pl-c1">0.5</span>), identity, <span class="pl-c1">LevelPrune</span>(<span class="pl-c1">0.9</span>), identity]
]
m̄ <span class="pl-k">=</span> <span class="pl-c1">iterativeprune</span>(stages, m) <span class="pl-k">do</span> m̄
    <span class="pl-k">for</span> epoch <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
        Flux<span class="pl-k">.</span><span class="pl-c1">train!</span>(loss, m̄, [data], opt_state)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">accuracy</span>(m̄, data) <span class="pl-k">&gt;</span> target_accuracy
<span class="pl-k">end</span></pre></div>
</article></div>