<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structuredoptimizationjl" class="anchor" aria-hidden="true" href="#structuredoptimizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructuredOptimization.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaFirstOrder/StructuredOptimization.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaFirstOrder/StructuredOptimization.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaFirstOrder/StructuredOptimization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7161866dbe713c3d5cea6c307cff87b88b088b78448ea1eaba4ee51a0b152762/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696146697273744f726465722f537472756374757265644f7074696d697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaFirstOrder/StructuredOptimization.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliafirstorder.github.io/StructuredOptimization.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliafirstorder.github.io/StructuredOptimization.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">StructuredOptimization.jl is a high-level modeling language
that utilizes a syntax that is very close to
the mathematical formulation of an optimization problem.</p>
<p dir="auto">This user-friendly interface
acts as a parser to utilize
three different packages:</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/JuliaFirstOrder/ProximalOperators.jl">ProximalOperators.jl</a></p>
</li>
<li>
<p dir="auto"><a href="https://github.com/kul-optec/AbstractOperators.jl">AbstractOperators.jl</a></p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaFirstOrder/ProximalAlgorithms.jl">ProximalAlgorithms.jl</a></p>
</li>
</ul>
<p dir="auto">StructuredOptimization.jl can handle large-scale convex and nonconvex problems with nonsmooth cost functions.</p>
<p dir="auto">It supports complex variables as well.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install the package, hit <code>]</code> from the Julia command line to enter the package manager, then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add StructuredOptimization"><pre>pkg<span class="pl-k">&gt;</span> add StructuredOptimization</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">A <em>least absolute shrinkage and selection operator</em> (LASSO) can be solved with only few lines of code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StructuredOptimization

julia&gt; n, m = 100, 10;                # define problem size

julia&gt; A, y = randn(m,n), randn(m);   # random problem data

julia&gt; x = Variable(n);               # initialize optimization variable

julia&gt; λ = 1e-2*norm(A'*y,Inf);       # define λ    

julia&gt; @minimize ls( A*x - y ) + λ*norm(x, 1); # solve problem

julia&gt; ~x                             # inspect solution
100-element Array{Float64,1}:
  0.0
  0.0
  0.0
  0.440254
  0.0
  0.0
  0.0
[...]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructuredOptimization

julia<span class="pl-k">&gt;</span> n, m <span class="pl-k">=</span> <span class="pl-c1">100</span>, <span class="pl-c1">10</span>;                <span class="pl-c"><span class="pl-c">#</span> define problem size</span>

julia<span class="pl-k">&gt;</span> A, y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(m,n), <span class="pl-c1">randn</span>(m);   <span class="pl-c"><span class="pl-c">#</span> random problem data</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(n);               <span class="pl-c"><span class="pl-c">#</span> initialize optimization variable</span>

julia<span class="pl-k">&gt;</span> λ <span class="pl-k">=</span> <span class="pl-c1">1e-2</span><span class="pl-k">*</span><span class="pl-c1">norm</span>(A<span class="pl-k">'</span><span class="pl-k">*</span>y,<span class="pl-c1">Inf</span>);       <span class="pl-c"><span class="pl-c">#</span> define λ    </span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@minimize</span> <span class="pl-c1">ls</span>( A<span class="pl-k">*</span>x <span class="pl-k">-</span> y ) <span class="pl-k">+</span> λ<span class="pl-k">*</span><span class="pl-c1">norm</span>(x, <span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">#</span> solve problem</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">~</span>x                             <span class="pl-c"><span class="pl-c">#</span> inspect solution</span>
<span class="pl-c1">100</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.440254</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
[<span class="pl-k">...</span>]</pre></div>
<p dir="auto">See the <a href="https://juliafirstorder.github.io/StructuredOptimization.jl/latest" rel="nofollow">documentation</a> for more details about the type of problems StructuredOptimization.jl can handle and the <a href="https://juliafirstorder.github.io/StructuredOptimization.jl/stable/demos/" rel="nofollow">demos</a> to check out some examples.</p>
</article></div>