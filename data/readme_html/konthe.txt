<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-konthejl" class="anchor" aria-hidden="true" href="#konthejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Konthe.jl</h1>
<p dir="auto">Collection of convenience function for plotting using the OpenGL package. This package is desinged for creating non-interactive graphics, that can be saved to files. Every plot command will not plot to a window but return an Image object that can be saved to a file, viewed in an IJulia notebook or using ImageView.</p>
<p dir="auto">Have a look at an exammple notebook:</p>
<p dir="auto"><a href="https://rawgithub.com/meggart/Konthe/master/examples/KontheExamples.html" rel="nofollow">Example notebook</a></p>
<p dir="auto">Here is a list of exported functions:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="newPlot3D(width=800, height=600)"><pre class="notranslate"><code>newPlot3D(width=800, height=600)
</code></pre></div>
<p dir="auto">deletes all previous plots from the cache and creates an empty new plot.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="plot3D()"><pre class="notranslate"><code>plot3D()
</code></pre></div>
<p dir="auto">draws the current plot and returns an Image object containing the plot. This will automatically show up in an iPython notebook.
You might want to use the ImageView package in other environments.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="points3D(x::Vector, y::Vector, z::Vector; ps=2.0, color::Array{RGB}=RGB(1,1,1))"><pre class="notranslate"><code>points3D(x::Vector, y::Vector, z::Vector; ps=2.0, color::Array{RGB}=RGB(1,1,1))
</code></pre></div>
<p dir="auto">Draws a set of points with pointsize ps. color is an array of color values, if it is shorter than the number of points, colors will be repeated.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="lines3D(x::Vector, y::Vector, z::Vector; lw=2.0, color::Array{RGB}=RGB(1,1,1))"><pre class="notranslate"><code>lines3D(x::Vector, y::Vector, z::Vector; lw=2.0, color::Array{RGB}=RGB(1,1,1))
</code></pre></div>
<p dir="auto">Draws a connected set of lines with linewidth lw. color is an array of color values, if it is shorter than the number of points, colors will be repeated.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="surf3D(s::Matrix;x::Vector=linspace(0,1,size(s,1)),y::Vector=linspace(0,1,size(s,2)),
filled::Bool=true,color=zvalcol,normals=nnMeanNormal,lw=2)"><pre class="notranslate"><code>surf3D(s::Matrix;x::Vector=linspace(0,1,size(s,1)),y::Vector=linspace(0,1,size(s,2)),
filled::Bool=true,color=zvalcol,normals=nnMeanNormal,lw=2)
</code></pre></div>
<p dir="auto">Draws a surface defined by the Matrix s. x and y values can be defined. If filled is true, a filled surface is drawn, otherwise a connected grid is drawn. If no color is specified, colors are determined by the z value using the current colorbar. Normals are determined by automtaic gradient calculation.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="surf3D(f::Function,r1::Vector,r2::Vector;
filled::Bool=true,color=zvalcol,normals=nnMeanNormal,lw=2)"><pre class="notranslate"><code>surf3D(f::Function,r1::Vector,r2::Vector;
filled::Bool=true,color=zvalcol,normals=nnMeanNormal,lw=2)
</code></pre></div>
<p dir="auto">Draws a surface defined by the parametric function f that should have 2 arguments and return a tuple of (Float64, Float64, Float64). r1 and r2 are arrays that give the parameter values at which f should be calculated. If filled is true, a filled surface is drawn, otherwise a connected grid is drawn. If no color is specified, colors are determined by the z value using the current colorbar. Normals are determined by automtaic gradient calculation.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sphere3D(x,y,z,r;
filled=true,color=ccur,slices=20,stacks=20)"><pre class="notranslate"><code>sphere3D(x,y,z,r;
filled=true,color=ccur,slices=20,stacks=20)
</code></pre></div>
<p dir="auto">Draws a spere with center at (x,y,z) and radius r. Draws a filled surface if filled=true otherwise a grid is drawn. Color can be given by a RGB object. slices and stacks define the number of rendering points (the higher the prettier does the spehere look)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="lightsON()"><pre class="notranslate"><code>lightsON()
</code></pre></div>
<p dir="auto">enables lighting.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="lightsOFF()"><pre class="notranslate"><code>lightsOFF()
</code></pre></div>
<p dir="auto">disbales lighting.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="setLightDirection(x,y,z)"><pre class="notranslate"><code>setLightDirection(x,y,z)
</code></pre></div>
<p dir="auto">sets the direction of the light source.</p>
<p dir="auto">Examples:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/meggart/Konthe/blob/master/examples/fig1.png?raw=true"><img src="https://github.com/meggart/Konthe/raw/master/examples/fig1.png?raw=true" alt="Fig1" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/meggart/Konthe/blob/master/examples/fig2.png?raw=true"><img src="https://github.com/meggart/Konthe/raw/master/examples/fig2.png?raw=true" alt="Fig2" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/meggart/Konthe/blob/master/examples/fig3.png?raw=true"><img src="https://github.com/meggart/Konthe/raw/master/examples/fig3.png?raw=true" alt="Fig3" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/meggart/Konthe/blob/master/examples/fig4.png?raw=true"><img src="https://github.com/meggart/Konthe/raw/master/examples/fig4.png?raw=true" alt="Fig4" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/meggart/Konthe/blob/master/examples/fig5.png?raw=true"><img src="https://github.com/meggart/Konthe/raw/master/examples/fig5.png?raw=true" alt="Fig5" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://travis-ci.org/meggart/glPlot.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/959e0ddbeedb6c0a683792f6638fe610800ed1f7d0a2fdae182734acce14901d/68747470733a2f2f7472617669732d63692e6f72672f6d6567676172742f676c506c6f742e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/meggart/glPlot.jl.png" style="max-width: 100%;"></a></p>
</article></div>