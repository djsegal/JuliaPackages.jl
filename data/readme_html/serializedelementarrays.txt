<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-serializedelementarrays" class="anchor" aria-hidden="true" href="#serializedelementarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SerializedElementArrays</h1>
<p><a href="https://mtfishman.github.io/SerializedElementArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://mtfishman.github.io/SerializedElementArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/mtfishman/SerializedElementArrays.jl/actions"><img src="https://github.com/mtfishman/SerializedElementArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mtfishman/SerializedElementArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/10f48497331f43f7f1a3fcf07951197b25acb3ad002778ad3bfc0cd0827bb0fa/68747470733a2f2f636f6465636f762e696f2f67682f6d74666973686d616e2f53657269616c697a6564456c656d656e744172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mtfishman/SerializedElementArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install with the Julia package manager with <code>import Pkg; Pkg.add("SerializedElementArrays")</code>.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>This package introduces a function <code>disk</code> which transfers an <code>AbstractArray</code> in memory to one stored on disk, called a <code>SerializedElementArray</code>. The elements of the original array are serialized and by default are saved into individual files in a randomly generated directory inside the system's temporary directory.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SerializedElementArrays: disk, pathname

a = reshape(1:6, 2, 3)
d = disk(a)
@show d isa SerializedElementArrays.SerializedElementArray
@show a[1, 2]
@show d[1, 2]
@show readdir(pathname(d))
d[2, 2] = 3
"><pre><span class="pl-k">using</span> SerializedElementArrays<span class="pl-k">:</span> disk, pathname

a <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
d <span class="pl-k">=</span> <span class="pl-c1">disk</span>(a)
<span class="pl-c1">@show</span> d <span class="pl-k">isa</span> SerializedElementArrays<span class="pl-k">.</span>SerializedElementArray
<span class="pl-c1">@show</span> a[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">@show</span> d[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">@show</span> <span class="pl-c1">readdir</span>(<span class="pl-c1">pathname</span>(d))
d[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span></pre></div>
<p>Normal array operations like <code>getindex</code> and <code>setindex!</code> work on <code>SerializedElementArray</code>s, but note that they involve reading from and writing to disk so will be much slower than the same operations for <code>Array</code>. Keep this in mind when using a <code>SerializedElementArray</code> and organize your code to minimizing accessing individual elements.</p>
<p>To create an array stored on disk with undefined elements, <code>disk</code> accepts undefined <code>Array</code>s:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SerializedElementArrays: disk, pathname

a = Array{Matrix{Float64}}(undef, 2, 3)
d = disk(a)
@show isassigned(a, 1, 2)
@show isassigned(d, 1, 2)
@show readdir(pathname(d))
x = randn(5, 5)
d[1, 2] = x
@show x == d[1, 2]
@show readdir(pathname(d))
"><pre><span class="pl-k">using</span> SerializedElementArrays<span class="pl-k">:</span> disk, pathname

a <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Matrix{Float64}}</span>(undef, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
d <span class="pl-k">=</span> <span class="pl-c1">disk</span>(a)
<span class="pl-c1">@show</span> <span class="pl-c1">isassigned</span>(a, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">@show</span> <span class="pl-c1">isassigned</span>(d, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">@show</span> <span class="pl-c1">readdir</span>(<span class="pl-c1">pathname</span>(d))
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>)
d[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> x
<span class="pl-c1">@show</span> x <span class="pl-k">==</span> d[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">@show</span> <span class="pl-c1">readdir</span>(<span class="pl-c1">pathname</span>(d))</pre></div>
<p>When initialized from undefined <code>Array</code>s, no files are created, but elements can be set which are then written to disk.</p>
<p>Internally, files are written to a path in the system's temporary directory created by <code>tempname()</code>. In Julia 1.4 and later, the files are cleaned up once the Julia process finishes (see the Julia documentation for <a href="https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.tempname" rel="nofollow">tempname</a>). You can use <code>disk(a; cleanup=false)</code> to keep the files after the process ends. However, note that because serialization is used (with the standard library module <a href="https://docs.julialang.org/en/v1/stdlib/Serialization/" rel="nofollow">Serialization</a>), in general it is not guaranteed that the files can be read and written by different versions of Julia, or an instance of Julia with a different system image. The aim of this package is to make it easier to perform calculations with collections of very large objects which collectively might not fit in memory and are not read and written very often during the calculation, and which are not necessarily needed long term after the calculation finishes. For more stable reading and writing across different versions of Julia, we recommend using packages like <code>HDF5</code>, <code>JLD</code>, or <code>JLD2</code>.</p>
<h2><a id="user-content-future-plans" class="anchor" aria-hidden="true" href="#future-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future plans</h2>
<ul>
<li>Automate caching of recently accessed elements to speed up repeated access of the same elements. This could use something like <a href="https://github.com/JuliaCollections/LRUCache.jl">LRUCache.jl</a>.</li>
<li>Make a dictionary interface through a type <code>SerializedElementDict</code>. A design question would be if the file structure should be "nested" or "shallow", i.e. when saving nested dictionaries, should the dictionaries themselves be serialized and saved to files or should the individual elements of the nested dictionaries be saved to files?</li>
</ul>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related packages:</h2>
<ul>
<li><a href="https://github.com/beacon-biosignals/SerializationCaches.jl">SerializationCaches.jl</a></li>
</ul>
</article></div>