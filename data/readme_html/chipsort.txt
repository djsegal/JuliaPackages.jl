<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-chipsortjl" class="anchor" aria-hidden="true" href="#chipsortjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ChipSort.jl</h1>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img src="docs/src/assets/logo.png" width="50%" title="ChipSort logo" style="max-width:100%;"></a>
</p>
<p>ChipSort is a sorting module containing SIMD and cache-aware techniques. It's based on a couple of academic papers from 2008. More details can be found in <a href="https://nlw0.github.io/ChipSort.jl" rel="nofollow">our documentation</a>.</p>
<p><a href="https://nlw0.github.io/ChipSort.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/nlw0/ChipSort.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8da94c7a45dab0092dc12613e5d0402e7810a488/68747470733a2f2f7472617669732d63692e6f72672f6e6c77302f43686970536f72742e6a6c2e7376673f6272616e63683d6d6173746572" alt="travis" data-canonical-src="https://travis-ci.org/nlw0/ChipSort.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/nlw0/ChipSort.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36644d34a5290f39ca321b5d1bc1254af4322fe4/68747470733a2f2f636f6465636f762e696f2f67682f6e6c77302f43686970536f72742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/nlw0/ChipSort.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/170022251" rel="nofollow"><img src="https://camo.githubusercontent.com/3024cff1a848a752f088e4e49cafe1e08aa52ad4/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3137303032323235312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/170022251.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation and usage</h2>
<p>Like any experimental Julia package on GitHub you can install ChipSort from the Julia REPL by first typing <code>]</code> to enter the package management prompt, and then</p>
<pre><code>pkg&gt; add https://github.com/nlw0/ChipSort.jl
</code></pre>
<p>You can now try out the basic functions offered by the package such as <code>sort_net</code> to use a sorting network, or try the full array sort function prototype <code>chipsort</code>.</p>
<pre><code>julia&gt; using ChipSort

julia&gt; using SIMD

julia&gt; data = [Vec(tuple(rand(Int8, 4)...)) for _ in 1:4]
4-element Array{Vec{4,Int8},1}:
 &lt;4 x Int8&gt;[-15, 98, 5, -28]
 &lt;4 x Int8&gt;[47, -112, 98, -14]
 &lt;4 x Int8&gt;[-18, -3, -111, 85]
 &lt;4 x Int8&gt;[79, -12, -44, -85]

julia&gt; x = sort_net(data...)
(&lt;4 x Int8&gt;[-18, -112, -111, -85], &lt;4 x Int8&gt;[-15, -12, -44, -28], &lt;4 x Int8&gt;[47, -3, 5, -14], &lt;4 x Int8&gt;[79, 98, 98, 85])

julia&gt; y = transpose_vecs(x...)
(&lt;4 x Int8&gt;[-18, -15, 47, 79], &lt;4 x Int8&gt;[-112, -12, -3, 98], &lt;4 x Int8&gt;[-111, -44, 5, 98], &lt;4 x Int8&gt;[-85, -28, -14, 85])

julia&gt; z = merge_vecs(y...)
&lt;16 x Int8&gt;[-112, -111, -85, -44, -28, -18, -15, -14, -12, -3, 5, 47, 79, 85, 98, 98]

julia&gt; bigdata = rand(Int32, 2^20);

julia&gt; chipsort_large(bigdata, Val(8), Val(32)) == sort(bigdata)
true
</code></pre>
<p>Make sure you check <a href="https://nlw0.github.io/ChipSort.jl" rel="nofollow">our documentation</a> for more information.</p>
<p>Latest <a href="https://gist.github.com/nlw0/a4180e7d131bf127cd738f5ad2da284c">benchmark</a> results are: 81% speedup on a 1M Int32 array, 2x speedup on 8k Int32 and 4x on 64 values.</p>
</article></div>