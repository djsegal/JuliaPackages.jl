<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="left"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/supremacyfuture/VQC/blob/master/docs/assets/VQC.svg"><img src="https://github.com/supremacyfuture/VQC/raw/master/docs/assets/VQC.svg?sanitize=true" alt="VQC Logo" width="210" style="max-width:100%;"></a>
</div>
<br>
<p><a href="https://travis-ci.org/supremacyfuture/VQC" rel="nofollow"><img src="https://camo.githubusercontent.com/17075a93f74042e3f8cfb718bc47b462369f2ca0/68747470733a2f2f7472617669732d63692e6f72672f73757072656d6163796675747572652f5651432e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/supremacyfuture/VQC.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/supremacyfuture/VQC?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7402bbcbd72f9925d17745918a12db0ebe996137/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73757072656d6163796675747572652f5651432f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/supremacyfuture/VQC/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/supremacyfuture/VQC/issues"><img src="https://camo.githubusercontent.com/de2d5da122934f93aa00c98f38e7445695c859fa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f73757072656d6163796675747572652f565143" alt="GitHub issues" data-canonical-src="https://img.shields.io/github/issues/supremacyfuture/VQC" style="max-width:100%;"></a>
<a href="CONTRIBUTING.md"><img src="https://camo.githubusercontent.com/8f697c48adc5026cc6d83dd45e42b9b93ee1803c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e737667" alt="Contributions welcome" data-canonical-src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg" style="max-width:100%;"></a>
<a href="https://www.gnu.org/licenses/quick-guide-gplv3.pdf" rel="nofollow"><img src="https://camo.githubusercontent.com/875eabafba44fe9261218840df5379a535612b2b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d627269676874677265656e2e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-GPLv3-brightgreen.svg" style="max-width:100%;"></a></p>
<p>Variational Quantum Circuit simulator in Julia, under GPLv3, developed with &lt;3 by <a href="https://supremacyfuture.com" rel="nofollow">Supremacy Future Technologies</a>.</p>
<hr>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction:</h2>
<p>VQC is an open source framework that can simulate variational quantum circuits and used for quantum machine learning tasks.</p>
<ul>
<li>
<p><strong>Simple but powerful.</strong> VQC supports any single-qubit, two-qubit, three-qubit gate operations, as well as measurements. The same quantum circuit can be used as variational quantum circuits almost for free.</p>
</li>
<li>
<p><strong>Everything is differentiable.</strong> Not only the quantum circuit, the quantum state itself is also differentiable, almost without any changing of code. In most of the cases, user can write a very complex expression built on top of the quantum circuit and the quantum state, and the whole expression will be differentiable.</p>
</li>
<li>
<p><strong>Flexiable operations on quantum gates and quantum circuits.</strong> Quantum circuit and quantum gates suport operations such as adjoint, transpose, conjugate, shift to make life easier when building very complex circuits.</p>
</li>
<li>
<p><strong>Zygote as backend for auto differentiation.</strong> VQC use Zygote as backend for auto differentiation.</p>
</li>
</ul>
<h2><a id="user-content-comparisons-between-vqc-and-existing-technologies" class="anchor" aria-hidden="true" href="#comparisons-between-vqc-and-existing-technologies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparisons between VQC and existing technologies:</h2>
<p>Now at <a href="https://github.com/supremacyfuture/VQC">version 0.1.0</a>!</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>VQC is a <a href="https://julialang.org/" rel="nofollow">Julia</a> language package. To install VQC, please <a href="https://docs.julialang.org/en/v1/manual/getting-started/" rel="nofollow">open Julia's interactive session (known as REPL)</a> and type</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>VQC<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example:</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Using functions from VQC</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> VQC

<span class="pl-c"><span class="pl-c">#</span> Create a two qubit quantum state |00&gt;</span>
julia<span class="pl-k">&gt;</span> state <span class="pl-k">=</span> <span class="pl-c1">qstate</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>])
<span class="pl-c1">StateVector</span><span class="pl-c1">{Complex{Float64}}</span>(Complex{Float64}[<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>, <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>, <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>, <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>])

<span class="pl-c"><span class="pl-c">#</span> Create and empty quantum circuit</span>
julia<span class="pl-k">&gt;</span> circuit <span class="pl-k">=</span> <span class="pl-c1">QCircuit</span>()
<span class="pl-c1">QCircuit</span>(VQC<span class="pl-k">.</span>AbstractQuantumOperation[])

<span class="pl-c"><span class="pl-c">#</span> pushing gate operations into the quantum circuit</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(circuit, <span class="pl-c1">HGate</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{VQC<span class="pl-k">.</span>AbstractQuantumOperation,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">OneBodyGate</span><span class="pl-c1">{Array{Float64,2}}</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">0.7071067811865475</span> <span class="pl-c1">0.7071067811865475</span>; <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">-</span><span class="pl-c1">0.7071067811865475</span>])

<span class="pl-c"><span class="pl-c">#</span> pushing measure operation into the quantum circuit</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(circuit, <span class="pl-c1">QMeasure</span>(<span class="pl-c1">1</span>)))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{VQC<span class="pl-k">.</span>AbstractQuantumOperation,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
<span class="pl-c1">OneBodyGate</span><span class="pl-c1">{Array{Float64,2}}</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">0.7071067811865475</span> <span class="pl-c1">0.7071067811865475</span>; <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">-</span><span class="pl-c1">0.7071067811865475</span>])
<span class="pl-c1">QMeasure</span>(<span class="pl-c1">1</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, [<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>]) 

<span class="pl-c"><span class="pl-c">#</span> apply quantum circuit to quantum state</span>
julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">apply!</span>(circuit, state)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Observables<span class="pl-k">:</span>
 (<span class="pl-s"><span class="pl-pds">"</span>Q:Z1<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)                    
 (<span class="pl-s"><span class="pl-pds">"</span>C:Z1-&gt;1<span class="pl-pds">"</span></span>, <span class="pl-c1">0.4999999999999999</span>)

<span class="pl-c"><span class="pl-c">#</span> In "Q:Z1", Q means quantum observable, Z refer to the basis, 1 is the qubit label</span>
<span class="pl-c"><span class="pl-c">#</span> Similarly, in "C:Z1-&gt;1", C means classical observables, 0.4999.. means the probability</span>
<span class="pl-c"><span class="pl-c">#</span> Obtain all the measurement outcomes.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">qvalues</span>(results)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> Obtain all the measurement probabilities</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cvalues</span>(results)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.4999999999999999</span></pre></div>
<h2><a id="user-content-tutorials" class="anchor" aria-hidden="true" href="#tutorials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tutorials</h2>
<ol>
<li><a href="example/variational_quantum_circuit_simulator.ipynb">Tutorial 1: Basic operations</a></li>
</ol>
<h2><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contact</h2>
<p>You are welcome to leave your comment or suggestions as an <a href="https://github.com/supremacyfuture/VQC/issues">issues</a>. For commercial purpose, please email us at support [at] supremacyfuture.com</p>
<h2><a id="user-content-citing-vqc" class="anchor" aria-hidden="true" href="#citing-vqc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing VQC</h2>
<p>Please cite the following paper when using VQC:</p>
<pre><code>@article{liu2019hybrid,
  title={Hybrid Quantum-Classical Convolutional Neural Networks},
  author={Liu, Junhua and Lim, Kwan Hui and Wood, Kristin L and Huang, Wei and Guo, Chu and Huang, He-Liang},
  journal={arXiv preprint arXiv:1911.02998},
  year={2019}
}
</code></pre>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>VQC is published under <a href="https://github.com/supremacyfuture/VQC/LICENSE">GPLv3</a></p>
<p>Copyright (C) 2019 <a href="https://supremacyfuture.com" rel="nofollow">Supremacy Future Technologies</a></p>
<p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.</p>
<p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License along with this program.  If not, see <a href="https://www.gnu.org/licenses/gpl-3.0.html" rel="nofollow">here</a>.</p>
</article></div>