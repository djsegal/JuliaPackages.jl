<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-espresso" class="anchor" aria-hidden="true" href="#espresso"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Espresso</h1>
<p><a href="https://travis-ci.org/dfdx/Espresso.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/63171179a4e082af7d3f3ca8061d16fde59bfec99164ebc2e68d4ad21caeeb7d/68747470733a2f2f7472617669732d63692e6f72672f646664782f457370726573736f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dfdx/Espresso.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Expression transformation package.</p>
<h2><a id="user-content-symbolic-manipulation" class="anchor" aria-hidden="true" href="#symbolic-manipulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Symbolic manipulation</h2>
<p>Espresso provides functions for finding, matching, substituting and rewriting Julia AST. A few examples:</p>
<p>Match power expression and extract its first argument</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pat = :(_x ^ 2)  # anything starting with `_` is a placeholder, placeholder matches everything
ex = :(A ^ 2)
matchex(pat, ex)
# ==&gt; Dict{Symbol,Any} with 1 entry:
# ==&gt;   :_x =&gt; :A    -- placeholder _x captured symbol :A
"><pre>pat <span class="pl-k">=</span> :(_x <span class="pl-k">^</span> <span class="pl-c1">2</span>)  <span class="pl-c"><span class="pl-c">#</span> anything starting with `_` is a placeholder, placeholder matches everything</span>
ex <span class="pl-k">=</span> :(A <span class="pl-k">^</span> <span class="pl-c1">2</span>)
<span class="pl-c1">matchex</span>(pat, ex)
<span class="pl-c"><span class="pl-c">#</span> ==&gt; Dict{Symbol,Any} with 1 entry:</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   :_x =&gt; :A    -- placeholder _x captured symbol :A</span></pre></div>
<p>Find all function calls with any number of arguments:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pat = :(_f(_a...))    # `_a...` will match 0 or more arguments
ex = quote
    x = foo(3, 5)
    y = bar(x)
    z = baz(y)
end

findex(pat, ex)
# ==&gt; 3-element Array{Any,1}:
# ==&gt;  :(foo(3, 5))
# ==&gt; :(bar(x))   
# ==&gt;  :(baz(y)) 
"><pre>pat <span class="pl-k">=</span> :(<span class="pl-c1">_f</span>(_a<span class="pl-k">...</span>))    <span class="pl-c"><span class="pl-c">#</span> `_a...` will match 0 or more arguments</span>
ex <span class="pl-k">=</span> <span class="pl-k">quote</span>
    x <span class="pl-k">=</span> <span class="pl-c1">foo</span>(<span class="pl-c1">3</span>, <span class="pl-c1">5</span>)
    y <span class="pl-k">=</span> <span class="pl-c1">bar</span>(x)
    z <span class="pl-k">=</span> <span class="pl-c1">baz</span>(y)
<span class="pl-k">end</span>

<span class="pl-c1">findex</span>(pat, ex)
<span class="pl-c"><span class="pl-c">#</span> ==&gt; 3-element Array{Any,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;  :(foo(3, 5))</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt; :(bar(x))   </span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;  :(baz(y)) </span></pre></div>
<p>Substitute symbol <code>y</code> with <code>quux(x)</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ex = :(z = 2x + y)
subs(ex, Dict(:y =&gt; :(quux(x))))
# ==&gt; :(z = 2x + quux(x))
"><pre>ex <span class="pl-k">=</span> :(z <span class="pl-k">=</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> y)
<span class="pl-c1">subs</span>(ex, <span class="pl-c1">Dict</span>(<span class="pl-c1">:y</span> <span class="pl-k">=&gt;</span> :(<span class="pl-c1">quux</span>(x))))
<span class="pl-c"><span class="pl-c">#</span> ==&gt; :(z = 2x + quux(x))</span></pre></div>
<p>Rewrite all function calls with corresponding broadcasting:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ex = :(z = foo(x) + bar(y))     # take this expression
pat = :(_f(_a...))              # match recursively to this pattern
rpat = :(_f.(_a...))             # and rewrite to this pattern
rewrite_all(ex, pat, rpat)
# ==&gt; :(z = (+).(foo.(x), bar.(y)))
"><pre>ex <span class="pl-k">=</span> :(z <span class="pl-k">=</span> <span class="pl-c1">foo</span>(x) <span class="pl-k">+</span> <span class="pl-c1">bar</span>(y))     <span class="pl-c"><span class="pl-c">#</span> take this expression</span>
pat <span class="pl-k">=</span> :(<span class="pl-c1">_f</span>(_a<span class="pl-k">...</span>))              <span class="pl-c"><span class="pl-c">#</span> match recursively to this pattern</span>
rpat <span class="pl-k">=</span> :(<span class="pl-c1">_f</span>.(_a<span class="pl-k">...</span>))             <span class="pl-c"><span class="pl-c">#</span> and rewrite to this pattern</span>
<span class="pl-c1">rewrite_all</span>(ex, pat, rpat)
<span class="pl-c"><span class="pl-c">#</span> ==&gt; :(z = (+).(foo.(x), bar.(y)))</span></pre></div>
<p>See <a href="https://github.com/dfdx/Espresso.jl/blob/master/src/rewrite.jl">rewrite.jl</a> for more expression transformation functions and their parameters.</p>
<h2><a id="user-content-expression-graph" class="anchor" aria-hidden="true" href="#expression-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expression graph</h2>
<p>Sometimes we need more sophisticated transformations including those depending on argument types. Espresso can parse expressions into a graph of basic calls and assignments using <code>ExGraph</code> type, e.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ex = :(z = x ^ 2 * (y + x ^ 2))
g = ExGraph(ex; x=3.0, y=2.0);     # `x` and `y` are example values from which ExGraphs learns types of these vars
evaluate!(g)                       # evaluate all expressions to fill values of intermediate nodes
g
# ==&gt; ExGraph
# ==&gt;   ExNode{input}(x = x | 3.0)
# ==&gt;   ExNode{input}(y = y | 2.0)
# ==&gt;   ExNode{constant}(tmp390 = 2 | 2)
# ==&gt;   ExNode{call}(tmp391 = x ^ tmp390 | 9.0)
# ==&gt;   ExNode{constant}(tmp392 = 2 | 2)
# ==&gt;   ExNode{call}(tmp393 = x ^ tmp392 | 9.0)
# ==&gt;   ExNode{call}(tmp394 = y + tmp393 | 11.0)
# ==&gt;   ExNode{call}(z = tmp391 * tmp394 | 99.0)
"><pre>ex <span class="pl-k">=</span> :(z <span class="pl-k">=</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> (y <span class="pl-k">+</span> x <span class="pl-k">^</span> <span class="pl-c1">2</span>))
g <span class="pl-k">=</span> <span class="pl-c1">ExGraph</span>(ex; x<span class="pl-k">=</span><span class="pl-c1">3.0</span>, y<span class="pl-k">=</span><span class="pl-c1">2.0</span>);     <span class="pl-c"><span class="pl-c">#</span> `x` and `y` are example values from which ExGraphs learns types of these vars</span>
<span class="pl-c1">evaluate!</span>(g)                       <span class="pl-c"><span class="pl-c">#</span> evaluate all expressions to fill values of intermediate nodes</span>
g
<span class="pl-c"><span class="pl-c">#</span> ==&gt; ExGraph</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{input}(x = x | 3.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{input}(y = y | 2.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{constant}(tmp390 = 2 | 2)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(tmp391 = x ^ tmp390 | 9.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{constant}(tmp392 = 2 | 2)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(tmp393 = x ^ tmp392 | 9.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(tmp394 = y + tmp393 | 11.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(z = tmp391 * tmp394 | 99.0)</span></pre></div>
<p>Such representation, although somewhat cryptic, is more flexible. For example, using it we can easily get rid of common subexpressions (<code>x ^ 2</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="g2 = eliminate_common(g)
# ==&gt; ExGraph
# ==&gt;   ExNode{input}(x = x | 3.0)
# ==&gt;   ExNode{input}(y = y | 2.0)
# ==&gt;   ExNode{constant}(tmp390 = 2 | 2)
# ==&gt;   ExNode{call}(tmp391 = x ^ tmp390 | 9.0)
# ==&gt;   ExNode{call}(tmp394 = y + tmp391 | 11.0)
# ==&gt;   ExNode{call}(z = tmp391 * tmp394 | 99.0)
"><pre>g2 <span class="pl-k">=</span> <span class="pl-c1">eliminate_common</span>(g)
<span class="pl-c"><span class="pl-c">#</span> ==&gt; ExGraph</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{input}(x = x | 3.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{input}(y = y | 2.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{constant}(tmp390 = 2 | 2)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(tmp391 = x ^ tmp390 | 9.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(tmp394 = y + tmp391 | 11.0)</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;   ExNode{call}(z = tmp391 * tmp394 | 99.0)</span></pre></div>
<p><code>to_expr</code> and <code>to_expr_kw</code> construct a Julia expression back from <code>ExGraph</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="to_expr_kw(g2)
# ==&gt; quote    
# ==&gt;     tmp390 = 2
# ==&gt;     tmp391 = x ^ tmp390
# ==&gt;     tmp394 = y + tmp391
# ==&gt;     z = tmp391 * tmp394
# ==&gt; end
"><pre><span class="pl-c1">to_expr_kw</span>(g2)
<span class="pl-c"><span class="pl-c">#</span> ==&gt; quote    </span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;     tmp390 = 2</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;     tmp391 = x ^ tmp390</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;     tmp394 = y + tmp391</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt;     z = tmp391 * tmp394</span>
<span class="pl-c"><span class="pl-c">#</span> ==&gt; end</span></pre></div>
<h2><a id="user-content-somewhat-outdated-documentation" class="anchor" aria-hidden="true" href="#somewhat-outdated-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>(Somewhat outdated) documentation</h2>
<p><a href="https://dfdx.github.io/Espresso.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://dfdx.github.io/Espresso.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
</article></div>