<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-periodicschurdecompositions" class="anchor" aria-hidden="true" href="#periodicschurdecompositions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PeriodicSchurDecompositions</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a></p>

<p dir="auto"><a href="https://github.com/RalphAS/PeriodicSchurDecompositions.jl/actions"><img src="https://github.com/RalphAS/PeriodicSchurDecompositions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/RalphAS/PeriodicSchurDecompositions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ce7fac21f1594ffe2504507967a32abff6469369e9b5497cba22c9e04af9a27/68747470733a2f2f636f6465636f762e696f2f67682f52616c706841532f506572696f64696353636875724465636f6d706f736974696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/RalphAS/PeriodicSchurDecompositions.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://RalphAS.github.io/PeriodicSchurDecompositions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-periodic-schur-decomposition" class="anchor" aria-hidden="true" href="#periodic-schur-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Periodic Schur decomposition</h2>
<p dir="auto">Given a series of <code>NxN</code> matrices <code>A[j]</code>, <code>j=1...p</code>, a periodic Schur decomposition (PSD)
is a factorization of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Q[1]'*A[1]*Q[2] = T[1]
Q[2]'*A[2]*Q[3] = T[2]
...
Q[p]'*A[p]*Q[1] = T[p]"><pre>Q[<span class="pl-c1">1</span>]<span class="pl-k">'</span><span class="pl-k">*</span>A[<span class="pl-c1">1</span>]<span class="pl-k">*</span>Q[<span class="pl-c1">2</span>] <span class="pl-k">=</span> T[<span class="pl-c1">1</span>]
Q[<span class="pl-c1">2</span>]<span class="pl-k">'</span><span class="pl-k">*</span>A[<span class="pl-c1">2</span>]<span class="pl-k">*</span>Q[<span class="pl-c1">3</span>] <span class="pl-k">=</span> T[<span class="pl-c1">2</span>]
<span class="pl-k">...</span>
Q[p]<span class="pl-k">'</span><span class="pl-k">*</span>A[p]<span class="pl-k">*</span>Q[<span class="pl-c1">1</span>] <span class="pl-k">=</span> T[p]</pre></div>
<p dir="auto">where the <code>Q[j]</code> are unitary (orthogonal) and the <code>T[j]</code> are upper triangular,
except that one of the <code>T[j]</code> is quasi-triangular for real element types.
It furnishes the eigenvalues and invariant subspaces of the matrix product
<code>prod(A)</code>.</p>
<p dir="auto">The principal reason for using the PSD is that accuracy may be lost if one
forms the product of the <code>A_j</code> before eigen-analysis. For some applications the
intermediate Schur vectors are also useful.</p>
<p dir="auto">This package provides a straightforward PSD for real and complex element types.</p>
<p dir="auto">The basic API is as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = period_of_your_problem()
Aarg = [your_matrix(j) for j in 1:p]
pS = pschur!(Aarg, :R)
your_eigvals = pS.values"><pre>p <span class="pl-k">=</span> <span class="pl-c1">period_of_your_problem</span>()
Aarg <span class="pl-k">=</span> [<span class="pl-c1">your_matrix</span>(j) <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>p]
pS <span class="pl-k">=</span> <span class="pl-c1">pschur!</span>(Aarg, <span class="pl-c1">:R</span>)
your_eigvals <span class="pl-k">=</span> pS<span class="pl-k">.</span>values</pre></div>
<p dir="auto">The result <code>pS</code> is a <code>PeriodicSchur</code> object. Computation of the Schur vectors is
fairly expensive, so it is an option set by keyword argument;
see the <code>pschur!</code> docstring for further details.</p>
<h3 dir="auto"><a id="user-content-operator-ordering" class="anchor" aria-hidden="true" href="#operator-ordering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operator ordering</h3>
<p dir="auto">The <code>:R</code> argument above indicates that the product represented by <code>pS</code> is <code>prod(Aarg)</code>
i.e., counting rightwards. In many applications it is more convenient to number
the matrices leftwards (<code>A[p]*...*A[2]*A[1]</code>); this interpretation is available
with an orientation argument <code>:L</code>.</p>
<h2 dir="auto"><a id="user-content-generalized-periodic-schur-decomposition" class="anchor" aria-hidden="true" href="#generalized-periodic-schur-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generalized Periodic Schur decomposition</h2>
<p dir="auto">Given a series of <code>NxN</code> matrices <code>A[j]</code>, <code>j=1...p</code>, and a signature vector
<code>S</code> where <code>S[j]</code> is <code>1</code> or <code>-1</code>, a generalized periodic Schur decomposition (GPSD)
is a factorization of the formal product <code>A[1]^(S[1]*A[2]^(S[2]*...*A[p]^(S[p])</code>:
<code>Q[j]' * A[j] * Q[j+1] = T[j]</code> if <code>S[j] == 1</code> and
<code>Q[j+1]' * A[j] * Q[j] = T[j]</code> if <code>S[j] == -1</code>.</p>
<p dir="auto">The GPSD is an extension of the QZ decomposition used for generalized eigenvalue
problems.</p>
<p dir="auto">This package provides a GPSD for real and complex element types. The PSD is obviously
a special case of the GPSD, but the implementations are separate for real eltypes.</p>
<p dir="auto">The basic API is as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = period_of_your_problem()
Aarg = [your_complex_matrix(j) for j in 1:p]
signs = [sign_for_your_problem(j) for j in 1:p]
S = [x &gt; 0 for x in signs] # boolean vector
gpS = pschur!(Aarg, S, :R)
your_eigvals = gpS.values"><pre>p <span class="pl-k">=</span> <span class="pl-c1">period_of_your_problem</span>()
Aarg <span class="pl-k">=</span> [<span class="pl-c1">your_complex_matrix</span>(j) <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>p]
signs <span class="pl-k">=</span> [<span class="pl-c1">sign_for_your_problem</span>(j) <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>p]
S <span class="pl-k">=</span> [x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> signs] <span class="pl-c"><span class="pl-c">#</span> boolean vector</span>
gpS <span class="pl-k">=</span> <span class="pl-c1">pschur!</span>(Aarg, S, <span class="pl-c1">:R</span>)
your_eigvals <span class="pl-k">=</span> gpS<span class="pl-k">.</span>values</pre></div>
<p dir="auto">The result <code>gpS</code> is a <code>GeneralizedPeriodicSchur</code> object
(see the docstring for further details; note that eigenvalues are stored in a
decomposed form in this case).</p>
<h2 dir="auto"><a id="user-content-reordering-eigenvalues" class="anchor" aria-hidden="true" href="#reordering-eigenvalues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reordering eigenvalues</h2>
<p dir="auto">Selected eigenvalues and their associated subspace can be moved to the top of
a periodic Schur decomposition with <code>ordschur!</code> methods.</p>
<p dir="auto">Reordering is available for both standard and generalized decompositions.</p>
<h2 dir="auto"><a id="user-content-large-problems-periodic-krylov-schur" class="anchor" aria-hidden="true" href="#large-problems-periodic-krylov-schur"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Large problems: periodic Krylov-Schur</h2>
<p dir="auto">If only a few exterior eigenvalues (and corresponding Schur vectors) of a standard
periodic system are needed, it may be
more efficient to use the Krylov-Schur algorithm implemented as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    pps, hist = partial_pschur(Avec, nev, which; kw...)"><pre>    pps, hist <span class="pl-k">=</span> <span class="pl-c1">partial_pschur</span>(Avec, nev, which; kw<span class="pl-k">...</span>)</pre></div>
<p dir="auto">where <code>Avec</code> is a vector of either matrices or linear maps.
The result is a <code>PartialPeriodicSchur</code> object <code>pps</code>, with a summary <code>hist</code> of the iteration.
<code>pps</code> usually includes the <code>nev</code> eigenvalues near the edge of the convex hull of the
spectrum specified by <code>which</code>.
The interface is derived from the <code>ArnoldiMethod</code> package,
q.v. for additional details.</p>
<p dir="auto">Note: <code>partial_pschur</code> is currently <strong>only implemented for the leftwards orientation</strong>.</p>
<h2 dir="auto"><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Status</h2>
<p dir="auto">This is a new package (2022) implementing complicated algorithms, so caveat emptor.
Although tests to date indicate that the package is largely correct, there may be
surprises; if you find any please file issues.</p>
<p dir="auto">Little effort has gone into optimization so far, and the package takes a while to compile.</p>
<p dir="auto">The API in v0.1 should be considered tentative; constructive suggestions for changes are
welcome.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">A. Bojanczyk, G. Golub, and P. Van Dooren, "The periodic Schur decomposition.
Algorithms and applications," Proc. SPIE 1996.</p>
<p dir="auto">D. Kressner, thesis and assorted articles.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">Many functions in this package are translations of implementations in <a href="https://github.com/SLICOT/SLICOT-Reference.git">the SLICOT library</a>.</p>
<p dir="auto">Special thanks to Dr. A. Varga for making SLICOT available with a liberal license.</p>
<p dir="auto">A few types and methods have been adapted from A. Noack's GenericLinearAlgebra package.</p>
</article></div>