<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-setupiteratorjl" class="anchor" aria-hidden="true" href="#setupiteratorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SetupIterator.jl</h1>
<p dir="auto">Sometimes, you have a data structure where <code>iterate</code> is complicated to express for that structure,
but <code>Base.Iterators</code> has already gone through the trouble of making an appropriate iterator for you.</p>
<p dir="auto">For example, consider</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct VectorOfVectors{T}
   v::Vector{Vector{T}}
end
Base.IteratorEltype(::VectorOfVectors{T}) where {T} = T
Base.IteratorSize(::VectorOfVectors) = Base.HasLength()
Base.length(vov::VectorOfVectors) = isempty(vov.v) ? 0 : sum(length, vov.v)"><pre><span class="pl-k">struct</span> VectorOfVectors{T}
   v<span class="pl-k">::</span><span class="pl-c1">Vector{Vector{T}}</span>
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-en">IteratorEltype</span>(<span class="pl-k">::</span><span class="pl-c1">VectorOfVectors{T}</span>) <span class="pl-k">where</span> {T} <span class="pl-k">=</span> T
Base<span class="pl-k">.</span><span class="pl-en">IteratorSize</span>(<span class="pl-k">::</span><span class="pl-c1">VectorOfVectors</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">HasLength</span>()
Base<span class="pl-k">.</span><span class="pl-en">length</span>(vov<span class="pl-k">::</span><span class="pl-c1">VectorOfVectors</span>) <span class="pl-k">=</span> <span class="pl-c1">isempty</span>(vov<span class="pl-k">.</span>v) <span class="pl-k">?</span> <span class="pl-c1">0</span> <span class="pl-k">:</span> <span class="pl-c1">sum</span>(length, vov<span class="pl-k">.</span>v)</pre></div>
<p dir="auto">and supose we want to treat this thing semantically like a flat vector, i.e. concatenate their contents. Writing
a method for <code>Base.iterate</code> on this type is actually somewhat difficult, since you'll need to juggle the state
of all the constituent vectors and check which sub-vector the current iteration state corresponds to.</p>
<p dir="auto">Wouldn't it be great if we could just do something akin to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# This is a wish, not something that actually works
Base.iterator(vov::VectorOfVectors) = Iterators.flatten(vov.v) "><pre><span class="pl-c"><span class="pl-c">#</span> This is a wish, not something that actually works</span>
Base<span class="pl-k">.</span><span class="pl-en">iterator</span>(vov<span class="pl-k">::</span><span class="pl-c1">VectorOfVectors</span>) <span class="pl-k">=</span> Iterators<span class="pl-k">.</span><span class="pl-c1">flatten</span>(vov<span class="pl-k">.</span>v) </pre></div>
<p dir="auto">and be done with it?</p>
<p dir="auto">Enter SetupIterator.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SetupIterator
SetupIterator.iterator(vov::VectorOfVectors) = Iterators.flatten(vov.v)
@setup_iterate VectorOfVectors"><pre><span class="pl-k">using</span> SetupIterator
SetupIterator<span class="pl-k">.</span><span class="pl-en">iterator</span>(vov<span class="pl-k">::</span><span class="pl-c1">VectorOfVectors</span>) <span class="pl-k">=</span> Iterators<span class="pl-k">.</span><span class="pl-c1">flatten</span>(vov<span class="pl-k">.</span>v)
<span class="pl-c1">@setup_iterate</span> VectorOfVectors</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; let vov = VectorOfVectors([[1, 2, 3], [4, 5]])
           for x ∈ vov
               @show x
           end
       end
x = 1
x = 2
x = 3
x = 4
x = 5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> vov <span class="pl-k">=</span> <span class="pl-c1">VectorOfVectors</span>([[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>]])
           <span class="pl-k">for</span> x <span class="pl-k">∈</span> vov
               <span class="pl-c1">@show</span> x
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
x <span class="pl-k">=</span> <span class="pl-c1">1</span>
x <span class="pl-k">=</span> <span class="pl-c1">2</span>
x <span class="pl-k">=</span> <span class="pl-c1">3</span>
x <span class="pl-k">=</span> <span class="pl-c1">4</span>
x <span class="pl-k">=</span> <span class="pl-c1">5</span></pre></div>
<p dir="auto">Normally, when you write</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for x ∈ xs
    #do stuff
end"><pre><span class="pl-k">for</span> x <span class="pl-k">∈</span> xs
    <span class="pl-c"><span class="pl-c">#</span>do stuff</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">this gets lowered to the code</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="next = iterate(xs)
while next !== nothing
  x, state = next
  #do stuff
  next = iterate(xs, state)
end"><pre>next <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(xs)
<span class="pl-k">while</span> next <span class="pl-k">!==</span> <span class="pl-c1">nothing</span>
  x, state <span class="pl-k">=</span> next
  <span class="pl-c"><span class="pl-c">#</span>do stuff</span>
  next <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(xs, state)
<span class="pl-k">end</span></pre></div>
<p dir="auto">but when we use <code>SetupIterator.jl</code>, it becomes more equivalent to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="itr = SetupIterator.iterator(xs)
next = iterate(itr)
while next !== nothing
  x, state = next
  #do stuff
  next = iterate(itr, state)
end"><pre>itr <span class="pl-k">=</span> SetupIterator<span class="pl-k">.</span><span class="pl-c1">iterator</span>(xs)
next <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(itr)
<span class="pl-k">while</span> next <span class="pl-k">!==</span> <span class="pl-c1">nothing</span>
  x, state <span class="pl-k">=</span> next
  <span class="pl-c"><span class="pl-c">#</span>do stuff</span>
  next <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(itr, state)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This way, there are no remaining references to <code>xs</code> inside the loop, and if we wish to implement something
like a destructive iterator to reclaim memory from <code>xs</code> while the loop runs, then that is now possible.</p>
<hr>
<p dir="auto">Inspiration for this comes from <a href="https://mikeinnes.io/2020/06/04/iterate" rel="nofollow">Iterate on it</a> by Mike Innes, and from <a href="https://github.com/JuliaLang/julia/issues/46802" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/46802/hovercard">this issue</a></p>
<p dir="auto">Credit to Jameson Nash for pointing out that this can be done <a href="https://github.com/JuliaLang/julia/issues/46802#issuecomment-1249707763" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/46802/hovercard">in this issue</a>.</p>
</article></div>