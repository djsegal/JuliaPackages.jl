<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.org/baggepinnen/ThreadTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47b57d0be2532e6a3f39bf969381151a8106579530f61d496386f5a8494d718e/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f546872656164546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/ThreadTools.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/ThreadTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be2b7700dc0cc1791998d384f2d8a0b305736bb97fc075109d58676edc724998/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f546872656164546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/ThreadTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-threadtools" class="anchor" aria-hidden="true" href="#threadtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreadTools</h1>
<p dir="auto">This package implements some utilities for using threads in Julia v1.3+</p>
<p dir="auto">The utilities provided are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@spawnatmost n for i in ..."><pre><span class="pl-c1">@spawnatmost</span> n <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-k">...</span></pre></div>
<p dir="auto">Spawn at most <code>n</code> threads to carry out for-loop</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tmap(f, args...)
tmap(f, nthreads::Int, args...)
tmap1(f, args...)
tmap1(f, nthreads::Int,args...)"><pre><span class="pl-c1">tmap</span>(f, args<span class="pl-k">...</span>)
<span class="pl-c1">tmap</span>(f, nthreads<span class="pl-k">::</span><span class="pl-c1">Int</span>, args<span class="pl-k">...</span>)
<span class="pl-c1">tmap1</span>(f, args<span class="pl-k">...</span>)
<span class="pl-c1">tmap1</span>(f, nthreads<span class="pl-k">::</span><span class="pl-c1">Int</span>,args<span class="pl-k">...</span>)</pre></div>
<p dir="auto">Threaded map. The optional argument <code>nthreads</code> limits the number of threads used in parallel.
<code>tmap1</code> is the same as <code>tmap</code>, but falls back to a regular <code>map</code> if julia only has access to one thread.</p>
<p dir="auto">The tools to limit the number of threads used are useful when doing, e.g., threaded IO, where the disk might get overloaded if you try to access it from too many threads at the same time.</p>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ThreadTools

julia&gt; l = SpinLock();
julia&gt; times = [];
julia&gt; @spawnatmost 3 for i = 1:10 # This will use only three parallel threads, even if more are avilable
            lock(l) do # We protect the access to the array using a lock
                push!(times, time())
            end
            println(i)
            sleep(1)
       end

julia&gt; round.(diff(times), digits=2)
9-element Array{Float64,1}:
    0.0
    0.0
    1.0
    0.0
    0.0
    1.0
    0.0
    0.0
    1.0

julia&gt; tmap(_-&gt;threadid(), 1:5) # A threaded version of map
5-element Array{Int64,1}:
 2
 6
 3
 4
 5

 julia&gt; times = tmap(_-&gt;(t=time();sleep(0.3);t), 3, 1:10); # The second argument limits the number of threads used
 julia&gt; round.(diff(times), digits=2)
 9-element Array{Float64,1}:
  0.0
  0.0
  0.3
  0.0
  0.0
  0.3
  0.0
  0.0
  0.3"><pre><span class="pl-k">using</span> ThreadTools

julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> <span class="pl-c1">SpinLock</span>();
julia<span class="pl-k">&gt;</span> times <span class="pl-k">=</span> [];
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@spawnatmost</span> <span class="pl-c1">3</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> This will use only three parallel threads, even if more are avilable</span>
            <span class="pl-c1">lock</span>(l) <span class="pl-k">do</span> <span class="pl-c"><span class="pl-c">#</span> We protect the access to the array using a lock</span>
                <span class="pl-c1">push!</span>(times, <span class="pl-c1">time</span>())
            <span class="pl-k">end</span>
            <span class="pl-c1">println</span>(i)
            <span class="pl-c1">sleep</span>(<span class="pl-c1">1</span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">round</span>.(<span class="pl-c1">diff</span>(times), digits<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-c1">0.0</span>
    <span class="pl-c1">0.0</span>
    <span class="pl-c1">1.0</span>
    <span class="pl-c1">0.0</span>
    <span class="pl-c1">0.0</span>
    <span class="pl-c1">1.0</span>
    <span class="pl-c1">0.0</span>
    <span class="pl-c1">0.0</span>
    <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tmap</span>(_<span class="pl-k">-&gt;</span><span class="pl-c1">threadid</span>(), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> A threaded version of map</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>

 julia<span class="pl-k">&gt;</span> times <span class="pl-k">=</span> <span class="pl-c1">tmap</span>(_<span class="pl-k">-&gt;</span>(t<span class="pl-k">=</span><span class="pl-c1">time</span>();<span class="pl-c1">sleep</span>(<span class="pl-c1">0.3</span>);t), <span class="pl-c1">3</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>); <span class="pl-c"><span class="pl-c">#</span> The second argument limits the number of threads used</span>
 julia<span class="pl-k">&gt;</span> <span class="pl-c1">round</span>.(<span class="pl-c1">diff</span>(times), digits<span class="pl-k">=</span><span class="pl-c1">2</span>)
 <span class="pl-c1">9</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.3</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.3</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.3</span></pre></div>
<h1 dir="auto"><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark</h1>
<p dir="auto">All benchmarks are done on a machine with 6 physical cores. The following function will be used for benchmarking</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function fib(n)
    if n &lt;= 1 return 1 end
    return fib(n - 1) + fib(n - 2)
end"><pre><span class="pl-k">function</span> <span class="pl-en">fib</span>(n)
    <span class="pl-k">if</span> n <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span> <span class="pl-k">return</span> <span class="pl-c1">1</span> <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">fib</span>(n <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">fib</span>(n <span class="pl-k">-</span> <span class="pl-c1">2</span>)
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-light-workload" class="anchor" aria-hidden="true" href="#light-workload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Light workload</h2>
<p dir="auto"><code>fib(20)</code> 720 times</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="workload = fill(20, factorial(6))
times = map(1:6) do nt
    nt == 1 &amp;&amp; return @belapsed map(fib, workload)
    @belapsed tmap(fib, $nt, workload)
end
t720 = @belapsed tmap(fib, workload)
plot(1:6, times, xlabel=&quot;Number of threads&quot;, ylabel=&quot;Time [s]&quot;)
hline!([t720], label=&quot;720 tasks&quot;, ylims=(0,Inf))
"><pre>workload <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">20</span>, <span class="pl-c1">factorial</span>(<span class="pl-c1">6</span>))
times <span class="pl-k">=</span> <span class="pl-c1">map</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>) <span class="pl-k">do</span> nt
    nt <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">map</span>(fib, workload)
    <span class="pl-c1">@belapsed</span> <span class="pl-c1">tmap</span>(fib, <span class="pl-k">$</span>nt, workload)
<span class="pl-k">end</span>
t720 <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">tmap</span>(fib, workload)
<span class="pl-c1">plot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>, times, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Number of threads<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time [s]<span class="pl-pds">"</span></span>)
<span class="pl-c1">hline!</span>([t720], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>720 tasks<span class="pl-pds">"</span></span>, ylims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">Inf</span>))
</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/light.svg"><img src="figs/light.svg" alt="window" style="max-width: 100%;"></a></p>
<p dir="auto">Conclusion: for light loads, the overhead is large. You may want to consider <a href="https://github.com/mohamed82008/KissThreading.jl">KissThreading.jl</a> for a more advanced approach.</p>
<h2 dir="auto"><a id="user-content-heavy-workload" class="anchor" aria-hidden="true" href="#heavy-workload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Heavy workload</h2>
<p dir="auto"><code>fib(30)</code> 720 times</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="workload = fill(30, factorial(6))
times = map(1:6) do nt
    nt == 1 &amp;&amp; return @belapsed map(fib, workload)
    @belapsed tmap(fib, $nt, workload)
end
t720 = @belapsed tmap(fib, workload)
plot(1:6, times, xlabel=&quot;Number of threads&quot;, ylabel=&quot;Time [s]&quot;)
hline!([t720], label=&quot;720 tasks&quot;, ylims=(0,Inf))
"><pre>workload <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">30</span>, <span class="pl-c1">factorial</span>(<span class="pl-c1">6</span>))
times <span class="pl-k">=</span> <span class="pl-c1">map</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>) <span class="pl-k">do</span> nt
    nt <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">map</span>(fib, workload)
    <span class="pl-c1">@belapsed</span> <span class="pl-c1">tmap</span>(fib, <span class="pl-k">$</span>nt, workload)
<span class="pl-k">end</span>
t720 <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">tmap</span>(fib, workload)
<span class="pl-c1">plot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>, times, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Number of threads<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time [s]<span class="pl-pds">"</span></span>)
<span class="pl-c1">hline!</span>([t720], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>720 tasks<span class="pl-pds">"</span></span>, ylims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">Inf</span>))
</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/heavy.svg"><img src="figs/heavy.svg" alt="window" style="max-width: 100%;"></a></p>
<p dir="auto">Conclusion: <code>tmap</code> is effective when the computational load is heavy.</p>
</article></div>