<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-arbdecimalsjl" class="anchor" aria-hidden="true" href="#arbdecimalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArbDecimals.jl</h2>
<p>===========</p>
<h4><a id="user-content-reliable-and-performant-extended-precision-floating-point-math" class="anchor" aria-hidden="true" href="#reliable-and-performant-extended-precision-floating-point-math"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>reliable and performant extended precision floating point math</h4>
<p>Copyright Â© 2016 by Jeffrey Sarnoff.  Released under the MIT License on 15-Sep-2016.</p>
<p>===========</p>
<h3><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h3>
<p>ArbDecimals exports a floating point type realized for the decimal digit resolutions named:<br>
Dec25, Dec50, Dec75, Dec100, Dec150, Dec200, Dec250, Dec300, Dec350, Dec400, Dec450, Dec500.</p>
<p>Most of Julia's arithmetic and elementary functions work. These functions are exported too:<br>
pow, root, sincos, sinhcosh, rgamma, polylog, agm.</p>
<p>All math is performed at twice the nominal precision.  This is managed internally, and
the user only need know that there is very strong numerical backstopping in support of
delivering highly reliable results with desireable performance.</p>
<p>Results for most scalar and vector computations are quite reliable.<br>
With matrices, det, chol, lu work well; eigenvals and svdvals need interval algorithms to work.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>ArbDecimals depends on ArbFloats, which needs Nemo.  It is best to add these packages one at a time:</p>
<pre><code>Pkg.add("Nemo")   # expect much compilation
using Nemo
quit()

Pkg.add("ArbFloats")
using ArbFloats
quit()

Pkg.add("ArbDecimals")
using ArbDecimals
quit()
</code></pre>
<p>===========</p>
<h3><a id="user-content-overview-1" class="anchor" aria-hidden="true" href="#overview-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h3>
<p>ArbDecimals exports a floating point type realized for the decimal digit resolutions named:<br>
Dec25, Dec50, Dec75, Dec100, Dec150, Dec200, Dec250, Dec300, Dec350, Dec400, Dec450, Dec500.</p>
<p>Most of Julia's arithmetic and elementary functions work. These functions are exported too:<br>
pow, root, sincos, sinhcosh, rgamma, polylog, agm.</p>
<p>All math is performed at twice the nominal precision.  This is managed internally, and
the user only need know that there is very strong numerical backstopping in support of
delivering highly reliable results with desireable performance.</p>
<p>Results for most scalar and vector computations are quite reliable.<br>
With matrices, det, chol, lu work well; eigenvals and svdvals need interval algorithms to work.</p>
<h3><a id="user-content-installation-1" class="anchor" aria-hidden="true" href="#installation-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>ArbDecimals depends on ArbFloats, which needs Nemo.  It is best to add these packages one at a time:</p>
<pre><code>Pkg.add("Nemo")   # expect much compilation
using Nemo
quit()

Pkg.add("ArbFloats")
using ArbFloats
quit()

#Pkg.add("ArbDecimals")
Pkg.clone("https://github.com/JuliaArbTypes/ArbDecimals.jl")
using ArbDecimals
quit()
</code></pre>
</article></div>