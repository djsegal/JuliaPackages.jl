<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h3><a id="user-content-note-this-repo-is-mostly-abandoned-it-is-not-complete-or-usable-in-any-way-see-httpsgithubcomjuliacomputingunumsjl" class="anchor" aria-hidden="true" href="#note-this-repo-is-mostly-abandoned-it-is-not-complete-or-usable-in-any-way-see-httpsgithubcomjuliacomputingunumsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Note: this repo is mostly abandoned. It is not complete or usable in any way. See: <a href="https://github.com/JuliaComputing/Unums.jl">https://github.com/JuliaComputing/Unums.jl</a></h3>
<h1><a id="user-content-unums" class="anchor" aria-hidden="true" href="#unums"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unums</h1>
<p><a href="https://travis-ci.org/tbreloff/Unums.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1f5e6b0435c8ddfdb5065501b6c27afa3296e41b/68747470733a2f2f7472617669732d63692e6f72672f746272656c6f66662f556e756d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tbreloff/Unums.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h3><a id="user-content-experimental-use-at-your-own-risk" class="anchor" aria-hidden="true" href="#experimental-use-at-your-own-risk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Experimental! Use at your own risk!</h3>
<p>This is the basic representation of an unum (universal number) as described in detail in
John L Gustafson's book 'The End of Error: Unum Computing':</p>
<p><code>| signbit | exponent | fraction | ubit | exponent size - 1 | fraction size - 1 |</code></p>
<p>The first 3 fields are similar to floating point representation, but allowing the exponent and fraction to have flexible sizes.</p>
<p>The <code>ubit</code> (uncertainty bit) signifies whether the number is an exact or uncertain:</p>
<p>0 --&gt; Exact<br>
1 --&gt; Number u falls in the OPEN interval (u, u +/- ULP), where ULP is the distance to the next
representable number, and the sign depends on the signbit.</p>
<p>Unums can be expanded to fit into fixed widths, and can be supplemented with summary info, such as
bit flags indicating NaN, Inf, negativity, etc which can help speed many operations.  I'll probably
attempt a FixedUnum type that fills 32/64/128 bits.</p>
<h2><a id="user-content-current-implementation" class="anchor" aria-hidden="true" href="#current-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Current implementation</h2>
<h3><a id="user-content-note-this-implementation-is-changing-daily-the-code-is-a-better-reference" class="anchor" aria-hidden="true" href="#note-this-implementation-is-changing-daily-the-code-is-a-better-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NOTE: this implementation is changing daily... the code is a better reference...</h3>
<p>Core types:</p>
<pre><code>abstract AbstractUnum{B,ESS,FSS} &lt;: Real

bitstype 64 FixedUnum64{B,ESS,FSS} &lt;: AbstractUnum{B,ESS,FSS}
typealias BinaryUnum64{ESS,FSS}   FixedUnum64{2,ESS,FSS}
typealias DecimalUnum64{ESS,FSS}  FixedUnum64{10,ESS,FSS}
typealias Unum64                  BinaryUnum64{4,5}
</code></pre>
<p>Eventually I plan on generating similar type groups for standard sizes 16/32/64/128 bits</p>
<p>A <code>FixedUnum64</code> is always 64 bits, but the internal meaning of the bits may change depending on the esize/fsize fields.</p>
<h4><a id="user-content-parameters" class="anchor" aria-hidden="true" href="#parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parameters:</h4>
<ul>
<li>B: the base of the exponent (base-2 is similar to floats, base-10 is similar to decimal floats)</li>
<li>ESS: the size of the "exponent size" field</li>
<li>FSS: the size of the "fraction size" field</li>
</ul>
<p>The format is as follows:</p>
<p><code>| signbit | unused space | exponent | fraction | ubit | esize - 1 | fsize - 1 |</code></p>
<p>There are 3 goals with this design:</p>
<ul>
<li>Use current hardware optimizations where possible.  Fill out standard bit sizes (16/32/64/128) and make use of optimized UInt operations as much as possible.</li>
<li>Allow for extreme flexibility.  Some problems need a big exponent, others a big fraction, some both.</li>
<li>Underlying methods should be minimal and fast.  If there's something we can hardcode, we should.  Staged functions are perfect for this.</li>
</ul>
<p>Defs:</p>
<pre><code>  signbit         = boolean value, 0 for positive, 1 for negative
  exponent        = same as in floats
  fraction        = same as in floats
  ubit            = boolean value, 0 for exact, 1 for inexact
  esize           = size of the exponent field
  fsize           = size of the fraction field
  esizesize       = total size of the "exponent size" field... allows up to (2^ESS + 1) bits in the exponent
  fsizesize       = total size of the "fraction size" field... allows up to (2^FSS + 1) bits in the fraction
</code></pre>
<p>Calling <code>show</code> will give you a structured bits layout:</p>
<pre><code>julia&gt; c.posinf
bits: 0000001111111111111111111111111111111111111111111111110111111111
|    0    | 1111111111111111 | 11111111111111111111111111111111 |  0   |  1111   |  11111  | 
| signbit |       exp        |               frac               | ubit | esize-1 | fsize-1 | 

julia&gt; c.mostneg
bits: 1000001111111111111111111111111111111111111111111111100111111111
|    1    | 1111111111111111 | 11111111111111111111111111111110 |  0   |  1111   |  11111  | 
| signbit |       exp        |               frac               | ubit | esize-1 | fsize-1 | 

</code></pre>
<p>Many functions will be staged using the <code>@generated</code> macro and cached constants specific to a given set of Unum parameters:</p>
<pre><code>julia&gt; c = Unums.unumConstants(Unums.Unum64)
UnumInfo{Unums.FixedUnum64{2,4,5}}:
             base      2
            nbits     64
            esize     16
            fsize     32
        esizesize      4
        fsizesize      5
         utagsize     10
       signbitpos     64
             epos     58
             fpos     42
          ubitpos     10
         esizepos      9
         fsizepos      5
      signbitmask 1000000000000000000000000000000000000000000000000000000000000000
            emask 0000001111111111111111000000000000000000000000000000000000000000
            fmask 0000000000000000000000111111111111111111111111111111110000000000
         ubitmask 0000000000000000000000000000000000000000000000000000001000000000
        esizemask 0000000000000000000000000000000000000000000000000000000111100000
        fsizemask 0000000000000000000000000000000000000000000000000000000000011111
       efsizemask 0000000000000000000000000000000000000000000000000000000111111111
         utagmask 0000000000000000000000000000000000000000000000000000001111111111
             zero 0000000000000000000000000000000000000000000000000000000000000000
          poszero 0000000000000000000000000000000000000000000000000000001000000000
          negzero 1000000000000000000000000000000000000000000000000000001000000000
           posinf 0000001111111111111111111111111111111111111111111111110111111111
           neginf 1000001111111111111111111111111111111111111111111111110111111111
          mostpos 0000001111111111111111111111111111111111111111111111100111111111
         leastpos 0000000000000000000000000000000000000000000000000000010000000000
          mostneg 1000001111111111111111111111111111111111111111111111100111111111
         leastneg 1000000000000000000000000000000000000000000000000000010000000000
              nan 0000001111111111111111111111111111111111111111111111111111111111
             null 1000001111111111111111111111111111111111111111111111111111111111
</code></pre>
<p>My thinking is that, by putting the specification into these cache objects and using staged functions, we can allow for
total flexibility in the specifics of how a unum is represented, while at the same time providing extremely optimized
methods for creating and operating on them.</p>
</article></div>