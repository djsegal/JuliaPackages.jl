<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-functionalcollections" class="anchor" aria-hidden="true" href="#functionalcollections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FunctionalCollections</h1>
<p><a href="https://travis-ci.org/JuliaCollections/FunctionalCollections.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5f3894b8043a9cec583d885f50ae0dcb9e85d3d0/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961436f6c6c656374696f6e732f46756e6374696f6e616c436f6c6c656374696f6e732e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCollections/FunctionalCollections.jl.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FunctionalCollections&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/71c76efaf8ce2974d29945c93925c1c8a6509b9c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46756e6374696f6e616c436f6c6c656374696f6e735f302e332e737667" alt="FunctionalCollections" data-canonical-src="http://pkg.julialang.org/badges/FunctionalCollections_0.3.svg" style="max-width:100%;"></a></p>
<p>Functional and persistent data structures for Julia. This is a work in
progress and is currently not optimized for performance.</p>
<p><strong>NOTE:</strong> The <code>master</code> branch of <code>FunctionalCollections</code> is for Julia v0.7 and up. For earlier Julia versions please use FunctionalCollections v0.3.x.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FunctionalCollections<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FunctionalCollections</pre></div>
<h3><a id="user-content-exports" class="anchor" aria-hidden="true" href="#exports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exports</h3>
<pre><code>Collection         | Abbrev
----------------------------
PersistentVector   | pvec
PersistentHashMap  | phmap
PersistentArrayMap |
PersistentSet      | pset
PersistentList     | plist
PersistentQueue    | pqueue
</code></pre>
<p><a href="https://github.com/JuliaLang/FunctionalCollections.jl/blob/master/src/FunctionalCollections.jl">src/FunctionalCollections.jl</a>
contains all of the package's exports, though many built-ins are also
implemented.</p>
<h3><a id="user-content-persistentvector" class="anchor" aria-hidden="true" href="#persistentvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentVector</h3>
<p>Persistent vectors are immutable, sequential, random-access data
structures, with performance characteristics similar to arrays.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">@Persistent</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]
Persistent{Int64}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]</pre></div>
<p>Since persistent vectors are immutable, "changing" operations return a
new vector instead of modifying the original.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">append</span>(v, [<span class="pl-c1">6</span>, <span class="pl-c1">7</span>])
Persistent{Int64}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>]

<span class="pl-c"><span class="pl-c">#</span> v hasn't changed</span>
julia<span class="pl-k">&gt;</span> v
Persistent{Int64}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]</pre></div>
<p>Persistent vectors are random-access structures, and can be indexed
into just like arrays.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">3</span>]
<span class="pl-c1">3</span></pre></div>
<p>But since they're immutable, it doesn't make sense to define index
assignment (<code>v[3] = 42</code>) since assignment implies change. Instead,
<code>assoc</code> returns a new persistent vector with some value associated
with a given index.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">assoc</span>(v, <span class="pl-c1">3</span>, <span class="pl-c1">42</span>)
Persistent{Int64}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">42</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]</pre></div>
<p>Three functions, <code>push</code>, <code>peek</code>, and <code>pop</code>, make up the persistent
vector stack interface. <code>push</code> adds a single element (whereas <code>append</code>
adds all elements in the given collection, starting from the left),
<code>peek</code> returns the last element of the vector, and <code>pop</code> returns a new
vector <em>without</em> the last element.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">push</span>(v, <span class="pl-c1">6</span>)
Persistent{Int64}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">peek</span>(v)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop</span>(v)
Persistent{Int64}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]</pre></div>
<p>Persistent vectors also support iteration and higher-order sequence
operations.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> el <span class="pl-k">in</span> <span class="pl-c1">@Persistent</span> [<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>]
           <span class="pl-c1">println</span>(el)
       <span class="pl-k">end</span>
foo
bar
baz

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">*</span> <span class="pl-c1">2</span>, v)
Persistent{Int64}[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(iseven, v)
Persistent{Int64}[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]</pre></div>
<h3><a id="user-content-persistenthashmap" class="anchor" aria-hidden="true" href="#persistenthashmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentHashMap</h3>
<p>Persistent hash maps are immutable, unordered, associative structures,
similar to the built-in <code>Dict</code> type.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> name <span class="pl-k">=</span> <span class="pl-c1">@Persistent</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:first</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Zach<span class="pl-pds">"</span></span>, <span class="pl-c1">:last</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Allaun<span class="pl-pds">"</span></span>)
Persistent{Symbol, String}[last <span class="pl-k">=&gt;</span> Allaun, first <span class="pl-k">=&gt;</span> Zach]</pre></div>
<p>They can be queried in a manner similar to the dictionaries.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> name[<span class="pl-c1">:first</span>]
<span class="pl-s"><span class="pl-pds">"</span>Zach<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(name, <span class="pl-c1">:middle</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span></pre></div>
<p>With persistent vectors, <code>assoc</code> is used to associate a value with an
index; with persistent hash maps, you use it to associate a value with
an arbitrary key. To dissociate a key/value pair, use <code>dissoc</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> fullname <span class="pl-k">=</span> <span class="pl-c1">assoc</span>(name, <span class="pl-c1">:middle</span>, <span class="pl-s"><span class="pl-pds">"</span>Randall<span class="pl-pds">"</span></span>)
Persistent{Symbol, String}[last <span class="pl-k">=&gt;</span> Allaun, first <span class="pl-k">=&gt;</span> Zach, middle <span class="pl-k">=&gt;</span> Randall]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dissoc</span>(fullname, <span class="pl-c1">:middle</span>)
Persistent{Symbol, String}[last <span class="pl-k">=&gt;</span> Allaun, first <span class="pl-k">=&gt;</span> Zach]</pre></div>
<p><code>Base.map</code> is defined for persistent hash maps. The function argument
should expect a <code>(key, value)</code> tuple and return a <code>(key, value)</code>
tuple. This function will be applied to each key-value pair of the
hash map to construct a new one.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">mapkeys</span>(f, m<span class="pl-k">::</span><span class="pl-c1">PersistentHashMap</span>) <span class="pl-k">=</span>
	       <span class="pl-c1">map</span>(kv <span class="pl-k">-&gt;</span> (<span class="pl-c1">f</span>(kv[<span class="pl-c1">1</span>]), kv[<span class="pl-c1">2</span>]), m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mapkeys</span>(string, fullname)
Persistent{String, String}[last <span class="pl-k">=&gt;</span> Allaun, middle <span class="pl-k">=&gt;</span> Randall, first <span class="pl-k">=&gt;</span> Zach]</pre></div>
<h3><a id="user-content-persistentarraymap" class="anchor" aria-hidden="true" href="#persistentarraymap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentArrayMap</h3>
<p>PersistentArrayMaps are immutable dictionaries implemented as Arrays of
key-value pairs. This means that the time complexity of most operations
on them is O(n). They can be quickly created, though, and useful at
small sizes.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">PersistentArrayMap</span>((<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>))
Persistent{Int64, String}Pair{Int64,String}[<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> m2 <span class="pl-k">=</span> <span class="pl-c1">assoc</span>(m, <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)
Persistent{Int64, String}Pair{Int64,String}[<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> m <span class="pl-k">==</span> m2
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dissoc</span>(m2, <span class="pl-c1">2</span>)
Persistent{Int64, String}Pair{Int64,String}[<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> one]

julia<span class="pl-k">&gt;</span> m <span class="pl-k">==</span> <span class="pl-c1">dissoc</span>(m2, <span class="pl-c1">2</span>)
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-persistentset" class="anchor" aria-hidden="true" href="#persistentset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentSet</h3>
<p>PersistentSets are immutable sets. Along with the usual set interface,
<code>conj(s::PersistentSet, val)</code> returns a set with an element added
(conjoined), and <code>disj(s::PersistentSet, val</code> returns a set with an
element removed (disjoined).</p>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO:</h3>
<h4><a id="user-content-general" class="anchor" aria-hidden="true" href="#general"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General</h4>
<ul>
<li>Ints vs Uints w.r.t. bitwise operations</li>
<li><code>children</code> instead of <code>arrayof</code></li>
<li>standardize "short-fn" interfaces:</li>
<li><code>lastchild</code> instead of <code>arrayof(node)[end]</code></li>
<li><code>peek</code> should become <code>pop</code>, <code>pop</code> should become <code>butlast</code></li>
<li>What is Base doing for Arrays w.r.t. <code>boundscheck!</code>, can we drop boundcheck for iteration</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> currently</span>
<span class="pl-c1">pvec</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])
<span class="pl-c1">pset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> should be</span>
<span class="pl-c1">pvec</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)
<span class="pl-c1">pset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)</pre></div>
<ul>
<li><code>@Persistent</code> macro sugar for hi-jacking built-in syntax:</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@Persistent</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> creates a phmap</span>

<span class="pl-c1">@Persistent</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]
<span class="pl-c"><span class="pl-c">#</span> creates a pvec</span></pre></div>
<h4><a id="user-content-persistentqueue" class="anchor" aria-hidden="true" href="#persistentqueue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentQueue</h4>
<ul>
<li>queue =&gt; pqueue</li>
</ul>
<h4><a id="user-content-bitmappedtrie" class="anchor" aria-hidden="true" href="#bitmappedtrie"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BitmappedTrie</h4>
<ul>
<li>comment <code>mask</code> to indicate index-from-1 assumption</li>
</ul>
<h4><a id="user-content-persistentvector-1" class="anchor" aria-hidden="true" href="#persistentvector-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentVector</h4>
<ul>
<li>constant time <code>rest</code> by adding an initial index offset</li>
<li>quick slicing with initial offset and structure deletion</li>
<li>pvec mask should take the pvec even though it doesn't use it</li>
<li>move extra pvec constructor to the type definition</li>
</ul>
<h4><a id="user-content-persistenthashmap-1" class="anchor" aria-hidden="true" href="#persistenthashmap-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentHashMap</h4>
<ul>
<li>the repr of values should be printed, not the string</li>
<li>printing breaks after dissocing</li>
</ul>
</article></div>