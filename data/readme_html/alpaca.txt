<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/jmboehm/Alpaca.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f81416a7349c1f75f0581185a24aa43913ff5c3d/68747470733a2f2f7472617669732d63692e6f72672f6a6d626f65686d2f416c706163612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jmboehm/Alpaca.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/jmboehm/Alpaca.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dddfa713d74e5707108bd27726b28dda5a2ec527/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a6d626f65686d2f416c706163612e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/jmboehm/Alpaca.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/jmboehm/Alpaca.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/11320941c93e7aa4464fc4511e0095b99be34ccc/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6d626f65686d2f416c706163612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jmboehm/Alpaca.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-alpacajl" class="anchor" aria-hidden="true" href="#alpacajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alpaca.jl</h1>
<p>Julia wrapper for the <a href="https://github.com/amrei-stammann/alpaca">alpaca R library</a> to estimate generalized linear model with high-dimensional fixed effects.</p>
<p>Alpaca.jl is currently targeting alpaca 0.3.1.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You need to have R, and Julia of course, preinstalled, but if either is 64-bit the other needs to match (so e.g. 32-bit julia snap installation may not work, and you'll get ERROR: ... wrong ELF class: ELFCLASS64):</p>
<pre><code>] add Alpaca

and in R:

&gt; install.packages('alpaca')
&gt; install_packages('formula.tools')
</code></pre>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Use the <code>feglm</code> function. See the following example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Alpaca, RDatasets, Distributions, Random

<span class="pl-c"><span class="pl-c">#</span> setting up the example data</span>
rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">1234</span>)
df <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)
df<span class="pl-k">.</span>binary <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">Float64</span>.(<span class="pl-c1">rand</span>(rng,<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-c1">size</span>(df,<span class="pl-c1">1</span>),<span class="pl-c1">1</span>)))
df[<span class="pl-k">!</span>,<span class="pl-c1">:SpeciesDummy</span>] <span class="pl-k">=</span> <span class="pl-c1">categorical</span>(df[<span class="pl-k">!</span>,<span class="pl-c1">:Species</span>])
idx <span class="pl-k">=</span> <span class="pl-c1">rand</span>(rng,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-c1">size</span>(df,<span class="pl-c1">1</span>),<span class="pl-c1">1</span>)
a <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>]
df<span class="pl-k">.</span>Random <span class="pl-k">=</span> <span class="pl-c1">vec</span>([a[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> idx])
df<span class="pl-k">.</span>RandomCategorical <span class="pl-k">=</span> <span class="pl-c1">categorical</span>(df[<span class="pl-k">!</span>,<span class="pl-c1">:Random</span>])

<span class="pl-c"><span class="pl-c">#</span> estimating the model</span>
result <span class="pl-k">=</span> <span class="pl-c1">feglm</span>(df, <span class="pl-c1">@formula</span>(binary <span class="pl-k">~</span> SepalWidth), <span class="pl-c1">Binomial</span>(),
    fe <span class="pl-k">=</span> :(SpeciesDummy <span class="pl-k">+</span> RandomCategorical),
    vcov <span class="pl-k">=</span> :(<span class="pl-c1">cluster</span>(SpeciesDummy <span class="pl-k">+</span> RandomCategorical))
    )</pre></div>
<p>The full form of the <code>feglm</code> function is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">feglm</span>(df<span class="pl-k">::</span><span class="pl-c1">AbstractDataFrame</span>, f<span class="pl-k">::</span><span class="pl-c1">FormulaTerm</span>,
    family<span class="pl-k">::</span><span class="pl-c1">UnivariateDistribution</span>;
    fe<span class="pl-k">::</span><span class="pl-c1">Union{Symbol, Expr, Nothing}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
    vcov<span class="pl-k">::</span><span class="pl-c1">Union{Symbol, Expr, Nothing}</span> <span class="pl-k">=</span> :(<span class="pl-c1">simple</span>()),
    start<span class="pl-k">::</span><span class="pl-c1">Union{Vector{T}, Nothing}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
    maxiter<span class="pl-k">::</span><span class="pl-c1">Integer</span> <span class="pl-k">=</span> <span class="pl-c1">10000</span>, limit<span class="pl-k">::</span><span class="pl-c1">Integer</span> <span class="pl-k">=</span> <span class="pl-c1">10</span>,
    trace<span class="pl-k">::</span><span class="pl-c1">Integer</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>,
    convtol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1.0e-06</span>,
    devtol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1.0e-08</span>, steptol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1.0e-08</span>,
    centertol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1.0e-05</span>, rhotol<span class="pl-k">::</span><span class="pl-c1">Real</span> <span class="pl-k">=</span> <span class="pl-c1">1.0e-04</span>,
    droppc<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>
   ) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span></pre></div>
<p>For an explanation of the options, see the <a href="https://cran.r-project.org/web/packages/alpaca/index.html" rel="nofollow">manual of the alpaca package</a>.</p>
</article></div>