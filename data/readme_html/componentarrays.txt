<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-componentarraysjl" class="anchor" aria-hidden="true" href="#componentarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ComponentArrays.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://jonniedie.github.io/ComponentArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://jonniedie.github.io/ComponentArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/jonniedie/ComponentArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b0e86e473835a61111b236d9746c97c62b751760/68747470733a2f2f7472617669732d63692e636f6d2f6a6f6e6e69656469652f436f6d706f6e656e744172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/jonniedie/ComponentArrays.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/jonniedie/ComponentArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3978318efffc60fcd67e6501547338d1c1e4f0a8/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6e6e69656469652f436f6d706f6e656e744172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/jonniedie/ComponentArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The main export of this package is the <code>ComponentArray</code> type. "Components" of <code>ComponentArray</code>s
are really just array blocks that can be accessed through a named index. The magic here is
that this named indexing can create a new <code>ComponentArray</code> whose data is a view into the original,
allowing for standalone models to be composed together by simple function composition. In
essence, <code>ComponentArray</code>s allow you to do the things you would usually need a modeling
language for, but without actually needing a modeling language. The main targets are for use
in <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a> and
<a href="https://github.com/JuliaNLSolvers/Optim.jl">Optim.jl</a>, but anything that requires
flat vectors is fair game.</p>
<h2><a id="user-content-new-features" class="anchor" aria-hidden="true" href="#new-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>New Features!</h2>
<h3><a id="user-content-v040" class="anchor" aria-hidden="true" href="#v040"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>v0.4.0</h3>
<ul>
<li>Zygote rules for DiffEqFlux support! Still experimental though!</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ComponentArrays, UnPack
<span class="pl-k">using</span> Flux<span class="pl-k">:</span> glorot_uniform

<span class="pl-en">dense_layer</span>(in, out) <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(W<span class="pl-k">=</span><span class="pl-c1">glorot_uniform</span>(out, in), b<span class="pl-k">=</span><span class="pl-c1">zeros</span>(out))

layers <span class="pl-k">=</span> (L1<span class="pl-k">=</span><span class="pl-c1">dense_layer</span>(<span class="pl-c1">2</span>, <span class="pl-c1">50</span>), L2<span class="pl-k">=</span><span class="pl-c1">dense_layer</span>(<span class="pl-c1">50</span>, <span class="pl-c1">2</span>))
θ <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(u<span class="pl-k">=</span>u0, p<span class="pl-k">=</span>layers)

<span class="pl-k">function</span> <span class="pl-en">dudt</span>(u, p, t)
    <span class="pl-c1">@unpack</span> L1, L2 <span class="pl-k">=</span> p
    <span class="pl-k">return</span> L2<span class="pl-k">.</span>W <span class="pl-k">*</span> <span class="pl-c1">tanh</span>.(L1<span class="pl-k">.</span>W <span class="pl-k">*</span> u <span class="pl-k">.+</span> L1<span class="pl-k">.</span>b) <span class="pl-k">.+</span> L2<span class="pl-k">.</span>b
<span class="pl-k">end</span></pre></div>
<p>Check out <a href="https://jonniedie.github.io/ComponentArrays.jl/dev/examples/DiffEqFlux/" rel="nofollow">the docs</a> for a complete example.</p>
<h3><a id="user-content-v030" class="anchor" aria-hidden="true" href="#v030"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>v0.3.0</h3>
<ul>
<li>Matrix and higher-dimensional array components!</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(a<span class="pl-k">=</span><span class="pl-c1">rand</span>(), b<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), c<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> x<span class="pl-k">.</span>c
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">13</span>), <span class="pl-c1">3</span>, <span class="pl-c1">3</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">0.508171</span>  <span class="pl-c1">0.740476</span>   <span class="pl-c1">0.730907</span>
 <span class="pl-c1">0.112437</span>  <span class="pl-c1">0.0329141</span>  <span class="pl-c1">0.943972</span>
 <span class="pl-c1">0.661702</span>  <span class="pl-c1">0.760624</span>   <span class="pl-c1">0.777929</span></pre></div>
<p>...and plenty more!</p>
<h2><a id="user-content-general-use" class="anchor" aria-hidden="true" href="#general-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General use</h2>
<p>The easiest way to construct 1-dimensional <code>ComponentArray</code>s is as if they were <code>NamedTuple</code>s. In fact, a good way to think about them is as arbitrarily nested, mutable <code>NamedTuple</code>s that can be passed through a solver.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> (a<span class="pl-k">=</span><span class="pl-c1">2</span>, b<span class="pl-k">=</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]);
  
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>, b<span class="pl-k">=</span>[(a<span class="pl-k">=</span><span class="pl-c1">20.</span>, b<span class="pl-k">=</span><span class="pl-c1">0</span>), (a<span class="pl-k">=</span><span class="pl-c1">33.</span>, b<span class="pl-k">=</span><span class="pl-c1">0</span>), (a<span class="pl-k">=</span><span class="pl-c1">44.</span>, b<span class="pl-k">=</span><span class="pl-c1">3</span>)], c<span class="pl-k">=</span>c)
<span class="pl-c1">ComponentArray</span><span class="pl-c1">{Float64}</span>(a <span class="pl-k">=</span> <span class="pl-c1">5.0</span>, b <span class="pl-k">=</span> [(a <span class="pl-k">=</span> <span class="pl-c1">20.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">0.0</span>), (a <span class="pl-k">=</span> <span class="pl-c1">33.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">0.0</span>), (a <span class="pl-k">=</span> <span class="pl-c1">44.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">3.0</span>)], c <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">2.0</span>, b <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>]))
  
julia<span class="pl-k">&gt;</span> x<span class="pl-k">.</span>c<span class="pl-k">.</span>a <span class="pl-k">=</span> <span class="pl-c1">400</span>; x
<span class="pl-c1">ComponentArray</span><span class="pl-c1">{Float64}</span>(a <span class="pl-k">=</span> <span class="pl-c1">5.0</span>, b <span class="pl-k">=</span> [(a <span class="pl-k">=</span> <span class="pl-c1">20.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">0.0</span>), (a <span class="pl-k">=</span> <span class="pl-c1">33.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">0.0</span>), (a <span class="pl-k">=</span> <span class="pl-c1">44.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">3.0</span>)], c <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">400.0</span>, b <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>]))
  
julia<span class="pl-k">&gt;</span> x[<span class="pl-c1">8</span>]
<span class="pl-c1">400.0</span>
  
julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(x)
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
   <span class="pl-c1">5.0</span>
  <span class="pl-c1">20.0</span>
   <span class="pl-c1">0.0</span>
  <span class="pl-c1">33.0</span>
   <span class="pl-c1">0.0</span>
  <span class="pl-c1">44.0</span>
   <span class="pl-c1">3.0</span>
 <span class="pl-c1">400.0</span>
   <span class="pl-c1">1.0</span>
   <span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">similar</span>(x, Int32)) <span class="pl-k">===</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">ComponentArray</span><span class="pl-c1">{Int32}</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>, b<span class="pl-k">=</span>[(a<span class="pl-k">=</span><span class="pl-c1">20.</span>, b<span class="pl-k">=</span><span class="pl-c1">0</span>), (a<span class="pl-k">=</span><span class="pl-c1">33.</span>, b<span class="pl-k">=</span><span class="pl-c1">0</span>), (a<span class="pl-k">=</span><span class="pl-c1">44.</span>, b<span class="pl-k">=</span><span class="pl-c1">3</span>)], c<span class="pl-k">=</span>c))
<span class="pl-c1">true</span></pre></div>
<p>Higher dimensional <code>ComponentArray</code>s can be created too, but it's a little messy at the moment. The nice thing for modeling is that dimension expansion through broadcasted operations can create higher-dimensional <code>ComponentArray</code>s automatically, so Jacobian cache arrays that are created internally with <code>false .* x .* x'</code> will be <code>ComponentArray</code>s with proper axes. Check out the <a href="https://github.com/jonniedie/ComponentArrays.jl/blob/master/examples/ODE_jac_example.jl">ODE with Jacobian</a> example in the examples folder to see how this looks in practice.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span>[<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>], c<span class="pl-k">=</span>c)
<span class="pl-c1">ComponentArray</span><span class="pl-c1">{Float64}</span>(a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, b <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">4.0</span>], c <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">2.0</span>, b <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>]))

julia<span class="pl-k">&gt;</span> x2 <span class="pl-k">=</span> x <span class="pl-k">.*</span> x<span class="pl-k">'</span>
<span class="pl-c1">7</span><span class="pl-k">×</span><span class="pl-c1">7</span> ComponentArray{Tuple{Axis{(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, c <span class="pl-k">=</span> (<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>, (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)))},Axis{(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, c <span class="pl-k">=</span> (<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>, (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)))}},Float64,<span class="pl-c1">2</span>,Array{Float64,<span class="pl-c1">2</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>   <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>   <span class="pl-c1">8.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>   <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">16.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">8.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>   <span class="pl-c1">8.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>   <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>   <span class="pl-c1">8.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 
julia<span class="pl-k">&gt;</span> x2[<span class="pl-c1">:c</span>,<span class="pl-c1">:c</span>]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> ComponentArray{Tuple{Axis{(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)},Axis{(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)}},Float64,<span class="pl-c1">2</span>,SubArray{Float64,<span class="pl-c1">2</span>,Array{Float64,<span class="pl-c1">2</span>},Tuple{UnitRange{Int64},UnitRange{Int64}},<span class="pl-c1">false</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 
julia<span class="pl-k">&gt;</span> x2[<span class="pl-c1">:a</span>,<span class="pl-c1">:a</span>]
 <span class="pl-c1">1.0</span>
 
julia<span class="pl-k">&gt;</span> x2[<span class="pl-c1">:a</span>,<span class="pl-c1">:c</span>]
<span class="pl-c1">ComponentArray</span><span class="pl-c1">{Float64}</span>(a <span class="pl-k">=</span> <span class="pl-c1">2.0</span>, b <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>])

julia<span class="pl-k">&gt;</span> x2[<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>]
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> ComponentArray{Tuple{Axis{<span class="pl-c1">NamedTuple</span>()},Axis{(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)}},Float64,<span class="pl-c1">2</span>,SubArray{Float64,<span class="pl-c1">2</span>,Array{Float64,<span class="pl-c1">2</span>},Tuple{UnitRange{Int64},UnitRange{Int64}},<span class="pl-c1">false</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">8.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">8.0</span></pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-differential-equation-example" class="anchor" aria-hidden="true" href="#differential-equation-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Differential equation example</h3>
<p>This example uses <code>@unpack</code> from <a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a>
for nice syntax. Example taken from:
<a href="https://github.com/JuliaDiffEq/ModelingToolkit.jl/issues/36#issuecomment-536221300">https://github.com/JuliaDiffEq/ModelingToolkit.jl/issues/36#issuecomment-536221300</a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ComponentArrays
<span class="pl-k">using</span> DifferentialEquations
<span class="pl-k">using</span> Parameters<span class="pl-k">:</span> <span class="pl-c1">@unpack</span>


tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">20.0</span>)


<span class="pl-c"><span class="pl-c">#</span># Lorenz system</span>
<span class="pl-k">function</span> <span class="pl-en">lorenz!</span>(D, u, p, t; f<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
    <span class="pl-c1">@unpack</span> σ, ρ, β <span class="pl-k">=</span> p
    <span class="pl-c1">@unpack</span> x, y, z <span class="pl-k">=</span> u
    
    D<span class="pl-k">.</span>x <span class="pl-k">=</span> σ<span class="pl-k">*</span>(y <span class="pl-k">-</span> x)
    D<span class="pl-k">.</span>y <span class="pl-k">=</span> x<span class="pl-k">*</span>(ρ <span class="pl-k">-</span> z) <span class="pl-k">-</span> y <span class="pl-k">-</span> f
    D<span class="pl-k">.</span>z <span class="pl-k">=</span> x<span class="pl-k">*</span>y <span class="pl-k">-</span> β<span class="pl-k">*</span>z
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

lorenz_p <span class="pl-k">=</span> (σ<span class="pl-k">=</span><span class="pl-c1">10.0</span>, ρ<span class="pl-k">=</span><span class="pl-c1">28.0</span>, β<span class="pl-k">=</span><span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)
lorenz_ic <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(x<span class="pl-k">=</span><span class="pl-c1">0.0</span>, y<span class="pl-k">=</span><span class="pl-c1">0.0</span>, z<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
lorenz_prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz!, lorenz_ic, tspan, lorenz_p)


<span class="pl-c"><span class="pl-c">#</span># Lotka-Volterra system</span>
<span class="pl-k">function</span> <span class="pl-en">lotka!</span>(D, u, p, t; f<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
    <span class="pl-c1">@unpack</span> α, β, γ, δ <span class="pl-k">=</span> p
    <span class="pl-c1">@unpack</span> x, y <span class="pl-k">=</span> u
    
    D<span class="pl-k">.</span>x <span class="pl-k">=</span>  α<span class="pl-k">*</span>x <span class="pl-k">-</span> β<span class="pl-k">*</span>x<span class="pl-k">*</span>y <span class="pl-k">+</span> f
    D<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-k">-</span>γ<span class="pl-k">*</span>y <span class="pl-k">+</span> δ<span class="pl-k">*</span>x<span class="pl-k">*</span>y
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

lotka_p <span class="pl-k">=</span> (α<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span>, β<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">3</span>, γ<span class="pl-k">=</span><span class="pl-c1">1.0</span>, δ<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
lotka_ic <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(x<span class="pl-k">=</span><span class="pl-c1">1.0</span>, y<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
lotka_prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lotka!, lotka_ic, tspan, lotka_p)


<span class="pl-c"><span class="pl-c">#</span># Composed Lorenz and Lotka-Volterra system</span>
<span class="pl-k">function</span> <span class="pl-en">composed!</span>(D, u, p, t)
    c <span class="pl-k">=</span> p<span class="pl-k">.</span>c <span class="pl-c"><span class="pl-c">#</span>coupling parameter</span>
    <span class="pl-c1">@unpack</span> lorenz, lotka <span class="pl-k">=</span> u
    
    <span class="pl-c1">lorenz!</span>(D<span class="pl-k">.</span>lorenz, lorenz, p<span class="pl-k">.</span>lorenz, t, f<span class="pl-k">=</span>c<span class="pl-k">*</span>lotka<span class="pl-k">.</span>x)
    <span class="pl-c1">lotka!</span>(D<span class="pl-k">.</span>lotka, lotka, p<span class="pl-k">.</span>lotka, t, f<span class="pl-k">=</span>c<span class="pl-k">*</span>lorenz<span class="pl-k">.</span>x)
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

comp_p <span class="pl-k">=</span> (lorenz<span class="pl-k">=</span>lorenz_p, lotka<span class="pl-k">=</span>lotka_p, c<span class="pl-k">=</span><span class="pl-c1">0.01</span>)
comp_ic <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(lorenz<span class="pl-k">=</span>lorenz_ic, lotka<span class="pl-k">=</span>lotka_ic)
comp_prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(composed!, comp_ic, tspan, comp_p)


<span class="pl-c"><span class="pl-c">#</span># Solve problem</span>
<span class="pl-c"><span class="pl-c">#</span> We can solve the composed system...</span>
comp_sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(comp_prob)

<span class="pl-c"><span class="pl-c">#</span> ...or we can unit test one of the component systems</span>
lotka_sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(lotka_prob)</pre></div>
<p>Notice how cleanly the <code>composed!</code> function can pass variables from one function to another with no array index juggling in sight. This is especially useful for large models as it becomes harder to keep track top-level model array position when adding new or deleting old components from the model. We could go further and compose <code>composed!</code> with other components ad (practically) infinitum with no mental bookkeeping.</p>
<p>The main benefit, however, is now our differential equations are unit testable. Both <code>lorenz</code> and <code>lotka</code> can be run as their own <code>ODEProblem</code> with <code>f</code> set to zero to see the unforced response.</p>
<h3><a id="user-content-control-of-a-sliding-block" class="anchor" aria-hidden="true" href="#control-of-a-sliding-block"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Control of a sliding block</h3>
<p>In this example, we'll build a model of a block sliding on a surface and use <code>ComponentArray</code>s to easily switch between coulomb and equivalent viscous damping models. The block is controlled by pushing and pulling a spring attached to it and we will use feedback through a PID controller to try to track a reference signal. For simplification, we are using the velocity of the block directly for the derivative term, rather than taking a filtered derivative of the error signal. We are also setting a deadzone on the friction force with exponential decay to zero velocity to get rid of simulation chatter during the static friction regime.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ComponentArrays
<span class="pl-k">using</span> DifferentialEquations
<span class="pl-k">using</span> Interact<span class="pl-k">:</span> <span class="pl-c1">@manipulate</span>
<span class="pl-k">using</span> Parameters<span class="pl-k">:</span> <span class="pl-c1">@unpack</span>
<span class="pl-k">using</span> Plots

<span class="pl-c"><span class="pl-c">#</span># Setup</span>
<span class="pl-k">const</span> g <span class="pl-k">=</span> <span class="pl-c1">9.80665</span>

<span class="pl-en">maybe_apply</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>, x, p, t) <span class="pl-k">=</span> <span class="pl-c1">f</span>(x, p, t)
<span class="pl-en">maybe_apply</span>(f, x, p, t) <span class="pl-k">=</span> f

<span class="pl-c"><span class="pl-c">#</span> Allows functions of form f(x,p,t) to be applied and passed in as inputs</span>
<span class="pl-k">function</span> <span class="pl-en">simulator</span>(func; kwargs<span class="pl-k">...</span>)
    <span class="pl-en">simfun</span>(dx, x, p, t) <span class="pl-k">=</span> <span class="pl-c1">func</span>(dx, x, p, t; <span class="pl-c1">map</span>(f<span class="pl-k">-&gt;</span><span class="pl-c1">maybe_apply</span>(f, x, p, t), (;kwargs<span class="pl-k">...</span>))<span class="pl-k">...</span>)
    <span class="pl-en">simfun</span>(x, p, t) <span class="pl-k">=</span> <span class="pl-c1">func</span>(x, p, t; <span class="pl-c1">map</span>(f<span class="pl-k">-&gt;</span><span class="pl-c1">maybe_apply</span>(f, x, p, t), (;kwargs<span class="pl-k">...</span>))<span class="pl-k">...</span>)
    <span class="pl-k">return</span> simfun
<span class="pl-k">end</span>

<span class="pl-en">softsign</span>(x) <span class="pl-k">=</span> <span class="pl-c1">tanh</span>(<span class="pl-c1">1e3</span>x)


<span class="pl-c"><span class="pl-c">#</span># Dynamics update functions</span>
<span class="pl-c"><span class="pl-c">#</span> Sliding block with viscous friction</span>
<span class="pl-k">function</span> <span class="pl-en">viscous_block!</span>(D, vars, p, t; u<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
    <span class="pl-c1">@unpack</span> m, c, k <span class="pl-k">=</span> p
    <span class="pl-c1">@unpack</span> v, x <span class="pl-k">=</span> vars

    D<span class="pl-k">.</span>x <span class="pl-k">=</span> v
    D<span class="pl-k">.</span>v <span class="pl-k">=</span> (<span class="pl-k">-</span>c<span class="pl-k">*</span>v <span class="pl-k">+</span> k<span class="pl-k">*</span>(u<span class="pl-k">-</span>x))<span class="pl-k">/</span>m
    <span class="pl-k">return</span> x
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Sliding block with coulomb friction</span>
<span class="pl-k">function</span> <span class="pl-en">coulomb_block!</span>(D, vars, p, t; u<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
    <span class="pl-c1">@unpack</span> m, μ, k <span class="pl-k">=</span> p
    <span class="pl-c1">@unpack</span> v, x <span class="pl-k">=</span> vars

    D<span class="pl-k">.</span>x <span class="pl-k">=</span> v
    a <span class="pl-k">=</span> <span class="pl-k">-</span>μ<span class="pl-k">*</span>g<span class="pl-k">*</span><span class="pl-c1">softsign</span>(v) <span class="pl-k">+</span> k<span class="pl-k">*</span>(u<span class="pl-k">-</span>x)<span class="pl-k">/</span>m
    D<span class="pl-k">.</span>v <span class="pl-k">=</span> <span class="pl-c1">abs</span>(a)<span class="pl-k">&lt;</span><span class="pl-c1">1e-3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">abs</span>(v)<span class="pl-k">&lt;</span><span class="pl-c1">1e-3</span> ? <span class="pl-k">-</span><span class="pl-c1">10</span>v : a
    <span class="pl-k">return</span> x
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">PID_controller!</span>(D, vars, p, t; err<span class="pl-k">=</span><span class="pl-c1">0.0</span>, v<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
    <span class="pl-c1">@unpack</span> kp, ki, kd <span class="pl-k">=</span> p
    <span class="pl-c1">@unpack</span> x <span class="pl-k">=</span> vars

    D<span class="pl-k">.</span>x <span class="pl-k">=</span> err
    <span class="pl-k">return</span> ki<span class="pl-k">*</span>x <span class="pl-k">+</span> kp<span class="pl-k">*</span>err <span class="pl-k">+</span> kd<span class="pl-k">*</span>v
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">feedback_sys!</span>(D, components, p, t; ref<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
    <span class="pl-c1">@unpack</span> ctrl, plant <span class="pl-k">=</span> components

    u <span class="pl-k">=</span> p<span class="pl-k">.</span>ctrl<span class="pl-k">.</span><span class="pl-c1">fun</span>(D<span class="pl-k">.</span>ctrl, ctrl, p<span class="pl-k">.</span>ctrl<span class="pl-k">.</span>params, t; err<span class="pl-k">=</span>ref<span class="pl-k">-</span>plant<span class="pl-k">.</span>x, v<span class="pl-k">=</span><span class="pl-k">-</span>plant<span class="pl-k">.</span>v)
    <span class="pl-k">return</span> p<span class="pl-k">.</span>plant<span class="pl-k">.</span><span class="pl-c1">fun</span>(D<span class="pl-k">.</span>plant, plant, p<span class="pl-k">.</span>plant<span class="pl-k">.</span>params, t; u<span class="pl-k">=</span>u)
<span class="pl-k">end</span>

<span class="pl-en">step_input</span>(;time<span class="pl-k">=</span><span class="pl-c1">1.0</span>, mag<span class="pl-k">=</span><span class="pl-c1">1.0</span>) <span class="pl-k">=</span> (x,p,t) <span class="pl-k">-&gt;</span> t<span class="pl-k">&gt;</span>time ? mag : <span class="pl-c1">0</span>
<span class="pl-en">sine_input</span>(;mag<span class="pl-k">=</span><span class="pl-c1">1.0</span>, period<span class="pl-k">=</span><span class="pl-c1">10.0</span>) <span class="pl-k">=</span> (x,p,t) <span class="pl-k">-&gt;</span> mag<span class="pl-k">*</span><span class="pl-c1">sin</span>(t<span class="pl-k">*</span><span class="pl-c1">2</span>π<span class="pl-k">/</span>period)


<span class="pl-c"><span class="pl-c">#</span># Interactive GUI for switching out plant models and varying PID gains</span>
<span class="pl-c1">@manipulate</span> <span class="pl-k">for</span> kp <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">15</span>,
                ki <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">15</span>, 
                kd <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">15</span>,
                damping <span class="pl-k">in</span> <span class="pl-c1">Dict</span>(
                    <span class="pl-s"><span class="pl-pds">"</span>Coulomb<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> coulomb_block!,
                    <span class="pl-s"><span class="pl-pds">"</span>Viscous<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> viscous_block!,
                ),
                reference <span class="pl-k">in</span> <span class="pl-c1">Dict</span>(
                    <span class="pl-s"><span class="pl-pds">"</span>Sine<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> sine_input,
                    <span class="pl-s"><span class="pl-pds">"</span>Step<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> step_input,
                ),
                magnitude <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c"><span class="pl-c">#</span> pop-pop!</span>
                period <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">30</span>,
                plot_v <span class="pl-k">in</span> <span class="pl-c1">false</span>
    
    <span class="pl-c"><span class="pl-c">#</span> Inputs</span>
    tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">30.0</span>)

    ctrl_fun <span class="pl-k">=</span> PID_controller!
    <span class="pl-c"><span class="pl-c">#</span> plant_fun = coulomb_block!</span>
    
    ref <span class="pl-k">=</span> <span class="pl-k">if</span> reference<span class="pl-k">==</span>sine_input
        <span class="pl-c1">reference</span>(period<span class="pl-k">=</span>period, mag<span class="pl-k">=</span>magnitude)
    <span class="pl-k">else</span>
        <span class="pl-c1">reference</span>(mag<span class="pl-k">=</span>magnitude)
    <span class="pl-k">end</span>
    
    m <span class="pl-k">=</span> <span class="pl-c1">50.0</span>
    μ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
    ω <span class="pl-k">=</span> <span class="pl-c1">2</span>π<span class="pl-k">/</span>period
    c <span class="pl-k">=</span> <span class="pl-c1">4</span><span class="pl-k">*</span>μ<span class="pl-k">*</span>m<span class="pl-k">*</span>g<span class="pl-k">/</span>(π<span class="pl-k">*</span>ω<span class="pl-k">*</span>magnitude) <span class="pl-c"><span class="pl-c">#</span> Viscous equivalent damping</span>
    k <span class="pl-k">=</span> <span class="pl-c1">50.0</span>

    plant_p <span class="pl-k">=</span> (m<span class="pl-k">=</span>m, μ<span class="pl-k">=</span>μ, c<span class="pl-k">=</span>c, k<span class="pl-k">=</span>k)
    ctrl_p <span class="pl-k">=</span> (kp<span class="pl-k">=</span>kp, ki<span class="pl-k">=</span>ki, kd<span class="pl-k">=</span>kd)

    plant_ic <span class="pl-k">=</span> (v<span class="pl-k">=</span><span class="pl-c1">0</span>, x<span class="pl-k">=</span><span class="pl-c1">0</span>)
    ctrl_ic <span class="pl-k">=</span> (;x<span class="pl-k">=</span><span class="pl-c1">0</span>)



    <span class="pl-c"><span class="pl-c">#</span> Set up and solve</span>
    sys_p <span class="pl-k">=</span> (
        ctrl <span class="pl-k">=</span> (
            params <span class="pl-k">=</span> ctrl_p,
            fun <span class="pl-k">=</span> ctrl_fun,
        ),
        plant <span class="pl-k">=</span> (
            params <span class="pl-k">=</span> plant_p,
            fun <span class="pl-k">=</span> damping,
        ),
    )
    sys_ic <span class="pl-k">=</span> <span class="pl-c1">ComponentArray</span>(ctrl<span class="pl-k">=</span>ctrl_ic, plant<span class="pl-k">=</span>plant_ic)
    sys_fun <span class="pl-k">=</span> <span class="pl-c1">ODEFunction</span>(<span class="pl-c1">simulator</span>(feedback_sys!, ref<span class="pl-k">=</span>ref), syms<span class="pl-k">=</span>[<span class="pl-c1">:u</span>, <span class="pl-c1">:v</span>, <span class="pl-c1">:x</span>])
    sys_prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(sys_fun, sys_ic, tspan, sys_p)

    sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(sys_prob, <span class="pl-c1">Tsit5</span>())


    <span class="pl-c"><span class="pl-c">#</span> Plot</span>
    t <span class="pl-k">=</span> tspan[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span>tspan[<span class="pl-c1">2</span>]
    lims <span class="pl-k">=</span> magnitude<span class="pl-k">*</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
    plotvars <span class="pl-k">=</span> plot_v ? [<span class="pl-c1">3</span>, <span class="pl-c1">2</span>] : [<span class="pl-c1">3</span>]
    strip <span class="pl-k">=</span> <span class="pl-c1">plot</span>(t, <span class="pl-c1">ref</span>.(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, t), ylim<span class="pl-k">=</span><span class="pl-c1">1.2</span>lims, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>r(t)<span class="pl-pds">"</span></span>)
    <span class="pl-c1">plot!</span>(strip, sol, vars<span class="pl-k">=</span>plotvars)
    phase <span class="pl-k">=</span> <span class="pl-c1">plot</span>(<span class="pl-c1">ref</span>.(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, t), <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">.</span>plant<span class="pl-k">.</span>x, <span class="pl-c1">sol</span>(t)<span class="pl-k">.</span>u),
        xlim<span class="pl-k">=</span>lims,
        ylim<span class="pl-k">=</span><span class="pl-c1">1.2</span>lims,
        legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
        xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>r(t)<span class="pl-pds">"</span></span>,
        ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x(t)<span class="pl-pds">"</span></span>,
    )
    <span class="pl-c1">plot</span>(strip, phase, layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), size<span class="pl-k">=</span>(<span class="pl-c1">700</span>, <span class="pl-c1">800</span>))

<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="assets/coulomb_control.png"><img src="assets/coulomb_control.png" style="max-width:100%;"></a></p>
</article></div>