<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hotfuzz" class="anchor" aria-hidden="true" href="#hotfuzz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HotFuzz</h1>
<p><a target="_blank" rel="noopener noreferrer" href="static/fence.gif"><img src="static/fence.gif" alt="Hot Fuzz" style="max-width:100%;"></a></p>
<p>Provides a simple tracer for Julia code, based on plans for world domination me and @carnaval came up with while high at JuliaCon 2015. No guarantees of code reliability, correctness, fitness for a given purpose or even basic coherence are provided.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import HotFuzz: trace!, runtrace

trace!(@which(gcd(1, 1))) # Enable tracing of a method
runtrace(gcd, rand(0:100), rand(0:100)) # Trace a call of the function
"><pre><span class="pl-k">import</span> HotFuzz<span class="pl-k">:</span> trace!, runtrace

<span class="pl-c1">trace!</span>(<span class="pl-c1">@which</span>(<span class="pl-c1">gcd</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>))) <span class="pl-c"><span class="pl-c">#</span> Enable tracing of a method</span>
<span class="pl-c1">runtrace</span>(gcd, <span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">100</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">100</span>)) <span class="pl-c"><span class="pl-c">#</span> Trace a call of the function</span></pre></div>
<p><code>runtrace</code> returns a tuple <code>(result, trace)</code>. <code>trace</code> is an array of tuples <code>(Branch, Bool)</code>; each <code>Branch</code> represents a <code>gotounless</code> in a given source code location, and the bool tells you whether the <code>goto</code> ran.</p>
<p>The original idea was for this to be used as a heuristic for guiding fuzz testing in the vein of American Fuzzy Lop. I also think it could be used to generate a set of test cases for a function without needing an invariant. However, it needs more in the way of heuristics for interesting traces, data generation and mutation etc.</p>
</article></div>