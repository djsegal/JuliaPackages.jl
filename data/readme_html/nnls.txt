<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nnlsjl-non-negative-least-squares-in-julia" class="anchor" aria-hidden="true" href="#nnlsjl-non-negative-least-squares-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NNLS.jl: Non-Negative Least Squares in Julia</h1>
<p><a href="https://github.com/rdeits/NNLS.jl/actions?query=workflow%3ACI"><img src="https://github.com/rdeits/NNLS.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/rdeits/NNLS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cbb74e963ea761136af30a2072482a6aaff3e0490e0c9135c75c7f316f753eee/687474703a2f2f636f6465636f762e696f2f6769746875622f7264656974732f4e4e4c532e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rdeits/NNLS.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package implements the non-negative least squares solver from Lawson and Hanson [1]. Given a matrix A and vector b, <code>nnls(A, b)</code> computes:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="min. || Ax - b ||_2
   x

 s.t. x[i] &gt;= 0 forall i
"><pre><code>min. || Ax - b ||_2
   x

 s.t. x[i] &gt;= 0 forall i
</code></pre></div>
<p>The code contained here is a direct port of the original Fortran code to Julia.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = randn(100, 200)
b = randn(100)
x = nnls(A, b)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>, <span class="pl-c1">200</span>)
b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>)
x <span class="pl-k">=</span> <span class="pl-c1">nnls</span>(A, b)</pre></div>
<h1><a id="user-content-reducing-memory-allocation" class="anchor" aria-hidden="true" href="#reducing-memory-allocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reducing memory allocation</h1>
<p>The NNLS implementation (and the Fortran code on which it is based) have been implemented to allocate as little memory as possible. If you want direct control over the memory usage, you can pre-allocate an <code>NNLSWorkspace</code> which will hold all data used in the NNLS algorithm:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = randn(100, 200)
b = randn(100)

work = NNLSWorkspace(A, b)
solve!(work)
@show work.x
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>, <span class="pl-c1">200</span>)
b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>)

work <span class="pl-k">=</span> <span class="pl-c1">NNLSWorkspace</span>(A, b)
<span class="pl-c1">solve!</span>(work)
<span class="pl-c1">@show</span> work<span class="pl-k">.</span>x</pre></div>
<p>The call to <code>solve!(work)</code> should allocate no memory. You can re-use the same workspace multiple times:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A2 = randn(100, 200)
b2 = randn(100)

load!(work, A2, b2)
solve!(work)
@show work.x
"><pre>A2 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>, <span class="pl-c1">200</span>)
b2 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>)

<span class="pl-c1">load!</span>(work, A2, b2)
<span class="pl-c1">solve!</span>(work)
<span class="pl-c1">@show</span> work<span class="pl-k">.</span>x</pre></div>
<p>If <code>A2</code> and <code>b2</code> match the size of the arrays <code>A</code> and <code>b</code> used to create the workspace, then <code>load!(work, A2, b2)</code> will not allocate. If they do not match, then the workspace will be resized and some memory will be allocated.</p>
<h1><a id="user-content-solving-quadratic-programs" class="anchor" aria-hidden="true" href="#solving-quadratic-programs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solving Quadratic Programs</h1>
<p>The NNLS approach can also be used to solve Quadratic Programs, using the approach from section II of  Bemporad, <em>A quadratic programming algorithm based on nonnegative least squares with applications to embedded model predictive control</em>, IEEE Transactions on Automatic Control, 2016.</p>
<p>The problem must be of the form:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Minimize 1/2 z' Q z + c' z
Subject to G z &lt;= g
"><pre><code>Minimize 1/2 z' Q z + c' z
Subject to G z &lt;= g
</code></pre></div>
<p>The <code>QP</code> struct holds all of the relevant matrices:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="qp = QP(Q, c, G, g)
"><pre>qp <span class="pl-k">=</span> <span class="pl-c1">QP</span>(Q, c, G, g)</pre></div>
<p>and a <code>QPWorkspace</code> allocates all of the scratch workspace necessary to solve the QP:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="work = QPWorkspace(qp)
"><pre>work <span class="pl-k">=</span> <span class="pl-c1">QPWorkspace</span>(qp)</pre></div>
<p>Solving a QP returns the primal solution <code>z</code> and dual solution <code>\lambda</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="z, 位 = solve!(work)
"><pre>z, 位 <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(work)</pre></div>
<p>You can check the solution status by looking at <code>work.status</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert work.status == :Optimal
"><pre><span class="pl-c1">@assert</span> work<span class="pl-k">.</span>status <span class="pl-k">==</span> <span class="pl-c1">:Optimal</span></pre></div>
<p>The function <code>check_optimality_conditions</code> checks violation of the KKT optimality conditions for a given problem and solution. It should return a value close to zero for a feasible &amp; optimal solution:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert check_optimality_conditions(qp, z, 位) &lt;= 1e-6
"><pre><span class="pl-c1">@assert</span> <span class="pl-c1">check_optimality_conditions</span>(qp, z, 位) <span class="pl-k">&lt;=</span> <span class="pl-c1">1e-6</span></pre></div>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<p>[1] Lawson, C.L. and R.J. Hanson, Solving Least-Squares Problems, Prentice-Hall, Chapter 23, p. 161, 1974</p>
</article></div>