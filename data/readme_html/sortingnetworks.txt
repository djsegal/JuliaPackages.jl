<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sortingnetworksjl" class="anchor" aria-hidden="true" href="#sortingnetworksjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SortingNetworks.jl</h1>
<p>Sort 1..25 values with conditional swaps.   <a href="https://travis-ci.org/JeffreySarnoff/SortingNetworks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1ebd9c0472e90b7e30f1d6e4d0f486b792b8bd07/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f536f7274696e674e6574776f726b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/SortingNetworks.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h5><a id="user-content-copyright-2017-by-jeffrey-sarnoff" class="anchor" aria-hidden="true" href="#copyright-2017-by-jeffrey-sarnoff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Copyright ©2017 by Jeffrey Sarnoff.</h5>
<hr>
<p>Sorting networks that process 1,2,..25 values are given.<br>
These sorting networks should minimize conditional swaps.<br>
The first sixteen are known to minimize conditional swaps.</p>
<p>Values may be given with the args  <code>swapsort(x1::T, .., xn::T)::NTuple{n,T}</code><br>
Values may be given using a tuple  <code>swapsort(tup::NTuple{n,T})::NTuple{n,T}</code><br>
These sorts return a tuple of values sorted in ascending order.</p>
<h4><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h4>
<p><code>Pkg.add("SortingNetworks")</code></p>
<h4><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Use</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SortingNetworks

jumble <span class="pl-k">=</span> (<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)
sorted <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)

ascending <span class="pl-k">=</span> <span class="pl-c1">swapsort</span>(<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)
ascending <span class="pl-k">==</span> sorted

ascending <span class="pl-k">==</span> <span class="pl-c1">swapsort</span>(jumble)
ascending <span class="pl-k">==</span> sorted</pre></div>
<p>With v0.6-dev, timing sort([a,b,..]) relative to swapsort(a,b,...),<br>
I got 15x for 4 Ints, 11x for 8 Ints, 5.75x for 16 Ints</p>
<h5><a id="user-content-acknowlegement" class="anchor" aria-hidden="true" href="#acknowlegement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>acknowlegement</h5>
<p>Jan Weidner provided <strong>provably correct</strong> code to test each implementation.</p>
</article></div>