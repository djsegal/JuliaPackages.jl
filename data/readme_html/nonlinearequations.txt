<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nonlinearequationsjl-a-tool-for-automatically-differentiating-systems-of-nonlinear-equations" class="anchor" aria-hidden="true" href="#nonlinearequationsjl-a-tool-for-automatically-differentiating-systems-of-nonlinear-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NonlinearEquations.jl: A tool for automatically differentiating systems of nonlinear equations</h1>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">NonlinearEquations.jl is a <a href="http://julialang.org/" rel="nofollow">Julia</a> module that includes automatically differentiates systems of nonlinear equations, producing sparse Jacobians. Consider a simple example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import NonlinearEquations
import SparseArrays#the code generated by NonlinearEquations will require SparseArrays

@NonlinearEquations.equations function f(x, a, b)
	NonlinearEquations.setnumequations(2)#there  will be 2 equations
	NonlinearEquations.addterm(1, a[1] * x[1])#add a term to the first equation
	NonlinearEquations.addterm(1, b[1] * x[2])#add another term to the first equation
	NonlinearEquations.addterm(2, a[2] * x[1] + b[2] * x[2])#add a couple terms to the second equation at once
end"><pre><span class="pl-k">import</span> NonlinearEquations
<span class="pl-k">import</span> SparseArrays<span class="pl-c"><span class="pl-c">#</span>the code generated by NonlinearEquations will require SparseArrays</span>

<span class="pl-c1">@NonlinearEquations</span><span class="pl-k">.</span>equations <span class="pl-k">function</span> <span class="pl-en">f</span>(x, a, b)
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">setnumequations</span>(<span class="pl-c1">2</span>)<span class="pl-c"><span class="pl-c">#</span>there  will be 2 equations</span>
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">addterm</span>(<span class="pl-c1">1</span>, a[<span class="pl-c1">1</span>] <span class="pl-k">*</span> x[<span class="pl-c1">1</span>])<span class="pl-c"><span class="pl-c">#</span>add a term to the first equation</span>
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">addterm</span>(<span class="pl-c1">1</span>, b[<span class="pl-c1">1</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>])<span class="pl-c"><span class="pl-c">#</span>add another term to the first equation</span>
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">addterm</span>(<span class="pl-c1">2</span>, a[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>])<span class="pl-c"><span class="pl-c">#</span>add a couple terms to the second equation at once</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This code defines a system of two linear equations. The notation <code>NonlinearEquations.setnumequations(N)</code> tells NonlinearEquations the number of equations. You can think of each equation as starting out as <code>0=0</code>. We can then add terms to the left hand side of the equations with the notation <code>NonlinearEquations.addterm(equation_number, term)</code>. Note that any code outside the <code>NonlinearEquations.addterm</code> is not differentiated when computing Jacobians, so care must be taken to include everything that should be differentiated in there. The macro <code>@NonlinearEquations.equations</code> translates this description of the equations into a series of functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = randn(2)
a = randn(2)
b = randn(2)
#f_residuals basically plugs the numbers into the equations and sees how they differ from 0
@show f_residuals(x, a, b) == [a[1] * x[1] + b[1] * x[2], a[2] * x[1] + b[2] * x[2]]
#f_x computes the jacobian of f_residuals with respect to x
@show f_x(x, a, b) == [a[1] b[1]; a[2] b[2]]
#the focus of the package is on large, sparse systems of equations, so the type of f_x(x, a, b) is a sparse matrix:
@show typeof(f_x(x, a, b))
#f_a computes the jacobian of f_residuals with respect to a
@show f_a(x, a, b) == [x[1] 0; 0 x[1]]
#f_b computes the jacobian of f_residuals with respect to b
@show f_b(x, a, b) == [x[2] 0; 0 x[2]]"><pre>x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)
a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)
b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span>f_residuals basically plugs the numbers into the equations and sees how they differ from 0</span>
<span class="pl-c1">@show</span> <span class="pl-c1">f_residuals</span>(x, a, b) <span class="pl-k">==</span> [a[<span class="pl-c1">1</span>] <span class="pl-k">*</span> x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b[<span class="pl-c1">1</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>], a[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>]]
<span class="pl-c"><span class="pl-c">#</span>f_x computes the jacobian of f_residuals with respect to x</span>
<span class="pl-c1">@show</span> <span class="pl-c1">f_x</span>(x, a, b) <span class="pl-k">==</span> [a[<span class="pl-c1">1</span>] b[<span class="pl-c1">1</span>]; a[<span class="pl-c1">2</span>] b[<span class="pl-c1">2</span>]]
<span class="pl-c"><span class="pl-c">#</span>the focus of the package is on large, sparse systems of equations, so the type of f_x(x, a, b) is a sparse matrix:</span>
<span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">f_x</span>(x, a, b))
<span class="pl-c"><span class="pl-c">#</span>f_a computes the jacobian of f_residuals with respect to a</span>
<span class="pl-c1">@show</span> <span class="pl-c1">f_a</span>(x, a, b) <span class="pl-k">==</span> [x[<span class="pl-c1">1</span>] <span class="pl-c1">0</span>; <span class="pl-c1">0</span> x[<span class="pl-c1">1</span>]]
<span class="pl-c"><span class="pl-c">#</span>f_b computes the jacobian of f_residuals with respect to b</span>
<span class="pl-c1">@show</span> <span class="pl-c1">f_b</span>(x, a, b) <span class="pl-k">==</span> [x[<span class="pl-c1">2</span>] <span class="pl-c1">0</span>; <span class="pl-c1">0</span> x[<span class="pl-c1">2</span>]]</pre></div>
<p dir="auto">NonlinearEquations can be viewed as an alternative to <a href="https://github.com/JuliaDiff/SparseDiffTools.jl">SparseDiffTools</a>. NonlinearEquations uses a source-to-source translation approach, whereas SparseDiffTools uses a graph coloring approach. This means the "time to first Jacobian" is faster and appears to scale better for NonlinearEquations than SparseDiffTools:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/OrchardLANL/NonlinearEquations.jl/master/examples/sparse_diff_tools_comparison/laplacian.png"><img src="https://raw.githubusercontent.com/OrchardLANL/NonlinearEquations.jl/master/examples/sparse_diff_tools_comparison/laplacian.png" alt="speed comparison" style="max-width: 100%;"></a></p>
<p dir="auto">The above comparison was for the Laplacian example in SparseDiffTools' <a href="https://github.com/JuliaDiff/SparseDiffTools.jl/blob/25a276b7528e14e683b90df61c962748386d006d/README.md">README</a>. To implement this example with NonlinearEquations, we would write:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@NonlinearEquations.equations function gw1d(h)
	NonlinearEquations.setnumequations(length(h))
	NonlinearEquations.addterm(1, -2 * h[1] + h[2])
	for i = 2:length(h) - 1
		NonlinearEquations.addterm(i, h[i - 1] - 2 * h[i] + h[i + 1])
	end
	NonlinearEquations.addterm(length(h), -2 * h[end] + h[end - 1])
end"><pre><span class="pl-c1">@NonlinearEquations</span><span class="pl-k">.</span>equations <span class="pl-k">function</span> <span class="pl-en">gw1d</span>(h)
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">setnumequations</span>(<span class="pl-c1">length</span>(h))
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">addterm</span>(<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">*</span> h[<span class="pl-c1">1</span>] <span class="pl-k">+</span> h[<span class="pl-c1">2</span>])
	<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">length</span>(h) <span class="pl-k">-</span> <span class="pl-c1">1</span>
		NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">addterm</span>(i, h[i <span class="pl-k">-</span> <span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> h[i] <span class="pl-k">+</span> h[i <span class="pl-k">+</span> <span class="pl-c1">1</span>])
	<span class="pl-k">end</span>
	NonlinearEquations<span class="pl-k">.</span><span class="pl-c1">addterm</span>(<span class="pl-c1">length</span>(h), <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">*</span> h[<span class="pl-c1">end</span>] <span class="pl-k">+</span> h[<span class="pl-c1">end</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>])
<span class="pl-k">end</span></pre></div>
<p dir="auto">The <a href="https://github.com/OrchardLANL/NonlinearEquations.jl/tree/master/examples">examples</a> illustrate more complex behavior. It is also used in the <a href="https://github.com/OrchardLANL/DPFEHM.jl">DPFEHM</a> subsurface flow simulator.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">NonlinearEquations.jl is provided under a BSD style license. See LICENSE.md file for the full text.</p>
<p dir="auto">This package is part of the Orchard suite, known internally as C20086 Orchard.</p>
<h2 dir="auto"><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author</h2>
<p dir="auto">Daniel O'Malley, <a href="mailto:omalled@lanl.gov">omalled@lanl.gov</a></p>
</article></div>