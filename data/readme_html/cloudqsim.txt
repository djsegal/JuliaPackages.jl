<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cloudqsim" class="anchor" aria-hidden="true" href="#cloudqsim"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CloudQSim</h1>
<p dir="auto"><a href="https://github.com/CloudQuantumSim/CloudQSim.jl/actions"><img src="https://github.com/CloudQuantumSim/CloudQSim.jl/workflows/CI/badge.svg" alt="Build status (Github Actions)" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add CloudQSim"><pre class="notranslate"><code>pkg&gt; add CloudQSim
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">CloudQSim allows to calculate evolution of observables for quantum hamiltonians.
Any diagonal observable is supported. An observable is defined by a vector that
maps each quantum state to the observable value.</p>
<p dir="auto">Parameters:</p>
<ul dir="auto">
<li><code>hamiltonians</code> - a Bloqade.jl hamiltonian</li>
<li><code>time_points</code> - number of poinst in time when observables are evaluated</li>
<li><code>observables</code> - Vector of observables to evaluate</li>
<li><code>clconf</code> - <code>CloudQSim.CloudConfig</code> specifies the servers to use</li>
<li><code>subspace_radius</code> (optional keyword) - used to generate subspace for faster
evolution</li>
</ul>
<h3 dir="auto"><a id="user-content-minimal-example" class="anchor" aria-hidden="true" href="#minimal-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimal example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BloqadeExpr, BloqadeLattices, BloqadeWaveforms
import CloudQSim

nsites = 10
atoms = generate_sites(ChainLattice(), nsites, scale = 5.74)
T_end = 1.
Δ = piecewise_linear(; clocks = [0, T_end], values = [0., 0.])
ϕ = piecewise_constant(; clocks = [0, T_end], values = [0.])
Ω = piecewise_linear(; clocks = [0, T_end], values = [2π, 2π])
h = rydberg_h(atoms; Ω = Ω, Δ = Δ, ϕ = ϕ)

clconf = CloudQSim.CloudConfig()
CloudQSim.add_server!(clconf, &quot;cloudqs.lykov.tech&quot;, 7700)

qstates = 0:2^nsites-1
isodd = [x%2 for x in qstates]
rydberg = [Base.count_ones(x) for x in qstates]
observables = [isodd, rydberg]
time_points = 10
data = CloudQSim.cloud_simulate(h, time_points, observables, clconf)"><pre><span class="pl-k">using</span> BloqadeExpr, BloqadeLattices, BloqadeWaveforms
<span class="pl-k">import</span> CloudQSim

nsites <span class="pl-k">=</span> <span class="pl-c1">10</span>
atoms <span class="pl-k">=</span> <span class="pl-c1">generate_sites</span>(<span class="pl-c1">ChainLattice</span>(), nsites, scale <span class="pl-k">=</span> <span class="pl-c1">5.74</span>)
T_end <span class="pl-k">=</span> <span class="pl-c1">1.</span>
Δ <span class="pl-k">=</span> <span class="pl-c1">piecewise_linear</span>(; clocks <span class="pl-k">=</span> [<span class="pl-c1">0</span>, T_end], values <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>])
ϕ <span class="pl-k">=</span> <span class="pl-c1">piecewise_constant</span>(; clocks <span class="pl-k">=</span> [<span class="pl-c1">0</span>, T_end], values <span class="pl-k">=</span> [<span class="pl-c1">0.</span>])
Ω <span class="pl-k">=</span> <span class="pl-c1">piecewise_linear</span>(; clocks <span class="pl-k">=</span> [<span class="pl-c1">0</span>, T_end], values <span class="pl-k">=</span> [<span class="pl-c1">2</span>π, <span class="pl-c1">2</span>π])
h <span class="pl-k">=</span> <span class="pl-c1">rydberg_h</span>(atoms; Ω <span class="pl-k">=</span> Ω, Δ <span class="pl-k">=</span> Δ, ϕ <span class="pl-k">=</span> ϕ)

clconf <span class="pl-k">=</span> CloudQSim<span class="pl-k">.</span><span class="pl-c1">CloudConfig</span>()
CloudQSim<span class="pl-k">.</span><span class="pl-c1">add_server!</span>(clconf, <span class="pl-s"><span class="pl-pds">"</span>cloudqs.lykov.tech<span class="pl-pds">"</span></span>, <span class="pl-c1">7700</span>)

qstates <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">^</span>nsites<span class="pl-k">-</span><span class="pl-c1">1</span>
isodd <span class="pl-k">=</span> [x<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> qstates]
rydberg <span class="pl-k">=</span> [Base<span class="pl-k">.</span><span class="pl-c1">count_ones</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> qstates]
observables <span class="pl-k">=</span> [isodd, rydberg]
time_points <span class="pl-k">=</span> <span class="pl-c1">10</span>
data <span class="pl-k">=</span> CloudQSim<span class="pl-k">.</span><span class="pl-c1">cloud_simulate</span>(h, time_points, observables, clconf)</pre></div>
<p dir="auto">See <code>examples/</code> folder for more usage.</p>
</article></div>