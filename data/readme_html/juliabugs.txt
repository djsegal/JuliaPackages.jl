<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-juliabugsjl" class="anchor" aria-hidden="true" href="#juliabugsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaBUGS.jl</h1>
<p dir="auto">A modern implementation of the BUGS language in Julia.</p>
<h2 dir="auto"><a id="user-content-caution" class="anchor" aria-hidden="true" href="#caution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caution!</h2>
<p dir="auto">This is still a work in progress and may not be ready for serious use.</p>
<h2 dir="auto"><a id="user-content-example-logistic-regression-with-random-effects" class="anchor" aria-hidden="true" href="#example-logistic-regression-with-random-effects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Logistic Regression with Random Effects</h2>
<p dir="auto">We will use the <a href="https://chjackson.github.io/openbugsdoc/Examples/Seeds.html" rel="nofollow">Seeds</a> model for demonstration.
The example concerns the proportion of seeds that germinated on each of 21 plates. The data is (rewritten in Julia's NamedTuple)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data = (
    r = [10, 23, 23, 26, 17, 5, 53, 55, 32, 46, 10, 8, 10, 8, 23, 0, 3, 22, 15, 32, 3],
    n = [39, 62, 81, 51, 39, 6, 74, 72, 51, 79, 13, 16, 30, 28, 45, 4, 12, 41, 30, 51, 7],
    x1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    x2 = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    N = 21,
)"><pre>data <span class="pl-k">=</span> (
    r <span class="pl-k">=</span> [<span class="pl-c1">10</span>, <span class="pl-c1">23</span>, <span class="pl-c1">23</span>, <span class="pl-c1">26</span>, <span class="pl-c1">17</span>, <span class="pl-c1">5</span>, <span class="pl-c1">53</span>, <span class="pl-c1">55</span>, <span class="pl-c1">32</span>, <span class="pl-c1">46</span>, <span class="pl-c1">10</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>, <span class="pl-c1">8</span>, <span class="pl-c1">23</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">22</span>, <span class="pl-c1">15</span>, <span class="pl-c1">32</span>, <span class="pl-c1">3</span>],
    n <span class="pl-k">=</span> [<span class="pl-c1">39</span>, <span class="pl-c1">62</span>, <span class="pl-c1">81</span>, <span class="pl-c1">51</span>, <span class="pl-c1">39</span>, <span class="pl-c1">6</span>, <span class="pl-c1">74</span>, <span class="pl-c1">72</span>, <span class="pl-c1">51</span>, <span class="pl-c1">79</span>, <span class="pl-c1">13</span>, <span class="pl-c1">16</span>, <span class="pl-c1">30</span>, <span class="pl-c1">28</span>, <span class="pl-c1">45</span>, <span class="pl-c1">4</span>, <span class="pl-c1">12</span>, <span class="pl-c1">41</span>, <span class="pl-c1">30</span>, <span class="pl-c1">51</span>, <span class="pl-c1">7</span>],
    x1 <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>],
    x2 <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>],
    N <span class="pl-k">=</span> <span class="pl-c1">21</span>,
)</pre></div>
<p dir="auto">where <code>r[i]</code> is the number of germinated seeds and <code>n[i]</code> is the total number of the seeds on the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$i$</math-renderer>-th plate.
The model is constructed such that, let <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$p_i$</math-renderer> be the probability of germination on the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$i$</math-renderer>-th plate,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$$
\begin{aligned}
r_i &amp;\sim \operatorname{Binomial}(p_i, n_i) \\
\operatorname{logit}(p_i) &amp;\sim \alpha_0 + \alpha_1 x_{1 i} + \alpha_2 x_{2i} + \alpha_{12} x_{1i} x_{2i} + b_{i} \\
b_i &amp;\sim \operatorname{Normal}(0, \tau)
\end{aligned}
$$</math-renderer></p>
<p dir="auto">where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$x_{1i}$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$x_{2i}$</math-renderer> are the seed type and root extract of the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="3c961924b91a0386491c37dc5898bd60">$i$</math-renderer>-th plate.<br>
The original BUGS program for the model is</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="model
{
    for( i in 1 : N ) {
        r[i] ~ dbin(p[i],n[i])
        b[i] ~ dnorm(0.0,tau)
        logit(p[i]) &lt;- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +
        alpha12 * x1[i] * x2[i] + b[i]
    }
    alpha0 ~ dnorm(0.0,1.0E-6)
    alpha1 ~ dnorm(0.0,1.0E-6)
    alpha2 ~ dnorm(0.0,1.0E-6)
    alpha12 ~ dnorm(0.0,1.0E-6)
    tau ~ dgamma(0.001,0.001)
    sigma &lt;- 1 / sqrt(tau)
}"><pre class="notranslate"><code>model
{
    for( i in 1 : N ) {
        r[i] ~ dbin(p[i],n[i])
        b[i] ~ dnorm(0.0,tau)
        logit(p[i]) &lt;- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +
        alpha12 * x1[i] * x2[i] + b[i]
    }
    alpha0 ~ dnorm(0.0,1.0E-6)
    alpha1 ~ dnorm(0.0,1.0E-6)
    alpha2 ~ dnorm(0.0,1.0E-6)
    alpha12 ~ dnorm(0.0,1.0E-6)
    tau ~ dgamma(0.001,0.001)
    sigma &lt;- 1 / sqrt(tau)
}
</code></pre></div>
<h2 dir="auto">
<a id="user-content-modeling-language" class="anchor" aria-hidden="true" href="#modeling-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Modeling Language</h2>
<p dir="auto">Language References:</p>
<ul dir="auto">
<li><a href="https://www.multibugs.org/documentation/latest/" rel="nofollow">MultiBUGS</a></li>
<li><a href="https://chjackson.github.io/openbugsdoc/Manuals/ModelSpecification.html" rel="nofollow">OpenBUGS</a></li>
</ul>
<h3 dir="auto">
<a id="user-content-writing-model-in-julia" class="anchor" aria-hidden="true" href="#writing-model-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing Model in Julia</h3>
<p dir="auto">We provide a macro solution which allows users to write down model definitions using Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@bugsast begin
    for i in 1:N
        r[i] ~ dbin(p[i],n[i])
        b[i] ~ dnorm(0.0,tau)
        p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])
    end
    alpha0 ~ dnorm(0.0,1.0E-6)
    alpha1 ~ dnorm(0.0,1.0E-6)
    alpha2 ~ dnorm(0.0,1.0E-6)
    alpha12 ~ dnorm(0.0,1.0E-6)
    tau ~ dgamma(0.001,0.001)
    sigma = 1 / sqrt(tau)
end"><pre><span class="pl-c1">@bugsast</span> <span class="pl-k">begin</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N
        r[i] <span class="pl-k">~</span> <span class="pl-c1">dbin</span>(p[i],n[i])
        b[i] <span class="pl-k">~</span> <span class="pl-c1">dnorm</span>(<span class="pl-c1">0.0</span>,tau)
        p[i] <span class="pl-k">=</span> <span class="pl-c1">logistic</span>(alpha0 <span class="pl-k">+</span> alpha1 <span class="pl-k">*</span> x1[i] <span class="pl-k">+</span> alpha2 <span class="pl-k">*</span> x2[i] <span class="pl-k">+</span> alpha12 <span class="pl-k">*</span> x1[i] <span class="pl-k">*</span> x2[i] <span class="pl-k">+</span> b[i])
    <span class="pl-k">end</span>
    alpha0 <span class="pl-k">~</span> <span class="pl-c1">dnorm</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0E-6</span>)
    alpha1 <span class="pl-k">~</span> <span class="pl-c1">dnorm</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0E-6</span>)
    alpha2 <span class="pl-k">~</span> <span class="pl-c1">dnorm</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0E-6</span>)
    alpha12 <span class="pl-k">~</span> <span class="pl-c1">dnorm</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0E-6</span>)
    tau <span class="pl-k">~</span> <span class="pl-c1">dgamma</span>(<span class="pl-c1">0.001</span>,<span class="pl-c1">0.001</span>)
    sigma <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> <span class="pl-c1">sqrt</span>(tau)
<span class="pl-k">end</span></pre></div>
<p dir="auto">BUGS syntax carries over almost one-to-one to Julia.
The only change is regarding the link functions in logical assignments.
Because Julia uses the "function call on LHS"-like syntax as a shorthand for function definition, BUGS' link function syntax can be unidiomatic and confusing.
We adopt a more Julian syntax as demonstrated in the model definition above: instead of calling the link function, we call the inverse link function from the RHS. However, the Julian link function semantics internally is equivalent to the BUGS.</p>
<h3 dir="auto">
<a id="user-content-support-for-lagacy-bugs-programs" class="anchor" aria-hidden="true" href="#support-for-lagacy-bugs-programs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Support for Lagacy BUGS Programs</h3>
<p dir="auto">We also provide a string macro <code>bugsmodel</code> to work with original (R-like) BUGS syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bugsmodel&quot;&quot;&quot;
    for( i in 1 : N ) {
        r[i] ~ dbin(p[i],n[i])
        b[i] ~ dnorm(0.0,tau)
        logit(p[i]) &lt;- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +
        alpha12 * x1[i] * x2[i] + b[i]
    }
    alpha0 ~ dnorm(0.0,1.0E-6)
    alpha1 ~ dnorm(0.0,1.0E-6)
    alpha2 ~ dnorm(0.0,1.0E-6)
    alpha12 ~ dnorm(0.0,1.0E-6)
    tau ~ dgamma(0.001,0.001)
    sigma &lt;- 1 / sqrt(tau)
&quot;&quot;&quot;"><pre><span class="pl-s"><span class="pl-pds"><span class="pl-c1">bugsmodel</span>"""</span></span>
<span class="pl-s">    for( i in 1 : N ) {</span>
<span class="pl-s">        r[i] ~ dbin(p[i],n[i])</span>
<span class="pl-s">        b[i] ~ dnorm(0.0,tau)</span>
<span class="pl-s">        logit(p[i]) &lt;- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +</span>
<span class="pl-s">        alpha12 * x1[i] * x2[i] + b[i]</span>
<span class="pl-s">    }</span>
<span class="pl-s">    alpha0 ~ dnorm(0.0,1.0E-6)</span>
<span class="pl-s">    alpha1 ~ dnorm(0.0,1.0E-6)</span>
<span class="pl-s">    alpha2 ~ dnorm(0.0,1.0E-6)</span>
<span class="pl-s">    alpha12 ~ dnorm(0.0,1.0E-6)</span>
<span class="pl-s">    tau ~ dgamma(0.001,0.001)</span>
<span class="pl-s">    sigma &lt;- 1 / sqrt(tau)</span>
<span class="pl-s"><span class="pl-pds">"""</span></span></pre></div>
<p dir="auto">This is simply the unmodified code in the <code>model { }</code> enclosure.<br>
We encourage users to write new program using the Julia-native syntax, because of better debuggability and perks like syntax highlighting.</p>
<h3 dir="auto">
<a id="user-content-using-self-defined-functions-and-distributions" class="anchor" aria-hidden="true" href="#using-self-defined-functions-and-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using Self-defined Functions and Distributions</h3>
<p dir="auto">User can register their own functions and distributions with the macros</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; # Should be restricted to pure function that do simple operations
@register_function function f(x)
    return x + 1
end

julia&gt; JuliaBUGS.f(2)
3"><pre lang="julia-repo" class="notranslate"><code>julia&gt; # Should be restricted to pure function that do simple operations
@register_function function f(x)
    return x + 1
end

julia&gt; JuliaBUGS.f(2)
3
</code></pre></div>
<p dir="auto">, and</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; # Need to return a Distributions.Distribution 
@register_distribution function d(x) 
    return Normal(0, x^2)
end 

julia&gt; JuliaBUGS.d(1)
Distributions.Normal{Float64}(μ=0.0, σ=1.0)"><pre lang="julia-repo" class="notranslate"><code>julia&gt; # Need to return a Distributions.Distribution 
@register_distribution function d(x) 
    return Normal(0, x^2)
end 

julia&gt; JuliaBUGS.d(1)
Distributions.Normal{Float64}(μ=0.0, σ=1.0)
</code></pre></div>
<p dir="auto">After registering the function or distributions, they can be used just like any other functions or distributions provided by BUGS.</p>
<p dir="auto">Please use these macros with caution to avoid causing name clashes. Such name clashes would override default BUGS primitives and cause breaking behaviours.</p>
<h2 dir="auto">
<a id="user-content-compilation" class="anchor" aria-hidden="true" href="#compilation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compilation</h2>
<p dir="auto">For now, the <code>compile</code> function will create a <code>BUGSLogDensityProblem</code>, which is fully conform to <a href="https://github.com/tpapp/LogDensityProblems.jl"><code>LogDensityProblems.jl</code></a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="compile(model_def::Expr, data::Dict, initializations::Dict),"><pre><span class="pl-c1">compile</span>(model_def<span class="pl-k">::</span><span class="pl-c1">Expr</span>, data<span class="pl-k">::</span><span class="pl-c1">Dict</span>, initializations<span class="pl-k">::</span><span class="pl-c1">Dict</span>),</pre></div>
<p dir="auto">which takes three arguments:</p>
<ul dir="auto">
<li>the first argument is the output of <code>@bugsast</code> or <code>bugsmodel</code>,</li>
<li>the second argument is the data</li>
<li>the third argument is the initializations of the parameters, in the case of <code>pumps</code> model, it is</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="initializaitons = Dict(:alpha =&gt; 1, :beta =&gt; 1)"><pre class="notranslate"><code>initializaitons = Dict(:alpha =&gt; 1, :beta =&gt; 1)
</code></pre></div>
<p dir="auto">then we can compile the model with the data and initializations,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = compile(model_def, data, initializations);
"><pre lang="julia-repo" class="notranslate"><code>julia&gt; p = compile(model_def, data, initializations);

</code></pre></div>
<h2 dir="auto">
<a id="user-content-inference" class="anchor" aria-hidden="true" href="#inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inference</h2>
<p dir="auto">For a differentiable model, we can use <a href="https://github.com/TuringLang/AdvancedHMC.jl"><code>AdvancedHMC.jl</code></a> to perform inference.
We can start with the setup exactly the same as the example on the <code>AdvancedHMC.jl</code> page:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AdvancedHMC
using ReverseDiff
using LogDensityProblems

D = LogDensityProblems.dimension(p)
n_samples, n_adapts = 2000, 1000

metric = DiagEuclideanMetric(D)
hamiltonian = Hamiltonian(metric, p, :ReverseDiff)

initial_ϵ = find_good_stepsize(hamiltonian, initial_θ)
integrator = Leapfrog(initial_ϵ)
proposal = NUTS{MultinomialTS, GeneralisedNoUTurn}(integrator)
adaptor = StanHMCAdaptor(MassMatrixAdaptor(metric), StepSizeAdaptor(0.8, integrator))

samples, stats = sample(hamiltonian, proposal, initial_θ, n_samples, adaptor, n_adapts; drop_warmup=true, progress=true);"><pre><span class="pl-k">using</span> AdvancedHMC
<span class="pl-k">using</span> ReverseDiff
<span class="pl-k">using</span> LogDensityProblems

D <span class="pl-k">=</span> LogDensityProblems<span class="pl-k">.</span><span class="pl-c1">dimension</span>(p)
n_samples, n_adapts <span class="pl-k">=</span> <span class="pl-c1">2000</span>, <span class="pl-c1">1000</span>

metric <span class="pl-k">=</span> <span class="pl-c1">DiagEuclideanMetric</span>(D)
hamiltonian <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>(metric, p, <span class="pl-c1">:ReverseDiff</span>)

initial_ϵ <span class="pl-k">=</span> <span class="pl-c1">find_good_stepsize</span>(hamiltonian, initial_θ)
integrator <span class="pl-k">=</span> <span class="pl-c1">Leapfrog</span>(initial_ϵ)
proposal <span class="pl-k">=</span> <span class="pl-c1">NUTS</span><span class="pl-c1">{MultinomialTS, GeneralisedNoUTurn}</span>(integrator)
adaptor <span class="pl-k">=</span> <span class="pl-c1">StanHMCAdaptor</span>(<span class="pl-c1">MassMatrixAdaptor</span>(metric), <span class="pl-c1">StepSizeAdaptor</span>(<span class="pl-c1">0.8</span>, integrator))

samples, stats <span class="pl-k">=</span> <span class="pl-c1">sample</span>(hamiltonian, proposal, initial_θ, n_samples, adaptor, n_adapts; drop_warmup<span class="pl-k">=</span><span class="pl-c1">true</span>, progress<span class="pl-k">=</span><span class="pl-c1">true</span>);</pre></div>
<p dir="auto">The variable <code>samples</code> contains variable values in the unconstrained space, we can use the function <code>JuliaBUGS.transform_samples</code> to get a dictionary mapping variable names to their sample values.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; alpha_0_samples = [JuliaBUGS.transform_samples(p, sample)[JuliaBUGS.Var(:alpha0)] for sample in samples]; 

julia&gt; mean(alpha_0_samples), std(alpha_0_samples) # Reference result: mean -0.5499, variance 0.1965
(-0.5432579688203603, 0.23682544392999907)"><pre lang="julia-repo" class="notranslate"><code>julia&gt; alpha_0_samples = [JuliaBUGS.transform_samples(p, sample)[JuliaBUGS.Var(:alpha0)] for sample in samples]; 

julia&gt; mean(alpha_0_samples), std(alpha_0_samples) # Reference result: mean -0.5499, variance 0.1965
(-0.5432579688203603, 0.23682544392999907)
</code></pre></div>
<p dir="auto">One can verify the inference result is coherent with BUGS' result for <a href="https://chjackson.github.io/openbugsdoc/Examples/Seeds.html" rel="nofollow">Seeds</a>.</p>
<h2 dir="auto">
<a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More Examples</h2>
<p dir="auto">We have transcribed all the examples from the first volume of the BUGS Examples (<a href="https://www.multibugs.org/examples/latest/VolumeI.html" rel="nofollow">origianl</a> and <a href="https://github.com/TuringLang/JuliaBUGS.jl/tree/master/src/BUGSExamples/Volume_I">transcribed</a>). All the programs and data are included, and they can be compiled in a similar way as we have demonstrated before.</p>
</article></div>