<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-smmjl-simulated-method-of-moments-for-julia" class="anchor" aria-hidden="true" href="#smmjl-simulated-method-of-moments-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SMM.jl: Simulated Method of Moments for Julia</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://floswald.github.io/SMM.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://floswald.github.io/SMM.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/floswald/SMM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b99eb3f0b0d6aa665d3965ede94b19b9aa92f6a38457f33b5df496115eb4ab37/68747470733a2f2f7472617669732d63692e6f72672f666c6f7377616c642f534d4d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/floswald/SMM.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/floswald/SMM.jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/f1305b4dcfe4c2859a4d916cde87304a7162b1706363ca32f56481203e461782/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f666c6f7377616c642f534d4d2e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/floswald/SMM.jl?branch=master&amp;svg=true" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p><em>Notice</em>: this package was previously called <em>MomentOpt.jl</em>.</p>
<p>This package provides a <code>Julia</code> infrastructure for <em><a href="http://en.wikipedia.org/wiki/Method_of_simulated_moments" rel="nofollow">Simulated Method of Moments</a></em> estimation, or other problems where we want to optimize a non-differentiable objective function. The setup is suitable for all kinds of <strong>likelihood-free estimators</strong> - in general, those require evaluating the objective at many regions. The user can supply their own algorithms for generating successive new parameter guesses. We provide a set of MCMC template algorithms. The code can be run in serial or on a cluster.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In your julia REPL, type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add SMM
"><pre>] add SMM</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p><a href="https://floswald.github.io/SMM.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p>Please check out a fully worked example in <a href="src/Examples.jl"><code>src/Examples.jl</code></a>.</p>
<p>Here is a working session comparing serial vs parallel performance on a test objective function. Notice that parallel performance hinges on the objective function being reasonably expensive to compute (at least 0.1 seconds per function evaluation) - otherwise the overhead from data transfer is just too high.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SMM
[ Info: Precompiling SMM [bc769cb7-f249-5bba-802a-79f18cb247ec]

julia&gt; x = SMM.serialNormal(2,200,slow = true)
[ Info: Starting estimation loop.
Progress: 100%|██████████████████████████████████████████████| Time: 0:01:05
┌ Warning: could not find 'filename' in algo.opts - not saving anything
└ @ SMM ~/.julia/dev/SMM/src/mopt/AlgoAbstract.jl:67
[ Info: Done with estimation after 1.1 minutes
summary(MA) = 3×5 DataFrame
 Row │ id     acc_rate   perc_exchanged  exchanged_most_with  best_val
     │ Int64  Float64    Float64         Int64                Float64
─────┼──────────────────────────────────────────────────────────────────
   1 │     1  0.0793651             5.5                    2  0.0023224
   2 │     2  0.0819672             8.5                    1  0.0126754
   3 │     3  0.115183              4.5                    2  0.0145625
(
BGP Algorithm with 3 BGPChains
============================

Algorithm
---------
Current iteration: 200
Number of params to estimate: 2
Number of moments to match: 2

, Plot{Plots.GRBackend() n=2}, Plot{Plots.GRBackend() n=3})

julia&gt; using Distributed

julia&gt; addprocs(2, exeflags=&quot;--project=.&quot;)  # you don't need the `exeflag` if you `add`ed the package regularly!
2-element Array{Int64,1}:
 2
 3

julia&gt; @everywhere using SMM

julia&gt; x = SMM.serialNormal(2,200,slow = true)
[ Info: Starting estimation loop.
Progress: 100%|█████████████████████████████████████████████| Time: 0:00:49
┌ Warning: could not find 'filename' in algo.opts - not saving anything
└ @ SMM ~/.julia/dev/SMM/src/mopt/AlgoAbstract.jl:67
[ Info: Done with estimation after 0.8 minutes
summary(MA) = 3×5 DataFrame
 Row │ id     acc_rate   perc_exchanged  exchanged_most_with  best_val
     │ Int64  Float64    Float64         Int64                Float64
─────┼───────────────────────────────────────────────────────────────────
   1 │     1  0.117347              2.0                    2  0.00246371
   2 │     2  0.0899471             5.5                    3  0.103399
   3 │     3  0.161458              4.0                    2  0.139263
(
BGP Algorithm with 3 BGPChains
============================

Algorithm
---------
Current iteration: 200
Number of params to estimate: 2
Number of moments to match: 2

, Plot{Plots.GRBackend() n=2}, Plot{Plots.GRBackend() n=3})
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SMM
[ Info<span class="pl-k">:</span> Precompiling SMM [bc769cb7<span class="pl-k">-</span>f249<span class="pl-k">-</span><span class="pl-c1">5</span>bba<span class="pl-k">-</span><span class="pl-c1">802</span>a<span class="pl-k">-</span><span class="pl-c1">79f18</span>cb247ec]

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> SMM<span class="pl-k">.</span><span class="pl-c1">serialNormal</span>(<span class="pl-c1">2</span>,<span class="pl-c1">200</span>,slow <span class="pl-k">=</span> <span class="pl-c1">true</span>)
[ Info<span class="pl-k">:</span> Starting estimation loop.
Progress<span class="pl-k">:</span> <span class="pl-c1">100</span><span class="pl-k">%</span><span class="pl-k">|</span>██████████████████████████████████████████████<span class="pl-k">|</span> Time<span class="pl-k">:</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">01</span><span class="pl-k">:</span><span class="pl-c1">05</span>
┌ Warning<span class="pl-k">:</span> could not find <span class="pl-s"><span class="pl-pds">'</span>filename<span class="pl-pds">'</span></span> <span class="pl-k">in</span> algo<span class="pl-k">.</span>opts <span class="pl-k">-</span> not saving anything
└ @ SMM <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>SMM<span class="pl-k">/</span>src<span class="pl-k">/</span>mopt<span class="pl-k">/</span>AlgoAbstract<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">67</span>
[ Info<span class="pl-k">:</span> Done with estimation after <span class="pl-c1">1.1</span> minutes
<span class="pl-en">summary</span>(MA) <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> DataFrame
 Row │ id     acc_rate   perc_exchanged  exchanged_most_with  best_val
     │ Int64  Float64    Float64         Int64                Float64
─────┼──────────────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>  <span class="pl-c1">0.0793651</span>             <span class="pl-c1">5.5</span>                    <span class="pl-c1">2</span>  <span class="pl-c1">0.0023224</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>  <span class="pl-c1">0.0819672</span>             <span class="pl-c1">8.5</span>                    <span class="pl-c1">1</span>  <span class="pl-c1">0.0126754</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>  <span class="pl-c1">0.115183</span>              <span class="pl-c1">4.5</span>                    <span class="pl-c1">2</span>  <span class="pl-c1">0.0145625</span>
(
BGP Algorithm with <span class="pl-c1">3</span> BGPChains
<span class="pl-k">===========================</span><span class="pl-k">=</span>

Algorithm
<span class="pl-k">---------</span>
Current iteration<span class="pl-k">:</span> <span class="pl-c1">200</span>
Number of params to estimate<span class="pl-k">:</span> <span class="pl-c1">2</span>
Number of moments to match<span class="pl-k">:</span> <span class="pl-c1">2</span>

, Plot{Plots<span class="pl-k">.</span><span class="pl-c1">GRBackend</span>() n<span class="pl-k">=</span><span class="pl-c1">2</span>}, Plot{Plots<span class="pl-k">.</span><span class="pl-c1">GRBackend</span>() n<span class="pl-k">=</span><span class="pl-c1">3</span>})

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>, exeflags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>--project=.<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> you don't need the `exeflag` if you `add`ed the package regularly!</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> SMM

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> SMM<span class="pl-k">.</span><span class="pl-c1">serialNormal</span>(<span class="pl-c1">2</span>,<span class="pl-c1">200</span>,slow <span class="pl-k">=</span> <span class="pl-c1">true</span>)
[ Info<span class="pl-k">:</span> Starting estimation loop.
Progress<span class="pl-k">:</span> <span class="pl-c1">100</span><span class="pl-k">%</span><span class="pl-k">|</span>█████████████████████████████████████████████<span class="pl-k">|</span> Time<span class="pl-k">:</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">49</span>
┌ Warning<span class="pl-k">:</span> could not find <span class="pl-s"><span class="pl-pds">'</span>filename<span class="pl-pds">'</span></span> <span class="pl-k">in</span> algo<span class="pl-k">.</span>opts <span class="pl-k">-</span> not saving anything
└ @ SMM <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>SMM<span class="pl-k">/</span>src<span class="pl-k">/</span>mopt<span class="pl-k">/</span>AlgoAbstract<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">67</span>
[ Info<span class="pl-k">:</span> Done with estimation after <span class="pl-c1">0.8</span> minutes
<span class="pl-en">summary</span>(MA) <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> DataFrame
 Row │ id     acc_rate   perc_exchanged  exchanged_most_with  best_val
     │ Int64  Float64    Float64         Int64                Float64
─────┼───────────────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>  <span class="pl-c1">0.117347</span>              <span class="pl-c1">2.0</span>                    <span class="pl-c1">2</span>  <span class="pl-c1">0.00246371</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>  <span class="pl-c1">0.0899471</span>             <span class="pl-c1">5.5</span>                    <span class="pl-c1">3</span>  <span class="pl-c1">0.103399</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>  <span class="pl-c1">0.161458</span>              <span class="pl-c1">4.0</span>                    <span class="pl-c1">2</span>  <span class="pl-c1">0.139263</span>
(
BGP Algorithm with <span class="pl-c1">3</span> BGPChains
<span class="pl-k">===========================</span><span class="pl-k">=</span>

Algorithm
<span class="pl-k">---------</span>
Current iteration<span class="pl-k">:</span> <span class="pl-c1">200</span>
Number of params to estimate<span class="pl-k">:</span> <span class="pl-c1">2</span>
Number of moments to match<span class="pl-k">:</span> <span class="pl-c1">2</span>

, Plot{Plots<span class="pl-k">.</span><span class="pl-c1">GRBackend</span>() n<span class="pl-k">=</span><span class="pl-c1">2</span>}, Plot{Plots<span class="pl-k">.</span><span class="pl-c1">GRBackend</span>() n<span class="pl-k">=</span><span class="pl-c1">3</span>})</pre></div>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>We encourage user contributions. Please submit a pull request for any improvements you would like to suggest, or a new algorithm you implemented.</p>
<p>New algorithms:</p>
<ul>
<li>You can model your algo on the basis of <code>src/AlgoBGP.jl</code> -</li>
<li>you need to implement the function <code>computeNextIteration!( algo )</code> for your <code>algo</code></li>
</ul>
<h2><a id="user-content-history" class="anchor" aria-hidden="true" href="#history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>History</h2>
<p>This package grew out of the <a href="https://github.com/tlamadon/mopt">R package <code>mopt</code></a>.</p>
<h2><a id="user-content-thanks-to-all-contributors" class="anchor" aria-hidden="true" href="#thanks-to-all-contributors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thanks to all Contributors!</h2>
<ul>
<li><a href="https://github.com/JulienPascal">Julien Pascal</a></li>
<li><a href="https://github.com/edoardociscato">Edoardo Ciscato</a></li>
</ul>
</article></div>