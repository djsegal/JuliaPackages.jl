<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-suppressor" class="anchor" aria-hidden="true" href="#suppressor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Suppressor</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaIO/Suppressor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a69eef847a06c445b3a88d5f6723bc6cf16a113fa07fa94fcc09114234cb5121/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f53757070726573736f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaIO/Suppressor.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://ci.appveyor.com/project/SalchiPapa/suppressor-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/f565bb61bfa73c4890421a06601f05acf5fec23fdae1d3534756ab5d0d807595/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f65337575716f6e38346b7439373430322f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/e3uuqon84kt97402/branch/master?svg=true" style="max-width: 100%;"></a> <a href="https://coveralls.io/github/JuliaIO/Suppressor.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a7ed4e7dc17ab52e01f640df775e54450ff15319b515878c204c035cc7fb62e1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961494f2f53757070726573736f722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="CoverAlls" data-canonical-src="https://coveralls.io/repos/github/JuliaIO/Suppressor.jl/badge.svg?branch=master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaIO/Suppressor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/98e07619bfce342f680c2a8e4326c70f4db39f18e2022b713c0b4bb5e25e442c/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f53757070726573736f722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/JuliaIO/Suppressor.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia macros for suppressing and/or capturing output (<code>stdout</code>), warnings (<code>stderr</code>) or both streams at the same time.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;Suppressor&quot;)"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Suppressor<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Suppressor

julia&gt; using Compat: @warn  # on 0.6

julia&gt; @suppress begin
           println(&quot;This string doesn't get printed!&quot;)
           @warn(&quot;This warning is ignored.&quot;)
       end

julia&gt; @suppress_out begin
           println(&quot;This string doesn't get printed!&quot;)
           @warn(&quot;This warning is important&quot;)
       end
┌ Warning: This warning is important
└ @ Main REPL[4]:3

julia&gt; @suppress_err begin
           println(&quot;This string gets printed!&quot;)
           @warn(&quot;This warning is unimportant&quot;)
       end
This string gets printed!

julia&gt; @suppress begin
           println(&quot;This string doesn't get printed!&quot;)
           @warn(&quot;This warning is ignored.&quot;)
           error(&quot;Remember that errors are still printed!&quot;)
       end
ERROR: Remember that errors are still printed!
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Suppressor

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Compat<span class="pl-k">:</span> <span class="pl-c1">@warn</span>  <span class="pl-c"><span class="pl-c">#</span> on 0.6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@suppress</span> <span class="pl-k">begin</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>This string doesn't get printed!<span class="pl-pds">"</span></span>)
           <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>This warning is ignored.<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@suppress_out</span> <span class="pl-k">begin</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>This string doesn't get printed!<span class="pl-pds">"</span></span>)
           <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>This warning is important<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
┌ Warning<span class="pl-k">:</span> This warning is important
└ @ Main REPL[<span class="pl-c1">4</span>]<span class="pl-k">:</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@suppress_err</span> <span class="pl-k">begin</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>This string gets printed!<span class="pl-pds">"</span></span>)
           <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>This warning is unimportant<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
This string gets printed!

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@suppress</span> <span class="pl-k">begin</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>This string doesn't get printed!<span class="pl-pds">"</span></span>)
           <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>This warning is ignored.<span class="pl-pds">"</span></span>)
           <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Remember that errors are still printed!<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
ERROR<span class="pl-k">:</span> Remember that errors are still printed!
</pre></div>
<p dir="auto">The <code>suppress</code> macros return whatever the given expression returns, but Suppressor also provides <code>@capture_out</code> and <code>@capture_err</code> macros that work similiarly to their <code>@suppress_</code> cousins except they return any output as a string:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; output = @capture_out begin
    println(&quot;should get captured, not printed&quot;)
end;

julia&gt; output == &quot;should get captured, not printed\n&quot;
true

julia&gt; output = @capture_err begin
    @warn(&quot;should get captured, not printed&quot;)
end;

julia&gt; output[1:56] == &quot;┌ Warning: should get captured, not printed\n└ @ Main&quot;
true
"><pre>julia<span class="pl-k">&gt;</span> output <span class="pl-k">=</span> <span class="pl-c1">@capture_out</span> <span class="pl-k">begin</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>should get captured, not printed<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> output <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>should get captured, not printed<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> output <span class="pl-k">=</span> <span class="pl-c1">@capture_err</span> <span class="pl-k">begin</span>
    <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>should get captured, not printed<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> output[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">56</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>┌ Warning: should get captured, not printed<span class="pl-cce">\n</span>└ @ Main<span class="pl-pds">"</span></span>
<span class="pl-c1">true</span>
</pre></div>
<p dir="auto"><em>NOTE: the following example only works on Julia 0.6; on later versions of Julia the color codes are never captured</em></p>
<p dir="auto">Often when capturing output for test purposes it's useful to control whether
color is enabled or not, so that you can compare with or without the color
escape characters regardless of whether the julia process has colors enabled or
disabled globally. You can use the <code>@color_output</code> macro for this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@color_output false begin
    output = @capture_err begin
        warn(&quot;should get captured, not printed&quot;)
    end
end
@test output == &quot;WARNING: should get captured, not printed\n&quot;

@color_output true begin
    output = @capture_err begin
        warn(&quot;should get captured, not printed&quot;)
    end
end
@test output == &quot;\e[1m\e[33mWARNING: \e[39m\e[22m\e[33mshould get captured, not printed\e[39m\n&quot;"><pre><span class="pl-c1">@color_output</span> <span class="pl-c1">false</span> <span class="pl-k">begin</span>
    output <span class="pl-k">=</span> <span class="pl-c1">@capture_err</span> <span class="pl-k">begin</span>
        <span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">"</span>should get captured, not printed<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">@test</span> output <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>WARNING: should get captured, not printed<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>

<span class="pl-c1">@color_output</span> <span class="pl-c1">true</span> <span class="pl-k">begin</span>
    output <span class="pl-k">=</span> <span class="pl-c1">@capture_err</span> <span class="pl-k">begin</span>
        <span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">"</span>should get captured, not printed<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">@test</span> output <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\e</span>[1m<span class="pl-cce">\e</span>[33mWARNING: <span class="pl-cce">\e</span>[39m<span class="pl-cce">\e</span>[22m<span class="pl-cce">\e</span>[33mshould get captured, not printed<span class="pl-cce">\e</span>[39m<span class="pl-cce">\n</span><span class="pl-pds">"</span></span></pre></div>
<h3 dir="auto"><a id="user-content-variable-scope" class="anchor" aria-hidden="true" href="#variable-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variable Scope</h3>
<p dir="auto">The macros in Suppressor.jl need to wrap the given expression in a <code>try...finally</code> block to make sure that everything is cleaned up correctly. This means that any variables introduced within the macro expression aren't in-scope afterwards. To work around this you can use <code>local</code> to introduce the variable before the block, for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="local x
output = @capture_out x = loudfunction()
println(x) # x is available here"><pre><span class="pl-k">local</span> x
output <span class="pl-k">=</span> <span class="pl-c1">@capture_out</span> x <span class="pl-k">=</span> <span class="pl-c1">loudfunction</span>()
<span class="pl-c1">println</span>(x) <span class="pl-c"><span class="pl-c">#</span> x is available here</span></pre></div>
</article></div>