<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-indexing" class="anchor" aria-hidden="true" href="#indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Indexing</h1>
<p dir="auto"><em>Generalized indexing for Julia</em></p>
<p dir="auto"><a href="https://github.com/andyferris/Indexing.jl/actions?query=workflow%3ACI"><img src="https://github.com/andyferris/Indexing.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/andyferris/Indexing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/840007bd26372188877f47926a2a4a1bd72f038c9a21f5fd2e75e7f3dcff00b1/687474703a2f2f636f6465636f762e696f2f6769746875622f616e64796665727269732f496e646578696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/andyferris/Indexing.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<hr>
<p dir="auto">This package defines functions for getting multiple indices out of dictionaries, tuples,
etc, extending this ability beyond <code>AbstractArray</code>.</p>
<p dir="auto">To acheive this, we introduce new functions and methods:</p>
<ul dir="auto">
<li><code>getindices(container, indices)</code> - generalizes <code>getindex(container, index)</code> to multiple indices.</li>
<li><code>setindices!(container, value, indices)</code> - generalizes <code>setindex!(container, value, index)</code> to multiple indices. The same <code>value</code> is set for
each index in <code>indices</code>.</li>
<li><code>view(container, indices)</code> - lazy versions of <code>getindices(container, indices)</code> defined for dictionaries.</li>
</ul>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">You can install Indexing via Julia's package manager:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(&quot;Indexing&quot;)

julia&gt; using Indexing

julia&gt; d = Dict(:a =&gt; &quot;Alice&quot;, :b =&gt; &quot;Bob&quot;, :c =&gt; &quot;Charlie&quot;)
Dict{Symbol,String} with 3 entries:
  :a =&gt; &quot;Alice&quot;
  :b =&gt; &quot;Bob&quot;
  :c =&gt; &quot;Charlie&quot;

julia&gt; getindices(d, [:a, :c]) # Preserves type/keys of index collection - an array of length 2
2-element Array{String,1}:
 &quot;Alice&quot;  
 &quot;Charlie&quot;

julia&gt; getindices(d, (:a, :c)) # Preserves type/keys of index collection - a tuple of length 2
(&quot;Alice&quot;, &quot;Charlie&quot;)

julia&gt; getindices(d, Dict(&quot;Wife&quot; =&gt; :a, &quot;Husband&quot; =&gt; :c)) # Preserves type/keys of index collection - a dictionary with keys &quot;Wife&quot; and &quot;Husband&quot;
Dict{String,String} with 2 entries:
  &quot;Wife&quot;    =&gt; &quot;Alice&quot;
  &quot;Husband&quot; =&gt; &quot;Charlie&quot;"><pre class="notranslate"><code>julia&gt; using Pkg

julia&gt; Pkg.add("Indexing")

julia&gt; using Indexing

julia&gt; d = Dict(:a =&gt; "Alice", :b =&gt; "Bob", :c =&gt; "Charlie")
Dict{Symbol,String} with 3 entries:
  :a =&gt; "Alice"
  :b =&gt; "Bob"
  :c =&gt; "Charlie"

julia&gt; getindices(d, [:a, :c]) # Preserves type/keys of index collection - an array of length 2
2-element Array{String,1}:
 "Alice"  
 "Charlie"

julia&gt; getindices(d, (:a, :c)) # Preserves type/keys of index collection - a tuple of length 2
("Alice", "Charlie")

julia&gt; getindices(d, Dict("Wife" =&gt; :a, "Husband" =&gt; :c)) # Preserves type/keys of index collection - a dictionary with keys "Wife" and "Husband"
Dict{String,String} with 2 entries:
  "Wife"    =&gt; "Alice"
  "Husband" =&gt; "Charlie"
</code></pre></div>
<p dir="auto">Similarly, <code>view</code> works as a lazy version of <code>getindices</code>, and <code>setindices!</code> works by
setting <em>the same</em> value to each specified index.</p>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h2>
<p dir="auto">This package is a work-in-progress. To complete the package, we need to:</p>
<ul dir="auto">
<li>Performance improvements and propagation of <code>@inbounds</code> annotations.</li>
</ul>
<h2 dir="auto"><a id="user-content-future-thoughts" class="anchor" aria-hidden="true" href="#future-thoughts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future thoughts</h2>
<p dir="auto">Perhaps these could be intergrated into future Julia syntax. One suggestion:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a[i]               --&gt; getindex(a, i)       # scalar only
a.[inds]           --&gt; getindices(a, inds)
a[i] = v           --&gt; setindex!(a, v, i)   # scalar only
a.[inds] = v       --&gt; setindices!(a, v, inds)
a[i] .= v          --&gt; broadcast!(identity, a[i], v)
a.[inds] .= values --&gt; broadcast!(identity, view(a, inds), values)"><pre>a[i]               <span class="pl-k">--&gt;</span> <span class="pl-c1">getindex</span>(a, i)       <span class="pl-c"><span class="pl-c">#</span> scalar only</span>
a.[inds]           <span class="pl-k">--&gt;</span> <span class="pl-c1">getindices</span>(a, inds)
a[i] <span class="pl-k">=</span> v           <span class="pl-k">--&gt;</span> <span class="pl-c1">setindex!</span>(a, v, i)   <span class="pl-c"><span class="pl-c">#</span> scalar only</span>
a.[inds] <span class="pl-k">=</span> v       <span class="pl-k">--&gt;</span> <span class="pl-c1">setindices!</span>(a, v, inds)
a[i] <span class="pl-k">.=</span> v          <span class="pl-k">--&gt;</span> <span class="pl-c1">broadcast!</span>(identity, a[i], v)
a.[inds] <span class="pl-k">.=</span> values <span class="pl-k">--&gt;</span> <span class="pl-c1">broadcast!</span>(identity, <span class="pl-c1">view</span>(a, inds), values)</pre></div>
<p dir="auto">Note the lack of <code>dotview</code> and <code>maybeview</code>. The last two could support dot-fusion on the RHS.
Also, the default for <code>a.[inds]</code> could potentially move to <code>view</code>.</p>
</article></div>