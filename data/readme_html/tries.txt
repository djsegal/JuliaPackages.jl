<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tries" class="anchor" aria-hidden="true" href="#tries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tries</h1>

<p dir="auto"><a href="https://gkappler.github.io/Tries.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/github/gkappler/Tries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/98e449731eed4eef8f311eaed78e4c809198d3bcb99ffec56b7e8f775b1b6758/68747470733a2f2f7472617669732d63692e6f72672f676b6170706c65722f54726965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gkappler/Tries.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/gkappler/Tries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/436940465b961056d9314c9595878e506b2627f47e4b2c1217b320a44d89191c/68747470733a2f2f636f6465636f762e696f2f67682f676b6170706c65722f54726965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gkappler/Tries.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow">Trie</a> is a small package providing a tree-like data structure implemented on a <code>Dict</code> backend and using <a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees</a> for printing and traversal.
<code>Trie</code> generalizes <a href="https://juliacollections.github.io/DataStructures.jl/latest/trie/" rel="nofollow">DataStructures.Trie</a> from <code>AbstractString</code> keys to arbitrary <code>NTuple{N,K} where N</code> key types.</p>
<p dir="auto">Some design decisions for a <code>trie::Trie{K,V}</code> regarding <code>keytype</code> and <code>getindex</code> might change in future versions based on discussions with the community.
:</p>
<ul dir="auto">
<li><code>getindex(trie, ks::K...)</code> and <code>setindex!(trie, v, ks::K...)</code> consider <code>Trie</code> as sparse representation of an object with values<code>::Union{V,Missing}</code> referenced by any finite <code>N</code>-dimensional key <code>ks::NTuple{N,K} where N</code>.</li>
<li><code>keytype(trie)</code> currently is <code>K</code>, should it be <code>ks::NTuple{N,K} where N</code>?</li>
<li>Future versions might switch backend to Andy Ferris <a href="https://github.com/andyferris/Dictionaries.jl">Dictionaries.jl</a>.
Contributions, thoughts and suggestions very welcome!</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="
julia&gt; using Tries

julia&gt; x=Trie((:a,)=&gt;&quot;a&quot;,
              (:a,:b)=&gt;&quot;c&quot;,
       	   (:a,:c,:d)=&gt;&quot;z&quot;,
       	   (:a,:b,:d)=&gt;1)
Trie{Symbol,Any}
└─ :a =&gt; &quot;a&quot;
   ├─ :b =&gt; &quot;c&quot;
   │  └─ :d =&gt; 1
   └─ :c
      └─ :d =&gt; &quot;z&quot;

julia&gt; eltype(x)
Any

julia&gt; x[:a,:b]
SubTrie{Symbol,Any} @ :a, :b =&gt; &quot;c&quot;
└─ :d =&gt; 1

julia&gt; x[:a,:b].path
(:a, :b)

julia&gt; get(x[:a,:b])
&quot;c&quot;

julia&gt; get(x[:a][:b,:d])
1

julia&gt; #
       get(x,[:a,:b])
&quot;c&quot;

julia&gt; x[:z]=&quot;added&quot;
&quot;added&quot;

julia&gt; get(x[:z])
&quot;added&quot;

julia&gt; x[:z,:n]=&quot;n&quot;
&quot;n&quot;

julia&gt; x[:z]
SubTrie{Symbol,Any} @ :z =&gt; &quot;added&quot;
└─ :n =&gt; &quot;n&quot;

julia&gt; x[:z,:n]=&quot;m&quot;
&quot;m&quot;

julia&gt; x[:z]
SubTrie{Symbol,Any} @ :z =&gt; &quot;added&quot;
└─ :n =&gt; &quot;m&quot;

julia&gt; x
Trie{Symbol,Any}
├─ :a =&gt; &quot;a&quot;
│  ├─ :b =&gt; &quot;c&quot;
│  │  └─ :d =&gt; 1
│  └─ :c
│     └─ :d =&gt; &quot;z&quot;
└─ :z =&gt; &quot;added&quot;
   └─ :n =&gt; &quot;m&quot;"><pre class="notranslate"><code>
julia&gt; using Tries

julia&gt; x=Trie((:a,)=&gt;"a",
              (:a,:b)=&gt;"c",
       	   (:a,:c,:d)=&gt;"z",
       	   (:a,:b,:d)=&gt;1)
Trie{Symbol,Any}
└─ :a =&gt; "a"
   ├─ :b =&gt; "c"
   │  └─ :d =&gt; 1
   └─ :c
      └─ :d =&gt; "z"

julia&gt; eltype(x)
Any

julia&gt; x[:a,:b]
SubTrie{Symbol,Any} @ :a, :b =&gt; "c"
└─ :d =&gt; 1

julia&gt; x[:a,:b].path
(:a, :b)

julia&gt; get(x[:a,:b])
"c"

julia&gt; get(x[:a][:b,:d])
1

julia&gt; #
       get(x,[:a,:b])
"c"

julia&gt; x[:z]="added"
"added"

julia&gt; get(x[:z])
"added"

julia&gt; x[:z,:n]="n"
"n"

julia&gt; x[:z]
SubTrie{Symbol,Any} @ :z =&gt; "added"
└─ :n =&gt; "n"

julia&gt; x[:z,:n]="m"
"m"

julia&gt; x[:z]
SubTrie{Symbol,Any} @ :z =&gt; "added"
└─ :n =&gt; "m"

julia&gt; x
Trie{Symbol,Any}
├─ :a =&gt; "a"
│  ├─ :b =&gt; "c"
│  │  └─ :d =&gt; 1
│  └─ :c
│     └─ :d =&gt; "z"
└─ :z =&gt; "added"
   └─ :n =&gt; "m"</code></pre></div><pre><code>julia&gt; using Tries
<p dir="auto">julia&gt; x=Trie{Int,Int}(0)
Trie{Int64,Int64} =&gt; 0</p>
<p dir="auto">julia&gt; subtrie!(x, 1,2,3,4,5) do x
x[end]+1
end
SubTrie{Int64,Int64} @ 1, 2, 3, 4, 5 =&gt; 6</p>
<p dir="auto">julia&gt; x
Trie{Int64,Int64} =&gt; 0
└─ 1 =&gt; 2
└─ 2 =&gt; 3
└─ 3 =&gt; 4
└─ 4 =&gt; 5
└─ 5 =&gt; 6
⋮</p>
</code><p dir="auto"><code>julia&gt; collect(keys(x))
6-element Array{Tuple{Vararg{Int64,N} where N},1}:
()
(1,)
(1, 2)
(1, 2, 3)
(1, 2, 3, 4)
(1, 2, 3, 4, 5)
</code></p></pre><p dir="auto"></p>
<p dir="auto"><code>Tries</code> is used in <a href="https://github.com/gkappler/CombinedParsers.jl">CombinedParsers.jl</a>
for fast prefix tree matching (see <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/example-either-trie/" rel="nofollow">docs</a>).</p>
</article></div>