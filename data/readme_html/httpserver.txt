<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><em>This project is deprecated. Please use <a href="https://github.com/JuliaWeb/HTTP.jl">HTTP.jl</a></em></p>
<h1 dir="auto"><a id="user-content-httpserverjl" class="anchor" aria-hidden="true" href="#httpserverjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HttpServer.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaWeb/HttpServer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/445c997b82d118eb3d9e7b4f9cbb4def2dac61565211ac570c62e78f290b5b82/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f487474705365727665722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/HttpServer.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaWeb/HttpServer.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/194ff3a66b5f91e199dc207d6be1a0ebbdd7a6b2481d825f59090436fc576433/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f487474705365727665722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaWeb/HttpServer.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://pkg.julialang.org/?pkg=HttpServer&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/54244245fb1e99354d732fa39c2097cef0c6865b12c9009fdc87b4d182290626/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f487474705365727665725f302e332e737667" alt="HttpServer" data-canonical-src="http://pkg.julialang.org/badges/HttpServer_0.3.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=HttpServer&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/e0b9063636e5bce0b4ff41c529dff7a43dd339d5a05befdedc95175513f753be/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f487474705365727665725f302e342e737667" alt="HttpServer" data-canonical-src="http://pkg.julialang.org/badges/HttpServer_0.4.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=HttpServer&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/ea74c75a32ada5720d59f23f1864593aed2404603fa3c2ebb42b0e30cda7443c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f487474705365727665725f302e352e737667" alt="HttpServer" data-canonical-src="http://pkg.julialang.org/badges/HttpServer_0.5.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=HttpServer&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/664409aa43ae88ddf33f70d01b9c8704a14299fd9c10311681e83aef3d5429c6/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f487474705365727665725f302e362e737667" alt="HttpServer" data-canonical-src="http://pkg.julialang.org/badges/HttpServer_0.6.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a basic, non-blocking HTTP server in Julia.</p>
<p dir="auto">You can write a basic application using just this if you're happy dealing with values representing HTTP requests and responses directly.
For a higher-level view, you could use <a href="https://github.com/one-more-minute/Mux.jl">Mux</a>.
If you'd like to use WebSockets as well, you'll need to grab <a href="https://github.com/JuliaWeb/WebSockets.jl">WebSockets.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Use Julia package manager to install this package as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;HttpServer&quot;)"><pre class="notranslate"><code>Pkg.add("HttpServer")
</code></pre></div>
<h2 dir="auto"><a id="user-content-functionality" class="anchor" aria-hidden="true" href="#functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functionality</h2>
<ul dir="auto">
<li>binds to any address and port</li>
<li>supports IPv4 &amp; IPv6 addresses</li>
<li>supports HTTP, HTTPS and Unix socket transports</li>
</ul>
<p dir="auto">You can find many examples of how to use this package in the <code>examples</code> folder.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HttpServer

http = HttpHandler() do req::Request, res::Response
    Response( ismatch(r&quot;^/hello/&quot;,req.resource) ? string(&quot;Hello &quot;, split(req.resource,'/')[3], &quot;!&quot;) : 404 )
end

server = Server( http )
run( server, 8000 )
# or
run(server, host=IPv4(127,0,0,1), port=8000)"><pre><span class="pl-k">using</span> HttpServer

http <span class="pl-k">=</span> <span class="pl-c1">HttpHandler</span>() <span class="pl-k">do</span> req<span class="pl-k">::</span><span class="pl-c1">Request</span>, res<span class="pl-k">::</span><span class="pl-c1">Response</span>
    <span class="pl-c1">Response</span>( <span class="pl-c1">ismatch</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^/hello/<span class="pl-pds">"</span></span>,req<span class="pl-k">.</span>resource) <span class="pl-k">?</span> <span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-pds">"</span></span>, <span class="pl-c1">split</span>(req<span class="pl-k">.</span>resource,<span class="pl-s"><span class="pl-pds">'</span>/<span class="pl-pds">'</span></span>)[<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds">"</span>!<span class="pl-pds">"</span></span>) <span class="pl-k">:</span> <span class="pl-c1">404</span> )
<span class="pl-k">end</span>

server <span class="pl-k">=</span> <span class="pl-c1">Server</span>( http )
<span class="pl-c1">run</span>( server, <span class="pl-c1">8000</span> )
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">run</span>(server, host<span class="pl-k">=</span><span class="pl-c1">IPv4</span>(<span class="pl-c1">127</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), port<span class="pl-k">=</span><span class="pl-c1">8000</span>)</pre></div>
<p dir="auto">If you open up <code>localhost:8000/hello/name/</code> in your browser, you should get a greeting from the server.</p>
<hr>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=":::::::::::::
::         ::
:: Made at ::
::         ::
:::::::::::::
     ::
Hacker School
:::::::::::::"><pre class="notranslate"><code>:::::::::::::
::         ::
:: Made at ::
::         ::
:::::::::::::
     ::
Hacker School
:::::::::::::
</code></pre></div>
</article></div>