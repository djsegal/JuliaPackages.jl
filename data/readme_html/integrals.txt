<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-integralsjl" class="anchor" aria-hidden="true" href="#integralsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Integrals.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/Integrals/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://app.codecov.io/gh/SciML/Integrals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37a87b1a7766dcc2ae680ba555aaaa379a6c02e781ebabe463cc9c3e5f4772e3/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f496e74656772616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/Integrals.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/Integrals.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/Integrals.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">Integrals.jl is an instantiation of the SciML common <code>IntegralProblem</code>
interface for the common numerical integration packages of Julia, including
both those based upon quadrature as well as Monte-Carlo approaches. By using
Integrals.jl, you get a single predictable interface where many of the
arguments are standardized throughout the various integrator libraries. This
can be useful for benchmarking or for library implementations, since libraries
which internally use a quadrature can easily accept a integration method as an
argument.</p>
<h2 dir="auto"><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials and Documentation</h2>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/Integrals/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/Integrals/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">To perform one-dimensional quadrature, we can simply construct an <code>IntegralProblem</code>. The code below evaluates <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="6df7789f6d7652336b5e0ce9c2cb9115">$\int_{-2}^5 \sin(xp)~\mathrm{d}x$</math-renderer> with <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="6df7789f6d7652336b5e0ce9c2cb9115">$p = 1.7$</math-renderer>. This argument <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="6df7789f6d7652336b5e0ce9c2cb9115">$p$</math-renderer> is passed
into the problem as the fourth argument of <code>IntegralProblem</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Integrals
f(x, p) = sin(x * p)
p = 1.7
prob = IntegralProblem(f, -2, 5, p)
sol = solve(prob, QuadGKJL())"><pre><span class="pl-k">using</span> Integrals
<span class="pl-en">f</span>(x, p) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x <span class="pl-k">*</span> p)
p <span class="pl-k">=</span> <span class="pl-c1">1.7</span>
prob <span class="pl-k">=</span> <span class="pl-c1">IntegralProblem</span>(f, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">5</span>, p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">QuadGKJL</span>())</pre></div>
<p dir="auto">For basic multidimensional quadrature we can construct and solve a <code>IntegralProblem</code>. Since we are using no arguments <code>p</code> in this example, we omit the fourth argument of <code>IntegralProblem</code>
from above. The lower and upper bounds are now passed as vectors, with the <code>i</code>th elements of
the bounds giving the interval of integration for <code>x[i]</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Integrals
f(x, p) = sum(sin.(x))
prob = IntegralProblem(f, ones(2), 3ones(2))
sol = solve(prob, HCubatureJL(), reltol = 1e-3, abstol = 1e-3)"><pre><span class="pl-k">using</span> Integrals
<span class="pl-en">f</span>(x, p) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">sin</span>.(x))
prob <span class="pl-k">=</span> <span class="pl-c1">IntegralProblem</span>(f, <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), <span class="pl-c1">3</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>))
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">HCubatureJL</span>(), reltol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
<p dir="auto">If we would like to parallelize the computation, we can use the batch interface
to compute multiple points at once. For example, here we do allocation-free
multithreading with Cubature.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Integrals, Cubature, Base.Threads
function f(dx, x, p)
    Threads.@threads for i in 1:size(x, 2)
        dx[i] = sum(sin.(@view(x[:, i])))
    end
end
prob = IntegralProblem(f, ones(2), 3ones(2), batch = 2)
sol = solve(prob, CubatureJLh(), reltol = 1e-3, abstol = 1e-3)"><pre><span class="pl-k">using</span> Integrals, Cubature, Base<span class="pl-k">.</span>Threads
<span class="pl-k">function</span> <span class="pl-en">f</span>(dx, x, p)
    Threads<span class="pl-k">.</span><span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(x, <span class="pl-c1">2</span>)
        dx[i] <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">sin</span>.(<span class="pl-c1">@view</span>(x[:, i])))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
prob <span class="pl-k">=</span> <span class="pl-c1">IntegralProblem</span>(f, <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), <span class="pl-c1">3</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), batch <span class="pl-k">=</span> <span class="pl-c1">2</span>)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">CubatureJLh</span>(), reltol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
<p dir="auto">If we would like to compare the results against Cuba.jl's <code>Cuhre</code> method, then
the change is a one-argument change:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IntegralsCuba
sol = solve(prob, CubaCuhre(), reltol = 1e-3, abstol = 1e-3)"><pre><span class="pl-k">using</span> IntegralsCuba
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">CubaCuhre</span>(), reltol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
</article></div>