<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jsongrinder" class="anchor" aria-hidden="true" href="#jsongrinder"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JsonGrinder</h1>
<p><a href="https://travis-ci.org/Pevnak/JsonGrinder.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/517e47acb22b1f437e22b1b72190eef63ceddbcc/68747470733a2f2f7472617669732d63692e6f72672f5065766e616b2f4a736f6e4772696e6465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Pevnak/JsonGrinder.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/pevnak/JsonGrinder.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bd7b2174c4866fd1bd8eff2908dca318c9501212/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7065766e616b2f4a736f6e4772696e6465722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/pevnak/JsonGrinder.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/Pevnak/JsonGrinder.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fecd64fe0c38f36cc8fe29edfed253570bc10ce7/687474703a2f2f636f6465636f762e696f2f6769746875622f5065766e616b2f4a736f6e4772696e6465722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/Pevnak/JsonGrinder.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>JsonGrinder</strong> is a collection of routines that facilitates conversion of JSON documents into structures used by <code>Mill.jl</code> project.</p>
<p>The envisioned workflow is as follows:
1. Estimate schema of documents from a collection of JSON documents using a call <code>schema</code>.
2. Create an extractor using <code>extractor = suggestextractor(schema, settings)</code>
3. Conver JSONs to Mill friendly structures using <code>extractbatch(extractor, samples) = reduce(catobs, map(s-&gt; extractor(s), samples))</code></p>
<p>A simplest example would looks as follows:
Let's start by importing libraries and defining some JSONs.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JsonGrinder, Flux, Mill, JSON
j1 <span class="pl-k">=</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"""</span>{"a": 1, "b": "hello works", "c":{ "a":1 ,"b": "hello world"}}<span class="pl-pds">"""</span></span>)
j2 <span class="pl-k">=</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"""</span>{"a": 2, "b": "hello world", "c":{ "a":2 ,"b": "hello"}}<span class="pl-pds">"""</span></span>)</pre></div>
<p>Let's estimate a schema from those two documents</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> sch <span class="pl-k">=</span> <span class="pl-c1">schema</span>([j1,j2])
: [Dict]
  ├── a<span class="pl-k">:</span> [Scalar <span class="pl-k">-</span> Int64], <span class="pl-c1">2</span> unique values, updated <span class="pl-k">=</span> <span class="pl-c1">2</span>
  ├── b<span class="pl-k">:</span> [Scalar <span class="pl-k">-</span> String], <span class="pl-c1">2</span> unique values, updated <span class="pl-k">=</span> <span class="pl-c1">2</span>
  └── c<span class="pl-k">:</span> [Dict]
      ├── a<span class="pl-k">:</span> [Scalar <span class="pl-k">-</span> Int64], <span class="pl-c1">2</span> unique values, updated <span class="pl-k">=</span> <span class="pl-c1">2</span>
      └── b<span class="pl-k">:</span> [Scalar <span class="pl-k">-</span> String], <span class="pl-c1">2</span> unique values, updated <span class="pl-k">=</span> <span class="pl-c1">2</span></pre></div>
<p>Let's create a default extractor</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> extractor <span class="pl-k">=</span> <span class="pl-c1">suggestextractor</span>(sch)
: <span class="pl-k">struct</span>
  ├─── a<span class="pl-k">:</span> Int64
  ├─── b<span class="pl-k">:</span> String
  └─── c<span class="pl-k">:</span> <span class="pl-k">struct</span>
        ├─── a<span class="pl-k">:</span> Int64
        └─── b<span class="pl-k">:</span> String</pre></div>
<p>Now we can convert the data to data either by</p>
<div class="highlight highlight-source-julia"><pre>ds <span class="pl-k">=</span> <span class="pl-c1">map</span>(s<span class="pl-k">-&gt;</span> <span class="pl-c1">extractor</span>(s), [j1,j2])
dss <span class="pl-k">=</span> <span class="pl-c1">reduce</span>(catobs, ds)</pre></div>
<p>or for convenience joined into a single command</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ds <span class="pl-k">=</span> <span class="pl-c1">extractbatch</span>(extractor, [j1, j2])
ProductNode
  ├── scalars<span class="pl-k">:</span> <span class="pl-c1">ArrayNode</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
  ├── c<span class="pl-k">:</span> ProductNode
  │     ├── scalars<span class="pl-k">:</span> <span class="pl-c1">ArrayNode</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
  │     └── b<span class="pl-k">:</span> <span class="pl-c1">ArrayNode</span>(<span class="pl-c1">2053</span>, <span class="pl-c1">2</span>)
  └── b<span class="pl-k">:</span> <span class="pl-c1">ArrayNode</span>(<span class="pl-c1">2053</span>, <span class="pl-c1">2</span>)</pre></div>
<p>Now, we use a convenient function <code>reflectinmodel</code> which creates a model that can process our dataset</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">reflectinmodel</span>(ds, d <span class="pl-k">-&gt;</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(d,<span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>,<span class="pl-c1">4</span>)))
ProductModel (
  ├── scalars<span class="pl-k">:</span> <span class="pl-c1">ArrayModel</span>(<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)))
  ├── c<span class="pl-k">:</span> ProductModel (
  │     ├── scalars<span class="pl-k">:</span> <span class="pl-c1">ArrayModel</span>(<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)))
  │     └── b<span class="pl-k">:</span> <span class="pl-c1">ArrayModel</span>(<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2053</span>, <span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)))
  │    ) ↦  <span class="pl-c1">ArrayModel</span>(<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">8</span>, <span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)))
  └── b<span class="pl-k">:</span> <span class="pl-c1">ArrayModel</span>(<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2053</span>, <span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)))
 ) ↦  <span class="pl-c1">ArrayModel</span>(<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">12</span>, <span class="pl-c1">10</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)))</pre></div>
<p>and finally, we can do all the usual stuff with it</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">m</span>(ds)<span class="pl-k">.</span>data
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float32,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.102617</span>    <span class="pl-c1">0.116041</span>
  <span class="pl-c1">0.0478762</span>   <span class="pl-c1">0.133312</span>
  <span class="pl-c1">0.0357873</span>  <span class="pl-k">-</span><span class="pl-c1">0.0108712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.0197168</span>  <span class="pl-k">-</span><span class="pl-c1">0.0255238</span></pre></div>
<ul>
<li>Customization of extractors:</li>
</ul>
<p>While extractors of Dictionaries and Lists are straighforward, as the first one is converted to <code>Mill.ProductNode</code> and the latter to <code>Mill.BagNode</code>. The extractor of scalars can benefit from customization. This can be to some extent automatized by defining its own conversion rules in a list of [(criterion, extractor),...] where criterion is a function accepting <code>JsonEntry</code> and outputing <code>true</code> and <code>false</code> and extractor is a function of <code>JsonEntry</code> again returning a function extracting given entry. This list is passed to <code>suggestextractor(schema, (scalar_extractors = [(criterion, extractor),...]))</code></p>
<p>For example a default list of extractors is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">default_scalar_extractor</span>()
	[(e <span class="pl-k">-&gt;</span> (<span class="pl-c1">length</span>(<span class="pl-c1">keys</span>(e<span class="pl-k">.</span>counts)) <span class="pl-k">/</span> e<span class="pl-k">.</span>updated <span class="pl-k">&lt;</span> <span class="pl-c1">0.1</span>  <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">length</span>(<span class="pl-c1">keys</span>(e<span class="pl-k">.</span>counts)) <span class="pl-k">&lt;=</span> <span class="pl-c1">10000</span>),
		e <span class="pl-k">-&gt;</span> <span class="pl-c1">ExtractCategorical</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(e<span class="pl-k">.</span>counts)))),
	(e <span class="pl-k">-&gt;</span> <span class="pl-c1">true</span>,
		e <span class="pl-k">-&gt;</span> <span class="pl-c1">extractscalar</span>(<span class="pl-c1">promote_type</span>(<span class="pl-c1">unique</span>(<span class="pl-c1">typeof</span>.(<span class="pl-c1">keys</span>(e<span class="pl-k">.</span>counts)))<span class="pl-k">...</span>))),]
<span class="pl-k">end</span></pre></div>
<p>where the first entry checks sparsity <code>e -&gt; (length(keys(e.counts)) / e.updated &lt; 0.1  &amp;&amp; length(keys(e.counts)) &lt;= 10000)</code> and if it is sufficiently sparse, it will suggest Categorical (one-hot) extractor. The second is a catch-all case, which extracts a scalar value, such as Float32.</p>
</article></div>