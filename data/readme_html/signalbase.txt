<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-signalbase" class="anchor" aria-hidden="true" href="#signalbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SignalBase</h1>
<p dir="auto"><a href="https://haberdashpi.github.io/SignalBase.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://haberdashpi.github.io/SignalBase.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/haberdashPI/SignalBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6a69edb0fd60408dcf73888ecb4449b31ffe86455a28aa65a912b6ebc84fa23/68747470733a2f2f7472617669732d63692e636f6d2f68616265726461736850492f5369676e616c426173652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/haberdashPI/SignalBase.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">SignalBase defines a basic API to inspect signals that are regularly sampled in time. It consists of the following functions.</p>
<ul dir="auto">
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.sampletype" rel="nofollow"><code>sampletype</code></a>: a type <code>T &lt;: Number</code> used to represent each sample, similar in purpose to <code>eltype</code>, but some signals may define these two functions differently.</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.nchannels" rel="nofollow"><code>nchannels</code></a>: the number of samples per frame</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.framerate" rel="nofollow"><code>framerate</code></a>: the number of frames per second, can be a <code>missing</code> value.</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.nframes" rel="nofollow"><code>nframes</code></a>: the number of frames; this can be a <code>missing</code> value</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.duration" rel="nofollow"><code>duration</code></a>: the duration in seconds of the signal (defaults to <code>nframes(x) / framerate(x)</code>). This value can be a <code>missing</code> value. This could be defined seperately from <code>nframes</code> if, for example, the framerate is unknown but the duration is known.</li>
</ul>
<p dir="auto">For example, one natural definition of an <code>Array</code>, interpreted as a signal would be as follows.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sampletype(x::Array) = eltype(x)
nchannels(x::Array) = size(x,2)
framerate(x::Array) = missing
nframes(x::Array) = size(x,1)"><pre><span class="pl-en">sampletype</span>(x<span class="pl-k">::</span><span class="pl-c1">Array</span>) <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(x)
<span class="pl-en">nchannels</span>(x<span class="pl-k">::</span><span class="pl-c1">Array</span>) <span class="pl-k">=</span> <span class="pl-c1">size</span>(x,<span class="pl-c1">2</span>)
<span class="pl-en">framerate</span>(x<span class="pl-k">::</span><span class="pl-c1">Array</span>) <span class="pl-k">=</span> <span class="pl-c1">missing</span>
<span class="pl-en">nframes</span>(x<span class="pl-k">::</span><span class="pl-c1">Array</span>) <span class="pl-k">=</span> <span class="pl-c1">size</span>(x,<span class="pl-c1">1</span>)</pre></div>
<p dir="auto">Such a definition is provided by <a href="https://github.com/haberdashPI/SignalOperators.jl"><code>SignalOperators</code></a>.</p>
<h2 dir="auto"><a id="user-content-units" class="anchor" aria-hidden="true" href="#units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Units</h2>
<p dir="auto">This package also defines a set of utility functions for working with units relevant to signals via <a href="https://github.com/PainterQubits/Unitful.jl"><code>Unitful</code></a>: namely, radians, frames, seconds and Hertz. The <code>frames</code> unit is newly defined here so that conversions between frames and units of time is convienient and unambiguous. The other three are already defined by <code>Unitful</code>. The following functions are available.</p>
<ul dir="auto">
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.inradians" rel="nofollow"><code>inradians</code></a>: converts a quantity to radians</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.inframes" rel="nofollow"><code>inframes</code></a>: converts a quantity to frames</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.inseconds" rel="nofollow"><code>inseconds</code></a>: converts a quantity to seconds</li>
<li><a href="https://haberdashpi.github.io/SignalBase.jl/dev/#SignalBase.inHz" rel="nofollow"><code>inHz</code></a>: converst a quantity to Hertz</li>
</ul>
<p dir="auto">These functions apply the following phillosophy: units can be useful as part of a public API, but they should be an optional feature. Therefore, if a value is passed with a given unit type (e.g. <code>1kHz</code>), use it. If the value has no unit specified, assume a default unit type: e.g. inHz(10.0) would assume that <code>10.0</code> is in units of Hertz. The returned value for all these functions are in the stated units, as a <code>Float64</code> value.</p>
<p dir="auto">The utility functions all properly handle <code>missing</code> values.</p>
<p dir="auto">To make use of the unit names themselves (e.g. <code>s</code> for seconds) you can add them via <code>SignalsBase.Units</code>. They are only exported in this sub-module to avoid pollutting the namespace with short unit names unless desired. The exported units are: kframes, frames, Hz, s, kHz, ms, dB, Â°, rad</p>
</article></div>