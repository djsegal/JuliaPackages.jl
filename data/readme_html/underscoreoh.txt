<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-underscoreoh-exports-_o-for-building-anonymous-functions" class="anchor" aria-hidden="true" href="#underscoreoh-exports-_o-for-building-anonymous-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UnderscoreOh exports <code>_o</code> for building anonymous "functions"</h1>
<p><strong>WARNING</strong> This package is <em>all about</em> syntax pun and interactive
convenience.  It is highly recommended to avoid using it inside any
serious packages and scripts.</p>
<h2><a id="user-content-what-is-it" class="anchor" aria-hidden="true" href="#what-is-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is it?</h2>
<p>UnderscoreOh.jl is a tool for building anonymous <em>callables</em>.  There
are several differences to the native anonymous functions and closures
created with syntax like <code>x -&gt; ...</code> and <code>function (x) ... end</code>:</p>
<ul>
<li>
<p>The callables created with UnderscoreOh.jl are <em>identical</em> when
generated with the same expression and the same context.  It allows
<code>julia</code> to re-use JIT-compiled anonymous callables.</p>
</li>
<li>
<p>Simple callables are easier to build with UnderscoreOh.jl API.</p>
</li>
<li>
<p>Variables are captured by value (i.e., no infamous <code>Box</code>ing).</p>
</li>
</ul>
<h2><a id="user-content-property-and-index-access" class="anchor" aria-hidden="true" href="#property-and-index-access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Property and index access</h2>
<p>UnderscoreOh.jl exports <code>_o</code>.  Accessing properties and keys generate
a function that does that:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using UnderscoreOh

julia&gt; f = _o.key
_o -&gt; _o.key (generic function with 1 method)

julia&gt; f((key = 1, value = 2))
1

julia&gt; map(_o.key, [(key = 1,), (key = 2,), (key = 3,)])
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; f = _o.x[1]
_o -&gt; _o.x[1] (generic function with 1 method)

julia&gt; f((x = (:a,), y = (:b, :c)))
:a
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnderscoreOh

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> _o<span class="pl-k">.</span>key
_o <span class="pl-k">-&gt;</span> _o<span class="pl-k">.</span>key (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>((key <span class="pl-k">=</span> <span class="pl-c1">1</span>, value <span class="pl-k">=</span> <span class="pl-c1">2</span>))
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(_o<span class="pl-k">.</span>key, [(key <span class="pl-k">=</span> <span class="pl-c1">1</span>,), (key <span class="pl-k">=</span> <span class="pl-c1">2</span>,), (key <span class="pl-k">=</span> <span class="pl-c1">3</span>,)])
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> _o<span class="pl-k">.</span>x[<span class="pl-c1">1</span>]
_o <span class="pl-k">-&gt;</span> _o<span class="pl-k">.</span>x[<span class="pl-c1">1</span>] (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>((x <span class="pl-k">=</span> (<span class="pl-c1">:a</span>,), y <span class="pl-k">=</span> (<span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)))
<span class="pl-c1">:a</span></pre></div>
<h2><a id="user-content-a-chained-dot-calls-as-an-anonymous-callable" class="anchor" aria-hidden="true" href="#a-chained-dot-calls-as-an-anonymous-callable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A chained dot-calls as an anonymous callable</h2>
<p>Broadcasting expression around this object becomes a unary function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = _o.x .== _o.y
_o -&gt; _o.x == _o.y (generic function with 1 method)

julia&gt; f((x = 2, y = 2))
true

julia&gt; f = _o .* 2 .+ 1
_o -&gt; (_o * 2) + 1 (generic function with 1 method)

julia&gt; f(1)
3

julia&gt; g(args...; kwargs...) = (args, (; kwargs...))
g (generic function with 1 method)

julia&gt; f = g.(_o; x = _o .+ 1)
_o -&gt; g(_o; x=_o + 1) (generic function with 1 method)

julia&gt; f(0)
((0,), (x = 1,))

julia&gt; filter(_o.k .== 1, [(k = 1, v = :a), (k = 2, v = :b), (k = 1, v = :c)])
2-element Array{NamedTuple{(:k, :v),Tuple{Int64,Symbol}},1}:
 (k = 1, v = :a)
 (k = 1, v = :c)
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> _o<span class="pl-k">.</span>x <span class="pl-k">.==</span> _o<span class="pl-k">.</span>y
_o <span class="pl-k">-&gt;</span> _o<span class="pl-k">.</span>x <span class="pl-k">==</span> _o<span class="pl-k">.</span>y (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>((x <span class="pl-k">=</span> <span class="pl-c1">2</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> _o <span class="pl-k">.*</span> <span class="pl-c1">2</span> <span class="pl-k">.+</span> <span class="pl-c1">1</span>
_o <span class="pl-k">-&gt;</span> (_o <span class="pl-k">*</span> <span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span> (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">g</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> (args, (; kwargs<span class="pl-k">...</span>))
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">g</span>.(_o; x <span class="pl-k">=</span> _o <span class="pl-k">.+</span> <span class="pl-c1">1</span>)
_o <span class="pl-k">-&gt;</span> <span class="pl-c1">g</span>(_o; x<span class="pl-k">=</span>_o <span class="pl-k">+</span> <span class="pl-c1">1</span>) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">0</span>)
((<span class="pl-c1">0</span>,), (x <span class="pl-k">=</span> <span class="pl-c1">1</span>,))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(_o<span class="pl-k">.</span>k <span class="pl-k">.==</span> <span class="pl-c1">1</span>, [(k <span class="pl-k">=</span> <span class="pl-c1">1</span>, v <span class="pl-k">=</span> <span class="pl-c1">:a</span>), (k <span class="pl-k">=</span> <span class="pl-c1">2</span>, v <span class="pl-k">=</span> <span class="pl-c1">:b</span>), (k <span class="pl-k">=</span> <span class="pl-c1">1</span>, v <span class="pl-k">=</span> <span class="pl-c1">:c</span>)])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{NamedTuple{(<span class="pl-c1">:k</span>, <span class="pl-c1">:v</span>),Tuple{Int64,Symbol}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (k <span class="pl-k">=</span> <span class="pl-c1">1</span>, v <span class="pl-k">=</span> <span class="pl-c1">:a</span>)
 (k <span class="pl-k">=</span> <span class="pl-c1">1</span>, v <span class="pl-k">=</span> <span class="pl-c1">:c</span>)</pre></div>
<h2><a id="user-content-standard-broadcasting" class="anchor" aria-hidden="true" href="#standard-broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Standard broadcasting</h2>
<p>The type of the function generated by <code>_o</code> overloads the <code>~</code> operator
(in such a way that it is nothing to do with bitwise not):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ~_o.x
_o -&gt; ~(_o.x) (generic function with 1 method)

julia&gt; _o ~ _o.x  # equivalent
_o -&gt; ~(_o.x) (generic function with 1 method)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">~</span>_o<span class="pl-k">.</span>x
_o <span class="pl-k">-&gt;</span> <span class="pl-k">~</span>(_o<span class="pl-k">.</span>x) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> _o <span class="pl-k">~</span> _o<span class="pl-k">.</span>x  <span class="pl-c"><span class="pl-c">#</span> equivalent</span>
_o <span class="pl-k">-&gt;</span> <span class="pl-k">~</span>(_o<span class="pl-k">.</span>x) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p>If <code>f</code> is a function generated by <code>o_</code>, <code>~(f)</code> is also a function.
When invoked, this function acts like the one wrapped in <code>~</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; _o.x((x = 1,))
1

julia&gt; (~_o.x)((x = 1,))
1
"><pre>julia<span class="pl-k">&gt;</span> _o<span class="pl-k">.</span><span class="pl-c1">x</span>((x <span class="pl-k">=</span> <span class="pl-c1">1</span>,))
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> (<span class="pl-k">~</span>_o<span class="pl-k">.</span>x)((x <span class="pl-k">=</span> <span class="pl-c1">1</span>,))
<span class="pl-c1">1</span></pre></div>
<p>However, it has the normal broadcasting rule so that it can be used to
mix dot-<code>_o</code> syntax with actual broadcasting</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; sum.(~_o.x, [[(x=1,), (x=2,)], [(x=3,), (x=4,), (x=5,)]])
2-element Array{Int64,1}:
  3
 12
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>.(<span class="pl-k">~</span>_o<span class="pl-k">.</span>x, [[(x<span class="pl-k">=</span><span class="pl-c1">1</span>,), (x<span class="pl-k">=</span><span class="pl-c1">2</span>,)], [(x<span class="pl-k">=</span><span class="pl-c1">3</span>,), (x<span class="pl-k">=</span><span class="pl-c1">4</span>,), (x<span class="pl-k">=</span><span class="pl-c1">5</span>,)]])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">3</span>
 <span class="pl-c1">12</span></pre></div>
<p>Note that <code>~ _o .* 2</code> does not work since it is parsed as <code>(~ _o) .* 2</code>.
It can be worked around by using the binary version <code>_o ~ _o .* 2</code>
where <code>_o</code> on the left side of <code>~</code> is just a marker for declaring the
anonymous function boundary.</p>
<p>(At this point, ordinary anonymous function <code>x -&gt; 2x</code> is much simpler!
However, this form is included so that the expression can be used
without re-typing it.)</p>
<h2><a id="user-content-named-tuples" class="anchor" aria-hidden="true" href="#named-tuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Named tuples</h2>
<p>UnderscoreOh.jl also exports <code>_nt</code>.  This function simply converts
keyword arguments to a named tuple for normal arguments:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; _nt(X = 1)
(X = 1,)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">_nt</span>(X <span class="pl-k">=</span> <span class="pl-c1">1</span>)
(X <span class="pl-k">=</span> <span class="pl-c1">1</span>,)</pre></div>
<p>When the input contains <code>_o</code>, it creates a function that returns a
named tuple:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; _nt(a = _o.x .+ 1, b = 2)
_o -&gt; _nt(; a=_o.x + 1, b=2) (generic function with 1 method)

julia&gt; _nt(a = _o.x .+ 1, b = 2)((x = 1,))
(a = 2, b = 2)
"><pre><code>julia&gt; _nt(a = _o.x .+ 1, b = 2)
_o -&gt; _nt(; a=_o.x + 1, b=2) (generic function with 1 method)

julia&gt; _nt(a = _o.x .+ 1, b = 2)((x = 1,))
(a = 2, b = 2)
</code></pre></div>
<h2><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Similar packages</h2>
<ul>
<li><a href="https://github.com/c42f/Underscores.jl">https://github.com/c42f/Underscores.jl</a></li>
<li><a href="https://github.com/c42f/MagicUnderscores.jl">https://github.com/c42f/MagicUnderscores.jl</a></li>
<li><a href="https://github.com/haberdashPI/LambdaFn.jl">https://github.com/haberdashPI/LambdaFn.jl</a></li>
<li><a href="https://github.com/Tokazama/ChainedFixes.jl">https://github.com/Tokazama/ChainedFixes.jl</a></li>
<li><a href="https://github.com/tkf/Tofu.jl">https://github.com/tkf/Tofu.jl</a></li>
<li><a href="https://github.com/tkf/AtBackslash.jl">https://github.com/tkf/AtBackslash.jl</a></li>
</ul>
</article></div>