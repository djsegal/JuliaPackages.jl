<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-adevjl" class="anchor" aria-hidden="true" href="#adevjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ADEV.jl</h1>
<p dir="auto">Experimental port of the <a href="https://github.com/probcomp/adev">ADEV</a> library to Julia. Not yet documented or stable, and currently has low coverage of Julia language features.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-defining-probabilistic-compuations" class="anchor" aria-hidden="true" href="#defining-probabilistic-compuations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining probabilistic compuations</h3>
<p dir="auto">ADEV exposes primitives, like <code>normal_reparam</code> and <code>flip_mvd</code>, which are functions returning "probabilistic computations." Bigger probabilistic computations can be composed using the syntax <code>@adev begin ... end</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function my_program(theta)
    @adev begin
        let x = @sample(normal_reparam(theta, 1)),
            b = @sample(flip_mvd(sigmoid(theta)))

            if b
                @sample(normal_reparam(x, 1))
            else
                # Recurse
                theta * @sample(my_program(theta - 1))
            end
        end
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">my_program</span>(theta)
    <span class="pl-c1">@adev</span> <span class="pl-k">begin</span>
        <span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">@sample</span>(<span class="pl-c1">normal_reparam</span>(theta, <span class="pl-c1">1</span>)),
            b <span class="pl-k">=</span> <span class="pl-c1">@sample</span>(<span class="pl-c1">flip_mvd</span>(<span class="pl-c1">sigmoid</span>(theta)))

            <span class="pl-k">if</span> b
                <span class="pl-c1">@sample</span>(<span class="pl-c1">normal_reparam</span>(x, <span class="pl-c1">1</span>))
            <span class="pl-k">else</span>
                <span class="pl-c"><span class="pl-c">#</span> Recurse</span>
                theta <span class="pl-k">*</span> <span class="pl-c1">@sample</span>(<span class="pl-c1">my_program</span>(theta <span class="pl-k">-</span> <span class="pl-c1">1</span>))
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Within an <code>@adev begin ... end</code> block, the following constructs are currently supported:</p>
<ul dir="auto">
<li><code>@sample(e)</code>, where <code>e</code> is a supported expression evaluating to a probabilistic computation;</li>
<li><code>let x1 = e1, ..., xn = en; e; end</code>, where <code>e, e1, ..., en</code> are supported expressions;</li>
<li><code>if e_cond1; e1; elseif e_cond2; e2; ...; else; en; end</code>, where <code>e_cond1, e1, ..., en</code> are supported expressions;</li>
<li><code>e(e1, ..., en)</code>, where <code>e, e1, ..., en</code> are supported expressions.</li>
<li>other Julia expressions (e.g. <code>arr[idx]</code>), so long as they are pure (no mutation, no randomness).</li>
</ul>
<p dir="auto">The main limitations, then, are:</p>
<ul dir="auto">
<li>No mutation (e.g. <code>x += 4</code>) or simple imperative assignment (e.g. <code>x = 4</code>). Use <code>let</code> instead.</li>
<li>No loops (e.g. <code>while</code> or <code>for</code>). Use recursion instead.</li>
<li>No compound expressions that are not function calls, but not pure (e.g. <code>my_array[@sample(uniform(1:10))]</code>). Use <code>let idx = @sample(uniform(1:10)); my_array[idx]; end</code> instead.</li>
<li>No function calls with keyword arguments, or splatted arguments.</li>
</ul>
<h3 dir="auto"><a id="user-content-estimating-derivatives" class="anchor" aria-hidden="true" href="#estimating-derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Estimating derivatives</h3>
<p dir="auto">ADEV currently works with functions of type <code>Real -&gt; ProbabilisticComputation{Real}</code>. For such a function, <code>simulate(f, x)</code> will simulate a value of <code>f(x)</code>, and <code>differentiate(f, x)</code> will estimate the derivative of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="f9d47efd35eb9214fd9adbe3f6511efe">$\mathbb{E}_{v \sim f(x)}[v]$</math-renderer> with respect to <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="f9d47efd35eb9214fd9adbe3f6511efe">$x$</math-renderer>. To average more than one sample (e.g. 100), use <code>estimate_derivative(f, x; N=100)</code>. A simple version of stochastic gradient descent is implemented by <code>sgd(f; theta=0, step_size=0.01, n_iters=1000, N=100)</code>, where <code>N</code> is the number of samples to use for estimating the derivative at each iteration.</p>
</article></div>