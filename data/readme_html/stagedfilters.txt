<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stagedfiltersjl---lovingly-handcrafted-metaprogrammed-code-for-all-your-dsp-needs" class="anchor" aria-hidden="true" href="#stagedfiltersjl---lovingly-handcrafted-metaprogrammed-code-for-all-your-dsp-needs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StagedFilters.jl - Lovingly handcrafted metaprogrammed code for all your DSP needs.</h1>
<p>This package implements a staged-programming approach for a highly specialized version of a Savitzky-Golay filter. It is a <strong>generalized, performant algorithm</strong> of <a href="https://en.wikipedia.org/wiki/Moving_average" rel="nofollow">rolling/moving functions</a>, such as a <code>rolling/moving average</code>.</p>
<p>If you would like to read a full blog post on the implementation on it, <a href="https://miguelraz.github.io/blog/smoothingjiahao/" rel="nofollow">you can find some here</a>.
For a video explanation by Stefan Karpinski, check out the <a href="https://www.youtube.com/watch?v=DRKKAFYM9yo&amp;feature=youtu.be&amp;t=2047" rel="nofollow">following video</a></p>
<h3><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgments</h3>
<p>Many people contributed to the eventual development of this code:</p>
<ul>
<li>Jiahao Chen, Matt Bauman and others for the original implementation</li>
<li>Stefan Karpinski for some branch elisions</li>
<li>Steven G Johnson, for help when benchmarking a PyCall code and being careful not to measure the conversion back and forth.</li>
</ul>
<p>If you know the measurement to be missing / not be as fair as it could be, please reach out and let me know - we're trying to compare best in class implementations side by side, not cheat out. In particular, I don't know if the <code>savgol</code> method I'm calling is in place or not, and would appreciate if somone could point out how to opt into that.</p>
</article></div>