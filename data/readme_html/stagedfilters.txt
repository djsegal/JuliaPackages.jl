<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stagedfiltersjl---lovingly-handcrafted-metaprogrammed-code-for-all-your-dsp-needs" class="anchor" aria-hidden="true" href="#stagedfiltersjl---lovingly-handcrafted-metaprogrammed-code-for-all-your-dsp-needs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StagedFilters.jl - Lovingly handcrafted metaprogrammed code for all your DSP needs.</h1>
<p dir="auto">This package implements a staged-programming approach for a highly specialized version of a Savitzky-Golay filter. It is a <strong>generalized, performant algorithm</strong> of <a href="https://en.wikipedia.org/wiki/Moving_average" rel="nofollow">rolling/moving functions</a>, such as a <code>rolling/moving average</code>.</p>
<p dir="auto">If you would like to read a full blog post on the implementation on it, <a href="https://miguelraz.github.io/blog/smoothingjiahao/" rel="nofollow">you can find some here</a>.
For a video explanation by Stefan Karpinski, check out the <a href="https://www.youtube.com/watch?v=DRKKAFYM9yo&amp;feature=youtu.be&amp;t=2047" rel="nofollow">following video</a></p>
<h3 dir="auto"><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgments</h3>
<p dir="auto">Many people contributed to the eventual development of this code:</p>
<ul dir="auto">
<li>Jiahao Chen, Matt Bauman and others for the original implementation</li>
<li>Stefan Karpinski for some branch elisions</li>
<li>Steven G Johnson, for help when benchmarking a PyCall code and being careful not to measure the conversion back and forth.</li>
</ul>
<p dir="auto">If you know the measurement to be missing / not be as fair as it could be, please reach out and let me know - we're trying to compare best in class implementations side by side, not cheat out. In particular, I don't know if the <code>savgol</code> method I'm calling is in place or not, and would appreciate if somone could point out how to opt into that.</p>
</article></div>