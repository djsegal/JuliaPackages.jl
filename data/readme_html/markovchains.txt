<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-markovchainsjl" class="anchor" aria-hidden="true" href="#markovchainsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MarkovChains.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/wangnangg/MarkovChains.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f1f66eb26d06c7fcc5fd883983cace61a45eb1abc28eaf95ed70418de7d9f2a7/68747470733a2f2f7472617669732d63692e6f72672f77616e676e616e67672f4d61726b6f76436861696e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/wangnangg/MarkovChains.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/wangnangg/MarkovChains.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/44fffebc2ca1e56a06de0a1fa7d51bd20d5fa77c89775c3eccfcb9e0f68f8df2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77616e676e616e67672f4d61726b6f76436861696e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/wangnangg/MarkovChains.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This pacakge provides functions to solve continuous time Markov chains for state
probablities or accumulated sojourn times at a certain time point, including
time infinity.</p>
<h1 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h1>
<p dir="auto">Here's a detailed <a href="docs/tutorial.ipynb">tutorial</a> on how to use this package.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<h2 dir="auto"><a id="user-content-a-birth-death-chain" class="anchor" aria-hidden="true" href="#a-birth-death-chain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A birth-death chain</h2>
<p dir="auto">The following example is about solving a 4 states birth-death chain at time 0.1, 1.0, and infinity.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MarkovChains
chain = ContMarkovChain()
n0 = add_state!(chain)
n1 = add_state!(chain)
n2 = add_state!(chain)
n3 = add_state!(chain)
add_transition!(chain, n0, n1, 1.0) #transition from n0 to n1 with rate = 1.0
add_transition!(chain, n1, n2, 1.0)
add_transition!(chain, n2, n3, 1.0)
add_transition!(chain, n3, n2, 3.0)
add_transition!(chain, n2, n1, 2.0)
add_transition!(chain, n1, n0, 1.0)
init_prob = sparsevec([1], [1.0])

sol = solve(chain, init_prob, 0.1) #solve at time 0.1
@show state_prob(sol, n1) #probablity of being at state n1 at time 0.1
# state_prob(sol, n1) = 0.08652421409974947

sol = solve(chain, init_prob, 1) 
@show state_prob(sol, n1)
# state_prob(sol, n1) = 0.375

sol = solve(chain, init_prob, Inf)
@show state_prob(sol, n1)
# state_prob(sol, n1) = 0.375"><pre><span class="pl-k">using</span> MarkovChains
chain <span class="pl-k">=</span> <span class="pl-c1">ContMarkovChain</span>()
n0 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n1 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n2 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n3 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
<span class="pl-c1">add_transition!</span>(chain, n0, n1, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span>transition from n0 to n1 with rate = 1.0</span>
<span class="pl-c1">add_transition!</span>(chain, n1, n2, <span class="pl-c1">1.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n2, n3, <span class="pl-c1">1.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n3, n2, <span class="pl-c1">3.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n2, n1, <span class="pl-c1">2.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n1, n0, <span class="pl-c1">1.0</span>)
init_prob <span class="pl-k">=</span> <span class="pl-c1">sparsevec</span>([<span class="pl-c1">1</span>], [<span class="pl-c1">1.0</span>])

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span>solve at time 0.1</span>
<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n1) <span class="pl-c"><span class="pl-c">#</span>probablity of being at state n1 at time 0.1</span>
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n1) = 0.08652421409974947</span>

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">1</span>) 
<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n1)
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n1) = 0.375</span>

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">Inf</span>)
<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n1)
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n1) = 0.375</span></pre></div>
<h2 dir="auto"><a id="user-content-a-chain-with-absorbing-states" class="anchor" aria-hidden="true" href="#a-chain-with-absorbing-states"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A chain with absorbing states</h2>
<p dir="auto">The following example is about solving a 3 states chain with absorbing states.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="chain = ContMarkovChain()
n1 = add_state!(chain)
n2 = add_state!(chain)
n3 = add_state!(chain)
add_transition!(chain, n1, n2, 2.0)
add_transition!(chain, n2, n3, 4.0)
init_prob = sparsevec([1], [1.0])

sol = solve(chain, init_prob, 0.5)

@show state_prob(sol, n2)
# state_prob(sol, n2) = 0.23254415793482963

@show state_cumtime(sol, n2) #cumulative time spent in state n2
# state_cumtime(sol, n2) = 0.09989410022321275

@show mean_time_to_absorption(chain, init_prob) #you may be interested in MTTA for a chain with absorbing states
# mean_time_to_absorption(chain, init_prob) = 0.75"><pre>chain <span class="pl-k">=</span> <span class="pl-c1">ContMarkovChain</span>()
n1 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n2 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n3 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
<span class="pl-c1">add_transition!</span>(chain, n1, n2, <span class="pl-c1">2.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n2, n3, <span class="pl-c1">4.0</span>)
init_prob <span class="pl-k">=</span> <span class="pl-c1">sparsevec</span>([<span class="pl-c1">1</span>], [<span class="pl-c1">1.0</span>])

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">0.5</span>)

<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n2)
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n2) = 0.23254415793482963</span>

<span class="pl-c1">@show</span> <span class="pl-c1">state_cumtime</span>(sol, n2) <span class="pl-c"><span class="pl-c">#</span>cumulative time spent in state n2</span>
<span class="pl-c"><span class="pl-c">#</span> state_cumtime(sol, n2) = 0.09989410022321275</span>

<span class="pl-c1">@show</span> <span class="pl-c1">mean_time_to_absorption</span>(chain, init_prob) <span class="pl-c"><span class="pl-c">#</span>you may be interested in MTTA for a chain with absorbing states</span>
<span class="pl-c"><span class="pl-c">#</span> mean_time_to_absorption(chain, init_prob) = 0.75</span></pre></div>
</article></div>