<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-markovchainsjl" class="anchor" aria-hidden="true" href="#markovchainsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MarkovChains.jl</h1>
<p><a href="https://travis-ci.org/wangnangg/MarkovChains.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b5dae42f6036d42e3da3f0f424dda7dc858676a/68747470733a2f2f7472617669732d63692e6f72672f77616e676e616e67672f4d61726b6f76436861696e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/wangnangg/MarkovChains.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/wangnangg/MarkovChains.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/79b90949db81c4fb27fd2c53076a167331bb3607/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77616e676e616e67672f4d61726b6f76436861696e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/wangnangg/MarkovChains.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This pacakge provides functions to solve continuous time Markov chains for state
probablities or accumulated sojourn times at a certain time point, including
time infinity.</p>
<h1><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h1>
<p>Here's a detailed <a href="docs/tutorial.ipynb">tutorial</a> on how to use this package.</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<h2><a id="user-content-a-birth-death-chain" class="anchor" aria-hidden="true" href="#a-birth-death-chain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A birth-death chain</h2>
<p>The following example is about solving a 4 states birth-death chain at time 0.1, 1.0, and infinity.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MarkovChains
chain <span class="pl-k">=</span> <span class="pl-c1">ContMarkovChain</span>()
n0 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n1 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n2 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n3 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
<span class="pl-c1">add_transition!</span>(chain, n0, n1, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span>transition from n0 to n1 with rate = 1.0</span>
<span class="pl-c1">add_transition!</span>(chain, n1, n2, <span class="pl-c1">1.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n2, n3, <span class="pl-c1">1.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n3, n2, <span class="pl-c1">3.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n2, n1, <span class="pl-c1">2.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n1, n0, <span class="pl-c1">1.0</span>)
init_prob <span class="pl-k">=</span> <span class="pl-c1">sparsevec</span>([<span class="pl-c1">1</span>], [<span class="pl-c1">1.0</span>])

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">0.1</span>) <span class="pl-c"><span class="pl-c">#</span>solve at time 0.1</span>
<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n1) <span class="pl-c"><span class="pl-c">#</span>probablity of being at state n1 at time 0.1</span>
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n1) = 0.08652421409974947</span>

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">1</span>) 
<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n1)
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n1) = 0.375</span>

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">Inf</span>)
<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n1)
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n1) = 0.375</span></pre></div>
<h2><a id="user-content-a-chain-with-absorbing-states" class="anchor" aria-hidden="true" href="#a-chain-with-absorbing-states"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A chain with absorbing states</h2>
<p>The following example is about solving a 3 states chain with absorbing states.</p>
<div class="highlight highlight-source-julia"><pre>chain <span class="pl-k">=</span> <span class="pl-c1">ContMarkovChain</span>()
n1 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n2 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
n3 <span class="pl-k">=</span> <span class="pl-c1">add_state!</span>(chain)
<span class="pl-c1">add_transition!</span>(chain, n1, n2, <span class="pl-c1">2.0</span>)
<span class="pl-c1">add_transition!</span>(chain, n2, n3, <span class="pl-c1">4.0</span>)
init_prob <span class="pl-k">=</span> <span class="pl-c1">sparsevec</span>([<span class="pl-c1">1</span>], [<span class="pl-c1">1.0</span>])

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(chain, init_prob, <span class="pl-c1">0.5</span>)

<span class="pl-c1">@show</span> <span class="pl-c1">state_prob</span>(sol, n2)
<span class="pl-c"><span class="pl-c">#</span> state_prob(sol, n2) = 0.23254415793482963</span>

<span class="pl-c1">@show</span> <span class="pl-c1">state_cumtime</span>(sol, n2) <span class="pl-c"><span class="pl-c">#</span>cumulative time spent in state n2</span>
<span class="pl-c"><span class="pl-c">#</span> state_cumtime(sol, n2) = 0.09989410022321275</span>

<span class="pl-c1">@show</span> <span class="pl-c1">mean_time_to_absorption</span>(chain, init_prob) <span class="pl-c"><span class="pl-c">#</span>you may be interested in MTTA for a chain with absorbing states</span>
<span class="pl-c"><span class="pl-c">#</span> mean_time_to_absorption(chain, init_prob) = 0.75</span></pre></div>
</article></div>