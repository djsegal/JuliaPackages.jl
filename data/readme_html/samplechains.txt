<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-samplechains" class="anchor" aria-hidden="true" href="#samplechains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SampleChains</h1>
<p dir="auto"><a href="https://cscherrer.github.io/SampleChains.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cscherrer.github.io/SampleChains.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cscherrer/SampleChains.jl/actions"><img src="https://github.com/cscherrer/SampleChains.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cscherrer/SampleChains.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f5463a42609c3de6db9fe9f406bd9a69d61e6c98260f154a1da9af7dfd9b6b4/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f53616d706c65436861696e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/SampleChains.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; chains
3003-element MultiChain with 3 chains and schema (σ = Float64, α = Float64, β = Vector{Float64})
(σ = 0.9±0.88, α = -5.1±10.0, β = [-0.0±0.9, 0.04±0.99, 0.04±1.1, 0.02±0.92, 0.06±0.95])"><pre>julia<span class="pl-k">&gt;</span> chains
<span class="pl-c1">3003</span><span class="pl-k">-</span>element MultiChain with <span class="pl-c1">3</span> chains and schema (σ <span class="pl-k">=</span> Float64, α <span class="pl-k">=</span> Float64, β <span class="pl-k">=</span> Vector{Float64})
(σ <span class="pl-k">=</span> <span class="pl-c1">0.9</span>±<span class="pl-c1">0.88</span>, α <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">5.1</span>±<span class="pl-c1">10.0</span>, β <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.0</span>±<span class="pl-c1">0.9</span>, <span class="pl-c1">0.04</span>±<span class="pl-c1">0.99</span>, <span class="pl-c1">0.04</span>±<span class="pl-c1">1.1</span>, <span class="pl-c1">0.02</span>±<span class="pl-c1">0.92</span>, <span class="pl-c1">0.06</span>±<span class="pl-c1">0.95</span>])</pre></div>
<p dir="auto">Some features (many still in progress):</p>
<ul dir="auto">
<li>Simple visual representation</li>
<li>"Samples first", though diagnostic information is easily available</li>
<li>Each <code>Chain</code> can be indexed as a Vector, or as a NamedTuple</li>
<li>Interrupting (CTRL-C) returns the current chain, including iterator information so work can be resumed</li>
<li>Built on <a href="https://github.com/JuliaArrays/ElasticArrays.jl">ElasticArrays</a> to make it easy to add new samples after the fact</li>
<li>Adaptable to many different sampling algorithms, including with or without (log-)weights</li>
<li>Easy summarization functions: expectations per-dimension quantiles, etc</li>
</ul>
<p dir="auto">In progress:</p>
<ul dir="auto">
<li>More back-ends (currently just DynamicHMC, using <a href="https://github.com/cscherrer/SampleChainsDynamicHMC.jl">SampleChainsDynamicHMC</a>)</li>
<li>Diagnostic warnings during sampling</li>
<li>Callbacks for plotting, etc</li>
<li>Sample count based on desired standard error of a specified expected value</li>
<li>Summarization by different functions
<ul dir="auto">
<li>Highest posterior density intervals</li>
<li>R-hat statistics</li>
</ul>
</li>
</ul>
</article></div>