<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-multiplescattering" class="anchor" aria-hidden="true" href="#multiplescattering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MultipleScattering</h1>

<p><a href="https://JuliaWaveScattering.github.io/MultipleScattering.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a> <a href="https://zenodo.org/badge/latestdoi/96763392" rel="nofollow"><img src="https://camo.githubusercontent.com/668c38ce4446a2264f6333d77fe6018ec00f538751f72d6c20b39f9b6f56121c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39363736333339322e737667" alt="" data-canonical-src="https://zenodo.org/badge/96763392.svg" style="max-width:100%;"></a> <a href="https://travis-ci.org/JuliaWaveScattering/MultipleScattering.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fd5a026923ce9a07d84c7edecd3973f0a70b3c4c2b88e64c707af461fea8add6/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615761766553636174746572696e672f4d756c7469706c6553636174746572696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaWaveScattering/MultipleScattering.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/JuliaWaveScattering/MultipleScattering.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5293326d2769d0acd805ad09f8f42294440bc37ac9a8cd0a8d9e9efead4f845a/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615761766553636174746572696e672f4d756c7469706c6553636174746572696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="http://codecov.io/github/JuliaWaveScattering/MultipleScattering.jl/coverage.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaWaveScattering/MultipleScattering.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5d1e00abbd46a2f22218f9c9e29bfb17660f9bf9adcf0f9392a89237e6a870ec/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69615761766553636174746572696e672f4d756c7469706c6553636174746572696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaWaveScattering/MultipleScattering.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><em>A Julia library for simulating, processing, and plotting multiple scattering of waves.</em></p>
<p>The library focuses on multipole methods (addition translation theorems) to solve the inhomogeneous Helmholtz equation
(time-harmonic waves). Multipole methods are particularly efficient at solving scattering from particles in an infinite domain. This library is configured to use T-matrices (also known as scattering matrices) to represent scattering from particles with any shape and properties (currently implemented for acoustics). The package is setup to deal with different spatial dimensions and types of waves which satisfy Helmholtz equation's, e.g. acoustics, electromagnetism, elasticity. For details on some of the maths see <a href="https://pdfs.semanticscholar.org/8bd3/38ec62affc5c89592a9d6d13f1ee6a7d7e53.pdf" rel="nofollow">Martin (1995)</a> and <a href="https://arxiv.org/abs/1712.05427" rel="nofollow">Gower et al. (2017)</a>.</p>

<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is available for Julia 1.0.5 and beyond. To get started, just add the package by typing</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add MultipleScattering
"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add MultipleScattering</pre></div>
<p>then press the backspace key followed by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using MultipleScattering
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MultipleScattering</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<ul>
<li><a href="https://JuliaWaveScattering.github.io/MultipleScattering.jl/dev" rel="nofollow"><strong>master</strong></a> — <em>documentation of the in-development version.</em></li>
</ul>
<h2><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple example</h2>
<p>Define the properties of your host medium, for example</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="host_medium = Acoustic(2; ρ=1.0, c=1.0); # 2D acoustic medium with density ρ = 1.0 and soundspeed c = 1.0
"><pre>host_medium <span class="pl-k">=</span> <span class="pl-c1">Acoustic</span>(<span class="pl-c1">2</span>; ρ<span class="pl-k">=</span><span class="pl-c1">1.0</span>, c<span class="pl-k">=</span><span class="pl-c1">1.0</span>); <span class="pl-c"><span class="pl-c">#</span> 2D acoustic medium with density ρ = 1.0 and soundspeed c = 1.0</span></pre></div>
<p>an acoustic medium in 2D with density 1 and wavespeed 1.</p>
<p>Next, define two dense, circular acoustic particles, the first centred at [-2,2] with radius 2 and the second at [-2,-2] with radius 0.5,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="particle_medium =  Acoustic(2; ρ=10.0, c=2.0); # 2D acoustic particle with density ρ = 10.0 and soundspeed c = 2.0
p1 = Particle(particle_medium, Sphere([-2.0,2.0], 2.0));
p2 = Particle(particle_medium, Sphere([-2.0,-2.0], 0.5));
particles = [p1,p2];
"><pre>particle_medium <span class="pl-k">=</span>  <span class="pl-c1">Acoustic</span>(<span class="pl-c1">2</span>; ρ<span class="pl-k">=</span><span class="pl-c1">10.0</span>, c<span class="pl-k">=</span><span class="pl-c1">2.0</span>); <span class="pl-c"><span class="pl-c">#</span> 2D acoustic particle with density ρ = 10.0 and soundspeed c = 2.0</span>
p1 <span class="pl-k">=</span> <span class="pl-c1">Particle</span>(particle_medium, <span class="pl-c1">Sphere</span>([<span class="pl-k">-</span><span class="pl-c1">2.0</span>,<span class="pl-c1">2.0</span>], <span class="pl-c1">2.0</span>));
p2 <span class="pl-k">=</span> <span class="pl-c1">Particle</span>(particle_medium, <span class="pl-c1">Sphere</span>([<span class="pl-k">-</span><span class="pl-c1">2.0</span>,<span class="pl-k">-</span><span class="pl-c1">2.0</span>], <span class="pl-c1">0.5</span>));
particles <span class="pl-k">=</span> [p1,p2];</pre></div>
<p>Lastly we define the source, for example an incident plane wave (<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/900ddd7a41747ad89e1b58c17af78575e254dcd43eee8b811487f04556f6ba72/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354364706925374231323025374425323065253545253742692532302532386b253230782532302d2532302535436f6d65676125323074253239253744"><img src="https://camo.githubusercontent.com/900ddd7a41747ad89e1b58c17af78575e254dcd43eee8b811487f04556f6ba72/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354364706925374231323025374425323065253545253742692532302532386b253230782532302d2532302535436f6d65676125323074253239253744" alt="incident plane wave" data-canonical-src="https://latex.codecogs.com/gif.latex?%5Cdpi%7B120%7D%20e%5E%7Bi%20%28k%20x%20-%20%5Comega%20t%29%7D" style="max-width:100%;"></a>) using a helper function.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="source = plane_source(host_medium; direction = [1.0,0.0])
"><pre>source <span class="pl-k">=</span> <span class="pl-c1">plane_source</span>(host_medium; direction <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>])</pre></div>
<p>Once we have these three components, we can build our <code>FrequencySimulation</code> object</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="simulation = FrequencySimulation(particles, source)
"><pre>simulation <span class="pl-k">=</span> <span class="pl-c1">FrequencySimulation</span>(particles, source)</pre></div>
<p>To get numerical results, we run our simulation for specific positions and angular frequencies,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = [[-10.0,0.0], [0.0,0.0]]
max_ω = 1.0
ω = 0.01:0.01:max_ω
result = run(simulation, x, ω)
"><pre>x <span class="pl-k">=</span> [[<span class="pl-k">-</span><span class="pl-c1">10.0</span>,<span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]]
max_ω <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
ω <span class="pl-k">=</span> <span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span>max_ω
result <span class="pl-k">=</span> <span class="pl-c1">run</span>(simulation, x, ω)</pre></div>
<h3><a id="user-content-plot" class="anchor" aria-hidden="true" href="#plot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plot</h3>
<p>The package also provides recipes to be used with the <code>Plots</code> package for
plotting simulations after they have been run.
In our above simulation we ran the simulation for 100 different wavenumbers, and
measured the response at the location (-10,0).
We can plot the time-harmonic response across these wavenumbers by typing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots
plot(result)
"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(result)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/example/intro/plot_result.png"><img src="docs/src/example/intro/plot_result.png" alt="Plot of response against wavenumber" style="max-width:100%;"></a></p>
<p>For a better overview you can plot the whole field in space for a specific angular frequency by typing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ω = 0.8
plot(simulation,ω)
"><pre>ω <span class="pl-k">=</span> <span class="pl-c1">0.8</span>
<span class="pl-c1">plot</span>(simulation,ω)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/example/intro/plot_field.png"><img src="docs/src/example/intro/plot_field.png" alt="Plot real part of acoustic field" style="max-width:100%;"></a></p>
<p>This measures the field at lots of points in the domain, so we can get an
understanding of what is happening for one particular angular frequency.</p>
<p>Note: most things in the package can be plotted by typing <code>plot(thing)</code> if you
need an insight into a specific part of your simulation.</p>
<p>To calculate an incident plane wave pulse in time use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="time_result = frequency_to_time(result)
plot(time_result)
"><pre>time_result <span class="pl-k">=</span> <span class="pl-c1">frequency_to_time</span>(result)
<span class="pl-c1">plot</span>(time_result)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/example/intro/plot_time_result.png"><img src="docs/src/example/intro/plot_time_result.png" alt="Plot real part of acoustic field" style="max-width:100%;"></a>
Or for a Gaussian impulse in time:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t_vec = LinRange(0.,700.,400)
time_result = frequency_to_time(result; t_vec = t_vec, impulse = GaussianImpulse(max_ω))
plot(time_result)
"><pre>t_vec <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.</span>,<span class="pl-c1">700.</span>,<span class="pl-c1">400</span>)
time_result <span class="pl-k">=</span> <span class="pl-c1">frequency_to_time</span>(result; t_vec <span class="pl-k">=</span> t_vec, impulse <span class="pl-k">=</span> <span class="pl-c1">GaussianImpulse</span>(max_ω))
<span class="pl-c1">plot</span>(time_result)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/example/intro/plot_gauss_result.png"><img src="docs/src/example/intro/plot_gauss_result.png" alt="Plot real part of acoustic field" style="max-width:100%;"></a></p>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More examples</h2>
<p>There are a lot of defaults implicit in this basic example.
Almost every part of the problem can be controlled, for example we can manually
construct the set of particles, define their positions, radii and give them
specific material properties. For all examples see <a href="docs/src/example/README.md">here</a>.</p>
<h2><a id="user-content-acknowledgements-and-contributing" class="anchor" aria-hidden="true" href="#acknowledgements-and-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements and contributing</h2>
<p>This library was restructured from one written by
<a href="https://arturgower.github.io/" rel="nofollow">Artur L Gower</a> and
<a href="http://jonathan.thedeakin.net" rel="nofollow">Jonathan Deakin</a>.
Please contribute, if nothing else, criticism is welcome.
We are relatively new to Julia, and this is our first package, if anything is
untoward or even non-standard, please let us know.</p>
</article></div>