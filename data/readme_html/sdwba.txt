<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sdwbajl" class="anchor" aria-hidden="true" href="#sdwbajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SDWBA.jl</h1>
<p><a href="https://travis-ci.org/ElOceanografo/SDWBA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/68145397462c8e4ba9309e199bccfd28eb69f16b/68747470733a2f2f7472617669732d63692e6f72672f456c4f6365616e6f677261666f2f53445742412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ElOceanografo/SDWBA.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://ElOceanografo.github.io/SDWBA.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://ElOceanografo.github.io/SDWBA.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><a href="https://zenodo.org/badge/latestdoi/21069/ElOceanografo/SDWBA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9ab11fc36baad100a1f33da371d772c7d53e3687/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f32313036392f456c4f6365616e6f677261666f2f53445742412e6a6c2e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/21069/ElOceanografo/SDWBA.jl.svg" style="max-width:100%;"></a></p>
<p>This Julia package implements the (stochastic) distorted-wave Born approximation for
acoustic scattering from fluid-like objects shaped like distorted cylinders.  These
models are useful for modeling the acoustic target strengths (TS) of zooplankton, which
are needed to convert sonar echoes to estimates of biomass.</p>
<p>The full documentation and function reference can be found at <a href="https://eloceanografo.github.io/SDWBA.jl/dev" rel="nofollow">here</a>.  A short demo is given below:</p>
<p>To install and load it, simply run</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SDWBA<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> SDWBA</pre></div>
<p>Several models of common animals are included.  To calculate the TS of an Antarctic krill,
<em>Euphausia superba</em>:</p>
<div class="highlight highlight-source-julia"><pre>krill <span class="pl-k">=</span> Models<span class="pl-k">.</span>krill_mcgeehee
freq <span class="pl-k">=</span> <span class="pl-c1">120e3</span>	<span class="pl-c"><span class="pl-c">#</span> acoustic frequency (kHz)</span>
c <span class="pl-k">=</span> <span class="pl-c1">1456</span>		<span class="pl-c"><span class="pl-c">#</span> sound speed in water (m/s)</span>
<span class="pl-c1">target_strength</span>(krill, freq, c)
<span class="pl-c"><span class="pl-c">#</span> -66.9</span></pre></div>
<p>Functions are included to tilt/rotate scatterers, as well as to resize them:</p>
<div class="highlight highlight-source-julia"><pre>krill2 <span class="pl-k">=</span> <span class="pl-c1">rescale</span>(krill, <span class="pl-c1">0.8</span>) <span class="pl-c"><span class="pl-c">#</span> shrink the krill by 20%</span>
krill2 <span class="pl-k">=</span> <span class="pl-c1">rotate</span>(krill2, tilt <span class="pl-k">=</span> <span class="pl-c1">45</span>) <span class="pl-c"><span class="pl-c">#</span> tilt it 45 degrees nose-up</span>
<span class="pl-c1">target_strength</span>(krill2, freq, c)
<span class="pl-c"><span class="pl-c">#</span> -100.09</span></pre></div>
<p>Often, we are interested in how an animal scatters across a range of frequencies or tilt angles. Two convenience functions, <code>tilt_spectrum</code> and <code>freq_spectrum</code>, are included to do this easily.  For instance, we can take our krill and examine its frequency-response curves at a few different tilt angles:</p>
<div class="highlight highlight-source-julia"><pre>start, stop <span class="pl-k">=</span> <span class="pl-c1">10e3</span>, <span class="pl-c1">1000e3</span> <span class="pl-c"><span class="pl-c">#</span> endpoints of the spectrum, in Hz</span>
nfreqs <span class="pl-k">=</span> <span class="pl-c1">200</span>
fs0 <span class="pl-k">=</span> <span class="pl-c1">freq_spectrum</span>(krill, start, stop, c, nfreqs)
fs5 <span class="pl-k">=</span> <span class="pl-c1">freq_spectrum</span>(<span class="pl-c1">rotate</span>(krill, tilt<span class="pl-k">=</span><span class="pl-c1">5</span>), start, stop, c, nfreqs)
fs10 <span class="pl-k">=</span> <span class="pl-c1">freq_spectrum</span>(<span class="pl-c1">rotate</span>(krill, tilt<span class="pl-k">=</span><span class="pl-c1">10</span>), start, stop, c, nfreqs)

<span class="pl-k">using</span> PyPlot <span class="pl-c"><span class="pl-c">#</span> for plotting functions</span>
<span class="pl-c1">semilogx</span>(fs0[<span class="pl-s"><span class="pl-pds">"</span>freqs<span class="pl-pds">"</span></span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>, fs[<span class="pl-s"><span class="pl-pds">"</span>TS<span class="pl-pds">"</span></span>])
<span class="pl-c1">semilogx</span>(fs5[<span class="pl-s"><span class="pl-pds">"</span>freqs<span class="pl-pds">"</span></span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>, fs5[<span class="pl-s"><span class="pl-pds">"</span>TS<span class="pl-pds">"</span></span>])
<span class="pl-c1">semilogx</span>(fs10[<span class="pl-s"><span class="pl-pds">"</span>freqs<span class="pl-pds">"</span></span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>, fs10[<span class="pl-s"><span class="pl-pds">"</span>TS<span class="pl-pds">"</span></span>])
<span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Frequency (kHz)<span class="pl-pds">"</span></span>)
<span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Target Strength (dB re m^2)<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>((<span class="pl-s"><span class="pl-pds">"</span>0°<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5°<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>10°<span class="pl-pds">"</span></span>), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Tilt angle<span class="pl-pds">"</span></span>, loc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>upper left<span class="pl-pds">"</span></span>, frameon<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="krill_freq_response.png"><img src="krill_freq_response.png" alt="Krill frequency response" style="max-width:100%;"></a></p>
<p>As expected, the target strength is lower at greater tilt angles, and the differences are more pronounced at higher freqencies in the geometric scattering region.</p>
</article></div>