<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sdwbajl" class="anchor" aria-hidden="true" href="#sdwbajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SDWBA.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/ElOceanografo/SDWBA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/43c4732b896fdc725f736d37bbb73adf90e77e91907caf394350a58cd4830406/68747470733a2f2f7472617669732d63692e6f72672f456c4f6365616e6f677261666f2f53445742412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ElOceanografo/SDWBA.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://ElOceanografo.github.io/SDWBA.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://ElOceanografo.github.io/SDWBA.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/21069/ElOceanografo/SDWBA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cab5ae456b07a4cf7b4af6de0cc2f63616273feed61358e8f7a0259601078f4a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f32313036392f456c4f6365616e6f677261666f2f53445742412e6a6c2e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/21069/ElOceanografo/SDWBA.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia package implements the (stochastic) distorted-wave Born approximation for
acoustic scattering from fluid-like objects shaped like distorted cylinders.  These
models are useful for modeling the acoustic target strengths (TS) of zooplankton, which
are needed to convert sonar echoes to estimates of biomass.</p>
<p dir="auto">The full documentation and function reference can be found at <a href="https://eloceanografo.github.io/SDWBA.jl/dev" rel="nofollow">here</a>.  A short demo is given below:</p>
<p dir="auto">To install and load it, simply run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;SDWBA&quot;)
using SDWBA"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SDWBA<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> SDWBA</pre></div>
<p dir="auto">Several models of common animals are included.  To calculate the TS of an Antarctic krill,
<em>Euphausia superba</em>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="krill = Models.krill_mcgeehee
freq = 120e3	# acoustic frequency (kHz)
c = 1456		# sound speed in water (m/s)
target_strength(krill, freq, c)
# -66.9"><pre>krill <span class="pl-k">=</span> Models<span class="pl-k">.</span>krill_mcgeehee
freq <span class="pl-k">=</span> <span class="pl-c1">120e3</span>	<span class="pl-c"><span class="pl-c">#</span> acoustic frequency (kHz)</span>
c <span class="pl-k">=</span> <span class="pl-c1">1456</span>		<span class="pl-c"><span class="pl-c">#</span> sound speed in water (m/s)</span>
<span class="pl-c1">target_strength</span>(krill, freq, c)
<span class="pl-c"><span class="pl-c">#</span> -66.9</span></pre></div>
<p dir="auto">Functions are included to tilt/rotate scatterers, as well as to resize them:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="krill2 = rescale(krill, 0.8) # shrink the krill by 20%
krill2 = rotate(krill2, tilt = 45) # tilt it 45 degrees nose-up
target_strength(krill2, freq, c)
# -100.09"><pre>krill2 <span class="pl-k">=</span> <span class="pl-c1">rescale</span>(krill, <span class="pl-c1">0.8</span>) <span class="pl-c"><span class="pl-c">#</span> shrink the krill by 20%</span>
krill2 <span class="pl-k">=</span> <span class="pl-c1">rotate</span>(krill2, tilt <span class="pl-k">=</span> <span class="pl-c1">45</span>) <span class="pl-c"><span class="pl-c">#</span> tilt it 45 degrees nose-up</span>
<span class="pl-c1">target_strength</span>(krill2, freq, c)
<span class="pl-c"><span class="pl-c">#</span> -100.09</span></pre></div>
<p dir="auto">Often, we are interested in how an animal scatters across a range of frequencies or tilt angles. Two convenience functions, <code>tilt_spectrum</code> and <code>freq_spectrum</code>, are included to do this easily.  For instance, we can take our krill and examine its frequency-response curves at a few different tilt angles:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="start, stop = 10e3, 1000e3 # endpoints of the spectrum, in Hz
nfreqs = 200
fs0 = freq_spectrum(krill, start, stop, c, nfreqs)
fs5 = freq_spectrum(rotate(krill, tilt=5), start, stop, c, nfreqs)
fs10 = freq_spectrum(rotate(krill, tilt=10), start, stop, c, nfreqs)

using PyPlot # for plotting functions
semilogx(fs0[&quot;freqs&quot;] / 1000, fs[&quot;TS&quot;])
semilogx(fs5[&quot;freqs&quot;] / 1000, fs5[&quot;TS&quot;])
semilogx(fs10[&quot;freqs&quot;] / 1000, fs10[&quot;TS&quot;])
xlabel(&quot;Frequency (kHz)&quot;)
ylabel(&quot;Target Strength (dB re m^2)&quot;)
legend((&quot;0°&quot;, &quot;5°&quot;, &quot;10°&quot;), title=&quot;Tilt angle&quot;, loc=&quot;upper left&quot;, frameon=false)"><pre>start, stop <span class="pl-k">=</span> <span class="pl-c1">10e3</span>, <span class="pl-c1">1000e3</span> <span class="pl-c"><span class="pl-c">#</span> endpoints of the spectrum, in Hz</span>
nfreqs <span class="pl-k">=</span> <span class="pl-c1">200</span>
fs0 <span class="pl-k">=</span> <span class="pl-c1">freq_spectrum</span>(krill, start, stop, c, nfreqs)
fs5 <span class="pl-k">=</span> <span class="pl-c1">freq_spectrum</span>(<span class="pl-c1">rotate</span>(krill, tilt<span class="pl-k">=</span><span class="pl-c1">5</span>), start, stop, c, nfreqs)
fs10 <span class="pl-k">=</span> <span class="pl-c1">freq_spectrum</span>(<span class="pl-c1">rotate</span>(krill, tilt<span class="pl-k">=</span><span class="pl-c1">10</span>), start, stop, c, nfreqs)

<span class="pl-k">using</span> PyPlot <span class="pl-c"><span class="pl-c">#</span> for plotting functions</span>
<span class="pl-c1">semilogx</span>(fs0[<span class="pl-s"><span class="pl-pds">"</span>freqs<span class="pl-pds">"</span></span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>, fs[<span class="pl-s"><span class="pl-pds">"</span>TS<span class="pl-pds">"</span></span>])
<span class="pl-c1">semilogx</span>(fs5[<span class="pl-s"><span class="pl-pds">"</span>freqs<span class="pl-pds">"</span></span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>, fs5[<span class="pl-s"><span class="pl-pds">"</span>TS<span class="pl-pds">"</span></span>])
<span class="pl-c1">semilogx</span>(fs10[<span class="pl-s"><span class="pl-pds">"</span>freqs<span class="pl-pds">"</span></span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>, fs10[<span class="pl-s"><span class="pl-pds">"</span>TS<span class="pl-pds">"</span></span>])
<span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Frequency (kHz)<span class="pl-pds">"</span></span>)
<span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Target Strength (dB re m^2)<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>((<span class="pl-s"><span class="pl-pds">"</span>0°<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5°<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>10°<span class="pl-pds">"</span></span>), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Tilt angle<span class="pl-pds">"</span></span>, loc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>upper left<span class="pl-pds">"</span></span>, frameon<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="krill_freq_response.png"><img src="krill_freq_response.png" alt="Krill frequency response" style="max-width: 100%;"></a></p>
<p dir="auto">As expected, the target strength is lower at greater tilt angles, and the differences are more pronounced at higher freqencies in the geometric scattering region.</p>
</article></div>