<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quaternionsjl" class="anchor" aria-hidden="true" href="#quaternionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quaternions.jl</h1>
<p>A Julia module with quaternion, octonion and dual-quaternion functionality</p>
<p><a href="https://github.com/JuliaGeometry/Quaternions.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaGeometry/Quaternions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaGeometry/Quaternions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ead9a5f09656487f87b70aa742e81819bdc2752449f74f195487497c8aa8a9d5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c696147656f6d657472792f5175617465726e696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaGeometry/Quaternions.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Quaternion" rel="nofollow">Quaternions</a> are best known for their suitability
as representations of 3D rotational orientation. They can also be viewed as an extension of complex numbers.</p>
<p>Implemented functions are:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="+-*/^
real
imag  (a vector)
conj
abs
abs2
exp
log
normalize
normalizea  (return normalized quaternion and absolute value as a pair)
angleaxis  (taken as an orientation, return the angle and axis (3 vector) as a tuple)
angle
axis
exp
log
sin
cos
sqrt
linpol  (interpolate between 2 normalized quaternions)
"><pre><code>+-*/^
real
imag  (a vector)
conj
abs
abs2
exp
log
normalize
normalizea  (return normalized quaternion and absolute value as a pair)
angleaxis  (taken as an orientation, return the angle and axis (3 vector) as a tuple)
angle
axis
exp
log
sin
cos
sqrt
linpol  (interpolate between 2 normalized quaternions)
</code></pre></div>
<p><a href="http://en.wikipedia.org/wiki/Dual_quaternion" rel="nofollow">Dual quaternions</a> are an extension, combining quaternions with
<a href="https://github.com/scidom/DualNumbers.jl">dual numbers</a>.
On top of just orientation, they can represent all rigid transformations.</p>
<p>There are two conjugation concepts here</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="conj  (quaternion conjugation)
dconj (dual conjugation)
"><pre><code>conj  (quaternion conjugation)
dconj (dual conjugation)
</code></pre></div>
<p>further implemented here:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Q0  (the 'real' quaternion)
Qe  ( the 'dual' part)
+-*/^
abs
abs2
normalize
normalizea
angleaxis
angle
axis
exp
log
sqrt
"><pre><code>Q0  (the 'real' quaternion)
Qe  ( the 'dual' part)
+-*/^
abs
abs2
normalize
normalizea
angleaxis
angle
axis
exp
log
sqrt
</code></pre></div>
<p><a href="http://en.wikipedia.org/wiki/Octonion" rel="nofollow">Octonions</a> form the logical next step on the Complex-Quaternion path.
They play a role, for instance, in the mathematical foundation of String theory.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="+-*/^
real
imag  (a vector)
conj
abs
abs2
exp
log
normalize
normalizea  (return normalized octonion and absolute value as a tuple)
exp
log
sqrt
"><pre><code>+-*/^
real
imag  (a vector)
conj
abs
abs2
exp
log
normalize
normalizea  (return normalized octonion and absolute value as a tuple)
exp
log
sqrt
</code></pre></div>
</article></div>