<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-structequality" class="anchor" aria-hidden="true" href="#structequality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StructEquality</h1>
<p><a href="https://github.com/schlichtanders/StructEquality.jl/actions"><img src="https://github.com/schlichtanders/StructEquality.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/schlichtanders/StructEquality.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4e06f86d9b0d176187bb551e8e0c42ee18fc899c3473e2de371a66eb3c9e40d8/68747470733a2f2f636f6465636f762e696f2f67682f7363686c69636874616e646572732f537472756374457175616c6974792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/schlichtanders/StructEquality.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>install like</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add StructEquality&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add StructEquality<span class="pl-pds">"</span></span></pre></div>
<p>load like</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StructEquality
"><pre><span class="pl-k">using</span> StructEquality</pre></div>
<p>which gives you access to one macro <code>@def_structequal</code>.</p>
<h2><a id="user-content-motivation--usage" class="anchor" aria-hidden="true" href="#motivation--usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation &amp; Usage</h2>
<p>Struct types have an <code>==</code> implementation by default which uses <code>===</code>, i.e. object identity, on the underlying
components to compare structs.</p>
<p>Let's define a struct</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyStruct
  a::Int
  b::Vector
end
"><pre><span class="pl-k">struct</span> MyStruct
  a<span class="pl-k">::</span><span class="pl-c1">Int</span>
  b<span class="pl-k">::</span><span class="pl-c1">Vector</span>
<span class="pl-k">end</span></pre></div>
<p>The default <code>==</code> fails to compare two structs with the same content</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MyStruct(1, [2,3]) == MyStruct(1, [2,3])  # false
"><pre><span class="pl-c1">MyStruct</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">==</span> <span class="pl-c1">MyStruct</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<p>To fix this use the supplied macro <code>@def_structequal</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@def_structequal MyStruct
MyStruct(1, [2,3]) == MyStruct(1, [2,3])  # true
"><pre><span class="pl-c1">@def_structequal</span> MyStruct
<span class="pl-c1">MyStruct</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">==</span> <span class="pl-c1">MyStruct</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p>Alternatively you can use the macro right on struct definition</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@def_structequal struct MyStruct2
  a::Int
  b::Vector
end
MyStruct2(1, [2,3]) == MyStruct2(1, [2,3])  # true
"><pre><span class="pl-c1">@def_structequal</span> <span class="pl-k">struct</span> MyStruct2
  a<span class="pl-k">::</span><span class="pl-c1">Int</span>
  b<span class="pl-k">::</span><span class="pl-c1">Vector</span>
<span class="pl-k">end</span>
<span class="pl-c1">MyStruct2</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">==</span> <span class="pl-c1">MyStruct2</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h2>
<p>It is like you would expect. the macro extracts the field names and defines <code>==</code> by referring to <code>==</code> comparison
of the fields.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@macroexpand @def_structequal MyStruct
"><pre><span class="pl-c1">@macroexpand</span> <span class="pl-c1">@def_structequal</span> MyStruct</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=":(function Base.:(==)(s1::MyStruct, s2::MyStruct)
      s1.a == s2.a &amp;&amp; s1.b == s2.b
  end)
"><pre>:(<span class="pl-k">function</span> Base.:(<span class="pl-k">==</span>)(s1<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>, s2<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>)
      s1<span class="pl-k">.</span>a <span class="pl-k">==</span> s2<span class="pl-k">.</span>a <span class="pl-k">&amp;&amp;</span> s1<span class="pl-k">.</span>b <span class="pl-k">==</span> s2<span class="pl-k">.</span>b
  <span class="pl-k">end</span>)</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>For more details to this topic, please see the discourse thread
<a href="https://discourse.julialang.org/t/surprising-struct-equality-test/4890/9" rel="nofollow">https://discourse.julialang.org/t/surprising-struct-equality-test/4890/9</a></p>
</article></div>