<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-aseconvert" class="anchor" aria-hidden="true" href="#aseconvert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ASEconvert</h1>
<p dir="auto"><a href="https://mfherbst.github.io/ASEconvert.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://mfherbst.github.io/ASEconvert.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/mfherbst/ASEconvert.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/mfherbst/ASEconvert.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mfherbst/ASEconvert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1ddc15a2ffea3a329832dfe23a4320ae12f2351a9ddbe081fbd0d4c3a2b3754b/68747470733a2f2f636f6465636f762e696f2f67682f6d666865726273742f415345636f6e766572742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mfherbst/ASEconvert.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Light-weight module to install ASE
and provide routines for converting between the Atoms datastructure
from <a href="https://wiki.fysik.dtu.dk/ase/index.html" rel="nofollow">ASE</a>
and atomistic data provided in
the <a href="https://github.com/JuliaMolSim/AtomsBase.jl">AtomsBase</a> ecosystem.
For both the package makes use of the
<a href="https://github.com/cjdoris/PythonCall.jl/">PythonCall</a>.</p>
<p dir="auto">This can be used for example as follows</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ASEconvert

# Make a silicon supercell using ASE
atoms_ase = ase.build.bulk(&quot;Si&quot;) * pytuple((4, 1, 1))

# Convert to an AtomsBase-compatible structure
atoms_ab = pyconvert(AbstractSystem, atoms_ase)

# Convert back to ASE and create a vacancy
newatoms_ase = convert_ase(atoms_ab)
newatoms_ase.pop(4)"><pre><span class="pl-k">using</span> ASEconvert

<span class="pl-c"><span class="pl-c">#</span> Make a silicon supercell using ASE</span>
atoms_ase <span class="pl-k">=</span> ase<span class="pl-k">.</span>build<span class="pl-k">.</span><span class="pl-c1">bulk</span>(<span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>) <span class="pl-k">*</span> <span class="pl-c1">pytuple</span>((<span class="pl-c1">4</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>))

<span class="pl-c"><span class="pl-c">#</span> Convert to an AtomsBase-compatible structure</span>
atoms_ab <span class="pl-k">=</span> <span class="pl-c1">pyconvert</span>(AbstractSystem, atoms_ase)

<span class="pl-c"><span class="pl-c">#</span> Convert back to ASE and create a vacancy</span>
newatoms_ase <span class="pl-k">=</span> <span class="pl-c1">convert_ase</span>(atoms_ab)
newatoms_ase<span class="pl-k">.</span><span class="pl-c1">pop</span>(<span class="pl-c1">4</span>)</pre></div>
</article></div>