<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-picosatjl" class="anchor" aria-hidden="true" href="#picosatjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PicoSAT.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/sisl/PicoSAT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/725c769a34838115ea2ac9ba0d9d1ed6b4b486ed2d10ec61f8bfc17cc7be16a7/68747470733a2f2f7472617669732d63692e6f72672f7369736c2f5069636f5341542e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sisl/PicoSAT.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/sisl/PicoSAT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7d374d3989b3fd7da39a0e75fc63b2c7b974ba3cb54c9dbed5888f83808cf5cd/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f7369736c2f5069636f5341542e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/sisl/PicoSAT.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">PicoSAT.jl provides <a href="www.julialang.org">Julia</a> bindings to the popular <a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem" rel="nofollow">SAT</a> solver <a href="http://fmv.jku.at/picosat/" rel="nofollow">picosat</a> by Armin Biere.  It is based off the Python <a href="https://github.com/ContinuumIO/pycosat">pycosat</a> and Go <a href="https://github.com/wkschwartz/pigosat">pigosat</a> bindings written by Ilan Schnell and Willam Schwartz.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install, run <code>Pkg.add("PicoSAT")</code> in Julia.  The entire picosat library (v960) is shipped with the package to make building the library easier.  Windows builds are currently not supported at the moment.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">The <code>PicoSAT</code> module exports two functions <code>solve</code> and <code>itersolve</code>.  Both functions take an iterable of clauses as a required argument.  Each clause is represented as an iterable of non-zero integers.</p>
<p dir="auto">Both methods take the following optional keyword arguments:</p>
<ul dir="auto">
<li><code>vars</code> - the number of variables</li>
<li><code>verbose</code> - prints solver logs to <code>STDOUT</code> when <code>verbose &gt; 0</code> with increasing detail.</li>
<li><code>proplimit</code> - helps to bound the execution time.  The number of propagations and the solution time are roughly linearly related.  A value of 0 (default) allows for an unbounded number of propagations.</li>
</ul>
<p dir="auto"><code>solve(clauses; vars::Integer=-1, verbose::Integer=0, proplimit::Integer=0)</code></p>
<ul dir="auto">
<li>Returns a solution if the problem is satisfiable.  Satisfiable solutions are represented as a vector of signed integers.  If the problem is not satisfiable the method returns an <code>:unsatisfiable</code> symbol.  If a solution cannot be found within the defined propagation limit, an <code>:unknown</code> symbol is returned.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import PicoSAT
julia&gt; cnf = Any[[1, -5, 4], [-1, 5, 3, 4], [-3, -4]];
julia&gt; PicoSAT.solve(cnf)
5-element Array{Int64,1}:
   1
  -2
  -3
  -4
   5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> PicoSAT
julia<span class="pl-k">&gt;</span> cnf <span class="pl-k">=</span> Any[[<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-c1">4</span>], [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], [<span class="pl-k">-</span><span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>]];
julia<span class="pl-k">&gt;</span> PicoSAT<span class="pl-k">.</span><span class="pl-c1">solve</span>(cnf)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
   <span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">2</span>
  <span class="pl-k">-</span><span class="pl-c1">3</span>
  <span class="pl-k">-</span><span class="pl-c1">4</span>
   <span class="pl-c1">5</span></pre></div>
<p dir="auto">The absolute values of the solution vector represent the ith variable.  The sign of the ith variable represents the boolean values <code>true</code> (+) and <code>false</code> (-).</p>
<p dir="auto"><code>itersolve(clauses; vars::Integer=-1, verbose::Integer=0, proplimit::Integer=0)</code></p>
<ul dir="auto">
<li>Returns an iterable object over all solutions.  When a user-defined propagation limit is specified, the iterator may not produce all feasible solutions.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import PicoSAT
julia&gt; cnf = Any[[1, -5, 4], [-1, 5, 3, 4], [-3, -4]];
julia&gt; PicoSAT.itersolve(cnf)
julia&gt; for sol in PicoSAT.itersolve(cnf)
           println(sol)
       end
[1,-2,-3,-4,5]
[1,-2,-3,4,-5]
[1,-2,-3,4,5]
[1,-2,3,-4,-5]
..."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> PicoSAT
julia<span class="pl-k">&gt;</span> cnf <span class="pl-k">=</span> Any[[<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-c1">4</span>], [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], [<span class="pl-k">-</span><span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>]];
julia<span class="pl-k">&gt;</span> PicoSAT<span class="pl-k">.</span><span class="pl-c1">itersolve</span>(cnf)
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> sol <span class="pl-k">in</span> PicoSAT<span class="pl-k">.</span><span class="pl-c1">itersolve</span>(cnf)
           <span class="pl-c1">println</span>(sol)
       <span class="pl-k">end</span>
[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">3</span>,<span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-c1">5</span>]
[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-k">-</span><span class="pl-c1">5</span>]
[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>]
[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-k">-</span><span class="pl-c1">5</span>]
<span class="pl-k">...</span></pre></div>
<h3 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h3>
<p dir="auto"><code>PicoSAT.jl</code> and the original <code>picosat</code> C-library are licensed under the MIT "Expat" license.</p>
<h3 dir="auto"><a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributors</h3>
<ul dir="auto">
<li>Jake Bolewski - <a href="http://github.com/jakebolewski">@jakebolewski</a></li>
<li>Carlo Lucibello - <a href="https://github.com/CarloLucibello">@CarloLucibello</a></li>
<li>Maxime Bouton -<a href="https://github.com/MaximeBouton">@MaximeBouton</a></li>
</ul>
</article></div>