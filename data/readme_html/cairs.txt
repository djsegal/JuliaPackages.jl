<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cairs---continuous-assimilation-of-integrating-rain-sensors" class="anchor" aria-hidden="true" href="#cairs---continuous-assimilation-of-integrating-rain-sensors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CAIRS - Continuous Assimilation of Integrating Rain Sensors</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3945da74b03992069a6585c1c8badc3e127f6e03/68747470733a2f2f7261772e6769746875622e636f6d2f736368656964616e2f43414952532f6d61737465722f496d61676573253230666f72253230526561646d652f4865616465722e706e67"><img src="https://camo.githubusercontent.com/3945da74b03992069a6585c1c8badc3e127f6e03/68747470733a2f2f7261772e6769746875622e636f6d2f736368656964616e2f43414952532f6d61737465722f496d61676573253230666f72253230526561646d652f4865616465722e706e67" alt="rain map" data-canonical-src="https://raw.github.com/scheidan/CAIRS/master/Images%20for%20Readme/Header.png" style="max-width:100%;"></a></p>
<p>Linux, OS X:
<a href="https://travis-ci.org/scheidan/CAIRS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dab42f77c9ab2dc4ab65b20759e6758b32581f92/68747470733a2f2f7472617669732d63692e6f72672f736368656964616e2f43414952532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheidan/CAIRS.jl.svg?branch=master" style="max-width:100%;"></a>
Windows:
<a href="https://ci.appveyor.com/project/scheidan/cairs-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/19b002e6bb7207b8e85e39abeb02794f5e8288d9/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f396375766a75656b3833777574306a752f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/9cuvjuek83wut0ju/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/scheidan/CAIRS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bbb3e566f3efb7a8f0db827d0643114324fe1c75/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f736368656964616e2f43414952532e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/scheidan/CAIRS.jl.svg" style="max-width:100%;"></a></p>
<p><em>CAIRS</em> is a framework to reconstruct rain fields by assimilating
signals of fundamentally different rain sensors.</p>
<p>In particular, the <em>integration characteristics</em> of sensors are
explicitly considered.  For example, non-recording standard rain gauges
integrate over time and deliver information such as the daily rainfall
sums. The rain-induced attenuation of micro wave links (MWL) can be
used to measure the path-integrated intensities - an example of a sensor with
spatial integration.</p>
<p>Sensor signals with different scales (e.g. continuous, binary) can be
assimilated. Furthermore, <em>CAIRS</em> is formulated continuously in time
and space. This is helpful because it enables a natural consideration
of signals with irregular time-intervals.</p>
<p>The mathematical model is described in <a href="#publication">Scheidegger and Rieckermann (2014)</a>.
The basic functionality and application is explained in <a href="https://github.com/scheidan/CAIRS-Tutorial">this tutorial</a>.</p>
<p>Note, <em>CAIRS</em> is still under development and the interface may change.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p><em>CAIRS</em> is a <a href="http://julialang.org/" rel="nofollow">Julia</a> package. The first step is to download and install
<a href="http://julialang.org/downloads/" rel="nofollow">Julia</a> version 0.6 or newer.</p>
<p><em>CAIRS</em> can then be installed with the Julia command <code>Pkg.clone()</code>:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>git://github.com/scheidan/CAIRS.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p>After that, <em>CAIRS</em> behaves like a normal package. For example, it can
be updated with <code>Pkg.update()</code>.</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<p>First, the package <em>CAIRS</em> must be loaded. For convinience, it is also
recommended to load the packages <code>Dates</code> and <code>Distributions</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CAIRS
<span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> Base<span class="pl-k">.</span>Dates</pre></div>
<h3><a id="user-content-sensor-definition" class="anchor" aria-hidden="true" href="#sensor-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sensor definition</h3>
<p>Every sensor must be characterized. In the simplest case a sensor measures
the rain intensity at a point. In this case (the logarithm of) the signal
distribution must be defined conditioned on the intesity at this coordinate:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">log_p_gauge</span>(S<span class="pl-k">::</span><span class="pl-c1">Float64</span>, R<span class="pl-k">::</span><span class="pl-c1">Vector</span>) <span class="pl-c"><span class="pl-c">#</span> non-linear continuous rain gauge</span>

	mu <span class="pl-k">=</span> <span class="pl-c1">0.1</span><span class="pl-k">+</span>R[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2.0</span>    <span class="pl-c"><span class="pl-c">#</span> Note, the signal and can be non-linearly</span>
						 <span class="pl-c"><span class="pl-c">#</span> related to the rain intensity.</span>
	sigma <span class="pl-k">=</span> <span class="pl-c1">0.005</span>

	 <span class="pl-c"><span class="pl-c">#</span># log of normal density, p(S|R)</span>
	<span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(mu, sigma), S)   <span class="pl-c"><span class="pl-c">#</span> doesn't have to be normal</span>
<span class="pl-k">end</span>

sensor_gauge <span class="pl-k">=</span> <span class="pl-c1">Sensor</span>(log_p_gauge)</pre></div>
<p>For integrating sensors, also the integration domain must be
specified. For example, a micro wave link (MWL) with length <code>6</code> may be
defined as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">log_p_MWL</span>(S<span class="pl-k">::</span><span class="pl-c1">Float64</span>, I<span class="pl-k">::</span><span class="pl-c1">Float64</span>)

	R_mean <span class="pl-k">=</span> I<span class="pl-k">/</span><span class="pl-c1">6.0</span>
	sigma <span class="pl-k">=</span> <span class="pl-c1">0.1</span>

	<span class="pl-c"><span class="pl-c">#</span># log of normal density, p(S|I)</span>
	<span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(R_mean, sigma), S)
<span class="pl-k">end</span>

sensor_MWL <span class="pl-k">=</span> <span class="pl-c1">Sensor</span>(log_p_MWL, <span class="pl-c1">Coor</span>(<span class="pl-c1">6</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)) <span class="pl-c"><span class="pl-c">#</span> integrates along a path of length 6</span></pre></div>
<h3><a id="user-content-prior-definition" class="anchor" aria-hidden="true" href="#prior-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prior definition</h3>
<p>The prior of the rain field is modeled as Gaussian process (GP). A GP
is described by a mean and a covariance function.</p>
<p>This functions can be specified by the user. The mean function returns
the prior mean of the rain intensity at a given coordinate. It must
take a single argument of type <code>Coor</code>. The covariance function must
return the covariance of the rain intensities at two given point, given
by two arguments of type <code>Coor</code>. Note, it is not checked if the
provided function is a valid covariance function!</p>
<p>However, helpers to construct valid functions are provided. The functions
<code>mean_constant()</code> and <code>cov_exponential()</code> create a simple constant
mean, and a separable gamma-exponential covariance function. Only the
parameters must be provided:</p>
<div class="highlight highlight-source-julia"><pre>mean_GP <span class="pl-k">=</span> <span class="pl-c1">mean_constant</span>(mean<span class="pl-k">=</span><span class="pl-c1">2.0</span>)

cov_GP <span class="pl-k">=</span> <span class="pl-c1">cov_exponential</span>(sigma<span class="pl-k">=</span><span class="pl-c1">10.0</span>,           <span class="pl-c"><span class="pl-c">#</span> standard deviation of GP</span>
						 l_spatial<span class="pl-k">=</span><span class="pl-c1">1.5</span>,        <span class="pl-c"><span class="pl-c">#</span> spatial correlation length</span>
						 l_temporal<span class="pl-k">=</span><span class="pl-c1">Minute</span>(<span class="pl-c1">1</span>), <span class="pl-c"><span class="pl-c">#</span> temporal correlation length</span>
						 gamma<span class="pl-k">=</span><span class="pl-c1">1.0</span>)            <span class="pl-c"><span class="pl-c">#</span> exponent for smoothness in [0, 2]</span></pre></div>
<p>Other types of covariance functions will be added in future.</p>
<h3><a id="user-content-signal-import" class="anchor" aria-hidden="true" href="#signal-import"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Signal import</h3>
<p>The next step is to import the signals. Every signal must have an
attached sensor. Signals can be constructed with the function
<code>Signal</code> or more conveniently with <code>add_signal()</code>.</p>
<p>Currently <code>add_signal()</code> expected that the signals of every sensor are
stored in a separate file. The file must contain two columns:</p>
<ul>
<li>Column 1: date and time</li>
<li>Column 2: signal values</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># path to example data that come with the CAIRS package</span>
path1 <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>CAIRS<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>example<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sensor1.csv<span class="pl-pds">"</span></span>)
path2 <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>CAIRS<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>example<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sensor2.csv<span class="pl-pds">"</span></span>)

sig <span class="pl-k">=</span> Signal[]                          <span class="pl-c"><span class="pl-c">#</span> create an empty array for Signals</span>

<span class="pl-c1">add_signal!</span>(sig,                        <span class="pl-c"><span class="pl-c">#</span> add signal to vector 'sig'</span>
			path1,                      <span class="pl-c"><span class="pl-c">#</span> file name</span>
			sensor_gauge,               <span class="pl-c"><span class="pl-c">#</span> sensor</span>
			<span class="pl-c1">Coor</span>(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>),                 <span class="pl-c"><span class="pl-c">#</span> coordinate of the sensor</span>
			date_format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>d.m.yyyy HH:MM:SS<span class="pl-pds">"</span></span>,
			delim<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>)                  <span class="pl-c"><span class="pl-c">#</span> delimitation character</span>


<span class="pl-c1">add_signal!</span>(sig, path2,
			sensor_MWL,                 <span class="pl-c"><span class="pl-c">#</span> MWL link</span>
			<span class="pl-c1">Coor</span>(<span class="pl-c1">4.2</span>, <span class="pl-c1">2</span>),               <span class="pl-c"><span class="pl-c">#</span> coordinate of one end point of the sensor</span>
			<span class="pl-c1">0.9</span>,                        <span class="pl-c"><span class="pl-c">#</span> rotation around the point defined above in [rad]</span>
			date_format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>d.m.yyyy HH:MM:SS<span class="pl-pds">"</span></span>,
			delim<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>)</pre></div>
<p>Information about a signal can be printed with <code>show</code>, e.g. <code>show(sig[1])</code>.</p>
<p>Writing the sensor positions in a file is useful for plotting:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">sensor2csv</span>(sig, <span class="pl-s"><span class="pl-pds">"</span>sensor_coor.csv<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-definition-of-prediction-points" class="anchor" aria-hidden="true" href="#definition-of-prediction-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Definition of prediction points</h3>
<p>The location for which a prediction of the rain intesity is desired must be
defined as an <code>Array</code> or <code>Vector</code> of coordinates. Coordinates are
defined with <code>Coor(x, y, time)</code>. Time can be a number or a <code>DateTime</code>
object.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span>## create a simple grid</span>
nn <span class="pl-k">=</span> <span class="pl-c1">20</span>
loc_pred <span class="pl-k">=</span> [<span class="pl-c1">Coor</span>(i, j, time)
			<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>, nn), j<span class="pl-k">=</span><span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>, nn),
			time<span class="pl-k">=</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2013</span>, <span class="pl-c1">11</span>, <span class="pl-c1">22</span>, <span class="pl-c1">13</span>, <span class="pl-c1">15</span>, <span class="pl-c1">00</span>) : <span class="pl-c1">Minute</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2013</span>, <span class="pl-c1">11</span>, <span class="pl-c1">22</span>, <span class="pl-c1">13</span>, <span class="pl-c1">20</span>, <span class="pl-c1">00</span>) ]</pre></div>
<p>This produced a regular grid, but the point could also be irregularly distributed. Also, not only predictions for coordinates but also for intesities integrated over a domain can be made. Domains are defined by the function <code>Domain</code>.</p>
<h3><a id="user-content-assimilation" class="anchor" aria-hidden="true" href="#assimilation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assimilation</h3>
<p>The assimilation of the signals and the computation of the predictions are done with <code>predict</code>.</p>
<div class="highlight highlight-source-julia"><pre>R_pred <span class="pl-k">=</span> <span class="pl-c1">predict</span>(loc_pred,               <span class="pl-c"><span class="pl-c">#</span> vector or array with locations for predictions</span>
				 sig,                    <span class="pl-c"><span class="pl-c">#</span> vector of signals</span>
				 mean_GP,                <span class="pl-c"><span class="pl-c">#</span> mean function of prior</span>
				 cov_GP,                 <span class="pl-c"><span class="pl-c">#</span> covariance function of prior</span>
				 n_sample_calib <span class="pl-k">=</span> <span class="pl-c1">20000</span>, <span class="pl-c"><span class="pl-c">#</span> number of iterations of the Gibbs sampler</span>
				 burn_in <span class="pl-k">=</span> <span class="pl-c1">5000</span>,         <span class="pl-c"><span class="pl-c">#</span> number of removed samples (and length of adaptation)</span>
				 n_sample_pred <span class="pl-k">=</span> <span class="pl-c1">6000</span>,   <span class="pl-c"><span class="pl-c">#</span> number of samples for predictions</span>
				 delta <span class="pl-k">=</span> <span class="pl-c1">Second</span>(<span class="pl-c1">90</span>))     <span class="pl-c"><span class="pl-c">#</span> consider all signals within time 'delta'</span>
										 <span class="pl-c"><span class="pl-c">#</span> from prediction points</span></pre></div>
<p>Write a summary of the samples in a file that is used for visualization:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">summary2csv</span>(R_pred, <span class="pl-s"><span class="pl-pds">"</span>rain_field.csv<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-visualization-with-r" class="anchor" aria-hidden="true" href="#visualization-with-r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Visualization with R</h3>
<p>One possibility to visualize the result is to use <a href="http://www.r-project.org/" rel="nofollow">R</a>. A simple
R-script to produce rain maps comes with <em>CAIRE</em>. It requires that R and
the R-libraries <code>lattice</code>, <code>latticeExtra</code> and <code>tripack</code> are installed.</p>
<div class="highlight highlight-source-julia"><pre>pathRscript <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>CAIRS<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>compute_rain_map.r<span class="pl-pds">"</span></span>)
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>Rscript <span class="pl-v">$pathRscript</span>  rain_field.csv sensor_coor.csv out.pdf<span class="pl-pds">`</span></span>)</pre></div>
<p>Note, here it is assumed that <code>Rscript</code> is in PATH.</p>
<h1><a id="user-content-publication" class="anchor" aria-hidden="true" href="#publication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Publication</h1>
<p><a name="user-content-publication"></a></p>
<p>Scheidegger, A. and Rieckermann, J. (2014) "Bayesian assimilation of
rainfall sensors with fundamentally different integration
characteristics" in WRaH Proceedings, Washington, DC.</p>
</article></div>