<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-clarrays" class="anchor" aria-hidden="true" href="#clarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CLArrays</h1>
<p><strong>Build status</strong>: <a href="https://gitlab.com/JuliaGPU/CLArrays.jl/pipelines" rel="nofollow"><img src="https://camo.githubusercontent.com/b7dd481bfeae6e9de0b802c92fd6c1a543b63c0e/68747470733a2f2f6769746c61622e636f6d2f4a756c69614750552f434c4172726179732e6a6c2f6261646765732f6d61737465722f706970656c696e652e737667" alt="" data-canonical-src="https://gitlab.com/JuliaGPU/CLArrays.jl/badges/master/pipeline.svg" style="max-width:100%;"></a></p>
<p>Implementation of the <a href="https://github.com/JuliaGPU/GPUArrays.jl">abstract GPU Array Interface</a></p>
<p>CLArray uses <a href="https://github.com/SimonDanisch/Transpiler.jl">Transpiler.jl</a> to compile Julia functions for the GPU using OpenCL.</p>
<p>It implements the full abstract gpu interface from GPUArrays, and most interactions will be through those functions.
To learn how to use it, please refer to the GPUArray documentation:</p>
<p><a href="https://JuliaGPU.github.io/GPUArrays.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>CLArrays includes several other OpenCL-specific functions:</p>
<ul>
<li><code>CLArrays.devices()</code> returns a list of the OpenCL compute devices (CPU and GPU) available on the system.</li>
<li><code>CLArrays.init(dev::OpenCL.cl.Device)</code> will set the given device to be the active device. If you do not initialize a device explicitly, a default device will be chosen automatically, prioritizing GPU devices over CPU devices.</li>
<li><code>is_gpu(dev::OpenCL.cl.Device)</code> returns <code>true</code> if the given device is a GPU.</li>
<li><code>is_cpu(dev::OpenCL.cl.Device)</code> returns <code>true</code> if the given device is a CPU.</li>
<li><code>gpu_call(kernel::Function, A::GPUArray, args::Tuple, configuration = length(A))</code> calls the given function on the GPU. See the function documentation for more details.</li>
</ul>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CLArrays

<span class="pl-k">for</span> dev <span class="pl-k">in</span> CLArrays<span class="pl-k">.</span><span class="pl-c1">devices</span>()
    CLArrays<span class="pl-k">.</span><span class="pl-c1">init</span>(dev)
    x <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(CLArray{Float32}, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> create a CLArray on device `dev`</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> you can also filter with is_gpu, is_cpu</span>
gpu_devices <span class="pl-k">=</span> CLArrays<span class="pl-k">.</span><span class="pl-c1">devices</span>(is_gpu)</pre></div>
<p>Note that CLArrays.jl does not handle installing OpenCL drivers for your machine. You will need to make sure you have the appropriate drivers installed for your hardware.</p>
<h4><a id="user-content-install-opencl-drivers-for-intel-graphics-in-linux" class="anchor" aria-hidden="true" href="#install-opencl-drivers-for-intel-graphics-in-linux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install OpenCL drivers for intel graphics in Linux</h4>
<pre><code>cd $HOME
git clone https://github.com/intel/beignet
cd $HOME/beignet
sudo apt-get install cmake pkg-config python ocl-icd-dev libegl1-mesa-dev ocl-icd-opencl-dev libdrm-dev libxfixes-dev libxext-dev llvm-3.6-dev clang-3.6 libclang-3.6-dev libtinfo-dev libedit-dev zlib1g-devD
mkdir build; cd build; cmake ..
make
make utest; . utests/setenv.sh; utests/utest_run
sudo make install
</code></pre>
</article></div>