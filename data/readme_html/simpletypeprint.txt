<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simpletypeprintjl" class="anchor" aria-hidden="true" href="#simpletypeprintjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleTypePrint.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/MrVPlusOne/SimpleTypePrint" rel="nofollow"><img src="https://camo.githubusercontent.com/564cd4782db2fabe227ee2c3dd4a3d09ba9934aaae13dcf5bc99c2df87fa9a78/68747470733a2f2f7472617669732d63692e636f6d2f4d7256506c75734f6e652f53696d706c65547970655072696e742e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MrVPlusOne/SimpleTypePrint.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/MrVPlusOne/SimpleTypePrint" rel="nofollow"><img src="https://camo.githubusercontent.com/aa5fa67808d5faefbc02b586cfb44c9e046418a7fd8f03943b09dbdc41a4e5c2/68747470733a2f2f636f6465636f762e696f2f67682f4d7256506c75734f6e652f53696d706c65547970655072696e742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/MrVPlusOne/SimpleTypePrint/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Display Julia types in a more human-friendly way.</strong></p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">This package provides alternative type printing functions to make it easier to read Julia types. So instead of having to read messy outputs like this:
<a target="_blank" rel="noopener noreferrer" href="images/Before.png"><img src="images/Before.png" alt="Before.png" style="max-width: 100%;"></a></p>
<p dir="auto">Using this package, we can overwrite <code>Base.show(::IO, ::Type)</code> to achieve a much cleaner result:
<a target="_blank" rel="noopener noreferrer" href="images/After.png"><img src="images/After.png" alt="After.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-usages" class="anchor" aria-hidden="true" href="#usages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usages</h2>
<p dir="auto">First, install the package with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Using Pkg; Pkg.add(&quot;SimpleTypePrint&quot;)"><pre>Using Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SimpleTypePrint<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">You can then override the default type printing behavior by calling</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="config_type_display(max_depth=3, short_type_name=true)"><pre><span class="pl-c1">config_type_display</span>(max_depth<span class="pl-k">=</span><span class="pl-c1">3</span>, short_type_name<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">If you prefer not to override the Julia default, you can instead use the provided <code>show_type(io, type; kwargs...)</code> and <code>repr_type(type; kwargs...)</code> function to manually print selected types.</p>
<h2 dir="auto"><a id="user-content-changes-compared-to-baseshow" class="anchor" aria-hidden="true" href="#changes-compared-to-baseshow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Changes compared to <code>Base.show</code></h2>
<h3 dir="auto"><a id="user-content-merging-nested-where-clauses" class="anchor" aria-hidden="true" href="#merging-nested-where-clauses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Merging nested where clauses</h3>
<p dir="auto">By default, Julia display multiple where clauses separately, whereas in SimpleTypePrint, where clauses are correctly merged, just like how you would write them.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td><code>Tuple{A,B,C} where {A, B, C}</code></td>
</tr>
<tr>
<td>Base.show</td>
<td><code>Tuple{A,B,C} where C where B where A</code></td>
</tr>
<tr>
<td>SimpleTypePrint</td>
<td><code>Tuple{A,B,C} where {A,B,C}</code></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-displaying-deeply-nested-parts-as-ellipsis" class="anchor" aria-hidden="true" href="#displaying-deeply-nested-parts-as-ellipsis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Displaying deeply nested parts as ellipsis</h3>
<p dir="auto">The default max display depth is 3, but you can change this value using the <code>max_depth</code> keyword argument.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td><code>Tuple{Tuple{Tuple{A,B},C},D} where {A,B,C,D}</code></td>
</tr>
<tr>
<td>Base.show</td>
<td><code>Tuple{Tuple{Tuple{A,B},C},D} where D where C where B where A</code></td>
</tr>
<tr>
<td>SimpleTypePrint(max_depth=3)</td>
<td><code>Tuple{Tuple{Tuple{...},C},D} where {A,B,C,D}</code></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-displaying-type-names-without-module-prefixes" class="anchor" aria-hidden="true" href="#displaying-type-names-without-module-prefixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Displaying type names without module prefixes</h3>
<p dir="auto">By default, Julia displays module prefixes unless the type is directly visible from the current scope. SimpleTypePrint allows you to opt-out from this behavior.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; module A
           module B
               struct Foo{A} end
           end
       end  # Foo is nested inside A and B.
Main.A"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> A
           <span class="pl-k">module</span> B
               <span class="pl-k">struct</span> Foo{A} <span class="pl-k">end</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>  <span class="pl-c"><span class="pl-c">#</span> Foo is nested inside A and B.</span>
Main<span class="pl-k">.</span>A</pre></div>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td><code>A.B.Foo</code></td>
</tr>
<tr>
<td>Base.show</td>
<td><code>Main.A.B.Foo</code></td>
</tr>
<tr>
<td>SimpleTypePrint(short_type_name=true)</td>
<td><code>Foo{A} where A</code></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-renaming-type-variables-with-conflicting-names" class="anchor" aria-hidden="true" href="#renaming-type-variables-with-conflicting-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Renaming type variables with conflicting names</h3>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td><code>Tuple{(Tuple{A} where A), A} where A</code></td>
</tr>
<tr>
<td>Base.show</td>
<td><code>Tuple{Tuple{A} where A,A} where A</code></td>
</tr>
<tr>
<td>SimpleTypePrint</td>
<td><code>Tuple{Tuple{A1} where A1,A} where A</code></td>
</tr>
</tbody>
</table>
</article></div>