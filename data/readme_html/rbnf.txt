<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-restructured-bnf" class="anchor" aria-hidden="true" href="#restructured-bnf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Restructured BNF</h1>
<p>The Restructured BNF(RBNF) aims at the generating parsers without requiring redundant coding from programmers.</p>
<p>RBNF is designed for</p>
<ul>
<li>Maintainability: unlike Regex, RBNF's good readability makes more sense in the syntax level.</li>
<li>Conciseness: avoid self-repeating you did with other parser generators.</li>
<li>Efficiency: RBNF just specifies the semantics, we could use customizable back ends/parsing algorithms here.</li>
<li>Extensibility: mix Julia meta-programming with the notations to define parsers/lexers.</li>
</ul>
<p>Taking advantage of a BNF source block, <strong>lexers</strong> and <strong>parsers</strong> are generated as well as
some data type definitions representing tokenizers and ASTs.</p>
<p>Some modern facilities of parsing are introduced.</p>
<p>The notations of dedicated escaping lexers makes it super convenient to implement lexers for nested comments, string literals and so on.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="str = @quote (&quot;\&quot;&quot; ,&quot;\\\&quot;&quot;, &quot;\&quot;&quot;)
"><pre>str <span class="pl-k">=</span> <span class="pl-c1">@quote</span> (<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\"</span><span class="pl-pds">"</span></span> ,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\\"</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)</pre></div>
<p>The notations of grammar macros makes it super easy to achieve code reuse for RBNF.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="join(separator, rule) = :[$rule, ($separator, $rule){*}]
# `join(',', 'a')` generates a parser to parse something like &quot;a&quot; or &quot;a,a,a&quot;
"><pre><span class="pl-en">join</span>(separator, rule) <span class="pl-k">=</span> :[<span class="pl-k">$</span>rule, (<span class="pl-k">$</span>separator, <span class="pl-k">$</span>rule){<span class="pl-k">*</span>}]
<span class="pl-c"><span class="pl-c">#</span> `join(',', 'a')` generates a parser to parse something like "a" or "a,a,a"</span></pre></div>
<h1><a id="user-content-about-implementation-and-efficiency" class="anchor" aria-hidden="true" href="#about-implementation-and-efficiency"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About Implementation and Efficiency</h1>
<p>The rudimentary implementation(back end) is the Parser Combinator,
thus the direct left recursions are not supported implicitly,
plus the indirect left recursions are not supported.</p>
<p>Note that currently the lack of further analyses and optimizations may lead
to some problems in expressiveness and performance, however it's not that severe
in many use cases not concerned to real time applications.</p>
<p>We're to figure out a solid way to compile the parser definitions to bottom-up parsers
(thus left recursions wouldn't be a problem) with the capability of processing context sensitive cases.</p>
<p>You can check following projects to see
what I've been achieved and, what I'm now researching.</p>
<ul>
<li><a href="https://github.com/thautwarm/RBNF">https://github.com/thautwarm/RBNF</a></li>
<li><a href="https://github.com/thautwarm/rbnfrbnf">https://github.com/thautwarm/rbnfrbnf</a></li>
<li><a href="https://github.com/thautwarm/RBNF.hs">https://github.com/thautwarm/RBNF.hs</a></li>
</ul>
<h1><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h1>
<p>P.S: rules can be mutually referenced by each other.</p>
<h2><a id="user-content-structures-of-defining-a-language" class="anchor" aria-hidden="true" href="#structures-of-defining-a-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structures of Defining A Language</h2>
<p>Firstly we need an immutable object to denote your language.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RBNF

struct YourLang end
RBNF.@parser YourLang begin

    ignore{#= tokenizer names to be ignored =#}
    # e.g.,  `ignore{mystring, mychar}`

    reserved = [#= reserved identifiers =#]
    # strings, symbols and even bool literals are allowed here,
    # and their strings will be regarded as reserved keywords.
    # e.g., reserved = [true, &quot;if&quot;, :else]

    @grammar
    # define grammar rules

    # following ':=' statement defines a grammar node.
    # note, a structure named &quot;Struct_node&quot; will be defined as well.
    node := #= a combination of rules =#

    # following '=' statement defines an alias for a combination of rules.
    alias = #= a combination of rules =#

    @token
    # define tokenizers as well as their corresponding lexers

    mystring  := &quot;abc&quot;
    mychar    := 'k'
    myregex   := r&quot;\G\s+&quot;
    myquote   := @quote (&quot;begin_string&quot; ,&quot;\\end_string&quot;, &quot;end_string&quot;)
end

tokens = RBNF.runlexer(YourLang, source_code)

ast, ctx = RBNF.runparser(parser_defined_in_grammar_section, tokens)
"><pre><span class="pl-k">using</span> RBNF

<span class="pl-k">struct</span> YourLang <span class="pl-k">end</span>
RBNF<span class="pl-k">.</span><span class="pl-c1">@parser</span> YourLang <span class="pl-k">begin</span>

    ignore{<span class="pl-c"><span class="pl-c">#=</span> tokenizer names to be ignored <span class="pl-c">=#</span></span>}
    <span class="pl-c"><span class="pl-c">#</span> e.g.,  `ignore{mystring, mychar}`</span>

    reserved <span class="pl-k">=</span> [<span class="pl-c"><span class="pl-c">#=</span> reserved identifiers <span class="pl-c">=#</span></span>]
    <span class="pl-c"><span class="pl-c">#</span> strings, symbols and even bool literals are allowed here,</span>
    <span class="pl-c"><span class="pl-c">#</span> and their strings will be regarded as reserved keywords.</span>
    <span class="pl-c"><span class="pl-c">#</span> e.g., reserved = [true, "if", :else]</span>

    <span class="pl-c1">@grammar</span>
    <span class="pl-c"><span class="pl-c">#</span> define grammar rules</span>

    <span class="pl-c"><span class="pl-c">#</span> following ':=' statement defines a grammar node.</span>
    <span class="pl-c"><span class="pl-c">#</span> note, a structure named "Struct_node" will be defined as well.</span>
    node <span class="pl-k">:=</span> <span class="pl-c"><span class="pl-c">#=</span> a combination of rules <span class="pl-c">=#</span></span>

    <span class="pl-c"><span class="pl-c">#</span> following '=' statement defines an alias for a combination of rules.</span>
    alias <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#=</span> a combination of rules <span class="pl-c">=#</span></span>

    <span class="pl-c1">@token</span>
    <span class="pl-c"><span class="pl-c">#</span> define tokenizers as well as their corresponding lexers</span>

    mystring  <span class="pl-k">:=</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>
    mychar    <span class="pl-k">:=</span> <span class="pl-s"><span class="pl-pds">'</span>k<span class="pl-pds">'</span></span>
    myregex   <span class="pl-k">:=</span> <span class="pl-sr"><span class="pl-pds">r"</span><span class="pl-cce">\G\s</span>+<span class="pl-pds">"</span></span>
    myquote   <span class="pl-k">:=</span> <span class="pl-c1">@quote</span> (<span class="pl-s"><span class="pl-pds">"</span>begin_string<span class="pl-pds">"</span></span> ,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>end_string<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>end_string<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

tokens <span class="pl-k">=</span> RBNF<span class="pl-k">.</span><span class="pl-c1">runlexer</span>(YourLang, source_code)

ast, ctx <span class="pl-k">=</span> RBNF<span class="pl-k">.</span><span class="pl-c1">runparser</span>(parser_defined_in_grammar_section, tokens)</pre></div>
<h2><a id="user-content-tokenizer" class="anchor" aria-hidden="true" href="#tokenizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tokenizer</h2>
<p>Unlike many other parser generators(yes, I'm talking to you, **** of Rust),
RBNF provides rich information with tokenizers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Token{T}
    lineno :: Int64
    colno  :: Int32
    offset :: Int64
    str    :: String
    span   :: Int32
end
"><pre><span class="pl-k">struct</span> Token{T}
    lineno <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
    colno  <span class="pl-k">::</span> <span class="pl-c1">Int32</span>
    offset <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
    str    <span class="pl-k">::</span> <span class="pl-c1">String</span>
    span   <span class="pl-k">::</span> <span class="pl-c1">Int32</span>
<span class="pl-k">end</span></pre></div>
<p>The type parameter <code>T</code> is used to denote which class the tokenizer belongs to.</p>
<p>For instance, if some tokenizer denotes the reserved keywords, their type will
be <code>Token{:reserved}</code>.</p>
<p>If a tokenizer is handled with such a lexer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@token
identifier = r&quot;\G[A-Za-z_]{1}[A-Za-z0-9_]*&quot;
"><pre><span class="pl-c1">@token</span>
identifier <span class="pl-k">=</span> <span class="pl-sr"><span class="pl-pds">r"</span><span class="pl-cce">\G</span>[A-Za-z_]{1}[A-Za-z0-9_]*<span class="pl-pds">"</span></span></pre></div>
<p>It'll then be of type <code>Token{:identifier}</code>.</p>
<h2><a id="user-content-sequence" class="anchor" aria-hidden="true" href="#sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sequence</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
c = ['a', 'b']
"><pre><span class="pl-c1">@grammar</span>
c <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>]</pre></div>
<p><code>c</code> parses <code>[Token(str="a", ...), Token(str="b", ...)]</code>,
and outputs a list <code>[Token(str="a", ...), Token(str="b", ...)]</code>.</p>
<h2><a id="user-content-fields" class="anchor" aria-hidden="true" href="#fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fields</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
c := [a='a', b='b']
"><pre><span class="pl-c1">@grammar</span>
c <span class="pl-k">:=</span> [a<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>]</pre></div>
<p><code>c</code> parses <code>[Token(str="a", ...), Token(str="b", ...)]</code>,
and outputs <code>Struct_c(a=Token(str="a", ...), b=Token(str="b", ...))</code>.</p>
<p>P.S: rule <code>c</code> will produce instances of automatically generated data types <code>Struct_c</code>. You can specify the names of generated structs by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="RBNF.typename(your_language, name::Symbol) = ...
# transform name. 
# e.g., &quot;c&quot; -&gt; &quot;Struct_c&quot;:
# 
RBNF.typename(your_language, name::Symbol) = Symbol(:Struct_, name)
"><pre>RBNF<span class="pl-k">.</span><span class="pl-en">typename</span>(your_language, name<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-c"><span class="pl-c">#</span> transform name. </span>
<span class="pl-c"><span class="pl-c">#</span> e.g., "c" -&gt; "Struct_c":</span>
<span class="pl-c"><span class="pl-c">#</span> </span>
RBNF<span class="pl-k">.</span><span class="pl-en">typename</span>(your_language, name<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">=</span> <span class="pl-c1">Symbol</span>(<span class="pl-c1">:Struct_</span>, name)</pre></div>
<h2><a id="user-content-custom-data-types" class="anchor" aria-hidden="true" href="#custom-data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Data Types</h2>
<p>Firstly you just define your own data type in the global scope of current module.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
struct C
    a :: Token
    b :: Token
end

...
@grammar
c :: C := [a='a', b='b']
...
"><pre><span class="pl-k">struct</span> C
    a <span class="pl-k">::</span> <span class="pl-c1">Token</span>
    b <span class="pl-k">::</span> <span class="pl-c1">Token</span>
<span class="pl-k">end</span>

<span class="pl-k">...</span>
<span class="pl-c1">@grammar</span>
c <span class="pl-k">::</span> <span class="pl-c1">C</span> <span class="pl-k">:=</span> [a<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>]
<span class="pl-k">...</span></pre></div>
<p><code>c</code> parses <code>[Token(str="a", ...), Token(str="b", ...)]</code>,
and outputs <code>C(a=Token(str="a", ...), b=Token(str="b", ...))</code>.</p>
<h2><a id="user-content-tuple" class="anchor" aria-hidden="true" href="#tuple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tuple</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
c = ('a', 'b')
"><pre><span class="pl-c1">@grammar</span>
c <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>)</pre></div>
<p><code>c</code> parses <code>[Token(str="a", ...), Token(str="b", ...)]</code>,
and outputs a tuple <code>(Token(str="a", ...), Token(str="b", ...))</code>.</p>
<h2><a id="user-content-not" class="anchor" aria-hidden="true" href="#not"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Not</h2>
<p>Currently <strong>Not</strong> parser is only allowed on literals.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
A = !'a'
"><pre><span class="pl-c1">@grammar</span>
A <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span></pre></div>
<p><code>A</code> can parse <code>[Token(str=not_a)]</code> for all <code>not_a != "a"</code>.</p>
<h2><a id="user-content-optional" class="anchor" aria-hidden="true" href="#optional"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optional</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="...
@grammar
a    = &quot;a&quot;
b    = &quot;b&quot;
c    = [a.?, b]
...
"><pre><span class="pl-k">...</span>
<span class="pl-c1">@grammar</span>
a    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>
b    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>
c    <span class="pl-k">=</span> [a.?, b]
<span class="pl-k">...</span></pre></div>
<p><code>c</code> can parse tokenizers <code>[Token(str="a", ...), Token(str="b", ...)]</code> or
<code>[Token(str="a", ...)]</code>,
and outputs <code>[Token(str="a", ...), Token(str="b", ...)]</code> or
<code>[Some(nothing), Token(str="b", ...)]</code>, respectively.</p>
<h2><a id="user-content-repeat" class="anchor" aria-hidden="true" href="#repeat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Repeat</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
a = b{*}
"><pre><span class="pl-c1">@grammar</span>
a <span class="pl-k">=</span> b{<span class="pl-k">*</span>}</pre></div>
<p><code>a</code> can parse one or more <code>b</code>.</p>
<h2><a id="user-content-oralternative" class="anchor" aria-hidden="true" href="#oralternative"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Or(Alternative)</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
a = b | c
"><pre><span class="pl-c1">@grammar</span>
a <span class="pl-k">=</span> b <span class="pl-k">|</span> c</pre></div>
<p><code>a</code> can parse <code>b</code> or <code>c</code>.</p>
<h2><a id="user-content-keyword" class="anchor" aria-hidden="true" href="#keyword"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Keyword</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
If  := [hd=:if, cond=Exp, :then,
                br1=Exp,
            :else,
        br2=Exp]
"><pre><span class="pl-c1">@grammar</span>
If  <span class="pl-k">:=</span> [hd<span class="pl-k">=</span><span class="pl-c1">:if</span>, cond<span class="pl-k">=</span>Exp, <span class="pl-c1">:then</span>,
                br1<span class="pl-k">=</span>Exp,
            <span class="pl-c1">:else</span>,
        br2<span class="pl-k">=</span>Exp]</pre></div>
<p>Note that <code>:if</code>, <code>:then</code> and <code>:else</code> should parse
<code>Token{:reserved}(str=...)</code>. <strong>Their type should be
<code>Token{:reserved}</code>!</strong></p>
<p>However you always don't have to aware of this.
Further, you just should aware that any other lexer(hereafter <code>L</code>)
matching <code>"if", "then", "else"</code> won't produce a tokenizer typed <code>Token{L}</code>,
but that typed <code>Token{:reserved}</code>.</p>
<h2><a id="user-content-rewrite" class="anchor" aria-hidden="true" href="#rewrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rewrite</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
ab_no_a = ['a', 'b'] % (x -&gt; x[1])
"><pre><span class="pl-c1">@grammar</span>
ab_no_a <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>] <span class="pl-k">%</span> (x <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>])</pre></div>
<p><code>ab_no_a</code> produces <code>Token(str="b")</code> if it gets parsed successfully.</p>
<h2><a id="user-content-parameterised-polymorphisms" class="anchor" aria-hidden="true" href="#parameterised-polymorphisms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parameterised Polymorphisms</h2>
<p>Firstly define such a function in the global scope:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="join(separator, rule) = :[$rule, ($separator, $rule){*}]
"><pre><span class="pl-en">join</span>(separator, rule) <span class="pl-k">=</span> :[<span class="pl-k">$</span>rule, (<span class="pl-k">$</span>separator, <span class="pl-k">$</span>rule){<span class="pl-k">*</span>}]</pre></div>
<p>Then, inside <code>RBNF.@parser Lang begin ... end</code>, we write down</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar
list = ['[', [join(',', expression)].?, ']']
"><pre><span class="pl-c1">@grammar</span>
list <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>[<span class="pl-pds">'</span></span>, [<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>, expression)]<span class="pl-k">.</span>?, <span class="pl-s"><span class="pl-pds">'</span>]<span class="pl-pds">'</span></span>]</pre></div>
<p><code>list</code> can parse a list of expressions separated by ',',
but you should define the <code>expression</code> yourself.</p>
<h2><a id="user-content-direct_recur" class="anchor" aria-hidden="true" href="#direct_recur"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@direct_recur</h2>
<p>Provided for supporting direct left recursions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = @direct_recur begin
    init = ['a']
    prefix = [recur..., 'a']
end
# parse aaa to [Token_a, Token_a, Token_a]

a = @direct_recur begin
    init = ['a']
    prefix = [recur, 'a']
end
# parse aaa to [[[Token_a], Token_a], Token_a]

"><pre>a <span class="pl-k">=</span> <span class="pl-c1">@direct_recur</span> <span class="pl-k">begin</span>
    init <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>]
    prefix <span class="pl-k">=</span> [recur<span class="pl-k">...</span>, <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>]
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> parse aaa to [Token_a, Token_a, Token_a]</span>

a <span class="pl-k">=</span> <span class="pl-c1">@direct_recur</span> <span class="pl-k">begin</span>
    init <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>]
    prefix <span class="pl-k">=</span> [recur, <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>]
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> parse aaa to [[[Token_a], Token_a], Token_a]</span>
</pre></div>
</article></div>