<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jllprefixes" class="anchor" aria-hidden="true" href="#jllprefixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JLLPrefixes</h1>
<p dir="auto">Collect, symlink and copy around prefixes of JLL packages!  This package makes it easy to use prefixes of JLL packages outside of Julia, either by symlinking or copying them to a stable prefix.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JLLPrefixes

# Download all of FFMPEG_jll, then copy all the files into the ~/local/ffmpeg_prefix` folder
prefix = expanduser(&quot;~/local/ffmpeg_prefix&quot;)
artifact_paths = collect_artifact_paths([&quot;FFMPEG_jll&quot;])
deploy_artifact_paths(prefix, artifact_paths)
run(`$(joinpath(prefix, &quot;bin&quot;, &quot;ffmpeg&quot;)) -version`)"><pre><span class="pl-k">using</span> JLLPrefixes

<span class="pl-c"><span class="pl-c">#</span> Download all of FFMPEG_jll, then copy all the files into the ~/local/ffmpeg_prefix` folder</span>
prefix <span class="pl-k">=</span> <span class="pl-c1">expanduser</span>(<span class="pl-s"><span class="pl-pds">"</span>~/local/ffmpeg_prefix<span class="pl-pds">"</span></span>)
artifact_paths <span class="pl-k">=</span> <span class="pl-c1">collect_artifact_paths</span>([<span class="pl-s"><span class="pl-pds">"</span>FFMPEG_jll<span class="pl-pds">"</span></span>])
<span class="pl-c1">deploy_artifact_paths</span>(prefix, artifact_paths)
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>$(joinpath(prefix, "bin", "ffmpeg")) -version<span class="pl-pds">`</span></span>)</pre></div>
<p dir="auto">The files are now available to be used outside of Julia!  No more <code>LD_LIBRARY_PATH</code> shenanigans!  Note that some tools (such as <code>git</code>) may still need some help finding their data files, and so you may still need to define <em>some</em> environment variables.</p>
<h2 dir="auto"><a id="user-content-deployment-strategies" class="anchor" aria-hidden="true" href="#deployment-strategies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deployment strategies</h2>
<p dir="auto">By default, <code>JLLPrefixes</code> will attempt to use <code>hardlink()</code> to hit the sweet spot of performance (hardlinking is faster than copying) and compatibility (executables with RPATHs and other relative paths embedded within them don't play well with symlinks).
If you are unable to use hardlinks (e.g. your source and destination are located on different filesystems/devices) it will silently fall back to using <code>copy()</code>.
If you require high performance and don't care about compatibility with executables with embedded relative paths, you can manually request <code>deploy_artifact_paths()</code> to use <code>symlink()</code> by passing <code>:symlink</code> as the <code>strategy</code> keyword argument.</p>
</article></div>