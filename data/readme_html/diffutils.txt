<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-diffutils" class="anchor" aria-hidden="true" href="#diffutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DiffUtils</h1>
<p dir="auto"><a href="https://simeonschaub.github.io/DiffUtils.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://simeonschaub.github.io/DiffUtils.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/simeonschaub/DiffUtils.jl/actions"><img src="https://github.com/simeonschaub/DiffUtils.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/simeonschaub/DiffUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3ac64764b476c0c8e05c558d98ecb41e3c18498119968fda08ba781a34db2c16/68747470733a2f2f636f6465636f762e696f2f67682f73696d656f6e7363686175622f446966665574696c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/simeonschaub/DiffUtils.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">For more details, please read <a href="https://simeonschaub.github.io/DiffUtils.jl/dev" rel="nofollow">the docs</a>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using DiffUtils

julia&gt; DiffUtils.diff(code_lowered(cos, Tuple{Float64}), code_lowered(sin, Tuple{Float64}))
Core.CodeInfo[CodeInfo(                                         Core.CodeInfo[CodeInfo(
1 ──       Core.NewvarNode(:(@_3))                              1 ──       Core.NewvarNode(:(@_3))
│          Core.NewvarNode(:(y))                                │          Core.NewvarNode(:(y))
│          Core.NewvarNode(:(n))                                │          Core.NewvarNode(:(n))
│          absx = Base.Math.abs(x)                              │          absx = Base.Math.abs(x)
│    %5  = absx                                                 │    %5  = absx
│    %6  = ($(Expr(:static_parameter, 1)))(Base.Math.pi)        │    %6  = ($(Expr(:static_parameter, 1)))(Base.Math.pi)
│    %7  = %6 / 4                                               │    %7  = %6 / 4
│    %8  = %5 &lt; %7                                              │    %8  = %5 &lt; %7
└───       goto #5 if not %8                                    └───       goto #5 if not %8
2 ── %10 = absx                                                 2 ── %10 = absx
│    %11 = Base.Math.eps($(Expr(:static_parameter, 1)))         │    %11 = Base.Math.eps($(Expr(:static_parameter, 1)))
│    %12 = ($(Expr(:static_parameter, 1)))(2.0)               | │    %12 = Base.Math.sqrt(%11)
│    %13 = %11 / %12                                          | │    %13 = %10 &lt; %12
│    %14 = Base.Math.sqrt(%13)                                | └───       goto #4 if not %13
│    %15 = %10 &lt; %14                                          | 3 ──       return x
└───       goto #4 if not %15                                 | 4 ── %16 = Base.Math.sin_kernel(x)
3 ── %17 = ($(Expr(:static_parameter, 1)))(1.0)               | └───       return %16
└───       return %17                                         | 5 ── %18 = Base.Math.isnan(x)
4 ── %19 = Base.Math.cos_kernel(x)                            | └───       goto #7 if not %18
└───       return %19                                         | 6 ── %20 = ($(Expr(:static_parameter, 1)))(Base.Math.NaN)
5 ── %21 = Base.Math.isnan(x)                                 | └───       return %20
└───       goto #7 if not %21                                 | 7 ── %22 = Base.Math.isinf(x)
6 ── %23 = ($(Expr(:static_parameter, 1)))(Base.Math.NaN)     | └───       goto #9 if not %22
└───       return %23                                         | 8 ──       Base.Math.sin_domain_error(x)
7 ── %25 = Base.Math.isinf(x)                                 | 9 ┄─ %25 = Base.Math.rem_pio2_kernel(x)
└───       goto #9 if not %25                                 | │    %26 = Base.indexed_iterate(%25, 1)
8 ── %27 = Base.Math.cos_domain_error(x)                      | │          n = Core.getfield(%26, 1)
└───       return %27                                         | │          @_3 = Core.getfield(%26, 2)
9 ── %29 = Base.Math.rem_pio2_kernel(x)                       | │    %29 = Base.indexed_iterate(%25, 2, @_3)
│    %30 = Base.indexed_iterate(%29, 1)                       | │          y = Core.getfield(%29, 1)
│          n = Core.getfield(%30, 1)                          &lt;
│          @_3 = Core.getfield(%30, 2)                        &lt;
│    %33 = Base.indexed_iterate(%29, 2, @_3)                  &lt;
│          y = Core.getfield(%33, 1)                          &lt;
│          n = n &amp; 3                                            │          n = n &amp; 3
│    %36 = n == 0                                             | │    %32 = n == 0
└───       goto #11 if not %36                                | └───       goto #11 if not %32
10 ─ %38 = Base.Math.cos_kernel(y)                            | 10 ─ %34 = Base.Math.sin_kernel(y)
                                                              &gt; └───       return %34
                                                              &gt; 11 ─ %36 = n == 1
                                                              &gt; └───       goto #13 if not %36
                                                              &gt; 12 ─ %38 = Base.Math.cos_kernel(y)
└───       return %38                                           └───       return %38
11 ─ %40 = n == 1                                             | 13 ─ %40 = n == 2
└───       goto #13 if not %40                                | └───       goto #15 if not %40
12 ─ %42 = Base.Math.sin_kernel(y)                            | 14 ─ %42 = Base.Math.sin_kernel(y)
│    %43 = -%42                                                 │    %43 = -%42
└───       return %43                                           └───       return %43
13 ─ %45 = n == 2                                             | 15 ─ %45 = Base.Math.cos_kernel(y)
└───       goto #15 if not %45                                | │    %46 = -%45
14 ─ %47 = Base.Math.cos_kernel(y)                            | └───       return %46
│    %48 = -%47                                               &lt;
└───       return %48                                         &lt;
15 ─ %50 = Base.Math.sin_kernel(y)                            &lt;
└───       return %50                                         &lt;
)]                                                              )]"><pre lang="jldoctest" class="notranslate"><code>julia&gt; using DiffUtils

julia&gt; DiffUtils.diff(code_lowered(cos, Tuple{Float64}), code_lowered(sin, Tuple{Float64}))
Core.CodeInfo[CodeInfo(                                         Core.CodeInfo[CodeInfo(
1 ──       Core.NewvarNode(:(@_3))                              1 ──       Core.NewvarNode(:(@_3))
│          Core.NewvarNode(:(y))                                │          Core.NewvarNode(:(y))
│          Core.NewvarNode(:(n))                                │          Core.NewvarNode(:(n))
│          absx = Base.Math.abs(x)                              │          absx = Base.Math.abs(x)
│    %5  = absx                                                 │    %5  = absx
│    %6  = ($(Expr(:static_parameter, 1)))(Base.Math.pi)        │    %6  = ($(Expr(:static_parameter, 1)))(Base.Math.pi)
│    %7  = %6 / 4                                               │    %7  = %6 / 4
│    %8  = %5 &lt; %7                                              │    %8  = %5 &lt; %7
└───       goto #5 if not %8                                    └───       goto #5 if not %8
2 ── %10 = absx                                                 2 ── %10 = absx
│    %11 = Base.Math.eps($(Expr(:static_parameter, 1)))         │    %11 = Base.Math.eps($(Expr(:static_parameter, 1)))
│    %12 = ($(Expr(:static_parameter, 1)))(2.0)               | │    %12 = Base.Math.sqrt(%11)
│    %13 = %11 / %12                                          | │    %13 = %10 &lt; %12
│    %14 = Base.Math.sqrt(%13)                                | └───       goto #4 if not %13
│    %15 = %10 &lt; %14                                          | 3 ──       return x
└───       goto #4 if not %15                                 | 4 ── %16 = Base.Math.sin_kernel(x)
3 ── %17 = ($(Expr(:static_parameter, 1)))(1.0)               | └───       return %16
└───       return %17                                         | 5 ── %18 = Base.Math.isnan(x)
4 ── %19 = Base.Math.cos_kernel(x)                            | └───       goto #7 if not %18
└───       return %19                                         | 6 ── %20 = ($(Expr(:static_parameter, 1)))(Base.Math.NaN)
5 ── %21 = Base.Math.isnan(x)                                 | └───       return %20
└───       goto #7 if not %21                                 | 7 ── %22 = Base.Math.isinf(x)
6 ── %23 = ($(Expr(:static_parameter, 1)))(Base.Math.NaN)     | └───       goto #9 if not %22
└───       return %23                                         | 8 ──       Base.Math.sin_domain_error(x)
7 ── %25 = Base.Math.isinf(x)                                 | 9 ┄─ %25 = Base.Math.rem_pio2_kernel(x)
└───       goto #9 if not %25                                 | │    %26 = Base.indexed_iterate(%25, 1)
8 ── %27 = Base.Math.cos_domain_error(x)                      | │          n = Core.getfield(%26, 1)
└───       return %27                                         | │          @_3 = Core.getfield(%26, 2)
9 ── %29 = Base.Math.rem_pio2_kernel(x)                       | │    %29 = Base.indexed_iterate(%25, 2, @_3)
│    %30 = Base.indexed_iterate(%29, 1)                       | │          y = Core.getfield(%29, 1)
│          n = Core.getfield(%30, 1)                          &lt;
│          @_3 = Core.getfield(%30, 2)                        &lt;
│    %33 = Base.indexed_iterate(%29, 2, @_3)                  &lt;
│          y = Core.getfield(%33, 1)                          &lt;
│          n = n &amp; 3                                            │          n = n &amp; 3
│    %36 = n == 0                                             | │    %32 = n == 0
└───       goto #11 if not %36                                | └───       goto #11 if not %32
10 ─ %38 = Base.Math.cos_kernel(y)                            | 10 ─ %34 = Base.Math.sin_kernel(y)
                                                              &gt; └───       return %34
                                                              &gt; 11 ─ %36 = n == 1
                                                              &gt; └───       goto #13 if not %36
                                                              &gt; 12 ─ %38 = Base.Math.cos_kernel(y)
└───       return %38                                           └───       return %38
11 ─ %40 = n == 1                                             | 13 ─ %40 = n == 2
└───       goto #13 if not %40                                | └───       goto #15 if not %40
12 ─ %42 = Base.Math.sin_kernel(y)                            | 14 ─ %42 = Base.Math.sin_kernel(y)
│    %43 = -%42                                                 │    %43 = -%42
└───       return %43                                           └───       return %43
13 ─ %45 = n == 2                                             | 15 ─ %45 = Base.Math.cos_kernel(y)
└───       goto #15 if not %45                                | │    %46 = -%45
14 ─ %47 = Base.Math.cos_kernel(y)                            | └───       return %46
│    %48 = -%47                                               &lt;
└───       return %48                                         &lt;
15 ─ %50 = Base.Math.sin_kernel(y)                            &lt;
└───       return %50                                         &lt;
)]                                                              )]
</code></pre></div>
</article></div>