<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaStrings/LaTeXStrings.jl/actions"><img src="https://github.com/JuliaStrings/LaTeXStrings.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-latexstrings" class="anchor" aria-hidden="true" href="#latexstrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LaTeXStrings</h1>
<p dir="auto">This is a small package to make it easier to type LaTeX equations in
string literals in the <a href="http://julialang.org/" rel="nofollow">Julia language</a>,
written by <a href="http://math.mit.edu/~stevenj" rel="nofollow">Steven G. Johnson</a>.</p>
<p dir="auto">With ordinary strings in Julia, to enter a string literal with
embedded LaTeX equations you need to manually escape all backslashes
and dollar signs: for example, <code>$\alpha^2$</code> is written
<code>\$\\alpha^2\$</code>.  Also, even though
<a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a> is capable of
displaying formatted LaTeX equations (via
<a href="http://www.mathjax.org/" rel="nofollow">MathJax</a>), an ordinary string will not
exploit this.  Therefore, the LaTeXStrings package defines:</p>
<ul dir="auto">
<li>
<p dir="auto">A <code>LaTeXString</code> class (a subtype of <code>String</code>), which works like
a string (for indexing, conversion, etcetera), but automatically displays
as <code>text/latex</code> in IJulia.</p>
</li>
<li>
<p dir="auto"><code>L"..."</code> and <code>L"""..."""</code> string macros which allow you to enter
LaTeX equations without escaping backslashes and dollar signs
(and which add the dollar signs for you if you omit them).</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-faq-not-a-latex-renderer" class="anchor" aria-hidden="true" href="#faq-not-a-latex-renderer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FAQ: Not a LaTeX renderer</h2>
<p dir="auto">LaTeXStrings does <strong>not do any rendering</strong> â€” its sole purpose is to make it easier to <em>enter</em> LaTeX-rendered strings without typing a lot of <a href="https://xkcd.com/1638" rel="nofollow">backslash escapes</a>, as well as providing a type to tell <a href="https://docs.julialang.org/en/v1/base/io-network/#Multimedia-I/O" rel="nofollow">display backends</a> to use LaTeX rendering if possible.</p>
<p dir="auto">Other packages like plotting software, <a href="https://github.com/JuliaLang/IJulia.jl">Jupyter notebooks</a>, <a href="https://github.com/fonsp/Pluto.jl">Pluto</a>, etcetera, are responsible for the LaTeX rendering (if any).  For example, they might use <a href="https://www.mathjax.org/" rel="nofollow">MathJax</a>, <a href="https://github.com/Kolaru/MathTeXEngine.jl">MathTeXEngine.jl</a>, or <a href="https://matplotlib.org/2.0.2/users/mathtext.html" rel="nofollow">other renderers</a>.   LaTeXStrings only provides the LaTeX text to these backend, and has no influence on what LaTeX features (if any) are supported.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">After installing LaTeXStrings with <code>Pkg.add("LaTeXStrings")</code> in Julia, run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using LaTeXStrings"><pre class="notranslate"><code>using LaTeXStrings
</code></pre></div>
<p dir="auto">to load the package.  At this point, you can construct <code>LaTeXString</code>
literals with the constructor <code>L"..."</code> (and <code>L"""..."""</code> for multi-line
strings); for example <code>L"1 + \alpha^2"</code> or <code>L"an equation: $1 + \alpha^2$"</code>.  (Note that <code>$</code> is added automatically around your
string, i.e. the string is interpreted as an equation, if you do not
include <code>$</code> yourself.)</p>
<p dir="auto">If you want to perform <a href="https://docs.julialang.org/en/v1/manual/strings/#string-interpolation" rel="nofollow">string
interpolation</a>
(inserting the values of other variables into your string), use <code>%$</code> instead of
the plain <code>$</code> that you would use for interpolation in ordinary Julia strings.
For example, if <code>x=3</code> is a Julia variable, then <code>L"y = %$x"</code> will produce <code>L"y = 3"</code>.</p>
<p dir="auto">You can also use the lower-level constructor <code>latexstring(args...)</code>,
which works much like <code>string(args...)</code> except that it produces a
<code>LaTeXString</code> result and automatically puts <code>$</code> at the beginning and
end of the string if an unescaped <code>$</code> is not already present.  Note
that with <code>latexstring(...)</code> you <em>do</em> have to escape <code>$</code> and <code>\</code>: for
example, <code>latexstring("an equation: \$1 + \\alpha^2\$")</code>.
Note that you can supply multiple arguments (of any types) to <code>latexstring</code>, which are converted to
strings and concatenated as in the <code>string(...)</code> function.</p>
<p dir="auto">Finally, you can use the lowest-level constructor
<code>LaTeXString(s)</code>.  The only advantage of this is that it
does <em>not</em> automatically put <code>$</code> at the beginning and end of the
string.  So, if for some reason you want to use <code>text/latex</code> display
of ordinary text (with no equations or formatting), you can use this
constructor.  (Note that IJulia <em>only</em> formats LaTeX equations; other
LaTeX text-formatting commands like <code>\emph</code> are ignored.)</p>
<h2 dir="auto"><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author</h2>
<p dir="auto">This package was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven
G. Johnson</a>, and is distributed under
the MIT/expat license (see the <a href="LICENSE.md">LICENSE.md</a> file).</p>
</article></div>