<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stochastic-lipschitz-dynamic-programming" class="anchor" aria-hidden="true" href="#stochastic-lipschitz-dynamic-programming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stochastic Lipschitz Dynamic Programming</h1>
<h2><a id="user-content-and-stochastic-augmented-dual-dynamic-programming-for-lipschitz-problems" class="anchor" aria-hidden="true" href="#and-stochastic-augmented-dual-dynamic-programming-for-lipschitz-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>and Stochastic augmented Dual Dynamic Programming for Lipschitz problems</h2>
<p>This package contains an extension to SDDP.jl-v0 for using
<a href="https://arxiv.org/abs/1905.02290" rel="nofollow">SLDP methods</a>
to solve Multistage Stochatic MIPs.
It is largely inspired in <a href="https://github.com/lkapelevich/SDDiP.jl">SDDiP</a>,
and our Lagrangian submodule is a very reduced version of the original one.</p>
<p>It requires the user to provide an upper bound $\rho_n$
for the Lipschitz constant of each node.
This has different meanings according to the cutting method.</p>
<p>More documentation is forthcoming.</p>
<h2><a id="user-content-cuts" class="anchor" aria-hidden="true" href="#cuts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cuts</h2>
<p>At present, we use either</p>
<ul>
<li>reverse 1-norm cuts</li>
<li>augmented Lagrangian dual cuts</li>
</ul>
<h3><a id="user-content-reverse-1-norm-cuts" class="anchor" aria-hidden="true" href="#reverse-1-norm-cuts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reverse 1-norm cuts</h3>
<p>Here, the user must provide a valid upper bound
for the Lipschitz constant (relative to the 1-norm at the domain).
This will be used to construct the cut</p>
<p>$$ \theta \geq Q_n^k(x^k) - \rho_n |x - x^k |. $$</p>
<h3><a id="user-content-augmented-lagrangian-dual-cuts" class="anchor" aria-hidden="true" href="#augmented-lagrangian-dual-cuts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Augmented Lagrangian dual cuts</h3>
<p>Here, the user must provide, besides a Lipschitz bound $\rho_n$,
a policy for increasing $\rho_n$.
This is given by the coefficients $a_n$ and $b_n$ for a linear function,
which is then saturated between $0$ and $\rho_n$.
The effective augmenting parameter for node $n$ at iteration $k$ will then be
$p_n = \text{clip}(a_n k + b_n, 0, \rho_n)$.</p>
<p>Then, we obtain a Benders multiplier $\pi$ by solving the LP relaxation,
and solve the augmented Lagrangian problem corresponding to $(\pi, p_n)$.
The cut is therefore</p>
<p>$$ \theta \geq Q_n^{k, \text{AL}}(x^k) + \pi^\top(x - x^k) - p_n |x - x^k |. $$</p>
<p>This cut, which we call <strong>Strenghtened augmented Benders cut</strong>,
is valid by construction, so the user-provided $\rho_n$
is only an upper bound to what the <em>algorithm</em> will try.
If it is too small, it will not close the duality gap.</p>
<p>Ideally, one would solve for the optimal Lagrange multiplier,
given the augmenting term $p_n |x - x^k|$.
But another method for producing tight cuts
is finding the optimal (lowest) augmenting parameter $\rho$.
For the moment, a simple bisection algorithm for $\rho \in (0, \rho_n)$ is provided.
Tolerances are still hardcoded.</p>
</article></div>