<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.svg"><img src="docs/src/assets/logo.svg" alt="logo" style="max-width:100%;"></a>
<a href="https://travis-ci.org/baggepinnen/MonteCarloMeasurements.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a1937b10ccc317d8ca4daf53406414b0591b0c7/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f4d6f6e74654361726c6f4d6561737572656d656e74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/MonteCarloMeasurements.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/0e3d6ba89334c2a0753e4658a26c56ffbb94f5a7/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4d2f4d6f6e74654361726c6f4d6561737572656d656e74732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/M/MonteCarloMeasurements.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/MonteCarloMeasurements.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b0053a19eeec2252f9d032a531f3d5d9e4002e52/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f4d6f6e74654361726c6f4d6561737572656d656e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/MonteCarloMeasurements.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation, stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation, latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://arxiv.org/abs/2001.07625" rel="nofollow"><img src="https://camo.githubusercontent.com/175ee500155c21630e0ec67aa2044772081189a2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61727469636c652d6172586976253341323030312e30373632352d423331423142" alt="arXiv article" data-canonical-src="https://img.shields.io/badge/article-arXiv%3A2001.07625-B31B1B" style="max-width:100%;"></a></p>
<p>This package facilitates working with probability distributions by means of Monte-Carlo methods, in a way that allows for propagation of probability distributions through functions. This is useful for, e.g.,  nonlinear <a href="https://en.wikipedia.org/wiki/Propagation_of_uncertainty" rel="nofollow">uncertainty propagation</a>. A variable or parameter might be associated with uncertainty if it is measured or otherwise estimated from data. We provide two core types to represent probability distributions: <code>Particles</code> and <code>StaticParticles</code>, both <code>&lt;: Real</code>. (The name "Particles" comes from the <a href="https://en.wikipedia.org/wiki/Particle_filter" rel="nofollow">particle-filtering</a> literature.) These types all form a Monte-Carlo approximation of the distribution of a floating point number, i.e., the distribution is represented by samples/particles. <strong>Correlated quantities</strong> are handled as well, see <a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable/#Multivariate-particles-1" rel="nofollow">multivariate particles</a> below.</p>
<p>Although several interesting use cases for doing calculations with probability distributions have popped up (see <a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable/examples" rel="nofollow">Examples</a>), the original goal of the package is similar to that of <a href="https://github.com/JuliaPhysics/Measurements.jl">Measurements.jl</a>, to propagate the uncertainty from input of a function to the output. The difference compared to a <code>Measurement</code> is that <code>Particles</code> represent the distribution using a vector of unweighted particles, and can thus represent arbitrary distributions and handle nonlinear uncertainty propagation well. Functions like <code>f(x) = x²</code>, <code>f(x) = sign(x)</code> at <code>x=0</code> and long-time integration, are examples that are not handled well using linear uncertainty propagation ala <a href="https://github.com/JuliaPhysics/Measurements.jl">Measurements.jl</a>. MonteCarloMeasurements also support correlations between quantities.</p>
<p>A number of type <code>Particles</code> behaves just as any other <code>Number</code> while partaking in calculations. After a calculation, an approximation to the <strong>complete distribution</strong> of the output is captured and represented by the output particles. <code>mean</code>, <code>std</code> etc. can be extracted from the particles using the corresponding functions. <code>Particles</code> also interact with <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a>, so that you can call, e.g., <code>Normal(p)</code> and get back a <code>Normal</code> type from distributions or <code>fit(Gamma, p)</code> to get a <code>Gamma</code>distribution. Particles can also be iterated, asked for <code>maximum/minimum</code>, <code>quantile</code> etc. If particles are plotted with <code>plot(p)</code>, a histogram is displayed. This requires Plots.jl. A kernel-density estimate can be obtained by <code>density(p)</code> is StatsPlots.jl is loaded.</p>
<p>Below, we show an example where an input uncertainty is propagated through <code>σ(x)</code></p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/transformed_densities.svg"><img src="docs/src/assets/transformed_densities.svg" alt="transformed densities" style="max-width:100%;"></a></p>
<p>In the figure above, we see the probability-density function of the input <code>p(x)</code> depicted on the x-axis. The density of the output <code>p(y) = f(x)</code> is shown on the y-axis. Linear uncertainty propagation does this by linearizing <code>f(x)</code> and using the equations for an affine transformation of a Gaussian distribution, and hence produces a Gaussian approximation to the output density. The particles form a sampled approximation of the input density <code>p(x)</code>. After propagating them through <code>f(x)</code>, they form a sampled approximation to <code>p(y)</code> which correspond very well to the true output density, even though only 20 particles were used in this example. The figure can be reproduced by <code>examples/transformed_densities.jl</code>.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MonteCarloMeasurements, Plots
a <span class="pl-k">=</span> π ± <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> Construct Gaussian uncertain parameters using ± (\pm)</span>
<span class="pl-c"><span class="pl-c">#</span> Part500(3.142 ± 0.1)</span>
b <span class="pl-k">=</span> <span class="pl-c1">2</span> ∓ <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> ∓ (\mp) creates StaticParticles (with StaticArrays)</span>
<span class="pl-c"><span class="pl-c">#</span> SPart100(2.0 ± 0.1)</span>
<span class="pl-c1">std</span>(a)      <span class="pl-c"><span class="pl-c">#</span> Ask about statistical properties</span>
<span class="pl-c"><span class="pl-c">#</span> 0.09997062445203879</span>
<span class="pl-c1">sin</span>(a)      <span class="pl-c"><span class="pl-c">#</span> Use them like any real number</span>
<span class="pl-c"><span class="pl-c">#</span> Part500(1.255e-16 ± 0.0995)</span>
<span class="pl-c1">plot</span>(a)     <span class="pl-c"><span class="pl-c">#</span> Plot them</span>
b <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) .± <span class="pl-c1">0.1</span>; <span class="pl-c"><span class="pl-c">#</span> Create multivariate uncertain numbers</span>
<span class="pl-c1">plot</span>(b)                   <span class="pl-c"><span class="pl-c">#</span> Vectors of particles can be plotted</span>
<span class="pl-k">using</span> Distributions
c <span class="pl-k">=</span> <span class="pl-c1">Particles</span>(<span class="pl-c1">500</span>, <span class="pl-c1">Poisson</span>(<span class="pl-c1">3.</span>)) <span class="pl-c"><span class="pl-c">#</span> Create uncertain numbers distributed according to a given distribution</span>
<span class="pl-c"><span class="pl-c">#</span> Part500(2.896 ± 1.71)</span></pre></div>
<p>For further help, see the <a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable" rel="nofollow">documentation</a>, the <a href="https://github.com/baggepinnen/MonteCarloMeasurements.jl/tree/master/examples">examples folder</a> or the <a href="https://arxiv.org/abs/2001.07625" rel="nofollow">arXiv paper</a>.</p>
</article></div>