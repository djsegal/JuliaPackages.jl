<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.svg"><img src="docs/src/assets/logo.svg" alt="logo" style="max-width: 100%;"></a>
<a href="https://github.com/baggepinnen/MonteCarloMeasurements.jl/actions"><img src="https://github.com/baggepinnen/MonteCarloMeasurements.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/MonteCarloMeasurements.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e36af7038a06ceb69f551ff6271f3c30a05902b16780076c181acf3607156c59/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f4d6f6e74654361726c6f4d6561737572656d656e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/MonteCarloMeasurements.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation, stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation, latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/2001.07625" rel="nofollow"><img src="https://camo.githubusercontent.com/389529c57a659265eecce7da4dcc53329112a96ba0a355536a292df9c42b909b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61727469636c652d6172586976253341323030312e30373632352d423331423142" alt="arXiv article" data-canonical-src="https://img.shields.io/badge/article-arXiv%3A2001.07625-B31B1B" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Imagine you had a type that behaved like your standard <code>Float64</code> but it really represented a probability distribution like <code>Gamma(0.5)</code> or <code>MvNormal(m, S)</code>. Then you could call <code>y=f(x)</code> and have <code>y</code> be the probability distribution <code>y=p(f(x))</code>. This package gives you such a type.</em></p>
<p dir="auto">This package facilitates working with probability distributions by means of Monte-Carlo methods, in a way that allows for propagation of probability distributions through functions. This is useful for, e.g.,  nonlinear <a href="https://en.wikipedia.org/wiki/Propagation_of_uncertainty" rel="nofollow">uncertainty propagation</a>. A variable or parameter might be associated with uncertainty if it is measured or otherwise estimated from data. We provide two core types to represent probability distributions: <code>Particles</code> and <code>StaticParticles</code>, both <code>&lt;: Real</code>. (The name "Particles" comes from the <a href="https://en.wikipedia.org/wiki/Particle_filter" rel="nofollow">particle-filtering</a> literature.) These types all form a Monte-Carlo approximation of the distribution of a floating point number, i.e., the distribution is represented by samples/particles. <strong>Correlated quantities</strong> are handled as well, see <a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable/#Multivariate-particles-1" rel="nofollow">multivariate particles</a> below.</p>
<p dir="auto">Although several interesting use cases for doing calculations with probability distributions have popped up (see <a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable/examples" rel="nofollow">Examples</a>), the original goal of the package is similar to that of <a href="https://github.com/JuliaPhysics/Measurements.jl">Measurements.jl</a>, to propagate the uncertainty from input of a function to the output. The difference compared to a <code>Measurement</code> is that <code>Particles</code> represent the distribution using a vector of unweighted particles, and can thus represent arbitrary distributions and handle nonlinear uncertainty propagation well. Functions like <code>f(x) = x²</code>, <code>f(x) = sign(x)</code> at <code>x=0</code> and long-time integration, are examples that are not handled well using linear uncertainty propagation ala <a href="https://github.com/JuliaPhysics/Measurements.jl">Measurements.jl</a>. MonteCarloMeasurements also support correlations between quantities.</p>
<p dir="auto">A number of type <code>Particles</code> behaves just as any other <code>Number</code> while partaking in calculations. Particles also behave like a distribution, so after a calculation, an approximation to the <strong>complete distribution</strong> of the output is captured and represented by the output particles. <code>mean</code>, <code>std</code> etc. can be extracted from the particles using the corresponding functions <code>pmean</code> and <code>pstd</code>. <code>Particles</code> also interact with <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a>, so that you can call, e.g., <code>Normal(p)</code> and get back a <code>Normal</code> type from distributions or <code>fit(Gamma, p)</code> to get a <code>Gamma</code>distribution. Particles can also be asked for <code>maximum/minimum</code>, <code>quantile</code> etc. using functions with a prefix <code>p</code>, i.e., <code>pmaximum</code>. If particles are plotted with <code>plot(p)</code>, a histogram is displayed. This requires Plots.jl. A kernel-density estimate can be obtained by <code>density(p)</code> is StatsPlots.jl is loaded.</p>
<p dir="auto">Below, we show an example where an input uncertainty is propagated through <code>σ(x)</code></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/transformed_densities.svg"><img src="docs/src/assets/transformed_densities.svg" alt="transformed densities" style="max-width: 100%;"></a></p>
<p dir="auto">In the figure above, we see the probability-density function of the input <code>p(x)</code> depicted on the x-axis. The density of the output <code>p(y) = f(x)</code> is shown on the y-axis. Linear uncertainty propagation does this by linearizing <code>f(x)</code> and using the equations for an affine transformation of a Gaussian distribution, and hence produces a Gaussian approximation to the output density. The particles form a sampled approximation of the input density <code>p(x)</code>. After propagating them through <code>f(x)</code>, they form a sampled approximation to <code>p(y)</code> which correspond very well to the true output density, even though only 20 particles were used in this example. The figure can be reproduced by <code>examples/transformed_densities.jl</code>.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MonteCarloMeasurements, Plots
a = π ± 0.1 # Construct Gaussian uncertain parameters using ± (\\pm)
# Particles{Float64,2000}
#  3.14159 ± 0.1
b = 2 ∓ 0.1 # ∓ (\\mp) creates StaticParticles (with StaticArrays)
# StaticParticles{Float64,100}
#  2.0 ± 0.0999
pstd(a)     # Ask about statistical properties
# 0.09999231528930486
sin(a)      # Use them like any real number
# Particles{Float64,2000}
#  1.2168e-16 ± 0.0995
plot(a)     # Plot them
b = sin.(1:0.1:5) .± 0.1; # Create multivariate uncertain numbers
plot(b)                   # Vectors of particles can be plotted
using Distributions
c = Particles(500, Poisson(3.)) # Create uncertain numbers distributed according to a given distribution
# Particles{Int64,500}
#  2.882 ± 1.7"><pre><span class="pl-k">using</span> MonteCarloMeasurements, Plots
a <span class="pl-k">=</span> π ± <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> Construct Gaussian uncertain parameters using ± (\\pm)</span>
<span class="pl-c"><span class="pl-c">#</span> Particles{Float64,2000}</span>
<span class="pl-c"><span class="pl-c">#</span>  3.14159 ± 0.1</span>
b <span class="pl-k">=</span> <span class="pl-c1">2</span> ∓ <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> ∓ (\\mp) creates StaticParticles (with StaticArrays)</span>
<span class="pl-c"><span class="pl-c">#</span> StaticParticles{Float64,100}</span>
<span class="pl-c"><span class="pl-c">#</span>  2.0 ± 0.0999</span>
<span class="pl-c1">pstd</span>(a)     <span class="pl-c"><span class="pl-c">#</span> Ask about statistical properties</span>
<span class="pl-c"><span class="pl-c">#</span> 0.09999231528930486</span>
<span class="pl-c1">sin</span>(a)      <span class="pl-c"><span class="pl-c">#</span> Use them like any real number</span>
<span class="pl-c"><span class="pl-c">#</span> Particles{Float64,2000}</span>
<span class="pl-c"><span class="pl-c">#</span>  1.2168e-16 ± 0.0995</span>
<span class="pl-c1">plot</span>(a)     <span class="pl-c"><span class="pl-c">#</span> Plot them</span>
b <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) .± <span class="pl-c1">0.1</span>; <span class="pl-c"><span class="pl-c">#</span> Create multivariate uncertain numbers</span>
<span class="pl-c1">plot</span>(b)                   <span class="pl-c"><span class="pl-c">#</span> Vectors of particles can be plotted</span>
<span class="pl-k">using</span> Distributions
c <span class="pl-k">=</span> <span class="pl-c1">Particles</span>(<span class="pl-c1">500</span>, <span class="pl-c1">Poisson</span>(<span class="pl-c1">3.</span>)) <span class="pl-c"><span class="pl-c">#</span> Create uncertain numbers distributed according to a given distribution</span>
<span class="pl-c"><span class="pl-c">#</span> Particles{Int64,500}</span>
<span class="pl-c"><span class="pl-c">#</span>  2.882 ± 1.7</span></pre></div>
<p dir="auto">For further help, see the <a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable" rel="nofollow">documentation</a>, the <a href="https://github.com/baggepinnen/MonteCarloMeasurements.jl/tree/master/examples">examples folder</a> or the <a href="https://arxiv.org/abs/2001.07625" rel="nofollow">arXiv paper</a>.</p>
</article></div>