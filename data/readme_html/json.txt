<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jsonjl" class="anchor" aria-hidden="true" href="#jsonjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JSON.jl</h1>
<p dir="auto">This package provides for parsing and printing JSON in pure Julia.</p>
<p dir="auto"><a href="https://github.com/JuliaIO/JSON.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/JuliaIO/JSON.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaIO/JSON.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8a50c86dbafea266ffba29221e271a15b567b783bb4e45a1714d36630aa44997/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f4a534f4e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaIO/JSON.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Type <code>] add JSON</code> and then hit ‚èé Return at the REPL. You should see <code>pkg&gt; add JSON</code>.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import JSON

# JSON.parse - string or stream to Julia data structures
s = &quot;{\&quot;a_number\&quot; : 5.0, \&quot;an_array\&quot; : [\&quot;string\&quot;, 9]}&quot;
j = JSON.parse(s)
#  Dict{AbstractString,Any} with 2 entries:
#    &quot;an_array&quot; =&gt; {&quot;string&quot;,9}
#    &quot;a_number&quot; =&gt; 5.0

# JSON.json - Julia data structures to a string
JSON.json([2,3])
#  &quot;[2,3]&quot;
JSON.json(j)
#  &quot;{\&quot;an_array\&quot;:[\&quot;string\&quot;,9],\&quot;a_number\&quot;:5.0}&quot;"><pre><span class="pl-k">import</span> JSON

<span class="pl-c"><span class="pl-c">#</span> JSON.parse - string or stream to Julia data structures</span>
s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>a_number<span class="pl-cce">\"</span> : 5.0, <span class="pl-cce">\"</span>an_array<span class="pl-cce">\"</span> : [<span class="pl-cce">\"</span>string<span class="pl-cce">\"</span>, 9]}<span class="pl-pds">"</span></span>
j <span class="pl-k">=</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(s)
<span class="pl-c"><span class="pl-c">#</span>  Dict{AbstractString,Any} with 2 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>    "an_array" =&gt; {"string",9}</span>
<span class="pl-c"><span class="pl-c">#</span>    "a_number" =&gt; 5.0</span>

<span class="pl-c"><span class="pl-c">#</span> JSON.json - Julia data structures to a string</span>
JSON<span class="pl-k">.</span><span class="pl-c1">json</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-c"><span class="pl-c">#</span>  "[2,3]"</span>
JSON<span class="pl-k">.</span><span class="pl-c1">json</span>(j)
<span class="pl-c"><span class="pl-c">#</span>  "{\"an_array\":[\"string\",9],\"a_number\":5.0}"</span></pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="JSON.print(io::IO, s::AbstractString)
JSON.print(io::IO, s::Union{Integer, AbstractFloat})
JSON.print(io::IO, n::Nothing)
JSON.print(io::IO, b::Bool)
JSON.print(io::IO, a::AbstractDict)
JSON.print(io::IO, v::AbstractVector)
JSON.print(io::IO, v::Array)"><pre>JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, s<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, s<span class="pl-k">::</span><span class="pl-c1">Union{Integer, AbstractFloat}</span>)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, n<span class="pl-k">::</span><span class="pl-c1">Nothing</span>)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, b<span class="pl-k">::</span><span class="pl-c1">Bool</span>)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, a<span class="pl-k">::</span><span class="pl-c1">AbstractDict</span>)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, v<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, v<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<p dir="auto">Writes a compact (no extra whitespace or indentation) JSON representation
to the supplied IO.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="JSON.print(a::AbstractDict, indent)
JSON.print(io::IO, a::AbstractDict, indent)"><pre>JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(a<span class="pl-k">::</span><span class="pl-c1">AbstractDict</span>, indent)
JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, a<span class="pl-k">::</span><span class="pl-c1">AbstractDict</span>, indent)</pre></div>
<p dir="auto">Writes a JSON representation with newlines, and indentation if specified. Non-zero <code>indent</code> will be applied recursively to nested elements.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="json(a::Any)"><pre><span class="pl-c1">json</span>(a<span class="pl-k">::</span><span class="pl-c1">Any</span>)</pre></div>
<p dir="auto">Returns a compact JSON representation as an <code>AbstractString</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="JSON.parse(s::AbstractString; dicttype=Dict, inttype=Int64)
JSON.parse(io::IO; dicttype=Dict, inttype=Int64)
JSON.parsefile(filename::AbstractString; dicttype=Dict, inttype=Int64, use_mmap=true)"><pre>JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(s<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>; dicttype<span class="pl-k">=</span>Dict, inttype<span class="pl-k">=</span>Int64)
JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>; dicttype<span class="pl-k">=</span>Dict, inttype<span class="pl-k">=</span>Int64)
JSON<span class="pl-k">.</span><span class="pl-c1">parsefile</span>(filename<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>; dicttype<span class="pl-k">=</span>Dict, inttype<span class="pl-k">=</span>Int64, use_mmap<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">Parses a JSON <code>AbstractString</code> or IO stream into a nested <code>Array</code> or <code>Dict</code>.</p>
<p dir="auto">The <code>dicttype</code> indicates the dictionary type (<code>&lt;: Associative</code>), or a function that
returns an instance of a dictionary type,
that JSON objects are parsed to.  It defaults to <code>Dict</code> (the built-in Julia
dictionary), but a different type can be passed for additional functionality.
For example, if you <code>import DataStructures</code>
(assuming the <a href="https://github.com/JuliaLang/DataStructures.jl">DataStructures
package</a> is
installed)</p>
<ul dir="auto">
<li>you can pass <code>dicttype=DataStructures.OrderedDict</code> to maintain the insertion order
of the items in the object;</li>
<li>or you can pass <code>()-&gt;DefaultDict{String,Any}(Missing)</code> to having any non-found keys
return <code>missing</code> when you index the result.</li>
</ul>
<p dir="auto">The <code>inttype</code> argument controls how integers are parsed.  If a number in a JSON
file is recognized to be an integer, it is parsed as one; otherwise it is parsed
as a <code>Float64</code>.  The <code>inttype</code> defaults to <code>Int64</code>, but, for example, if you know
that your integer numbers are all small and want to save space, you can pass
<code>inttype=Int32</code>.  Alternatively, if your JSON input has integers which are too large
for Int64, you can pass <code>inttype=Int128</code> or <code>inttype=BigInt</code>.  <code>inttype</code> can be any
subtype of <code>Real</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="JSONText(s::AbstractString)"><pre><span class="pl-c1">JSONText</span>(s<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>)</pre></div>
<p dir="auto">A wrapper around a Julia string representing JSON-formatted text,
which is inserted <em>as-is</em> in the JSON output of <code>JSON.print</code> and <code>JSON.json</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="JSON.lower(p::Point2D) = [p.x, p.y]"><pre>JSON<span class="pl-k">.</span><span class="pl-en">lower</span>(p<span class="pl-k">::</span><span class="pl-c1">Point2D</span>) <span class="pl-k">=</span> [p<span class="pl-k">.</span>x, p<span class="pl-k">.</span>y]</pre></div>
<p dir="auto">Define a custom serialization rule for a particular data type. Must return a
value that can be directly serialized; see help for more details.</p>
<h3 dir="auto"><a id="user-content-customizing-json" class="anchor" aria-hidden="true" href="#customizing-json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Customizing JSON</h3>
<p dir="auto">Users may find the default behaviour of JSON inappropriate for their use case. In
such cases, JSON provides two mechanisms for users to customize serialization. The
first method, <code>JSON.Writer.StructuralContext</code>, is used to customize the cosmetic
properties of the serialized JSON. (For example, the default pretty printing vs.
compact printing is supported by provided two different <code>StructuralContext</code>s.)
Examples of applications for which <code>StructuralContext</code> is appropriate include:
particular formatting demands for JSON (maybe not in compliance with the JSON
standard) or JSON-like formats with different syntax.</p>
<p dir="auto">The second method, <code>JSON.Serializations.Serialization</code>, is used to control the
translation of Julia objects into JSON serialization instructions. In most cases,
writing a method for <code>JSON.lower</code> (as mentioned above) is sufficient to define
JSON serializations for user-defined objects. However, this is not appropriate for
overriding or deleting predefined serializations (since that would globally affect
users of the <code>JSON</code> module and is an instance of dangerous
<a href="https://docs.julialang.org/en/v1/manual/style-guide/index.html#Avoid-type-piracy-1" rel="nofollow">type piracy</a>).
For these use-cases, users should define a custom instance of <code>Serialization</code>.
An example of an application for this use case includes: a commonly requested
extension to JSON which serializes float NaN and infinite values as <code>NaN</code> or <code>Inf</code>,
in contravention of the JSON standard.</p>
<p dir="auto">Both methods are controlled by the <code>JSON.show_json</code> function, which has the following
signature:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="JSON.show_json(io::StructuralContext, serialization::Serialization, object)"><pre class="notranslate"><code>JSON.show_json(io::StructuralContext, serialization::Serialization, object)
</code></pre></div>
<p dir="auto">which is expected to write to <code>io</code> in a way appropriate based on the rules of
<code>Serialization</code>, but here <code>io</code> is usually (but not required to be) handled in a
higher-level manner than a raw <code>IO</code> object would ordinarily be.</p>
<h4 dir="auto"><a id="user-content-structuralcontext" class="anchor" aria-hidden="true" href="#structuralcontext"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructuralContext</h4>
<p dir="auto">To define a new <code>StructuralContext</code>, the following boilerplate is recommended:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import JSON.Writer.StructuralContext
[mutable] struct MyContext &lt;: StructuralContext
    io::IO
    [ ... additional state / settings for context goes here ... ]
end"><pre><span class="pl-k">import</span> JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span>StructuralContext
[mutable] <span class="pl-k">struct</span> MyContext <span class="pl-k">&lt;:</span> <span class="pl-c1">StructuralContext</span>
    io<span class="pl-k">::</span><span class="pl-c1">IO</span>
    [ <span class="pl-k">...</span> additional state <span class="pl-k">/</span> settings <span class="pl-k">for</span> context goes here <span class="pl-k">...</span> ]
<span class="pl-k">end</span></pre></div>
<p dir="auto">If your structural context is going to be very similar to the existing JSON
contexts, it is also possible to instead subtype the abstract subtype
<code>JSONContext</code> of <code>StructuralContext</code>. If this is the case, an <code>io::IO</code> field (as
above) is preferred, although the default implementation will only use this
for <code>write</code>, so replacing that method is enough to avoid this requirement.</p>
<p dir="auto">The following methods should be defined for your context, regardless of whether it
subtypes <code>JSONContext</code> or <code>StructuralContext</code> directly. If some of these methods
are omitted, then <code>CommonSerialization</code> cannot be generally used with this context.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# called when the next object in a vector or next pair of a dict is to be written
# (requiring a newline and indent for some contexts)
# can do nothing if the context need not support indenting
JSON.Writer.indent(io::MyContext)

# called for vectors/dicts to separate items, usually writes &quot;,&quot;
# unless this is the first element in a JSON array
# (default implementation for JSONContext exists, but requires a mutable bool
#  `first` field, and this is an implementation detail not to be relied on; 
#  to define own or delegate explicitly)
JSON.Writer.delimit(io::MyContext)

# called for dicts to separate key and value, usually writes &quot;: &quot;
JSON.Writer.separate(io::MyContext)

# called to indicate start and end of a vector
JSON.Writer.begin_array(io::MyContext)
JSON.Writer.end_array(io::MyContext)

# called to indicate start and end of a dict
JSON.Writer.begin_object(io::MyContext)
JSON.Writer.end_object(io::MyContext)"><pre class="notranslate"><code># called when the next object in a vector or next pair of a dict is to be written
# (requiring a newline and indent for some contexts)
# can do nothing if the context need not support indenting
JSON.Writer.indent(io::MyContext)

# called for vectors/dicts to separate items, usually writes ","
# unless this is the first element in a JSON array
# (default implementation for JSONContext exists, but requires a mutable bool
#  `first` field, and this is an implementation detail not to be relied on; 
#  to define own or delegate explicitly)
JSON.Writer.delimit(io::MyContext)

# called for dicts to separate key and value, usually writes ": "
JSON.Writer.separate(io::MyContext)

# called to indicate start and end of a vector
JSON.Writer.begin_array(io::MyContext)
JSON.Writer.end_array(io::MyContext)

# called to indicate start and end of a dict
JSON.Writer.begin_object(io::MyContext)
JSON.Writer.end_object(io::MyContext)
</code></pre></div>
<p dir="auto">For the following methods, <code>JSONContext</code> provides a default implementation,
but it can be specialized. For <code>StructuralContext</code>s which are not
<code>JSONContext</code>s, the <code>JSONContext</code> defaults are not appropriate and so are
not available.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# directly write a specific byte (if supported)
# default implementation writes to underlying `.io` field
# note that this enables JSONContext to act as any `io::IO`,
# i.e. one can use `print`, `show`, etc.
Base.write(io::MyContext, byte::UInt8)

# write &quot;null&quot;
# default implementation writes to underlying `.io` field
JSON.Writer.show_null(io::MyContext)

# write an object or string in a manner safe for JSON string
# default implementation calls `print` but escapes each byte as appropriate
# and adds double quotes around the content of `elt`
JSON.Writer.show_string(io::MyContext, elt)

# write a new element of JSON array
# default implementation calls delimit, then indent, then show_json
JSON.Writer.show_element(io::MyContext, elt)

# write a key for a JSON object
# default implementation calls delimit, then indent, then show_string,
# then seperate
JSON.Writer.show_key(io::MyContext, elt)

# write a key-value pair for a JSON object
# default implementation calls show key, then show_json
JSON.Writer.show_pair(io::MyContext, s::Serialization, key, value)"><pre><span class="pl-c"><span class="pl-c">#</span> directly write a specific byte (if supported)</span>
<span class="pl-c"><span class="pl-c">#</span> default implementation writes to underlying `.io` field</span>
<span class="pl-c"><span class="pl-c">#</span> note that this enables JSONContext to act as any `io::IO`,</span>
<span class="pl-c"><span class="pl-c">#</span> i.e. one can use `print`, `show`, etc.</span>
Base<span class="pl-k">.</span><span class="pl-c1">write</span>(io<span class="pl-k">::</span><span class="pl-c1">MyContext</span>, byte<span class="pl-k">::</span><span class="pl-c1">UInt8</span>)

<span class="pl-c"><span class="pl-c">#</span> write "null"</span>
<span class="pl-c"><span class="pl-c">#</span> default implementation writes to underlying `.io` field</span>
JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-c1">show_null</span>(io<span class="pl-k">::</span><span class="pl-c1">MyContext</span>)

<span class="pl-c"><span class="pl-c">#</span> write an object or string in a manner safe for JSON string</span>
<span class="pl-c"><span class="pl-c">#</span> default implementation calls `print` but escapes each byte as appropriate</span>
<span class="pl-c"><span class="pl-c">#</span> and adds double quotes around the content of `elt`</span>
JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-c1">show_string</span>(io<span class="pl-k">::</span><span class="pl-c1">MyContext</span>, elt)

<span class="pl-c"><span class="pl-c">#</span> write a new element of JSON array</span>
<span class="pl-c"><span class="pl-c">#</span> default implementation calls delimit, then indent, then show_json</span>
JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-c1">show_element</span>(io<span class="pl-k">::</span><span class="pl-c1">MyContext</span>, elt)

<span class="pl-c"><span class="pl-c">#</span> write a key for a JSON object</span>
<span class="pl-c"><span class="pl-c">#</span> default implementation calls delimit, then indent, then show_string,</span>
<span class="pl-c"><span class="pl-c">#</span> then seperate</span>
JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-c1">show_key</span>(io<span class="pl-k">::</span><span class="pl-c1">MyContext</span>, elt)

<span class="pl-c"><span class="pl-c">#</span> write a key-value pair for a JSON object</span>
<span class="pl-c"><span class="pl-c">#</span> default implementation calls show key, then show_json</span>
JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-c1">show_pair</span>(io<span class="pl-k">::</span><span class="pl-c1">MyContext</span>, s<span class="pl-k">::</span><span class="pl-c1">Serialization</span>, key, value)</pre></div>
<p dir="auto">What follows is an example of a <code>JSONContext</code> subtype which is very similar
to the default context, but which uses <code>None</code> instead of <code>null</code> for JSON nulls,
which is then generally compatible with Python object literal notation (PYON). It
wraps a default <code>JSONContext</code> to delegate all the required methods to. Since
the wrapped context already has a <code>.io</code>, this object does not need to include
an <code>.io</code> field, and so the <code>write</code> method must also be delegated, since the default
is not appropriate. The only other specialization needed is <code>show_null</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import JSON.Writer
import JSON.Writer.JSONContext
mutable struct PYONContext &lt;: JSONContext
    underlying::JSONContext
end

for delegate in [:indent,
                 :delimit,
                 :separate,
                 :begin_array,
                 :end_array,
                 :begin_object,
                 :end_object]
    @eval JSON.Writer.$delegate(io::PYONContext) = JSON.Writer.$delegate(io.underlying)
end
Base.write(io::PYONContext, byte::UInt8) = write(io.underlying, byte)

JSON.Writer.show_null(io::PYONContext) = print(io, &quot;None&quot;)
pyonprint(io::IO, obj) = let io = PYONContext(JSON.Writer.PrettyContext(io, 4))
    JSON.print(io, obj)
    return
end"><pre><span class="pl-k">import</span> JSON<span class="pl-k">.</span>Writer
<span class="pl-k">import</span> JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span>JSONContext
<span class="pl-k">mutable struct</span> PYONContext <span class="pl-k">&lt;:</span> <span class="pl-c1">JSONContext</span>
    underlying<span class="pl-k">::</span><span class="pl-c1">JSONContext</span>
<span class="pl-k">end</span>

<span class="pl-k">for</span> delegate <span class="pl-k">in</span> [<span class="pl-c1">:indent</span>,
                 <span class="pl-c1">:delimit</span>,
                 <span class="pl-c1">:separate</span>,
                 <span class="pl-c1">:begin_array</span>,
                 <span class="pl-c1">:end_array</span>,
                 <span class="pl-c1">:begin_object</span>,
                 <span class="pl-c1">:end_object</span>]
    <span class="pl-c1">@eval</span> JSON<span class="pl-k">.</span>Writer.<span class="pl-k">$</span><span class="pl-en">delegate</span>(io<span class="pl-k">::</span><span class="pl-c1">PYONContext</span>) <span class="pl-k">=</span> JSON<span class="pl-k">.</span>Writer.<span class="pl-k">$</span><span class="pl-c1">delegate</span>(io<span class="pl-k">.</span>underlying)
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-en">write</span>(io<span class="pl-k">::</span><span class="pl-c1">PYONContext</span>, byte<span class="pl-k">::</span><span class="pl-c1">UInt8</span>) <span class="pl-k">=</span> <span class="pl-c1">write</span>(io<span class="pl-k">.</span>underlying, byte)

JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-en">show_null</span>(io<span class="pl-k">::</span><span class="pl-c1">PYONContext</span>) <span class="pl-k">=</span> <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>None<span class="pl-pds">"</span></span>)
<span class="pl-en">pyonprint</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, obj) <span class="pl-k">=</span> <span class="pl-k">let</span> io <span class="pl-k">=</span> <span class="pl-c1">PYONContext</span>(JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span><span class="pl-c1">PrettyContext</span>(io, <span class="pl-c1">4</span>))
    JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(io, obj)
    <span class="pl-k">return</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The usage of this <code>pyonprint</code> function is as any other <code>print</code> function, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pyonprint(stdout, [1, 2, nothing])
[
    1,
    2,
    None
]

julia&gt; sprint(pyonprint, missing)
&quot;None&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">pyonprint</span>(<span class="pl-c1">stdout</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">nothing</span>])
[
    <span class="pl-c1">1</span>,
    <span class="pl-c1">2</span>,
    None
]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sprint</span>(pyonprint, <span class="pl-c1">missing</span>)
<span class="pl-s"><span class="pl-pds">"</span>None<span class="pl-pds">"</span></span></pre></div>
<h4 dir="auto"><a id="user-content-serialization" class="anchor" aria-hidden="true" href="#serialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Serialization</h4>
<p dir="auto">For cases where the JSON cosmetics are unimportant, but how objects are converted into their
JSON equivalents (arrays, objects, numbers, etc.) need to be changed, the appropriate
abstraction is <code>Serialization</code>. A <code>Serialization</code> instance is used as the second argument in
<code>show_json</code>. Thus, specializing <code>show_json</code> for custom <code>Serialization</code> instances enables
either creating more restrictive or different ways to convert objects into JSON.</p>
<p dir="auto">The default serialization is called <code>JSON.Serializations.StandardSerialization</code>, which is a
subtype of <code>CommonSerialization</code>. Methods of <code>show_json</code> are not added to
<code>StandardSerialization</code>, but rather to <code>CommonSerialization</code>, by both <code>JSON</code> and by
other packages for their own types. The <code>lower</code> functionality is also specific to
<code>CommonSerialization</code>. Therefore, to create a serialization instance that inherits from and
may extend or override parts of the standard serialization, it suffices to define a new
serialization subtyping <code>CommonSerialization</code>. In the example below, the new serialization
is the same as <code>StandardSerialization</code> except that numbers are serialized with an additional
type tag.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import JSON.Serializations: CommonSerialization, StandardSerialization
import JSON.Writer: StructuralContext, show_json
struct TaggedNumberSerialization &lt;: CommonSerialization end

tag(f::Real) = Dict(:type =&gt; string(typeof(f)), :value =&gt; f)
show_json(io::StructuralContext,
            ::TaggedNumberSerialization,
           f::Union{Integer, AbstractFloat}) =
    show_json(io, StandardSerialization(), tag(f))"><pre><span class="pl-k">import</span> JSON<span class="pl-k">.</span>Serializations<span class="pl-k">:</span> CommonSerialization, StandardSerialization
<span class="pl-k">import</span> JSON<span class="pl-k">.</span>Writer<span class="pl-k">:</span> StructuralContext, show_json
<span class="pl-k">struct</span> TaggedNumberSerialization <span class="pl-k">&lt;:</span> <span class="pl-c1">CommonSerialization</span> <span class="pl-k">end</span>

<span class="pl-en">tag</span>(f<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:type</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">string</span>(<span class="pl-c1">typeof</span>(f)), <span class="pl-c1">:value</span> <span class="pl-k">=&gt;</span> f)
<span class="pl-c1">show_json</span>(io<span class="pl-k">::</span><span class="pl-c1">StructuralContext</span>,
            <span class="pl-k">::</span><span class="pl-c1">TaggedNumberSerialization</span>,
           f<span class="pl-k">::</span><span class="pl-c1">Union{Integer, AbstractFloat}</span>) <span class="pl-k">=</span>
    <span class="pl-c1">show_json</span>(io, <span class="pl-c1">StandardSerialization</span>(), <span class="pl-c1">tag</span>(f))</pre></div>
<p dir="auto">Note that the recursive call constructs a <code>StandardSerialization()</code>, as otherwise this would
result in a stack overflow, and serializes a <code>Dict</code> using that. In this toy example, this is
fine (with only the overhead of constructing a <code>Dict</code>), but this is not always possible.
(For instance, if the constructed <code>Dict</code> could have other numbers within its values that
need to be tagged.)</p>
<p dir="auto">To deal with these more complex cases, or simply to eliminate the overhead of constructing
the intermediate <code>Dict</code>, the <code>show_json</code> method can be implemented more carefully by
explicitly calling the context‚Äôs <code>begin_object</code>, <code>show_pair</code>, and <code>end_object</code> methods, as
documented above, and use the <code>StandardSerialization()</code> only for the <code>show_pair</code> call for
<code>f</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# More careful implementation
# No difference in this case, but could be needed if recursive data structures are to be
# serialized in more complex cases.
import JSON.Writer: begin_object, show_pair, end_object
function show_json(io::StructuralContext,
                    s::TaggedNumberSerialization,
                    f::Union{Integer, AbstractFloat})
    begin_object(io)
    show_pair(io, s, :tag =&gt; string(typeof(f)))
    show_pair(io, StandardSerialization(), :value =&gt; f)
    end_object(io)
end"><pre><span class="pl-c"><span class="pl-c">#</span> More careful implementation</span>
<span class="pl-c"><span class="pl-c">#</span> No difference in this case, but could be needed if recursive data structures are to be</span>
<span class="pl-c"><span class="pl-c">#</span> serialized in more complex cases.</span>
<span class="pl-k">import</span> JSON<span class="pl-k">.</span>Writer<span class="pl-k">:</span> begin_object, show_pair, end_object
<span class="pl-k">function</span> <span class="pl-en">show_json</span>(io<span class="pl-k">::</span><span class="pl-c1">StructuralContext</span>,
                    s<span class="pl-k">::</span><span class="pl-c1">TaggedNumberSerialization</span>,
                    f<span class="pl-k">::</span><span class="pl-c1">Union{Integer, AbstractFloat}</span>)
    <span class="pl-c1">begin_object</span>(io)
    <span class="pl-c1">show_pair</span>(io, s, <span class="pl-c1">:tag</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">string</span>(<span class="pl-c1">typeof</span>(f)))
    <span class="pl-c1">show_pair</span>(io, <span class="pl-c1">StandardSerialization</span>(), <span class="pl-c1">:value</span> <span class="pl-k">=&gt;</span> f)
    <span class="pl-c1">end_object</span>(io)
<span class="pl-k">end</span></pre></div>
<p dir="auto">To use the custom serialization, <code>sprint</code> can be used (and this can be encapsulated by a
convenient user-defined inteface):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; JSON.parse(sprint(show_json, TaggedNumberSerialization(), Any[1, 2.0, &quot;hi&quot;]))
3-element Array{Any,1}:
 Dict{String,Any}(&quot;value&quot; =&gt; 1,&quot;type&quot; =&gt; &quot;Int64&quot;)
 Dict{String,Any}(&quot;value&quot; =&gt; 2.0,&quot;type&quot; =&gt; &quot;Float64&quot;)
 &quot;hi&quot;"><pre>julia<span class="pl-k">&gt;</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-c1">sprint</span>(show_json, <span class="pl-c1">TaggedNumberSerialization</span>(), Any[<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>]))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Int64<span class="pl-pds">"</span></span>)
 <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>,<span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Float64<span class="pl-pds">"</span></span>)
 <span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">If it is not desired to inherit all the functionality of <code>StandardSerialization</code>, users may
also choose to start from scratch by directly subtyping <code>JSON.Serializations.Serialization</code>.
This is useful if the user wishes to enforce a strict JSON which throws errors when
attempting to serialize objects that aren‚Äôt explicitly supported. Note that this means you
will need to define a method to support serializing any kind of object, including the
standard JSON objects like booleans, integers, strings, etc.!</p>
</article></div>