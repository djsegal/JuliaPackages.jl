<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-acornjl" class="anchor" aria-hidden="true" href="#acornjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acorn.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/nick-paul/Acorn.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa9c736288983ff7f52f525c1e89c29c971d36ab9a8424731da06c77998b5a37/68747470733a2f2f7472617669732d63692e6f72672f6e69636b2d7061756c2f41636f726e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/nick-paul/Acorn.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://ci.appveyor.com/project/nick-paul/acorn-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/720f03ebc7b6f03fa358e5f4abb852a3ae688a30778de5bb4fd51381915e8c37/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f74763533796e6274386c727766366a643f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/tv53ynbt8lrwf6jd?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto"><code>Acorn.jl</code> is a small text editor written purely in julia.</p>
<p dir="auto"><strong>Note</strong>: This project was written to learn more about and demonstrate julia as a general purpose language, it was not originally intended to be a practical solution to editing text within the REPL (considering one can just type <code>;vim</code> for a feature complete text editor in the REPL).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9aea5771fea7521d7a4bc9acf33295e3ae5b40bfe5ec96e85ea37a4ea781b7ac/687474703a2f2f6e7061756c2e636f2f66696c65732f41636f726e5f62617369635f64656d6f2e676966"><img src="https://camo.githubusercontent.com/9aea5771fea7521d7a4bc9acf33295e3ae5b40bfe5ec96e85ea37a4ea781b7ac/687474703a2f2f6e7061756c2e636f2f66696c65732f41636f726e5f62617369635f64656d6f2e676966" alt="Basic Demo" data-animated-image="" data-canonical-src="http://npaul.co/files/Acorn_basic_demo.gif" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Creating a new text file and writing contents from the julia REPL.</em></p>
<p dir="auto">Features include:</p>
<ul dir="auto">
<li>Use in REPL or from command line</li>
<li>Commands like <code>find</code>, <code>help</code>, <code>save</code> + easy to create your own.</li>
<li>Customizable key bindings and settings</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/14582dcfb20130dc6d6b0605ffeb54846440d7c2e7e08bbe98d0e3fef2e5b489/687474703a2f2f6e7061756c2e636f2f66696c65732f41636f726e5f636f6d6d616e64735f64656d6f2e676966"><img src="https://camo.githubusercontent.com/14582dcfb20130dc6d6b0605ffeb54846440d7c2e7e08bbe98d0e3fef2e5b489/687474703a2f2f6e7061756c2e636f2f66696c65732f41636f726e5f636f6d6d616e64735f64656d6f2e676966" alt="Commands" data-animated-image="" data-canonical-src="http://npaul.co/files/Acorn_commands_demo.gif" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Acorn's command mode allows users to change settings and execute commands on the fly. It also provides a way to easily add, remove, or change keybindings from within the application</em></p>
<h1 dir="auto"><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/nick-paul/Acorn.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/nick-paul/Acorn.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">From within the REPL:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Acorn
julia&gt; acorn(&quot;filename&quot;)"><pre class="notranslate"><code>julia&gt; using Acorn
julia&gt; acorn("filename")
</code></pre></div>
<p dir="auto">From the command line</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ julia -E &quot;using Acorn;acorn()&quot; filename"><pre class="notranslate"><code>$ julia -E "using Acorn;acorn()" filename
</code></pre></div>
<p dir="auto">Use an alias to make command line easier:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ alias acornjl='julia -E &quot;using Acorn;acorn()&quot;'
$ acornjl filename"><pre class="notranslate"><code>$ alias acornjl='julia -E "using Acorn;acorn()"'
$ acornjl filename
</code></pre></div>
<h1 dir="auto"><a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Commands</h1>
<p dir="auto">Press <code>Ctrl-P</code> to enter command mode. Type 'help COMMAND' for more information on that command.</p>
<p dir="auto"><em>arguments in <code>[brackets]</code> are optional</em></p>
<ul dir="auto">
<li><code>help [CMD]</code>: display help information for CMD</li>
<li><code>quit</code>: quit the editor</li>
<li><code>open FILE</code>: open a file, create a new one if needed</li>
<li><code>save [FILE]</code>: save the file, if a new filename is provided, save as that name</li>
<li><code>find [STR]</code>: start interactive find. if <code>STR</code> is provided, start interactive search with <code>STR</code>. Use the up and down arrows to go to the prev/next occurance in the test.</li>
<li><code>echo STR</code>: display <code>STR</code> as a message</li>
<li><code>set param_name param</code>: set parameter <code>param_name</code> to <code>param</code>. ex: <code>set tab_stop 4</code></li>
<li><code>bind char command</code>: bind <code>Ctrl-(char)</code> to the command <code>command</code>. ex: <code>bind s save</code>, <code>bind h echo Hello world!</code>. Type <code>bind char ~</code> to unbind.</li>
</ul>
<h1 dir="auto"><a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Settings</h1>
<p dir="auto">Change settings by pressing <code>ctrl-p</code> to enter command mode and then typing <code>set &lt;cmd name&gt; &lt;value&gt;</code>. All settings remain for the duration of the editor session. When opening a new editor, the default configuration is used.</p>
<p dir="auto">To change the default values, use the following in your <code>.juliarc.jl</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Acorn
Acorn.configSet(:param_name, value)"><pre class="notranslate"><code>using Acorn
Acorn.configSet(:param_name, value)
</code></pre></div>
<p dir="auto">where <code>:param_name</code> is a symbol with the parameter's name and <code>value</code> is the new default value.</p>
<p dir="auto">Acorn currently supports the following settings:</p>
<ul dir="auto">
<li><code>tab_stop</code>: Tab width in number of spaces. (default: 4,)</li>
<li><code>expandtab</code>: If true, insert spaces when pressing the tab key.</li>
<li><code>status_fullpath</code>: If true, display the full path to the file in the status bar. If false, just display the name.</li>
</ul>
<h1 dir="auto"><a id="user-content-customization--contributing" class="anchor" aria-hidden="true" href="#customization--contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Customization / Contributing</h1>
<h2 dir="auto"><a id="user-content-commands-1" class="anchor" aria-hidden="true" href="#commands-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Commands</h2>
<p dir="auto">Commands are easy to create and allow for greater editor usability. To create your own command, create a julia file in the <code>cmds</code> folder, name it after your command, and include it in the Acorn module. Below is an example definition of the command <code>sample</code>. For more examples, see the <code>cmds/</code> folder. If you have written a command that you would like to see implemented in Acorn, feel free to send a pull request.</p>
<h3 dir="auto"><a id="user-content-cmdssamplejl" class="anchor" aria-hidden="true" href="#cmdssamplejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>cmds/sample.jl</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# The command must have the signature
#   function(::Editor, ::String)
function sampleCommand(ed::Editor, args::String)
    # Perform operation here

    # If you need to store state variables use ed.params
    # ed.params[:YOUR CMD NAME][VAR NAME]
    ed.params[:sample][:var_name] = some_val

    # If you need to request input from the user:
    editorPrompt(ed, &quot;Enter your name: &quot;,
            callback=sampleCallback     # Callback function: function(ed::Editor, buf::String, key::Char
            buf=&quot;&quot;,             # Starting point for the input buffer. This text is
                                #   'automatically' typed into the input when the
                                #   prompt loads
            showcursor=true)    # Move the cursor to the prompt

end

# Optional: If you request input from the user and need a
#   callback function, use the following format:
function sampleCallback(ed::Editor, buf::String, key::Char)
    # Perform callback action here...
end


# Call `addCommand` to add
addCommand(:sample,                         # The command name
            sampleCommand,                  # The command function
            help=&quot;description of sample&quot;)   # Displayed when user runs 'help sample'"><pre><span class="pl-c"><span class="pl-c">#</span> The command must have the signature</span>
<span class="pl-c"><span class="pl-c">#</span>   function(::Editor, ::String)</span>
<span class="pl-k">function</span> <span class="pl-en">sampleCommand</span>(ed<span class="pl-k">::</span><span class="pl-c1">Editor</span>, args<span class="pl-k">::</span><span class="pl-c1">String</span>)
    <span class="pl-c"><span class="pl-c">#</span> Perform operation here</span>

    <span class="pl-c"><span class="pl-c">#</span> If you need to store state variables use ed.params</span>
    <span class="pl-c"><span class="pl-c">#</span> ed.params[:YOUR CMD NAME][VAR NAME]</span>
    ed<span class="pl-k">.</span>params[<span class="pl-c1">:sample</span>][<span class="pl-c1">:var_name</span>] <span class="pl-k">=</span> some_val

    <span class="pl-c"><span class="pl-c">#</span> If you need to request input from the user:</span>
    <span class="pl-c1">editorPrompt</span>(ed, <span class="pl-s"><span class="pl-pds">"</span>Enter your name: <span class="pl-pds">"</span></span>,
            callback<span class="pl-k">=</span>sampleCallback     <span class="pl-c"><span class="pl-c">#</span> Callback function: function(ed::Editor, buf::String, key::Char</span>
            buf<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>,             <span class="pl-c"><span class="pl-c">#</span> Starting point for the input buffer. This text is</span>
                                <span class="pl-c"><span class="pl-c">#</span>   'automatically' typed into the input when the</span>
                                <span class="pl-c"><span class="pl-c">#</span>   prompt loads</span>
            showcursor<span class="pl-k">=</span><span class="pl-c1">true</span>)    <span class="pl-c"><span class="pl-c">#</span> Move the cursor to the prompt</span>

<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Optional: If you request input from the user and need a</span>
<span class="pl-c"><span class="pl-c">#</span>   callback function, use the following format:</span>
<span class="pl-k">function</span> <span class="pl-en">sampleCallback</span>(ed<span class="pl-k">::</span><span class="pl-c1">Editor</span>, buf<span class="pl-k">::</span><span class="pl-c1">String</span>, key<span class="pl-k">::</span><span class="pl-c1">Char</span>)
    <span class="pl-c"><span class="pl-c">#</span> Perform callback action here...</span>
<span class="pl-k">end</span>


<span class="pl-c"><span class="pl-c">#</span> Call `addCommand` to add</span>
<span class="pl-c1">addCommand</span>(<span class="pl-c1">:sample</span>,                         <span class="pl-c"><span class="pl-c">#</span> The command name</span>
            sampleCommand,                  <span class="pl-c"><span class="pl-c">#</span> The command function</span>
            help<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>description of sample<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> Displayed when user runs 'help sample'</span></pre></div>
<h3 dir="auto"><a id="user-content-including-your-command" class="anchor" aria-hidden="true" href="#including-your-command"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Including your command</h3>
<p dir="auto">Include your command in <code>Acorn.jl</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Load commands
#...
include(&quot;cmds/save.jl&quot;)
include(&quot;cmds/find.jl&quot;)
include(&quot;cmds/sample.jl&quot;) # Add this line
#..."><pre><span class="pl-c"><span class="pl-c">#</span> Load commands</span>
<span class="pl-c"><span class="pl-c">#</span>...</span>
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>cmds/save.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>cmds/find.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>cmds/sample.jl<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Add this line</span>
<span class="pl-c"><span class="pl-c">#</span>...</span></pre></div>
<p dir="auto">Please also create a test file <code>test/cmds/test_sample.jl</code> and include it in <code>test/runtests.jl</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="include(&quot;cmds/test_sample.jl&quot;)"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>cmds/test_sample.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto">Many features have not yet been implemented. I will slowly be adding features and I will try to keep up with issues and pull requests so feel free to add whatever you like to the editor. Some things I may eventually add to the editor are:</p>
<ul dir="auto">
<li>Text selection
<ul dir="auto">
<li>Copy/paste</li>
</ul>
</li>
<li>Tab completion</li>
<li>Syntax highlighting</li>
<li>Line numbers</li>
<li>Auto indent</li>
<li>...</li>
</ul>
<h2 dir="auto"><a id="user-content-bug-fixes--compatibility" class="anchor" aria-hidden="true" href="#bug-fixes--compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bug Fixes / Compatibility</h2>
<p dir="auto">Acorn has not been tested on OSX and currently has compatibility issues with Windows. If you run into any problems on your platform feel free to patch it and send a pull request.</p>
<p dir="auto">If you experience any bugs, please submit an issue or patch it and send a pull request.</p>
<h1 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h1>
<ul dir="auto">
<li>Much of the core code and design in <code>src/editor.jl</code> is based off of <a href="http://invece.org/" rel="nofollow">antirez</a>'s <a href="http://antirez.com/news/108" rel="nofollow">kilo</a>.</li>
<li>The <a href="http://viewsourcecode.org/snaptoken/kilo/" rel="nofollow">kilo tutorial</a> by <a href="https://github.com/snaptoken">snaptoken</a> was a huge help when writing the core editor features.</li>
</ul>
</article></div>