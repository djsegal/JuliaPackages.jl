<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-blicontractorjl" class="anchor" aria-hidden="true" href="#blicontractorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BliContractor.jl</h1>
<p dir="auto"><a href="https://github.com/xrq-phys/BliContractor.jl/actions?query=workflow%3ACI"><img src="https://github.com/xrq-phys/BliContractor.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/xrq-phys/BliContractor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/da5f1254c2eadc03fcd8043bfbb9a5dbd0023b5b34aa0acf55e1ec0d6141563d/68747470733a2f2f636f6465636f762e696f2f67682f7872712d706879732f426c69436f6e74726163746f722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/xrq-phys/BliContractor.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">Fast tensor contractor for Julia, based on TBLIS, with high-order AD and Stride support, within 400† lines. <br>
† Result may vary as more dispatch rules are added.</p>
</blockquote>
<ul dir="auto">
<li>All these are made possible thanks to <a href="https://github.com/devinamatthews/tblis">TBLIS</a>;</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add BliContractor"><pre class="notranslate"><code>] add BliContractor
</code></pre></div>
<p dir="auto">This will link the Julia package against TBLIS library vendored by <code>tblis_jll</code>.</p>
<p dir="auto">If one wants to use their own TBLIS build, specify their TBLIS installation root
with <code>export TBLISDIR=${PathToYourTBLIS}</code>, start Julia and run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] build BliContractor"><pre class="notranslate"><code>] build BliContractor
</code></pre></div>
<p dir="auto">BliContractor.jl will be relinked to use the user-defined TBLIS installation.
Build steps as well as environment specification needs to be done <em>only once</em>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-from-tensoroperationsjl" class="anchor" aria-hidden="true" href="#from-tensoroperationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>From TensorOperations.jl</h3>
<p dir="auto">My implementation now contains necessary overriding of <a href="https://github.com/Jutho/TensorOperations.jl">TensorOperation.jl</a>'s CPU backend method. One can directly invoke the <code>@tensor</code> macro (or the <code>ncon</code> function, etc.) and reach TBLIS backend.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TensorOperations
using BliContractor

A = rand(10, 10, 10, 10);
B = rand(10, 10, 10, 10);
C = ones(10, 10, 10, 10);
@tensor C[i, a, k, c] = A[i, j, k, l] * B[a, l, c, j]"><pre><span class="pl-k">using</span> TensorOperations
<span class="pl-k">using</span> BliContractor

A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>);
B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>);
C <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>);
<span class="pl-c1">@tensor</span> C[i, a, k, c] <span class="pl-k">=</span> A[i, j, k, l] <span class="pl-k">*</span> B[a, l, c, j]</pre></div>
<p dir="auto">Supported datatypes are <code>Float32, Float64, ComplexF32, ComplexF64, Dual{N, Float32}</code> and <code>Dual{N, Float64}</code>. See also below for AD support.</p>
<h3 dir="auto"><a id="user-content-as-standalone-package" class="anchor" aria-hidden="true" href="#as-standalone-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>As Standalone Package</h3>
<p dir="auto">The simplest API is given by <code>contract</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BliContractor
using ForwardDiff: Dual
At = rand( 6, 4, 5) * Dual(1.0, 1.0);
Bt = rand(10, 5, 4) * Dual(1.0, 0.0);
contract(At, &quot;ikl&quot;, Bt, &quot;jlk&quot;, &quot;ij&quot;)
# or equivalently:
contract(At, Bt, &quot;ikl&quot;, &quot;jlk&quot;, &quot;ij&quot;)"><pre><span class="pl-k">using</span> BliContractor
<span class="pl-k">using</span> ForwardDiff<span class="pl-k">:</span> Dual
At <span class="pl-k">=</span> <span class="pl-c1">rand</span>( <span class="pl-c1">6</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>) <span class="pl-k">*</span> <span class="pl-c1">Dual</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>);
Bt <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">5</span>, <span class="pl-c1">4</span>) <span class="pl-k">*</span> <span class="pl-c1">Dual</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>);
<span class="pl-c1">contract</span>(At, <span class="pl-s"><span class="pl-pds">"</span>ikl<span class="pl-pds">"</span></span>, Bt, <span class="pl-s"><span class="pl-pds">"</span>jlk<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ij<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> or equivalently:</span>
<span class="pl-c1">contract</span>(At, Bt, <span class="pl-s"><span class="pl-pds">"</span>ikl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>jlk<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ij<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Index notation here is the same as TBLIS, namely the Einstein's summation rules. This <code>contract</code> (with exclamation mark <code>!</code>) is also the only subroutine with <a href="https://github.com/FluxML/Zygote.jl">Zygote</a>'s backward derivative support (while all subroutines in this module supports <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff</a>'s forward differential).</p>
<p dir="auto">If one's having destination tensor <code>C</code> preallocated, a <code>contract!</code> routine (which is
in fact called by <code>contract</code>) is also available:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Ct = zeros(6, 10) * Dual(1.0, 0.0);
contract!(At, &quot;ikl&quot;, Bt, &quot;jlk&quot;, Ct, &quot;ij&quot;)"><pre>Ct <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">6</span>, <span class="pl-c1">10</span>) <span class="pl-k">*</span> <span class="pl-c1">Dual</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>);
<span class="pl-c1">contract!</span>(At, <span class="pl-s"><span class="pl-pds">"</span>ikl<span class="pl-pds">"</span></span>, Bt, <span class="pl-s"><span class="pl-pds">"</span>jlk<span class="pl-pds">"</span></span>, Ct, <span class="pl-s"><span class="pl-pds">"</span>ij<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Tensors can be <code>Array</code>s or strided <code>SubArray</code>s:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Aw = view(At, :, 1:2:4, :);
# Unlike the case of BLAS,
# first dimension is not required to be 1 for performance to be nice:
Bw = view(Bt, 1:2:10, :, 1:2:4);
Cv = zeros(6, 5) * Dual(1.0, 0.0);
contract!(Aw, &quot;ikl&quot;, Bw, &quot;jlk&quot;, Cv, &quot;ij&quot;)"><pre>Aw <span class="pl-k">=</span> <span class="pl-c1">view</span>(At, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, :);
<span class="pl-c"><span class="pl-c">#</span> Unlike the case of BLAS,</span>
<span class="pl-c"><span class="pl-c">#</span> first dimension is not required to be 1 for performance to be nice:</span>
Bw <span class="pl-k">=</span> <span class="pl-c1">view</span>(Bt, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, :, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>);
Cv <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">6</span>, <span class="pl-c1">5</span>) <span class="pl-k">*</span> <span class="pl-c1">Dual</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>);
<span class="pl-c1">contract!</span>(Aw, <span class="pl-s"><span class="pl-pds">"</span>ikl<span class="pl-pds">"</span></span>, Bw, <span class="pl-s"><span class="pl-pds">"</span>jlk<span class="pl-pds">"</span></span>, Cv, <span class="pl-s"><span class="pl-pds">"</span>ij<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roadmap</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Explicitly dispatch mixed multiplication of plain values with Duals, e.g. <code>(Float64, Dual{Tag, Float64})</code> or <code>(Dual{Tag, Float64}, Dual{Tag, Dual{Tag, Float64}})</code>, though they are already available via type conversion;</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Let it play well with <a href="https://github.com/FluxML/Zygote.jl">Zygote.jl</a>, to at least 1st order;</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Enable 2nd order pullback for Zygote.jl.</li>
</ul>
<h2 dir="auto"><a id="user-content-on-2nd-derivative-with-zygotejl" class="anchor" aria-hidden="true" href="#on-2nd-derivative-with-zygotejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>On 2nd Derivative with Zygote.jl</h2>
<p dir="auto">Second derivative through <code>hessian</code> is already working on Zygote.jl's <code>master</code> branch, but taking <code>pullback</code> 2 times requires something more which is currently only available in the upstream development branch:
<a href="https://github.com/DhairyaLGandhi/Zygote.jl/tree/dg/iddict"><strong>DhairyaLGandhi/Zygote.jl</strong>/<code>dg/iddict</code></a>.</p>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">Here are two benchmark reports collected on the following system:</p>
<ul dir="auto">
<li>Processor Model: Intel® Xeon® Platinum 8260</li>
<li>SIMD Width: 512bits (AVX512)</li>
<li>FP Pipelines: 2 AVX512 pipelines per core</li>
<li>Frequency Throttling: Yes, even on serial execution.</li>
<li>Basic Clock-Frequency: 2.40GHz</li>
<li>OS: CentOS Linux 7</li>
<li>Julia: 1.5.2 (official)</li>
<li>OpenMP # of Threads: 4</li>
</ul>
<h3 dir="auto"><a id="user-content-gemm-incompatible-contractions" class="anchor" aria-hidden="true" href="#gemm-incompatible-contractions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GEMM-Incompatible Contractions</h3>
<p dir="auto">A contraction which can not be handled by BLAS' GEMM routines is tested to show superiority of TBLIS over blocked-GEMM calls launched by TensorOperations.jl.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/jl_cross.jpg"><img src="docs/src/jl_cross.jpg" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-generic-strided-tensors" class="anchor" aria-hidden="true" href="#generic-strided-tensors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generic Strided Tensors</h3>
<p dir="auto">Generic-strided tensors are directly supported by TBLIS while in TensorOperations.jl they fall back to hand-written loops without BLAS assembly call.
Tensor entries in this test has datatype <code>ForwardDiff.Dual{&lt;:Any, Float64, 1}</code>, which mean that the each variable part (value or 1st differential) is stored with 1-element skip within each "column" (<code>A[:, l, m, n]</code>) of the tensor, forming a generic-strided storage.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/jl_dual.jpg"><img src="docs/src/jl_dual.jpg" alt="" style="max-width: 100%;"></a></p>
</article></div>