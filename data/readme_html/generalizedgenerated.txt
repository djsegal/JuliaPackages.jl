<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-generalizedgenerated" class="anchor" aria-hidden="true" href="#generalizedgenerated"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GeneralizedGenerated</h1>
<p dir="auto"><a href="https://JuliaStaging.github.io/GeneralizedGenerated.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaStaging.github.io/GeneralizedGenerated.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/JuliaStaging/GeneralizedGenerated.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af40d0add9b8c4a197b0a32d78e10dff79337d60143c2380a6d7b917f34f02bd/68747470733a2f2f7472617669732d63692e636f6d2f4a756c696153746167696e672f47656e6572616c697a656447656e6572617465642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaStaging/GeneralizedGenerated.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaStaging/GeneralizedGenerated.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/89f50759d90cc1189f0bd0e9143874291f5eeed42a8812061e2adb58c68d9d8f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153746167696e672f47656e6572616c697a656447656e6572617465642e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaStaging/GeneralizedGenerated.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3596233" rel="nofollow"><img src="https://camo.githubusercontent.com/774b6b19598ca2e7f430cafbb1c79a21bda70e4ab237c9c380224ca5e8b2a894/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333539363233332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3596233.svg" style="max-width: 100%;"></a></p>
<p dir="auto">GeneralizedGenerated enables the generalized generated functions. Specifically, <strong>it supports closure constructions in generated functions</strong>.</p>
<p dir="auto">Besides, some utility stuffs relevant to GeneralizedGenerated's implementation are exported,
which <strong>allows you to keep <code>eval</code> and <code>invokelastest</code></strong> away from Julia
metaprogramming.</p>
<h2 dir="auto"><a id="user-content-notes-about-usage" class="anchor" aria-hidden="true" href="#notes-about-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes about Usage:</h2>
<p dir="auto"><code>GeneralizedGenerated.jl</code> has issues about latency and extensive memory consumptions, and is sometimes likely to trigger segfault bugs when generated functions get enormous(<a href="https://github.com/JuliaStaging/GeneralizedGenerated.jl/issues/45" data-hovercard-type="issue" data-hovercard-url="/JuliaStaging/GeneralizedGenerated.jl/issues/45/hovercard">#45</a>, <a href="https://github.com/JuliaStaging/GeneralizedGenerated.jl/issues/59" data-hovercard-type="issue" data-hovercard-url="/JuliaStaging/GeneralizedGenerated.jl/issues/59/hovercard">#59</a>). This suggests that you should avoid your expressions from being too large.</p>
<p dir="auto">In terms of <strong>use cases where no closure is needed</strong>, you'd better use <a href="https://github.com/SciML/RuntimeGeneratedFunctions.jl">RuntimeGeneratedFunctions.jl</a>, which has better scalability than <code>GeneralizedGenerated.jl</code>.</p>
<p dir="auto">P.S:</p>
<ul dir="auto">
<li>You should also re-check if closures are really necessary in your code.</li>
<li>If you use <code>mk_function</code> or similar stuffs in a non-global loop, but only call those generated functions once, you might re-think if your design can be refined to avoid this.</li>
</ul>
<h2 dir="auto"><a id="user-content-background-world-age-problem" class="anchor" aria-hidden="true" href="#background-world-age-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background: World Age Problem</h2>
<p dir="auto">See an explanation <a href="https://discourse.julialang.org/t/world-age-problem-explanation/9714/4" rel="nofollow">here</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; module WorldAgeProblemRaisedHere!
           do_this!(one_ary_fn_ast::Expr, arg) = begin
               eval(one_ary_fn_ast)(arg)
           end
           res = do_this!(:(x -&gt; x + 1), 2)
           @info res
       end
ERROR: MethodError: no method matching (::getfield(Main.WorldAgeProblemRaisedHere!, Symbol(&quot;##1#2&quot;)))(::Int64)
The applicable method may be too new: running in world age 26095, while current world is 26096.

julia&gt; module WorldAgeProblemSolvedHere!
           using GeneralizedGenerated
           do_this!(one_ary_fn_ast::Expr, arg) = begin
               runtime_eval(one_ary_fn_ast)(arg)
           end
           res = do_this!(:(x -&gt; x + 1), 2)
           @info res
       end
[ Info: 3
Main.WorldAgeProblemSolvedHere!"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> WorldAgeProblemRaisedHere!
           <span class="pl-en">do_this!</span>(one_ary_fn_ast<span class="pl-k">::</span><span class="pl-c1">Expr</span>, arg) <span class="pl-k">=</span> <span class="pl-k">begin</span>
               <span class="pl-c1">eval</span>(one_ary_fn_ast)(arg)
           <span class="pl-k">end</span>
           res <span class="pl-k">=</span> <span class="pl-c1">do_this!</span>(:(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
           <span class="pl-c1">@info</span> res
       <span class="pl-k">end</span>
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching (<span class="pl-k">::</span><span class="pl-c1">getfield</span>(Main<span class="pl-k">.</span>WorldAgeProblemRaisedHere!, <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>##1#2<span class="pl-pds">"</span></span>)))(<span class="pl-k">::</span><span class="pl-c1">Int64</span>)
The applicable method may be too new<span class="pl-k">:</span> running <span class="pl-k">in</span> world age <span class="pl-c1">26095</span>, <span class="pl-k">while</span> current world is <span class="pl-c1">26096.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> WorldAgeProblemSolvedHere!
           <span class="pl-k">using</span> GeneralizedGenerated
           <span class="pl-en">do_this!</span>(one_ary_fn_ast<span class="pl-k">::</span><span class="pl-c1">Expr</span>, arg) <span class="pl-k">=</span> <span class="pl-k">begin</span>
               <span class="pl-c1">runtime_eval</span>(one_ary_fn_ast)(arg)
           <span class="pl-k">end</span>
           res <span class="pl-k">=</span> <span class="pl-c1">do_this!</span>(:(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
           <span class="pl-c1">@info</span> res
       <span class="pl-k">end</span>
[ Info<span class="pl-k">:</span> <span class="pl-c1">3</span>
Main<span class="pl-k">.</span>WorldAgeProblemSolvedHere!</pre></div>
<h2 dir="auto"><a id="user-content-support-closures-in-generated-functions" class="anchor" aria-hidden="true" href="#support-closures-in-generated-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Support Closures in Generated Functions</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GeneralizedGenerated

@gg function f(x)
    quote
        a -&gt; x + a
    end
end

f(1)(2) # =&gt; 3

@gg function h(x, c)
    quote
        d = x + 10
        function g(x, y=c)
            x + y + d
        end
    end
end

h(1, 2)(1) # =&gt; 14"><pre><span class="pl-k">using</span> GeneralizedGenerated

<span class="pl-c1">@gg</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
    <span class="pl-k">quote</span>
        a <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> a
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">f</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> =&gt; 3</span>

<span class="pl-c1">@gg</span> <span class="pl-k">function</span> <span class="pl-en">h</span>(x, c)
    <span class="pl-k">quote</span>
        d <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">10</span>
        <span class="pl-k">function</span> <span class="pl-en">g</span>(x, y<span class="pl-k">=</span>c)
            x <span class="pl-k">+</span> y <span class="pl-k">+</span> d
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">h</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> =&gt; 14</span></pre></div>
<p dir="auto">Note there're some restrictions to the generalized generated functions yet:</p>
<ul dir="auto">
<li>Multiple dispatch is not allowed, and <code>f(x) = ...</code> is equivalent to <code>f = x -&gt; ...</code>. This will never gets supported for it needs a thorough implementation of multiple dispatch in GG.</li>
<li>Comprehensions for generated functions are not implemented yet. It won't cost a long time for being supported.</li>
</ul>
<p dir="auto">The evaluation module can be specified in this way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; module S
           run(y) = y + 1
       end
Main.S

julia&gt; @gg g(m::Module, y) = @under_global :m :(run(y));
# the global variable `run` is from the local variable `m`
# &lt;=&gt;
# @gg g(m::Module, y) = :($(:m).run(y));

julia&gt; g(S, 1)
2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> S
           <span class="pl-en">run</span>(y) <span class="pl-k">=</span> y <span class="pl-k">+</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>
Main<span class="pl-k">.</span>S

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gg</span> <span class="pl-en">g</span>(m<span class="pl-k">::</span><span class="pl-c1">Module</span>, y) <span class="pl-k">=</span> <span class="pl-c1">@under_global</span> <span class="pl-c1">:m</span> :(<span class="pl-c1">run</span>(y));
<span class="pl-c"><span class="pl-c">#</span> the global variable `run` is from the local variable `m`</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;=&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> @gg g(m::Module, y) = :($(:m).run(y));</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(S, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span></pre></div>
<p dir="auto">Of course you can use structures to imitate modules:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; struct S
           run :: Function
       end
Main.S

julia&gt; @gg function g(m::S, y)
            @under_global :m quote
                run(y)
            end
       end;
# &lt;=&gt;
# @gg function g(m::S, y)
#    :($(:m).run(y))
# end;

julia&gt; g(S(x -&gt; x + 1), 1)
2

julia&gt; const pseudo_module = S(x -&gt; x + 1);
julia&gt; @gg function g(y)
            @under_global pseudo_module quote
                run(y)
            end
       end
# &lt;=&gt;
# @gg function g(y)
#    :($(pseudo_module).run(y))
# end
julia&gt; g(1)
2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> S
           run <span class="pl-k">::</span> <span class="pl-c1">Function</span>
       <span class="pl-k">end</span>
Main<span class="pl-k">.</span>S

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gg</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(m<span class="pl-k">::</span><span class="pl-c1">S</span>, y)
            <span class="pl-c1">@under_global</span> <span class="pl-c1">:m</span> <span class="pl-k">quote</span>
                <span class="pl-c1">run</span>(y)
            <span class="pl-k">end</span>
       <span class="pl-k">end</span>;
<span class="pl-c"><span class="pl-c">#</span> &lt;=&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> @gg function g(m::S, y)</span>
<span class="pl-c"><span class="pl-c">#</span>    :($(:m).run(y))</span>
<span class="pl-c"><span class="pl-c">#</span> end;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">S</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> pseudo_module <span class="pl-k">=</span> <span class="pl-c1">S</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gg</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(y)
            <span class="pl-c1">@under_global</span> pseudo_module <span class="pl-k">quote</span>
                <span class="pl-c1">run</span>(y)
            <span class="pl-k">end</span>
       <span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;=&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> @gg function g(y)</span>
<span class="pl-c"><span class="pl-c">#</span>    :($(pseudo_module).run(y))</span>
<span class="pl-c"><span class="pl-c">#</span> end</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">2</span></pre></div>
<p dir="auto">julia&gt; @generated function g()
Module = Main
mk_expr(Module,  :( (x -&gt; x)(1)))
end</p>
<h2 dir="auto"><a id="user-content-no-evalinvokelatest" class="anchor" aria-hidden="true" href="#no-evalinvokelatest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>No <code>eval</code>/<code>invokelatest</code>!</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# do something almost equivalent to `eval`
# without introducing the world age problem!
using GeneralizedGenerated
f = mk_function(:((x, y) -&gt; x + y))
f(1, 2)
# =&gt; 3

f = mk_function([:x, :y]#= args =#, []#= kwargs =#, :(x + y))
f(1, 2)
# =&gt; 3


module GoodGame
    xxx = 10
end
# Specify global module
f = mk_function(GoodGame, :(function () xxx end))
f()
# =&gt; 10"><pre><span class="pl-c"><span class="pl-c">#</span> do something almost equivalent to `eval`</span>
<span class="pl-c"><span class="pl-c">#</span> without introducing the world age problem!</span>
<span class="pl-k">using</span> GeneralizedGenerated
f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>(:((x, y) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> y))
<span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> =&gt; 3</span>

f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>([<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>]<span class="pl-c"><span class="pl-c">#=</span> args <span class="pl-c">=#</span></span>, []<span class="pl-c"><span class="pl-c">#=</span> kwargs <span class="pl-c">=#</span></span>, :(x <span class="pl-k">+</span> y))
<span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> =&gt; 3</span>


<span class="pl-k">module</span> GoodGame
    xxx <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> Specify global module</span>
f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>(GoodGame, :(<span class="pl-k">function</span> () xxx <span class="pl-k">end</span>))
<span class="pl-c1">f</span>()
<span class="pl-c"><span class="pl-c">#</span> =&gt; 10</span></pre></div>
<p dir="auto">The function created by <code>mk_function</code> always has the signature <code>f(args…; kwargs…) = ...</code> if you need to use the function in a context where it will be passed multiple arguments, use the following pattern</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f = mk_function(:((x, y) -&gt; x + y))

function F(g, pairs)
  map(pairs) do (x,y)
    g(x,y)
  end
end

pairs = zip(1:10,2:11)
F((x,y)-&gt;f(x,y), pairs)
#=
=&gt;
10-element Array{Int64,1}:
  3
  5
  7
  9
 11
 13
 15
 17
 19
 21
=#"><pre>f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>(:((x, y) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> y))

<span class="pl-k">function</span> <span class="pl-en">F</span>(g, pairs)
  <span class="pl-c1">map</span>(pairs) <span class="pl-k">do</span> (x,y)
    <span class="pl-c1">g</span>(x,y)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

pairs <span class="pl-k">=</span> <span class="pl-c1">zip</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">11</span>)
<span class="pl-c1">F</span>((x,y)<span class="pl-k">-&gt;</span><span class="pl-c1">f</span>(x,y), pairs)
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">=&gt;</span>
<span class="pl-c">10-element Array{Int64,1}:</span>
<span class="pl-c">  3</span>
<span class="pl-c">  5</span>
<span class="pl-c">  7</span>
<span class="pl-c">  9</span>
<span class="pl-c"> 11</span>
<span class="pl-c"> 13</span>
<span class="pl-c"> 15</span>
<span class="pl-c"> 17</span>
<span class="pl-c"> 19</span>
<span class="pl-c"> 21</span>
<span class="pl-c"><span class="pl-c">=#</span></span></pre></div>
<h1 dir="auto"><a id="user-content-tips" class="anchor" aria-hidden="true" href="#tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tips</h1>
<p dir="auto">Note, <code>mk_function</code> just accepts a function-like AST, to eval more kinds of
ASTs, use <code>runtime_eval</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = 0
runtime_eval(:(a + 1)) == 1 # true

module GoodGameOnceAgain
    a = 2
end
runtime_eval(GoodGameOnceAgain, :(a + 3)) == 5"><pre>a <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">runtime_eval</span>(:(a <span class="pl-k">+</span> <span class="pl-c1">1</span>)) <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-k">module</span> GoodGameOnceAgain
    a <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span>
<span class="pl-c1">runtime_eval</span>(GoodGameOnceAgain, :(a <span class="pl-k">+</span> <span class="pl-c1">3</span>)) <span class="pl-k">==</span> <span class="pl-c1">5</span></pre></div>
<h1 dir="auto"><a id="user-content-known-bugs" class="anchor" aria-hidden="true" href="#known-bugs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known Bugs</h1>
<ol dir="auto">
<li>
<p dir="auto">Type annotations.</p>
<p dir="auto">Type annotations for cell variables (variables shared to any inner functions of the  current scope) do not work. You might consider changing your generated code from</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a :: t = b
# when 'a' is  cell,
# the closure-converted code 'a.contents :: t = b' fails due to the Julia syntax"><pre>a <span class="pl-k">::</span> <span class="pl-c1">t</span> <span class="pl-k">=</span> b
<span class="pl-c"><span class="pl-c">#</span> when 'a' is  cell,</span>
<span class="pl-c"><span class="pl-c">#</span> the closure-converted code 'a.contents :: t = b' fails due to the Julia syntax</span></pre></div>
<p dir="auto">to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = b :: t"><pre>a <span class="pl-k">=</span> b <span class="pl-k">::</span> <span class="pl-c1">t</span></pre></div>
</li>
<li>
<p dir="auto">Precompilation</p>
<p dir="auto">GG is designed for purely runtime generated functions, and currently has difficulties in precompiling a GG function.</p>
<p dir="auto">When developing a package, please do not define a GG function in the top level!</p>
</li>
</ol>
</article></div>