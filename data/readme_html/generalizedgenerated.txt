<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-generalizedgenerated" class="anchor" aria-hidden="true" href="#generalizedgenerated"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GeneralizedGenerated</h1>
<p><a href="https://thautwarm.github.io/GeneralizedGenerated.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/GeneralizedGenerated.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/thautwarm/GeneralizedGenerated.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/12fb0f76eb0c6040a331f931e167923ac2463263/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f47656e6572616c697a656447656e6572617465642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/GeneralizedGenerated.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/GeneralizedGenerated.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ea66ca7b03562e9701fae36f22ff1b0c2c9488e/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f47656e6572616c697a656447656e6572617465642e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/GeneralizedGenerated.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3596233" rel="nofollow"><img src="https://camo.githubusercontent.com/2a3f778f8c251c43009e611af85b6737f301956f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333539363233332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3596233.svg" style="max-width:100%;"></a></p>
<p>GeneralizedGenerated enables the generalised generated functions. More concretely,
<strong>supports defining closures in generated functions</strong>.</p>
<p>Besides, some utility stuffs relevant to GeneralizedGenerated's implementation are exported,
which <strong>allows you to keep <code>eval</code> and <code>invokelastest</code></strong> away from Julia
metaprogramming.</p>
<h2><a id="user-content-background-world-age-problem" class="anchor" aria-hidden="true" href="#background-world-age-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Background: World Age Problem</h2>
<p>See an explanation <a href="https://discourse.julialang.org/t/world-age-problem-explanation/9714/4?u=thautwarm" rel="nofollow">here</a>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> WorldAgeProblemRaisedHere!
           <span class="pl-en">do_this!</span>(one_ary_fn_ast<span class="pl-k">::</span><span class="pl-c1">Expr</span>, arg) <span class="pl-k">=</span> <span class="pl-k">begin</span>
               <span class="pl-c1">eval</span>(one_ary_fn_ast)(arg)
           <span class="pl-k">end</span>
           res <span class="pl-k">=</span> <span class="pl-c1">do_this!</span>(:(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
           <span class="pl-c1">@info</span> res
       <span class="pl-k">end</span>
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching (<span class="pl-k">::</span><span class="pl-c1">getfield</span>(Main<span class="pl-k">.</span>WorldAgeProblemRaisedHere!, <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>##1#2<span class="pl-pds">"</span></span>)))(<span class="pl-k">::</span><span class="pl-c1">Int64</span>)
The applicable method may be too new<span class="pl-k">:</span> running <span class="pl-k">in</span> world age <span class="pl-c1">26095</span>, <span class="pl-k">while</span> current world is <span class="pl-c1">26096.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> WorldAgeProblemSolvedHere!
           <span class="pl-k">using</span> GeneralizedGenerated
           <span class="pl-en">do_this!</span>(one_ary_fn_ast<span class="pl-k">::</span><span class="pl-c1">Expr</span>, arg) <span class="pl-k">=</span> <span class="pl-k">begin</span>
               <span class="pl-c1">runtime_eval</span>(one_ary_fn_ast)(arg)
           <span class="pl-k">end</span>
           res <span class="pl-k">=</span> <span class="pl-c1">do_this!</span>(:(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>), <span class="pl-c1">2</span>)
           <span class="pl-c1">@info</span> res
       <span class="pl-k">end</span>
[ Info<span class="pl-k">:</span> <span class="pl-c1">3</span>
Main<span class="pl-k">.</span>WorldAgeProblemSolvedHere!</pre></div>
<h2><a id="user-content-support-closures-in-generated-functions" class="anchor" aria-hidden="true" href="#support-closures-in-generated-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Support Closures in Generated Functions</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GeneralizedGenerated

<span class="pl-c1">@gg</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
    <span class="pl-k">quote</span>
        a <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> a
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">f</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> =&gt; 3</span>

<span class="pl-c1">@gg</span> <span class="pl-k">function</span> <span class="pl-en">h</span>(x, c)
    <span class="pl-k">quote</span>
        d <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">10</span>
        <span class="pl-k">function</span> <span class="pl-en">g</span>(x, y<span class="pl-k">=</span>c)
            x <span class="pl-k">+</span> y <span class="pl-k">+</span> d
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">h</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> =&gt; 14</span></pre></div>
<p>Note there're some restrictions to the generalized generated functions yet:</p>
<ul>
<li>Multiple dispatch is not allowed, and <code>f(x) = ...</code> is equivalent to <code>f = x -&gt; ...</code>. This will never gets supported for it needs a thorough implementation of multuple dispatch in GG.</li>
<li>Comprehensions for generated functions are not implemented yet. It won't cost a long time for being supported.</li>
</ul>
<p>The evaluation module can be specified in this way:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">module</span> S
           <span class="pl-en">run</span>(y) <span class="pl-k">=</span> y <span class="pl-k">+</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>
Main<span class="pl-k">.</span>S

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gg</span> m <span class="pl-k">function</span> <span class="pl-en">g</span>(m<span class="pl-k">::</span><span class="pl-c1">Module</span>, y) :(<span class="pl-c1">run</span>(y)) <span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> the global variable `run` is from the module `m`</span>
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(S, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span></pre></div>
<p>Of course you can use structures to imitate modules:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> S
           run <span class="pl-k">::</span> <span class="pl-c1">Function</span>
       <span class="pl-k">end</span>
Main<span class="pl-k">.</span>S

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gg</span> m <span class="pl-k">function</span> <span class="pl-en">g</span>(m<span class="pl-k">::</span><span class="pl-c1">S</span>, y) :(<span class="pl-c1">run</span>(y)) <span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> the global variable `run` is from the datum `m`</span>
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">S</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)
<span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-no-evalinvokelatest" class="anchor" aria-hidden="true" href="#no-evalinvokelatest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>No <code>eval</code>/<code>invokelatest</code>!</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> do something almost equivalent to `eval`</span>
<span class="pl-c"><span class="pl-c">#</span> without introducing the world age problem!</span>
<span class="pl-k">using</span> GeneralizedGenerated
f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>(:((x, y) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> y))
<span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> =&gt; 3</span>

f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>([<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>]<span class="pl-c"><span class="pl-c">#=</span> args <span class="pl-c">=#</span></span>, []<span class="pl-c"><span class="pl-c">#=</span> kwargs <span class="pl-c">=#</span></span>, :(x <span class="pl-k">+</span> y))
<span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> =&gt; 3</span>


<span class="pl-k">module</span> GoodGame
    xxx <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> Specify global module</span>
f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>(GoodGame, :(<span class="pl-k">function</span> () xxx <span class="pl-k">end</span>))
<span class="pl-c1">f</span>()
<span class="pl-c"><span class="pl-c">#</span> =&gt; 10</span></pre></div>
<p>The function created by <code>mk_function</code> always has the signature <code>f(args…; kwargs…) = ...</code> if you need to use the function in a context where it will be passed multiple arguments, use the following pattern</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">mk_function</span>(:((x, y) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> y))

<span class="pl-k">function</span> <span class="pl-en">F</span>(g, pairs)
  <span class="pl-c1">map</span>(pairs) <span class="pl-k">do</span> (x,y)
    <span class="pl-c1">g</span>(x,y)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

pairs <span class="pl-k">=</span> <span class="pl-c1">zip</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">11</span>)
<span class="pl-c1">F</span>((x,y)<span class="pl-k">-&gt;</span><span class="pl-c1">f</span>(x,y), pairs)
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">=&gt;</span>
<span class="pl-c">10-element Array{Int64,1}:</span>
<span class="pl-c">  3</span>
<span class="pl-c">  5</span>
<span class="pl-c">  7</span>
<span class="pl-c">  9</span>
<span class="pl-c"> 11</span>
<span class="pl-c"> 13</span>
<span class="pl-c"> 15</span>
<span class="pl-c"> 17</span>
<span class="pl-c"> 19</span>
<span class="pl-c"> 21</span>
<span class="pl-c"><span class="pl-c">=#</span></span></pre></div>
<h1><a id="user-content-tips" class="anchor" aria-hidden="true" href="#tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tips</h1>
<p>Note, <code>mk_function</code> just accepts a function-like AST, to eval more kinds of
ASTs, use <code>runtime_eval</code>:</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">runtime_eval</span>(:(a <span class="pl-k">+</span> <span class="pl-c1">1</span>)) <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-k">module</span> GoodGameOnceAgain
    a <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span>
<span class="pl-c1">runtime_eval</span>(GoodGameOnceAgain, :(a <span class="pl-k">+</span> <span class="pl-c1">3</span>)) <span class="pl-k">==</span> <span class="pl-c1">5</span></pre></div>
</article></div>