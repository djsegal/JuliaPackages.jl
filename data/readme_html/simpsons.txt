<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-simpsonsjl" class="anchor" aria-hidden="true" href="#simpsonsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simpsons.jl</h2>
<p dir="auto"><a href="https://github.com/wherrera10/Simpsons.jl/actions/workflows/CI.yml"><img src="https://github.com/wherrera10/Simpsons.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Julia module to check data for a Simpson's statistical paradox
<br><br></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/wherrera10/Simpsons.jl/blob/main/docs/src/simpsons_example_plot.svg"><img src="https://github.com/wherrera10/Simpsons.jl/raw/main/docs/src/simpsons_example_plot.svg" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Simpsons

has_simpsons_paradox(df, cause, effect, factor; continuous_threshold = 5, cmax = 5, verbose = true)"><pre class="notranslate"><code>using Simpsons

has_simpsons_paradox(df, cause, effect, factor; continuous_threshold = 5, cmax = 5, verbose = true)
</code></pre></div>
<p dir="auto">Returns true if the data in DataFrame <code>df</code> aggregated by <code>factor</code> exhibits
Simpson's paradox. Note that the <code>cause</code> and <code>effect</code> columns will be converted
to Int columns if they are not already numeric in type. A continuous data
<code>factor</code> column (one with <code>continuous_threshold</code> or more discrete levels) will
be grouped into at most <code>cmax</code> clusters so as to avoid too many clusters. Prints
the regression slope directions for overall data and groups if <code>verbose</code> is true.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="simpsons_analysis(df, cause_column, effect_column; verbose = true, show_plots = true)"><pre class="notranslate"><code>simpsons_analysis(df, cause_column, effect_column; verbose = true, show_plots = true)
</code></pre></div>
<p dir="auto">Analyze the DataFrame <code>df</code> assuming a cause is in <code>cause_column</code> and an effect in
<code>effect_column</code> of the dataframe. Output data including any Simpson's paradox type
first degree slope reversals in subgroups found. Plots shown if <code>show_plots</code> is true (default).
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="make_paradox(nsubgroups = 3 , N = 1024)"><pre class="notranslate"><code>make_paradox(nsubgroups = 3 , N = 1024)
</code></pre></div>
<p dir="auto">Return a dataframe containing <code>N</code> rows of random data in 3 columns <code>:x</code> (cause),
<code>:y</code> (effect), and <code>:z</code> (cofactor) which displays the Simpson's paradox.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="plot_clusters(df, cause, effect)"><pre class="notranslate"><code>plot_clusters(df, cause, effect)
</code></pre></div>
<p dir="auto">Plot, with subplots, clustering of the dataframe <code>df</code> using <code>cause</code> and <code>effect</code> plotted and
color coded by clusterings. Use kmeans clustering analysis on all fields of dataframe.
Use 2 to 5 as cluster numbers.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="plot_kmeans_by_factor(df, cause_column, effect_column, factor_column)"><pre class="notranslate"><code>plot_kmeans_by_factor(df, cause_column, effect_column, factor_column)
</code></pre></div>
<p dir="auto">Plot clustering of the dataframe using cause plotted as X, effect as Y, with the <code>factor_column</code>
used for kmeans clustering into between 2 and 5 clusters on the plot.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="find_clustering_elbow(dataarray::AbstractMatrix{&lt;:Real}, cmin = 1, cmax = 5; fclust = kmeans, kwargs...)"><pre class="notranslate"><code>find_clustering_elbow(dataarray::AbstractMatrix{&lt;:Real}, cmin = 1, cmax = 5; fclust = kmeans, kwargs...)
</code></pre></div>
<p dir="auto">Find the "elbow" of the totalcost versus cluster number curve, where
cmin &lt;= elbow &lt;= cmax. Note that in pathological cases where the actual
minimum of the totalcosts occurs at a cluster count less than that of the
curve "elbow", the function will return either cmin or the actual cluster
count at which the totalcost is at minimum, whichever is larger.
<br>
Returns a tuple: the cluster count and the ClusteringResult at the "elbow" optimum.
<br><br><br></p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Simpsons

# Create a dataframe with cause :x, effect :y, and cofactor :z columns
dfp = make_paradox()

# Test for a Simpson's paradox, where the regression direction of :x with :y 
#    reverses if the data is split by factor :z.
has_simpsons_paradox(dfp, :x, :y, :z)  # true with this data

# Analyze with plots made of data clustering. 
# To see the plots, run in REPL to prevent premature display closure. 
simpsons_analysis(dfp, :x, :y)"><pre class="notranslate"><code>using Simpsons

# Create a dataframe with cause :x, effect :y, and cofactor :z columns
dfp = make_paradox()

# Test for a Simpson's paradox, where the regression direction of :x with :y 
#    reverses if the data is split by factor :z.
has_simpsons_paradox(dfp, :x, :y, :z)  # true with this data

# Analyze with plots made of data clustering. 
# To see the plots, run in REPL to prevent premature display closure. 
simpsons_analysis(dfp, :x, :y)
</code></pre></div>
<p dir="auto"><br><br></p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto">Install the package using the package manager (Press ] to enter pkg&gt; mode):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(v1) pkg&gt; add Simpsons"><pre class="notranslate"><code>(v1) pkg&gt; add Simpsons
</code></pre></div>
</article></div>