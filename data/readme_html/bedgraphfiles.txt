<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-bedgraphfilesjl" class="anchor" aria-hidden="true" href="#bedgraphfilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BedgraphFiles.jl</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/CiaranOMara/BedgraphFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aab9bd22ef61008a84d87b0a65cf8fa00eec4d60/68747470733a2f2f7472617669732d63692e636f6d2f43696172616e4f4d6172612f426564677261706846696c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/CiaranOMara/BedgraphFiles.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/CiaranOMara/Bedgraphfiles-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/7d0bf86c1e69d451c7b54a5455e3a8aad419b04c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6a6e79326570347533636d6c7938706a2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/jny2ep4u3cmly8pj/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/CiaranOMara/BedgraphFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/69e10fd5464729732e77bbb68c24c24f7f31bb8e/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f43696172616e4f4d6172612f426564677261706846696c65732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/CiaranOMara/BedgraphFiles.jl.svg" style="max-width:100%;"></a>
<a href="http://codecov.io/github/CiaranOMara/BedgraphFiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c6a2fd11fde404365bc79d5fc669c815b52f1833/687474703a2f2f636f6465636f762e696f2f6769746875622f43696172616e4f4d6172612f426564677261706846696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/CiaranOMara/BedgraphFiles.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<blockquote>
<p>This project follows the <a href="http://semver.org" rel="nofollow">semver</a> pro forma and uses the <a href="http://nvie.com/git-model" title="original
blog post" rel="nofollow">git-flow branching model</a>.</p>
</blockquote>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>This package provides load and save support for <a href="https://github.com/CiaranOMara/Bedgraph.jl">Bedgraph</a>
under the <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a> package, and also implements the <a href="https://github.com/davidanthoff/IterableTables.jl">IterableTables</a> interface for easy conversion between tabular data structures.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You can install BedgraphFiles from the <a href="https://docs.julialang.org/en/v1/manual/getting-started/" rel="nofollow">Julia REPL</a>.
Press <code>]</code> to enter <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/" rel="nofollow">pkg mode</a>, then enter the following:</p>
<div class="highlight highlight-source-julia"><pre>add BedgraphFiles</pre></div>
<p>If you are interested in the cutting edge of the development, please check out the <a href="https://github.com/CiaranOMara/BedgraphFiles.jl/tree/develop">develop branch</a> to try new features before release.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-loading-bedgraph-files" class="anchor" aria-hidden="true" href="#loading-bedgraph-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Loading bedGraph files</h3>
<p>To load a bedGraph file into a <code>Vector{Bedgraph.Record}</code>, use the following Julia code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, Bedgraph

records <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Bedgraph.Record}</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>))
records <span class="pl-k">=</span> <span class="pl-c1">collect</span>(Bedgraph<span class="pl-k">.</span>Record, <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>))</pre></div>
<h3><a id="user-content-saving-bedgraph-files" class="anchor" aria-hidden="true" href="#saving-bedgraph-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saving bedGraph files</h3>
<blockquote>
<p><strong>Note:</strong> saving on top of an existing file will overwrite metadata/header information with a minimal working header.</p>
</blockquote>
<p>The following example saves a <code>Vector{Bedgraph.Record}</code> to a bedGraph file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, Bedgraph

records <span class="pl-k">=</span> [Bedgraph<span class="pl-k">.</span><span class="pl-c1">Record</span>(<span class="pl-s"><span class="pl-pds">"</span>chr<span class="pl-pds">"</span></span>, i, i <span class="pl-k">+</span> <span class="pl-c1">99</span>, <span class="pl-c1">rand</span>()) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">1000</span>]

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.bedgraph<span class="pl-pds">"</span></span>, records)</pre></div>
<h3><a id="user-content-iterabletables" class="anchor" aria-hidden="true" href="#iterabletables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IterableTables</h3>
<p>The execution of <code>load</code> returns a <code>struct</code> that adheres to the <a href="https://github.com/davidanthoff/IterableTables.jl">IterableTables</a> interface, and can be passed to any function that also implements the interface, i.e. all the sinks in <a href="https://github.com/davidanthoff/IterableTables.jl">IterableTable.jl</a>.</p>
<p>The following code shows an example of loading a bedGraph file into a <a href="https://github.com/JuliaData/DataFrames.jl">DataFrame</a>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>))</pre></div>
<p>Here are some more examples of materialising a bedGraph file into other data structures:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, DataTables, IndexedTables, Gadfly

<span class="pl-c"><span class="pl-c">#</span> Load into a DataTable</span>
dt <span class="pl-k">=</span> <span class="pl-c1">DataTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into an IndexedTable</span>
it <span class="pl-k">=</span> <span class="pl-c1">IndexedTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Plot directly with Gadfly</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>), xmin<span class="pl-k">=</span><span class="pl-c1">:leftposition</span>, xmax<span class="pl-k">=</span><span class="pl-c1">:rightposition</span>, y<span class="pl-k">=</span><span class="pl-c1">:value</span>, Geom<span class="pl-k">.</span>bar)</pre></div>
<p>The following code saves any compatible source to a bedGraph file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles

it <span class="pl-k">=</span> <span class="pl-c1">getiterator</span>(data)

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.bedgraph<span class="pl-pds">"</span></span>, it)</pre></div>
<h3><a id="user-content-using-the-pipe-syntax" class="anchor" aria-hidden="true" href="#using-the-pipe-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the pipe syntax</h3>
<p>Both <code>load</code> and <code>save</code> also support the pipe syntax. For example, to load a bedGraph file into a <code>DataFrame</code>, one can use the following code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, DataFrame

df <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<p>To save an iterable table, one can use the following form:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, DataFrame

df <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> Aquire a DataFrame somehow.</span>

df <span class="pl-k">|&gt;</span> <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.bedgraph<span class="pl-pds">"</span></span>)</pre></div>
<p>The <code>save</code> method returns the data provided or <code>Vector{Bedgraph.Record}</code>. This is useful when periodically saving your work during a sequence of operations.</p>
<div class="highlight highlight-source-julia"><pre>records <span class="pl-k">=</span> some sequence of operations <span class="pl-k">|&gt;</span> <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.bedgraph<span class="pl-pds">"</span></span>)</pre></div>
<p>The pipe syntax is especially useful when combining it with <a href="https://github.com/davidanthoff/Query.jl">Query.jl</a> queries. For example, one can easily load a bedGraph file, pipe its data into a query, and then store the query result by piping it to the <code>save</code> function.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FileIO, BedgraphFiles, Query
<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bedgraph<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">@filter</span>(_<span class="pl-k">.</span>chrom <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>chr19<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>data-chr19.bedgraph<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgements</h2>
<p>This package is largely -- if not completely -- inspired by the work of <a href="https://github.com/davidanthoff">David Anthoff</a>. Other influences are from the <a href="https://github.com/BioJulia">BioJulia</a> community.</p>
</article></div>