<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-countertools" class="anchor" aria-hidden="true" href="#countertools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CounterTools</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://hildebrandmw.github.io/CounterTools.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/github/hildebrandmw/CounterTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c051e3f07a56ea205cc514e53e0c592d58ae778675e5b81b7e6a55056d5dc60e/68747470733a2f2f7472617669732d63692e636f6d2f68696c64656272616e646d772f436f756e746572546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/hildebrandmw/CounterTools.jl.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">A Julia package for configuring and reading Intel x86 performance counters with a Linux-based operating system.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This is not a registered Julia package.
To install, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; pkg&quot;add https://github.com/hildebrandmw/CounterTools.jl&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/hildebrandmw/CounterTools.jl<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Lets compute the number of FLOPS of Julia's matrix multiply BLAS function!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CounterTools"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CounterTools</pre></div>
<p dir="auto">We need to build up a tuple of events to monitor on the performance counters.</p>
<p dir="auto">These events are selected using an 8-bit event code and an 8-bit umask
See <a href="https://download.01.org/perfmon/" rel="nofollow">https://download.01.org/perfmon/</a> for event codes.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; events = (
    # FP_ARITH_INST_RETIRED.SCALAR_DOUBLE
    CounterTools.CoreSelectRegister(event = 0xC7, umask = 0x01),
    # FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE
    CounterTools.CoreSelectRegister(event = 0xC7, umask = 0x04),
    # FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE
    CounterTools.CoreSelectRegister(event = 0xC7, umask = 0x10),
    # FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE
    CounterTools.CoreSelectRegister(event = 0xC7, umask = 0x40),
);"><pre>julia<span class="pl-k">&gt;</span> events <span class="pl-k">=</span> (
    <span class="pl-c"><span class="pl-c">#</span> FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</span>
    CounterTools<span class="pl-k">.</span><span class="pl-c1">CoreSelectRegister</span>(event <span class="pl-k">=</span> <span class="pl-c1">0xC7</span>, umask <span class="pl-k">=</span> <span class="pl-c1">0x01</span>),
    <span class="pl-c"><span class="pl-c">#</span> FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</span>
    CounterTools<span class="pl-k">.</span><span class="pl-c1">CoreSelectRegister</span>(event <span class="pl-k">=</span> <span class="pl-c1">0xC7</span>, umask <span class="pl-k">=</span> <span class="pl-c1">0x04</span>),
    <span class="pl-c"><span class="pl-c">#</span> FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</span>
    CounterTools<span class="pl-k">.</span><span class="pl-c1">CoreSelectRegister</span>(event <span class="pl-k">=</span> <span class="pl-c1">0xC7</span>, umask <span class="pl-k">=</span> <span class="pl-c1">0x10</span>),
    <span class="pl-c"><span class="pl-c">#</span> FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</span>
    CounterTools<span class="pl-k">.</span><span class="pl-c1">CoreSelectRegister</span>(event <span class="pl-k">=</span> <span class="pl-c1">0xC7</span>, umask <span class="pl-k">=</span> <span class="pl-c1">0x40</span>),
);</pre></div>
<p dir="auto">With this list of events, we can construct a <code>CounterTools.CoreMonitor</code>, which programs the counters for the CPU cores.
The <code>CounterTools.CoreMonitor</code> takes two arguments: the list of events previously created, and a list of CPUs to monitor.
Here, we just monitor all of the CPUs on the system.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ncpus = parse(Int, read(`nproc`, String));

julia&gt; monitor = CounterTools.CoreMonitor(events, 1:ncpus);"><pre>julia<span class="pl-k">&gt;</span> ncpus <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int, <span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">`</span>nproc<span class="pl-pds">`</span></span>, String));

julia<span class="pl-k">&gt;</span> monitor <span class="pl-k">=</span> CounterTools<span class="pl-k">.</span><span class="pl-c1">CoreMonitor</span>(events, <span class="pl-c1">1</span><span class="pl-k">:</span>ncpus);</pre></div>
<p dir="auto">Calling <code>read</code> on <code>monitor</code> will read all programmed events from all CPUs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; read(monitor)
Cpu Set Record with 96 entries:
   Cpu Record with 4 entries:
      CounterTools.CounterValue

Cpu Set:
   Cpu: (CV(0), CV(0), CV(0), CV(65535))
   Cpu: (CV(1537), CV(0), CV(0), CV(0))
   Cpu: (CV(1), CV(0), CV(0), CV(0))
   Cpu: (CV(708), CV(0), CV(0), CV(0))
    ..."><pre class="notranslate"><code>julia&gt; read(monitor)
Cpu Set Record with 96 entries:
   Cpu Record with 4 entries:
      CounterTools.CounterValue

Cpu Set:
   Cpu: (CV(0), CV(0), CV(0), CV(65535))
   Cpu: (CV(1537), CV(0), CV(0), CV(0))
   Cpu: (CV(1), CV(0), CV(0), CV(0))
   Cpu: (CV(708), CV(0), CV(0), CV(0))
    ...
</code></pre></div>
<p dir="auto">This represents the results from each event from each CPU.
Now, lets use this to measure the number of FLOPS Julia's BLAS library gets.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function getflops(monitor, f, args...)
            # Read counter state before and after program execution
            pre = read(monitor)
            runtime = @elapsed f(args...)
            post = read(monitor)

            # Get the difference in counter values and aggregate across all cores
            aggregate = CounterTools.aggregate(post - pre)

            # Number of FLOPS depends on the instruction used.
            num_flops = aggregate[1] + 2 * aggregate[2] + 4 * aggregate[3] + 8 * aggregate[4]
            return num_flops / runtime
        end

julia&gt; A = rand(Float64, 10000, 10000);

julia&gt; B = rand(Float64, 10000, 10000);

# Run this once to trigger compilation
julia&gt; getflops(monitor, *, A, B)

# Measure flops
julia&gt; for i in 1:10
           println(getflops(monitor, *, A, B))
       end
1.7153487282457816e11
2.007237750137387e11
2.3070828931343286e11
2.670292793307479e11
2.4751763301444284e11
2.7341301460956998e11
3.085682663983478e11
2.8075861009707574e11
2.278768136919852e11
2.7046256290000647e11"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">getflops</span>(monitor, f, args<span class="pl-k">...</span>)
            <span class="pl-c"><span class="pl-c">#</span> Read counter state before and after program execution</span>
            pre <span class="pl-k">=</span> <span class="pl-c1">read</span>(monitor)
            runtime <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)
            post <span class="pl-k">=</span> <span class="pl-c1">read</span>(monitor)

            <span class="pl-c"><span class="pl-c">#</span> Get the difference in counter values and aggregate across all cores</span>
            aggregate <span class="pl-k">=</span> CounterTools<span class="pl-k">.</span><span class="pl-c1">aggregate</span>(post <span class="pl-k">-</span> pre)

            <span class="pl-c"><span class="pl-c">#</span> Number of FLOPS depends on the instruction used.</span>
            num_flops <span class="pl-k">=</span> aggregate[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> aggregate[<span class="pl-c1">2</span>] <span class="pl-k">+</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> aggregate[<span class="pl-c1">3</span>] <span class="pl-k">+</span> <span class="pl-c1">8</span> <span class="pl-k">*</span> aggregate[<span class="pl-c1">4</span>]
            <span class="pl-k">return</span> num_flops <span class="pl-k">/</span> runtime
        <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64, <span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64, <span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>);

<span class="pl-c"><span class="pl-c">#</span> Run this once to trigger compilation</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">getflops</span>(monitor, <span class="pl-k">*</span>, A, B)

<span class="pl-c"><span class="pl-c">#</span> Measure flops</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           <span class="pl-c1">println</span>(<span class="pl-c1">getflops</span>(monitor, <span class="pl-k">*</span>, A, B))
       <span class="pl-k">end</span>
<span class="pl-c1">1.7153487282457816e11</span>
<span class="pl-c1">2.007237750137387e11</span>
<span class="pl-c1">2.3070828931343286e11</span>
<span class="pl-c1">2.670292793307479e11</span>
<span class="pl-c1">2.4751763301444284e11</span>
<span class="pl-c1">2.7341301460956998e11</span>
<span class="pl-c1">3.085682663983478e11</span>
<span class="pl-c1">2.8075861009707574e11</span>
<span class="pl-c1">2.278768136919852e11</span>
<span class="pl-c1">2.7046256290000647e11</span></pre></div>
<p dir="auto">Remember, this is only running with the default 8 threads, is not setup with NUMA etc.
However, this still corresponds to about 28 GFLOPS/CPU.</p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<p dir="auto">Linux requires some setup to make performance counters available.</p>
<h3 dir="auto"><a id="user-content-make-cpu-msr-model-specific-registers-available" class="anchor" aria-hidden="true" href="#make-cpu-msr-model-specific-registers-available"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Make CPU MSR (Model Specific Registers) available</h3>
<p dir="auto">CounterTools uses CPU MSRs in <code>/dev/cpu/</code> to configure the performance counters.
By default, these are not available for reading or writing.
These can be made available using</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo modprobe msr"><pre>sudo modprobe msr</pre></div>
<h3 dir="auto"><a id="user-content-allowing-the-rdpmc-instruction" class="anchor" aria-hidden="true" href="#allowing-the-rdpmc-instruction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Allowing the <code>rdpmc</code> instruction.</h3>
<p dir="auto">To allow the <code>rdpmc</code> instruction that is responsible for reading the performance counters, it may be necessary to run</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="echo 2 &gt; /sys/devices/cpu/rdpmc"><pre><span class="pl-c1">echo</span> 2 <span class="pl-k">&gt;</span> /sys/devices/cpu/rdpmc</pre></div>
<p dir="auto">This will enable counters to be read in user mode.</p>
<p dir="auto">Note that this command will have to be run under <code>sudo</code>.
One way to do that is:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sudo sh -c &quot;echo 2 &gt; /sys/devices/cpu/rdpmc&quot;"><pre>sudo sh -c <span class="pl-s"><span class="pl-pds">"</span>echo 2 &gt; /sys/devices/cpu/rdpmc<span class="pl-pds">"</span></span></pre></div>
</article></div>