<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-gribjl" class="anchor" aria-hidden="true" href="#gribjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GRIB.jl</h1>
<p>The Gridded Binary (GRIB) format is a format commonly used in meteorology. A GRIB file is a
collection of independent records that store 2D data. This package is an interface to the ECMWF
<a href="https://confluence.ecmwf.int/display/ECC/ecCodes+Home" rel="nofollow">ecCodes</a> library. In ecCodes, each
GRIB file is composed of a series of messages, and a message is an object with keys and values.
Each message has many keys. Some are actually stored in the data, while others are computed
by ecCodes on access. Some commonly used keys include:</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>long name of the quantity</td>
</tr>
<tr>
<td>shortName</td>
<td>standard abbreviation of name</td>
</tr>
<tr>
<td>latitudes</td>
<td>array of latitudes</td>
</tr>
<tr>
<td>longitudes</td>
<td>array of longitudes</td>
</tr>
<tr>
<td>values</td>
<td>array of data values</td>
</tr>
<tr>
<td>units</td>
<td>units of quantity</td>
</tr>
<tr>
<td>date</td>
<td>date in YYYYmmdd format</td>
</tr>
<tr>
<td>typeOfLevel</td>
<td>kind of vertical level</td>
</tr>
<tr>
<td>level</td>
<td>value of vertical level</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>I don't know the procedure for registering a package; if you know how please feel free to help!
For now you can add it with
<code>add https://github.com/weech/GRIB.jl</code> from the Pkg prompt. It uses the conda package manager
for dependencies, so installation will be slow if the dependencies are not already installed.</p>
<p>This package only works on Linux and MacOS. Any help getting it to work with other operating systems
would be much appreciated.</p>
<h2><a id="user-content-gribfile" class="anchor" aria-hidden="true" href="#gribfile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GribFile</h2>
<p>A <code>GribFile</code> functions similarly to a Julia <code>IOStream</code>, except that instead of working as a stream
of bytes, <code>GribFile</code> works as a stream of messages. Basic access looks like</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">GribFile</span>(filename) <span class="pl-k">do</span> f
    <span class="pl-c"><span class="pl-c">#</span> Do things with f</span>
<span class="pl-k">end</span></pre></div>
<p>Using the <code>do</code>-block construct guarantees that the resources are released after exiting the
<code>do</code>-block. The style</p>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">GribFile</span>(filename)
<span class="pl-c"><span class="pl-c">#</span> Do things with f</span>
<span class="pl-c1">destroy</span>(f)</pre></div>
<p>is also valid, but be sure to call <code>destroy</code> when finished with the file.</p>
<p>A <code>GribFile</code> is an iterable, and it defines <code>seek</code>, <code>skip</code>, and <code>seekfirst</code> to aid in navigating
the file.</p>
<h2><a id="user-content-message" class="anchor" aria-hidden="true" href="#message"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Message</h2>
<p>The <code>Message</code> type represents a single GRIB record. It works like a dictionary where the indices
are of type <code>String</code>. Creating a <code>Message</code> looks like</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">GribFile</span>(filename) <span class="pl-k">do</span> f
    <span class="pl-c"><span class="pl-c">#</span> Get the first message from f</span>
    msg <span class="pl-k">=</span> <span class="pl-c1">Message</span>(f)

    <span class="pl-c"><span class="pl-c">#</span> Get the second and third messages from f</span>
    msgs <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, <span class="pl-c1">2</span>)

    <span class="pl-c"><span class="pl-c">#</span> Work on the rest of the messages in f</span>
    <span class="pl-k">for</span> message <span class="pl-k">in</span> f
        <span class="pl-c"><span class="pl-c">#</span> Do things with message</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>An important thing to note is that creating a <code>Message</code> moves the position of the <code>GribFile</code>.
This means that in order to access a message that has already passed, the <code>seek</code> function
must be used to change the position of the <code>GribFile</code>.</p>
<p>The <code>Message</code> type behaves like a dictionary in that data is accessed like <code>value = msg[key]</code>.
The most important keys are listed above, and the other keys are discoverable using the <code>keys</code>
function. The <code>keys</code> function returns an iterable, but this iterable does not define <code>length</code>,
so the best way to get a list of all keys in the message is to do</p>
<div class="highlight highlight-source-julia"><pre>keylist <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{String}</span>()
<span class="pl-k">for</span> key <span class="pl-k">in</span> <span class="pl-c1">keys</span>(message)
    <span class="pl-c1">push!</span>(keylist, key)
<span class="pl-k">end</span></pre></div>
<p>Another important function for the <code>Message</code> type is <code>data</code>. This function returns a tuple of
longitudes, latitudes, and values for each point in the message. The following is true</p>
<div class="highlight highlight-source-julia"><pre>lons, lats, values <span class="pl-k">=</span> <span class="pl-c1">data</span>(message)
valuesfromkey <span class="pl-k">=</span> data[<span class="pl-s"><span class="pl-pds">"</span>values<span class="pl-pds">"</span></span>]
valuesfromkey <span class="pl-k">==</span> values</pre></div>
<p>The <code>eachpoint</code> function returns an iterable that iterates through the points returning a
longitude, latitude, and value for each point.</p>
<p>GRIB messages often have missing values. The value that represents missing can be discovered
using the <code>missingvalue</code> function. There is also a convenience function <code>maskedvalues</code> that
returns the values with the missing values replaced with <code>missing</code>.</p>
<p>Calling <code>print</code> or <code>println</code> on a <code>Message</code> returns the hexidecimal representation of the message,
since those functions are meant return a string that can be used to recreate the object. Use
<code>display</code> instead for an informative summary of the <code>Message</code>.</p>
<h2><a id="user-content-index" class="anchor" aria-hidden="true" href="#index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Index</h2>
<p>The <code>Index</code> type is a way to reduce the size of a file so that only messages with specific
key-value pairs are included. A typical use-case looks like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Index</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>shortName<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>typeOfLevel<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> index
    <span class="pl-c1">select!</span>(index, <span class="pl-s"><span class="pl-pds">"</span>shortName<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>)
    <span class="pl-c1">select!</span>(index, <span class="pl-s"><span class="pl-pds">"</span>typeOfLevel<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>isobaricInhPa<span class="pl-pds">"</span></span>)
    <span class="pl-c1">select!</span>(index, <span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>, <span class="pl-c1">500</span>)
    <span class="pl-k">for</span> msg <span class="pl-k">in</span> index
        <span class="pl-c"><span class="pl-c">#</span> Do things with msg</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>This example selects all messages that are temperature at the 500 hPa level. Indexes are
invaluable for reducing the complexity of the file before retreiving data from it. There are
a few important things to note:</p>
<ul>
<li>Only keys passed to the <code>Index</code> when it is created can be <code>select!</code>ed.</li>
<li>All keys passed to <code>Index</code> must be <code>select!</code>ed before accessing any messages.</li>
<li>Like with <code>GribFile</code>, retreiving a message from an <code>Index</code> advances the <code>Index</code>.</li>
<li>Only the latest value <code>select!</code>ed per key is kept in the <code>Index</code>.</li>
<li>Files with multi-field messages cannot be used with <code>Index</code>. This includes most files created
by NCEP.</li>
</ul>
<h2><a id="user-content-other-notes" class="anchor" aria-hidden="true" href="#other-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other notes</h2>
<p>This package has support for multi-field messages on by default. If you are not working with files
with multi-field messages, you may turn off support with a call
to the function <code>nomultisupport</code>.</p>
<h2><a id="user-content-bug-reporting" class="anchor" aria-hidden="true" href="#bug-reporting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bug Reporting</h2>
<p>This package has been tested mainly with well-behaved GRIB files, but some files exist that
push the boundaries of the format. If you encounter any issues, please file an issue. A good issue
has</p>
<ul>
<li>A full stack trace. The error can't be understood without knowing where it comes from.</li>
<li>The file causing the issue, if possible.</li>
<li>A hypothesis of what you think is going wrong.</li>
</ul>
<h2><a id="user-content-future-plans-good-places-to-help-out" class="anchor" aria-hidden="true" href="#future-plans-good-places-to-help-out"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Future plans (good places to help out)</h2>
<ul>
<li>Add support for BUFR files</li>
<li>Add examples</li>
<li>Fix the bug in <code>eachpoint</code> that occasionally causes Julia to segfault (probably something with
the GC).</li>
</ul>
</article></div>