<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><blockquote>
<p dir="auto">This package is a part of Tongyuan's product. This repo is an archived version of it for the
purpose of JuliaCN 2022 talk <a href="https://cn.julialang.org/meetup-website/2022/" rel="nofollow">"Why I still recommend Julia -- composability and generic
programming"</a>.
This package provides a live example on how Julia beats MATLAB's C code by 1000x faster. The case
is special, but the spirit that drives its design are common in Julia.</p>
</blockquote>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="GF3.png"><img src="GF3.png" alt="" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-galoisfieldnumbersjl" class="anchor" aria-hidden="true" href="#galoisfieldnumbersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GaloisFieldNumbers.jl</h1>
<p dir="auto">This package provides a core integer type <code>GF</code>(aka <code>GFNumber</code>) to represent numbers in the
galois field.</p>
<h2 dir="auto"><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction</h2>
<p dir="auto">The main constructor is <code>GF{M}</code>, where <code>M</code> represents the number of bits(capacity). For instance,
numbers in field <code>GF{3}</code> is between <code>GF{3}(0)</code> and <code>GF{3}(2^3 - 1)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; typemin(GF{3}), typemax(GF{3})
(GF3(0), GF3(7))

julia&gt; x = GF{3}(3) # is equivalent to GF3(3)
GF{3}(3)

julia&gt; capacity(x), ppoly(x), eltype(x)
(3, GF3(11), UInt64)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typemin</span>(GF{<span class="pl-c1">3</span>}), <span class="pl-c1">typemax</span>(GF{<span class="pl-c1">3</span>})
(<span class="pl-c1">GF3</span>(<span class="pl-c1">0</span>), <span class="pl-c1">GF3</span>(<span class="pl-c1">7</span>))

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">GF</span><span class="pl-c1">{3}</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> is equivalent to GF3(3)</span>
<span class="pl-c1">GF</span><span class="pl-c1">{3}</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">capacity</span>(x), <span class="pl-c1">ppoly</span>(x), <span class="pl-c1">eltype</span>(x)
(<span class="pl-c1">3</span>, <span class="pl-c1">GF3</span>(<span class="pl-c1">11</span>), UInt64)</pre></div>
<p dir="auto">The full constructor version is <code>GF{M,P,T&lt;:Unsigned}(x)</code>, where <code>M</code> represents the field capacity, <code>P</code> is the chosen prime polynomial for this galois field (default value is the smallest one), and
<code>T</code> is the raw data type. These information can be extracted using <code>capacity</code>, <code>ppoly</code> and <code>eltype</code>, respectively.</p>
<p dir="auto">For convenience, some alias are made for commonly used valid <code>M</code> value -- from <code>GF1</code> to <code>GF16</code>. The
difference between <code>GF3</code> and <code>GF{3}</code> is that <code>GF3</code> is a concrete type with <code>P=11</code> and <code>T=UInt</code>,
while <code>GF{3}</code> is a partially constructed type (neither concrete or abstract). For instance,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = GF3[1, 2, 3] # equivalent to GF{3,11,UInt}[1, 2, 3]
3-element Vector{GF3}:
 1
 2
 3

julia&gt; x = GF{3}[1, 2, 3]
3-element Vector{GFNumber{3}}:
 GF3(1)
 GF3(2)
 GF3(3)"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> GF3[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> equivalent to GF{3,11,UInt}[1, 2, 3]</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{GF3}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> GF{<span class="pl-c1">3</span>}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{GFNumber{<span class="pl-c1">3</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">GF3</span>(<span class="pl-c1">1</span>)
 <span class="pl-c1">GF3</span>(<span class="pl-c1">2</span>)
 <span class="pl-c1">GF3</span>(<span class="pl-c1">3</span>)</pre></div>
</article></div>