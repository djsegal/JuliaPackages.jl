<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-disjointset" class="anchor" aria-hidden="true" href="#disjointset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DisjointSet</h1>
<p dir="auto"><a href="https://ci.appveyor.com/project/byhill/DisjointSet-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2a3bad50d61135b701debf6ef790ce44a10c23b798a6b88fb16d676ecd73bfa8/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f627968696c6c2f4469736a6f696e74536574732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/byhill/DisjointSets.jl?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">An implementation of the Disjoint-set data structure for Julia.
This package is based on JuliaCollections's implementation of the Disjoint-set data structure in
<a href="https://github.com/JuliaCollections/DataStructures.jl">DataStructures.jl</a>.
However, this package uses union-by-size rather than union-by-rank,
which allows one to find the size of any given set in near-constant time.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="s = IntDisjointSet(10)  # creates a forest comprised of 10 singletons
union!(s, 3, 5)          # merges the sets that contain 3 and 5 into one and returns the root of the new set
root_union!(s, x, y)     # merges the sets that have root x and y into one and returns the root of the new set
                         # (assumes x != y)
find_root!(s, 3)         # finds the root element of the subset that contains 3
in_same_set(s, x, y)     # determines whether x and y are in the same set
num_sets(s)              # returns the number of sets in s
set_size(s, x)           # find the size of the set that x is in
elem = push!(s)          # adds a single element in a new set; returns the new element
                         # (this operation is often called MakeSet)"><pre>s <span class="pl-k">=</span> <span class="pl-c1">IntDisjointSet</span>(<span class="pl-c1">10</span>)  <span class="pl-c"><span class="pl-c">#</span> creates a forest comprised of 10 singletons</span>
<span class="pl-c1">union!</span>(s, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>)          <span class="pl-c"><span class="pl-c">#</span> merges the sets that contain 3 and 5 into one and returns the root of the new set</span>
<span class="pl-c1">root_union!</span>(s, x, y)     <span class="pl-c"><span class="pl-c">#</span> merges the sets that have root x and y into one and returns the root of the new set</span>
                         <span class="pl-c"><span class="pl-c">#</span> (assumes x != y)</span>
<span class="pl-c1">find_root!</span>(s, <span class="pl-c1">3</span>)         <span class="pl-c"><span class="pl-c">#</span> finds the root element of the subset that contains 3</span>
<span class="pl-c1">in_same_set</span>(s, x, y)     <span class="pl-c"><span class="pl-c">#</span> determines whether x and y are in the same set</span>
<span class="pl-c1">num_sets</span>(s)              <span class="pl-c"><span class="pl-c">#</span> returns the number of sets in s</span>
<span class="pl-c1">set_size</span>(s, x)           <span class="pl-c"><span class="pl-c">#</span> find the size of the set that x is in</span>
elem <span class="pl-k">=</span> <span class="pl-c1">push!</span>(s)          <span class="pl-c"><span class="pl-c">#</span> adds a single element in a new set; returns the new element</span>
                         <span class="pl-c"><span class="pl-c">#</span> (this operation is often called MakeSet)</span></pre></div>
<p dir="auto">One may also use other element types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="s = DisjointSet{AbstractString}([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;])
union!(s, &quot;a&quot;, &quot;b&quot;)
in_same_set(s, &quot;c&quot;, &quot;d&quot;)
push!(s, &quot;f&quot;)"><pre>s <span class="pl-k">=</span> <span class="pl-c1">DisjointSet</span><span class="pl-c1">{AbstractString}</span>([<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>])
<span class="pl-c1">union!</span>(s, <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>)
<span class="pl-c1">in_same_set</span>(s, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>)
<span class="pl-c1">push!</span>(s, <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">etc...</p>
</article></div>