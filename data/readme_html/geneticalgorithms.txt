<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geneticalgorithmsjl" class="anchor" aria-hidden="true" href="#geneticalgorithmsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeneticAlgorithms.jl</h1>
<p><a href="https://travis-ci.org/WestleyArgentum/GeneticAlgorithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/57846855ababdd5ca4d20159c5c0ca5cbf1203af231faa044a09c1906abd9a0a/68747470733a2f2f7472617669732d63692e6f72672f576573746c6579417267656e74756d2f47656e65746963416c676f726974686d732e6a6c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WestleyArgentum/GeneticAlgorithms.jl.png?branch=master" style="max-width:100%;"></a></p>
<h4><a id="user-content-this-is-a-lightweight-framework-that-simplifies-the-process-of-creating-genetic-algorithms-and-running-them-in-parallel" class="anchor" aria-hidden="true" href="#this-is-a-lightweight-framework-that-simplifies-the-process-of-creating-genetic-algorithms-and-running-them-in-parallel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This is a lightweight framework that simplifies the process of creating genetic algorithms and running them in parallel.</h4>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<h3><a id="user-content-whats-your-problem" class="anchor" aria-hidden="true" href="#whats-your-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What's your problem???</h3>
<p>Let's say you've got a simple equality <code>a + 2b + 3c + 4d + 5e = 42</code> that you'd like come up with a solution for.</p>
<h3><a id="user-content-create-a-module" class="anchor" aria-hidden="true" href="#create-a-module"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a Module</h3>
<p>Start by creating a file and a module for your ga. Your module will be loaded into the framework and things inside it will be used to run your algroithm.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="module equalityga
    # implement the GA interface inside here
end
"><pre><span class="pl-k">module</span> equalityga
    <span class="pl-c"><span class="pl-c">#</span> implement the GA interface inside here</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-define-an-entity" class="anchor" aria-hidden="true" href="#define-an-entity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define an Entity</h3>
<p>Your entity should inherit from the abstract <code>GeneticAlgorithms.Entity</code>. The framework will look for a <code>create_entity</code> function and will use it to create an initial population.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="type EqualityMonster &lt;: Entity
    abcde::Array
    fitness

    EqualityMonster() = new(Array(Int, 5), nothing)
    EqualityMonster(abcde) = new(abcde, nothing)
end

function create_entity(num)
    # for simplicity sake, let's limit the values for abcde to be integers in [-42, 42]
    EqualityMonster(rand(Int, 5) % 43)
end
"><pre>type EqualityMonster <span class="pl-k">&lt;:</span> <span class="pl-c1">Entity</span>
    abcde<span class="pl-k">::</span><span class="pl-c1">Array</span>
    fitness

    <span class="pl-en">EqualityMonster</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">Array</span>(Int, <span class="pl-c1">5</span>), <span class="pl-c1">nothing</span>)
    <span class="pl-en">EqualityMonster</span>(abcde) <span class="pl-k">=</span> <span class="pl-c1">new</span>(abcde, <span class="pl-c1">nothing</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">create_entity</span>(num)
    <span class="pl-c"><span class="pl-c">#</span> for simplicity sake, let's limit the values for abcde to be integers in [-42, 42]</span>
    <span class="pl-c1">EqualityMonster</span>(<span class="pl-c1">rand</span>(Int, <span class="pl-c1">5</span>) <span class="pl-k">%</span> <span class="pl-c1">43</span>)
<span class="pl-k">end</span></pre></div>
<p>Note that <code>EqualityMonster</code> has a field <code>fitness</code>. By default this field will be used by the framework to store the entities calculated fitness, so that you have access to it elsewhere in your GA. If you'd like to change the behavior you can overload <code>fitness!(entity::EqualityMonster, score)</code>.</p>
<h3><a id="user-content-create-a-fitness-function" class="anchor" aria-hidden="true" href="#create-a-fitness-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a Fitness Function</h3>
<p>The framework will expect a <code>fitness</code> function. It should take in a single entity and return a fitness score.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function fitness(ent)
    # we want the expression `a + 2b + 3c + 4d + 5e - 42`
    # to be as close to 0 as possible
    score = ent.abcde[1] +
            2 * ent.abcde[2] +
            3 * ent.abcde[3] +
            4 * ent.abcde[4] +
            5 * ent.abcde[5]

    abs(score - 42)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">fitness</span>(ent)
    <span class="pl-c"><span class="pl-c">#</span> we want the expression `a + 2b + 3c + 4d + 5e - 42`</span>
    <span class="pl-c"><span class="pl-c">#</span> to be as close to 0 as possible</span>
    score <span class="pl-k">=</span> ent<span class="pl-k">.</span>abcde[<span class="pl-c1">1</span>] <span class="pl-k">+</span>
            <span class="pl-c1">2</span> <span class="pl-k">*</span> ent<span class="pl-k">.</span>abcde[<span class="pl-c1">2</span>] <span class="pl-k">+</span>
            <span class="pl-c1">3</span> <span class="pl-k">*</span> ent<span class="pl-k">.</span>abcde[<span class="pl-c1">3</span>] <span class="pl-k">+</span>
            <span class="pl-c1">4</span> <span class="pl-k">*</span> ent<span class="pl-k">.</span>abcde[<span class="pl-c1">4</span>] <span class="pl-k">+</span>
            <span class="pl-c1">5</span> <span class="pl-k">*</span> ent<span class="pl-k">.</span>abcde[<span class="pl-c1">5</span>]

    <span class="pl-c1">abs</span>(score <span class="pl-k">-</span> <span class="pl-c1">42</span>)
<span class="pl-k">end</span></pre></div>
<p>Note that <code>isless(l::Entity, r::Entity)</code> will return <code>l.fitness &lt; r.fitness</code>, but that in this case entities with scores closer to 0 are doing better. So we should define a specialized <code>isless</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function isless(lhs::EqualityMonster, rhs::EqualityMonster)
    abs(lhs.fitness) &gt; abs(rhs.fitness)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">isless</span>(lhs<span class="pl-k">::</span><span class="pl-c1">EqualityMonster</span>, rhs<span class="pl-k">::</span><span class="pl-c1">EqualityMonster</span>)
    <span class="pl-c1">abs</span>(lhs<span class="pl-k">.</span>fitness) <span class="pl-k">&gt;</span> <span class="pl-c1">abs</span>(rhs<span class="pl-k">.</span>fitness)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-group-entities" class="anchor" aria-hidden="true" href="#group-entities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Group Entities</h3>
<p><code>group_entities</code> operates on a population (an array of entities sorted by score) and will be run as a task and expected to emit groups of entities that will be passed into a crossover function. <code>group_entitites</code> also provides a nice way to terminate the GA; if you want to stop, simply produce no groups.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function group_entities(pop)
    if pop[1].fitness == 0
        return
    end

    # simple naive groupings that pair the best entitiy with every other
    for i in 1:length(pop)
        produce([1, i])
    end
end
"><pre><span class="pl-k">function</span> <span class="pl-en">group_entities</span>(pop)
    <span class="pl-k">if</span> pop[<span class="pl-c1">1</span>]<span class="pl-k">.</span>fitness <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-k">return</span>
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> simple naive groupings that pair the best entitiy with every other</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(pop)
        <span class="pl-c1">produce</span>([<span class="pl-c1">1</span>, i])
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-define-crossover" class="anchor" aria-hidden="true" href="#define-crossover"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define Crossover</h3>
<p><code>crossover</code> should take a group of parents and produce a new child entity. In our case we'll just grab properties from random parents.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function crossover(group)
    child = EqualityMonster()

    # grab each element from a random parent
    num_parents = length(group)
    for i in 1:length(group[1].abcde)
        parent = (rand(Uint) % num_parents) + 1
        child.abcde[i] = group[parent].abcde[i]
    end

    child
end
"><pre><span class="pl-k">function</span> <span class="pl-en">crossover</span>(group)
    child <span class="pl-k">=</span> <span class="pl-c1">EqualityMonster</span>()

    <span class="pl-c"><span class="pl-c">#</span> grab each element from a random parent</span>
    num_parents <span class="pl-k">=</span> <span class="pl-c1">length</span>(group)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(group[<span class="pl-c1">1</span>]<span class="pl-k">.</span>abcde)
        parent <span class="pl-k">=</span> (<span class="pl-c1">rand</span>(Uint) <span class="pl-k">%</span> num_parents) <span class="pl-k">+</span> <span class="pl-c1">1</span>
        child<span class="pl-k">.</span>abcde[i] <span class="pl-k">=</span> group[parent]<span class="pl-k">.</span>abcde[i]
    <span class="pl-k">end</span>

    child
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-define-mutation" class="anchor" aria-hidden="true" href="#define-mutation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define Mutation</h3>
<p><code>mutate</code> operates on a single entity and is responsible for deciding whether or not to actually mutate.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function mutate(ent)
    # let's go crazy and mutate 20% of the time
    rand(Float64) &lt; 0.8 &amp;&amp; return

    rand_element = rand(Uint) % 5 + 1
    ent.abcde[rand_element] = rand(Int) % 43
end
"><pre><span class="pl-k">function</span> <span class="pl-en">mutate</span>(ent)
    <span class="pl-c"><span class="pl-c">#</span> let's go crazy and mutate 20% of the time</span>
    <span class="pl-c1">rand</span>(Float64) <span class="pl-k">&lt;</span> <span class="pl-c1">0.8</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span>

    rand_element <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Uint) <span class="pl-k">%</span> <span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
    ent<span class="pl-k">.</span>abcde[rand_element] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int) <span class="pl-k">%</span> <span class="pl-c1">43</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-run-your-ga" class="anchor" aria-hidden="true" href="#run-your-ga"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Run your GA!</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GeneticAlgorithms
require(&quot;GeneticAlgorithms/test/equalityga.jl&quot;)

model = runga(equalityga; initial_pop_size = 16)

population(model)  # the the latest population when the GA exited
"><pre><span class="pl-k">using</span> GeneticAlgorithms
<span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">"</span>GeneticAlgorithms/test/equalityga.jl<span class="pl-pds">"</span></span>)

model <span class="pl-k">=</span> <span class="pl-c1">runga</span>(equalityga; initial_pop_size <span class="pl-k">=</span> <span class="pl-c1">16</span>)

<span class="pl-c1">population</span>(model)  <span class="pl-c"><span class="pl-c">#</span> the the latest population when the GA exited</span></pre></div>
</article></div>