<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-glfwjl---" class="anchor" aria-hidden="true" href="#glfwjl---"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GLFW.jl  <a href="https://travis-ci.org/JuliaGL/GLFW.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7a5e4120c6cab724a536286104148d0403af7a69/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961474c2f474c46572e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/JuliaGL/GLFW.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/jayschwa/glfw-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4e90ad2e34fa0002e053be19a667084ff6c20d7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f71756d677635366d61376467303771672f6272616e63682f6d61737465723f7376673d74727565" alt="AppVeyor Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/qumgv56ma7dg07qg/branch/master?svg=true" style="max-width:100%;"></a></h1>
<p><a href="https://julialang.org" rel="nofollow">Julia</a> interface to <a href="https://www.glfw.org" rel="nofollow">GLFW 3</a>, a multi-platform library for creating windows with <a href="https://wikipedia.org/wiki/OpenGL" rel="nofollow">OpenGL</a> or OpenGL ES contexts and receiving many kinds of input. GLFW has native support for Windows, OS X and many Unix-like systems using the X Window System, such as Linux and FreeBSD.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GLFW

<span class="pl-c"><span class="pl-c">#</span> Create a window and its OpenGL context</span>
window <span class="pl-k">=</span> GLFW<span class="pl-k">.</span><span class="pl-c1">CreateWindow</span>(<span class="pl-c1">640</span>, <span class="pl-c1">480</span>, <span class="pl-s"><span class="pl-pds">"</span>GLFW.jl<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Make the window's context current</span>
GLFW<span class="pl-k">.</span><span class="pl-c1">MakeContextCurrent</span>(window)

<span class="pl-c"><span class="pl-c">#</span> Loop until the user closes the window</span>
<span class="pl-k">while</span> <span class="pl-k">!</span>GLFW<span class="pl-k">.</span><span class="pl-c1">WindowShouldClose</span>(window)

	<span class="pl-c"><span class="pl-c">#</span> Render here</span>

	<span class="pl-c"><span class="pl-c">#</span> Swap front and back buffers</span>
	GLFW<span class="pl-k">.</span><span class="pl-c1">SwapBuffers</span>(window)

	<span class="pl-c"><span class="pl-c">#</span> Poll for and process events</span>
	GLFW<span class="pl-k">.</span><span class="pl-c1">PollEvents</span>()
<span class="pl-k">end</span>

GLFW<span class="pl-k">.</span><span class="pl-c1">DestroyWindow</span>(window)</pre></div>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interface</h2>
<p>Read the <a href="https://www.glfw.org/docs/latest/" rel="nofollow">GLFW documentation</a> for detailed instructions on how to use the library. The Julia interface is almost identical to the underlying C interface, with a few notable differences:</p>
<ul>
<li>Clipboard (<code>glfwGetClipboard</code>, <code>glfwSetClipboard</code>) and time (<code>glfwGetTime</code>, <code>glfwSetTime</code>) functions have been omitted because Julia's standard library already supports similar functionality.</li>
<li><code>glfwInit</code> and <code>glfwTerminate</code> are called automatically using the <code>__init__</code> and <code>atexit</code> functions. While it is okay to still call them explicitly, it is redundant and not required.</li>
</ul>
<h2><a id="user-content-footnotes" class="anchor" aria-hidden="true" href="#footnotes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Footnotes</h2>
<ul>
<li>Special thanks to <a href="https://github.com/afterwise">@afterwise</a> for writing an early implementation of GLFW 3 support.</li>
</ul>
</article></div>