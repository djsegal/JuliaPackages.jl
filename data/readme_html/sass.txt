<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sass" class="anchor" aria-hidden="true" href="#sass"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sass</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/f92308582c303fb4e899bc59dd8e3aff6305da887902492fe8590be27121963a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d677265656e2e737667"><img src="https://camo.githubusercontent.com/f92308582c303fb4e899bc59dd8e3aff6305da887902492fe8590be27121963a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d677265656e2e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-stable-green.svg" style="max-width:100%;"></a>
<a href="https://github.com/piever/Sass.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/piever/Sass.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="http://codecov.io/github/piever/Sass.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/73e37cbdcae0ce137cc41da66f49ac61959f9386f50a02436d5d202f5ccce092/687474703a2f2f636f6465636f762e696f2f6769746875622f7069657665722f536173732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/piever/Sass.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-compile-scss-and-sass-file-to-css-in-julia" class="anchor" aria-hidden="true" href="#compile-scss-and-sass-file-to-css-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compile scss and sass file to css in Julia</h2>
<p>This library provides a simple Julian API to use the libsass library to compile scss and sass files to css.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Sass
filename = joinpath(Sass.examplefolder, &quot;test.sass&quot;)
Sass.compile_file(filename; precision = 1, source_comments = true)
"><pre><span class="pl-k">using</span> Sass
filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Sass<span class="pl-k">.</span>examplefolder, <span class="pl-s"><span class="pl-pds">"</span>test.sass<span class="pl-pds">"</span></span>)
Sass<span class="pl-k">.</span><span class="pl-c1">compile_file</span>(filename; precision <span class="pl-k">=</span> <span class="pl-c1">1</span>, source_comments <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p>To write the output to a file use the signature:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Sass.compile_file(filename, dest; kwargs...)
"><pre>Sass<span class="pl-k">.</span><span class="pl-c1">compile_file</span>(filename, dest; kwargs<span class="pl-k">...</span>)</pre></div>
<h2><a id="user-content-list-of-keyword-arguments" class="anchor" aria-hidden="true" href="#list-of-keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>List of keyword arguments</h2>
<p>All libsass options can be passed as keyword arguments:</p>
<ul>
<li><code>output_style</code>: output style for the generated css code. See <code>Sass.Style</code> for options. For example <code>output_style  = Sass.nested</code></li>
<li><code>source_comments</code>: a boolean to specify whether to insert inline source comments</li>
<li><code>source_map_file</code>: path to source map file, enables the source map generating used to create sourceMappingUrl</li>
<li><code>omit_source_map_url</code>: disable sourceMappingUrl in css output</li>
<li><code>source_map_embed</code>: embed sourceMappingUrl as data uri</li>
<li><code>source_map_contents</code>: embed include contents in maps</li>
<li><code>source_map_file_urls</code>: create file urls for sources</li>
<li><code>source_map_root</code>: pass-through as sourceRoot property</li>
<li><code>is_indented_syntax_src</code>: treat source_string as sass (as opposed to scss)</li>
<li><code>include_path</code> (<code>AbstractString</code> or <code>AbstractArray{&lt;:AbstractString}</code>)</li>
<li><code>plugin_path</code> (<code>AbstractString</code> or <code>AbstractArray{&lt;:AbstractString}</code>)</li>
<li><code>indent</code>: string to be used for indentation</li>
<li><code>linefeed</code>: string to be used to for line feeds</li>
<li><code>input_path</code>: the input path is used for source map generating. It can be used to define something with string compilation or to overload the input file path. It is set to <code>stdin</code> for data contexts and to the input file on file contexts.</li>
<li><code>output_path</code>: the output path is used for source map generating. LibSass will not write to this file, it is just used to create information in source-maps etc.</li>
<li><code>precision</code>: precision for outputting fractional numbers</li>
</ul>
<h2><a id="user-content-using-the-libsass-api" class="anchor" aria-hidden="true" href="#using-the-libsass-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the libsass API</h2>
<p>For more advanced use, the main functions of the libsass API are ported and can be used directly for a finer control. This is more complicated and should be unnecessary in most cases.</p>
<h3><a id="user-content-example-from-libsass-docs-building-a-file-compiler" class="anchor" aria-hidden="true" href="#example-from-libsass-docs-building-a-file-compiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example (from libsass docs): building a file compiler</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Sass
filename = joinpath(Sass.examplefolder, &quot;test.sass&quot;)
context = sass_make_file_context(filename)
options = sass_file_context_get_options(context)
sass_option_set_precision(options, 1)
sass_option_set_source_comments(options, true)

sass_file_context_set_options(context, options)

compiler = sass_make_file_compiler(context)
sass_compiler_parse(compiler)
sass_compiler_execute(compiler)

output = sass_context_get_output_string(context)
# Retrieve errors during compilation
error_status = sass_context_get_error_status(context)
json_error = sass_context_get_error_json(context)
# Release memory dedicated to the C compiler
sass_delete_compiler(compiler)
"><pre><span class="pl-k">using</span> Sass
filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Sass<span class="pl-k">.</span>examplefolder, <span class="pl-s"><span class="pl-pds">"</span>test.sass<span class="pl-pds">"</span></span>)
context <span class="pl-k">=</span> <span class="pl-c1">sass_make_file_context</span>(filename)
options <span class="pl-k">=</span> <span class="pl-c1">sass_file_context_get_options</span>(context)
<span class="pl-c1">sass_option_set_precision</span>(options, <span class="pl-c1">1</span>)
<span class="pl-c1">sass_option_set_source_comments</span>(options, <span class="pl-c1">true</span>)

<span class="pl-c1">sass_file_context_set_options</span>(context, options)

compiler <span class="pl-k">=</span> <span class="pl-c1">sass_make_file_compiler</span>(context)
<span class="pl-c1">sass_compiler_parse</span>(compiler)
<span class="pl-c1">sass_compiler_execute</span>(compiler)

output <span class="pl-k">=</span> <span class="pl-c1">sass_context_get_output_string</span>(context)
<span class="pl-c"><span class="pl-c">#</span> Retrieve errors during compilation</span>
error_status <span class="pl-k">=</span> <span class="pl-c1">sass_context_get_error_status</span>(context)
json_error <span class="pl-k">=</span> <span class="pl-c1">sass_context_get_error_json</span>(context)
<span class="pl-c"><span class="pl-c">#</span> Release memory dedicated to the C compiler</span>
<span class="pl-c1">sass_delete_compiler</span>(compiler)</pre></div>
</article></div>