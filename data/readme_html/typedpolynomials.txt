<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-typedpolynomials" class="anchor" aria-hidden="true" href="#typedpolynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TypedPolynomials</h1>
<p><a href="https://travis-ci.org/JuliaAlgebra/TypedPolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/87597224437162dfd29403f510ebcb7e93490230/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961416c67656272612f5479706564506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaAlgebra/TypedPolynomials.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaAlgebra/TypedPolynomials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/81cc56bd7e52856199d5e542ed5302524dd95ce6/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961416c67656272612f5479706564506f6c796e6f6d69616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaAlgebra/TypedPolynomials.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>TypedPolynomials.jl provides an implementation of the multivariate polynomial interface from <a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl">MultivariatePolynomials.jl</a> using <em>strongly typed</em> variables. That is, in this package, the identity of a variable is encoded by its type, so variables <code>x</code> and <code>y</code> are of different types. This allows us to use the type system to handle certain operations, like computing the intersection of two monomials' variables, at compile-time.</p>
<h3><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h3>
<ul>
<li>Handling variables at the type level makes constructing variables, monomials, and terms more efficient than with <a href="https://github.com/JuliaAlgebra/DynamicPolynomials.jl">DynamicPolynomials.jl</a>.</li>
<li>Despite the heavy use of the type system, this package has no <code>@generated</code> functions and should be compatible with static compilation (though this has not yet been tested).</li>
</ul>
<h3><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Caveats</h3>
<ul>
<li>There is no distinction in this package between a variable's <em>name</em> and its identity. That is, two variables named <code>x</code> are exactly the same object, regardless of how they were created.</li>
<li>For problems with large numbers of variables, or for which the set of variables is not known at compile-time, you may see better performance overall with DynamicPolynomials.jl, e.g. <a href="https://github.com/JuliaAlgebra/TypedPolynomials.jl/issues/32">#32</a>. This may change in the future.</li>
</ul>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>The easiest way to create variables is the <code>@polyvar</code> macro:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@polyvar</span> x y z  <span class="pl-c"><span class="pl-c">#</span> Declare three `Variable`s named x, y, and z and assign local variables with the same names</span>
(x, y, z)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(x)
TypedPolynomials<span class="pl-k">.</span>Variable{<span class="pl-c1">:x</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(y)
TypedPolynomials<span class="pl-k">.</span>Variable{<span class="pl-c1">:y</span>}</pre></div>
<p>Multiplying variables creates a <code>Monomial{V}</code> where <code>V</code> is the vector of variables contained in the monomial:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">*</span> y
xy

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(x <span class="pl-k">*</span> y)
TypedPolynomials<span class="pl-k">.</span>Monomial{(x, y),<span class="pl-c1">2</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>)
TypedPolynomials<span class="pl-k">.</span>Monomial{(x,),<span class="pl-c1">1</span>}</pre></div>
<p>Multiplying a monomial (or variable) by anything other than another <code>Variable</code> or <code>Monomial</code> creates a <code>Term</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> x
<span class="pl-c1">3</span>x

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">3</span> <span class="pl-k">*</span> x)
TypedPolynomials<span class="pl-k">.</span>Term{Int64,TypedPolynomials<span class="pl-k">.</span>Monomial{(x,),<span class="pl-c1">1</span>}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">3.0</span> <span class="pl-k">*</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> y)
TypedPolynomials<span class="pl-k">.</span>Term{Float64,TypedPolynomials<span class="pl-k">.</span>Monomial{(x, y),<span class="pl-c1">2</span>}}</pre></div>
<p>Addition or subtraction of terms, monomials, and/or variables creates a <code>Polynomial</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">+</span> y
x <span class="pl-k">+</span> y

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(x <span class="pl-k">+</span> y) <span class="pl-k">&lt;:</span> <span class="pl-c1">Polynomial</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">3</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> z<span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>
x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">3.0</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x <span class="pl-k">+</span> <span class="pl-c1">0.5</span>z</pre></div>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>More Examples</h2>
<h3><a id="user-content-differentiation-and-substitution" class="anchor" aria-hidden="true" href="#differentiation-and-substitution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Differentiation and Substitution</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TypedPolynomials
<span class="pl-k">using</span> Test
<span class="pl-c1">@polyvar</span> x y <span class="pl-c"><span class="pl-c">#</span> assigns x (resp. y) to a variable of name x (resp. y)</span>
p <span class="pl-k">=</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3.0</span>x<span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y
<span class="pl-c1">@test</span> <span class="pl-c1">differentiate</span>(p, x) <span class="pl-k">==</span> <span class="pl-c1">3</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> compute the derivative of p with respect to x</span>
<span class="pl-c1">@test</span> <span class="pl-c1">differentiate</span>.(p, (x, y)) <span class="pl-k">==</span> (<span class="pl-c1">3</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>, <span class="pl-c1">6</span><span class="pl-k">*</span>x<span class="pl-k">*</span>y <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> compute the gradient of p</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>((x, y)<span class="pl-k">=&gt;</span>(y, x)) <span class="pl-k">==</span> <span class="pl-c1">2</span>y <span class="pl-k">+</span> <span class="pl-c1">3</span>y<span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x  <span class="pl-c"><span class="pl-c">#</span> replace any x by y and y by x</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>(y<span class="pl-k">=&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span>x<span class="pl-k">*</span>(x<span class="pl-k">^</span><span class="pl-c1">4</span>) <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> replace any occurence of y by x^2</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, y<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> evaluate p at [1, 2]</span></pre></div>
<h3><a id="user-content-vectors-of-variables" class="anchor" aria-hidden="true" href="#vectors-of-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vectors of Variables</h3>
<p>The <code>@polyvar</code> macro can also create a tuple of variables automatically:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TypedPolynomials
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">@polyvar</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> assign x to a tuple of variables x1, x2, x3</span>
p <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x <span class="pl-k">.*</span> x) <span class="pl-c"><span class="pl-c">#</span> x_1^2 + x_2^2 + x_3^2</span>
<span class="pl-c1">p</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, x[<span class="pl-c1">3</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> x_2^2 + 13</span>
<span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span>A<span class="pl-k">*</span><span class="pl-c1">vec</span>(x)) <span class="pl-c"><span class="pl-c">#</span> corresponds to dot(A*x, A*x), need vec to convert the tuple to a vector</span></pre></div>
</article></div>