<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-runtimeenumsjl" class="anchor" aria-hidden="true" href="#runtimeenumsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RuntimeEnums.jl</h1>
<p>Enums whose values can be registered at runtime.</p>
<p>Naturally, these enums are less performant in value registration. Their usage, however, should not suffer from any penalties.</p>
<p>Runtime-defined enums are useful for extendable systems. Clients may inject custom values into an existing system, thus customizing its behavior.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Creation of new <code>RuntimeEnum</code>s is designed to be like creation of regular <code>Enum</code>s with the <a href="https://docs.julialang.org/en/v1/base/base/#Base.Enums.@enum" rel="nofollow"><code>@enum</code></a> macro:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RuntimeEnums

@runtime_enum SomeEnum
# &quot;empty&quot; enum `SomeEnum`
isempty(SomeEnum) === true

@runtime_enum AnotherEnum Foo Bar Baz
# Foo === AnotherEnum(0), Bar === AnotherEnum(1), Baz === AnotherEnum(2)

@runtime_enum YetAnotherEnum::UInt8 begin
    Byte1 = 0x1
    Byte2
    Byte3
end
"><pre><span class="pl-k">using</span> RuntimeEnums

<span class="pl-c1">@runtime_enum</span> SomeEnum
<span class="pl-c"><span class="pl-c">#</span> "empty" enum `SomeEnum`</span>
<span class="pl-c1">isempty</span>(SomeEnum) <span class="pl-k">===</span> <span class="pl-c1">true</span>

<span class="pl-c1">@runtime_enum</span> AnotherEnum Foo Bar Baz
<span class="pl-c"><span class="pl-c">#</span> Foo === AnotherEnum(0), Bar === AnotherEnum(1), Baz === AnotherEnum(2)</span>

<span class="pl-c1">@runtime_enum</span> YetAnotherEnum<span class="pl-k">::</span><span class="pl-c1">UInt8</span> <span class="pl-k">begin</span>
    Byte1 <span class="pl-k">=</span> <span class="pl-c1">0x1</span>
    Byte2
    Byte3
<span class="pl-k">end</span></pre></div>
<p>The main distinction, obviously, is that new enum values can be added dynamically at runtime:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RuntimeEnums

@runtime_enum ExtensibleEnum

RuntimeEnums.@register ExtensibleEnum First Second
RuntimeEnums.@register ExtensibleEnum begin
    Third
    Fourth
    Fifth
end
# First === ExtensibleEnum(0), Second === ExtensibleEnum(1), ...
"><pre><span class="pl-k">using</span> RuntimeEnums

<span class="pl-c1">@runtime_enum</span> ExtensibleEnum

RuntimeEnums<span class="pl-k">.</span><span class="pl-c1">@register</span> ExtensibleEnum First Second
RuntimeEnums<span class="pl-k">.</span><span class="pl-c1">@register</span> ExtensibleEnum <span class="pl-k">begin</span>
    Third
    Fourth
    Fifth
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> First === ExtensibleEnum(0), Second === ExtensibleEnum(1), ...</span></pre></div>
<p>Additionally to the <code>RuntimeEnums.@register</code> macro, one may call the underlying <code>Base.setindex!</code> method. As this is a method, it does not have the capacity to define a constant for you, it merely creates a mapping for the given key/value pair.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RuntimeEnums

@runtime_enum ExtensibleEnum

ExtensibleEnum[:Foo] = 24
ExtensibleEnum[:Bar] = 42
ExtensibleEnum[:Baz] = 69
Base.Enums.instances(ExtensibleEnum) == (ExtensibleEnum(24), ExtensibleEnum(42), ExtensibleEnum(69))
"><pre><span class="pl-k">using</span> RuntimeEnums

<span class="pl-c1">@runtime_enum</span> ExtensibleEnum

ExtensibleEnum[<span class="pl-c1">:Foo</span>] <span class="pl-k">=</span> <span class="pl-c1">24</span>
ExtensibleEnum[<span class="pl-c1">:Bar</span>] <span class="pl-k">=</span> <span class="pl-c1">42</span>
ExtensibleEnum[<span class="pl-c1">:Baz</span>] <span class="pl-k">=</span> <span class="pl-c1">69</span>
Base<span class="pl-k">.</span>Enums<span class="pl-k">.</span><span class="pl-c1">instances</span>(ExtensibleEnum) <span class="pl-k">==</span> (<span class="pl-c1">ExtensibleEnum</span>(<span class="pl-c1">24</span>), <span class="pl-c1">ExtensibleEnum</span>(<span class="pl-c1">42</span>), <span class="pl-c1">ExtensibleEnum</span>(<span class="pl-c1">69</span>))</pre></div>
<p>Both, the name and the value must be unique. Attempting to override either will raise an <code>ArgumentError</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RuntimeEnums

@runtime_enum SomeEnum Foo Bar Baz = 42

ExtensibleEnum[:Foo] = 24 # throws ArgumentError
ExtensibleEnum[:New] = 42 # also throws ArgumentError
"><pre><span class="pl-k">using</span> RuntimeEnums

<span class="pl-c1">@runtime_enum</span> SomeEnum Foo Bar Baz <span class="pl-k">=</span> <span class="pl-c1">42</span>

ExtensibleEnum[<span class="pl-c1">:Foo</span>] <span class="pl-k">=</span> <span class="pl-c1">24</span> <span class="pl-c"><span class="pl-c">#</span> throws ArgumentError</span>
ExtensibleEnum[<span class="pl-c1">:New</span>] <span class="pl-k">=</span> <span class="pl-c1">42</span> <span class="pl-c"><span class="pl-c">#</span> also throws ArgumentError</span></pre></div>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h1>
<p>The MIT License (MIT)
Copyright © 2021 Kiruse</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</article></div>