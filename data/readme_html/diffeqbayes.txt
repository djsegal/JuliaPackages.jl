<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-diffeqbayesjl" class="anchor" aria-hidden="true" href="#diffeqbayesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DiffEqBayes.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/DiffEqBayes/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/DiffEqBayes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c7160d3064de734500e9e86b970b442544f9946d02b89afffcee140ab7a460ea/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f44696666457142617965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/DiffEqBayes.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/DiffEqBayes.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DiffEqBayes.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">This repository is a set of extension functionality for estimating the parameters of differential equations using Bayesian methods. It allows the choice of using <a href="https://stanjulia.github.io/CmdStan.jl/stable/" rel="nofollow">CmdStan.jl</a>, <a href="https://turing.ml/stable/docs/using-turing/" rel="nofollow">Turing.jl</a>, <a href="https://www.tamaspapp.eu/DynamicHMC.jl/stable/" rel="nofollow">DynamicHMC.jl</a> and <a href="https://github.com/marcjwilliams1/ApproxBayes.jl">ApproxBayes.jl</a> to perform a Bayesian estimation of a differential equation problem specified via the <a href="https://docs.sciml.ai/DiffEqDocs/stable/" rel="nofollow">DifferentialEquations.jl</a> interface.</p>
<p dir="auto">To begin you first need to add this repository using the following command.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;DiffEqBayes&quot;)
using DiffEqBayes"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DiffEqBayes<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> DiffEqBayes</pre></div>
<h2 dir="auto"><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials and Documentation</h2>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/DiffEqBayes/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/DiffEqBayes/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ParameterizedFunctions, OrdinaryDiffEq, RecursiveArrayTools, Distributions
f1 = @ode_def LotkaVolterra begin
    dx = a * x - x * y
    dy = -3 * y + x * y
end a

p = [1.5]
u0 = [1.0, 1.0]
tspan = (0.0, 10.0)
prob1 = ODEProblem(f1, u0, tspan, p)

σ = 0.01                         # noise, fixed for now
t = collect(1.0:10.0)   # observation times
sol = solve(prob1, Tsit5())
priors = [Normal(1.5, 1)]
randomized = VectorOfArray([(sol(t[i]) + σ * randn(2)) for i in 1:length(t)])
data = convert(Array, randomized)

using CmdStan #required for using the Stan backend
bayesian_result_stan = stan_inference(prob1, t, data, priors)

bayesian_result_turing = turing_inference(prob1, Tsit5(), t, data, priors)

using DynamicHMC #required for DynamicHMC backend
bayesian_result_hmc = dynamichmc_inference(prob1, Tsit5(), t, data, priors)

bayesian_result_abc = abc_inference(prob1, Tsit5(), t, data, priors)"><pre><span class="pl-k">using</span> ParameterizedFunctions, OrdinaryDiffEq, RecursiveArrayTools, Distributions
f1 <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> LotkaVolterra <span class="pl-k">begin</span>
    dx <span class="pl-k">=</span> a <span class="pl-k">*</span> x <span class="pl-k">-</span> x <span class="pl-k">*</span> y
    dy <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">*</span> y <span class="pl-k">+</span> x <span class="pl-k">*</span> y
<span class="pl-k">end</span> a

p <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>]
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
prob1 <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f1, u0, tspan, p)

σ <span class="pl-k">=</span> <span class="pl-c1">0.01</span>                         <span class="pl-c"><span class="pl-c">#</span> noise, fixed for now</span>
t <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">10.0</span>)   <span class="pl-c"><span class="pl-c">#</span> observation times</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob1, <span class="pl-c1">Tsit5</span>())
priors <span class="pl-k">=</span> [<span class="pl-c1">Normal</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1</span>)]
randomized <span class="pl-k">=</span> <span class="pl-c1">VectorOfArray</span>([(<span class="pl-c1">sol</span>(t[i]) <span class="pl-k">+</span> σ <span class="pl-k">*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(t)])
data <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array, randomized)

<span class="pl-k">using</span> CmdStan <span class="pl-c"><span class="pl-c">#</span>required for using the Stan backend</span>
bayesian_result_stan <span class="pl-k">=</span> <span class="pl-c1">stan_inference</span>(prob1, t, data, priors)

bayesian_result_turing <span class="pl-k">=</span> <span class="pl-c1">turing_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors)

<span class="pl-k">using</span> DynamicHMC <span class="pl-c"><span class="pl-c">#</span>required for DynamicHMC backend</span>
bayesian_result_hmc <span class="pl-k">=</span> <span class="pl-c1">dynamichmc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors)

bayesian_result_abc <span class="pl-k">=</span> <span class="pl-c1">abc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors)</pre></div>
<h3 dir="auto"><a id="user-content-using-save_idxs-to-declare-observables" class="anchor" aria-hidden="true" href="#using-save_idxs-to-declare-observables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using save_idxs to declare observables</h3>
<p dir="auto">You don't always have data for all of the variables of the model. In case of certain latent variables
you can utilise the <code>save_idxs</code> kwarg to declare the oberved variables and run the inference using any
of the backends as shown below.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sol = solve(prob1, Tsit5(), save_idxs = [1])
randomized = VectorOfArray([(sol(t[i]) + σ * randn(1)) for i in 1:length(t)])
data = convert(Array, randomized)

using CmdStan #required for using the Stan backend
bayesian_result_stan = stan_inference(prob1, t, data, priors, save_idxs = [1])

bayesian_result_turing = turing_inference(prob1, Tsit5(), t, data, priors, save_idxs = [1])

using DynamicHMC #required for DynamicHMC backend
bayesian_result_hmc = dynamichmc_inference(prob1, Tsit5(), t, data, priors, save_idxs = [1])

bayesian_result_abc = abc_inference(prob1, Tsit5(), t, data, priors, save_idxs = [1])"><pre>sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob1, <span class="pl-c1">Tsit5</span>(), save_idxs <span class="pl-k">=</span> [<span class="pl-c1">1</span>])
randomized <span class="pl-k">=</span> <span class="pl-c1">VectorOfArray</span>([(<span class="pl-c1">sol</span>(t[i]) <span class="pl-k">+</span> σ <span class="pl-k">*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(t)])
data <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array, randomized)

<span class="pl-k">using</span> CmdStan <span class="pl-c"><span class="pl-c">#</span>required for using the Stan backend</span>
bayesian_result_stan <span class="pl-k">=</span> <span class="pl-c1">stan_inference</span>(prob1, t, data, priors, save_idxs <span class="pl-k">=</span> [<span class="pl-c1">1</span>])

bayesian_result_turing <span class="pl-k">=</span> <span class="pl-c1">turing_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors, save_idxs <span class="pl-k">=</span> [<span class="pl-c1">1</span>])

<span class="pl-k">using</span> DynamicHMC <span class="pl-c"><span class="pl-c">#</span>required for DynamicHMC backend</span>
bayesian_result_hmc <span class="pl-k">=</span> <span class="pl-c1">dynamichmc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors, save_idxs <span class="pl-k">=</span> [<span class="pl-c1">1</span>])

bayesian_result_abc <span class="pl-k">=</span> <span class="pl-c1">abc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors, save_idxs <span class="pl-k">=</span> [<span class="pl-c1">1</span>])</pre></div>
</article></div>