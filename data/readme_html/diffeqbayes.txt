<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-diffeqbayesjl" class="anchor" aria-hidden="true" href="#diffeqbayesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiffEqBayes.jl</h1>
<p><a href="https://github.com/SciML/DiffEqBayes.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DiffEqBayes.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/SciML/DiffEqBayes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1da068075de72f722d6e599fdf8182184fe3a205ea82cc6af74bdc05c4408b3d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5363694d4c2f44696666457142617965732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/SciML/DiffEqBayes.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/SciML/DiffEqBayes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1a4f824d8f75772de5327d34b5c4ec7bc4e337f7fc71d0e26f53188ce2db11d7/687474703a2f2f636f6465636f762e696f2f6769746875622f5363694d4c2f44696666457142617965732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/SciML/DiffEqBayes.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="http://diffeqbayes.sciml.ai/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="http://diffeqbayes.sciml.ai/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>This repository is a set of extension functionality for estimating the parameters of differential equations using Bayesian methods. It allows the choice of using <a href="https://github.com/StanJulia/CmdStan.jl">CmdStan.jl</a>, <a href="https://github.com/TuringLang/Turing.jl">Turing.jl</a>, <a href="https://github.com/tpapp/DynamicHMC.jl">DynamicHMC.jl</a> and <a href="https://github.com/marcjwilliams1/ApproxBayes.jl">ApproxBayes.jl</a> to perform a Bayesian estimation of a differential equation problem specified via the <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a> interface.</p>
<p>To begin you first need to add this repository using the following command.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;DiffEqBayes&quot;)
using DiffEqBayes
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DiffEqBayes<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> DiffEqBayes</pre></div>
<h2><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tutorials and Documentation</h2>
<p>For information on using the package,
<a href="https://diffeqbayes.sciml.ai/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://diffeqbayes.sciml.ai/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ParameterizedFunctions, OrdinaryDiffEq, RecursiveArrayTools, Distributions
f1 = @ode_def LotkaVolterra begin
 dx = a*x - x*y
 dy = -3*y + x*y
end a

p = [1.5]
u0 = [1.0,1.0]
tspan = (0.0,10.0)
prob1 = ODEProblem(f1,u0,tspan,p)

σ = 0.01                         # noise, fixed for now
t = collect(1.:10.)   # observation times
sol = solve(prob1,Tsit5())
priors = [Normal(1.5, 1)]
randomized = VectorOfArray([(sol(t[i]) + σ * randn(2)) for i in 1:length(t)])
data = convert(Array,randomized)

using CmdStan #required for using the Stan backend
bayesian_result_stan = stan_inference(prob1,t,data,priors)

bayesian_result_turing = turing_inference(prob1,Tsit5(),t,data,priors)

using DynamicHMC #required for DynamicHMC backend
bayesian_result_hmc = dynamichmc_inference(prob1, Tsit5(), t, data, priors)

bayesian_result_abc = abc_inference(prob1, Tsit5(), t, data, priors)
"><pre><span class="pl-k">using</span> ParameterizedFunctions, OrdinaryDiffEq, RecursiveArrayTools, Distributions
f1 <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> LotkaVolterra <span class="pl-k">begin</span>
 dx <span class="pl-k">=</span> a<span class="pl-k">*</span>x <span class="pl-k">-</span> x<span class="pl-k">*</span>y
 dy <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>y <span class="pl-k">+</span> x<span class="pl-k">*</span>y
<span class="pl-k">end</span> a

p <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>]
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
prob1 <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f1,u0,tspan,p)

σ <span class="pl-k">=</span> <span class="pl-c1">0.01</span>                         <span class="pl-c"><span class="pl-c">#</span> noise, fixed for now</span>
t <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1.</span>:<span class="pl-c1">10.</span>)   <span class="pl-c"><span class="pl-c">#</span> observation times</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob1,<span class="pl-c1">Tsit5</span>())
priors <span class="pl-k">=</span> [<span class="pl-c1">Normal</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1</span>)]
randomized <span class="pl-k">=</span> <span class="pl-c1">VectorOfArray</span>([(<span class="pl-c1">sol</span>(t[i]) <span class="pl-k">+</span> σ <span class="pl-k">*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(t)])
data <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array,randomized)

<span class="pl-k">using</span> CmdStan <span class="pl-c"><span class="pl-c">#</span>required for using the Stan backend</span>
bayesian_result_stan <span class="pl-k">=</span> <span class="pl-c1">stan_inference</span>(prob1,t,data,priors)

bayesian_result_turing <span class="pl-k">=</span> <span class="pl-c1">turing_inference</span>(prob1,<span class="pl-c1">Tsit5</span>(),t,data,priors)

<span class="pl-k">using</span> DynamicHMC <span class="pl-c"><span class="pl-c">#</span>required for DynamicHMC backend</span>
bayesian_result_hmc <span class="pl-k">=</span> <span class="pl-c1">dynamichmc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors)

bayesian_result_abc <span class="pl-k">=</span> <span class="pl-c1">abc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, priors)</pre></div>
<h3><a id="user-content-using-save_idxs-to-declare-observables" class="anchor" aria-hidden="true" href="#using-save_idxs-to-declare-observables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using save_idxs to declare observables</h3>
<p>You don't always have data for all of the variables of the model. In case of certain latent variables
you can utilise the <code>save_idxs</code> kwarg to declare the oberved variables and run the inference using any
of the backends as shown below.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=" sol = solve(prob1,Tsit5(),save_idxs=[1])
 randomized = VectorOfArray([(sol(t[i]) + σ * randn(1)) for i in 1:length(t)])
 data = convert(Array,randomized)

 using CmdStan #required for using the Stan backend
 bayesian_result_stan = stan_inference(prob1,t,data,priors,save_idxs=[1])

 bayesian_result_turing = turing_inference(prob1,Tsit5(),t,data,priors,save_idxs=[1])
 
 using DynamicHMC #required for DynamicHMC backend
 bayesian_result_hmc = dynamichmc_inference(prob1,Tsit5(),t,data,priors,save_idxs = [1])

 bayesian_result_abc = abc_inference(prob1,Tsit5(),t,data,priors,save_idxs=[1])
"><pre> sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob1,<span class="pl-c1">Tsit5</span>(),save_idxs<span class="pl-k">=</span>[<span class="pl-c1">1</span>])
 randomized <span class="pl-k">=</span> <span class="pl-c1">VectorOfArray</span>([(<span class="pl-c1">sol</span>(t[i]) <span class="pl-k">+</span> σ <span class="pl-k">*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(t)])
 data <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array,randomized)

 <span class="pl-k">using</span> CmdStan <span class="pl-c"><span class="pl-c">#</span>required for using the Stan backend</span>
 bayesian_result_stan <span class="pl-k">=</span> <span class="pl-c1">stan_inference</span>(prob1,t,data,priors,save_idxs<span class="pl-k">=</span>[<span class="pl-c1">1</span>])

 bayesian_result_turing <span class="pl-k">=</span> <span class="pl-c1">turing_inference</span>(prob1,<span class="pl-c1">Tsit5</span>(),t,data,priors,save_idxs<span class="pl-k">=</span>[<span class="pl-c1">1</span>])
 
 <span class="pl-k">using</span> DynamicHMC <span class="pl-c"><span class="pl-c">#</span>required for DynamicHMC backend</span>
 bayesian_result_hmc <span class="pl-k">=</span> <span class="pl-c1">dynamichmc_inference</span>(prob1,<span class="pl-c1">Tsit5</span>(),t,data,priors,save_idxs <span class="pl-k">=</span> [<span class="pl-c1">1</span>])

 bayesian_result_abc <span class="pl-k">=</span> <span class="pl-c1">abc_inference</span>(prob1,<span class="pl-c1">Tsit5</span>(),t,data,priors,save_idxs<span class="pl-k">=</span>[<span class="pl-c1">1</span>])</pre></div>
</article></div>