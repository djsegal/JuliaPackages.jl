<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-diffeqbayesjl" class="anchor" aria-hidden="true" href="#diffeqbayesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiffEqBayes.jl</h1>
<p><a href="https://travis-ci.org/JuliaDiffEq/DiffEqBayes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a041388ad4ece16242f5b93737ffc3eb6504a779/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f44696666457142617965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/DiffEqBayes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/DiffEqBayes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c1021f2737b6e0e8a7de2e290178402c3a172517/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614469666645712f44696666457142617965732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDiffEq/DiffEqBayes.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaDiffEq/DiffEqBayes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/caa1600fedaf503146b46aee3fb8421cae7b9fef/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614469666645712f44696666457142617965732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaDiffEq/DiffEqBayes.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This repository is a set of extension functionality for estimating the parameters of differential equations using Bayesian methods. It allows the choice of using <a href="https://github.com/goedman/Stan.jl">Stan.jl</a>, <a href="https://github.com/yebai/Turing.jl">Turing.jl</a>, <a href="https://github.com/tpapp/DynamicHMC.jl">DynamicHMC.jl</a> and <a href="https://github.com/marcjwilliams1/ApproxBayes.jl">ApproxBayes.jl</a> to perform a Bayesian estimation of a differential equation problem specified via the <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl</a> interface.</p>
<p>To begin you first need to add this repository using the following command.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DiffEqBayes<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> DiffEqBayes</pre></div>
<h3><a id="user-content-stan_inference" class="anchor" aria-hidden="true" href="#stan_inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>stan_inference</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">stan_inference</span>(prob<span class="pl-k">::</span><span class="pl-c1">ODEProblem</span>,t,data,priors <span class="pl-k">=</span> <span class="pl-c1">nothing</span>;alg<span class="pl-k">=</span><span class="pl-c1">:rk45</span>,
               num_samples<span class="pl-k">=</span><span class="pl-c1">1000</span>, num_warmup<span class="pl-k">=</span><span class="pl-c1">1000</span>, reltol<span class="pl-k">=</span><span class="pl-c1">1e-3</span>,
               abstol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">Int</span>(<span class="pl-c1">1e5</span>),likelihood<span class="pl-k">=</span>Normal,
               vars<span class="pl-k">=</span>(<span class="pl-c1">StanODEData</span>(),<span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)))</pre></div>
<p><code>stan_inference</code> uses <a href="http://goedman.github.io/Stan.jl/dev/INTRO.html" rel="nofollow">Stan.jl</a>
to perform the Bayesian inference. The
<a href="http://goedman.github.io/Stan.jl/dev/INSTALLATION.html" rel="nofollow">Stan installation process</a>
is required to use this function. The input requires that the function is defined
by a <code>ParameterizedFunction</code> with the <code>@ode_def</code> macro. <code>t</code> is the array of time
and <code>data</code> is the array where the first dimension (columns) corresponds to the
array of system values. <code>priors</code> is an array of prior distributions for each
parameter, specified via a <a href="https://juliastats.github.io/Distributions.jl/dev/" rel="nofollow">Distributions.jl</a>
type. <code>alg</code> is a choice between <code>:rk45</code> and <code>:bdf</code>, the two internal integrators
of Stan. <code>num_samples</code> is the number of samples to take per chain, and <code>num_warmup</code>
is the number of MCMC warmup steps. <code>abstol</code> and <code>reltol</code> are the keyword
arguments for the internal integrator. <code>liklihood</code> is the likelihood distribution
to use with the arguments from <code>vars</code>, and <code>vars</code> is a tuple of priors for the
distributions of the likelihood hyperparameters. The special value <code>StanODEData()</code>
in this tuple denotes the position that the ODE solution takes in the likelihood's
parameter list.</p>
<h3><a id="user-content-turing_inference" class="anchor" aria-hidden="true" href="#turing_inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>turing_inference</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">turing_inference</span>(prob<span class="pl-k">::</span><span class="pl-c1">DiffEqBase.DEProblem</span>,alg,t,data,priors; 
                              likelihood_dist_priors, likelihood, num_samples<span class="pl-k">=</span><span class="pl-c1">1000</span>, 
                              sampler <span class="pl-k">=</span> Turing<span class="pl-k">.</span><span class="pl-c1">NUTS</span>(num_samples, <span class="pl-c1">0.65</span>), syms, kwargs<span class="pl-k">...</span>)</pre></div>
<p><code>turing_inference</code> uses <a href="https://github.com/TuringLang/Turing.jl">Turing.jl</a> to
perform its parameter inference. <code>prob</code> can be any <code>DEProblem</code> with a corresponding
<code>alg</code> choice. <code>t</code> is the array of time points and <code>data</code> is the set of
observations for the differential equation system at time point <code>t[i]</code> (or higher
dimensional). <code>priors</code> is an array of prior distributions for each
parameter, specified via a
<a href="https://juliastats.github.io/Distributions.jl/dev/" rel="nofollow">Distributions.jl</a>
type. <code>num_samples</code> is the number of samples per MCMC chain. The extra <code>kwargs</code> are given to the internal differential
equation solver.</p>
<h3><a id="user-content-dynamichmc_inference" class="anchor" aria-hidden="true" href="#dynamichmc_inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>dynamichmc_inference</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">dynamichmc_inference</span>(prob<span class="pl-k">::</span><span class="pl-c1">DEProblem</span>,data,priors,t,transformations;
                      σ <span class="pl-k">=</span> <span class="pl-c1">0.01</span>,ϵ<span class="pl-k">=</span><span class="pl-c1">0.001</span>,initial<span class="pl-k">=</span>Float64[])</pre></div>
<p><code>dynamichmc_inference</code> uses <a href="https://github.com/tpapp/DynamicHMC.jl">DynamicHMC.jl</a> to
perform the bayesian parameter estimation. <code>prob</code> can be any <code>DEProblem</code>, <code>data</code> is the set
of observations for our model which is to be used in the Bayesian Inference process. <code>priors</code> represent the
choice of prior distributions for the parameters to be determined, passed as an array of <a href="https://juliastats.github.io/Distributions.jl/dev/" rel="nofollow">Distributions.jl</a> distributions. <code>t</code> is the array of time points. <code>transformations</code>
is an array of <a href="https://github.com/tpapp/ContinuousTransformations.jl">Tranformations</a> imposed for constraining the
parameter values to specific domains. <code>initial</code> values for the parameters can be passed, if not passed the means of the
<code>priors</code> are used. <code>ϵ</code> can be used as a kwarg to pass the initial step size for the NUTS algorithm.</p>
<h3><a id="user-content-abc_inference" class="anchor" aria-hidden="true" href="#abc_inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>abc_inference</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">abc_inference</span>(prob<span class="pl-k">::</span><span class="pl-c1">DEProblem</span>, alg, t, data, priors; ϵ<span class="pl-k">=</span><span class="pl-c1">0.001</span>,
     distancefunction <span class="pl-k">=</span> euclidean, ABCalgorithm <span class="pl-k">=</span> ABCSMC, progress <span class="pl-k">=</span> <span class="pl-c1">false</span>,
     num_samples <span class="pl-k">=</span> <span class="pl-c1">500</span>, maxiterations <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>, kwargs<span class="pl-k">...</span>)</pre></div>
<p><code>abc_inference</code> uses <a href="https://github.com/marcjwilliams1/ApproxBayes.jl">ApproxBayes.jl</a> which uses Approximate Bayesian Computation (ABC) to
perform its parameter inference. <code>prob</code> can be any <code>DEProblem</code> with a corresponding
<code>alg</code> choice. <code>t</code> is the array of time points and <code>data[:,i]</code> is the set of
observations for the differential equation system at time point <code>t[i]</code> (or higher
dimensional). <code>priors</code> is an array of prior distributions for each
parameter, specified via a
<a href="https://juliastats.github.io/Distributions.jl/dev/" rel="nofollow">Distributions.jl</a>
type. <code>num_samples</code> is the number of posterior samples. <code>ϵ</code> is the target
distance between the data and simulated data. <code>distancefunction</code> is a distance metric specified from the
<a href="https://github.com/JuliaStats/Distances.jl">Distances.jl</a>
package, the default is <code>euclidean</code>. <code>ABCalgorithm</code> is the ABC algorithm to use, options are <code>ABCSMC</code> or <code>ABCRejection</code> from
<a href="https://github.com/marcjwilliams1/ApproxBayes.jl">ApproxBayes.jl</a>, the default
is the former which is more efficient. <code>maxiterations</code> is the maximum number of iterations before the algorithm terminates. The extra <code>kwargs</code> are given to the internal differential
equation solver.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>f1 <span class="pl-k">=</span> <span class="pl-c1">@ode_def_nohes</span> LotkaVolterraTest1 <span class="pl-k">begin</span>
 dx <span class="pl-k">=</span> a<span class="pl-k">*</span>x <span class="pl-k">-</span> x<span class="pl-k">*</span>y
 dy <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>y <span class="pl-k">+</span> x<span class="pl-k">*</span>y
<span class="pl-k">end</span> a

p <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>]
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
prob1 <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f1,u0,tspan,p)

σ <span class="pl-k">=</span> <span class="pl-c1">0.01</span>                         <span class="pl-c"><span class="pl-c">#</span> noise, fixed for now</span>
t <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">linspace</span>(<span class="pl-c1">1</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))   <span class="pl-c"><span class="pl-c">#</span> observation times</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob1,<span class="pl-c1">Tsit5</span>())

randomized <span class="pl-k">=</span> <span class="pl-c1">VectorOfArray</span>([(<span class="pl-c1">sol</span>(t[i]) <span class="pl-k">+</span> σ <span class="pl-k">*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(t)])
data <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array,randomized)

bayesian_result_stan <span class="pl-k">=</span> <span class="pl-c1">stan_inference</span>(prob1,t,data,priors;num_samples<span class="pl-k">=</span><span class="pl-c1">300</span>,
                                num_warmup<span class="pl-k">=</span><span class="pl-c1">500</span>,likelihood<span class="pl-k">=</span>Normal,
                                vars <span class="pl-k">=</span>(<span class="pl-c1">StanODEData</span>(),<span class="pl-c1">InverseGamma</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>)))

bayesian_result_turing <span class="pl-k">=</span> <span class="pl-c1">turing_inference</span>(prob1,<span class="pl-c1">Tsit5</span>(),t,data,priors;num_samples<span class="pl-k">=</span><span class="pl-c1">500</span>)

bayesian_result_hmc <span class="pl-k">=</span> <span class="pl-c1">dynamichmc_inference</span>(prob1, data, [<span class="pl-c1">Normal</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1</span>)], t, [<span class="pl-c1">bridge</span>(ℝ, ℝ⁺, )])

bayesian_result_abc <span class="pl-k">=</span> <span class="pl-c1">abc_inference</span>(prob1, <span class="pl-c1">Tsit5</span>(), t, data, [<span class="pl-c1">Normal</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1</span>)];
                                num_samples<span class="pl-k">=</span><span class="pl-c1">500</span>)</pre></div>
</article></div>