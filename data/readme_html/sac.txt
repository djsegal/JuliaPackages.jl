<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sacjl" class="anchor" aria-hidden="true" href="#sacjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SAC.jl</h1>
<p><a href="https://travis-ci.org/anowacki/SAC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fd272645038ab48c399c4aa7403c288371cbdd77/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f616e6f7761636b692f5341432e6a6c2e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c696e7578" alt="Build Status" data-canonical-src="https://img.shields.io/travis/anowacki/SAC.jl.svg?style=flat-square&amp;label=linux" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/AndyNowacki/sac-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e7e6535a0df0897f7375748030197028838ee1e0/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f416e64794e6f7761636b692f7361632d6a6c2e7376673f7374796c653d666c61742d737175617265266c6162656c3d77696e646f7773" alt="Build status" data-canonical-src="https://img.shields.io/appveyor/ci/AndyNowacki/sac-jl.svg?style=flat-square&amp;label=windows" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/anowacki/SAC.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c34de796d5744788ffe0b7a4c4844e6e934d9945/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616e6f7761636b692f5341432e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/anowacki/SAC.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-what-is-sacjl" class="anchor" aria-hidden="true" href="#what-is-sacjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is SAC.jl?</h2>
<p>A <a href="http://julialang.org" rel="nofollow">Julia</a> package for dealing with seismic data in the
<a href="http://ds.iris.edu/files/sac-manual/manual/file_format.html" rel="nofollow">SAC</a> format, and
processing that data in a similar way to the SAC program:
either the <a href="http://www1.gly.bris.ac.uk/~george/sac-bugs.html" rel="nofollow">SAC/BRIS</a> or
<a href="http://ds.iris.edu/ds/nodes/dmc/software/downloads/sac/" rel="nofollow">IRIS</a> versions.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<p>Although not registered as an official package, SAC.jl can be added to your
Julia install like so:</p>
<p>On Julia v0.7 or v1.0 (press <code>]</code> to get to <code>pkg</code> mode first):</p>
<div class="highlight highlight-source-julia"><pre>(v1<span class="pl-c1">.0</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>anowacki<span class="pl-k">/</span>SAC<span class="pl-k">.</span>jl</pre></div>
<p>(Or you can also do <code>import Pkg; Pkg.add("https://github.com/anowacki/SAC.jl")</code>.)</p>
<p>On Julia v0.6, versions before 0.3 can be installed like so:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/anowacki/SAC.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>This will automatically install the depndencies you need.  You then need only do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SAC</pre></div>
<p>and if that works, you're ready to go.</p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<h3><a id="user-content-sactr-type" class="anchor" aria-hidden="true" href="#sactr-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SACtr type</h3>
<p>SAC.jl represents SAC files with the <code>SACtr</code> type, which is exported.  Methods
are written expecting and dispatched on this type.  Methods are also defined
for arrays of <code>SACtr</code>, <code>Array{SACtr}</code>, which allows for easy operations on
multiple traces.</p>
<p>The <code>SACtr</code> type has fields whose names and types correspond to SAC headers.
These are accessed via <code>Symbol</code>s which are the name of header.  (To get a <code>Symbol</code>,
just write the name of the header with a colon in front.)</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> SAC<span class="pl-k">.</span><span class="pl-c1">sample</span>()
SAC<span class="pl-k">.</span>SACtr<span class="pl-k">:</span>
    delta<span class="pl-k">:</span> <span class="pl-c1">0.01</span>
   depmin<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1.56928</span>
   depmax<span class="pl-k">:</span> <span class="pl-c1">1.52064</span>
        b<span class="pl-k">:</span> <span class="pl-c1">9.459999</span>
		  ⋮
    kevnm<span class="pl-k">:</span> K8108838

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(t)
SAC<span class="pl-k">.</span>SACtr

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">:delta</span>]
<span class="pl-c1">0.01</span>f0

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">:delta</span>] <span class="pl-k">=</span> <span class="pl-c1">0.02</span>
<span class="pl-c1">0.02</span></pre></div>
<p>(Note that SAC floating point headers are <code>Float32</code>s.)</p>
<p>The field <code>t</code> contains the trace as an <code>Array{Float32,1}</code>.  To change the trace,
just alter the <code>:t</code> index:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">:depmax</span>]
<span class="pl-c1">1.52064</span>f0

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">:t</span>] <span class="pl-k">+=</span> <span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> t<span class="pl-k">.</span>t
<span class="pl-c1">1000</span><span class="pl-k">-</span>element Array{Float32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.90272</span>
 <span class="pl-c1">0.90272</span>
 <span class="pl-c1">0.90144</span>
 ⋮      
 <span class="pl-c1">0.92832</span>
 <span class="pl-c1">0.9232</span> 
 <span class="pl-c1">0.9232</span> 

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">:depmax</span>]
<span class="pl-c1">2.52064</span>f0</pre></div>
<p>You can use the methods <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> to modify the traces without
needing to access <code>:t</code> directly, too:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">==</span> SAC<span class="pl-k">.</span><span class="pl-c1">sample</span>() <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> t <span class="pl-k">==</span> <span class="pl-c1">1</span><span class="pl-k">*</span>t
<span class="pl-c1">true</span></pre></div>
<p>You can also get or modify several header values at once:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> T <span class="pl-k">=</span> [SAC<span class="pl-k">.</span><span class="pl-c1">sample</span>() <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{SAC<span class="pl-k">.</span>SACtr,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(T)
Array{SAC<span class="pl-k">.</span>SACtr,<span class="pl-c1">1</span>}

julia<span class="pl-k">&gt;</span> T[<span class="pl-c1">:t0</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> Set time markers in t0</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> T[<span class="pl-c1">:t0</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">4.0</span>
 <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> T[<span class="pl-c1">:t0</span>] <span class="pl-k">+=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Move all time markers back by 2 s</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">4.0</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">6.0</span>
 <span class="pl-c1">7.0</span>

julia<span class="pl-k">&gt;</span> T[<span class="pl-c1">:kstnm</span>] <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>A1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>D4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>E5<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> Set station names</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{ASCIIString,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>A1<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>B2<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>C3<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>D4<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>E5<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-reading-files" class="anchor" aria-hidden="true" href="#reading-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading files</h3>
<p>The <code>read</code> function is not exported to avoid name clashes, so one must call
<code>SAC.read()</code>.   For example, to load a single file, do</p>
<div class="highlight highlight-source-julia"><pre>t <span class="pl-k">=</span> SAC<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>XM.A01E.HHZ.SAC<span class="pl-pds">"</span></span>)</pre></div>
<p>This loads the file <code>XM.A01E.HHZ.SAC</code> into the <code>SACtr</code> object <code>t</code>.</p>
<h3><a id="user-content-reading-with-wildcards" class="anchor" aria-hidden="true" href="#reading-with-wildcards"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading with wildcards</h3>
<p>As with SAC, one can use wildcards to read a set of files, e.g.:</p>
<div class="highlight highlight-source-julia"><pre>T, filenames <span class="pl-k">=</span> <span class="pl-c1">read_wild</span>(<span class="pl-s"><span class="pl-pds">"</span>*Z.SAC<span class="pl-pds">"</span></span>)</pre></div>
<p>An array of <code>SACtr</code>, <code>T</code>, is returned as well as a list of matching file names
in <code>filenames</code>.</p>
<h3><a id="user-content-writing-files" class="anchor" aria-hidden="true" href="#writing-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writing files</h3>
<p>Use the exported <code>write</code> method, passing a <code>SACtr</code> object and the file name, or
an array of <code>SACtr</code> and filenames</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">write</span>(t, <span class="pl-s"><span class="pl-pds">"</span>file.SAC<span class="pl-pds">"</span></span>)
<span class="pl-c1">write</span>(T, filenames)</pre></div>
<h3><a id="user-content-processing" class="anchor" aria-hidden="true" href="#processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Processing</h3>
<p>A number of common processing steps are already implemented as methods, such as
<code>lowpass!</code>, <code>taper!</code>, <code>envelope!</code> and so on.  In many cases, methods which have
similar names to SAC commands can also be used with the SAC short forms.  For
instance, <code>bandpass!</code> and <code>bp!</code> are the same.</p>
<p>Note that as is convention in Julia, these commands end with an exclamation
mark (!) and modify the trace in-place.  Copying versions of these commands are
available and do not have an exclamation mark (e.g., <code>lowpass</code>, <code>taper</code>, etc.).</p>
<h3><a id="user-content-file-endianness" class="anchor" aria-hidden="true" href="#file-endianness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>File endianness</h3>
<p><a href="http://www1.gly.bris.ac.uk/~george/sac-bugs.html" rel="nofollow">SAC/BRIS</a> expects files to
always be in big-endian format;
<a href="http://ds.iris.edu/ds/nodes/dmc/software/downloads/sac/" rel="nofollow">SAC/IRIS</a> expects them
in the same endianness as the machine.  SAC.jl is agnostic and will both read
and write in either endianness, but generally prefers to stick to big-endian,
for compatibilty with SAC/BRIS.</p>
<h3><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plotting</h3>
<p>A companion repo, <a href="https://github.com/anowacki/SACPlot.jl"><code>SACPlot</code></a>
can be used to perform some of the plotting that SAC can do.</p>
<h2><a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting help</h2>
<p>Functions are documented, so at the REPL type <code>?</code> to get a <code>help?&gt;</code> prompt,
and type the name of the function:</p>
<div class="highlight highlight-source-julia"><pre>help?<span class="pl-k">&gt;</span> bandpass!
search<span class="pl-k">:</span> bandpass! bandpass

  <span class="pl-c1">bandpass!</span>(s<span class="pl-k">::</span><span class="pl-c1">SACtr</span>, c1, c2; ftype<span class="pl-k">=</span><span class="pl-c1">:butterworth</span>, npoles<span class="pl-k">=</span><span class="pl-c1">2</span>, passes<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">-&gt;</span> s

  Perform a bandpass filter on the SAC trace s, between frequency corners c1 and c2,
  returning the modified trace.

  Select type of filter with ftype<span class="pl-k">:</span> current options are<span class="pl-k">:</span> Symbol[<span class="pl-c1">:butterworth</span>]<span class="pl-k">.</span> Set
  number of poles with npoles.

  passes may be <span class="pl-c1">1</span> (forward) or <span class="pl-c1">2</span> (forward and reverse).</pre></div>
<h3><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h3>
<p>Documentation is a work in progress, but all useful commands are documented.
To see the list of commands, check the code, or in the REPL type <code>SAC.</code> then
press tab a couple of times to see all the module methods and variables.
Calling up the interactive help will give a useful description of each.</p>
<h2><a id="user-content-other-software" class="anchor" aria-hidden="true" href="#other-software"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other software</h2>
<ul>
<li>If you use Fortran, then you should investigate the following modules:
<ul>
<li><a href="https://github.com/jwookey/sacio90"><code>sacio90</code></a></li>
<li><code>f90sac</code> in the <a href="https://github.com/anowacki/seismo-fortran">seismo-fortran</a>
repo, inspired by the James Wookey original above.</li>
</ul>
</li>
<li>If you use Python, use <a href="https://github.com/obspy/obspy/wiki">ObsPy</a>.</li>
<li>If you use MATLAB, use <a href="https://github.com/jwookey/msac"><code>msac</code></a>.</li>
</ul>
</article></div>