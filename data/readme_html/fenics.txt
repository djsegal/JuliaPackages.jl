<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fenicsjl-finite-element-pde-solving-in-julia" class="anchor" aria-hidden="true" href="#fenicsjl-finite-element-pde-solving-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FEniCS.jl: Finite Element PDE Solving in Julia</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/FEniCS/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">FEniCS.jl is a wrapper for the FEniCS library for finite element discretizations
of PDEs. This wrapper includes three parts:</p>
<ol dir="auto">
<li>Installation and direct access to FEniCS via a Conda installation. Alternatively, one may use their current <a href="https://fenicsproject.org/download/" rel="nofollow">FEniCS installation</a>.</li>
<li>A low-level development API and provides some functionality to make directly dealing with the library a little bit easier, but still requires knowledge of FEniCS itself. Interfaces have been provided for the main functions and their attributes, and instructions to add further ones can be <a href="https://gist.github.com/ysimillides/160bbf50a7e99d6656398aee48c88ef7">found here</a>.</li>
<li>A high-level API for usage with <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations</a>. An example can be seen <a href="https://github.com/JuliaDiffEq/FEniCS.jl/blob/master/examples/heat_equation.jl">solving the heat equation with high order adaptive timestepping</a>.</li>
</ol>
<p dir="auto">Various <a href="https://gist.github.com/ysimillides/20761c511a8807ae11c2b9e70606985e">gists/jupyter</a> notebooks have been created to provide a brief overview of the overall functionality, and of any differences between the Pythonic FEniCS and the Julian wrapper.
DifferentialEquations.jl ecosystem. <a href="https://www.paraview.org/" rel="nofollow">Paraview</a> can also be used to visualize various results, just like in FEniCS (see below).</p>
<h2 dir="auto"><a id="user-content-installation-instructions" class="anchor" aria-hidden="true" href="#installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation Instructions</h2>
<p dir="auto">To get the wrapper on your system, providing a FEniCS installation exists, follow the below steps:</p>
<ol dir="auto">
<li>
<p dir="auto">Add PyCall with the correct Python environment corresponding to FEniCS. Then simply add FEniCS.jl using Pkg.add("FEniCS")</p>
</li>
<li>
<p dir="auto">Alternatively, one can install <a href="https://www.docker.com/" rel="nofollow">Docker</a> and then run the following command</p>
</li>
</ol>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="docker run -ti cmhyett/julia-fenics"><pre>docker run -ti cmhyett/julia-fenics</pre></div>
<p dir="auto">and once inside, Julia can be accessed by calling</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia"><pre>julia</pre></div>
<p dir="auto">Once inside the Julia environment, simply add FEniCS with Pkg.add("FEniCS"). All other dependencies are handled by the docker image.</p>
<p dir="auto">This wrapper was originally started via the <a href="https://summerofcode.withgoogle.com/projects/#5988523772477440" rel="nofollow">Google Summer of Code program</a> along with the help of Chris Rackauckas and Bart Janssens. This was continued via <a href="https://summerofcode.withgoogle.com/projects/#6466456292687872" rel="nofollow">GSoC '18</a> along with the help of Chris Rackauckas and Timo Betcke.</p>
<h2 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h2>
<p dir="auto">Below is a small demonstration of how a user would use our code to solve the Poisson equation with Dirichlet conditions. This directly mirrors one of the <strong><a href="https://github.com/hplgit/fenics-tutorial/blob/master/pub/python/vol1/ft01_poisson.py">tutorials</a></strong> FEniCS provides</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FEniCS
mesh = UnitSquareMesh(8,8)
V = FunctionSpace(mesh,&quot;P&quot;,1)
u_D = Expression(&quot;1+x[0]*x[0]+2*x[1]*x[1]&quot;, degree=2)
u = TrialFunction(V)
bc1 = DirichletBC(V,u_D, &quot;on_boundary&quot;)
v = TestFunction(V)
f = Constant(-6.0)
a = dot(grad(u),grad(v))*dx
L = f*v*dx
U = FeFunction(V)
lvsolve(a,L,U,bc1) #linear variational solver
errornorm(u_D, U, norm=&quot;L2&quot;)
get_array(L) #this returns an array for the stiffness matrix
get_array(U) #this returns an array for the solution values
vtkfile = File(&quot;poisson/solution.pvd&quot;)
vtkfile &lt;&lt; U.pyobject #exports the solution to a vtkfile"><pre><span class="pl-k">using</span> FEniCS
mesh <span class="pl-k">=</span> <span class="pl-c1">UnitSquareMesh</span>(<span class="pl-c1">8</span>,<span class="pl-c1">8</span>)
V <span class="pl-k">=</span> <span class="pl-c1">FunctionSpace</span>(mesh,<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>)
u_D <span class="pl-k">=</span> <span class="pl-c1">Expression</span>(<span class="pl-s"><span class="pl-pds">"</span>1+x[0]*x[0]+2*x[1]*x[1]<span class="pl-pds">"</span></span>, degree<span class="pl-k">=</span><span class="pl-c1">2</span>)
u <span class="pl-k">=</span> <span class="pl-c1">TrialFunction</span>(V)
bc1 <span class="pl-k">=</span> <span class="pl-c1">DirichletBC</span>(V,u_D, <span class="pl-s"><span class="pl-pds">"</span>on_boundary<span class="pl-pds">"</span></span>)
v <span class="pl-k">=</span> <span class="pl-c1">TestFunction</span>(V)
f <span class="pl-k">=</span> <span class="pl-c1">Constant</span>(<span class="pl-k">-</span><span class="pl-c1">6.0</span>)
a <span class="pl-k">=</span> <span class="pl-c1">dot</span>(<span class="pl-c1">grad</span>(u),<span class="pl-c1">grad</span>(v))<span class="pl-k">*</span>dx
L <span class="pl-k">=</span> f<span class="pl-k">*</span>v<span class="pl-k">*</span>dx
U <span class="pl-k">=</span> <span class="pl-c1">FeFunction</span>(V)
<span class="pl-c1">lvsolve</span>(a,L,U,bc1) <span class="pl-c"><span class="pl-c">#</span>linear variational solver</span>
<span class="pl-c1">errornorm</span>(u_D, U, norm<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>L2<span class="pl-pds">"</span></span>)
<span class="pl-c1">get_array</span>(L) <span class="pl-c"><span class="pl-c">#</span>this returns an array for the stiffness matrix</span>
<span class="pl-c1">get_array</span>(U) <span class="pl-c"><span class="pl-c">#</span>this returns an array for the solution values</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>poisson/solution.pvd<span class="pl-pds">"</span></span>)
vtkfile <span class="pl-k">&lt;&lt;</span> U<span class="pl-k">.</span>pyobject <span class="pl-c"><span class="pl-c">#</span>exports the solution to a vtkfile</span></pre></div>
<p dir="auto">We can also plot the solution (this relies on FEniCS backend for plotting) or import it from our file into Paraview:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import PyPlot # plotting won't work if PyPlot is not imported
FEniCS.Plot(U)
FEniCS.Plot(mesh)
"><pre><span class="pl-k">import</span> PyPlot <span class="pl-c"><span class="pl-c">#</span> plotting won't work if PyPlot is not imported</span>
FEniCS<span class="pl-k">.</span><span class="pl-c1">Plot</span>(U)
FEniCS<span class="pl-k">.</span><span class="pl-c1">Plot</span>(mesh)
</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/16087601/34915339-b77e8694-f91c-11e7-9ae1-db1e114a177a.png"><img src="https://user-images.githubusercontent.com/16087601/34915339-b77e8694-f91c-11e7-9ae1-db1e114a177a.png" alt="alt text" title="Solution" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/16087601/34915337-b2c0aede-f91c-11e7-986a-5658d23c262e.png"><img src="https://user-images.githubusercontent.com/16087601/34915337-b2c0aede-f91c-11e7-986a-5658d23c262e.png" alt="alt text" title="Square Mesh" style="max-width: 100%;"></a></p>
<p dir="auto">See the examples directory for more examples.</p>
</article></div>