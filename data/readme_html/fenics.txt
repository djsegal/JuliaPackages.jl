<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fenicsjl" class="anchor" aria-hidden="true" href="#fenicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FEniCS.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/833b89353967086ef3bf7e1d470c469fd93cc80696ae173ffc5fbcf401d2f5af/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/SciML/FEniCS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b099b49a7c0c23c1ce044cc537ec1e93f841be4418338d143a7c01f0f01a5a4/68747470733a2f2f7472617669732d63692e6f72672f5363694d4c2f46456e6943532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SciML/FEniCS.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/FEniCS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/589278693ab37777624d39901d1fea05dd1310e56892095a27f4efea7ffa3a7e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614469666645712f46456e6943532e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaDiffEq/FEniCS.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaDiffEq/FEniCS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2bd93fd14ddd8a13540eb09344d0ba1a31f16b372543ace9ea35896656425802/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614469666645712f46456e6943532e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaDiffEq/FEniCS.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>FEniCS.jl is a wrapper for the FEniCS library for finite element discretizations
of PDEs. This wrapper includes three parts:</p>
<ol>
<li>Installation and direct access to FEniCS via a Conda installation. Alternatively one may use their current <a href="https://fenicsproject.org/download/" rel="nofollow">FEniCS installation</a>.</li>
<li>A low-level development API and provides some functionality to make directly dealing with the library a little bit easier, but still requires knowledge of FEniCS itself. Interfaces have been provided for the main functions and their attributes, and instructions to add further ones can be <a href="https://gist.github.com/ysimillides/160bbf50a7e99d6656398aee48c88ef7">found here</a>.</li>
<li>A high-level API for usage with <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations</a>. An example can be seen <a href="https://github.com/JuliaDiffEq/FEniCS.jl/blob/master/examples/heat_equation.jl">solving the heat equation with high order adaptive timestepping</a>.</li>
</ol>
<p>Various <a href="https://gist.github.com/ysimillides/20761c511a8807ae11c2b9e70606985e">gists/jupyter</a> notebooks have been created to provide a brief overview of the overall functionality, and of any differences between the pythonic FEniCS and the julian wrapper.
DifferentialEquations.jl ecosystem. <a href="https://www.paraview.org/" rel="nofollow">Paraview</a> can also be used to visualize various results just like in FEniCS (see below).</p>
<h2><a id="user-content-installation-instructions" class="anchor" aria-hidden="true" href="#installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation Instructions</h2>
<p>To get the wrapper on your system,providing a FEniCS installation exists, follow the below steps:</p>
<ol>
<li>
<p>Add PyCall with the correct python environment corresponding to FEniCS. Then simply add FEniCS.jl using Pkg.add("FEniCS")</p>
</li>
<li>
<p>Alternatively, one can install <a href="https://www.docker.com/" rel="nofollow">Docker</a> and then run the following command</p>
</li>
</ol>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="docker run -ti ysimillides/fenics-julia-docker 
"><pre>docker run -ti ysimillides/fenics-julia-docker </pre></div>
<p>and once inside, 'julia' can be accessed by calling</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia
"><pre>julia</pre></div>
<p>Once inside the julia environment, simply add FEniCS with Pkg.add("FEniCS"). All other dependencies are handled by the docker image.</p>
<p>Note: Any suggestions/improvements/comments etc are always welcomed and can be made either on GitHub or via the gitter channel above.
This wrapper was originally started via the <a href="https://summerofcode.withgoogle.com/projects/#5988523772477440" rel="nofollow">Google Summer of Code program</a> along with the help of Chris Rackauckas and Bart Janssens. This was continued via <a href="https://summerofcode.withgoogle.com/projects/#6466456292687872" rel="nofollow">GSoC '18</a> along with the help of Chris Rackauckas and Timo Betcke.</p>
<h2><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tutorial</h2>
<p>Below is a small demonstration of how a user would use our code to solve the Poisson equation with Dirichlet conditions. This directly mirrors one of the <strong><a href="https://github.com/hplgit/fenics-tutorial/blob/master/pub/python/vol1/ft01_poisson.py">tutorials</a></strong> FEniCS provides</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FEniCS
mesh = UnitSquareMesh(8,8) 
V = FunctionSpace(mesh,&quot;P&quot;,1)
u_D = Expression(&quot;1+x[0]*x[0]+2*x[1]*x[1]&quot;, degree=2)
u = TrialFunction(V)
bc1 = DirichletBC(V,u_D, &quot;on_boundary&quot;)
v = TestFunction(V)
f = Constant(-6.0)
a = dot(grad(u),grad(v))*dx
L = f*v*dx
U = FeFunction(V)
lvsolve(a,L,U,bc1) #linear variational solver
errornorm(u_D, U, norm=&quot;L2&quot;)
get_array(L) #this returns an array for the stiffness matrix
get_array(U) #this returns an array for the solution values
vtkfile = File(&quot;poisson/solution.pvd&quot;)
vtkfile &lt;&lt; U.pyobject #exports the solution to a vtkfile
"><pre><span class="pl-k">using</span> FEniCS
mesh <span class="pl-k">=</span> <span class="pl-c1">UnitSquareMesh</span>(<span class="pl-c1">8</span>,<span class="pl-c1">8</span>) 
V <span class="pl-k">=</span> <span class="pl-c1">FunctionSpace</span>(mesh,<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>)
u_D <span class="pl-k">=</span> <span class="pl-c1">Expression</span>(<span class="pl-s"><span class="pl-pds">"</span>1+x[0]*x[0]+2*x[1]*x[1]<span class="pl-pds">"</span></span>, degree<span class="pl-k">=</span><span class="pl-c1">2</span>)
u <span class="pl-k">=</span> <span class="pl-c1">TrialFunction</span>(V)
bc1 <span class="pl-k">=</span> <span class="pl-c1">DirichletBC</span>(V,u_D, <span class="pl-s"><span class="pl-pds">"</span>on_boundary<span class="pl-pds">"</span></span>)
v <span class="pl-k">=</span> <span class="pl-c1">TestFunction</span>(V)
f <span class="pl-k">=</span> <span class="pl-c1">Constant</span>(<span class="pl-k">-</span><span class="pl-c1">6.0</span>)
a <span class="pl-k">=</span> <span class="pl-c1">dot</span>(<span class="pl-c1">grad</span>(u),<span class="pl-c1">grad</span>(v))<span class="pl-k">*</span>dx
L <span class="pl-k">=</span> f<span class="pl-k">*</span>v<span class="pl-k">*</span>dx
U <span class="pl-k">=</span> <span class="pl-c1">FeFunction</span>(V)
<span class="pl-c1">lvsolve</span>(a,L,U,bc1) <span class="pl-c"><span class="pl-c">#</span>linear variational solver</span>
<span class="pl-c1">errornorm</span>(u_D, U, norm<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>L2<span class="pl-pds">"</span></span>)
<span class="pl-c1">get_array</span>(L) <span class="pl-c"><span class="pl-c">#</span>this returns an array for the stiffness matrix</span>
<span class="pl-c1">get_array</span>(U) <span class="pl-c"><span class="pl-c">#</span>this returns an array for the solution values</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>poisson/solution.pvd<span class="pl-pds">"</span></span>)
vtkfile <span class="pl-k">&lt;&lt;</span> U<span class="pl-k">.</span>pyobject <span class="pl-c"><span class="pl-c">#</span>exports the solution to a vtkfile</span></pre></div>
<p>We can also plot the solution (this relies on FEniCS backend for plotting) or import it from our file into Paraview:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import PyPlot # plotting won't work if PyPlot is not imported
FEniCS.Plot(U)
FEniCS.Plot(mesh)

"><pre><span class="pl-k">import</span> PyPlot <span class="pl-c"><span class="pl-c">#</span> plotting won't work if PyPlot is not imported</span>
FEniCS<span class="pl-k">.</span><span class="pl-c1">Plot</span>(U)
FEniCS<span class="pl-k">.</span><span class="pl-c1">Plot</span>(mesh)
</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16087601/34915339-b77e8694-f91c-11e7-9ae1-db1e114a177a.png"><img src="https://user-images.githubusercontent.com/16087601/34915339-b77e8694-f91c-11e7-9ae1-db1e114a177a.png" alt="alt text" title="Solution" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16087601/34915337-b2c0aede-f91c-11e7-986a-5658d23c262e.png"><img src="https://user-images.githubusercontent.com/16087601/34915337-b2c0aede-f91c-11e7-986a-5658d23c262e.png" alt="alt text" title="Square Mesh" style="max-width:100%;"></a></p>
<p>See the examples directory for more examples.</p>
</article></div>