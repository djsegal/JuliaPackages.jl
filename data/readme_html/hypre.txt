<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hyprejl" class="anchor" aria-hidden="true" href="#hyprejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HYPRE.jl</h1>
<table>
<thead>
<tr>
<th align="left"><strong>Documentation</strong></th>
<th align="left"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="https://fredrikekre.github.io/HYPRE.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/aba935209519663234b613c2733e221c0d41331ecf8b6e39217d142ac6b19b2f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c6525323072656c656173652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable%20release-blue.svg" style="max-width: 100%;"></a></td>
<td align="left"><a href="https://github.com/fredrikekre/HYPRE.jl/actions?query=workflow%3ACI"><img src="https://github.com/fredrikekre/HYPRE.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><a href="https://julialang.org/" rel="nofollow">Julia</a> interface to <a href="https://github.com/hypre-space/hypre">HYPRE</a> ("high performance preconditioners and solvers
featuring multigrid methods for the solution of large, sparse linear systems of equations on
massively parallel computers").</p>
<p dir="auto">While the main purpose of HYPRE is to solve problems on multiple cores, it can also be used
for single core problems. HYPRE.jl aims to make it easy to use both modes of operation, with
an interface that should be familiar to Julia programmers. This README includes some basic
examples -- refer to the <a href="https://fredrikekre.github.io/HYPRE.jl/" rel="nofollow">documentation</a> for more details, and for information
about the included solvers and preconditioners and how to configure them.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">HYPRE.jl can be installed from the Pkg REPL (press <code>]</code> in the Julia REPL to enter):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1) pkg&gt; add HYPRE"><pre class="notranslate"><code>(@v1) pkg&gt; add HYPRE
</code></pre></div>
<p dir="auto">To configure MPI, see the <a href="https://juliaparallel.org/MPI.jl/" rel="nofollow">documentation for MPI.jl</a>.</p>
<h2 dir="auto"><a id="user-content-changes" class="anchor" aria-hidden="true" href="#changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Changes</h2>
<p dir="auto">All notable changes are documented in <a href="CHANGELOG.md">CHANGELOG.md</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Some basic usage examples are shown below. See the <a href="https://fredrikekre.github.io/HYPRE.jl/" rel="nofollow">documentation</a> for details.</p>
<h3 dir="auto"><a id="user-content-example-single-core-solve-with-standard-sparse-matrices" class="anchor" aria-hidden="true" href="#example-single-core-solve-with-standard-sparse-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Single-core solve with standard sparse matrices</h3>
<p dir="auto">It is possible to use Julia's standard sparse arrays (<code>SparseMatrixCSC</code> from the
<a href="https://github.com/JuliaSparse/SparseArrays.jl">SparseArrays.jl</a> standard library, and <code>SparseMatrixCSR</code> from the
<a href="https://github.com/gridap/SparseMatricesCSR.jl">SparseMatricesCSR.jl</a> package) directly in HYPRE.jl. For example, to solve
<code>Ax = b</code> with conjugate gradients:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Initialize linear system
A = SparseMatrixCSC(...)
b = Vector(...)

# Create a conjugate gradients solver
cg = HYPRE.PCG()

# Compute the solution
x = HYPRE.solve(cg, A, b)"><pre><span class="pl-c"><span class="pl-c">#</span> Initialize linear system</span>
A <span class="pl-k">=</span> <span class="pl-c1">SparseMatrixCSC</span>(<span class="pl-k">...</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Vector</span>(<span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> Create a conjugate gradients solver</span>
cg <span class="pl-k">=</span> HYPRE<span class="pl-k">.</span><span class="pl-c1">PCG</span>()

<span class="pl-c"><span class="pl-c">#</span> Compute the solution</span>
x <span class="pl-k">=</span> HYPRE<span class="pl-k">.</span><span class="pl-c1">solve</span>(cg, A, b)</pre></div>
<h3 dir="auto"><a id="user-content-example-multi-core-solve-using-partitionedarraysjl" class="anchor" aria-hidden="true" href="#example-multi-core-solve-using-partitionedarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Multi-core solve using PartitionedArrays.jl</h3>
<p dir="auto">For multi-core problems it is possible to use <a href="https://github.com/fverdugo/PartitionedArrays.jl">PartitionedArrays.jl</a> directly
with HYPRE.jl. Once the linear system is setup the solver interface is identical. For
example, to solve <code>Ax = b</code> with bi-conjugate gradients and an algebraic multigrid
preconditioner:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Initialize linear system
A = PSparseMatrix(...)
b = PVector(...)

# Create preconditioner
precond = BoomerAMG()

# Create a bi-conjugate gradients solver
bicg = HYPRE.BiCGSTAB(; Precond = precond)

# Compute the solution
x = HYPRE.solve(bicg, A, b)"><pre><span class="pl-c"><span class="pl-c">#</span> Initialize linear system</span>
A <span class="pl-k">=</span> <span class="pl-c1">PSparseMatrix</span>(<span class="pl-k">...</span>)
b <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> Create preconditioner</span>
precond <span class="pl-k">=</span> <span class="pl-c1">BoomerAMG</span>()

<span class="pl-c"><span class="pl-c">#</span> Create a bi-conjugate gradients solver</span>
bicg <span class="pl-k">=</span> HYPRE<span class="pl-k">.</span><span class="pl-c1">BiCGSTAB</span>(; Precond <span class="pl-k">=</span> precond)

<span class="pl-c"><span class="pl-c">#</span> Compute the solution</span>
x <span class="pl-k">=</span> HYPRE<span class="pl-k">.</span><span class="pl-c1">solve</span>(bicg, A, b)</pre></div>
</article></div>