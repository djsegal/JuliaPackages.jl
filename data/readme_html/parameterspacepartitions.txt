<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="resources/psp_logo.png"><img src="resources/psp_logo.png" alt="" width="550" height="180" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-parameterspacepartitions" class="anchor" aria-hidden="true" href="#parameterspacepartitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParameterSpacePartitions</h1>
<p dir="auto">Parameter space partitioning is a model assessment method for mapping regions of the parameter space to qualitative data patterns. Parameter space partitioning uses MCMC sampling to explore the parameter space. Each chain searches a region of the parameter space for a specific pattern. As the space is sampled, a new chain is created for each newly discovered pattern. On each iteration, a proposal is sampled uniformly from the surface of a hyperspere with the same number of dimensions as the parameter space.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<p dir="auto">In this simple example, parameter space partitioning is applied to a cube with regions of equal volume.</p>
<h2 dir="auto"><a id="user-content-load-dependencies" class="anchor" aria-hidden="true" href="#load-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load Dependencies</h2>
<p dir="auto">The first step is to the load dependences into your session.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributions, ParameterSpacePartitions
using ParameterSpacePartitions.TestModels
using Random, DataFrames
Random.seed!(544)"><pre><span class="pl-k">using</span> Distributions, ParameterSpacePartitions
<span class="pl-k">using</span> ParameterSpacePartitions<span class="pl-k">.</span>TestModels
<span class="pl-k">using</span> Random, DataFrames
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">544</span>)</pre></div>
<h2 dir="auto"><a id="user-content-model-function" class="anchor" aria-hidden="true" href="#model-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model Function</h2>
<p dir="auto">Next, we define a model that accepts a vector of parameters and returns data predictions. The function <code>model</code> is imported above from <code>TestModels</code>, but is presented below for illustration. In this simple example, the model returns the parameter inputs. In more substantive model, the returned value will be the model predictions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model(parms, args...; kwargs...) = parms "><pre><span class="pl-en">model</span>(parms, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> parms </pre></div>
<h2 dir="auto"><a id="user-content-pattern-function" class="anchor" aria-hidden="true" href="#pattern-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pattern Function</h2>
<p dir="auto">A second function categorizes the predicted data into a qualitative pattern. At minimum, the pattern function must recieve a data input. In this example, the pattern function <code>p_fun</code> is imported from <code>TestModels</code>. The function is presented below for illustration. <code>p_fun</code> requires the location (i.e. parameters) and <code>HyperCube</code> object, which contains  partition boundaries (which is the same for each dimension). <code>p_fun</code> categorizes <code>location</code> on each dimension and returns a vector representing a pattern. For example, the pattern <code>[1,2,1]</code> indicates the <code>location</code> is in the partition for which the x axis is 1, the y axis is 2, and the z axis is 1.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function p_fun(location, hypercube::HyperCube, args...; kwargs...)
    p_bounds = hypercube.p_bounds
    nb = length(p_bounds)
    nd = length(location)
    vals = fill(-100, nd)
    for j in 1:nd
        for i in 1:(nb-1) 
            if (location[j] ≥ p_bounds[i]) &amp;&amp; (location[j] ≤ p_bounds[i+1])
                vals[j] = i 
                continue
            end
        end
    end
    return vals
end"><pre><span class="pl-k">function</span> <span class="pl-en">p_fun</span>(location, hypercube<span class="pl-k">::</span><span class="pl-c1">HyperCube</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)
    p_bounds <span class="pl-k">=</span> hypercube<span class="pl-k">.</span>p_bounds
    nb <span class="pl-k">=</span> <span class="pl-c1">length</span>(p_bounds)
    nd <span class="pl-k">=</span> <span class="pl-c1">length</span>(location)
    vals <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">100</span>, nd)
    <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nd
        <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>(nb<span class="pl-k">-</span><span class="pl-c1">1</span>) 
            <span class="pl-k">if</span> (location[j] <span class="pl-k">≥</span> p_bounds[i]) <span class="pl-k">&amp;&amp;</span> (location[j] <span class="pl-k">≤</span> p_bounds[i<span class="pl-k">+</span><span class="pl-c1">1</span>])
                vals[j] <span class="pl-k">=</span> i 
                <span class="pl-k">continue</span>
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> vals
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-model-configuration" class="anchor" aria-hidden="true" href="#model-configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model Configuration</h2>
<p dir="auto">Below, we will set <code>n_dims</code> and <code>n_part</code> to create a cube with a total of 2^3 = 8 regions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# dimensions of the hypbercue
n_dims = 3
# partitions per dimension
n_part = 2"><pre><span class="pl-c"><span class="pl-c">#</span> dimensions of the hypbercue</span>
n_dims <span class="pl-k">=</span> <span class="pl-c1">3</span>
<span class="pl-c"><span class="pl-c">#</span> partitions per dimension</span>
n_part <span class="pl-k">=</span> <span class="pl-c1">2</span></pre></div>
<h1 dir="auto"><a id="user-content-boundaries" class="anchor" aria-hidden="true" href="#boundaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Boundaries</h1>
<p dir="auto">In the code below, <code>bounds</code> contains the upper and lower boundaries for each dimension. In addition, we must also define a <code>HyperCube</code> object containing the boundaries for each partition. The boundaries are stored in a variable called <code>p_bounds</code>.  In this example, the partitions are equally spaced along each dimension of the unit cube. Alternatively, we could use unequal spacing to increase the difficulty of exploring the parameter space.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# partition boundaries
bounds = fill((0, 1), n_dims)
p_bounds = range(0, 1, n_part + 1)
hypercube = HyperCube(p_bounds)"><pre><span class="pl-c"><span class="pl-c">#</span> partition boundaries</span>
bounds <span class="pl-k">=</span> <span class="pl-c1">fill</span>((<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), n_dims)
p_bounds <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, n_part <span class="pl-k">+</span> <span class="pl-c1">1</span>)
hypercube <span class="pl-k">=</span> <span class="pl-c1">HyperCube</span>(p_bounds)</pre></div>
<h2 dir="auto"><a id="user-content-starting-points" class="anchor" aria-hidden="true" href="#starting-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Starting Points</h2>
<p dir="auto">The sampling algorim requires a starting point to begin exploring the parameter space. The starting points must be wrapped in a vector. The starting points are sampled uniformly within the unit cube, using <code>bounds</code> to ensure the starting point is within allowable ranges. Although one starting point is sufficient for the present example, seeding the sampling algorithm with multiple starting points can improve performance.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# number of starting points
n_start = 1
# sample function
sample(bounds) = map(b -&gt; rand(Uniform(b...)), bounds)
# initial starting points
init_parms = map(_ -&gt; sample(bounds), 1:n_start)"><pre><span class="pl-c"><span class="pl-c">#</span> number of starting points</span>
n_start <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c"><span class="pl-c">#</span> sample function</span>
<span class="pl-en">sample</span>(bounds) <span class="pl-k">=</span> <span class="pl-c1">map</span>(b <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Uniform</span>(b<span class="pl-k">...</span>)), bounds)
<span class="pl-c"><span class="pl-c">#</span> initial starting points</span>
init_parms <span class="pl-k">=</span> <span class="pl-c1">map</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">sample</span>(bounds), <span class="pl-c1">1</span><span class="pl-k">:</span>n_start)</pre></div>
<h2 dir="auto"><a id="user-content-option-configuration" class="anchor" aria-hidden="true" href="#option-configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Option Configuration</h2>
<p dir="auto">We can configure options to define and improve the performance of the algorithm. The search radius is an important configuration. The challenge is to balance the tradeoff between exploration and exploitation. If the radius is too small, it will stay in one region (or a sub-space of a region), and will fail to find new regions. By contrast, if the radius is too large, many regions will be found, but will not be well defined. Pitt et al. noted that an acceptance rate of 20% may work well in many cases, but this is a heuristic rather than a hard requirement. The options also stores the bounds and initial parameters. Threading can be enabled by setting <code>parallel=true</code>. Some exploration revealed that threading becomes advantageous once the evaluation time reaches 1 millisecond or longer. Otherwise, threading overhead will reduce the speed of the algorithm.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="options = Options(;
    radius = .10,
    bounds,
    n_iters = 1000,
    init_parms
)"><pre>options <span class="pl-k">=</span> <span class="pl-c1">Options</span>(;
    radius <span class="pl-k">=</span> .<span class="pl-c1">10</span>,
    bounds,
    n_iters <span class="pl-k">=</span> <span class="pl-c1">1000</span>,
    init_parms
)</pre></div>
<p dir="auto">It is also possible to pass a custom adaption function via the keyword <code>adapt_radius!</code>. By default, the adaption function adjusts the radius to achieve a 40% acceptance rate. Additional information for configuring the default adaption function can be found via the help feature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="? adapt!"><pre>? adapt!</pre></div>
<h2 dir="auto"><a id="user-content-find-partitions" class="anchor" aria-hidden="true" href="#find-partitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Find Partitions</h2>
<p dir="auto">Now that the requisite functions and options have been specified, we can now explore the parameter space.
The function <code>find_partitions</code> accepts the <code>model</code> function, the pattern function <code>p_fun</code>, the options object, and additional arguments and keyword arguments for <code>p_fun</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="results = find_partitions(
    model, 
    p_fun, 
    options,
    hypercube,
)"><pre>results <span class="pl-k">=</span> <span class="pl-c1">find_partitions</span>(
    model, 
    p_fun, 
    options,
    hypercube,
)</pre></div>
<p dir="auto"><code>results</code> is a vector of <code>Results</code> objects containing the following information:</p>
<ul dir="auto">
<li><code>iter</code>: the iteration of the algorithm</li>
<li><code>chain_id</code>: an index of the chain, i.e. 2 is the second chain</li>
<li><code>parms</code>: a vector of parameters</li>
<li><code>pattern</code>: the target pattern of the chain</li>
<li><code>acceptance</code>: a vector indicating whether a proposal was accepted. If accepted, <code>parms</code> is the accepted proposal. If not accepted, <code>parms</code> is the same as the previous iteration.</li>
</ul>
<h2 dir="auto"><a id="user-content-results" class="anchor" aria-hidden="true" href="#results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Results</h2>
<p dir="auto">To facilitate the analysis, we will convert the results to a <code>DataFrame</code> and destructure the parameter vector into individual columns---one per parameter.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df = DataFrame(results)
parm_names = Symbol.(&quot;p&quot;,1:n_dims)
transform!(
    df, 
    :parms =&gt; identity =&gt; parm_names
)"><pre>df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(results)
parm_names <span class="pl-k">=</span> <span class="pl-c1">Symbol</span>.(<span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span><span class="pl-k">:</span>n_dims)
<span class="pl-c1">transform!</span>(
    df, 
    <span class="pl-c1">:parms</span> <span class="pl-k">=&gt;</span> identity <span class="pl-k">=&gt;</span> parm_names
)</pre></div>
<p dir="auto">The next code block finds the minimum and maximum of each partition.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="groups = groupby(df, :pattern)
summary = combine(groups, 
    :p1 =&gt; minimum, :p1 =&gt; maximum, 
    :p2 =&gt; minimum, :p2 =&gt; maximum,
    :p3 =&gt; minimum, :p3 =&gt; maximum
) |&gt; sort"><pre>groups <span class="pl-k">=</span> <span class="pl-c1">groupby</span>(df, <span class="pl-c1">:pattern</span>)
summary <span class="pl-k">=</span> <span class="pl-c1">combine</span>(groups, 
    <span class="pl-c1">:p1</span> <span class="pl-k">=&gt;</span> minimum, <span class="pl-c1">:p1</span> <span class="pl-k">=&gt;</span> maximum, 
    <span class="pl-c1">:p2</span> <span class="pl-k">=&gt;</span> minimum, <span class="pl-c1">:p2</span> <span class="pl-k">=&gt;</span> maximum,
    <span class="pl-c1">:p3</span> <span class="pl-k">=&gt;</span> minimum, <span class="pl-c1">:p3</span> <span class="pl-k">=&gt;</span> maximum
) <span class="pl-k">|&gt;</span> sort</pre></div>
<p dir="auto">As shown below, the algorithm found all 64 partitions. In addition, the size of the partition is approximately 1/2 = .50, which is what we expect.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="8×7 DataFrame
 Row │ pattern    p1_minimum   p1_maximum  p2_minimum   p2_maximum  p3_minimum   p3_maximum 
     │ Array…     Float64      Float64     Float64      Float64     Float64      Float64    
─────┼──────────────────────────────────────────────────────────────────────────────────────
   1 │ [1, 1, 1]  0.000790105    0.499221  0.00178227     0.499352  0.00264797     0.499415
   2 │ [1, 1, 2]  0.00156466     0.49663   0.000787114    0.499246  0.505483       0.99685
   3 │ [1, 2, 1]  0.00758579     0.497978  0.502377       0.996089  0.00252362     0.498483
   4 │ [1, 2, 2]  0.00173871     0.496333  0.500671       0.990669  0.500801       0.997695
   5 │ [2, 1, 1]  0.503185       0.993781  0.0100069      0.499649  0.00850261     0.499018
   6 │ [2, 1, 2]  0.506343       0.997044  0.00253407     0.498     0.508688       0.999747
   7 │ [2, 2, 1]  0.506839       0.999995  0.501297       0.999919  0.000102376    0.497726
   8 │ [2, 2, 2]  0.507059       0.999908  0.502          0.995823  0.503872       0.995448"><pre><span class="pl-c1">8</span><span class="pl-k">×</span><span class="pl-c1">7</span> DataFrame
 Row │ pattern    p1_minimum   p1_maximum  p2_minimum   p2_maximum  p3_minimum   p3_maximum 
     │ Array…     Float64      Float64     Float64      Float64     Float64      Float64    
─────┼──────────────────────────────────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.000790105</span>    <span class="pl-c1">0.499221</span>  <span class="pl-c1">0.00178227</span>     <span class="pl-c1">0.499352</span>  <span class="pl-c1">0.00264797</span>     <span class="pl-c1">0.499415</span>
   <span class="pl-c1">2</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.00156466</span>     <span class="pl-c1">0.49663</span>   <span class="pl-c1">0.000787114</span>    <span class="pl-c1">0.499246</span>  <span class="pl-c1">0.505483</span>       <span class="pl-c1">0.99685</span>
   <span class="pl-c1">3</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.00758579</span>     <span class="pl-c1">0.497978</span>  <span class="pl-c1">0.502377</span>       <span class="pl-c1">0.996089</span>  <span class="pl-c1">0.00252362</span>     <span class="pl-c1">0.498483</span>
   <span class="pl-c1">4</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.00173871</span>     <span class="pl-c1">0.496333</span>  <span class="pl-c1">0.500671</span>       <span class="pl-c1">0.990669</span>  <span class="pl-c1">0.500801</span>       <span class="pl-c1">0.997695</span>
   <span class="pl-c1">5</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.503185</span>       <span class="pl-c1">0.993781</span>  <span class="pl-c1">0.0100069</span>      <span class="pl-c1">0.499649</span>  <span class="pl-c1">0.00850261</span>     <span class="pl-c1">0.499018</span>
   <span class="pl-c1">6</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.506343</span>       <span class="pl-c1">0.997044</span>  <span class="pl-c1">0.00253407</span>     <span class="pl-c1">0.498</span>     <span class="pl-c1">0.508688</span>       <span class="pl-c1">0.999747</span>
   <span class="pl-c1">7</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.506839</span>       <span class="pl-c1">0.999995</span>  <span class="pl-c1">0.501297</span>       <span class="pl-c1">0.999919</span>  <span class="pl-c1">0.000102376</span>    <span class="pl-c1">0.497726</span>
   <span class="pl-c1">8</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.507059</span>       <span class="pl-c1">0.999908</span>  <span class="pl-c1">0.502</span>          <span class="pl-c1">0.995823</span>  <span class="pl-c1">0.503872</span>       <span class="pl-c1">0.995448</span></pre></div>
<h2 dir="auto"><a id="user-content-volume-estimation" class="anchor" aria-hidden="true" href="#volume-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Volume Estimation</h2>
<p dir="auto">The function <code>estimate_volume</code> approximates the volume of each region using an ellipsoid based
on the covariance of sampled points in the region.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="groups = groupby(df, :pattern)

df_volume = combine(
    groups,
    x -&gt; estimate_volume(
        model,
        p_fun, 
        x,  
        bounds,
        hypercube; 
        parm_names,
    )
)

df_volume.volume = df_volume.x1 / sum(df_volume.x1)"><pre>groups <span class="pl-k">=</span> <span class="pl-c1">groupby</span>(df, <span class="pl-c1">:pattern</span>)

df_volume <span class="pl-k">=</span> <span class="pl-c1">combine</span>(
    groups,
    x <span class="pl-k">-&gt;</span> <span class="pl-c1">estimate_volume</span>(
        model,
        p_fun, 
        x,  
        bounds,
        hypercube; 
        parm_names,
    )
)

df_volume<span class="pl-k">.</span>volume <span class="pl-k">=</span> df_volume<span class="pl-k">.</span>x1 <span class="pl-k">/</span> <span class="pl-c1">sum</span>(df_volume<span class="pl-k">.</span>x1)</pre></div>
<p dir="auto">As expected, the volume percentage estimates are close to 1/8 = .125.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="8×3 DataFrame
 Row │ pattern    x1         volume   
     │ Array…     Float64    Float64  
─────┼────────────────────────────────
   1 │ [1, 1, 1]  0.106538   0.122964
   2 │ [1, 2, 1]  0.113477   0.130974
   3 │ [2, 1, 1]  0.103582   0.119553
   4 │ [1, 2, 2]  0.103233   0.119151
   5 │ [2, 2, 1]  0.10508    0.121282
   6 │ [1, 1, 2]  0.116927   0.134956
   7 │ [2, 1, 2]  0.119484   0.137908
   8 │ [2, 2, 2]  0.0980879  0.113212"><pre><span class="pl-c1">8</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ pattern    x1         volume   
     │ Array…     Float64    Float64  
─────┼────────────────────────────────
   <span class="pl-c1">1</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.106538</span>   <span class="pl-c1">0.122964</span>
   <span class="pl-c1">2</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.113477</span>   <span class="pl-c1">0.130974</span>
   <span class="pl-c1">3</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.103582</span>   <span class="pl-c1">0.119553</span>
   <span class="pl-c1">4</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.103233</span>   <span class="pl-c1">0.119151</span>
   <span class="pl-c1">5</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]  <span class="pl-c1">0.10508</span>    <span class="pl-c1">0.121282</span>
   <span class="pl-c1">6</span> │ [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.116927</span>   <span class="pl-c1">0.134956</span>
   <span class="pl-c1">7</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.119484</span>   <span class="pl-c1">0.137908</span>
   <span class="pl-c1">8</span> │ [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]  <span class="pl-c1">0.0980879</span>  <span class="pl-c1">0.113212</span></pre></div>
<h2 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h2>
<p dir="auto">The following code shows how to visualize the results. As expected, the cube is partitioned into 8
color coded regions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GLMakie, ColorSchemes, StatsBase

# transform pattern into integer id
transform!(df, :pattern =&gt; denserank =&gt; :pattern_id)

scatter(
    df.p1,
    df.p2,
    df.p3, 
    color = df.pattern_id, 
    axis = (;type=Axis3),
    markersize = 5000,
    colormap = ColorSchemes.seaborn_deep6.colors,
    grid = true
)"><pre><span class="pl-k">using</span> GLMakie, ColorSchemes, StatsBase

<span class="pl-c"><span class="pl-c">#</span> transform pattern into integer id</span>
<span class="pl-c1">transform!</span>(df, <span class="pl-c1">:pattern</span> <span class="pl-k">=&gt;</span> denserank <span class="pl-k">=&gt;</span> <span class="pl-c1">:pattern_id</span>)

<span class="pl-c1">scatter</span>(
    df<span class="pl-k">.</span>p1,
    df<span class="pl-k">.</span>p2,
    df<span class="pl-k">.</span>p3, 
    color <span class="pl-k">=</span> df<span class="pl-k">.</span>pattern_id, 
    axis <span class="pl-k">=</span> (;type<span class="pl-k">=</span>Axis3),
    markersize <span class="pl-k">=</span> <span class="pl-c1">5000</span>,
    colormap <span class="pl-k">=</span> ColorSchemes<span class="pl-k">.</span>seaborn_deep6<span class="pl-k">.</span>colors,
    grid <span class="pl-k">=</span> <span class="pl-c1">true</span>
)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="resources/figure.png"><img src="resources/figure.png" alt="" width="500" height="300" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">Pitt, M. A., Kim, W., Navarro, D. J., &amp; Myung, J. I. (2006). Global model analysis by parameter space partitioning. Psychological Review, 113(1), 57.</p>
</article></div>