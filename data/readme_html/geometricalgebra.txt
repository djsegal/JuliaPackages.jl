<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><themed-picture data-catalyst-inline="true"><picture>
  <source media="(prefers-color-scheme: dark)" srcset="./docs/src/assets/logo-dark.svg">
  <img alt="logo" width="120" src="./docs/src/assets/logo.svg">
</picture></themed-picture>
<h1 dir="auto"><a id="user-content-geometricalgebrajl" class="anchor" aria-hidden="true" href="#geometricalgebrajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GeometricAlgebra.jl</h1>
<p dir="auto"><a href="https://jollywatt.github.io/GeometricAlgebra.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/Jollywatt/GeometricAlgebra.jl/actions/workflows/CI.yml/badge.svg"><img src="https://github.com/Jollywatt/GeometricAlgebra.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jollywatt/GeometricAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed94c8f47dad516897c03f128ce2a43d59c93c392da9967c54202d5a8dd5f232/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jollywatt/GeometricAlgebra.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cbaa0d11962fe271c08ea3076d9fdf3c322db6455b25370f3fa3782c4cf37e61/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c"><img src="https://camo.githubusercontent.com/cbaa0d11962fe271c08ea3076d9fdf3c322db6455b25370f3fa3782c4cf37e61/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c" alt="GitHub release (latest SemVer)" data-canonical-src="https://img.shields.io/github/v/release/jollywatt/GeometricAlgebra.jl" style="max-width: 100%;"></a>
<a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for working with multivectors from geometric (or Clifford) algebra.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is usable but is not registered and may undergo rapid changes.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(url=&quot;https://github.com/Jollywatt/GeometricAlgebra.jl&quot;, rev=&quot;v0.2.1&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/Jollywatt/GeometricAlgebra.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>v0.2.1<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">Construct multivectors by providing a metric signature and grade as type parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GeometricAlgebra

julia&gt; u = Multivector{3,1}([1, -1, 0]) # 3D Euclidean vector
3-component Multivector{3, 1, Vector{Int64}}:
  1 v1
 -1 v2
  0 v3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeometricAlgebra

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">Multivector</span><span class="pl-c1">{3,1}</span>([<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>]) <span class="pl-c"><span class="pl-c">#</span> 3D Euclidean vector</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>component Multivector{<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, Vector{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> v1
 <span class="pl-k">-</span><span class="pl-c1">1</span> v2
  <span class="pl-c1">0</span> v3</pre></div>
<p dir="auto">Non-euclidean metric signatures may be specified:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = Multivector{Cl(&quot;-+++&quot;),2}(1:6) # Lorentzian bivector
6-component Multivector{Cl(&quot;-+++&quot;), 2, UnitRange{Int64}}:
 1 v12
 2 v13
 3 v23
 4 v14
 5 v24
 6 v34

julia&gt; exp(v)
8-component Multivector{Cl(&quot;-+++&quot;), 0:2:4, MVector{8, Float64}}:
 1.18046
 0.818185 v12 + -0.141944 v13 + 0.153208 v23 + 1.076 v14 + 1.16194 v24 + 1.03866 v34
 0.999268 v1234"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">Multivector</span><span class="pl-c1">{Cl("-+++"),2}</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>) <span class="pl-c"><span class="pl-c">#</span> Lorentzian bivector</span>
<span class="pl-c1">6</span><span class="pl-k">-</span>component Multivector{<span class="pl-c1">Cl</span>(<span class="pl-s"><span class="pl-pds">"</span>-+++<span class="pl-pds">"</span></span>), <span class="pl-c1">2</span>, UnitRange{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span> v12
 <span class="pl-c1">2</span> v13
 <span class="pl-c1">3</span> v23
 <span class="pl-c1">4</span> v14
 <span class="pl-c1">5</span> v24
 <span class="pl-c1">6</span> v34

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(v)
<span class="pl-c1">8</span><span class="pl-k">-</span>component Multivector{<span class="pl-c1">Cl</span>(<span class="pl-s"><span class="pl-pds">"</span>-+++<span class="pl-pds">"</span></span>), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, MVector{<span class="pl-c1">8</span>, Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">1.18046</span>
 <span class="pl-c1">0.818185</span> v12 <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">0.141944</span> v13 <span class="pl-k">+</span> <span class="pl-c1">0.153208</span> v23 <span class="pl-k">+</span> <span class="pl-c1">1.076</span> v14 <span class="pl-k">+</span> <span class="pl-c1">1.16194</span> v24 <span class="pl-k">+</span> <span class="pl-c1">1.03866</span> v34
 <span class="pl-c1">0.999268</span> v1234</pre></div>
<p dir="auto">Notice that this bivector exponential has grades <code>0:2:4</code>.
The grade parameter <code>K</code> of a <code>Multivector{Sig,K}</code> can be a single integer
(for homogeneous multivectors) or a collection of grades.
A general 4D multivector has grades <code>0:4</code>, but an even multivector
may be more efficiently represented with grades <code>0:2:4</code>.</p>
<p dir="auto">You may also obtain an orthonormal basis for a metric signature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = basis(3)
3-element Vector{BasisBlade{3, 1, Int64}}:
 v1
 v2
 v3

julia&gt; exp(10000*2Ï€*v[2]v[3])
4-component Multivector{3, 0:2:2, Vector{Float64}}:
 1.0
 -9.71365e-13 v23"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">basis</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{BasisBlade{<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, Int64}}<span class="pl-k">:</span>
 v1
 v2
 v3

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-c1">10000</span><span class="pl-k">*</span><span class="pl-c1">2</span>Ï€<span class="pl-k">*</span>v[<span class="pl-c1">2</span>]v[<span class="pl-c1">3</span>])
<span class="pl-c1">4</span><span class="pl-k">-</span>component Multivector{<span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>, Vector{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">9.71365e-13</span> v23</pre></div>
<p dir="auto">Macros are provided for interactive use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @basis &quot;+---&quot;
[ Info: Defined basis blades v1, v2, v3, v4, v12, v13, v23, v14, v24, v34, v123, v124, v134, v234, v1234, I in Main

julia&gt; @basis (t = +1, x = -1) allperms=true
[ Info: Defined basis blades t, x, tx, xt, I in Main"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@basis</span> <span class="pl-s"><span class="pl-pds">"</span>+---<span class="pl-pds">"</span></span>
[ Info<span class="pl-k">:</span> Defined basis blades v1, v2, v3, v4, v12, v13, v23, v14, v24, v34, v123, v124, v134, v234, v1234, I <span class="pl-k">in</span> Main

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@basis</span> (t <span class="pl-k">=</span> <span class="pl-k">+</span><span class="pl-c1">1</span>, x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) allperms<span class="pl-k">=</span><span class="pl-c1">true</span>
[ Info<span class="pl-k">:</span> Defined basis blades t, x, tx, xt, I <span class="pl-k">in</span> Main</pre></div>
<h2 dir="auto"><a id="user-content-design" class="anchor" aria-hidden="true" href="#design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Design</h2>
<p dir="auto">There are two concrete types for representing elements in a geometric algebra:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="         AbstractMultivector{Sig}
            /               \                             
BasisBlade{Sig,K,T}    Multivector{Sig,K,S}"><pre class="notranslate"><code>         AbstractMultivector{Sig}
            /               \                             
BasisBlade{Sig,K,T}    Multivector{Sig,K,S}
</code></pre></div>
<ul dir="auto">
<li><code>BasisBlade</code>: a scalar multiple of a wedge product of orthogonal basis vectors.</li>
<li><code>Multivector</code>: a homogeneous or inhomogeneous multivector; a sum of basis blades.</li>
</ul>
<p dir="auto">Type parameters:</p>
<ul dir="auto">
<li><code>Sig</code>: The metric signature which defines the geometric algebra. This can be any all-bits value which satisfies the metric signature interface.</li>
<li><code>K</code>: The grade(s) of a multivector. For <code>BasisBlade</code>s, this is an integer, but for <code>Multivector</code>s, it may be a collection (e.g., <code>0:3</code> for a general 3D multivector).</li>
<li><code>T</code>: The numerical type of the coefficient of a <code>BasisBlade</code>.</li>
<li><code>S</code>: The storage type of the components of a <code>Multivector</code>, usually an <code>AbstractVector</code> subtype.</li>
</ul>
<h2 dir="auto"><a id="user-content-symbolic-algebra-and-code-generation" class="anchor" aria-hidden="true" href="#symbolic-algebra-and-code-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Symbolic Algebra and Code Generation</h2>
<p dir="auto">Thanks to the wonderful <a href="https://symbolicutils.juliasymbolics.org/" rel="nofollow"><code>SymbolicUtils</code></a> package, the same code originally written for numerical multivectors readily works with symbolic components.
For example, we can compute the product of two vectors symbolically as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; GeometricAlgebra.symbolic_components.([:x, :y], 3)
2-element Vector{Vector{Any}}:
 [x[1], x[2], x[3]]
 [y[1], y[2], y[3]]

julia&gt; Multivector{3,1}.(ans)
2-element Vector{Multivector{3, 1, Vector{Any}}}:
 x[1]v1 + x[2]v2 + x[3]v3
 y[1]v1 + y[2]v2 + y[3]v3

julia&gt; prod(ans)
4-component Multivector{3, 0:2:2, Vector{Any}}:
 x[1]*y[1] + x[2]*y[2] + x[3]*y[3]
 x[1]*y[2] - x[2]*y[1] v12 + x[1]*y[3] - x[3]*y[1] v13 + x[2]*y[3] - x[3]*y[2] v23
"><pre>julia<span class="pl-k">&gt;</span> GeometricAlgebra<span class="pl-k">.</span><span class="pl-c1">symbolic_components</span>.([<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>], <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{Any}}<span class="pl-k">:</span>
 [x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>], x[<span class="pl-c1">3</span>]]
 [y[<span class="pl-c1">1</span>], y[<span class="pl-c1">2</span>], y[<span class="pl-c1">3</span>]]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Multivector</span><span class="pl-c1">{3,1}</span>.(ans)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Multivector{<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, Vector{Any}}}<span class="pl-k">:</span>
 x[<span class="pl-c1">1</span>]v1 <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]v2 <span class="pl-k">+</span> x[<span class="pl-c1">3</span>]v3
 y[<span class="pl-c1">1</span>]v1 <span class="pl-k">+</span> y[<span class="pl-c1">2</span>]v2 <span class="pl-k">+</span> y[<span class="pl-c1">3</span>]v3

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prod</span>(ans)
<span class="pl-c1">4</span><span class="pl-k">-</span>component Multivector{<span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>, Vector{Any}}<span class="pl-k">:</span>
 x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>y[<span class="pl-c1">2</span>] <span class="pl-k">+</span> x[<span class="pl-c1">3</span>]<span class="pl-k">*</span>y[<span class="pl-c1">3</span>]
 x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>y[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>y[<span class="pl-c1">1</span>] v12 <span class="pl-k">+</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>y[<span class="pl-c1">3</span>] <span class="pl-k">-</span> x[<span class="pl-c1">3</span>]<span class="pl-k">*</span>y[<span class="pl-c1">1</span>] v13 <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>y[<span class="pl-c1">3</span>] <span class="pl-k">-</span> x[<span class="pl-c1">3</span>]<span class="pl-k">*</span>y[<span class="pl-c1">2</span>] v23
</pre></div>
<p dir="auto">This makes it easy to optimize multivector operations by first performing the calculation symbolically, then converting the resulting expression into unrolled code.
By default, symbolic code generation is used for most products in up to eight dimensions (above which general algebraic expressions become unwieldy).</p>
<h2 dir="auto"><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar Packages</h2>
<p dir="auto">This package derives inspiration from many others:</p>
<ul dir="auto">
<li><a href="https://github.com/ATell-SoundTheory/CliffordAlgebras.jl">ATell-SoundTheory/CliffordAlgebras.jl</a></li>
<li><a href="https://github.com/chakravala/Grassmann.jl">chakravala/Grassmann.jl</a></li>
<li><a href="https://github.com/digitaldomain/Multivectors.jl">digitaldomain/Multivectors.jl</a></li>
<li><a href="https://github.com/MasonProtter/GeometricMatrixAlgebras.jl">MasonProtter/GeometricMatrixAlgebras.jl</a></li>
<li><a href="https://github.com/serenity4/GeometricAlgebra.jl">serenity4/GeometricAlgebra.jl</a></li>
<li><a href="https://github.com/serenity4/SymbolicGA.jl">serenity4/SymbolicGA.jl</a></li>
<li><a href="https://github.com/velexi-research/GeometricAlgebra.jl">velexi-research/GeometricAlgebra.jl</a></li>
<li>in the future, <a href="https://github.com/JuliaGeometricAlgebra/GeometricAlgebra.jl">JuliaGeometricAlgebra/GeometricAlgebra.jl</a></li>
</ul>
</article></div>