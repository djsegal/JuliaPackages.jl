<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geometricalgebrajl" class="anchor" aria-hidden="true" href="#geometricalgebrajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeometricAlgebra.jl</h1>
<p><em>A simple, generic implementation for geometric (Clifford) algebras in Julia.</em></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8ea7ebd9fad6e373afe53c4ea32a337d3944213989b1e40eb60f0e0e4a76e1e7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f4a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c"><img src="https://camo.githubusercontent.com/8ea7ebd9fad6e373afe53c4ea32a337d3944213989b1e40eb60f0e0e4a76e1e7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f4a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c" alt="GitHub tag (latest SemVer)" data-canonical-src="https://img.shields.io/github/v/tag/Jollywatt/GeometricAlgebra.jl" style="max-width:100%;"></a>
<a href="https://jollywatt.github.io/GeometricAlgebra.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ad6e85a889d6b4a6c31daf76b370de5b0b39dee5e7ddb04eff7a976959bd2102/68747470733a2f2f6170692e7472617669732d63692e636f6d2f4a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c2e737667"><img src="https://camo.githubusercontent.com/ad6e85a889d6b4a6c31daf76b370de5b0b39dee5e7ddb04eff7a976959bd2102/68747470733a2f2f6170692e7472617669732d63692e636f6d2f4a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c2e737667" alt="build" data-canonical-src="https://api.travis-ci.com/Jollywatt/GeometricAlgebra.jl.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Jollywatt/GeometricAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b9ec4ccc07aac65167743061ac8fd4ffbcd12c60710647e4aafc3e6b12ff28b1/68747470733a2f2f636f6465636f762e696f2f67682f4a6f6c6c79776174742f47656f6d6574726963416c67656272612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5150363856364a413653" alt="codecov" data-canonical-src="https://codecov.io/gh/Jollywatt/GeometricAlgebra.jl/branch/master/graph/badge.svg?token=QP68V6JA6S" style="max-width:100%;"></a></p>
<p>The aim of this project is to provide an interface for geometric algebra
which is simple, well documented and easily maintainable.
See also the more mature <a href="https://github.com/chakravala/Grassmann.jl/">Grassmann.jl</a> and <a href="https://github.com/digitaldomain/Multivectors.jl">Multivectors.jl</a> packages for more advanced capability.</p>
<p><em>This code is very young and in rapid development.</em></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; t, x, y, z = basis((t=-1, x=1, y=1, z=1)) # create basis vectors for &quot;-+++&quot; spacetime algebra
4-element Vector{Blade{⟨t-,x+,y+,z+⟩, 1, bits, Int64} where bits}:
 1t
 1x
 1y
 1z

julia&gt; (1 + 2x + 3x*y + 4x*y*z)*x
MixedMultivector{⟨t-,x+,y+,z+⟩, Vector{Int64}}:
 2
 1 x + -3 y
 4 yz

julia&gt; grade(ans, 2)
Grade-2 Multivector{⟨t-,x+,y+,z+⟩, 2, Vector{Int64}}:
 0 tx
 0 ty
 0 xy
 0 tz
 0 xz
 4 yz

julia&gt; ans[4,3] # access zy component
-4

julia&gt; R = exp(π/4*x*y) # rotor describing quarter turn in xy plane
MixedMultivector{⟨t-,x+,y+,z+⟩, Vector{Float64}}:
 0.7071067811865476
 0.7071067811865475 xy

julia&gt; ~R*(x + 5z)*R # rotor application R̃aR with reversion ~
MixedMultivector{⟨t-,x+,y+,z+⟩, Vector{Float64}}:
 2.220446049250313e-16 x + 1.0 y + 5.0 z

julia&gt; log(R) ≈ π/4*x*y
true
"><pre>julia<span class="pl-k">&gt;</span> t, x, y, z <span class="pl-k">=</span> <span class="pl-c1">basis</span>((t<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>, x<span class="pl-k">=</span><span class="pl-c1">1</span>, y<span class="pl-k">=</span><span class="pl-c1">1</span>, z<span class="pl-k">=</span><span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> create basis vectors for "-+++" spacetime algebra</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Blade{⟨t<span class="pl-k">-</span>,x<span class="pl-k">+</span>,y<span class="pl-k">+</span>,z<span class="pl-k">+</span>⟩, <span class="pl-c1">1</span>, bits, Int64} <span class="pl-k">where</span> bits}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>t
 <span class="pl-c1">1</span>x
 <span class="pl-c1">1</span>y
 <span class="pl-c1">1</span>z

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span>x<span class="pl-k">*</span>y <span class="pl-k">+</span> <span class="pl-c1">4</span>x<span class="pl-k">*</span>y<span class="pl-k">*</span>z)<span class="pl-k">*</span>x
MixedMultivector{⟨t<span class="pl-k">-</span>,x<span class="pl-k">+</span>,y<span class="pl-k">+</span>,z<span class="pl-k">+</span>⟩, Vector{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span> x <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">3</span> y
 <span class="pl-c1">4</span> yz

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grade</span>(ans, <span class="pl-c1">2</span>)
Grade<span class="pl-k">-</span><span class="pl-c1">2</span> Multivector{⟨t<span class="pl-k">-</span>,x<span class="pl-k">+</span>,y<span class="pl-k">+</span>,z<span class="pl-k">+</span>⟩, <span class="pl-c1">2</span>, Vector{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">0</span> tx
 <span class="pl-c1">0</span> ty
 <span class="pl-c1">0</span> xy
 <span class="pl-c1">0</span> tz
 <span class="pl-c1">0</span> xz
 <span class="pl-c1">4</span> yz

julia<span class="pl-k">&gt;</span> ans[<span class="pl-c1">4</span>,<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> access zy component</span>
<span class="pl-k">-</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> R <span class="pl-k">=</span> <span class="pl-c1">exp</span>(π<span class="pl-k">/</span><span class="pl-c1">4</span><span class="pl-k">*</span>x<span class="pl-k">*</span>y) <span class="pl-c"><span class="pl-c">#</span> rotor describing quarter turn in xy plane</span>
MixedMultivector{⟨t<span class="pl-k">-</span>,x<span class="pl-k">+</span>,y<span class="pl-k">+</span>,z<span class="pl-k">+</span>⟩, Vector{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">0.7071067811865476</span>
 <span class="pl-c1">0.7071067811865475</span> xy

julia<span class="pl-k">&gt;</span> <span class="pl-k">~</span>R<span class="pl-k">*</span>(x <span class="pl-k">+</span> <span class="pl-c1">5</span>z)<span class="pl-k">*</span>R <span class="pl-c"><span class="pl-c">#</span> rotor application R̃aR with reversion ~</span>
MixedMultivector{⟨t<span class="pl-k">-</span>,x<span class="pl-k">+</span>,y<span class="pl-k">+</span>,z<span class="pl-k">+</span>⟩, Vector{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">2.220446049250313e-16</span> x <span class="pl-k">+</span> <span class="pl-c1">1.0</span> y <span class="pl-k">+</span> <span class="pl-c1">5.0</span> z

julia<span class="pl-k">&gt;</span> <span class="pl-c1">log</span>(R) <span class="pl-k">≈</span> π<span class="pl-k">/</span><span class="pl-c1">4</span><span class="pl-k">*</span>x<span class="pl-k">*</span>y
<span class="pl-c1">true</span></pre></div>
</article></div>