<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ama---anderson-moore-algorithm" class="anchor" aria-hidden="true" href="#ama---anderson-moore-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AMA - Anderson Moore Algorithm</h1>
<p><em>Release verison</em>:</p>
<p><em>Build status</em>:</p>
<p><a href="https://travis-ci.org/es335mathwiz/AndersonMoore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5a5e5dc3886ed4a0b5f32213c301d3e36c3dd081/68747470733a2f2f7472617669732d63692e6f72672f65733333356d61746877697a2f416e646572736f6e4d6f6f72652e6a6c2e7376673f6272616e63683d646576656c6f70" alt="Build Status" data-canonical-src="https://travis-ci.org/es335mathwiz/AndersonMoore.jl.svg?branch=develop" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/gtunell/andersonmoore-jl/branch/develop" rel="nofollow"><img src="https://camo.githubusercontent.com/f2164daefe9e50985f65673550e302a8960fc4ad/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f65733333356d61746877697a2f416e646572736f6e4d6f6f72652e6a6c3f6272616e63683d646576656c6f70267376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/es335mathwiz/AndersonMoore.jl?branch=develop&amp;svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/es335mathwiz/AMA.jl?branch=develop" rel="nofollow"><img src="https://camo.githubusercontent.com/4e13686b14bf31086551c2348f771fca785f73f9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f65733333356d61746877697a2f414d412e6a6c2f62616467652e7376673f6272616e63683d646576656c6f70" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/es335mathwiz/AMA.jl/badge.svg?branch=develop" style="max-width:100%;"></a>
<a href="https://codecov.io/github/es335mathwiz/AndersonMoore.jl?branch=develop" rel="nofollow"><img src="https://camo.githubusercontent.com/0ca4353dcd1a1a1ebd04c8b03e5a22ed41865716/68747470733a2f2f636f6465636f762e696f2f6769746875622f65733333356d61746877697a2f416e646572736f6e4d6f6f72652e6a6c2f636f7665726167652e7376673f6272616e63683d646576656c6f70" alt="codecov.io" data-canonical-src="https://codecov.io/github/es335mathwiz/AndersonMoore.jl/coverage.svg?branch=develop" style="max-width:100%;"></a></p>
<h2><a id="user-content-installion" class="anchor" aria-hidden="true" href="#installion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installion</h2>
<p>To install AMA, use the package manager by typing:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AndersonMoore<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>This algorithm solves linear rational expectations models. There is a fast and slightly faster method to execute the algorithm which is outlined below. AndersonMooreAlg calls a julia language implementation and callSparseAim executes a C/Fortran implementation. Lastly, gensysToAMA is a function for users who are accustomed to gensys style inputs and outputs but wish to use AMA. It can be shown that AMA is faster than gensys. To begin,</p>
<p>Load the module:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AndersonMoore</pre></div>
<p>Declare the linear models to solve such as:</p>
<div class="highlight highlight-source-julia"><pre>h <span class="pl-k">=</span> [<span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-k">-</span><span class="pl-c1">1.1</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">1.</span>  <span class="pl-c1">1.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>;
     <span class="pl-c1">0.</span>  <span class="pl-k">-</span><span class="pl-c1">0.4</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">1.</span>  <span class="pl-k">-</span><span class="pl-c1">1.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>;
     <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">1.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>;
     <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-k">-</span><span class="pl-c1">1.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">1.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>  <span class="pl-c1">0.</span>]<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span></pre></div>
<p>Set number of equations:</p>
<div class="highlight highlight-source-julia"><pre>neq <span class="pl-k">=</span> <span class="pl-c1">4</span></pre></div>
<p>Set number of lags and leads:</p>
<div class="highlight highlight-source-julia"><pre>nlags <span class="pl-k">=</span> <span class="pl-c1">1</span>
nleads <span class="pl-k">=</span> <span class="pl-c1">1</span></pre></div>
<p>Set a tolerance to calculate numeric shift and reduced form:</p>
<div class="highlight highlight-source-julia"><pre>condn <span class="pl-k">=</span> <span class="pl-c1">0.0000000001</span></pre></div>
<p>Finally, give an inclusive upper bound for modulus of roots allowed in reduced form:</p>
<div class="highlight highlight-source-julia"><pre>upperbnd <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> condn</pre></div>
<h4><a id="user-content-to-execute-the-algorithm-with-julia" class="anchor" aria-hidden="true" href="#to-execute-the-algorithm-with-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To execute the algorithm with julia:</h4>
<div class="highlight highlight-source-julia"><pre>(b, rts, ia, nexact, nnumeric, lgroots, AMAcode) <span class="pl-k">=</span>
     <span class="pl-c1">AndersonMooreAlg</span>(h, neq, nlag, nlead, condn, upperbnd)</pre></div>
<p><em>Note</em> - the above returns the tuple (b, rts, ia, nexact, nnumeric, lgroots, AMAcode)</p>
<ul>
  <li>	b         -  Reduced form coefficient matrix.<br>                      </li>
  <li>	rts       -  Roots returned by eig.<br>                                </li>
  <li>	ia        -  Dimension of companion matrix.<br>                        </li>
  <li>	nexact    -  Number of exact shift rights.<br>                         </li>
  <li>	nnumeric  -  Number of numeric shift rights.<br>                       </li>
  <li>	lgroots   -  Number of roots greater in modulus than upper bound.<br>  </li>
  <li>  AMAcode   -  Return code.<br>                                          </li>
</ul>
<h4><a id="user-content-to-execute-the-algorithm-with-cfortran" class="anchor" aria-hidden="true" href="#to-execute-the-algorithm-with-cfortran"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To execute the algorithm with C/Fortran:</h4>
<div class="highlight highlight-source-julia"><pre>(h, b, q, AMAcode) <span class="pl-k">=</span> 
     <span class="pl-c1">callSparseAim</span>(h, nleads, nlags)</pre></div>
<p><em>Note</em> - the above returns the tuple (h, b, q, AMAcode)<br></p>
<ul>
  <li>  h         -  The original h matrix after computations.<br>  </li>
  <li>	b         -  Reduced form coefficient matrix.<br>           </li>
  <li>  q         -  Asymptotic constraints.<br>                    </li>
  <li>	AMAcode   -  Return code.                                     </li>
</ul>
<h4><a id="user-content-for-those-accustomed-to-gensys" class="anchor" aria-hidden="true" href="#for-those-accustomed-to-gensys"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>For those accustomed to gensys:</h4>
<div class="highlight highlight-source-julia"><pre>(G1, CC, impact, fmat, fwt, ywt, gev, eu) <span class="pl-k">=</span> 
     <span class="pl-c1">gensysToAMA</span>(g0, g1, cc, psi, pi, div, varargin <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> ) </pre></div>
<p>To run AMA, subsitute the gensys style inputs into the above command but substitute "ama" for the argument varargin.</p>
<h2><a id="user-content-more" class="anchor" aria-hidden="true" href="#more"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More</h2>
<p>For more information and an indepth analysis of the algorithm, please read the <a href="https://www.federalreserve.gov/pubs/feds/2010/201013/201013pap.pdf" rel="nofollow">full paper</a> written by <a href="https://github.com/es335mathwiz">Gary S. Anderson</a>.</p>
<p>The authors would appreciate acknowledgement by citation of any of the following papers:</p>
<p>Anderson, G. and Moore, G. "A Linear Algebraic Procedure For Solving Linear Perfect Foresight Models." Economics Letters, 17, 1985.</p>
<p>Anderson, G. "Solving Linear Rational Expectations Models: A Horse Race." Computational Economics, 2008, vol. 31, issue 2, pp. 95-113</p>
<p>Anderson, G. "A Reliable and Computationally Efficient Algorithm for Imposing the Saddle Point Property in Dynamic Models." Journal of Economic Dynamics and Control, 2010, vol 34, issue 3, pp. 472-489.</p>
<p>Developer: <a href="https://github.com/gtunell">Gregory Tunell</a> e-mail available at <a href="mailto:gregtunell@gmail.com">gregtunell@gmail.com</a>.</p>
</article></div>