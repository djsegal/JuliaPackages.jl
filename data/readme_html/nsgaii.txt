<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/gsoleilhac/NSGAII.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ef0418347f000239f9ffd7a53140dcc242ca8ca/68747470733a2f2f7472617669732d63692e6f72672f67736f6c65696c6861632f4e53474149492e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gsoleilhac/NSGAII.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/gsoleilhac/nsgaii-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e3a84e93a48bb7270f5b6c9031651321ab019202/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f307566796b657175743931726b30306e2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/0ufykequt91rk00n/branch/master?svg=true" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/gsoleilhac/NSGAII.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c6474e3e9fed0cca7ce6240896e0d8498189f454/687474703a2f2f636f6465636f762e696f2f6769746875622f67736f6c65696c6861632f4e53474149492e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/gsoleilhac/NSGAII.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/gsoleilhac/NSGAII.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a22eb674724d4b83a0973be5cffeedb0adcf7898/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f67736f6c65696c6861632f4e53474149492e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/gsoleilhac/NSGAII.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h1>
<p><a href="https://pdfs.semanticscholar.org/59a3/fea1f38c5dd661cc5bfec50add2c2f881454.pdf" rel="nofollow">A Fast Elitist Non-Dominated Sorting Genetic Algorithm for Multi-Objective Optimization: NSGA-II
Kalyanmoy Deb, Samir Agrawal, Amrit Pratap, and T Meyarivan</a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<pre><code>julia&gt; ]
pkg&gt; add NSGAII
</code></pre>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<h2><a id="user-content-example--bi-objective-knapsack" class="anchor" aria-hidden="true" href="#example--bi-objective-knapsack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example : Bi-Objective Knapsack</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NSGAII
n <span class="pl-k">=</span> <span class="pl-c1">20</span> <span class="pl-c"><span class="pl-c">#</span>Number of items</span>
p1 <span class="pl-k">=</span> [<span class="pl-c1">77</span>,<span class="pl-c1">94</span>,<span class="pl-c1">71</span>,<span class="pl-c1">63</span>,<span class="pl-c1">96</span>,<span class="pl-c1">82</span>,<span class="pl-c1">85</span>,<span class="pl-c1">75</span>,<span class="pl-c1">72</span>,<span class="pl-c1">91</span>,<span class="pl-c1">99</span>,<span class="pl-c1">63</span>,<span class="pl-c1">84</span>,<span class="pl-c1">87</span>,<span class="pl-c1">79</span>,<span class="pl-c1">94</span>,<span class="pl-c1">90</span>,<span class="pl-c1">60</span>,<span class="pl-c1">69</span>,<span class="pl-c1">62</span>] <span class="pl-c"><span class="pl-c">#</span>Coeffs objective 1</span>
p2 <span class="pl-k">=</span> [<span class="pl-c1">65</span>,<span class="pl-c1">90</span>,<span class="pl-c1">90</span>,<span class="pl-c1">77</span>,<span class="pl-c1">95</span>,<span class="pl-c1">84</span>,<span class="pl-c1">70</span>,<span class="pl-c1">94</span>,<span class="pl-c1">66</span>,<span class="pl-c1">92</span>,<span class="pl-c1">74</span>,<span class="pl-c1">97</span>,<span class="pl-c1">60</span>,<span class="pl-c1">60</span>,<span class="pl-c1">65</span>,<span class="pl-c1">97</span>,<span class="pl-c1">93</span>,<span class="pl-c1">60</span>,<span class="pl-c1">69</span>,<span class="pl-c1">74</span>] <span class="pl-c"><span class="pl-c">#</span>Coeffs objective 2</span>
w <span class="pl-k">=</span> [<span class="pl-c1">80</span>,<span class="pl-c1">87</span>,<span class="pl-c1">68</span>,<span class="pl-c1">72</span>,<span class="pl-c1">66</span>,<span class="pl-c1">77</span>,<span class="pl-c1">99</span>,<span class="pl-c1">85</span>,<span class="pl-c1">70</span>,<span class="pl-c1">93</span>,<span class="pl-c1">98</span>,<span class="pl-c1">72</span>,<span class="pl-c1">100</span>,<span class="pl-c1">89</span>,<span class="pl-c1">67</span>,<span class="pl-c1">86</span>,<span class="pl-c1">91</span>,<span class="pl-c1">79</span>,<span class="pl-c1">71</span>,<span class="pl-c1">99</span>] <span class="pl-c"><span class="pl-c">#</span>Items weights</span>
c <span class="pl-k">=</span> <span class="pl-c1">900</span> <span class="pl-c"><span class="pl-c">#</span>Knapsack capacity</span></pre></div>
<p>The four mandatory parameters of NSGAII are</p>
<ul>
<li>the size of the population</li>
<li>the number of generations</li>
<li>an initialization function</li>
<li>an evaluation function</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Random<span class="pl-k">:</span> bitrand
<span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> dot

popsize <span class="pl-k">=</span> <span class="pl-c1">100</span>
nbgen <span class="pl-k">=</span> <span class="pl-c1">200</span>
<span class="pl-en">init</span>() <span class="pl-k">=</span> <span class="pl-c1">bitrand</span>(n) <span class="pl-c"><span class="pl-c">#</span>our genotype is a binary vector of size n, initialized randomly</span>
<span class="pl-en">z</span>(x) <span class="pl-k">=</span> <span class="pl-c1">dot</span>(x, p1), <span class="pl-c1">dot</span>(x, p2) <span class="pl-c"><span class="pl-c">#</span>and our objectives are the sum of the items we pick</span></pre></div>
<p>Now, this would be enough to run nsga-2 with
<code>nsga_max(popsize, nbgen, z, init)</code><br>
But we need to add the constraint that all items must fit in the knapsack.<br>
For this we define a <em>constraint-violation function</em> that returns 0 only if the solution is feasible,<br>
and a value &gt; 0 otherwise.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">CV</span>(x)
    sumW <span class="pl-k">=</span> <span class="pl-c1">dot</span>(x, w)
    <span class="pl-k">return</span> sumW <span class="pl-k">&lt;=</span> c ? <span class="pl-c1">0</span> : sumW <span class="pl-k">-</span> c
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>We can now call</span>
result <span class="pl-k">=</span> <span class="pl-c1">nsga_max</span>(popsize, nbgen, z, init, fCV <span class="pl-k">=</span> CV)</pre></div>
<p><code>result</code> will be a vector of individuals.<br>
The revelant fields of an individual <em><code>indiv</code></em> are :</p>
<ul>
<li>genotype : <code>indiv.x</code></li>
<li>objective values : <code>indiv.y</code></li>
<li>phenotype : <code>indiv.pheno</code></li>
<li>rank : <code>indiv.rank</code></li>
<li>constraint violation value : <code>indiv.CV</code></li>
</ul>
<h3><a id="user-content-crossover" class="anchor" aria-hidden="true" href="#crossover"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Crossover</h3>
<p>If the solutions are encoded as bitstrings, a <a href="https://github.com/gsoleilhac/NSGAII.jl/blob/master/src/crossover.jl#L5-L19">2-point crossover</a> will be used by default, but we can define our own and assign it with the keyword <code>fcross</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">one_point_crossover!</span>(parent_a, parent_b, child_a, child_b)
    n <span class="pl-k">=</span> <span class="pl-c1">length</span>(parent_a)
    cut <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>)

    child_a[<span class="pl-c1">1</span><span class="pl-k">:</span>cut] <span class="pl-k">.=</span> parent_a[<span class="pl-c1">1</span><span class="pl-k">:</span>cut]
    child_a[cut<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>n] <span class="pl-k">.=</span> parent_b[cut<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>n]

    child_b[<span class="pl-c1">1</span><span class="pl-k">:</span>cut] <span class="pl-k">.=</span> parent_b[<span class="pl-c1">1</span><span class="pl-k">:</span>cut]
    child_b[cut<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>n] <span class="pl-k">.=</span> parent_a[cut<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>n]
<span class="pl-k">end</span>

<span class="pl-c1">nsga_max</span>(popsize, nbgen, z, init, fCV <span class="pl-k">=</span> CV, fcross <span class="pl-k">=</span> one_point_crossover!)</pre></div>
<p>For permutations genotypes, the default crossover is the <a href="https://github.com/gsoleilhac/NSGAII.jl/blob/master/src/crossover.jl#L22-L54">PMX (Partially-Mapped Crossover)</a></p>
<h3><a id="user-content-mutation" class="anchor" aria-hidden="true" href="#mutation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutation</h3>
<p>The default mutation for a binary vector is the <a href="https://github.com/gsoleilhac/NSGAII.jl/blob/master/src/mutation.jl#L2-L9">bitstring mutation</a> where each bit has a probability 1/l to be flipped (where l is the length of the vector)</p>
<p>As with crossovers, we can define or own mutation operator and assign it with the keyword <code>fmut</code>. The probability of mutation can be changed with the keyword <code>pmut</code>.</p>
<p>Let's say we want our mutation to flip two random bits :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">two_bits_flip!</span>(bits)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
        n <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(bits))
        bits[n] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> bits[n]
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">nsga_max</span>(popsize, nbgen, z, init, fCV <span class="pl-k">=</span> CV, fmut <span class="pl-k">=</span> two_bits_flip!, pmut <span class="pl-k">=</span> <span class="pl-c1">0.2</span>)</pre></div>
<p><em>For permutations genotypes, the default mutation randomly <a href="https://github.com/gsoleilhac/NSGAII.jl/blob/master/src/mutation.jl#L12-L18">swaps</a> two indices.</em></p>
<h3><a id="user-content-genotype-and-phenotype" class="anchor" aria-hidden="true" href="#genotype-and-phenotype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Genotype and Phenotype</h3>
<p>So far, we haven't made any difference between the genotype and the phenotype ; the default decoding function used here is the <em>identity</em> function</p>
<p>You can provide your own with the keywords <code>fdecode</code> and <code>fdecode!</code> which will work in-place.</p>
<p>Note : if your decode function takes a genotype <code>G</code> and returns a phenotype <code>P</code>, make sure your crossovers and mutations functions work on type <code>G</code>, and that your evaluation and (if provided) your constraint-violation functions work on type <code>P</code>.<br>
<code>fdecode!</code> should take as parameters a genotype <code>G</code> and a phenotype <code>P</code> and modify it in-place.</p>
<p>See <a href="https://github.com/gsoleilhac/NSGAII.jl#binarycoding">BinaryCoding</a> to easily encode/decode real variables.</p>
<h3><a id="user-content-seeding" class="anchor" aria-hidden="true" href="#seeding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Seeding</h3>
<p>Starting solutions can be provided as a vector with the keyword <code>seed</code>, for example :</p>
<div class="highlight highlight-source-julia"><pre>x1 <span class="pl-k">=</span> <span class="pl-c1">greedy</span>(p1, w, c)
x2 <span class="pl-k">=</span> <span class="pl-c1">greedy</span>(p2, w, c)
x3 <span class="pl-k">=</span> <span class="pl-c1">greedy</span>(p1 <span class="pl-k">.+</span> p2, w, c)

<span class="pl-c1">nsga_max</span>(popsize, nbgen, z, init, fCV <span class="pl-k">=</span> CV, seed <span class="pl-k">=</span> [x1, x2, x3])</pre></div>
<p>Make sure the type of your seeds is the same as the one given by calling <code>init()</code> !</p>
<h3><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plotting</h3>
<p>A plot function can be passed with the keyword <code>fplot</code>, by default the population is plotted at every generation but this can be changed with the keyword <code>plotevery</code>.</p>
<p>Example with PyPlot :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyPlot

<span class="pl-k">function</span> <span class="pl-en">plot_pop</span>(P)
    <span class="pl-c1">clf</span>() <span class="pl-c"><span class="pl-c">#</span>clears the figure</span>
    P <span class="pl-k">=</span> <span class="pl-c1">filter</span>(indiv <span class="pl-k">-&gt;</span> indiv<span class="pl-k">.</span>rank <span class="pl-k">==</span> <span class="pl-c1">1</span>, P) <span class="pl-c"><span class="pl-c">#</span>keep only the non-dominated solutions</span>
    <span class="pl-c1">plot</span>(<span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">.</span>y[<span class="pl-c1">1</span>], P), <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">.</span>y[<span class="pl-c1">2</span>], P), <span class="pl-s"><span class="pl-pds">"</span>bo<span class="pl-pds">"</span></span>, markersize <span class="pl-k">=</span> <span class="pl-c1">1</span>)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span>

<span class="pl-c1">nsga_max</span>(popsize, nbgen, z, init, fCV <span class="pl-k">=</span> CV, fplot <span class="pl-k">=</span> plot_pop, plotevery <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<h2><a id="user-content-binarycoding" class="anchor" aria-hidden="true" href="#binarycoding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BinaryCoding</h2>
<p>You can use <code>BinaryCoding(ϵ::Int, lb::Vector, ub::Vector)</code> to encode real variables with a precision <code>ϵ</code>, and with lower and upper bounds <code>lb</code> and <code>ub</code></p>
<p>Example : MOP7 from Van Valedhuizen’s Test Suite</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/gsoleilhac/NSGAII.jl/master/MOP7.png"><img src="https://raw.githubusercontent.com/gsoleilhac/NSGAII.jl/master/MOP7.png" alt="MOP7" title="MOP7" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NSGAII
<span class="pl-k">using</span> Plots<span class="pl-k">:</span> scatter3d

<span class="pl-en">f1</span>(x1,x2) <span class="pl-k">=</span> ((x1<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">+</span> ((x2<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">13</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>
<span class="pl-en">f2</span>(x1,x2) <span class="pl-k">=</span> ((x1<span class="pl-k">+</span>x2<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">+</span> ((<span class="pl-k">-</span>x1<span class="pl-k">+</span>x2<span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">8</span> <span class="pl-k">-</span> <span class="pl-c1">17</span>
<span class="pl-en">f3</span>(x1,x2) <span class="pl-k">=</span> ((x1<span class="pl-k">+</span><span class="pl-c1">2</span>x2<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">175</span> <span class="pl-k">+</span> ((<span class="pl-k">-</span>x1<span class="pl-k">+</span><span class="pl-c1">2</span>x2)<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">17</span> <span class="pl-k">-</span> <span class="pl-c1">13</span>

<span class="pl-en">z</span>(x) <span class="pl-k">=</span> <span class="pl-c1">f1</span>(x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>]), <span class="pl-c1">f2</span>(x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>]), <span class="pl-c1">f3</span>(x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>])

<span class="pl-c"><span class="pl-c">#</span>Encodes two variables -400 &lt;= x_i &lt;= 400, with a precision of 1E-4</span>
<span class="pl-k">const</span> bc <span class="pl-k">=</span> <span class="pl-c1">BinaryCoding</span>(<span class="pl-c1">4</span>, [<span class="pl-k">-</span><span class="pl-c1">400</span>, <span class="pl-k">-</span><span class="pl-c1">400</span>], [<span class="pl-c1">400</span>, <span class="pl-c1">400</span>]) 

<span class="pl-k">function</span> <span class="pl-en">plot_pop</span>(pop)
    pop <span class="pl-k">=</span> <span class="pl-c1">filter</span>(indiv <span class="pl-k">-&gt;</span> indiv<span class="pl-k">.</span>rank <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>, pop) <span class="pl-c"><span class="pl-c">#</span>keeps only the non-dominated solutions</span>
    <span class="pl-c1">scatter3d</span>(<span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">.</span>y[<span class="pl-c1">1</span>], pop), <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">.</span>y[<span class="pl-c1">2</span>], pop),  <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">.</span>y[<span class="pl-c1">3</span>], pop), markersize <span class="pl-k">=</span> <span class="pl-c1">1</span>) <span class="pl-k">|&gt;</span> display
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-k">end</span>

<span class="pl-c1">nsga</span>(<span class="pl-c1">500</span>, <span class="pl-c1">100</span>, z, bc, seed <span class="pl-k">=</span> [[<span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">1.</span>],[<span class="pl-c1">2.5</span>,<span class="pl-c1">0.5</span>],[<span class="pl-c1">0.5</span>,<span class="pl-c1">0.25</span>]], fplot <span class="pl-k">=</span> plot_pop)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/gsoleilhac/NSGAII.jl/master/MOP7.gif"><img width="460" height="300" src="https://raw.githubusercontent.com/gsoleilhac/NSGAII.jl/master/MOP7.gif" style="max-width:100%;"></a>
</p>
<ul>
<li>The initialization function isn't needed anymore.</li>
<li>The seed is passed as a vector of phenotypes, not a vector of genotypes, it is automatically encoded.</li>
</ul>
<p>You can also use <code>BinaryCoding(ϵ::Int, types, lb, ub)</code> to encode a mix of integer, continuous or binary variables, with <code>types</code> a vector of symbols : <code>( :Int |  :Cont | :Bin )</code>.</p>
<h3><a id="user-content-misc" class="anchor" aria-hidden="true" href="#misc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Misc</h3>
<p>The progress bar can be disabled by calling <code>nsga(..., showprogress = false</code>)</p>
</article></div>