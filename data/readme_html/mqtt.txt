<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mqttjl" class="anchor" aria-hidden="true" href="#mqttjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MQTT.jl</h1>
<p><a href="https://travis-ci.org/rweilbacher/MQTT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/13b6e3dd8d3c4a8c6f67fb5d585b2fa9f675e7c1c65a03c1c90e61da0d96fa98/68747470733a2f2f7472617669732d63692e6f72672f727765696c6261636865722f4d5154542e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rweilbacher/MQTT.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/kivaari/MQTT.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b7f8fd3b2240d47f15678821b5fc104d6b79d25d39312263dfae50dcf62f2efd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b6976616172692f4d5154542e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/kivaari/MQTT.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>MQTT Client Library</p>
<p>This code builds a library which enables applications to connect to an MQTT broker to publish messages, and to subscribe to topics and receive published messages.</p>
<p>This library supports: fully asynchronous operation, file persistence</p>
<h2><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contents</h2>
<ul>
<li><a href="#installation">Installation</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#usage">Usage</a>
<ul>
<li><a href="#getting-started">Getting started</a>
<ul>
<li><a href="#basic-example">Basic example</a></li>
</ul>
</li>
<li><a href="#client-struct">Client struct</a>
<ul>
<li><a href="#constructors">Constructors</a></li>
</ul>
</li>
<li><a href="#message-struct">Message struct</a>
<ul>
<li><a href="#constructors-1">Constructors</a></li>
</ul>
</li>
<li><a href="#connect">Connect</a>
<ul>
<li><a href="#arguments">Arguments</a></li>
<li><a href="#call-example">Call example</a></li>
<li><a href="#synchronous-connect">Synchronous connect</a></li>
<li><a href="#asynchronous-connect">Asynchronous connect</a></li>
</ul>
</li>
<li><a href="#publish">Publish</a>
<ul>
<li><a href="#arguments-1">Arguments</a></li>
<li><a href="#call-example-1">Call example</a></li>
<li><a href="#synchronous-publish">Synchronous publish</a></li>
<li><a href="#asynchronous-publish">Asynchronous publish</a></li>
</ul>
</li>
<li><a href="#subscribe">Subscribe</a>
<ul>
<li><a href="#arguments-2">Arguments</a></li>
<li><a href="#call-example-2">Call example</a></li>
<li><a href="#synchronous-subscribe">Synchronous subscribe</a></li>
<li><a href="#asynchronous-subscribe">Asynchronous subscribe</a></li>
</ul>
</li>
<li><a href="#unsubscribe">Unsubscribe</a>
<ul>
<li><a href="#arguments-3">Arguments</a></li>
<li><a href="#call-example-3">Call example</a></li>
<li><a href="#synchronous-unsubscribe">Synchronous unsubscribe</a></li>
<li><a href="#asynchronous-unsubscribe">Asynchronous unsubscribe</a></li>
</ul>
</li>
<li><a href="#disconnect">Disconnect</a>
<ul>
<li><a href="#arguments-4">Arguments</a></li>
<li><a href="#call-example-4">Call example</a></li>
<li><a href="#synchronous-disconnect">Synchronous disconnect</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#internal-workings">Internal workings</a></li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/rweilbacher/MQTT.jl.git&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/rweilbacher/MQTT.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.test(&quot;MQTT&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>MQTT<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Import the library with the <code>using</code> keyword.</p>
<p>Samples are available in the <code>examples</code> directory.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MQTT
"><pre><span class="pl-k">using</span> MQTT</pre></div>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h2>
<p>To use this library you need to follow at least these steps:</p>
<ol>
<li>Define an <code>on_msg</code> callback function.</li>
<li>Create an instance of the <code>Client</code> struct and pass it your <code>on_msg</code> function.</li>
<li>Call the connect method with your <code>Client</code> instance.</li>
<li>Exchange data with the broker through publish, subscribe and unsubscribe.</li>
<li>Disconnect from the broker. (Not strictly necessary, if you don't want to resume the session but considered good form and less likely to crash).</li>
</ol>
<h4><a id="user-content-basic-example" class="anchor" aria-hidden="true" href="#basic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic example</h4>
<p>Refer to the corresponding method documentation to find more options.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MQTT
broker = &quot;test.mosquitto.org&quot;

#Define the callback for receiving messages.
function on_msg(topic, payload)
    info(&quot;Received message topic: [&quot;, topic, &quot;] payload: [&quot;, String(payload), &quot;]&quot;)
end

#Instantiate a client.
client = Client(on_msg)
connect(client, broker)
#Set retain to true so we can receive a message from the broker once we subscribe
#to this topic.
publish(client, &quot;jlExample&quot;, &quot;Hello World!&quot;, retain=true)
#Subscribe to the topic we sent a retained message to.
subscribe(client, (&quot;jlExample&quot;, QOS_1))
#Unsubscribe from the topic
unsubscribe(client, &quot;jlExample&quot;)
#Disconnect from the broker. Not strictly needed as the broker will also
#disconnect us if the socket is closed. But this is considered good form
#and needed if you want to resume this session later.
disconnect(client)
"><pre><span class="pl-k">using</span> MQTT
broker <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test.mosquitto.org<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span>Define the callback for receiving messages.</span>
<span class="pl-k">function</span> <span class="pl-en">on_msg</span>(topic, payload)
    <span class="pl-c1">info</span>(<span class="pl-s"><span class="pl-pds">"</span>Received message topic: [<span class="pl-pds">"</span></span>, topic, <span class="pl-s"><span class="pl-pds">"</span>] payload: [<span class="pl-pds">"</span></span>, <span class="pl-c1">String</span>(payload), <span class="pl-s"><span class="pl-pds">"</span>]<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>Instantiate a client.</span>
client <span class="pl-k">=</span> <span class="pl-c1">Client</span>(on_msg)
<span class="pl-c1">connect</span>(client, broker)
<span class="pl-c"><span class="pl-c">#</span>Set retain to true so we can receive a message from the broker once we subscribe</span>
<span class="pl-c"><span class="pl-c">#</span>to this topic.</span>
<span class="pl-c1">publish</span>(client, <span class="pl-s"><span class="pl-pds">"</span>jlExample<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Hello World!<span class="pl-pds">"</span></span>, retain<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c"><span class="pl-c">#</span>Subscribe to the topic we sent a retained message to.</span>
<span class="pl-c1">subscribe</span>(client, (<span class="pl-s"><span class="pl-pds">"</span>jlExample<span class="pl-pds">"</span></span>, QOS_1))
<span class="pl-c"><span class="pl-c">#</span>Unsubscribe from the topic</span>
<span class="pl-c1">unsubscribe</span>(client, <span class="pl-s"><span class="pl-pds">"</span>jlExample<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>Disconnect from the broker. Not strictly needed as the broker will also</span>
<span class="pl-c"><span class="pl-c">#</span>disconnect us if the socket is closed. But this is considered good form</span>
<span class="pl-c"><span class="pl-c">#</span>and needed if you want to resume this session later.</span>
<span class="pl-c1">disconnect</span>(client)</pre></div>
<h2><a id="user-content-client-struct" class="anchor" aria-hidden="true" href="#client-struct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Client struct</h2>
<p>The client struct is used to store state for an MQTT connection. All callbacks, apart from <code>on_message</code>, can't be set through the constructor and have to be set manually after instantiating the <code>Client</code> struct.</p>
<p><strong>Fields in the Client that are relevant for the library user:</strong></p>
<ul>
<li><strong>ping_timeout</strong>::UInt64: Time, in seconds, the Client waits for the PINGRESP after sending a PINGREQ before he disconnects ; <em>default = 60 seconds</em></li>
<li><strong>on_message</strong>::Function: This function gets called upon receiving a publish message from the broker.</li>
<li><strong>on_disconnect</strong>::Function:</li>
<li><strong>on_connect</strong>::Function:</li>
<li><strong>on_subscribe</strong>::Function:</li>
<li><strong>on_unsubscribe</strong>::Function:</li>
</ul>
<h5><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructors</h5>
<p>All constructors take the <code>on_message</code> callback as an argument.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Client(on_msg::Function)
"><pre><span class="pl-c1">Client</span>(on_msg<span class="pl-k">::</span><span class="pl-c1">Function</span>)</pre></div>
<p>Specify a custom ping_timeout</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Client(on_msg::Function, ping_timeout::UInt64)
"><pre><span class="pl-c1">Client</span>(on_msg<span class="pl-k">::</span><span class="pl-c1">Function</span>, ping_timeout<span class="pl-k">::</span><span class="pl-c1">UInt64</span>)</pre></div>
<h2><a id="user-content-message-struct" class="anchor" aria-hidden="true" href="#message-struct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Message struct</h2>
<p>The <code>Message</code> struct is the data structure for generic MQTT messages. This is mostly used internally but is exposed to the user in some cases for easier to read arguments (Passing a "will" to the connect method uses the <code>Message</code> struct for example).</p>
<h4><a id="user-content-constructors-1" class="anchor" aria-hidden="true" href="#constructors-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructors</h4>
<p>This is a reduced constructor meant for messages that can't be duplicate or retained (like the "will"). <strong>This message constructor should be in most cases!</strong> The dup and retained flag are false by default.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function Message(qos::QOS, topic::String, payload...)
"><pre><span class="pl-k">function</span> <span class="pl-en">Message</span>(qos<span class="pl-k">::</span><span class="pl-c1">QOS</span>, topic<span class="pl-k">::</span><span class="pl-c1">String</span>, payload<span class="pl-k">...</span>)</pre></div>
<p>This is the full <code>Message</code> constructor. It has all possible fields.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function Message(dup::Bool, qos::QOS, retain::Bool, topic::String, payload...)
"><pre><span class="pl-k">function</span> <span class="pl-en">Message</span>(dup<span class="pl-k">::</span><span class="pl-c1">Bool</span>, qos<span class="pl-k">::</span><span class="pl-c1">QOS</span>, retain<span class="pl-k">::</span><span class="pl-c1">Bool</span>, topic<span class="pl-k">::</span><span class="pl-c1">String</span>, payload<span class="pl-k">...</span>)</pre></div>
<p>This constructor is mostly for internal use. It uses the <code>UInt8</code> equivalent of the <code>QOS</code> enum for easier processing.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function Message(dup::Bool, qos::UInt8, retain::Bool, topic::String, payload...)
"><pre><span class="pl-k">function</span> <span class="pl-en">Message</span>(dup<span class="pl-k">::</span><span class="pl-c1">Bool</span>, qos<span class="pl-k">::</span><span class="pl-c1">UInt8</span>, retain<span class="pl-k">::</span><span class="pl-c1">Bool</span>, topic<span class="pl-k">::</span><span class="pl-c1">String</span>, payload<span class="pl-k">...</span>)</pre></div>
<h2><a id="user-content-connect" class="anchor" aria-hidden="true" href="#connect"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Connect</h2>
<p><a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028" rel="nofollow">MQTT v3.1.1 Doc</a></p>
<p>Connects the <code>Client</code> instance to the specified broker. There is a synchronous and an asynchronous version available. Both versions take the same arguments.</p>
<h4><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<p><strong>Required arguments:</strong></p>
<ul>
<li><strong>client</strong>::Client: The client to connect to the broker.</li>
<li><strong>host</strong>::AbstractString: The hostname or ip address of the broker.</li>
</ul>
<p><strong>Optional arguments:</strong></p>
<ul>
<li><strong>port</strong>::Integer: The port to use ; <em>default = 1883</em></li>
<li><strong>keep_alive</strong>::Int64: If the client hasn't sent or received a message within this time limit, it will ping the broker to verify the connection is still active. A value of 0 means no pings will be sent. ; <em>default = 0</em></li>
<li><strong>client_id</strong>::String: The id of the client. This should be unique per broker. Some brokers allow an empty client_id for a stateless connection (this means clean_session needs to be true). ; <em>default = random 8 char string</em></li>
<li><strong>user</strong>::User: The user, password pair for authentication with the broker. Password can be empty even if user isn't. The password should probably be encrypted. ; <em>default = empty pair</em></li>
<li><strong>will</strong>::Message: The will of this client. This message gets published on the specified topic once the client disconnects from the broker. The type of this argument is <code>Message</code>, consult with it's documentation above for more info. ; <em>default = empty will</em></li>
<li><strong>clean_session</strong>::Bool: Specifies whether or not a connection should be resumed. This implies this <code>Client</code> instance was previously connected to this broker. ; <em>default = true</em></li>
</ul>
<h4><a id="user-content-call-example" class="anchor" aria-hidden="true" href="#call-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Call example</h4>
<p>The dup and retain flag of a will have to be false so it's safest to use the minimal <code>Message</code> constructor (Refer to <code>Message</code> documentation above).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="connect(c, &quot;test.mosquitto.org&quot;, keep_alive=60, client_id=&quot;TestClient&quot;, user=User(&quot;name&quot;, &quot;pw&quot;), will=Message(QOS_2, &quot;TestClient/will&quot;, &quot;payload&quot;, more_payload_data))
"><pre><span class="pl-c1">connect</span>(c, <span class="pl-s"><span class="pl-pds">"</span>test.mosquitto.org<span class="pl-pds">"</span></span>, keep_alive<span class="pl-k">=</span><span class="pl-c1">60</span>, client_id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>TestClient<span class="pl-pds">"</span></span>, user<span class="pl-k">=</span><span class="pl-c1">User</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>pw<span class="pl-pds">"</span></span>), will<span class="pl-k">=</span><span class="pl-c1">Message</span>(QOS_2, <span class="pl-s"><span class="pl-pds">"</span>TestClient/will<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>payload<span class="pl-pds">"</span></span>, more_payload_data))</pre></div>
<h4><a id="user-content-synchronous-connect" class="anchor" aria-hidden="true" href="#synchronous-connect"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synchronous connect</h4>
<p>This method waits until the client is connected to the broker. TODO add return documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function connect(client::Client, host::AbstractString, port::Integer=1883;
keep_alive::Int64=0,
client_id::String=randstring(8),
user::User=User(&quot;&quot;, &quot;&quot;),
will::Message=Message(false, 0x00, false, &quot;&quot;, Array{UInt8}()),
clean_session::Bool=true)
"><pre><span class="pl-k">function</span> <span class="pl-en">connect</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>, host<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, port<span class="pl-k">::</span><span class="pl-c1">Integer</span><span class="pl-k">=</span><span class="pl-c1">1883</span>;
keep_alive<span class="pl-k">::</span><span class="pl-c1">Int64</span><span class="pl-k">=</span><span class="pl-c1">0</span>,
client_id<span class="pl-k">::</span><span class="pl-c1">String</span><span class="pl-k">=</span><span class="pl-c1">randstring</span>(<span class="pl-c1">8</span>),
user<span class="pl-k">::</span><span class="pl-c1">User</span><span class="pl-k">=</span><span class="pl-c1">User</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),
will<span class="pl-k">::</span><span class="pl-c1">Message</span><span class="pl-k">=</span><span class="pl-c1">Message</span>(<span class="pl-c1">false</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">false</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-c1">Array</span><span class="pl-c1">{UInt8}</span>()),
clean_session<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h4><a id="user-content-asynchronous-connect" class="anchor" aria-hidden="true" href="#asynchronous-connect"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Asynchronous connect</h4>
<p>This method doesn't wait and returns a <code>Future</code> object. You may wait on this object with the fetch method. This future completes once the client is fully connected. TODO add future data documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function connect_async(client::Client, host::AbstractString, port::Integer=1883;
keep_alive::Int64=0,
client_id::String=randstring(8),
user::User=User(&quot;&quot;, &quot;&quot;),
will::Message=Message(false, 0x00, false, &quot;&quot;, Array{UInt8}()),
clean_session::Bool=true)
"><pre><span class="pl-k">function</span> <span class="pl-en">connect_async</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>, host<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, port<span class="pl-k">::</span><span class="pl-c1">Integer</span><span class="pl-k">=</span><span class="pl-c1">1883</span>;
keep_alive<span class="pl-k">::</span><span class="pl-c1">Int64</span><span class="pl-k">=</span><span class="pl-c1">0</span>,
client_id<span class="pl-k">::</span><span class="pl-c1">String</span><span class="pl-k">=</span><span class="pl-c1">randstring</span>(<span class="pl-c1">8</span>),
user<span class="pl-k">::</span><span class="pl-c1">User</span><span class="pl-k">=</span><span class="pl-c1">User</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),
will<span class="pl-k">::</span><span class="pl-c1">Message</span><span class="pl-k">=</span><span class="pl-c1">Message</span>(<span class="pl-c1">false</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">false</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-c1">Array</span><span class="pl-c1">{UInt8}</span>()),
clean_session<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-publish" class="anchor" aria-hidden="true" href="#publish"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Publish</h2>
<p><a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718037" rel="nofollow">MQTT v3.1.1 Doc</a></p>
<p>Publishes a message to the broker connected to the <code>Client</code> instance provided as a parameter. There is a synchronous and an asynchronous version available. Both versions take the same arguments.</p>
<h4><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<p><strong>Required arguments:</strong></p>
<ul>
<li><strong>client</strong>::Client: The client to send the message over.</li>
<li><strong>topic</strong>::String: The topic to publish on. Normal rules for publish topics apply so "/ are allowed but no wildcards.</li>
<li><strong>payload</strong>::Any...: Can be several parameters with potentially different types. Can also be empty.</li>
</ul>
<p><strong>Optional arguments:</strong></p>
<ul>
<li><strong>dup</strong>::Bool: Tells the broker that the message is a duplicate. This should not be used under normal circumstances as the library handles this. ; <em>default = false</em></li>
<li><strong>qos</strong>::QOS: The MQTT quality of service to use for the message. This has to be a QOS constant (QOS_0, QOS_1, QOS_2). ; <em>default = QOS_0</em></li>
<li><strong>retain</strong>::Bool: Whether or not the message should be retained by the broker. This means the broker sends it to all clients who subscribe to this topic ; <em>default = false</em></li>
</ul>
<h4><a id="user-content-call-example-1" class="anchor" aria-hidden="true" href="#call-example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Call example</h4>
<p>These are valid <code>payload...</code> examples.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="publish(c, &quot;hello/world&quot;)
publish(c, &quot;hello/world&quot;, &quot;Test&quot;, 6, 4.2)
"><pre><span class="pl-c1">publish</span>(c, <span class="pl-s"><span class="pl-pds">"</span>hello/world<span class="pl-pds">"</span></span>)
<span class="pl-c1">publish</span>(c, <span class="pl-s"><span class="pl-pds">"</span>hello/world<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>, <span class="pl-c1">6</span>, <span class="pl-c1">4.2</span>)</pre></div>
<p>This is a valid use of the optional arguments.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="publish(c, &quot;hello/world&quot;, &quot;Test&quot;, 6, 4.2, qos=QOS_1, retain=true)
"><pre><span class="pl-c1">publish</span>(c, <span class="pl-s"><span class="pl-pds">"</span>hello/world<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>, <span class="pl-c1">6</span>, <span class="pl-c1">4.2</span>, qos<span class="pl-k">=</span>QOS_1, retain<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h4><a id="user-content-synchronous-publish" class="anchor" aria-hidden="true" href="#synchronous-publish"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synchronous publish</h4>
<p>This method waits until the publish message has been processed completely and successfully. So in case of QOS 2 it waits until the PUBCOMP has been received. TODO add return documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function publish(client::Client, topic::String, payload...;
    dup::Bool=false,
    qos::UInt8=0x00,
    retain::Bool=false)
"><pre><span class="pl-k">function</span> <span class="pl-en">publish</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>, topic<span class="pl-k">::</span><span class="pl-c1">String</span>, payload<span class="pl-k">...</span>;
    dup<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>,
    qos<span class="pl-k">::</span><span class="pl-c1">UInt8</span><span class="pl-k">=</span><span class="pl-c1">0x00</span>,
    retain<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<h4><a id="user-content-asynchronous-publish" class="anchor" aria-hidden="true" href="#asynchronous-publish"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Asynchronous publish</h4>
<p>This method doesn't wait and returns a <code>Future</code> object. You may choose to wait on this object. This future completes once the publish message has been processed completely and successfully. So in case of QOS 2 it waits until the PUBCOMP has been received. TODO change future data documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function publish_async(client::Client, topic::String, payload...;
    dup::Bool=false,
    qos::UInt8=0x00,
    retain::Bool=false)
"><pre><span class="pl-k">function</span> <span class="pl-en">publish_async</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>, topic<span class="pl-k">::</span><span class="pl-c1">String</span>, payload<span class="pl-k">...</span>;
    dup<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>,
    qos<span class="pl-k">::</span><span class="pl-c1">UInt8</span><span class="pl-k">=</span><span class="pl-c1">0x00</span>,
    retain<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<h2><a id="user-content-subscribe" class="anchor" aria-hidden="true" href="#subscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Subscribe</h2>
<p><a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718063" rel="nofollow">MQTT v3.1.1 Doc</a></p>
<p>Subscribes the <code>Client</code> instance, provided as a parameter, to the specified topics. There is a synchronous and an asynchronous version available. Both versions take the same arguments.</p>
<h4><a id="user-content-arguments-2" class="anchor" aria-hidden="true" href="#arguments-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<p><strong>Required arguments:</strong></p>
<ul>
<li><strong>client</strong>::Client: The connected client to subscribe on. TODO phrasing?</li>
<li><strong>topics</strong>::Tuple{String, QOS}...: A variable amount of tuples that each have a String and a QOS constant.</li>
</ul>
<h4><a id="user-content-call-example-2" class="anchor" aria-hidden="true" href="#call-example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Call example</h4>
<p>This example subscribes to the topic "test" with QOS_2 and "test2" with QOS_0.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="subscribe(c, (&quot;test&quot;, QOS_2), (&quot;test2&quot;, QOS_0))
"><pre><span class="pl-c1">subscribe</span>(c, (<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, QOS_2), (<span class="pl-s"><span class="pl-pds">"</span>test2<span class="pl-pds">"</span></span>, QOS_0))</pre></div>
<h4><a id="user-content-synchronous-subscribe" class="anchor" aria-hidden="true" href="#synchronous-subscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synchronous subscribe</h4>
<p>This method waits until the subscribe message has been successfully sent and acknowledged. TODO add return documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function subscribe(client, topics::Tuple{String, QOS}...)
"><pre><span class="pl-k">function</span> <span class="pl-en">subscribe</span>(client, topics<span class="pl-k">::</span><span class="pl-c1">Tuple{String, QOS}</span>...)</pre></div>
<h4><a id="user-content-asynchronous-subscribe" class="anchor" aria-hidden="true" href="#asynchronous-subscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Asynchronous subscribe</h4>
<p>This method doesn't wait and returns a <code>Future</code> object. You may choose to wait on this object. This future completes once the subscribe message has been successfully sent and acknowledged. TODO change future data documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function subscribe_async(client, topics::Tuple{String, QOS}...)
"><pre><span class="pl-k">function</span> <span class="pl-en">subscribe_async</span>(client, topics<span class="pl-k">::</span><span class="pl-c1">Tuple{String, QOS}</span>...)</pre></div>
<h2><a id="user-content-unsubscribe" class="anchor" aria-hidden="true" href="#unsubscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unsubscribe</h2>
<p><a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718072" rel="nofollow">MQTT v3.1.1 Doc</a></p>
<p>This method unsubscribes the <code>Client</code> instance from the specified topics. There is a synchronous and an asynchronous version available. Both versions take the same arguments.</p>
<h4><a id="user-content-arguments-3" class="anchor" aria-hidden="true" href="#arguments-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<p><strong>Required arguments:</strong></p>
<ul>
<li><strong>client</strong>::Client: The connected client to unsubscribe from the topics.</li>
<li><strong>topics</strong>::String...: The <code>Tuple</code> of topics to unsubscribe from.</li>
</ul>
<h4><a id="user-content-example-call" class="anchor" aria-hidden="true" href="#example-call"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example call</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="unsubscribe(c, &quot;test1&quot;, &quot;test2&quot;, &quot;test3&quot;)
"><pre><span class="pl-c1">unsubscribe</span>(c, <span class="pl-s"><span class="pl-pds">"</span>test1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test3<span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-synchronous-unsubscribe" class="anchor" aria-hidden="true" href="#synchronous-unsubscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synchronous unsubscribe</h4>
<p>This method waits until the unsubscribe method has been sent and acknowledged. TODO add return documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function unsubscribe(client::Client, topics::String...)
"><pre><span class="pl-k">function</span> <span class="pl-en">unsubscribe</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>, topics<span class="pl-k">::</span><span class="pl-c1">String...</span>)</pre></div>
<h4><a id="user-content-asynchronous-unsubscribe" class="anchor" aria-hidden="true" href="#asynchronous-unsubscribe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Asynchronous unsubscribe</h4>
<p>This method doesn't wait and returns a <code>Future</code> object. You may wait on this object with the fetch method. This future completes once the unsubscribe message has been sent and acknowledged. TODO add future data documentation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function unsubscribe_async(client::Client, topics::String...)
"><pre><span class="pl-k">function</span> <span class="pl-en">unsubscribe_async</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>, topics<span class="pl-k">::</span><span class="pl-c1">String...</span>)</pre></div>
<h2><a id="user-content-disconnect" class="anchor" aria-hidden="true" href="#disconnect"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disconnect</h2>
<p><a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718090" rel="nofollow">MQTT v3.1.1 Doc</a></p>
<p>Disconnects the <code>Client</code> instance gracefully, shuts down the background tasks and stores session state. There is only a synchronous version available.</p>
<h4><a id="user-content-arguments-4" class="anchor" aria-hidden="true" href="#arguments-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<p><strong>Required arguments:</strong></p>
<ul>
<li><strong>client</strong>::Client: The client to disconnect.</li>
</ul>
<h4><a id="user-content-example-call-1" class="anchor" aria-hidden="true" href="#example-call-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example call</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="disconnect(c)
"><pre><span class="pl-c1">disconnect</span>(c)</pre></div>
<h4><a id="user-content-synchronous-disconnect" class="anchor" aria-hidden="true" href="#synchronous-disconnect"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synchronous disconnect</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function disconnect(client::Client))
"><pre><span class="pl-k">function</span> <span class="pl-en">disconnect</span>(client<span class="pl-k">::</span><span class="pl-c1">Client</span>))</pre></div>
<h2><a id="user-content-internal-workings" class="anchor" aria-hidden="true" href="#internal-workings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Internal workings</h2>
<p>It isn't necessary to read this section if you just want to use this library but it might give additional insight into how everything works.</p>
<p>The <code>Client</code> instance has a <code>Channel</code>, called <code>write_packets</code>, to keep track of outbound messages that still need to be sent. Julia channels are basically just blocking queues so they have exactly the behavior we want.</p>
<p>For storing messages that are awaiting acknowledgment, <code>Client</code> has a <code>Dict</code>, mapping message ids to <code>Future</code> instances. These futures get completed once the message has been completely acknowledged. There might then be information in the <code>Future</code> relevant to the specific message.</p>
<p>Once the connect method is called on a <code>Client</code>, relevant fields are initialized and the julia <code>connect</code> method is called to get a connected socket. Then two background tasks are started that perpetually check for messages to send and receive. If <code>keep_alive</code> is non-zero another tasks get started that handles sending the keep alive and verifying the pingresp arrived in time.</p>
<p>TODO explain read and write loop a bit</p>
</article></div>