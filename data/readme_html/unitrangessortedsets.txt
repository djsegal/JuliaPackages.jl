<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unitrangessortedsets" class="anchor" aria-hidden="true" href="#unitrangessortedsets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnitRangesSortedSets</h1>
<p dir="auto"><a href="https://github.com/denius/UnitRangesSortedSets.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/denius/UnitRangesSortedSets.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/denius/UnitRangesSortedSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b2aca05bca29643aebfcc5e0be2e6e266cb46926d2c646203a3454d5bf38afaf/68747470733a2f2f636f6465636f762e696f2f67682f64656e6975732f556e697452616e676573536f72746564536574732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/denius/UnitRangesSortedSets.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Sorted set of <code>UnitRange</code>s. Sorted in ascending order and no one range overlaps with another.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mutable struct UnitRangesSortedSet{K, TU} &lt;: AbstractSet{TU}"><pre class="notranslate"><code>mutable struct UnitRangesSortedSet{K, TU} &lt;: AbstractSet{TU}
</code></pre></div>
<p dir="auto"><code>UnitRangesSortedSet</code> can be created like the standard <code>Set</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    UnitRangesSortedSet(somecontainer)"><pre>    <span class="pl-c1">UnitRangesSortedSet</span>(somecontainer)</pre></div>
<p dir="auto">for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using UnitRangesSortedSets

julia&gt; UnitRangesSortedSet((1, 2, 4))
UnitRangesSortedSet{Int64} with 2 elements:
  1:2
  4:4

julia&gt; UnitRangesSortedSet(('a':'z', 'α':'ω'))
UnitRangesSortedSet{Char} with 2 elements:
  'a':'z'
  'α':'ω'

julia&gt; Random.seed!(1234);

julia&gt; UnitRangesSortedSet(rand(1:20, 10))
UnitRangesSortedSet{Int64} with 6 elements:
   5:5
   7:8
  10:11
  15:16
  18:18
  20:20"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnitRangesSortedSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UnitRangesSortedSet</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>))
UnitRangesSortedSet{Int64} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
  <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
  <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UnitRangesSortedSet</span>((<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>z<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>α<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>ω<span class="pl-pds">'</span></span>))
UnitRangesSortedSet{Char} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>z<span class="pl-pds">'</span></span>
  <span class="pl-s"><span class="pl-pds">'</span>α<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>ω<span class="pl-pds">'</span></span>

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1234</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">UnitRangesSortedSet</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>, <span class="pl-c1">10</span>))
UnitRangesSortedSet{Int64} with <span class="pl-c1">6</span> elements<span class="pl-k">:</span>
   <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>
   <span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">8</span>
  <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">11</span>
  <span class="pl-c1">15</span><span class="pl-k">:</span><span class="pl-c1">16</span>
  <span class="pl-c1">18</span><span class="pl-k">:</span><span class="pl-c1">18</span>
  <span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span></pre></div>
<p dir="auto">or with <code>push!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; urs = UnitRangesSortedSet{Int}()
UnitRangesSortedSet{Int64}()

julia&gt; push!(urs, 1)
UnitRangesSortedSet{Int64} with 1 element:
  1:1

julia&gt; push!(urs, 2)
UnitRangesSortedSet{Int64} with 1 element:
  1:2

julia&gt; push!(urs, 10:12)
UnitRangesSortedSet{Int64} with 2 elements:
   1:2
  10:12"><pre>julia<span class="pl-k">&gt;</span> urs <span class="pl-k">=</span> <span class="pl-c1">UnitRangesSortedSet</span><span class="pl-c1">{Int}</span>()
<span class="pl-c1">UnitRangesSortedSet</span><span class="pl-c1">{Int64}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(urs, <span class="pl-c1">1</span>)
UnitRangesSortedSet{Int64} with <span class="pl-c1">1</span> element<span class="pl-k">:</span>
  <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(urs, <span class="pl-c1">2</span>)
UnitRangesSortedSet{Int64} with <span class="pl-c1">1</span> element<span class="pl-k">:</span>
  <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(urs, <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">12</span>)
UnitRangesSortedSet{Int64} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
   <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
  <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">12</span></pre></div>
<p dir="auto">Iterating over set of ranges:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; for r in urs @show(r) end
r = 1:2
r = 10:12

julia&gt; for r in urs, i in r @show(i) end
i = 1
i = 2
i = 10
i = 11
i = 12

julia&gt; for i in Iterators.flatten(urs) @show(i) end
i = 1
i = 2
i = 10
i = 11
i = 12

julia&gt; collect(urs)
2-element Vector{UnitRange{Int64}}:
 1:2
 10:12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> r <span class="pl-k">in</span> urs <span class="pl-c1">@show</span>(r) <span class="pl-k">end</span>
r <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
r <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> r <span class="pl-k">in</span> urs, i <span class="pl-k">in</span> r <span class="pl-c1">@show</span>(i) <span class="pl-k">end</span>
i <span class="pl-k">=</span> <span class="pl-c1">1</span>
i <span class="pl-k">=</span> <span class="pl-c1">2</span>
i <span class="pl-k">=</span> <span class="pl-c1">10</span>
i <span class="pl-k">=</span> <span class="pl-c1">11</span>
i <span class="pl-k">=</span> <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> Iterators<span class="pl-k">.</span><span class="pl-c1">flatten</span>(urs) <span class="pl-c1">@show</span>(i) <span class="pl-k">end</span>
i <span class="pl-k">=</span> <span class="pl-c1">1</span>
i <span class="pl-k">=</span> <span class="pl-c1">2</span>
i <span class="pl-k">=</span> <span class="pl-c1">10</span>
i <span class="pl-k">=</span> <span class="pl-c1">11</span>
i <span class="pl-k">=</span> <span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(urs)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{UnitRange{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
 <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">12</span></pre></div>
<p dir="auto">Deleting elements and ranges:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; delete!(urs, 10:11)
UnitRangesSortedSet{Int64} with 2 elements:
   1:2
  12:12

julia&gt; delete!(urs, 1)
UnitRangesSortedSet{Int64} with 2 elements:
   2:2
  12:12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete!</span>(urs, <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">11</span>)
UnitRangesSortedSet{Int64} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
   <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
  <span class="pl-c1">12</span><span class="pl-k">:</span><span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete!</span>(urs, <span class="pl-c1">1</span>)
UnitRangesSortedSet{Int64} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
   <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>
  <span class="pl-c1">12</span><span class="pl-k">:</span><span class="pl-c1">12</span></pre></div>
<h1 dir="auto"><a id="user-content-subset" class="anchor" aria-hidden="true" href="#subset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SubSet</h1>
<p dir="auto">It is possible to create the subset of <code>UnitRangesSortedSet</code>, like a <code>view</code> for <code>Array</code>s:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; urs = UnitRangesSortedSet((1:2, 10:12))
UnitRangesSortedSet{Int64} with 2 elements:
   1:2
  10:12

julia&gt; ss = subset(urs, 0:10)
2-element subset(UnitRangesSortedSet{Int64}, DataStructures.Tokens.IntSemiToken(3):DataStructures.Tokens.IntSemiToken(4)):
   1:2
  10:10"><pre>julia<span class="pl-k">&gt;</span> urs <span class="pl-k">=</span> <span class="pl-c1">UnitRangesSortedSet</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">12</span>))
UnitRangesSortedSet{Int64} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
   <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
  <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> ss <span class="pl-k">=</span> <span class="pl-c1">subset</span>(urs, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">subset</span>(UnitRangesSortedSet{Int64}, DataStructures<span class="pl-k">.</span>Tokens<span class="pl-k">.</span><span class="pl-c1">IntSemiToken</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>DataStructures<span class="pl-k">.</span>Tokens<span class="pl-k">.</span><span class="pl-c1">IntSemiToken</span>(<span class="pl-c1">4</span>))<span class="pl-k">:</span>
   <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
  <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span></pre></div>
<p dir="auto">The <code>subset</code> object is an static, iterable view of the container.</p>
<h1 dir="auto"><a id="user-content-two-types-of-unitrangessortedset" class="anchor" aria-hidden="true" href="#two-types-of-unitrangessortedset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Two types of <code>UnitRangesSortedSet</code></h1>
<p dir="auto">The first type <code>UnitRangesSortedSet{K}</code> contains <code>SortedDict{K,K}</code>,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct UnitRangesSortedSet{K,TU} &lt;: AbstractUnitRangesSortedContainer{K,TU}
    ranges::SortedDict{K,K,FOrd}
end"><pre><span class="pl-k">mutable struct</span> UnitRangesSortedSet{K,TU} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractUnitRangesSortedContainer{K,TU}</span>
    ranges<span class="pl-k">::</span><span class="pl-c1">SortedDict{K,K,FOrd}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">where each element of the dict contains the <code>first(range)</code> as key, and the <code>last(range)</code> as value.</p>
<p dir="auto">The second implementation <code>VecUnitRangesSortedSet{K}</code> is based on <code>Vector{K}</code>s:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct VecUnitRangesSortedSet{K,TU} &lt;: AbstractUnitRangesSortedContainer{K,TU}
    rstarts::Vector{K}
    rstops::Vector{K}
end"><pre><span class="pl-k">mutable struct</span> VecUnitRangesSortedSet{K,TU} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractUnitRangesSortedContainer{K,TU}</span>
    rstarts<span class="pl-k">::</span><span class="pl-c1">Vector{K}</span>
    rstops<span class="pl-k">::</span><span class="pl-c1">Vector{K}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">where <code>rstarts::Vector{K}</code> and <code>rstops::Vector{K}</code> are the starts and stops of
the ranges respectively.</p>
<p dir="auto">These two implementations have a similar API but different speeds.</p>
<p dir="auto">In either case, both of them can be converted to each other using the appropriate constructor.</p>
<h1 dir="auto"><a id="user-content-benchmarking" class="anchor" aria-hidden="true" href="#benchmarking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarking</h1>
<p dir="auto">All results of benchmarks in the file <a href="test/test-bench-results.md">test-bench-results.md</a>.</p>
<p dir="auto">Main conclusions of benchmarking:</p>
<ul dir="auto">
<li>in any case of iterating over <code>range</code>s or consecutively element-wise in any <code>AbstractUnitRangesSortedSet</code> is
much much faster then in any another variant.</li>
<li>element-wise iterating, and over ranges iterating, in <code>VecUnitRangesSortedSet</code> is faster by
the orders over <code>UnitRangesSortedSet</code>.</li>
<li>when created from elements in random order, <code>UnitRangesSortedSet</code> is vastly superior
to the <code>Vec</code> variant.</li>
<li>creating in consecutively element-wise order, <code>VecUnitRangesSortedSet</code> is an order of magnitude faster
than creating a set of the second type.</li>
<li>in searching operations (<code>in()</code>, <code>subset()</code>) <code>VecUnitRangesSortedSet</code> variant is faster:
in Julia-v1.6 it is twice as fast, in Julia-1.8 the speedup is about 20-30%.</li>
<li>if your range diapason is about some millions of elements then the <code>BitSet</code> is the best choice
for creating. And then <code>convert(UnitRangesSortedSet, someBitSetContainer)</code> is the solution to
have the fast iteration over container.</li>
</ul>
<h3 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h3>
<p dir="auto">For <code>Char</code>, <code>StepRange{Char,UInt8}</code> will be used, with a step of <code>oneunit(UInt8)</code> if needed.</p>
</article></div>