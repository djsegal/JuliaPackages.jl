<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bsplinekitjl" class="anchor" aria-hidden="true" href="#bsplinekitjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BSplineKit.jl</h1>
<p dir="auto"><a href="https://jipolanco.github.io/BSplineKit.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jipolanco.github.io/BSplineKit.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.5150350" rel="nofollow"><img src="https://camo.githubusercontent.com/7f9c4f54cd3484078c2e3b59c3b181cf14abc73f1965189f52a52697035d3a80/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e353135303335302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.5150350.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jipolanco/BSplineKit.jl/actions"><img src="https://github.com/jipolanco/BSplineKit.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jipolanco/BSplineKit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b673c38e72c4b5982168328647c458e3f9570a658220459134b041eafbc06e4/68747470733a2f2f636f6465636f762e696f2f67682f6a69706f6c616e636f2f4253706c696e654b69742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jipolanco/BSplineKit.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Tools for B-spline based Galerkin and collocation methods in Julia.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto">This package provides:</p>
<ul dir="auto">
<li>
<p dir="auto">B-spline bases of arbitrary order on uniform and non-uniform grids;</p>
</li>
<li>
<p dir="auto">evaluation of splines and their derivatives and integrals;</p>
</li>
<li>
<p dir="auto">spline interpolations and function approximation;</p>
</li>
<li>
<p dir="auto">basis recombination, for generating bases satisfying homogeneous boundary
conditions using linear combinations of B-splines.
Supported boundary conditions include Dirichlet, Neumann, Robin, and
generalisations of these;</p>
</li>
<li>
<p dir="auto">banded Galerkin and collocation matrices for solving differential equations,
using B-spline and recombined bases;</p>
</li>
<li>
<p dir="auto">efficient "banded" 3D arrays as an extension of banded matrices.
These can store 3D tensors associated to quadratic terms in Galerkin methods.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">The following is a very brief overview of some of the functionality provided
by this package.</p>
<ul dir="auto">
<li>
<p dir="auto">Interpolate discrete data using cubic splines (B-spline order <code>k = 4</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xdata = (0:10).^2  # points don't need to be uniformly distributed
ydata = rand(length(xdata))
itp = interpolate(xdata, ydata, BSplineOrder(4))
itp(12.3)  # interpolation can be evaluated at any intermediate point"><pre>xdata <span class="pl-k">=</span> (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> points don't need to be uniformly distributed</span>
ydata <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">length</span>(xdata))
itp <span class="pl-k">=</span> <span class="pl-c1">interpolate</span>(xdata, ydata, <span class="pl-c1">BSplineOrder</span>(<span class="pl-c1">4</span>))
<span class="pl-c1">itp</span>(<span class="pl-c1">12.3</span>)  <span class="pl-c"><span class="pl-c">#</span> interpolation can be evaluated at any intermediate point</span></pre></div>
</li>
<li>
<p dir="auto">Create B-spline basis of order <code>k = 6</code> (polynomial degree 5) from a given
set of breakpoints:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="breaks = log2.(1:16)  # breakpoints don't need to be uniformly distributed either
B = BSplineBasis(BSplineOrder(6), breaks)"><pre>breaks <span class="pl-k">=</span> <span class="pl-c1">log2</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">16</span>)  <span class="pl-c"><span class="pl-c">#</span> breakpoints don't need to be uniformly distributed either</span>
B <span class="pl-k">=</span> <span class="pl-c1">BSplineBasis</span>(<span class="pl-c1">BSplineOrder</span>(<span class="pl-c1">6</span>), breaks)</pre></div>
</li>
<li>
<p dir="auto">Approximate known function by a spline in a previously constructed basis:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x) = exp(-x) * sin(x)
fapprox = approximate(f, B)
f(2.3), fapprox(2.3)  # (0.07476354233090601, 0.0747642348243861)"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(x)
fapprox <span class="pl-k">=</span> <span class="pl-c1">approximate</span>(f, B)
<span class="pl-c1">f</span>(<span class="pl-c1">2.3</span>), <span class="pl-c1">fapprox</span>(<span class="pl-c1">2.3</span>)  <span class="pl-c"><span class="pl-c">#</span> (0.07476354233090601, 0.0747642348243861)</span></pre></div>
</li>
<li>
<p dir="auto">Create derived basis satisfying homogeneous <a href="https://en.wikipedia.org/wiki/Robin_boundary_condition" rel="nofollow">Robin boundary
conditions</a> on the
two boundaries:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bc = Derivative(0) + 3Derivative(1)
R = RecombinedBSplineBasis(bc, B)  # satisfies u ∓ 3u' = 0 on the left/right boundary"><pre>bc <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-c1">Derivative</span>(<span class="pl-c1">1</span>)
R <span class="pl-k">=</span> <span class="pl-c1">RecombinedBSplineBasis</span>(bc, B)  <span class="pl-c"><span class="pl-c">#</span> satisfies u ∓ 3u' = 0 on the left/right boundary</span></pre></div>
</li>
<li>
<p dir="auto">Construct <a href="https://en.wikipedia.org/wiki/Mass_matrix" rel="nofollow">mass matrix</a> and
<a href="https://en.wikipedia.org/wiki/Stiffness_matrix" rel="nofollow">stiffness matrix</a> for
the Galerkin method in the recombined basis:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# By default, M and L are Hermitian banded matrices
M = galerkin_matrix(R)
L = galerkin_matrix(R, (Derivative(1), Derivative(1)))"><pre><span class="pl-c"><span class="pl-c">#</span> By default, M and L are Hermitian banded matrices</span>
M <span class="pl-k">=</span> <span class="pl-c1">galerkin_matrix</span>(R)
L <span class="pl-k">=</span> <span class="pl-c1">galerkin_matrix</span>(R, (<span class="pl-c1">Derivative</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Derivative</span>(<span class="pl-c1">1</span>)))</pre></div>
</li>
<li>
<p dir="auto">Construct banded 3D tensor associated to non-linear term of the <a href="https://en.wikipedia.org/wiki/Burgers%27_equation" rel="nofollow">Burgers
equation</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="T = galerkin_tensor(R, (Derivative(0), Derivative(1), Derivative(0)))"><pre>T <span class="pl-k">=</span> <span class="pl-c1">galerkin_tensor</span>(R, (<span class="pl-c1">Derivative</span>(<span class="pl-c1">0</span>), <span class="pl-c1">Derivative</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Derivative</span>(<span class="pl-c1">0</span>)))</pre></div>
</li>
</ul>
<p dir="auto">See the <a href="https://jipolanco.github.io/BSplineKit.jl/stable/generated/heat/" rel="nofollow">heat equation
example</a> in
the docs for the use of these tools to solve partial differential equations.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<ul dir="auto">
<li>
<p dir="auto">C. de Boor, <em>A Practical Guide to Splines</em>. New York: Springer-Verlag, 1978.</p>
</li>
<li>
<p dir="auto">J. P. Boyd, <em>Chebyshev and Fourier Spectral Methods</em>, Second Edition.
Mineola, N.Y: Dover Publications, 2001.</p>
</li>
<li>
<p dir="auto">O. Botella and K. Shariff, <em>B-spline Methods in Fluid Dynamics</em>, Int. J. Comput.
Fluid Dyn. 17, 133 (2003).</p>
</li>
</ul>
</article></div>