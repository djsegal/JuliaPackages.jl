<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mathematicajl" class="anchor" aria-hidden="true" href="#mathematicajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mathematica.jl</h1>
<h2 dir="auto"><a id="user-content-warning-mathematicajl-is-no-longer-actively-maintained-head-over-to-mathlinkjl-for-similar-functionality" class="anchor" aria-hidden="true" href="#warning-mathematicajl-is-no-longer-actively-maintained-head-over-to-mathlinkjl-for-similar-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Warning: Mathematica.jl is no longer actively maintained. Head over to <a href="https://github.com/JuliaInterop/MathLink.jl">MathLink.jl</a> for similar functionality.</h2>
<p dir="auto"><a href="https://gitter.im/one-more-minute/Mathematica.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/11794c8c532fee32bd46f9f609fb0feb354ffa2ec0ccf81bf08c51a474d179cc/68747470733a2f2f6261646765732e6769747465722e696d2f6f6e652d6d6f72652d6d696e7574652f4d617468656d61746963612e6a6c2e706e67" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/one-more-minute/Mathematica.jl.png" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>Mathematica.jl</code> package provides an interface for using <a href="http://www.wolfram.com/mathematica/" rel="nofollow">Wolfram Mathematica™</a> from the <a href="http://julialang.org" rel="nofollow">Julia language</a>. You cannot use <code>Mathematica.jl</code> without having purchased and installed a copy of Mathematica™ from <a href="http://www.wolfram.com/" rel="nofollow">Wolfram Research</a>. This package is available free of charge and in no way replaces or alters any functionality of Wolfram's Mathematica product.</p>
<p dir="auto">The package provides is a no-hassle Julia interface to Mathematica. It aims to follow Julia's philosophy of combining high-level expressiveness without sacrificing low-level optimisation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Mathematica&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Mathematica<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Provided Mathematica is installed, its usage is as simple as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mathematica
Fibonacci(1000)
#=&gt; 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875"><pre><span class="pl-k">using</span> Mathematica
<span class="pl-c1">Fibonacci</span>(<span class="pl-c1">1000</span>)
<span class="pl-c"><span class="pl-c">#=</span>&gt; 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875</span></pre></div>
<p dir="auto">All of Mathematica's functions are available as both functions and macros, and splicing (<code>$</code>) works as you would expect:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Integrate(:(x^2), :x) # or
@Integrate(x^2, x)
#=&gt; :(*(1//3,^(x,3)))

@Integrate(log(x), {x,0,2})
#=&gt; :(+(-2,log(4)))

eval(ans) # or
@N($ans) # or
N(ans) # or
@N(Integrate(log(x), {x,0,2}))
#=&gt; -0.6137056388801094"><pre><span class="pl-c1">Integrate</span>(:(x<span class="pl-k">^</span><span class="pl-c1">2</span>), <span class="pl-c1">:x</span>) <span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">@Integrate</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>, x)
<span class="pl-c"><span class="pl-c">#=</span>&gt; :(*(1//3,^(x,3)))</span>
<span class="pl-c"></span>
<span class="pl-c">@Integrate(log(x), {x,0,2})</span>
<span class="pl-c"><span class="pl-c"><span class="pl-c">#=</span>&gt; :(+(-2,log(4)))</span></span>
<span class="pl-c"><span class="pl-c"></span></span>
<span class="pl-c"><span class="pl-c">eval(ans) # or</span></span>
<span class="pl-c"><span class="pl-c">@N($ans) # or</span></span>
<span class="pl-c"><span class="pl-c">N(ans) # or</span></span>
<span class="pl-c"><span class="pl-c">@N(Integrate(log(x), {x,0,2}))</span></span>
<span class="pl-c"><span class="pl-c"><span class="pl-c"><span class="pl-c">#=</span>&gt; -0.6137056388801094</span></span></span></pre></div>
<p dir="auto">Including those that return Mathematica data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@Plot(x^2, {x,0,2})
#=&gt; Graphics[{{{},{},{Hue[0.67, 0.6, 0.6],Line[{{4.081632653061224e-8,1.6659725114535607e-15},...}]}}}, {:AspectRatio-&gt;Power[:GoldenRatio, -1],:Axes-&gt;true, ...}]"><pre><span class="pl-c1">@Plot</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>, {x,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>})
<span class="pl-c"><span class="pl-c">#=</span>&gt; Graphics[{{{},{},{Hue[0.67, 0.6, 0.6],Line[{{4.081632653061224e-8,1.6659725114535607e-15},...}]}}}, {:AspectRatio-&gt;Power[:GoldenRatio, -1],:Axes-&gt;true, ...}]</span></pre></div>
<p dir="auto">Mathematical data can participate in Julia functions directly, with no wrapping required. For example -</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathLink
d = BinomialDistribution(10,0.2) #=&gt; BinomialDistribution[10, 0.2]
probability(b::MExpr{:BinomialDistribution}) = b.args[2]
probability(d) #=&gt; 0.2"><pre><span class="pl-k">using</span> MathLink
d <span class="pl-k">=</span> <span class="pl-c1">BinomialDistribution</span>(<span class="pl-c1">10</span>,<span class="pl-c1">0.2</span>) <span class="pl-c"><span class="pl-c">#=</span>&gt; BinomialDistribution[10, 0.2]</span>
<span class="pl-c">probability(b::MExpr{:BinomialDistribution}) = b.args[2]</span>
<span class="pl-c">probability(d) <span class="pl-c"><span class="pl-c">#=</span>&gt; 0.2</span></span></pre></div>
<p dir="auto">Julia compatible data (e.g. lists, complex numbers etc.) will all be converted automatically, and you can extend the conversion to other types.</p>
<p dir="auto">Note that Mathematica expressions are <em>not</em> converted to Julia expressions by default. Functions/macros with the <code>::Expr</code> hint (see below) will convert their result, but for others you must use <code>convert</code> or <code>MathLink.to_expr</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Log(-1) #=&gt; Times[0 + 1im, :Pi]
convert(Expr, ans) #=&gt; :(*(0 + 1im,Pi))
N(Log(-1)) #=&gt; 0.0 + 3.141592653589793im"><pre><span class="pl-c1">Log</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#=</span>&gt; Times[0 + 1im, :Pi]</span>
<span class="pl-c">convert(Expr, ans) <span class="pl-c"><span class="pl-c">#=</span>&gt; :(*(0 + 1im,Pi))</span></span>
<span class="pl-c"><span class="pl-c">N(Log(-1)) <span class="pl-c"><span class="pl-c">#=</span>&gt; 0.0 + 3.141592653589793im</span></span></span></pre></div>
<p dir="auto">Printing and warnings are also supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Print(&quot;hi&quot;)
#=&gt; hi
@Print(x^2/3)
#=&gt;  2
#   x
#   --
#   3
Binomial(10)
#=&gt; WARNING: Binomial::argr: Binomial called with 1 argument; 2 arguments are expected.
#=&gt; Binomial[10]"><pre><span class="pl-c1">Print</span>(<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#=</span>&gt; hi</span>
<span class="pl-c">@Print(x^2/3)</span>
<span class="pl-c"><span class="pl-c"><span class="pl-c">#=</span>&gt;  2</span></span>
<span class="pl-c"><span class="pl-c">#   x</span></span>
<span class="pl-c"><span class="pl-c">#   --</span></span>
<span class="pl-c"><span class="pl-c">#   3</span></span>
<span class="pl-c"><span class="pl-c">Binomial(10)</span></span>
<span class="pl-c"><span class="pl-c"><span class="pl-c"><span class="pl-c">#=</span>&gt; WARNING: Binomial::argr: Binomial called with 1 argument; 2 arguments are expected.</span></span></span>
<span class="pl-c"><span class="pl-c"><span class="pl-c"><span class="pl-c"><span class="pl-c">#=</span>&gt; Binomial[10]</span></span></span></span></pre></div>
<p dir="auto">Finally, of course:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="WolframAlpha(&quot;hi&quot;) #=&gt;
2-element Array{Any,1}:
 {{&quot;Input&quot;,1},&quot;Plaintext&quot;}-&gt;&quot;Hello.&quot;
 {{&quot;Result&quot;,1},&quot;Plaintext&quot;}-&gt;&quot;Hello, human.&quot;"><pre><span class="pl-c1">WolframAlpha</span>(<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#=</span>&gt;</span>
<span class="pl-c">2-element Array{Any,1}:</span>
<span class="pl-c"> {{"Input",1},"Plaintext"}-&gt;"Hello."</span>
<span class="pl-c"> {{"Result",1},"Plaintext"}-&gt;"Hello, human."</span></pre></div>
<h2 dir="auto"><a id="user-content-advanced-use" class="anchor" aria-hidden="true" href="#advanced-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced Use</h2>
<h3 dir="auto"><a id="user-content-typing" class="anchor" aria-hidden="true" href="#typing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Typing</h3>
<p dir="auto">In the file <code>Mathematica.jl</code>, you'll see a listing of function and macro specifications, each in one of these formats:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Function::ReturnType # or
Function(Arg1Type, Arg2Type, ...)::ReturnType # (functions only)"><pre>Function<span class="pl-k">::</span><span class="pl-c1">ReturnType</span> <span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">Function</span>(Arg1Type, Arg2Type, <span class="pl-k">...</span>)<span class="pl-k">::</span><span class="pl-c1">ReturnType</span> <span class="pl-c"><span class="pl-c">#</span> (functions only)</span></pre></div>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Integrate::Expr
RandomReal(Number)::Float64
RandomReal(Number, Integer)::Vector{Float64}"><pre>Integrate<span class="pl-k">::</span><span class="pl-c1">Expr</span>
<span class="pl-c1">RandomReal</span>(Number)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-c1">RandomReal</span>(Number, Integer)<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span></pre></div>
<p dir="auto">The return type hint here is an optimisation; it allows <code>MathLink.jl</code> to grab the value from Mathematica without first doing a type check, and makes the function type stable - for example, <code>RandomReal(10, 5)</code> would return an <code>Any</code> array if not for this definition. The argument types allow type checking and multiple definitions.</p>
<p dir="auto">Not many functions have type signatures yet, so providing them for the functions you want to use is an easy way to contribute.</p>
<h3 dir="auto"><a id="user-content-extending-to-custom-datatypes" class="anchor" aria-hidden="true" href="#extending-to-custom-datatypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extending to custom datatypes</h3>
<p dir="auto">The Mathematica data expression <code>Head[x,y,z,...]</code> is represented in Julia as <code>MExpr{:Head}(args = {x,y,z,...})</code>. We can extend <code>Mathematica.jl</code> to support custom types by overloading <code>MathLink.to_mma</code> and <code>MathLink.from_mma</code>.</p>
<p dir="auto">For example, we can pass a Julia Dict straight through Mathematica with just two lines of definitions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathLink; import MathLink: to_mma, from_mma
d = [:a =&gt; 1, :b =&gt; 2]

to_mma(d::Dict) = MExpr{:Dict}(map(x-&gt;MExpr(:Rule, x[1], x[2]),d))
Identity(d) #=&gt; Dict[:b-&gt;2, :a-&gt;1]
from_mma(d::MExpr{:Dict}) = Dict(map(x-&gt;x.args[1], d.args), map(x-&gt;x.args[2], d.args))
Identity(d) #=&gt; {:b=&gt;2,:a=&gt;1}"><pre><span class="pl-k">using</span> MathLink; <span class="pl-k">import</span> MathLink<span class="pl-k">:</span> to_mma, from_mma
d <span class="pl-k">=</span> [<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>]

<span class="pl-en">to_mma</span>(d<span class="pl-k">::</span><span class="pl-c1">Dict</span>) <span class="pl-k">=</span> <span class="pl-c1">MExpr</span><span class="pl-c1">{:Dict}</span>(<span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">MExpr</span>(<span class="pl-c1">:Rule</span>, x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>]),d))
<span class="pl-c1">Identity</span>(d) <span class="pl-c"><span class="pl-c">#=</span>&gt; Dict[:b-&gt;2, :a-&gt;1]</span>
<span class="pl-c">from_mma(d::MExpr{:Dict}) = Dict(map(x-&gt;x.args[1], d.args), map(x-&gt;x.args[2], d.args))</span>
<span class="pl-c">Identity(d) <span class="pl-c"><span class="pl-c">#=</span>&gt; {:b=&gt;2,:a=&gt;1}</span></span></pre></div>
<h2 dir="auto"><a id="user-content-usage-issues" class="anchor" aria-hidden="true" href="#usage-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage Issues</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mathematica"><pre><span class="pl-k">using</span> Mathematica</pre></div>
<p dir="auto">This should work so long as either <code>math</code> is on the path (normally true on linux). <code>Mathematica.jl</code> will also look for <code>math.exe</code> on Windows, which should work for Mathematica versions 8 or 9 installed in default locations. If it doesn't work for you, open an issue (in particular I don't know how this will behave on Macs).</p>
<h2 dir="auto"><a id="user-content-current-limitations--planned-features" class="anchor" aria-hidden="true" href="#current-limitations--planned-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Limitations / Planned Features</h2>
<ul dir="auto">
<li>Error handling: Error checking is currently reasonable, but the only way to reset the current link once an error is encountered is to restart Julia.</li>
<li>Passing native arrays and matrices is not currently supported.</li>
<li>MRefs: see the MVars section of <a href="https://github.com/one-more-minute/clj-mma?source=c#mathematica-vars">clj-mma</a></li>
<li>Connect to a running session and injecting callbacks to Julia functions would be really cool, but would probably require a C extension for Mathematica.</li>
</ul>
</article></div>