<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-distributedobjects" class="anchor" aria-hidden="true" href="#distributedobjects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DistributedObjects</h1>
<p dir="auto"><a href="https://github.com/Selim78/DistributedObjects.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/Selim78/DistributedObjects.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Ever had trouble keeping track of objects on remote processes? <br>
<code>DistributedObjects.jl</code> lets you <a href="#1-create"><strong>create</strong></a>, <a href="#2-access"><strong>access</strong></a>, <a href="#3-modify"><strong>modify</strong></a> and <a href="#4-delete"><strong>delete</strong></a> remotely stored objects.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install <code>DistributedObjects</code> by typing</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add DistributedObjects"><pre>julia<span class="pl-k">&gt;</span> ] add DistributedObjects</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Start with your usual <a href="https://github.com/Arpeggeo/julia-distributed-computing">distributed setup</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# launch multiple processes (or remote machines)
using Distributed; addprocs(5)

# instantiate and precompile environment in all processes
@everywhere (using Pkg; Pkg.activate(@__DIR__); Pkg.instantiate(); Pkg.precompile())

# you can now use DistributedObjects
@everywhere using DistributedObjects"><pre><span class="pl-c"><span class="pl-c">#</span> launch multiple processes (or remote machines)</span>
<span class="pl-k">using</span> Distributed; <span class="pl-c1">addprocs</span>(<span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> instantiate and precompile environment in all processes</span>
<span class="pl-c1">@everywhere</span> (<span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-c1">@__DIR__</span>); Pkg<span class="pl-k">.</span><span class="pl-c1">instantiate</span>(); Pkg<span class="pl-k">.</span><span class="pl-c1">precompile</span>())

<span class="pl-c"><span class="pl-c">#</span> you can now use DistributedObjects</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> DistributedObjects</pre></div>
<h3 dir="auto"><a id="user-content-1-create" class="anchor" aria-hidden="true" href="#1-create"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1. Create</h3>
<p dir="auto">Behold, a plant <g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">‚ú®</g-emoji></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere struct Plant
    name::String
    edible::Bool
end"><pre><span class="pl-c1">@everywhere</span> <span class="pl-k">struct</span> Plant
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
    edible<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Let's create a remote plant on worker <code>6</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üçÄ = DistributedObject(()-&gt;Plant(&quot;clover&quot;, true), 6);"><pre>üçÄ <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>clover<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>), <span class="pl-c1">6</span>);</pre></div>
<p dir="auto">What about some plants on workers <code>1</code>, <code>2</code>, <code>4</code>, all attached to a single <code>DistributedObject</code>?</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="args = Dict(1=&gt;(&quot;peppermint&quot;, true), 
            2=&gt;(&quot;nettle&quot;, true), 
            4=&gt;(&quot;hemlock&quot;, false))

# note that by default pids=workers()
ü™¥ = DistributedObject((pid)-&gt;Plant(args[pid]...); pids=[1, 2, 4]);"><pre>args <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>peppermint<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>), 
            <span class="pl-c1">2</span><span class="pl-k">=&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>nettle<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>), 
            <span class="pl-c1">4</span><span class="pl-k">=&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>hemlock<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>))

<span class="pl-c"><span class="pl-c">#</span> note that by default pids=workers()</span>
ü™¥ <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span>((pid)<span class="pl-k">-&gt;</span><span class="pl-c1">Plant</span>(args[pid]<span class="pl-k">.</span><span class="pl-k">..</span>); pids<span class="pl-k">=</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>]);</pre></div>
<p dir="auto">Here we initialize an empty <code>DistributedObject</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üå± = DistributedObject{Plant}() # make sure to specify the type of the objects it'll receive"><pre>üå± <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span><span class="pl-c1">{Plant}</span>() <span class="pl-c"><span class="pl-c">#</span> make sure to specify the type of the objects it'll receive</span></pre></div>
<p dir="auto">And here's a <code>DistributedObject{Union{Plant, Int64}}</code> referencing mutilple types</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üåº1Ô∏è‚É£ = DistributedObject((pid)-&gt;(Plant(&quot;dandelion&quot;, true), 1)[pid]; pids=[1,2])"><pre>üåº1Ô∏è‚É£ <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span>((pid)<span class="pl-k">-&gt;</span>(<span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>dandelion<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>), <span class="pl-c1">1</span>)[pid]; pids<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])</pre></div>
<p dir="auto">Finally, here we specify that we expect multiple types but initialize with only <code>Int64</code>s</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üå∏2Ô∏è‚É£ = DistributedObject{Union{Int64, Plant}}(()-&gt;2, 2) 
üå∫3Ô∏è‚É£ = DistributedObject{Union{Int64, Plant}}((pid)-&gt;[42, 24][pid], [2,4]) "><pre>üå∏2Ô∏è‚É£ <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span><span class="pl-c1">{Union{Int64, Plant}}</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>) 
üå∫3Ô∏è‚É£ <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span><span class="pl-c1">{Union{Int64, Plant}}</span>((pid)<span class="pl-k">-&gt;</span>[<span class="pl-c1">42</span>, <span class="pl-c1">24</span>][pid], [<span class="pl-c1">2</span>,<span class="pl-c1">4</span>]) </pre></div>
<h3 dir="auto"><a id="user-content-2-access" class="anchor" aria-hidden="true" href="#2-access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2. Access</h3>
<p dir="auto">We can access each plant by passing indexes to the <code>DistributedObject</code>s</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ü™¥[] # [] accesses the current process (here 1) returns Plant(&quot;peppermint&quot;, true)
ü™¥[1] # returns Plant(&quot;peppermint&quot;, true)
ü™¥[4] # returns Plant(&quot;hemlock&quot;, false)
fetch(@spawnat 4 ü™¥[]) # returns Plant(&quot;hemlock&quot;, false)
ü™¥[1,4] # returns [Plant(&quot;peppermint&quot;, true), Plant(&quot;hemlock&quot;, false)]
üçÄ[6] # returns Plant(&quot;clover&quot;, true)"><pre>ü™¥[] <span class="pl-c"><span class="pl-c">#</span> [] accesses the current process (here 1) returns Plant("peppermint", true)</span>
ü™¥[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> returns Plant("peppermint", true)</span>
ü™¥[<span class="pl-c1">4</span>] <span class="pl-c"><span class="pl-c">#</span> returns Plant("hemlock", false)</span>
<span class="pl-c1">fetch</span>(<span class="pl-c1">@spawnat</span> <span class="pl-c1">4</span> ü™¥[]) <span class="pl-c"><span class="pl-c">#</span> returns Plant("hemlock", false)</span>
ü™¥[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>] <span class="pl-c"><span class="pl-c">#</span> returns [Plant("peppermint", true), Plant("hemlock", false)]</span>
üçÄ[<span class="pl-c1">6</span>] <span class="pl-c"><span class="pl-c">#</span> returns Plant("clover", true)</span></pre></div>
<p dir="auto"><strong>Note:</strong> fetching objects from remote processes is possible, but not recommended if you want to avoid the communication overhead.</p>
<h3 dir="auto"><a id="user-content-3-modify" class="anchor" aria-hidden="true" href="#3-modify"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3. Modify</h3>
<p dir="auto">Let's add some plants to <code>üå±</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üå±[] = ()-&gt;Plant(&quot;plantain&quot;, true) # [] adds a plant at current process (here 1) 
üå±[5] = ()-&gt;Plant(&quot;chanterelles&quot;, true)
üå±[2,4] = (pid)-&gt;Plant(args[pid]...)"><pre>üå±[] <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span><span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>plantain<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> [] adds a plant at current process (here 1) </span>
üå±[<span class="pl-c1">5</span>] <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span><span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>chanterelles<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)
üå±[<span class="pl-c1">2</span>,<span class="pl-c1">4</span>] <span class="pl-k">=</span> (pid)<span class="pl-k">-&gt;</span><span class="pl-c1">Plant</span>(args[pid]<span class="pl-k">.</span><span class="pl-k">..</span>)</pre></div>
<p dir="auto">wait <code>"chanterelles"</code> isn't a plant...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üå±[5] = ()-&gt;Plant(&quot;spearmint&quot;, true)"><pre>üå±[<span class="pl-c1">5</span>] <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span><span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>spearmint<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)</pre></div>
<p dir="auto">If you're working on the current process, or if you don't mind the communication cost, you can also pass the objects directly instead of functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="üå±[] = Plant(&quot;spinach&quot;, true) 
üå±[3,4] = [Plant(&quot;chickweed&quot;, true), Plant(&quot;nettle&quot;, true)]"><pre>üå±[] <span class="pl-k">=</span> <span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>spinach<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>) 
üå±[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>] <span class="pl-k">=</span> [<span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>chickweed<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>), <span class="pl-c1">Plant</span>(<span class="pl-s"><span class="pl-pds">"</span>nettle<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)]</pre></div>
<p dir="auto">Oh, and if you ever forget what type of objects you stored and where you stored them</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eltype(ü™¥) # returns Plant
where(ü™¥) # returns [1, 2, 4]"><pre><span class="pl-c1">eltype</span>(ü™¥) <span class="pl-c"><span class="pl-c">#</span> returns Plant</span>
<span class="pl-c1">where</span>(ü™¥) <span class="pl-c"><span class="pl-c">#</span> returns [1, 2, 4]</span></pre></div>
<h3 dir="auto"><a id="user-content-4-delete" class="anchor" aria-hidden="true" href="#4-delete"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>4. Delete</h3>
<p dir="auto">Once we're done with a plant we can remove it from its <code>DistibutedObject</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delete!(ü™¥, 2)

ü™¥[2]
# ERROR: On worker 2:
# This distributed object has no remote object on process 2."><pre><span class="pl-c1">delete!</span>(ü™¥, <span class="pl-c1">2</span>)

ü™¥[<span class="pl-c1">2</span>]
<span class="pl-c"><span class="pl-c">#</span> ERROR: On worker 2:</span>
<span class="pl-c"><span class="pl-c">#</span> This distributed object has no remote object on process 2.</span></pre></div>
<p dir="auto">Finally, we clean up after ourselves when we're done with the <code>DistibutedObject</code>s</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="close(ü™¥)
close(üçÄ)
close(üå±)
close(üåº1Ô∏è‚É£)
close(üå∏2Ô∏è‚É£) 
close(üå∫3Ô∏è‚É£)"><pre><span class="pl-c1">close</span>(ü™¥)
<span class="pl-c1">close</span>(üçÄ)
<span class="pl-c1">close</span>(üå±)
<span class="pl-c1">close</span>(üåº1Ô∏è‚É£)
<span class="pl-c1">close</span>(üå∏2Ô∏è‚É£) 
<span class="pl-c1">close</span>(üå∫3Ô∏è‚É£)</pre></div>
<hr>
<p dir="auto"><strong>Bonus:</strong> you can check with <code>varinfo()</code> that the objects are indeed stored remotely and that they are correctly removed by <code>close</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed; addprocs(1)

@everywhere using DistributedObjects
@everywhere using InteractiveUtils
@everywhere @show varinfo()

big_array = DistributedObject(()-&gt;ones(1000,1000), 2);
@everywhere @show varinfo()

close(big_array)
@everywhere @show varinfo()"><pre><span class="pl-k">using</span> Distributed; <span class="pl-c1">addprocs</span>(<span class="pl-c1">1</span>)

<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> DistributedObjects
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> InteractiveUtils
<span class="pl-c1">@everywhere</span> <span class="pl-c1">@show</span> <span class="pl-c1">varinfo</span>()

big_array <span class="pl-k">=</span> <span class="pl-c1">DistributedObject</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">ones</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>), <span class="pl-c1">2</span>);
<span class="pl-c1">@everywhere</span> <span class="pl-c1">@show</span> <span class="pl-c1">varinfo</span>()

<span class="pl-c1">close</span>(big_array)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">@show</span> <span class="pl-c1">varinfo</span>()</pre></div>
</article></div>