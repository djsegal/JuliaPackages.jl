<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sum-product-networks-in-julia" class="anchor" aria-hidden="true" href="#sum-product-networks-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sum-Product Networks in Julia</h1>
<p><a href="https://travis-ci.org/trappmartin/SumProductNetworks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f277c4eadaf4c0359642c35ba879f590b32ce085f20cb619d6238edfc4fce3dc/68747470733a2f2f7472617669732d63692e6f72672f74726170706d617274696e2f53756d50726f647563744e6574776f726b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/trappmartin/SumProductNetworks.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/trappmartin/SumProductNetworks.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6c583fab31ebb3809c460b37bd3a3d0c56139aecded12822ec367c3b11c16b6b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74726170706d617274696e2f53756d50726f647563744e6574776f726b732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/trappmartin/SumProductNetworks.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This software package implements the tractable probabilistic model sum-product network (SPN) in Julia.
The package provides a clean and modular interface for SPNs and implements various helper and utility functions to efficienty work with SPN models.</p>
<h3><a id="user-content-news" class="anchor" aria-hidden="true" href="#news"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>News</h3>
<ul>
<li>18.10.2018 - The package is officialy registered.</li>
<li>10.10.2018 - The package now provides more efficient logpdf routines and allows for multithreaded computations.</li>
<li>24.09.2018 - SumProductNetworks now works under Julia 1.0.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Make sure you have Julia 1.0 running. The package can be installed using Julia's package mode. (You can enter the package mode by typing ] in the REPL.)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SumProductNetworks
"><pre>pkg<span class="pl-k">&gt;</span> add SumProductNetworks</pre></div>
<p>To install this package in its <code>master</code> branch version, use <code>PackageSpec</code>:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia -e 'using Pkg; Pkg.add(PackageSpec(url=&quot;https://github.com/trappmartin/SumProductNetworks.jl&quot;))'
"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.add(PackageSpec(url="https://github.com/trappmartin/SumProductNetworks.jl"))<span class="pl-pds">'</span></span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The following minimal example illustrates the use of the package.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SumProductNetworks

# Create a root sum node.
root = FiniteSumNode();

# Add two product nodes to the root.
add!(root, FiniteProductNode(), log(0.3)); # Use a weight of 0.3
add!(root, FiniteProductNode(), log(0.7)); # Use a weight of 0.7

# Add Normal distributions to the product nodes, i.e. leaves.
for prod in children(root)
    for d in 1:2 # Assume 2-D data
        add!(prod, UnivariateNode(Normal(), d));
    end
end

# Compile the constructed network to an SPN type
spn = SumProductNetwork(root);

# Print statistics on the network.
println(spn)

# Update the scope of all nodes, i.e. propagate the scope bottom-up.
updatescope!(spn)

# Evaluate the network on some data.
x = [0.8, 1.2];
logp = logpdf(spn, x)

# Access the stored log likelihood
llh = spn.info[:llh]

# Evaluate the network by marginalising out a RV.
x = [0.8, NaN]
logp = logpdf(spn, x)

# Save the network to a DOT file.
export_network(spn, &quot;mySPN.dot&quot;)
"><pre><span class="pl-k">using</span> SumProductNetworks

<span class="pl-c"><span class="pl-c">#</span> Create a root sum node.</span>
root <span class="pl-k">=</span> <span class="pl-c1">FiniteSumNode</span>();

<span class="pl-c"><span class="pl-c">#</span> Add two product nodes to the root.</span>
<span class="pl-c1">add!</span>(root, <span class="pl-c1">FiniteProductNode</span>(), <span class="pl-c1">log</span>(<span class="pl-c1">0.3</span>)); <span class="pl-c"><span class="pl-c">#</span> Use a weight of 0.3</span>
<span class="pl-c1">add!</span>(root, <span class="pl-c1">FiniteProductNode</span>(), <span class="pl-c1">log</span>(<span class="pl-c1">0.7</span>)); <span class="pl-c"><span class="pl-c">#</span> Use a weight of 0.7</span>

<span class="pl-c"><span class="pl-c">#</span> Add Normal distributions to the product nodes, i.e. leaves.</span>
<span class="pl-k">for</span> prod <span class="pl-k">in</span> <span class="pl-c1">children</span>(root)
    <span class="pl-k">for</span> d <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Assume 2-D data</span>
        <span class="pl-c1">add!</span>(prod, <span class="pl-c1">UnivariateNode</span>(<span class="pl-c1">Normal</span>(), d));
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Compile the constructed network to an SPN type</span>
spn <span class="pl-k">=</span> <span class="pl-c1">SumProductNetwork</span>(root);

<span class="pl-c"><span class="pl-c">#</span> Print statistics on the network.</span>
<span class="pl-c1">println</span>(spn)

<span class="pl-c"><span class="pl-c">#</span> Update the scope of all nodes, i.e. propagate the scope bottom-up.</span>
<span class="pl-c1">updatescope!</span>(spn)

<span class="pl-c"><span class="pl-c">#</span> Evaluate the network on some data.</span>
x <span class="pl-k">=</span> [<span class="pl-c1">0.8</span>, <span class="pl-c1">1.2</span>];
logp <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(spn, x)

<span class="pl-c"><span class="pl-c">#</span> Access the stored log likelihood</span>
llh <span class="pl-k">=</span> spn<span class="pl-k">.</span>info[<span class="pl-c1">:llh</span>]

<span class="pl-c"><span class="pl-c">#</span> Evaluate the network by marginalising out a RV.</span>
x <span class="pl-k">=</span> [<span class="pl-c1">0.8</span>, <span class="pl-c1">NaN</span>]
logp <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(spn, x)

<span class="pl-c"><span class="pl-c">#</span> Save the network to a DOT file.</span>
<span class="pl-c1">export_network</span>(spn, <span class="pl-s"><span class="pl-pds">"</span>mySPN.dot<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced Usage</h2>
<p>Besides the basic functionality for nodes and SPNs, this package additionally provides helper functions that are useful for more advanced use-cases. The following examples illustrates a more advanced tasks.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SumProductNetworks
using AxisArrays

N = 100
D = 2

x = rand(N, D)

# Create a root sum node.
root = FiniteSumNode{Float32}();

# Add two product nodes to the root.
add!(root, FiniteProductNode(), Float32(log(0.3))); # Use a weight of 0.3
add!(root, FiniteProductNode(), Float32(log(0.7))); # Use a weight of 0.7

# Add Normal distributions to the product nodes, i.e. leaves.
for prod in children(root)
    for d in 1:2 # Assume 2-D data
        add!(prod, UnivariateNode(Normal(), d));
    end
end

# Compile the constructed network to an SPN type
spn = SumProductNetwork(root);

# Update the scope of all nodes.
updatescope!(spn)

# Store the logpdf value for every node in the SPN.
llhvals = initllhvals(spn, x)

# Compute logpdf values for all nodes in the network.
logpdf!(spn, x, llhvals)

# Print the logpdf value for each leaf.
for node in spn.leaves
    println(&quot;logpdf at $(node.id) = $(llhvals[:,node.id])&quot;)
end

# Assign observations to their most likely child under a sum node.
function assignobs!(node::SumNode, observations::Vector{Int})
    j = argmax(llhvals[observations, map(c -&gt; c.id, children(node))], dims = 2)

    # Set observations to the node.
    setobs!(node, observations)

    # Set observations for the children of the node.
    for k in length(node)
        setobs!(node[k], observations[findall(j .== k)])
    end

    # Get the parametric type of the sum node, i.e. Float32.
    T = eltype(node)

    # Update the weights of the root.
    w = map(c -&gt; nobs(c) / nobs(node), children(node))
    for k in 1:length(node)
        logweights(node)[k] = map(T, log(w[k]))
    end
end

# Call assignment function for the root.
assignobs!(spn.root, collect(1:N))
"><pre><span class="pl-k">using</span> SumProductNetworks
<span class="pl-k">using</span> AxisArrays

N <span class="pl-k">=</span> <span class="pl-c1">100</span>
D <span class="pl-k">=</span> <span class="pl-c1">2</span>

x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N, D)

<span class="pl-c"><span class="pl-c">#</span> Create a root sum node.</span>
root <span class="pl-k">=</span> <span class="pl-c1">FiniteSumNode</span><span class="pl-c1">{Float32}</span>();

<span class="pl-c"><span class="pl-c">#</span> Add two product nodes to the root.</span>
<span class="pl-c1">add!</span>(root, <span class="pl-c1">FiniteProductNode</span>(), <span class="pl-c1">Float32</span>(<span class="pl-c1">log</span>(<span class="pl-c1">0.3</span>))); <span class="pl-c"><span class="pl-c">#</span> Use a weight of 0.3</span>
<span class="pl-c1">add!</span>(root, <span class="pl-c1">FiniteProductNode</span>(), <span class="pl-c1">Float32</span>(<span class="pl-c1">log</span>(<span class="pl-c1">0.7</span>))); <span class="pl-c"><span class="pl-c">#</span> Use a weight of 0.7</span>

<span class="pl-c"><span class="pl-c">#</span> Add Normal distributions to the product nodes, i.e. leaves.</span>
<span class="pl-k">for</span> prod <span class="pl-k">in</span> <span class="pl-c1">children</span>(root)
    <span class="pl-k">for</span> d <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Assume 2-D data</span>
        <span class="pl-c1">add!</span>(prod, <span class="pl-c1">UnivariateNode</span>(<span class="pl-c1">Normal</span>(), d));
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Compile the constructed network to an SPN type</span>
spn <span class="pl-k">=</span> <span class="pl-c1">SumProductNetwork</span>(root);

<span class="pl-c"><span class="pl-c">#</span> Update the scope of all nodes.</span>
<span class="pl-c1">updatescope!</span>(spn)

<span class="pl-c"><span class="pl-c">#</span> Store the logpdf value for every node in the SPN.</span>
llhvals <span class="pl-k">=</span> <span class="pl-c1">initllhvals</span>(spn, x)

<span class="pl-c"><span class="pl-c">#</span> Compute logpdf values for all nodes in the network.</span>
<span class="pl-c1">logpdf!</span>(spn, x, llhvals)

<span class="pl-c"><span class="pl-c">#</span> Print the logpdf value for each leaf.</span>
<span class="pl-k">for</span> node <span class="pl-k">in</span> spn<span class="pl-k">.</span>leaves
    <span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>logpdf at <span class="pl-v">$(node<span class="pl-k">.</span>id)</span> = <span class="pl-v">$(llhvals[:,node<span class="pl-k">.</span>id])</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Assign observations to their most likely child under a sum node.</span>
<span class="pl-k">function</span> <span class="pl-en">assignobs!</span>(node<span class="pl-k">::</span><span class="pl-c1">SumNode</span>, observations<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>)
    j <span class="pl-k">=</span> <span class="pl-c1">argmax</span>(llhvals[observations, <span class="pl-c1">map</span>(c <span class="pl-k">-&gt;</span> c<span class="pl-k">.</span>id, <span class="pl-c1">children</span>(node))], dims <span class="pl-k">=</span> <span class="pl-c1">2</span>)

    <span class="pl-c"><span class="pl-c">#</span> Set observations to the node.</span>
    <span class="pl-c1">setobs!</span>(node, observations)

    <span class="pl-c"><span class="pl-c">#</span> Set observations for the children of the node.</span>
    <span class="pl-k">for</span> k <span class="pl-k">in</span> <span class="pl-c1">length</span>(node)
        <span class="pl-c1">setobs!</span>(node[k], observations[<span class="pl-c1">findall</span>(j <span class="pl-k">.==</span> k)])
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> Get the parametric type of the sum node, i.e. Float32.</span>
    T <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(node)

    <span class="pl-c"><span class="pl-c">#</span> Update the weights of the root.</span>
    w <span class="pl-k">=</span> <span class="pl-c1">map</span>(c <span class="pl-k">-&gt;</span> <span class="pl-c1">nobs</span>(c) <span class="pl-k">/</span> <span class="pl-c1">nobs</span>(node), <span class="pl-c1">children</span>(node))
    <span class="pl-k">for</span> k <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(node)
        <span class="pl-c1">logweights</span>(node)[k] <span class="pl-k">=</span> <span class="pl-c1">map</span>(T, <span class="pl-c1">log</span>(w[k]))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Call assignment function for the root.</span>
<span class="pl-c1">assignobs!</span>(spn<span class="pl-k">.</span>root, <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>N))</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The following examples illustrate the use of this package: (WIP)</p>
<ul>
<li><a href="examples/parameterOptimization.jl">Parameter optimization using ForwardDiff</a></li>
</ul>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<h4><a id="user-content-datatypes" class="anchor" aria-hidden="true" href="#datatypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Datatypes</h4>
<p>The following types are implemented and supported in this package. The abstract type hierarchy is designed such that it is easy to extend the existing types and that efficient implementations using type dispatching is possible.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Abstract type hierarchy.
SPNNode
Node &lt;: SPNNode
Leaf &lt;: SPNNode
SumNode &lt;: Node
ProductNode &lt;: Node

# Node types.
FiniteSumNode() &lt;: SumNode
FiniteProductNode() &lt;: ProductNode
IndicatorNode(value::Int, scope::Int) &lt;: Leaf
UnivariateNode(dist::UnivariateDistribution, scope::Int) &lt;: Leaf
MultivariateNode(dist::MultivariateDistribution, scope::Vector{Int}) &lt;: Leaf
"><pre><span class="pl-c"><span class="pl-c">#</span> Abstract type hierarchy.</span>
SPNNode
Node <span class="pl-k">&lt;:</span> <span class="pl-c1">SPNNode</span>
Leaf <span class="pl-k">&lt;:</span> <span class="pl-c1">SPNNode</span>
SumNode <span class="pl-k">&lt;:</span> <span class="pl-c1">Node</span>
ProductNode <span class="pl-k">&lt;:</span> <span class="pl-c1">Node</span>

<span class="pl-c"><span class="pl-c">#</span> Node types.</span>
<span class="pl-c1">FiniteSumNode</span>() <span class="pl-k">&lt;:</span> <span class="pl-c1">SumNode</span>
<span class="pl-c1">FiniteProductNode</span>() <span class="pl-k">&lt;:</span> <span class="pl-c1">ProductNode</span>
<span class="pl-c1">IndicatorNode</span>(value<span class="pl-k">::</span><span class="pl-c1">Int</span>, scope<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">&lt;:</span> <span class="pl-c1">Leaf</span>
<span class="pl-c1">UnivariateNode</span>(dist<span class="pl-k">::</span><span class="pl-c1">UnivariateDistribution</span>, scope<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">&lt;:</span> <span class="pl-c1">Leaf</span>
<span class="pl-c1">MultivariateNode</span>(dist<span class="pl-k">::</span><span class="pl-c1">MultivariateDistribution</span>, scope<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>) <span class="pl-k">&lt;:</span> <span class="pl-c1">Leaf</span></pre></div>
<p>To get more details on the individual node type, please use the internal documentation system of Julia.</p>
<p>In addition to this types, the package also provides a composite type to represent an SPN, i.e.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="SumProductNetwork(root::Node)
"><pre><span class="pl-c1">SumProductNetwork</span>(root<span class="pl-k">::</span><span class="pl-c1">Node</span>)</pre></div>
<h4><a id="user-content-structure-learning" class="anchor" aria-hidden="true" href="#structure-learning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structure Learning</h4>
<p>Utility functions for structure learning.</p>
<p>The interface for learning SPN structure is:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="generate_spn(X::Matrix, algo::Symbol; params...)

# learnSPN algorithm by Gens et al.
generate_spn(X, :learnspn)
"><pre><span class="pl-c1">generate_spn</span>(X<span class="pl-k">::</span><span class="pl-c1">Matrix</span>, algo<span class="pl-k">::</span><span class="pl-c1">Symbol</span>; params<span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> learnSPN algorithm by Gens et al.</span>
<span class="pl-c1">generate_spn</span>(X, <span class="pl-c1">:learnspn</span>)</pre></div>
<h4><a id="user-content-utility-functions-on-an-sumproductnetwork" class="anchor" aria-hidden="true" href="#utility-functions-on-an-sumproductnetwork"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utility Functions on an SumProductNetwork</h4>
<p>The following utility functions can be used on an instance of a SumProductNetwork.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Get all nodes of the network in topological order.
values(spn::SumProductNetwork)

# Get the ids of all nodes in the network.
keys(spn::SumProductNetwork)

# Number of nodes in the network.
length(spn::SumProductNetwork)

# Indexing using an id.
spn[id::Symbol]

# Locally normalize an SPN.
normalize!(spn::SumProductNetwork)

# Number of free parameters in the SPN.
complexity(spn::SumProductNetwork)

# Export the SPN to a DOT file.
export_network(spn::SumProductNetwork, filename::String)

# Draw a random sample for the SPN.
rand(spn::SumProductNetwork)
"><pre><span class="pl-c"><span class="pl-c">#</span> Get all nodes of the network in topological order.</span>
<span class="pl-c1">values</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>)

<span class="pl-c"><span class="pl-c">#</span> Get the ids of all nodes in the network.</span>
<span class="pl-c1">keys</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>)

<span class="pl-c"><span class="pl-c">#</span> Number of nodes in the network.</span>
<span class="pl-c1">length</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>)

<span class="pl-c"><span class="pl-c">#</span> Indexing using an id.</span>
spn[id<span class="pl-k">::</span><span class="pl-c1">Symbol</span>]

<span class="pl-c"><span class="pl-c">#</span> Locally normalize an SPN.</span>
<span class="pl-c1">normalize!</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>)

<span class="pl-c"><span class="pl-c">#</span> Number of free parameters in the SPN.</span>
<span class="pl-c1">complexity</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>)

<span class="pl-c"><span class="pl-c">#</span> Export the SPN to a DOT file.</span>
<span class="pl-c1">export_network</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>)

<span class="pl-c"><span class="pl-c">#</span> Draw a random sample for the SPN.</span>
<span class="pl-c1">rand</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>)</pre></div>
<h4><a id="user-content-utility-functions-on-nodes" class="anchor" aria-hidden="true" href="#utility-functions-on-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utility Functions on Nodes</h4>
<p>The following utility functions can be used on an instance of an SPN Node.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Indexing an internal node returns the respective child.
node[i::Int]

# Add a child to an internal node (with or without weight).
add!(node::Node, child::SPNNode)
add!(node::Node, child::SPNNode, logw::Real)

# Remove a child from an internal node.
remove!(node::Node, childIndex::Int)

# The depth of the SPN rooted at the node.
depth(node::SPNNode)

# Get all children of a node.
children(node::Node)

# Get the number of children of node.
length(node::Node)

# Get all parents of a node.
parents(node::SPNNode)

# Has the node a weights field.
hasweights(node::Node)

# Get all weights of the node.
weights(node::Node) = exp.(logweights(node))

# Get all log weights of the node
logweights(node::Node)

# Is the SPN rooted at the node normalized?
isnormalized(node::SPNNode)

# Compute the log pdf.
logpdf(node::SPNNode, x::AbstractArray)

# Alternatively, you can call the object with some data.
node(x::AbstractArray)

# Compute the log pdf but use the passed parameters instead.
logpdf(node::Leaf, x::AbstractArray, p...)
logpdf(node::SumNode, x::AbstractArray; lw::AbstractVector=logweights(node))

# Draw a random sample from a node.
rand(node::SPNNode)
"><pre><span class="pl-c"><span class="pl-c">#</span> Indexing an internal node returns the respective child.</span>
node[i<span class="pl-k">::</span><span class="pl-c1">Int</span>]

<span class="pl-c"><span class="pl-c">#</span> Add a child to an internal node (with or without weight).</span>
<span class="pl-c1">add!</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>, child<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>)
<span class="pl-c1">add!</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>, child<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>, logw<span class="pl-k">::</span><span class="pl-c1">Real</span>)

<span class="pl-c"><span class="pl-c">#</span> Remove a child from an internal node.</span>
<span class="pl-c1">remove!</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>, childIndex<span class="pl-k">::</span><span class="pl-c1">Int</span>)

<span class="pl-c"><span class="pl-c">#</span> The depth of the SPN rooted at the node.</span>
<span class="pl-c1">depth</span>(node<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>)

<span class="pl-c"><span class="pl-c">#</span> Get all children of a node.</span>
<span class="pl-c1">children</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>)

<span class="pl-c"><span class="pl-c">#</span> Get the number of children of node.</span>
<span class="pl-c1">length</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>)

<span class="pl-c"><span class="pl-c">#</span> Get all parents of a node.</span>
<span class="pl-c1">parents</span>(node<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>)

<span class="pl-c"><span class="pl-c">#</span> Has the node a weights field.</span>
<span class="pl-c1">hasweights</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>)

<span class="pl-c"><span class="pl-c">#</span> Get all weights of the node.</span>
<span class="pl-en">weights</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>) <span class="pl-k">=</span> <span class="pl-c1">exp</span>.(<span class="pl-c1">logweights</span>(node))

<span class="pl-c"><span class="pl-c">#</span> Get all log weights of the node</span>
<span class="pl-c1">logweights</span>(node<span class="pl-k">::</span><span class="pl-c1">Node</span>)

<span class="pl-c"><span class="pl-c">#</span> Is the SPN rooted at the node normalized?</span>
<span class="pl-c1">isnormalized</span>(node<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>)

<span class="pl-c"><span class="pl-c">#</span> Compute the log pdf.</span>
<span class="pl-c1">logpdf</span>(node<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>)

<span class="pl-c"><span class="pl-c">#</span> Alternatively, you can call the object with some data.</span>
<span class="pl-c1">node</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>)

<span class="pl-c"><span class="pl-c">#</span> Compute the log pdf but use the passed parameters instead.</span>
<span class="pl-c1">logpdf</span>(node<span class="pl-k">::</span><span class="pl-c1">Leaf</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, p<span class="pl-k">...</span>)
<span class="pl-c1">logpdf</span>(node<span class="pl-k">::</span><span class="pl-c1">SumNode</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>; lw<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span><span class="pl-k">=</span><span class="pl-c1">logweights</span>(node))

<span class="pl-c"><span class="pl-c">#</span> Draw a random sample from a node.</span>
<span class="pl-c1">rand</span>(node<span class="pl-k">::</span><span class="pl-c1">SPNNode</span>)</pre></div>
<h4><a id="user-content-general-utility-functions" class="anchor" aria-hidden="true" href="#general-utility-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General utility functions</h4>
<p>The following functions are general utility functions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Independence test by Margaritis and Thurn for discrete sets.
bmitest(X::Vector{Int}, Y::Vector{Int})

# Efficient projections onto the L 1-ball.
projectToPositiveSimplex!(q::AbstractVector{&lt;:Real}; lowerBound = 0.0, s = 1.0)

# Construct a log likelihoods data-structure.
initllhvals(spn::SumProductNetwork, X::AbstractMatrix)
"><pre><span class="pl-c"><span class="pl-c">#</span> Independence test by Margaritis and Thurn for discrete sets.</span>
<span class="pl-c1">bmitest</span>(X<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, Y<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>)

<span class="pl-c"><span class="pl-c">#</span> Efficient projections onto the L 1-ball.</span>
<span class="pl-c1">projectToPositiveSimplex!</span>(q<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:Real}</span>; lowerBound <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, s <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)

<span class="pl-c"><span class="pl-c">#</span> Construct a log likelihoods data-structure.</span>
<span class="pl-c1">initllhvals</span>(spn<span class="pl-k">::</span><span class="pl-c1">SumProductNetwork</span>, X<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>)</pre></div>
<h3><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribute</h3>
<p>Feel free to open a PR if you want to contribute!</p>
<h3><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h3>
<p>Please consider citing any of the following publications if you use this package.</p>
<ul>
<li>Martin Trapp, Robert Peharz, Hong Ge, Franz Pernkopf, Zoubin Ghahramani: <strong>Bayesian learning of sum-product networks.</strong> In proceedings of NeurIPS, 2019.</li>
<li>Martin Trapp, Tamas Madl, Robert Peharz, Franz Pernkopf, Robert Trappl: <strong>Safe Semi-Supervised Learning of Sum-Product Networks.</strong> In proceedings of UAI, 2017. <a href="http://auai.org/uai2017/proceedings/papers/108.pdf" rel="nofollow">pdf</a> <a href="https://dblp.uni-trier.de/rec/bibtex/conf/uai/TrappMPPT17" rel="nofollow">bibtex</a></li>
<li>Martin Trapp, Robert Peharz, Marcin Skowron, Tamas Madl, Franz Pernkopf, Robert Trappl: <strong>Structure Inference in Sum-Product Networks using Infinite Sum-Product Trees.</strong> In proceedings of NeurIPS workshop on BNP, 2016. <a href="https://www.spsc.tugraz.at/sites/default/files/BNPNIPS_2016_paper_9.pdf" rel="nofollow">paper</a> <a href="https://www.spsc.tugraz.at/biblio/export/bibtex/3537" rel="nofollow">bibtex</a></li>
</ul>
</article></div>