<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-typeparams" class="anchor" aria-hidden="true" href="#typeparams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TypeParams</h1>
<p dir="auto">A key feature of Julia is that type annotations are not usually needed to achieve optimal performance.
For example, <code>foo(1,2)</code> runs equally fast regardless whether <code>foo()</code> is defined as <code>foo(a,b) = ...</code> or <code>foo(a::Int, b::Float64) = ...</code>.
Unfortunately, there is an important exception to this rule: writing</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Foo
    a
    b
end"><pre><span class="pl-k">struct</span> Foo
    a
    b
<span class="pl-k">end</span></pre></div>
<p dir="auto">instead of</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Foo
    a::Int
    b::Float64
end"><pre><span class="pl-k">struct</span> Foo
    a<span class="pl-k">::</span><span class="pl-c1">Int</span>
    b<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">will discard all compile-time type information on <code>a</code> and <code>b</code> and hence incur a significant performance penalty.
A common workaround to this problem is to introduce a new type parameter for each field:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Foo{A,B}
    a::A
    b::B
end"><pre><span class="pl-k">struct</span> Foo{A,B}
    a<span class="pl-k">::</span><span class="pl-c1">A</span>
    b<span class="pl-k">::</span><span class="pl-c1">B</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This recovers the flexibility of optional typing and preserves the performance of compile-time types, but keeping the fields and type parameters in sync can be laborious.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">This package eliminates the fuss of generic type parameters by introducing a macro <code>@typeparams</code> which allows you to insert such type parameters using a simple syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@typeparams struct Foo
    a::{}
    b::{}
end"><pre><span class="pl-c1">@typeparams</span> <span class="pl-k">struct</span> Foo
    a<span class="pl-k">:</span>:{}
    b<span class="pl-k">:</span>:{}
<span class="pl-k">end</span></pre></div>
<p dir="auto">It further supports expressing type constraints with zero syntax overhead:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@typeparams struct Foo
    a::{&lt;:Integer}
    b::{&lt;:Real}
end"><pre><span class="pl-c1">@typeparams</span> <span class="pl-k">struct</span> Foo
    a<span class="pl-k">:</span>:{<span class="pl-k">&lt;:</span><span class="pl-c1">Integer</span>}
    b<span class="pl-k">:</span>:{<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>}
<span class="pl-k">end</span></pre></div>
<p dir="auto">Finally, <code>@typeparams</code> plays well with other features of the Julia language:</p>
<ul dir="auto">
<li>
<p dir="auto">Explicit type parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@typeparams struct MyVector{T} &lt;: AbstractVector{T}
    data::{&lt;:AbstractVector{T}}
end
Base.size(v::MyVector) = size(v.data)
Base.getindex(v::MyVector, i::Int) = v.data[i]

julia&gt; MyVector([1,2,3])
3-element MyVector{Int64, Vector{Int64}}:
..."><pre><span class="pl-c1">@typeparams</span> <span class="pl-k">struct</span> MyVector{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractVector{T}</span>
    data<span class="pl-k">:</span>:{<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractVector{T}</span>}
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-en">size</span>(v<span class="pl-k">::</span><span class="pl-c1">MyVector</span>) <span class="pl-k">=</span> <span class="pl-c1">size</span>(v<span class="pl-k">.</span>data)
Base<span class="pl-k">.</span><span class="pl-en">getindex</span>(v<span class="pl-k">::</span><span class="pl-c1">MyVector</span>, i<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> v<span class="pl-k">.</span>data[i]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyVector</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element MyVector{Int64, Vector{Int64}}<span class="pl-k">:</span>
<span class="pl-k">...</span></pre></div>
</li>
<li>
<p dir="auto">The <code>@kwdef</code> macro:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Base.@kwdef @typeparams struct Foo
    a::{} = 1
    b::{} = 1.0
end

julia&gt; Foo()
Foo{Int64, Float64}(1, 1.0)"><pre>Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-c1">@typeparams</span> <span class="pl-k">struct</span> Foo
    a<span class="pl-k">:</span>:{} <span class="pl-k">=</span> <span class="pl-c1">1</span>
    b<span class="pl-k">:</span>:{} <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Foo</span>()
<span class="pl-c1">Foo</span><span class="pl-c1">{Int64, Float64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>)</pre></div>
</li>
</ul>
<h2 dir="auto"><a id="user-content-missing-features" class="anchor" aria-hidden="true" href="#missing-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Missing features</h2>
<p dir="auto"><code>TypeParams</code> currently does not play very well with inner constructors. For example, the following currently does not work:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@typeparams struct Foo
    a::{}
    b::{}
    Foo() = new(1,1.0)
end"><pre><span class="pl-c1">@typeparams</span> <span class="pl-k">struct</span> Foo
    a<span class="pl-k">:</span>:{}
    b<span class="pl-k">:</span>:{}
    <span class="pl-en">Foo</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1.0</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">PRs are welcome!</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">This package is heavily inspired by <a href="https://github.com/pengwyn/AutoParameters.jl">AutoParameters.jl</a>.</p>
</article></div>