<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dassljl" class="anchor" aria-hidden="true" href="#dassljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DASSL.jl</h1>
<p dir="auto"><a href="https://github.com/SciML/DASSL.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DASSL.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/pwl/DASSL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/72f8f0b54ab8eb526ebb08d7f014393a70802852e10fd977e9fc0ee880a00fea/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f70776c2f444153534c2e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/pwl/DASSL.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is an implementation of DASSL algorithm for solving algebraic
differential equations.  To install a stable version run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;DASSL&quot;)"><pre class="notranslate"><code>Pkg.add("DASSL")
</code></pre></div>
<h2 dir="auto"><a id="user-content-common-interface-example" class="anchor" aria-hidden="true" href="#common-interface-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Common Interface Example</h2>
<p dir="auto">This package is compatible with the JuliaDiffEq common solver interface which is documented in the <a href="http://docs.juliadiffeq.org/latest/" rel="nofollow">DifferentialEquations.jl documentation</a>. Following the <a href="http://docs.juliadiffeq.org/latest/tutorials/dae_example.html" rel="nofollow">DAE Tutorial</a>, one can use <code>dassl()</code> as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DASSL
u0 = [1.0, 0, 0]
du0 = [-0.04, 0.04, 0.0]
tspan = (0.0,100000.0)

function resrob(r,yp,y,p,t)
    r[1]  = -0.04*y[1] + 1.0e4*y[2]*y[3]
    r[2]  = -r[1] - 3.0e7*y[2]*y[2] - yp[2]
    r[1] -=  yp[1]
    r[3]  =  y[1] + y[2] + y[3] - 1.0
end

prob = DAEProblem(resrob,du0,u0,tspan)  
sol = solve(prob, dassl())"><pre><span class="pl-k">using</span> DASSL
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
du0 <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.04</span>, <span class="pl-c1">0.04</span>, <span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100000.0</span>)

<span class="pl-k">function</span> <span class="pl-en">resrob</span>(r,yp,y,p,t)
    r[<span class="pl-c1">1</span>]  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.04</span><span class="pl-k">*</span>y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">1.0e4</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">*</span>y[<span class="pl-c1">3</span>]
    r[<span class="pl-c1">2</span>]  <span class="pl-k">=</span> <span class="pl-k">-</span>r[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">3.0e7</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">*</span>y[<span class="pl-c1">2</span>] <span class="pl-k">-</span> yp[<span class="pl-c1">2</span>]
    r[<span class="pl-c1">1</span>] <span class="pl-k">-=</span>  yp[<span class="pl-c1">1</span>]
    r[<span class="pl-c1">3</span>]  <span class="pl-k">=</span>  y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">+</span> y[<span class="pl-c1">3</span>] <span class="pl-k">-</span> <span class="pl-c1">1.0</span>
<span class="pl-k">end</span>

prob <span class="pl-k">=</span> <span class="pl-c1">DAEProblem</span>(resrob,du0,u0,tspan)  
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">dassl</span>())</pre></div>
<p dir="auto">For more details on using this interface, <a href="http://docs.juliadiffeq.org/latest/tutorials/ode_example.html" rel="nofollow">see the ODE tutorial</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">To solve a scalar equation <code>y'(t)+y(t)=0</code> with initial data <code>y(0)=0.0</code> up to time <code>t=10.0</code> run the following code</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DASSL
F(t,y,dy) = dy+y                   # the equation solved is F(t,y,dy)=0
y0        = 1.0                    # the initial value
tspan     = [0.0,10.0]             # time span over which we integrate
(tn,yn)   = dasslSolve(F,y0,tspan) # returns (tn,yn)"><pre class="notranslate"><code>using DASSL
F(t,y,dy) = dy+y                   # the equation solved is F(t,y,dy)=0
y0        = 1.0                    # the initial value
tspan     = [0.0,10.0]             # time span over which we integrate
(tn,yn)   = dasslSolve(F,y0,tspan) # returns (tn,yn)
</code></pre></div>
<p dir="auto">You can also change the relative error tolerance <code>rtol</code>, absolute
error tolerance <code>atol</code> as well as initial step size <code>h0</code> as follows</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(tn,yn)   = dasslSolve(F,y0,tspan)"><pre class="notranslate"><code>(tn,yn)   = dasslSolve(F,y0,tspan)
</code></pre></div>
<p dir="auto">To test the convergence and execution time for index-1 problem run
<code>convergence.jl</code> from the <code>test</code> directory.</p>
<p dir="auto">Naturally, DASSL.jl also supports multiple equations.  For example the
pendulum equation</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="u'-v=0
v'+sin(u)=0"><pre class="notranslate"><code>u'-v=0
v'+sin(u)=0
</code></pre></div>
<p dir="auto">with initial data <code>u(0)=0.0</code> and <code>v(0)=1.0</code> can be solved by defining
the following residual function</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function F(t,y,dy)
       [
       dy[1]-y[2],           #  y[1]=u,   y[2]=v
       dy[2]+sin(y[1])       # dy[1]=u', dy[2]=v'
       ]
end"><pre class="notranslate"><code>function F(t,y,dy)
       [
       dy[1]-y[2],           #  y[1]=u,   y[2]=v
       dy[2]+sin(y[1])       # dy[1]=u', dy[2]=v'
       ]
end
</code></pre></div>
<p dir="auto">The initial data shoud now be set as a vector</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="y0      = [0.0,1.0]           # y0=[u(0),v(0)]"><pre class="notranslate"><code>y0      = [0.0,1.0]           # y0=[u(0),v(0)]
</code></pre></div>
<p dir="auto">The solution can be computed by calling</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="tspan   = [0.0,10.0]
(tn,yn) = dasslSolve(F,y0,tspan)"><pre class="notranslate"><code>tspan   = [0.0,10.0]
(tn,yn) = dasslSolve(F,y0,tspan)
</code></pre></div>
<h2 dir="auto"><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output</h2>
<p dir="auto">Apart from producing the times <code>tn</code> and values <code>yn</code>, dasslSolve also
produces the derivatives <code>dyn</code> (as the byproduct of BDF
algorithm), e.g.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(tn,yn,dyn) = dasslSolve(F,y0,tspan)"><pre class="notranslate"><code>(tn,yn,dyn) = dasslSolve(F,y0,tspan)
</code></pre></div>
<p dir="auto">The decision to produce these values is that it is not entirely
trivial to compute <code>y'</code> from <code>F(t,y,y')=0</code> when <code>t</code> and <code>y</code> are given.</p>
<h2 dir="auto"><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword arguments</h2>
<p dir="auto">DASSL supports a number of keyword arguments, the names of most of
them are compatible with the namse used in ODE package.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>reltol=1e-3</code>/<code>abstol=1e-5</code> set the relative/absolute local error tolerances</p>
</li>
<li>
<p dir="auto"><code>initstep=1e-4</code>/<code>minstep=0</code>/<code>maxstep=Inf</code> set the
initial/minimal/maximal step sizes (when step size drops below
minimum the integration stops)</p>
</li>
<li>
<p dir="auto"><code>jacobian</code> The most expensive step during the integration is solving
the nonlinear equation <code>F(t,y,a*y+b)=0</code> via Newton's method, which
requires a jacobian of the form <code>dF/dy+a*dF/dy'</code>.  By default, the
solver approximates this Jacobian by a method of finite differences
but you can provide your own method as a function
<code>(t,y,dy,a)-&gt;dF/dy+a*dF/dy'</code>.  For the pendulum equation we would
define jacobian as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="jacobian=(t,y,dy,a)-&gt;[[a,cos(y[1])] [-1,a]]"><pre class="notranslate"><code>jacobian=(t,y,dy,a)-&gt;[[a,cos(y[1])] [-1,a]]
</code></pre></div>
</li>
<li>
<p dir="auto"><code>maxorder=6</code> Apart from selecting the current step size DASSL method
can also dynamically change the order of BDF method used.  BDF is
stable up to 6-th order, which is the defaul upper limit but for
some systems of equations it may make more sense to use lower
orders.</p>
</li>
<li>
<p dir="auto"><code>dy0=zero(y)</code> When solving differential algebraic equations it is
important to start with consistent initial conditions, i.e. to
choose <code>y</code> and <code>y'</code> such that <code>F(t,y,y')=0</code> initially.  DASSL tries
to guess the initial value of <code>y'</code>, but if it fails you can set your
own initial condtions for the derivative.</p>
</li>
<li>
<p dir="auto"><code>norm=dassl_norm</code>/<code>weights=dassl_weights</code> DASSL computes the error
roughly as <code>err=norm(yc-y0)</code>, and accepting the step when
<code>err&lt;1</code>.  The local error tolerances <code>reltol</code> and <code>abstol</code> are
hidden in the definition of <code>dassl_norm(v, wt)=norm(v./wt)/sqrt(length(v))</code>, where weights <code>wt</code> are defined by
<code>dassl_weights(y,reltol,abstol)=reltol*abs(y).+abstol</code>.  You can
supply your own weights and norms when they are more appropriate for
the problem at hand.</p>
</li>
<li>
<p dir="auto"><code>factorize_jacobian=true</code> is a Boolean option which forces the
factorization of Jacobian before storing it.  It dramatically
increases performance for large systems, but may decrease the
computation speed for small systems.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-iterator-version" class="anchor" aria-hidden="true" href="#iterator-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iterator version</h2>
<p dir="auto">DASSL.jl supports an iterative version of solver (implemented via
coroutines, so debugging might be a little tricky) via
<code>dasslIterator</code>.  In the following example the <code>dasslIterator</code> is used
to stop the integration when the solution <code>y</code> drops below <code>0.1</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="F(t,y,dy)=dy+y

# iterator version of dassl solver
for (t,y,dy) in dasslIterator(F,1.0,0.0)
    if y &lt; 0.1
        @show (t,y,dy)
        break
    end
end"><pre class="notranslate"><code>F(t,y,dy)=dy+y

# iterator version of dassl solver
for (t,y,dy) in dasslIterator(F,1.0,0.0)
    if y &lt; 0.1
        @show (t,y,dy)
        break
    end
end
</code></pre></div>
</article></div>