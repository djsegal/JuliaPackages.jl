<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-permutations" class="anchor" aria-hidden="true" href="#permutations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Permutations</h1>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">This package defines a <code>Permutation</code>  type for Julia. We only
consider permutations of sets of the form <code>{1,2,3,...,n}</code> where <code>n</code> is
a positive integer.</p>
<p dir="auto">A <code>Permutation</code> object is created from a one-dimensional array of
integers containing each of the values <code>1</code> through <code>n</code> exactly once.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; a = [4,1,3,2,6,5];
julia&gt; p = Permutation(a)
(1,4,2)(3)(5,6)"><pre class="notranslate"><code>julia&gt; a = [4,1,3,2,6,5];
julia&gt; p = Permutation(a)
(1,4,2)(3)(5,6)
</code></pre></div>
<p dir="auto">Observe the <code>Permutation</code> is printed in disjoint cycle format.</p>
<p dir="auto">The number of elements in a <code>Permutation</code> is determined using the
<code>length</code> function:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; length(p)
6"><pre class="notranslate"><code>julia&gt; length(p)
6
</code></pre></div>
<p dir="auto">A <code>Permutation</code> can be converted to an array (equal to the array used
to construct the <code>Permutation</code> in the first place) or can be presented
as a two-row matrix as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p.data
6-element Array{Int64,1}:
 4
 1
 3
 2
 6
 5
julia&gt; two_row(p)
2x6 Array{Int64,2}:
 1  2  3  4  5  6
 4  1  3  2  6  5"><pre class="notranslate"><code>julia&gt; p.data
6-element Array{Int64,1}:
 4
 1
 3
 2
 6
 5
julia&gt; two_row(p)
2x6 Array{Int64,2}:
 1  2  3  4  5  6
 4  1  3  2  6  5
</code></pre></div>
<p dir="auto">The evaluation of a <code>Permutation</code> on a particular element is performed
using square bracket or parenthesis notation:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p[2]
1
julia&gt; p(2)
1"><pre class="notranslate"><code>julia&gt; p[2]
1
julia&gt; p(2)
1
</code></pre></div>
<p dir="auto">Of course, bad things happen if an inappropriate element is given:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p[7]
ERROR: BoundsError()
 in getindex at ...."><pre class="notranslate"><code>julia&gt; p[7]
ERROR: BoundsError()
 in getindex at ....
</code></pre></div>
<p dir="auto">To get the cycle structure of a <code>Permutation</code> (not as a character string,
but as an array of arrays), use <code>cycles</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; cycles(p)
3-element Array{Array{Int64,1},1}:
 [1,4,2]
 [3]
 [5,6]"><pre class="notranslate"><code>julia&gt; cycles(p)
3-element Array{Array{Int64,1},1}:
 [1,4,2]
 [3]
 [5,6]
</code></pre></div>
<p dir="auto">Given a list of disjoint cycles of <code>1:n</code>, we can recover the <code>Permutation</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(12)
(1,6,3,4,11,12,7,2,10,8,9,5)

julia&gt; p = RandomPermutation(12)
(1,12,3,9,4,10,2,7)(5,11,8)(6)

julia&gt; c = cycles(p)
3-element Vector{Vector{Int64}}:
 [1, 12, 3, 9, 4, 10, 2, 7]
 [5, 11, 8]
 [6]

julia&gt; Permutation(c)
(1,12,3,9,4,10,2,7)(5,11,8)(6)"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(12)
(1,6,3,4,11,12,7,2,10,8,9,5)

julia&gt; p = RandomPermutation(12)
(1,12,3,9,4,10,2,7)(5,11,8)(6)

julia&gt; c = cycles(p)
3-element Vector{Vector{Int64}}:
 [1, 12, 3, 9, 4, 10, 2, 7]
 [5, 11, 8]
 [6]

julia&gt; Permutation(c)
(1,12,3,9,4,10,2,7)(5,11,8)(6)
</code></pre></div>
<h2 dir="auto"><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operations</h2>
<h3 dir="auto"><a id="user-content-composition" class="anchor" aria-hidden="true" href="#composition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Composition</h3>
<p dir="auto">Composition is denoted by <code>*</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; q = Permutation([1,6,2,3,4,5])
(1)(2,6,5,4,3)
julia&gt; p*q
(1,4,3)(2,5)(6)
julia&gt; q*p
(1,3,2)(4,6)(5)"><pre class="notranslate"><code>julia&gt; q = Permutation([1,6,2,3,4,5])
(1)(2,6,5,4,3)
julia&gt; p*q
(1,4,3)(2,5)(6)
julia&gt; q*p
(1,3,2)(4,6)(5)
</code></pre></div>
<p dir="auto">Repeated composition is calculated using <code>^</code>, like this: <code>p^n</code>.
The exponent may be negative.</p>
<h3 dir="auto"><a id="user-content-inverse" class="anchor" aria-hidden="true" href="#inverse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inverse</h3>
<p dir="auto">The inverse of a <code>Permutation</code> is computed using <code>inv</code> or as <code>p'</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; q = inv(p)
(1,2,4)(3)(5,6)
julia&gt; p*q
(1)(2)(3)(4)(5)(6)"><pre class="notranslate"><code>julia&gt; q = inv(p)
(1,2,4)(3)(5,6)
julia&gt; p*q
(1)(2)(3)(4)(5)(6)
</code></pre></div>
<h3 dir="auto"><a id="user-content-square-root" class="anchor" aria-hidden="true" href="#square-root"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Square Root</h3>
<p dir="auto">The <code>sqrt</code> function returns a compositional square root of the permutation.
That is, if <code>q=sqrt(p)</code> then <code>q*q==p</code>. Note that not all permutations have
square roots and square roots are not unique.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p
(1,12,7,4)(2,8,3)(5,15,11,14)(6,10,13)(9)

julia&gt; q = sqrt(p)
(1,5,12,15,7,11,4,14)(2,3,8)(6,13,10)(9)

julia&gt; q*q == p
true"><pre class="notranslate"><code>julia&gt; p
(1,12,7,4)(2,8,3)(5,15,11,14)(6,10,13)(9)

julia&gt; q = sqrt(p)
(1,5,12,15,7,11,4,14)(2,3,8)(6,13,10)(9)

julia&gt; q*q == p
true
</code></pre></div>
<h3 dir="auto"><a id="user-content-matrix-form" class="anchor" aria-hidden="true" href="#matrix-form"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Matrix Form</h3>
<p dir="auto">The function <code>Matrix</code> converts a permutation <code>p</code> to a square matrix
whose <code>i,j</code>-entry is <code>1</code> when <code>i == p[j]</code> and <code>0</code> otherwise.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(6)
(1,5,2,6)(3)(4)

julia&gt; Matrix(p)
6×6 Array{Int64,2}:
 0  0  0  0  0  1
 0  0  0  0  1  0
 0  0  1  0  0  0
 0  0  0  1  0  0
 1  0  0  0  0  0
 0  1  0  0  0  0"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(6)
(1,5,2,6)(3)(4)

julia&gt; Matrix(p)
6×6 Array{Int64,2}:
 0  0  0  0  0  1
 0  0  0  0  1  0
 0  0  1  0  0  0
 0  0  0  1  0  0
 1  0  0  0  0  0
 0  1  0  0  0  0
</code></pre></div>
<p dir="auto">Note that a permutation matrix <code>M</code> can be converted back to a <code>Permutation</code>
by calling <code>Permutation(M)</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(8)
(1,4,5,2,6,8,7)(3)

julia&gt; M = Matrix(p);

julia&gt; q = Permutation(M)
(1,4,5,2,6,8,7)(3)"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(8)
(1,4,5,2,6,8,7)(3)

julia&gt; M = Matrix(p);

julia&gt; q = Permutation(M)
(1,4,5,2,6,8,7)(3)
</code></pre></div>
<h3 dir="auto"><a id="user-content-sign" class="anchor" aria-hidden="true" href="#sign"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sign</h3>
<p dir="auto">The sign of a <code>Permutation</code> is <code>+1</code> for an even permutation and <code>-1</code>
for an odd permutation.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = Permutation([2,3,4,1])
(1,2,3,4)

julia&gt; sign(p)
-1

julia&gt; sign(p*p)
1"><pre class="notranslate"><code>julia&gt; p = Permutation([2,3,4,1])
(1,2,3,4)

julia&gt; sign(p)
-1

julia&gt; sign(p*p)
1
</code></pre></div>
<h3 dir="auto"><a id="user-content-reverse" class="anchor" aria-hidden="true" href="#reverse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reverse</h3>
<p dir="auto">If one thinks of a permutation as a sequence, then applying <code>reverse</code>
to that permutation returns a new permutation based on the reversal of
that sequence. Here's an example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(8)
(1,5,8,4,6)(2,3)(7)

julia&gt; two_row(p)
2x8 Array{Int64,2}:
 1  2  3  4  5  6  7  8
 5  3  2  6  8  1  7  4

julia&gt; two_row(reverse(p))
2x8 Array{Int64,2}:
 1  2  3  4  5  6  7  8
 4  7  1  8  6  2  3  5"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(8)
(1,5,8,4,6)(2,3)(7)

julia&gt; two_row(p)
2x8 Array{Int64,2}:
 1  2  3  4  5  6  7  8
 5  3  2  6  8  1  7  4

julia&gt; two_row(reverse(p))
2x8 Array{Int64,2}:
 1  2  3  4  5  6  7  8
 4  7  1  8  6  2  3  5
</code></pre></div>
<h2 dir="auto"><a id="user-content-additional-constructors" class="anchor" aria-hidden="true" href="#additional-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional Constructors</h2>
<p dir="auto">For convenience, identity and random permutations can be constructed
like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Permutation(10)
(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)

julia&gt; RandomPermutation(10)
(1,7,6,10,3,2,8,4)(5,9)"><pre class="notranslate"><code>julia&gt; Permutation(10)
(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)

julia&gt; RandomPermutation(10)
(1,7,6,10,3,2,8,4)(5,9)
</code></pre></div>
<p dir="auto">In addition, we can use <code>Permutation(n,k)</code> to create the
<code>k</code>'th permutation of the set <code>{1,2,...,n}</code>. Of course,
this requires <code>k</code> to be between <code>1</code> and <code>n!</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Permutation(6,701)
(1,6,3)(2,5)(4)"><pre class="notranslate"><code>julia&gt; Permutation(6,701)
(1,6,3)(2,5)(4)
</code></pre></div>
<p dir="auto">The function <code>Transposition</code> is used to create a permutation containing
a single two-cycle. Use <code>Transposition(n,a,b)</code> to create a permutation of
<code>1:n</code> that swaps <code>a</code> and <code>b</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = Transposition(10,3,5)
(1)(2)(3,5)(4)(6)(7)(8)(9)(10)"><pre class="notranslate"><code>julia&gt; p = Transposition(10,3,5)
(1)(2)(3,5)(4)(6)(7)(8)(9)(10)
</code></pre></div>
<p dir="auto">This function requires <code>1 ≤ a ≠ b ≤ n</code>.</p>
<h2 dir="auto"><a id="user-content-properties" class="anchor" aria-hidden="true" href="#properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Properties</h2>
<p dir="auto">A <em>fixed point</em> of a permutation <code>p</code> is a value <code>k</code> such that
<code>p[k]==k</code>. The function <code>fixed_points</code> returns a list of the fixed
points of a given permutation.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(20)
(1,15,10,9,11,13,12,8,5,7,18,6,2)(3)(4,16,17,19)(14)(20)

julia&gt; fixed_points(p)
3-element Array{Int64,1}:
  3
 14
 20"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(20)
(1,15,10,9,11,13,12,8,5,7,18,6,2)(3)(4,16,17,19)(14)(20)

julia&gt; fixed_points(p)
3-element Array{Int64,1}:
  3
 14
 20
</code></pre></div>
<p dir="auto">The function <code>longest_increasing</code> finds a subsequence of a permutation
whose elements are in increasing order. Likewise, <code>longest_decreasing</code>
finds a longest decreasing subsequence.
For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(10)
(1,3,10)(2)(4)(5,6)(7)(8)(9)

julia&gt; two_row(p)
2x10 Array{Int64,2}:
 1  2   3  4  5  6  7  8  9  10
 3  2  10  4  6  5  7  8  9   1

julia&gt; longest_increasing(p)
6-element Array{Int64,1}:
 3
 4
 6
 7
 8
 9

julia&gt; longest_decreasing(p)
4-element Array{Int64,1}:
 10
  6
  5
  1"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(10)
(1,3,10)(2)(4)(5,6)(7)(8)(9)

julia&gt; two_row(p)
2x10 Array{Int64,2}:
 1  2   3  4  5  6  7  8  9  10
 3  2  10  4  6  5  7  8  9   1

julia&gt; longest_increasing(p)
6-element Array{Int64,1}:
 3
 4
 6
 7
 8
 9

julia&gt; longest_decreasing(p)
4-element Array{Int64,1}:
 10
  6
  5
  1
</code></pre></div>
<h2 dir="auto"><a id="user-content-iteration" class="anchor" aria-hidden="true" href="#iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iteration</h2>
<p dir="auto">The function <code>PermGen</code> creates a <code>Permutation</code> iterator.</p>
<p dir="auto">With an integer argument, <code>PermGen(n)</code> creates an iterator for all permutations of length <code>n</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for p in PermGen(3)
           println(p)
       end
(1)(2)(3)
(1)(2,3)
(1,2)(3)
(1,2,3)
(1,3,2)
(1,3)(2)"><pre class="notranslate"><code>julia&gt; for p in PermGen(3)
           println(p)
       end
(1)(2)(3)
(1)(2,3)
(1,2)(3)
(1,2,3)
(1,3,2)
(1,3)(2)
</code></pre></div>
<p dir="auto">Alternatively, <code>PermGen</code> may be called with a dictionary of lists or list of lists argument, <code>d</code>.
The permutations generated will have the property that the value of the permutation at argument <code>k</code> must be one of the values stored in <code>d[k]</code>.
For example, to find all derangements of <code>{1,2,3,4}</code> we do this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; d = [ [2,3,4], [1,3,4], [1,2,4], [1,2,3] ]
4-element Vector{Vector{Int64}}:
 [2, 3, 4]
 [1, 3, 4]
 [1, 2, 4]
 [1, 2, 3]"><pre class="notranslate"><code>julia&gt; d = [ [2,3,4], [1,3,4], [1,2,4], [1,2,3] ]
4-element Vector{Vector{Int64}}:
 [2, 3, 4]
 [1, 3, 4]
 [1, 2, 4]
 [1, 2, 3]
</code></pre></div>
<p dir="auto">Thus <code>d[1]</code> gives all allowable values for the first position in the permutation, and so forth. We could equally well have done this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; d = Dict{Int, Vector{Int}}();

julia&gt; for k=1:4
           d[k] = setdiff(1:4,k)
       end

julia&gt; d
Dict{Int64, Vector{Int64}} with 4 entries:
  4 =&gt; [1, 2, 3]
  2 =&gt; [1, 3, 4]
  3 =&gt; [1, 2, 4]
  1 =&gt; [2, 3, 4]"><pre class="notranslate"><code>julia&gt; d = Dict{Int, Vector{Int}}();

julia&gt; for k=1:4
           d[k] = setdiff(1:4,k)
       end

julia&gt; d
Dict{Int64, Vector{Int64}} with 4 entries:
  4 =&gt; [1, 2, 3]
  2 =&gt; [1, 3, 4]
  3 =&gt; [1, 2, 4]
  1 =&gt; [2, 3, 4]
</code></pre></div>
<p dir="auto">In either case, here we create the nine derangements of <code>{1,2,3,4}</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; [p for p in PermGen(d)]
9-element Vector{Permutation}:
 (1,4)(2,3)
 (1,3,2,4)
 (1,2,3,4)
 (1,4,2,3)
 (1,3)(2,4)
 (1,3,4,2)
 (1,2,4,3)
 (1,4,3,2)
 (1,2)(3,4)"><pre class="notranslate"><code>julia&gt; [p for p in PermGen(d)]
9-element Vector{Permutation}:
 (1,4)(2,3)
 (1,3,2,4)
 (1,2,3,4)
 (1,4,2,3)
 (1,3)(2,4)
 (1,3,4,2)
 (1,2,4,3)
 (1,4,3,2)
 (1,2)(3,4)
</code></pre></div>
<p dir="auto">The <code>PermGen</code> iterator generates permutations one at a time. So this calculation does not use much memory:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; sum(length(fixed_points(p)) for p in PermGen(10))
3628800"><pre class="notranslate"><code>julia&gt; sum(length(fixed_points(p)) for p in PermGen(10))
3628800
</code></pre></div>
<blockquote>
<p dir="auto">Aside: Notice that the answer is <code>10!</code>. It is a fun exerice to show that among all the <code>n!</code> permutations of <code>{1,2,...,n}</code>, the number of fixed points is <code>n!</code>.</p>
</blockquote>
<p dir="auto">We provide <code>DerangeGen(n)</code> which generates all derangements of <code>{1,2,...,n}</code>, i.e., all permutations without fixed points.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for p in DerangeGen(4)
           println(p)
       end
(1,2)(3,4)
(1,2,3,4)
(1,2,4,3)
(1,3,4,2)
(1,3)(2,4)
(1,3,2,4)
(1,4,3,2)
(1,4,2,3)
(1,4)(2,3)"><pre class="notranslate"><code>julia&gt; for p in DerangeGen(4)
           println(p)
       end
(1,2)(3,4)
(1,2,3,4)
(1,2,4,3)
(1,3,4,2)
(1,3)(2,4)
(1,3,2,4)
(1,4,3,2)
(1,4,2,3)
(1,4)(2,3)
</code></pre></div>
<p dir="auto">Thanks to <a href="https://github.com/jscheiny">Jonah Scheinerman</a> for the implementation of <code>PermGen</code> for restricted permutations.</p>
<h2 dir="auto"><a id="user-content-conversion-to-a-dict" class="anchor" aria-hidden="true" href="#conversion-to-a-dict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Conversion to a <code>Dict</code></h2>
<p dir="auto">For a permutation <code>p</code>, calling <code>dict(p)</code> returns a dictionary that behaves
just like <code>p</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(12)
(1,11,6)(2,8,7)(3)(4,5,9,12,10)

julia&gt; d = dict(p)
Dict{Int64,Int64} with 12 entries:
  2  =&gt; 8
  11 =&gt; 6
  7  =&gt; 2
  9  =&gt; 12
  10 =&gt; 4
  8  =&gt; 7
  6  =&gt; 1
  4  =&gt; 5
  3  =&gt; 3
  5  =&gt; 9
  12 =&gt; 10
  1  =&gt; 11"><pre class="notranslate"><code>julia&gt; p = RandomPermutation(12)
(1,11,6)(2,8,7)(3)(4,5,9,12,10)

julia&gt; d = dict(p)
Dict{Int64,Int64} with 12 entries:
  2  =&gt; 8
  11 =&gt; 6
  7  =&gt; 2
  9  =&gt; 12
  10 =&gt; 4
  8  =&gt; 7
  6  =&gt; 1
  4  =&gt; 5
  3  =&gt; 3
  5  =&gt; 9
  12 =&gt; 10
  1  =&gt; 11
</code></pre></div>
<h2 dir="auto"><a id="user-content-coxeter-decomposition" class="anchor" aria-hidden="true" href="#coxeter-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Coxeter Decomposition</h2>
<p dir="auto">Every permutation can be expressed as a product of transpositions. In
a <em>Coxeter decomposition</em> the permutation is the product of transpositions
of the form <code>(j,j+1)</code>.
Given a permutation <code>p</code>, we get this form
with <code>CoxeterDecomposition(p)</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = Permutation([2,4,3,5,1,6,8,7])
(1,2,4,5)(3)(6)(7,8)

julia&gt; pp = CoxeterDecomposition(p)
Permutation of 1:8: (1,2)(2,3)(3,4)(2,3)(4,5)(7,8)"><pre class="notranslate"><code>julia&gt; p = Permutation([2,4,3,5,1,6,8,7])
(1,2,4,5)(3)(6)(7,8)

julia&gt; pp = CoxeterDecomposition(p)
Permutation of 1:8: (1,2)(2,3)(3,4)(2,3)(4,5)(7,8)
</code></pre></div>
<p dir="auto">The original permutation can be recovered like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Permutation(pp)
(1,2,4,5)(3)(6)(7,8)"><pre class="notranslate"><code>julia&gt; Permutation(pp)
(1,2,4,5)(3)(6)(7,8)
</code></pre></div>
</article></div>