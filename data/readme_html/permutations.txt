<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-permutations" class="anchor" aria-hidden="true" href="#permutations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Permutations</h1>
<p><a href="https://travis-ci.com/scheinerman/Permutations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0aff07d85f9386e6fc0f3a75efbf3f0cd9d9b0874bc0eacc741cce1d0c9ef269/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f5065726d75746174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/Permutations.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is documentation for a <code>Permutation</code> data type for Julia. We only
consider permutations of sets of the form <code>{1,2,3,...,n}</code> where <code>n</code> is
a positive integer.</p>
<p>A <code>Permutation</code> object is created from a one-dimensional arry of
integers containing each of the values <code>1</code> through <code>n</code> exactly once.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = [4,1,3,2,6,5];
julia&gt; p = Permutation(a)
(1,4,2)(3)(5,6)
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> [<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">5</span>];
julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>(a)
(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>)</pre></div>
<p>Observe the <code>Permutation</code> is printed in disjoint cycle format.</p>
<p>The number of elements in a <code>Permutation</code> is determined using the
<code>length</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; length(p)
6
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(p)
<span class="pl-c1">6</span></pre></div>
<p>A <code>Permutation</code> can be converted to an array (equal to the array used
to construct the <code>Permutation</code> in the first place) or can be presented
as a two-row matrix as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p.data
6-element Array{Int64,1}:
 4
 1
 3
 2
 6
 5
julia&gt; two_row(p)
2x6 Array{Int64,2}:
 1  2  3  4  5  6
 4  1  3  2  6  5
"><pre>julia<span class="pl-k">&gt;</span> p<span class="pl-k">.</span>data
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">5</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">two_row</span>(p)
<span class="pl-c1">2</span>x6 Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">5</span></pre></div>
<p>The evaluation of a <code>Permutation</code> on a particular element is performed
using square bracket or parenthesis notation:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p[2]
1
julia&gt; p(2)
1
"><pre>julia<span class="pl-k">&gt;</span> p[<span class="pl-c1">2</span>]
<span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">1</span></pre></div>
<p>Of course, bad things happen if an inappropriate element is given:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p[7]
ERROR: BoundsError()
 in getindex at ....
"><pre>julia<span class="pl-k">&gt;</span> p[<span class="pl-c1">7</span>]
ERROR<span class="pl-k">:</span> <span class="pl-c1">BoundsError</span>()
 <span class="pl-k">in</span> getindex at <span class="pl-k">....</span></pre></div>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations</h2>
<p>Composition is denoted by <code>*</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; q = Permutation([1,6,2,3,4,5])
(1)(2,6,5,4,3)
julia&gt; p*q
(1,4,3)(2,5)(6)
julia&gt; q*p
(1,3,2)(4,6)(5)
"><pre>julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>([<span class="pl-c1">1</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])
(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">5</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span> p<span class="pl-k">*</span>q
(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)(<span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> q<span class="pl-k">*</span>p
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>)(<span class="pl-c1">4</span>,<span class="pl-c1">6</span>)(<span class="pl-c1">5</span>)</pre></div>
<p>Repeated composition is calculated using <code>^</code>, like this: <code>p^n</code>.
The exponent can be negative.</p>
<p>The inverse of a <code>Permutation</code> is computed using <code>inv</code> or as <code>p'</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; q = inv(p)
(1,2,4)(3)(5,6)
julia&gt; p*q
(1)(2)(3)(4)(5)(6)
"><pre>julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">inv</span>(p)
(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> p<span class="pl-k">*</span>q
(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">4</span>)(<span class="pl-c1">5</span>)(<span class="pl-c1">6</span>)</pre></div>
<p>To get the cycle structure of a <code>Permutation</code> (not as a character string,
but as an array of arrays), use <code>cycles</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; cycles(p)
3-element Array{Array{Int64,1},1}:
 [1,4,2]
 [3]
 [5,6]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cycles</span>(p)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Array{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>]
 [<span class="pl-c1">3</span>]
 [<span class="pl-c1">5</span>,<span class="pl-c1">6</span>]</pre></div>
<p>The <code>sqrt</code> function returns a compositional square root of the permutation.
That is, if <code>q=sqrt(p)</code> then <code>q*q==p</code>. Note that not all permutations have
square roots and square roots are not unique.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p
(1,12,7,4)(2,8,3)(5,15,11,14)(6,10,13)(9)

julia&gt; q = sqrt(p)
(1,5,12,15,7,11,4,14)(2,3,8)(6,13,10)(9)

julia&gt; q*q == p
true
"><pre>julia<span class="pl-k">&gt;</span> p
(<span class="pl-c1">1</span>,<span class="pl-c1">12</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">8</span>,<span class="pl-c1">3</span>)(<span class="pl-c1">5</span>,<span class="pl-c1">15</span>,<span class="pl-c1">11</span>,<span class="pl-c1">14</span>)(<span class="pl-c1">6</span>,<span class="pl-c1">10</span>,<span class="pl-c1">13</span>)(<span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(p)
(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">12</span>,<span class="pl-c1">15</span>,<span class="pl-c1">7</span>,<span class="pl-c1">11</span>,<span class="pl-c1">4</span>,<span class="pl-c1">14</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">8</span>)(<span class="pl-c1">6</span>,<span class="pl-c1">13</span>,<span class="pl-c1">10</span>)(<span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> q<span class="pl-k">*</span>q <span class="pl-k">==</span> p
<span class="pl-c1">true</span></pre></div>
<p>The function <code>Matrix</code> converts a permutation <code>p</code> to a square matrix
whose <code>i,j</code>-entry is <code>1</code> when <code>i == p[j]</code> and <code>0</code> otherwise.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(6)
(1,5,2,6)(3)(4)

julia&gt; Matrix(p)
6×6 Array{Int64,2}:
 0  0  0  0  0  1
 0  0  0  0  1  0
 0  0  1  0  0  0
 0  0  0  1  0  0
 1  0  0  0  0  0
 0  1  0  0  0  0
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">6</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(p)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<p>Note that a permutation matrix <code>M</code> can be converted back to a <code>Permutation</code>
by calling <code>Permutation(M)</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(8)
(1,4,5,2,6,8,7)(3)

julia&gt; M = Matrix(p);

julia&gt; q = Permutation(M)
(1,4,5,2,6,8,7)(3)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">8</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">7</span>)(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(p);

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>(M)
(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">7</span>)(<span class="pl-c1">3</span>)</pre></div>
<p>The sign of a <code>Permutation</code> is <code>+1</code> for an even permutation and <code>-1</code>
for an odd permutation.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = Permutation([2,3,4,1])
(1,2,3,4)

julia&gt; sign(p)
-1

julia&gt; sign(p*p)
1
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>])
(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sign</span>(p)
<span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sign</span>(p<span class="pl-k">*</span>p)
<span class="pl-c1">1</span></pre></div>
<p>If one thinks of a permutation as a sequence, then applying <code>reverse</code>
to that permutation returns a new permutation based on the reversal of
that sequence. Here's an example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(8)
(1,5,8,4,6)(2,3)(7)

julia&gt; two_row(p)
2x8 Array{Int64,2}:
 1  2  3  4  5  6  7  8
 5  3  2  6  8  1  7  4

julia&gt; two_row(reverse(p))
2x8 Array{Int64,2}:
 1  2  3  4  5  6  7  8
 4  7  1  8  6  2  3  5
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">8</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">8</span>,<span class="pl-c1">4</span>,<span class="pl-c1">6</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)(<span class="pl-c1">7</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">two_row</span>(p)
<span class="pl-c1">2</span>x8 Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>  <span class="pl-c1">7</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>  <span class="pl-c1">1</span>  <span class="pl-c1">7</span>  <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">two_row</span>(<span class="pl-c1">reverse</span>(p))
<span class="pl-c1">2</span>x8 Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>  <span class="pl-c1">7</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">7</span>  <span class="pl-c1">1</span>  <span class="pl-c1">8</span>  <span class="pl-c1">6</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span></pre></div>
<h2><a id="user-content-additional-constructors" class="anchor" aria-hidden="true" href="#additional-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional constructors</h2>
<p>For convenience, identity and random permutations can be constructed
like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Permutation(10)
(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)

julia&gt; RandomPermutation(10)
(1,7,6,10,3,2,8,4)(5,9)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Permutation</span>(<span class="pl-c1">10</span>)
(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">4</span>)(<span class="pl-c1">5</span>)(<span class="pl-c1">6</span>)(<span class="pl-c1">7</span>)(<span class="pl-c1">8</span>)(<span class="pl-c1">9</span>)(<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">10</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">6</span>,<span class="pl-c1">10</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">8</span>,<span class="pl-c1">4</span>)(<span class="pl-c1">5</span>,<span class="pl-c1">9</span>)</pre></div>
<p>In addition, we can use <code>Permutation(n,k)</code> to create the
<code>k</code>'th permutation of the set <code>{1,2,...,n}</code>. Of course,
this requires <code>k</code> to be between <code>1</code> and <code>n!</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Permutation(6,701)
(1,6,3)(2,5)(4)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Permutation</span>(<span class="pl-c1">6</span>,<span class="pl-c1">701</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">6</span>,<span class="pl-c1">3</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)(<span class="pl-c1">4</span>)</pre></div>
<p>The function <code>Transposition</code> is used to create a permutation containing
a single two-cycle. Use <code>Transposition(n,a,b)</code> to create a permutation of
<code>1:n</code> that swaps <code>a</code> and <code>b</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = Transposition(10,3,5)
(1)(2)(3,5)(4)(6)(7)(8)(9)(10)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Transposition</span>(<span class="pl-c1">10</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>)
(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>)(<span class="pl-c1">4</span>)(<span class="pl-c1">6</span>)(<span class="pl-c1">7</span>)(<span class="pl-c1">8</span>)(<span class="pl-c1">9</span>)(<span class="pl-c1">10</span>)</pre></div>
<p>This function requires <code>1 ≤ a ≠ b ≤ n</code>.</p>
<h2><a id="user-content-properties" class="anchor" aria-hidden="true" href="#properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Properties</h2>
<p>A <em>fixed point</em> of a permutation <code>p</code> is a value <code>k</code> such that
<code>p[k]==k</code>. The function <code>fixed_points</code> returns a list of the fixed
points of a given permutation.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(20)
(1,15,10,9,11,13,12,8,5,7,18,6,2)(3)(4,16,17,19)(14)(20)

julia&gt; fixed_points(p)
3-element Array{Int64,1}:
  3
 14
 20
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">20</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">15</span>,<span class="pl-c1">10</span>,<span class="pl-c1">9</span>,<span class="pl-c1">11</span>,<span class="pl-c1">13</span>,<span class="pl-c1">12</span>,<span class="pl-c1">8</span>,<span class="pl-c1">5</span>,<span class="pl-c1">7</span>,<span class="pl-c1">18</span>,<span class="pl-c1">6</span>,<span class="pl-c1">2</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">4</span>,<span class="pl-c1">16</span>,<span class="pl-c1">17</span>,<span class="pl-c1">19</span>)(<span class="pl-c1">14</span>)(<span class="pl-c1">20</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fixed_points</span>(p)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">3</span>
 <span class="pl-c1">14</span>
 <span class="pl-c1">20</span></pre></div>
<p>The function <code>longest_increasing</code> finds a subsequence of a permutation
whose elements are in increasing order. Likewise, <code>longest_decreasing</code>
finds a longest decreasing subsequence.
For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(10)
(1,3,10)(2)(4)(5,6)(7)(8)(9)

julia&gt; two_row(p)
2x10 Array{Int64,2}:
 1  2   3  4  5  6  7  8  9  10
 3  2  10  4  6  5  7  8  9   1

julia&gt; longest_increasing(p)
6-element Array{Int64,1}:
 3
 4
 6
 7
 8
 9

julia&gt; longest_decreasing(p)
4-element Array{Int64,1}:
 10
  6
  5
  1
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">10</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">10</span>)(<span class="pl-c1">2</span>)(<span class="pl-c1">4</span>)(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>)(<span class="pl-c1">7</span>)(<span class="pl-c1">8</span>)(<span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">two_row</span>(p)
<span class="pl-c1">2</span>x10 Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>   <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>  <span class="pl-c1">7</span>  <span class="pl-c1">8</span>  <span class="pl-c1">9</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">10</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>  <span class="pl-c1">8</span>  <span class="pl-c1">9</span>   <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">longest_increasing</span>(p)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span>
 <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">longest_decreasing</span>(p)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">10</span>
  <span class="pl-c1">6</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">1</span></pre></div>
<h2><a id="user-content-conversion-to-a-dict" class="anchor" aria-hidden="true" href="#conversion-to-a-dict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversion to a <code>Dict</code></h2>
<p>For a permutation <code>p</code>, calling <code>dict(p)</code> returns a dictionary that behaves
just like <code>p</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = RandomPermutation(12)
(1,11,6)(2,8,7)(3)(4,5,9,12,10)

julia&gt; d = dict(p)
Dict{Int64,Int64} with 12 entries:
  2  =&gt; 8
  11 =&gt; 6
  7  =&gt; 2
  9  =&gt; 12
  10 =&gt; 4
  8  =&gt; 7
  6  =&gt; 1
  4  =&gt; 5
  3  =&gt; 3
  5  =&gt; 9
  12 =&gt; 10
  1  =&gt; 11
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">RandomPermutation</span>(<span class="pl-c1">12</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">11</span>,<span class="pl-c1">6</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">8</span>,<span class="pl-c1">7</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>,<span class="pl-c1">12</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">dict</span>(p)
Dict{Int64,Int64} with <span class="pl-c1">12</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">8</span>
  <span class="pl-c1">11</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
  <span class="pl-c1">9</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">12</span>
  <span class="pl-c1">10</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">8</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">7</span>
  <span class="pl-c1">6</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">4</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">3</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">5</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">9</span>
  <span class="pl-c1">12</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>
  <span class="pl-c1">1</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">11</span></pre></div>
<h2><a id="user-content-coxeter-decomposition" class="anchor" aria-hidden="true" href="#coxeter-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Coxeter Decomposition</h2>
<p>Every permutation can be expressed as a product of transpositions. In
a <em>Coxeter decomposition</em> the permutation is the product of transpositions
of the form <code>(j,j+1)</code>.
Given a permutation <code>p</code>, we get this form
with <code>CoxeterDecomposition(p)</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = Permutation([2,4,3,5,1,6,8,7])
(1,2,4,5)(3)(6)(7,8)

julia&gt; pp = CoxeterDecomposition(p)
Permutation of 1:8: (1,2)(2,3)(3,4)(2,3)(4,5)(7,8)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>([<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">7</span>])
(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">6</span>)(<span class="pl-c1">7</span>,<span class="pl-c1">8</span>)

julia<span class="pl-k">&gt;</span> pp <span class="pl-k">=</span> <span class="pl-c1">CoxeterDecomposition</span>(p)
Permutation of <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span><span class="pl-k">:</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)(<span class="pl-c1">7</span>,<span class="pl-c1">8</span>)</pre></div>
<p>The original permutation can be recovered like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Permutation(pp)
(1,2,4,5)(3)(6)(7,8)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Permutation</span>(pp)
(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)(<span class="pl-c1">3</span>)(<span class="pl-c1">6</span>)(<span class="pl-c1">7</span>,<span class="pl-c1">8</span>)</pre></div>
</article></div>