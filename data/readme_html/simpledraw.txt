<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simpledraw" class="anchor" aria-hidden="true" href="#simpledraw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleDraw</h1>
<p dir="auto">This is a lightweight self-contained package that attempts to provide efficient drawing methods for some simple shapes. So far, in this package, all the shapes and drawing algorithms are integer-based, and all the drawing algorithms are single-threaded.</p>
<h2 dir="auto"><a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Table of contents:</h2>
<ul dir="auto">
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#notes">Notes</a>
<ul dir="auto">
<li><a href="#api">API</a></li>
<li><a href="#basic-drawing">Basic drawing</a></li>
<li><a href="#drawing-optimizations">Drawing optimizations</a></li>
<li><a href="#visualization">Visualization</a></li>
<li><a href="#benchmarks">Benchmarks</a></li>
</ul>
</li>
<li><a href="#references-and-license-information">References and License Information</a></li>
</ul>
<p dir="auto"><a href="#list-of-shapes">List of shapes</a>:</p>
<ol dir="auto">
<li><a href="#background"><code>Background</code></a></li>
<li><a href="#point"><code>Point</code></a></li>
<li><a href="#line"><code>Line</code></a></li>
<li><a href="#thickline"><code>ThickLine</code></a></li>
<li><a href="#triangle"><code>Triangle</code></a></li>
<li><a href="#filledtriangle"><code>FilledTriangle</code></a></li>
<li><a href="#rectangle"><code>Rectangle</code></a></li>
<li><a href="#filledrectangle"><code>FilledRectangle</code></a></li>
<li><a href="#thickrectangle"><code>ThickRectangle</code></a></li>
<li><a href="#circle"><code>Circle</code></a></li>
<li><a href="#filledcircle"><code>FilledCircle</code></a></li>
<li><a href="#thickcircle"><code>ThickCircle</code></a></li>
<li><a href="#bitmap"><code>Bitmap</code></a></li>
<li><a href="#image"><code>Image</code></a></li>
<li><a href="#character"><code>Character</code></a></li>
<li><a href="#textline"><code>TextLine</code></a></li>
</ol>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import SimpleDraw as SD

# create a canvas (could be any AbstractMatrix)
image = falses(32, 32) # (height, width)

# create the shape
shape = SD.Line(SD.Point(9, 5), SD.Point(14, 19))

# we will draw on the boolean image with the &quot;color&quot; true
color = true

# draw the shape on image
SD.draw!(image, shape, color)

# print the boolean image using Unicode block characters
SD.visualize(image)"><pre><span class="pl-k">import</span> SimpleDraw <span class="pl-k">as</span> SD

<span class="pl-c"><span class="pl-c">#</span> create a canvas (could be any AbstractMatrix)</span>
image <span class="pl-k">=</span> <span class="pl-c1">falses</span>(<span class="pl-c1">32</span>, <span class="pl-c1">32</span>) <span class="pl-c"><span class="pl-c">#</span> (height, width)</span>

<span class="pl-c"><span class="pl-c">#</span> create the shape</span>
shape <span class="pl-k">=</span> SD<span class="pl-k">.</span><span class="pl-c1">Line</span>(SD<span class="pl-k">.</span><span class="pl-c1">Point</span>(<span class="pl-c1">9</span>, <span class="pl-c1">5</span>), SD<span class="pl-k">.</span><span class="pl-c1">Point</span>(<span class="pl-c1">14</span>, <span class="pl-c1">19</span>))

<span class="pl-c"><span class="pl-c">#</span> we will draw on the boolean image with the "color" true</span>
color <span class="pl-k">=</span> <span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> draw the shape on image</span>
SD<span class="pl-k">.</span><span class="pl-c1">draw!</span>(image, shape, color)

<span class="pl-c"><span class="pl-c">#</span> print the boolean image using Unicode block characters</span>
SD<span class="pl-k">.</span><span class="pl-c1">visualize</span>(image)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211235212-3ac45d97-8dde-45cf-9865-dbf322dda741.png"><img src="https://user-images.githubusercontent.com/32610387/211235212-3ac45d97-8dde-45cf-9865-dbf322dda741.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<h3 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h3>
<p dir="auto">The following types are part of the API.</p>
<ol dir="auto">
<li>All types in <a href="#list-of-shapes">List of shapes</a></li>
<li>The abstract type <code>AbstractShape</code></li>
<li>The font constants <code>TERMINUS_16_8</code>, <code>TERMINUS_BOLD_16_8</code>, <code>TERMINUS_24_12</code>, <code>TERMINUS_BOLD_24_12</code>, <code>TERMINUS_32_16</code>, <code>TERMINUS_BOLD_32_16</code>.</li>
</ol>
<p dir="auto">The following functions are part of the API:</p>
<ol dir="auto">
<li><code>draw!</code></li>
<li><code>is_valid</code></li>
<li><code>get_i_min</code></li>
<li><code>get_i_max</code></li>
<li><code>get_j_min</code></li>
<li><code>get_j_max</code></li>
<li><code>get_i_extrema</code></li>
<li><code>get_j_extrema</code></li>
<li><code>get_height</code></li>
<li><code>get_width</code></li>
<li><code>get_position</code></li>
<li><code>move_i</code></li>
<li><code>move_j</code></li>
<li><code>move</code></li>
<li><code>visualize</code></li>
</ol>
<p dir="auto">Everything else should be considered internal for now.</p>
<h3 dir="auto"><a id="user-content-draw" class="anchor" aria-hidden="true" href="#draw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>draw!</code></h3>
<p dir="auto">Being able to draw broadly requires three things:</p>
<ol dir="auto">
<li><code>image</code>: A canvas to draw on. It could be any <code>AbstractMatrix</code>.</li>
<li><code>shape</code>: The geometric shape to be drawn. Note that primitive <code>shape</code>s can easily be composed to create more complex <code>shape</code>s. For example,
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct MyComplexShape{I &lt;: Integer} &lt;: SD.AbstractShape
    line::SD.Line{I}
    circle::SD.Circle{I}
end"><pre><span class="pl-k">struct</span> MyComplexShape{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">SD.AbstractShape</span>
    line<span class="pl-k">::</span><span class="pl-c1">SD.Line{I}</span>
    circle<span class="pl-k">::</span><span class="pl-c1">SD.Circle{I}</span>
<span class="pl-k">end</span></pre></div>
</li>
<li><code>color</code>: The color to draw the shape with. This is what fills up the entries of the <code>image</code> matrix at appropriate positions, thereby drawing the geometric shape.</li>
</ol>
<p dir="auto">With this in mind, this package provides the <code>draw!</code> function, which is commonly invoked as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SD.draw!(image, shape, color)"><pre>SD<span class="pl-k">.</span><span class="pl-c1">draw!</span>(image, shape, color)</pre></div>
<p dir="auto">Under the hood, it calls internal <code>_draw!</code> methods that automatically take care of some basic optimizations (see <a href="#drawing-optimizations">Drawing optimizations</a>). Then there are <code>_draw!</code> methods of the form <code>SD._draw!(f, image, shape, color)</code> that are heavily used internally. Here, <code>f</code> can roughly be thought of as a drawing function applied to every pixel of the shape. This offers a lot of flexibility with the "brush-stroke" and significantly decreases code duplication. At the same time, it does not adversely affect performance. Most users will not need to use these methods directly, but in case you do, please look up the source code as their usage is not very well documented as of now.</p>
<p dir="auto">By default, the <code>draw!</code> function is safe, that is, it draws only those pixels of the shape that lie within the bounds of the image. So you don't have to worry about your program breaking even if it tries to draw something outside the bounds of the <code>image</code>. That being said, certain basic optimizations are already enabled for drawing most shapes. See <a href="#drawing-optimizations">Drawing optimizations</a>.</p>
<h3 dir="auto"><a id="user-content-drawing-optimizations" class="anchor" aria-hidden="true" href="#drawing-optimizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Drawing optimizations</h3>
<p dir="auto"><code>DrawingOptimizationStyle</code> is trait whose subtypes are used to define generic <code>draw!</code> methods with different levels of optimization for drawing shapes:</p>
<ol dir="auto">
<li><code>PUT_PIXEL</code>: Iterate through all the positions needed to draw the shape. For each position, if it lies within the bounds of the image, put a pixel at that position else don't do anything.</li>
<li><code>CHECK_BOUNDS</code>: If the shape lies completely outside the bounds of the image, simply return <code>nothing</code>. If it lies completely inside the bounds of the image, then draw each pixel of the shape without any further bounds checking. If it is neither of the previous cases, fall back to the slow but safe method of drawing each pixel of the shape only if it lies within the bounds of the image.</li>
<li><code>CLIP</code>: Some shapes like <code>VerticalLine</code>, <code>HorizontalLine</code>, <code>FilledRectangle</code> can be direcly clipped into shapes that completely lie within the bounds of the image. In such cases, perform the clipping and draw the clipped shape without any further bounds checking.</li>
<li><code>PUT_PIXEL_INBOUNDS</code>: Iterate through all the positions needed to draw the shape. For each position, put a pixel at that position assuming without any bounds checking image.</li>
</ol>
<p dir="auto">Use <code>get_drawing_optimization_style(shape)</code> to get the default drawing optimization style for a shape. Shapes which do not fall within the above will implement custom <code>draw!</code> methods with relevant optimizations.</p>
<h3 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h3>
<p dir="auto">The <code>visualize</code> function helps in visualizing a boolean image directly inside the terminal. This is a quick and effective tool to verify whether a shape is being drawn as expected. This is extremely handy when you want to know about the exact coordinates of the pixels that are being drawn for a shape.</p>
<p dir="auto">It uses Unicode block characters to represent a pixel. This works well for low resolution images. To visualize slightly higher resolution images, you can maximize your terminal window and reduce its font size.</p>
<h3 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h3>
<p dir="auto">Below are the benchmarks for <code>v0.5.0</code> of this package:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; versioninfo()
Julia Version 1.8.5
Commit 17cfb8e65ea (2023-01-08 06:45 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: 12 × AMD Ryzen 5 6600H with Radeon Graphics
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-13.0.1 (ORCJIT, znver3)
  Threads: 1 on 12 virtual cores

julia&gt;"><pre lang="julia-repl" class="notranslate"><code>julia&gt; versioninfo()
Julia Version 1.8.5
Commit 17cfb8e65ea (2023-01-08 06:45 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: 12 × AMD Ryzen 5 6600H with Radeon Graphics
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-13.0.1 (ORCJIT, znver3)
  Threads: 1 on 12 virtual cores

julia&gt;
</code></pre></div>
<p dir="auto">Timestamp: 2023_01_11_03_20_28 (yyyy_mm_dd_HH_MM_SS)</p>
<p dir="auto">Shapes are drawn on an image of type <code>Matrix{UInt32}</code> with a color of type <code>UInt32</code></p>
<table>
<thead>
<tr>
<th align="left">shape type</th>
<th align="left">image height</th>
<th align="left">image width</th>
<th align="left">median time</th>
<th align="left">memory</th>
<th align="left">shape</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Background</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">121.069 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Background()</td>
</tr>
<tr>
<td align="left">Background</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">2.140 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Background()</td>
</tr>
<tr>
<td align="left">Background</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">59.781 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Background()</td>
</tr>
<tr>
<td align="left">Point</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">2.585 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Point{Int64}(33, 33)</td>
</tr>
<tr>
<td align="left">Point</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">2.334 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Point{Int64}(129, 129)</td>
</tr>
<tr>
<td align="left">Point</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">2.585 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Point{Int64}(513, 513)</td>
</tr>
<tr>
<td align="left">Line</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">70.601 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Line{Int64}(SimpleDraw.Point{Int64}(9, 2), SimpleDraw.Point{Int64}(56, 63))</td>
</tr>
<tr>
<td align="left">Line</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">342.824 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Line{Int64}(SimpleDraw.Point{Int64}(33, 2), SimpleDraw.Point{Int64}(224, 255))</td>
</tr>
<tr>
<td align="left">Line</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">1.470 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Line{Int64}(SimpleDraw.Point{Int64}(129, 2), SimpleDraw.Point{Int64}(896, 1023))</td>
</tr>
<tr>
<td align="left">ThickLine</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">834.514 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickLine{Int64}(SimpleDraw.Point{Int64}(9, 9), SimpleDraw.Point{Int64}(56, 56), 7)</td>
</tr>
<tr>
<td align="left">ThickLine</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">49.472 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickLine{Int64}(SimpleDraw.Point{Int64}(33, 33), SimpleDraw.Point{Int64}(224, 224), 31)</td>
</tr>
<tr>
<td align="left">ThickLine</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">1.273 ms</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickLine{Int64}(SimpleDraw.Point{Int64}(129, 129), SimpleDraw.Point{Int64}(896, 896), 127)</td>
</tr>
<tr>
<td align="left">Triangle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">185.163 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Triangle{Int64}(SimpleDraw.Point{Int64}(2, 2), SimpleDraw.Point{Int64}(63, 32), SimpleDraw.Point{Int64}(32, 63))</td>
</tr>
<tr>
<td align="left">Triangle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">749.029 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Triangle{Int64}(SimpleDraw.Point{Int64}(2, 2), SimpleDraw.Point{Int64}(255, 128), SimpleDraw.Point{Int64}(128, 255))</td>
</tr>
<tr>
<td align="left">Triangle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">4.349 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Triangle{Int64}(SimpleDraw.Point{Int64}(2, 2), SimpleDraw.Point{Int64}(1023, 512), SimpleDraw.Point{Int64}(512, 1023))</td>
</tr>
<tr>
<td align="left">FilledTriangle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">433.065 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledTriangle{Int64}(SimpleDraw.Point{Int64}(2, 2), SimpleDraw.Point{Int64}(63, 32), SimpleDraw.Point{Int64}(32, 63))</td>
</tr>
<tr>
<td align="left">FilledTriangle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">2.377 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledTriangle{Int64}(SimpleDraw.Point{Int64}(2, 2), SimpleDraw.Point{Int64}(255, 128), SimpleDraw.Point{Int64}(128, 255))</td>
</tr>
<tr>
<td align="left">FilledTriangle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">28.884 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledTriangle{Int64}(SimpleDraw.Point{Int64}(2, 2), SimpleDraw.Point{Int64}(1023, 512), SimpleDraw.Point{Int64}(512, 1023))</td>
</tr>
<tr>
<td align="left">Rectangle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">56.104 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Rectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 63, 63)</td>
</tr>
<tr>
<td align="left">Rectangle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">908.600 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Rectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 255, 255)</td>
</tr>
<tr>
<td align="left">Rectangle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">9.859 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Rectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 1023, 1023)</td>
</tr>
<tr>
<td align="left">FilledRectangle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">518.203 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledRectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 63, 63)</td>
</tr>
<tr>
<td align="left">FilledRectangle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">3.588 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledRectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 255, 255)</td>
</tr>
<tr>
<td align="left">FilledRectangle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">49.322 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledRectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 1023, 1023)</td>
</tr>
<tr>
<td align="left">ThickRectangle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">841.000 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickRectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 63, 63, 16)</td>
</tr>
<tr>
<td align="left">ThickRectangle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">3.241 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickRectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 255, 255, 64)</td>
</tr>
<tr>
<td align="left">ThickRectangle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">53.329 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickRectangle{Int64}(SimpleDraw.Point{Int64}(2, 2), 1023, 1023, 256)</td>
</tr>
<tr>
<td align="left">Circle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">95.229 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Circle{Int64}(SimpleDraw.Point{Int64}(2, 2), 62)</td>
</tr>
<tr>
<td align="left">Circle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">366.939 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Circle{Int64}(SimpleDraw.Point{Int64}(2, 2), 254)</td>
</tr>
<tr>
<td align="left">Circle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">3.228 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Circle{Int64}(SimpleDraw.Point{Int64}(2, 2), 1022)</td>
</tr>
<tr>
<td align="left">FilledCircle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">608.218 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledCircle{Int64}(SimpleDraw.Point{Int64}(2, 2), 62)</td>
</tr>
<tr>
<td align="left">FilledCircle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">3.966 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledCircle{Int64}(SimpleDraw.Point{Int64}(2, 2), 254)</td>
</tr>
<tr>
<td align="left">FilledCircle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">52.016 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.FilledCircle{Int64}(SimpleDraw.Point{Int64}(2, 2), 1022)</td>
</tr>
<tr>
<td align="left">ThickCircle</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">923.326 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickCircle{Int64}(SimpleDraw.Point{Int64}(2, 2), 62, 16)</td>
</tr>
<tr>
<td align="left">ThickCircle</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">24.506 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickCircle{Int64}(SimpleDraw.Point{Int64}(2, 2), 254, 64)</td>
</tr>
<tr>
<td align="left">ThickCircle</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">1.730 ms</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.ThickCircle{Int64}(SimpleDraw.Point{Int64}(2, 2), 1022, 256)</td>
</tr>
<tr>
<td align="left">Bitmap</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">4.490 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Bitmap{Int64, BitMatrix}(SimpleDraw.Point{Int64}(2, 2), Bool[1 0 … 1 0; 0 1 … 0 1; … ; 1 0 … 1 0; 0 1 … 0 1])</td>
</tr>
<tr>
<td align="left">Bitmap</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">71.583 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Bitmap{Int64, BitMatrix}(SimpleDraw.Point{Int64}(2, 2), Bool[1 0 … 1 0; 0 1 … 0 1; … ; 1 0 … 1 0; 0 1 … 0 1])</td>
</tr>
<tr>
<td align="left">Bitmap</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">1.181 ms</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Bitmap{Int64, BitMatrix}(SimpleDraw.Point{Int64}(2, 2), Bool[1 0 … 1 0; 0 1 … 0 1; … ; 1 0 … 1 0; 0 1 … 0 1])</td>
</tr>
<tr>
<td align="left">Image</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">2.285 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Image{Int64, Matrix{UInt32}}(SimpleDraw.Point{Int64}(2, 2), UInt32[0x00000001 0x00000000 … 0x00000001 0x00000000; 0x00000000 0x00000001 … 0x00000000 0x00000001; … ; 0x00000001 0x00000000 … 0x00000001 0x00000000; 0x00000000 0x00000001 … 0x00000000 0x00000001])</td>
</tr>
<tr>
<td align="left">Image</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">38.742 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Image{Int64, Matrix{UInt32}}(SimpleDraw.Point{Int64}(2, 2), UInt32[0x00000001 0x00000000 … 0x00000001 0x00000000; 0x00000000 0x00000001 … 0x00000000 0x00000001; … ; 0x00000001 0x00000000 … 0x00000001 0x00000000; 0x00000000 0x00000001 … 0x00000000 0x00000001])</td>
</tr>
<tr>
<td align="left">Image</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">814.004 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Image{Int64, Matrix{UInt32}}(SimpleDraw.Point{Int64}(2, 2), UInt32[0x00000001 0x00000000 … 0x00000001 0x00000000; 0x00000000 0x00000001 … 0x00000000 0x00000001; … ; 0x00000001 0x00000000 … 0x00000001 0x00000000; 0x00000000 0x00000001 … 0x00000000 0x00000001])</td>
</tr>
<tr>
<td align="left">Character</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">873.814 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Character{Int64, Char, SimpleDraw.MonospaceBitmapASCIIFont}(SimpleDraw.Point{Int64}(2, 2), 'A', SimpleDraw.MonospaceBitmapASCIIFont([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; … ;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0]))</td>
</tr>
<tr>
<td align="left">Character</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">874.355 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Character{Int64, Char, SimpleDraw.MonospaceBitmapASCIIFont}(SimpleDraw.Point{Int64}(2, 2), 'A', SimpleDraw.MonospaceBitmapASCIIFont([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; … ;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0]))</td>
</tr>
<tr>
<td align="left">Character</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">881.478 ns</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.Character{Int64, Char, SimpleDraw.MonospaceBitmapASCIIFont}(SimpleDraw.Point{Int64}(2, 2), 'A', SimpleDraw.MonospaceBitmapASCIIFont([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; … ;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0]))</td>
</tr>
<tr>
<td align="left">TextLine</td>
<td align="left">64</td>
<td align="left">64</td>
<td align="left">3.548 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.TextLine{Int64, String, SimpleDraw.MonospaceBitmapASCIIFont}(SimpleDraw.Point{Int64}(1, 1), "BUDB", SimpleDraw.MonospaceBitmapASCIIFont([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; … ;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0]))</td>
</tr>
<tr>
<td align="left">TextLine</td>
<td align="left">256</td>
<td align="left">256</td>
<td align="left">14.377 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.TextLine{Int64, String, SimpleDraw.MonospaceBitmapASCIIFont}(SimpleDraw.Point{Int64}(1, 1), "ZZPEKEEOUGIIHKGY", SimpleDraw.MonospaceBitmapASCIIFont([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; … ;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0]))</td>
</tr>
<tr>
<td align="left">TextLine</td>
<td align="left">1024</td>
<td align="left">1024</td>
<td align="left">58.398 μs</td>
<td align="left">0 bytes</td>
<td align="left">SimpleDraw.TextLine{Int64, String, SimpleDraw.MonospaceBitmapASCIIFont}(SimpleDraw.Point{Int64}(1, 1), "ZBXMZBNLSOTGROCLZJTOONNIEIFUOLCSLIUTYUGDMIEWKIWMYJLOPHGYPLTWBIDF", SimpleDraw.MonospaceBitmapASCIIFont([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; … ;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0;;; 0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 0 0; 0 0 … 0 0]))</td>
</tr>
</tbody>
</table>
<p dir="auto">Follow these steps to generate benchmarks. Take care to double-check the version of the package you are benchmarking:</p>
<ol dir="auto">
<li>
<p dir="auto">Clone the project</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ git clone https://github.com/Sid-Bhatia-0/SimpleDraw.jl.git"><pre class="notranslate"><code>$ git clone https://github.com/Sid-Bhatia-0/SimpleDraw.jl.git
</code></pre></div>
</li>
<li>
<p dir="auto">Start the julia REPL inside the <code>/benchmark</code> directory</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="benchmark $ julia"><pre class="notranslate"><code>benchmark $ julia
</code></pre></div>
</li>
<li>
<p dir="auto">Activate and instantiate the project</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.activate(&quot;.&quot;); Pkg.instantiate()"><pre class="notranslate"><code>julia&gt; import Pkg; Pkg.activate("."); Pkg.instantiate()
</code></pre></div>
</li>
<li>
<p dir="auto">Exit the REP and run <code>generate_benchmarks.jl</code> with the <code>Project.toml</code> and <code>Manifest.toml</code> files in this directory</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="benchmark $ julia --project=. generate_benchmarks.jl"><pre class="notranslate"><code>benchmark $ julia --project=. generate_benchmarks.jl
</code></pre></div>
</li>
</ol>
<p dir="auto">This will print a bunch of outputs and produce a markdown file named with a timestamp containing the final benchmarks. Using a timestamp in the name helps ensure that running <code>generate_benchmarks.jl</code> multiple times does not overwrite the same file.</p>
<h2 dir="auto"><a id="user-content-list-of-shapes" class="anchor" aria-hidden="true" href="#list-of-shapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>List of shapes</h2>
<ol dir="auto">
<li>
<h3 dir="auto"><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Background</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Background &lt;: AbstractShape end"><pre><span class="pl-k">struct</span> Background <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractShape</span> <span class="pl-k">end</span></pre></div>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943624-244cbe86-1aac-4ad1-9285-4f35d38009c6.png"><img src="https://user-images.githubusercontent.com/32610387/147943624-244cbe86-1aac-4ad1-9285-4f35d38009c6.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-point" class="anchor" aria-hidden="true" href="#point"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Point</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Point{I &lt;: Integer} &lt;: AbstractShape
    i::I
    j::I
end"><pre><span class="pl-k">struct</span> Point{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractShape</span>
    i<span class="pl-k">::</span><span class="pl-c1">I</span>
    j<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943555-5e6c4560-a02b-48b8-9638-c7c568936147.png"><img src="https://user-images.githubusercontent.com/32610387/147943555-5e6c4560-a02b-48b8-9638-c7c568936147.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-line" class="anchor" aria-hidden="true" href="#line"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Line</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Line{I &lt;: Integer} &lt;: AbstractLine
    point1::Point{I}
    point2::Point{I}
end"><pre><span class="pl-k">struct</span> Line{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractLine</span>
    point1<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    point2<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>Line(point1, point2)</code> will draw the same thing as <code>Line(point2, point1)</code> as they are always sorted internally. But note that the visual representation of the line may not symmetric with respect to the end points in general.</p>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211235212-3ac45d97-8dde-45cf-9865-dbf322dda741.png"><img src="https://user-images.githubusercontent.com/32610387/211235212-3ac45d97-8dde-45cf-9865-dbf322dda741.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-thickline" class="anchor" aria-hidden="true" href="#thickline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ThickLine</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct ThickLine{I &lt;: Integer} &lt;: AbstractLine
    point1::Point{I}
    point2::Point{I}
    thickness::I
end"><pre><span class="pl-k">struct</span> ThickLine{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractLine</span>
    point1<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    point2<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    thickness<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>ThickLine</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>thickness &gt; 0</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/148082257-79ded105-a737-4286-8d58-a5c821a41f14.png"><img src="https://user-images.githubusercontent.com/32610387/148082257-79ded105-a737-4286-8d58-a5c821a41f14.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-triangle" class="anchor" aria-hidden="true" href="#triangle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Triangle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Triangle{I &lt;: Integer} &lt;: AbstractTriangle
    point1::Point{I}
    point2::Point{I}
    point3::Point{I}
end"><pre><span class="pl-k">struct</span> Triangle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractTriangle</span>
    point1<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    point2<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    point3<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
<span class="pl-k">end</span></pre></div>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211233788-899be8c0-ba0b-4fe7-b217-0818025a458a.png"><img src="https://user-images.githubusercontent.com/32610387/211233788-899be8c0-ba0b-4fe7-b217-0818025a458a.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-filledtriangle" class="anchor" aria-hidden="true" href="#filledtriangle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>FilledTriangle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct FilledTriangle{I &lt;: Integer} &lt;: AbstractTriangle
    point1::Point{I}
    point2::Point{I}
    point3::Point{I}
end"><pre><span class="pl-k">struct</span> FilledTriangle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractTriangle</span>
    point1<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    point2<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    point3<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
<span class="pl-k">end</span></pre></div>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211234382-54eed8ca-f1a9-404a-ba85-2934acbb7da8.png"><img src="https://user-images.githubusercontent.com/32610387/211234382-54eed8ca-f1a9-404a-ba85-2934acbb7da8.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-rectangle" class="anchor" aria-hidden="true" href="#rectangle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Rectangle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Rectangle{I &lt;: Integer} &lt;: AbstractRectangle
    position::Point{I}
    height::I
    width::I
end"><pre><span class="pl-k">struct</span> Rectangle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractRectangle</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    height<span class="pl-k">::</span><span class="pl-c1">I</span>
    width<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>Rectangle</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>height &gt; 0</code></li>
<li><code>width &gt; 0</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943835-44c41d80-8272-48e8-8122-adc56dc949ad.png"><img src="https://user-images.githubusercontent.com/32610387/147943835-44c41d80-8272-48e8-8122-adc56dc949ad.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-filledrectangle" class="anchor" aria-hidden="true" href="#filledrectangle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>FilledRectangle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct FilledRectangle{I &lt;: Integer} &lt;: AbstractRectangle
    position::Point{I}
    height::I
    width::I
end"><pre><span class="pl-k">struct</span> FilledRectangle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractRectangle</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    height<span class="pl-k">::</span><span class="pl-c1">I</span>
    width<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>FilledRectangle</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>height &gt; 0</code></li>
<li><code>width &gt; 0</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943862-5515ca23-234c-4f2e-b3f0-3a8b54e07c37.png"><img src="https://user-images.githubusercontent.com/32610387/147943862-5515ca23-234c-4f2e-b3f0-3a8b54e07c37.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-thickrectangle" class="anchor" aria-hidden="true" href="#thickrectangle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ThickRectangle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct ThickRectangle{I &lt;: Integer} &lt;: AbstractRectangle
    position::Point{I}
    height::I
    width::I
    thickness::I
end"><pre><span class="pl-k">struct</span> ThickRectangle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractRectangle</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    height<span class="pl-k">::</span><span class="pl-c1">I</span>
    width<span class="pl-k">::</span><span class="pl-c1">I</span>
    thickness<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>ThickRectangle</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>height &gt; 0</code></li>
<li><code>width &gt; 0</code></li>
<li><code>thickness &gt; 0</code></li>
<li><code>thickness &lt;= min(height, width)</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943890-badcce13-f1fd-4295-9ea3-37561b9821aa.png"><img src="https://user-images.githubusercontent.com/32610387/147943890-badcce13-f1fd-4295-9ea3-37561b9821aa.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-circle" class="anchor" aria-hidden="true" href="#circle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Circle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Circle{I &lt;: Integer} &lt;: AbstractCircle
    position::Point{I}
    diameter::I
end"><pre><span class="pl-k">struct</span> Circle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractCircle</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    diameter<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>Circle</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>diameter &gt; 0</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943714-72fa3f0a-daca-47ee-ae54-a92bfaf0d962.png"><img src="https://user-images.githubusercontent.com/32610387/147943714-72fa3f0a-daca-47ee-ae54-a92bfaf0d962.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-filledcircle" class="anchor" aria-hidden="true" href="#filledcircle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>FilledCircle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct FilledCircle{I &lt;: Integer} &lt;: AbstractCircle
    position::Point{I}
    diameter::I
end"><pre><span class="pl-k">struct</span> FilledCircle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractCircle</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    diameter<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>FilledCircle</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>diameter &gt; 0</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943755-2a4ebfb0-cb7d-4a19-83cb-925dbf259022.png"><img src="https://user-images.githubusercontent.com/32610387/147943755-2a4ebfb0-cb7d-4a19-83cb-925dbf259022.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-thickcircle" class="anchor" aria-hidden="true" href="#thickcircle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ThickCircle</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct ThickCircle{I &lt;: Integer} &lt;: AbstractCircle
    position::Point{I}
    diameter::I
    thickness::I
end"><pre><span class="pl-k">struct</span> ThickCircle{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractCircle</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    diameter<span class="pl-k">::</span><span class="pl-c1">I</span>
    thickness<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">An instance of <code>ThickCircle</code> is considered valid only if the following conditions hold true:</p>
<ul dir="auto">
<li><code>diameter &gt; 0</code></li>
<li><code>thickness &gt; 0</code></li>
<li>if <code>diameter</code> is odd, then <code>2 * thickness &lt;= diameter + 1</code></li>
<li>if <code>diameter</code> is even, then <code>2 * thickness &lt;= diameter</code></li>
</ul>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147943783-883609bb-2f16-422b-a5c8-150878135c97.png"><img src="https://user-images.githubusercontent.com/32610387/147943783-883609bb-2f16-422b-a5c8-150878135c97.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-bitmap" class="anchor" aria-hidden="true" href="#bitmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Bitmap</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Bitmap{I &lt;: Integer, B &lt;: AbstractMatrix{Bool}} &lt;: AbstractShape
    position::Point{I}
    bitmap::B
end"><pre><span class="pl-k">struct</span> Bitmap{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>, B <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractMatrix{Bool}</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractShape</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    bitmap<span class="pl-k">::</span><span class="pl-c1">B</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Can be used to draw a 1-bit image using some color on an image. For example, it is used for drawing character glyphs in <code>Character</code> or <code>TextLine</code>.</p>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211419295-6d734b0e-5438-4d23-918f-f09db144f047.png"><img src="https://user-images.githubusercontent.com/32610387/211419295-6d734b0e-5438-4d23-918f-f09db144f047.png" style="max-width: 100%;"></a>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211419311-80caada5-5c68-44d5-8ba0-3d8a23cc6c8e.png"><img src="https://user-images.githubusercontent.com/32610387/211419311-80caada5-5c68-44d5-8ba0-3d8a23cc6c8e.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-image" class="anchor" aria-hidden="true" href="#image"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Image</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Image{I &lt;: Integer, A} &lt;: AbstractShape
    position::Point{I}
    image::A
end"><pre><span class="pl-k">struct</span> Image{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>, A} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractShape</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    image<span class="pl-k">::</span><span class="pl-c1">A</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Can be used to draw an existing image on top of an image at some position. No need to pass color explicitly, the sub-image should already be colored. Whereas in <code>Bitmap</code>, one needs to pass color explicitly and it can only be of a single color.</p>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211422416-98c188a0-205a-49dc-8a4f-08cab3407af4.png"><img src="https://user-images.githubusercontent.com/32610387/211422416-98c188a0-205a-49dc-8a4f-08cab3407af4.png" style="max-width: 100%;"></a>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/211422426-2e2260b6-7588-45c5-8bc3-c151c4da1002.png"><img src="https://user-images.githubusercontent.com/32610387/211422426-2e2260b6-7588-45c5-8bc3-c151c4da1002.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-character" class="anchor" aria-hidden="true" href="#character"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Character</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Character{I &lt;: Integer, C &lt;: AbstractChar, F &lt;: AbstractFont} &lt;: AbstractShape
    position::Point{I}
    character::C
    font::F
end"><pre><span class="pl-k">struct</span> Character{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>, C <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractChar</span>, F <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFont</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractShape</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    character<span class="pl-k">::</span><span class="pl-c1">C</span>
    font<span class="pl-k">::</span><span class="pl-c1">F</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">There are 6 monospace ASCII fonts are available at this point:</p>
<ol dir="auto">
<li><code>TERMINUS_16_8</code> (height 16 pixels, width 8 pixels)</li>
<li><code>TERMINUS_BOLD_16_8</code> (height 16 pixels, width 8 pixels)</li>
<li><code>TERMINUS_24_12</code> (height 24 pixels, width 12 pixels)</li>
<li><code>TERMINUS_BOLD_24_12</code> (height 24 pixels, width 12 pixels)</li>
<li><code>TERMINUS_32_16</code> (height 32 pixels, width 16 pixels)</li>
<li><code>TERMINUS_BOLD_32_16</code> (height 32 pixels, width 16 pixels)</li>
</ol>
<p dir="auto">Only glyphs for ASCII characters are available as of now.</p>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147944083-56f45efc-1c7f-4f19-ae53-e17d5f8e51b6.png"><img src="https://user-images.githubusercontent.com/32610387/147944083-56f45efc-1c7f-4f19-ae53-e17d5f8e51b6.png" style="max-width: 100%;"></a>
</li>
<li>
<h3 dir="auto"><a id="user-content-textline" class="anchor" aria-hidden="true" href="#textline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>TextLine</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct TextLine{I &lt;: Integer, S, F &lt;: AbstractFont} &lt;: AbstractShape
    position::Point{I}
    text::S
    font::F
end"><pre><span class="pl-k">struct</span> TextLine{I <span class="pl-k">&lt;:</span> <span class="pl-c1">Integer</span>, S, F <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFont</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractShape</span>
    position<span class="pl-k">::</span><span class="pl-c1">Point{I}</span>
    text<span class="pl-k">::</span><span class="pl-c1">S</span>
    font<span class="pl-k">::</span><span class="pl-c1">F</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">There are 6 monospace ASCII fonts are available at this point:</p>
<ol dir="auto">
<li><code>TERMINUS_16_8</code> (height 16 pixels, width 8 pixels)</li>
<li><code>TERMINUS_BOLD_16_8</code> (height 16 pixels, width 8 pixels)</li>
<li><code>TERMINUS_24_12</code> (height 24 pixels, width 12 pixels)</li>
<li><code>TERMINUS_BOLD_24_12</code> (height 24 pixels, width 12 pixels)</li>
<li><code>TERMINUS_32_16</code> (height 32 pixels, width 16 pixels)</li>
<li><code>TERMINUS_BOLD_32_16</code> (height 32 pixels, width 16 pixels)</li>
</ol>
<p dir="auto">Only glyphs for ASCII characters are available as of now.</p>
 <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32610387/147944102-2480436c-d9b8-47bb-9134-5537b4014791.png"><img src="https://user-images.githubusercontent.com/32610387/147944102-2480436c-d9b8-47bb-9134-5537b4014791.png" style="max-width: 100%;"></a>
</li>
</ol>
<h2 dir="auto"><a id="user-content-references-and-license-information" class="anchor" aria-hidden="true" href="#references-and-license-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References and License Information</h2>
<ol dir="auto">
<li>Octant drawing: <a href="https://en.wikipedia.org/w/index.php?title=Midpoint_circle_algorithm&amp;oldid=1073593456" rel="nofollow">https://en.wikipedia.org/w/index.php?title=Midpoint_circle_algorithm&amp;oldid=1073593456</a></li>
<li>Line drawing: <a href="https://en.wikipedia.org/w/index.php?title=Bresenham%27s_line_algorithm&amp;oldid=1073834153" rel="nofollow">https://en.wikipedia.org/w/index.php?title=Bresenham%27s_line_algorithm&amp;oldid=1073834153</a></li>
<li>Fonts: This package supports bitmap fonts for <a href="https://en.wikipedia.org/wiki/ASCII" rel="nofollow">ASCII</a> characters at this point. We use a subset of <a href="http://terminus-font.sourceforge.net/" rel="nofollow">Terminus Font</a> for drawing the glyphs. Terminus Font is licensed under the SIL Open Font License, Version 1.1. The license is included as OFL.TXT in the <code>/src/fonts</code> directory in this repository, and is also available with a FAQ at <a href="http://scripts.sil.org/OFL" rel="nofollow">http://scripts.sil.org/OFL</a>.</li>
<li>Everything else is under <a href="https://github.com/Sid-Bhatia-0/SimpleDraw.jl/blob/master/LICENSE">LICENSE</a>.</li>
</ol>
</article></div>