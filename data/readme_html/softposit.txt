<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-softpositjl" class="anchor" aria-hidden="true" href="#softpositjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SoftPosit.jl</h1>
<p dir="auto"><a href="https://github.com/milankl/SoftPosit.jl/actions/workflows/CI.yml"><img src="https://github.com/milankl/SoftPosit.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/183233999" rel="nofollow"><img src="https://camo.githubusercontent.com/b1edb43bb31d8057a60394633bcca59b19f742aab96a43cf0929ec66a76e6898/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3138333233333939392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/183233999.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A pure Julia implementation for posit arithmetic. Posit numbers are an alternative to floating-point numbers.
Posits extend floats by introducing regime bits that allow for a higher precision around one, yet a wide
dynamic range of representable numbers. For further information see <a href="https://posithub.org" rel="nofollow">posithub.org</a>.</p>
<p dir="auto">v0.5 respects the <a href="https://posithub.org/docs/posit_standard-2.pdf" rel="nofollow">2022 Standard for Posit Arithmetic</a> but drops
quire support. v0.4 implements the previous standard, has quire support but depends on the C implementation of
<a href="https://gitlab.com/cerlane/SoftPosit" rel="nofollow">SoftPosit</a>.</p>
<p dir="auto">If this library doesn't support a desired functionality or for anything else, please
<a href="https://github.com/milankl/SoftPosit.jl/issues">raise an issue</a>.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">In the Julia REPL do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt;] add SoftPosit"><pre>julia<span class="pl-k">&gt;</span>] add SoftPosit</pre></div>
<p dir="auto">where <code>]</code> opens the package manager. Then simply <code>using SoftPosit</code> which enables all of the functionality.</p>
<h1 dir="auto"><a id="user-content-posit-formats" class="anchor" aria-hidden="true" href="#posit-formats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Posit formats</h1>
<p dir="auto">SoftPosit.jl emulates and exports the following Posit number formats</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Posit8, Posit16, Posit32
Posit16_1"><pre class="notranslate"><code>Posit8, Posit16, Posit32
Posit16_1
</code></pre></div>
<p dir="auto">Posit8, Posit16, Posit32 are the standard formats with 2 exponent bits.
The off-standard format Posit(16,1) (16 bits with 1 exponent bit, exported as <code>Posit16_1</code>) was part of the previous posit arithmetic
<a href="https://posithub.org/docs/posit_standard.pdf" rel="nofollow">draft standard</a>.</p>
<p dir="auto">For all the formats conversions between integers and floats and basic arithmetic operations
<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> and <code>sqrt</code> (among others) are defined.</p>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<p dir="auto">Conversion to and from <code>Float64</code> and computing a square root</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SoftPosit
julia&gt; p = Posit16(16)
Posit16(16.0)

julia&gt; sqrt(p)
Posit16(4.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SoftPosit
julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Posit16</span>(<span class="pl-c1">16</span>)
<span class="pl-c1">Posit16</span>(<span class="pl-c1">16.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrt</span>(p)
<span class="pl-c1">Posit16</span>(<span class="pl-c1">4.0</span>)</pre></div>
<p dir="auto">And the bitwise representation split into sign, regime, exponent and mantissa bits using <code>bitstring(p,:split)</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; bitstring(Posit32(123456.7),:split)
&quot;0 111110 00 11100010010000001011010&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">bitstring</span>(<span class="pl-c1">Posit32</span>(<span class="pl-c1">123456.7</span>),<span class="pl-c1">:split</span>)
<span class="pl-s"><span class="pl-pds">"</span>0 111110 00 11100010010000001011010<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Or solving a linear equation system with Posit8</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Posit8.(randn(3,3))
3×3 Matrix{Posit8}:
 Posit8(1.125)      Posit8(-0.5625) Posit8(0.0390625)
 Posit8(-1.5)       Posit8(0.0625)  Posit8(1.25)
 Posit8(-0.40625)   Posit8(1.875)   Posit8(1.125)

julia&gt; b = Posit8.(randn(3))
3-element Vector{Posit8}:
 Posit8(1.25)
 Posit8(-1.375)
 Posit8(-0.6875)

julia&gt; A\b
3-element Vector{Posit8}:
 Posit8(1.0)
 Posit8(-0.21875)
 Posit8(0.125)"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Posit8</span>.(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Posit8}<span class="pl-k">:</span>
 <span class="pl-c1">Posit8</span>(<span class="pl-c1">1.125</span>)      <span class="pl-c1">Posit8</span>(<span class="pl-k">-</span><span class="pl-c1">0.5625</span>) <span class="pl-c1">Posit8</span>(<span class="pl-c1">0.0390625</span>)
 <span class="pl-c1">Posit8</span>(<span class="pl-k">-</span><span class="pl-c1">1.5</span>)       <span class="pl-c1">Posit8</span>(<span class="pl-c1">0.0625</span>)  <span class="pl-c1">Posit8</span>(<span class="pl-c1">1.25</span>)
 <span class="pl-c1">Posit8</span>(<span class="pl-k">-</span><span class="pl-c1">0.40625</span>)   <span class="pl-c1">Posit8</span>(<span class="pl-c1">1.875</span>)   <span class="pl-c1">Posit8</span>(<span class="pl-c1">1.125</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Posit8</span>.(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Posit8}<span class="pl-k">:</span>
 <span class="pl-c1">Posit8</span>(<span class="pl-c1">1.25</span>)
 <span class="pl-c1">Posit8</span>(<span class="pl-k">-</span><span class="pl-c1">1.375</span>)
 <span class="pl-c1">Posit8</span>(<span class="pl-k">-</span><span class="pl-c1">0.6875</span>)

julia<span class="pl-k">&gt;</span> A<span class="pl-k">\</span>b
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Posit8}<span class="pl-k">:</span>
 <span class="pl-c1">Posit8</span>(<span class="pl-c1">1.0</span>)
 <span class="pl-c1">Posit8</span>(<span class="pl-k">-</span><span class="pl-c1">0.21875</span>)
 <span class="pl-c1">Posit8</span>(<span class="pl-c1">0.125</span>)</pre></div>
<p dir="auto">For an (outdated) comprehensive notebook covering (almost) all the functionality of SoftPosit.jl
please read <a href="https://github.com/milankl/SoftPosit.jl/blob/master/docs/softposit_examples.ipynb">softposit_examples.ipynb</a></p>
<h1 dir="auto"><a id="user-content-rounding-mode" class="anchor" aria-hidden="true" href="#rounding-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rounding mode</h1>
<p dir="auto">Following the <a href="https://posithub.org/docs/posit_standard-2.pdf" rel="nofollow">2022 posit standard</a>,
posits should never underflow nor overflow. This is in v0.5 generally respected, but there are some
caveats: Posits currently do underflow below about <code>4*floatmin</code> of the float format you are converting from.
In practice this is of little importance as even <code>floatmin(::PositN)^2</code> is larger than that</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; floatmin(Posit16)
Posit16(1.3877788e-17)

julia&gt; floatmin(Posit16)*floatmin(Posit16)
Posit16(1.3877788e-17)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">floatmin</span>(Posit16)
<span class="pl-c1">Posit16</span>(<span class="pl-c1">1.3877788e-17</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">floatmin</span>(Posit16)<span class="pl-k">*</span><span class="pl-c1">floatmin</span>(Posit16)
<span class="pl-c1">Posit16</span>(<span class="pl-c1">1.3877788e-17</span>)</pre></div>
<p dir="auto">and similar for other posit formats.
So in Posit16 arithmetic we have <code>1e-17*1e-17 = 1e-17</code> (no underflow) and <code>1e17*1e17 = 1e17</code> (no overflow).</p>
<h1 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h1>
<p dir="auto">If you use this package please cite us</p>
<blockquote>
<p dir="auto">Klöwer M, PD Düben and TN Palmer, 2020. Number formats, error mitigation and scope for 16-bit arithmetics in weather and climate modelling analyzed with a shallow water model, Journal of Advances in Modeling Earth Systems, 12, e2020MS002246. <a href="https://doi.org/10.1029/2020MS002246" rel="nofollow">10.1029/2020MS002246</a></p>
</blockquote>
</article></div>