<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gridpotentialflowjl" class="anchor" aria-hidden="true" href="#gridpotentialflowjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GridPotentialFlow.jl</h1>
<p dir="auto"><em>A set of tools to solve potential flows past bodies on a Cartesian grid.</em></p>
<p dir="auto"><a href="https://JuliaIBPM.github.io/GridPotentialFlow.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://JuliaIBPM.github.io/GridPotentialFlow.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaIBPM/GridPotentialFlow.jl/actions"><img src="https://github.com/JuliaIBPM/GridPotentialFlow.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaIBPM/GridPotentialFlow.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/244a2380537e42c9c9436b6c66670812fa1791cf7abff94aae09be9f23033f67/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614942504d2f47726964506f74656e7469616c466c6f772e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaIBPM/GridPotentialFlow.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.4549939" rel="nofollow"><img src="https://camo.githubusercontent.com/1ec2d3129b3d68980c723d3b62b8ca60d3aa5099a506b783048104b836eb260b/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e343534393933392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.4549939.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The objective of this package is to allow easy setup and fast simulation of potential
flows. The package provides tools for</p>
<ul dir="auto">
<li>constructing grids, body shapes, and point vortices,</li>
<li>specifying the relevant parameters and setting their values,</li>
<li>specifying the edges where shedding occurs and setting their suction parameter,</li>
<li>solving the problem.</li>
</ul>
<p dir="auto">The underlying grids are uniform and Cartesian, making use of the <a href="https://github.com/JuliaIBPM/CartesianGrids.jl">CartesianGrids</a> package. This package allows the use of the lattice Green's function (LGF) for inverting the Poisson equation. The presence of bodies is accounted for using the immersed boundary projection method, originally developed for viscous flow by Taira and Colonius [1]. The potential flow system with the no-penetration condition, any edge conditions, and  Kelvin's circulation theorem is implemented with the <a href="https://github.com/JuliaIBPM/ConstrainedSystems.jl">ConstrainedSystems</a> package. Tools for creating bodies are based on the <a href="https://github.com/JuliaIBPM/RigidBodyTools.jl">RigidBodyTools</a> package. The vortex dynamics are computed using the vortex-in-cell method of Christiansen [2]. For more details, please refer to <a href="https://arxiv.org/abs/2102.11910" rel="nofollow">Beckers, D. and Eldredge, J. D. (2021) "Planar potential flow on Cartesian grids," [arXiv:2102.11910]</a>.</p>
<p dir="auto"><strong>GridPotentialFlow.jl</strong> is registered in the general Julia registry. To install, type
e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add GridPotentialFlow"><pre>] add GridPotentialFlow</pre></div>
<p dir="auto">Then, in any version, type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GridPotentialFlow"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GridPotentialFlow</pre></div>
<p dir="auto">For examples, consult the documentation or see the example Jupyter notebooks in the Examples folder.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/26737762/113199963-9b77ee80-921c-11eb-8448-70a32e50660f.gif"><img src="https://user-images.githubusercontent.com/26737762/113199963-9b77ee80-921c-11eb-8448-70a32e50660f.gif" alt="vortexshedding" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">[1]: Taira, K. and Colonius, T. (2007) "The immersed boundary method: a projection approach," <em>J. Comput. Phys.</em>, 225, 2118--2137.</p>
<p dir="auto">[2]: Christiansen, J. (1973) "Numerical simulation of hydrodynamics by the method of point vortices," <em>J. Comput. Phys.</em>, 13, 363--379.</p>
</article></div>