<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-extremaloptimization" class="anchor" aria-hidden="true" href="#extremaloptimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExtremalOptimization</h1>
<p>for functions of continuous variables.</p>
<p><a href="https://github.com/francescoalemanno/ExtremalOptimization.jl/actions"><img src="https://github.com/francescoalemanno/ExtremalOptimization.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>This package implements the basic mechanism of Extremal Optimization (τ-EO) as described in <a href="https://arxiv.org/pdf/cond-mat/0010337.pdf" rel="nofollow">Boettcher, Stefan; Percus, Allon G. (2001-06-04). "Optimization with Extremal Dynamics". Physical Review Letters</a>.</p>
<p>The only twist w.r.t. classical EO is an affine invariant update equation for the worst performing solutions,</p>
 <p><a target="_blank" rel="noopener noreferrer" href="svg/eq.svg"><img src="svg/eq.svg" style="max-width:100%;"></a></p>
<p>where X₁, X₂, X₃ are chosen random inside the pool of candidate solutions, this update mechanism allows EO to work on continuous spaces, and be invariant w.r.t. affine transformations of X and monotonous tranformations of the cost function.</p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API:</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function optimize(
    f,
    s,
    N;
    reps_per_particle = 100,
    β = 1.5,
    A = 1.0,
    atol = 0.0,
    rtol = sqrt(eps(1.0)),
    f_atol = 0.0,
    f_rtol = sqrt(eps(1.0)),
    verbose = false,
    rng = Random.GLOBAL_RNG,
    callback = state -&gt; nothing,
)
"><pre><span class="pl-k">function</span> <span class="pl-en">optimize</span>(
    f,
    s,
    N;
    reps_per_particle <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    β <span class="pl-k">=</span> <span class="pl-c1">1.5</span>,
    A <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    atol <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    rtol <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">eps</span>(<span class="pl-c1">1.0</span>)),
    f_atol <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    f_rtol <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">eps</span>(<span class="pl-c1">1.0</span>)),
    verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>,
    rng <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG,
    callback <span class="pl-k">=</span> state <span class="pl-k">-&gt;</span> <span class="pl-c1">nothing</span>,
)</pre></div>
<ul>
<li><code>f</code> : cost function to minimize, whose argument is either a scalar or a vector, must returns a scalar value.</li>
<li><code>s</code> : function whose input is the particle number and output is a random initial point to be ranked by <code>f</code>.</li>
<li><code>N</code> : number of particles to use, choose a number greater than <code>d+4</code> where <code>d</code> is the number of dimensions.</li>
<li><code>reps_per_particle</code> : maximum number of iterations per particle.</li>
</ul>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example:</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExtremalOptimization
rosenbrock2d(x) = (x[1] - 1)^2 + 100*(x[2] - x[1]^2)^2
initpoint(i) = randn(2)
optimize(rosenbrock2d, initpoint, 20)
"><pre><span class="pl-k">using</span> ExtremalOptimization
<span class="pl-en">rosenbrock2d</span>(x) <span class="pl-k">=</span> (x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">100</span><span class="pl-k">*</span>(x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-en">initpoint</span>(i) <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">optimize</span>(rosenbrock2d, initpoint, <span class="pl-c1">20</span>)</pre></div>
<p>output</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(x = [1.0000008, 1.0000016], fx = 6.50e-13, f_nevals = 1109)
"><pre><code>(x = [1.0000008, 1.0000016], fx = 6.50e-13, f_nevals = 1109)
</code></pre></div>
<p>as expected the algorithm has found the optimum at <code>(1, 1)</code>, up to the specified tolerance.</p>
</article></div>