<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bmesh" class="anchor" aria-hidden="true" href="#bmesh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BMesh</h1>
<p dir="auto">Background mesh and utilities for topology optimization</p>
<p dir="auto"><a href="https://codelenz.github.io/BMesh.jl/" rel="nofollow">https://codelenz.github.io/BMesh.jl/</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BMesh

# 2D background mesh in a 1 x 1  domain with 2 divisions in X and 3 in Y
b2 = Bmesh_truss_2D(1.0,2,1.0,3)

# 3D background mesh in a 1 x 1 x 1 domain with 3 divisions in X, 2 in Y and 4 in Z
b3 = Bmesh_truss_3D(1.0,3,1.0,2,1.0,4)

# 2D background mesh in a 1 x 1  solid domain with 10 divisions in X and 10 in Y
bs2 = Bmesh_solid_2D(1.0,10,1.0,10)

# 3D background mesh in a 1 x 1 x 1 solid domain with 10 divisions in each direction
bs3 = Bmesh_solid_3D(1.0,10,1.0,10,1.0,10)

# Plots:plot is overloaded to bmesh
# Just for truss by now
plot(b3)
"><pre><span class="pl-k">using</span> BMesh

<span class="pl-c"><span class="pl-c">#</span> 2D background mesh in a 1 x 1  domain with 2 divisions in X and 3 in Y</span>
b2 <span class="pl-k">=</span> <span class="pl-c1">Bmesh_truss_2D</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> 3D background mesh in a 1 x 1 x 1 domain with 3 divisions in X, 2 in Y and 4 in Z</span>
b3 <span class="pl-k">=</span> <span class="pl-c1">Bmesh_truss_3D</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> 2D background mesh in a 1 x 1  solid domain with 10 divisions in X and 10 in Y</span>
bs2 <span class="pl-k">=</span> <span class="pl-c1">Bmesh_solid_2D</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> 3D background mesh in a 1 x 1 x 1 solid domain with 10 divisions in each direction</span>
bs3 <span class="pl-k">=</span> <span class="pl-c1">Bmesh_solid_3D</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> Plots:plot is overloaded to bmesh</span>
<span class="pl-c"><span class="pl-c">#</span> Just for truss by now</span>
<span class="pl-c1">plot</span>(b3)
</pre></div>
<p dir="auto">There are some tools to use with Bmesh</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="   
   # Nodes of element 2
   Conect(b2,2)
  
   # Coordinates of node 6
   Coord(b3,6)
   
   # Length of element 2
   Lenght(b3,2)
   
   # Evaluate the director cossine and Length of element 6
   r = Rotations(b3,6)
   
   # Evaluate the rotation matrix for this element
   T = T_matrix(r)
   
   # T can also be used directly (without calling Rotations)
   T = T_matrix(b3,6)
   
   # Global degrees of freedom for a given element
   DOFs(b3,20)
   
   # Node close to point (x,y)
   x = 0.0;  y = 0.0
   node = Find_node(b2,x,y)

   # Nodes inside a rectangle with left bottom coordinate (x1,y1) 
   # and right top coordinate (x2,y2)
   x1 = 0.0; y1 = 0.0
   x2 = 0.5; y2 = 0.5
   nodes = Find_nodes_in_rectangle(b2,x1,y1,x2,y2)

   # Nodes inside a box with left bottom coordinate (x1,y1,z1) 
   # and right top coordinate (x2,y2,z2)
   x1 = 0.0; y1 = 0.0; z1 = 0.0
   x2 = 0.5; y2 = 0.5; z2 = 0.5
   nodes = Find_nodes_in_box(b3,x1,y1,z1,x2,y2,z2)

   # Element with centroid close to a given point
   x = 0.0;  y = 0.0
   element = Find_element(b2s,x,y)

   # Elements with centroid inside rectangle with left bottom coordinate (x1,y1) 
   # and right top coordinate (x2,y2)
   x1 = 0.0; y1 = 0.0
   x2 = 0.5; y2 = 0.5
   elements = Find_elements_in_rectangle(b2s,x1,y1,x2,y2)

   # Elements with centroid inside a box with left bottom coordinate (x1,y1,z1) 
   # and right top coordinate (x2,y2,z2)
   x1 = 0.0; y1 = 0.0; z1 = 0.0
   x2 = 0.5; y2 = 0.5; z2 = 0.5
   elements = Find_elements_in_box(b3,x1,y1,z1,x2,y2,z2)

   # Return a vector of vectors, with nn positions, containing the elements sharing
   # each node
   elems = Elements_sharing_nodes(b2)
"><pre>   
   <span class="pl-c"><span class="pl-c">#</span> Nodes of element 2</span>
   <span class="pl-c1">Conect</span>(b2,<span class="pl-c1">2</span>)
  
   <span class="pl-c"><span class="pl-c">#</span> Coordinates of node 6</span>
   <span class="pl-c1">Coord</span>(b3,<span class="pl-c1">6</span>)
   
   <span class="pl-c"><span class="pl-c">#</span> Length of element 2</span>
   <span class="pl-c1">Lenght</span>(b3,<span class="pl-c1">2</span>)
   
   <span class="pl-c"><span class="pl-c">#</span> Evaluate the director cossine and Length of element 6</span>
   r <span class="pl-k">=</span> <span class="pl-c1">Rotations</span>(b3,<span class="pl-c1">6</span>)
   
   <span class="pl-c"><span class="pl-c">#</span> Evaluate the rotation matrix for this element</span>
   T <span class="pl-k">=</span> <span class="pl-c1">T_matrix</span>(r)
   
   <span class="pl-c"><span class="pl-c">#</span> T can also be used directly (without calling Rotations)</span>
   T <span class="pl-k">=</span> <span class="pl-c1">T_matrix</span>(b3,<span class="pl-c1">6</span>)
   
   <span class="pl-c"><span class="pl-c">#</span> Global degrees of freedom for a given element</span>
   <span class="pl-c1">DOFs</span>(b3,<span class="pl-c1">20</span>)
   
   <span class="pl-c"><span class="pl-c">#</span> Node close to point (x,y)</span>
   x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>;  y <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
   node <span class="pl-k">=</span> <span class="pl-c1">Find_node</span>(b2,x,y)

   <span class="pl-c"><span class="pl-c">#</span> Nodes inside a rectangle with left bottom coordinate (x1,y1) </span>
   <span class="pl-c"><span class="pl-c">#</span> and right top coordinate (x2,y2)</span>
   x1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; y1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
   x2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; y2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
   nodes <span class="pl-k">=</span> <span class="pl-c1">Find_nodes_in_rectangle</span>(b2,x1,y1,x2,y2)

   <span class="pl-c"><span class="pl-c">#</span> Nodes inside a box with left bottom coordinate (x1,y1,z1) </span>
   <span class="pl-c"><span class="pl-c">#</span> and right top coordinate (x2,y2,z2)</span>
   x1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; y1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; z1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
   x2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; y2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; z2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
   nodes <span class="pl-k">=</span> <span class="pl-c1">Find_nodes_in_box</span>(b3,x1,y1,z1,x2,y2,z2)

   <span class="pl-c"><span class="pl-c">#</span> Element with centroid close to a given point</span>
   x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>;  y <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
   element <span class="pl-k">=</span> <span class="pl-c1">Find_element</span>(b2s,x,y)

   <span class="pl-c"><span class="pl-c">#</span> Elements with centroid inside rectangle with left bottom coordinate (x1,y1) </span>
   <span class="pl-c"><span class="pl-c">#</span> and right top coordinate (x2,y2)</span>
   x1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; y1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
   x2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; y2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
   elements <span class="pl-k">=</span> <span class="pl-c1">Find_elements_in_rectangle</span>(b2s,x1,y1,x2,y2)

   <span class="pl-c"><span class="pl-c">#</span> Elements with centroid inside a box with left bottom coordinate (x1,y1,z1) </span>
   <span class="pl-c"><span class="pl-c">#</span> and right top coordinate (x2,y2,z2)</span>
   x1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; y1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>; z1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
   x2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; y2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; z2 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
   elements <span class="pl-k">=</span> <span class="pl-c1">Find_elements_in_box</span>(b3,x1,y1,z1,x2,y2,z2)

   <span class="pl-c"><span class="pl-c">#</span> Return a vector of vectors, with nn positions, containing the elements sharing</span>
   <span class="pl-c"><span class="pl-c">#</span> each node</span>
   elems <span class="pl-k">=</span> <span class="pl-c1">Elements_sharing_nodes</span>(b2)
</pre></div>
<p dir="auto">It is possible to merge two Bmeshes, creating a new one. Each Bmesh
can be translated by changing the origin (coordinates of node 1).</p>
<p dir="auto">Lets create a 3D "L" shape by merging two blocks of 3D trusses</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
    # Horizontal bmesh 
    # [=========]
    Lx = 10.0
    Ly = 1.0
    Lz = 1.0
    nx = 10
    ny = 1
    nz = 1
    b1 = Bmesh_truss_3D(Lx,nx,Ly,ny,Lz,nz)
    
    # Vertical bmesh with origin in x0=0.0 y0=1.0 and z0=0.0
    #
    # []
    # [] 
    # [] 
    #
    #
    Lx = 1.0
    Ly = 10.0
    Lz = 1.0
    nx = 1
    ny = 10
    nz = 1
    b2 = Bmesh_truss_3D(Lx,nx,Ly,ny,Lz,nz,origin=(0.0,1.0,0.0))

    # Merge into a single Bmesh
    bL = Merge(b1,b2)
"><pre>    <span class="pl-c"><span class="pl-c">#</span> Horizontal bmesh </span>
    <span class="pl-c"><span class="pl-c">#</span> [=========]</span>
    Lx <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
    Ly <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    Lz <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    nx <span class="pl-k">=</span> <span class="pl-c1">10</span>
    ny <span class="pl-k">=</span> <span class="pl-c1">1</span>
    nz <span class="pl-k">=</span> <span class="pl-c1">1</span>
    b1 <span class="pl-k">=</span> <span class="pl-c1">Bmesh_truss_3D</span>(Lx,nx,Ly,ny,Lz,nz)
    
    <span class="pl-c"><span class="pl-c">#</span> Vertical bmesh with origin in x0=0.0 y0=1.0 and z0=0.0</span>
    <span class="pl-c"><span class="pl-c">#</span></span>
    <span class="pl-c"><span class="pl-c">#</span> []</span>
    <span class="pl-c"><span class="pl-c">#</span> [] </span>
    <span class="pl-c"><span class="pl-c">#</span> [] </span>
    <span class="pl-c"><span class="pl-c">#</span></span>
    <span class="pl-c"><span class="pl-c">#</span></span>
    Lx <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    Ly <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
    Lz <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    nx <span class="pl-k">=</span> <span class="pl-c1">1</span>
    ny <span class="pl-k">=</span> <span class="pl-c1">10</span>
    nz <span class="pl-k">=</span> <span class="pl-c1">1</span>
    b2 <span class="pl-k">=</span> <span class="pl-c1">Bmesh_truss_3D</span>(Lx,nx,Ly,ny,Lz,nz,origin<span class="pl-k">=</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>))

    <span class="pl-c"><span class="pl-c">#</span> Merge into a single Bmesh</span>
    bL <span class="pl-k">=</span> <span class="pl-c1">Merge</span>(b1,b2)
</pre></div>
<p dir="auto">It is possible to export coordinates and connectivities to gmsh</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Gmsh_init(&quot;output.pos&quot;,bL)"><pre><span class="pl-c1">Gmsh_init</span>(<span class="pl-s"><span class="pl-pds">"</span>output.pos<span class="pl-pds">"</span></span>,bL)</pre></div>
</article></div>