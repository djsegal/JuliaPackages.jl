<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-slurmaddallocatedprocs" class="anchor" aria-hidden="true" href="#slurmaddallocatedprocs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SlurmAddAllocatedProcs</h1>
<p dir="auto">A helper package to make adding processes easier when using Slurm's batch mode.
The package <a href="https://github.com/JuliaParallel/ClusterManagers.jl">ClusterManagers.jl</a> provides a function <code>addprocs_slurm</code> that one may use to add workers on a cluster. However to use this, one needs to know the number of tasks to add. A typical workflow would be, for example</p>
<p dir="auto">jobscript:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash
#SBATCH --job-name=julia-demo
#SBATCH --time=00:01:00
#SBATCH -n 4
#SBATCH --nodes 2
#SBATCH --output=log.out
#SBATCH --error=log.err

julia script.jl"><pre><span class="pl-c1">#!/bin/bash</span>
<span class="pl-c1">#SBATCH --job-name=julia-demo</span>
<span class="pl-c1">#SBATCH --time=00:01:00</span>
<span class="pl-c1">#SBATCH -n 4</span>
<span class="pl-c1">#SBATCH --nodes 2</span>
<span class="pl-c1">#SBATCH --output=log.out</span>
<span class="pl-c1">#SBATCH --error=log.err</span>

<span class="pl-c1">julia script.jl</span></pre></div>
<p dir="auto">julia script:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ClusterManagers
ntasks = parse(Int, ENV[&quot;SLURM_NTASKS&quot;])
addprocs_slurm(ntasks)
using Distributed

ids = [@spawnat w Libc.gethostname() for w in workers()]
println.(fetch.(ids))"><pre><span class="pl-k">using</span> ClusterManagers
ntasks <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int, <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>SLURM_NTASKS<span class="pl-pds">"</span></span>])
<span class="pl-c1">addprocs_slurm</span>(ntasks)
<span class="pl-k">using</span> Distributed

ids <span class="pl-k">=</span> [<span class="pl-c1">@spawnat</span> w Libc<span class="pl-k">.</span><span class="pl-c1">gethostname</span>() <span class="pl-k">for</span> w <span class="pl-k">in</span> <span class="pl-c1">workers</span>()]
<span class="pl-c1">println</span>.(<span class="pl-c1">fetch</span>.(ids))</pre></div>
<p dir="auto">The output from running this is</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="connecting to worker 1 out of 4
connecting to worker 2 out of 4
connecting to worker 3 out of 4
connecting to worker 4 out of 4
compute-20-10.local
compute-20-10.local
compute-20-10.local
compute-20-17.local"><pre><span class="pl-c1">connecting to worker 1 out of 4</span>
<span class="pl-c1">connecting to worker 2 out of 4</span>
<span class="pl-c1">connecting to worker 3 out of 4</span>
<span class="pl-c1">connecting to worker 4 out of 4</span>
<span class="pl-c1">compute-20-10.local</span>
<span class="pl-c1">compute-20-10.local</span>
<span class="pl-c1">compute-20-10.local</span>
<span class="pl-c1">compute-20-17.local</span></pre></div>
<p dir="auto">so three workers were added on one node, and one on the other.</p>
<p dir="auto">In this script, we need to infer the number of tasks allocated in the jobscript by parsing the environment variable <code>SLURM_NTASKS</code>. This variable, however, is defined only if the <code>-n</code> option is specified in the jobscript. In general the environment variable that is always defined is <code>SLURM_TASKS_PER_NODE</code>, which is a little harder to parse. This package does exactly this, it parses <code>SLURM_TASKS_PER_NODE</code> and infers the number of tasks to be added. The modified julia script when using this package would be:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SlurmAddAllocatedProcs
addprocs_slurm_allocated()
using Distributed

ids = [@spawnat w Libc.gethostname() for w in workers()]
println.(fetch.(ids))"><pre><span class="pl-k">using</span> SlurmAddAllocatedProcs
<span class="pl-c1">addprocs_slurm_allocated</span>()
<span class="pl-k">using</span> Distributed

ids <span class="pl-k">=</span> [<span class="pl-c1">@spawnat</span> w Libc<span class="pl-k">.</span><span class="pl-c1">gethostname</span>() <span class="pl-k">for</span> w <span class="pl-k">in</span> <span class="pl-c1">workers</span>()]
<span class="pl-c1">println</span>.(<span class="pl-c1">fetch</span>.(ids))</pre></div>
<p dir="auto">Now the number of tasks to be added is automatically inferred from the batch script. This produces the same output:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="connecting to worker 1 out of 4
connecting to worker 2 out of 4
connecting to worker 3 out of 4
connecting to worker 4 out of 4
compute-5-12.local
compute-5-12.local
compute-5-12.local
compute-5-13.local"><pre class="notranslate"><code>connecting to worker 1 out of 4
connecting to worker 2 out of 4
connecting to worker 3 out of 4
connecting to worker 4 out of 4
compute-5-12.local
compute-5-12.local
compute-5-12.local
compute-5-13.local
</code></pre></div>
<p dir="auto">where, as before, three workers are added on one node and one on another.</p>
<p dir="auto">More flags may be specified in the jobscript to fine-tune the workers added, for example:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash
#SBATCH --job-name=julia-demo
#SBATCH --time=00:01:00
#SBATCH -n 4
#SBATCH --nodes 2
#SBATCH --ntasks-per-node 2
#SBATCH --output=log.out
#SBATCH --error=log.err

julia script.jl"><pre><span class="pl-c1">#!/bin/bash</span>
<span class="pl-c1">#SBATCH --job-name=julia-demo</span>
<span class="pl-c1">#SBATCH --time=00:01:00</span>
<span class="pl-c1">#SBATCH -n 4</span>
<span class="pl-c1">#SBATCH --nodes 2</span>
<span class="pl-c1">#SBATCH --ntasks-per-node 2</span>
<span class="pl-c1">#SBATCH --output=log.out</span>
<span class="pl-c1">#SBATCH --error=log.err</span>

<span class="pl-c1">julia script.jl</span></pre></div>
<p dir="auto">which, with the julia script from above, leads to the output</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="connecting to worker 1 out of 4
connecting to worker 2 out of 4
connecting to worker 3 out of 4
connecting to worker 4 out of 4
compute-5-12.local
compute-5-12.local
compute-5-13.local
compute-5-13.local"><pre><span class="pl-c1">connecting to worker 1 out of 4</span>
<span class="pl-c1">connecting to worker 2 out of 4</span>
<span class="pl-c1">connecting to worker 3 out of 4</span>
<span class="pl-c1">connecting to worker 4 out of 4</span>
<span class="pl-c1">compute-5-12.local</span>
<span class="pl-c1">compute-5-12.local</span>
<span class="pl-c1">compute-5-13.local</span>
<span class="pl-c1">compute-5-13.local</span></pre></div>
<p dir="auto">where now two workers are added on each node.</p>
</article></div>