<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content---geoparamsjl-" class="anchor" aria-hidden="true" href="#--geoparamsjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a> <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img src="docs/src/assets/logo.png" alt="GeoParams.jl" width="50" style="max-width: 100%;"></a> GeoParams.jl </h1>
<p dir="auto"><a href="https://juliageodynamics.github.io/GeoParams.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGeodynamics/GeoParams.jl/actions"><img src="https://github.com/JuliaGeodynamics/GeoParams.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Typical geodynamic simulations involve a large number of material parameters and nonlinear constitutive relationships. A large part of the work in writing a new code is benchmarking and debugging the implementation of such material parameters, which involve <em>point-wise</em> calculations that are independent of the discretisation method (finite difference, finite element, finite volume).</p>
<p dir="auto">This package has three main objectives:</p>
<ul dir="auto">
<li>Create a nondimensionalization object, which can be used to transfer dimensional to non-dimensional parameters (helps numerical solvers)</li>
<li>Create an object in which you can specify material parameters employed in the geodynamic simulations</li>
<li>Provide allocation-free computational routines for GPU and CPUs, that can be integrated in solvers, which replaces all point-wise calculations (to compute material parameters or equations of state, for example).</li>
</ul>
<p dir="auto">The material parameter object is designed to be extensible and can be passed on to the solvers, such that new creep laws or features can be readily added. If you use the computational routines we provide, these new features are immediately available in all your codes (finite element, finite difference, AMR codes, etc.).</p>
<p dir="auto">We also implement some typically used creep law parameters, together with tools to plot them versus and compare our results with those of published papers (to minimize mistakes).</p>
<p dir="auto">NOTE: The package remains under development and the API is not yet fully fixed. Therefore feel free to look at it, but be aware that things may still change when you incorporate it into your codes. Comments/ideas/suggestions are highly apprecciated!</p>
<h3 dir="auto"><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contents</h3>
<ul dir="auto">
<li><a href="#1-nondimensionalization">1. Nondimensionalization</a></li>
<li><a href="#2-material-parameters">2. Material parameters</a></li>
<li><a href="#3-plotting-and-output">3. Plotting and output</a></li>
<li><a href="#4-computational-engine">4. Computational engine</a></li>
<li><a href="#5-installation">5. Installation</a></li>
<li><a href="#6-documentation">6. Documentation</a></li>
<li><a href="#7-dependencies">7. Dependencies</a></li>
<li><a href="#8-contributing">8. Contributing</a></li>
<li><a href="#9-funding">9. Funding</a></li>
</ul>
<h3 dir="auto"><a id="user-content-1-nondimensionalization" class="anchor" aria-hidden="true" href="#1-nondimensionalization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1. Nondimensionalization</h3>
<p dir="auto">Typical geodynamic simulations involve dimensions on the order of 10's-1000's of kilometers, and viscosities on the order of ~1e20 Pas. If such values are directly employed in numerical solvers, they may result in roundoff errors. It is therefore common practice to nondimensionalize the input parameters by dividing them by typical values such that the result gives numbers that are closer to one.
This can be done by specifying characteristic values for <code>length</code>, <code>stress</code>, <code>temperature</code> and <code>viscosity</code>. From these <code>basic</code> units all other physical units are derived and input parameters can thus be nondimensionalized accordingly (and dimensionalized again when plotting or saving output).</p>
<p dir="auto">As you learned in physics, the common approach to do this is by using <code>SI</code> units. Yet, as meters and seconds are not so convenient in geodynamics, where we usually deal with lengthscales on the orders of kilometers and timescales in millions of years, we also provide the <code>geo</code> object, which allows to give input parameters in more convenient units.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GeoParams
julia&gt; CharDim = GEO_units(length=1000km, temperature=1000C, stress=10MPa, viscosity=1e20Pas)
Employing GEO units 
Characteristic values: 
         length:      1000 km
         time:        0.3169 Myrs
         stress:      10 MPa
         temperature: 1000.0 °C"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeoParams
julia<span class="pl-k">&gt;</span> CharDim <span class="pl-k">=</span> <span class="pl-c1">GEO_units</span>(length<span class="pl-k">=</span><span class="pl-c1">1000</span>km, temperature<span class="pl-k">=</span><span class="pl-c1">1000</span>C, stress<span class="pl-k">=</span><span class="pl-c1">10</span>MPa, viscosity<span class="pl-k">=</span><span class="pl-c1">1e20</span>Pas)
Employing GEO units 
Characteristic values<span class="pl-k">:</span> 
         length<span class="pl-k">:</span>      <span class="pl-c1">1000</span> km
         time<span class="pl-k">:</span>        <span class="pl-c1">0.3169</span> Myrs
         stress<span class="pl-k">:</span>      <span class="pl-c1">10</span> MPa
         temperature<span class="pl-k">:</span> <span class="pl-c1">1000.0</span> °C</pre></div>
<p dir="auto">You can use 3 <code>types</code>:</p>
<ol dir="auto">
<li><em>GEO</em> units: Units of length in the code are expected to be in kilometers, time is in million of years (Myrs) and stresses are in MPa (1e6 Pa).</li>
<li><em>SI</em> units: all values are in SI units (meters, Pascal, seconds)</li>
<li><em>NONE</em>: all input parameters are in nondimensional units</li>
</ol>
<p dir="auto">Once a <code>CharDim</code> structure is created, you can use the derived parameters, for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; CharDim.strainrate
1.0e-13 s⁻¹"><pre>julia<span class="pl-k">&gt;</span> CharDim<span class="pl-k">.</span>strainrate
<span class="pl-c1">1.0e-13</span> s⁻¹</pre></div>
<p dir="auto">You can also non-dimensionalize parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A    =   6.3e-2MPa^-3.05*s^-1
0.063 MPa⁻³·⁰⁵ s⁻¹
julia&gt; A_ND =   nondimensionalize(A, CharDim);"><pre>julia<span class="pl-k">&gt;</span> A    <span class="pl-k">=</span>   <span class="pl-c1">6.3e-2</span>MPa<span class="pl-k">^-</span><span class="pl-c1">3.05</span><span class="pl-k">*</span>s<span class="pl-k">^-</span><span class="pl-c1">1</span>
<span class="pl-c1">0.063</span> MPa⁻³·⁰⁵ s⁻¹
julia<span class="pl-k">&gt;</span> A_ND <span class="pl-k">=</span>   <span class="pl-c1">nondimensionalize</span>(A, CharDim);</pre></div>
<p dir="auto">or convert them to different units:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; uconvert(Pa^-3.05*s^-1, A)
3.157479571851836e-20 Pa⁻³·⁰⁵ s⁻¹"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">uconvert</span>(Pa<span class="pl-k">^-</span><span class="pl-c1">3.05</span><span class="pl-k">*</span>s<span class="pl-k">^-</span><span class="pl-c1">1</span>, A)
<span class="pl-c1">3.157479571851836e-20</span> Pa⁻³·⁰⁵ s⁻¹</pre></div>
<h3 dir="auto"><a id="user-content-2-material-parameters" class="anchor" aria-hidden="true" href="#2-material-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2. Material parameters</h3>
<p dir="auto">All geodynamic simulations require specifying material parameters, such as (nonlinear) viscous constitutive relationships or an equation of state. These parameters are usually specified per <code>phase</code>. Here, we provide a framework that simplifies doing that. Thanks to the flexibility of julia, we can actually directly embed the function that does the computations in the structure itself, which makes it straightforward to extend it and add new creep laws (which can directly be used in the solvers).</p>
<p dir="auto">Some examples of where this is used:</p>
<h4 dir="auto"><a id="user-content-21-constant-density-constant-linear-viscosity" class="anchor" aria-hidden="true" href="#21-constant-density-constant-linear-viscosity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2.1 Constant density, constant linear viscosity</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; MatParam = SetMaterialParams(Name=&quot;Viscous Matrix&quot;, Phase=2,
                                     Density   = ConstantDensity(),
                                     CreepLaws = LinearViscous(η=1e23Pa*s))
Phase 2 : Viscous Matrix
        | [dimensional units]
        | 
        |-- Density           : Constant density: ρ=2900 kg m⁻³ 
        |-- Gravity           : Gravitational acceleration: g=9.81 m s⁻² 
        |-- CreepLaws         : Linear viscosity: η=1.0e23 Pa s "><pre>julia<span class="pl-k">&gt;</span> MatParam <span class="pl-k">=</span> <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Matrix<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">2</span>,
                                     Density   <span class="pl-k">=</span> <span class="pl-c1">ConstantDensity</span>(),
                                     CreepLaws <span class="pl-k">=</span> <span class="pl-c1">LinearViscous</span>(η<span class="pl-k">=</span><span class="pl-c1">1e23</span>Pa<span class="pl-k">*</span>s))
Phase <span class="pl-c1">2</span> <span class="pl-k">:</span> Viscous Matrix
        <span class="pl-k">|</span> [dimensional units]
        <span class="pl-k">|</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Density           <span class="pl-k">:</span> Constant density<span class="pl-k">:</span> ρ<span class="pl-k">=</span><span class="pl-c1">2900</span> kg m⁻³ 
        <span class="pl-k">|</span><span class="pl-k">--</span> Gravity           <span class="pl-k">:</span> Gravitational acceleration<span class="pl-k">:</span> g<span class="pl-k">=</span><span class="pl-c1">9.81</span> m s⁻² 
        <span class="pl-k">|</span><span class="pl-k">--</span> CreepLaws         <span class="pl-k">:</span> Linear viscosity<span class="pl-k">:</span> η<span class="pl-k">=</span><span class="pl-c1">1.0e23</span> Pa s </pre></div>
<p dir="auto">The same but with non-dimensionalization of all parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; CharDim = GEO_units(length=1000km, temperature=1000C, stress=10MPa, viscosity=1e20Pas);
julia&gt; MatParam = SetMaterialParams(Name=&quot;Viscous Matrix&quot;, Phase=2, 
                                     Density   = ConstantDensity(),
                                     CreepLaws = LinearViscous(η=1e23Pa*s), CharDim=CharDim)
Phase 2 : Viscous Matrix
        | [non-dimensional units]
        | 
        |-- Density           : Constant density: ρ=2.8999999999999996e-18 
        |-- Gravity           : Gravitational acceleration: g=9.81e20 
        |-- CreepLaws         : Linear viscosity: η=999.9999999999998 "><pre>julia<span class="pl-k">&gt;</span> CharDim <span class="pl-k">=</span> <span class="pl-c1">GEO_units</span>(length<span class="pl-k">=</span><span class="pl-c1">1000</span>km, temperature<span class="pl-k">=</span><span class="pl-c1">1000</span>C, stress<span class="pl-k">=</span><span class="pl-c1">10</span>MPa, viscosity<span class="pl-k">=</span><span class="pl-c1">1e20</span>Pas);
julia<span class="pl-k">&gt;</span> MatParam <span class="pl-k">=</span> <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Matrix<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">2</span>, 
                                     Density   <span class="pl-k">=</span> <span class="pl-c1">ConstantDensity</span>(),
                                     CreepLaws <span class="pl-k">=</span> <span class="pl-c1">LinearViscous</span>(η<span class="pl-k">=</span><span class="pl-c1">1e23</span>Pa<span class="pl-k">*</span>s), CharDim<span class="pl-k">=</span>CharDim)
Phase <span class="pl-c1">2</span> <span class="pl-k">:</span> Viscous Matrix
        <span class="pl-k">|</span> [non<span class="pl-k">-</span>dimensional units]
        <span class="pl-k">|</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Density           <span class="pl-k">:</span> Constant density<span class="pl-k">:</span> ρ<span class="pl-k">=</span><span class="pl-c1">2.8999999999999996e-18</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Gravity           <span class="pl-k">:</span> Gravitational acceleration<span class="pl-k">:</span> g<span class="pl-k">=</span><span class="pl-c1">9.81e20</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> CreepLaws         <span class="pl-k">:</span> Linear viscosity<span class="pl-k">:</span> η<span class="pl-k">=</span><span class="pl-c1">999.9999999999998</span> </pre></div>
<p dir="auto">You can define a tuple with phase information like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; CharDim      = GEO_units(length=1000km, temperature=1000C, stress=10MPa, viscosity=1e20Pas);
julia&gt; MatParam     = ( SetMaterialParams(Name=&quot;Viscous Matrix&quot;, Phase=1, 
                                     Density   = ConstantDensity(),
                                     CreepLaws = LinearViscous(η=1e23Pa*s), CharDim=CharDim),
                        SetMaterialParams(Name=&quot;Viscous Sinker&quot;, Phase=2, 
                                     Density   = PT_Density(),
                                     CreepLaws = LinearViscous(η=1e21Pa*s), CharDim=CharDim)
                        );
julia&gt; MatParam
Phase 1 : Viscous Matrix
        | [non-dimensional units]
        | 
        |-- Density           : Constant density: ρ=2.8999999999999996e-18 
        |-- Gravity           : Gravitational acceleration: g=9.81e20 
        |-- CreepLaws         : Linear viscosity: η=999.9999999999998 
Phase 2 : Viscous Sinker
        | [non-dimensional units]
        | 
        |-- Density           : P/T-dependent density: ρ0=2.8999999999999996e-18, α=0.038194500000000006, β=0.01, T0=0.21454659702313156, P0=0.0 
        |-- Gravity           : Gravitational acceleration: g=9.81e20 
        |-- CreepLaws         : Linear viscosity: η=9.999999999999998                              "><pre>julia<span class="pl-k">&gt;</span> CharDim      <span class="pl-k">=</span> <span class="pl-c1">GEO_units</span>(length<span class="pl-k">=</span><span class="pl-c1">1000</span>km, temperature<span class="pl-k">=</span><span class="pl-c1">1000</span>C, stress<span class="pl-k">=</span><span class="pl-c1">10</span>MPa, viscosity<span class="pl-k">=</span><span class="pl-c1">1e20</span>Pas);
julia<span class="pl-k">&gt;</span> MatParam     <span class="pl-k">=</span> ( <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Matrix<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">1</span>, 
                                     Density   <span class="pl-k">=</span> <span class="pl-c1">ConstantDensity</span>(),
                                     CreepLaws <span class="pl-k">=</span> <span class="pl-c1">LinearViscous</span>(η<span class="pl-k">=</span><span class="pl-c1">1e23</span>Pa<span class="pl-k">*</span>s), CharDim<span class="pl-k">=</span>CharDim),
                        <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Sinker<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">2</span>, 
                                     Density   <span class="pl-k">=</span> <span class="pl-c1">PT_Density</span>(),
                                     CreepLaws <span class="pl-k">=</span> <span class="pl-c1">LinearViscous</span>(η<span class="pl-k">=</span><span class="pl-c1">1e21</span>Pa<span class="pl-k">*</span>s), CharDim<span class="pl-k">=</span>CharDim)
                        );
julia<span class="pl-k">&gt;</span> MatParam
Phase <span class="pl-c1">1</span> <span class="pl-k">:</span> Viscous Matrix
        <span class="pl-k">|</span> [non<span class="pl-k">-</span>dimensional units]
        <span class="pl-k">|</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Density           <span class="pl-k">:</span> Constant density<span class="pl-k">:</span> ρ<span class="pl-k">=</span><span class="pl-c1">2.8999999999999996e-18</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Gravity           <span class="pl-k">:</span> Gravitational acceleration<span class="pl-k">:</span> g<span class="pl-k">=</span><span class="pl-c1">9.81e20</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> CreepLaws         <span class="pl-k">:</span> Linear viscosity<span class="pl-k">:</span> η<span class="pl-k">=</span><span class="pl-c1">999.9999999999998</span> 
Phase <span class="pl-c1">2</span> <span class="pl-k">:</span> Viscous Sinker
        <span class="pl-k">|</span> [non<span class="pl-k">-</span>dimensional units]
        <span class="pl-k">|</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Density           <span class="pl-k">:</span> P<span class="pl-k">/</span>T<span class="pl-k">-</span>dependent density<span class="pl-k">:</span> ρ0<span class="pl-k">=</span><span class="pl-c1">2.8999999999999996e-18</span>, α<span class="pl-k">=</span><span class="pl-c1">0.038194500000000006</span>, β<span class="pl-k">=</span><span class="pl-c1">0.01</span>, T0<span class="pl-k">=</span><span class="pl-c1">0.21454659702313156</span>, P0<span class="pl-k">=</span><span class="pl-c1">0.0</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Gravity           <span class="pl-k">:</span> Gravitational acceleration<span class="pl-k">:</span> g<span class="pl-k">=</span><span class="pl-c1">9.81e20</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> CreepLaws         <span class="pl-k">:</span> Linear viscosity<span class="pl-k">:</span> η<span class="pl-k">=</span><span class="pl-c1">9.999999999999998</span>                              </pre></div>
<h4 dir="auto"><a id="user-content-22-nonlinear-creep-laws" class="anchor" aria-hidden="true" href="#22-nonlinear-creep-laws"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2.2 Nonlinear creep laws</h4>
<p dir="auto">You can add pre-defined non-linear creep laws as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Phase = SetMaterialParams(Name=&quot;Viscous Matrix&quot;, Phase=2, 
                                                  Density   = ConstantDensity(),
                                                  CreepLaws = (SetDislocationCreep(&quot;Wet Olivine | Hirth &amp; Kohlstedt (2003)&quot;),
                                                              LinearViscous(η=1e23Pa*s)) )
Phase 2 : Viscous Matrix
        | [dimensional units]
        | 
        |-- Density           : Constant density: ρ=2900.0 kg m⁻³·⁰ 
        |-- Gravity           : Gravitational acceleration: g=9.81 m s⁻²·⁰ 
        |-- CreepLaws         : DislocationCreep: Name = Wet Olivine | Hirth &amp; Kohlstedt (2003), n=3.5, r=1.2, A=90.0, E=480.0, V=1.1e-5, Apparatus=1 
        |                       Linear viscosity: η=1.0e23 "><pre>julia<span class="pl-k">&gt;</span> Phase <span class="pl-k">=</span> <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Matrix<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">2</span>, 
                                                  Density   <span class="pl-k">=</span> <span class="pl-c1">ConstantDensity</span>(),
                                                  CreepLaws <span class="pl-k">=</span> (<span class="pl-c1">SetDislocationCreep</span>(<span class="pl-s"><span class="pl-pds">"</span>Wet Olivine | Hirth &amp; Kohlstedt (2003)<span class="pl-pds">"</span></span>),
                                                              <span class="pl-c1">LinearViscous</span>(η<span class="pl-k">=</span><span class="pl-c1">1e23</span>Pa<span class="pl-k">*</span>s)) )
Phase <span class="pl-c1">2</span> <span class="pl-k">:</span> Viscous Matrix
        <span class="pl-k">|</span> [dimensional units]
        <span class="pl-k">|</span> 
        <span class="pl-k">|</span><span class="pl-k">--</span> Density           <span class="pl-k">:</span> Constant density<span class="pl-k">:</span> ρ<span class="pl-k">=</span><span class="pl-c1">2900.0</span> kg m⁻³·⁰ 
        <span class="pl-k">|</span><span class="pl-k">--</span> Gravity           <span class="pl-k">:</span> Gravitational acceleration<span class="pl-k">:</span> g<span class="pl-k">=</span><span class="pl-c1">9.81</span> m s⁻²·⁰ 
        <span class="pl-k">|</span><span class="pl-k">--</span> CreepLaws         <span class="pl-k">:</span> DislocationCreep<span class="pl-k">:</span> Name <span class="pl-k">=</span> Wet Olivine <span class="pl-k">|</span> Hirth <span class="pl-k">&amp;</span> Kohlstedt (<span class="pl-c1">2003</span>), n<span class="pl-k">=</span><span class="pl-c1">3.5</span>, r<span class="pl-k">=</span><span class="pl-c1">1.2</span>, A<span class="pl-k">=</span><span class="pl-c1">90.0</span>, E<span class="pl-k">=</span><span class="pl-c1">480.0</span>, V<span class="pl-k">=</span><span class="pl-c1">1.1e-5</span>, Apparatus<span class="pl-k">=</span><span class="pl-c1">1</span> 
        <span class="pl-k">|</span>                       Linear viscosity<span class="pl-k">:</span> η<span class="pl-k">=</span><span class="pl-c1">1.0e23</span> </pre></div>
<p dir="auto">Note that the dictionary <code>DislocationCreep_info</code> has all pre-defined creep laws, so for an overview type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; DislocationCreep_info
Dict{String, DislocationCreep} with 2 entries:
  &quot;Dry Olivine | Hirth &amp; Kohlstedt (2003)&quot; =&gt; DislocationCreep: n=3.05, r=0, A=110000.0 MPa⁻³·⁰⁵ s⁻¹, E…
  &quot;Wet Olivine | Hirth &amp; Kohlstedt (2003)&quot; =&gt; DislocationCreep: n=3.5, r=1.2, A=90 MPa⁻³·⁵ s⁻¹, E=480 k…"><pre>julia<span class="pl-k">&gt;</span> DislocationCreep_info
Dict{String, DislocationCreep} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>Dry Olivine | Hirth &amp; Kohlstedt (2003)<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> DislocationCreep<span class="pl-k">:</span> n<span class="pl-k">=</span><span class="pl-c1">3.05</span>, r<span class="pl-k">=</span><span class="pl-c1">0</span>, A<span class="pl-k">=</span><span class="pl-c1">110000.0</span> MPa⁻³·⁰⁵ s⁻¹, E…
  <span class="pl-s"><span class="pl-pds">"</span>Wet Olivine | Hirth &amp; Kohlstedt (2003)<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> DislocationCreep<span class="pl-k">:</span> n<span class="pl-k">=</span><span class="pl-c1">3.5</span>, r<span class="pl-k">=</span><span class="pl-c1">1.2</span>, A<span class="pl-k">=</span><span class="pl-c1">90</span> MPa⁻³·⁵ s⁻¹, E<span class="pl-k">=</span><span class="pl-c1">480</span> k…</pre></div>
<h3 dir="auto"><a id="user-content-3-plotting-and-output" class="anchor" aria-hidden="true" href="#3-plotting-and-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3. Plotting and output</h3>
<p dir="auto">A typical geodynamic simulation involves a lot of parameters. Creating data tables for scientific publications that describe all parameters employed is usually done by hand (and no-one really likes doing that). In our experience a lot of errors happen while doing this, either because the units are mixed up (some creep laws have weird units like MPa^{-n}), or because some parameters are forgotten. To help with this, we provide number of functions that</p>
<ol dir="auto">
<li>Simplify creating plots in the same manner as in many publications that report the laboratory experiments used to create the creep laws. In that way, they can be directly compared to the original results. You can also create publication-ready figures.</li>
<li>Provide tools to automatically generate data tables from the input parameters. This saves time and minimizes errors.</li>
</ol>
<h4 dir="auto"><a id="user-content-31-plotting" class="anchor" aria-hidden="true" href="#31-plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3.1 Plotting</h4>
<p dir="auto">A few simple functions are provided to plot various parameters.
For example, in order to plot a melting parameterisation, do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GeoParams, Plots
Adding plotting routines of GeoParams
julia&gt; p=MeltingParam_4thOrder();
julia&gt; PlotMeltFraction(p);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeoParams, Plots
Adding plotting routines of GeoParams
julia<span class="pl-k">&gt;</span> p<span class="pl-k">=</span><span class="pl-c1">MeltingParam_4thOrder</span>();
julia<span class="pl-k">&gt;</span> <span class="pl-c1">PlotMeltFraction</span>(p);</pre></div>
<h4 dir="auto"><a id="user-content-32-automatically-create-data-tables" class="anchor" aria-hidden="true" href="#32-automatically-create-data-tables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3.2 Automatically create data tables</h4>
<p dir="auto">When writing scientific papers that describes numerical modelling results, it is usually necessary to include tables that lists all model parameters employed. Doing this is error-prone and usually not a very interesting job to do.
That is why we provide routines that fully automatize this process:
First, we need to define a phase.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; MatParam = (SetMaterialParams(Name=&quot;Viscous Matrix&quot;, Phase=1, Density=ConstantDensity(),CreepLaws = SetDislocationCreep(&quot;Quartz Diorite | Hansen &amp; Carter (1982)&quot;)),
                   SetMaterialParams(Name=&quot;Viscous Sinker&quot;, Phase=2, Density= PT_Density(),CreepLaws = LinearViscous(η=1e21Pa*s)),
                   SetMaterialParams(Name=&quot;Viscous Bottom&quot;, Phase=3, Density= PT_Density(),CreepLaws = SetDislocationCreep(&quot;Diabase | Caristan (1982)&quot;)))"><pre>julia<span class="pl-k">&gt;</span> MatParam <span class="pl-k">=</span> (<span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Matrix<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">1</span>, Density<span class="pl-k">=</span><span class="pl-c1">ConstantDensity</span>(),CreepLaws <span class="pl-k">=</span> <span class="pl-c1">SetDislocationCreep</span>(<span class="pl-s"><span class="pl-pds">"</span>Quartz Diorite | Hansen &amp; Carter (1982)<span class="pl-pds">"</span></span>)),
                   <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Sinker<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">2</span>, Density<span class="pl-k">=</span> <span class="pl-c1">PT_Density</span>(),CreepLaws <span class="pl-k">=</span> <span class="pl-c1">LinearViscous</span>(η<span class="pl-k">=</span><span class="pl-c1">1e21</span>Pa<span class="pl-k">*</span>s)),
                   <span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Viscous Bottom<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">3</span>, Density<span class="pl-k">=</span> <span class="pl-c1">PT_Density</span>(),CreepLaws <span class="pl-k">=</span> <span class="pl-c1">SetDislocationCreep</span>(<span class="pl-s"><span class="pl-pds">"</span>Diabase | Caristan (1982)<span class="pl-pds">"</span></span>)))</pre></div>
<p dir="auto">Next, you can create a LaTeX table for the defined phase ...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ParameterTable(MatParam, filename=&quot;ParameterTable&quot;, format=&quot;latex&quot;, rdigits=3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ParameterTable</span>(MatParam, filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ParameterTable<span class="pl-pds">"</span></span>, format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>latex<span class="pl-pds">"</span></span>, rdigits<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">or a Markdown table.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ParameterTable(MatParam, filename=&quot;ParameterTable&quot;, format=&quot;markdown&quot;, rdigits=3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ParameterTable</span>(MatParam, filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ParameterTable<span class="pl-pds">"</span></span>, format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>markdown<span class="pl-pds">"</span></span>, rdigits<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<h3 dir="auto"><a id="user-content-4-computational-engine" class="anchor" aria-hidden="true" href="#4-computational-engine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>4. Computational engine</h3>
<p dir="auto">Once you have implemented a parameter in <code>GeoParams</code>, we provide allocation-free computational routines which can be called within your solver in the following manner:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="args= (;T=Arrays.T_K, P=Arrays.P)
compute_density!(Rho, MatParam, Phases, args)"><pre>args<span class="pl-k">=</span> (;T<span class="pl-k">=</span>Arrays<span class="pl-k">.</span>T_K, P<span class="pl-k">=</span>Arrays<span class="pl-k">.</span>P)
<span class="pl-c1">compute_density!</span>(Rho, MatParam, Phases, args)</pre></div>
<p dir="auto">Here <code>Rho</code> is an array with densities, <code>MatParam</code> a tuple with material parameters as explained in <a href="#2-material-parameters">section #2</a>, <code>Phases</code> an array with integers which indicates which phase is present at every point, and <code>args</code> contains arguments to compute density (here: temperature and pressure). This computational routine works on the CPU, but also on the GPU (in combination with <a href="https://github.com/omlins/ParallelStencil.jl">ParallelStencil.jl</a>).
Using a constant density, for example, can be specified with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MatParam = (SetMaterialParams(Name=&quot;Crust&quot;, Phase=0, 
                Density   = ConstantDensity(ρ=2900kg/m^3)),) "><pre>MatParam <span class="pl-k">=</span> (<span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Crust<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">0</span>, 
                Density   <span class="pl-k">=</span> <span class="pl-c1">ConstantDensity</span>(ρ<span class="pl-k">=</span><span class="pl-c1">2900</span>kg<span class="pl-k">/</span>m<span class="pl-k">^</span><span class="pl-c1">3</span>)),) </pre></div>
<p dir="auto">Using a density that employs a phase diagram (which depends on pressure and temperature) can be invoked with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MatParam = (SetMaterialParams(Name=&quot;Mantle&quot;, Phase=0, 
                Density   = PerpleX_LaMEM_Diagram(&quot;test_data/Peridotite.in&quot;), );"><pre>MatParam <span class="pl-k">=</span> (<span class="pl-c1">SetMaterialParams</span>(Name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mantle<span class="pl-pds">"</span></span>, Phase<span class="pl-k">=</span><span class="pl-c1">0</span>, 
                Density   <span class="pl-k">=</span> <span class="pl-c1">PerpleX_LaMEM_Diagram</span>(<span class="pl-s"><span class="pl-pds">"</span>test_data/Peridotite.in<span class="pl-pds">"</span></span>), );</pre></div>
<p dir="auto">Importantly, you <em>do not have to change your code</em> if you want to use a new density parameterisation, as implementing this in <code>GeoParams</code> is sufficient.
This makes it easy to use identical material parameters in a range of codes and eliminates the risk for making mistakes. It also saves a substantial amount of time in developing new codes as, in our experience, much of the debugging time is devoted to fixing bugs in the material parameters.</p>
<h3 dir="auto"><a id="user-content-5-installation" class="anchor" aria-hidden="true" href="#5-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>5. Installation</h3>
<p dir="auto">You can install this package by specifying</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add GeoParams"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add GeoParams</pre></div>
<p dir="auto">and test whether it works with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; test GeoParams"><pre class="notranslate"><code>pkg&gt; test GeoParams
</code></pre></div>
<h3 dir="auto"><a id="user-content-6-documentation" class="anchor" aria-hidden="true" href="#6-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>6. Documentation</h3>
<p dir="auto">The online documentation can be accessed <a href="https://juliageodynamics.github.io/GeoParams.jl/dev/" rel="nofollow">here</a> or by clicking the blue button at the top of this page.</p>
<p dir="auto">Sometimes it is also helpful to have a look at how we call routines in the <a href="https://github.com/JuliaGeodynamics/GeoParams.jl/tree/main/test">test</a> directory.</p>
<h3 dir="auto"><a id="user-content-7-dependencies" class="anchor" aria-hidden="true" href="#7-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>7. Dependencies</h3>
<p dir="auto">The key packages we rely on:</p>
<ul dir="auto">
<li><a href="https://github.com/PainterQubits/Unitful.jl">Unitful.jl</a> to deal with SI units</li>
<li><a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a> to have structures that are easier to modify</li>
<li><a href="https://github.com/stevengj/LaTeXStrings.jl">LaTeXStrings.jl</a> to be able to add equations to the structures that describe the employed material laws</li>
</ul>
<h3 dir="auto"><a id="user-content-8-contributing" class="anchor" aria-hidden="true" href="#8-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>8. Contributing</h3>
<p dir="auto">Help with developing this package is highly appreciated. You can contribute for example by adding new creep laws or by adding new constitutive relationships. If you invest a bit of time now, it will save others in the community a lot of time!
The simplest way to do this is by cloning the repository, and creating a new branch for your feature. Once you are happy with what you added (and after you added a test to ensure that it will keep working with future changes), create a pull request and we will evaluate &amp; merge it.</p>
<h3 dir="auto"><a id="user-content-9-funding" class="anchor" aria-hidden="true" href="#9-funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>9. Funding</h3>
<p dir="auto">The development of this package was supported by the European Research Council (ERC CoG #771143 MAGMA).</p>
</article></div>