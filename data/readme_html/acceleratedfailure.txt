<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-acceleratedfailure" class="anchor" aria-hidden="true" href="#acceleratedfailure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AcceleratedFailure</h1>
<p><a href="https://travis-ci.org/piever/Survival.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d539f1f4bafc60722a8d871d3c1d7d3199817db1/68747470733a2f2f7472617669732d63692e6f72672f7069657665722f416363656c6572617465644661696c7572652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/piever/AcceleratedFailure.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/piever/AcceleratedFailure.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/66a49e3278a34346acc91faba8c99b90ca783e41/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7069657665722f537572766976616c2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/piever/Survival.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/piever/AcceleratedFailure.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6fc7f45e7d6da1a2ec8b566117904e8943888a64/687474703a2f2f636f6465636f762e696f2f6769746875622f7069657665722f537572766976616c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/piever/Survival.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-important-notice" class="anchor" aria-hidden="true" href="#important-notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Important notice</h2>
<p>I am porting the functionality of this repository into <a href="https://github.com/ararslan/Survival.jl">Survival</a>. This package should still be usable (under the name AcceleratedFailure, to avoid name conflicts): I will officially deprecate it when all the functionality has been ported.</p>
<h2><a id="user-content-setting-up" class="anchor" aria-hidden="true" href="#setting-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setting up</h2>
<p>To install the package, simply run</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/piever/AcceleratedFailure.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p>in the Julia REPL.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic usage:</h2>
<p>Load relevant packages:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AcceleratedFailure
<span class="pl-k">using</span> DataFrames</pre></div>
<p>Load dataset and create event column. Event.time is time, whereas Event.censored is true if the data is censored and false otherwise.</p>
<div class="highlight highlight-source-julia"><pre>filepath <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>AcceleratedFailure<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>rossi.csv<span class="pl-pds">"</span></span>)
rossi <span class="pl-k">=</span> <span class="pl-c1">readtable</span>(filepath)
rossi[<span class="pl-c1">:event</span>] <span class="pl-k">=</span> <span class="pl-c1">Event</span>.(rossi[<span class="pl-c1">:week</span>], rossi[<span class="pl-c1">:arrest</span>]<span class="pl-k">.</span><span class="pl-k">==</span> <span class="pl-c1">0</span>)</pre></div>
<p>Run Cox regression</p>
<div class="highlight highlight-source-julia"><pre>outcome <span class="pl-k">=</span> <span class="pl-c1">coxph</span>(<span class="pl-c1">@formula</span>(event <span class="pl-k">~</span> fin<span class="pl-k">+</span>age<span class="pl-k">+</span>race<span class="pl-k">+</span>wexp<span class="pl-k">+</span>mar<span class="pl-k">+</span>paro<span class="pl-k">+</span>prio),rossi)</pre></div>
<p>And you should get this outcome (computed with Efron method for ties):</p>
<pre><code>Model: Cox; Formula: event ~ fin + age + race + wexp + mar + paro + prio

        Estimate Std.Error   z value Pr(&gt;|z|)
fin    -0.378636  0.191352  -1.97874   0.0478
age   -0.0570578 0.0219674  -2.59738   0.0094
race    0.314349  0.308045   1.02046   0.3075
wexp   -0.152399  0.212026 -0.718774   0.4723
mar    -0.431883  0.381726   -1.1314   0.2579
paro  -0.0850866  0.195743 -0.434686   0.6638
prio   0.0907363 0.0286157   3.17086   0.0015
</code></pre>
<p>This package also includes Kaplan Meier estimator of the survival function, which takes a vector of events as input:</p>
<div class="highlight highlight-source-julia"><pre>x,surv <span class="pl-k">=</span> <span class="pl-c1">kaplan_meier</span>(rossi[<span class="pl-c1">:event</span>])</pre></div>
<p>In the output <code>x</code> will be the array with the times of death, <code>surv</code> the estimated cdf.</p>
<p>To visualize it (using Plots.jl) you can simply type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(x,surv, line <span class="pl-k">=</span> <span class="pl-c1">:step</span>)</pre></div>
<p>Nelson Aalen estimator for the cumulative hazard:</p>
<div class="highlight highlight-source-julia"><pre>x, chaz <span class="pl-k">=</span> <span class="pl-c1">nelson_aalen</span>(rossi[<span class="pl-c1">:event</span>])</pre></div>
<p>To check that everything went well, you may want to verify that <code>cumulative = 1 - exp.(-chaz)</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(x,surv, line <span class="pl-k">=</span> <span class="pl-c1">:step</span>)
<span class="pl-c1">plot!</span>(x,<span class="pl-c1">exp</span>.(<span class="pl-k">-</span>chaz), line <span class="pl-k">=</span> <span class="pl-c1">:step</span>)</pre></div>
<p>You can also get the baseline cumulative hazard from the outcome of a Cox regression:</p>
<div class="highlight highlight-source-julia"><pre>x, chaz <span class="pl-k">=</span> <span class="pl-c1">nelson_aalen</span>(outcome)</pre></div>
<p>In turn, it's always possible to get the cdf from the cumulative hazard:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">chaz2cdf</span>(x,chaz)</pre></div>
<p>and the same is true for the hazard:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">chaz2haz</span>(x,chaz)
<span class="pl-c1">chaz2haz</span>(x,chaz, bw)
</pre></div>
<p>where, in the second case, <code>bw</code> is a parameter used for smoothing.</p>
<h2><a id="user-content-accelerated-failure-time-models" class="anchor" aria-hidden="true" href="#accelerated-failure-time-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accelerated Failure Time models</h2>
<p>This package also supports <a href="https://en.wikipedia.org/wiki/Accelerated_failure_time_model" rel="nofollow">accelerated failure time models</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> AcceleratedFailure</pre></div>
<p>Let's generate a fake dataset:</p>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">50000</span>
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N)
y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N)
z <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N)
t1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>.(<span class="pl-c1">Gamma</span>.(<span class="pl-c1">10</span>,<span class="pl-c1">exp</span>.(x<span class="pl-k">-</span><span class="pl-c1">0.3</span>y)))
t2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Gamma</span>(<span class="pl-c1">15</span>,<span class="pl-c1">1</span>),N)
W <span class="pl-k">=</span> [(t2[i]<span class="pl-k">&gt;</span>t1[i]) ? <span class="pl-c1">Event</span>(t1[i], <span class="pl-c1">false</span>) : <span class="pl-c1">Event</span>(t2[i], <span class="pl-c1">true</span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N]
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(x <span class="pl-k">=</span> x, y <span class="pl-k">=</span> y, z <span class="pl-k">=</span> z, a <span class="pl-k">=</span> W)</pre></div>
<p>Let's specify the formula and distribution (only <code>PGamma</code> is implemented so far, where <code>PGamma(params) = Gamma(exp(params[1]),exp(-params[1]))</code>):</p>
<div class="highlight highlight-source-julia"><pre>res <span class="pl-k">=</span> <span class="pl-c1">aft</span>(<span class="pl-c1">@formula</span>(a <span class="pl-k">~</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> x <span class="pl-k">+</span>y <span class="pl-k">+</span> x<span class="pl-k">*</span>y<span class="pl-k">+</span> z), df, <span class="pl-c1">PGamma</span>(); tol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
<p>The outcome should look something like this:</p>
<pre><code>Model: Accelerated Failure Time, dist = AcceleratedFailure.PGamma(params=[2.30856]);
Formula: a ~ 1 + x + y + x * y + z

                 Estimate  Std.Error   z value Pr(&gt;|z|)
params1           2.30856 0.00754425   306.003   &lt;1e-99
(Intercept)       2.30315 0.00205682   1119.76   &lt;1e-99
x                0.999012 0.00226804   440.474   &lt;1e-99
y               -0.295107 0.00200584  -147.124   &lt;1e-99
z            -0.000542461 0.00168103 -0.322695   0.7469
x &amp; y         -0.00222899 0.00215507   -1.0343   0.3010
</code></pre>
<p>The first coefficient is the parameter of the distribution (in this case the parameter of <code>PGamma</code> is the log of the shape paramete of the corresponding <code>Gamma</code> distribution). The remaining coefficients are the log of the contribution to the mean of the various covariates.</p>
<h2><a id="user-content-using-dataframes" class="anchor" aria-hidden="true" href="#using-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using DataFrames</h2>
<p><code>nelson_aalen</code>, <code>kaplan_meier</code>, Cox regression and accelerated failure time models can be used with Nullable Arrays. The rows missing relevant data will be discarded.</p>
</article></div>