<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-netdecopfjl" class="anchor" aria-hidden="true" href="#netdecopfjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NetDecOPF.jl</h1>
<p dir="auto"><a href="https://github.com/Argonne-National-Laboratory/NetDecOPF.jl/actions/workflows/test.yml"><img src="https://github.com/Argonne-National-Laboratory/NetDecOPF.jl/actions/workflows/test.yml/badge.svg" alt="Run tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Argonne-National-Laboratory/NetDecOPF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/40295a6ecff3920f9694866b3f5b0ca8b16ed6ecc76ac03e2bbf7e9f1155f9bf/68747470733a2f2f636f6465636f762e696f2f67682f4172676f6e6e652d4e6174696f6e616c2d4c61626f7261746f72792f4e65744465634f50462e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4e42534f585053303644" alt="codecov" data-canonical-src="https://codecov.io/gh/Argonne-National-Laboratory/NetDecOPF.jl/branch/master/graph/badge.svg?token=NBSOXPS06D" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/285039510" rel="nofollow"><img src="https://camo.githubusercontent.com/576a2e7e6055f45a06c07260599c07363ff03868bf405e089981355658f59bb7/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3238353033393531302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/285039510.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements a network decomposition formulation to solve large-scale optimization problems over power networks, e.g. ACOPF, OTS etc.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package can be installed by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add NetDecOPF"><pre>] add NetDecOPF</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">This package interfaces with power system data generated from <a href="https://github.com/lanl-ansi/PowerModels.jl">PowerModels.jl</a>. Given the directory <code>file</code> to a power system data file</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using NecDecOPF, PowerModels

julia&gt; file = &quot;../examples/case5.m&quot;;

julia&gt; data = parse_file(file);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NecDecOPF, PowerModels

julia<span class="pl-k">&gt;</span> file <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>../examples/case5.m<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">parse_file</span>(file);</pre></div>
<p dir="auto">A graph partition of the power system network is needed for the network decomposition. This package provides a function to generate partitions using METIS:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; partitions = metis_cluster(data, 2);
2-element Array{Array{Int64,1},1}:
 [2, 3, 4]
 [1, 5]"><pre>julia<span class="pl-k">&gt;</span> partitions <span class="pl-k">=</span> <span class="pl-c1">metis_cluster</span>(data, <span class="pl-c1">2</span>);
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Array{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">5</span>]</pre></div>
<p dir="auto">Alternatively, users can define custom partition to the network in the format of <code>Array</code> of <code>Array</code>s, where each <code>Array</code> collects all nodes of one partition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; partitions = [[2, 3], [1, 4, 5]]
2-element Array{Array{Int64,1},1}:
 [2, 3, 4]
 [1, 5]"><pre>julia<span class="pl-k">&gt;</span> partitions <span class="pl-k">=</span> [[<span class="pl-c1">2</span>, <span class="pl-c1">3</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Array{Int64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">5</span>]</pre></div>
<p dir="auto">Now we are ready to call the <code>decompose</code> function to generated network decomposition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dn_model = decompose(data, partitions, ACRPowerModel, build_acopf_with_free_lines);"><pre>julia<span class="pl-k">&gt;</span> dn_model <span class="pl-k">=</span> <span class="pl-c1">decompose</span>(data, partitions, ACRPowerModel, build_acopf_with_free_lines);</pre></div>
<p dir="auto">This code generates 2 subproblems based on the partitions specified by <code>partitions</code>. <code>ACRPowerModel</code> and <code>build_acopf_with_free_lines</code> specifies that the generated subproblems are rectangular ACOPF. This package also provides some relaxations for network decomposition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dn_model = decompose(data, partitions, SDPWRMPowerModel, NetDecOPF.build_acopf_with_free_lines) # SDP relaxation for each subproblem
dn_model = decompose(data, partitions, SOCBFPowerModel, NetDecOPF.build_socbf_with_free_lines) # SOC relaxation of the branch flow model for each subproblem
dn_model = decompose(data, partitions, SOCWRPowerModel, NetDecOPF.build_socwr_with_free_lines) # SOC relaxation of the bus injection model for each subproblem"><pre>dn_model <span class="pl-k">=</span> <span class="pl-c1">decompose</span>(data, partitions, SDPWRMPowerModel, NetDecOPF<span class="pl-k">.</span>build_acopf_with_free_lines) <span class="pl-c"><span class="pl-c">#</span> SDP relaxation for each subproblem</span>
dn_model <span class="pl-k">=</span> <span class="pl-c1">decompose</span>(data, partitions, SOCBFPowerModel, NetDecOPF<span class="pl-k">.</span>build_socbf_with_free_lines) <span class="pl-c"><span class="pl-c">#</span> SOC relaxation of the branch flow model for each subproblem</span>
dn_model <span class="pl-k">=</span> <span class="pl-c1">decompose</span>(data, partitions, SOCWRPowerModel, NetDecOPF<span class="pl-k">.</span>build_socwr_with_free_lines) <span class="pl-c"><span class="pl-c">#</span> SOC relaxation of the bus injection model for each subproblem</span></pre></div>
<p dir="auto">This package uses <a href="https://github.com/kibaekkim/DualDecomposition.jl">DualDecomposition.jl</a> to solve the network decomposition problem, where the network decomposition is formulated as a dual decomposition problem and can be solved by methods such as bundle methods. This can be done as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DualDecomposition; const DD = DualDecomposition

julia&gt; sub_optimizer = optimizer = optimizer_with_attributes(Ipopt.Optimizer, &quot;print_level&quot; =&gt; 0, &quot;warm_start_init_point&quot; =&gt; &quot;yes&quot;)

julia&gt; algo = init_DD_algo(dn_model); # initialize the dual decomposition algorithm

julia&gt; set_subnet_optimizer!(dn_model, sub_optimizer); # set the optimizer for each network subproblem

julia&gt; LM = DD.BundleMaster(BM.ProximalMethod, optimizer); # initialize the bundle method with optimizer"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DualDecomposition; <span class="pl-k">const</span> DD <span class="pl-k">=</span> DualDecomposition

julia<span class="pl-k">&gt;</span> sub_optimizer <span class="pl-k">=</span> optimizer <span class="pl-k">=</span> <span class="pl-c1">optimizer_with_attributes</span>(Ipopt<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>print_level<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>warm_start_init_point<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> algo <span class="pl-k">=</span> <span class="pl-c1">init_DD_algo</span>(dn_model); <span class="pl-c"><span class="pl-c">#</span> initialize the dual decomposition algorithm</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_subnet_optimizer!</span>(dn_model, sub_optimizer); <span class="pl-c"><span class="pl-c">#</span> set the optimizer for each network subproblem</span>

julia<span class="pl-k">&gt;</span> LM <span class="pl-k">=</span> DD<span class="pl-k">.</span><span class="pl-c1">BundleMaster</span>(BM<span class="pl-k">.</span>ProximalMethod, optimizer); <span class="pl-c"><span class="pl-c">#</span> initialize the bundle method with optimizer</span></pre></div>
<p dir="auto">Here line 3 initializes the dual decomposition based on our decomposed network model <code>dn_model</code>. Line 4 sets the optimizer (<code>sub_optimizer</code>) for each network subproblem. <code>sub_optimizer</code> needs to be set as an optimizer capable of solving the subproblem. For instance, if each subproblem is formulated as ACOPF, then <code>sub_optimizer</code> has to be able to solve nonconvex QCQP. Line 5 sets the optimizer (<code>optimizer</code>) for the master problem in the bundle method.</p>
<p dir="auto">In the end we solve the network decomposition by calling the <code>DD.run!</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; DD.run!(algo, LM)"><pre>julia<span class="pl-k">&gt;</span> DD<span class="pl-k">.</span><span class="pl-c1">run!</span>(algo, LM)</pre></div>
<h2 dir="auto"><a id="user-content-citing-this-package" class="anchor" aria-hidden="true" href="#citing-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing this package</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@misc{NetDecOPF.jl.0.1.0,
  author       = {Zhang, Weiqi and Kim, Kibaek},
  title        = {{NetDecOPF.jl: Implementation of network decomposition in Julia}},
  month        = Mar,
  year         = 2021,
  doi          = {10.5281/zenodo.4592258},
  version      = {0.1.0},
  publisher    = {Zenodo},
  url          = {https://doi.org/10.5281/zenodo.4592258}
}"><pre class="notranslate"><code>@misc{NetDecOPF.jl.0.1.0,
  author       = {Zhang, Weiqi and Kim, Kibaek},
  title        = {{NetDecOPF.jl: Implementation of network decomposition in Julia}},
  month        = Mar,
  year         = 2021,
  doi          = {10.5281/zenodo.4592258},
  version      = {0.1.0},
  publisher    = {Zenodo},
  url          = {https://doi.org/10.5281/zenodo.4592258}
}
</code></pre></div>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">This material is based upon work supported by the U.S. Department of Energy, Office of Science, under contract number DE-AC02-06CH11357.</p>
</article></div>