<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center">
  <a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/logo.png"><img src="./docs/src/assets/logo.png" alt="ForceImport.jl" style="max-width:100%;"></a>
</p>
<h1><a id="user-content-forceimportjl" class="anchor" aria-hidden="true" href="#forceimportjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ForceImport.jl</h1>
<p><em>Macro that force imports conflicting methods in Julia modules</em></p>
<p><a href="https://travis-ci.org/chakravala/ForceImport.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a6ab1bebdf4cb2a0051121380dcd3121a39dee23/68747470733a2f2f7472617669732d63692e6f72672f6368616b726176616c612f466f726365496d706f72742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chakravala/ForceImport.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chakravala/forceimport-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa240c23a665b9010a39d8420c8de66f1f82f652/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f78326a727573657971747737326b74773f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/x2jruseyqtw72ktw?svg=true" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Forces imports of exported methods from <code>Module</code>, even if there are conflicts.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@force</span> <span class="pl-k">using</span> Module</pre></div>
<p>If you are using this package, then the <code>@force</code> is strong in you and the Module!</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Allows using packages that export conflicting definitions of methods and imports them into the module.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">module</span> Foo
    <span class="pl-k">export</span> <span class="pl-k">+</span>
    <span class="pl-k">+</span>() <span class="pl-k">=</span> <span class="pl-c1">7</span>
<span class="pl-k">end</span>

<span class="pl-k">module</span> Bar
    <span class="pl-k">using</span> ForceImport
    <span class="pl-c1">@force</span> <span class="pl-k">using</span> Foo
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> Bar.:<span class="pl-k">+</span>()
<span class="pl-c1">7</span></pre></div>
<p>Note that if the conflicting definition of the method is used before the import, then <code>@force</code> will not be effective.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@force</span> <span class="pl-k">using</span> Foo
WARNING<span class="pl-k">:</span> ignoring conflicting <span class="pl-k">import</span> of Foo<span class="pl-k">.+</span> into Main</pre></div>
<p>Hence the macro has to be called before the relevant methods have been called.</p>
<h2><a id="user-content-local-method-extension-technique" class="anchor" aria-hidden="true" href="#local-method-extension-technique"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Local method extension technique</h2>
<p>The principle which all <code>@force</code> users must keep in mind is this: the goal is to extend <code>Base</code> methods locally without affecting the global method table by type piracy, and to be able to import them into another package to have the same local effect. In order to avoid the type piracy, one must define a new local complementary
<code>n</code>-ary method that will fall back on the base method with <code>Any</code> arguments. Then there will be a tiered alternative dispatch layer within the local package scope that redirects to the default <code>Base</code> dispatch generically. This has many advantages, including a
<code>2x</code>-improvement in precompile time (since the precompilation is now tiered), which actually makes a big difference if this technique is applied to a large number of operations (on the order of 50-100 in <code>Reduce</code>).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">module</span> ExtendedPackage
<span class="pl-k">+</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> Base.:<span class="pl-k">+</span>(x<span class="pl-k">...</span>)
<span class="pl-k">+</span>(x<span class="pl-k">::</span><span class="pl-c1">Symbol</span>,y<span class="pl-k">::</span><span class="pl-c1">Number...</span>) <span class="pl-k">=</span> <span class="pl-c1">Expr</span>(<span class="pl-c1">:call</span>,:<span class="pl-k">+</span>,x,y<span class="pl-k">...</span>)
<span class="pl-k">end</span></pre></div>
<p>Then you can use it locally with the <code>@force</code> macro, which automatically forces imports of all exported methods one by one;</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">module</span> NewScope
<span class="pl-k">using</span> ForceImport
<span class="pl-c1">@force</span> <span class="pl-k">using</span> ExtendedPackage
<span class="pl-k">end</span></pre></div>
<p>You will now have the property</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Base.:<span class="pl-k">+</span> <span class="pl-k">==</span> NewScope.:<span class="pl-k">+</span>
<span class="pl-c1">false</span></pre></div>
<p>where the <code>+</code> in the <code>NewScope</code> is now the extended plus that falls back on <code>Base</code>, which is also different from the <code>+</code> in <code>Main</code>. All it takes is the application of this principle, which has been pioneered with the development of the <a href="https://github.com/chakravala/Reduce.jl/blob/382b5ff84bb66067f2f087156c6bd930c297318a/src/Reduce.jl#L105-L123">Reduce.Algebra</a> module (defined in <a href="https://github.com/chakravala/Reduce.jl/blob/master/src/args.jl">src/args.jl</a> and <a href="https://github.com/chakravala/Reduce.jl/blob/master/src/unary.jl">src/unary.jl</a>).</p>
<p>The main difficulty lies in properly designing the redirection from the tiered method dispatch so that the infix operations work naturally with a variety of syntax.</p>
</article></div>