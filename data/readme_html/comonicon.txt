<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-comonicon" class="anchor" aria-hidden="true" href="#comonicon"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comonicon</h1>
<p><em>gith averminaluk ayh juldas mausan urdan</em></p>
<p><a href="https://travis-ci.com/Roger-luo/Comonicon.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/458c83469be3ba1237c0423596033f5aa23ea7ec07fb67628aa849933f39d649/68747470733a2f2f7472617669732d63692e636f6d2f526f6765722d6c756f2f436f6d6f6e69636f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Roger-luo/Comonicon.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://rogerluo.dev/Comonicon.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Roger-luo/Comonicon.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/32ac2a4897f090fe25d289ddeae6dc03b9f82f416a62e6025a8a12c11237e4f5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f526f6765722d6c756f2f436f6d6f6e69636f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Roger-luo/Comonicon.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Roger's magic book for command line interfaces.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>
Comonicon is a  
    <a href="https://julialang.org" rel="nofollow">
        <img src="https://camo.githubusercontent.com/a8cd84f68fcdecc84d830598cd08275bce400b0cb67ce815fae2f2f27817851f/68747470733a2f2f6a756c69616c616e672e6f72672f6173736574732f696e6672612f6a756c69612e69636f" width="16em" data-canonical-src="https://julialang.org/assets/infra/julia.ico" style="max-width:100%;">
        Julia Language
    </a>
      package. To install Comonicon,
    please <a href="https://docs.julialang.org/en/v1/manual/getting-started/" rel="nofollow">open
    Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then type the following command
</p>
<p>For stable release</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Comonicon
"><pre>pkg<span class="pl-k">&gt;</span> add Comonicon</pre></div>
<p>For current master</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Comonicon#master
"><pre>pkg<span class="pl-k">&gt;</span> add Comonicon<span class="pl-c"><span class="pl-c">#</span>master</span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The simplest way to use it is via <code>@main</code> macro, please refer to the demo in <a href="#zero-duplication">Zero Duplication</a>.</p>
<p>Although you can use <code>Comonicon</code> in your script, but the recommended way to build CLI with Comonicon is to use <code>@main</code> in a Julia project module, so the command line interface entry will get compiled by the
Julia compiler.</p>
<p>Moreover, if you wish to create multiple commands. You can use <code>@cast</code> macro to annotate a function or module
to create more complicated command line interfaces. You can check the example <code>Ion</code> <a href="example/Ion">here</a>.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<h3><a id="user-content-zero-duplication" class="anchor" aria-hidden="true" href="#zero-duplication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zero Duplication</h3>
<p>The frontend <code>@main</code> and <code>@cast</code> will try to <strong>parse everything you typed</strong> and turn them into
part of your command line. This includes your function or module docstrings, your argument and keyword
argument names, types and default values.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
ArgParse example implemented in Comonicon.

# Arguments

- `x`: an argument

# Options

- `--opt1 &lt;arg&gt;`: an option
- `-o, --opt2 &lt;arg&gt;`: another option

# Flags

- `-f, --flag`: a flag
&quot;&quot;&quot;
@main function main(x; opt1=1, opt2::Int=2, flag=false)
    println(&quot;Parsed args:&quot;)
    println(&quot;flag=&gt;&quot;, flag)
    println(&quot;arg=&gt;&quot;, x)
    println(&quot;opt1=&gt;&quot;, opt1)
    println(&quot;opt2=&gt;&quot;, opt2)
end
"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">ArgParse example implemented in Comonicon.</span>
<span class="pl-s"></span>
<span class="pl-s"># Arguments</span>
<span class="pl-s"></span>
<span class="pl-s">- `x`: an argument</span>
<span class="pl-s"></span>
<span class="pl-s"># Options</span>
<span class="pl-s"></span>
<span class="pl-s">- `--opt1 &lt;arg&gt;`: an option</span>
<span class="pl-s">- `-o, --opt2 &lt;arg&gt;`: another option</span>
<span class="pl-s"></span>
<span class="pl-s"># Flags</span>
<span class="pl-s"></span>
<span class="pl-s">- `-f, --flag`: a flag</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">@main</span> <span class="pl-k">function</span> <span class="pl-en">main</span>(x; opt1<span class="pl-k">=</span><span class="pl-c1">1</span>, opt2<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">2</span>, flag<span class="pl-k">=</span><span class="pl-c1">false</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Parsed args:<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>flag=&gt;<span class="pl-pds">"</span></span>, flag)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>arg=&gt;<span class="pl-pds">"</span></span>, x)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>opt1=&gt;<span class="pl-pds">"</span></span>, opt1)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>opt2=&gt;<span class="pl-pds">"</span></span>, opt2)
<span class="pl-k">end</span></pre></div>
<p>We don't want to compromise on writing DRY code. If you have mentioned it in the documentation or somewhere in your script, you shouldn't write about it again in your code.</p>
<p>This is like Python <a href="https://github.com/docopt/docopt">docopt</a> but with <a href="https://github.com/google/python-fire">Fire</a> and in Julia.</p>
<h3><a id="user-content-zero-overhead" class="anchor" aria-hidden="true" href="#zero-overhead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zero Overhead</h3>
<p>The backend code generator will generate Julia ASTs directly to parse your command line inputs all in one
function <code>main</code> with one method <code>main(::Vector{String})</code>, which can be precompiled easily during module compilation.</p>
<h3><a id="user-content-zero-dependency" class="anchor" aria-hidden="true" href="#zero-dependency"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zero Dependency</h3>
<p>You can get rid of <code>Comonicon</code> entirely after you generate the command line parsing script
via <code>write(filename, command_object)</code>. If means if you copy this file into your script, you
will get a standalone Julia script (unless the script depends on something else).</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>MIT License</p>
</article></div>