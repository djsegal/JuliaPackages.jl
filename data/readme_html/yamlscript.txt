<div id="readme" class="md" data-path="ReadMe.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-yamlscript" class="anchor" aria-hidden="true" href="#yamlscript"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>YAMLScript</h1>
<p dir="auto">Programming in YAML</p>
<h2 dir="auto"><a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Synopsis</h2>
<p dir="auto">A YAMLScript program <code>99-bottles.ys</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="#!/usr/bin/env yamlscript

main(number=99):
  map:
  - println
  - map(paragraph, range(number, 0, -1))

paragraph(num): |
  $(bottles, num) of beer on the wall,
  $(bottles, num) of beer.
  Take one down, pass it around.
  $(bottles, (num - 1)) of beer on the wall.

bottles(n):
  cond: [
    (n == 0), &quot;No more bottles&quot;,
    (n == 1), &quot;1 bottle&quot;,
    :else,    &quot;$n bottles&quot; ]"><pre class="notranslate"><code>#!/usr/bin/env yamlscript

main(number=99):
  map:
  - println
  - map(paragraph, range(number, 0, -1))

paragraph(num): |
  $(bottles, num) of beer on the wall,
  $(bottles, num) of beer.
  Take one down, pass it around.
  $(bottles, (num - 1)) of beer on the wall.

bottles(n):
  cond: [
    (n == 0), "No more bottles",
    (n == 1), "1 bottle",
    :else,    "$n bottles" ]
</code></pre></div>
<p dir="auto">Run: <code>yamlscript 99-bottles.ys 3</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3 bottles of beer on the wall,
3 bottles of beer.
Take one down, pass it around.
2 bottles of beer on the wall.

2 bottles of beer on the wall,
2 bottles of beer.
Take one down, pass it around.
1 bottle of beer on the wall.

1 bottle of beer on the wall,
1 bottle of beer.
Take one down, pass it around.
No more bottles of beer on the wall."><pre class="notranslate"><code>3 bottles of beer on the wall,
3 bottles of beer.
Take one down, pass it around.
2 bottles of beer on the wall.

2 bottles of beer on the wall,
2 bottles of beer.
Take one down, pass it around.
1 bottle of beer on the wall.

1 bottle of beer on the wall,
1 bottle of beer.
Take one down, pass it around.
No more bottles of beer on the wall.
</code></pre></div>
<p dir="auto">Use the YAMLScript REPL:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ yamlscript
Welcome to YAMLScript [perl]

user=&gt; nums =: range(1 4)
user/nums
user=&gt; nums
(1 2 3)
user=&gt; map: [ println, nums ]
1
2
3
(nil nil nil)
user=&gt; &lt;ctrl-D&gt;         # to exit
$"><pre class="notranslate"><code>$ yamlscript
Welcome to YAMLScript [perl]

user=&gt; nums =: range(1 4)
user/nums
user=&gt; nums
(1 2 3)
user=&gt; map: [ println, nums ]
1
2
3
(nil nil nil)
user=&gt; &lt;ctrl-D&gt;         # to exit
$
</code></pre></div>
<h2 dir="auto"><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Status</h2>
<p dir="auto">This is very ALPHA software.
Expect things to change.</p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">YAMLScript is a programming language that uses YAML as a base syntax.
It feels like a YAML encoded Lisp, but with fewer parentheses.</p>
<p dir="auto">In fact YAMLScript <em>is</em> a Lisp.
It's a YAML-based specialized syntax reader for the <a href="https://metacpan.org/dist/Lingy/view/lib/Lingy.pod" rel="nofollow">Lingy</a> programming language.
<strong>Lingy</strong> is a port of the <strong>Clojure</strong> language to other languages (like Perl).
Clojure is a Lisp hosted by the Java JVM.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">YAMLScript is currently only available as a Perl CPAN module.
You install it like so:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ cpanm YAMLScript"><pre class="notranslate"><code>$ cpanm YAMLScript
</code></pre></div>
<p dir="auto">Once installed you will have access to the <code>yamlscript</code> CLI command.
You will also have library support to invoke YAMLScript directly from Perl.</p>
<h2 dir="auto"><a id="user-content-yamlscript-language-capabilities" class="anchor" aria-hidden="true" href="#yamlscript-language-capabilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>YAMLScript Language Capabilities</h2>
<ul dir="auto">
<li>
<p dir="auto">Variable binding</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="name =: 'world'"><pre class="notranslate"><code>name =: 'world'
</code></pre></div>
<p dir="auto">Variable names use lowercase letters <code>a-z</code>, digits <code>0-9</code> and must start with
a letter.
Name parts may be separated by a dash <code>-</code>.</p>
</li>
<li>
<p dir="auto">Variable dereferencing</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="the-value =: name"><pre class="notranslate"><code>the-value =: name
</code></pre></div>
<p dir="auto">Unquoted words are treated as Lingy symbols.</p>
</li>
<li>
<p dir="auto">Lingy Expressions</p>
<p dir="auto">Plain (unquoted) scalars are treated as Lingy syntax.
Scalars starting with <code>(</code> are Lingy expressions.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="answer =: (2 * 3 * 7)"><pre class="notranslate"><code>answer =: (2 * 3 * 7)
</code></pre></div>
<p dir="auto">You can use a backslash to indicate turn YAML syntax into a Lingy syntax:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="my-vector =: \[1 2 3]"><pre class="notranslate"><code>my-vector =: \[1 2 3]
</code></pre></div>
<p dir="auto">Without the <code>\</code> it would be read by YAML as <code>[ "1 2 3" ]</code>.</p>
</li>
<li>
<p dir="auto">String interpolation</p>
<p dir="auto">YAMLScript strings need to be quoted, since plain (unquoted) strings are seen
as Lingy symbols (variables) or syntax.</p>
<p dir="auto">Lingy symbols or expressions preceded by a <code>$</code> are interpolated into double
quoted and literal style YAML scalars.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Double quoted strings are interpolated
- greeting =: &quot;Hello, $name!&quot;
# Multiline literal scalars are interpolated
- hi-bye =: |
  Hello, $name.
  Goodbye, $name.
# Single quoted strings are NOT interpolated
- string =: 'Hello, $name!'"><pre class="notranslate"><code># Double quoted strings are interpolated
- greeting =: "Hello, $name!"
# Multiline literal scalars are interpolated
- hi-bye =: |
  Hello, $name.
  Goodbye, $name.
# Single quoted strings are NOT interpolated
- string =: 'Hello, $name!'
</code></pre></div>
</li>
<li>
<p dir="auto">Fixity:</p>
<p dir="auto">In Lingy (a Lisp) you say things like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(println (* 3 7))"><pre class="notranslate"><code>(println (* 3 7))
</code></pre></div>
<p dir="auto">YAMLScript lets you say:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="println(3 * 7)"><pre class="notranslate"><code>println(3 * 7)
</code></pre></div>
<p dir="auto">That is function symbols can be placed before the opening paren.
And prefix math operations can be made infix.</p>
</li>
<li>
<p dir="auto">Function calls</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="say:
  join: [' ', &quot;Hello&quot;, &quot;world!&quot;]"><pre class="notranslate"><code>say:
  join: [' ', "Hello", "world!"]
</code></pre></div>
<p dir="auto">or</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="say(join(' ' [&quot;Hello&quot; &quot;world!&quot;]))"><pre class="notranslate"><code>say(join(' ' ["Hello" "world!"]))
</code></pre></div>
</li>
<li>
<p dir="auto">Define functions</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="square-and-add(x,y):
  ((x ^ 2) + y)"><pre class="notranslate"><code>square-and-add(x,y):
  ((x ^ 2) + y)
</code></pre></div>
</li>
<li>
<p dir="auto">Define multiple arity functions</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sum:
  (): 0
  (x): x
  (x, y): (x + y)
  (x, y, z*): (x + (y + (sum z*)))"><pre class="notranslate"><code>sum:
  (): 0
  (x): x
  (x, y): (x + y)
  (x, y, z*): (x + (y + (sum z*)))
</code></pre></div>
</li>
<li>
<p dir="auto">Conditionals</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="if:
- (x &gt; 50)            # condition
- say(&quot;$x wins :)&quot;)   # then
- say(&quot;$x loses :(&quot;)  # else"><pre class="notranslate"><code>if:
- (x &gt; 50)            # condition
- say("$x wins :)")   # then
- say("$x loses :(")  # else
</code></pre></div>
</li>
<li>
<p dir="auto">Try / Catch</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="- try: (42 / 0)
  catch(e):
    say: &quot;Caught error '$e'&quot;"><pre class="notranslate"><code>- try: (42 / 0)
  catch(e):
    say: "Caught error '$e'"
</code></pre></div>
</li>
<li>
<p dir="auto">Iteration</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="for (name):
- [Alice, Bob, Curly]
- say: Hello, $name!"><pre class="notranslate"><code>for (name):
- [Alice, Bob, Curly]
- say: Hello, $name!
</code></pre></div>
</li>
<li>
<p dir="auto">Namespacing and Importing Modules</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ns My::Package:
  use:
  - Foo::Bar
  - Another::Module: [this, that]"><pre class="notranslate"><code>ns My::Package:
  use:
  - Foo::Bar
  - Another::Module: [this, that]
</code></pre></div>
<p dir="auto">YAMLScript modules may be written in YAMLScript, Lingy or Perl.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<ul dir="auto">
<li>Ingy döt Net <a href="mailto:ingy@ingy.net">ingy@ingy.net</a></li>
</ul>
<h2 dir="auto"><a id="user-content-copyright-and-license" class="anchor" aria-hidden="true" href="#copyright-and-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copyright and License</h2>
<p dir="auto">Copyright 2022-2023 by Ingy döt Net</p>
<p dir="auto">This is free software, licensed under:</p>
<p dir="auto">The MIT (X11) License</p>
</article></div>