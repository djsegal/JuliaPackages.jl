<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-symbolictracingjl" class="anchor" aria-hidden="true" href="#symbolictracingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SymbolicTracing.jl</h1>
<p>Experimental tracing for SymbolicUtils.jl types. SymbolicTracing.jl will allow you to effectively treat <code>Symbolic{T}</code> as being a subtype of <code>T</code> for the purposes of dispatch <strong>if</strong> <code>T</code> is an abstract type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SymbolicTracing, Symbolics

julia&gt; @syms x::Real;

julia&gt; f(x::Number, y) = sin(x + 1) + (sin(3y) - 1);

julia&gt; @trace f(x, 3.0)
sin(x + 1) - 0.5878815147582435

julia&gt; typeof(ans)
SymbolicUtils.Term{Real, Nothing}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SymbolicTracing, Symbolics

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> x<span class="pl-k">::</span><span class="pl-c1">Real</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Number</span>, y) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> (<span class="pl-c1">sin</span>(<span class="pl-c1">3</span>y) <span class="pl-k">-</span> <span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span> <span class="pl-c1">f</span>(x, <span class="pl-c1">3.0</span>)
<span class="pl-c1">sin</span>(x <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">0.5878815147582435</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
SymbolicUtils<span class="pl-k">.</span>Term{Real, Nothing}</pre></div>
<p>This works with <em>any</em> abstract type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @syms s::AbstractString;

julia&gt; g(s::AbstractString) = s * &quot; hi&quot;
g (generic function with 1 method)

julia&gt; @trace g(s)
s* hi

julia&gt; dump(ans) # the lack of quotation marks on &quot; hi&quot; is just a printing quirk from SymbolicUtils
SymbolicUtils.Term{Any, Nothing}
  f: * (function of type typeof(*))
  arguments: Array{Any}((2,))
    1: SymbolicUtils.Sym{AbstractString, Nothing}
      name: Symbol s
      metadata: Nothing nothing
    2: String &quot; hi&quot;
  metadata: Nothing nothing
  hash: Base.RefValue{UInt64}
    x: UInt64 0x0000000000000000
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> s<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-en">g</span>(s<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> s <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span> hi<span class="pl-pds">"</span></span>
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span> <span class="pl-c1">g</span>(s)
s<span class="pl-k">*</span> hi

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dump</span>(ans) <span class="pl-c"><span class="pl-c">#</span> the lack of quotation marks on " hi" is just a printing quirk from SymbolicUtils</span>
SymbolicUtils<span class="pl-k">.</span>Term{Any, Nothing}
  f<span class="pl-k">:</span> <span class="pl-k">*</span> (<span class="pl-k">function</span> of type <span class="pl-c1">typeof</span>(<span class="pl-k">*</span>))
  arguments<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">2</span>,))
    <span class="pl-c1">1</span><span class="pl-k">:</span> SymbolicUtils<span class="pl-k">.</span>Sym{AbstractString, Nothing}
      name<span class="pl-k">:</span> Symbol s
      metadata<span class="pl-k">:</span> Nothing <span class="pl-c1">nothing</span>
    <span class="pl-c1">2</span><span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span> hi<span class="pl-pds">"</span></span>
  metadata<span class="pl-k">:</span> Nothing <span class="pl-c1">nothing</span>
  hash<span class="pl-k">:</span> Base<span class="pl-k">.</span>RefValue{UInt64}
    x<span class="pl-k">:</span> UInt64 <span class="pl-c1">0x0000000000000000</span></pre></div>
<p>To register a certain function as being a natural stopping point for tracing (i.e. don't recurse inside it),
use <code>@register</code> from Symbolics.jl</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; h(X::AbstractMatrix) = X .+ 1

h (generic function with 3 methods)

julia&gt; @register h(X)

julia&gt; @syms X::AbstractMatrix
(X,)

julia&gt; @trace 2X + h(X)
h(X) + 2X
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">h</span>(X<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>) <span class="pl-k">=</span> X <span class="pl-k">.+</span> <span class="pl-c1">1</span>

h (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@register</span> <span class="pl-c1">h</span>(X)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> X<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>
(X,)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span> <span class="pl-c1">2</span>X <span class="pl-k">+</span> <span class="pl-c1">h</span>(X)
<span class="pl-c1">h</span>(X) <span class="pl-k">+</span> <span class="pl-c1">2</span>X</pre></div>
</article></div>