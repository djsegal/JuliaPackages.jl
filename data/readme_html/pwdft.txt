<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pwdftjl" class="anchor" aria-hidden="true" href="#pwdftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PWDFT.jl</h1>
<p><code>PWDFT.jl</code> is a package to solve
<a href="https://en.wikipedia.org/wiki/Electronic_structure" rel="nofollow">electronic structure problems</a>
based on
<a href="https://en.wikipedia.org/wiki/Density_functional_theory" rel="nofollow">density functional theory</a>
(DFT)
and <a href="https://en.wikipedia.org/wiki/Kohn%E2%80%93Sham_equations" rel="nofollow">Kohn-Sham equations</a>.
It is written in <a href="https://julialang.org" rel="nofollow">Julia programming language</a>.</p>
<p>The Kohn-Sham orbitals are expanded using plane wave basis. This basis set is
very popular within solid-state community and is also used in several electronic
structure package such as Quantum ESPRESSO, ABINIT, VASP, etc.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>Total energy calculation of molecules, surfaces, and crystalline system
within periodic unit cell (however, no corrections are
implemented for non-periodic systems yet).</li>
<li>SCF with electron density mixing (for semiconducting and metallic systems)</li>
<li>Direct minimization method using conjugate gradient (for semiconducting systems)</li>
<li>GTH pseudopotentials (included in the repository)</li>
<li>LDA-VWN and GGA-PBE functionals (via <code>Libxc.jl</code>)</li>
</ul>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<ul>
<li><a href="https://julialang.org/downloads" rel="nofollow">Julia</a> version &gt;= 0.7,
with the following packages installed:
<ul>
<li><code>FFTW</code></li>
<li><code>SpecialFunctions</code></li>
<li><code>Libxc</code> (a wrapper to <a href="https://gitlab.com/libxc/libxc" rel="nofollow">Libxc</a>)</li>
<li><code>LibSymspg</code> (a wrapper to <a href="https://github.com/atztogo/spglib">spglib</a>)</li>
</ul>
</li>
</ul>
<p>These packages are registered so they can be installed by using Julia's package manager.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;FFTW&quot;)
Pkg.add(&quot;SpecialFunctions&quot;)
Pkg.add(&quot;Libxc&quot;)
Pkg.add(&quot;LibSymspg&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FFTW<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SpecialFunctions<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Libxc<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LibSymspg<span class="pl-pds">"</span></span>)</pre></div>
<p>These packages should be automatically installed <code>PWDFT.jl</code> is installed as
local package (see below).</p>
<p>Many thanks to @unkcpz for providing <code>Libxc</code> and <code>LibSymspg</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Currently, this package is not yet registered. So, <code>Pkg.add("PWDFT")</code> will not work (yet).</p>
<p>We have several alternatives:</p>
<ol>
<li>Using Julia's package manager to install directly from the repository URL:</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(PackageSpec(url=&quot;https://github.com/f-fathurrahman/PWDFT.jl&quot;))
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/f-fathurrahman/PWDFT.jl<span class="pl-pds">"</span></span>))</pre></div>
<ol start="2">
<li>Using Julia development directory. We will use <code>$HOME/.julia/dev</code> for this.
To enable <code>$HOME/.julia/dev</code> directory, we need to modify the Julia's
<code>LOAD_PATH</code> variable. Add the following line in your
<code>$HOME/.julia/config/startup.jl</code>.</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="push!(LOAD_PATH, expanduser(&quot;~/.julia/dev&quot;))
"><pre><span class="pl-c1">push!</span>(<span class="pl-c1">LOAD_PATH</span>, <span class="pl-c1">expanduser</span>(<span class="pl-s"><span class="pl-pds">"</span>~/.julia/dev<span class="pl-pds">"</span></span>))</pre></div>
<p>After this has been set, you can download the the package as zip file (using Github) or
clone this repository to your computer.</p>
<p>If you download the zip file, extract the zip file under
<code>$HOME/.julia/dev</code>. You need to rename the extracted directory
to <code>PWDFT</code> (with no <code>.jl</code> extension).</p>
<p>Alternatively, create symlink under <code>$HOME/.julia/dev</code>
to point to you cloned (or extracted) <code>PWDFT.jl</code> directory. The link name should not
contain the <code>.jl</code> part. For example:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="ln -fs /path/to/PWDFT.jl $HOME/.julia/dev/PWDFT
"><pre>ln -fs /path/to/PWDFT.jl <span class="pl-smi">$HOME</span>/.julia/dev/PWDFT</pre></div>
<ol start="3">
<li>Install PWDFT.jl as local package. Firstly, get into Pkg's REPL mode by tapping <code>]</code>,
and activate a independent environment <code>activate .</code> .</li>
</ol>
<p>Install the PWDFT.jl package in this environment:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="(PWDFT) pkg&gt; develop &lt;path/to/PWDFT.jl&gt;
"><pre>(PWDFT) pkg<span class="pl-k">&gt;</span> develop <span class="pl-k">&lt;</span>path/to/PWDFT.jl<span class="pl-k">&gt;</span></pre></div>
<p>To make sure that the package is installed correctly, you can load the package
and verify that there are no error messages during precompilation step.
You can do this by typing the following in the Julia console.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PWDFT
"><pre><span class="pl-k">using</span> PWDFT</pre></div>
<p>Change directory to <code>examples/Si_fcc</code> and run the following in the terminal.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia run.jl
"><pre><code>julia run.jl
</code></pre></div>
<p>The above command will calculate total energy of hydrogen atom by SCF method.</p>
<p>The script will calculate total energy per unit cell of silicon crystal using
self-consistent field iteration and direct energy minimization.</p>
<h2><a id="user-content-units" class="anchor" aria-hidden="true" href="#units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Units</h2>
<p><code>PWDFT.jl</code> internally uses Hartree atomic units (energy in Hartree and length in bohr).</p>
<h2><a id="user-content-a-simple-work-flow" class="anchor" aria-hidden="true" href="#a-simple-work-flow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A simple work flow</h2>
<ul>
<li>create an instance of <code>Atoms</code>:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="atoms = Atoms(xyz_file=&quot;CH4.xyz&quot;, LatVecs=gen_lattice_sc(16.0))
"><pre>atoms <span class="pl-k">=</span> <span class="pl-c1">Atoms</span>(xyz_file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CH4.xyz<span class="pl-pds">"</span></span>, LatVecs<span class="pl-k">=</span><span class="pl-c1">gen_lattice_sc</span>(<span class="pl-c1">16.0</span>))</pre></div>
<ul>
<li>create an instance of <code>Hamiltonian</code>:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ecutwfc = 15.0 # in Hartree
pspfiles = [&quot;../pseudopotentials/pade_gth/C-q4.gth&quot;,
            &quot;../pseudopotentials/pade_gth/H-q1.gth&quot;]
Ham = Hamiltonian( atoms, pspfiles, ecutwfc )
"><pre>ecutwfc <span class="pl-k">=</span> <span class="pl-c1">15.0</span> <span class="pl-c"><span class="pl-c">#</span> in Hartree</span>
pspfiles <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>../pseudopotentials/pade_gth/C-q4.gth<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>../pseudopotentials/pade_gth/H-q1.gth<span class="pl-pds">"</span></span>]
Ham <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>( atoms, pspfiles, ecutwfc )</pre></div>
<ul>
<li>solve the Kohn-Sham problem</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="KS_solve_SCF!( Ham, betamix=0.2 )  # using SCF (self-consistent field) method
# or
KS_solve_Emin_PCG!( Ham ) # direct minimization using preconditioned conjugate gradient
"><pre><span class="pl-c1">KS_solve_SCF!</span>( Ham, betamix<span class="pl-k">=</span><span class="pl-c1">0.2</span> )  <span class="pl-c"><span class="pl-c">#</span> using SCF (self-consistent field) method</span>
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">KS_solve_Emin_PCG!</span>( Ham ) <span class="pl-c"><span class="pl-c">#</span> direct minimization using preconditioned conjugate gradient</span></pre></div>
<h2><a id="user-content-more-examples-on-creating-an-instance-of-atoms" class="anchor" aria-hidden="true" href="#more-examples-on-creating-an-instance-of-atoms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More examples on creating an instance of <code>Atoms</code></h2>
<p>GaAs crystal (primitive unit cell), using keyword <code>xyz_string_frac</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Atoms
atoms = Atoms( xyz_string_frac=
    &quot;&quot;&quot;
    2

    Ga  0.0   0.0   0.0
    As  0.25  0.25  0.25
    &quot;&quot;&quot;,
    in_bohr=true,
    LatVecs = gen_lattice_fcc(10.6839444516)
)
"><pre><span class="pl-c"><span class="pl-c">#</span> Atoms</span>
atoms <span class="pl-k">=</span> <span class="pl-c1">Atoms</span>( xyz_string_frac<span class="pl-k">=</span>
    <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    2</span>
<span class="pl-s"></span>
<span class="pl-s">    Ga  0.0   0.0   0.0</span>
<span class="pl-s">    As  0.25  0.25  0.25</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>,
    in_bohr<span class="pl-k">=</span><span class="pl-c1">true</span>,
    LatVecs <span class="pl-k">=</span> <span class="pl-c1">gen_lattice_fcc</span>(<span class="pl-c1">10.6839444516</span>)
)</pre></div>
<p>Hydrazine molecule in extended xyz file</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="atoms = Atoms(ext_xyz_file=&quot;N2H4.xyz&quot;)
"><pre>atoms <span class="pl-k">=</span> <span class="pl-c1">Atoms</span>(ext_xyz_file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>N2H4.xyz<span class="pl-pds">"</span></span>)</pre></div>
<p>with the following <code>N2H4.xyz</code> file (generated using <a href="https://wiki.fysik.dtu.dk/ase/" rel="nofollow">ASE</a>):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="6
Lattice=&quot;11.896428 0.0 0.0 0.0 12.185504 0.0 0.0 0.0 11.151965&quot; Properties=species:S:1:pos:R:3:Z:I:1 pbc=&quot;T T T&quot;
N       5.94821400       6.81171100       5.22639100        7 
N       5.94821400       5.37379300       5.22639100        7 
H       6.15929600       7.18550400       6.15196500        1 
H       5.00000000       7.09777800       5.00000000        1 
H       5.73713200       5.00000000       6.15196500        1 
H       6.89642800       5.08772600       5.00000000        1 
"><pre><code>6
Lattice="11.896428 0.0 0.0 0.0 12.185504 0.0 0.0 0.0 11.151965" Properties=species:S:1:pos:R:3:Z:I:1 pbc="T T T"
N       5.94821400       6.81171100       5.22639100        7 
N       5.94821400       5.37379300       5.22639100        7 
H       6.15929600       7.18550400       6.15196500        1 
H       5.00000000       7.09777800       5.00000000        1 
H       5.73713200       5.00000000       6.15196500        1 
H       6.89642800       5.08772600       5.00000000        1 
</code></pre></div>
<p>Lattice vectors information is taken from the xyz file.</p>
<h2><a id="user-content-more-examples-on-creating-an-instance-of-hamiltonian" class="anchor" aria-hidden="true" href="#more-examples-on-creating-an-instance-of-hamiltonian"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More examples on creating an instance of <code>Hamiltonian</code></h2>
<p>Using 3x3x3 Monkhorst-Pack kpoint grid (usually used for crystalline systems):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Ham = Hamiltonian( atoms, pspfiles, ecutwfc, meshk=[3,3,3] )
"><pre>Ham <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>( atoms, pspfiles, ecutwfc, meshk<span class="pl-k">=</span>[<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>] )</pre></div>
<p>Include 4 extra states:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Ham = Hamiltonian( atoms, pspfiles, ecutwfc, meshk=[3,3,3], extra_states=4 )
"><pre>Ham <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>( atoms, pspfiles, ecutwfc, meshk<span class="pl-k">=</span>[<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>], extra_states<span class="pl-k">=</span><span class="pl-c1">4</span> )</pre></div>
<p>Using spin-polarized (<code>Nspin=2 </code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Ham = Hamiltonian( atoms, pspfiles, ecutwfc, meshk=[3,3,3],
    Nspin=2, extra_states=4 )
"><pre>Ham <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>( atoms, pspfiles, ecutwfc, meshk<span class="pl-k">=</span>[<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>],
    Nspin<span class="pl-k">=</span><span class="pl-c1">2</span>, extra_states<span class="pl-k">=</span><span class="pl-c1">4</span> )</pre></div>
<p>NOTES: Currently spin-polarized calculations are only supported by
specifying calculations with smearing scheme (no fixed magnetization yet),
so <code>extra_states</code> should also be specified.</p>
<p>Using PBE exchange-correlation functional:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Ham = Hamiltonian( atoms, pspfiles, ecutwfc, meshk=[3,3,3],
    Nspin=2, extra_states=4, xcfunc=&quot;PBE&quot; )
"><pre>Ham <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>( atoms, pspfiles, ecutwfc, meshk<span class="pl-k">=</span>[<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>],
    Nspin<span class="pl-k">=</span><span class="pl-c1">2</span>, extra_states<span class="pl-k">=</span><span class="pl-c1">4</span>, xcfunc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>PBE<span class="pl-pds">"</span></span> )</pre></div>
<p>Currently, only two XC functional is supported, namely <code>xcfunc="VWN"</code> (default) and
<code>xcfunc="PBE"</code>. Future developments should support all functionals included in LibXC.</p>
<h2><a id="user-content-more-examples-on-solving-the-kohn-sham-problem" class="anchor" aria-hidden="true" href="#more-examples-on-solving-the-kohn-sham-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More examples on solving the Kohn-Sham problem</h2>
<p>Several solvers are available:</p>
<ul>
<li>
<p><code>KS_solve_SCF!</code>: SCF algorithm with density mixing</p>
</li>
<li>
<p><code>KS_solve_SCF_potmix!</code>: SCF algorithm with XC and Hartree potential mixing</p>
</li>
<li>
<p><code>KS_solve_Emin_PCG!</code>: using direct total energy minimization by preconditioned conjugate
gradient method (proposed by Prof. Arias, et al.). Only
the version which works with systems with band gap is implemented.</p>
</li>
</ul>
<p>Stopping criteria is based on difference in total energy.</p>
<p>The following example will use <code>Emin_PCG</code>.
It will stop if the difference in total energy is less than
<code>etot_conv_thr</code> and it occurs twice in a row.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="KS_solve_Emin_PCG!( Ham, etot_conv_thr=1e-6, NiterMax=150 )
"><pre><span class="pl-c1">KS_solve_Emin_PCG!</span>( Ham, etot_conv_thr<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, NiterMax<span class="pl-k">=</span><span class="pl-c1">150</span> )</pre></div>
<p>Using SCF with <code>betamix</code> (mixing parameter) 0.1:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="KS_solve_SCF!( Ham, betamix=0.1 )
"><pre><span class="pl-c1">KS_solve_SCF!</span>( Ham, betamix<span class="pl-k">=</span><span class="pl-c1">0.1</span> )</pre></div>
<p>Smaller <code>betamix</code> usually will lead to slower convergence but more stable.
Larger <code>betamix</code> will give faster convergence but might result in unstable
SCF.</p>
<p>Several mixing methods are available in <code>KS_solve_SCF!</code>:</p>
<ul>
<li>
<p><code>simple</code> or linear mixing</p>
</li>
<li>
<p><code>linear_adaptive</code></p>
</li>
<li>
<p><code>anderson</code></p>
</li>
<li>
<p><code>broyden</code></p>
</li>
<li>
<p><code>pulay</code></p>
</li>
<li>
<p><code>ppulay</code>: <a href="https://www.sciencedirect.com/science/article/abs/pii/S0009261416000464" rel="nofollow">periodic Pulay mixing</a></p>
</li>
<li>
<p><code>rpulay</code>: <a href="https://www.sciencedirect.com/science/article/abs/pii/S0009261415004480" rel="nofollow">restarted Pulay mixing</a></p>
</li>
</ul>
<p>For metallic system, we use Fermi smearing scheme for occupation numbers of electrons.
This is activated by setting <code>use_smearing=true</code> and specifying a small smearing parameter <code>kT</code>
(in Hartree, default <code>kT=0.001</code>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="KS_solve_SCF!( Ham, mix_method=&quot;rpulay&quot;, use_smearing=true, kT=0.001 )
"><pre><span class="pl-c1">KS_solve_SCF!</span>( Ham, mix_method<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>rpulay<span class="pl-pds">"</span></span>, use_smearing<span class="pl-k">=</span><span class="pl-c1">true</span>, kT<span class="pl-k">=</span><span class="pl-c1">0.001</span> )</pre></div>
<h2><a id="user-content-band-structure-calculations" class="anchor" aria-hidden="true" href="#band-structure-calculations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Band structure calculations</h2>
<p><a target="_blank" rel="noopener noreferrer" href="images/bands_Si_fcc.svg"><img src="images/bands_Si_fcc.svg" alt="Band structure of silicon (fcc)" style="max-width:100%;"></a></p>
<p>Please see
<a href="examples/bands_Si_fcc/run_bands.jl">this</a> as
an example of how this can be obtained.</p>
<h2><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citation</h2>
<ul>
<li>Fadjar Fathurrahman, Mohammad Kemal Agusta, Adhitya Gandaryus Saputro, Hermawan Kresno Dipojono <a href="https://doi.org/10.1016/j.cpc.2020.107372" rel="nofollow">
PWDFT.jl : A Julia package for electronic structure calculation using density functional theory and plane wave basis</a>.
Comp. Phys. Comm. <strong>256</strong> 107372 (2020).</li>
</ul>
<h2><a id="user-content-some-references" class="anchor" aria-hidden="true" href="#some-references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some references</h2>
<p>Articles:</p>
<ul>
<li>
<p>M. Bockstedte, A. Kley, J. Neugebauer and M. Scheffler. Density-functional theory
calculations for polyatomic systems:Electronic structure, static and elastic properties
and ab initio molecular dynamics. <em>Comp. Phys. Commun.</em> <strong>107</strong>, 187 (1997).</p>
</li>
<li>
<p>Sohrab Ismail-Beigi and T.A. Arias. New algebraic formulation of density functional calculation.
<em>Comp. Phys. Comm.</em> <strong>128</strong>, 1-45 (2000)</p>
</li>
<li>
<p>C. Yang, J. C. Meza, B. Lee, L.-W. Wang, KSSOLV - a MATLAB toolbox for solving the
Kohn-Sham equations, <em>ACM Trans. Math. Softw.</em> <strong>36</strong>, 1–35 (2009)</p>
</li>
</ul>
<p>Books:</p>
<ul>
<li>
<p>Richard Milton Martin. <em>Electronic Structure: Basic Theory and Practical Methods</em>.
Cambridge University Press, 2004.</p>
</li>
<li>
<p>Jorge Kohanoff. <em>Electronic Structure Calculations for Solids and Molecules:
Theory and Computational Methods</em>.
Cambridge University Press, 2006.</p>
</li>
<li>
<p>Dominik Marx and Jürg Hutter. <em>Ab Initio Molecular Dynamics: Basic Theory and
Advanced Methods</em>. Cambridge University Press, 2009.</p>
</li>
</ul>
</article></div>