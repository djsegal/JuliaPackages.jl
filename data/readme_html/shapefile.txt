<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-shapefile" class="anchor" aria-hidden="true" href="#shapefile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Shapefile</h1>
<p dir="auto"><a href="https://JuliaGeo.github.io/Shapefile.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaGeo.github.io/Shapefile.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGeo/Shapefile.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaGeo/Shapefile.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGeo/Shapefile.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/515d6802b836fe07c42eab93a800bbd1cdc0791e9ec09b05ba724d62bae8fe8c/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696147656f2f536861706566696c652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d70524b45774b6b65546b" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGeo/Shapefile.jl/branch/master/graph/badge.svg?token=pRKEwKkeTk" style="max-width: 100%;"></a></p>
<p dir="auto">This library supports reading and writing ESRI Shapefiles in pure Julia.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">Basic example of reading a shapefile from test cases:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Shapefile

path = joinpath(dirname(pathof(Shapefile)),&quot;..&quot;,&quot;test&quot;,&quot;shapelib_testcases&quot;,&quot;test.shp&quot;)
table = Shapefile.Table(path)

# if you only want the geometries and not the metadata in the DBF file
geoms = Shapefile.shapes(table)

# whole columns can be retrieved by their name
table.Descriptio  # =&gt; Union{String, Missing}[&quot;Square with triangle missing&quot;, &quot;Smaller triangle&quot;, missing]

# example function that iterates over the rows and gathers shapes that meet specific criteria
function selectshapes(table)
    geoms = empty(Shapefile.shapes(table))
    for row in table
        if !ismissing(row.TestDouble) &amp;&amp; row.TestDouble &lt; 2000.0
            push!(geoms, Shapefile.shape(row))
        end
    end
    return geoms
end

# the metadata can be converted to other Tables such as DataFrame
using DataFrames
df = DataFrame(table)"><pre><span class="pl-k">using</span> Shapefile

path <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Shapefile)),<span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>shapelib_testcases<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>test.shp<span class="pl-pds">"</span></span>)
table <span class="pl-k">=</span> Shapefile<span class="pl-k">.</span><span class="pl-c1">Table</span>(path)

<span class="pl-c"><span class="pl-c">#</span> if you only want the geometries and not the metadata in the DBF file</span>
geoms <span class="pl-k">=</span> Shapefile<span class="pl-k">.</span><span class="pl-c1">shapes</span>(table)

<span class="pl-c"><span class="pl-c">#</span> whole columns can be retrieved by their name</span>
table<span class="pl-k">.</span>Descriptio  <span class="pl-c"><span class="pl-c">#</span> =&gt; Union{String, Missing}["Square with triangle missing", "Smaller triangle", missing]</span>

<span class="pl-c"><span class="pl-c">#</span> example function that iterates over the rows and gathers shapes that meet specific criteria</span>
<span class="pl-k">function</span> <span class="pl-en">selectshapes</span>(table)
    geoms <span class="pl-k">=</span> <span class="pl-c1">empty</span>(Shapefile<span class="pl-k">.</span><span class="pl-c1">shapes</span>(table))
    <span class="pl-k">for</span> row <span class="pl-k">in</span> table
        <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">ismissing</span>(row<span class="pl-k">.</span>TestDouble) <span class="pl-k">&amp;&amp;</span> row<span class="pl-k">.</span>TestDouble <span class="pl-k">&lt;</span> <span class="pl-c1">2000.0</span>
            <span class="pl-c1">push!</span>(geoms, Shapefile<span class="pl-k">.</span><span class="pl-c1">shape</span>(row))
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> geoms
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> the metadata can be converted to other Tables such as DataFrame</span>
<span class="pl-k">using</span> DataFrames
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(table)</pre></div>
<p dir="auto">Shapefiles can contain multiple parts for each shape entity.
Use <code>GeoInterface.coordinates</code> to fully decompose the shape data into parts.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Example of converting the 1st shape of the file into parts (array of coordinates)
julia&gt; GeoInterface.coordinates(Shapefile.shape(first(table)))
2-element Vector{Vector{Vector{Vector{Float64}}}}:
 [[[20.0, 20.0], [20.0, 30.0], [30.0, 30.0], [20.0, 20.0]]]
 [[[0.0, 0.0], [100.0, 0.0], [100.0, 100.0], [0.0, 100.0], [0.0, 0.0]]]"><pre><span class="pl-c"><span class="pl-c">#</span> Example of converting the 1st shape of the file into parts (array of coordinates)</span>
julia<span class="pl-k">&gt;</span> GeoInterface<span class="pl-k">.</span><span class="pl-c1">coordinates</span>(Shapefile<span class="pl-k">.</span><span class="pl-c1">shape</span>(<span class="pl-c1">first</span>(table)))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{Vector{Vector{Float64}}}}<span class="pl-k">:</span>
 [[[<span class="pl-c1">20.0</span>, <span class="pl-c1">20.0</span>], [<span class="pl-c1">20.0</span>, <span class="pl-c1">30.0</span>], [<span class="pl-c1">30.0</span>, <span class="pl-c1">30.0</span>], [<span class="pl-c1">20.0</span>, <span class="pl-c1">20.0</span>]]]
 [[[<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">100.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">100.0</span>, <span class="pl-c1">100.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]]]</pre></div>
<h2 dir="auto"><a id="user-content-alternative-packages" class="anchor" aria-hidden="true" href="#alternative-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternative packages</h2>
<p dir="auto">If you want another lightweight pure Julia package for reading feature files, consider
also <a href="https://github.com/JuliaGeo/GeoJSON.jl">GeoJSON.jl</a>.</p>
<p dir="auto">For more fully featured support for reading and writing geospatial data, at the
cost of a larger binary dependency, look at <a href="https://github.com/yeesian/ArchGDAL.jl/">ArchGDAL.jl</a>
or <a href="https://github.com/evetion/GeoDataFrames.jl">GeoDataFrames.jl</a>.</p>
</article></div>