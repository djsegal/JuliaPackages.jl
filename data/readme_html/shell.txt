<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-shell" class="anchor" aria-hidden="true" href="#shell"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Shell</h1>
<p><a href="https://travis-ci.org/innerlee/Shell.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/76b7a352d1082dbc76f69c22aa74030f5a778aa7dd232b408f78973a656933b9/68747470733a2f2f7472617669732d63692e6f72672f696e6e65726c65652f5368656c6c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/innerlee/Shell.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/innerlee/shell-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/92d0040a702e92a2b535c6a24f00b2e2efb086afe40837313c14d0a8ee91ae40/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f763534357036733572626977747832793f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/v545p6s5rbiwtx2y?svg=true" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Shell

julia&gt; Shell.run(&quot;ls&quot;)
appveyor.yml  LICENSE.md  README.md  REQUIRE  src  test
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Shell

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>ls<span class="pl-pds">"</span></span>)
appveyor<span class="pl-k">.</span>yml  LICENSE<span class="pl-k">.</span>md  README<span class="pl-k">.</span>md  REQUIRE  src  test</pre></div>
<p>Now you can run string commands in Julia!</p>
<p>Supports <code>cmd</code>, <code>powershell</code> and <code>wsl</code> in Windows!</p>
<blockquote>
<p><strong>WARN</strong>:
The implementation basically put the string into a script file and run that file.
So it is <strong>error prone</strong> because you have to deal with all the subtle stuff like escaping spaces, quotes, etc.
This tool is good for running simple things like <code>ls</code>, <code>echo</code>, etc.
But <strong>do not</strong> use this in your serious scripts unless you have double checked its correctness.</p>
</blockquote>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Shell

julia&gt; Shell.run(raw&quot;echo $SHELL&quot;, capture=true)
&quot;/bin/zsh&quot;

julia&gt; Shell.run(raw&quot;for i in dust junk; do echo $i; done&quot;)
dust
junk

julia&gt; files = [&quot;temp file 1&quot;, &quot;temp file 2&quot;]
2-element Array{String,1}:
 &quot;temp file 1&quot;
 &quot;temp file 2&quot;

julia&gt; filelist = esc`$files.txt`
&quot;'temp file 1.txt' 'temp file 2.txt'&quot;

julia&gt; Shell.run(&quot;touch $filelist&quot;)

julia&gt; Shell.run(&quot;touch $(esc`$files.$[&quot;txt&quot;,&quot;md&quot;]`)&quot;, dryrun=true)
touch 'temp file 1.txt' 'temp file 1.md' 'temp file 2.txt' 'temp file 2.md'

julia&gt; Shell.run(&quot;ls &gt; 'temp file 0.txt'&quot;)

julia&gt; Shell.run(&quot;cat 'temp file 0.txt' | grep temp&quot;)
temp file 0.txt
temp file 1.txt
temp file 2.txt

julia&gt; Shell.run(&quot;rm 'temp file'*&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Shell

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>echo $SHELL<span class="pl-pds">"</span></span>, capture<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-s"><span class="pl-pds">"</span>/bin/zsh<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>for i in dust junk; do echo $i; done<span class="pl-pds">"</span></span>)
dust
junk

julia<span class="pl-k">&gt;</span> files <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>temp file 1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>temp file 2<span class="pl-pds">"</span></span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>temp file 1<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>temp file 2<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> filelist <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">esc</span>`</span>$files.txt<span class="pl-pds">`</span></span>
<span class="pl-s"><span class="pl-pds">"</span>'temp file 1.txt' 'temp file 2.txt'<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>touch <span class="pl-v">$filelist</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>touch <span class="pl-v">$(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">esc</span>`</span>$files.$["txt","md"]<span class="pl-pds">`</span></span>)</span><span class="pl-pds">"</span></span>, dryrun<span class="pl-k">=</span><span class="pl-c1">true</span>)
touch <span class="pl-s"><span class="pl-pds">'</span>temp file 1.txt<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>temp file 1.md<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>temp file 2.txt<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>temp file 2.md<span class="pl-pds">'</span></span>

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>ls &gt; 'temp file 0.txt'<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>cat 'temp file 0.txt' | grep temp<span class="pl-pds">"</span></span>)
temp file <span class="pl-c1">0.</span>txt
temp file <span class="pl-c1">1.</span>txt
temp file <span class="pl-c1">2.</span>txt

julia<span class="pl-k">&gt;</span> Shell<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>rm 'temp file'*<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.clone(&quot;https://github.com/innerlee/Shell.jl&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/innerlee/Shell.jl<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h3>
<ul>
<li>use <code>esc`your string`</code> to help you escape (not working for <code>cmd</code> in Windows).</li>
<li>use <code>dryrun=true</code> to check the command to be run without actually running.</li>
<li>Change default shell by calling <code>Shell.setshell("powershell")</code>.</li>
<li>The output chomps by default. Change this by calling <code>Shell.setchomp(false)</code>.</li>
<li>In Windows, the code page may be changed to 65001 after running.</li>
</ul>
<h3><a id="user-content-more-notes" class="anchor" aria-hidden="true" href="#more-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Notes</h3>
<p>See the discussions <a href="https://discourse.julialang.org/t/a-small-package-to-run-string-as-shell-command/6163" rel="nofollow">here</a>.
(You can use <code>esc`your argmuments`</code> to take advantage of the built-in escaping of <code>Cmd</code> objects, though.)
A "better" way is to learn the <code>Cmd</code> object and perhaps the <code>Glob.jl</code> package as pointed out <a href="https://discourse.julialang.org/t/a-small-package-to-run-string-as-shell-command/6163/5" rel="nofollow">here</a>.</p>
</article></div>