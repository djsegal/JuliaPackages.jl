<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-georegionsjl" class="anchor" aria-hidden="true" href="#georegionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong><div align="center">GeoRegions.jl</div></strong></h1>
<p align="center">
  <a href="https://www.repostatus.org/#active" rel="nofollow">
    <img alt="Repo Status" src="https://camo.githubusercontent.com/3b32dc5183a4fd39fab11f974c151297877f38723b8b7c450d42cbf0d9d9849a/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://www.repostatus.org/badges/latest/active.svg?style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://travis-ci.com/github/JuliaClimate/GeoRegions.jl" rel="nofollow">
    <img alt="Travis CI" src="https://camo.githubusercontent.com/13a75bdf77932e3d94b3c7a023c4cc3b738b18e703aed280636f8aec7041af4f/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961436c696d6174652f47656f526567696f6e732e6a6c2e7376673f6272616e63683d6d6173746572267374796c653d666c61742d737175617265" data-canonical-src="https://travis-ci.com/JuliaClimate/GeoRegions.jl.svg?branch=master&amp;style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://github.com/JuliaClimate/GeoRegions.jl/actions?query=workflow%3ADocumentation">
    <img alt="Documentation Build" src="https://github.com/JuliaClimate/GeoRegions.jl/workflows/Documentation/badge.svg" style="max-width:100%;">
  </a>
  <br>
  <a href="https://mit-license.org" rel="nofollow">
    <img alt="MIT License" src="https://camo.githubusercontent.com/ad3ef6f300e4672d89c879c54ee490a4bae95c62b0930b74eecdf702205af3c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square" style="max-width:100%;">
  </a>
	<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/535a2fe20a41bb2533c982d5192ec70981c47afedcdf1c635f1adc4e6b67467a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4a756c6961436c696d6174652f47656f526567696f6e732e6a6c2e7376673f7374796c653d666c61742d737175617265"><img alt="MIT License" src="https://camo.githubusercontent.com/535a2fe20a41bb2533c982d5192ec70981c47afedcdf1c635f1adc4e6b67467a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4a756c6961436c696d6174652f47656f526567696f6e732e6a6c2e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/github/v/release/JuliaClimate/GeoRegions.jl.svg?style=flat-square" style="max-width:100%;"></a>
  <a href="https://juliaclimate.github.io/GeoRegions.jl/stable/" rel="nofollow">
    <img alt="Latest Documentation" src="https://camo.githubusercontent.com/509d23557a7f7d925ca45b7b398e7d8d15eda8c8fc6c4f093b522b198a2c125f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg?style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://juliaclimate.github.io/GeoRegions.jl/dev/" rel="nofollow">
    <img alt="Latest Documentation" src="https://camo.githubusercontent.com/60c56f486c48f0113ea48065c9bacbd023522f60dd57bd23d1f296c6c62efce8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" style="max-width:100%;">
  </a>
</p>
<p><strong>Created By:</strong> Nathanael Wong (<a href="mailto:nathanaelwong@fas.harvard.edu">nathanaelwong@fas.harvard.edu</a>)</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Introduction</strong></h2>
<p><code>GeoRegions.jl</code> is a Julia package that aims to streamline the following processes:</p>
<ul>
<li>query if a point / grid is within a specified boundary</li>
<li>extract point data (given coordinates) from a given region</li>
<li>extract gridded data (given grid boundaries) from a larger (parent) region (grid must be entirely within the parent region)</li>
</ul>
<p>In general, these boundaries can be specified either using <code>[N,S,E,W]</code> coordinates, or by <code>longitude</code> and <code>latitude</code> vectors.</p>
<p><code>GeoRegions.jl</code> can be installed via</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add GeoRegions
"><pre><code>] add GeoRegions
</code></pre></div>
<h2><a id="user-content-workflow" class="anchor" aria-hidden="true" href="#workflow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Workflow</strong></h2>
<h3><a id="user-content-is-pointgrid-in-region" class="anchor" aria-hidden="true" href="#is-pointgrid-in-region"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Is Point/Grid in (Region)?</strong></h3>
<p><strong>Relevant Functions:</strong> <code>ispointinregion</code>, <code>isgridinregion</code></p>
<p>Let us define a <code>(Region)</code> domain specified by <code>[rN,rS,rE,rW]</code>, with <code>rlon</code> and <code>rlat</code> being the longitude and latitude vectors of the region.<br>
Given that we have a point coordinate <code>(plon,plat)</code>, and grid boundaries defined by <code>[N,S,E,W]</code>,</p>
<p>We can check if the point is within the region via:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="ispointinregion(plon,plat,rlon,rlat)
ispointinregion([plon,plat],rlon,rlat)
ispointinregion(plon,plat,[rN,rS,rE,rW])
ispointinregion([plon,plat],[rN,rS,rE,rW])
"><pre><code>ispointinregion(plon,plat,rlon,rlat)
ispointinregion([plon,plat],rlon,rlat)
ispointinregion(plon,plat,[rN,rS,rE,rW])
ispointinregion([plon,plat],[rN,rS,rE,rW])
</code></pre></div>
<p>And we can check if the grid is within the region via:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="isgridinregion([N,S,E,W],rlon,rlat)
isgridinregion([N,S,E,W],[rN,rS,rE,rW])
"><pre><code>isgridinregion([N,S,E,W],rlon,rlat)
isgridinregion([N,S,E,W],[rN,rS,rE,rW])
</code></pre></div>
<h3><a id="user-content-extract-pointgrid-data-from-parent-region" class="anchor" aria-hidden="true" href="#extract-pointgrid-data-from-parent-region"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Extract Point/Grid Data from Parent (Region)</strong></h3>
<p><strong>Relevant Functions:</strong> <code>regionextractpoint</code>, <code>regionextractgrid</code>, <code>regionextractgrid!</code></p>
<p>If we have a set of <strong>gridded</strong> data <code>rdata</code> in a <code>(Region)</code> domain with <code>rlon</code> and <code>rlat</code> being the longitude and latitude vectors defining the region, then given that we have a point coordinate <code>(plon,plat)</code>, and grid boundaries defined by <code>[N,S,E,W]</code>,</p>
<p>We can extract the data nearest the coordinate <code>(plon,plat)</code> via:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="regionextractpoint(rdata,plon,plat,rlon,rlat)
"><pre><code>regionextractpoint(rdata,plon,plat,rlon,rlat)
</code></pre></div>
<p>We can extract gridded data for a region bounded by <code>[N,S,E,W]</code> via:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="regionextractgrid(rdata,[N,S,E,W],rlon,rlat)
"><pre><code>regionextractgrid(rdata,[N,S,E,W],rlon,rlat)
</code></pre></div>
<h2><a id="user-content-georegions" class="anchor" aria-hidden="true" href="#georegions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>GeoRegions</strong></h2>
<p><code>GeoRegions.jl</code> also utilizes the concept of a <code>GeoRegion</code> (short for Geographical Region), which is simply a set of predefined rectilinear regions specified by <code>[N,S,E,W]</code> coordinates.  This is similar to the Python module <code>regionmasks</code> (see <a href="https://github.com/mathause/regionmask">https://github.com/mathause/regionmask</a>), which has also inspired many of the functionalities found in <code>GeoRegions.jl</code>.</p>
<p>In <code>GeoRegions.jl</code>, a set of GeoRegions have already been specified in <code>gregiontemplate.txt</code> in the <code>src</code> folder.  These include:</p>
<ul>
<li>A global region <code>GLB</code> encompassing the entire globe</li>
<li>Giorgi Regions (from <em>Giorgi and Franciso [2000]</em>), specified by <code>GF_xxx</code>, where <code>xxx</code> is a region in <em>Giorgi and Franciso [2000]</em></li>
</ul>
<p>Currently, all GeoRegions are rectilinear in the <code>(lon,lat)</code> domain.  However, future releases of <code>GeoRegions.jl</code> aim to be more flexible in their specification of region boundaries, allowing for arbitrary <code>polygons</code> as defined in <code>GeometryTypes.jl</code> and <code>PolygonOps.jl</code></p>
<h4><a id="user-content-setup--gregioncopy" class="anchor" aria-hidden="true" href="#setup--gregioncopy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Setup / <code>gregioncopy()</code></strong></h4>
<p>Upon running any function from <code>GeoRegions.jl</code> involving the usage of <strong>GeoRegions</strong>, unless an array containing GeoRegion information is included as input, the function <code>gregioncopy()</code> is called.  <code>gregioncopy()</code> does several things:</p>
<ul>
<li><code>gregioncopy()</code> checks for a file named <code>gregions.txt</code> in <code>jfol = $(DEPOT_PATH[1])/files/GeoRegions/</code></li>
<li>if <code>$(jfol)/gregions.txt</code> does not exist, <code>gregioncopy()</code> will
<ul>
<li>create the directory <code>jfol</code> (if it does not already exist)</li>
<li>copy the information from <code>src/gregionstemplate.txt</code> into <code>$(jfol)/gregions.txt</code></li>
</ul>
</li>
<li><strong>NB:</strong> If you want to reset <code>gregions.txt</code> to the default GeoRegions template, <code>gregioncopy(overwrite=true)</code> will overwrite <code>gregions.txt</code> if it already exists</li>
</ul>
<h4><a id="user-content-query-for-georegion-information" class="anchor" aria-hidden="true" href="#query-for-georegion-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Query for GeoRegion Information</strong></h4>
<ul>
<li><code>gregioninfoall()</code> displays all the available GeoRegions in <code>gregions.txt</code> and their properties in a table format</li>
<li><code>isgeoregion(ID)</code> checks if <code>$(ID)</code> is a valid GeoRegion identifier in <code>gregions.txt</code></li>
</ul>
<h4><a id="user-content-adding-custom-georegions" class="anchor" aria-hidden="true" href="#adding-custom-georegions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Adding Custom GeoRegions</strong></h4>
<p>You can add your own custom GeoRegions to <code>gregions.txt</code> using the function <code>gregioninfoadd()</code>.  There are two methods to accomplish this:</p>
<ul>
<li>You can create a textfile in the same format as <code>gregions.txt</code> (e.g. <code>$(path)/addgreg.txt</code>), and point <code>gregioninfoadd()</code> to this textfile, so for example
<ul>
<li><code>gregioninfoadd("$(path)/addgreg.txt")</code></li>
</ul>
</li>
<li>Or if you want to add in individual GeoRegions manually, you can do it as follows, for example:
<ul>
<li><code>gregioninfoadd(ID="TST",parent="GLB",N=30,S=25,W=5,E=8,name="Test",throw=false,note="Test")</code></li>
<li>will add the line <code>TST,GLB,30,5,25,8,Test,Test</code> to <code>gregions.txt</code></li>
</ul>
</li>
</ul>
<h4><a id="user-content-extracting-data-for-georegion" class="anchor" aria-hidden="true" href="#extracting-data-for-georegion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extracting data for GeoRegion</h4>
<p>Suppose we are given gridded data <code>rdata</code> spanning longitude <code>rlon</code> and latitude <code>rlat</code>, we extract data for a GeoRegion <code>greg</code> via the following steps:</p>
<ol>
<li><code>gregiongridvec(greg,rlon,rlat)</code> returns a <code>Dict</code> (let's call it <code>rinfo</code>) containing necessary information required for extraction of data from <code>rdata</code></li>
<li><code>regionextractgrid(rdata,rinfo)</code> will return the data <code>gdata</code> for the GeoRegion <code>greg</code></li>
</ol>
<p>Therefore we can call <code>regionextractgrid()</code> multiple times in loops for the same region <code>greg</code> without needing to reextract region information, thus saving time.  This is particularly useful when dealing with data over many timesteps.</p>
</article></div>