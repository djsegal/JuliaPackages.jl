<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-keldyshjl" class="anchor" aria-hidden="true" href="#keldyshjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keldysh.jl</h1>
<p dir="auto"><a href="https://github.com/kleinhenz/Keldysh.jl/actions"><img src="https://github.com/kleinhenz/Keldysh.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><code>Keldysh.jl</code> provides a set of tools for working with non-equilibrium Keldysh Green's functions.
It contains types to represent contours, grids defined on these contours, and two-time Green's functions defined on these grids.
Additionally, it provides functions for generating Green's functions, performing integration on a contour and hdf5 serialization.</p>
<p dir="auto">Credit to Andrey Antipov and Igor Krivenko for designing a first version of the abstractions implemented here.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The following code constructs a Green's function object from a spectral density and plots the Matsubara, retarded, and lesser Keldysh components.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Keldysh, PyPlot

# first define a contour
tmax = 5.0
β = 10.0
c = FullContour(; tmax, β)

# now define a grid which represents a discretization of the contour
nt = 51
ntau = 101
grid = FullTimeGrid(c, nt, ntau)

# construct a spectral density
dos = flat_dos(; D=5.0, ν=10.0)

# construct a Green's function from a spectral density
G = FullTimeGF(dos, grid)

fig, axes = plt.subplots(nrows=2, ncols=2)
make_plot = (ax, xlabel, ylabel, t, f...) -&gt; begin
  map(fi -&gt; ax.plot(t, fi), f)
  ax.set_xlabel(xlabel); ax.set_ylabel(ylabel)
end

ω = range(-10.0, 10.0, length=1001)
t = realtimes(grid)
τ = imagtimes(grid)

make_plot(axes[1], L&quot;ω&quot;, L&quot;Γ(ω)/π&quot;, ω, dos.(ω))
make_plot(axes[2], L&quot;τ&quot;, L&quot;G^M(τ)&quot;, τ, G[:matsubara])
make_plot(axes[3], L&quot;t&quot;, L&quot;G^&lt;(t, 0)&quot;, t, real(G[:lesser][:,1]), imag(G[:lesser][:,1]))
make_plot(axes[4], L&quot;t&quot;, L&quot;G^R(t, 0)&quot;, t, real(G[:retarded][:,1]), imag(G[:retarded][:,1]))

fig.tight_layout()
fig.savefig(&quot;keldysh_components.jpg&quot;, dpi=200)"><pre><span class="pl-k">using</span> Keldysh, PyPlot

<span class="pl-c"><span class="pl-c">#</span> first define a contour</span>
tmax <span class="pl-k">=</span> <span class="pl-c1">5.0</span>
β <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
c <span class="pl-k">=</span> <span class="pl-c1">FullContour</span>(; tmax, β)

<span class="pl-c"><span class="pl-c">#</span> now define a grid which represents a discretization of the contour</span>
nt <span class="pl-k">=</span> <span class="pl-c1">51</span>
ntau <span class="pl-k">=</span> <span class="pl-c1">101</span>
grid <span class="pl-k">=</span> <span class="pl-c1">FullTimeGrid</span>(c, nt, ntau)

<span class="pl-c"><span class="pl-c">#</span> construct a spectral density</span>
dos <span class="pl-k">=</span> <span class="pl-c1">flat_dos</span>(; D<span class="pl-k">=</span><span class="pl-c1">5.0</span>, ν<span class="pl-k">=</span><span class="pl-c1">10.0</span>)

<span class="pl-c"><span class="pl-c">#</span> construct a Green's function from a spectral density</span>
G <span class="pl-k">=</span> <span class="pl-c1">FullTimeGF</span>(dos, grid)

fig, axes <span class="pl-k">=</span> plt<span class="pl-k">.</span><span class="pl-c1">subplots</span>(nrows<span class="pl-k">=</span><span class="pl-c1">2</span>, ncols<span class="pl-k">=</span><span class="pl-c1">2</span>)
make_plot <span class="pl-k">=</span> (ax, xlabel, ylabel, t, f<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
  <span class="pl-c1">map</span>(fi <span class="pl-k">-&gt;</span> ax<span class="pl-k">.</span><span class="pl-c1">plot</span>(t, fi), f)
  ax<span class="pl-k">.</span><span class="pl-c1">set_xlabel</span>(xlabel); ax<span class="pl-k">.</span><span class="pl-c1">set_ylabel</span>(ylabel)
<span class="pl-k">end</span>

ω <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, length<span class="pl-k">=</span><span class="pl-c1">1001</span>)
t <span class="pl-k">=</span> <span class="pl-c1">realtimes</span>(grid)
τ <span class="pl-k">=</span> <span class="pl-c1">imagtimes</span>(grid)

<span class="pl-c1">make_plot</span>(axes[<span class="pl-c1">1</span>], <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>ω<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>Γ(ω)/π<span class="pl-pds">"</span></span>, ω, <span class="pl-c1">dos</span>.(ω))
<span class="pl-c1">make_plot</span>(axes[<span class="pl-c1">2</span>], <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>τ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>G^M(τ)<span class="pl-pds">"</span></span>, τ, G[<span class="pl-c1">:matsubara</span>])
<span class="pl-c1">make_plot</span>(axes[<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>t<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>G^&lt;(t, 0)<span class="pl-pds">"</span></span>, t, <span class="pl-c1">real</span>(G[<span class="pl-c1">:lesser</span>][:,<span class="pl-c1">1</span>]), <span class="pl-c1">imag</span>(G[<span class="pl-c1">:lesser</span>][:,<span class="pl-c1">1</span>]))
<span class="pl-c1">make_plot</span>(axes[<span class="pl-c1">4</span>], <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>t<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>G^R(t, 0)<span class="pl-pds">"</span></span>, t, <span class="pl-c1">real</span>(G[<span class="pl-c1">:retarded</span>][:,<span class="pl-c1">1</span>]), <span class="pl-c1">imag</span>(G[<span class="pl-c1">:retarded</span>][:,<span class="pl-c1">1</span>]))

fig<span class="pl-k">.</span><span class="pl-c1">tight_layout</span>()
fig<span class="pl-k">.</span><span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>keldysh_components.jpg<span class="pl-pds">"</span></span>, dpi<span class="pl-k">=</span><span class="pl-c1">200</span>)</pre></div>
<p dir="auto">This produces the following output:
<a target="_blank" rel="noopener noreferrer" href="doc/images/keldysh_components.jpg"><img src="doc/images/keldysh_components.jpg" alt="keldysh_components" style="max-width: 100%;"></a></p>
<p dir="auto">See also <a href="doc/examples/anderson_nca.jl">anderson_nca.jl</a> which implements a NCA solver for the anderson impurity model using <code>Keldysh.jl</code>.</p>
</article></div>