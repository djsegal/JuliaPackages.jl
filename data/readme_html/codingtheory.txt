<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 align="center"><a id="user-content-----codingtheoryjl" class="anchor" aria-hidden="true" href="#----codingtheoryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>
    CodingTheory.jl
</h1>

<p><a href="https://jakewilliami.github.io/CodingTheory.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/jakewilliami/CodingTheory.jl/actions?query=workflow%3ACI"><img src="https://github.com/invenia/PkgTemplates.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7fbf197c8358c4828cfaf8739134a64c1e152bdb985c69dfb7e01461d517de73/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d6d61747572696e672d677265656e"><img src="https://camo.githubusercontent.com/7fbf197c8358c4828cfaf8739134a64c1e152bdb985c69dfb7e01461d517de73/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d6d61747572696e672d677265656e" alt="Project Status" data-canonical-src="https://img.shields.io/badge/status-maturing-green" style="max-width:100%;"></a></p>
<p>This is a minimal package for a pure Julia implementation of tools used in <a href="https://en.wikipedia.org/wiki/Coding_theory" rel="nofollow">Coding Theory</a>.  This is the science of accurately transmitting information through a noisy channel.</p>
<h2><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Background</h2>
<p>We assume that Alice and Bob communicate by sending sequences of symbols from a finite set <em>Σ</em>, which we call the <strong>alphabet</strong>.  We always use <em>q</em> to stand for the size of the set of symbols, |<em>Σ</em>|.  A <strong>word</strong> is a sequence of symbols from the alphabet <em>Σ</em>.  If <em>w<sub>1</sub>w<sub>2</sub>...w<sub>n</sub></em> is such a word, then <em>n</em> is its <strong>length</strong>.  We use <em>Σ<sup>n</sup></em> to denote the set of words with length <em>n</em> using symbols in <em>Σ</em>.  In general, the number of words in <em>Σ<sup>n</sup></em> is</p>
<p align="center">
    |Σ<sup>n</sup>| = q<sup>n</sup>.
</p>
<p><strong>Block codes</strong> are codes in which Alice transmits words of a preditermined and fixed length.  A <strong>code</strong> is a subset <em>C ⊆ Σ<sup>n</sup></em>.  The words in <em>C</em> are called <strong>code words</strong>.  We say that <em>n</em> is the <strong>block length</strong>.  We use <em>M</em> to stand for <em>|C|</em>, the number of code words.  Alice has a set <em>ℳ</em>, some of which she wants to send to Bob, so she has the bijective encoding function</p>
<p align="center">
    E : ℳ ⟶ C.
</p>  
<p>Similarly, Bob has a decoding function</p>
<p align="center">
    D : Σ<sup>n</sup> ⟶ C ∪ {?},
</p>
<p>Where Bob uses the <em>?</em> symbol when he cannot confidently decode.  So if Alice wishes to communicate a message, she transmits a code word <em>w = E(M)</em>.  <em>w</em> may be corrupted to <em>w' ≠ w</em>.  Then Bob can decode <em>w'</em> as <em>E<sup>-1</sup>(D(w))</em>.  If Bob is not certain how to decode, then <em>D(w')</em> may be '<em>?</em>', which means that Bob can tell an error has occurred but is not certain what that error is.</p>
<p>If <em>ℳ ⊆ Σ<sup>k</sup></em> is the set of messages, then <em>k</em> is the <strong>message length</strong>.</p>
<h2><a id="user-content-a-note-on-the-number-of-codewords-in-a-code" class="anchor" aria-hidden="true" href="#a-note-on-the-number-of-codewords-in-a-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A note on the number of codewords in a code</h2>
<p>We have some algorithms brute-force searching for the codewords in a [q, n, d]-code.  These algorithms are brute-force as they do not assume that q is a prime power.  Therefore, they go through all possible codewords of a [q, n]-code, and narrow down the code based on d.  There algorithms are namely <code>get_codewords_greedy</code> and <code>get_codewords_random</code>, both of which using <code>get_all_codewords</code>.  The <code>get_codewords</code> function iterates through possibilities of <code>get_codeword_random</code> and chooses the maximum of those iterations or the <code>get_codeword_greedy</code> length.  Despite the name, <code>get_codewords</code> is only a <strong>probably</strong> candidate.  Increate the keyword argument <code>m</code> to decrease the likelihood that there is a code with more codewords while maintaining the bound of the distance.  Furthermore, there is a <code>get_codewords</code> method that lists all linear combinations of rows of a generator matrix.</p>
</article></div>