<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-latticesitesjl" class="anchor" aria-hidden="true" href="#latticesitesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LatticeSites.jl</h1>
<p><a href="https://travis-ci.org/Roger-luo/LatticeSites.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49015b1630a20854e66c5b7b679e6259115f1442/68747470733a2f2f7472617669732d63692e6f72672f526f6765722d6c756f2f4c61747469636553697465732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Roger-luo/LatticeSites.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Type for different kind of sites on different lattices.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<pre><code>pkg&gt; add https://github.com/Roger-luo/LatticeSites.jl.git
</code></pre>
<h2><a id="user-content-intro" class="anchor" aria-hidden="true" href="#intro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Intro</h2>
<p>This package provides types for sites, which defines the configuration of a lattice.</p>
<p>Binary configuration label is provided as:</p>
<ul>
<li><code>Bit</code>,  refers to <code>0</code>/<code>1</code></li>
<li><code>Spin</code>, refers to <code>-1</code>/<code>+1</code></li>
<li><code>Half</code>, refers to <code>-0.5</code>/<code>+0.5</code></li>
<li><code>Clock</code>, refers to the 2D q-state clock model with <code>q</code> discrete spin values (<code>1:q</code>)</li>
<li><code>Potts</code>, refers to the standard Potts model with values <code>-q, ..., q</code></li>
<li><code>Continuous</code>, is in development still and not ready.</li>
</ul>
<p><code>Array</code>, <code>StaticArray</code> and etc. (e.g <code>SparseArray</code>) is supported for store configurations.</p>
<p>It is simple, and you can use it like a <code>Number</code> (but it is not a <code>Number</code>)</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(Bit{Float64})
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(Bit{Float64}, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Bit{Float64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(SMatrix{<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, Bit{Int}})
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},Bit{Int64},<span class="pl-c1">2</span>,<span class="pl-c1">4</span>}<span class="pl-k">:</span>
<span class="pl-c1">0</span>  <span class="pl-c1">1</span>
<span class="pl-c1">0</span>  <span class="pl-c1">1</span></pre></div>
<p>and to support indexing, you can convert any <code>AbstractArray</code> contains sites to an integer
(as long as this integer type does not overflow).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Int, <span class="pl-c1">rand</span>(SMatrix{<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, Bit{Int}}))
<span class="pl-c1">12</span></pre></div>
<p>There is also a <code>HilbertSpace</code> iterator that help you iterate through the space.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> space <span class="pl-k">=</span> <span class="pl-c1">HilbertSpace</span><span class="pl-c1">{Bit{Int}}</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">HilbertSpace</span><span class="pl-c1">{Bit{Int64},Tuple{2,2},2,4}</span>(Bit{Int64}[<span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(space)
<span class="pl-c1">16</span><span class="pl-k">-</span>element Array{Array{Bit{Int64},<span class="pl-c1">2</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">0</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span>]
 [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span>]</pre></div>
<p>We use the convention that the first index <code>a[1]</code> take the first digit position
during the convention, which is opposite to natural notation <code>0b0101</code>, where the last
digit in bit string take the first position.</p>
<p>In short</p>
<p><code>0b011</code> is equivalent to <code>Bit[1, 1, 0]</code></p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p>Apache License 2.0</p>
</article></div>