<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polynomialfactors" class="anchor" aria-hidden="true" href="#polynomialfactors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PolynomialFactors</h1>
<p dir="auto"><a href="https://jverzani.github.io/PolynomialFactors.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jverzani.github.io/PolynomialFactors.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jverzani/PolynomialFactors.jl/actions"><img src="https://github.com/jverzani/PolynomialFactors.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jverzani/PolynomialFactors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cc1b9346cf730672ffc790bb3ca08d1bfda77375c2a4188339b1aa1ffed71c20/68747470733a2f2f636f6465636f762e696f2f67682f6a7665727a616e692f506f6c796e6f6d69616c466163746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jverzani/PolynomialFactors.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A package for factoring polynomials with integer or rational coefficients over the integers.</p>
<p dir="auto">For polynomials over the integers or rational numbers, this package provides</p>
<ul dir="auto">
<li>
<p dir="auto">a <code>factor</code> command to factor into irreducible factors over the integers;</p>
</li>
<li>
<p dir="auto">a <code>rational_roots</code> function to return the rational roots;</p>
</li>
<li>
<p dir="auto">a <code>powermod</code> function to factor the polynomial over Z/pZ.</p>
</li>
</ul>
<p dir="auto">The implementation is based on the Cantor-Zassenhaus approach, as
detailed in Chapters 14 and 15 of the excellent text <em>Modern Computer Algebra</em> by von zer
Gathen and Gerhard and a paper by Beauzamy, Trevisan, and Wang.</p>
<p dir="auto">The factoring solutions in <code>SymPy.jl</code> or <code>Nemo.jl</code> would be preferred,
in general, especially for larger problems (degree 30 or more, say) where the performance here is not good. However, this package
requires no additional external libraries. (PRs improving performance are most welcome.)</p>
<p dir="auto">Examples:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using AbstractAlgebra, PolynomialFactors;

julia&gt; R, x = ZZ[&quot;x&quot;];

julia&gt; p = prod(x .-[1,1,3,3,3,3,5,5,5,5,5,5])
x^12-44*x^11+874*x^10-10348*x^9+81191*x^8-443800*x^7+1728556*x^6-4818680*x^5+9505375*x^4-12877500*x^3+11306250*x^2-5737500*x+1265625

julia&gt; poly_factor(p)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 3 entries:
  x-5 =&gt; 6
  x-1 =&gt; 2
  x-3 =&gt; 4"><pre class="notranslate"><code>julia&gt; using AbstractAlgebra, PolynomialFactors;

julia&gt; R, x = ZZ["x"];

julia&gt; p = prod(x .-[1,1,3,3,3,3,5,5,5,5,5,5])
x^12-44*x^11+874*x^10-10348*x^9+81191*x^8-443800*x^7+1728556*x^6-4818680*x^5+9505375*x^4-12877500*x^3+11306250*x^2-5737500*x+1265625

julia&gt; poly_factor(p)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 3 entries:
  x-5 =&gt; 6
  x-1 =&gt; 2
  x-3 =&gt; 4
</code></pre></div>
<p dir="auto">As can be seen <code>factor</code> returns a dictionary whose keys are
irreducible factors of the polynomial <code>p</code> as <code>Polynomial</code> objects, the
values being their multiplicity. If the polynomial is non-monic, a
degree <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9c6459d119777ef395f1a42f6a5ed718">$0$</math-renderer> polynomial is there so that the original polynomial can be
recovered as the product  <code>prod(k^v for (k,v) in poly_factor(p))</code>.</p>
<p dir="auto">Here we construct the polynomial in terms of a variable <code>x</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; poly_factor((x-1)^2 * (x-3)^4 * (x-5)^6)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 3 entries:
  x-5 =&gt; 6
  x-1 =&gt; 2
  x-3 =&gt; 4"><pre class="notranslate"><code>julia&gt; poly_factor((x-1)^2 * (x-3)^4 * (x-5)^6)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 3 entries:
  x-5 =&gt; 6
  x-1 =&gt; 2
  x-3 =&gt; 4
</code></pre></div>
<p dir="auto">Factoring over the rationals is really done over the integers, The
first step is to find a common denominator for the coefficients. The
constant polynomial term reflects this.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; R, x = QQ[&quot;x&quot;]
(Univariate Polynomial Ring in x over Rationals, x)

julia&gt; poly_factor( (1//2 - x)^2 * (1//3 - 1//4 * x)^5 )
Dict{AbstractAlgebra.Generic.Poly{Rational{BigInt}},Int64} with 3 entries:
  2//1*x-1//1 =&gt; 2
  3//1*x-4//1 =&gt; 5
  -1//995328  =&gt; 1"><pre class="notranslate"><code>julia&gt; R, x = QQ["x"]
(Univariate Polynomial Ring in x over Rationals, x)

julia&gt; poly_factor( (1//2 - x)^2 * (1//3 - 1//4 * x)^5 )
Dict{AbstractAlgebra.Generic.Poly{Rational{BigInt}},Int64} with 3 entries:
  2//1*x-1//1 =&gt; 2
  3//1*x-4//1 =&gt; 5
  -1//995328  =&gt; 1
</code></pre></div>
<p dir="auto">For some problems big integers are necessary to express the problem:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = prod(x .- collect(1:20))
x^20-210*x^19+20615*x^18-1256850*x^17+53327946*x^16-1672280820*x^15+40171771630*x^14-756111184500*x^13+11310276995381*x^12-135585182899530*x^11+1307535010540395*x^10-10142299865511450*x^9+63030812099294896*x^8-311333643161390640*x^7+1206647803780373360*x^6-3599979517947607200*x^5+8037811822645051776*x^4-12870931245150988800*x^3+13803759753640704000*x^2-8752948036761600000*x+2432902008176640000

julia&gt; poly_factor(p)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 20 entries:
  x-15 =&gt; 1
  x-18 =&gt; 1
  x-17 =&gt; 1
  x-9  =&gt; 1
  x-5  =&gt; 1
  x-14 =&gt; 1
  x-7  =&gt; 1
  x-13 =&gt; 1
  x-11 =&gt; 1
  x-2  =&gt; 1
  x-12 =&gt; 1
  x-1  =&gt; 1
  x-3  =&gt; 1
  x-8  =&gt; 1
  x-10 =&gt; 1
  x-4  =&gt; 1
  x-19 =&gt; 1
  x-16 =&gt; 1
  x-6  =&gt; 1
  x-20 =&gt; 1"><pre class="notranslate"><code>julia&gt; p = prod(x .- collect(1:20))
x^20-210*x^19+20615*x^18-1256850*x^17+53327946*x^16-1672280820*x^15+40171771630*x^14-756111184500*x^13+11310276995381*x^12-135585182899530*x^11+1307535010540395*x^10-10142299865511450*x^9+63030812099294896*x^8-311333643161390640*x^7+1206647803780373360*x^6-3599979517947607200*x^5+8037811822645051776*x^4-12870931245150988800*x^3+13803759753640704000*x^2-8752948036761600000*x+2432902008176640000

julia&gt; poly_factor(p)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 20 entries:
  x-15 =&gt; 1
  x-18 =&gt; 1
  x-17 =&gt; 1
  x-9  =&gt; 1
  x-5  =&gt; 1
  x-14 =&gt; 1
  x-7  =&gt; 1
  x-13 =&gt; 1
  x-11 =&gt; 1
  x-2  =&gt; 1
  x-12 =&gt; 1
  x-1  =&gt; 1
  x-3  =&gt; 1
  x-8  =&gt; 1
  x-10 =&gt; 1
  x-4  =&gt; 1
  x-19 =&gt; 1
  x-16 =&gt; 1
  x-6  =&gt; 1
  x-20 =&gt; 1
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; poly_factor(x^2 - big(2)^256)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 2 entries:
  x+340282366920938463463374607431768211456 =&gt; 1
  x-340282366920938463463374607431768211456 =&gt; 1"><pre class="notranslate"><code>julia&gt; poly_factor(x^2 - big(2)^256)
Dict{AbstractAlgebra.Generic.Poly{BigInt},Int64} with 2 entries:
  x+340282366920938463463374607431768211456 =&gt; 1
  x-340282366920938463463374607431768211456 =&gt; 1
</code></pre></div>
<p dir="auto">Factoring polynomials over a finite field of coefficients, <code>Z_p[x]</code> with <code>p</code> a prime, is also provided by <code>factormod</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; factormod(x^4 + 1, 2)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 1 entry:
  x+1 =&gt; 4

julia&gt; factormod(x^4 + 1, 5)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 2 entries:
  x^2+3 =&gt; 1
  x^2+2 =&gt; 1

julia&gt; factormod(x^4 + 1, 3)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 2 entries:
  x^2+x+2   =&gt; 1
  x^2+2*x+2 =&gt; 1

julia&gt; factormod(x^4 + 1, 7)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 2 entries:
  x^2+3*x+1 =&gt; 1
  x^2+4*x+1 =&gt; 1"><pre class="notranslate"><code>julia&gt; factormod(x^4 + 1, 2)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 1 entry:
  x+1 =&gt; 4

julia&gt; factormod(x^4 + 1, 5)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 2 entries:
  x^2+3 =&gt; 1
  x^2+2 =&gt; 1

julia&gt; factormod(x^4 + 1, 3)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 2 entries:
  x^2+x+2   =&gt; 1
  x^2+2*x+2 =&gt; 1

julia&gt; factormod(x^4 + 1, 7)
Dict{AbstractAlgebra.Generic.Poly{AbstractAlgebra.gfelem{BigInt}},Int64} with 2 entries:
  x^2+3*x+1 =&gt; 1
  x^2+4*x+1 =&gt; 1
</code></pre></div>
<p dir="auto">The keys are polynomials a finite group, not over the integers.</p>
</article></div>