<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-huggingfacedatasets" class="anchor" aria-hidden="true" href="#huggingfacedatasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HuggingFaceDatasets</h1>
<p dir="auto"><a href="https://CarloLucibello.github.io/HuggingFaceDatasets.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/CarloLucibello/HuggingFaceDatasets.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/CarloLucibello/HuggingFaceDatasets.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/CarloLucibello/HuggingFaceDatasets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a15ac62e4e3154f1884f37f915feab4176a86ef380b9753cc1d180923b556bb5/68747470733a2f2f636f6465636f762e696f2f67682f4361726c6f4c75636962656c6c6f2f48756767696e674661636544617461736574732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/CarloLucibello/HuggingFaceDatasets.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">HuggingFaceDatasets.jl is a non-official julia wrapper around the python package  <code>datasets</code> from Hugging Face. <code>datasets</code> contains a large collection of machine learning datasets (see <a href="https://huggingface.co/datasets" rel="nofollow">here</a> for a list) that this package makes available to the julia ecosystem.</p>
<p dir="auto">This package is built on top of <a href="https://github.com/cjdoris/PythonCall.jl">PythonCall.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">HuggingFaceDatasets.jl is a registered Julia package. You can easily install it through the package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add HuggingFaceDatasets"><pre>pkg<span class="pl-k">&gt;</span> add HuggingFaceDatasets</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">HuggingFaceDatasets.jl provides wrappers around types from the <code>datasets</code> python package (e.g. <code>Dataset</code> and <code>DatasetDict</code>) along with a few related methods.</p>
<p dir="auto">Check out the <a href="https://github.com/CarloLucibello/HuggingFaceDatasets.jl/tree/main/examples">examples/</a> folder for usage examples.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; train_data = load_dataset(&quot;mnist&quot;, split = &quot;train&quot;)
Dataset({
    features: ['image', 'label'],
    num_rows: 60000
})

# Indexing starts with 1. 
# Python types are returned by default.
julia&gt; train_data[1]
Python dict: {'image': &lt;PIL.PngImagePlugin.PngImageFile image mode=L size=28x28 at 0x2B64E2E90&gt;, 'label': 5}

julia&gt; length(train_data)
60000

# Now we set the julia format
julia&gt; train_data = load_dataset(&quot;mnist&quot;, split = &quot;train&quot;).with_format(&quot;julia&quot;);

# Returned observations are julia objects
julia&gt; train_data[1]
Dict{String, Any} with 2 entries:
  &quot;label&quot; =&gt; 5
  &quot;image&quot; =&gt; ColorTypes.Gray{FixedPointNumbers.N0f8}[Gray{N0f8}(0.0) Gray{N0f8}(0.0) … Gray{N0f8}(0.0) Gray{N0f8}(0.0); Gray{N…

julia&gt; train_data[1:2]
Dict{String, Vector} with 2 entries:
  &quot;label&quot; =&gt; [5, 0]
  &quot;image&quot; =&gt; Base.ReinterpretArray{Gray{N0f8}, 2, UInt8, Matrix{UInt8}, false}[[Gray{N0f8}(0.0) Gray{N0f8}(0.0) … Gray{N0f8}(0.0) Gra…"><pre>julia<span class="pl-k">&gt;</span> train_data <span class="pl-k">=</span> <span class="pl-c1">load_dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>mnist<span class="pl-pds">"</span></span>, split <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>train<span class="pl-pds">"</span></span>)
<span class="pl-c1">Dataset</span>({
    features<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">'</span>image<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>label<span class="pl-pds">'</span></span>],
    num_rows<span class="pl-k">:</span> <span class="pl-c1">60000</span>
})

<span class="pl-c"><span class="pl-c">#</span> Indexing starts with 1. </span>
<span class="pl-c"><span class="pl-c">#</span> Python types are returned by default.</span>
julia<span class="pl-k">&gt;</span> train_data[<span class="pl-c1">1</span>]
Python dict<span class="pl-k">:</span> {<span class="pl-s"><span class="pl-pds">'</span>image<span class="pl-pds">'</span></span>: <span class="pl-k">&lt;</span>PIL<span class="pl-k">.</span>PngImagePlugin<span class="pl-k">.</span>PngImageFile image mode<span class="pl-k">=</span>L size<span class="pl-k">=</span><span class="pl-c1">28</span>x28 at <span class="pl-c1">0x2B64E2E90</span><span class="pl-k">&gt;</span>, <span class="pl-s"><span class="pl-pds">'</span>label<span class="pl-pds">'</span></span>: <span class="pl-c1">5</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(train_data)
<span class="pl-c1">60000</span>

<span class="pl-c"><span class="pl-c">#</span> Now we set the julia format</span>
julia<span class="pl-k">&gt;</span> train_data <span class="pl-k">=</span> <span class="pl-c1">load_dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>mnist<span class="pl-pds">"</span></span>, split <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>train<span class="pl-pds">"</span></span>)<span class="pl-k">.</span><span class="pl-c1">with_format</span>(<span class="pl-s"><span class="pl-pds">"</span>julia<span class="pl-pds">"</span></span>);

<span class="pl-c"><span class="pl-c">#</span> Returned observations are julia objects</span>
julia<span class="pl-k">&gt;</span> train_data[<span class="pl-c1">1</span>]
Dict{String, Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> ColorTypes<span class="pl-k">.</span>Gray{FixedPointNumbers<span class="pl-k">.</span>N0f8}[<span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>) <span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>) … <span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>) <span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>); Gray{N…

julia<span class="pl-k">&gt;</span> train_data[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]
Dict{String, Vector} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">0</span>]
  <span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Base<span class="pl-k">.</span>ReinterpretArray{Gray{N0f8}, <span class="pl-c1">2</span>, UInt8, Matrix{UInt8}, <span class="pl-c1">false</span>}[[<span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>) <span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>) … <span class="pl-c1">Gray</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>) Gra…</pre></div>
</article></div>