<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-showset" class="anchor" aria-hidden="true" href="#showset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ShowSet</h1>
<p><a href="https://travis-ci.org/scheinerman/ShowSet.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ef9c34dd60bd22aa68f5a097cd182ac3fb562ec0/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f53686f775365742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/ShowSet.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/ShowSet.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4502f361cdd84c3ac479cf24b48502c7864c8b58/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f53686f775365742e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/ShowSet.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/ShowSet.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/89a68961421fb93c248a9879c1da6d40a374daa5/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f53686f775365742e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/ShowSet.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This module makes the printing of <code>Set</code> objects in Julia
nicer.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Without the use of this module, <code>Set</code> objects display like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">BitSet</span>([<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>])
<span class="pl-c1">BitSet</span>([<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Set</span>([<span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>])
<span class="pl-c1">Set</span>(<span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>)</pre></div>
<p>However, after <code>using ShowSet</code> it looks like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">BitSet</span>([<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>])
{<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Set</span>([<span class="pl-s"><span class="pl-pds">"</span>One<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Three<span class="pl-pds">"</span></span>])
{One,Three,Two}</pre></div>
<p>The elements of the <code>Set</code> object are sorted into ascending order
unless Julia is unable to do so. In that case, the order of the
objects is arbitrary.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Set</span>([<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-c1">4.5</span>, <span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>])
{hello,<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>,<span class="pl-c1">4.5</span>,<span class="pl-c1">1</span>}</pre></div>
<h2><a id="user-content-conversion-to-string" class="anchor" aria-hidden="true" href="#conversion-to-string"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversion to <code>string</code></h2>
<p>We extend the <code>string</code> function for <code>Set</code> and <code>BitSet</code> objects to
provide for their conversion into <code>String</code> objects. Some examples:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Set</span>([<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">string</span>(A)
<span class="pl-s"><span class="pl-pds">"</span>{alpha,beta,gamma}<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BitSet</span>([<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">string</span>(B)
<span class="pl-s"><span class="pl-pds">"</span>{1,3,5}<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
String</pre></div>
</article></div>