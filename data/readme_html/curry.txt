<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-curry" class="anchor" aria-hidden="true" href="#curry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Curry</h1>
<p>Implementation of Currying for Julia.  <a href="https://en.wikipedia.org/wiki/Currying" rel="nofollow">https://en.wikipedia.org/wiki/Currying</a></p>
<p>Convert a function that accepts multiple arguments into an equivalent chain of single argument functions.
Functions are chained as single argument anonymous functions that return single argument functions.</p>
<p>If multiple arities of a function exist, the one with the least number of arguments greater than 1 will be curried.<br>
e.g. arities 1 and greater than 2 exist for -, but arity 2 will be choosen for currying.</p>
<p>Exports the following functions:</p>
<ul>
<li><code>curry</code></li>
<li><code>partial</code></li>
<li><code>swap</code></li>
</ul>
<p>Implements the following puns:</p>
<ul>
<li><code>üçõ</code> (exported)</li>
<li><code>‚àÇ</code></li>
</ul>
<p>Examples:</p>
<pre><code>julia&gt; curry(map)(sqrt)(1:4)
4-element Array{Float64,1}:
 1.0
 1.4142135623730951
 1.7320508075688772
 2.0

julia&gt; curry((-))(9)
#119 (generic function with 1 method)

julia&gt; curry((-))(9)(1)
8
</code></pre>
</article></div>