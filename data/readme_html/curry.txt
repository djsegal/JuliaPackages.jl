<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-curry" class="anchor" aria-hidden="true" href="#curry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Curry</h1>
<p>Implementation of Currying for Julia.  <a href="https://en.wikipedia.org/wiki/Currying" rel="nofollow">https://en.wikipedia.org/wiki/Currying</a></p>
<p>Convert a function that accepts multiple arguments into an equivalent chain of single argument functions.
Functions are chained as single argument anonymous functions that return single argument functions.</p>
<p>If multiple arities of a function exist, the one with the least number of arguments greater than 1 will be curried.<br>
e.g. arities 1 and greater than 2 exist for -, but arity 2 will be choosen for currying.</p>
<p>Exports the following functions:</p>
<ul>
<li><code>curry</code></li>
<li><code>partial</code></li>
<li><code>swap</code></li>
</ul>
<p>Implements the following puns:</p>
<ul>
<li><code>üçõ</code> (exported)</li>
<li><code>‚àÇ</code></li>
</ul>
<p>Examples:</p>
<pre><code>julia&gt; curry(map)(sqrt)(1:4)
4-element Array{Float64,1}:
 1.0
 1.4142135623730951
 1.7320508075688772
 2.0

julia&gt; curry((-))(9)
#119 (generic function with 1 method)

julia&gt; curry((-))(9)(1)
8
</code></pre>
</article></div>