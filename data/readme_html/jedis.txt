<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jedisjl" class="anchor" aria-hidden="true" href="#jedisjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jedis.jl</h1>
<p dir="auto">A lightweight Redis client, implemented in Julia.</p>
<h2 dir="auto"><a id="user-content-key-features" class="anchor" aria-hidden="true" href="#key-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Key Features</h2>
<p dir="auto">Links to detailed interfaces and documentation:</p>
<ul dir="auto">
<li>Basic <strong><a href="https://captchanjack.github.io/Jedis.jl/commands/" rel="nofollow">command execution</a></strong></li>
<li>Executing commands with a <strong><a href="https://captchanjack.github.io/Jedis.jl/client/" rel="nofollow">global client</a></strong> instance</li>
<li><strong><a href="https://captchanjack.github.io/Jedis.jl/pipeline/" rel="nofollow">Pipelining</a></strong></li>
<li><strong><a href="https://captchanjack.github.io/Jedis.jl/commands/#Jedis.multi" rel="nofollow">Transactions</a></strong></li>
<li><strong><a href="https://captchanjack.github.io/Jedis.jl/pubsub/" rel="nofollow">Pub/Sub</a></strong></li>
<li><strong><a href="https://captchanjack.github.io/Jedis.jl/lock/" rel="nofollow">Redis locks</a></strong></li>
<li>Support for secured Redis connection (<strong><a href="https://captchanjack.github.io/Jedis.jl/client/#Jedis.get_ssl_config/" rel="nofollow">SSL/TLS</a></strong>)</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Establishing a basic <strong><a href="https://captchanjack.github.io/Jedis.jl/client/" rel="nofollow">client</a></strong> connection:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="client = Client(host=&quot;localhost&quot;, port=6379)"><pre class="notranslate"><code>client = Client(host="localhost", port=6379)
</code></pre></div>
<p dir="auto">Establishing a <strong><a href="https://captchanjack.github.io/Jedis.jl/client/#Jedis.get_ssl_config/" rel="nofollow">secured client</a></strong> (SSL/TLS) connection:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ssl_config = get_ssl_config(ssl_certfile=&quot;redis.crt&quot;, ssl_keyfile=&quot;redis.key&quot;, ssl_ca_certs=&quot;ca.crt&quot;)
client = Client(ssl_config=ssl_config)"><pre class="notranslate"><code>ssl_config = get_ssl_config(ssl_certfile="redis.crt", ssl_keyfile="redis.key", ssl_ca_certs="ca.crt")
client = Client(ssl_config=ssl_config)
</code></pre></div>
<p dir="auto">Setting and getting the global client:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="set_global_client(client)
get_global_client()"><pre class="notranslate"><code>set_global_client(client)
get_global_client()
</code></pre></div>
<p dir="auto">Executing <strong><a href="https://captchanjack.github.io/Jedis.jl/commands/" rel="nofollow">commands</a></strong>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="set(&quot;key&quot;, &quot;value&quot;; client=client)
get(&quot;key&quot;)  # uses global client by default
execute([&quot;DEL&quot;, &quot;key&quot;], client)  # custom commands"><pre class="notranslate"><code>set("key", "value"; client=client)
get("key")  # uses global client by default
execute(["DEL", "key"], client)  # custom commands
</code></pre></div>
<p dir="auto">Using <strong><a href="https://captchanjack.github.io/Jedis.jl/pipeline/" rel="nofollow">pipelining</a></strong> to speed up queries:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Normal
pipe = Pipeline()
set(&quot;key&quot;, &quot;value&quot;; client=pipe)
get(&quot;key&quot;; client=pipe)
results = execute(pipe)

# Do-block
results = pipeline() do pipe
    lpush(&quot;example&quot;, 1, 2, 3, 4; client=pipe)
    lpop(&quot;example&quot;; client=pipe)
    rpop(&quot;example&quot;; client=pipe)
    lpop(&quot;example&quot;; client=pipe)
end"><pre class="notranslate"><code># Normal
pipe = Pipeline()
set("key", "value"; client=pipe)
get("key"; client=pipe)
results = execute(pipe)

# Do-block
results = pipeline() do pipe
    lpush("example", 1, 2, 3, 4; client=pipe)
    lpop("example"; client=pipe)
    rpop("example"; client=pipe)
    lpop("example"; client=pipe)
end
</code></pre></div>
<p dir="auto">Executing a group of commands atomically with <strong><a href="https://captchanjack.github.io/Jedis.jl/commands/#Jedis.multi" rel="nofollow">MULTI/EXEC transactions</a></strong>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Normal
multi()
set(&quot;key&quot;, &quot;value&quot;)
get(&quot;key&quot;)
results = exec()

# Do-block
results = multi_exec() do 
    set(&quot;key&quot;, &quot;value&quot;)
    get(&quot;key&quot;)
    get(&quot;key&quot;)
end"><pre class="notranslate"><code># Normal
multi()
set("key", "value")
get("key")
results = exec()

# Do-block
results = multi_exec() do 
    set("key", "value")
    get("key")
    get("key")
end
</code></pre></div>
<p dir="auto">Executing a MULTI/EXEC transaction within a pipeline:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="results = pipeline() do pipe
    lpush(&quot;example&quot;, 1, 2, 3, 4; client=pipe)
    lpop(&quot;example&quot;; client=pipe)
    rpop(&quot;example&quot;; client=pipe)

    multi_exec(; client=pipe) do
        lpop(&quot;example&quot;; client=pipe)
        rpop(&quot;example&quot;; client=pipe)
    end

    lpop(&quot;example&quot;; client=pipe)
end"><pre class="notranslate"><code>results = pipeline() do pipe
    lpush("example", 1, 2, 3, 4; client=pipe)
    lpop("example"; client=pipe)
    rpop("example"; client=pipe)

    multi_exec(; client=pipe) do
        lpop("example"; client=pipe)
        rpop("example"; client=pipe)
    end

    lpop("example"; client=pipe)
end
</code></pre></div>
<p dir="auto">Using Redis <strong><a href="https://captchanjack.github.io/Jedis.jl/pubsub/" rel="nofollow">Pub/Sub</a></strong> (interfaces for <code>subscribe</code> and <code>psubscribe</code> are the same):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Set up channels, publisher and subscriber clients
channels = [&quot;first&quot;, &quot;second&quot;]
publisher = Client()
subscriber = Client()

# Begin the subscription
stop_fn(msg) = msg[end] == &quot;close subscription&quot;;  # stop the subscription loop if the message matches
messages = []

@async subscribe(channels...; stop_fn=stop_fn, client=subscriber) do msg
    push!(messages, msg)
end  # Without @async this function will block, alternatively use Thread.@spawn

wait_until_subscribed(subscriber)
subscriber.is_subscribed  # outputs true
subscriber.subscriptions  # set of actively subscribed channels

# Publish to channels
publish(&quot;first&quot;, &quot;hello&quot;; client=publisher)
publish(&quot;second&quot;, &quot;world&quot;; client=publisher)

# Unsubscribing
unsubscribe(&quot;first&quot;; client=subscriber)
wait_until_channel_unsubscribed(subscriber, &quot;first&quot;)
subscriber.subscriptions
unsubscribe(; client=subscriber)  # unsubscribe from all channels
wait_until_unsubscribed(subscriber)
subscriber.is_subscribed  # outputs false
subscriber.subscriptions  # set of actively subscribed channels should be empty"><pre class="notranslate"><code># Set up channels, publisher and subscriber clients
channels = ["first", "second"]
publisher = Client()
subscriber = Client()

# Begin the subscription
stop_fn(msg) = msg[end] == "close subscription";  # stop the subscription loop if the message matches
messages = []

@async subscribe(channels...; stop_fn=stop_fn, client=subscriber) do msg
    push!(messages, msg)
end  # Without @async this function will block, alternatively use Thread.@spawn

wait_until_subscribed(subscriber)
subscriber.is_subscribed  # outputs true
subscriber.subscriptions  # set of actively subscribed channels

# Publish to channels
publish("first", "hello"; client=publisher)
publish("second", "world"; client=publisher)

# Unsubscribing
unsubscribe("first"; client=subscriber)
wait_until_channel_unsubscribed(subscriber, "first")
subscriber.subscriptions
unsubscribe(; client=subscriber)  # unsubscribe from all channels
wait_until_unsubscribed(subscriber)
subscriber.is_subscribed  # outputs false
subscriber.subscriptions  # set of actively subscribed channels should be empty
</code></pre></div>
<p dir="auto">Using <strong><a href="https://captchanjack.github.io/Jedis.jl/lock/" rel="nofollow">redis locks</a></strong> for performing atomic operations:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@async redis_lock(&quot;example_lock&quot;) do
    sleep(3)  # Lock will exist for 3 seconds
end

while !isredislocked(&quot;example_lock&quot;)
    sleep(0.1)  # Ensure async lock is active before proceeding
end

redis_lock(&quot;example_lock&quot;) do
    println(&quot;This message will be delayed by 3 seconds!&quot;)  # Blocked by first lock
end"><pre class="notranslate"><code>@async redis_lock("example_lock") do
    sleep(3)  # Lock will exist for 3 seconds
end

while !isredislocked("example_lock")
    sleep(0.1)  # Ensure async lock is active before proceeding
end

redis_lock("example_lock") do
    println("This message will be delayed by 3 seconds!")  # Blocked by first lock
end
</code></pre></div>
</article></div>