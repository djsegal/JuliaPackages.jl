<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-propcheckjl" class="anchor" aria-hidden="true" href="#propcheckjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PropCheck.jl</h1>
<p>A simple, thin package for property based testing. This package, though functional, is WIP and has some very rough edges. Improvements and suggestions are welcome, but please check the TODO below for what's already planned.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is not yet registered with General, so to install do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/Seelengrab/PropCheck.jl.git
"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>Seelengrab<span class="pl-k">/</span>PropCheck<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>First define a property you want to test, which for PropCheck.jl means defining a function, checks that property and returns a boolean indicating whether the property holds or not.</p>
<p>For example for addition:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# The function we want to test for some property:
function add(x::Int, y::Int)
    return x+y
end

# The commutative property for addition:
function commProp()
    @forall((generate(Int),generate(Int)), (x,y) -&gt; begin
      c = add(x,y)
      d = add(y,x)
      return c == d
    end)
end
"><pre><span class="pl-c"><span class="pl-c">#</span> The function we want to test for some property:</span>
<span class="pl-k">function</span> <span class="pl-en">add</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>)
    <span class="pl-k">return</span> x<span class="pl-k">+</span>y
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The commutative property for addition:</span>
<span class="pl-k">function</span> <span class="pl-en">commProp</span>()
    <span class="pl-c1">@forall</span>((<span class="pl-c1">generate</span>(Int),<span class="pl-c1">generate</span>(Int)), (x,y) <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
      c <span class="pl-k">=</span> <span class="pl-c1">add</span>(x,y)
      d <span class="pl-k">=</span> <span class="pl-c1">add</span>(y,x)
      <span class="pl-k">return</span> c <span class="pl-k">==</span> d
    <span class="pl-k">end</span>)
<span class="pl-k">end</span></pre></div>
<p>In order to test this property, the <code>@check</code> macro is provided:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PropCheck

julia&gt; @check commProp
Test Summary: | Pass  Total
commProp: ✓   |    1      1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PropCheck

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@check</span> commProp
Test Summary<span class="pl-k">:</span> <span class="pl-k">|</span> Pass  Total
commProp<span class="pl-k">:</span> ✓   <span class="pl-k">|</span>    <span class="pl-c1">1</span>      <span class="pl-c1">1</span></pre></div>
<p>If you have more than one property to test, you can simply nest the <code>@check</code> calls into another testset from e.g. <code>Test</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; function identProp()
           @forall(generate(Int), x -&gt; x + 0 == 0 + x)
       end

julia&gt; using Test

julia&gt; @testset &quot;Nested Tests&quot; begin
           @check commProp
           @check identProp
       end
Test Summary: | Pass  Total
Nested Tests  |    2      2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">identProp</span>()
           <span class="pl-c1">@forall</span>(<span class="pl-c1">generate</span>(Int), x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">0</span> <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> x)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Test

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Nested Tests<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
           <span class="pl-c1">@check</span> commProp
           <span class="pl-c1">@check</span> identProp
       <span class="pl-k">end</span>
Test Summary<span class="pl-k">:</span> <span class="pl-k">|</span> Pass  Total
Nested Tests  <span class="pl-k">|</span>    <span class="pl-c1">2</span>      <span class="pl-c1">2</span></pre></div>
<p>Failing properties will be displayed as well:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; brokenProp() = @forall(generate(Int), _ -&gt; false)
brokenProp (generic function with 1 method)

julia&gt; @testset &quot;A broken test&quot; begin
           @check commProp
           @check identProp
           @check brokenProp
       end
brokenProp: 152341: Test Failed at [...]
  Expression: res
Stacktrace:
    [...]
Test Summary:        | Pass  Fail  Total
A broken test        |    2     1      3
  commProp: ✓        |    1            1
  identProp: ✓       |    1            1
  brokenProp: 152341 |          1      1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">brokenProp</span>() <span class="pl-k">=</span> <span class="pl-c1">@forall</span>(<span class="pl-c1">generate</span>(Int), _ <span class="pl-k">-&gt;</span> <span class="pl-c1">false</span>)
brokenProp (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>A broken test<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
           <span class="pl-c1">@check</span> commProp
           <span class="pl-c1">@check</span> identProp
           <span class="pl-c1">@check</span> brokenProp
       <span class="pl-k">end</span>
brokenProp<span class="pl-k">:</span> <span class="pl-c1">152341</span><span class="pl-k">:</span> Test Failed at [<span class="pl-k">...</span>]
  Expression<span class="pl-k">:</span> res
Stacktrace<span class="pl-k">:</span>
    [<span class="pl-k">...</span>]
Test Summary<span class="pl-k">:</span>        <span class="pl-k">|</span> Pass  Fail  Total
A broken test        <span class="pl-k">|</span>    <span class="pl-c1">2</span>     <span class="pl-c1">1</span>      <span class="pl-c1">3</span>
  commProp<span class="pl-k">:</span> ✓        <span class="pl-k">|</span>    <span class="pl-c1">1</span>            <span class="pl-c1">1</span>
  identProp<span class="pl-k">:</span> ✓       <span class="pl-k">|</span>    <span class="pl-c1">1</span>            <span class="pl-c1">1</span>
  brokenProp<span class="pl-k">:</span> <span class="pl-c1">152341</span> <span class="pl-k">|</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span></pre></div>
<p>Note the <code>152341</code>, indicating for which input the property doesn't hold. By default, most basic types have a generic generator defined. Should a type not support generation, PropCheck will fall back to generating via reflection of the fields of the type. If the types doesn't support the default constructor, you will have to define a <code>PropCheck.generate</code> method for your type. Generating <code>Any</code> is supported, but be warned that this <em>will</em> give you an instance of any known type that can be generated without errors as well as kill any hopes of working inference.</p>
<p>Once a falsifying example has been found, PropCheck tries to shrink it to a minimal example. Arrays shrink towards the empty array, numbers shrink towards zero, tuples only shrink their elements. If you want to customise shrinking for your type, define <code>PropCheck.shrink</code> for your type.</p>
<p>Errors occuring during testing are considered a failure and are printed together with the case which produced the error. This does not stop checking of the remaining properties, but does prevent further checks of the same property.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ToDo</h2>
<p>These are written down here instead of in issues because they're very generic goals and usually don't directly have an actionable task associated with them.</p>
<p>In no particular order:</p>
<ul>
<li>Clean up the printing of test cases (custom testset?)</li>
<li>Define more generators for types from Base, e.g. <code>Char</code> and <code>String</code></li>
<li>Improve shrinking for types which already have a generator defined</li>
<li>Make it possible to <code>generate(Union{Int,Float64})</code></li>
</ul>
</article></div>