<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cellmltoolkitjl" class="anchor" aria-hidden="true" href="#cellmltoolkitjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CellMLToolkit.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/CellMLToolkit/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/CellMLToolkit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9edf9ebeea01903953ad0f165e48d0df0b37ee1ec5647ed32444cffc93fa71be/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f43656c6c4d4c546f6f6c6b69742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/CellMLToolkit.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/CellMLToolkit.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/CellMLToolkit.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">CellMLToolkit.jl is a Julia library that connects <a href="https://cellml.org/" rel="nofollow">CellML</a> models to <a href="http://github.com/SciML/">SciML</a>, the Scientific Julia ecosystem. CellMLToolkit.jl acts as a bridge between CellML and ModelingToolkit.jl. It imports a CellML model (in XML) and emits a ModelingToolkit.jl intermediate representation (IR), which can then enter the SciML ecosystem.</p>
<h2 dir="auto"><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials and Documentation</h2>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/CellMLToolkit/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/CellMLToolkit/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-cellml" class="anchor" aria-hidden="true" href="#cellml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CellML</h2>
<p dir="auto"><a href="http://cellml.org" rel="nofollow">CellML</a> is an XML-based open-standard for the exchange of mathematical models. CellML originally started in 1998 by the Auckland Bioengineering Institute at the University of Auckland and affiliated research groups. Since then, its <a href="https://models.physiomeproject.org/welcome" rel="nofollow">repository</a> has grown to more than a thousand models. While CellML is not domain-specific, its focus has been on biomedical models. Currently, the active categories in the repository are <em>Calcium Dynamics</em>, <em>Cardiovascular Circulation</em>, <em>Cell Cycle</em>, <em>Cell Migration</em>, <em>Circadian Rhythms</em>, <em>Electrophysiology</em>, <em>Endocrine</em>, <em>Excitation-Contraction Coupling</em>, <em>Gene Regulation</em>, <em>Hepatology</em>, <em>Immunology</em>, <em>Ion Transport</em>, <em>Mechanical Constitutive Laws</em>, <em>Metabolism</em>, <em>Myofilament Mechanics</em>, <em>Neurobiology</em>, <em>pH Regulation</em>, <em>PKPD</em>, <em>Protein Modules</em>, <em>Signal Transduction</em>, and <em>Synthetic Biology</em>. There are many software tools to import, process and run CellML models; however, these tools are not Julia-specific.</p>
<h2 dir="auto"><a id="user-content-sciml" class="anchor" aria-hidden="true" href="#sciml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SciML</h2>
<p dir="auto"><a href="http://github.com/SciML">SciML</a> is a collection of Julia libraries for open source scientific computing and machine learning. The centerpiece of SciML is <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a>, which provides a rich set of ordinary differential equations (ODE) solvers. One major peripheral component of SciML is <a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a>. It is a modeling framework for high-performance symbolic-numeric computation in scientific computing and scientific machine learning. The core of ModelingToolkit.jl is an IR language to code the scientific problems of interest in a high level. Automatic code generation and differentiation allow for the generation of a usable model for the other components of SciML, such as DifferentialEquations.jl.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install CellMLToolkit.jl, use the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;CellMLToolkit&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CellMLToolkit<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  using CellMLToolkit, DifferentialEquations, Plots

  ml = CellModel(&quot;models/lorenz.cellml.xml&quot;)
  prob = ODEProblem(ml, (0,100.0))
  sol = solve(prob)
  plot(sol, idxs=(1,3))       # idxs keyword has superceded vars keyword"><pre>  <span class="pl-k">using</span> CellMLToolkit, DifferentialEquations, Plots

  ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(<span class="pl-s"><span class="pl-pds">"</span>models/lorenz.cellml.xml<span class="pl-pds">"</span></span>)
  prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(ml, (<span class="pl-c1">0</span>,<span class="pl-c1">100.0</span>))
  sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob)
  <span class="pl-c1">plot</span>(sol, idxs<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>))       <span class="pl-c"><span class="pl-c">#</span> idxs keyword has superceded vars keyword</span></pre></div>
<p dir="auto">Note that <code>model</code> is a directory of the CellMLToolkit package. You can find its path as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  model_root = joinpath(splitdir(pathof(CellMLToolkit))[1], &quot;..&quot;, &quot;models&quot;)"><pre>  model_root <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">splitdir</span>(<span class="pl-c1">pathof</span>(CellMLToolkit))[<span class="pl-c1">1</span>], <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>models<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">and then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model_path = joinpath(model_root, &quot;lorenz.cellml.xml&quot;)
ml = CellModel(model_path)"><pre>model_path <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(model_root, <span class="pl-s"><span class="pl-pds">"</span>lorenz.cellml.xml<span class="pl-pds">"</span></span>)
ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(model_path)</pre></div>
<h2 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h2>
<p dir="auto">The models directory contains a few CellML model examples. Let's start with a simple one, the famous Lorenz equations.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  using CellMLToolkit

  ml = CellModel(&quot;models/lorenz.cellml.xml&quot;)"><pre>  <span class="pl-k">using</span> CellMLToolkit

  ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(<span class="pl-s"><span class="pl-pds">"</span>models/lorenz.cellml.xml<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Now, <code>ml</code> is a <code>CellModel</code> structure that contains both a list of the loaded XML files and their components (accessible as <code>ml.doc</code>) and a ModelingToolkit <code>ODESystem</code> that defines variables and dynamics and can be accessed as <code>getsys(ml)</code>.</p>
<p dir="auto">The next step is to convert <code>ml</code> into an <code>ODEProblem</code>, ready to be solved.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  prob = ODEProblem(ml, (0,100.0))"><pre>  prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(ml, (<span class="pl-c1">0</span>,<span class="pl-c1">100.0</span>))</pre></div>
<p dir="auto">Here, <code>(0,100.0)</code> is the <code>tspan</code> parameter, describing the integration range of the independent variable.
In addition to the model equations, the initial conditions and parameters are also read from the XML file(s) and are available as <code>prob.u0</code> and <code>prob.ps</code>, respectively. We can solve and visualize <code>prob</code> as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  using DifferentialEquations, Plots

  sol = solve(prob)
  plot(sol, idxs=(1,3))       # idxs keyword has superceded vars keyword"><pre>  <span class="pl-k">using</span> DifferentialEquations, Plots

  sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob)
  <span class="pl-c1">plot</span>(sol, idxs<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>))       <span class="pl-c"><span class="pl-c">#</span> idxs keyword has superceded vars keyword</span></pre></div>
<p dir="auto">As expected,</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/lorenz.png"><img src="figures/lorenz.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Let's look at more complicated examples. The next one is the <a href="https://journals.physiology.org/doi/full/10.1152/ajpheart.00794.2003" rel="nofollow">ten Tusscher-Noble-Noble-Panfilov human left ventricular action potential model</a>. This is a mid-range electrophysiology model with 17 states variables and relatively good numerical stability.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  ml = CellModel(&quot;models/tentusscher_noble_noble_panfilov_2004_a.cellml.xml&quot;)
  prob = ODEProblem(ml, (0, 10000.0))
  sol = solve(prob, dtmax=1.0)    # we need to set dtmax to allow for on-time stimulation 
  plot(sol, idxs=12)"><pre>  ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(<span class="pl-s"><span class="pl-pds">"</span>models/tentusscher_noble_noble_panfilov_2004_a.cellml.xml<span class="pl-pds">"</span></span>)
  prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(ml, (<span class="pl-c1">0</span>, <span class="pl-c1">10000.0</span>))
  sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, dtmax<span class="pl-k">=</span><span class="pl-c1">1.0</span>)    <span class="pl-c"><span class="pl-c">#</span> we need to set dtmax to allow for on-time stimulation </span>
  <span class="pl-c1">plot</span>(sol, idxs<span class="pl-k">=</span><span class="pl-c1">12</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/ten.png"><img src="figures/ten.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">We can tell which variable to plot (<code>idxs=12</code> here) by looking at the output of <code>list_states(ml)</code> (see below).</p>
<p dir="auto">Let's see how we can modify the initial values and parameters. We will use the Beeler-Reuter model with 8 state variables as an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  ml = CellModel(&quot;models/beeler_reuter_1977.cellml.xml&quot;)"><pre>  ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(<span class="pl-s"><span class="pl-pds">"</span>models/beeler_reuter_1977.cellml.xml<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The model parameters are listed as <code>list_params(ml)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="                  sodium_current₊g_Na =&gt; 0.04
                  sodium_current₊E_Na =&gt; 50.0
                 sodium_current₊g_Nac =&gt; 3.0e-5
         stimulus_protocol₊IstimStart =&gt; 10.0
           stimulus_protocol₊IstimEnd =&gt; 50000.0
     stimulus_protocol₊IstimAmplitude =&gt; 0.5
        stimulus_protocol₊IstimPeriod =&gt; 1000.0
 stimulus_protocol₊IstimPulseDuration =&gt; 1.0
              slow_inward_current₊g_s =&gt; 0.0009
                           membrane₊C =&gt; 0.01"><pre>                  sodium_current₊g_Na <span class="pl-k">=&gt;</span> <span class="pl-c1">0.04</span>
                  sodium_current₊E_Na <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>
                 sodium_current₊g_Nac <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0e-5</span>
         stimulus_protocol₊IstimStart <span class="pl-k">=&gt;</span> <span class="pl-c1">10.0</span>
           stimulus_protocol₊IstimEnd <span class="pl-k">=&gt;</span> <span class="pl-c1">50000.0</span>
     stimulus_protocol₊IstimAmplitude <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>
        stimulus_protocol₊IstimPeriod <span class="pl-k">=&gt;</span> <span class="pl-c1">1000.0</span>
 stimulus_protocol₊IstimPulseDuration <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
              slow_inward_current₊g_s <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0009</span>
                           membrane₊C <span class="pl-k">=&gt;</span> <span class="pl-c1">0.01</span></pre></div>
<p dir="auto">Note the form of the parameter and variable names. They are composed of two names joined by a ₊ sign. The first name is the
component name in CellML models (e.g., sodium_current, stimulus_protocol) and the second name is the actual variable name.</p>
<p dir="auto">Similarly, we can list the state variables by calling <code>list_states(ml)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="              slow_inward_current_d_gate₊d(time) =&gt; 0.003
              slow_inward_current_f_gate₊f(time) =&gt; 0.994
                   slow_inward_current₊Cai(time) =&gt; 0.0001
 time_dependent_outward_current_x1_gate₊x1(time) =&gt; 0.0001   
                   sodium_current_m_gate₊m(time) =&gt; 0.011
                   sodium_current_h_gate₊h(time) =&gt; 0.988
                                membrane₊V(time) =&gt; -84.624
                   sodium_current_j_gate₊j(time) =&gt; 0.975"><pre>              <span class="pl-c1">slow_inward_current_d_gate₊d</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.003</span>
              <span class="pl-c1">slow_inward_current_f_gate₊f</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.994</span>
                   <span class="pl-c1">slow_inward_current₊Cai</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0001</span>
 <span class="pl-c1">time_dependent_outward_current_x1_gate₊x1</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0001</span>   
                   <span class="pl-c1">sodium_current_m_gate₊m</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.011</span>
                   <span class="pl-c1">sodium_current_h_gate₊h</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.988</span>
                                <span class="pl-c1">membrane₊V</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">84.624</span>
                   <span class="pl-c1">sodium_current_j_gate₊j</span>(time) <span class="pl-k">=&gt;</span> <span class="pl-c1">0.975</span></pre></div>
<p dir="auto">Assume we want to change <code>IstimPeriod</code>. We can easily do this with the help of <code>update_list!</code> utility function provided:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  params = list_params(ml)
  update_list!(params, :stimulus_protocol₊IstimPeriod, 250.0)
  prob = ODEProblem(ml, (0, 10000.0); p=last.(params))  # note that you need to pass last.(params) and not params itself to ODEProblem"><pre>  params <span class="pl-k">=</span> <span class="pl-c1">list_params</span>(ml)
  <span class="pl-c1">update_list!</span>(params, <span class="pl-c1">:stimulus_protocol₊IstimPeriod</span>, <span class="pl-c1">250.0</span>)
  prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(ml, (<span class="pl-c1">0</span>, <span class="pl-c1">10000.0</span>); p<span class="pl-k">=</span><span class="pl-c1">last</span>.(params))  <span class="pl-c"><span class="pl-c">#</span> note that you need to pass last.(params) and not params itself to ODEProblem</span></pre></div>
<p dir="auto">The rest is the same as before.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  sol = solve(prob, dtmax=1.0)
  plot(sol, idxs=7)   # 7 is the index of membrane₊V"><pre>  sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, dtmax<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
  <span class="pl-c1">plot</span>(sol, idxs<span class="pl-k">=</span><span class="pl-c1">7</span>)   <span class="pl-c"><span class="pl-c">#</span> 7 is the index of membrane₊V</span></pre></div>
<p dir="auto">For the next example, we chose a complex model to stress the ODE solvers: <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002061" rel="nofollow">the O'Hara-Rudy left ventricular model</a>. This model has 49 state variables, is very stiff, and is prone to oscillation. In the previous versions of this document, we used <code>CVODE_BDF</code> from the Sundial suite (<code>using Sundials</code>) to solve this problem. Fortunatelly, DifferentialEquations.jl has advanced signigficantly such that an efficient and pure Julia solution to the O'Hara-Rudy model is possible.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  ml = CellModel(&quot;models/ohara_rudy_cipa_v1_2017.cellml.xml&quot;)
  tspan = (0, 5000.0)
  prob = ODEProblem(ml, tspan);
  sol = solve(prob, dtmax=1.0)
  plot(sol, idxs=49)  # membrane₊v"><pre>  ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(<span class="pl-s"><span class="pl-pds">"</span>models/ohara_rudy_cipa_v1_2017.cellml.xml<span class="pl-pds">"</span></span>)
  tspan <span class="pl-k">=</span> (<span class="pl-c1">0</span>, <span class="pl-c1">5000.0</span>)
  prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(ml, tspan);
  sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, dtmax<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
  <span class="pl-c1">plot</span>(sol, idxs<span class="pl-k">=</span><span class="pl-c1">49</span>)  <span class="pl-c"><span class="pl-c">#</span> membrane₊v</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/ohara_rudy.png"><img src="figures/ohara_rudy.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-multi-file-models-import" class="anchor" aria-hidden="true" href="#multi-file-models-import"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multi-file Models (Import)</h2>
<p dir="auto">CellML specification allows for models spanning multiple XML files. In these models, the top level CellML XML file imports components from other CellML files, which in turn may import from other files. CellMLToolkit supports this functionality. It assumes that <em>the top-level file and all the imported files reside in the same directory</em>. <code>models/noble_1962</code> contained one such example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ml = CellModel(&quot;models/noble_1962/Noble_1962.cellml&quot;)
prob = ODEProblem(ml, tspan)
sol = solve(prob, dtmax=0.5)"><pre>ml <span class="pl-k">=</span> <span class="pl-c1">CellModel</span>(<span class="pl-s"><span class="pl-pds">"</span>models/noble_1962/Noble_1962.cellml<span class="pl-pds">"</span></span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(ml, tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, dtmax<span class="pl-k">=</span><span class="pl-c1">0.5</span>)</pre></div>
<p dir="auto">Note that the syntax is exactly the same as before. However, the list of the imported files are printed during <code>CellModel</code> generation:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[ Info: importing Noble62_Na_channel.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_K_channel.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_L_channel.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_parameters.cellml
[ Info: importing Noble62_units.cellml"><pre class="notranslate"><code>[ Info: importing Noble62_Na_channel.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_K_channel.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_L_channel.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_units.cellml
[ Info: importing Noble62_parameters.cellml
[ Info: importing Noble62_units.cellml
</code></pre></div>
<p dir="auto">Same as before, we can plot the output as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(sol, idxs=2)"><pre><span class="pl-c1">plot</span>(sol, idxs<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/noble_1962.png"><img src="figures/noble_1962.png" alt="" style="max-width: 100%;"></a></p>
</article></div>