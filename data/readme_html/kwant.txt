<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-kwantjl" class="anchor" aria-hidden="true" href="#kwantjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kwant.jl</h1>
<p>Kwant.jl is an interface with the <a href="https://kwant-project.org" rel="nofollow"><em>kwant</em></a> quantum transport package, using the <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a> pacakage.</p>
<p>The goal of this project is to faithfully emulate the native API of <em>kwant</em>.</p>
<p>To date, the implementation is in its very early stages, reproducing only the first few pages of the <a href="https://kwant-project.org/doc/1/tutorial/first_steps" rel="nofollow">First Steps Tutorial</a>. See the <a href="https://github.com/wrs28/Kwant.jl/tree/master/tutorials">tutorials folder</a>.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h3>
<p>To install from the Julia REPL, do <code>]add https://github.com/wrs28/Kwant.jl.git</code>, which will look like</p>
<div class="highlight highlight-source-julia"><pre>(v1<span class="pl-c1">.1</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>wrs28<span class="pl-k">/</span>Kwant<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<p>or perhaps <code>using Pkg</code> and <code>Pkg.add("https://github.com/wrs28/Kwant.jl.git")</code>.</p>
<p>It is easiest to make a new installation of <em>kwant</em> via the Conda.jl package (first do <code>]add Conda</code>). This can be done with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Conda
Conda<span class="pl-k">.</span><span class="pl-c1">add_channel</span>(<span class="pl-s"><span class="pl-pds">"</span>conda-forge<span class="pl-pds">"</span></span>)
Conda<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>kwant<span class="pl-pds">"</span></span>)</pre></div>
<p>If you don't want to install a Julia-private instance of <em>kwant</em>, you can play some trickery with building PyCall to the same Python library (instructions <a href="https://github.com/JuliaPy/PyCall.jl#specifying-the-python-version">here</a>), but I don't recommend it.</p>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes</h3>
<p>To use the plotting routines that come with <em>kwant</em>, you must implicitly call <code>using PyPlot</code>. Then something like <code>plot(syst)</code> should plot the system. Dependeing on the environment and build, you may need to explicitly call <code>gcf()</code> to show the figure.</p>
<p>The first lines of the <em>kwant</em> tutorial read</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> kwant
syst <span class="pl-k">=</span> kwant.Builder()
a<span class="pl-k">=</span><span class="pl-c1">1</span>
lat <span class="pl-k">=</span> kwant.lattice.square(a)
t<span class="pl-k">=</span><span class="pl-c1">1.0</span>
W<span class="pl-k">=</span><span class="pl-c1">10</span>
L<span class="pl-k">=</span><span class="pl-c1">30</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">range</span>(L):
    <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">range</span>(W):
        <span class="pl-c"><span class="pl-c">#</span> On-site Hamiltonian</span>
        syst[lat(i, j)] <span class="pl-k">=</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> t

        <span class="pl-c"><span class="pl-c">#</span> Hopping in y-direction</span>
        <span class="pl-k">if</span> j <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>:
            syst[lat(i, j), lat(i, j <span class="pl-k">-</span> <span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-k">-</span>t

        <span class="pl-c"><span class="pl-c">#</span> Hopping in x-direction</span>
        <span class="pl-k">if</span> i <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>:
            syst[lat(i, j), lat(i <span class="pl-k">-</span> <span class="pl-c1">1</span>, j)] <span class="pl-k">=</span> <span class="pl-k">-</span>t</pre></div>
<p>while the first lines of the Julia implementation read</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Kwant
kwant <span class="pl-k">=</span> Kwant
syst <span class="pl-k">=</span> kwant<span class="pl-k">.</span><span class="pl-c1">Builder</span>()
a <span class="pl-k">=</span> <span class="pl-c1">1</span>
lat <span class="pl-k">=</span> kwant<span class="pl-k">.</span>lattice<span class="pl-k">.</span><span class="pl-c1">square</span>(a)
t <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
W <span class="pl-k">=</span> <span class="pl-c1">10</span>
L <span class="pl-k">=</span> <span class="pl-c1">30</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,length<span class="pl-k">=</span>L)
    <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,length<span class="pl-k">=</span>W)
        <span class="pl-c"><span class="pl-c">#</span> On-site Hamiltonian</span>
        syst[<span class="pl-c1">lat</span>(i, j)] <span class="pl-k">=</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> t

        <span class="pl-c"><span class="pl-c">#</span> Hopping in y-direction</span>
        <span class="pl-k">if</span> j <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
            syst[<span class="pl-c1">lat</span>(i,j),<span class="pl-c1">lat</span>(i,j<span class="pl-k">-</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-k">-</span>t
        <span class="pl-k">end</span>

        <span class="pl-c"><span class="pl-c">#</span> Hopping in x-direction</span>
        <span class="pl-k">if</span> i <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
            syst[<span class="pl-c1">lat</span>(i, j), <span class="pl-c1">lat</span>(i <span class="pl-k">-</span> <span class="pl-c1">1</span>, j)] <span class="pl-k">=</span> <span class="pl-k">-</span>t
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Note that the Python <code>range(W)</code> becomes <code>range(0,length=W)</code>. Alternate expressions for iterating can be found <a href="https://docs.julialang.org/en/v1/manual/arrays/#Iteration-1" rel="nofollow">here</a>.</p>
</article></div>