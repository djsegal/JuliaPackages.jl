<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kwantjl" class="anchor" aria-hidden="true" href="#kwantjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kwant.jl</h1>
<p>Kwant.jl is an interface with the <a href="https://kwant-project.org" rel="nofollow"><em>kwant</em></a> quantum transport package, using the <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a> pacakage.</p>
<p>The goal of this project is to faithfully emulate the native API of <em>kwant</em>.</p>
<p>To date, the implementation is in its very early stages, reproducing only the first few pages of the <a href="https://kwant-project.org/doc/1/tutorial/first_steps" rel="nofollow">First Steps Tutorial</a>. See the <a href="https://github.com/wrs28/Kwant.jl/tree/master/tutorials">tutorials folder</a>.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>To install from the Julia REPL, do <code>]add https://github.com/wrs28/Kwant.jl.git</code>, which will look like</p>
<div class="highlight highlight-source-julia"><pre>(v1<span class="pl-c1">.1</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>wrs28<span class="pl-k">/</span>Kwant<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<p>or perhaps <code>using Pkg</code> and <code>Pkg.add("https://github.com/wrs28/Kwant.jl.git")</code>.</p>
<p>It is easiest to make a new installation of <em>kwant</em> via the Conda.jl package (first do <code>]add Conda</code>). This can be done with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Conda
Conda<span class="pl-k">.</span><span class="pl-c1">add_channel</span>(<span class="pl-s"><span class="pl-pds">"</span>conda-forge<span class="pl-pds">"</span></span>)
Conda<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>kwant<span class="pl-pds">"</span></span>)</pre></div>
<p>If you don't want to install a Julia-private instance of <em>kwant</em>, you can play some trickery with building PyCall to the same Python library (instructions <a href="https://github.com/JuliaPy/PyCall.jl#specifying-the-python-version">here</a>), but I don't recommend it.</p>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h3>
<p>To use the plotting routines that come with <em>kwant</em>, you must implicitly call <code>using PyPlot</code>. Then something like <code>plot(syst)</code> should plot the system. Dependeing on the environment and build, you may need to explicitly call <code>gcf()</code> to show the figure.</p>
<p>The first lines of the <em>kwant</em> tutorial read</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> <span class="pl-s1">kwant</span>
<span class="pl-s1">syst</span> <span class="pl-c1">=</span> <span class="pl-s1">kwant</span>.<span class="pl-v">Builder</span>()
<span class="pl-s1">a</span><span class="pl-c1">=</span><span class="pl-c1">1</span>
<span class="pl-s1">lat</span> <span class="pl-c1">=</span> <span class="pl-s1">kwant</span>.<span class="pl-s1">lattice</span>.<span class="pl-en">square</span>(<span class="pl-s1">a</span>)
<span class="pl-s1">t</span><span class="pl-c1">=</span><span class="pl-c1">1.0</span>
<span class="pl-v">W</span><span class="pl-c1">=</span><span class="pl-c1">10</span>
<span class="pl-v">L</span><span class="pl-c1">=</span><span class="pl-c1">30</span>
<span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-v">L</span>):
    <span class="pl-k">for</span> <span class="pl-s1">j</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-v">W</span>):
        <span class="pl-c"># On-site Hamiltonian</span>
        <span class="pl-s1">syst</span>[<span class="pl-en">lat</span>(<span class="pl-s1">i</span>, <span class="pl-s1">j</span>)] <span class="pl-c1">=</span> <span class="pl-c1">4</span> <span class="pl-c1">*</span> <span class="pl-s1">t</span>

        <span class="pl-c"># Hopping in y-direction</span>
        <span class="pl-k">if</span> <span class="pl-s1">j</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span>:
            <span class="pl-s1">syst</span>[<span class="pl-en">lat</span>(<span class="pl-s1">i</span>, <span class="pl-s1">j</span>), <span class="pl-en">lat</span>(<span class="pl-s1">i</span>, <span class="pl-s1">j</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>)] <span class="pl-c1">=</span> <span class="pl-c1">-</span><span class="pl-s1">t</span>

        <span class="pl-c"># Hopping in x-direction</span>
        <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span>:
            <span class="pl-s1">syst</span>[<span class="pl-en">lat</span>(<span class="pl-s1">i</span>, <span class="pl-s1">j</span>), <span class="pl-en">lat</span>(<span class="pl-s1">i</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>, <span class="pl-s1">j</span>)] <span class="pl-c1">=</span> <span class="pl-c1">-</span><span class="pl-s1">t</span></pre></div>
<p>while the first lines of the Julia implementation read</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Kwant
kwant <span class="pl-k">=</span> Kwant
syst <span class="pl-k">=</span> kwant<span class="pl-k">.</span><span class="pl-c1">Builder</span>()
a <span class="pl-k">=</span> <span class="pl-c1">1</span>
lat <span class="pl-k">=</span> kwant<span class="pl-k">.</span>lattice<span class="pl-k">.</span><span class="pl-c1">square</span>(a)
t <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
W <span class="pl-k">=</span> <span class="pl-c1">10</span>
L <span class="pl-k">=</span> <span class="pl-c1">30</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,length<span class="pl-k">=</span>L)
    <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,length<span class="pl-k">=</span>W)
        <span class="pl-c"><span class="pl-c">#</span> On-site Hamiltonian</span>
        syst[<span class="pl-c1">lat</span>(i, j)] <span class="pl-k">=</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> t

        <span class="pl-c"><span class="pl-c">#</span> Hopping in y-direction</span>
        <span class="pl-k">if</span> j <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
            syst[<span class="pl-c1">lat</span>(i,j),<span class="pl-c1">lat</span>(i,j<span class="pl-k">-</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-k">-</span>t
        <span class="pl-k">end</span>

        <span class="pl-c"><span class="pl-c">#</span> Hopping in x-direction</span>
        <span class="pl-k">if</span> i <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
            syst[<span class="pl-c1">lat</span>(i, j), <span class="pl-c1">lat</span>(i <span class="pl-k">-</span> <span class="pl-c1">1</span>, j)] <span class="pl-k">=</span> <span class="pl-k">-</span>t
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Note that the Python <code>range(W)</code> becomes <code>range(0,length=W)</code>. Alternate expressions for iterating can be found <a href="https://docs.julialang.org/en/v1/manual/arrays/#Iteration-1" rel="nofollow">here</a>.</p>
</article></div>