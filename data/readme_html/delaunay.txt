<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-delaunay--dəlɔˈnɛ--find-the-delaunay-triangulation-for-a-set-of-points" class="anchor" aria-hidden="true" href="#delaunay--dəlɔˈnɛ--find-the-delaunay-triangulation-for-a-set-of-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Delaunay / də lɔˈnɛ /: Find the Delaunay triangulation for a set of points</h1>
<ul>
<li><a href="https://github.com/eschnett/Delaunay.jl">GitHub</a>: Source code
repository</li>
<li><a href="https://github.com/eschnett/Delaunay.jl/actions"><img src="https://github.com/eschnett/Delaunay.jl/workflows/CI/badge.svg" alt="GitHub CI" style="max-width:100%;"></a></li>
</ul>
<p>This package finds the <a href="https://en.wikipedia.org/wiki/Delaunay_triangulation" rel="nofollow">Delaunay
triangulation</a>
for a set of points in arbitrary dimensions. It uses the Python
package
<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html" rel="nofollow"><code>scipy.spatial.Delaunay</code></a>
to perform the actual calculation.</p>
<p>This package is inspired by
<a href="https://github.com/JuliaPolyhedra/QHull.jl">QHull.jl</a>, which uses the
same Python library.</p>
<h2><a id="user-content-example-in-2d" class="anchor" aria-hidden="true" href="#example-in-2d"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example in 2D</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Delaunay
points = rand(10, 2)
mesh = delaunay(points)

mesh.points                      # the points
mesh.simplices                   # the simplices (triangles in 2d)
mesh.neighbors                   # neighbouring simplices of a simplex
mesh.vertex_to_simplex           # find a simplex for a point
mesh.convex_hull                 # convex hull of the domain
mesh.vertex_neighbor_vertices    # neighbouring vertices of a vertex

using Makie
color = rand(size(mesh.points, 1))
scene = Makie.mesh(mesh.points, mesh.simplices, color=color, shading=false, scale_plot=false)
xlims!(scene, 0, 1)
ylims!(scene, 0, 1)
wireframe!(scene[end][1], color=(:black, 0.6), linewidth=5)
"><pre><span class="pl-k">using</span> Delaunay
points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">2</span>)
mesh <span class="pl-k">=</span> <span class="pl-c1">delaunay</span>(points)

mesh<span class="pl-k">.</span>points                      <span class="pl-c"><span class="pl-c">#</span> the points</span>
mesh<span class="pl-k">.</span>simplices                   <span class="pl-c"><span class="pl-c">#</span> the simplices (triangles in 2d)</span>
mesh<span class="pl-k">.</span>neighbors                   <span class="pl-c"><span class="pl-c">#</span> neighbouring simplices of a simplex</span>
mesh<span class="pl-k">.</span>vertex_to_simplex           <span class="pl-c"><span class="pl-c">#</span> find a simplex for a point</span>
mesh<span class="pl-k">.</span>convex_hull                 <span class="pl-c"><span class="pl-c">#</span> convex hull of the domain</span>
mesh<span class="pl-k">.</span>vertex_neighbor_vertices    <span class="pl-c"><span class="pl-c">#</span> neighbouring vertices of a vertex</span>

<span class="pl-k">using</span> Makie
color <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">size</span>(mesh<span class="pl-k">.</span>points, <span class="pl-c1">1</span>))
scene <span class="pl-k">=</span> Makie<span class="pl-k">.</span><span class="pl-c1">mesh</span>(mesh<span class="pl-k">.</span>points, mesh<span class="pl-k">.</span>simplices, color<span class="pl-k">=</span>color, shading<span class="pl-k">=</span><span class="pl-c1">false</span>, scale_plot<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">xlims!</span>(scene, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">ylims!</span>(scene, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">wireframe!</span>(scene[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>], color<span class="pl-k">=</span>(<span class="pl-c1">:black</span>, <span class="pl-c1">0.6</span>), linewidth<span class="pl-k">=</span><span class="pl-c1">5</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="mesh.jpg"><img src="mesh.jpg" alt="Delaunay mesh" title="Delaunay mesh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="mesh2.jpg"><img src="mesh2.jpg" alt="Delaunay mesh" title="Delaunay mesh" style="max-width:100%;"></a></p>
<h2><a id="user-content-example-in-3d" class="anchor" aria-hidden="true" href="#example-in-3d"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example in 3D</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Delaunay
points = rand(6, 3)
mesh = delaunay(points)

using Makie
scene = Makie.mesh(mesh.points, mesh.simplices, visible=false)
xlims!(scene, 0, 1)
ylims!(scene, 0, 1)
zlims!(scene, 0, 1)
wireframe!(scene[end][1], color=(:black, 0.6), linewidth=5)
"><pre><span class="pl-k">using</span> Delaunay
points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">6</span>, <span class="pl-c1">3</span>)
mesh <span class="pl-k">=</span> <span class="pl-c1">delaunay</span>(points)

<span class="pl-k">using</span> Makie
scene <span class="pl-k">=</span> Makie<span class="pl-k">.</span><span class="pl-c1">mesh</span>(mesh<span class="pl-k">.</span>points, mesh<span class="pl-k">.</span>simplices, visible<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">xlims!</span>(scene, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">ylims!</span>(scene, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">zlims!</span>(scene, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">wireframe!</span>(scene[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>], color<span class="pl-k">=</span>(<span class="pl-c1">:black</span>, <span class="pl-c1">0.6</span>), linewidth<span class="pl-k">=</span><span class="pl-c1">5</span>)</pre></div>
<p>The test cases contain also examples in higher dimensions.</p>
</article></div>