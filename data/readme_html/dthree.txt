<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto">Simple interface to <code>d3</code> (<a href="http://d3js.org" rel="nofollow">http://d3js.org</a>) and other <code>JavaScript</code> libraries for chart making.</p>
<p dir="auto">This package for <code>Julia</code> provides a simple interface for using d3 syntax within <code>julia</code>.</p>
<p dir="auto">It isn't very clever, basically it takes a <code>d3</code> command like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="d3.selectAll(&quot;p&quot;).style(&quot;color&quot;, &quot;white&quot;)"><pre class="notranslate"><code>d3.selectAll("p").style("color", "white")
</code></pre></div>
<p dir="auto">And turns it into a <code>julia</code> call like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="d3.selectAll(&quot;p&quot;).style(&quot;color&quot;, &quot;white&quot;)"><pre class="notranslate"><code>d3.selectAll("p").style("color", "white")
</code></pre></div>
<p dir="auto">(Only after)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DThree
d3 = D3()"><pre class="notranslate"><code>using DThree
d3 = D3()
</code></pre></div>
<p dir="auto">Okay, you might guess the style. This just pieces together a string of <code>JavaScript</code> that will get inserted into a web page.</p>
<p dir="auto">The implementation is pretty stupid, it just makes fields named after the main methods and creates a function when the object is instantiated. The functions return a <code>D3</code> instance so they can be chained, as above.</p>
<p dir="auto">If the field isn't present, then the interface can look one of two ways:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="d3[:selectAll](&quot;p&quot;)._(&quot;color&quot;, &quot;white&quot;) ## two ways [:symbol](args...) or _(&quot;meth&quot;, args...)"><pre class="notranslate"><code>d3[:selectAll]("p")._("color", "white") ## two ways [:symbol](args...) or _("meth", args...)
</code></pre></div>
<p dir="auto">By default, strings are quoted. To stop that, wrap the string in
<code>asis</code> (like <code>R</code>'s <code>I</code> operator). This is necessary when the argument
refers to a <code>JavaScript</code> object.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DThree
style = &quot;&quot;&quot;
.chart div {
  font: 10px sans-serif;
  background-color: steelblue;
  text-align: right;
  padding: 3px;
  margin: 1px;
  color: white;
  }
&quot;&quot;&quot;
  
w = figure()
DThree.empty_page(w, style=style) # loads D3 libraries

d3 = D3()
d3.select(&quot;body&quot;).append(&quot;div&quot;).attr(&quot;class&quot;, &quot;chart&quot;) |&gt; js

data = [4,8,16,23,42]

d3.select(&quot;.chart&quot;).selectAll(&quot;div&quot;).
    data(data).
	  enter().append(&quot;div&quot;).
       style(&quot;width&quot;, asis&quot;&quot;&quot;function(d) { return d * 10 + &quot;px&quot;; }&quot;&quot;&quot;).
         text(asis&quot;&quot;&quot;function(d) { return d; }&quot;&quot;&quot;)  |&gt; js
	
"><pre class="notranslate"><code>using DThree
style = """
.chart div {
  font: 10px sans-serif;
  background-color: steelblue;
  text-align: right;
  padding: 3px;
  margin: 1px;
  color: white;
  }
"""
  
w = figure()
DThree.empty_page(w, style=style) # loads D3 libraries

d3 = D3()
d3.select("body").append("div").attr("class", "chart") |&gt; js

data = [4,8,16,23,42]

d3.select(".chart").selectAll("div").
    data(data).
	  enter().append("div").
       style("width", asis"""function(d) { return d * 10 + "px"; }""").
         text(asis"""function(d) { return d; }""")  |&gt; js
	

</code></pre></div>
<p dir="auto">The <code>js</code> call comes from <code>Blink</code>, as does the <code>figure</code> object.</p>
<h2 dir="auto"><a id="user-content-blink" class="anchor" aria-hidden="true" href="#blink"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Blink</h2>
<p dir="auto">This package also borrows the figure manipulation tools of <code>Immerse</code>
and the HTML windows of <code>Blink</code> to create canvases to manipulate. The
basic idea would follow from this example</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DThree, Plots; plotly()
w = figure()
Blink.title(w, &quot;title&quot;)
plot(sin, 0, 2pi)
plot!(cos)"><pre class="notranslate"><code>using DThree, Plots; plotly()
w = figure()
Blink.title(w, "title")
plot(sin, 0, 2pi)
plot!(cos)
</code></pre></div>
</article></div>