<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>Simple interface to <code>d3</code> (<a href="http://d3js.org" rel="nofollow">http://d3js.org</a>) and other <code>JavaScript</code> libraries for chart making.</p>
<p>This package for <code>Julia</code> provides a simple interface for using d3 syntax within <code>julia</code>.</p>
<p>It isn't very clever, basically it takes a <code>d3</code> command like:</p>
<pre><code>d3.selectAll("p").style("color", "white")
</code></pre>
<p>And turns it into a <code>julia</code> call like:</p>
<pre><code>d3.selectAll("p").style("color", "white")
</code></pre>
<p>(Only after)</p>
<pre><code>using DThree
d3 = D3()
</code></pre>
<p>Okay, you might guess the style. This just pieces together a string of <code>JavaScript</code> that will get inserted into a web page.</p>
<p>The implementation is pretty stupid, it just makes fields named after the main methods and creates a function when the object is instantiated. The functions return a <code>D3</code> instance so they can be chained, as above.</p>
<p>If the field isn't present, then the interface can look one of two ways:</p>
<pre><code>d3[:selectAll]("p")._("color", "white") ## two ways [:symbol](args...) or _("meth", args...)
</code></pre>
<p>By default, strings are quoted. To stop that, wrap the string in
<code>asis</code> (like <code>R</code>'s <code>I</code> operator). This is necessary when the argument
refers to a <code>JavaScript</code> object.</p>
<pre><code>using DThree
style = """
.chart div {
  font: 10px sans-serif;
  background-color: steelblue;
  text-align: right;
  padding: 3px;
  margin: 1px;
  color: white;
  }
"""
  
w = figure()
DThree.empty_page(w, style=style) # loads D3 libraries

d3 = D3()
d3.select("body").append("div").attr("class", "chart") |&gt; js

data = [4,8,16,23,42]

d3.select(".chart").selectAll("div").
    data(data).
	  enter().append("div").
       style("width", asis"""function(d) { return d * 10 + "px"; }""").
         text(asis"""function(d) { return d; }""")  |&gt; js
	

</code></pre>
<p>The <code>js</code> call comes from <code>Blink</code>, as does the <code>figure</code> object.</p>
<h2><a id="user-content-blink" class="anchor" aria-hidden="true" href="#blink"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Blink</h2>
<p>This package also borrows the figure manipulation tools of <code>Immerse</code>
and the HTML windows of <code>Blink</code> to create canvases to manipulate. The
basic idea would follow from this example</p>
<pre><code>using DThree, Plots; plotly()
w = figure()
Blink.title(w, "title")
plot(sin, 0, 2pi)
plot!(cos)
</code></pre>
</article></div>