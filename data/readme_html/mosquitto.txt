<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mosquittojl" class="anchor" aria-hidden="true" href="#mosquittojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mosquitto.jl</h1>
<p dir="auto">A wrapper around the Mosquitto C Api. The package provides easy to use MQTT client functionality.</p>
<h2 dir="auto"><a id="user-content-package-status" class="anchor" aria-hidden="true" href="#package-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package Status</h2>
<ul dir="auto">
<li><strong>Linux + Julia v1.6.x</strong> has trouble when using multiple threads. You need to upgrade to 1.7 or use single thread with manual "loop" calls for that specific configuration.
MQTT v5 features like properties are not yet implemented. If you have the need for those, feel free to add an request on Github.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<ul dir="auto">
<li>Install the mosquitto library
Follow the instructions at <a href="https://mosquitto.org/download/" rel="nofollow">https://mosquitto.org/download/</a></li>
<li>Download the julia package
<code>]add https://github.com/denglerchr/Mosquitto.jl</code></li>
</ul>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<h3 dir="auto"><a id="user-content-connect-to-a-broker" class="anchor" aria-hidden="true" href="#connect-to-a-broker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Connect to a broker</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mosquitto
client = Client(&quot;test.mosquitto.org&quot;, 1883)"><pre><span class="pl-k">using</span> Mosquitto
client <span class="pl-k">=</span> <span class="pl-c1">Client</span>(<span class="pl-s"><span class="pl-pds">"</span>test.mosquitto.org<span class="pl-pds">"</span></span>, <span class="pl-c1">1883</span>)</pre></div>
<p dir="auto">Create a client using the ip and port of the broker. If you use &gt;1 julia thread, the network loop will start immediately.
Use ?Mosquitto.Client for information on client settings.</p>
<h3 dir="auto"><a id="user-content-publish-a-message" class="anchor" aria-hidden="true" href="#publish-a-message"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Publish a message</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="topic = &quot;test&quot;
message = &quot;hello world&quot;
publish(client, topic, message)

# only necessary if network loop isnt running in seprate thread
!client.status.loop_status &amp;&amp; loop(client)"><pre>topic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>
message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello world<span class="pl-pds">"</span></span>
<span class="pl-c1">publish</span>(client, topic, message)

<span class="pl-c"><span class="pl-c">#</span> only necessary if network loop isnt running in seprate thread</span>
<span class="pl-k">!</span>client<span class="pl-k">.</span>status<span class="pl-k">.</span>loop_status <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">loop</span>(client)</pre></div>
<p dir="auto">A message can be of type string, or of a type that can be converted to a Vector{UInt8} using reinterpret. If you do not use multiple threads and <em>loop_start(client)</em>, publishing might not happen until you call <em>loop(client)</em>.</p>
<h3 dir="auto"><a id="user-content-subscribe-to-a-topic" class="anchor" aria-hidden="true" href="#subscribe-to-a-topic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subscribe to a topic</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="topic = &quot;test&quot;
subscribe(client, topic)"><pre>topic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>
<span class="pl-c1">subscribe</span>(client, topic)</pre></div>
<p dir="auto">The subscription will vanish on disonnect. To automatically reconnect, you should subscribe after a connection was detected. Please look at the example <em>examples/03_subscribe_conconnect.jl</em></p>
<h3 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple example</h3>
<p dir="auto">This example scripts will</p>
<ol dir="auto">
<li>create a connection to a public broker</li>
<li>subscribes to the topic "jltest"</li>
<li>publish 2 messages to the same topic "jltest"</li>
<li>read and print the messages.
Note that the script might print 3 messages if a message for that topic is "retained".</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mosquitto

# 1)
client = Client(&quot;test.mosquitto.org&quot;, 1883)

# 2)
topic = &quot;jltest&quot;
subscribe(client, topic)

# 3)
# Send 2 messages, first one will remain in the broker an be received on new connect
publish(client, topic, &quot;Hi from Julia&quot;; retain = true)
publish(client, topic, &quot;Another message&quot;; retain = false)

# lets wait to be sure to receive something
# or call the loop during that time, to make sure stuff is sent/received
client.status.loop_status ? sleep(3) : loop(client; timeout = 500, ntimes = 10)

# 4)
nmessages = Base.n_avail(Mosquitto.messages_channel)
for i = 1:nmessages
    msg = take!(Mosquitto.messages_channel) # Tuple{String, Vector{UInt8})
    println(&quot;Topic: $(msg.topic)\tMessage: $(String(msg.payload))&quot;)
end"><pre><span class="pl-k">using</span> Mosquitto

<span class="pl-c"><span class="pl-c">#</span> 1)</span>
client <span class="pl-k">=</span> <span class="pl-c1">Client</span>(<span class="pl-s"><span class="pl-pds">"</span>test.mosquitto.org<span class="pl-pds">"</span></span>, <span class="pl-c1">1883</span>)

<span class="pl-c"><span class="pl-c">#</span> 2)</span>
topic <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>jltest<span class="pl-pds">"</span></span>
<span class="pl-c1">subscribe</span>(client, topic)

<span class="pl-c"><span class="pl-c">#</span> 3)</span>
<span class="pl-c"><span class="pl-c">#</span> Send 2 messages, first one will remain in the broker an be received on new connect</span>
<span class="pl-c1">publish</span>(client, topic, <span class="pl-s"><span class="pl-pds">"</span>Hi from Julia<span class="pl-pds">"</span></span>; retain <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">publish</span>(client, topic, <span class="pl-s"><span class="pl-pds">"</span>Another message<span class="pl-pds">"</span></span>; retain <span class="pl-k">=</span> <span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> lets wait to be sure to receive something</span>
<span class="pl-c"><span class="pl-c">#</span> or call the loop during that time, to make sure stuff is sent/received</span>
client<span class="pl-k">.</span>status<span class="pl-k">.</span>loop_status <span class="pl-k">?</span> <span class="pl-c1">sleep</span>(<span class="pl-c1">3</span>) <span class="pl-k">:</span> <span class="pl-c1">loop</span>(client; timeout <span class="pl-k">=</span> <span class="pl-c1">500</span>, ntimes <span class="pl-k">=</span> <span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> 4)</span>
nmessages <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">n_avail</span>(Mosquitto<span class="pl-k">.</span>messages_channel)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nmessages
    msg <span class="pl-k">=</span> <span class="pl-c1">take!</span>(Mosquitto<span class="pl-k">.</span>messages_channel) <span class="pl-c"><span class="pl-c">#</span> Tuple{String, Vector{UInt8})</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Topic: <span class="pl-v">$(msg<span class="pl-k">.</span>topic)</span><span class="pl-cce">\t</span>Message: <span class="pl-v">$(<span class="pl-c1">String</span>(msg<span class="pl-k">.</span>payload))</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-advanced-usage-and-notes" class="anchor" aria-hidden="true" href="#advanced-usage-and-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced Usage and Notes</h2>
<h3 dir="auto"><a id="user-content-callbacks-on-messages-or-connectiondisconnection" class="anchor" aria-hidden="true" href="#callbacks-on-messages-or-connectiondisconnection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Callbacks on messages or connection/disconnection</h3>
<p dir="auto">While the mosquitto C library requires callback functions, this package uses Channels to indicate the receiving of a message or the connection/disconnection to/from a broker. You should <code>take!(channel)</code> on these, possibly after checking for the number of available messages if not run in a separate thread. The two channels can be accessed via:</p>
<ul dir="auto">
<li><code>get_messages_channel()</code> or <code>Mosquitto.messages_channel</code></li>
<li><code>get_connect_channel()</code> or <code>Mosquitto.connect_channel</code></li>
</ul>
<h3 dir="auto"><a id="user-content-use-a-single-threads-or-multiple-threads" class="anchor" aria-hidden="true" href="#use-a-single-threads-or-multiple-threads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use a single threads or multiple threads</h3>
<p dir="auto">For simplicity of use, the network loop is executed in parallel when using multiple threads. This can in some cases lead to problems, e.g., when using multiple clients, as running multiple loops in parallel is not supported currently. Therefore, client loops should be run in sequence, see <em>examples/multiple_clients.jl</em> for an example.</p>
<h3 dir="auto"><a id="user-content-authentication" class="anchor" aria-hidden="true" href="#authentication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authentication</h3>
<p dir="auto">You find examples in the example folder for how to use TLS connections and user/password authetication. Currently bad credentials do not lead to any error or warning, your messages will just not be sent and you will not receive any messages.</p>
<h3 dir="auto"><a id="user-content-advanced-example" class="anchor" aria-hidden="true" href="#advanced-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Read 20 messages in topic &quot;test/...&quot; from the public broker test.mosquitto.org
# Different from the previous example, the client will resubscribe to its topic every time it connects to the broker
using Mosquitto

# Connect to a broker using tls and username/password authetication.
# The CA certificate can be downloaded from the mosquitto page https://test.mosquitto.org/ssl/mosquitto.org.crt
# The connect function will not start a network loop in parallel, loop is triggered manually later.
client = Client()
const cafilepath = ... # add path to ca certificate here
tls_set(client, cafilepath)
connect(client, &quot;test.mosquitto.org&quot;, 8885; username = &quot;rw&quot;, password = &quot;readwrite&quot;)

# Subscribe to topic &quot;test&quot; every time the client connects
# To know if there was a connection/disconnection, the channel Mosquitto.connect_channel
# or get_connect_channel() is used.
function onconnect(c)
    # Check if something happened, else return 0
    nmessages = Base.n_avail(get_connect_channel())
    nmessages == 0 &amp;&amp; return 0

    # At this point, a connection or disconnection happened
    for i = 1:nmessages
        conncb = take!(get_connect_channel())
        if conncb.val == 1
            println(&quot;Connection of client $(conncb.clientptr) successfull, subscribing to test/#&quot;)
            subscribe(c, &quot;test/#&quot;)
        elseif conncb.val == 0
            println(&quot;Client $(conncb.clientptr) disconnected&quot;)
        end
    end
    return nmessages
end


# Print a message if it is received.
# To know if a message was received, we use the Mosquitto.messages_channel
# or get_messages_channel().
function onmessage(mrcount)
    # Check if something happened, else return 0
    nmessages = Base.n_avail(get_messages_channel())
    nmessages == 0 &amp;&amp; return 0

    # At this point, a message was received, lets process it
    for i = 1:nmessages
        temp = take!(get_messages_channel())
        println(&quot;Message $(mrcount+i):&quot;)
        message = String(temp.payload)
        length(message) &gt; 20 &amp;&amp; (message = message[1:18]*&quot;...&quot;)
        println(&quot;\ttopic: $(temp.topic)\tmessage:$(message)&quot;)
    end
    return nmessages
end


# We trigger the loop manually until we have received at least
# 20 messages
mrcount = 0
while mrcount &lt; 20
    loop(client) # network loop
    onconnect(client) # check for connection/disconnection
    mrcount += onmessage(mrcount) # check for messages
end

# Disconnect the client everything
disconnect(client)"><pre><span class="pl-c"><span class="pl-c">#</span> Read 20 messages in topic "test/..." from the public broker test.mosquitto.org</span>
<span class="pl-c"><span class="pl-c">#</span> Different from the previous example, the client will resubscribe to its topic every time it connects to the broker</span>
<span class="pl-k">using</span> Mosquitto

<span class="pl-c"><span class="pl-c">#</span> Connect to a broker using tls and username/password authetication.</span>
<span class="pl-c"><span class="pl-c">#</span> The CA certificate can be downloaded from the mosquitto page https://test.mosquitto.org/ssl/mosquitto.org.crt</span>
<span class="pl-c"><span class="pl-c">#</span> The connect function will not start a network loop in parallel, loop is triggered manually later.</span>
client <span class="pl-k">=</span> <span class="pl-c1">Client</span>()
<span class="pl-k">const</span> cafilepath <span class="pl-k">=</span> <span class="pl-k">...</span> <span class="pl-c"><span class="pl-c">#</span> add path to ca certificate here</span>
<span class="pl-c1">tls_set</span>(client, cafilepath)
<span class="pl-c1">connect</span>(client, <span class="pl-s"><span class="pl-pds">"</span>test.mosquitto.org<span class="pl-pds">"</span></span>, <span class="pl-c1">8885</span>; username <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>rw<span class="pl-pds">"</span></span>, password <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>readwrite<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Subscribe to topic "test" every time the client connects</span>
<span class="pl-c"><span class="pl-c">#</span> To know if there was a connection/disconnection, the channel Mosquitto.connect_channel</span>
<span class="pl-c"><span class="pl-c">#</span> or get_connect_channel() is used.</span>
<span class="pl-k">function</span> <span class="pl-en">onconnect</span>(c)
    <span class="pl-c"><span class="pl-c">#</span> Check if something happened, else return 0</span>
    nmessages <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">n_avail</span>(<span class="pl-c1">get_connect_channel</span>())
    nmessages <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">0</span>

    <span class="pl-c"><span class="pl-c">#</span> At this point, a connection or disconnection happened</span>
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nmessages
        conncb <span class="pl-k">=</span> <span class="pl-c1">take!</span>(<span class="pl-c1">get_connect_channel</span>())
        <span class="pl-k">if</span> conncb<span class="pl-k">.</span>val <span class="pl-k">==</span> <span class="pl-c1">1</span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Connection of client <span class="pl-v">$(conncb<span class="pl-k">.</span>clientptr)</span> successfull, subscribing to test/#<span class="pl-pds">"</span></span>)
            <span class="pl-c1">subscribe</span>(c, <span class="pl-s"><span class="pl-pds">"</span>test/#<span class="pl-pds">"</span></span>)
        <span class="pl-k">elseif</span> conncb<span class="pl-k">.</span>val <span class="pl-k">==</span> <span class="pl-c1">0</span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Client <span class="pl-v">$(conncb<span class="pl-k">.</span>clientptr)</span> disconnected<span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> nmessages
<span class="pl-k">end</span>


<span class="pl-c"><span class="pl-c">#</span> Print a message if it is received.</span>
<span class="pl-c"><span class="pl-c">#</span> To know if a message was received, we use the Mosquitto.messages_channel</span>
<span class="pl-c"><span class="pl-c">#</span> or get_messages_channel().</span>
<span class="pl-k">function</span> <span class="pl-en">onmessage</span>(mrcount)
    <span class="pl-c"><span class="pl-c">#</span> Check if something happened, else return 0</span>
    nmessages <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">n_avail</span>(<span class="pl-c1">get_messages_channel</span>())
    nmessages <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">0</span>

    <span class="pl-c"><span class="pl-c">#</span> At this point, a message was received, lets process it</span>
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nmessages
        temp <span class="pl-k">=</span> <span class="pl-c1">take!</span>(<span class="pl-c1">get_messages_channel</span>())
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Message <span class="pl-v">$(mrcount<span class="pl-k">+</span>i)</span>:<span class="pl-pds">"</span></span>)
        message <span class="pl-k">=</span> <span class="pl-c1">String</span>(temp<span class="pl-k">.</span>payload)
        <span class="pl-c1">length</span>(message) <span class="pl-k">&gt;</span> <span class="pl-c1">20</span> <span class="pl-k">&amp;&amp;</span> (message <span class="pl-k">=</span> message[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">18</span>]<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>...<span class="pl-pds">"</span></span>)
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span>topic: <span class="pl-v">$(temp<span class="pl-k">.</span>topic)</span><span class="pl-cce">\t</span>message:<span class="pl-v">$(message)</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> nmessages
<span class="pl-k">end</span>


<span class="pl-c"><span class="pl-c">#</span> We trigger the loop manually until we have received at least</span>
<span class="pl-c"><span class="pl-c">#</span> 20 messages</span>
mrcount <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">while</span> mrcount <span class="pl-k">&lt;</span> <span class="pl-c1">20</span>
    <span class="pl-c1">loop</span>(client) <span class="pl-c"><span class="pl-c">#</span> network loop</span>
    <span class="pl-c1">onconnect</span>(client) <span class="pl-c"><span class="pl-c">#</span> check for connection/disconnection</span>
    mrcount <span class="pl-k">+=</span> <span class="pl-c1">onmessage</span>(mrcount) <span class="pl-c"><span class="pl-c">#</span> check for messages</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Disconnect the client everything</span>
<span class="pl-c1">disconnect</span>(client)</pre></div>
</article></div>