<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-watcher" class="anchor" aria-hidden="true" href="#watcher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Watcher</h1>
<p><a href="https://travis-ci.org/rened/Watcher.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/146b51d7f1e5e3f44d0d5f6fe7f47bb7436036f7/68747470733a2f2f7472617669732d63692e6f72672f72656e65642f576174636865722e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/rened/Watcher.jl.png" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Watcher&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/2a35fc9af8ee72e05b46ded6911b82b6ad0d143b/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f576174636865725f302e342e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/Watcher_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Watcher&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/5607381931c9f7fed0dcd32a478ce9b66c71ea78/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f576174636865725f302e352e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/Watcher_0.5.svg" style="max-width:100%;"></a></p>
<p>This package allows to run a custom command every time a file in the specified directories changes. It was initally written to auto-run unit tests every time a file gets saved.</p>
<p>The default invokation is very simple:</p>
<div class="highlight highlight-source-julia"><pre>julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">"</span>using Watcher<span class="pl-pds">"</span></span></pre></div>
<p>This will watch all <code>jl</code> files in the current directory and in subdiretories, and run "julia test/runtests.jl" when a file changes.</p>
<p>You can change this behaviour:</p>
<div class="highlight highlight-source-julia"><pre>julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">"</span>using Watcher<span class="pl-pds">"</span></span> <span class="pl-k">--</span> [<span class="pl-k">-</span>f<span class="pl-k">=</span>jl,txt] [<span class="pl-k">-</span>w<span class="pl-k">=</span>src,test] [<span class="pl-k">--</span>now] [<span class="pl-k">--</span>run echo <span class="pl-s"><span class="pl-pds">"</span>something changed<span class="pl-pds">"</span></span>]</pre></div>
<p><code>-f=type1,type2</code> specifies which file types to watch, default is <code>jl</code></p>
<p><code>-w=dir1,dir2</code> tells it to look only in these two directors, default is the current directory and all its sub directories</p>
<p><code>--now</code> will run the command already once on startup, and then continue watching for changes</p>
<p>Everything after <code>--run</code> is the command the will get executed, with the default being <code>julia test/runtests.jl</code>.</p>
<h2><a id="user-content-tips" class="anchor" aria-hidden="true" href="#tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tips</h2>
<p>It is recommended to put <code>println</code> statements at the beginning and end of your unit test file, to get immediate feedback that the tests started running (executing <code>using</code> statements can take some time):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Starting runtests.jl ...<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> FactCheck, YourPackage

<span class="pl-c"><span class="pl-c">#</span> run your tests</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span> ... finished runtests.jl<span class="pl-pds">"</span></span>)
FactCheck<span class="pl-k">.</span><span class="pl-c1">exitstatus</span>()</pre></div>
</article></div>