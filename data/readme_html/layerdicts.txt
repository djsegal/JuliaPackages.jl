<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-layerdicts" class="anchor" aria-hidden="true" href="#layerdicts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LayerDicts</h1>
<p><a href="https://github.com/Invenia/LayerDicts.jl/actions?query=workflow%3ACI"><img src="https://github.com/Invenia/LayerDicts.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/LayerDicts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8b9aecbc8b5cab3e6db88535519422623b29e48e22f531b0ba7903ed20e65bbe/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4c6179657244696374732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/invenia/LayerDicts.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>LayerDict</code> is an <code>Associative</code> type that wraps a series of other associatives (e.g. <code>Dict</code>s).
When performing a lookup, a <code>LayerDict</code> will look through its associatives in the order they were passed to the constructor until it finds a match.
<code>LayerDict</code>s are immutableâ€”you cannot call <code>setindex!</code> on them.
However, you can update its wrapped associatives and those changes will be reflected in future lookups.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LayerDicts

dict1 = Dict{Symbol, Int}(:foo =&gt; 1, :bar =&gt; 1)
dict2 = Dict{Symbol, Int}()
dict3 = Dict{Symbol, Int}(:bar =&gt; 3, :baz =&gt; 3)

ld = LayerDict([dict1, dict2, dict3])
@assert ld[:foo] == 1
@assert ld[:bar] == 1
@assert ld[:baz] == 3
ld[:quuz]  # throws a KeyError
"><pre><span class="pl-k">using</span> LayerDicts

dict1 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Int}</span>(<span class="pl-c1">:foo</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:bar</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)
dict2 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Int}</span>()
dict3 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Int}</span>(<span class="pl-c1">:bar</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>, <span class="pl-c1">:baz</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)

ld <span class="pl-k">=</span> <span class="pl-c1">LayerDict</span>([dict1, dict2, dict3])
<span class="pl-c1">@assert</span> ld[<span class="pl-c1">:foo</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> ld[<span class="pl-c1">:bar</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> ld[<span class="pl-c1">:baz</span>] <span class="pl-k">==</span> <span class="pl-c1">3</span>
ld[<span class="pl-c1">:quuz</span>]  <span class="pl-c"><span class="pl-c">#</span> throws a KeyError</span></pre></div>
</article></div>