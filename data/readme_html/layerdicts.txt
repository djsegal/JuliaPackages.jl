<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-layerdicts" class="anchor" aria-hidden="true" href="#layerdicts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LayerDicts</h1>
<p><a href="https://travis-ci.org/invenia/LayerDicts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2df52bf3ab1e70c879f1dd398e8861b4f94bcf1e/68747470733a2f2f7472617669732d63692e6f72672f696e76656e69612f4c6179657244696374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/invenia/LayerDicts.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/LayerDicts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8f9205240340d6b716aa6262cca00fd45be838fc/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4c6179657244696374732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/invenia/LayerDicts.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>LayerDict</code> is an <code>Associative</code> type that wraps a series of other associatives (e.g. <code>Dict</code>s).
When performing a lookup, a <code>LayerDict</code> will look through its associatives in the order they were passed to the constructor until it finds a match.
<code>LayerDict</code>s are immutableâ€”you cannot call <code>setindex!</code> on them.
However, you can update its wrapped associatives and those changes will be reflected in future lookups.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LayerDicts

dict1 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Int}</span>(<span class="pl-c1">:foo</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:bar</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)
dict2 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Int}</span>()
dict3 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Int}</span>(<span class="pl-c1">:bar</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>, <span class="pl-c1">:baz</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)

ld <span class="pl-k">=</span> <span class="pl-c1">LayerDict</span>([dict1, dict2, dict3])
<span class="pl-c1">@assert</span> ld[<span class="pl-c1">:foo</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> ld[<span class="pl-c1">:bar</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@assert</span> ld[<span class="pl-c1">:baz</span>] <span class="pl-k">==</span> <span class="pl-c1">3</span>
ld[<span class="pl-c1">:quuz</span>]  <span class="pl-c"><span class="pl-c">#</span> throws a KeyError</span></pre></div>
</article></div>