<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nlsolvers" class="anchor" aria-hidden="true" href="#nlsolvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NLSolvers</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Source</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/pkofod/NLSolvers.jl"><img src="https://camo.githubusercontent.com/029aff031f4905e7b0b6f15eb0b5d070acdefe0fb6613b8ada0b75624a1df164/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4769744875622d736f757263652d677265656e2e737667" alt="Source" data-canonical-src="https://img.shields.io/badge/GitHub-source-green.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/pkofod/NLSolvers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e2408f227c4fd9393b7f67a8ca23a6e8e0b60ca2e22c8581c95bee6cdf5e990/68747470733a2f2f7472617669732d63692e6f72672f706b6f666f642f4e4c536f6c766572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/pkofod/NLSolvers.jl.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://codecov.io/gh/pkofod/NLSolvers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f2c6f9d49c0c41f8c9da45a600ab9eaa153649a5b02befe3575eff800fcb4358/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f706b6f666f642f4e4c536f6c766572732e6a6c2f6d61737465722e737667" alt="Codecov branch" data-canonical-src="https://img.shields.io/codecov/c/github/pkofod/NLSolvers.jl/master.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://ci.appveyor.com/project/blegat/optim-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81c0d4c051b6d6504a3bcdb8380e4a81faa003e0e6cb9177dc574b0b62638cbf/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f707270387967667034727239746166653f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/prp8ygfp4rr9tafe?svg=true" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>NLSolvers provides optimization, curve fitting, and equation solving functionalities for Julia.
The goal is to provide a set of robust and flexible methods that run fast. Currently, the package
does not try to implement any automatic generation of unspecified functions (gradients, Hessians,
Hessian-vector products) using AD.</p>
<p>NLSolvers.jl uses different problem types for different problems</p>
<ul>
<li><code>OptimizationProblem</code> for optimization problems</li>
<li><code>NEqProblem</code> for non-linear equations problems</li>
<li><code>FixedPointProblem</code> for non-linear equations problems</li>
</ul>
<h2><a id="user-content-optimization-problems" class="anchor" aria-hidden="true" href="#optimization-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optimization Problems</h2>
<p>Take the following scalar objective (with scalar input)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NLSolvers
function objective(x)
    fx = x^4 + sin(x)
end
function gradient(∇f, x)
    ∇f = 4x^3 + cos(x)
    return ∇f
end
objective_gradient(∇f, x) = objective(x), gradient(∇f, x)
function hessian(∇²f, x)
    ∇²f = 12x^2 - sin(x)
    return ∇²f
end
function objective_gradient_hessian(∇f, ∇²f, x)
    f, ∇f = objective_gradient(∇f, x)
    ∇²f = hessian(∇²f, x)
    return f, ∇f, ∇²f
end
scalarobj = ScalarObjective(f=objective,
                            g=gradient,
                            fg=objective_gradient,
                            fgh=objective_gradient_hessian,
                            h=hessian)
optprob = OptimizationProblem(scalarobj; inplace=false) # scalar input, so not inplace

solve(optprob, 0.3, LineSearch(Newton()), OptimizationOptions())
"><pre><span class="pl-k">using</span> NLSolvers
<span class="pl-k">function</span> <span class="pl-en">objective</span>(x)
    fx <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">sin</span>(x)
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">gradient</span>(∇f, x)
    ∇f <span class="pl-k">=</span> <span class="pl-c1">4</span>x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">cos</span>(x)
    <span class="pl-k">return</span> ∇f
<span class="pl-k">end</span>
<span class="pl-en">objective_gradient</span>(∇f, x) <span class="pl-k">=</span> <span class="pl-c1">objective</span>(x), <span class="pl-c1">gradient</span>(∇f, x)
<span class="pl-k">function</span> <span class="pl-en">hessian</span>(∇²f, x)
    ∇²f <span class="pl-k">=</span> <span class="pl-c1">12</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">sin</span>(x)
    <span class="pl-k">return</span> ∇²f
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">objective_gradient_hessian</span>(∇f, ∇²f, x)
    f, ∇f <span class="pl-k">=</span> <span class="pl-c1">objective_gradient</span>(∇f, x)
    ∇²f <span class="pl-k">=</span> <span class="pl-c1">hessian</span>(∇²f, x)
    <span class="pl-k">return</span> f, ∇f, ∇²f
<span class="pl-k">end</span>
scalarobj <span class="pl-k">=</span> <span class="pl-c1">ScalarObjective</span>(f<span class="pl-k">=</span>objective,
                            g<span class="pl-k">=</span>gradient,
                            fg<span class="pl-k">=</span>objective_gradient,
                            fgh<span class="pl-k">=</span>objective_gradient_hessian,
                            h<span class="pl-k">=</span>hessian)
optprob <span class="pl-k">=</span> <span class="pl-c1">OptimizationProblem</span>(scalarobj; inplace<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> scalar input, so not inplace</span>

<span class="pl-c1">solve</span>(optprob, <span class="pl-c1">0.3</span>, <span class="pl-c1">LineSearch</span>(<span class="pl-c1">Newton</span>()), <span class="pl-c1">OptimizationOptions</span>())</pre></div>
<p>With output</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Results of minimization

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final objective value:    -4.35e-01
  Final gradient norm:      3.07e-12

  Initial objective value:  3.04e-01
  Initial gradient norm:    1.06e+00

* Convergence measures
  |x - x'|              = 6.39e-07 &lt;= 0.00e+00 (false)
  |x - x'|/|x|          = 1.08e-06 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|        = 9.71e-13 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|/|f(x)| = 2.23e-12 &lt;= 0.00e+00 (false)
  |g(x)|                = 3.07e-12 &lt;= 1.00e-08 (true)
  |g(x)|/|g(x₀)|        = 2.88e-12 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   7.15e-06
  Iterations:    6
"><pre><code>Results of minimization

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final objective value:    -4.35e-01
  Final gradient norm:      3.07e-12

  Initial objective value:  3.04e-01
  Initial gradient norm:    1.06e+00

* Convergence measures
  |x - x'|              = 6.39e-07 &lt;= 0.00e+00 (false)
  |x - x'|/|x|          = 1.08e-06 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|        = 9.71e-13 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|/|f(x)| = 2.23e-12 &lt;= 0.00e+00 (false)
  |g(x)|                = 3.07e-12 &lt;= 1.00e-08 (true)
  |g(x)|/|g(x₀)|        = 2.88e-12 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   7.15e-06
  Iterations:    6
</code></pre></div>
<p>The problem types are especially useful when manifolds, bounds, and other constraints enter the picture.</p>
<p>Let's take the same problem as above but write it with arrays and mutating code style. The inplace keyword argument to the <code>OptimizationProblem</code> is used to apply
the desired code paths internally. If set to true, cache arrays will be updated inplace and mutation is promised to be allowed for the input type(s). If set to
false, no operations will mutate or happen in place.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using NLSolvers
function objective_ip(x)
    fx = x[1]^4 + sin(x[1])
end
function gradient_ip(∇f, x)
    ∇f[1] = 4x[1]^3 + cos(x[1])
    return ∇f
end
objective_gradient_ip(∇f, x) = objective_ip(x), gradient_ip(∇f, x)
function hessian_ip(∇²f, x)
    ∇²f[1] = 12x[1]^2 - sin(x[1])
    return ∇²f
end
function objective_gradient_hessian_ip(∇f, ∇²f, x)
    f, ∇f = objective_gradient_ip(∇f, x)
    ∇²f = hessian_ip(∇²f, x)
    return f, ∇f, ∇²f
end
scalarobj_ip = ScalarObjective(f=objective_ip,
                            g=gradient_ip,
                            fg=objective_gradient_ip,
                            fgh=objective_gradient_hessian_ip,
                            h=hessian_ip)
optprob_ip = OptimizationProblem(scalarobj_ip; inplace=true)

solve(optprob_ip, [0.3], LineSearch(Newton()), OptimizationOptions())
"><pre><code>using NLSolvers
function objective_ip(x)
    fx = x[1]^4 + sin(x[1])
end
function gradient_ip(∇f, x)
    ∇f[1] = 4x[1]^3 + cos(x[1])
    return ∇f
end
objective_gradient_ip(∇f, x) = objective_ip(x), gradient_ip(∇f, x)
function hessian_ip(∇²f, x)
    ∇²f[1] = 12x[1]^2 - sin(x[1])
    return ∇²f
end
function objective_gradient_hessian_ip(∇f, ∇²f, x)
    f, ∇f = objective_gradient_ip(∇f, x)
    ∇²f = hessian_ip(∇²f, x)
    return f, ∇f, ∇²f
end
scalarobj_ip = ScalarObjective(f=objective_ip,
                            g=gradient_ip,
                            fg=objective_gradient_ip,
                            fgh=objective_gradient_hessian_ip,
                            h=hessian_ip)
optprob_ip = OptimizationProblem(scalarobj_ip; inplace=true)

solve(optprob_ip, [0.3], LineSearch(Newton()), OptimizationOptions())
</code></pre></div>
<p>which gives</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Results of minimization

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final objective value:    -4.35e-01
  Final gradient norm:      3.07e-12

  Initial objective value:  3.04e-01
  Initial gradient norm:    1.06e+00

* Convergence measures
  |x - x'|              = 6.39e-07 &lt;= 0.00e+00 (false)
  |x - x'|/|x|          = 1.08e-06 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|        = 9.71e-13 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|/|f(x)| = 2.23e-12 &lt;= 0.00e+00 (false)
  |g(x)|                = 3.07e-12 &lt;= 1.00e-08 (true)
  |g(x)|/|g(x₀)|        = 2.88e-12 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   1.10e-05
  Iterations:    6

"><pre><code>Results of minimization

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final objective value:    -4.35e-01
  Final gradient norm:      3.07e-12

  Initial objective value:  3.04e-01
  Initial gradient norm:    1.06e+00

* Convergence measures
  |x - x'|              = 6.39e-07 &lt;= 0.00e+00 (false)
  |x - x'|/|x|          = 1.08e-06 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|        = 9.71e-13 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|/|f(x)| = 2.23e-12 &lt;= 0.00e+00 (false)
  |g(x)|                = 3.07e-12 &lt;= 1.00e-08 (true)
  |g(x)|/|g(x₀)|        = 2.88e-12 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   1.10e-05
  Iterations:    6

</code></pre></div>
<p>as above. Another set of examples could be <code>SArray</code>'s and <code>MArray</code>'s from the <code>StaticArrays.jl</code> package.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using StaticArrays
solve(optprob_ip, @MVector([0.3]), LineSearch(Newton()), OptimizationOptions())
"><pre><code>using StaticArrays
solve(optprob_ip, @MVector([0.3]), LineSearch(Newton()), OptimizationOptions())
</code></pre></div>
<p>which gives</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Results of minimization

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final objective value:    -4.35e-01
  Final gradient norm:      3.07e-12

  Initial objective value:  3.04e-01
  Initial gradient norm:    1.06e+00

* Convergence measures
  |x - x'|              = 6.39e-07 &lt;= 0.00e+00 (false)
  |x - x'|/|x|          = 1.08e-06 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|        = 9.71e-13 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|/|f(x)| = 2.23e-12 &lt;= 0.00e+00 (false)
  |g(x)|                = 3.07e-12 &lt;= 1.00e-08 (true)
  |g(x)|/|g(x₀)|        = 2.88e-12 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   5.68e-04
  Iterations:    6
"><pre><code>Results of minimization

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final objective value:    -4.35e-01
  Final gradient norm:      3.07e-12

  Initial objective value:  3.04e-01
  Initial gradient norm:    1.06e+00

* Convergence measures
  |x - x'|              = 6.39e-07 &lt;= 0.00e+00 (false)
  |x - x'|/|x|          = 1.08e-06 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|        = 9.71e-13 &lt;= 0.00e+00 (false)
  |f(x) - f(x')|/|f(x)| = 2.23e-12 &lt;= 0.00e+00 (false)
  |g(x)|                = 3.07e-12 &lt;= 1.00e-08 (true)
  |g(x)|/|g(x₀)|        = 2.88e-12 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   5.68e-04
  Iterations:    6
</code></pre></div>
<p>So numbers, mutating array code and non-mutating array code is supported depending on the input to the problem type and initial <code>x</code> or state in general.</p>
<h2><a id="user-content-systems-of-nonlinear-equations-neqproblem" class="anchor" aria-hidden="true" href="#systems-of-nonlinear-equations-neqproblem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Systems of Nonlinear Equations <code>NEqProblem</code></h2>
<p>To solve a system of non-linear equations you should use the <code>NEqProblem</code> type. First,
we have to define a <code>VectorObjective</code>. We can try to solve for the roots in the problem
defined by setting the gradient of the Rosenbrock test problem equal to zero.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function F_rosenbrock!(Fx, x)
    Fx[1] = 1 - x[1]
    Fx[2] = 10(x[2]-x[1]^2)
    return Fx
end
function J_rosenbrock!(Jx, x)
    Jx[1,1] = -1
    Jx[1,2] = 0
    Jx[2,1] = -20*x[1]
    Jx[2,2] = 10
    return Jx
end
function FJ_rosenbrock!(Fx, Jx, x)
    F_rosenbrock!(Fx, x)
    J_rosenbrock!(Jx, x)
    Fx, Jx
end
function Jvop_rosenbrock!(x)
    function JacV(Fv, v)
        Fv[1] = -1*v[1]
        Fv[2,] = -20*x[1]*v[1] + 10*v[2]
    end
    LinearMap(JacV, length(x))
end
vectorobj = NLSolvers.VectorObjective(F_rosenbrock!, J_rosenbrock!, FJ_rosenbrock!, Jvop_rosenbrock!)
"><pre><code>function F_rosenbrock!(Fx, x)
    Fx[1] = 1 - x[1]
    Fx[2] = 10(x[2]-x[1]^2)
    return Fx
end
function J_rosenbrock!(Jx, x)
    Jx[1,1] = -1
    Jx[1,2] = 0
    Jx[2,1] = -20*x[1]
    Jx[2,2] = 10
    return Jx
end
function FJ_rosenbrock!(Fx, Jx, x)
    F_rosenbrock!(Fx, x)
    J_rosenbrock!(Jx, x)
    Fx, Jx
end
function Jvop_rosenbrock!(x)
    function JacV(Fv, v)
        Fv[1] = -1*v[1]
        Fv[2,] = -20*x[1]*v[1] + 10*v[2]
    end
    LinearMap(JacV, length(x))
end
vectorobj = NLSolvers.VectorObjective(F_rosenbrock!, J_rosenbrock!, FJ_rosenbrock!, Jvop_rosenbrock!)
</code></pre></div>
<p>and define a probem type that lets <code>solve</code> dispatch to the correct code</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="vectorprob = NEqProblem(vectorobj)
"><pre><code>vectorprob = NEqProblem(vectorobj)
</code></pre></div>
<p>and we can solve using two variants of Newton's method. One that globalizes the
solve using a trust-region based method and one that uses a line search</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
julia&gt; solve(vectorprob, [5.0, 0.0], TrustRegion(Newton(), Dogleg()), NEqOptions())
Results of solving non-linear equations

* Algorithm:
  Newton's method with default linsolve with Dogleg{Nothing}

* Candidate solution:
  Final residual 2-norm:      5.24e-14
  Final residual Inf-norm:    5.24e-14

  Initial residual 2-norm:    6.25e+04
  Initial residual Inf-norm:  2.50e+02

* Convergence measures
  |F(x')|               = 5.24e-14 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   1.91e-05
  Iterations:    2


julia&gt; solve(vectorprob, [5.0, 0.0], LineSearch(Newton()), NEqOptions())
Results of solving non-linear equations

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final residual 2-norm:      0.00e+00
  Final residual Inf-norm:    0.00e+00

  Initial residual 2-norm:    2.50e+02
  Initial residual Inf-norm:  2.50e+02

* Convergence measures
  |F(x')|               = 0.00e+00 &lt;= 0.00e+00 (true)

* Work counters
  Seconds run:   1.00e-05
  Iterations:    2
"><pre><code>
julia&gt; solve(vectorprob, [5.0, 0.0], TrustRegion(Newton(), Dogleg()), NEqOptions())
Results of solving non-linear equations

* Algorithm:
  Newton's method with default linsolve with Dogleg{Nothing}

* Candidate solution:
  Final residual 2-norm:      5.24e-14
  Final residual Inf-norm:    5.24e-14

  Initial residual 2-norm:    6.25e+04
  Initial residual Inf-norm:  2.50e+02

* Convergence measures
  |F(x')|               = 5.24e-14 &lt;= 0.00e+00 (false)

* Work counters
  Seconds run:   1.91e-05
  Iterations:    2


julia&gt; solve(vectorprob, [5.0, 0.0], LineSearch(Newton()), NEqOptions())
Results of solving non-linear equations

* Algorithm:
  Newton's method with default linsolve with backtracking (no interp)

* Candidate solution:
  Final residual 2-norm:      0.00e+00
  Final residual Inf-norm:    0.00e+00

  Initial residual 2-norm:    2.50e+02
  Initial residual Inf-norm:  2.50e+02

* Convergence measures
  |F(x')|               = 0.00e+00 &lt;= 0.00e+00 (true)

* Work counters
  Seconds run:   1.00e-05
  Iterations:    2
</code></pre></div>
<h2><a id="user-content-custom-solve" class="anchor" aria-hidden="true" href="#custom-solve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom solve</h2>
<p>Newton methods generally accept a linsolve argument.</p>
<h2><a id="user-content-preconditioning" class="anchor" aria-hidden="true" href="#preconditioning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Preconditioning</h2>
<p>Several methods accept nonlinear (left-)preconditioners. A preconditioner is provided as a function that has two methods: <code>p(x)</code> and <code>p(x, P)</code> where the first prepares and returns the preconditioner and the second is the signature for updating the preconditioner. If the preconditioner is constant, both method
will simply return this preconditioner. A preconditioner is used in two contexts: in <code>ldiv!(pgr, factorize(P), gr)</code> that accepts a cache array for the preconditioned gradient <code>pgr</code>, the preconditioner <code>P</code>, and the gradient to be preconditioned <code>gr</code>, and in <code>mul!(x, P, y)</code>. For the out-of-place methods (<code>minimize</code> as opposed to <code>minimize!</code>) it is sufficient to have <code>\(P, gr)</code> and <code>*(P, y)</code> defined.</p>
<h2><a id="user-content-beware-chaotic-gradient-methods" class="anchor" aria-hidden="true" href="#beware-chaotic-gradient-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Beware, chaotic gradient methods!</h2>
<p>Some methods that might be labeled as acceleration, momentum, or spectral methods can exhibit chaotic behavior. Please keep this in mind if comparing things like <code>DFSANE</code> with similar implemenations in other software. It can give very different results given different compiler optimizations, CPU architectures, etc. See for example <a href="https://link.springer.com/article/10.1007/s10915-011-9521-3" rel="nofollow">https://link.springer.com/article/10.1007/s10915-011-9521-3</a> .</p>
<p>Two types of functions:
WorkVars # x, F, J, H, ??
AlgVars # s, y, z, ...
Documented in each type's docstring including LineSearch, BFGS, ....</p>
<p>AlgVars = (LSVars, QNVars, ...)
OptVars?
Initial modelvars and QNvars</p>
<p>Abstract arrays!!! :|
manifolds
Use user norms
Banded Jacobian
AD
nan hessian</p>
<p>line search should have a short curcuit for very small steps</p>
<h1><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Next steps</h1>
<p>Mixed complementatiry
SAMIN, BOXES
Univariate!!
IP Newotn
Krylov Hessian</p>
</article></div>