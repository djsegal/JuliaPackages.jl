<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sha" class="anchor" aria-hidden="true" href="#sha"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SHA</h1>
<p dir="auto"><a href="https://github.com/JuliaCrypto/SHA.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaCrypto/SHA.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://app.codecov.io/gh/JuliaCrypto/SHA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9929fb351fd06cbddbce1e682433aeb46a8a2a708fc0747a9576a32c3469885/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696143727970746f2f5348412e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov.io" data-canonical-src="https://codecov.io/gh/JuliaCrypto/SHA.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<p dir="auto">Enter the Julia package manager by typing <code>]</code> into your REPL. Then type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(@v1.6) pkg&gt; add SHA"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">6</span>) pkg<span class="pl-k">&gt;</span> add SHA</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SHA

julia&gt; bytes2hex(sha256(&quot;test&quot;))
&quot;9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SHA

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bytes2hex</span>(<span class="pl-c1">sha256</span>(<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Each exported function (at the time of this writing, SHA-1, SHA-2 224, 256, 384 and 512, and SHA-3 224, 256, 384 and 512 functions are implemented) takes in either an <code>Array{UInt8}</code>, a <code>ByteString</code> or an <code>IO</code> object.  This makes it trivial to checksum a file:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="shell&gt; cat /tmp/test.txt
test
julia&gt; using SHA

julia&gt; open(&quot;/tmp/test.txt&quot;) do f
           sha2_256(f)
       end
32-element Array{UInt8,1}:
 0x9f
 0x86
 0xd0
 0x81
 0x88
 0x4c
 0x7d
 0x65
    ⋮
 0x5d
 0x6c
 0x15
 0xb0
 0xf0
 0x0a
 0x08"><pre>shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>test<span class="pl-k">.</span>txt
test
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SHA

julia<span class="pl-k">&gt;</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test.txt<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
           <span class="pl-c1">sha2_256</span>(f)
       <span class="pl-k">end</span>
<span class="pl-c1">32</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x9f</span>
 <span class="pl-c1">0x86</span>
 <span class="pl-c1">0xd0</span>
 <span class="pl-c1">0x81</span>
 <span class="pl-c1">0x88</span>
 <span class="pl-c1">0x4c</span>
 <span class="pl-c1">0x7d</span>
 <span class="pl-c1">0x65</span>
    ⋮
 <span class="pl-c1">0x5d</span>
 <span class="pl-c1">0x6c</span>
 <span class="pl-c1">0x15</span>
 <span class="pl-c1">0xb0</span>
 <span class="pl-c1">0xf0</span>
 <span class="pl-c1">0x0a</span>
 <span class="pl-c1">0x08</span></pre></div>
<p dir="auto">Note the lack of a newline at the end of <code>/tmp/text.txt</code>.  Julia automatically inserts a newline before the <code>julia&gt;</code> prompt.</p>
<p dir="auto">Due to the colloquial usage of <code>sha256</code> to refer to <code>sha2_256</code>, convenience functions are provided, mapping <code>shaxxx()</code> function calls to <code>sha2_xxx()</code>.  For SHA-3, no such colloquialisms exist and the user must use the full <code>sha3_xxx()</code> names.</p>
<p dir="auto"><code>shaxxx()</code> takes <code>AbstractString</code> and array-like objects (<code>NTuple</code> and <code>Array</code>) with elements of type <code>UInt8</code>.</p>
<p dir="auto">Note that, at the time of this writing, the SHA3 code is not optimized, and as such is roughly an order of magnitude slower than SHA2.  Pull requests are welcome.</p>
</article></div>