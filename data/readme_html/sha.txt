<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sha" class="anchor" aria-hidden="true" href="#sha"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SHA</h1>
<p><a href="https://travis-ci.org/staticfloat/SHA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9e9923900e71bd42b2945297bebc23306cd711c4/68747470733a2f2f7472617669732d63692e6f72672f737461746963666c6f61742f5348412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/staticfloat/SHA.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/staticfloat/SHA.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/00a274264d08080b485cfff4f8b4828dd9b5b137/687474703a2f2f636f6465636f762e696f2f6769746875622f737461746963666c6f61742f5348412e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/staticfloat/SHA.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=SHA&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/be102cfbde48808f904db94ebdeb75f78c77f7c2/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5348415f302e332e737667" alt="SHA" data-canonical-src="http://pkg.julialang.org/badges/SHA_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=SHA&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/6d575b341e1202e7ba7165d4939d3ac138b2b807/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5348415f302e342e737667" alt="SHA" data-canonical-src="http://pkg.julialang.org/badges/SHA_0.4.svg" style="max-width:100%;"></a></p>
<p>Usage is very straightforward:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SHA

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bytes2hex</span>(<span class="pl-c1">sha256</span>(<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08<span class="pl-pds">"</span></span></pre></div>
<p>Each exported function (at the time of this writing, SHA-1, SHA-2 224, 256, 384 and 512, and SHA-3 224, 256, 384 and 512 functions are implemented) takes in either an <code>Array{UInt8}</code>, a <code>ByteString</code> or an <code>IO</code> object.  This makes it trivial to checksum a file:</p>
<div class="highlight highlight-source-julia"><pre>shell<span class="pl-k">&gt;</span> cat <span class="pl-k">/</span>tmp<span class="pl-k">/</span>test<span class="pl-k">.</span>txt
test
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SHA

julia<span class="pl-k">&gt;</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test.txt<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
           <span class="pl-c1">sha2_256</span>(f)
       <span class="pl-k">end</span>
<span class="pl-c1">32</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x9f</span>
 <span class="pl-c1">0x86</span>
 <span class="pl-c1">0xd0</span>
 <span class="pl-c1">0x81</span>
 <span class="pl-c1">0x88</span>
 <span class="pl-c1">0x4c</span>
 <span class="pl-c1">0x7d</span>
 <span class="pl-c1">0x65</span>
    â‹®
 <span class="pl-c1">0x5d</span>
 <span class="pl-c1">0x6c</span>
 <span class="pl-c1">0x15</span>
 <span class="pl-c1">0xb0</span>
 <span class="pl-c1">0xf0</span>
 <span class="pl-c1">0x0a</span>
 <span class="pl-c1">0x08</span></pre></div>
<p>Note the lack of a newline at the end of <code>/tmp/text.txt</code>.  Julia automatically inserts a newline before the <code>julia&gt;</code> prompt.</p>
<p>Due to the colloquial usage of <code>sha256</code> to refer to <code>sha2_256</code>, convenience functions are provided, mapping <code>shaxxx()</code> function calls to <code>sha2_xxx()</code>.  For SHA-3, no such colloquialisms exist and the user must use the full <code>sha3_xxx()</code> names.</p>
<p><code>shaxxx()</code> takes <code>AbstractString</code> and array-like objects (<code>NTuple</code> and <code>Array</code>) with elements of type <code>UInt8</code>.</p>
<p>Note that, at the time of this writing, the SHA3 code is not optimized, and as such is roughly an order of magnitude slower than SHA2.  Pull requests are welcome.</p>
</article></div>