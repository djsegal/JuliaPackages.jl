<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dfols" class="anchor" aria-hidden="true" href="#dfols"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DFOLS</h1>
<p><a href="https://travis-ci.com/QuantEcon/DFOLS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9ee98bb2fa670570bef79bdb553ebb80137a6f1d/68747470733a2f2f7472617669732d63692e636f6d2f5175616e7445636f6e2f44464f4c532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/QuantEcon/DFOLS.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A light wrapper around the <a href="https://numericalalgorithmsgroup.github.io/dfols" rel="nofollow">DFO-LS</a> (Derivative-Free Optimizer for Least-Squares Minimization) Python package written by the Numerical Algorithms Group at Oxford University. See here for <a href="https://arxiv.org/abs/1804.00154" rel="nofollow">the paper</a> and the <a href="https://github.com/numericalalgorithmsgroup/dfols">github repository</a>.</p>
<h3><a id="user-content-toc" class="anchor" aria-hidden="true" href="#toc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TOC</h3>
<ol>
<li>Installation</li>
<li>Usage</li>
<li>Constraints and Stochastic Objectives</li>
<li>Advanced Usage</li>
</ol>
<p><strong>Note:</strong> This package is GPL3 licensed, to comply with the underlying Python.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h3>
<p>Simply run</p>
<pre><code>] add DFOLS
</code></pre>
<p><strong>Note:</strong> The build script assumes that <code>$(PyCall.pyprogramname) pip</code> is a valid command. This is automatically true on Windows and macOS, but needs to be verified on Linux (i.e., make sure it isn't <code>pip3</code>, or <code>python-pip3</code>, or something). You can do this by aliasing <code>pip=pip3</code> or setting up a symbolic link <code>pip -&gt; pip3</code>.</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<p>We define a type <code>DFOLSResults</code> to store the solver output.</p>
<pre><code>struct DFOLSResults{TI, TF}
    x::Array{TF, 1}
    resid::Array{TF, 1}
    f::TF
    jacobian::Union{Nothing, Matrix{TF}} # jacobian is nothing if convergence is immediate
    nf::TI
    nx::TI # differs from nf if sample averaging is used
    nruns::TI # &gt; 1 if multiple restarts
    flag::TI
    msg::String
    EXIT_SUCCESS::TI
    EXIT_MAXFUN_WARNING::TI
    EXIT_SLOW_WARNING::TI
    EXIT_FALSE_SUCCESS_WARNING::TI
    EXIT_INPUT_ERROR::TI
    EXIT_TR_INCREASE_ERROR::TI
    EXIT_LINALG_ERROR::TI
end
</code></pre>
<p>And we define a set of convenience functions to interact with it</p>
<pre><code>converged, optimizer, optimum, residuals, jacobian, nf, nruns, nx, flag, msg
</code></pre>
<p>You can run the solver by calling the <code>solve</code> function, as below</p>
<pre><code>rosenbrock = x -&gt; [10. * (x[2]-x[1]^2), 1. - x[1]]
sol = solve(rosenbrock, [-1.2, 1.])
</code></pre>
<p>Options for <code>solve</code> include</p>
<pre><code>function solve(objfun, x0::Array{TF, 1};
                bounds = nothing,
                npt = nothing,
                rhobeg = nothing,
                rhoend = 1e-8,
                maxfun = nothing,
                nsamples = nothing,
                user_params = nothing, # see https://numericalalgorithmsgroup.github.io/dfols/build/html/advanced.html
                objfun_has_noise = false,
                scaling_within_bounds = false) where {TF &lt;: AbstractFloat}
</code></pre>
<h3><a id="user-content-constraints-and-stochastic-objectives" class="anchor" aria-hidden="true" href="#constraints-and-stochastic-objectives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constraints and Stochastic Objectives</h3>
<p>You can impose constraints on the solution space</p>
<pre><code>solve(rosenbrock, x0, bounds = ([-5., -5.], [5., 5.])) # two-sided box
solve(rosenbrock, x0, bounds = ([-5., -5.], nothing)) # one-sided constraint
</code></pre>
<p>And note that the objective is stochastic</p>
<pre><code>σ = 0.01
μ = 1.
rosenbrock_noisy = x -&gt; rosenbrock(x) .* (μ .+ σ*randn(2))
solve(rosenbrock_noisy, x0, objfun_has_noise=true)
</code></pre>
<p><strong>Note:</strong> The solver will determine the stochasticity of the objective only by examining the <code>objfun_has_noise</code> flag, and not by looking at the actual function supplied.</p>
<h3><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced Usage</h3>
<p>The <code>user_params</code> should be a Julia dict (see <a href="https://numericalalgorithmsgroup.github.io/dfols/build/html/advanced.html" rel="nofollow">here</a> for valid key, value pairs). For example:</p>
<pre><code>solve(rosenbrock, x0, user_params = Dict("init.random_initial_directions" =&gt; false,
                                        "model.abs_tol" =&gt; 1e-20,
                                        "noise.quit_on_noise_level" =&gt; false))
</code></pre>
</article></div>