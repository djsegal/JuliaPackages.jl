<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-showitlikeyoubuildit" class="anchor" aria-hidden="true" href="#showitlikeyoubuildit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ShowItLikeYouBuildIt</h1>
<p><strong>This package is deprecated</strong>. Use <code>Base.showarg</code>, which was inspired by this package.</p>
<p><a href="https://travis-ci.org/JuliaArrays/ShowItLikeYouBuildIt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c3504a9db81520f8cf9d709d30ee7fec156c3623231e26e4a24f532cc123737b/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f53686f7749744c696b65596f754275696c6449742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/ShowItLikeYouBuildIt.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaArrays/ShowItLikeYouBuildIt.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/36e7b725277a53a1159cc562bd53ea10f976e05c1f4282ed191755d2d3c738d0/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f53686f7749744c696b65596f754275696c6449742e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/ShowItLikeYouBuildIt.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>ShowItLikeYouBuildIt is designed to simplify the printing of type
information (in certain contexts) in Julia. Specifically, this package
currently provides tools for simplifying the <code>summary</code> of arrays.</p>
<h1><a id="user-content-example-of-usage" class="anchor" aria-hidden="true" href="#example-of-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example of usage</h1>
<p>Currently, the printing of a simple array looks like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = reshape(1:12, 3, 4)
3×4 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:
 1  4  7  10
 2  5  8  11
 3  6  9  12
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">12</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Base<span class="pl-k">.</span>ReshapedArray{Int64,<span class="pl-c1">2</span>,UnitRange{Int64},Tuple{}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>  <span class="pl-c1">11</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">9</span>  <span class="pl-c1">12</span></pre></div>
<p>It's worth noting that printing of the type information in the first
line---produced by the Base function <code>summary</code>---is both longer and
more complex than the sequence of commands needed to construct the
object.</p>
<p>The idea of this package is to simplify the type information by
instead showing a sequence of function calls that would create an
identical type. To implement this for your own <code>AbstractArray</code> type,
the first step is to specialize the <code>showarg</code> function (which shows an
object <code>x</code> as if it were an argument to a function) for your array
type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function ShowItLikeYouBuildIt.showarg(io::IO, A::Base.ReshapedArray)
    print(io, &quot;reshape(&quot;)
    showarg(io, parent(A))
    print(io, &quot;, &quot;, A.dims, ')')
end
"><pre><span class="pl-k">function</span> ShowItLikeYouBuildIt<span class="pl-k">.</span><span class="pl-en">showarg</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, A<span class="pl-k">::</span><span class="pl-c1">Base.ReshapedArray</span>)
    <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>reshape(<span class="pl-pds">"</span></span>)
    <span class="pl-c1">showarg</span>(io, <span class="pl-c1">parent</span>(A))
    <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span>, A<span class="pl-k">.</span>dims, <span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Next, we hook this up so that it gets called by Base's <code>summary</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Base.summary(A::Base.ReshapedArray) = summary_build(A)
"><pre>Base<span class="pl-k">.</span><span class="pl-en">summary</span>(A<span class="pl-k">::</span><span class="pl-c1">Base.ReshapedArray</span>) <span class="pl-k">=</span> <span class="pl-c1">summary_build</span>(A)</pre></div>
<p><code>summary_build</code> is a simple function that prints the dimension string,
calls <code>showarg</code> on <code>A</code>, and then prints the element type. If you
wanted, you could customize <code>summary</code> differently from this; as long
as your method calls <code>showarg</code> on <code>A</code>, the machinery we've defined
will be actived.</p>
<p>Now the printing of this array looks like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = reshape(1:12, 3, 4)
3×4 reshape(::UnitRange{Int64}, (3,4)) with element type Int64:
 1  4  7  10
 2  5  8  11
 3  6  9  12
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">12</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)) with element type Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>  <span class="pl-c1">11</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">9</span>  <span class="pl-c1">12</span></pre></div>
<p>The noteworthy thing here is that we're displaying the type via a set
of function calls that would produce an object with this type. The
printing of the "inner" array as <code>::UnitRange{Int64}</code> is the default
behavior of <code>showarg</code>, printing information about the object in terms
of its type (as an argument to a function, not as a type-parameter,
hence the <code>::</code>).</p>
<p>In general, <code>showarg</code> methods for <code>AbstractArray</code> types that wrap
other arrays should call <code>showarg</code> on at least the "main" array in the
container. This allows the summary of a type to be printed as a nested
call sequence; for example, if one added a suitable definition of <code>showarg</code>
for <code>SubArray</code> (see <code>?showarg</code>), one might obtain the following:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = rand(3,5,7)
v = view(a, :, 3, 2:5)
c = reshape(v, 4, 3)

julia&gt; summary(c)
&quot;4×3 reshape(view(::Array{Float64,3}, Colon(), 3, 2:5), (4,3)) with element type Float64&quot;
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">7</span>)
v <span class="pl-k">=</span> <span class="pl-c1">view</span>(a, :, <span class="pl-c1">3</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
c <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(v, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">summary</span>(c)
<span class="pl-s"><span class="pl-pds">"</span>4×3 reshape(view(::Array{Float64,3}, Colon(), 3, 2:5), (4,3)) with element type Float64<span class="pl-pds">"</span></span></pre></div>
<p>which may be someone easier to understand than the default</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;4×3 Base.ReshapedArray{Float64,2,SubArray{Float64,2,Array{Float64,3},Tuple{Colon,Int64,UnitRange{Int64}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}&quot;
"><pre><span class="pl-s"><span class="pl-pds">"</span>4×3 Base.ReshapedArray{Float64,2,SubArray{Float64,2,Array{Float64,3},Tuple{Colon,Int64,UnitRange{Int64}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}<span class="pl-pds">"</span></span></pre></div>
<p>You can optionally supply a "complexity threshold" to <code>summary_build</code>;
objects whose types have complexity less than or equal to the
threshold will be printed using the traditional type-based
summary. See the documentation for <code>summary_build</code> and
<code>type_complexity</code> for more information.</p>
<p>It's worth emphasizing that this package does <strong>not</strong> itself change
the display of any objects; it simply provides the necessary tools. If
you're a package author and interested in using ShowItLikeYouBuildIt,
please keep the following guidelines in mind:</p>
<ul>
<li>
<p>it is reasonable to customize the printing of objects whose types are
defined in your package.</p>
</li>
<li>
<p>be wary about changing the display of types defined in <code>Base</code> (as we
did above, for the purposes of illustration, with <code>ReshapedArray</code>
and <code>SubArray</code>) or of types defined in other packages. Such changes
will affect the printing of <em>all</em> such objects, and thus might have
unintended consequences.</p>
</li>
</ul>
</article></div>