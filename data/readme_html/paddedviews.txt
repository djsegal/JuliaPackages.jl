<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-paddedviews" class="anchor" aria-hidden="true" href="#paddedviews"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PaddedViews</h1>
<p dir="auto"><a href="https://github.com/JuliaArrays/PaddedViews.jl/actions"><img src="https://github.com/JuliaArrays/PaddedViews.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/b013d89d65a4b55c6918aace6acd4bae7339f0f7d9abc73fa73e26d509115ac5/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f502f50616464656456696577732e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/P/PaddedViews.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/JuliaArrays/PaddedViews.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bbe73b4ac3abba491ca2b6d2eb25831a3d619f9773f0970d290d4cbb1db4d846/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f50616464656456696577732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://codecov.io/github/JuliaArrays/PaddedViews.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary</h2>
<p dir="auto">PaddedViews provides a simple wrapper type, <code>PaddedView</code>, to add
"virtual" padding to any array without copying data. Edge values not
specified by the array are assigned a <code>fillvalue</code>.  Multiple arrays
may be "promoted" to have common indices using the <code>paddedviews</code>
function.</p>
<p dir="auto"><code>PaddedView</code> arrays are read-only, meaning that you cannot assign
values to them. The original array may be extracted using <code>A = parent(P)</code>, where <code>P</code> is a <code>PaddedView</code>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">For padding a single array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; PaddedView(-1, a, (4, 5))
4×5 PaddedView(-1, ::Array{Int64,2}, (Base.OneTo(4), Base.OneTo(5))) with eltype Int64:
  1   4   7  -1  -1
  2   5   8  -1  -1
  3   6   9  -1  -1
 -1  -1  -1  -1  -1

 julia&gt; PaddedView(-1, a, (1:5,1:5), (2:4,2:4))
 5×5 PaddedView(-1, OffsetArray(::Array{Int64,2}, 2:4, 2:4), (1:5, 1:5)) with eltype Int64 with indices 1:5×1:5:
 -1  -1  -1  -1  -1
 -1   1   4   7  -1
 -1   2   5   8  -1
 -1   3   6   9  -1
 -1  -1  -1  -1  -1

 julia&gt; PaddedView(-1, a, (0:4, 0:4))
 5×5 PaddedView(-1, ::Array{Int64,2}, (0:4, 0:4)) with eltype Int64 with indices 0:4×0:4:
  -1  -1  -1  -1  -1
  -1   1   4   7  -1
  -1   2   5   8  -1
  -1   3   6   9  -1
  -1  -1  -1  -1  -1

julia&gt; PaddedView(-1, a, (5,5), (2,2))
5×5 PaddedView(-1, OffsetArray(::Array{Int64,2}, 2:4, 2:4), (Base.OneTo(5), Base.OneTo(5))) with eltype Int64:
 -1  -1  -1  -1  -1
 -1   1   4   7  -1
 -1   2   5   8  -1
 -1   3   6   9  -1
 -1  -1  -1  -1  -1"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a, (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, (Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">4</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">5</span>))) with eltype Int64<span class="pl-k">:</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">4</span>   <span class="pl-c1">7</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">2</span>   <span class="pl-c1">5</span>   <span class="pl-c1">8</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">3</span>   <span class="pl-c1">6</span>   <span class="pl-c1">9</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a, (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>), (<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>))
 <span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>), (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)) with eltype Int64 with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">4</span>   <span class="pl-c1">7</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">2</span>   <span class="pl-c1">5</span>   <span class="pl-c1">8</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">3</span>   <span class="pl-c1">6</span>   <span class="pl-c1">9</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a, (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>))
 <span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>)) with eltype Int64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">4</span>   <span class="pl-c1">7</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">2</span>   <span class="pl-c1">5</span>   <span class="pl-c1">8</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">3</span>   <span class="pl-c1">6</span>   <span class="pl-c1">9</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a, (<span class="pl-c1">5</span>,<span class="pl-c1">5</span>), (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>), (Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">5</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">5</span>))) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">4</span>   <span class="pl-c1">7</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">2</span>   <span class="pl-c1">5</span>   <span class="pl-c1">8</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">3</span>   <span class="pl-c1">6</span>   <span class="pl-c1">9</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">For padding multiple arrays to have common indices:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a1 = reshape([1, 2, 3], 3, 1)
3×1 Array{Int64,2}:
 1
 2
 3

julia&gt; a2 = [4 5 6]
1×3 Array{Int64,2}:
 4  5  6

julia&gt; a1p, a2p = paddedviews(-1, a1, a2);

julia&gt; a1p
3×3 PaddedView(-1, ::Array{Int64,2}, (Base.OneTo(3), Base.OneTo(3))) with eltype Int64:
 1  -1  -1
 2  -1  -1
 3  -1  -1

julia&gt; a2p
3×3 PaddedView(-1, ::Array{Int64,2}, (Base.OneTo(3), Base.OneTo(3))) with eltype Int64:
  4   5   6
 -1  -1  -1
 -1  -1  -1"><pre>julia<span class="pl-k">&gt;</span> a1 <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> a2 <span class="pl-k">=</span> [<span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>]
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> a1p, a2p <span class="pl-k">=</span> <span class="pl-c1">paddedviews</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a1, a2);

julia<span class="pl-k">&gt;</span> a1p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, (Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>))) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> a2p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, (Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>))) with eltype Int64<span class="pl-k">:</span>
  <span class="pl-c1">4</span>   <span class="pl-c1">5</span>   <span class="pl-c1">6</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">If you want original arrays in the center of padded results:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a1 = reshape([1, 2, 3], 3, 1)
3×1 Array{Int64,2}:
 1
 2
 3

julia&gt; a2 = [4 5 6]
1×3 Array{Int64,2}:
 4  5  6

julia&gt; a1p, a2p = sym_paddedviews(-1, a1, a2);

julia&gt; a1p
3×3 PaddedView(-1, ::Array{Int64,2}, (1:3, 0:2)) with eltype Int64 with indices 1:3×0:2:
 -1  1  -1
 -1  2  -1
 -1  3  -1

julia&gt; a2p
3×3 PaddedView(-1, ::Array{Int64,2}, (0:2, 1:3)) with eltype Int64 with indices 0:2×1:3:
 -1  -1  -1
  4   5   6
 -1  -1  -1"><pre>julia<span class="pl-k">&gt;</span> a1 <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> a2 <span class="pl-k">=</span> [<span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>]
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> a1p, a2p <span class="pl-k">=</span> <span class="pl-c1">sym_paddedviews</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a1, a2);

julia<span class="pl-k">&gt;</span> a1p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>)) with eltype Int64 with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> a2p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)) with eltype Int64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">4</span>   <span class="pl-c1">5</span>   <span class="pl-c1">6</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">We can use <code>dims</code> keyword to specify the direction of padding for the output arrays as shown above. They can be integers or tuple of integers.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a1p, a2p = paddedviews(-1, a1, a2; dims=1);

julia&gt; a1p
3×1 PaddedView(-1, ::Matrix{Int64}, (Base.OneTo(3), Base.OneTo(1))) with eltype Int64:
 1
 2
 3

julia&gt; a2p
3×3 PaddedView(-1, ::Matrix{Int64}, (Base.OneTo(3), Base.OneTo(3))) with eltype Int64:
  4   5   6
 -1  -1  -1
 -1  -1  -1

julia&gt; a1p, a2p = sym_paddedviews(-1, a1, a2; dims=2);

julia&gt; a1p
3×3 PaddedView(-1, ::Matrix{Int64}, (1:3, 0:2)) with eltype Int64 with indices 1:3×0:2:
 -1  1  -1
 -1  2  -1
 -1  3  -1

julia&gt; a2p
1×3 PaddedView(-1, ::Matrix{Int64}, (1:1, 1:3)) with eltype Int64 with indices 1:1×1:3:
 4  5  6"><pre>julia<span class="pl-k">&gt;</span> a1p, a2p <span class="pl-k">=</span> <span class="pl-c1">paddedviews</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a1, a2; dims<span class="pl-k">=</span><span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> a1p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>, (Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">1</span>))) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> a2p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>, (Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>))) with eltype Int64<span class="pl-k">:</span>
  <span class="pl-c1">4</span>   <span class="pl-c1">5</span>   <span class="pl-c1">6</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> a1p, a2p <span class="pl-k">=</span> <span class="pl-c1">sym_paddedviews</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, a1, a2; dims<span class="pl-k">=</span><span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> a1p
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>, (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>)) with eltype Int64 with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> a2p
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">PaddedView</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">::</span><span class="pl-c1">Matrix{Int64}</span>, (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)) with eltype Int64 with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span></pre></div>

</article></div>