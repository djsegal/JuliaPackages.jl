<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-smtpclient" class="anchor" aria-hidden="true" href="#smtpclient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SMTPClient</h1>
<p dir="auto"><a href="https://github.com/aviks/SMTPClient.jl/actions?query=workflow%3ACI"><img src="https://github.com/aviks/SMTPClient.jl/workflows/CI/badge.svg?event=push&amp;branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SMTPClient/Bx8Fn/" rel="nofollow"><img src="https://camo.githubusercontent.com/ee4f66a47e6169dbae5c14e9db0b5f83667b96cb1f257c40bb84c29e7837448f/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f534d5450436c69656e742f76657273696f6e2e737667" alt="Latest Version" data-canonical-src="https://juliahub.com/docs/SMTPClient/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SMTPClient/Bx8Fn/" rel="nofollow"><img src="https://camo.githubusercontent.com/9018b4f5e5adcb336018bfa194cfee38c455668ca2e318418cd873bf59f5b0a8/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f534d5450436c69656e742f706b676576616c2e737667" alt="Pkg Eval" data-canonical-src="https://juliahub.com/docs/SMTPClient/pkgeval.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SMTPClient/Bx8Fn/?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/e3987f6f0668a90d01eb956a8c965d83351e47ef01cf8c41639b00f4f2c2541c/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f534d5450436c69656e742f646570732e737667" alt="Dependents" data-canonical-src="https://juliahub.com/docs/SMTPClient/deps.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A <a href="curl.haxx.se">CURL</a> based SMTP client with fairly low level API.
It is useful for sending emails from within Julia code.
Depends on <a href="https://github.com/JuliaWeb/LibCURL.jl/">LibCURL.jl</a>.</p>
<p dir="auto">The latest version of SMTPClient requires Julia 1.3 or higher. Versions of this package may be
available for older Julia versions, but are not fully supported.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;SMTPClient&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SMTPClient<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The LibCURL native library is automatically installed using Julia's artifact system.</p>
<h2 dir="auto"><a id="user-content-raw-usage" class="anchor" aria-hidden="true" href="#raw-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Raw usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SMTPClient

opt = SendOptions(
  isSSL = true,
  username = &quot;you@gmail.com&quot;,
  passwd = &quot;yourgmailpassword&quot;)
#Provide the message body as RFC5322 within an IO
body = IOBuffer(
  &quot;Date: Fri, 18 Oct 2013 21:44:29 +0100\r\n&quot; *
  &quot;From: You &lt;you@gmail.com&gt;\r\n&quot; *
  &quot;To: me@test.com\r\n&quot; *
  &quot;Subject: Julia Test\r\n&quot; *
  &quot;\r\n&quot; *
  &quot;Test Message\r\n&quot;)
url = &quot;smtps://smtp.gmail.com:465&quot;
rcpt = [&quot;&lt;me@test.com&gt;&quot;, &quot;&lt;foo@test.com&gt;&quot;]
from = &quot;&lt;you@gmail.com&gt;&quot;
resp = send(url, rcpt, from, body, opt)"><pre><span class="pl-k">using</span> SMTPClient

opt <span class="pl-k">=</span> <span class="pl-c1">SendOptions</span>(
  isSSL <span class="pl-k">=</span> <span class="pl-c1">true</span>,
  username <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>you@gmail.com<span class="pl-pds">"</span></span>,
  passwd <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>yourgmailpassword<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>Provide the message body as RFC5322 within an IO</span>
body <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(
  <span class="pl-s"><span class="pl-pds">"</span>Date: Fri, 18 Oct 2013 21:44:29 +0100<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span> <span class="pl-k">*</span>
  <span class="pl-s"><span class="pl-pds">"</span>From: You &lt;you@gmail.com&gt;<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span> <span class="pl-k">*</span>
  <span class="pl-s"><span class="pl-pds">"</span>To: me@test.com<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span> <span class="pl-k">*</span>
  <span class="pl-s"><span class="pl-pds">"</span>Subject: Julia Test<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span> <span class="pl-k">*</span>
  <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span> <span class="pl-k">*</span>
  <span class="pl-s"><span class="pl-pds">"</span>Test Message<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span>)
url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>smtps://smtp.gmail.com:465<span class="pl-pds">"</span></span>
rcpt <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>&lt;me@test.com&gt;<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>&lt;foo@test.com&gt;<span class="pl-pds">"</span></span>]
from <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;you@gmail.com&gt;<span class="pl-pds">"</span></span>
resp <span class="pl-k">=</span> <span class="pl-c1">send</span>(url, rcpt, from, body, opt)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">Sending from file <code>IOStream</code> is supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="body = open(&quot;/path/to/mail&quot;)"><pre>body <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/mail<span class="pl-pds">"</span></span>)</pre></div>
</li>
</ul>
<h3 dir="auto"><a id="user-content-example-with-html-formatting" class="anchor" aria-hidden="true" href="#example-with-html-formatting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example with HTML formatting</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="body = &quot;Subject: A simple test\r\n&quot;*
    &quot;Mime-Version: 1.0;\r\n&quot;*
    &quot;Content-Type: text/html;\r\n&quot;*
    &quot;Content-Transfer-Encoding: 7bit;\r\n&quot;*
    &quot;\r\n&quot;*
    &quot;&quot;&quot;&lt;html&gt;
    &lt;body&gt;
    &lt;h2&gt;An important link to look at!&lt;/h2&gt;
    Here's an &lt;a href=&quot;https://github.com/aviks/SMTPClient.jl&quot;&gt;important link&lt;/a&gt;
    &lt;/body&gt;
    &lt;/html&gt;\r\n&quot;&quot;&quot;"><pre>body <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Subject: A simple test<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span><span class="pl-k">*</span>
    <span class="pl-s"><span class="pl-pds">"</span>Mime-Version: 1.0;<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span><span class="pl-k">*</span>
    <span class="pl-s"><span class="pl-pds">"</span>Content-Type: text/html;<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span><span class="pl-k">*</span>
    <span class="pl-s"><span class="pl-pds">"</span>Content-Transfer-Encoding: 7bit;<span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span><span class="pl-k">*</span>
    <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\r\n</span><span class="pl-pds">"</span></span><span class="pl-k">*</span>
    <span class="pl-s"><span class="pl-pds">"""</span>&lt;html&gt;</span>
<span class="pl-s">    &lt;body&gt;</span>
<span class="pl-s">    &lt;h2&gt;An important link to look at!&lt;/h2&gt;</span>
<span class="pl-s">    Here's an &lt;a href="https://github.com/aviks/SMTPClient.jl"&gt;important link&lt;/a&gt;</span>
<span class="pl-s">    &lt;/body&gt;</span>
<span class="pl-s">    &lt;/html&gt;<span class="pl-cce">\r\n</span><span class="pl-pds">"""</span></span></pre></div>
<h3 dir="auto"><a id="user-content-function-to-construct-the-iobuffer-body-and-for-adding-attachments" class="anchor" aria-hidden="true" href="#function-to-construct-the-iobuffer-body-and-for-adding-attachments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function to construct the IOBuffer body and for adding attachments</h3>
<p dir="auto">A new function <code>get_body()</code> is available to facilitate constructing the IOBuffer for the body of the message and for adding attachments.</p>
<p dir="auto">The function takes four required arguments: the <code>to</code> and <code>from</code> email addresses, a <code>subject</code> string, and a <code>msg</code> string. The <code>to</code> argument is a vector of strings, containing one or more email addresses. The <code>msg</code> string can be a regular string with the contents of the message or a string in MIME format, following the <a href="https://datatracker.ietf.org/doc/html/rfc5322" rel="nofollow">RFC5322</a> specifications, and constructed as a plain text, html text or markdown text.</p>
<p dir="auto">There are also the optional keyword arguments <code>cc</code>, <code>replyto</code> and <code>attachments</code>. The argument <code>cc</code> should be a vector of strings, containing one or more email addresses, while <code>replyto</code> is a string expected to contain a single argument, just like <code>from</code>. The <code>attachments</code> argument should be a list of filenames to be attached to the message.</p>
<p dir="auto">The attachments are encoded using <code>Base64.base64encode</code> and included in the IOBuffer variable returned by the function. The function <code>get_body()</code> takes care of identifying which type of attachments are to be included (from the filename extensions) and to properly add them according to the MIME specifications.</p>
<p dir="auto">In case an attachment is to be added, the <code>msg</code> argument must be formatted according to the MIME specifications. In order to help with that, another function, <code>get_mime_msg(message)</code>, is provided, which takes the provided message and returns the message with the proper MIME specifications. By default, it assumes plain text with UTF-8 encoding, but plain text with different encodings or HTML text or Markdown text can also be given (see <a href="src/user.jl#L35">src/user.jl#L36</a> for more details on the implementation).</p>
<p dir="auto">As for blind carbon copy (Bcc), it is implicitly handled by <code>send()</code>. Every recipient in <code>send()</code> which is not included in <code>body</code> is treated as a Bcc.</p>
<p dir="auto">Here are a few examples:</p>
<h4 dir="auto"><a id="user-content-message-with-several-types-of-recipients" class="anchor" aria-hidden="true" href="#message-with-several-types-of-recipients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Message with several types of recipients</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SMTPClient

opt = SendOptions(
  isSSL = true,
  username = &quot;you@gmail.com&quot;,
  passwd = &quot;yourgmailpassword&quot;
)

url = &quot;smtps://smtp.gmail.com:465&quot;

subject = &quot;SMPTClient.jl&quot;
message = &quot;Don't forget to check out SMTPClient.jl&quot;

to = [&quot;&lt;foo@test.com&gt;&quot;]
cc = [&quot;&lt;bar@test.com&gt;&quot;]
bcc = [&quot;&lt;baz@test.com&gt;&quot;]
from = &quot;You &lt;you@test.com&gt;&quot;
replyto = &quot;&lt;you@gmail.com&gt;&quot;

body = get_body(to, from, subject, message; cc, replyto)

rcpt = vcat(to, cc, bcc)
resp = send(url, rcpt, from, body, opt)"><pre><span class="pl-k">using</span> SMTPClient

opt <span class="pl-k">=</span> <span class="pl-c1">SendOptions</span>(
  isSSL <span class="pl-k">=</span> <span class="pl-c1">true</span>,
  username <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>you@gmail.com<span class="pl-pds">"</span></span>,
  passwd <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>yourgmailpassword<span class="pl-pds">"</span></span>
)

url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>smtps://smtp.gmail.com:465<span class="pl-pds">"</span></span>

subject <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>SMPTClient.jl<span class="pl-pds">"</span></span>
message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Don't forget to check out SMTPClient.jl<span class="pl-pds">"</span></span>

to <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>&lt;foo@test.com&gt;<span class="pl-pds">"</span></span>]
cc <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>&lt;bar@test.com&gt;<span class="pl-pds">"</span></span>]
bcc <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>&lt;baz@test.com&gt;<span class="pl-pds">"</span></span>]
from <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>You &lt;you@test.com&gt;<span class="pl-pds">"</span></span>
replyto <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;you@gmail.com&gt;<span class="pl-pds">"</span></span>

body <span class="pl-k">=</span> <span class="pl-c1">get_body</span>(to, from, subject, message; cc, replyto)

rcpt <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(to, cc, bcc)
resp <span class="pl-k">=</span> <span class="pl-c1">send</span>(url, rcpt, from, body, opt)</pre></div>
<h4 dir="auto"><a id="user-content-message-with-attachment" class="anchor" aria-hidden="true" href="#message-with-attachment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Message with attachment</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="subject = &quot;Julia logo&quot;
message = &quot;Check out this cool logo!&quot;
attachments = [&quot;julia_logo_color.png&quot;]

mime_msg = get_mime_msg(message)

body = get_body(to, from, subject, mime_msg; attachments)"><pre>subject <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Julia logo<span class="pl-pds">"</span></span>
message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Check out this cool logo!<span class="pl-pds">"</span></span>
attachments <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>julia_logo_color.png<span class="pl-pds">"</span></span>]

mime_msg <span class="pl-k">=</span> <span class="pl-c1">get_mime_msg</span>(message)

body <span class="pl-k">=</span> <span class="pl-c1">get_body</span>(to, from, subject, mime_msg; attachments)</pre></div>
<h4 dir="auto"><a id="user-content-html-message" class="anchor" aria-hidden="true" href="#html-message"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HTML message</h4>
<p dir="auto">Note that, by using <code>get_mime_msg()</code> with an <code>HTML{String}</code> message, the tags <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> should not be added.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="subject = &quot;A simple HTML test&quot;
message = 
    html&quot;&quot;&quot;&lt;h2&gt;An important link to look at!&lt;/h2&gt;
    Here's an &lt;a href=&quot;https://github.com/aviks/SMTPClient.jl&quot;&gt;important link&lt;/a&gt;
    &quot;&quot;&quot;

mime_msg = get_mime_msg(message)

body = get_body(to, from, subject, mime_msg)
resp = send(server, rcpts, sender, body, opts)"><pre>subject <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>A simple HTML test<span class="pl-pds">"</span></span>
message <span class="pl-k">=</span> 
    <span class="pl-s"><span class="pl-pds"><span class="pl-c1">html</span>"""</span>&lt;h2&gt;An important link to look at!&lt;/h2&gt;</span>
<span class="pl-s">    Here's an &lt;a href="https://github.com/aviks/SMTPClient.jl"&gt;important link&lt;/a&gt;</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>

mime_msg <span class="pl-k">=</span> <span class="pl-c1">get_mime_msg</span>(message)

body <span class="pl-k">=</span> <span class="pl-c1">get_body</span>(to, from, subject, mime_msg)
resp <span class="pl-k">=</span> <span class="pl-c1">send</span>(server, rcpts, sender, body, opts)</pre></div>
<h4 dir="auto"><a id="user-content-markdown-message" class="anchor" aria-hidden="true" href="#markdown-message"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Markdown message</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Markdown
subject = &quot;The Julia Programming Language&quot;
message = 
    Markdown.parse(
        &quot;&quot;&quot;# The Julia Programming Language

        ## Julia in a Nutshell

        1. **Fast** - Julia was designed from the beginning for [high performance](https://docs.julialang.org/en/v1/manual/types/).
        1. **Dynamic** - Julia is [dynamically typed](https://docs.julialang.org/en/v1/manual/types/).
        1. **Reproducible** - recreate the same [Julia environment](https://julialang.github.io/Pkg.jl/v1/environments/) every time.
        1. **Composable** - Julia uses [multiple dispatch](https://docs.julialang.org/en/v1/manual/methods/) as a paradigm.
        1. **General** - One can build entire [Applications and Microservices](https://www.youtube.com/watch?v=uLhXgt_gKJc) in Julia.
        1. **Open source** - Available under the [MIT license](https://github.com/JuliaLang/julia/blob/master/LICENSE.md), with the [source code](https://github.com/JuliaLang/julia) on GitHub.

        It has *over 5,000* [Julia packages](https://juliahub.com/ui/Packages) and a *variety* of advanced ecosystems. Check out more on [the Julia Programing Language website](https://julialang.org).
        &quot;&quot;&quot;
    )

mime_msg = get_mime_msg(message)

body = get_body(to, from, subject, mime_msg; cc, replyto)
resp = send(server, rcpts, sender, body, opts)"><pre><span class="pl-k">using</span> Markdown
subject <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>The Julia Programming Language<span class="pl-pds">"</span></span>
message <span class="pl-k">=</span> 
    Markdown<span class="pl-k">.</span><span class="pl-c1">parse</span>(
        <span class="pl-s"><span class="pl-pds">"""</span># The Julia Programming Language</span>
<span class="pl-s"></span>
<span class="pl-s">        ## Julia in a Nutshell</span>
<span class="pl-s"></span>
<span class="pl-s">        1. **Fast** - Julia was designed from the beginning for [high performance](https://docs.julialang.org/en/v1/manual/types/).</span>
<span class="pl-s">        1. **Dynamic** - Julia is [dynamically typed](https://docs.julialang.org/en/v1/manual/types/).</span>
<span class="pl-s">        1. **Reproducible** - recreate the same [Julia environment](https://julialang.github.io/Pkg.jl/v1/environments/) every time.</span>
<span class="pl-s">        1. **Composable** - Julia uses [multiple dispatch](https://docs.julialang.org/en/v1/manual/methods/) as a paradigm.</span>
<span class="pl-s">        1. **General** - One can build entire [Applications and Microservices](https://www.youtube.com/watch?v=uLhXgt_gKJc) in Julia.</span>
<span class="pl-s">        1. **Open source** - Available under the [MIT license](https://github.com/JuliaLang/julia/blob/master/LICENSE.md), with the [source code](https://github.com/JuliaLang/julia) on GitHub.</span>
<span class="pl-s"></span>
<span class="pl-s">        It has *over 5,000* [Julia packages](https://juliahub.com/ui/Packages) and a *variety* of advanced ecosystems. Check out more on [the Julia Programing Language website](https://julialang.org).</span>
<span class="pl-s">        <span class="pl-pds">"""</span></span>
    )

mime_msg <span class="pl-k">=</span> <span class="pl-c1">get_mime_msg</span>(message)

body <span class="pl-k">=</span> <span class="pl-c1">get_body</span>(to, from, subject, mime_msg; cc, replyto)
resp <span class="pl-k">=</span> <span class="pl-c1">send</span>(server, rcpts, sender, body, opts)</pre></div>
<h4 dir="auto"><a id="user-content-previewing-the-generated-message" class="anchor" aria-hidden="true" href="#previewing-the-generated-message"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Previewing the generated message</h4>
<p dir="auto">You can preview your message by displaying the generated <code>body</code>, which is an <code>IOBuffer</code>.</p>
<p dir="auto">For instance, you can view the raw message with <code>println(String(take!(body)))</code>.</p>
<p dir="auto">You can also save the message <code>body</code> to a <code>.eml</code> file for viewing it in a email viewer.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="open(&quot;message.eml&quot;,&quot;w&quot;) do io
    println(io, String(take!(body)))
end"><pre><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>message.eml<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">println</span>(io, <span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(body)))
<span class="pl-k">end</span></pre></div>
<p dir="auto">The last example on the previous section shows the following preview on Apple Mail:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="img/message.png"><img src="img/message.png" alt="Message on the Julia Programming Language" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-gmail-notes" class="anchor" aria-hidden="true" href="#gmail-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gmail Notes</h3>
<p dir="auto">Due to the security policy of Gmail,
you need to "allow less secure apps into your account":</p>
<ul dir="auto">
<li><a href="https://myaccount.google.com/lesssecureapps" rel="nofollow">https://myaccount.google.com/lesssecureapps</a></li>
</ul>
<p dir="auto">The URL for gmail can be either <code>smtps://smtp.gmail.com:465</code> or <code>smtp://smtp.gmail.com:587</code>.
(Note the extra <code>s</code> in the former.)
Both use SSL, and thus <code>isSSL</code> must be set to <code>true</code> in <code>SendOptions</code>. The latter starts
the connection with plain text, and converts it to secured before sending any data using a
protocol extension called <code>STARTTLS</code>. Gmail documentation suggests using this latter setup.</p>
<h3 dir="auto"><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Troubleshooting</h3>
<p dir="auto">Since this package is a pretty thin wrapper around a low level network protocol, it helps
to know the basics of SMTP while troubleshooting this package. Here is a <a href="https://utcc.utoronto.ca/usg/technotes/smtp-intro.html" rel="nofollow">quick overview of SMTP</a>. In particular, please pay attention to the difference
between the <code>envelope headers</code> and the <code>message headers</code>.</p>
<p dir="auto">If you are having trouble with sending email, set <code>verbose=true</code> when creating the <code>SendOptions</code> object.
Please always do this before submitting a bugreport to this project.</p>
<p dir="auto">When sending email over SSL, certificate verification is performed, which requires the presence of a
certificate authority bundle. This package uses the <a href="https://curl.haxx.se/docs/caextract.html" rel="nofollow">CA bundle from the Mozilla</a> project. Currently there is no way to specify a private CA bundle. Modify the source if you need this.</p>
<h2 dir="auto"><a id="user-content-function-reference" class="anchor" aria-hidden="true" href="#function-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function Reference</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="send(url, to-addresses, from-address, message-body, options)"><pre><span class="pl-c1">send</span>(url, to<span class="pl-k">-</span>addresses, from<span class="pl-k">-</span>address, message<span class="pl-k">-</span>body, options)</pre></div>
<p dir="auto">Send an email.</p>
<ul dir="auto">
<li><code>url</code> should be of the form <code>smtp://server:port</code> or <code>smtps://...</code>.</li>
<li><code>to-address</code> is a vector of <code>String</code>.</li>
<li><code>from-address</code> is a <code>String</code>. All addresses must be enclosed in angle brackets.</li>
<li><code>message-body</code> must be a RFC5322 formatted message body provided via an <code>IO</code>.</li>
<li><code>options</code> is an object of type <code>SendOptions</code>. It contains authentication information, as well as the option of whether the server requires TLS.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SendOptions(; isSSL = false, verbose = false, username = &quot;&quot;, passwd = &quot;&quot;)"><pre><span class="pl-c1">SendOptions</span>(; isSSL <span class="pl-k">=</span> <span class="pl-c1">false</span>, verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>, username <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, passwd <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Options are passed via the <code>SendOptions</code> constructor that takes keyword arguments.
The defaults are shown above.</p>
<ul dir="auto">
<li><code>verbose</code>: enable <code>libcurl</code> verbose mode or not.</li>
<li>If the <code>username</code> is blank, the <code>passwd</code> is not sent even if present.</li>
</ul>
<p dir="auto">Note that no keepalive is implemented.
New connections to the SMTP server are created for each message.</p>
</article></div>