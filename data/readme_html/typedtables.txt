<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-typedtablesjl" class="anchor" aria-hidden="true" href="#typedtablesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TypedTables.jl</h1>
<p dir="auto"><em>Simple, fast, column-based storage for data analysis in Julia</em></p>
<p dir="auto"><a href="https://JuliaData.github.io/TypedTables.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaData.github.io/TypedTables.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaData/TypedTables.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaData/TypedTables.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaData/TypedTables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b9f77d233717bdbd1a8fdcf0307ccf5315f76059a92ea1b3c22830c0dd2a2d4/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961446174612f54797065645461626c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaData/TypedTables.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/TypedTables/NU69s?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/194288c4836f4d490bf24f03d26e32320280378768041c165432f0558887930f/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f54797065645461626c65732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/TypedTables/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/TypedTables/NU69s" rel="nofollow"><img src="https://camo.githubusercontent.com/ef032e2d99fbd5f73228ea5635505f73609d47265fefb7ca7ed5830d1cf2669c/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f54797065645461626c65732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/TypedTables/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/TypedTables/NU69s" rel="nofollow"><img src="https://camo.githubusercontent.com/d6d8531532c5d6e6a3ab1ed0c867ce4c23c2f67f2954d23f5fb7f9eaff371b1e/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f54797065645461626c65732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/TypedTables/pkgeval.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>TypedTables.jl</em> provides two column-based storage containers: <code>Table</code> and <code>FlexTable</code>, both of which
represent an array of <code>NamedTuple</code>s. This package is designed to be lightweight,
easy-to-use and fast, and presents a very minimal new interface to learn.</p>
<p dir="auto">Data manipulation is possible throught the tools built into Julia (such as <code>map</code>, <code>filter</code>,
and <code>reduce</code>) and those provide by <a href="https://github.com/JuliaData/SplitApplyCombine.jl">SplitApplyCombine.jl</a>
(like <code>group</code> and <code>innerjoin</code>). You can speed up data analysis tasks with acceleration indices, by using the <a href="https://github.com/andyferris/AcceleratedArrays.jl">AcceleratedArrays.jl</a> package. This package is integrated the <em>Tables.jl</em> interface, and therefore the rest of
the data ecosystem such as <em>Query.jl</em>.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">It's simple to get started and create a table!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using TypedTables

julia&gt; t = Table(a = [1, 2, 3], b = [2.0, 4.0, 6.0])
Table with 2 columns and 3 rows:
     a  b
   ┌───────
 1 │ 1  2.0
 2 │ 2  4.0
 3 │ 3  6.0

julia&gt; t[1]  # Get first row
(a = 1, b = 2.0)

julia&gt; t.a  # Get column `a`
3-element Array{Int64,1}:
 1
 2
 3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TypedTables

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">Table</span>(a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], b <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">6.0</span>])
Table with <span class="pl-c1">2</span> columns and <span class="pl-c1">3</span> rows<span class="pl-k">:</span>
     a  b
   ┌───────
 <span class="pl-c1">1</span> │ <span class="pl-c1">1</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2</span> │ <span class="pl-c1">2</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">3</span> │ <span class="pl-c1">3</span>  <span class="pl-c1">6.0</span>

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> Get first row</span>
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> t<span class="pl-k">.</span>a  <span class="pl-c"><span class="pl-c">#</span> Get column `a`</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p dir="auto">The <code>Table</code> type is a simple <code>AbstractArray</code> where each element ("row") is a <code>NamedTuple</code>.
Upon construction, it retains references to it's columns rather than creating copies.
Strong typing means that you can iterate through the rows of the <code>Table</code> at blazing speed,
allowing you to write your own algorithms in native Julia. To achieve this, the outermost
<code>Table</code> structure is immutable and the names and types of the columns are fixed (while the
data itself can be mutated).</p>
<p dir="auto">A more flexible table <code>FlexTable</code> is also provided. In a <code>FlexTable</code>, columns can be added, removed,
renamed or replaced. This comes at the cost of type-inferability - it will be slower to iterate the
rows of a <code>FlexTable</code> in a <code>for</code> loop. However, all the higher-level functions and queries will
still execute at full speed!</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">This rewrite of <em>TypedTables.jl</em> is still young, and more functionality will be added
over time. Be assured that the current provided interface is fully stabilized as it is
simply the interface provided by an <code>AbstractVector{&lt;:NamedTuple}</code>.</p>
</article></div>