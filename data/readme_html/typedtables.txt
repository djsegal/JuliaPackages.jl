<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-typedtablesjl" class="anchor" aria-hidden="true" href="#typedtablesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TypedTables.jl</h1>
<p><em>Simple, fast, column-based storage for data analysis in Julia</em></p>
<p><a href="https://JuliaData.github.io/TypedTables.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaData.github.io/TypedTables.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaData/TypedTables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dad3da9f09f5e3ec19e81cac6f6180508ee8e492/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961446174612f54797065645461626c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaData/TypedTables.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/andyferris/typedtables-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c64b07d81cd526b02cb5791ae0bbdf99a3a6de9b/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f74366a6f72367768356a3879387572743f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/t6jor6wh5j8y8urt?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaData/TypedTables.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4170a1ccb68af31fb88f033395e637dee20f55e1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961446174612f54797065645461626c65732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaData/TypedTables.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaData/TypedTables.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/89bef46d4b4eeeaa634cbf11e4e7609f48c52ddb/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961446174612f54797065645461626c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaData/TypedTables.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><em>TypedTables.jl</em> provides two column-based storage containers: <code>Table</code> and <code>FlexTable</code>, both of which
represent an array of <code>NamedTuple</code>s. This package is designed to be lightweight,
easy-to-use and fast, and presents a very minimal new interface to learn.</p>
<p>Data manipulation is possible throught the tools built into Julia (such as <code>map</code>, <code>filter</code>,
and <code>reduce</code>) and those provide by <a href="https://github.com/JuliaData/SplitApplyCombine.jl">SplitApplyCombine.jl</a>
(like <code>group</code> and <code>innerjoin</code>). You can speed up data analysis tasks with acceleration indices, by using the <a href="https://github.com/andyferris/AcceleratedArrays.jl">AcceleratedArrays.jl</a> package. This package is integrated the <em>Tables.jl</em> interface, and therefore the rest of
the data ecosystem such as <em>Query.jl</em>.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<p>It's simple to get started and create a table!</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TypedTables

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">Table</span>(a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], b <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">6.0</span>])
Table with <span class="pl-c1">2</span> columns and <span class="pl-c1">3</span> rows<span class="pl-k">:</span>
     a  b
   ┌───────
 <span class="pl-c1">1</span> │ <span class="pl-c1">1</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2</span> │ <span class="pl-c1">2</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">3</span> │ <span class="pl-c1">3</span>  <span class="pl-c1">6.0</span>

julia<span class="pl-k">&gt;</span> t[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> Get first row</span>
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> t<span class="pl-k">.</span>a  <span class="pl-c"><span class="pl-c">#</span> Get column `a`</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>The <code>Table</code> type is a simple <code>AbstractArray</code> where each element ("row") is a <code>NamedTuple</code>.
Upon construction, it retains references to it's columns rather than creating copies.
Strong typing means that you can iterate through the rows of the <code>Table</code> at blazing speed,
allowing you to write your own algorithms in native Julia. To achieve this, the outermost
<code>Table</code> structure is immutable and the names and types of the columns are fixed (while the
data itself can be mutated).</p>
<p>A more flexible table <code>FlexTable</code> is also provided. In a <code>FlexTable</code>, columns can be added, removed,
renamed or replaced. This comes at the cost of type-inferability - it will be slower to iterate the
rows of a <code>FlexTable</code> in a <code>for</code> loop. However, all the higher-level functions and queries will
still execute at full speed!</p>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h2>
<p>This rewrite of <em>TypedTables.jl</em> is still young, and more functionality will be added
over time. Be assured that the current provided interface is fully stabilized as it is
simply the interface provided by an <code>AbstractVector{&lt;:NamedTuple}</code>.</p>
</article></div>