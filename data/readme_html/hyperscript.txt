<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hyperscript" class="anchor" aria-hidden="true" href="#hyperscript"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hyperscript</h1>
<p>Hyperscript is a package for working with HTML, SVG, and CSS in Julia.</p>
<p>When using this library you automatically get:</p>
<ul>
<li>A concise DSL for writing HTML, SVG, and CSS.</li>
<li>Flexible ways to combine DOM pieces together into larger components.</li>
<li>Safe and automatic HTML-escaping.</li>
<li>Lightweight and optional support for scoped CSS.</li>
<li>Lightweight and optional support for CSS unit arithmetic.</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Hyperscript introduces the <code>m</code> function for creating markup nodes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m(&quot;div&quot;, class=&quot;entry&quot;,
    m(&quot;h1&quot;, &quot;An Important Announcement&quot;))
"><pre><span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>div<span class="pl-pds">"</span></span>, class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>entry<span class="pl-pds">"</span></span>,
    <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>h1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>An Important Announcement<span class="pl-pds">"</span></span>))</pre></div>
<p>Nodes can be used as a templates:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="const div = m(&quot;div&quot;)
const h1 = m(&quot;h1&quot;)
div(class=&quot;entry&quot;, h1(&quot;An Important Announcement&quot;))
"><pre><span class="pl-k">const</span> div <span class="pl-k">=</span> <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>div<span class="pl-pds">"</span></span>)
<span class="pl-k">const</span> h1 <span class="pl-k">=</span> <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>h1<span class="pl-pds">"</span></span>)
<span class="pl-c1">div</span>(class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>entry<span class="pl-pds">"</span></span>, <span class="pl-c1">h1</span>(<span class="pl-s"><span class="pl-pds">"</span>An Important Announcement<span class="pl-pds">"</span></span>))</pre></div>
<p>Dot syntax is supported for setting class attributes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="const div = m(&quot;div&quot;)
const h1 = m(&quot;h1&quot;)
div.entry(h1(&quot;An Important Announcement&quot;))
"><pre><span class="pl-k">const</span> div <span class="pl-k">=</span> <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>div<span class="pl-pds">"</span></span>)
<span class="pl-k">const</span> h1 <span class="pl-k">=</span> <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>h1<span class="pl-pds">"</span></span>)
div<span class="pl-k">.</span><span class="pl-c1">entry</span>(<span class="pl-c1">h1</span>(<span class="pl-s"><span class="pl-pds">"</span>An Important Announcement<span class="pl-pds">"</span></span>))</pre></div>
<p>Chained dot calls turn into multiple classes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m(&quot;div&quot;).header.entry
"><pre><span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>div<span class="pl-pds">"</span></span>)<span class="pl-k">.</span>header<span class="pl-k">.</span>entry</pre></div>
<p>The convenience macro <code>@tags</code> can be used to quickly declare common tags:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@tags div h1
const entry = div.entry
entry(h1(&quot;An Important Announcement&quot;))
"><pre><span class="pl-c1">@tags</span> div h1
<span class="pl-k">const</span> entry <span class="pl-k">=</span> div<span class="pl-k">.</span>entry
<span class="pl-c1">entry</span>(<span class="pl-c1">h1</span>(<span class="pl-s"><span class="pl-pds">"</span>An Important Announcement<span class="pl-pds">"</span></span>))</pre></div>
<p>Arrays, tuples, and generators are recursively flattened, linearizing nested structures for display:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@tags div h1
const entry = div.entry
div(entry.([&quot;$n Fast $n Furious&quot; for n in 1:10])) # joke © Glen Chiacchieri
"><pre><span class="pl-c1">@tags</span> div h1
<span class="pl-k">const</span> entry <span class="pl-k">=</span> div<span class="pl-k">.</span>entry
<span class="pl-c1">div</span>(<span class="pl-c1">entry</span>.([<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$n</span> Fast <span class="pl-v">$n</span> Furious<span class="pl-pds">"</span></span> <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])) <span class="pl-c"><span class="pl-c">#</span> joke © Glen Chiacchieri</span></pre></div>
<p>Attribute names with hyphens can be written using camelCase:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m(&quot;meta&quot;, httpEquiv=&quot;refresh&quot;)
# turns into &lt;meta http-equiv=&quot;refresh&quot; /&gt;
"><pre><span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>meta<span class="pl-pds">"</span></span>, httpEquiv<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>refresh<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> turns into &lt;meta http-equiv="refresh" /&gt;</span></pre></div>
<p>For attributes that are <em>meant</em> to be camelCase, Hyperscript still does the right thing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m(&quot;svg&quot;, viewBox=&quot;0 0 100 100&quot;)
# turns into &lt;svg viewBox=&quot;0 0 100 100&quot;&gt;&lt;svg&gt;
"><pre><span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>svg<span class="pl-pds">"</span></span>, viewBox<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>0 0 100 100<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> turns into &lt;svg viewBox="0 0 100 100"&gt;&lt;svg&gt;</span></pre></div>
<p>Attribute names that happen to be Julia keywords can be specified with <code>:attr =&gt; value</code> syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m(&quot;input&quot;; :type =&gt; &quot;text&quot;)
# turns into &lt;input type=&quot;text&quot; /&gt;
"><pre><span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>input<span class="pl-pds">"</span></span>; <span class="pl-c1">:type</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>text<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> turns into &lt;input type="text" /&gt;</span></pre></div>
<p>Hyperscript automatically HTML-escapes children of DOM nodes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m(&quot;p&quot;, &quot;I am a paragraph with a &lt; inside it&quot;)
# turns into &lt;p&gt;I am a paragraph with a &amp;#60; inside it&lt;/p&gt;
"><pre><span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>I am a paragraph with a &lt; inside it<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> turns into &lt;p&gt;I am a paragraph with a &amp;#60; inside it&lt;/p&gt;</span></pre></div>
<p>You can disable escaping using <code>@tags_noescape</code> for writing an inline style or script:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@tags_noescape script
script(&quot;console.log('&lt;(0_0&lt;) &lt;(0_0)&gt; (&gt;0_0)&gt; KIRBY DANCE')&quot;)
"><pre><span class="pl-c1">@tags_noescape</span> script
<span class="pl-c1">script</span>(<span class="pl-s"><span class="pl-pds">"</span>console.log('&lt;(0_0&lt;) &lt;(0_0)&gt; (&gt;0_0)&gt; KIRBY DANCE')<span class="pl-pds">"</span></span>)</pre></div>
<p>Nodes can be printed compactly with <code>print</code> or <code>show</code>, or pretty-printed by wrapping a node in <code>Pretty</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="node = m(&quot;div&quot;, class=&quot;entry&quot;, m(&quot;h1&quot;, &quot;An Important Announcement&quot;))

print(node)
# &lt;div class=&quot;entry&quot;&gt;&lt;h1&gt;An Important Announcement&lt;/h1&gt;&lt;/div&gt;

print(Pretty(node))
# &lt;div class=&quot;entry&quot;&gt;
#  &lt;h1&gt;An Important Announcement&lt;/h1&gt;
# &lt;/div&gt;
"><pre>node <span class="pl-k">=</span> <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>div<span class="pl-pds">"</span></span>, class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>entry<span class="pl-pds">"</span></span>, <span class="pl-c1">m</span>(<span class="pl-s"><span class="pl-pds">"</span>h1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>An Important Announcement<span class="pl-pds">"</span></span>))

<span class="pl-c1">print</span>(node)
<span class="pl-c"><span class="pl-c">#</span> &lt;div class="entry"&gt;&lt;h1&gt;An Important Announcement&lt;/h1&gt;&lt;/div&gt;</span>

<span class="pl-c1">print</span>(<span class="pl-c1">Pretty</span>(node))
<span class="pl-c"><span class="pl-c">#</span> &lt;div class="entry"&gt;</span>
<span class="pl-c"><span class="pl-c">#</span>  &lt;h1&gt;An Important Announcement&lt;/h1&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;/div&gt;</span></pre></div>
<p>Note that the extra white space can affect layout, particularly in conjunction with CSS properties like <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space" rel="nofollow">white-space</a>.</p>
<h2><a id="user-content-css" class="anchor" aria-hidden="true" href="#css"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSS</h2>
<p>In addition to HTML and SVG, Hyperscript also supports CSS:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="css(&quot;.entry&quot;, fontSize=&quot;14px&quot;)
# turns into .entry { font-size: 14px; }
"><pre><span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>.entry<span class="pl-pds">"</span></span>, fontSize<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>14px<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> turns into .entry { font-size: 14px; }</span></pre></div>
<p>CSS nodes can be nested inside each other:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="css(&quot;.entry&quot;,
    fontSize=&quot;14px&quot;,
    css(&quot;h1&quot;, textDecoration=&quot;underline&quot;),
    css(&quot;&gt; p&quot;, color=&quot;#999&quot;))
# turns into
# .entry { font-size: 14px; }
# .entry h1 { text-decoration: underline; }
# .entry &gt; p { color: #999; }
"><pre><span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>.entry<span class="pl-pds">"</span></span>,
    fontSize<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>14px<span class="pl-pds">"</span></span>,
    <span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>h1<span class="pl-pds">"</span></span>, textDecoration<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>underline<span class="pl-pds">"</span></span>),
    <span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>&gt; p<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#999<span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> turns into</span>
<span class="pl-c"><span class="pl-c">#</span> .entry { font-size: 14px; }</span>
<span class="pl-c"><span class="pl-c">#</span> .entry h1 { text-decoration: underline; }</span>
<span class="pl-c"><span class="pl-c">#</span> .entry &gt; p { color: #999; }</span></pre></div>
<p><code>@media</code> queries are also supported:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="css(&quot;@media (min-width: 1024px)&quot;,
    css(&quot;p&quot;, color=&quot;red&quot;))
# turns into
# @media (min-width: 1024px) {
#   p { color: red; }
# }
"><pre><span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>@media (min-width: 1024px)<span class="pl-pds">"</span></span>,
    <span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> turns into</span>
<span class="pl-c"><span class="pl-c">#</span> @media (min-width: 1024px) {</span>
<span class="pl-c"><span class="pl-c">#</span>   p { color: red; }</span>
<span class="pl-c"><span class="pl-c">#</span> }</span></pre></div>
<h2><a id="user-content-scoped-styles" class="anchor" aria-hidden="true" href="#scoped-styles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Scoped Styles</h2>
<p>Hyperscript supports scoped styles. They are implemented by adding unique attributes to nodes and selecting them via <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors" rel="nofollow">attribute selectors</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@tags p
@tags_noescape style

# Create a scoped `Style` object
s1 = Style(css(&quot;p&quot;, fontWeight=&quot;bold&quot;), css(&quot;span&quot;, color=&quot;red&quot;))

# Apply the style to a DOM node
s1(p(&quot;hello&quot;))
# turns into &lt;p v-style1&gt;hello&lt;/p&gt;

# Insert the corresponding styles into a &lt;style&gt; tag
style(styles(s1))
# turns into
# &lt;style&gt;
#   p[v-style1] {font-weight: bold;}
#   span[v-style1] {color: red;}
# &lt;/style&gt;

"><pre><span class="pl-c1">@tags</span> p
<span class="pl-c1">@tags_noescape</span> style

<span class="pl-c"><span class="pl-c">#</span> Create a scoped `Style` object</span>
s1 <span class="pl-k">=</span> <span class="pl-c1">Style</span>(<span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>, fontWeight<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bold<span class="pl-pds">"</span></span>), <span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>span<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Apply the style to a DOM node</span>
<span class="pl-c1">s1</span>(<span class="pl-c1">p</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> turns into &lt;p v-style1&gt;hello&lt;/p&gt;</span>

<span class="pl-c"><span class="pl-c">#</span> Insert the corresponding styles into a &lt;style&gt; tag</span>
<span class="pl-c1">style</span>(<span class="pl-c1">styles</span>(s1))
<span class="pl-c"><span class="pl-c">#</span> turns into</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;style&gt;</span>
<span class="pl-c"><span class="pl-c">#</span>   p[v-style1] {font-weight: bold;}</span>
<span class="pl-c"><span class="pl-c">#</span>   span[v-style1] {color: red;}</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;/style&gt;</span>
</pre></div>
<p>Scoped styles are scoped to the DOM subtree where they are applied. Styled nodes function as cascade barriers — parent styles do not leak into styled child nodes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Create a second scoped style
s2 = Style(css(&quot;p&quot;, color=&quot;blue&quot;))

# Apply `s1` to the parent and `s2` to a child.
# Note the `s1` style does not apply to the child styled with `s2`.
s1(p(p(&quot;outer&quot;), s2(p(&quot;inner&quot;))))
# turns into
# &lt;p v-style1&gt;
#   &lt;p v-style1&gt;outer&lt;/p&gt;
#   &lt;p v-style2&gt;inner&lt;/p&gt;
# &lt;/p&gt;

style(styles(s1), styles(s2))
# turns into
# &lt;style&gt;
#   p[v-style1] {font-weight: bold;}
#   span[v-style1] {color: red;}
#   p[v-style2] {color: blue;}
# &lt;/style&gt;
"><pre><span class="pl-c"><span class="pl-c">#</span> Create a second scoped style</span>
s2 <span class="pl-k">=</span> <span class="pl-c1">Style</span>(<span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Apply `s1` to the parent and `s2` to a child.</span>
<span class="pl-c"><span class="pl-c">#</span> Note the `s1` style does not apply to the child styled with `s2`.</span>
<span class="pl-c1">s1</span>(<span class="pl-c1">p</span>(<span class="pl-c1">p</span>(<span class="pl-s"><span class="pl-pds">"</span>outer<span class="pl-pds">"</span></span>), <span class="pl-c1">s2</span>(<span class="pl-c1">p</span>(<span class="pl-s"><span class="pl-pds">"</span>inner<span class="pl-pds">"</span></span>))))
<span class="pl-c"><span class="pl-c">#</span> turns into</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;p v-style1&gt;</span>
<span class="pl-c"><span class="pl-c">#</span>   &lt;p v-style1&gt;outer&lt;/p&gt;</span>
<span class="pl-c"><span class="pl-c">#</span>   &lt;p v-style2&gt;inner&lt;/p&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;/p&gt;</span>

<span class="pl-c1">style</span>(<span class="pl-c1">styles</span>(s1), <span class="pl-c1">styles</span>(s2))
<span class="pl-c"><span class="pl-c">#</span> turns into</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;style&gt;</span>
<span class="pl-c"><span class="pl-c">#</span>   p[v-style1] {font-weight: bold;}</span>
<span class="pl-c"><span class="pl-c">#</span>   span[v-style1] {color: red;}</span>
<span class="pl-c"><span class="pl-c">#</span>   p[v-style2] {color: blue;}</span>
<span class="pl-c"><span class="pl-c">#</span> &lt;/style&gt;</span></pre></div>
<h2><a id="user-content-css-units" class="anchor" aria-hidden="true" href="#css-units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSS Units</h2>
<p>Hyperscript supports a concise syntax for CSS unit arithmetic:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Hyperscript

css(&quot;.foo&quot;, width=50px)
# turns into .foo {width: 50px;}

css(&quot;.foo&quot;, width=50px + 2 * 100px)
# turns into .foo {width: 250px;}

css(&quot;.foo&quot;, width=(50px + 50px) + 2em)
# turns into .foo {width: calc(100px + 2em);}
"><pre><span class="pl-k">using</span> Hyperscript

<span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>.foo<span class="pl-pds">"</span></span>, width<span class="pl-k">=</span><span class="pl-c1">50</span>px)
<span class="pl-c"><span class="pl-c">#</span> turns into .foo {width: 50px;}</span>

<span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>.foo<span class="pl-pds">"</span></span>, width<span class="pl-k">=</span><span class="pl-c1">50</span>px <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">100</span>px)
<span class="pl-c"><span class="pl-c">#</span> turns into .foo {width: 250px;}</span>

<span class="pl-c1">css</span>(<span class="pl-s"><span class="pl-pds">"</span>.foo<span class="pl-pds">"</span></span>, width<span class="pl-k">=</span>(<span class="pl-c1">50</span>px <span class="pl-k">+</span> <span class="pl-c1">50</span>px) <span class="pl-k">+</span> <span class="pl-c1">2</span>em)
<span class="pl-c"><span class="pl-c">#</span> turns into .foo {width: calc(100px + 2em);}</span></pre></div>
<p>Supported units are <code>px</code>, <code>pt</code>, <code>em</code>,<code>vh</code>, <code>vw</code>, <code>vmin</code>, <code>vmax</code>, and <code>pc</code> for percent.</p>
<hr>
<p>I'd like to create a more comprehensive guide to the full functionality available in Hyperscript at some point. For now here's a list of some of the finer points:</p>
<ul>
<li>Nodes are immutable — any derivation of new nodes from existing nodes will leave existing nodes unchanged.</li>
<li>Calling an existing node with with more children creates a new node with the new children appended.</li>
<li>Calling an existing node with more attributes creates a new node whose attributes are the <code>merge</code> of the existing and new attributes.</li>
<li><code>div.fooBar</code> adds the CSS class <code>foo-bar</code>. To add the camelCase class <code>fooBar</code> you can use the dot syntax with a string: <code>div."fooBar"</code></li>
<li>The dot syntax always <em>adds</em> to the CSS class. This is why chaining (<code>div.foo.bar.baz</code>) adds all three classes in sequence.</li>
<li>Tags defined with <code>@tags_noescape</code> only "noescape" one level deep. Children of children will still be escaped according to their own rules.</li>
<li>Using <code>nothing</code> as the value of a DOM attribute creates a valueless attribute, e.g. <code>&lt;input checked /&gt;</code>.</li>
</ul>
</article></div>