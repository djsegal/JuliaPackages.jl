<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fsimros" class="anchor" aria-hidden="true" href="#fsimros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FSimROS</h1>
<p dir="auto">A package of <a href="https://github.com/JinraeKim/FlightSims.jl">FlightSims.jl</a> family for ROS2.</p>
<p dir="auto">Note that <code>./src/fsim_interfaces</code> is a ROS2 package for providing interfaces of FlightSims.jl family.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<ul dir="auto">
<li>ROS2 should be installed.</li>
<li>Put <code>./src/fsim_interfaces</code> in <code>dev_ws/src</code> (ROS2 convention; don't be confused with <code>./src</code>) where your ROS2 workspace is, namely, <code>dev_ws</code>.</li>
<li>(Startup latency)
Using <a href="https://github.com/JuliaLang/PackageCompiler.jl">PackageCompiler.jl</a> might be a good solution to this issue.
For this, see <code>test/precompile.jl</code> (some modification may be required to execute the code).
However,
this remedy did not solve this issue completely.
Instead,
simply adding auxiliary lines as the initialisation of each node works well.
Note that the main bottleneck was simulator update, e.g., <code>step_until!</code> exported from FlightSims.jl.</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-minimal-publisher-subscriber-example" class="anchor" aria-hidden="true" href="#minimal-publisher-subscriber-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimal publisher-subscriber example</h3>
<p dir="auto">See <code>./test/pubsub</code>.</p>
<h3 dir="auto"><a id="user-content-simulation-and-visualisation-with-data-communication-via-ros2" class="anchor" aria-hidden="true" href="#simulation-and-visualisation-with-data-communication-via-ros2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simulation and visualisation with data communication via ROS2</h3>
<p dir="auto">See <code>./test/PILS</code> for a circular trajectory tracking of a hexacopter with a
backstepping position controller (500 Hz communication).
Use a docker image <a href="https://hub.docker.com/layers/ihany/ros/foxy-fsimros/images/sha256-ec32acd18c74ae521294a90aa7616a513494959f33c6c13ee180a25b3a3a55db?context=repo" rel="nofollow">ihany/ros:foxy-fsimros</a>, or use the <code>./Dockerfile</code> with command <a href="https://docs.docker.com/desktop/multi-arch/" rel="nofollow"><code>docker buildx</code></a> (supported platforms: <code>linux/amd64</code>, <code>linux/arm64</code>).</p>
<p dir="auto">The following instruction assumes that a related docker container is running; e.g.,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="docker run --name ros --network host --rm -it -e display=$display -v /tmp/.x11-unix:/tmp.x11-unix ihany/ros:foxy-fsimros"><pre class="notranslate"><code>docker run --name ros --network host --rm -it -e display=$display -v /tmp/.x11-unix:/tmp.x11-unix ihany/ros:foxy-fsimros
</code></pre></div>
<ul dir="auto">
<li><code>-e display=$display -v /tmp/.x11-unix:/tmp.x11-unix</code>: for visualisation</li>
<li><code>--network host</code>: (optional) to communicate with other machines in the same network</li>
</ul>
<p dir="auto">Instruction:</p>
<ul dir="auto">
<li>(Note) The Julia packages in docker image may be not up-to-date. You may have to the latest commit of branch <code>master</code>, for example, <code>git fetch</code>; <code>git checkout master</code>; <code>git rebase origin/master</code> at <code>~/.julia/dev/FSimROS</code>.</li>
<li>Source <code>./dev_ws</code> in the docker image by <code>. install/setup.zsh</code>.
<ul dir="auto">
<li>(Recommended) Enter a tmux session by <code>ts your_session_name</code>.</li>
</ul>
</li>
<li>Move to: <code>cd ~/.julia/dev/FSimROS</code>.</li>
<li>On a terminal, run as <code>julia test/PILS/viz.jl</code>.</li>
<li>On a new terminal, run as <code>julia test/PILS/simulator.jl</code>.</li>
<li>On a new terminal, run as <code>julia test/PILS/controller.jl</code>.</li>
<li>Wait other nodes. Then, on another new terminal, run as <code>julia test/PILS/timer.jl</code>
See the result (video speed adjusted):</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./figures/sim_trajectory_tracking.gif"><img src="./figures/sim_trajectory_tracking.gif" alt="Alt Text" data-animated-image="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-mavsdk-python--ros2" class="anchor" aria-hidden="true" href="#mavsdk-python--ros2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MAVSDK-Python + ROS2</h3>
<p dir="auto">See <code>test/mavsdk-ros2</code>.
Currently, Python code is implemented (not Julia code).
To run the code in a docker container, one should connect the host's peripheral (device) with the option <code>--device</code> such as <code>--device=/dev/ttyACM0</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="docker run --name ros --network host --rm -it -e display=$display -v /tmp/.x11-unix:/tmp.x11-unix --device=/dev/ttyACM0 ihany/ros:foxy-fsimros"><pre class="notranslate"><code>docker run --name ros --network host --rm -it -e display=$display -v /tmp/.x11-unix:/tmp.x11-unix --device=/dev/ttyACM0 ihany/ros:foxy-fsimros
</code></pre></div>
<h2 dir="auto"><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To-do</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> sync issues (maybe?) for divergence of controller (which requires integration)
<ul dir="auto">
<li>Perhaps, we need a central node for topic <code>time</code> and each simulation and controller receives the <code>time</code> to propagate own dynamical system and adaptive control system.</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Update the docker image's building process to include FSimROS.jl</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <strong>Reduce first-execution delay of Julia code</strong></li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Make the docker image stable, i.e., consistent version control of Julia packages</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add an example of processor-in-the-loop simulation (PILS) with Pixhawk.</li>
</ul>
<h2 dir="auto"><a id="user-content-notes-1" class="anchor" aria-hidden="true" href="#notes-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<ul dir="auto">
<li>Tested with only few test environments, e.g., Ubuntu 20.04, ROS2 foxy, docker.</li>
</ul>
</article></div>