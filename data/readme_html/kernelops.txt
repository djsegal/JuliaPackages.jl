<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-kernelopsjl" class="anchor" aria-hidden="true" href="#kernelopsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>KernelOps.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/francescoalemanno/KernelOps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7d9e3e411baa86e67d93cc61ff24ae1f098cf16e/68747470733a2f2f7472617669732d63692e636f6d2f6672616e636573636f616c656d616e6e6f2f4b65726e656c4f70732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/francescoalemanno/KernelOps.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/francescoalemanno/KernelOps.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bab08ad2e65d257df98bfaf509f5cff21c7a4b3b/687474703a2f2f636f6465636f762e696f2f6769746875622f6672616e636573636f616c656d616e6e6f2f4b65726e656c4f70732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/francescoalemanno/KernelOps.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>

<p>A Julia package to apply lazy kernel operations on AbstractArrays, they are composable and non copying.
Have Fun!</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<p>Let's say we have a noisy image stored in an array 'M' and we want to locate local maximas, one very simple way to do that is
to take a local average of the image, take the local maximum function of the smoothed image and compare the two for equality,
the points where they coincide are the local maxima</p>
<div class="highlight highlight-source-julia"><pre>M<span class="pl-k">=</span>[<span class="pl-c1">exp</span>(<span class="pl-k">-</span>(x<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>(y<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]<span class="pl-k">.</span><span class="pl-k">+</span><span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)<span class="pl-k">*</span><span class="pl-c1">0.3</span> <span class="pl-c"><span class="pl-c">#</span>fake image with a maximum in the middle affected by random noise</span>

f1<span class="pl-k">=</span><span class="pl-c1">KernelOp</span>(M, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">do</span> A,Is,I   <span class="pl-c"><span class="pl-c">#</span> (1,1) is the size of the kernelop</span>
    avg<span class="pl-k">=</span><span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(A))
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> Is
        avg<span class="pl-k">+=</span>A[i]
    <span class="pl-k">end</span>
    avg<span class="pl-k">/</span><span class="pl-c1">length</span>(Is)
<span class="pl-k">end</span>

f2<span class="pl-k">=</span><span class="pl-c1">KernelOp</span>(f1, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">do</span> A,Is,I   <span class="pl-c"><span class="pl-c">#</span> (1,1) is the size of the kernelop</span>
    m<span class="pl-k">=</span>A[I]
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> Is
        m<span class="pl-k">=</span><span class="pl-c1">max</span>(m,A[i])
    <span class="pl-k">end</span>
    m
<span class="pl-k">end</span>

<span class="pl-c1">show</span>(stdout,<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>,f1<span class="pl-k">.==</span>f2)</pre></div>
<h3><a id="user-content-result" class="anchor" aria-hidden="true" href="#result"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>result:</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">5</span><span class="pl-k">Ã—</span><span class="pl-c1">5</span> BitArray{<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<h1><a id="user-content-example-conways-game-of-life" class="anchor" aria-hidden="true" href="#example-conways-game-of-life"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example: Conway's Game of life</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> KernelOps
b<span class="pl-k">=</span><span class="pl-c1">Int8</span>.([
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
])
cb<span class="pl-k">=</span><span class="pl-c1">copy</span>(b);</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">evolve</span>(cells)
    game_of_life<span class="pl-k">=</span><span class="pl-c1">KernelOp</span>(cells,(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">do</span> M,Is,I
        s<span class="pl-k">=</span><span class="pl-c1">sum</span>(M[Is])<span class="pl-k">-</span>M[I]
        <span class="pl-k">if</span> M[I]<span class="pl-k">==</span><span class="pl-c1">1</span>
            s<span class="pl-k">&lt;</span><span class="pl-c1">2</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">0</span>)
            s<span class="pl-k">&lt;=</span><span class="pl-c1">3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">1</span>)
            <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">0</span>)
        <span class="pl-k">else</span>
            s<span class="pl-k">==</span><span class="pl-c1">3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">1</span>)
        <span class="pl-k">end</span>
        <span class="pl-k">return</span> M[I]
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> game_of_life<span class="pl-k">|&gt;</span>collect <span class="pl-c"><span class="pl-c">#</span>add this collect, unless you want julia to suffer</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-now-lets-test-this-fun-bit-of-code" class="anchor" aria-hidden="true" href="#now-lets-test-this-fun-bit-of-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Now let's test this fun bit of code</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">show</span>(stdout,<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>,b)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    b<span class="pl-k">=</span><span class="pl-c1">evolve</span>(b)
    <span class="pl-c1">show</span>(stdout,<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>,b)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">if</span> b<span class="pl-k">==</span>cb
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Pattern repeats itself after <span class="pl-v">$i</span> iterations<span class="pl-pds">"</span></span>)
        <span class="pl-k">break</span>;
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<pre><code>8Ã—8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  0  0  0  1  0
 1  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  1
 0  1  0  0  0  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  1  1  0  0  0

8Ã—8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  1  1  1  0  0
 0  1  0  0  0  0  1  0
 1  1  0  0  0  0  1  1
 1  1  0  0  0  0  1  1
 0  1  0  0  0  0  1  0
 0  0  1  1  1  1  0  0
 0  0  0  1  1  0  0  0

8Ã—8 Array{Int8,2}:
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 1  1  0  1  1  0  1  1
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 1  1  0  1  1  0  1  1
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0

8Ã—8 Array{Int8,2}:
 0  0  0  0  0  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  1  1  0  1  0
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 0  1  0  1  1  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  0  0  0  0  0

8Ã—8 Array{Int8,2}:
 0  0  0  0  0  0  0  0
 0  0  1  1  1  1  0  0
 0  1  0  1  1  0  1  0
 0  1  1  0  0  1  1  0
 0  1  1  0  0  1  1  0
 0  1  0  1  1  0  1  0
 0  0  1  1  1  1  0  0
 0  0  0  0  0  0  0  0

8Ã—8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  0  0  0  1  0
 1  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  1
 0  1  0  0  0  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  1  1  0  0  0

Pattern repeats itself after 5 iterations
</code></pre>
</article></div>