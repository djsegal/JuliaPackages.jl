<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kernelopsjl" class="anchor" aria-hidden="true" href="#kernelopsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KernelOps.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/francescoalemanno/KernelOps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/82f4ab6d597a079d768ce060ba5152b93daf6232b71b60fbbcda3f942d41e8ae/68747470733a2f2f7472617669732d63692e636f6d2f6672616e636573636f616c656d616e6e6f2f4b65726e656c4f70732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/francescoalemanno/KernelOps.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/francescoalemanno/KernelOps.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d601f1b5b4c3e34a06aaef9dd8445c441beec560c73f652fcbde5687d587eafb/687474703a2f2f636f6465636f762e696f2f6769746875622f6672616e636573636f616c656d616e6e6f2f4b65726e656c4f70732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/francescoalemanno/KernelOps.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>

<p>A Julia package to apply lazy kernel operations on AbstractArrays, they are composable and non copying.
Have Fun!</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<p>Let's say we have a noisy image stored in an array 'M' and we want to locate local maximas, one very simple way to do that is
to take a local average of the image, take the local maximum function of the smoothed image and compare the two for equality,
the points where they coincide are the local maxima</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="M=[exp(-(x-3)^2-(y-3)^2) for x in 1:5, y in 1:5].+rand(5,5)*0.3 #fake image with a maximum in the middle affected by random noise

f1=KernelOp(M, (1,1)) do A,Is,I   # (1,1) is the size of the kernelop
    avg=zero(eltype(A))
    @inbounds for i in Is
        avg+=A[i]
    end
    avg/length(Is)
end

f2=KernelOp(f1, (1,1)) do A,Is,I   # (1,1) is the size of the kernelop
    m=A[I]
    @inbounds for i in Is
        m=max(m,A[i])
    end
    m
end

show(stdout,&quot;text/plain&quot;,f1.==f2)
"><pre>M<span class="pl-k">=</span>[<span class="pl-c1">exp</span>(<span class="pl-k">-</span>(x<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>(y<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]<span class="pl-k">.</span><span class="pl-k">+</span><span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)<span class="pl-k">*</span><span class="pl-c1">0.3</span> <span class="pl-c"><span class="pl-c">#</span>fake image with a maximum in the middle affected by random noise</span>

f1<span class="pl-k">=</span><span class="pl-c1">KernelOp</span>(M, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">do</span> A,Is,I   <span class="pl-c"><span class="pl-c">#</span> (1,1) is the size of the kernelop</span>
    avg<span class="pl-k">=</span><span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(A))
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> Is
        avg<span class="pl-k">+=</span>A[i]
    <span class="pl-k">end</span>
    avg<span class="pl-k">/</span><span class="pl-c1">length</span>(Is)
<span class="pl-k">end</span>

f2<span class="pl-k">=</span><span class="pl-c1">KernelOp</span>(f1, (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">do</span> A,Is,I   <span class="pl-c"><span class="pl-c">#</span> (1,1) is the size of the kernelop</span>
    m<span class="pl-k">=</span>A[I]
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> Is
        m<span class="pl-k">=</span><span class="pl-c1">max</span>(m,A[i])
    <span class="pl-k">end</span>
    m
<span class="pl-k">end</span>

<span class="pl-c1">show</span>(<span class="pl-c1">stdout</span>,<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>,f1<span class="pl-k">.==</span>f2)</pre></div>
<h3><a id="user-content-result" class="anchor" aria-hidden="true" href="#result"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>result:</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="5×5 BitArray{2}:
 0  0  0  0  0
 0  0  0  0  0
 0  0  1  0  0
 0  0  0  0  0
 0  0  0  0  0
"><pre><span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> BitArray{<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<h1><a id="user-content-example-conways-game-of-life" class="anchor" aria-hidden="true" href="#example-conways-game-of-life"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Conway's Game of life</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using KernelOps
b=Int8.([
    0 0 0 1 1 0 0 0;
    0 0 1 0 0 1 0 0;
    0 1 0 0 0 0 1 0;
    1 0 0 0 0 0 0 1;
    1 0 0 0 0 0 0 1;
    0 1 0 0 0 0 1 0;
    0 0 1 0 0 1 0 0;
    0 0 0 1 1 0 0 0;
])
cb=copy(b);
"><pre><span class="pl-k">using</span> KernelOps
b<span class="pl-k">=</span><span class="pl-c1">Int8</span>.([
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
])
cb<span class="pl-k">=</span><span class="pl-c1">copy</span>(b);</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function evolve(cells)
    game_of_life=KernelOp(cells,(1,1)) do M,Is,I
        s=sum(M[Is])-M[I]
        if M[I]==1
            s&lt;2 &amp;&amp; return Int8(0)
            s&lt;=3 &amp;&amp; return Int8(1)
            return Int8(0)
        else
            s==3 &amp;&amp; return Int8(1)
        end
        return M[I]
    end
    return game_of_life|&gt;collect #add this collect, unless you want julia to suffer
end
"><pre><span class="pl-k">function</span> <span class="pl-en">evolve</span>(cells)
    game_of_life<span class="pl-k">=</span><span class="pl-c1">KernelOp</span>(cells,(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)) <span class="pl-k">do</span> M,Is,I
        s<span class="pl-k">=</span><span class="pl-c1">sum</span>(M[Is])<span class="pl-k">-</span>M[I]
        <span class="pl-k">if</span> M[I]<span class="pl-k">==</span><span class="pl-c1">1</span>
            s<span class="pl-k">&lt;</span><span class="pl-c1">2</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">0</span>)
            s<span class="pl-k">&lt;=</span><span class="pl-c1">3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">1</span>)
            <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">0</span>)
        <span class="pl-k">else</span>
            s<span class="pl-k">==</span><span class="pl-c1">3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">Int8</span>(<span class="pl-c1">1</span>)
        <span class="pl-k">end</span>
        <span class="pl-k">return</span> M[I]
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> game_of_life<span class="pl-k">|&gt;</span>collect <span class="pl-c"><span class="pl-c">#</span>add this collect, unless you want julia to suffer</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-now-lets-test-this-fun-bit-of-code" class="anchor" aria-hidden="true" href="#now-lets-test-this-fun-bit-of-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Now let's test this fun bit of code</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="show(stdout,&quot;text/plain&quot;,b)
println(&quot;\n&quot;)
for i in 1:100
    b=evolve(b)
    show(stdout,&quot;text/plain&quot;,b)
    println(&quot;\n&quot;)
    if b==cb
        print(&quot;Pattern repeats itself after $i iterations&quot;)
        break;
    end
end
"><pre><span class="pl-c1">show</span>(<span class="pl-c1">stdout</span>,<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>,b)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    b<span class="pl-k">=</span><span class="pl-c1">evolve</span>(b)
    <span class="pl-c1">show</span>(<span class="pl-c1">stdout</span>,<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>,b)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">if</span> b<span class="pl-k">==</span>cb
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Pattern repeats itself after <span class="pl-v">$i</span> iterations<span class="pl-pds">"</span></span>)
        <span class="pl-k">break</span>;
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="8×8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  0  0  0  1  0
 1  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  1
 0  1  0  0  0  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  1  1  0  0  0

8×8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  1  1  1  0  0
 0  1  0  0  0  0  1  0
 1  1  0  0  0  0  1  1
 1  1  0  0  0  0  1  1
 0  1  0  0  0  0  1  0
 0  0  1  1  1  1  0  0
 0  0  0  1  1  0  0  0

8×8 Array{Int8,2}:
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 1  1  0  1  1  0  1  1
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 1  1  0  1  1  0  1  1
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0

8×8 Array{Int8,2}:
 0  0  0  0  0  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  1  1  0  1  0
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 0  1  0  1  1  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  0  0  0  0  0

8×8 Array{Int8,2}:
 0  0  0  0  0  0  0  0
 0  0  1  1  1  1  0  0
 0  1  0  1  1  0  1  0
 0  1  1  0  0  1  1  0
 0  1  1  0  0  1  1  0
 0  1  0  1  1  0  1  0
 0  0  1  1  1  1  0  0
 0  0  0  0  0  0  0  0

8×8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  0  0  0  1  0
 1  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  1
 0  1  0  0  0  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  1  1  0  0  0

Pattern repeats itself after 5 iterations
"><pre><code>8×8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  0  0  0  1  0
 1  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  1
 0  1  0  0  0  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  1  1  0  0  0

8×8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  1  1  1  0  0
 0  1  0  0  0  0  1  0
 1  1  0  0  0  0  1  1
 1  1  0  0  0  0  1  1
 0  1  0  0  0  0  1  0
 0  0  1  1  1  1  0  0
 0  0  0  1  1  0  0  0

8×8 Array{Int8,2}:
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 1  1  0  1  1  0  1  1
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 1  1  0  1  1  0  1  1
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0

8×8 Array{Int8,2}:
 0  0  0  0  0  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  1  1  0  1  0
 0  0  1  0  0  1  0  0
 0  0  1  0  0  1  0  0
 0  1  0  1  1  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  0  0  0  0  0

8×8 Array{Int8,2}:
 0  0  0  0  0  0  0  0
 0  0  1  1  1  1  0  0
 0  1  0  1  1  0  1  0
 0  1  1  0  0  1  1  0
 0  1  1  0  0  1  1  0
 0  1  0  1  1  0  1  0
 0  0  1  1  1  1  0  0
 0  0  0  0  0  0  0  0

8×8 Array{Int8,2}:
 0  0  0  1  1  0  0  0
 0  0  1  0  0  1  0  0
 0  1  0  0  0  0  1  0
 1  0  0  0  0  0  0  1
 1  0  0  0  0  0  0  1
 0  1  0  0  0  0  1  0
 0  0  1  0  0  1  0  0
 0  0  0  1  1  0  0  0

Pattern repeats itself after 5 iterations
</code></pre></div>
</article></div>