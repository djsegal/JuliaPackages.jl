<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-daggergpu" class="anchor" aria-hidden="true" href="#daggergpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DaggerGPU</h1>
<p><strong>GPU integrations for Dagger.jl</strong></p>
<p>DaggerGPU.jl makes use of the <code>Dagger.Processor</code> infrastructure to dispatch Dagger kernels to NVIDIA and AMD GPUs, via CUDA.jl and AMDGPU.jl respectively. Usage is simple: <code>add</code> or <code>dev</code> DaggerGPU.jl and CUDA.jl/AMDGPU.jl appropriately, load it with <code>using DaggerGPU</code>, and add <code>DaggerGPU.CuArrayDeviceProc</code>/<code>DaggerGPU.ROCArrayProc</code> to your scheduler or thunk options (see Dagger.jl documentation for details on how to do this).</p>
<p>DaggerGPU.jl is still experimental, but we welcome GPU-owning users to try it out and report back on any issues or sharp edges that they encounter. When filing an issue about DaggerGPU.jl, please provide:</p>
<ul>
<li>The complete error message and backtrace</li>
<li>Julia version</li>
<li>GPU vendor and model</li>
<li>CUDA/AMDGPU version(s)</li>
</ul>
</article></div>