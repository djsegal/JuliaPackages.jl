<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-startupdg" class="anchor" aria-hidden="true" href="#startupdg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StartUpDG</h1>
<p dir="auto"><a href="https://jlchan.github.io/StartUpDG.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jlchan.github.io/StartUpDG.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jlchan/StartUpDG.jl/actions"><img src="https://github.com/jlchan/StartUpDG.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jlchan/StartUpDG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fd9b850e7a5a32cfead87f9cbdb848c830700f65be2c180d4ba2049b23f59f6f/68747470733a2f2f636f6465636f762e696f2f67682f6a6c6368616e2f5374617274557044472e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jlchan/StartUpDG.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Routines to initialize reference element operators, physical mesh arrays, and connectivity for nodal discontinuous Galerkin (DG) methods. Codes roughly based on <em>Nodal Discontinuous Galerkin Methods</em> by Hesthaven and Warburton (2007). The original port from Matlab to Julia was by <a href="https://github.com/yiminllin">Yimin Lin</a>, with subsequent modifications by Jesse Chan.</p>
<p dir="auto">This package is registered and can be installed via <code>] add StartUpDG</code>.</p>
<h1 dir="auto"><a id="user-content-usage-overview" class="anchor" aria-hidden="true" href="#usage-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage overview</h1>
<p dir="auto">Variables are contained within structs <code>rd::RefElemData</code> and <code>md::MeshData</code>, which contain quantities from <code>Globals1D, Globals2D, Globals3D</code> in the Nodal DG book codes. These can be used to compute DG derivatives, and are useful for matrix-free implementations of DG methods using explicit time-stepping.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StartUpDG

# polynomial degree and mesh size
N = 3
K1D = 8

# init ref element and mesh
rd = RefElemData(Tri(), N)
VXY, EToV = uniform_mesh(Tri(), K1D)
md = MeshData(VXY, EToV, rd)

# Define a function by interpolation
(; x, y) = md
u = @. 2 + .5*exp(-100*(x^2 + y^2))

# Compute derivatives using geometric mapping + chain rule
(; Dr, Ds) = rd
(; rxJ, sxJ, J) = md
dudx = (rxJ .* (Dr*u) + sxJ .* (Ds*u)) ./ J"><pre><span class="pl-k">using</span> StartUpDG

<span class="pl-c"><span class="pl-c">#</span> polynomial degree and mesh size</span>
N <span class="pl-k">=</span> <span class="pl-c1">3</span>
K1D <span class="pl-k">=</span> <span class="pl-c1">8</span>

<span class="pl-c"><span class="pl-c">#</span> init ref element and mesh</span>
rd <span class="pl-k">=</span> <span class="pl-c1">RefElemData</span>(<span class="pl-c1">Tri</span>(), N)
VXY, EToV <span class="pl-k">=</span> <span class="pl-c1">uniform_mesh</span>(<span class="pl-c1">Tri</span>(), K1D)
md <span class="pl-k">=</span> <span class="pl-c1">MeshData</span>(VXY, EToV, rd)

<span class="pl-c"><span class="pl-c">#</span> Define a function by interpolation</span>
(; x, y) <span class="pl-k">=</span> md
u <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> .<span class="pl-c1">5</span><span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">100</span><span class="pl-k">*</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>))

<span class="pl-c"><span class="pl-c">#</span> Compute derivatives using geometric mapping + chain rule</span>
(; Dr, Ds) <span class="pl-k">=</span> rd
(; rxJ, sxJ, J) <span class="pl-k">=</span> md
dudx <span class="pl-k">=</span> (rxJ <span class="pl-k">.*</span> (Dr<span class="pl-k">*</span>u) <span class="pl-k">+</span> sxJ <span class="pl-k">.*</span> (Ds<span class="pl-k">*</span>u)) <span class="pl-k">./</span> J</pre></div>
<h1 dir="auto"><a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributors</h1>
<ul dir="auto">
<li>SBP nodal points were contributed by <a href="https://sites.google.com/site/chilatosu/ethan-bio" rel="nofollow">Ethan Kubatko</a> and <a href="https://doi.org/10.1007/s10915-020-01154-8" rel="nofollow">Jason Hicken</a>.</li>
<li><a href="https://ranocha.de" rel="nofollow">Hendrik Ranocha</a> contributed to array types used in cut-cell and hybrid meshes.</li>
<li><a href="https://github.com/masonamccallum">Mason McCallum</a> contributed Gmsh reading capabilities</li>
<li><a href="https://github.com/Davknapp">David Knapp</a> contributed VTK visualization capabilities and tensor product wedges.</li>
</ul>
</article></div>