<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-openpmdjl" class="anchor" aria-hidden="true" href="#openpmdjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>openPMD.jl</h1>
<p dir="auto">A Julia interface for
<a href="https://github.com/openPMD/openPMD-api">openPMD-api</a>, the reference
API for the open Particle/Mesh-Data Adaptable standard.</p>
<ul dir="auto">
<li><a href="https://eschnett.github.io/openPMD.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documenter" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></li>
<li><a href="https://github.com/eschnett/openPMD.jl/actions"><img src="https://github.com/eschnett/openPMD.jl/workflows/CI/badge.svg" alt="GitHub CI" style="max-width: 100%;"></a></li>
<li><a href="https://codecov.io/gh/eschnett/openPMD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e56ed55580583fa95500e64c86ff7b95768fba055792e141bd8a3b5be233a19e/68747470733a2f2f636f6465636f762e696f2f67682f657363686e6574742f6f70656e504d442e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/eschnett/openPMD.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></li>
</ul>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<h2 dir="auto"><a id="user-content-writing-a-file" class="anchor" aria-hidden="true" href="#writing-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing a file</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="filename = &quot;hello.json&quot;
series = Series(filename, ACCESS_CREATE)
set_name!(series, &quot;hello&quot;)
set_author!(series, &quot;Erik Schnetter &lt;schnetter@gmail.com&gt;&quot;)

iter = get_iteration(series, 0)

mesh = get_mesh(iter, &quot;my_first_mesh&quot;)

data = Int[10i + j for i in 1:2, j in 1:3]
T = eltype(data)
off = (0, 0)
sz = size(data)
dset = Dataset(T, sz)

comp = get_component(mesh, &quot;my_first_record&quot;)
reset_dataset!(comp, dset)
set_position!(comp, (0.0, 0.0))

store_chunk(comp, data, off, sz)

close(iter)"><pre>filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello.json<span class="pl-pds">"</span></span>
series <span class="pl-k">=</span> <span class="pl-c1">Series</span>(filename, ACCESS_CREATE)
<span class="pl-c1">set_name!</span>(series, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_author!</span>(series, <span class="pl-s"><span class="pl-pds">"</span>Erik Schnetter &lt;schnetter@gmail.com&gt;<span class="pl-pds">"</span></span>)

iter <span class="pl-k">=</span> <span class="pl-c1">get_iteration</span>(series, <span class="pl-c1">0</span>)

mesh <span class="pl-k">=</span> <span class="pl-c1">get_mesh</span>(iter, <span class="pl-s"><span class="pl-pds">"</span>my_first_mesh<span class="pl-pds">"</span></span>)

data <span class="pl-k">=</span> Int[<span class="pl-c1">10</span>i <span class="pl-k">+</span> j <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
T <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(data)
off <span class="pl-k">=</span> (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
sz <span class="pl-k">=</span> <span class="pl-c1">size</span>(data)
dset <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(T, sz)

comp <span class="pl-k">=</span> <span class="pl-c1">get_component</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>my_first_record<span class="pl-pds">"</span></span>)
<span class="pl-c1">reset_dataset!</span>(comp, dset)
<span class="pl-c1">set_position!</span>(comp, (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>))

<span class="pl-c1">store_chunk</span>(comp, data, off, sz)

<span class="pl-c1">close</span>(iter)</pre></div>
<h2 dir="auto"><a id="user-content-reading-a-file" class="anchor" aria-hidden="true" href="#reading-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading a file</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="filename = &quot;hello.json&quot;
series = Series(filename, ACCESS_READ_ONLY)
println(&quot;name: &quot;, name(series))
println(&quot;author: &quot;, author(series))

iter = get_iteration(series, 0)

mesh = get_mesh(iter, &quot;my_first_mesh&quot;)

comp = get_component(mesh, &quot;my_first_record&quot;)
T = eltype(comp)
D = ndims(comp)
sz = size(comp)
pos = position(comp)
println(&quot;type: &quot;, T)
println(&quot;ndims: &quot;, D)
println(&quot;size: &quot;, sz)
println(&quot;position: &quot;, pos)

chunks = available_chunks(comp)
datas = Array{T,D}[]
for chunk in chunks
    off = chunk.offset
    ext = chunk.extent
    data = Array{T}(undef, ext)
    load_chunk(comp, data, off, ext)
    push!(datas, data)
end

close(iter)

for (chunk,data) in zip(chunks,datas)
    println(&quot;Chunk:&quot;)
    println(&quot;    offset: &quot;, chunk.offset)
    println(&quot;    extent: &quot;, chunk.extent)
    println(&quot;    minimum: &quot;, minimum(data))
    println(&quot;    maximum: &quot;, maximum(data))
end"><pre>filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello.json<span class="pl-pds">"</span></span>
series <span class="pl-k">=</span> <span class="pl-c1">Series</span>(filename, ACCESS_READ_ONLY)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>name: <span class="pl-pds">"</span></span>, <span class="pl-c1">name</span>(series))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>author: <span class="pl-pds">"</span></span>, <span class="pl-c1">author</span>(series))

iter <span class="pl-k">=</span> <span class="pl-c1">get_iteration</span>(series, <span class="pl-c1">0</span>)

mesh <span class="pl-k">=</span> <span class="pl-c1">get_mesh</span>(iter, <span class="pl-s"><span class="pl-pds">"</span>my_first_mesh<span class="pl-pds">"</span></span>)

comp <span class="pl-k">=</span> <span class="pl-c1">get_component</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>my_first_record<span class="pl-pds">"</span></span>)
T <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(comp)
D <span class="pl-k">=</span> <span class="pl-c1">ndims</span>(comp)
sz <span class="pl-k">=</span> <span class="pl-c1">size</span>(comp)
pos <span class="pl-k">=</span> <span class="pl-c1">position</span>(comp)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>type: <span class="pl-pds">"</span></span>, T)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>ndims: <span class="pl-pds">"</span></span>, D)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>size: <span class="pl-pds">"</span></span>, sz)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>position: <span class="pl-pds">"</span></span>, pos)

chunks <span class="pl-k">=</span> <span class="pl-c1">available_chunks</span>(comp)
datas <span class="pl-k">=</span> Array{T,D}[]
<span class="pl-k">for</span> chunk <span class="pl-k">in</span> chunks
    off <span class="pl-k">=</span> chunk<span class="pl-k">.</span>offset
    ext <span class="pl-k">=</span> chunk<span class="pl-k">.</span>extent
    data <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{T}</span>(undef, ext)
    <span class="pl-c1">load_chunk</span>(comp, data, off, ext)
    <span class="pl-c1">push!</span>(datas, data)
<span class="pl-k">end</span>

<span class="pl-c1">close</span>(iter)

<span class="pl-k">for</span> (chunk,data) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(chunks,datas)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Chunk:<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>    offset: <span class="pl-pds">"</span></span>, chunk<span class="pl-k">.</span>offset)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>    extent: <span class="pl-pds">"</span></span>, chunk<span class="pl-k">.</span>extent)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>    minimum: <span class="pl-pds">"</span></span>, <span class="pl-c1">minimum</span>(data))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>    maximum: <span class="pl-pds">"</span></span>, <span class="pl-c1">maximum</span>(data))
<span class="pl-k">end</span></pre></div>
</article></div>