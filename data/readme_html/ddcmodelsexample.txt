<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ddcmodelsexamplejl" class="anchor" aria-hidden="true" href="#ddcmodelsexamplejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DDCModelsExample.jl</h1>
<p dir="auto">This package implements Julia code for the basic model in "Dynamic Discrete Choice Models: Methods, Matlab Code, and Exercises" of Abbring and Klein (2020). Detailed explanations of the model and the Matlab code are available here: <a href="https://jabbring.github.io/dynamic-discrete-choice/dynamicDiscreteChoice.m.html" rel="nofollow">https://jabbring.github.io/dynamic-discrete-choice/dynamicDiscreteChoice.m.html</a></p>
<p dir="auto">The goal is to set up the basic model and offer a package structure that easily extends to more complex DDC problems. Most functions are explained through docstrings (e.g. type <code>?estimate_model</code> to see the documentation). Steps in individual functions are explained in the respective source files.</p>
<p dir="auto">The package implements the type <code>DDCbasic</code>; a structure for the basic model containing the parameters and simulation/estimation options. To check which functions and types the package exports, check the file <em>src/DDCModelsExample.jl</em>.</p>
<p dir="auto">Various functions implement multi-threading for faster execution times. To use e.g. 8 threads, start Julia with <code>julia --threads 8</code>. In VScode, the number of threads can be set in the Julia extension settings. Note that for a running Julia instance, the number of threads cannot be changed.</p>
<p dir="auto">To see how to use the package, check the file <em>test/runtests.jl</em>, which sets up unit tests based on Julia's <code>Test</code> framework. Specifically, it:</p>
<ol dir="auto">
<li>constructs a <code>DDCbasic</code> model</li>
<li>simulates data from this model</li>
<li>estimates the transition matrix</li>
<li>estimates parameters</li>
<li>calculates standard errors of the parameter estimates.</li>
</ol>
<h2 dir="auto"><a id="user-content-installing-the-package" class="anchor" aria-hidden="true" href="#installing-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing the package</h2>
<p dir="auto">Note, the package was tested and should be run with Julia version 1.6. or newer.</p>
<ol dir="auto">
<li>Download and extract the package from Github (e.g. through <code>git clone</code>)</li>
<li>In Julia, navigate to the package folder (or open the folder in VSCode)</li>
<li>Activate environment: <code>using Pkg; Pkg.activate(".")</code></li>
<li>Install dependencies: <code>Pkg.instantiate()</code></li>
<li>Test to verify it runs correctly: <code>Pkg.test("DDCModelsExample")</code></li>
<li>Load the package with <code>using DDCModelsExample</code></li>
</ol>
<h2 dir="auto"><a id="user-content-files-in-src" class="anchor" aria-hidden="true" href="#files-in-src"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Files in <em>src</em>:</h2>
<ul dir="auto">
<li><em>types.jl</em>: Contains all type definitions</li>
<li><em>support.jl</em>: Defines support functions that are useful for (potentially) various differing models</li>
<li><em>models/DDCbasic.jl</em>: Functions specific to the <code>DDCbasic</code> model (e.g. flowpayoffs, loglikelihood etc.)</li>
<li><em>test/runtests.jl</em>: Implement unit tests</li>
<li><em>test/speedtest.jl</em>: Setup for running speed tests</li>
</ul>
</article></div>