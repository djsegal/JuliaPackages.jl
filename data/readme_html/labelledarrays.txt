<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-labelledarraysjl" class="anchor" aria-hidden="true" href="#labelledarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LabelledArrays.jl</h1>
<p><a href="https://travis-ci.org/JuliaDiffEq/LabelledArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d96d37302c8c3a74ae598978f834b1431b56f787/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f4c6162656c6c65644172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/LabelledArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ChrisRackauckas/LabelledArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c90d1a3c0ac43b0e9884f54dd5c3310584cbc39f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f43687269735261636b6175636b61732f4c6162656c6c65644172726179732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/ChrisRackauckas/LabelledArrays.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/ChrisRackauckas/LabelledArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9731c4ecb9fd56f228e8340f175601d82bf19977/687474703a2f2f636f6465636f762e696f2f6769746875622f43687269735261636b6175636b61732f4c6162656c6c65644172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/ChrisRackauckas/LabelledArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>LabelledArrays.jl is a package which provides arrays with labels, i.e. they are
arrays which <code>map</code>, <code>broadcast</code>, and all of that good stuff, but their components
are labelled. Thus for instance you can set that the second component is named
<code>:second</code> and retrieve it with <code>A.second</code>.</p>
<h2><a id="user-content-slarrays" class="anchor" aria-hidden="true" href="#slarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SLArrays</h2>
<p>The <code>SLArray</code> and <code>SLVector</code> macros are for creating static LabelledArrays.
First you create the type and then you can use that constructor to generate
instances of the labelled array.</p>
<div class="highlight highlight-source-julia"><pre>ABC <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>)
A <span class="pl-k">=</span> <span class="pl-c1">ABC</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
A<span class="pl-k">.</span>a <span class="pl-k">==</span> <span class="pl-c1">1</span>

ABCD <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>,<span class="pl-c1">:d</span>)
B <span class="pl-k">=</span> <span class="pl-c1">ABCD</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
B<span class="pl-k">.</span>c <span class="pl-k">==</span> <span class="pl-c1">3</span>
B[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>] <span class="pl-k">==</span> B<span class="pl-k">.</span>d</pre></div>
<p>Here we have that <code>A == [1,2,3]</code> and for example <code>A.b == 2</code>. We can create a
typed <code>SLArray</code> via:</p>
<div class="highlight highlight-source-julia"><pre>SVType <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> Float64 (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>)</pre></div>
<p>Alternatively, you can also construct a static labelled array using the
<code>SLVector</code> constructor by writing out the entries as keyword arguments:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLVector</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element SLArray{Tuple{<span class="pl-c1">3</span>},<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>For general N-dimensional labelled arrays, you need to specify the size
(<code>Tuple{dim1,dim2,...}</code>) as the type parameter to the <code>SLArray</code> constructor:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLArray</span><span class="pl-c1">{Tuple{2,2}}</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>, d<span class="pl-k">=</span><span class="pl-c1">4</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p>Constructing copies with some items changed is supported by
a keyword constructor whose first argument is the source and
additonal keyword arguments change several entries.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v1 <span class="pl-k">=</span> <span class="pl-c1">SLVector</span>(a<span class="pl-k">=</span><span class="pl-c1">1.1</span>, b<span class="pl-k">=</span><span class="pl-c1">2.2</span>, c<span class="pl-k">=</span><span class="pl-c1">3.3</span>);
julia<span class="pl-k">&gt;</span> v2 <span class="pl-k">=</span> <span class="pl-c1">SLVector</span>(v1; b<span class="pl-k">=</span><span class="pl-c1">20.20</span>, c<span class="pl-k">=</span><span class="pl-c1">30.30</span> )
<span class="pl-c1">3</span><span class="pl-k">-</span>element SLArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)}<span class="pl-k">:</span>
  <span class="pl-c1">1.1</span>
 <span class="pl-c1">20.2</span>
 <span class="pl-c1">30.3</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ABCD <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>,<span class="pl-c1">:d</span>);
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ABCD</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);
julia<span class="pl-k">&gt;</span> B2 <span class="pl-k">=</span> <span class="pl-c1">SLArray</span>(B; c<span class="pl-k">=</span><span class="pl-c1">30</span> )
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},Int64,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">30</span>
 <span class="pl-c1">2</span>   <span class="pl-c1">4</span></pre></div>
<p>One can also specify the indices directly.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> EFG <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) (e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, f<span class="pl-k">=</span><span class="pl-c1">4</span>, g<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>);
julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">EFG</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">2.5</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">5.0</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},Float64,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,(e <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, f <span class="pl-k">=</span> <span class="pl-c1">4</span>, g <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">3.0</span>
 <span class="pl-c1">2.5</span>  <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> y<span class="pl-k">.</span>g
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">StaticArrays.SArray{Tuple{2,2},Float64,2,4}</span>, <span class="pl-c1">4</span>), <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">2.5</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> Arr <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) (a <span class="pl-k">=</span> (<span class="pl-c1">2</span>, :), b <span class="pl-k">=</span> <span class="pl-c1">3</span>);
julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">Arr</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>);
julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>a
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">StaticArrays.SArray{Tuple{2,2},Int64,2,4}</span>, <span class="pl-c1">2</span>, :) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span></pre></div>
<h2><a id="user-content-larrays" class="anchor" aria-hidden="true" href="#larrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LArrays</h2>
<p>The <code>LArrays</code>s are fully mutable arrays with labels. There is no performance
loss by using the labelled instead of indexing. Using the macro with values
and labels generates the labelled array with the given values:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>] (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>)
A<span class="pl-k">.</span>a <span class="pl-k">==</span> <span class="pl-c1">1</span></pre></div>
<p>One can generate a labelled array with undefined values by instead giving
the dimensions:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> Float64 (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>,<span class="pl-c1">:d</span>)
W <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
A <span class="pl-k">.=</span> W
A<span class="pl-k">.</span>d <span class="pl-k">==</span> W[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>]</pre></div>
<p>or using an <code>@LVector</code> shorthand:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">@LVector</span> Float64 (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>,<span class="pl-c1">:c</span>,<span class="pl-c1">:d</span>)
A <span class="pl-k">.=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)</pre></div>
<p>As with <code>SLArray</code>, alternative constructors exist that use the keyword argument
form:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LVector</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element LArray{Int64,<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LArray</span>((<span class="pl-c1">2</span>,<span class="pl-c1">2</span>); a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>, d<span class="pl-k">=</span><span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> need to specify size as first argument</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> LArray{Int64,<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p>One can also specify the indices directly.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>,<span class="pl-c1">3.</span>] (a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>);
julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>b
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>] (a <span class="pl-k">=</span> (<span class="pl-c1">2</span>, :), b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>);
julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>a
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, <span class="pl-c1">2</span>, :) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span></pre></div>
<p>The labels of LArray and SLArray can be accessed
by function <code>symbols</code>, which returns a tuple of symbols.</p>
<h2><a id="user-content-labelled-slices" class="anchor" aria-hidden="true" href="#labelled-slices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Labelled slices</h2>
<p>For a labelled array where the row and column slices are labeled, use <code>@SLSlice</code>
and <code>@LSlice</code>, similar to <code>@SLArray</code> and <code>@LArray</code> but passing a <em>tuple</em> of label
tuples.</p>
<p>For static arrays with labeled rows and columns:</p>
<pre><code>ABC = @SLSliced (3,2) (:a,:b,:c), (:x, :y)
A = ABC([1 2; 3 4; 5 6])
A.a.x == 1
A[:c, :y] == 6
</code></pre>
<p>For regular arrays with labeled rows and columns:</p>
<pre><code>A = @LSliced [1 2; 3 4; 5 6] (:a,:b,:c), (:x, :y)
A.a.x == 1
A[:c, :y] == 6
</code></pre>
<p>The labels of LSliced and SLScliced can be accessed
by function <code>symbols</code>.
For a two-dimensional LSliced or SLSliced, it returns a tuple
with first entry a tuple of row symbols and second entry a tuple of column symbols.
For higher-dimensional slices, it returns a Tuple-Type object with
parameters referring to the names of the dimensions.</p>
<pre><code>A = @LSliced [1 2; 3 4; 5 6] (:a,:b,:c), (:x, :y)
symbols(A)[1] == (:a, :b, :c)
</code></pre>
<h2><a id="user-content-example-nice-diffeq-syntax-without-a-dsl" class="anchor" aria-hidden="true" href="#example-nice-diffeq-syntax-without-a-dsl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example: Nice DiffEq Syntax Without A DSL</h2>
<p>LabelledArrays.jl are a way to get DSL-like syntax without a macro. In this case,
we can solve differential equations with labelled components by making use of
labelled arrays, and always refer to the components by name instead of index.</p>
<p>Let's solve the Lorenz equation. Using <code>@LVector</code>s, we can do:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LabelledArrays, OrdinaryDiffEq

<span class="pl-k">function</span> <span class="pl-en">lorenz_f</span>(du,u,p,t)
  du<span class="pl-k">.</span>x <span class="pl-k">=</span> p<span class="pl-k">.</span>σ<span class="pl-k">*</span>(u<span class="pl-k">.</span>y<span class="pl-k">-</span>u<span class="pl-k">.</span>x)
  du<span class="pl-k">.</span>y <span class="pl-k">=</span> u<span class="pl-k">.</span>x<span class="pl-k">*</span>(p<span class="pl-k">.</span>ρ<span class="pl-k">-</span>u<span class="pl-k">.</span>z) <span class="pl-k">-</span> u<span class="pl-k">.</span>y
  du<span class="pl-k">.</span>z <span class="pl-k">=</span> u<span class="pl-k">.</span>x<span class="pl-k">*</span>u<span class="pl-k">.</span>y <span class="pl-k">-</span> p<span class="pl-k">.</span>β<span class="pl-k">*</span>u<span class="pl-k">.</span>z
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>] (<span class="pl-c1">:x</span>,<span class="pl-c1">:y</span>,<span class="pl-c1">:z</span>)
p <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">28.0</span>, <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>]  (:σ,:ρ,:β)
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz_f,u0,tspan,p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())
<span class="pl-c"><span class="pl-c">#</span> Now the solution can be indexed as .x/y/z as well!</span>
sol[<span class="pl-c1">10</span>]<span class="pl-k">.</span>x</pre></div>
<p>We can also make use of <code>@SLVector</code>:</p>
<div class="highlight highlight-source-julia"><pre>LorenzVector <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> (<span class="pl-c1">:x</span>,<span class="pl-c1">:y</span>,<span class="pl-c1">:z</span>)
LorenzParameterVector <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> (:σ,:ρ,:β)

<span class="pl-k">function</span> <span class="pl-en">f</span>(u,p,t)
  x <span class="pl-k">=</span> p<span class="pl-k">.</span>σ<span class="pl-k">*</span>(u<span class="pl-k">.</span>y<span class="pl-k">-</span>u<span class="pl-k">.</span>x)
  y <span class="pl-k">=</span> u<span class="pl-k">.</span>x<span class="pl-k">*</span>(p<span class="pl-k">.</span>ρ<span class="pl-k">-</span>u<span class="pl-k">.</span>z) <span class="pl-k">-</span> u<span class="pl-k">.</span>y
  z <span class="pl-k">=</span> u<span class="pl-k">.</span>x<span class="pl-k">*</span>u<span class="pl-k">.</span>y <span class="pl-k">-</span> p<span class="pl-k">.</span>β<span class="pl-k">*</span>u<span class="pl-k">.</span>z
  <span class="pl-c1">LorenzVector</span>(x,y,z)
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> <span class="pl-c1">LorenzVector</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)
p <span class="pl-k">=</span> <span class="pl-c1">LorenzParameterVector</span>(<span class="pl-c1">10.0</span>,<span class="pl-c1">28.0</span>,<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,tspan,p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())</pre></div>
<h2><a id="user-content-relation-to-namedtuples" class="anchor" aria-hidden="true" href="#relation-to-namedtuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Relation to NamedTuples</h2>
<p>Julia's Base has NamedTuples in v0.7+. They are constructed as:</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> (σ <span class="pl-k">=</span> <span class="pl-c1">10.0</span>,ρ <span class="pl-k">=</span> <span class="pl-c1">28.0</span>,β <span class="pl-k">=</span> <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)</pre></div>
<p>and they support <code>p[1]</code> and <code>p.σ</code> as well. The <code>LVector</code>, <code>SLVector</code>, <code>LArray</code>
and <code>SLArray</code> constructors also support named tuples as their arguments:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LVector</span>((a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element LArray{Int64,<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLVector</span>((a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element SLArray{Tuple{<span class="pl-c1">2</span>},<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LArray</span>((<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), (a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>, d<span class="pl-k">=</span><span class="pl-c1">4</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> LArray{Int64,<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLArray</span><span class="pl-c1">{Tuple{2,2}}</span>((a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>, d<span class="pl-k">=</span><span class="pl-c1">4</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p>Converting to a named tuple from a labelled array x is available
using <code>convert(NamedTuple, x)</code>. Furthermore, <code>pairs(x)</code>
creates an iterator that is functionally the same as
<code>pairs(convert(NamedTuple, x))</code>, yielding <code>:label =&gt; x.label</code>
for each label of the array.</p>
<p>There are some crucial differences between a labelled array and
a named tuple. Labelled arrays can have any dimensions while
named tuples are always 1D. A named tuple can have different types
on each element, while an <code>SLArray</code> can only have one element
type and furthermore it has the actions of a static vector.
As a result <code>SLArray</code> has less element type information, which
improves compilation speed while giving more vector functionality
than a NamedTuple. <code>LArray</code> also only has a single element type and,
unlike a named tuple, is mutable.</p>
</article></div>