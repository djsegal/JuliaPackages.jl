<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-labelledarraysjl" class="anchor" aria-hidden="true" href="#labelledarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LabelledArrays.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/LabelledArrays/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/LabelledArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81bff749593ba1556483ac30720c75fb626559cdbe1401e921f4a97ab6124337/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f4c6162656c6c65644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/LabelledArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/LabelledArrays.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/LabelledArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h1>
<p dir="auto">LabelledArrays.jl is a package which provides arrays with labels, i.e. they are
arrays which <code>map</code>, <code>broadcast</code>, and all of that good stuff, but their components
are labelled. Thus for instance you can set that the second component is named
<code>:second</code> and retrieve it with <code>A.second</code>.</p>
<h2 dir="auto"><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to install</h2>
<p dir="auto">The package can be installed from this repository by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;LabelledArrays&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LabelledArrays<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials and Documentation</h2>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/LabelledArrays/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/LabelledArrays/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-slarrays" class="anchor" aria-hidden="true" href="#slarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SLArrays</h2>
<p dir="auto">The <code>SLArray</code> and <code>SLVector</code> macros are for creating static LabelledArrays.
First you create the type and then you can use that constructor to generate
instances of the labelled array.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ABC = @SLVector (:a, :b, :c)
A = ABC(1, 2, 3)
A.a == 1

ABCD = @SLArray (2, 2) (:a, :b, :c, :d)
B = ABCD(1, 2, 3, 4)
B.c == 3
B[2, 2] == B.d"><pre>ABC <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)
A <span class="pl-k">=</span> <span class="pl-c1">ABC</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
A<span class="pl-k">.</span>a <span class="pl-k">==</span> <span class="pl-c1">1</span>

ABCD <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)
B <span class="pl-k">=</span> <span class="pl-c1">ABCD</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
B<span class="pl-k">.</span>c <span class="pl-k">==</span> <span class="pl-c1">3</span>
B[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">==</span> B<span class="pl-k">.</span>d</pre></div>
<p dir="auto">Here we have that <code>A == [1,2,3]</code> and for example <code>A.b == 2</code>. We can create a
typed <code>SLArray</code> via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SVType = @SLVector Float64 (:a, :b, :c)"><pre>SVType <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> Float64 (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)</pre></div>
<p dir="auto">Alternatively, you can also construct a static labelled array using the
<code>SLVector</code> constructor by writing out the entries as keyword arguments:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SLVector(a = 1, b = 2, c = 3)
3-element SLArray{Tuple{3},1,(:a, :b, :c),Int64}:
 1
 2
 3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLVector</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element SLArray{Tuple{<span class="pl-c1">3</span>},<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p dir="auto">For general N-dimensional labelled arrays, you need to specify the size
(<code>Tuple{dim1,dim2,...}</code>) as the type parameter to the <code>SLArray</code> constructor:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SLArray{Tuple{2, 2}}(a = 1, b = 2, c = 3, d = 4)
2×2 SLArray{Tuple{2,2},2,(:a, :b, :c, :d),Int64}:
 1  3
 2  4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLArray</span><span class="pl-c1">{Tuple{2, 2}}</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p dir="auto">Constructing copies with some items changed is supported by
a keyword constructor whose first argument is the source and
additonal keyword arguments change several entries.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v1 = SLVector(a = 1.1, b = 2.2, c = 3.3);

julia&gt; v2 = SLVector(v1; b = 20.20, c = 30.30)
3-element SLArray{Tuple{3},Float64,1,3,(:a, :b, :c)}:
  1.1
 20.2
 30.3"><pre>julia<span class="pl-k">&gt;</span> v1 <span class="pl-k">=</span> <span class="pl-c1">SLVector</span>(a <span class="pl-k">=</span> <span class="pl-c1">1.1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3.3</span>);

julia<span class="pl-k">&gt;</span> v2 <span class="pl-k">=</span> <span class="pl-c1">SLVector</span>(v1; b <span class="pl-k">=</span> <span class="pl-c1">20.20</span>, c <span class="pl-k">=</span> <span class="pl-c1">30.30</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element SLArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)}<span class="pl-k">:</span>
  <span class="pl-c1">1.1</span>
 <span class="pl-c1">20.2</span>
 <span class="pl-c1">30.3</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ABCD = @SLArray (2, 2) (:a, :b, :c, :d);

julia&gt; B = ABCD(1, 2, 3, 4);

julia&gt; B2 = SLArray(B; c = 30)
2×2 SLArray{Tuple{2,2},Int64,2,4,(:a, :b, :c, :d)}:
 1  30
 2   4"><pre>julia<span class="pl-k">&gt;</span> ABCD <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ABCD</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> B2 <span class="pl-k">=</span> <span class="pl-c1">SLArray</span>(B; c <span class="pl-k">=</span> <span class="pl-c1">30</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},Int64,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">30</span>
 <span class="pl-c1">2</span>   <span class="pl-c1">4</span></pre></div>
<p dir="auto">One can also specify the indices directly.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; EFG = @SLArray (2, 2) (e = 1:3, f = 4, g = 2:4);

julia&gt; y = EFG(1.0, 2.5, 3.0, 5.0)
2×2 SLArray{Tuple{2,2},Float64,2,4,(e = 1:3, f = 4, g = 2:4)}:
 1.0  3.0
 2.5  5.0

julia&gt; y.g
3-element view(reshape(::StaticArrays.SArray{Tuple{2,2},Float64,2,4}, 4), 2:4) with eltype Float64:
 2.5
 3.0
 5.0

julia&gt; Arr = @SLArray (2, 2) (a = (2, :), b = 3);

julia&gt; z = Arr(1, 2, 3, 4);

julia&gt; z.a
2-element view(::StaticArrays.SArray{Tuple{2,2},Int64,2,4}, 2, :) with eltype Int64:
 2
 4"><pre>julia<span class="pl-k">&gt;</span> EFG <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) (e <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, f <span class="pl-k">=</span> <span class="pl-c1">4</span>, g <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">EFG</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2.5</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">5.0</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},Float64,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,(e <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, f <span class="pl-k">=</span> <span class="pl-c1">4</span>, g <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">3.0</span>
 <span class="pl-c1">2.5</span>  <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> y<span class="pl-k">.</span>g
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">StaticArrays.SArray{Tuple{2,2},Float64,2,4}</span>, <span class="pl-c1">4</span>), <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">2.5</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> Arr <span class="pl-k">=</span> <span class="pl-c1">@SLArray</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) (a <span class="pl-k">=</span> (<span class="pl-c1">2</span>, :), b <span class="pl-k">=</span> <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">Arr</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>a
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">StaticArrays.SArray{Tuple{2,2},Int64,2,4}</span>, <span class="pl-c1">2</span>, :) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span></pre></div>
<h2 dir="auto"><a id="user-content-larrays" class="anchor" aria-hidden="true" href="#larrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LArrays</h2>
<p dir="auto">The <code>LArrays</code>s are fully mutable arrays with labels. There is no performance
loss by using the labelled instead of indexing. Using the macro with values
and labels generates the labelled array with the given values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = @LArray [1, 2, 3] (:a, :b, :c)
A.a == 1"><pre>A <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)
A<span class="pl-k">.</span>a <span class="pl-k">==</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">One can generate a labelled array with undefined values by instead giving
the dimensions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = @LArray Float64 (2, 2) (:a, :b, :c, :d)
W = rand(2, 2)
A .= W
A.d == W[2, 2]"><pre>A <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> Float64 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)
W <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
A <span class="pl-k">.=</span> W
A<span class="pl-k">.</span>d <span class="pl-k">==</span> W[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>]</pre></div>
<p dir="auto">or using an <code>@LVector</code> shorthand:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = @LVector Float64 (:a, :b, :c, :d)
A .= rand(4)"><pre>A <span class="pl-k">=</span> <span class="pl-c1">@LVector</span> Float64 (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)
A <span class="pl-k">.=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)</pre></div>
<p dir="auto">As with <code>SLArray</code>, alternative constructors exist that use the keyword argument
form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; LVector(a = 1, b = 2, c = 3)
3-element LArray{Int64,1,(:a, :b, :c)}:
 1
 2
 3

julia&gt; LArray((2, 2); a = 1, b = 2, c = 3, d = 4) # need to specify size as first argument
2×2 LArray{Int64,2,(:a, :b, :c, :d)}:
 1  3
 2  4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LVector</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element LArray{Int64,<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LArray</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>); a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> need to specify size as first argument</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> LArray{Int64,<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p dir="auto">One can also specify the indices directly.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; z = @LArray [1.0, 2.0, 3.0] (a = 1:2, b = 2:3);

julia&gt; z.b
2-element view(::Array{Float64,1}, 2:3) with eltype Float64:
 2.0
 3.0

julia&gt; z = @LArray [1 2; 3 4] (a = (2, :), b = 2:3);

julia&gt; z.a
2-element view(::Array{Int64,2}, 2, :) with eltype Int64:
 3
 4"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>] (a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>b
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>] (a <span class="pl-k">=</span> (<span class="pl-c1">2</span>, :), b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> z<span class="pl-k">.</span>a
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,2}</span>, <span class="pl-c1">2</span>, :) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span></pre></div>
<p dir="auto">The labels of LArray and SLArray can be accessed
by function <code>symbols</code>, which returns a tuple of symbols.</p>
<h2 dir="auto"><a id="user-content-example-nice-diffeq-syntax-without-a-dsl" class="anchor" aria-hidden="true" href="#example-nice-diffeq-syntax-without-a-dsl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Nice DiffEq Syntax Without A DSL</h2>
<p dir="auto">LabelledArrays.jl are a way to get DSL-like syntax without a macro. In this case,
we can solve differential equations with labelled components by making use of
labelled arrays, and always refer to the components by name instead of index.</p>
<p dir="auto">Let's solve the Lorenz equation. Using <code>@LVector</code>s, we can do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LabelledArrays, OrdinaryDiffEq

function lorenz_f(du, u, p, t)
    du.x = p.σ * (u.y - u.x)
    du.y = u.x * (p.ρ - u.z) - u.y
    du.z = u.x * u.y - p.β * u.z
end

u0 = @LArray [1.0, 0.0, 0.0] (:x, :y, :z)
p = @LArray [10.0, 28.0, 8 / 3] (:σ, :ρ, :β)
tspan = (0.0, 10.0)
prob = ODEProblem(lorenz_f, u0, tspan, p)
sol = solve(prob, Tsit5())
# Now the solution can be indexed as .x/y/z as well!
sol[10].x"><pre><span class="pl-k">using</span> LabelledArrays, OrdinaryDiffEq

<span class="pl-k">function</span> <span class="pl-en">lorenz_f</span>(du, u, p, t)
    du<span class="pl-k">.</span>x <span class="pl-k">=</span> p<span class="pl-k">.</span>σ <span class="pl-k">*</span> (u<span class="pl-k">.</span>y <span class="pl-k">-</span> u<span class="pl-k">.</span>x)
    du<span class="pl-k">.</span>y <span class="pl-k">=</span> u<span class="pl-k">.</span>x <span class="pl-k">*</span> (p<span class="pl-k">.</span>ρ <span class="pl-k">-</span> u<span class="pl-k">.</span>z) <span class="pl-k">-</span> u<span class="pl-k">.</span>y
    du<span class="pl-k">.</span>z <span class="pl-k">=</span> u<span class="pl-k">.</span>x <span class="pl-k">*</span> u<span class="pl-k">.</span>y <span class="pl-k">-</span> p<span class="pl-k">.</span>β <span class="pl-k">*</span> u<span class="pl-k">.</span>z
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>] (<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:z</span>)
p <span class="pl-k">=</span> <span class="pl-c1">@LArray</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">28.0</span>, <span class="pl-c1">8</span> <span class="pl-k">/</span> <span class="pl-c1">3</span>] (<span class="pl-c1">:σ</span>, <span class="pl-c1">:ρ</span>, <span class="pl-c1">:β</span>)
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz_f, u0, tspan, p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Tsit5</span>())
<span class="pl-c"><span class="pl-c">#</span> Now the solution can be indexed as .x/y/z as well!</span>
sol[<span class="pl-c1">10</span>]<span class="pl-k">.</span>x</pre></div>
<p dir="auto">We can also make use of <code>@SLVector</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="LorenzVector = @SLVector (:x, :y, :z)
LorenzParameterVector = @SLVector (:σ, :ρ, :β)

function f(u, p, t)
    x = p.σ * (u.y - u.x)
    y = u.x * (p.ρ - u.z) - u.y
    z = u.x * u.y - p.β * u.z
    LorenzVector(x, y, z)
end

u0 = LorenzVector(1.0, 0.0, 0.0)
p = LorenzParameterVector(10.0, 28.0, 8 / 3)
tspan = (0.0, 10.0)
prob = ODEProblem(f, u0, tspan, p)
sol = solve(prob, Tsit5())"><pre>LorenzVector <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> (<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:z</span>)
LorenzParameterVector <span class="pl-k">=</span> <span class="pl-c1">@SLVector</span> (<span class="pl-c1">:σ</span>, <span class="pl-c1">:ρ</span>, <span class="pl-c1">:β</span>)

<span class="pl-k">function</span> <span class="pl-en">f</span>(u, p, t)
    x <span class="pl-k">=</span> p<span class="pl-k">.</span>σ <span class="pl-k">*</span> (u<span class="pl-k">.</span>y <span class="pl-k">-</span> u<span class="pl-k">.</span>x)
    y <span class="pl-k">=</span> u<span class="pl-k">.</span>x <span class="pl-k">*</span> (p<span class="pl-k">.</span>ρ <span class="pl-k">-</span> u<span class="pl-k">.</span>z) <span class="pl-k">-</span> u<span class="pl-k">.</span>y
    z <span class="pl-k">=</span> u<span class="pl-k">.</span>x <span class="pl-k">*</span> u<span class="pl-k">.</span>y <span class="pl-k">-</span> p<span class="pl-k">.</span>β <span class="pl-k">*</span> u<span class="pl-k">.</span>z
    <span class="pl-c1">LorenzVector</span>(x, y, z)
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> <span class="pl-c1">LorenzVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
p <span class="pl-k">=</span> <span class="pl-c1">LorenzParameterVector</span>(<span class="pl-c1">10.0</span>, <span class="pl-c1">28.0</span>, <span class="pl-c1">8</span> <span class="pl-k">/</span> <span class="pl-c1">3</span>)
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f, u0, tspan, p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Tsit5</span>())</pre></div>
<h2 dir="auto"><a id="user-content-relation-to-namedtuples" class="anchor" aria-hidden="true" href="#relation-to-namedtuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Relation to NamedTuples</h2>
<p dir="auto">Julia's Base has NamedTuples in v0.7+. They are constructed as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = (σ = 10.0, ρ = 28.0, β = 8 / 3)"><pre>p <span class="pl-k">=</span> (σ <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, ρ <span class="pl-k">=</span> <span class="pl-c1">28.0</span>, β <span class="pl-k">=</span> <span class="pl-c1">8</span> <span class="pl-k">/</span> <span class="pl-c1">3</span>)</pre></div>
<p dir="auto">and they support <code>p[1]</code> and <code>p.σ</code> as well. The <code>LVector</code>, <code>SLVector</code>, <code>LArray</code>
and <code>SLArray</code> constructors also support named tuples as their arguments:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; LVector((a = 1, b = 2))
2-element LArray{Int64,1,(:a, :b)}:
 1
 2

julia&gt; SLVector((a = 1, b = 2))
2-element SLArray{Tuple{2},1,(:a, :b),Int64}:
 1
 2

julia&gt; LArray((2, 2), (a = 1, b = 2, c = 3, d = 4))
2×2 LArray{Int64,2,(:a, :b, :c, :d)}:
 1  3
 2  4

julia&gt; SLArray{Tuple{2, 2}}((a = 1, b = 2, c = 3, d = 4))
2×2 SLArray{Tuple{2,2},2,(:a, :b, :c, :d),Int64}:
 1  3
 2  4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LVector</span>((a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element LArray{Int64,<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLVector</span>((a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element SLArray{Tuple{<span class="pl-c1">2</span>},<span class="pl-c1">1</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LArray</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> LArray{Int64,<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>)}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SLArray</span><span class="pl-c1">{Tuple{2, 2}}</span>((a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SLArray{Tuple{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>},<span class="pl-c1">2</span>,(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>),Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p dir="auto">Converting to a named tuple from a labelled array x is available
using <code>convert(NamedTuple, x)</code>. Furthermore, <code>pairs(x)</code>
creates an iterator that is functionally the same as
<code>pairs(convert(NamedTuple, x))</code>, yielding <code>:label =&gt; x.label</code>
for each label of the array.</p>
<p dir="auto">There are some crucial differences between a labelled array and
a named tuple. Labelled arrays can have any dimensions while
named tuples are always 1D. A named tuple can have different types
on each element, while an <code>SLArray</code> can only have one element
type and furthermore it has the actions of a static vector.
As a result <code>SLArray</code> has less element type information, which
improves compilation speed while giving more vector functionality
than a NamedTuple. <code>LArray</code> also only has a single element type and,
unlike a named tuple, is mutable.</p>
<h2 dir="auto"><a id="user-content-note-labelled-slices" class="anchor" aria-hidden="true" href="#note-labelled-slices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note: Labelled slices</h2>
<p dir="auto">This functionality has been removed from LabelledArrays.jl, but can
replicated with the same compile-time performance and indexing syntax
using <a href="https://rafaqz.github.io/DimensionalData.jl/stable/" rel="nofollow">DimensionalData.jl</a>.</p>
</article></div>