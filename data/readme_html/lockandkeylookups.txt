<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lockandkeylookups" class="anchor" aria-hidden="true" href="#lockandkeylookups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LockandKeyLookups</h1>
<p><a href="https://caseykneale.github.io/LockandKeyLookups.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://caseykneale.github.io/LockandKeyLookups.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/caseykneale/LockandKeyLookups.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aceef84fdeeed2d84dff367d8994d74f205f8cb4/68747470733a2f2f7472617669732d63692e636f6d2f63617365796b6e65616c652f4c6f636b616e644b65794c6f6f6b7570732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/caseykneale/LockandKeyLookups.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/caseykneale/LockandKeyLookups.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4db728ca4fdfd7b4d8989ea63de283bb5de39d47/68747470733a2f2f636f6465636f762e696f2f67682f63617365796b6e65616c652f4c6f636b616e644b65794c6f6f6b7570732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/caseykneale/LockandKeyLookups.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Ever have <code>J</code> streams of data that, maybe don't fit so well in memory. Well you can lazy load them! But... what if you want to do lookups/labelling tasks with some primary Key in another dataframe(<code>i</code> rows long)? Do you really want to run the cost of iterating <code>i</code> times to do <code>J</code> joins? Probably not - well maybe, but - probably not.</p>
<p>That's where LockandKeyLookups comes into play. LockandKeyLookups are iterators that can be instantiated like the following:</p>
<div class="highlight highlight-source-julia"><pre>lakl <span class="pl-k">=</span> <span class="pl-c1">LockandKeyLookup</span>(    key, tumbler,
                            key_lookup_fn, pin_lookup_fn,
                            emitter_fn <span class="pl-k">=</span> ( k, t ) <span class="pl-k">-&gt;</span> k <span class="pl-k">==</span> t)</pre></div>
<p>Where the <code>tumbler</code> is some array of iterables like <code>DataFrames</code>, key is some iterable, and the arguments labelled <code>_fn</code> are functions that do the following:</p>
<ul>
<li><code>key_lookup_fn</code> &amp; <code>pin_lookup_fn</code> : are the functions used to index the key and tumbler pins for a match condition.</li>
<li><code>emitter_fn</code> : is the function used to assess whether the result of the lookup_fn's between a key and a given pin is satisfied.</li>
</ul>
<p>so we can iterate these instances in for loops, or collections as usual.</p>
<div class="highlight highlight-source-julia"><pre>[ iter <span class="pl-k">for</span> iter <span class="pl-k">in</span> lakl ]</pre></div>
<p>where the structure of the <code>iter</code> item is the following <code>( Key_Index[i] =&gt; (  Tumbler_Index[J], Pin_Index[Q] ) ) = iter </code>
So this gives us a mapping between a single key, and a single pin at a time.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/caseykneale/LockandKeyLookups.jl/master/Images/locknkey.png"><img src="https://raw.githubusercontent.com/caseykneale/LockandKeyLookups.jl/master/Images/locknkey.png" alt="LockAndKeyLookupDiagram" style="max-width:100%;"></a></p>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h2>
<ul>
<li>The items must be sorted by the associated key for this to work!</li>
<li>Only tested with DataFrames <code>each(row)</code> iterables so far.</li>
<li>Might not be the fastest option. But it's not very steppy, and should work with lazy iterators.</li>
</ul>
</article></div>