<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dataflowjl" class="anchor" aria-hidden="true" href="#dataflowjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DataFlow.jl</h1>
<p><a href="https://travis-ci.org/MikeInnes/DataFlow.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a337007d86a1f15843933b22d863e1087e933e37/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f44617461466c6f772e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/DataFlow.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>Note:</strong> This package is deprecated. You should take a look at <a href="https://github.com/MikeInnes/IRTools.jl">IRTools</a> instead.</p>
<p>DataFlow.jl is a code intermediate representation (IR) format, representing code as an expression graph. It supports closures are represented explicitly, allowing full programs to be easily represented and manipulated and complex whole-program transformations to be applied. Moreover, programs can be kept in a high-level form that's very human-readable.</p>
<p>A data flow graph is a bit like an expression tree without variables; functions always refer to their inputs directly. Underneath it's a directed graph linking the output of one function call to the input of another. DataFlow.jl provides functions like <code>prewalk</code> and <code>postwalk</code> which allow you to do crazy graph-restructuring operations with minimal code, <em>even on cyclic graphs</em>. Think algorithms like common subexpression elimination implemented in <a href="https://github.com/MikeInnes/DataFlow.jl/blob/d5899a47ed052190e655afdf1510e021ad95d09d/src/operations.jl#L2">one line</a> rather than hundreds.</p>
<h2><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFlow<span class="pl-k">:</span> vertex, constant, Call</pre></div>
<p>DataFlow.jl provides the <code>IVertex</code> data type, which behaves a lot like Julia's <code>Expr</code> type. We can construct vertices, and use them as inputs to other vertices, to build expressions. <code>constant</code> is a shortcut for vertices representing constant values.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFlow<span class="pl-k">:</span> vertex, constant, Call, Constant

julia<span class="pl-k">&gt;</span> a, b <span class="pl-k">=</span> <span class="pl-c1">constant</span>(<span class="pl-c1">1</span>), <span class="pl-c1">constant</span>(<span class="pl-c1">2</span>)
(<span class="pl-c1">IVertex</span>(<span class="pl-c1">1</span>), <span class="pl-c1">IVertex</span>(<span class="pl-c1">2</span>))

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">vertex</span>(<span class="pl-c1">Call</span>(), <span class="pl-c1">constant</span>(<span class="pl-k">+</span>), a, b)
<span class="pl-c1">IVertex</span>((<span class="pl-k">+</span>)(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))</pre></div>
<p>The <code>Call()</code> object is analagous to the "head" in Julia's <code>Expr</code>s, so this is like <code>Expr(:call, f, x...)</code>.</p>
<p>A key difference from <code>Expr</code> is that the <code>IVertex</code> is a graph, not a tree, and reuse is explicitly represented. Consider multiplying the expression <code>c</code> by itself:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">vertex</span>(<span class="pl-c1">Call</span>(), <span class="pl-c1">constant</span>(<span class="pl-k">*</span>), c, c)
<span class="pl-c1">IVertex</span>(
bison <span class="pl-k">=</span> (<span class="pl-k">+</span>)(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-k">*</span>)(bison, bison))</pre></div>
<p>In order to represent the structure of the graph in text, DataFlow.jl prints an expression tree with a made-up variable binding (<code>bison</code>). This variable is <em>not</em> present in the graph itself, but just used for presentation.</p>
<p>Graphs can also be dumped to Julia expressions using <code>DataFlow.syntax</code>, which will similarly create variable bindings where needed.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> DataFlow<span class="pl-k">.</span><span class="pl-c1">syntax</span>(d)
<span class="pl-k">quote</span>
    <span class="pl-c"><span class="pl-c">#</span>#edge#668 = (+)(1, 2)</span>
    (<span class="pl-k">*</span>)(<span class="pl-c"><span class="pl-c">#</span>#edge#668, ##edge#668)</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eval</span>(ans)
<span class="pl-c1">9</span></pre></div>
<p>Graphs are also allowed to be cyclic. We can introduce cycles using <code>thread!</code>, which pushes a new argument into an existing vertex.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> DataFlow<span class="pl-k">.</span><span class="pl-c1">thread!</span>(c, c)
<span class="pl-c1">IVertex</span>(bison <span class="pl-k">=</span> (<span class="pl-k">+</span>)(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, bison))</pre></div>
<p>Notice that the cycle is represented by the circular dependency of <code>bison</code> on itself.</p>
<h2><a id="user-content-walking" class="anchor" aria-hidden="true" href="#walking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Walking</h2>
<p>Transformations are carried out via <code>prewalk</code> and <code>postwalk</code> functions very similar to those in <a href="https://github.com/MikeInnes/MacroTools.jl">MacroTools</a> (see there for more explanation).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> DataFlow<span class="pl-k">.</span><span class="pl-c1">prewalk</span>(d) <span class="pl-k">do</span> v
         v<span class="pl-k">.</span>value <span class="pl-k">isa</span> Call <span class="pl-k">&amp;&amp;</span> v[<span class="pl-c1">1</span>]<span class="pl-k">.</span>value <span class="pl-k">==</span> <span class="pl-c1">Constant</span>(<span class="pl-k">+</span>) ? <span class="pl-c1">vertex</span>(<span class="pl-c1">constant</span>(<span class="pl-k">-</span>), v[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">.</span><span class="pl-k">..</span>) : v
       <span class="pl-k">end</span>
<span class="pl-c1">IVertex</span>(
bison <span class="pl-k">=</span> (<span class="pl-c1">IVertex</span>(<span class="pl-k">-</span>))(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(<span class="pl-k">*</span>)(bison, bison))</pre></div>
<p>There are also in-place variants of prewalk and postwalk, which can be used for more advanced transformations.</p>
</article></div>