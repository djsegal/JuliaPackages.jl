<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-wherethewaterflows" class="anchor" aria-hidden="true" href="#wherethewaterflows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WhereTheWaterFlows</h1>
<p><a href="https://github.com/mauro3/WhereTheWaterFlows.jl/actions"><img src="https://github.com/mauro3/WhereTheWaterFlows.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mauro3/WhereTheWaterFlows-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/30de56780961854388795b7107fe44e853a5f6149df725fda18ceef7442c537c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6175726f332f57686572655468655761746572466c6f77732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mauro3/WhereTheWaterFlows.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mauro3/WhereTheWaterFlows.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a84c31b86875eaabcc739034b0e6908ef3ba91ed266f161c72d87a3202f8260/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726f332f57686572655468655761746572466c6f77732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mauro3/WhereTheWaterFlows.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements the D8 flow routing algorithm [1] as well as a
basin-filling algorithm, also by [1].  It uses a O(n), recursive algorithm
similar to [2]. This allows to calculate water
pathways on a digital elevation model (DEM).</p>
<p>This code is reasonably fast: flow routing on a DEM of Antarctica of
about 2e8 points and with 150000 depressions takes about 30s on my
laptop (Ryzen 4750U).</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/4098145/67853636-e319b880-fb06-11e9-933d-9f55ace99ce1.png"><img src="https://user-images.githubusercontent.com/4098145/67853636-e319b880-fb06-11e9-933d-9f55ace99ce1.png" alt="Upslope area" style="max-width:100%;"></a></p>
<p>Example of upslope area calculated in below example.</p>
<h2><a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Manual</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using WhereTheWaterFlows, PyPlot
const WWF = WhereTheWaterFlows

&quot;Synthtic DEM with a few maxs and mins&quot;
function peaks2(n=100, randfac=0.05)
    coords = range(-pi, pi, length=n)
    return coords, coords, sin.(coords) .* cos.(coords') .-
        0.7*(sin.(coords.+1) .* cos.(coords')).^8 .+
        randfac*randn(n,n)
end
x,y,dem = peaks2(200)
area, slen, dir, nout, nin, pits, c, bnds = waterflows(dem)

# log-upslope area as well as pits (sinks)
WWF.plotarea(x, y, area, pits)

# log-upslope area over contours of the dem
WWF.plotarea_dem(x, y, dem, area, pits)

# catchments
figure()
WWF.heatmap(x,y,c)

# A single catchment of some point.  Choose one with large catchment:
i, j = 50, findmax(area[50,:])[2]
cc = catchment(dir, CartesianIndex(i,j))
WWF.heatmap(x,y,cc)
plot(x[i], y[j], &quot;&lt;r&quot;, ms=10)

# stream length
figure()
WWF.heatmap(x,y,slen)

demf = fill_dem(dem, pits, dir)
# &quot;lake-depth&quot;
figure()
WWF.heatmap(x,y,demf.-dem)
"><pre><span class="pl-k">using</span> WhereTheWaterFlows, PyPlot
<span class="pl-k">const</span> WWF <span class="pl-k">=</span> WhereTheWaterFlows

<span class="pl-s"><span class="pl-pds">"</span>Synthtic DEM with a few maxs and mins<span class="pl-pds">"</span></span>
<span class="pl-k">function</span> <span class="pl-en">peaks2</span>(n<span class="pl-k">=</span><span class="pl-c1">100</span>, randfac<span class="pl-k">=</span><span class="pl-c1">0.05</span>)
    coords <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">pi</span>, <span class="pl-c1">pi</span>, length<span class="pl-k">=</span>n)
    <span class="pl-k">return</span> coords, coords, <span class="pl-c1">sin</span>.(coords) <span class="pl-k">.*</span> <span class="pl-c1">cos</span>.(coords<span class="pl-k">'</span>) <span class="pl-k">.-</span>
        <span class="pl-c1">0.7</span><span class="pl-k">*</span>(<span class="pl-c1">sin</span>.(coords<span class="pl-k">.+</span><span class="pl-c1">1</span>) <span class="pl-k">.*</span> <span class="pl-c1">cos</span>.(coords<span class="pl-k">'</span>))<span class="pl-k">.^</span><span class="pl-c1">8</span> <span class="pl-k">.+</span>
        randfac<span class="pl-k">*</span><span class="pl-c1">randn</span>(n,n)
<span class="pl-k">end</span>
x,y,dem <span class="pl-k">=</span> <span class="pl-c1">peaks2</span>(<span class="pl-c1">200</span>)
area, slen, dir, nout, nin, pits, c, bnds <span class="pl-k">=</span> <span class="pl-c1">waterflows</span>(dem)

<span class="pl-c"><span class="pl-c">#</span> log-upslope area as well as pits (sinks)</span>
WWF<span class="pl-k">.</span><span class="pl-c1">plotarea</span>(x, y, area, pits)

<span class="pl-c"><span class="pl-c">#</span> log-upslope area over contours of the dem</span>
WWF<span class="pl-k">.</span><span class="pl-c1">plotarea_dem</span>(x, y, dem, area, pits)

<span class="pl-c"><span class="pl-c">#</span> catchments</span>
<span class="pl-c1">figure</span>()
WWF<span class="pl-k">.</span><span class="pl-c1">heatmap</span>(x,y,c)

<span class="pl-c"><span class="pl-c">#</span> A single catchment of some point.  Choose one with large catchment:</span>
i, j <span class="pl-k">=</span> <span class="pl-c1">50</span>, <span class="pl-c1">findmax</span>(area[<span class="pl-c1">50</span>,:])[<span class="pl-c1">2</span>]
cc <span class="pl-k">=</span> <span class="pl-c1">catchment</span>(dir, <span class="pl-c1">CartesianIndex</span>(i,j))
WWF<span class="pl-k">.</span><span class="pl-c1">heatmap</span>(x,y,cc)
<span class="pl-c1">plot</span>(x[i], y[j], <span class="pl-s"><span class="pl-pds">"</span>&lt;r<span class="pl-pds">"</span></span>, ms<span class="pl-k">=</span><span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> stream length</span>
<span class="pl-c1">figure</span>()
WWF<span class="pl-k">.</span><span class="pl-c1">heatmap</span>(x,y,slen)

demf <span class="pl-k">=</span> <span class="pl-c1">fill_dem</span>(dem, pits, dir)
<span class="pl-c"><span class="pl-c">#</span> "lake-depth"</span>
<span class="pl-c1">figure</span>()
WWF<span class="pl-k">.</span><span class="pl-c1">heatmap</span>(x,y,demf<span class="pl-k">.-</span>dem)</pre></div>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<p>[1] O’Callaghan, J. and Mark, D.: The extraction of drainage networks
from digital elevation data, Comput. Vision Graph., 28, 323–344,
1984. <a href="http://www.academia.edu/download/47710594/s0734-189x_2884_2980011-020160801-5103-19m2b12.pdf" rel="nofollow">link</a></p>
<p>[2] Braun, J. and Willett, S.D.: A very efficient O(n), implicit and
parallel method to solve the stream power equation governing
fluvial incision and landscape evolution
panel <a href="https://doi.org/10.1016/j.geomorph.2012.10.008" rel="nofollow">doi</a></p>
</article></div>