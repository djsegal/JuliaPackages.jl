<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-changeprecision" class="anchor" aria-hidden="true" href="#changeprecision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ChangePrecision</h1>
<p><a href="https://travis-ci.org/stevengj/ChangePrecision.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d10aa02c15fd8c17f822d6312ccc4ead0f92aaf0/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f4368616e6765507265636973696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/ChangePrecision.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/StevenGJohnson/changeprecision-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d240b6975815c141e65256036e32517fa006498/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f65726265313673726e617630777266753f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/erbe16srnav0wrfu?svg=true" style="max-width:100%;"></a></p>
<p>This package makes it easy to change the "default" precision of a large body of Julia code, simply by prefixing it with the <code>@changeprecision T expression</code> macro, for example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@changeprecision</span> Float32 <span class="pl-k">begin</span>
    x <span class="pl-k">=</span> <span class="pl-c1">7.3</span>
    y <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>
    z <span class="pl-k">=</span> <span class="pl-c1">rand</span>() <span class="pl-k">.+</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
<span class="pl-k">end</span></pre></div>
<p>In particular, floating-point literals like <code>7.3</code> are reinterpreted as the requested type <code>Float32</code>, operations like <code>/</code> that convert integer arguments to <code>Float64</code> instead convert to <code>Float32</code>, and random-number or matrix constructors like <code>rand</code> and <code>ones</code> default to <code>Float32</code> instead of <code>Float64</code>.
Several other cases are handled as well: arithmetic with irrational constants like <code>pi</code>, linear-algebra functions (like <code>inv</code>) on integer matrices, etcetera.</p>
<p>The <code>@changeprecision</code> transformations are applied recursively to any <code>include(filename)</code> call, so that you can simply do <code>@changeprecision Float32 include("mycode.jl")</code> to run a whole script <code>mycode.jl</code> in <code>Float32</code> default precision.</p>
<p>Code that explicitly specifies a type, e.g. <code>rand(Float64)</code>, is unaffected by <code>@changeprecision</code>.</p>
<p>Note that only expressions that <em>explicitly appear</em> in the <code>expression</code> (or code inserted by <code>include</code>) are converted by <code>@changeprecision</code>.  Code <em>hidden inside</em> external functions that are called is not affected.</p>
<h2><a id="user-content-this-package-is-for-quick-experiments-not-production-code" class="anchor" aria-hidden="true" href="#this-package-is-for-quick-experiments-not-production-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>This package is for quick experiments, not production code</h2>
<p>This package was designed for quick hacks, where you want to experiment with the effect of a change in precision on a bunch of code.   For production code and long-term software development in Julia, you are strongly urged to write precision-independent code â€” that is, your functions should determine their working precision from the precision of their <em>arguments</em>, so that by simply passing data in a different precision they compute in that precision.</p>
</article></div>