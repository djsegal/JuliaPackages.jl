<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-changeprecision" class="anchor" aria-hidden="true" href="#changeprecision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChangePrecision</h1>
<p dir="auto"><a href="https://github.com/JuliaMath/ChangePrecision.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaMath/ChangePrecision.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">This package makes it easy to change the "default" precision of a large body of Julia code, simply by prefixing it with the <code>@changeprecision T expression</code> macro, for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@changeprecision Float32 begin
    x = 7.3
    y = 1/3
    z = rand() .+ ones(3,4)
end"><pre><span class="pl-c1">@changeprecision</span> Float32 <span class="pl-k">begin</span>
    x <span class="pl-k">=</span> <span class="pl-c1">7.3</span>
    y <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>
    z <span class="pl-k">=</span> <span class="pl-c1">rand</span>() <span class="pl-k">.+</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">In particular, floating-point literals like <code>7.3</code> are reinterpreted as the requested type <code>Float32</code>, operations like <code>/</code> that convert integer arguments to <code>Float64</code> instead convert to <code>Float32</code>, and random-number or matrix constructors like <code>rand</code> and <code>ones</code> default to <code>Float32</code> instead of <code>Float64</code>.
Several other cases are handled as well: arithmetic with irrational constants like <code>pi</code>, linear-algebra functions (like <code>inv</code>) on integer matrices, etcetera.</p>
<p dir="auto">The <code>@changeprecision</code> transformations are applied recursively to any <code>include(filename)</code> call, so that you can simply do <code>@changeprecision Float32 include("mycode.jl")</code> to run a whole script <code>mycode.jl</code> in <code>Float32</code> default precision.</p>
<p dir="auto">Code that explicitly specifies a type, e.g. <code>rand(Float64)</code>, is unaffected by <code>@changeprecision</code>.</p>
<p dir="auto">Note that only expressions that <em>explicitly appear</em> in the <code>expression</code> (or code inserted by <code>include</code>) are converted by <code>@changeprecision</code>.  Code <em>hidden inside</em> external functions that are called is not affected.</p>
<h2 dir="auto"><a id="user-content-this-package-is-for-quick-experiments-not-production-code" class="anchor" aria-hidden="true" href="#this-package-is-for-quick-experiments-not-production-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>This package is for quick experiments, not production code</h2>
<p dir="auto">This package was designed for quick hacks, where you want to experiment with the effect of a change in precision on a bunch of code.   For production code and long-term software development in Julia, you are strongly urged to write precision-independent code â€” that is, your functions should determine their working precision from the precision of their <em>arguments</em>, so that by simply passing data in a different precision they compute in that precision.</p>
</article></div>