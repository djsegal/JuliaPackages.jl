<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mddatasetsjl-multi-dimensional-datasets" class="anchor" aria-hidden="true" href="#mddatasetsjl-multi-dimensional-datasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MDDatasets.jl: Multi-Dimensional Datasets</h1>
<h2><a id="user-content-heavy_exclamation_mark-core-of-c-data-analysisvisualization-suite" class="anchor" aria-hidden="true" href="#heavy_exclamation_mark-core-of-c-data-analysisvisualization-suite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/ma-laforge/CData.jl"><g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png">❗</g-emoji> Core of C-Data Analysis/Visualization Suite</a></h2>
<p><a href="https://travis-ci.org/ma-laforge/MDDatasets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/28cf7b9f6c698fee723771e5a2a7f2a0626f6998/68747470733a2f2f7472617669732d63692e6f72672f6d612d6c61666f7267652f4d4444617461736574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ma-laforge/MDDatasets.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p>The MDDatasets.jl module provides tools to simplify manipulation of multi-dimensional datasets.  MDDatasets.jl implements the core algorithms of the <a href="https://github.com/ma-laforge/CData.jl">C-Data Analysis/Visualization Suite</a></p>
<table>
<thead>
<tr>
<th align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ma-laforge/FileRepo/blob/master/SignalProcessing/sampleplots/demo15.png"><img src="https://github.com/ma-laforge/FileRepo/raw/master/SignalProcessing/sampleplots/demo15.png" width="850" style="max-width:100%;"></a></th>
</tr>
</thead>
</table>
<h3><a id="user-content-important-features" class="anchor" aria-hidden="true" href="#important-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Important Features</h3>
<ul>
<li><em><strong>Single variable for (x,y) values:</strong></em> Stores both <code>(x,y)</code> values representing <code>y=f(x)</code> in a single, coherent structure.  This signficantly improves the simplicity &amp; readability of your calculations.</li>
<li><em><strong>Automatic Interpolation:</strong></em> Calculations will automatically be interpolated over <code>x</code> as if <code>y=f(x)</code> data represented a <em><strong>continuous</strong></em> function of x.</li>
<li><em><strong>Automatic Broadcasting:</strong></em> Operations on multi-dimensional datasets will automatically be broadcasted (vectorized) over all subsets.  This significantly improves the readability of programs.</li>
</ul>
<h2><a id="user-content-concrete-example" class="anchor" aria-hidden="true" href="#concrete-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Concrete Example</h2>
<pre><code>using MDDatasets
</code></pre>
<p>Create <code>(x,y)</code> container pair, and call it “x”:</p>
<pre><code>x = DataF1(0:.1:20)
#NOTE: Both x &amp; y coordinates of "x" object initialized as y = x = [supplied range]
</code></pre>
<p>“Extract” maximum x-value from data:</p>
<pre><code>xmax = maximum(x)
</code></pre>
<p>Construct a normalized ramp dataset, <code>unity_ramp</code>:</p>
<pre><code>unity_ramp = x/xmax
</code></pre>
<h4><a id="user-content-observe-x-and-unity_ramp" class="anchor" aria-hidden="true" href="#observe-x-and-unity_ramp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Observe <code>x</code> and <code>unity_ramp</code></h4>
<p>(Note how <code>unity_ramp</code> is normalized such that maximum value is 1)
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ma-laforge/FileRepo/blob/master/MDDatasets/demo1/samplemdcalc_1.png"><img src="https://github.com/ma-laforge/FileRepo/raw/master/MDDatasets/demo1/samplemdcalc_1.png" style="max-width:100%;"></a></p>
<p>Compute <code>cos(kx)</code> &amp; <code>ksinkx = cos'(kx)</code>:</p>
<pre><code>coskx = cos((2.5pi/10)*x)
ksinkx = deriv(coskx)
</code></pre>
<p>Compute ramps with different slopes using <code>unity_ramp</code> (previously computed):</p>
<pre><code>#NOTE: for Inner-most sweep, we need to specify leaf element type (DataF1 here):
ramp = fill(DataRS{DataF1}, PSweep("slope", [0, 0.5, 1, 1.5, 2])) do slope
	return unity_ramp * slope
end
</code></pre>
<p>NOTE: the above expression constructs a multi-dimensional <code>DataRS</code> structure, and fills it with <code>(x,y)</code> values for each of the desired parameter values (the slope).</p>
<h4><a id="user-content-observe-coskx-ksinkx-and-ramp" class="anchor" aria-hidden="true" href="#observe-coskx-ksinkx-and-ramp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Observe <code>coskx</code>, <code>ksinkx</code> and <code>ramp</code></h4>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ma-laforge/FileRepo/blob/master/MDDatasets/demo1/samplemdcalc_2.png"><img src="https://github.com/ma-laforge/FileRepo/raw/master/MDDatasets/demo1/samplemdcalc_2.png" style="max-width:100%;"></a></p>
<p>Merge two datasets with different # of sweeps (<code>coskx</code> &amp; <code>ramp</code>):</p>
<pre><code>r_cos = coskx+ramp
</code></pre>
<h4><a id="user-content-observe-newly-constructed-r_cos-dataset" class="anchor" aria-hidden="true" href="#observe-newly-constructed-r_cos-dataset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Observe newly constructed <code>r_cos</code> dataset:</h4>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ma-laforge/FileRepo/blob/master/MDDatasets/demo1/samplemdcalc_3.png"><img src="https://github.com/ma-laforge/FileRepo/raw/master/MDDatasets/demo1/samplemdcalc_3.png" style="max-width:100%;"></a></p>
<p>Shift all ramped cos(kx) waveforms to make them centered at their mid-points:</p>
<pre><code>midval = (minimum(ramp) + maximum(ramp)) / 2
c_cos = r_cos - midval #Shift by midval (different for each swept slope of "ramp")
</code></pre>
<h4><a id="user-content-observe-newly-constructed-c_cos-dataset" class="anchor" aria-hidden="true" href="#observe-newly-constructed-c_cos-dataset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Observe newly constructed <code>c_cos</code> dataset:</h4>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ma-laforge/FileRepo/blob/master/MDDatasets/demo1/samplemdcalc_4.png"><img src="https://github.com/ma-laforge/FileRepo/raw/master/MDDatasets/demo1/samplemdcalc_4.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-core-architecture" class="anchor" aria-hidden="true" href="#core-architecture"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Core Architecture</h2>
<h3><a id="user-content-functions-of-1-argument-dataf1--interpolation" class="anchor" aria-hidden="true" href="#functions-of-1-argument-dataf1--interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions Of 1 Argument (<code>DataF1</code>) &amp; Interpolation</h3>
<p>Type <code>DataF1</code> is used to represent <em>continuous</em> functions of 1 argument (<code>y = f(x)</code>).  <code>DataF1</code> stores samples of said functions in its <code>x</code> &amp; <code>y</code> vectors.</p>
<p>Operations performed on two <code>DataF1</code> objects will result in the interpolation of the corresponding <code>{x, y}</code> coordinates.  Furthermore, operations beyond the x-range of a <code>DataF1</code> object "extrapolate" to 0.</p>
<p>By grouping <code>x</code> &amp; <code>y</code> vectors together, <code>DataF1</code> objects can also lead to simpler/less error-prone interfaces:</p>
<pre><code>PlottingModule.plot(x, y, ...)
</code></pre>
<p>gets simplified to:</p>
<pre><code>PlottingModule.plot(data, ...)
</code></pre>
<p>NOTE: When dealing with complex algorithms, this simplification is rearkably quite significant.</p>
<h3><a id="user-content-multi-dimensional-datasets-datars--broadcasting" class="anchor" aria-hidden="true" href="#multi-dimensional-datasets-datars--broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multi-Dimensional Datasets (<code>DataRS</code>) &amp; Broadcasting</h3>
<p>In order to identify trends, or simply to verify the repeatability of a process, one often needs to perform the same operation on multiple "experiments".  This module provides the <code>DataRS</code> type to store/organize/access experiment data in a convenient fashion.</p>
<p>As a side-note, <code>DataRS</code> collects simpler data elements (like <code>DataF1</code> or simple scalar values) into a recursive data structure.  Each <code>DataRS</code> element is used to store the results on an "experiment" (or collection of experiments) where a control variable was varied (swept).  Due to the recursive nature of <code>DataRS</code>, each "sweep" can potentially represent a control variable that is <em>dependent</em> on a previous "sweep".</p>
<h4><a id="user-content-broadcast-features" class="anchor" aria-hidden="true" href="#broadcast-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Broadcast Features</h4>
<p>Operations performed on multi-dimensional data sets (<code>DataRS</code>) will automatically be broadcast to each element of the dataset (<a href="#KnownLimitations">see Known Limitations</a>).</p>
<p>Explicit looping over <code>DataRS</code> structures is therefore typically not required.  Many algorithms can be used unmodified, even after changing the set of experimental points.</p>
<p>By default, reducing functions (like <code>maximum</code>, <code>minimum</code>, or <code>mean(::Vector) =&gt; Scalar</code>) will operate on <code>DataRS</code> structures by collapsing the inner-most dimension:</p>
<pre><code>#Assuming sig -&gt; DataRS{sweeps={supply, temp, ctrlVoltage}} of DataF1{x=time}
freqVctrl = mean(measfreq(sig)) #DataRS{sweeps={supply, temp, ctrlVoltage}}
maxfVtemp = maximum(freqVctrl) #DataRS{sweeps={supply, temp}}
maxfVsupply = maximum(maxfVtemp) #DataRS{sweeps={supply}}
</code></pre>
<p>As can be inferred from above, the sweep from the inner-most dimension can be thought as the x-coordinate of the data.  That is because subsequent operations will be applied along that dimension.</p>
<p>TODO: Provide a means to re-order dimensions.</p>
<h2><a id="user-content-principal-types" class="anchor" aria-hidden="true" href="#principal-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Principal Types</h2>
<ul>
<li><strong><code>DataInt, DataFloat, DataComplex</code></strong>: Useful aliases for largest practical data types on a platform (not yet platform dependent).</li>
<li><strong><code>DataMD</code></strong>: Abastract data type for multi-dimensional data.</li>
<li><strong><code>DataF1</code></strong>: Represents a function of 1 variable, y(x) using a x/y vector pair.</li>
<li><strong><code>DataHR{DataF1/DataInt/DataFloat/DataComplex}</code></strong>: <em><strong>DO NOT USE</strong></em> A hyper-rectangular organizaton of data.  Principally designed to collect massive datasets with <em>independent</em> control variables (<a href="README_DataHR.md#SampleUsage_DataHR">see examples</a>).</li>
<li><strong><code>DataRS{DataF1/DataInt/DataFloat/DataComplex}</code></strong>: A recursive-sweep organization of data.  Principally designed to collect massive datasets with <em>dependent</em> control variables(<a href="#SampleUsage_DataRS">see examples</a>).</li>
<li><strong><code>PSweep</code></strong>: A parameter sweep (i.e. an independent control variable that generates experimental points in a <code>DataRS/DataHR</code> dataset).</li>
</ul>
<h3><a id="user-content-function-listing" class="anchor" aria-hidden="true" href="#function-listing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function Listing</h3>
<h4><a id="user-content-imported-from-base" class="anchor" aria-hidden="true" href="#imported-from-base"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Imported From <code>Base</code></h4>
<ul>
<li>
<p>Single-argument functions:</p>
<ul>
<li><code>zeros, ones, abs, abs2, angle,</code>
<br><code>imag, real, exponent,</code>
<br><code>exp, exp2, exp10, expm1,</code>
<br><code>log, log10, log1p, log2,</code>
<br><code>ceil, floor,</code>
<br><code>asin, asind, asinh, acos, acosd, acosh,</code>
<br><code>atan, atand, atanh, acot, acotd, acoth,</code>
<br><code>asec, asecd, asech, acsc, acscd, acsch,</code>
<br><code>sin, sind, sinh, cos, cosd, cosh,</code>
<br><code>tan, tand, tanh, cot, cotd, coth,</code>
<br><code>sec, secd, sech, csc, cscd, csch,</code>
<br><code>sinpi, cospi,</code>
<br><code>sinc, cosc,</code>
<br><code>deg2rad, rad2deg,</code></li>
</ul>
</li>
<li>
<p>Two-argument functions:</p>
<ul>
<li><code>+, -, *, /, ^,</code>
<br><code>max, min,</code>
<br><code>atan, hypot,</code>
<br><code>maximum, minimum,</code>
<br><code>prod, sum,</code>
<br><code>mean, median, middle,</code></li>
</ul>
</li>
</ul>
<h4><a id="user-content-differentialintegral-math" class="anchor" aria-hidden="true" href="#differentialintegral-math"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Differential/Integral Math</h4>
<ul>
<li><strong><code>deriv</code></strong><code>(d::DataF1, shiftx=[Bool])</code>: Returns dataset with derivative of <code>d</code></li>
<li><strong><code>integ</code></strong><code>(d::DataF1, shiftx=[Bool])</code>: Returns definite integral of <code>d</code></li>
<li><strong><code>iinteg</code></strong><code>(d::DataF1, shiftx=[Bool])</code>: Returns dataset with indefinite integral of <code>d</code></li>
</ul>
<h4><a id="user-content-basic-dataset-operations" class="anchor" aria-hidden="true" href="#basic-dataset-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Dataset Operations</h4>
<ul>
<li><strong><code>xval</code></strong><code>(::DataF1)</code>: Returns a dataset with where y(x) = x.</li>
<li><strong><code>value</code></strong><code>(y::DataF1, x=[Real])</code>: Returns <code>y(x)</code></li>
<li><strong><code>clip</code></strong><code>()</code>: Returns a dataset clipped within an x-range
<ul>
<li><code>clip(::DataF1, xrng::Range)</code></li>
<li><code>clip(::DataF1, xmin=[Real], xmax=[Real])</code></li>
</ul>
</li>
<li><strong><code>sample</code></strong><code>(::DataF1, xrng::Range)</code>: Returns dataset sampled @ each point in <code>xrng</code></li>
<li><strong><code>xshift</code></strong><code>(::DataF1, offset::Number)</code>: Returns dataset with all x-values shifted by <code>offset</code> (negative values "shift left")</li>
<li><strong><code>xscale</code></strong><code>(::DataF1, fact::Number)</code>: Returns dataset with all x-values scaled by <code>fact</code></li>
<li><strong><code>yvsx</code></strong><code>(yv::DataF1, xv::DataF1)</code>: Returns dataset with <code>{xv(x), yv(x)}</code> (interpolating, when necessary)</li>
</ul>
<h4><a id="user-content-cross-based-operations" class="anchor" aria-hidden="true" href="#cross-based-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cross-Based Operations</h4>
<p>Note: The <code>Event</code> object makes functions return x-vectors that represent the current event number.</p>
<ul>
<li><strong><code>xcross</code></strong><code>()</code>: Returns x-values of <code>d1</code> (up-to <code>nmax</code>) when <code>d1</code> crosses 0 (<code>nmax</code>=0: get all crossings):
<ul>
<li><code>xcross([Event,] d1::DataF1, [nmax::Int,] xstart=[Real], allow=[CrossType])</code></li>
</ul>
</li>
<li><strong><code>ycross</code></strong><code>()</code>: Returns y-values of <code>d2</code> (up-to <code>nmax</code>) when <code>d1</code> crosses <code>d2</code> (<code>nmax</code>=0: get all crossings):
<ul>
<li><code>ycross([Event,] d1::DataF1, d2::DataF1, [nmax::Int,] xstart=[Real], allow=[CrossType])</code></li>
</ul>
</li>
<li><strong><code>xcross1</code></strong><code>()</code>: Returns scalar x-value of <code>d1</code> on <code>n</code>-th zero-crossing:
<ul>
<li><code>xcross1([Event,] d1::DataF1, n=[Int], xstart=[Real], allow=[CrossType])</code></li>
</ul>
</li>
<li><strong><code>ycross1</code></strong><code>()</code>: Returns scalar y-value of <code>d1</code> on <code>n</code>-th crossing of <code>d1</code> &amp; <code>d2</code>:
<ul>
<li><code>ycross1([Event,] d1::DataF1, n=[Int], xstart=[Real], allow=[CrossType])</code></li>
</ul>
</li>
</ul>
<h5><a id="user-content-operations-on-clock-signals" class="anchor" aria-hidden="true" href="#operations-on-clock-signals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations On Clock Signals</h5>
<ul>
<li><strong><code>measperiod</code></strong><code>(d::DataF1, nmax=[Int], tstart=[Real], xing=[CrossType], shiftx=[Bool])</code></li>
<li><strong><code>measfreq</code></strong><code>(d::DataF1, nmax=[Int], tstart=[Real], xing=[CrossType], shiftx=[Bool])</code></li>
</ul>
<h5><a id="user-content-operations-on-binary-signals" class="anchor" aria-hidden="true" href="#operations-on-binary-signals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations On Binary Signals</h5>
<ul>
<li><strong><code>measdelay</code></strong><code>(dref::DataF1, dmain::DataF1, nmax=[Int], tstart_ref=[Real], tstart_main=[Real], xing_ref=[CrossType], xing_main=[CrossType])</code></li>
<li><strong><code>measck2q</code></strong><code>(ck::DataF1, q::DataF1, delaymin=[Real], tstart_ck=[Real], tstart_q=[Real], xing_ck=[CrossType], xing_q=[CrossType])</code></li>
</ul>
<h5><a id="user-content-the-crosstype-object" class="anchor" aria-hidden="true" href="#the-crosstype-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>CrossType</code> Object</h5>
<p>The <code>CrossType</code> object is used to filter out undersired events.</p>
<ul>
<li><code>sing</code>: Include singularities (points that cross at a single point).</li>
<li><code>flat</code>: Include middle of crossings that are detected at multiple consecutive points.</li>
<li><code>thru</code>: Include crossings make it all the way through the crossing point.</li>
<li><code>rev</code>: Include crossings that hit the crossing point, then reverse back.</li>
<li><code>firstlast</code>: Include first/last crossing points (when data starts or ends @ crossing point itself).</li>
</ul>
<p>Constructors:</p>
<ul>
<li><strong><code>CrossType</code></strong>: Indicates which crossings are allowed in the result.
<ul>
<li><code>CrossType(rise=[Bool], fall=[Bool], sing=[Bool], flat=[Bool], thru=[Bool], rev=[Bool], firstlast=[Bool])</code></li>
<li><code>CrossType(:rise)</code>: Preset to selecting rising edges</li>
<li><code>CrossType(:fall)</code>: Preset to selecting falling edges</li>
<li><code>CrossType(:risefall)</code>: Preset to selecting both rising &amp; falling edges</li>
</ul>
</li>
</ul>
<p><a name="user-content-sampleusage"></a></p>
<h2><a id="user-content-sample-usage" class="anchor" aria-hidden="true" href="#sample-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample Usage</h2>
<p>Examples of the MDDatasets.jl capabilities can be found under the <a href="test/">test directory</a>.</p>
<p>More advanced usage examples can be found in the <a href="https://github.com/ma-laforge/SignalProcessing.jl/tree/master/sample">sample directory</a> of the <a href="https://github.com/ma-laforge/SignalProcessing.jl">SignalProcessing.jl module</a>.</p>
<p><a name="user-content-sampleusage_datars"></a></p>
<h2><a id="user-content-usage-constructing-a-recursive-sweep-dataset" class="anchor" aria-hidden="true" href="#usage-constructing-a-recursive-sweep-dataset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage: Constructing A Recursive-Sweep Dataset</h2>
<p>Assuming input data can be generated using the following:</p>
<pre><code>t = DataF1((0:.01:10)*1e-9) #Time vector stored as a function of 1 argument

#NOTE: get_ydata returns type "DataF1" (stores data as a function of 1 argument):
get_ydata(t::DataF1, tbit, vdd, trise) = sin(2pi*t/tbit)*(trise/tbit)+vdd
</code></pre>
<p>One can create a relatively complex Recursive-Sweep (DataRS) dataset using the following pattern:</p>
<pre><code>datars = fill(DataRS, PSweep("tbit", [1, 3, 9] * 1e-9)) do tbit
	fill(DataRS, PSweep("VDD", 0.9 * [0.9, 1, 1.1])) do vdd

		#Inner-most sweep: need to specify element type (DataF1):
		#(Other (scalar) element types: DataInt/DataFloat/DataComplex)
		fill(DataRS{DataF1}, PSweep("trise", [0.1, 0.15, 0.2] * tbit)) do trise
			return get_ydata(t, tbit, vdd, trise)
		end
	end
end
</code></pre>
<p><a name="user-content-knownlimitations"></a></p>
<h2><a id="user-content-known-limitations" class="anchor" aria-hidden="true" href="#known-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known Limitations</h2>
<h3><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h3>
<ol>
<li>Support for broadcasting functions over <code>DataHR</code> &amp; <code>DataRS</code> types is fairly extensive.
<ul>
<li>Nonetheless, the system is incomplete/imperfect, and unexpected failures will occur.</li>
</ul>
</li>
</ol>
<h3><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility</h3>
<p>Extensive compatibility testing of MDDatasets.jl has not been performed.  The module has been tested using the following environment(s):</p>
<ul>
<li>Linux / Julia-1.1.1 (64-bit)</li>
</ul>
<h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disclaimer</h2>
<p>The MDDatasets.jl module is not yet mature.  Expect significant changes.</p>
</article></div>