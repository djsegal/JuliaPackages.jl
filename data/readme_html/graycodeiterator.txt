<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graycodeiteratorjl" class="anchor" aria-hidden="true" href="#graycodeiteratorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GrayCodeIterator.jl</h1>
<p dir="auto"><a href="https://github.com/benide/GrayCodeIterator.jl/actions/workflows/Test.yml?query=branch%3Amaster"><img src="https://github.com/benide/GrayCodeIterator.jl/actions/workflows/Test.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/benide/GrayCodeIterator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a4faa075181b6ba737708283ed3974797bb9d06a63b72abfc072106df52c0ae/68747470733a2f2f636f6465636f762e696f2f67682f62656e6964652f47726179436f64654974657261746f722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/benide/GrayCodeIterator.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">GrayCodeIterator.jl provides an iterator for all binary vectors of length <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="24050f137215196042163a98ac37fe09">$n$</math-renderer> and weight <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="24050f137215196042163a98ac37fe09">$k$</math-renderer>, optionally with a supplied prefix.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for v in GrayCode(4,2)
           println(v)
       end
[0, 0, 1, 1]
[0, 1, 1, 0]
[0, 1, 0, 1]
[1, 1, 0, 0]
[1, 0, 1, 0]
[1, 0, 0, 1]

julia&gt; for v in GrayCode(4,2,[1,0])
           println(v)
       end
[1, 0, 0, 1]
[1, 0, 1, 0]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; for v in GrayCode(4,2)
           println(v)
       end
[0, 0, 1, 1]
[0, 1, 1, 0]
[0, 1, 0, 1]
[1, 1, 0, 0]
[1, 0, 1, 0]
[1, 0, 0, 1]

julia&gt; for v in GrayCode(4,2,[1,0])
           println(v)
       end
[1, 0, 0, 1]
[1, 0, 1, 0]
</code></pre></div>
<p dir="auto">The vector can be modified in-place to save allocations:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools

julia&gt; @btime sum(maximum(v) for v in GrayCode(23,13))
  54.801 ms (1144073 allocations: 261.86 MiB)
1144066

julia&gt; @btime sum(maximum(v) for v in GrayCode(23,13,mutate=true))
  15.782 ms (7 allocations: 1.12 KiB)
1144066"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using BenchmarkTools

julia&gt; @btime sum(maximum(v) for v in GrayCode(23,13))
  54.801 ms (1144073 allocations: 261.86 MiB)
1144066

julia&gt; @btime sum(maximum(v) for v in GrayCode(23,13,mutate=true))
  15.782 ms (7 allocations: 1.12 KiB)
1144066
</code></pre></div>
<p dir="auto">Note that this only saves allocations for Julia 1.8+.</p>
<h1 dir="auto">
<a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">The algorithm is based on the following paper:</p>
<p dir="auto">Bitner, J. R., Ehrlich, G., &amp; Reingold, E. M. (1976). Efficient generation of the binary reflected Gray code and its applications. <em>Communications of the ACM, 19</em>(9), 517-521.</p>
</article></div>