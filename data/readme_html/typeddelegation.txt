<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-typeddelegationjl" class="anchor" aria-hidden="true" href="#typeddelegationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TypedDelegation.jl</h2>
<h3><a id="user-content-easily-apply-functions-onto-fields" class="anchor" aria-hidden="true" href="#easily-apply-functions-onto-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Easily apply functions onto fields.</h3>
<h4><a id="user-content-use-a-structs-fields-as-operands-for-operations-on-values-of-that-type" class="anchor" aria-hidden="true" href="#use-a-structs-fields-as-operands-for-operations-on-values-of-that-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use a struct's fields as operands for operations on values of that type.</h4>
<h5><a id="user-content-copyright--2016-2019-by-jeffrey-sarnoff--released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2016-2019-by-jeffrey-sarnoff--released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright Â© 2016-2019 by Jeffrey Sarnoff.  Released under the MIT License.</h5>
<hr>
<h1><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://travis-ci.com/JeffreySarnoff/TypedDelegation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/538fbbcf773eaa48047cf8d610fa3edbf1cebb787db018855591b01515022c36/68747470733a2f2f7472617669732d63692e636f6d2f4a6566667265795361726e6f66662f547970656444656c65676174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JeffreySarnoff/TypedDelegation.jl.svg?branch=master" style="max-width:100%;"></a></h1>
<h3><a id="user-content-offers" class="anchor" aria-hidden="true" href="#offers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Offers</h3>
<ul>
<li>Delegation macros, designed for easy use.</li>
<li>Apply functions over a Type's field's values.</li>
<li>Use fields as operands with type consistent operators.</li>
</ul>
<h3><a id="user-content-exports" class="anchor" aria-hidden="true" href="#exports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exports</h3>
<p>This package offers macros that delegate functions over one or more fields of a type;<br>
and macros that delegate operations through fields to return a value of the same type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="#     apply functions through a given Type T, using one field as a parameter

#           evaluates as the type that the function `fn` returns
@delegate_onefield                    #  fn(x::T)
@delegate_onefield_twovars            #  fn(x::T, y::T)
@delegate_onefield_threevars          #  fn(x::T, y::T, x::T)

#           evaluates as the type that is used in delegation
@delegate_onefield_astype             #  op(x::T)::T
@delegate_onefield_twovars_astype     #  op(x::T, y::T)::T
@delegate_onefield_threevars_astype   #  op(x::T, y::T, x::T)::T

#     apply functions through a given Type, using two fields as parameters

#           evaluates as the type that the function `fn` returns
@delegate_twofields                   #  fn(x::T)
@delegate_twofields_twovars           #  fn(x::T, y::T)

#           evaluates as the type that is used in delegation
@delegate_twofields_astype            #  op(x::T)::T
@delegate_twofields_twovars_astype    #  op(x::T, y::T)::T

#     apply functions through a given Type, using three fields as parameters

#           evaluates as the type that the function `fn` returns
@delegate_threefields                 #  fn(x::T)
@delegate_threefields_twovars         #  fn(x::T, y::T)

#           evaluates as the type that is used in delegation
@delegate_threefields_astype          #  op(x::T)::T
@delegate_threefields_twovars_astype  #  op(x::T, y::T)::T
"><pre><span class="pl-c"><span class="pl-c">#</span>     apply functions through a given Type T, using one field as a parameter</span>

<span class="pl-c"><span class="pl-c">#</span>           evaluates as the type that the function `fn` returns</span>
<span class="pl-c1">@delegate_onefield</span>                    <span class="pl-c"><span class="pl-c">#</span>  fn(x::T)</span>
<span class="pl-c1">@delegate_onefield_twovars</span>            <span class="pl-c"><span class="pl-c">#</span>  fn(x::T, y::T)</span>
<span class="pl-c1">@delegate_onefield_threevars</span>          <span class="pl-c"><span class="pl-c">#</span>  fn(x::T, y::T, x::T)</span>

<span class="pl-c"><span class="pl-c">#</span>           evaluates as the type that is used in delegation</span>
<span class="pl-c1">@delegate_onefield_astype</span>             <span class="pl-c"><span class="pl-c">#</span>  op(x::T)::T</span>
<span class="pl-c1">@delegate_onefield_twovars_astype</span>     <span class="pl-c"><span class="pl-c">#</span>  op(x::T, y::T)::T</span>
<span class="pl-c1">@delegate_onefield_threevars_astype</span>   <span class="pl-c"><span class="pl-c">#</span>  op(x::T, y::T, x::T)::T</span>

<span class="pl-c"><span class="pl-c">#</span>     apply functions through a given Type, using two fields as parameters</span>

<span class="pl-c"><span class="pl-c">#</span>           evaluates as the type that the function `fn` returns</span>
<span class="pl-c1">@delegate_twofields</span>                   <span class="pl-c"><span class="pl-c">#</span>  fn(x::T)</span>
<span class="pl-c1">@delegate_twofields_twovars</span>           <span class="pl-c"><span class="pl-c">#</span>  fn(x::T, y::T)</span>

<span class="pl-c"><span class="pl-c">#</span>           evaluates as the type that is used in delegation</span>
<span class="pl-c1">@delegate_twofields_astype</span>            <span class="pl-c"><span class="pl-c">#</span>  op(x::T)::T</span>
<span class="pl-c1">@delegate_twofields_twovars_astype</span>    <span class="pl-c"><span class="pl-c">#</span>  op(x::T, y::T)::T</span>

<span class="pl-c"><span class="pl-c">#</span>     apply functions through a given Type, using three fields as parameters</span>

<span class="pl-c"><span class="pl-c">#</span>           evaluates as the type that the function `fn` returns</span>
<span class="pl-c1">@delegate_threefields</span>                 <span class="pl-c"><span class="pl-c">#</span>  fn(x::T)</span>
<span class="pl-c1">@delegate_threefields_twovars</span>         <span class="pl-c"><span class="pl-c">#</span>  fn(x::T, y::T)</span>

<span class="pl-c"><span class="pl-c">#</span>           evaluates as the type that is used in delegation</span>
<span class="pl-c1">@delegate_threefields_astype</span>          <span class="pl-c"><span class="pl-c">#</span>  op(x::T)::T</span>
<span class="pl-c1">@delegate_threefields_twovars_astype</span>  <span class="pl-c"><span class="pl-c">#</span>  op(x::T, y::T)::T</span></pre></div>
<p>====================</p>
<h3><a id="user-content-install-and-use" class="anchor" aria-hidden="true" href="#install-and-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install and Use</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;TypedDelegation&quot;)
using TypedDelegation   
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TypedDelegation<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> TypedDelegation   </pre></div>
<h3><a id="user-content-examples-of-use" class="anchor" aria-hidden="true" href="#examples-of-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples of Use</h3>
<h4><a id="user-content-delegation-with-one-field" class="anchor" aria-hidden="true" href="#delegation-with-one-field"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Delegation with one field</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_onefield(sourceType, sourcefield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.

    import Base: string, show

    struct MyInt16
      value::Int16
    end

    @delegate_onefield( MyInt16, value, [string, show]);

    three = MyInt16(3);
    seven = MyInt16(7);

    string(three) == &quot;3&quot;           # true
    show(seven)                    # 7
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_onefield(sourceType, sourcefield, targetedFuncs)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of same types as the `targetedFuncs` result types.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> string, show

    <span class="pl-k">struct</span> MyInt16
      value<span class="pl-k">::</span><span class="pl-c1">Int16</span>
    <span class="pl-k">end</span>

    <span class="pl-c1">@delegate_onefield</span>( MyInt16, value, [string, show]);

    three <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">3</span>);
    seven <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">7</span>);

    <span class="pl-c1">string</span>(three) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>           <span class="pl-c"><span class="pl-c">#</span> true</span>
    <span class="pl-c1">show</span>(seven)                    <span class="pl-c"><span class="pl-c">#</span> 7</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_onefield_twovars(sourceType, sourcefield, targetedOps)
# This returns a value of same types as the `targetedOps` result types.
#
# A macro for field delegation over a function{T&lt;:TheType}(arg1::T, arg2::T)

    import Base: (&lt;), (&lt;=)

    struct MyInt16  
      value::Int16  
    end

    @delegate_onefield_twovars( MyInt16, value, [ (&lt;), (&lt;=) ] );

    three = MyInt16(3);
    seven = MyInt16(7);

    three &lt;  seven                 # true
    seven &lt;= three                 # false
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_onefield_twovars(sourceType, sourcefield, targetedOps)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of same types as the `targetedOps` result types.</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c"><span class="pl-c">#</span> A macro for field delegation over a function{T&lt;:TheType}(arg1::T, arg2::T)</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> (<span class="pl-k">&lt;</span>), (<span class="pl-k">&lt;=</span>)

    <span class="pl-k">struct</span> MyInt16  
      value<span class="pl-k">::</span><span class="pl-c1">Int16</span>  
    <span class="pl-k">end</span>

    <span class="pl-c1">@delegate_onefield_twovars</span>( MyInt16, value, [ (<span class="pl-k">&lt;</span>), (<span class="pl-k">&lt;=</span>) ] );

    three <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">3</span>);
    seven <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">7</span>);

    three <span class="pl-k">&lt;</span>  seven                 <span class="pl-c"><span class="pl-c">#</span> true</span>
    seven <span class="pl-k">&lt;=</span> three                 <span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_onefield_astype(sourceType, sourcefield, targetedFuncs)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    import Base: abs, (-)

    struct MyInt16
      value::Int16
    end

    @delegate_onefield_astype( MyInt16, value, [abs, (-)]);

    three = MyInt16(3);
    seven = MyInt16(7);

    abs(three) == three            # true
    -(seven) === MyInt16(-7)       # true
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_onefield_astype(sourceType, sourcefield, targetedFuncs)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of the same type as the `sourceType` by rewrapping the result.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> abs, (<span class="pl-k">-</span>)

    <span class="pl-k">struct</span> MyInt16
      value<span class="pl-k">::</span><span class="pl-c1">Int16</span>
    <span class="pl-k">end</span>

    <span class="pl-c1">@delegate_onefield_astype</span>( MyInt16, value, [abs, (<span class="pl-k">-</span>)]);

    three <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">3</span>);
    seven <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">7</span>);

    <span class="pl-c1">abs</span>(three) <span class="pl-k">==</span> three            <span class="pl-c"><span class="pl-c">#</span> true</span>
    <span class="pl-k">-</span>(seven) <span class="pl-k">===</span> <span class="pl-c1">MyInt16</span>(<span class="pl-k">-</span><span class="pl-c1">7</span>)       <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_onefield_twovars_astype(sourceType, sourcefield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    import Base: (+), (-), (*)

    struct MyInt16
      value::Int16
    end

    @delegate_onefield_twovars_astype( MyInt16, value, [ (+), (*) ] );

    three = MyInt16(3);
    seven = MyInt16(7);

    three + seven == MyInt16(3+7)  # true
    three * seven == MyInt16(3*7)  # true```
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_onefield_twovars_astype(sourceType, sourcefield, targetedOps)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of the same type as the `sourceType` by rewrapping the result.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> (<span class="pl-k">+</span>), (<span class="pl-k">-</span>), (<span class="pl-k">*</span>)

    <span class="pl-k">struct</span> MyInt16
      value<span class="pl-k">::</span><span class="pl-c1">Int16</span>
    <span class="pl-k">end</span>

    <span class="pl-c1">@delegate_onefield_twovars_astype</span>( MyInt16, value, [ (<span class="pl-k">+</span>), (<span class="pl-k">*</span>) ] );

    three <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">3</span>);
    seven <span class="pl-k">=</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">7</span>);

    three <span class="pl-k">+</span> seven <span class="pl-k">==</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">7</span>)  <span class="pl-c"><span class="pl-c">#</span> true</span>
    three <span class="pl-k">*</span> seven <span class="pl-k">==</span> <span class="pl-c1">MyInt16</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">7</span>)  <span class="pl-c"><span class="pl-c">#</span> true```</span></pre></div>
<h4><a id="user-content-delegation-with-two-fields" class="anchor" aria-hidden="true" href="#delegation-with-two-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Delegation with two fields</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# @delegate_twofields(sourceType, firstfield, secondfield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.

    import Base: hypot
    
    immutable RightTriangle
      legA::Float64;
      legB::Float64;  
    end;

    @delegate_twofields( RightTriangle, legA, legB, [ hypot, ] );
  
    myRightTriangle  = RightTriangle( 3.0, 4.0 );
    hypot(myRightTriangle)   #  5.0
"><pre><code># @delegate_twofields(sourceType, firstfield, secondfield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.

    import Base: hypot
    
    immutable RightTriangle
      legA::Float64;
      legB::Float64;  
    end;

    @delegate_twofields( RightTriangle, legA, legB, [ hypot, ] );
  
    myRightTriangle  = RightTriangle( 3.0, 4.0 );
    hypot(myRightTriangle)   #  5.0
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# @@delegate_twofields_astype(sourceType, firstfield, secondfield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    function renormalize(a::Float64, b::Float64)
      hi = a + b
      t = hi - a
      lo = (a - (hi - t)) + (b - t)
      return hi, lo
    end

    immutable HiLo  
      hi::Float64;
      lo::Float64;   
    end;
    
    @delegate_twofields_astype( HiLo, hi, lo, [ renormalize, ] );

    myHiLo = renormalize( HiLo(12.555555555, 8000.333333333) ); 
    showall(myHiLo)     # HiLo(8012.888888888,4.440892098500626e-14)
"><pre><code># @@delegate_twofields_astype(sourceType, firstfield, secondfield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    function renormalize(a::Float64, b::Float64)
      hi = a + b
      t = hi - a
      lo = (a - (hi - t)) + (b - t)
      return hi, lo
    end

    immutable HiLo  
      hi::Float64;
      lo::Float64;   
    end;
    
    @delegate_twofields_astype( HiLo, hi, lo, [ renormalize, ] );

    myHiLo = renormalize( HiLo(12.555555555, 8000.333333333) ); 
    showall(myHiLo)     # HiLo(8012.888888888,4.440892098500626e-14)
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_twofields_twovars(sourceType, firstfield, secondfield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.

    import Base: mean

    mutable struct MyInterval
      lo::Float64
      hi::Float64
    
      function MyInterval(lo::Float64, hi::Float64)
         mn, mx = ifelse( hi&lt;lo, (hi, lo), (lo, hi) )
         new( mn, mx )
      end   
    end;

    MyInterval(lo::T, hi::T) where {T&lt;:AbstractFloat} =
        MyInterval( Float64(lo), Float64(hi) )

    @delegate_twofields_twovars( MyInterval, lo, hi, [ mean, ])

    function mean( x::MyInterval )
        return x.lo * 0.5 + x.hi * 0.5
    end
    function mean( a::T, b::T ) where T&lt;:MyInterval
        return mean( a ) * 0.5 + mean( b ) * 0.5
    end

    one_three = MyInterval(1, 3);
    two_four  = MyInterval(2, 4);

    mean( one_three, two_four ) == 2.5 # true
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_twofields_twovars(sourceType, firstfield, secondfield, targetedFuncs)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of same types as the `targetedFuncs` result types.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> mean

    <span class="pl-k">mutable struct</span> MyInterval
      lo<span class="pl-k">::</span><span class="pl-c1">Float64</span>
      hi<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    
      <span class="pl-k">function</span> <span class="pl-en">MyInterval</span>(lo<span class="pl-k">::</span><span class="pl-c1">Float64</span>, hi<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
         mn, mx <span class="pl-k">=</span> <span class="pl-c1">ifelse</span>( hi<span class="pl-k">&lt;</span>lo, (hi, lo), (lo, hi) )
         <span class="pl-c1">new</span>( mn, mx )
      <span class="pl-k">end</span>   
    <span class="pl-k">end</span>;

    <span class="pl-en">MyInterval</span>(lo<span class="pl-k">::</span><span class="pl-c1">T</span>, hi<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span>} <span class="pl-k">=</span>
        <span class="pl-c1">MyInterval</span>( <span class="pl-c1">Float64</span>(lo), <span class="pl-c1">Float64</span>(hi) )

    <span class="pl-c1">@delegate_twofields_twovars</span>( MyInterval, lo, hi, [ mean, ])

    <span class="pl-k">function</span> <span class="pl-en">mean</span>( x<span class="pl-k">::</span><span class="pl-c1">MyInterval</span> )
        <span class="pl-k">return</span> x<span class="pl-k">.</span>lo <span class="pl-k">*</span> <span class="pl-c1">0.5</span> <span class="pl-k">+</span> x<span class="pl-k">.</span>hi <span class="pl-k">*</span> <span class="pl-c1">0.5</span>
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">mean</span>( a<span class="pl-k">::</span><span class="pl-c1">T</span>, b<span class="pl-k">::</span><span class="pl-c1">T</span> ) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">MyInterval</span>
        <span class="pl-k">return</span> <span class="pl-c1">mean</span>( a ) <span class="pl-k">*</span> <span class="pl-c1">0.5</span> <span class="pl-k">+</span> <span class="pl-c1">mean</span>( b ) <span class="pl-k">*</span> <span class="pl-c1">0.5</span>
    <span class="pl-k">end</span>

    one_three <span class="pl-k">=</span> <span class="pl-c1">MyInterval</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>);
    two_four  <span class="pl-k">=</span> <span class="pl-c1">MyInterval</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>);

    <span class="pl-c1">mean</span>( one_three, two_four ) <span class="pl-k">==</span> <span class="pl-c1">2.5</span> <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_twofields_twovars_astype(sourceType, firstfield, secondfield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    import Base: union, intersect

    mutable struct MyInterval
      lo::Float64
      hi::Float64
    
      function MyInterval(lo::Float64, hi::Float64)
         mn, mx = ifelse( hi&lt;lo, (hi, lo), (lo, hi) )
         new( mn, mx )
      end   
    end;

    MyInterval(lo::T, hi::T) where {T&lt;:AbstractFloat} =
        MyInterval( Float64(lo), Float64(hi) )

    @delegate_twofields_twovars_astype( MyInterval, lo, hi, [ union, ])

    function union( a::T, b::T ) where T&lt;:MyInterval
        lo = min( a.lo, b.lo )
        hi = max( a.hi, b.hi )
        return T( lo, hi )
    end

    one_three = MyInterval(1, 3);
    two_four  = MyInterval(2, 4);

    union( one_three, two_four ) == MyInterval(1, 4) # true
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_twofields_twovars_astype(sourceType, firstfield, secondfield, targetedOps)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of the same type as the `sourceType` by rewrapping the result.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> union, intersect

    <span class="pl-k">mutable struct</span> MyInterval
      lo<span class="pl-k">::</span><span class="pl-c1">Float64</span>
      hi<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    
      <span class="pl-k">function</span> <span class="pl-en">MyInterval</span>(lo<span class="pl-k">::</span><span class="pl-c1">Float64</span>, hi<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
         mn, mx <span class="pl-k">=</span> <span class="pl-c1">ifelse</span>( hi<span class="pl-k">&lt;</span>lo, (hi, lo), (lo, hi) )
         <span class="pl-c1">new</span>( mn, mx )
      <span class="pl-k">end</span>   
    <span class="pl-k">end</span>;

    <span class="pl-en">MyInterval</span>(lo<span class="pl-k">::</span><span class="pl-c1">T</span>, hi<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span>} <span class="pl-k">=</span>
        <span class="pl-c1">MyInterval</span>( <span class="pl-c1">Float64</span>(lo), <span class="pl-c1">Float64</span>(hi) )

    <span class="pl-c1">@delegate_twofields_twovars_astype</span>( MyInterval, lo, hi, [ union, ])

    <span class="pl-k">function</span> <span class="pl-en">union</span>( a<span class="pl-k">::</span><span class="pl-c1">T</span>, b<span class="pl-k">::</span><span class="pl-c1">T</span> ) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">MyInterval</span>
        lo <span class="pl-k">=</span> <span class="pl-c1">min</span>( a<span class="pl-k">.</span>lo, b<span class="pl-k">.</span>lo )
        hi <span class="pl-k">=</span> <span class="pl-c1">max</span>( a<span class="pl-k">.</span>hi, b<span class="pl-k">.</span>hi )
        <span class="pl-k">return</span> <span class="pl-c1">T</span>( lo, hi )
    <span class="pl-k">end</span>

    one_three <span class="pl-k">=</span> <span class="pl-c1">MyInterval</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>);
    two_four  <span class="pl-k">=</span> <span class="pl-c1">MyInterval</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>);

    <span class="pl-c1">union</span>( one_three, two_four ) <span class="pl-k">==</span> <span class="pl-c1">MyInterval</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h4><a id="user-content-delegation-with-three-fields" class="anchor" aria-hidden="true" href="#delegation-with-three-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Delegation with three fields</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# @delegate_threefields(sourceType, firstfield, secondfield, thirdfield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.


    import Base: norm 
    
    norm{R&lt;:Real}(xs::Vararg{R,3}) = norm([xs...])
    
    immutable XYZ
      x::Float64
      y::Float64
      z::Float64
    end;
    
    @delegate_threefields( XYZ, x, y, z, [ norm, ] );
  
    pointA  = XYZ( 3.0, 4.0, 5.0 );
    
    norm(pointA)   #  7.0710678+
"><pre><code># @delegate_threefields(sourceType, firstfield, secondfield, thirdfield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.


    import Base: norm 
    
    norm{R&lt;:Real}(xs::Vararg{R,3}) = norm([xs...])
    
    immutable XYZ
      x::Float64
      y::Float64
      z::Float64
    end;
    
    @delegate_threefields( XYZ, x, y, z, [ norm, ] );
  
    pointA  = XYZ( 3.0, 4.0, 5.0 );
    
    norm(pointA)   #  7.0710678+
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# @@delegate_threefields_astype(sourceType, firstfield, secondfield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    import Base: normalize
    
    normalize{R&lt;:Real}(xs::Vararg{R,3}) = normalize([xs...])
    
    immutable XYZ
      x::Float64
      y::Float64
      z::Float64
    end;
    
    @delegate_threefields_astype( XYZ, x, y, z, [ normalize, ] );
    
    pointA  = XYZ( 3.0, 4.0, 5.0 );
    
    normalize(pointA)   #  XYZ( 0.424264+, 0.565685+, 0.707107- )
"><pre><code># @@delegate_threefields_astype(sourceType, firstfield, secondfield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    import Base: normalize
    
    normalize{R&lt;:Real}(xs::Vararg{R,3}) = normalize([xs...])
    
    immutable XYZ
      x::Float64
      y::Float64
      z::Float64
    end;
    
    @delegate_threefields_astype( XYZ, x, y, z, [ normalize, ] );
    
    pointA  = XYZ( 3.0, 4.0, 5.0 );
    
    normalize(pointA)   #  XYZ( 0.424264+, 0.565685+, 0.707107- )
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_threefields_twovars(sourceType, firstfield, secondfield, thirdfield, targetedFuncs)
# This returns a value of same types as the `targetedFuncs` result types.

    import Base: norm, normalize, cross, sin
    
    normalize(xs::Vararg{R,3}) where {R&lt;:Real} = normalize([xs...])
    cross(xs::Vararg{R,6}) where {R&lt;:Real} = cross([xs[1:3]...], [xs[4:6]...])
    
    struct XYZ
      x::Float64
      y::Float64
      z::Float64
    end;
    
    @delegate_threefields_astype( XYZ, x, y, z, [ normalize, ] );
    @delegate_threefields_twovars( XYZ, x, y, z, [ cross, ] );
    
    function sin( pointA::XYZ, pointB::XYZ )
        norm( cross( normalize(pointA), normalize(pointB) ) )
    end
    
    pointA  = XYZ( 3.0, 4.0, 5.0 );
    pointB  = XYZ( 5.0, 4.0, 3.0 );
    
    sin(pointA, pointB) #  0.391918+
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_threefields_twovars(sourceType, firstfield, secondfield, thirdfield, targetedFuncs)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of same types as the `targetedFuncs` result types.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> norm, normalize, cross, sin
    
    <span class="pl-en">normalize</span>(xs<span class="pl-k">::</span><span class="pl-c1">Vararg{R,3}</span>) <span class="pl-k">where</span> {R<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>} <span class="pl-k">=</span> <span class="pl-c1">normalize</span>([xs<span class="pl-k">...</span>])
    <span class="pl-en">cross</span>(xs<span class="pl-k">::</span><span class="pl-c1">Vararg{R,6}</span>) <span class="pl-k">where</span> {R<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>} <span class="pl-k">=</span> <span class="pl-c1">cross</span>([xs[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]<span class="pl-k">.</span><span class="pl-k">..</span>], [xs[<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">6</span>]<span class="pl-k">.</span><span class="pl-k">..</span>])
    
    <span class="pl-k">struct</span> XYZ
      x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
      y<span class="pl-k">::</span><span class="pl-c1">Float64</span>
      z<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    <span class="pl-k">end</span>;
    
    <span class="pl-c1">@delegate_threefields_astype</span>( XYZ, x, y, z, [ normalize, ] );
    <span class="pl-c1">@delegate_threefields_twovars</span>( XYZ, x, y, z, [ cross, ] );
    
    <span class="pl-k">function</span> <span class="pl-en">sin</span>( pointA<span class="pl-k">::</span><span class="pl-c1">XYZ</span>, pointB<span class="pl-k">::</span><span class="pl-c1">XYZ</span> )
        <span class="pl-c1">norm</span>( <span class="pl-c1">cross</span>( <span class="pl-c1">normalize</span>(pointA), <span class="pl-c1">normalize</span>(pointB) ) )
    <span class="pl-k">end</span>
    
    pointA  <span class="pl-k">=</span> <span class="pl-c1">XYZ</span>( <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span> );
    pointB  <span class="pl-k">=</span> <span class="pl-c1">XYZ</span>( <span class="pl-c1">5.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">3.0</span> );
    
    <span class="pl-c1">sin</span>(pointA, pointB) <span class="pl-c"><span class="pl-c">#</span>  0.391918+</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# @delegate_threefields_twovars_astype(sourceType, firstfield, secondfield, thirdfield, targetedOps)
# This returns a value of the same type as the `sourceType` by rewrapping the result.

    import Base: cross
    
    cross(xs::Vararg{R,6}) where {R&lt;:Real} = cross([xs[1:3]...], [xs[4:6]...])
    
    struct XYZ
      x::Float64
      y::Float64
      z::Float64
    end;
    
    @delegate_threefields_twovars_astype( XYZ, x, y, z, [ cross, ] );
    
    pointA  = XYZ( 3.0, 4.0, 5.0 );
    pointB  = XYZ( 5.0, 4.0, 3.0 );
    
    cross(pointA, pointB) #  XYZ(-8.0, 16.0, -8.0)
"><pre><span class="pl-c"><span class="pl-c">#</span> @delegate_threefields_twovars_astype(sourceType, firstfield, secondfield, thirdfield, targetedOps)</span>
<span class="pl-c"><span class="pl-c">#</span> This returns a value of the same type as the `sourceType` by rewrapping the result.</span>

    <span class="pl-k">import</span> Base<span class="pl-k">:</span> cross
    
    <span class="pl-en">cross</span>(xs<span class="pl-k">::</span><span class="pl-c1">Vararg{R,6}</span>) <span class="pl-k">where</span> {R<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>} <span class="pl-k">=</span> <span class="pl-c1">cross</span>([xs[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]<span class="pl-k">.</span><span class="pl-k">..</span>], [xs[<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">6</span>]<span class="pl-k">.</span><span class="pl-k">..</span>])
    
    <span class="pl-k">struct</span> XYZ
      x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
      y<span class="pl-k">::</span><span class="pl-c1">Float64</span>
      z<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    <span class="pl-k">end</span>;
    
    <span class="pl-c1">@delegate_threefields_twovars_astype</span>( XYZ, x, y, z, [ cross, ] );
    
    pointA  <span class="pl-k">=</span> <span class="pl-c1">XYZ</span>( <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span> );
    pointB  <span class="pl-k">=</span> <span class="pl-c1">XYZ</span>( <span class="pl-c1">5.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">3.0</span> );
    
    <span class="pl-c1">cross</span>(pointA, pointB) <span class="pl-c"><span class="pl-c">#</span>  XYZ(-8.0, 16.0, -8.0)</span></pre></div>
<hr>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h3>
<p><a href="https://github.com/JuliaArbTypes/TypedDelegation.jl">TypedDelegation.jl</a> v0.1.2 for Julia v0.5, 0.6</p>
<h3><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h3>
<p>This derives directly from work by John Myles White and Toivo Henningsson.</p>
<ul>
<li>
<p>description and logic from John Myles White<br>
--   (<a href="https://gist.github.com/johnmyleswhite/5225361">https://gist.github.com/johnmyleswhite/5225361</a>)</p>
</li>
<li>
<p>delegation with nary ops fromToivo Henningsson<br>
--   (<a href="https://groups.google.com/forum/#!msg/julia-dev/MV7lYRgAcB0/-tS50TreaPoJ" rel="nofollow">https://groups.google.com/forum/#!msg/julia-dev/MV7lYRgAcB0/-tS50TreaPoJ</a>)</p>
</li>
<li>
<p>additional macro text from<br>
--   (<a href="https://github.com/JuliaLang/DataStructures.jl/blob/master/src/delegate.jl">https://github.com/JuliaLang/DataStructures.jl/blob/master/src/delegate.jl</a>)</p>
</li>
</ul>
</article></div>