<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-quasitriangular" class="anchor" aria-hidden="true" href="#quasitriangular"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuasiTriangular</h1>
<p dir="auto">A Julia package for quasi upper triangular matrices strongly inspired
by <a href="https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/src/triangular.jl">https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/src/triangular.jl</a></p>
<p dir="auto">WORK IN PROGRESS</p>
<p dir="auto">Type <code>QuasiUpperTriangular</code> stores a quasi upper triangular matrix in
a square matrix. The various algorithms ignore the lower zero elements</p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<h3 dir="auto"><a id="user-content-matrix---vector-product" class="anchor" aria-hidden="true" href="#matrix---vector-product"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Matrix - vector product</h3>
<ul dir="auto">
<li><code>A_mul_B!(a::QuasiUpperTriangular,b::AbstractVector,work::AbstractVector)</code>
uses BLAS <code>trmv</code> and corrects the results for lower nonzero
elements. For small matrices, (n &lt; 27), uses regular matrix - vector
product</li>
<li><code>A_mul_B!(A::QuasiUpperTriangular, B::AbstractVector)</code> pure
Julia implementation. Doesn't need extra workspace.</li>
</ul>
<h3 dir="auto"><a id="user-content-vector---matrix-produc" class="anchor" aria-hidden="true" href="#vector---matrix-produc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vector - matrix produc</h3>
<ul dir="auto">
<li><code>A_mul_B!(A::AbstractVector, B::QuasiUpperTriangular)</code> pure
Julia implementation. Doesn't need extra workspace.</li>
</ul>
<h3 dir="auto"><a id="user-content-transposed-matrix--vector-product" class="anchor" aria-hidden="true" href="#transposed-matrix--vector-product"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transposed matrix -vector product</h3>
<ul dir="auto">
<li><code>At_mul_B!(A::QuasiUpperTriangular, B::AbstractVector)</code> pure
Julia implementation. Doesn't need extra workspace.</li>
</ul>
<h3 dir="auto"><a id="user-content-vector---transposed-matrix-product" class="anchor" aria-hidden="true" href="#vector---transposed-matrix-product"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vector - transposed matrix product</h3>
<ul dir="auto">
<li><code>A_mul_Bt!(A::AbstractVector, B::QuasiUpperTriangular)</code>  pure
Julia implementation. Doesn't need extra workspace.</li>
</ul>
<h3 dir="auto"><a id="user-content-matrix---matrix-product" class="anchor" aria-hidden="true" href="#matrix---matrix-product"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Matrix - matrix product</h3>
<ul dir="auto">
<li><code>A_mul_B!(C::AbstractMatrix, A::QuasiUpperTriangular, B::AbstractMatrix)</code>: <code>C = A*B</code>, <code>A</code> is quasi upper triangular</li>
<li><code>A_mul_B!(C::AbstractMatrix, A::QuasiUpperTriangular, b::AbstractMatrix)</code>: <code>C = αA*B</code>, <code>A</code> is quasi upper triangular</li>
<li><code>At_mul_B!(C::AbstractMatrix, A::QuasiUpperTriangular, B::AbstractMatrix)</code>: <code>C = transpose(A)*B</code>, <code>A</code> is quasi upper triangular</li>
<li><code>At_mul_B!(C::AbstractMatrix, A::QuasiUpperTriangular, b::AbstractMatrix)</code>: <code>C = α*transpose(A)*B</code>, <code>A</code> is quasi upper triangular</li>
<li><code>At_mul_B!(A::QuasiUpperTriangular, B::AbstractMatrix)</code> <code>B = transpose(A)*B</code> in place computation,
<code>A</code> is quasi upper triangular.</li>
<li><code>A_mul_B!(C::AbstractMatrix, A::AbstractMatrix, B::QuasiUpperTriangular)</code>:
<code>C = A*B</code>, <code>B</code> is quasi upper triangular.</li>
<li><code>A_mul_B!(A::AbstractMatrix, B::QuasiUpperTriangular)</code>:
<code>C = A*B</code>, in place computation, <code>B</code> is quasi upper triangular.</li>
<li><code>A_mul_Bt!(C::AbstractMatrix, A::AbstractMatrix, B::QuasiUpperTriangular)</code>:
<code>C = A*transpose(B)</code>, <code>B</code> is quasi upper triangular.</li>
<li><code>A_mul_Bt!(A::AbstractMatrix, B::QuasiUpperTriangular)</code>:
<code>C = A*transpose(B)</code>, in place computation, <code>B</code> is quasi upper triangular.</li>
<li><code>A_mul_B!(C:QuasiUpperTriangular, A::QuasiUpperTriangular, B::QuasiUpperTriangular)</code>,
<code>A</code>, <code>B</code> and <code>C</code> are quasi upper triangular.</li>
</ul>
<h3 dir="auto"><a id="user-content-linear-problem-solver" class="anchor" aria-hidden="true" href="#linear-problem-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear problem solver</h3>
<ul dir="auto">
<li><code>A_ldiv_B!(A::QuasiUpperTriangular, B::AbstractMatrix)</code> solves <code>A*X = B</code>,
where <code>A</code> is quasi upper triangular. Solves by back substitution. Lower off-diagonal elements
make 2 * 2 problems that are solved explicitely.</li>
<li><code>A_rdiv_B!(A::AbstractMatrix, B::QuasiUpperTriangular)</code> solves <code>X*B = A</code>,
where <code>B</code> is quasi upper triangular. Solves by back substitution. Lower off-diagonal elements
make 2 * 2 problems that are solved explicitely.</li>
<li><code>A_rdiv_Bt!(A::AbstractMatrix, B::QuasiUpperTriangular)</code> solves <code>X*transpose(B) = A</code>,
where <code>B</code> is quasi upper triangular. Solves by back substitution. Lower off-diagonal elements
make 2 * 2 problems that are solved explicitely.</li>
<li><code>I_plus_rA_ldiv_B!(r::Float64,a::QuasiUpperTriangular, b::AbstractVector)</code> solves
<code>(I + r*A)*x = b</code> where <code>A</code> is quasi upper triangular.</li>
</ul>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h2>
<ul dir="auto">
<li>replace function names for product by <code>mul!</code></li>
<li>introduce lazy transpose evaluation</li>
<li>handle quasi lower triangular matrices</li>
<li>benchmark cases that have two different implementations</li>
</ul>
</article></div>