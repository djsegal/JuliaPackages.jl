<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libsymspgjl" class="anchor" aria-hidden="true" href="#libsymspgjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LibSymspg.jl</h1>
<p><a href="https://travis-ci.org/unkcpz/LibSymspg.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa93fca2fb9939e0434a2eae9a634f60dcc9f17d/68747470733a2f2f7472617669732d63692e6f72672f756e6b63707a2f4c696253796d7370672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/unkcpz/LibSymspg.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>julia wrapper of library <a href="https://github.com/atztogo/spglib">spglib</a></p>
<p>Binary built by using <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl">BinaryBuilder</a> and provided by <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider</a>.</p>
<p>Now it is registered in <a href="https://github.com/JuliaRegistries/General">JuliaRegisties</a>, thus can be installed by running:</p>
<div class="highlight highlight-source-shell"><pre>(v1.1) pkg<span class="pl-k">&gt;</span> add LibSymspg</pre></div>
<p>The package are seperated into two parts, api and practical part.
API part is used for quickly and easily wrapper the C-API of spglib.
While the practical part have the most representative data struacture that can be used directly.</p>
<p>In the api-part
Lattice is represented as row vector,
while positions are represented as column vector which
compatible with spglib's C-API.</p>
<p>While In the practicl (LibSymspg.jl) part
Lattice is represented as row vector, and positions are also represented as row vector,
which is compatible with struture input data structure of most simulation software.</p>
<p>The output of the <code>get_symmetry</code> function is a vector of rotations (3x3 matrix) and a vector of translates (3x1 vectors) and the number of operations.</p>
<p><a href="https://atztogo.github.io/spglib/definition.html" rel="nofollow">Here</a> is the definition about how crystal transform when rotation and transformation applied.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LibSymspg

latt <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span> <span class="pl-k">-</span><span class="pl-c1">2.0</span>]
positions <span class="pl-k">=</span> [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>]
types <span class="pl-k">=</span> [<span class="pl-c1">1</span>]
latt, positions, types <span class="pl-k">=</span> <span class="pl-c1">refine_cell</span>(latt, positions, types, <span class="pl-c1">1e-5</span>)
<span class="pl-c1">@test</span> latt <span class="pl-k">≈</span> [<span class="pl-c1">4.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">4.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">4.0</span>]
<span class="pl-c1">@test</span> positions <span class="pl-k">≈</span> [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>]
<span class="pl-c1">@test</span> types <span class="pl-k">==</span> [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> test determine the row and column type of latt and pos</span>
<span class="pl-c"><span class="pl-c">#</span> lattice is represented as row vectors</span>
<span class="pl-c"><span class="pl-c">#</span> positions represented as column vectors</span>
latt <span class="pl-k">=</span> [<span class="pl-c1">4.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">3.4641</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">12.0</span>]
positions <span class="pl-k">=</span> [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>]
types <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
num_atom <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-c1">@test</span> <span class="pl-c1">get_spacegroup</span>(latt, positions, types, <span class="pl-c1">1e-3</span>) <span class="pl-k">==</span> (<span class="pl-s"><span class="pl-pds">"</span>P-3m1<span class="pl-pds">"</span></span>, <span class="pl-c1">164</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">size</span>(rots[<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">size</span>(trans[<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (<span class="pl-c1">3</span>,)</pre></div>
</article></div>