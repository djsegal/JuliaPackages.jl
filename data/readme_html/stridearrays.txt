<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stridearrays" class="anchor" aria-hidden="true" href="#stridearrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StrideArrays</h1>
<p dir="auto"><a href="https://JuliaSIMD.github.io/StrideArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSIMD.github.io/StrideArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/StrideArrays.jl/actions"><img src="https://github.com/JuliaSIMD/StrideArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/StrideArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/53a593874c31eb18ff43b068803930d6d89c8db2c2e09257462a1c69dde8e919/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f5374726964654172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSIMD/StrideArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-caution" class="anchor" aria-hidden="true" href="#caution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caution</h3>
<p dir="auto"><code>StrideArray</code>s (and <code>StrideArraysCore</code>) does not check bounds by default. To enable bounds checking (for both), define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="StrideArraysCore.boundscheck() = true"><pre>StrideArraysCore<span class="pl-k">.</span><span class="pl-en">boundscheck</span>() <span class="pl-k">=</span> <span class="pl-c1">true</span></pre></div>
<p dir="auto">Note, bounds checking is still disabled when using <code>@inbounds</code>, even if <code>boundscheck() == false</code>.
Starting Julia with <code>--check-bounds=yes</code> will automatically redefine <code>StrideArraysCore.boundscheck() = true</code>.</p>
<h3 dir="auto"><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time using StrideArrays
  5.921865 seconds (12.17 M allocations: 722.046 MiB, 2.96% gc time, 70.89% compilation time)

julia&gt; A = @StrideArray rand(3,4)
3×4 StrideArraysCore.StaticStrideArray{Tuple{StaticInt{3}, StaticInt{4}}, (true, true), Float64, 2, 1, 0, (1, 2), Tuple{StaticInt{8}, StaticInt{24}}, Tuple{StaticInt{1}, StaticInt{1}}, 12} with indices 1:1:3×1:1:4:
 0.504925  0.280823  0.578082  0.839807
 0.865055  0.762067  0.897201  0.593801
 0.485478  0.95566   0.439315  0.771538

julia&gt; B = similar(A);

julia&gt; @benchmark @. $B = log($A)
BenchmarkTools.Trial: 10000 samples with 580 evaluations.
 Range (min … max):  197.441 ns … 306.610 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     199.200 ns               ┊ GC (median):    0.00%
 Time  (mean ± σ):   200.114 ns ±   2.698 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

       ▃▆██▇▄▁
  ▁▁▂▄████████▇▄▃▃▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂
  197 ns           Histogram: frequency by time          209 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark sum(log.($A))
BenchmarkTools.Trial: 10000 samples with 328 evaluations.
 Range (min … max):  271.122 ns … 456.610 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     272.936 ns               ┊ GC (median):    0.00%
 Time  (mean ± σ):   279.168 ns ±  17.957 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ██▆▄▂▃▃▃▂▁                                       ▁ ▁▁▁▁▁▁▁▁▁  ▂
  ███████████▆▄▁▃▁▁▁▁▃▁▁▁▃▁▁▁▄▃▅▄▄▃▄▅▆▅▆▇▆▇▆▇▇█▇███████████████ █
  271 ns        Histogram: log(frequency) by time        343 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-k">using</span> StrideArrays
  <span class="pl-c1">5.921865</span> seconds (<span class="pl-c1">12.17</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">722.046</span> MiB, <span class="pl-c1">2.96</span><span class="pl-k">%</span> gc time, <span class="pl-c1">70.89</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">@StrideArray</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> StrideArraysCore<span class="pl-k">.</span>StaticStrideArray{Tuple{StaticInt{<span class="pl-c1">3</span>}, StaticInt{<span class="pl-c1">4</span>}}, (<span class="pl-c1">true</span>, <span class="pl-c1">true</span>), Float64, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), Tuple{StaticInt{<span class="pl-c1">8</span>}, StaticInt{<span class="pl-c1">24</span>}}, Tuple{StaticInt{<span class="pl-c1">1</span>}, StaticInt{<span class="pl-c1">1</span>}}, <span class="pl-c1">12</span>} with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
 <span class="pl-c1">0.504925</span>  <span class="pl-c1">0.280823</span>  <span class="pl-c1">0.578082</span>  <span class="pl-c1">0.839807</span>
 <span class="pl-c1">0.865055</span>  <span class="pl-c1">0.762067</span>  <span class="pl-c1">0.897201</span>  <span class="pl-c1">0.593801</span>
 <span class="pl-c1">0.485478</span>  <span class="pl-c1">0.95566</span>   <span class="pl-c1">0.439315</span>  <span class="pl-c1">0.771538</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">@.</span> <span class="pl-k">$</span>B <span class="pl-k">=</span> <span class="pl-c1">log</span>(<span class="pl-k">$</span>A)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">580</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">197.441</span> ns … <span class="pl-c1">306.610</span> ns  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">199.200</span> ns               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">200.114</span> ns ±   <span class="pl-c1">2.698</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

       ▃▆██▇▄▁
  ▁▁▂▄████████▇▄▃▃▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂
  <span class="pl-c1">197</span> ns           Histogram<span class="pl-k">:</span> frequency by time          <span class="pl-c1">209</span> ns <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">sum</span>(<span class="pl-c1">log</span>.(<span class="pl-k">$</span>A))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">328</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">271.122</span> ns … <span class="pl-c1">456.610</span> ns  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">272.936</span> ns               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">279.168</span> ns ±  <span class="pl-c1">17.957</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

  ██▆▄▂▃▃▃▂▁                                       ▁ ▁▁▁▁▁▁▁▁▁  ▂
  ███████████▆▄▁▃▁▁▁▁▃▁▁▁▃▁▁▁▄▃▅▄▄▃▄▅▆▅▆▇▆▇▆▇▇█▇███████████████ █
  <span class="pl-c1">271</span> ns        Histogram<span class="pl-k">:</span> <span class="pl-c1">log</span>(frequency) by time        <span class="pl-c1">343</span> ns <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span></pre></div>
</article></div>