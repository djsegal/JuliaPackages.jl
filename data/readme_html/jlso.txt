<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-jlso" class="anchor" aria-hidden="true" href="#jlso"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JLSO</h1>
<p><a href="https://invenia.github.io/JLSO.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://invenia.github.io/JLSO.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/invenia/JLSO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7aacce07f1894b6fd64c2494ea88b322cbb90ed1/68747470733a2f2f7472617669732d63692e636f6d2f696e76656e69612f4a4c534f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/invenia/JLSO.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/invenia/JLSO-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d648ebc7399aaf236587eaa714bc31b3f3d91730/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f696e76656e69612f4a4c534f2e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/invenia/JLSO.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/JLSO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df769dc0d008bfa4255644a485650414e6805d78/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4a4c534f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/JLSO.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/7c36c1138b8ef31248513294318b739ddad4edbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p>JLSO is a storage container for serialized Julia objects.
Think of it less as a serialization format but as a container,
that employs a serializer, and a compressor, handles all the other concerns including metadata and saving.
Such that the serializer just needs to determine how to turn a julia object into a stream<code>Vector{UInt8}</code>,
and the compressor just needs to determine how to turn one stream of <code>UInt8</code>s into a smaller one (and the reverse).</p>
<p>At the top-level it is a BSON file,
where it stores metadata about the system it was created on as well as a collection of objects (the actual data).
Depending on configuration, those objects may themselves be stored as BSON sub-documents,
or in the native Julia serialization format (default), under various levels of compression (<code>gzip</code> default).
It is fast and efficient to load just single objects out of a larger file that contains many objects.</p>
<p>The metadata includes the Julia version and the versions of all packages installed.
It is always store in plain BSON without julia specific extensions.
This means in the worst case you can install everything again and replicate your system.
(Extreme worst case scenario, using a BSON reader from another programming language).</p>
<p>Note: If the amount of data you have to store is very small, relative to the metadata about your environment, then JLSO is a pretty suboptimal format.</p>
<h3><a id="user-content-basic-example" class="anchor" aria-hidden="true" href="#basic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Example:</h3>
<pre><code>julia&gt; using JLSO, Dates

julia&gt; JLSO.save("breakfast.jlso", :food =&gt; "‚òïÔ∏èü•ìüç≥", :cost =&gt; 11.95, :time =&gt; Time(9, 0))

julia&gt; loaded = JLSO.load("breakfast.jlso")
Dict{Symbol,Any} with 3 entries:
  :cost =&gt; 11.95
  :time =&gt; 09:00:00
  :food =&gt; "‚òïÔ∏èü•ìüç≥"
</code></pre>
</article></div>