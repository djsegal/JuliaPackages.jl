<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pyamgjl" class="anchor" aria-hidden="true" href="#pyamgjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PyAMG.jl</h1>
<p><a href="https://travis-ci.org/cortner/PyAMG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a54bff431731c61e1d31a73eca69200ac7695eb7/68747470733a2f2f7472617669732d63692e6f72672f636f72746e65722f5079414d472e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cortner/PyAMG.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Convenience wrapper module for the <a href="http://pyamg.github.io/" rel="nofollow">PyAMG</a> library.
Requires a Python installation with <code>scipy</code> and <code>pyamg</code>.
If an Anconda distribution is used (including the <code>Conda.jl</code> package manager)
then <code>pyamg</code> should be automatically installed on first use. Otherwise, follow
the <a href="https://github.com/pyamg/pyamg">straightforward instructions</a>.</p>

<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<p>In all examples it is assumed that <code>A</code> is a sparse matrix
and <code>b</code> a vector and <code>amg</code> is an <code>AMGSolver</code> instance constructed from <code>A</code>.
The classical example would be the Dirichlet problem on a square,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SparseArrays, LinearAlgebra
N <span class="pl-k">=</span> <span class="pl-c1">100</span>
L1 <span class="pl-k">=</span> <span class="pl-c1">spdiagm</span>( <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">=&gt;</span>  <span class="pl-k">-</span><span class="pl-c1">ones</span>(N<span class="pl-k">-</span><span class="pl-c1">1</span>),
               <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(N),
               <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span>  <span class="pl-k">-</span><span class="pl-c1">ones</span>(N<span class="pl-k">-</span><span class="pl-c1">1</span>) ) <span class="pl-k">*</span> N<span class="pl-k">^</span><span class="pl-c1">2</span>
Id <span class="pl-k">=</span> <span class="pl-c1">sparse</span>(<span class="pl-c1">1.0</span><span class="pl-k">*</span>I, N, N)
A <span class="pl-k">=</span> <span class="pl-c1">kron</span>(Id, L1) <span class="pl-k">+</span> <span class="pl-c1">kron</span>(L1, Id)
b <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">size</span>(A,<span class="pl-c1">1</span>))</pre></div>
<h3><a id="user-content-blackbox-solver" class="anchor" aria-hidden="true" href="#blackbox-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Blackbox solver</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyAMG
x <span class="pl-k">=</span> PyAMG<span class="pl-k">.</span><span class="pl-c1">solve</span>(A, b)</pre></div>
<h3><a id="user-content-multiple-solves" class="anchor" aria-hidden="true" href="#multiple-solves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multiple solves</h3>
<p>To initialise, call</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyAMG
amg <span class="pl-k">=</span> <span class="pl-c1">RugeStubenSolver</span>(A)</pre></div>
<p>Then the system Ax=b can be solved using</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> amg <span class="pl-k">\</span> b
x <span class="pl-k">=</span> <span class="pl-c1">solve</span>(amg, b; tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>)</pre></div>
<p>or, one can specify a different 'outer solver'</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">solve</span>(amg, b; tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, accel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cg<span class="pl-pds">"</span></span>)</pre></div>
<p>see <code>?solve</code> for more options. In particular, note the that default keyword
arguments can be set via <code>set_kwargs!</code> or in the construction of the AMG
solver, which will then be used by both <code>\</code> and <code>solve</code>. E.g.,</p>
<div class="highlight highlight-source-julia"><pre>amg <span class="pl-k">=</span> <span class="pl-c1">RugeStubenSolver</span>(A, tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, accel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cg<span class="pl-pds">"</span></span>)
x <span class="pl-k">=</span> amg <span class="pl-k">\</span> b</pre></div>
<h3><a id="user-content-as-preconditioner" class="anchor" aria-hidden="true" href="#as-preconditioner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>As Preconditioner</h3>
<p>After initialising, we can construct a preconditioner via</p>
<div class="highlight highlight-source-julia"><pre>M <span class="pl-k">=</span> <span class="pl-c1">aspreconditioner</span>(amg)</pre></div>
<p>The line <code>M \ b</code> then performes a single MG cycle.
This is e.g. compatible with the <code>IterativeSolvers</code> package:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyAMG, IterativeSolvers
TOL <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>
M <span class="pl-k">=</span> <span class="pl-c1">aspreconditioner</span>(<span class="pl-c1">RugeStubenSolver</span>(A))
IterativeSolvers<span class="pl-k">.</span><span class="pl-c1">cg</span>(A, b, M; tol<span class="pl-k">=</span>TOL)</pre></div>
<h3><a id="user-content-solver-history" class="anchor" aria-hidden="true" href="#solver-history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solver history</h3>
<p>To extract the solver history as a vector of residuals, use</p>
<pre><code>amg = RugeStubenSolver(A)
r = Float64[]
x = PyAMG.solve(amg, b, residuals=r)
@show r
</code></pre>
<p>Since version <code>3.2.1.dev0+2227b77</code> the residuals can also be returned for
the blackbox solver variant.</p>
<p>(NOTE: although <code>pyamg</code> needs residuals to be a <em>list</em>, <code>PyAMG.jl</code> will detect
if <code>residuals</code> is a <code>numpy</code> vector and replace it with a list, then
convert back to a types Julia vector.)</p>
<h2><a id="user-content-list-of-types-and-methods" class="anchor" aria-hidden="true" href="#list-of-types-and-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>List of Types and Methods</h2>
<p>(this section is incomplete)</p>
<h3><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h3>
<ul>
<li><code>AMGSolver{T}</code> : encapsulates the pyamg solver PyObject</li>
<li><code>RugeStubenSolver</code> : typealias for <code>AMGSolver{RugeStuben}</code></li>
<li><code>SmoothedAggregationSolver</code> : typealias for <code>AMGSolver{SmoothedAggregation}</code></li>
<li><code>AMGPreconditioner</code> : encapsulates the output of <code>aspreconditioner</code>
to use PyAMG as a preconditioner for iterative linear algebra.</li>
</ul>

</article></div>