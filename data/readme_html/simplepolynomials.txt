<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplepolynomials" class="anchor" aria-hidden="true" href="#simplepolynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimplePolynomials</h1>
<p dir="auto">This module defines two types:</p>
<ul dir="auto">
<li><code>SimplePolynomial</code>: These are polynomials
with exact coefficients (integers, rationals, Gaussian integers, Gaussian
rationals, or <code>Mod</code>s). The objective is exactness perhaps at the
expense of computational efficiency.</li>
<li><code>SimpleRationalFunction</code>: These are fractions whose numerator and
denominator are <code>SimplePolynomial</code>s.</li>
</ul>
<h2 dir="auto"><a id="user-content-caveat" class="anchor" aria-hidden="true" href="#caveat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caveat</h2>
<p dir="auto">The polynomials (and rational functions) in this module all have exact and
arbitrary size precision. That means there will not be rounding or overflow issues, but
the cost is performance. The <code>Polynomials</code> package is more efficient.
Other computer algebra packages may perform better.</p>
<h1 dir="auto"><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basics</h1>
<h2 dir="auto"><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Polynomials</h2>
<p dir="auto">A <code>SimplePolynomial</code> is a polynomial in one variable with exact
coefficients. There are a few options to create a <code>SimplePolynomial</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using SimplePolynomials

julia&gt; p = SimplePolynomial([2,-4,1])
2 - 4*x + x^2

julia&gt; p = SimplePolynomial(2,-4,1,0)
2 - 4*x + x^2"><pre class="notranslate"><code>julia&gt; using SimplePolynomials

julia&gt; p = SimplePolynomial([2,-4,1])
2 - 4*x + x^2

julia&gt; p = SimplePolynomial(2,-4,1,0)
2 - 4*x + x^2
</code></pre></div>
<p dir="auto">The <code>getx()</code> function returns <code>SimplePolynomial(0,1)</code>. Assigning that
result to a variable named <code>x</code> makes creating polynomials rather
natural.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; x = getx()
x

julia&gt; p = 2 - 4x + x^2
2 - 4*x + x^2"><pre class="notranslate"><code>julia&gt; x = getx()
x

julia&gt; p = 2 - 4x + x^2
2 - 4*x + x^2
</code></pre></div>
<p dir="auto">Polynomial coefficients may also be rational numbers, Gaussian integers,
Gaussian rationals, or modular numbers.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 - im*x + 4
4 - im*x + 3*x^2

julia&gt; p = (3//2)x^2 - 4
-4//1 + 3//2*x^2

julia&gt; using Mods

julia&gt; p = Mod{17}(3) - 2x^2
Mod{17}(3) + Mod{17}(15)*x^2"><pre class="notranslate"><code>julia&gt; p = 3x^2 - im*x + 4
4 - im*x + 3*x^2

julia&gt; p = (3//2)x^2 - 4
-4//1 + 3//2*x^2

julia&gt; using Mods

julia&gt; p = Mod{17}(3) - 2x^2
Mod{17}(3) + Mod{17}(15)*x^2
</code></pre></div>
<p dir="auto">The coefficients of a <code>SimplePolynomial</code> may not be floating
point numbers.</p>
<h3 dir="auto"><a id="user-content-coefficients" class="anchor" aria-hidden="true" href="#coefficients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Coefficients</h3>
<p dir="auto">The coefficients of a <code>SimplePolynomial</code> can be accessed with the
<code>coeffs</code> function:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 1 -5x + 11x^2 + 4x^3
1 - 5*x + 11*x^2 + 4*x^3

julia&gt; coeffs(p)
4-element Array{Int64,1}:
  1
 -5
 11
  4"><pre class="notranslate"><code>julia&gt; p = 1 -5x + 11x^2 + 4x^3
1 - 5*x + 11*x^2 + 4*x^3

julia&gt; coeffs(p)
4-element Array{Int64,1}:
  1
 -5
 11
  4
</code></pre></div>
<p dir="auto">Use square brackets to retrieve a coefficient
associated with a given power:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p[2]     # coefficient of x^2
11

julia&gt; p[0]     # constant term, the zero index is allowed
1

julia&gt; p[11]    # zero is returned if the index exceeds the degree
0

julia&gt; p[-1]    # negative indices are not allowed
ERROR: index [-1] must be nonnegative"><pre class="notranslate"><code>julia&gt; p[2]     # coefficient of x^2
11

julia&gt; p[0]     # constant term, the zero index is allowed
1

julia&gt; p[11]    # zero is returned if the index exceeds the degree
0

julia&gt; p[-1]    # negative indices are not allowed
ERROR: index [-1] must be nonnegative
</code></pre></div>
<p dir="auto">Note that a <code>SimplePolynomial</code> is an immutable object and one
may not change its coefficients.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 - 5x +1
1 - 5*x + 3*x^2

julia&gt; p[1] = 6
ERROR: MethodError: no method matching setindex!(::SimplePolynomial, ::Int64, ::Int64)"><pre class="notranslate"><code>julia&gt; p = 3x^2 - 5x +1
1 - 5*x + 3*x^2

julia&gt; p[1] = 6
ERROR: MethodError: no method matching setindex!(::SimplePolynomial, ::Int64, ::Int64)
</code></pre></div>
<p dir="auto">The <code>degree</code> function returns the degree of the polynomial and
<code>lead</code> returns the coefficient of that term.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; degree(p)
3

julia&gt; lead(p)
4"><pre class="notranslate"><code>julia&gt; degree(p)
3

julia&gt; lead(p)
4
</code></pre></div>
<p dir="auto">Nonzero constant polynomials have degree zero. The zero polynomial
should have degree <code>-âˆž</code> but this is not an <code>Int</code>, so we return <code>-1</code>.
This is also the only case in which <code>lead</code> returns <code>0</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = SimplePolynomial(0)
0

julia&gt; degree(p)
-1

julia&gt; lead(p)
0"><pre class="notranslate"><code>julia&gt; p = SimplePolynomial(0)
0

julia&gt; degree(p)
-1

julia&gt; lead(p)
0
</code></pre></div>
<p dir="auto">The function <code>monic(p)</code> returns a <code>SimplePolynomial</code> formed
by dividing all coefficients by the leading term:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 4-8x + 2x^2
4 - 8*x + 2*x^2

julia&gt; monic(p)
2 - 4*x + x^2

julia&gt; p = 3x^2-5
-5 + 3*x^2

julia&gt; monic(p)
-5//3 + x^2"><pre class="notranslate"><code>julia&gt; p = 4-8x + 2x^2
4 - 8*x + 2*x^2

julia&gt; monic(p)
2 - 4*x + x^2

julia&gt; p = 3x^2-5
-5 + 3*x^2

julia&gt; monic(p)
-5//3 + x^2
</code></pre></div>
<p dir="auto">The function <code>eltype</code> returns the Julia type of the coefficients.</p>
<h2 dir="auto"><a id="user-content-rational-functions" class="anchor" aria-hidden="true" href="#rational-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rational Functions</h2>
<p dir="auto">A <code>SimpleRationalFunction</code> is the ratio of two polynomials:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 3x + x^3
3*x + x^3

julia&gt; q = 1-x+x^2
1 - x + x^2

julia&gt; p/q
(3*x + x^3) / (1 - x + x^2)"><pre class="notranslate"><code>julia&gt; p = 3x + x^3
3*x + x^3

julia&gt; q = 1-x+x^2
1 - x + x^2

julia&gt; p/q
(3*x + x^3) / (1 - x + x^2)
</code></pre></div>
<p dir="auto">A <code>SimpleRationalFunction</code> is always represented as
the ratio of relatively prime polynomials; that is, any
common factors between numerator and denominator are cancelled.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = (x-1)*(x-2)*(x-3)
-6 + 11*x - 6*x^2 + x^3

julia&gt; q = (x-1)*(x+5)
-5 + 4*x + x^2

julia&gt; p/q
(6 - 5*x + x^2) / (5 + x)"><pre class="notranslate"><code>julia&gt; p = (x-1)*(x-2)*(x-3)
-6 + 11*x - 6*x^2 + x^3

julia&gt; q = (x-1)*(x+5)
-5 + 4*x + x^2

julia&gt; p/q
(6 - 5*x + x^2) / (5 + x)
</code></pre></div>
<p dir="auto">Furthermore, the denominator of a <code>SimpleRationalFunction</code> is always a
<em>monic</em> polynomial; that is, the leading coefficient is one.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; (x-3)/(2x^2-5)
(-3//2 + 1//2*x) / (-5//2 + x^2)"><pre class="notranslate"><code>julia&gt; (x-3)/(2x^2-5)
(-3//2 + 1//2*x) / (-5//2 + x^2)
</code></pre></div>
<p dir="auto">Of course, division by zero is forbidden:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = x^2-5;

julia&gt; q = SimplePolynomial(0);

julia&gt; p/q
ERROR: Denominator cannot be zero"><pre class="notranslate"><code>julia&gt; p = x^2-5;

julia&gt; q = SimplePolynomial(0);

julia&gt; p/q
ERROR: Denominator cannot be zero
</code></pre></div>
<h3 dir="auto"><a id="user-content-numerator-and-denominator" class="anchor" aria-hidden="true" href="#numerator-and-denominator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Numerator and denominator</h3>
<p dir="auto">Use <code>numerator</code> and <code>denominator</code> to extract the relevant
parts of a <code>SimpleRationalFunction</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; f = (x^2 - 3x + 2) / (x-4)
(2 - 3*x + x^2) / (-4 + x)

julia&gt; numerator(f)
2 - 3*x + x^2

julia&gt; denominator(f)
-4 + x"><pre class="notranslate"><code>julia&gt; f = (x^2 - 3x + 2) / (x-4)
(2 - 3*x + x^2) / (-4 + x)

julia&gt; numerator(f)
2 - 3*x + x^2

julia&gt; denominator(f)
-4 + x
</code></pre></div>
<h3 dir="auto"><a id="user-content-three-line--printing" class="anchor" aria-hidden="true" href="#three-line--printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Three-line  printing</h3>
<p dir="auto">The <code>string3</code> function can be used to give a nice visualization
of a <code>SimpleRationalFunction</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; f = (x^2 - 3x + 2) / (x-4)
(2 - 3*x + x^2) / (-4 + x)

julia&gt; println(string3(f))
2 - 3*x + x^2
-------------
   -4 + x"><pre class="notranslate"><code>julia&gt; f = (x^2 - 3x + 2) / (x-4)
(2 - 3*x + x^2) / (-4 + x)

julia&gt; println(string3(f))
2 - 3*x + x^2
-------------
   -4 + x
</code></pre></div>
<h1 dir="auto"><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operations</h1>
<h2 dir="auto"><a id="user-content-arithmetic" class="anchor" aria-hidden="true" href="#arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arithmetic</h2>
<p dir="auto">The usual operations of addition <code>+</code>, subtraction <code>-</code>, multiplication <code>*</code>,
and division <code>/</code> may be used with any combination of exact numbers,
polynomials, or rational functions.</p>
<p dir="auto">Exponentiation by an integer power may be performed for any
<code>SimplePolynomial</code> or <code>SimpleRationalFunction</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 1+x
1 + x

julia&gt; for k=-3:3
       println(p^k)
       end
1 / (1 + 3*x + 3*x^2 + x^3)
1 / (1 + 2*x + x^2)
1 / (1 + x)
1
1 + x
1 + 2*x + x^2
1 + 3*x + 3*x^2 + x^3"><pre class="notranslate"><code>julia&gt; p = 1+x
1 + x

julia&gt; for k=-3:3
       println(p^k)
       end
1 / (1 + 3*x + 3*x^2 + x^3)
1 / (1 + 2*x + x^2)
1 / (1 + x)
1
1 + x
1 + 2*x + x^2
1 + 3*x + 3*x^2 + x^3
</code></pre></div>
<p dir="auto">For polynomials, division results in a <code>SimpleRationalFunction</code>.
Alternatively, use <code>diverm</code> to find the quotient and remainder:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; a = 3x^3 + 5x -1
-1 + 5*x + 3*x^3

julia&gt; b = x^2+3
3 + x^2

julia&gt; (q,r) = divrem(a,b)
(3*x, -1 - 4*x)

julia&gt; q*b + r == a
true"><pre class="notranslate"><code>julia&gt; a = 3x^3 + 5x -1
-1 + 5*x + 3*x^3

julia&gt; b = x^2+3
3 + x^2

julia&gt; (q,r) = divrem(a,b)
(3*x, -1 - 4*x)

julia&gt; q*b + r == a
true
</code></pre></div>
<h2 dir="auto"><a id="user-content-evaluation" class="anchor" aria-hidden="true" href="#evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Evaluation</h2>
<p dir="auto">Polynomials and rational functions behave as functions; they can be
evaluated as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 + 5x +1
1 + 5*x + 3*x^2

julia&gt; p(10)
351

julia&gt; p(0.5)  # evaluation with a float is permitted
4.25

julia&gt; f = p/(x+5)
(1 + 5*x + 3*x^2) / (5 + x)

julia&gt; f(10)
117//5

julia&gt; f(3.2 - 4.1im)   
4.575609756097562 - 9.812195121951218im"><pre class="notranslate"><code>julia&gt; p = 3x^2 + 5x +1
1 + 5*x + 3*x^2

julia&gt; p(10)
351

julia&gt; p(0.5)  # evaluation with a float is permitted
4.25

julia&gt; f = p/(x+5)
(1 + 5*x + 3*x^2) / (5 + x)

julia&gt; f(10)
117//5

julia&gt; f(3.2 - 4.1im)   
4.575609756097562 - 9.812195121951218im
</code></pre></div>
<p dir="auto">The argument of a polynomial or simple rational function may be a square matrix.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; A = [ 2 3 ; 0 -1];

julia&gt; p = -2 - x + x^2;

julia&gt; p(A)
2Ã—2 Array{BigInt,2}:
 0  0
 0  0"><pre class="notranslate"><code>julia&gt; A = [ 2 3 ; 0 -1];

julia&gt; p = -2 - x + x^2;

julia&gt; p(A)
2Ã—2 Array{BigInt,2}:
 0  0
 0  0
</code></pre></div>
<p dir="auto">The argument of a polynomial or rational function may itself
be a polynomial or a rational function.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 + 5x +1
1 + 5*x + 3*x^2

julia&gt; q = 2x-3
-3 + 2*x

julia&gt; p(q)
13 - 26*x + 12*x^2

julia&gt; 3q^2 + 5q + 1
13 - 26*x + 12*x^2"><pre class="notranslate"><code>julia&gt; p = 3x^2 + 5x +1
1 + 5*x + 3*x^2

julia&gt; q = 2x-3
-3 + 2*x

julia&gt; p(q)
13 - 26*x + 12*x^2

julia&gt; 3q^2 + 5q + 1
13 - 26*x + 12*x^2
</code></pre></div>
<p dir="auto">Beware that multiplication requires the <code>*</code> symbol. Observe:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; (x^2-2)*(x-3)
6 - 2*x - 3*x^2 + x^3

julia&gt; (x^2-2)(x-3)
7 - 6*x + x^2"><pre class="notranslate"><code>julia&gt; (x^2-2)*(x-3)
6 - 2*x - 3*x^2 + x^3

julia&gt; (x^2-2)(x-3)
7 - 6*x + x^2
</code></pre></div>
<p dir="auto">In the second case, we are evaluating the function <code>(x^2-2)</code>
with the argument <code>(x-3)</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; (x-3)^2 - 2
7 - 6*x + x^2"><pre class="notranslate"><code>julia&gt; (x-3)^2 - 2
7 - 6*x + x^2
</code></pre></div>
<h3 dir="auto"><a id="user-content-conversion-to-a-function" class="anchor" aria-hidden="true" href="#conversion-to-a-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Conversion to a function</h3>
<p dir="auto">Given <code>p</code>, the syntax <code>p(x)</code> evaluates <code>p</code> at <code>x</code>. Of course, <code>p</code>
is of type <code>SimplePolynomial</code> (or <code>SimpleRationalFunction</code>). If you
want a <code>Function</code> that evaluates <code>p</code>, use <code>make_function(p)</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; x = getx();

julia&gt; p = 5 + 2x + 4x^2
5 + 2*x + 4*x^2

julia&gt; p(10)
425

julia&gt; P = make_function(p)
#1 (generic function with 1 method)

julia&gt; P(10)
425"><pre class="notranslate"><code>julia&gt; x = getx();

julia&gt; p = 5 + 2x + 4x^2
5 + 2*x + 4*x^2

julia&gt; p(10)
425

julia&gt; P = make_function(p)
#1 (generic function with 1 method)

julia&gt; P(10)
425
</code></pre></div>
<h2 dir="auto"><a id="user-content-gcd-and-lcm" class="anchor" aria-hidden="true" href="#gcd-and-lcm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GCD and LCM</h2>
<p dir="auto">Given  <code>SimplePolynomial</code>s <code>a</code> and <code>b</code>, <code>gcd(a,b)</code> returns a greatest
common divisor of <code>a</code> and <code>b</code>. This is a polynomial of highest degree
that divides both <code>a</code> and <code>b</code> without remainder. Note that this is
not unique as a nonzero multiple of a GCD is also a GCD of the two
polynomials. The polynomial returned is always monic.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = (2x-1) * (x+5)
-5 + 9*x + 2*x^2

julia&gt; q = (2x-1) * (x^2-4)
4 - 8*x - x^2 + 2*x^3

julia&gt; gcd(p,q)
-1//2 + x"><pre class="notranslate"><code>julia&gt; p = (2x-1) * (x+5)
-5 + 9*x + 2*x^2

julia&gt; q = (2x-1) * (x^2-4)
4 - 8*x - x^2 + 2*x^3

julia&gt; gcd(p,q)
-1//2 + x
</code></pre></div>
<p dir="auto">Similarly, <code>lcm(a,b)</code> returns a least common multiple of <code>a</code> and <code>b</code>.
As with <code>gcd</code>, this is not uniquely defined; we return a monic
least common multiple.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; lcm(p,q)
10//1 - 18//1*x - 13//2*x^2 + 9//2*x^3 + x^4"><pre class="notranslate"><code>julia&gt; lcm(p,q)
10//1 - 18//1*x - 13//2*x^2 + 9//2*x^3 + x^4
</code></pre></div>
<h2 dir="auto"><a id="user-content-roots" class="anchor" aria-hidden="true" href="#roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roots</h2>
<p dir="auto">For polynomials, <code>roots(p)</code> returns a list of values <code>x</code> for which <code>p(x)==0</code>.
These are floating point and so are likely not to be exact.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = x^2-x-1
-1 - x + x^2

julia&gt; roots(p)
2-element Array{Float64,1}:
 -0.6180339887498948
  1.618033988749895

julia&gt; p.(ans)
2-element Array{Float64,1}:
 -1.1102230246251565e-16
  2.220446049250313e-16"><pre class="notranslate"><code>julia&gt; p = x^2-x-1
-1 - x + x^2

julia&gt; roots(p)
2-element Array{Float64,1}:
 -0.6180339887498948
  1.618033988749895

julia&gt; p.(ans)
2-element Array{Float64,1}:
 -1.1102230246251565e-16
  2.220446049250313e-16
</code></pre></div>
<p dir="auto">We can achieve greater accuracy using <code>newton_roots</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; newton_roots(p)
2-element Array{BigFloat,1}:
 -0.6180339887498948482045868343656381177203091798057628621354486227052604628189011
  1.61803398874989484820458683436563811772030917980576286213544862270526046281891

julia&gt; p.(ans)
2-element Array{BigFloat,1}:
 -8.636168555094444625386351862800399571116000364436281385023703470168591803162427e-78
  1.727233711018888925077270372560079914223200072887256277004740694033718360632485e-77"><pre class="notranslate"><code>julia&gt; newton_roots(p)
2-element Array{BigFloat,1}:
 -0.6180339887498948482045868343656381177203091798057628621354486227052604628189011
  1.61803398874989484820458683436563811772030917980576286213544862270526046281891

julia&gt; p.(ans)
2-element Array{BigFloat,1}:
 -8.636168555094444625386351862800399571116000364436281385023703470168591803162427e-78
  1.727233711018888925077270372560079914223200072887256277004740694033718360632485e-77
</code></pre></div>
<p dir="auto">The function <code>newton_roots</code> calls <code>newton_solve</code> for each root returned by <code>roots</code>. See the
help messages.</p>
<h3 dir="auto"><a id="user-content-rational-roots" class="anchor" aria-hidden="true" href="#rational-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rational roots</h3>
<p dir="auto">The function <code>rational_roots</code> returns the <code>Multiset</code> of all rational
roots of a polynomial.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = (2x-3)^2 * (4x+3) * x^2 * (x^2+1)
27*x^2 - 9*x^4 + 16*x^5 - 36*x^6 + 16*x^7

julia&gt; rational_roots(p)
{-3//4,0//1,0//1,3//2,3//2}

julia&gt; roots(p)
7-element Array{Complex{Float64},1}:
   -0.7499999999999999 + 0.0im
 3.885780586188048e-16 - 1.0000000000000009im
 3.885780586188048e-16 + 1.0000000000000009im
    1.4999999920796347 + 0.0im
    1.5000000079203661 + 0.0im
                   0.0 + 0.0im
                   0.0 + 0.0im"><pre class="notranslate"><code>julia&gt; p = (2x-3)^2 * (4x+3) * x^2 * (x^2+1)
27*x^2 - 9*x^4 + 16*x^5 - 36*x^6 + 16*x^7

julia&gt; rational_roots(p)
{-3//4,0//1,0//1,3//2,3//2}

julia&gt; roots(p)
7-element Array{Complex{Float64},1}:
   -0.7499999999999999 + 0.0im
 3.885780586188048e-16 - 1.0000000000000009im
 3.885780586188048e-16 + 1.0000000000000009im
    1.4999999920796347 + 0.0im
    1.5000000079203661 + 0.0im
                   0.0 + 0.0im
                   0.0 + 0.0im
</code></pre></div>
<h2 dir="auto"><a id="user-content-calculus" class="anchor" aria-hidden="true" href="#calculus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Calculus</h2>
<p dir="auto"><code>derivative()</code> returns the derivative of a <code>SimplePolynomial</code>
or <code>SimpleRationalFunction</code>. We may also use <code>p'</code> for
<code>derivative(p)</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = x^5 - 3x + 2
2 - 3*x + x^5

julia&gt; derivative(p)
-3 + 5*x^4

julia&gt; p'
-3 + 5*x^4

julia&gt; f = (x^2-5)/(x+3)
(-5 + x^2) / (3 + x)

julia&gt; f'
(5 + 6*x + x^2) / (9 + 6*x + x^2)"><pre class="notranslate"><code>julia&gt; p = x^5 - 3x + 2
2 - 3*x + x^5

julia&gt; derivative(p)
-3 + 5*x^4

julia&gt; p'
-3 + 5*x^4

julia&gt; f = (x^2-5)/(x+3)
(-5 + x^2) / (3 + x)

julia&gt; f'
(5 + 6*x + x^2) / (9 + 6*x + x^2)
</code></pre></div>
<p dir="auto"><code>integral(p)</code> returns the integral of <code>p</code> with constant term zero.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = 1 + 3x - 5x^2
1 + 3*x - 5*x^2

julia&gt; integral(p)
x + 3//2*x^2 - 5//3*x^3

julia&gt; derivative(ans)
1 + 3*x - 5*x^2"><pre class="notranslate"><code>julia&gt; p = 1 + 3x - 5x^2
1 + 3*x - 5*x^2

julia&gt; integral(p)
x + 3//2*x^2 - 5//3*x^3

julia&gt; derivative(ans)
1 + 3*x - 5*x^2
</code></pre></div>
<p dir="auto">The integral of a rational funtion is not necessarily a rational
function; it is not implemented in this module.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; f = 1/(1+x^2)
1 / (1 + x^2)

julia&gt; integral(f)
ERROR: MethodError: no method matching integral(::SimpleRationalFunction)"><pre class="notranslate"><code>julia&gt; f = 1/(1+x^2)
1 / (1 + x^2)

julia&gt; integral(f)
ERROR: MethodError: no method matching integral(::SimpleRationalFunction)
</code></pre></div>
<h2 dir="auto"><a id="user-content-binomial-coefficient" class="anchor" aria-hidden="true" href="#binomial-coefficient"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Binomial coefficient</h2>
<p dir="auto">The <code>binomial</code> function is extended to work either <code>SimplePolynomial</code> or
<code>SimpleRationalFunction</code> upper arguments (and <code>Integer</code> lower arguments).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; x = getx()
x

julia&gt; p = binomial(x,3)
1//3*x - 1//2*x^2 + 1//6*x^3

julia&gt; p(10)
120//1

julia&gt; binomial(10,3)
120"><pre class="notranslate"><code>julia&gt; x = getx()
x

julia&gt; p = binomial(x,3)
1//3*x - 1//2*x^2 + 1//6*x^3

julia&gt; p(10)
120//1

julia&gt; binomial(10,3)
120
</code></pre></div>
<h2 dir="auto"><a id="user-content-conversion-between-simplepolynomial-and--polynomial" class="anchor" aria-hidden="true" href="#conversion-between-simplepolynomial-and--polynomial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Conversion between <code>SimplePolynomial</code> and  <code>Polynomial</code></h2>
<p dir="auto">The <code>Polynomials</code> module also defines polynomials with many additional
properties. However, those polynomials allow floating point coefficients.</p>
<p dir="auto">Conversion between a <code>SimplePolynomial</code>  and a <code>Polynomial</code>  is
simple:</p>
<ul dir="auto">
<li>If <code>p</code> is a <code>SimplePolynomial</code>, then <code>Polynomial(p)</code> is the corresponding
<code>Polynomial</code> type.</li>
<li>If <code>p</code> is a <code>Polynomial</code>, the <code>SimplePolynomial(p)</code> returns its
<code>SimplePolynomial</code> version. However, this will not work if the coefficients
in <code>p</code> are floating point.</li>
</ul>
</article></div>