<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplepolynomials" class="anchor" aria-hidden="true" href="#simplepolynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimplePolynomials</h1>
<p><a href="https://travis-ci.com/scheinerman/SimplePolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ca4076a6ea24f93848a3d7955c42811e7ff759ce1c4bd38ae068e120d715fe0/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f53696d706c65506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/SimplePolynomials.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This module defines two types:</p>
<ul>
<li><code>SimplePolynomial</code>: These are polynomials
with exact coefficients (integers, rationals, Gaussian integers, Gaussian
rationals, or <code>Mod</code>s). The objective is exactness perhaps at the
expense of computational efficiency.</li>
<li><code>SimpleRationalFunction</code>: These are fractions whose numerator and
denominator are <code>SimplePolynomial</code>s.</li>
</ul>
<h2><a id="user-content-caveat" class="anchor" aria-hidden="true" href="#caveat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveat</h2>
<p>The polynomials (and rational functions) in this module all have exact and
arbitrary size precision. That means there will not be rounding or overflow issues, but
the cost is performance. The <code>Polynomials</code> package is more efficient.
Other computer algebra packages may perform better.</p>
<h1><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics</h1>
<h2><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomials</h2>
<p>A <code>SimplePolynomial</code> is a polynomial in one variable with exact
coefficients. There are a few options to create a <code>SimplePolynomial</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SimplePolynomials

julia&gt; p = SimplePolynomial([2,-4,1])
2 - 4*x + x^2

julia&gt; p = SimplePolynomial(2,-4,1,0)
2 - 4*x + x^2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimplePolynomials

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">SimplePolynomial</span>([<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-c1">1</span>])
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">SimplePolynomial</span>(<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>The <code>getx()</code> function returns <code>SimplePolynomial(0,1)</code>. Assigning that
result to a variable named <code>x</code> makes creating polynomials rather
natural.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = getx()
x

julia&gt; p = 2 - 4x + x^2
2 - 4*x + x^2
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">getx</span>()
x

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">4</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>Polynomial coefficients may also be rational numbers, Gaussian integers,
Gaussian rationals, or modular numbers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 - im*x + 4
4 - im*x + 3*x^2

julia&gt; p = (3//2)x^2 - 4
-4//1 + 3//2*x^2

julia&gt; using Mods

julia&gt; p = Mod{17}(3) - 2x^2
Mod{17}(3) + Mod{17}(15)*x^2
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> im<span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span> <span class="pl-k">-</span> im<span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> (<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span>)x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">4</span>
<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Mods

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">3</span>) <span class="pl-k">-</span> <span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">3</span>) <span class="pl-k">+</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">15</span>)<span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>The coefficients of a <code>SimplePolynomial</code> may not be floating
point numbers.</p>
<h3><a id="user-content-coefficients" class="anchor" aria-hidden="true" href="#coefficients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Coefficients</h3>
<p>The coefficients of a <code>SimplePolynomial</code> can be accessed with the
<code>coeffs</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 1 -5x + 11x^2 + 4x^3
1 - 5*x + 11*x^2 + 4*x^3

julia&gt; coeffs(p)
4-element Array{Int64,1}:
  1
 -5
 11
  4
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">5</span>x <span class="pl-k">+</span> <span class="pl-c1">11</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>
<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">11</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">coeffs</span>(p)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">5</span>
 <span class="pl-c1">11</span>
  <span class="pl-c1">4</span></pre></div>
<p>Use square brackets to retrieve a coefficient
associated with a given power:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p[2]     # coefficient of x^2
11

julia&gt; p[0]     # constant term, the zero index is allowed
1

julia&gt; p[11]    # zero is returned if the index exceeds the degree
0

julia&gt; p[-1]    # negative indices are not allowed
ERROR: index [-1] must be nonnegative
"><pre>julia<span class="pl-k">&gt;</span> p[<span class="pl-c1">2</span>]     <span class="pl-c"><span class="pl-c">#</span> coefficient of x^2</span>
<span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> p[<span class="pl-c1">0</span>]     <span class="pl-c"><span class="pl-c">#</span> constant term, the zero index is allowed</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> p[<span class="pl-c1">11</span>]    <span class="pl-c"><span class="pl-c">#</span> zero is returned if the index exceeds the degree</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> p[<span class="pl-k">-</span><span class="pl-c1">1</span>]    <span class="pl-c"><span class="pl-c">#</span> negative indices are not allowed</span>
ERROR<span class="pl-k">:</span> index [<span class="pl-k">-</span><span class="pl-c1">1</span>] must be nonnegative</pre></div>
<p>Note that a <code>SimplePolynomial</code> is an immutable object and one
may not change its coefficients.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 - 5x +1
1 - 5*x + 3*x^2

julia&gt; p[1] = 6
ERROR: MethodError: no method matching setindex!(::SimplePolynomial, ::Int64, ::Int64)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">5</span>x <span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">6</span>
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">setindex!</span>(<span class="pl-k">::</span><span class="pl-c1">SimplePolynomial</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>)</pre></div>
<p>The <code>degree</code> function returns the degree of the polynomial and
<code>lead</code> returns the coefficient of that term.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; degree(p)
3

julia&gt; lead(p)
4
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">degree</span>(p)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lead</span>(p)
<span class="pl-c1">4</span></pre></div>
<p>Nonzero constant polynomials have degree zero. The zero polynomial
should have degree <code>-∞</code> but this is not an <code>Int</code>, so we return <code>-1</code>.
This is also the only case in which <code>lead</code> returns <code>0</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = SimplePolynomial(0)
0

julia&gt; degree(p)
-1

julia&gt; lead(p)
0
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">SimplePolynomial</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">degree</span>(p)
<span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lead</span>(p)
<span class="pl-c1">0</span></pre></div>
<p>The function <code>monic(p)</code> returns a <code>SimplePolynomial</code> formed
by dividing all coefficients by the leading term:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 4-8x + 2x^2
4 - 8*x + 2*x^2

julia&gt; monic(p)
2 - 4*x + x^2

julia&gt; p = 3x^2-5
-5 + 3*x^2

julia&gt; monic(p)
-5//3 + x^2
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">4</span><span class="pl-k">-</span><span class="pl-c1">8</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">8</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">monic</span>(p)
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">5</span>
<span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">monic</span>(p)
<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">3</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>The function <code>eltype</code> returns the Julia type of the coefficients.</p>
<h2><a id="user-content-rational-functions" class="anchor" aria-hidden="true" href="#rational-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rational Functions</h2>
<p>A <code>SimpleRationalFunction</code> is the ratio of two polynomials:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 3x + x^3
3*x + x^3

julia&gt; q = 1-x+x^2
1 - x + x^2

julia&gt; p/q
(3*x + x^3) / (1 - x + x^2)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">3</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>
<span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">-</span>x<span class="pl-k">+</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">1</span> <span class="pl-k">-</span> x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">/</span>q
(<span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>) <span class="pl-k">/</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<p>A <code>SimpleRationalFunction</code> is always represented as
the ratio of relatively prime polynomials; that is, any
common factors between numerator and denominator are cancelled.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = (x-1)*(x-2)*(x-3)
-6 + 11*x - 6*x^2 + x^3

julia&gt; q = (x-1)*(x+5)
-5 + 4*x + x^2

julia&gt; p/q
(6 - 5*x + x^2) / (5 + x)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> (x<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-k">-</span><span class="pl-c1">6</span> <span class="pl-k">+</span> <span class="pl-c1">11</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">6</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> (x<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(x<span class="pl-k">+</span><span class="pl-c1">5</span>)
<span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">/</span>q
(<span class="pl-c1">6</span> <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> (<span class="pl-c1">5</span> <span class="pl-k">+</span> x)</pre></div>
<p>Furthermore, the denominator of a <code>SimpleRationalFunction</code> is always a
<em>monic</em> polynomial; that is, the leading coefficient is one.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; (x-3)/(2x^2-5)
(-3//2 + 1//2*x) / (-5//2 + x^2)
"><pre>julia<span class="pl-k">&gt;</span> (x<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">/</span>(<span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">5</span>)
(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span><span class="pl-k">*</span>x) <span class="pl-k">/</span> (<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<p>Of course, division by zero is forbidden:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = x^2-5;

julia&gt; q = SimplePolynomial(0);

julia&gt; p/q
ERROR: Denominator cannot be zero
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">5</span>;

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">SimplePolynomial</span>(<span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> p<span class="pl-k">/</span>q
ERROR<span class="pl-k">:</span> Denominator cannot be zero</pre></div>
<h3><a id="user-content-numerator-and-denominator" class="anchor" aria-hidden="true" href="#numerator-and-denominator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Numerator and denominator</h3>
<p>Use <code>numerator</code> and <code>denominator</code> to extract the relevant
parts of a <code>SimpleRationalFunction</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = (x^2 - 3x + 2) / (x-4)
(2 - 3*x + x^2) / (-4 + x)

julia&gt; numerator(f)
2 - 3*x + x^2

julia&gt; denominator(f)
-4 + x
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span>) <span class="pl-k">/</span> (x<span class="pl-k">-</span><span class="pl-c1">4</span>)
(<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> (<span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-k">+</span> x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">numerator</span>(f)
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">denominator</span>(f)
<span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-k">+</span> x</pre></div>
<h3><a id="user-content-three-line--printing" class="anchor" aria-hidden="true" href="#three-line--printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Three-line  printing</h3>
<p>The <code>string3</code> function can be used to give a nice visualization
of a <code>SimpleRationalFunction</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = (x^2 - 3x + 2) / (x-4)
(2 - 3*x + x^2) / (-4 + x)

julia&gt; println(string3(f))
2 - 3*x + x^2
-------------
   -4 + x
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span>) <span class="pl-k">/</span> (x<span class="pl-k">-</span><span class="pl-c1">4</span>)
(<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> (<span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-k">+</span> x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">string3</span>(f))
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">-------------</span>
   <span class="pl-k">-</span><span class="pl-c1">4</span> <span class="pl-k">+</span> x</pre></div>
<h1><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations</h1>
<h2><a id="user-content-arithmetic" class="anchor" aria-hidden="true" href="#arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arithmetic</h2>
<p>The usual operations of addition <code>+</code>, subtraction <code>-</code>, multiplication <code>*</code>,
and division <code>/</code> may be used with any combination of exact numbers,
polynomials, or rational functions.</p>
<p>Exponentiation by an integer power may be performed for any
<code>SimplePolynomial</code> or <code>SimpleRationalFunction</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 1+x
1 + x

julia&gt; for k=-3:3
       println(p^k)
       end
1 / (1 + 3*x + 3*x^2 + x^3)
1 / (1 + 2*x + x^2)
1 / (1 + x)
1
1 + x
1 + 2*x + x^2
1 + 3*x + 3*x^2 + x^3
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">+</span>x
<span class="pl-c1">1</span> <span class="pl-k">+</span> x

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">3</span>
       <span class="pl-c1">println</span>(p<span class="pl-k">^</span>k)
       <span class="pl-k">end</span>
<span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>)
<span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> x)
<span class="pl-c1">1</span>
<span class="pl-c1">1</span> <span class="pl-k">+</span> x
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span></pre></div>
<p>For polynomials, division results in a <code>SimpleRationalFunction</code>.
Alternatively, use <code>diverm</code> to find the quotient and remainder:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = 3x^3 + 5x -1
-1 + 5*x + 3*x^3

julia&gt; b = x^2+3
3 + x^2

julia&gt; (q,r) = divrem(a,b)
(3*x, -1 - 4*x)

julia&gt; q*b + r == a
true
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>x <span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3</span>
<span class="pl-c1">3</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> (q,r) <span class="pl-k">=</span> <span class="pl-c1">divrem</span>(a,b)
(<span class="pl-c1">3</span><span class="pl-k">*</span>x, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x)

julia<span class="pl-k">&gt;</span> q<span class="pl-k">*</span>b <span class="pl-k">+</span> r <span class="pl-k">==</span> a
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-evaluation" class="anchor" aria-hidden="true" href="#evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluation</h2>
<p>Polynomials and rational functions behave as functions; they can be
evaluated as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 + 5x +1
1 + 5*x + 3*x^2

julia&gt; p(10)
351

julia&gt; p(0.5)  # evaluation with a float is permitted
4.25

julia&gt; f = p/(x+5)
(1 + 5*x + 3*x^2) / (5 + x)

julia&gt; f(10)
117//5

julia&gt; f(3.2 - 4.1im)   
4.575609756097562 - 9.812195121951218im
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>x <span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">351</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">0.5</span>)  <span class="pl-c"><span class="pl-c">#</span> evaluation with a float is permitted</span>
<span class="pl-c1">4.25</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> p<span class="pl-k">/</span>(x<span class="pl-k">+</span><span class="pl-c1">5</span>)
(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> (<span class="pl-c1">5</span> <span class="pl-k">+</span> x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">117</span><span class="pl-k">//</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3.2</span> <span class="pl-k">-</span> <span class="pl-c1">4.1im</span>)   
<span class="pl-c1">4.575609756097562</span> <span class="pl-k">-</span> <span class="pl-c1">9.812195121951218im</span></pre></div>
<p>The argument of a polynomial or simple rational function may be a square matrix.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = [ 2 3 ; 0 -1];

julia&gt; p = -2 - x + x^2;

julia&gt; p(A)
2×2 Array{BigInt,2}:
 0  0
 0  0
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [ <span class="pl-c1">2</span> <span class="pl-c1">3</span> ; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(A)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{BigInt,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<p>The argument of a polynomial or rational function may itself
be a polynomial or a rational function.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 3x^2 + 5x +1
1 + 5*x + 3*x^2

julia&gt; q = 2x-3
-3 + 2*x

julia&gt; p(q)
13 - 26*x + 12*x^2

julia&gt; 3q^2 + 5q + 1
13 - 26*x + 12*x^2
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">3</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>x <span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">2</span>x<span class="pl-k">-</span><span class="pl-c1">3</span>
<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(q)
<span class="pl-c1">13</span> <span class="pl-k">-</span> <span class="pl-c1">26</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">12</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span>q<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>q <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">13</span> <span class="pl-k">-</span> <span class="pl-c1">26</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">12</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>Beware that multiplication requires the <code>*</code> symbol. Observe:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; (x^2-2)*(x-3)
6 - 2*x - 3*x^2 + x^3

julia&gt; (x^2-2)(x-3)
7 - 6*x + x^2
"><pre>julia<span class="pl-k">&gt;</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-c1">6</span> <span class="pl-k">-</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">2</span>)(x<span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-c1">7</span> <span class="pl-k">-</span> <span class="pl-c1">6</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>In the second case, we are evaluating the function <code>(x^2-2)</code>
with the argument <code>(x-3)</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; (x-3)^2 - 2
7 - 6*x + x^2
"><pre>julia<span class="pl-k">&gt;</span> (x<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">2</span>
<span class="pl-c1">7</span> <span class="pl-k">-</span> <span class="pl-c1">6</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<h3><a id="user-content-conversion-to-a-function" class="anchor" aria-hidden="true" href="#conversion-to-a-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversion to a function</h3>
<p>Given <code>p</code>, the syntax <code>p(x)</code> evaluates <code>p</code> at <code>x</code>. Of course, <code>p</code>
is of type <code>SimplePolynomial</code> (or <code>SimpleRationalFunction</code>). If you
want a <code>Function</code> that evaluates <code>p</code>, use <code>make_function(p)</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = getx();

julia&gt; p = 5 + 2x + 4x^2
5 + 2*x + 4*x^2

julia&gt; p(10)
425

julia&gt; P = make_function(p)
#1 (generic function with 1 method)

julia&gt; P(10)
425
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">getx</span>();

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">4</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">4</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">425</span>

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">make_function</span>(p)
<span class="pl-c"><span class="pl-c">#</span>1 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">P</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">425</span></pre></div>
<h2><a id="user-content-gcd-and-lcm" class="anchor" aria-hidden="true" href="#gcd-and-lcm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GCD and LCM</h2>
<p>Given  <code>SimplePolynomial</code>s <code>a</code> and <code>b</code>, <code>gcd(a,b)</code> returns a greatest
common divisor of <code>a</code> and <code>b</code>. This is a polynomial of highest degree
that divides both <code>a</code> and <code>b</code> without remainder. Note that this is
not unique as a nonzero multiple of a GCD is also a GCD of the two
polynomials. The polynomial returned is always monic.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = (2x-1) * (x+5)
-5 + 9*x + 2*x^2

julia&gt; q = (2x-1) * (x^2-4)
4 - 8*x - x^2 + 2*x^3

julia&gt; gcd(p,q)
-1//2 + x
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> (<span class="pl-c1">2</span>x<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> (x<span class="pl-k">+</span><span class="pl-c1">5</span>)
<span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">9</span><span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> (<span class="pl-c1">2</span>x<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">4</span>)
<span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">8</span><span class="pl-k">*</span>x <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcd</span>(p,q)
<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x</pre></div>
<p>Similarly, <code>lcm(a,b)</code> returns a least common multiple of <code>a</code> and <code>b</code>.
As with <code>gcd</code>, this is not uniquely defined; we return a monic
least common multiple.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; lcm(p,q)
10//1 - 18//1*x - 13//2*x^2 + 9//2*x^3 + x^4
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lcm</span>(p,q)
<span class="pl-c1">10</span><span class="pl-k">//</span><span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">18</span><span class="pl-k">//</span><span class="pl-c1">1</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">13</span><span class="pl-k">//</span><span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">9</span><span class="pl-k">//</span><span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">4</span></pre></div>
<h2><a id="user-content-roots" class="anchor" aria-hidden="true" href="#roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Roots</h2>
<p>For polynomials, <code>roots(p)</code> returns a list of values <code>x</code> for which <code>p(x)==0</code>.
These are floating point and so are likely not to be exact.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = x^2-x-1
-1 - x + x^2

julia&gt; roots(p)
2-element Array{Float64,1}:
 -0.6180339887498948
  1.618033988749895

julia&gt; p.(ans)
2-element Array{Float64,1}:
 -1.1102230246251565e-16
  2.220446049250313e-16
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>x<span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span> x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(p)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.6180339887498948</span>
  <span class="pl-c1">1.618033988749895</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>.(ans)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.1102230246251565e-16</span>
  <span class="pl-c1">2.220446049250313e-16</span></pre></div>
<p>We can achieve greater accuracy using <code>newton_roots</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; newton_roots(p)
2-element Array{BigFloat,1}:
 -0.6180339887498948482045868343656381177203091798057628621354486227052604628189011
  1.61803398874989484820458683436563811772030917980576286213544862270526046281891

julia&gt; p.(ans)
2-element Array{BigFloat,1}:
 -8.636168555094444625386351862800399571116000364436281385023703470168591803162427e-78
  1.727233711018888925077270372560079914223200072887256277004740694033718360632485e-77
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">newton_roots</span>(p)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{BigFloat,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.6180339887498948482045868343656381177203091798057628621354486227052604628189011</span>
  <span class="pl-c1">1.61803398874989484820458683436563811772030917980576286213544862270526046281891</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>.(ans)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{BigFloat,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">8.636168555094444625386351862800399571116000364436281385023703470168591803162427e-78</span>
  <span class="pl-c1">1.727233711018888925077270372560079914223200072887256277004740694033718360632485e-77</span></pre></div>
<p>The function <code>newton_roots</code> calls <code>newton_solve</code> for each root returned by <code>roots</code>. See the
help messages.</p>
<h3><a id="user-content-rational-roots" class="anchor" aria-hidden="true" href="#rational-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rational roots</h3>
<p>The function <code>rational_roots</code> returns the <code>Multiset</code> of all rational
roots of a polynomial.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = (2x-3)^2 * (4x+3) * x^2 * (x^2+1)
27*x^2 - 9*x^4 + 16*x^5 - 36*x^6 + 16*x^7

julia&gt; rational_roots(p)
{-3//4,0//1,0//1,3//2,3//2}

julia&gt; roots(p)
7-element Array{Complex{Float64},1}:
   -0.7499999999999999 + 0.0im
 3.885780586188048e-16 - 1.0000000000000009im
 3.885780586188048e-16 + 1.0000000000000009im
    1.4999999920796347 + 0.0im
    1.5000000079203661 + 0.0im
                   0.0 + 0.0im
                   0.0 + 0.0im
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> (<span class="pl-c1">2</span>x<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> (<span class="pl-c1">4</span>x<span class="pl-k">+</span><span class="pl-c1">3</span>) <span class="pl-k">*</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">1</span>)
<span class="pl-c1">27</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">9</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">16</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">5</span> <span class="pl-k">-</span> <span class="pl-c1">36</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">6</span> <span class="pl-k">+</span> <span class="pl-c1">16</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rational_roots</span>(p)
{<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">4</span>,<span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span>,<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(p)
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{Complex{Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
   <span class="pl-k">-</span><span class="pl-c1">0.7499999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">3.885780586188048e-16</span> <span class="pl-k">-</span> <span class="pl-c1">1.0000000000000009im</span>
 <span class="pl-c1">3.885780586188048e-16</span> <span class="pl-k">+</span> <span class="pl-c1">1.0000000000000009im</span>
    <span class="pl-c1">1.4999999920796347</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
    <span class="pl-c1">1.5000000079203661</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
                   <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
                   <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<h2><a id="user-content-calculus" class="anchor" aria-hidden="true" href="#calculus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Calculus</h2>
<p><code>derivative()</code> returns the derivative of a <code>SimplePolynomial</code>
or <code>SimpleRationalFunction</code>. We may also use <code>p'</code> for
<code>derivative(p)</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = x^5 - 3x + 2
2 - 3*x + x^5

julia&gt; derivative(p)
-3 + 5*x^4

julia&gt; p'
-3 + 5*x^4

julia&gt; f = (x^2-5)/(x+3)
(-5 + x^2) / (3 + x)

julia&gt; f'
(5 + 6*x + x^2) / (9 + 6*x + x^2)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">5</span> <span class="pl-k">-</span> <span class="pl-c1">3</span>x <span class="pl-k">+</span> <span class="pl-c1">2</span>
<span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">derivative</span>(p)
<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> p<span class="pl-k">'</span>
<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">5</span>)<span class="pl-k">/</span>(x<span class="pl-k">+</span><span class="pl-c1">3</span>)
(<span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> (<span class="pl-c1">3</span> <span class="pl-k">+</span> x)

julia<span class="pl-k">&gt;</span> f<span class="pl-k">'</span>
(<span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">6</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> (<span class="pl-c1">9</span> <span class="pl-k">+</span> <span class="pl-c1">6</span><span class="pl-k">*</span>x <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<p><code>integral(p)</code> returns the integral of <code>p</code> with constant term zero.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = 1 + 3x - 5x^2
1 + 3*x - 5*x^2

julia&gt; integral(p)
x + 3//2*x^2 - 5//3*x^3

julia&gt; derivative(ans)
1 + 3*x - 5*x^2
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>x <span class="pl-k">-</span> <span class="pl-c1">5</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">integral</span>(p)
x <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">3</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">derivative</span>(ans)
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span>x <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<p>The integral of a rational funtion is not necessarily a rational
function; it is not implemented in this module.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = 1/(1+x^2)
1 / (1 + x^2)

julia&gt; integral(f)
ERROR: MethodError: no method matching integral(::SimpleRationalFunction)
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">integral</span>(f)
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">integral</span>(<span class="pl-k">::</span><span class="pl-c1">SimpleRationalFunction</span>)</pre></div>
<h2><a id="user-content-conversion-between-simplepolynomial-and--polynomial" class="anchor" aria-hidden="true" href="#conversion-between-simplepolynomial-and--polynomial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversion between <code>SimplePolynomial</code> and  <code>Polynomial</code></h2>
<p>The <code>Polynomials</code> module also defines polynomials with many additional
properties. However, those polynomials allow floating point coefficients.</p>
<p>Conversion between a <code>SimplePolynomial</code>  and a <code>Polynomial</code>  is
simple:</p>
<ul>
<li>If <code>p</code> is a <code>SimplePolynomial</code>, then <code>Polynomial(p)</code> is the corresponding
<code>Polynomial</code> type.</li>
<li>If <code>p</code> is a <code>Polynomial</code>, the <code>SimplePolynomial(p)</code> returns its
<code>SimplePolynomial</code> version. However, this will not work if the coefficients
in <code>p</code> are floating point.</li>
</ul>
</article></div>