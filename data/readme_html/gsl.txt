<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gsljl" class="anchor" aria-hidden="true" href="#gsljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GSL.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaMath/GSL.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaMath/GSL.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width: 100%;"></a>
<a href="https://cloud.drone.io/JuliaMath/GSL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2640ec730d256298196bc71e487b7a789629b8cbce6ea6faac9048b2920b749d/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f4a756c69614d6174682f47534c2e6a6c2f7374617475732e7376673f7265663d726566732f68656164732f6d6173746572" alt="drone.io" data-canonical-src="https://cloud.drone.io/api/badges/JuliaMath/GSL.jl/status.svg?ref=refs/heads/master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaMath/GSL.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/544ab693b21ffc2fe4622fb4cd4b3aa89e92aaafc9fd1d2ef048874ef5ae6d65/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614d6174682f47534c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaMath/GSL.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Julia wrapper for the <a href="https://www.gnu.org/software/gsl/doc/html/index.html" rel="nofollow">GNU Scientific
Library</a> (GSL), for Julia v1.0+.
Currently uses GSL v2.7.</p>
<h2 dir="auto"><a id="user-content-structure" class="anchor" aria-hidden="true" href="#structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Structure</h2>
<p dir="auto">The library tries to provide Julia interfaces to all the functions, types and symbols
defined in the <a href="https://www.gnu.org/software/gsl/doc/html/index.html" rel="nofollow">GSL
documentation</a>.</p>
<ul dir="auto">
<li>Functions are interfaced without the <code>gsl_</code> prefix, e.g. <code>sf_legendre_Pl</code> and <code>vector_alloc</code>.</li>
<li>Types, global variables and most constants are interfaced using their original GSL name, e.g. <code>gsl_vector</code>, <code>gsl_root_fdfsolver_newton</code> and <code>GSL_SUCCESS</code>.</li>
<li>The physical constants <code>GSL_CONST_*</code> can be found under the namespace <code>GSL.Const</code>, e.g. <code>GSL.Const.MKSA_ANGSTROM</code>.</li>
</ul>
<p dir="auto">Some functions have a secondary wrapper on top of the GSL interface, to make Julia usage more convenient, for example by allocating the output array. The low-level C interface to GSL can still be accessed under the namespace <code>GSL.C</code>. Some examples of functions that are different in the low-level interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GSL.strerror(gsl_errno) -&gt; String
GSL.C.strerror(gsl_errno) -&gt; Ptr{Cchar}
and
GSL.sf_legendre_array(norm, lmax, x) -&gt; Array{Float64}
GSL.C.sf_legendre_array(norm, lmax, x, result_array) -&gt; Cint"><pre>GSL<span class="pl-k">.</span><span class="pl-c1">strerror</span>(gsl_errno) <span class="pl-k">-&gt;</span> String
GSL<span class="pl-k">.</span>C<span class="pl-k">.</span><span class="pl-c1">strerror</span>(gsl_errno) <span class="pl-k">-&gt;</span> Ptr{Cchar}
and
GSL<span class="pl-k">.</span><span class="pl-c1">sf_legendre_array</span>(norm, lmax, x) <span class="pl-k">-&gt;</span> Array{Float64}
GSL<span class="pl-k">.</span>C<span class="pl-k">.</span><span class="pl-c1">sf_legendre_array</span>(norm, lmax, x, result_array) <span class="pl-k">-&gt;</span> Cint</pre></div>
<p dir="auto">Parts of GSL are not interfaced to, since they provide functionality already existing in
Julia. These are functions with prefixes <code>gsl_spmatrix_</code>, <code>gsl_splinalg_</code>, <code>gsl_spblas_</code>,
<code>gsl_eigen_</code>, <code>gsl_sort</code>, <code>gsl_blas_</code>,
<code>cblas_</code>, <code>gsl_fft_</code>, and <code>gsl_linalg_</code>.
In addition, interfaces to <code>gsl_bst_</code> functions are currently missing.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">See examples in <a href="examples/">examples/</a> and tests <a href="test/">test/</a> for more examples.</p>
<h3 dir="auto"><a id="user-content-special-function-with-result-struct" class="anchor" aria-hidden="true" href="#special-function-with-result-struct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Special function with result struct</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Direct call
sf_legendre_P3(0.5)
# Output: -0.4375

# With result struct that stores value and error:
sf_legendre_P3_e(0.5)
# Output: gsl_sf_result_struct(-0.4375, 3.3306690738754696e-16)

# Low-level call with result struct as argument:
result = gsl_sf_result(0,0)
GSL.C.sf_legendre_P3_e(0.5, result)
# Output: GSL_SUCCESS
# result = gsl_sf_result_struct(-0.4375, 3.3306690738754696e-16)"><pre><span class="pl-c"><span class="pl-c">#</span> Direct call</span>
<span class="pl-c1">sf_legendre_P3</span>(<span class="pl-c1">0.5</span>)
<span class="pl-c"><span class="pl-c">#</span> Output: -0.4375</span>

<span class="pl-c"><span class="pl-c">#</span> With result struct that stores value and error:</span>
<span class="pl-c1">sf_legendre_P3_e</span>(<span class="pl-c1">0.5</span>)
<span class="pl-c"><span class="pl-c">#</span> Output: gsl_sf_result_struct(-0.4375, 3.3306690738754696e-16)</span>

<span class="pl-c"><span class="pl-c">#</span> Low-level call with result struct as argument:</span>
result <span class="pl-k">=</span> <span class="pl-c1">gsl_sf_result</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)
GSL<span class="pl-k">.</span>C<span class="pl-k">.</span><span class="pl-c1">sf_legendre_P3_e</span>(<span class="pl-c1">0.5</span>, result)
<span class="pl-c"><span class="pl-c">#</span> Output: GSL_SUCCESS</span>
<span class="pl-c"><span class="pl-c">#</span> result = gsl_sf_result_struct(-0.4375, 3.3306690738754696e-16)</span></pre></div>
<h3 dir="auto"><a id="user-content-special-function-with-array-output" class="anchor" aria-hidden="true" href="#special-function-with-array-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Special function with array output</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = 0.5
lmax = 4
result = sf_legendre_array(GSL_SF_LEGENDRE_SPHARM, lmax, x)
# Equivalent using low-level interface:
n = sf_legendre_array_n(lmax)
result = Array{Float64}(undef, n)
GSL.C.sf_legendre_array(GSL_SF_LEGENDRE_SPHARM, lmax, x, result)
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
lmax <span class="pl-k">=</span> <span class="pl-c1">4</span>
result <span class="pl-k">=</span> <span class="pl-c1">sf_legendre_array</span>(GSL_SF_LEGENDRE_SPHARM, lmax, x)
<span class="pl-c"><span class="pl-c">#</span> Equivalent using low-level interface:</span>
n <span class="pl-k">=</span> <span class="pl-c1">sf_legendre_array_n</span>(lmax)
result <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, n)
GSL<span class="pl-k">.</span>C<span class="pl-k">.</span><span class="pl-c1">sf_legendre_array</span>(GSL_SF_LEGENDRE_SPHARM, lmax, x, result)
</pre></div>
<h3 dir="auto"><a id="user-content-root-finding" class="anchor" aria-hidden="true" href="#root-finding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Root finding</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f = x -&gt; x^5+1
df = x -&gt; 5*x^4
fdf = @gsl_function_fdf(f, df)
solver = root_fdfsolver_alloc(gsl_root_fdfsolver_newton)
root_fdfsolver_set(solver, fdf, -2)
while abs(f(root_fdfsolver_root(solver))) &gt; 1e-10
    root_fdfsolver_iterate(solver)
end
println(&quot;x = &quot;, root_fdfsolver_root(solver))
# Output: x = -1.0000000000104232"><pre>f <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> x<span class="pl-k">^</span><span class="pl-c1">5</span><span class="pl-k">+</span><span class="pl-c1">1</span>
df <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">5</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">4</span>
fdf <span class="pl-k">=</span> <span class="pl-c1">@gsl_function_fdf</span>(f, df)
solver <span class="pl-k">=</span> <span class="pl-c1">root_fdfsolver_alloc</span>(gsl_root_fdfsolver_newton)
<span class="pl-c1">root_fdfsolver_set</span>(solver, fdf, <span class="pl-k">-</span><span class="pl-c1">2</span>)
<span class="pl-k">while</span> <span class="pl-c1">abs</span>(<span class="pl-c1">f</span>(<span class="pl-c1">root_fdfsolver_root</span>(solver))) <span class="pl-k">&gt;</span> <span class="pl-c1">1e-10</span>
    <span class="pl-c1">root_fdfsolver_iterate</span>(solver)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>x = <span class="pl-pds">"</span></span>, <span class="pl-c1">root_fdfsolver_root</span>(solver))
<span class="pl-c"><span class="pl-c">#</span> Output: x = -1.0000000000104232</span></pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Extra functionality defined in this package:</p>
<ul dir="auto">
<li>Convenience functions <code>hypergeom</code> and <code>hypergeom_e</code> for the hypergeometric functions.</li>
<li>Function wrapping macros <code>@gsl_function</code>, <code>@gsl_function_fdf</code>, <code>@gsl_multiroot_function</code> and <code>@gsl_multiroot_function_fdf</code> that are used for packaging Julia functions so that they can be passed to GSL.</li>
<li>Functions <code>wrap_gsl_vector</code> and <code>wrap_gsl_matrix</code> that return a Julia array or matrix pointing to the data in a <code>gsl_vector</code> or <code>gsl_matrix</code>.</li>
</ul>
<p dir="auto">In addition, some effort has been put into giving most types and functions proper docstrings, e.g.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="help?&gt; GSL.wavelet_free
  wavelet_free(w) -&gt; Cvoid

  C signature: void gsl_wavelet_free (gsl_wavelet * w)

  GSL documentation:

  void gsl_wavelet_free (gsl_wavelet * w)
  –––––––––––––––––––––––––––––––––––––––––

  │  This function frees the wavelet object w."><pre class="notranslate"><code>help?&gt; GSL.wavelet_free
  wavelet_free(w) -&gt; Cvoid

  C signature: void gsl_wavelet_free (gsl_wavelet * w)

  GSL documentation:

  void gsl_wavelet_free (gsl_wavelet * w)
  –––––––––––––––––––––––––––––––––––––––––

  │  This function frees the wavelet object w.
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="help?&gt; GSL.gsl_wavelet
  mutable struct gsl_wavelet
      type::Ptr{gsl_wavelet_type}
      h1::Ptr{Cdouble}
      g1::Ptr{Cdouble}
      h2::Ptr{Cdouble}
      g2::Ptr{Cdouble}
      nc::Csize_t
      offset::Csize_t
  end

  GSL documentation:

  gsl_wavelet
  –––––––––––––

  │  This structure contains the filter coefficients defining the wavelet and any associated offset parameters."><pre class="notranslate"><code>help?&gt; GSL.gsl_wavelet
  mutable struct gsl_wavelet
      type::Ptr{gsl_wavelet_type}
      h1::Ptr{Cdouble}
      g1::Ptr{Cdouble}
      h2::Ptr{Cdouble}
      g2::Ptr{Cdouble}
      nc::Csize_t
      offset::Csize_t
  end

  GSL documentation:

  gsl_wavelet
  –––––––––––––

  │  This structure contains the filter coefficients defining the wavelet and any associated offset parameters.
</code></pre></div>
<h2 dir="auto"><a id="user-content-behind-the-scenes" class="anchor" aria-hidden="true" href="#behind-the-scenes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Behind the scenes</h2>
<ul dir="auto">
<li>All interface code in <a href="src/gen">src/gen</a> is created by running the script
<a href="gen/makewrappers.jl">gen/makewrappers.jl</a>, which attempts to parse the GSL headers
using regular expressions.</li>
<li>Heuristics for creating convenience functions are in
<a href="gen/heuristic.jl">gen/heuristic.jl</a>.</li>
<li>Docstrings are created from the GSL docs in <a href="gen/readdocs.jl">gen/readdocs.jl</a>.</li>
<li>Hand-written convenience functions are in <a href="src/manual_wrappers.jl">src/manual_wrappers.jl</a>.</li>
</ul>
</article></div>