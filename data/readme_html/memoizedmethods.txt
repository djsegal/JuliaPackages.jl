<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-memoizedmethodsjl" class="anchor" aria-hidden="true" href="#memoizedmethodsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MemoizedMethods.jl</h1>

<p dir="auto"><a href="https://github.com/peterahrens/MemoizedMethods.jl/actions"><img src="https://github.com/peterahrens/MemoizedMethods.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/peterahrens/MemoizedMethods.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/27d2e3d445f0ffd7009ab03e436152ffce52fb86a23337ff5b0011ca70910f13/68747470733a2f2f636f6465636f762e696f2f67682f7065746572616872656e732f4d656d6f697a65644d6574686f64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/peterahrens/MemoizedMethods.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Methodwise memoization for Julia. Use any function definition syntax at any scope! Specialize custom dictionary types with straightforward syntax! Don't compute the same thing twice!</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MemoizedMethods
@memoize function f(x, y)
	println(&quot;run&quot;)
	x + y
end"><pre><span class="pl-k">using</span> MemoizedMethods
<span class="pl-c1">@memoize</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x, y)
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
	x <span class="pl-k">+</span> y
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(1, 1)
run
2

julia&gt; f(1, 2)
run
3

julia&gt; f(1, 1)
2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
run
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
run
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span></pre></div>
<p dir="auto">By default, MemoizedMethods.jl uses an <a href="https://docs.julialang.org/en/v1/base/collections/#Base.IdDict" rel="nofollow"><code>IdDict</code></a> as a cache, but you can specify an expression that evaluates to a cache of your very own, so long as it supports the methods <code>Base.get!</code> and <code>Base.empty!</code>. If you want arguments to be treated as equivalent when they are <code>==</code>, you might use a <code>Dict</code> instead (it's quite tricky to guarantee the result is constant over args that are <code>==</code>, note that <code>true == 1 == 1.0</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@memoize Dict() function g(x)
	println(&quot;run&quot;)
	x
end"><pre><span class="pl-c1">@memoize</span> <span class="pl-c1">Dict</span>() <span class="pl-k">function</span> <span class="pl-en">g</span>(x)
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
	x
<span class="pl-k">end</span></pre></div>
<p dir="auto">The variables <code>__Key__</code> and <code>__Value__</code> are available to the constructor expression, containing syntactically determined type bounds on the keys and values used by MemoizedMethods.jl. Here's an example using <a href="https://github.com/JuliaCollections/LRUCache.jl">LRUCache.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LRUCache
@memoize LRU{__Key__,__Value__}(maxsize=2) function g(x, y)
    println(&quot;run&quot;)
    x + y
end"><pre><span class="pl-k">using</span> LRUCache
<span class="pl-c1">@memoize</span> <span class="pl-c1">LRU</span><span class="pl-c1">{__Key__,__Value__}</span>(maxsize<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">function</span> <span class="pl-en">g</span>(x, y)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
    x <span class="pl-k">+</span> y
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; g(1,2)
run
3

julia&gt; g(1,2)
3

julia&gt; g(2,2)
run
4

julia&gt; g(2,3)
run
5

julia&gt; g(1,2)
run
3

julia&gt; g(2,3)
5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
run
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
run
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
run
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
run
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">5</span></pre></div>
<p dir="auto">You can look up caches with the function <code>memories</code>, and clear caches with the function <code>forget!</code>, both of which take the same arguments as the
function <code>Base.which</code>. You can also directly specify a <code>Base.Method</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; memories(g, Tuple{Any})
Dict{Any,Any}()

julia&gt; memories(g, Tuple{Any, Any})
LRU{Tuple{Any,Any},Any} with 2 entries:
  (2, 3) =&gt; 5
  (1, 2) =&gt; 3

julia&gt; g(2,3)
5

julia&gt; map(forget!, methods(g))

julia&gt; g(2,3)
run
5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">memories</span>(g, Tuple{Any})
<span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">memories</span>(g, Tuple{Any, Any})
LRU{Tuple{Any,Any},Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(forget!, <span class="pl-c1">methods</span>(g))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
run
<span class="pl-c1">5</span></pre></div>
<h2 dir="auto"><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details</h2>
<p dir="auto">MemoizedMethods works on every function declaration in global and local scope, including lambdas, callable types and objects, and inner constructors. Each method and scope is memoized with a separate cache. When an argument is unnamed, MemoizedMethods uses only the type of the argument as a key to the cache. Callable types and callable objects are keyed as an extra first argument.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct F{A}
	a::A
end
@memoize function (f::F{A})(b, ::C) where {A, C}
	println(&quot;run&quot;)
	(f.a + b, C)
end"><pre><span class="pl-k">struct</span> F{A}
	a<span class="pl-k">::</span><span class="pl-c1">A</span>
<span class="pl-k">end</span>
<span class="pl-c1">@memoize</span> <span class="pl-k">function</span> (f<span class="pl-k">::</span><span class="pl-c1">F{A}</span>)(b, <span class="pl-k">::</span><span class="pl-c1">C</span>) <span class="pl-k">where</span> {A, C}
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
	(f<span class="pl-k">.</span>a <span class="pl-k">+</span> b, C)
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; F(1)(1, &quot;hello&quot;)
run
(2, String)

julia&gt; F(1)(1, &quot;goodbye&quot;)
(2, String)

julia&gt; F(1)(2, &quot;goodbye&quot;)
run
(3, String)

julia&gt; F(1)(2, false)
run
(3, Bool)

julia&gt; F(2)(2, false)
run
(4, Bool)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">F</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)
run
(<span class="pl-c1">2</span>, String)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">F</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>goodbye<span class="pl-pds">"</span></span>)
(<span class="pl-c1">2</span>, String)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">F</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>goodbye<span class="pl-pds">"</span></span>)
run
(<span class="pl-c1">3</span>, String)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">F</span>(<span class="pl-c1">1</span>)(<span class="pl-c1">2</span>, <span class="pl-c1">false</span>)
run
(<span class="pl-c1">3</span>, Bool)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">F</span>(<span class="pl-c1">2</span>)(<span class="pl-c1">2</span>, <span class="pl-c1">false</span>)
run
(<span class="pl-c1">4</span>, Bool)</pre></div>
<p dir="auto">Each scope of an inner function gets its own cache. MemoizedMethods avoids tracking inner caches so that that they can be garbage collected. Thus, you can't reference inner caches with <code>Method</code> objects. To clear the cache of a closure, you must pass an instance of the closure itself to <code>forget!</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function h(x)
	@memoize function f(y)
		println(&quot;run&quot;)
		x + y
	end
end
f1 = h(1)
f2 = h(2)"><pre><span class="pl-k">function</span> <span class="pl-en">h</span>(x)
	<span class="pl-c1">@memoize</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(y)
		<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
		x <span class="pl-k">+</span> y
	<span class="pl-k">end</span>
<span class="pl-k">end</span>
f1 <span class="pl-k">=</span> <span class="pl-c1">h</span>(<span class="pl-c1">1</span>)
f2 <span class="pl-k">=</span> <span class="pl-c1">h</span>(<span class="pl-c1">2</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f1(3)
run
4

julia&gt; f1(3)
4

julia&gt; f2(3)
run
5

julia&gt; f2(3)
5

julia&gt; forget!(f1, Tuple{Any})

julia&gt; f1(3)
run
4

julia&gt; f2(3)
5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">f1</span>(<span class="pl-c1">3</span>)
run
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f1</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f2</span>(<span class="pl-c1">3</span>)
run
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f2</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">forget!</span>(f1, Tuple{Any})

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f1</span>(<span class="pl-c1">3</span>)
run
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f2</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">5</span></pre></div>
<p dir="auto">MemoizedMethods expands to a function that closes over a variable holding the cache. The cache is also referenced in a global structure for later lookups. If a method is overwritten at global scope, MemoizedMethods automatically calls <code>empty!</code> on the old cache. Roughly, our starter example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@memoize function f(x, y)
	println(&quot;run&quot;)
	x + y
end"><pre><span class="pl-c1">@memoize</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x, y)
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
	x <span class="pl-k">+</span> y
<span class="pl-k">end</span></pre></div>
<p dir="auto">expands to something like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="local cache = IdDict()
function _f(x, y)
	println(&quot;run&quot;)
	x + y
end
function f(x, y)
	get!(cache, (x, y)) do
		_f(x, y)
	end
end"><pre><span class="pl-k">local</span> cache <span class="pl-k">=</span> <span class="pl-c1">IdDict</span>()
<span class="pl-k">function</span> <span class="pl-en">_f</span>(x, y)
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>run<span class="pl-pds">"</span></span>)
	x <span class="pl-k">+</span> y
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(x, y)
	<span class="pl-c1">get!</span>(cache, (x, y)) <span class="pl-k">do</span>
		<span class="pl-c1">_f</span>(x, y)
	<span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Thanks</h2>
<p dir="auto">This package was forked from <a href="https://github.com/JuliaCollections/Memoize.jl">Memoize.jl</a> to support extra corner cases and features. Thanks to all of the Memoize.jl contributors.</p>
</article></div>