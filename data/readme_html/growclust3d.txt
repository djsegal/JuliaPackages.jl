<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-growclust3djl" class="anchor" aria-hidden="true" href="#growclust3djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GrowClust3D.jl</h1>
<p dir="auto">This repository hosts a Julia implementation of the GrowClust program for relative relocation of earthquake hypocenters based on waveform cross-correlation data. The vision for this program is to provide more flexibility and 3D velocity model capabilities than the original Fortran90 source code. Complete documentation is available here <a href="https://github.com/dttrugman/GrowClust3D/wiki/Documentation">https://github.com/dttrugman/GrowClust3D/wiki/Documentation</a>.</p>
<p dir="auto">If you use this code in your research, please cite the following paper describing the new code and its application:</p>
<p dir="auto">Daniel T. Trugman, Calum J. Chamberlain, Alexandros Savvaidis, Anthony Lomax; GrowClust3D.jl: A Julia Package for the Relative Relocation of Earthquake Hypocenters Using 3D Velocity Models. Seismological Research Letters 2022; doi: <a href="https://doi.org/10.1785/0220220193" rel="nofollow">https://doi.org/10.1785/0220220193</a></p>
<hr>
<p dir="auto">The (unregistered) package can be installed using the Julia Pkg manager:</p>
<p dir="auto"><code> pkg&gt; add https://github.com/dttrugman/GrowClust3D.jl</code></p>
<p dir="auto">[Note, to download a local copy of this repository, try <code>git clone https://github.com/dttrugman/GrowClust3D.jl</code>.]</p>
<p dir="auto">Once installed, please do run the test set that checks your installation by running a suite of test problems:</p>
<p dir="auto"><code> pkg&gt; test GrowClust3D</code></p>
<p dir="auto"><strong>Note:</strong> The GrowClust3D software was finalized using Julia v1.8. It is recommended to use this version or later; older versions may work but there can be compatibility issues with the packages GrowClust3D depends on. For example, Proj.jl requires v1.6 or later at present writing.</p>
<hr>
<p dir="auto">The <code>examples/</code> directory has two different Julia (.jl) "run/driver" scripts: <code>run_growclust3D.jl</code> as a reference example for typical usage on a single processor, and <code>run_growclust3D-MP.jl</code> which is similar in spirit but designed for multiprocessing on multiple cores. These two .jl scripts can be copied and reused as examples for any generic GrowClust3D problem with little/no modification.</p>
<p dir="auto">The primary way to tailor GrowClust3D to your dataset is by modifying the input files. With this in mind, in <code>examples/</code> there are four different example input (.inp) files related to the Spanish Springs, Nevada earthquake sequence. Any of the input files can be paired with either of the two run scripts. The example input files are summarized as follows:</p>
<ol dir="auto">
<li><code>example.trace1D.inp</code>: example raytracing a 1D velocity model</li>
<li><code>example.nllgrid1D.inp</code>: example using precomputed (NonLinLoc) 1D travel time grid</li>
<li><code>example.nllgrid3D.inp</code>: example using precomputed (NonLinLoc) 3D travel time grid (<strong>see note below</strong>)</li>
<li><code>example.nboot100.inp</code>: example with bootstrapping (e.g. to test parallelization)</li>
</ol>
<p dir="auto">Example 1 uses internal ray-tracing codes and emulates the classic GrowClust example from the original Trugman and Shearer (2017) publication. Examples 2 and 3 use 1D and (quasi)-3D travel-time grids generated by NonLinLoc (<a href="https://github.com/alomax/NonLinLoc">https://github.com/alomax/NonLinLoc</a>) from an equivalent velocity model. Example 4 is identical to Example 1 but with bootstrapping turned on. This is useful for testing the parallelization described below.</p>
<p dir="auto"><strong>Note:</strong> To run Example 3, you will first need to generate the 3D travel time grids. If NonLinLoc is installed and its source files added to your path, simply navigate to the <code>examples/</code> directory and run the driver script:</p>
<p dir="auto"><code>julia make_nllgrids.jl</code></p>
<p dir="auto">This can also be used to regenerate the grids for Example 2. The reason why the 3D grids needed for Example 3 are not on the repo is that they take up a lot of memory, making it hard to pull or sync the repository.</p>
<hr>
<p dir="auto">The central difference between the two example run (.jl) scripts is in their mode of parallelization. The <code>run_growclust3D.jl</code> script can use multithreading on a single computational core to accelerate bootstrap uncertainty analysis. This is useful but limited to the number of threads accessible. The <code>run_growclust3D-MP.jl</code> script can use multiprocessing to further accelerate these calculations in cases where multiple cores are available (e.g., runs on a computing cluster). Generally, if sufficient resources are available, multiprocessing will be faster than multithreading (especially for large datasets) due to memory considerations. For most use cases, the computational overhead in transferring data to the additional processors is negligible compared to additional compute power. Below are some example use cases of the codes:</p>
<p dir="auto">Simple examples without bootstrapping (good for testing):</p>
<p dir="auto"><code>julia run_growclust3D.jl example.serial1D.inp</code></p>
<p dir="auto"><code>julia run_growclust3D.jl example.nllgrid1D.inp</code></p>
<p dir="auto"><code>julia run_growclust3D.jl example.nllgrid3D.inp</code></p>
<p dir="auto">Multithreading and Multiprocessing examples:</p>
<p dir="auto"><code>julia -t4 run_growclust3D.jl example.nboot100.inp</code></p>
<p dir="auto"><code>julia -p10 run_growclust3D-MP.jl example.nboot100.inp</code></p>
<p dir="auto">In the first case above, I request 4 total threads. In the second, I request 10 processes (in addition to main). In either case, the user must request additional threads or processes to invoke parallelization.</p>
</article></div>