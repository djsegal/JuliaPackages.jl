<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://vincent-picaud.github.io/GnuplotScripting.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://vincent-picaud.github.io/GnuplotScripting.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/vincent-picaud/GnuplotScripting.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/vincent-picaud/GnuplotScripting.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-gnuplotscriptingjl" class="anchor" aria-hidden="true" href="#gnuplotscriptingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GnuplotScripting.jl</h1>
<p dir="auto">An <strong>easy to use</strong> and <strong>simple</strong> <code>gnuplot</code> wrapping that allows you
to:</p>
<ul dir="auto">
<li>perform direct rendering of Gnuplot plots from Julia,</li>
<li>create and save Gnuplot scripts with embedded data,</li>
<li>easily export Gnuplot figures.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GnuplotScripting

# create a gnuplot script
#
gp = GnuplotScript()

# Fake data
#
X=[-pi:0.1:pi;];
Ys =sin.(X);
Yc =cos.(X);

# embed data into the script
#
id=register_data(gp,hcat(X,Ys,Yc))

# usual gnuplot command
#
free_form(gp,&quot;replot '$id' u 1:3 w l t 'cos'&quot;)
free_form(gp,&quot;replot '$id' u 1:2 w l t 'sin'&quot;)

# png export of the fig
#
export_png(&quot;fig.png&quot;,gp)

# write gnuplot script
#
write_script(&quot;gnuplot_script.gp&quot;,gp)"><pre><span class="pl-k">using</span> GnuplotScripting

<span class="pl-c"><span class="pl-c">#</span> create a gnuplot script</span>
<span class="pl-c"><span class="pl-c">#</span></span>
gp <span class="pl-k">=</span> <span class="pl-c1">GnuplotScript</span>()

<span class="pl-c"><span class="pl-c">#</span> Fake data</span>
<span class="pl-c"><span class="pl-c">#</span></span>
X<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">pi</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">pi</span>;];
Ys <span class="pl-k">=</span><span class="pl-c1">sin</span>.(X);
Yc <span class="pl-k">=</span><span class="pl-c1">cos</span>.(X);

<span class="pl-c"><span class="pl-c">#</span> embed data into the script</span>
<span class="pl-c"><span class="pl-c">#</span></span>
id<span class="pl-k">=</span><span class="pl-c1">register_data</span>(gp,<span class="pl-c1">hcat</span>(X,Ys,Yc))

<span class="pl-c"><span class="pl-c">#</span> usual gnuplot command</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c1">free_form</span>(gp,<span class="pl-s"><span class="pl-pds">"</span>replot '<span class="pl-v">$id</span>' u 1:3 w l t 'cos'<span class="pl-pds">"</span></span>)
<span class="pl-c1">free_form</span>(gp,<span class="pl-s"><span class="pl-pds">"</span>replot '<span class="pl-v">$id</span>' u 1:2 w l t 'sin'<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> png export of the fig</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c1">export_png</span>(<span class="pl-s"><span class="pl-pds">"</span>fig.png<span class="pl-pds">"</span></span>,gp)

<span class="pl-c"><span class="pl-c">#</span> write gnuplot script</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c1">write_script</span>(<span class="pl-s"><span class="pl-pds">"</span>gnuplot_script.gp<span class="pl-pds">"</span></span>,gp)</pre></div>
<p dir="auto">That's it!</p>
<p dir="auto">After running the previous code you will get a nearly immediate plot
of your figure, a <code>fig.png</code> image file</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/figures/trig.png"><img src="docs/src/figures/trig.png" alt="image" style="max-width: 100%;"></a></p>
<p dir="auto">and a gnuplot script <code>gnuplot_script.gp</code> with embedded data you can
rerun when you want.</p>
</article></div>