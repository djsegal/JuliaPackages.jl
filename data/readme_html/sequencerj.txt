<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sequencerj" class="anchor" aria-hidden="true" href="#sequencerj"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SequencerJ</h1>
<p dir="auto"><strong>SequencerJ</strong> is a pure <a href="https://julialang.org/" rel="nofollow">Julia</a> implementation of the <a href="https://github.com/dalya/Sequencer/">Sequencer Algorithm</a>, a data analysis tool to identify and extract the principal trends in a set of 1-d data vectors.</p>
<p dir="auto">Getting started with SequencerJ is easy. From the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    julia&gt; using Pkg; Pkg.add(&quot;SequencerJ&quot;)
    [...]
    julia&gt; using SequencerJ
    [ Info: Precompiling SequencerJ [348581b9-6e84-42e0-ac4e-fe9177c221e6]
    [...]"><pre>    julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SequencerJ<span class="pl-pds">"</span></span>)
    [<span class="pl-k">...</span>]
    julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SequencerJ
    [ Info<span class="pl-k">:</span> Precompiling SequencerJ [<span class="pl-c1">348581</span>b9<span class="pl-k">-</span><span class="pl-c1">6e84</span><span class="pl-k">-</span><span class="pl-c1">42e0</span><span class="pl-k">-</span>ac4e<span class="pl-k">-</span>fe9177c221e6]
    [<span class="pl-k">...</span>]</pre></div>
<p dir="auto">You may get <strong>WARN</strong>INGs upon compilation. Sorry, I'm working on that! You can safely ignore them for most purposes, but if you are developing SequencerJ locally and use the <code>Revise</code> package, note that you may have to restart your Julia environment more often than usual.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    julia&gt; A = rand(50,100); #some data to process. 

    julia&gt; m = ALL_METRICS
    (Euclidean(0.0), EMD(nothing), KLDivergence(), Energy(nothing))

    julia&gt; s = (1,2,4)
    (1, 2, 4)

    julia&gt; seqres = sequence(A; metrics=m, scales=s)
    ┌ Info: Sequencing data with
    │     shape: (50, 100)
    │     metric(s): (Euclidean(0.0), EMD(nothing), KLDivergence(), Energy(nothing))
    └     scale(s): (1, 2, 4)
    [...]"><pre>    julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>,<span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span>some data to process. </span>

    julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> ALL_METRICS
    (<span class="pl-c1">Euclidean</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">EMD</span>(<span class="pl-c1">nothing</span>), <span class="pl-c1">KLDivergence</span>(), <span class="pl-c1">Energy</span>(<span class="pl-c1">nothing</span>))

    julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
    (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)

    julia<span class="pl-k">&gt;</span> seqres <span class="pl-k">=</span> <span class="pl-c1">sequence</span>(A; metrics<span class="pl-k">=</span>m, scales<span class="pl-k">=</span>s)
    ┌ Info<span class="pl-k">:</span> Sequencing data with
    │     shape<span class="pl-k">:</span> (<span class="pl-c1">50</span>, <span class="pl-c1">100</span>)
    │     <span class="pl-c1">metric</span>(s)<span class="pl-k">:</span> (<span class="pl-c1">Euclidean</span>(<span class="pl-c1">0.0</span>), <span class="pl-c1">EMD</span>(<span class="pl-c1">nothing</span>), <span class="pl-c1">KLDivergence</span>(), <span class="pl-c1">Energy</span>(<span class="pl-c1">nothing</span>))
    └     <span class="pl-c1">scale</span>(s)<span class="pl-k">:</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
    [<span class="pl-k">...</span>]</pre></div>
<p dir="auto"><code>seqres</code> is a <code>SequencerResult</code> type that may be used to retrieve results of the sequencing run. The <code>order</code> function returns the best reordering of the data columns that was found.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    julia&gt; bestseq = order(seqres)
    100-element Array{Int64,1}:
    10
    15
    13
    [...]"><pre>    julia<span class="pl-k">&gt;</span> bestseq <span class="pl-k">=</span> <span class="pl-c1">order</span>(seqres)
    <span class="pl-c1">100</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-c1">10</span>
    <span class="pl-c1">15</span>
    <span class="pl-c1">13</span>
    [<span class="pl-k">...</span>]</pre></div>
<p dir="auto">The Sequencer also calculates a fitness coefficient <code>η</code> that can be used to compare quality of solutions using various metrics and scales against the same data. Bigger is better. η is returned by the <code>elong</code> function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    julia&gt; eta = elong(seqres)
    6.2345"><pre>    julia<span class="pl-k">&gt;</span> eta <span class="pl-k">=</span> <span class="pl-c1">elong</span>(seqres)
    <span class="pl-c1">6.2345</span></pre></div>
<p dir="auto">The paper that describes the Sequencer algorithm and its applications can be found
on Arxiv: [<a href="https://arxiv.org/abs/2006.13948" rel="nofollow">https://arxiv.org/abs/2006.13948</a>].</p>
</article></div>