<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-contenthashes" class="anchor" aria-hidden="true" href="#contenthashes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ContentHashes</h1>
<p dir="auto">A generic object hashing implementation that hashes the exact content of
objects in <em>all</em> cases rather than using the (much faster) <code>objectid</code>. This can
be useful when you want to know whether two distinct objects do in fact contain
the same content without having to implement custom <code>Base.hash</code> methods that do
the comparisons manually. You may also not actually "own" the types which you
would need to implement <code>Base.hash</code> for, which would be type-piracy.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Use the <code>ContentHashes.hash</code> function to hash any objects. This <code>hash</code> function
is not exported so that it won't conflict with the <code>Base.hash</code> function.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using ContentHashes

julia&gt; struct T
           x
       end

julia&gt; a = T([]);

julia&gt; b = T([]);

julia&gt; hash(a) === hash(b)
false

julia&gt; ContentHashes.hash(a) === ContentHashes.hash(b)
true

julia&gt; f = x -&gt; x + 1
#1 (generic function with 1 method)

julia&gt; g = x -&gt; x + 1
#3 (generic function with 1 method)

julia&gt; hash(f) === hash(g)
false

julia&gt; ContentHashes.hash(f) === ContentHashes.hash(g)
true"><pre class="notranslate"><code>julia&gt; using ContentHashes

julia&gt; struct T
           x
       end

julia&gt; a = T([]);

julia&gt; b = T([]);

julia&gt; hash(a) === hash(b)
false

julia&gt; ContentHashes.hash(a) === ContentHashes.hash(b)
true

julia&gt; f = x -&gt; x + 1
#1 (generic function with 1 method)

julia&gt; g = x -&gt; x + 1
#3 (generic function with 1 method)

julia&gt; hash(f) === hash(g)
false

julia&gt; ContentHashes.hash(f) === ContentHashes.hash(g)
true
</code></pre></div>
</article></div>