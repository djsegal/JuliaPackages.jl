<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-referenceimplementationsjl" class="anchor" aria-hidden="true" href="#referenceimplementationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ReferenceImplementations.jl</h1>

<p><a href="https://xzackli.github.io/ReferenceImplementations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/xzackli/ReferenceImplementations.jl/actions"><img src="https://github.com/xzackli/ReferenceImplementations.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/xzackli/ReferenceImplementations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b150c30661726261a397702ec8f434971e9d65c7a4e7734b1d3cf0f35367c08/68747470733a2f2f636f6465636f762e696f2f67682f787a61636b6c692f5265666572656e6365496d706c656d656e746174696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d724d314155304d513338" alt="codecov" data-canonical-src="https://codecov.io/gh/xzackli/ReferenceImplementations.jl/branch/main/graph/badge.svg?token=rM1AU0MQ38" style="max-width:100%;"></a></p>
<p>This package exports the <code>@refimpl</code> macro to help you write fast scientific code. It lets you define two implementations of the same method, by prefacing the reference implementation's definition with <code>@refimpl</code>. The non-reference implementation is called by default, but the reference implementation can be invoked in an expression using the same macro <code>@refimpl</code>, even if the method call is deeply nested.</p>
<p>For more instructions, please consult the <a href="https://xzackli.github.io/ReferenceImplementations.jl/dev" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-how" class="anchor" aria-hidden="true" href="#how"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How?</h2>
<p>If the <code>@refimpl</code> macro is applied to a method definition, it injects a first argument of type <code>ReferenceImplementations.RefImpl</code> into the signature. This performs the transform</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="func(args...; kwargs...)  ⇨  func(::ReferenceImplementations.RefImpl, args...; kwargs...)
"><pre><span class="pl-c1">func</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)  ⇨  <span class="pl-c1">func</span>(<span class="pl-k">::</span><span class="pl-c1">ReferenceImplementations.RefImpl</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p>with the type signatures preserved (so <code>where</code> and <code>::T</code> match, for example). When you apply the <code>@refimpl</code> macro to an expression that isn't a function definition, it applies a Cassette pass for each top-level function call in an expression, which replaces <code>func(args...; kwargs...)</code> with <code>func(::ReferenceImplementations.RefImpl, args...; kwargs...)</code> if that method exists.</p>
<p>This also means that you can manually call the reference implementation without the macro, using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ReferenceImplementations: RefImpl
func(RefImpl(), args...; kwargs...)
"><pre><span class="pl-k">using</span> ReferenceImplementations<span class="pl-k">:</span> RefImpl
<span class="pl-c1">func</span>(<span class="pl-c1">RefImpl</span>(), args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
</article></div>