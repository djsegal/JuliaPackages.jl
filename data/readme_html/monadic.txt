<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-monadic" class="anchor" aria-hidden="true" href="#monadic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Monadic</h1>
<p><a href="https://JuliaFunctional.github.io/Monadic.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaFunctional.github.io/Monadic.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFunctional/Monadic.jl/actions"><img src="https://github.com/JuliaFunctional/Monadic.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaFunctional/Monadic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fd853d920ced094fb5f634812e2ab6474ede8e7456549d64b355a0f145fec000/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696146756e6374696f6e616c2f4d6f6e616469632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaFunctional/Monadic.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package provides the macro <code>@monadic</code> and its little helper <code>@pure</code>.</p>
<p>With both you can define custom monadic syntax, let's look at an example to clarifiy what this means.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="my_map(f, a::Vector) = f.(a)
my_flatmap(f, a::Vector) = vcat(f.(a)...)
# to show you what flatmap does, a small example
my_flatmap(x -&gt; [x, x], [1, 2])  # [1, 1, 2, 2]  i.e. it applies `f` to every element and concatenates all results

using Monadic
@monadic my_map my_flatmap begin
  a = [:a,:b]
  b = [1, 2]
  c = [b + 4, b + 5]
  @pure Symbol(a, b, c)
end
# returns [:a15, :a16, :a26, :a27, :b15, :b16, :b26, :b27]
"><pre><span class="pl-en">my_map</span>(f, a<span class="pl-k">::</span><span class="pl-c1">Vector</span>) <span class="pl-k">=</span> <span class="pl-c1">f</span>.(a)
<span class="pl-en">my_flatmap</span>(f, a<span class="pl-k">::</span><span class="pl-c1">Vector</span>) <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">f</span>.(a)<span class="pl-k">...</span>)
<span class="pl-c"><span class="pl-c">#</span> to show you what flatmap does, a small example</span>
<span class="pl-c1">my_flatmap</span>(x <span class="pl-k">-&gt;</span> [x, x], [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>])  <span class="pl-c"><span class="pl-c">#</span> [1, 1, 2, 2]  i.e. it applies `f` to every element and concatenates all results</span>

<span class="pl-k">using</span> Monadic
<span class="pl-c1">@monadic</span> my_map my_flatmap <span class="pl-k">begin</span>
  a <span class="pl-k">=</span> [<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>]
  b <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
  c <span class="pl-k">=</span> [b <span class="pl-k">+</span> <span class="pl-c1">4</span>, b <span class="pl-k">+</span> <span class="pl-c1">5</span>]
  <span class="pl-c1">@pure</span> <span class="pl-c1">Symbol</span>(a, b, c)
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> returns [:a15, :a16, :a26, :a27, :b15, :b16, :b26, :b27]</span></pre></div>
<p>Apparently, this use of <code>@monadic</code> works like a nested for-loop, collecting the results.</p>
<p>To summarize what happens is that each line is interpreted as a kind of context or context-assignment (instead of
a usual value or value assignment in normal syntax). With the <code>@pure</code> macro you can indicate that the code should be
interpreted normally (without context).</p>
<p>The context here is defined by our Vector, which we interpreted by <code>my_map</code> and <code>my_flatmap</code> as a kind of "do the computation for all combinations". It is like a context for indeterminism.</p>
<p>So let's read the <code>@monadic</code> syntax out loud:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="for every a in [:a, :b]
for every b in [1, 2]
for every c in [b + 4, b + 5]
do a normal computation `Symbol(a, b, c)` (because it is prepended with `@pure`)
and collect the last computation for all combinations (because it is the last expression)
"><pre><code>for every a in [:a, :b]
for every b in [1, 2]
for every c in [b + 4, b + 5]
do a normal computation `Symbol(a, b, c)` (because it is prepended with `@pure`)
and collect the last computation for all combinations (because it is the last expression)
</code></pre></div>
<p>For more details check out the <a href="https://JuliaFunctional.github.io/Monadic.jl/dev/" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install the package, use the following command inside the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add Monadic&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add Monadic<span class="pl-pds">"</span></span></pre></div>
<p>To load the package, use the command:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Monadic
"><pre><span class="pl-k">using</span> Monadic</pre></div>
<p>It will give you the macros <code>@monadic</code> and <code>@pure</code>.</p>
</article></div>