<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kaleido-some-useful-lenses" class="anchor" aria-hidden="true" href="#kaleido-some-useful-lenses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kaleido: some useful lenses</h1>
<p dir="auto"><a href="https://tkf.github.io/Kaleido.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://tkf.github.io/Kaleido.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tkf/Kaleido.jl/actions?query=workflow%3ARun+tests"><img src="https://github.com/tkf/Kaleido.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tkf/Kaleido.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52e4115df5416e599828e37bf603e58c6b149f5052d3fbdfc3fe147c9f8c2c74/68747470733a2f2f636f6465636f762e696f2f67682f746b662f4b616c6569646f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tkf/Kaleido.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/tkf/Kaleido.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cfdf223210ff09acf4c150f09a852d20e911b80cbbb066e60226529bcfe995c0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746b662f4b616c6569646f2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/tkf/Kaleido.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://github.com/tkf/Kaleido.jl"><img src="https://camo.githubusercontent.com/1f06a0b98ac6841d16918e721c83fc528586da08388f25af3a8399cca7f2217b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f746b662f4b616c6569646f2e6a6c2f76302e322e372e7376673f7374796c653d736f6369616c266c6f676f3d676974687562" alt="GitHub commits since tagged version" data-canonical-src="https://img.shields.io/github/commits-since/tkf/Kaleido.jl/v0.2.7.svg?style=social&amp;logo=github" style="max-width: 100%;"></a></p>
<p dir="auto">Kaleido.jl is a collection of useful
<a href="https://jw3126.github.io/Setfield.jl/latest/index.html#Setfield.Lens" rel="nofollow"><code>Lens</code></a>es
and helper functions/macros built on top of
<a href="https://github.com/jw3126/Setfield.jl">Setfield.jl</a>.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<h3 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary</h3>
<ul dir="auto">
<li>Batched/multi-valued update.  See <code>@batchlens</code>, <code>MultiLens</code>.</li>
<li>Get/set multiple and nested fields as a <code>StaticArray</code> or any
arbitrary multi-valued container.  See <code>getting</code>.</li>
<li>Get/set fields with different parametrizations.
See <code>converting</code>, <code>setting</code>, <code>getting</code>.</li>
<li>Computing other fields during <code>set</code> and <code>get</code>; i.e., adding
constraints between fields.  See <code>constraining</code>.</li>
<li>Get/set dynamically computed locations.  See <code>FLens</code>.</li>
</ul>
<h3 dir="auto"><a id="user-content-batchedmulti-valued-update" class="anchor" aria-hidden="true" href="#batchedmulti-valued-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Batched/multi-valued update</h3>
<p dir="auto">Macro <code>@batchlens</code> can be used to update various nested locations in a
complex immutable object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Setfield, Kaleido

julia&gt; lens_batch = @batchlens begin
           _.a.b.c
           _.a.b.d[1]
           _.a.b.d[3] ∘ settingas𝕀
           _.a.e
       end;

julia&gt; obj = (a = (b = (c = 1, d = (2, 3, 0.5)), e = 5),);

julia&gt; get(obj, lens_batch)
(1, 2, 0.0, 5)

julia&gt; set(obj, lens_batch, (10, 20, Inf, 50))
(a = (b = (c = 10, d = (20, 3, 1.0)), e = 50),)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Setfield, Kaleido

julia<span class="pl-k">&gt;</span> lens_batch <span class="pl-k">=</span> <span class="pl-c1">@batchlens</span> <span class="pl-k">begin</span>
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>c
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>d[<span class="pl-c1">1</span>]
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>d[<span class="pl-c1">3</span>] <span class="pl-k">∘</span> settingas𝕀
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>e
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (a <span class="pl-k">=</span> (b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">1</span>, d <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0.5</span>)), e <span class="pl-k">=</span> <span class="pl-c1">5</span>),);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens_batch)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens_batch, (<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">50</span>))
(a <span class="pl-k">=</span> (b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">10</span>, d <span class="pl-k">=</span> (<span class="pl-c1">20</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1.0</span>)), e <span class="pl-k">=</span> <span class="pl-c1">50</span>),)</pre></div>
<p dir="auto">(See below for what <code>settingas𝕀</code> does.)</p>
<h3 dir="auto"><a id="user-content-getset-multiple-and-nested-fields-as-a-staticarray" class="anchor" aria-hidden="true" href="#getset-multiple-and-nested-fields-as-a-staticarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Get/set multiple and nested fields as a <code>StaticArray</code></h3>
<p dir="auto">It is often useful to get the values of the fields as a vector (e.g.,
when optimizing a composite object with Optim.jl).  This can be done
with <code>getting(f)</code> where <code>f</code> is a constructor.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticArrays

julia&gt; lens_vec = lens_batch ∘ getting(SVector);

julia&gt; @assert get(obj, lens_vec) === SVector(1, 2, 0.0, 5)

julia&gt; set(obj, lens_vec, SVector(10, 20, Inf, 50))
(a = (b = (c = 10.0, d = (20.0, 3, 1.0)), e = 50.0),)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> lens_vec <span class="pl-k">=</span> lens_batch <span class="pl-k">∘</span> <span class="pl-c1">getting</span>(SVector);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@assert</span> <span class="pl-c1">get</span>(obj, lens_vec) <span class="pl-k">===</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens_vec, <span class="pl-c1">SVector</span>(<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">50</span>))
(a <span class="pl-k">=</span> (b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, d <span class="pl-k">=</span> (<span class="pl-c1">20.0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1.0</span>)), e <span class="pl-k">=</span> <span class="pl-c1">50.0</span>),)</pre></div>
<h3 dir="auto"><a id="user-content-getset-fields-with-different-parametrizations" class="anchor" aria-hidden="true" href="#getset-fields-with-different-parametrizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Get/set fields with different parametrizations</h3>
<p dir="auto">Kaleido.jl comes with lenses <code>settingasℝ₊</code>, <code>settingasℝ₋</code>, and
<code>settingas𝕀</code> to manipulating fields that have to be restricted to be
positive, negative, and in <code>[0, 1]</code> interval, respectively.  Similarly
there are lenses <code>gettingasℝ₊</code>, <code>gettingasℝ₋</code>, and <code>gettingas𝕀</code> to get
values in those domains.  The naming is borrowed from
<a href="https://github.com/tpapp/TransformVariables.jl">TransformVariables.jl</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; lens = (@lens _.x) ∘ settingasℝ₊;

julia&gt; get((x=1.0,), lens)  # log(1.0)
0.0

julia&gt; set((x=1.0,), lens, -Inf)
(x = 0.0,)"><pre>julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>x) <span class="pl-k">∘</span> settingasℝ₊;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>((x<span class="pl-k">=</span><span class="pl-c1">1.0</span>,), lens)  <span class="pl-c"><span class="pl-c">#</span> log(1.0)</span>
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>((x<span class="pl-k">=</span><span class="pl-c1">1.0</span>,), lens, <span class="pl-k">-</span><span class="pl-c1">Inf</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,)</pre></div>
<p dir="auto">Kaleido.jl also works with <code>AbstractTransform</code> defined in
<a href="https://github.com/tpapp/TransformVariables.jl">TransformVariables.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using TransformVariables

julia&gt; lens = (@lens _.y[2]) ∘ setting(as𝕀);

julia&gt; obj = (x=0, y=(1, 0.5, 3));

julia&gt; get(obj, lens)
0.0

julia&gt; @assert set(obj, lens, Inf).y[2] ≈ 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TransformVariables

julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>y[<span class="pl-c1">2</span>]) <span class="pl-k">∘</span> <span class="pl-c1">setting</span>(as𝕀);

julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens)
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@assert</span> <span class="pl-c1">set</span>(obj, lens, <span class="pl-c1">Inf</span>)<span class="pl-k">.</span>y[<span class="pl-c1">2</span>] <span class="pl-k">≈</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">It also is quite easy to define ad-hoc converting accessors using
<code>converting</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; lens = (@lens _.y[2]) ∘
           converting(fromfield=x -&gt; parse(Int, x), tofield=string);

julia&gt; obj = (x=0, y=(1, &quot;5&quot;, 3));

julia&gt; get(obj, lens)
5

julia&gt; set(obj, lens, 1)
(x = 0, y = (1, &quot;1&quot;, 3))"><pre>julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>y[<span class="pl-c1">2</span>]) <span class="pl-k">∘</span>
           <span class="pl-c1">converting</span>(fromfield<span class="pl-k">=</span>x <span class="pl-k">-&gt;</span> <span class="pl-c1">parse</span>(Int, x), tofield<span class="pl-k">=</span>string);

julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>5<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens, <span class="pl-c1">1</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">0</span>, y <span class="pl-k">=</span> (<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>))</pre></div>
<h3 dir="auto"><a id="user-content-computing-other-fields-during-set-and-get" class="anchor" aria-hidden="true" href="#computing-other-fields-during-set-and-get"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computing other fields during <code>set</code> and <code>get</code></h3>
<p dir="auto">It is easy to add constraints between fields using <code>constraining</code>.
For example, you can impose that field <code>.c</code> must be a sum of <code>.a</code> and
<code>.b</code> by:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obj = (a = 1, b = 2, c = 3);

julia&gt; constraint = constraining() do obj
           @set obj.c = obj.a + obj.b
       end;

julia&gt; lens = constraint ∘ MultiLens((
           (@lens _.a),
           (@lens _.b),
       ));

julia&gt; get(obj, lens)
(1, 2)

julia&gt; set(obj, lens, (100, 20))
(a = 100, b = 20, c = 120)"><pre>julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> constraint <span class="pl-k">=</span> <span class="pl-c1">constraining</span>() <span class="pl-k">do</span> obj
           <span class="pl-c1">@set</span> obj<span class="pl-k">.</span>c <span class="pl-k">=</span> obj<span class="pl-k">.</span>a <span class="pl-k">+</span> obj<span class="pl-k">.</span>b
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> constraint <span class="pl-k">∘</span> <span class="pl-c1">MultiLens</span>((
           (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>a),
           (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>b),
       ));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens, (<span class="pl-c1">100</span>, <span class="pl-c1">20</span>))
(a <span class="pl-k">=</span> <span class="pl-c1">100</span>, b <span class="pl-k">=</span> <span class="pl-c1">20</span>, c <span class="pl-k">=</span> <span class="pl-c1">120</span>)</pre></div>
<p dir="auto">Notice that <code>.c</code> is updated as well in the last line.</p>
<h3 dir="auto"><a id="user-content-getset-dynamically-computed-locations" class="anchor" aria-hidden="true" href="#getset-dynamically-computed-locations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Get/set dynamically computed locations</h3>
<p dir="auto">You can use <code>FLens</code> to <code>get</code> and <code>set</code>, e.g., the last entry of a
linked list.</p>
</article></div>