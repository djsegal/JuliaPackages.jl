<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-kaleido-some-useful-lenses" class="anchor" aria-hidden="true" href="#kaleido-some-useful-lenses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kaleido: some useful lenses</h1>
<p><a href="https://tkf.github.io/Kaleido.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://tkf.github.io/Kaleido.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/tkf/Kaleido.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b86bc478646fff6b7b1149f6bac1111f6a6e723/68747470733a2f2f7472617669732d63692e636f6d2f746b662f4b616c6569646f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tkf/Kaleido.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tkf/Kaleido.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6365ec5b1e33fa5883cfa950a0eee1967850f48/68747470733a2f2f636f6465636f762e696f2f67682f746b662f4b616c6569646f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tkf/Kaleido.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tkf/Kaleido.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/665b73267dfdba6bceae33d7dc8014636c077a3e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746b662f4b616c6569646f2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/tkf/Kaleido.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/tkf/Aqua.jl"><img src="https://camo.githubusercontent.com/6100188045368e759fea6ce8c4df2e322ea75b3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417175612e6a6c2d2546302539462538432541322d617175612e737667" alt="Aqua QA" data-canonical-src="https://img.shields.io/badge/Aqua.jl-%F0%9F%8C%A2-aqua.svg" style="max-width:100%;"></a>
<a href="https://github.com/tkf/Kaleido.jl"><img src="https://camo.githubusercontent.com/814c219583bacdea69c38f58ca8d8d8b2dcdebc9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f746b662f4b616c6569646f2e6a6c2f76302e322e352e7376673f7374796c653d736f6369616c266c6f676f3d676974687562" alt="GitHub commits since tagged version" data-canonical-src="https://img.shields.io/github/commits-since/tkf/Kaleido.jl/v0.2.5.svg?style=social&amp;logo=github" style="max-width:100%;"></a></p>
<p>Kaleido.jl is a collection of useful
<a href="https://jw3126.github.io/Setfield.jl/latest/index.html#Setfield.Lens" rel="nofollow"><code>Lens</code></a>es
and helper functions/macros built on top of
<a href="https://github.com/jw3126/Setfield.jl">Setfield.jl</a>.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h2>
<h3><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Summary</h3>
<ul>
<li>Batched/multi-valued update.  See <code>@batchlens</code>, <code>MultiLens</code>.</li>
<li>Get/set multiple and nested fields as a <code>StaticArray</code> or any
arbitrary multi-valued container.  See <code>getting</code>.</li>
<li>Get/set fields with different parametrizations.
See <code>converting</code>, <code>setting</code>, <code>getting</code>.</li>
<li>Computing other fields during <code>set</code> and <code>get</code>; i.e., adding
constraints between fields.  See <code>constraining</code>.</li>
<li>Get/set dynamically computed locations.  See <code>FLens</code>.</li>
</ul>
<h3><a id="user-content-batchedmulti-valued-update" class="anchor" aria-hidden="true" href="#batchedmulti-valued-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Batched/multi-valued update</h3>
<p>Macro <code>@batchlens</code> can be used to update various nested locations in a
complex immutable object:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Setfield, Kaleido

julia<span class="pl-k">&gt;</span> lens_batch <span class="pl-k">=</span> <span class="pl-c1">@batchlens</span> <span class="pl-k">begin</span>
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>c
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>d[<span class="pl-c1">1</span>]
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>d[<span class="pl-c1">3</span>] <span class="pl-k">‚àò</span> settingasùïÄ
           _<span class="pl-k">.</span>a<span class="pl-k">.</span>e
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (a <span class="pl-k">=</span> (b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">1</span>, d <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0.5</span>)), e <span class="pl-k">=</span> <span class="pl-c1">5</span>),);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens_batch)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens_batch, (<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">50</span>))
(a <span class="pl-k">=</span> (b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">10</span>, d <span class="pl-k">=</span> (<span class="pl-c1">20</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1.0</span>)), e <span class="pl-k">=</span> <span class="pl-c1">50</span>),)</pre></div>
<p>(See below for what <code>settingasùïÄ</code> does.)</p>
<h3><a id="user-content-getset-multiple-and-nested-fields-as-a-staticarray" class="anchor" aria-hidden="true" href="#getset-multiple-and-nested-fields-as-a-staticarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Get/set multiple and nested fields as a <code>StaticArray</code></h3>
<p>It is often useful to get the values of the fields as a vector (e.g.,
when optimizing a composite object with Optim.jl).  This can be done
with <code>getting(f)</code> where <code>f</code> is a constructor.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> lens_vec <span class="pl-k">=</span> lens_batch <span class="pl-k">‚àò</span> <span class="pl-c1">getting</span>(SVector);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@assert</span> <span class="pl-c1">get</span>(obj, lens_vec) <span class="pl-k">===</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens_vec, <span class="pl-c1">SVector</span>(<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">Inf</span>, <span class="pl-c1">50</span>))
(a <span class="pl-k">=</span> (b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, d <span class="pl-k">=</span> (<span class="pl-c1">20.0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1.0</span>)), e <span class="pl-k">=</span> <span class="pl-c1">50.0</span>),)</pre></div>
<h3><a id="user-content-getset-fields-with-different-parametrizations" class="anchor" aria-hidden="true" href="#getset-fields-with-different-parametrizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Get/set fields with different parametrizations</h3>
<p>Kaleido.jl comes with lenses <code>settingas‚Ñù‚Çä</code>, <code>settingas‚Ñù‚Çã</code>, and
<code>settingasùïÄ</code> to manipulating fields that have to be restricted to be
positive, negative, and in <code>[0, 1]</code> interval, respectively.  Similarly
there are lenses <code>gettingas‚Ñù‚Çä</code>, <code>gettingas‚Ñù‚Çã</code>, and <code>gettingasùïÄ</code> to get
values in those domains.  The naming is borrowed from
<a href="https://github.com/tpapp/TransformVariables.jl">TransformVariables.jl</a>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>x) <span class="pl-k">‚àò</span> settingas‚Ñù‚Çä;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>((x<span class="pl-k">=</span><span class="pl-c1">1.0</span>,), lens)  <span class="pl-c"><span class="pl-c">#</span> log(1.0)</span>
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>((x<span class="pl-k">=</span><span class="pl-c1">1.0</span>,), lens, <span class="pl-k">-</span><span class="pl-c1">Inf</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,)</pre></div>
<p>Kaleido.jl also works with <code>AbstractTransform</code> defined in
<a href="https://github.com/tpapp/TransformVariables.jl">TransformVariables.jl</a>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TransformVariables

julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>y[<span class="pl-c1">2</span>]) <span class="pl-k">‚àò</span> <span class="pl-c1">setting</span>(asùïÄ);

julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens)
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@assert</span> <span class="pl-c1">set</span>(obj, lens, <span class="pl-c1">Inf</span>)<span class="pl-k">.</span>y[<span class="pl-c1">2</span>] <span class="pl-k">‚âà</span> <span class="pl-c1">1</span></pre></div>
<p>It also is quite easy to define ad-hoc converting accessors using
<code>converting</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>y[<span class="pl-c1">2</span>]) <span class="pl-k">‚àò</span>
           <span class="pl-c1">converting</span>(fromfield<span class="pl-k">=</span>x <span class="pl-k">-&gt;</span> <span class="pl-c1">parse</span>(Int, x), tofield<span class="pl-k">=</span>string);

julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">0</span>, y<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>5<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens, <span class="pl-c1">1</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">0</span>, y <span class="pl-k">=</span> (<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>))</pre></div>
<h3><a id="user-content-computing-other-fields-during-set-and-get" class="anchor" aria-hidden="true" href="#computing-other-fields-during-set-and-get"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Computing other fields during <code>set</code> and <code>get</code></h3>
<p>It is easy to add constraints between fields using <code>constraining</code>.
For example, you can impose that field <code>.c</code> must be a sum of <code>.a</code> and
<code>.b</code> by:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> constraint <span class="pl-k">=</span> <span class="pl-c1">constraining</span>() <span class="pl-k">do</span> obj
           <span class="pl-c1">@set</span> obj<span class="pl-k">.</span>c <span class="pl-k">=</span> obj<span class="pl-k">.</span>a <span class="pl-k">+</span> obj<span class="pl-k">.</span>b
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> lens <span class="pl-k">=</span> constraint <span class="pl-k">‚àò</span> <span class="pl-c1">MultiLens</span>((
           (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>a),
           (<span class="pl-c1">@lens</span> _<span class="pl-k">.</span>b),
       ));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(obj, lens)
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(obj, lens, (<span class="pl-c1">100</span>, <span class="pl-c1">20</span>))
(a <span class="pl-k">=</span> <span class="pl-c1">100</span>, b <span class="pl-k">=</span> <span class="pl-c1">20</span>, c <span class="pl-k">=</span> <span class="pl-c1">120</span>)</pre></div>
<p>Notice that <code>.c</code> is updated as well in the last line.</p>
<h3><a id="user-content-getset-dynamically-computed-locations" class="anchor" aria-hidden="true" href="#getset-dynamically-computed-locations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Get/set dynamically computed locations</h3>
<p>You can use <code>FLens</code> to <code>get</code> and <code>set</code>, e.g., the last entry of a
linked list.</p>
</article></div>