<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-simplesvms" class="anchor" aria-hidden="true" href="#simplesvms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SimpleSVMs</h1>
<p><a href="https://travis-ci.org/matbesancon/SimpleSVMs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5d319c301f7a9ec9639a861e6c1b3203a2e92f1a/68747470733a2f2f7472617669732d63692e6f72672f6d6174626573616e636f6e2f53696d706c6553564d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/matbesancon/SimpleSVMs.jl.svg?branch=master" style="max-width:100%;"></a></p>
<blockquote>
<p>We should have a JuMP-based SVM.</p>
</blockquote>
<p><a href="https://github.com/oxinabox">oxinabox</a></p>
<p>Implements simple Support Vector Machines using JuMP, with both L1 and L2
regularization. Since the λ parameter really is just a Lagrange multiplier,
penalties are implemented as constraints directly.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Random
<span class="pl-k">import</span> SimpleSVMs
<span class="pl-k">import</span> Plots
<span class="pl-k">using</span> JuMP
<span class="pl-k">import</span> Clp

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)
X <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">20</span>, <span class="pl-c1">2</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">30</span>,<span class="pl-c1">2</span>) <span class="pl-k">.+</span> [<span class="pl-c1">3.0</span>,<span class="pl-c1">1.5</span>]')
y <span class="pl-k">=</span> <span class="pl-c1">append!</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">20</span>), <span class="pl-k">-</span><span class="pl-c1">ones</span>(<span class="pl-c1">30</span>))

p <span class="pl-k">=</span> Plots<span class="pl-k">.</span><span class="pl-c1">scatter</span>(X[:,<span class="pl-c1">1</span>], X[:,<span class="pl-c1">2</span>], color <span class="pl-k">=</span> [yi <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> ? <span class="pl-c1">:red</span> : <span class="pl-c1">:blue</span> <span class="pl-k">for</span> yi <span class="pl-k">in</span> y], label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
Plots<span class="pl-k">.</span><span class="pl-c1">yaxis!</span>(p, (<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">4.5</span>))
<span class="pl-k">for</span> rhs <span class="pl-k">in</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">1.2</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">10.0</span>]
   <span class="pl-k">global</span> X, y
   (m, w, b, penalty_cons) <span class="pl-k">=</span> SimpleSVMs<span class="pl-k">.</span><span class="pl-c1">build_svm</span>(SimpleSVMs<span class="pl-k">.</span><span class="pl-c1">L1Penalty</span>(rhs), X, y, <span class="pl-c1">with_optimizer</span>(Clp<span class="pl-k">.</span>Optimizer, LogLevel <span class="pl-k">=</span> <span class="pl-c1">0</span>))
   <span class="pl-c1">optimize!</span>(m)
   loss <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">objective_value</span>(m)
   λ <span class="pl-k">=</span> <span class="pl-k">-</span>JuMP<span class="pl-k">.</span><span class="pl-c1">dual</span>(penalty_cons)
   wv <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>.(w)
   bv <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>(b)
   <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$wv</span> <span class="pl-v">$bv</span><span class="pl-pds">"</span></span>
   Plots<span class="pl-k">.</span><span class="pl-c1">plot!</span>(p, [<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>], [<span class="pl-k">-</span>bv <span class="pl-k">/</span> wv[<span class="pl-c1">2</span>], (<span class="pl-k">-</span>bv <span class="pl-k">-</span> <span class="pl-c1">2</span>wv[<span class="pl-c1">1</span>])<span class="pl-k">/</span>wv[<span class="pl-c1">2</span>]], label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>RHS = <span class="pl-v">$(rhs)</span>, loss = <span class="pl-v">$(<span class="pl-c1">round</span>(loss, digits<span class="pl-k">=</span><span class="pl-c1">2</span>))</span>, <span class="pl-cce">\\</span>lambda = <span class="pl-v">$(<span class="pl-c1">round</span>(λ, digits<span class="pl-k">=</span><span class="pl-c1">2</span>))</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
Plots<span class="pl-k">.</span><span class="pl-c1">title!</span>(p, <span class="pl-s"><span class="pl-pds">"</span>L1 loss<span class="pl-pds">"</span></span>)
Plots<span class="pl-k">.</span><span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>example_l1.png<span class="pl-pds">"</span></span>)

<span class="pl-k">import</span> Ipopt

p <span class="pl-k">=</span> Plots<span class="pl-k">.</span><span class="pl-c1">scatter</span>(X[:,<span class="pl-c1">1</span>], X[:,<span class="pl-c1">2</span>], color <span class="pl-k">=</span> [yi <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> ? <span class="pl-c1">:red</span> : <span class="pl-c1">:blue</span> <span class="pl-k">for</span> yi <span class="pl-k">in</span> y], label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
Plots<span class="pl-k">.</span><span class="pl-c1">yaxis!</span>(p, (<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">4.5</span>))
<span class="pl-k">for</span> rhs <span class="pl-k">in</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">1.2</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">10.0</span>]
   <span class="pl-k">global</span> X, y
   (m, w, b, penalty_cons) <span class="pl-k">=</span> SimpleSVMs<span class="pl-k">.</span><span class="pl-c1">build_svm</span>(SimpleSVMs<span class="pl-k">.</span><span class="pl-c1">L2Penalty</span>(rhs), X, y, <span class="pl-c1">with_optimizer</span>(Ipopt<span class="pl-k">.</span>Optimizer))
   <span class="pl-c1">optimize!</span>(m)
   loss <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">objective_value</span>(m)
   λ <span class="pl-k">=</span> <span class="pl-k">-</span>JuMP<span class="pl-k">.</span><span class="pl-c1">dual</span>(penalty_cons)
   wv <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>.(w)
   bv <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>(b)
   <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$wv</span> <span class="pl-v">$bv</span><span class="pl-pds">"</span></span>
   Plots<span class="pl-k">.</span><span class="pl-c1">plot!</span>(p, [<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>], [<span class="pl-k">-</span>bv <span class="pl-k">/</span> wv[<span class="pl-c1">2</span>], (<span class="pl-k">-</span>bv <span class="pl-k">-</span> <span class="pl-c1">2</span>wv[<span class="pl-c1">1</span>])<span class="pl-k">/</span>wv[<span class="pl-c1">2</span>]], label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>RHS = <span class="pl-v">$(rhs)</span>, loss = <span class="pl-v">$(<span class="pl-c1">round</span>(loss, digits<span class="pl-k">=</span><span class="pl-c1">2</span>))</span>, <span class="pl-cce">\\</span>lambda = <span class="pl-v">$(<span class="pl-c1">round</span>(λ, digits<span class="pl-k">=</span><span class="pl-c1">2</span>))</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
Plots<span class="pl-k">.</span><span class="pl-c1">title!</span>(p, <span class="pl-s"><span class="pl-pds">"</span>L2 loss<span class="pl-pds">"</span></span>)
Plots<span class="pl-k">.</span><span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>example_l2.png<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="img/example_l1.png"><img src="img/example_l1.png" alt="" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="img/example_l2.png"><img src="img/example_l2.png" alt="" style="max-width:100%;"></a></p>
</article></div>