<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-boxsymmetries" class="anchor" aria-hidden="true" href="#boxsymmetries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BoxSymmetries</h1>
<p dir="auto"><a href="https://jw3126.github.io/BoxSymmetries.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jw3126.github.io/BoxSymmetries.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jw3126/BoxSymmetries.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jw3126/BoxSymmetries.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jw3126/BoxSymmetries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3286431f8061ce6c7bd664c7a7b9bff3c69c7115d07e4ce081958ff9d733c800/68747470733a2f2f636f6465636f762e696f2f67682f6a77333132362f426f7853796d6d6574726965732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jw3126/BoxSymmetries.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jw3126/BoxSymmetries.jl">BoxSymmetries.jl</a> allows applying box symmetries to arrays in arbitrary dimensions.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BoxSymmetries

julia&gt; g = BoxSym(-1,2) # flip the first axis
BoxSym(-1, 2)

julia&gt; g([1 2 3; 4 5 6])
2×3 Matrix{Int64}:
 4  5  6
 1  2  3

julia&gt; g = BoxSym(2,1) # permute axes
BoxSym(2, 1)

julia&gt; g([1 2 4; 4 5 6])
3×2 Matrix{Int64}:
 1  4
 2  5
 4  6

julia&gt; g = BoxSym(-1,-2) # flip both axes
BoxSym(-1, -2)

julia&gt; g([1 2; 3 4])
2×2 Matrix{Int64}:
 4  3
 2  1

julia&gt; arr = randn(1,2,3,4);

julia&gt; g = BoxSym(4,-2,1,-3) # permute axes and flip some of them
BoxSym(4, -2, 1, -3)

julia&gt; size(g(arr))
(4, 2, 1, 3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BoxSymmetries

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">BoxSym</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> flip the first axis</span>
<span class="pl-c1">BoxSym</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">BoxSym</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> permute axes</span>
<span class="pl-c1">BoxSym</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">4</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">BoxSym</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> flip both axes</span>
<span class="pl-c1">BoxSym</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> arr <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">BoxSym</span>(<span class="pl-c1">4</span>,<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> permute axes and flip some of them</span>
<span class="pl-c1">BoxSym</span>(<span class="pl-c1">4</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(<span class="pl-c1">g</span>(arr))
(<span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>)</pre></div>
<h1 dir="auto"><a id="user-content-theory" class="anchor" aria-hidden="true" href="#theory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Theory</h1>
<p dir="auto">We define the group of box symmetries of dimension N to be the group of all linear maps
ℝᴺ → ℝᴺ that restrict to bijections on the unit cube [-1,1]ᴺ → [-1,1]ᴺ.
One can check that such maps must map coordinate axes onto coordinate axes and preserve length.
So essentially they are allowed to permute axes and flip signs of axes, nothing else.
It follows that box symmetries are in bijection with the following data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct BoxSym{N}
    # BoxSym is the semidirect product Boolⁿ ⋊ Sₙ
    # here axesperm ∈ Sₙ controls the induced action on the set of coordinate axes
    # flipsign controls for each axis, whether the sign is flipped. E.g. whether
    # eᵢ ↦ eⱼ or eᵢ ↦ -eⱼ for the standard basis
    axesperm::Perm
    flipsign::NTuple{N,Bool}
end"><pre><span class="pl-k">struct</span> BoxSym{N}
    <span class="pl-c"><span class="pl-c">#</span> BoxSym is the semidirect product Boolⁿ ⋊ Sₙ</span>
    <span class="pl-c"><span class="pl-c">#</span> here axesperm ∈ Sₙ controls the induced action on the set of coordinate axes</span>
    <span class="pl-c"><span class="pl-c">#</span> flipsign controls for each axis, whether the sign is flipped. E.g. whether</span>
    <span class="pl-c"><span class="pl-c">#</span> eᵢ ↦ eⱼ or eᵢ ↦ -eⱼ for the standard basis</span>
    axesperm<span class="pl-k">::</span><span class="pl-c1">Perm</span>
    flipsign<span class="pl-k">::</span><span class="pl-c1">NTuple{N,Bool}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">To compactly denote this data, we use the following notation, that is best explained by example:</p>
<ul dir="auto">
<li><code>BoxSym( 2, 1)</code>: (x,y) ↦ ( y, x)</li>
<li><code>BoxSym(-1, 2)</code>: (x,y) ↦ (-x, y)</li>
<li><code>BoxSym( 1,-2)</code>: (x,y) ↦ ( x,-y)</li>
<li><code>BoxSym( 2, 1, -3)</code>: (x,y,z) ↦ ( y, x, -z)</li>
<li><code>BoxSym(-2, -3, 1)</code>: (x,y,z) ↦ ( z,-x, -y)</li>
</ul>
<p dir="auto">In other words <code>1,2,3</code> stand for the directed coordinate axes and <code>-1,-2,-3</code> stand for the coordinate axes directed in the opposite direction. <code>Box(a,b,c)</code> means that axis 1 maps to axis a,
axis 2 maps to axis b and axis 3 maps to axis c.</p>
<h1 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h1>
<p dir="auto">For the use case of 2d images, there are alternatives:</p>
<ul dir="auto">
<li><a href="https://github.com/icetube23/SquareSymmetries.jl">SquareSymmetries.jl</a></li>
<li><a href="https://github.com/Evizero/Augmentor.jl">Augmentor.jl</a></li>
</ul>
</article></div>