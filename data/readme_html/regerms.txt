<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/414dd27147b1c7098ff21567358a55957f78c27666cc203efa973fb1cc29998a/687474703a2f2f6269676372756e73682e6769746875622e696f2f696d616765732f6c6f676f2e706e67"><img src="https://camo.githubusercontent.com/414dd27147b1c7098ff21567358a55957f78c27666cc203efa973fb1cc29998a/687474703a2f2f6269676372756e73682e6769746875622e696f2f696d616765732f6c6f676f2e706e67" alt="RegERMs Logo" width="210" height="125" data-canonical-src="http://bigcrunsh.github.io/images/logo.png" style="max-width:100%;"></a></p>
<h1><a id="user-content-regermsjl" class="anchor" aria-hidden="true" href="#regermsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RegERMs.jl</h1>
<p><a href="https://travis-ci.org/JuliaStats/RegERMs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e1996161196f5387cb5e35a46ac7196fed7921306804e72e4d61a861b23715c1/68747470733a2f2f7472617669732d63692e6f72672f4a756c696153746174732f52656745524d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaStats/RegERMs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaStats/RegERMs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1f878c251449311b7abb1f7bec761cd12b9dfc36a45d4b9b0a825dc53c5fdf42/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4a756c696153746174732f52656745524d732e6a6c2e737667" alt="Coverage Status" data-canonical-src="https://img.shields.io/coveralls/JuliaStats/RegERMs.jl.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=RegERMs&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/757ee9bcd73dff1dd9f4612e21bb4f33b7759ef142e7edec42e0076d4139d081/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f52656745524d735f302e332e737667" alt="RegERMs" data-canonical-src="http://pkg.julialang.org/badges/RegERMs_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=RegERMs&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/3d316bb0f2dea577a50265acc38a6289ecf0be00675cd9f1757ffdef7c636d88/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f52656745524d735f302e342e737667" alt="RegERMs" data-canonical-src="http://pkg.julialang.org/badges/RegERMs_0.4.svg" style="max-width:100%;"></a></p>
<p>This package implements several machine learning algorithms in a regularised empirical risk minimisation framework (SVMs,  LogReg, Linear Regression) in Julia.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>Some examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RegERMs

# define some toy data (XOR - example)
np = 100
nn = 100
X = [randn(int(np/2),1)+1 randn(int(np/2),1)+1; randn(int(np/2-0.5),1)-1 randn(int(np/2-0.5),1)-1;
     randn(int(nn/2),1)+1 randn(int(nn/2),1)-1; randn(int(nn/2-0.5),1)-1 randn(int(nn/2-0.5),1)+1] # examples with 2 features
y = int(vec([ones(np,1); -ones(nn,1)]))       # binary class values

# use rbf kernel by using mercer map
map = MercerMap(X, :rbf)
X = RegERMs.apply(map)

# choose (linear) SVM as learning algorithm with regularization parameter 0.1
svm = SVM(X, y; λ=0.1)

# get a solution 
model = optimize(svm)

# make predictions and compute accuracy
ybar = predict(model, X)
acc = mean(ybar .== y)

"><pre><span class="pl-k">using</span> RegERMs

<span class="pl-c"><span class="pl-c">#</span> define some toy data (XOR - example)</span>
np <span class="pl-k">=</span> <span class="pl-c1">100</span>
nn <span class="pl-k">=</span> <span class="pl-c1">100</span>
X <span class="pl-k">=</span> [<span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(np<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-c1">1</span> <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(np<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>; <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(np<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>),<span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(np<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>),<span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>;
     <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(nn<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-c1">1</span> <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(nn<span class="pl-k">/</span><span class="pl-c1">2</span>),<span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(nn<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>),<span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">randn</span>(<span class="pl-c1">int</span>(nn<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>),<span class="pl-c1">1</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> examples with 2 features</span>
y <span class="pl-k">=</span> <span class="pl-c1">int</span>(<span class="pl-c1">vec</span>([<span class="pl-c1">ones</span>(np,<span class="pl-c1">1</span>); <span class="pl-k">-</span><span class="pl-c1">ones</span>(nn,<span class="pl-c1">1</span>)]))       <span class="pl-c"><span class="pl-c">#</span> binary class values</span>

<span class="pl-c"><span class="pl-c">#</span> use rbf kernel by using mercer map</span>
map <span class="pl-k">=</span> <span class="pl-c1">MercerMap</span>(X, <span class="pl-c1">:rbf</span>)
X <span class="pl-k">=</span> RegERMs<span class="pl-k">.</span><span class="pl-c1">apply</span>(map)

<span class="pl-c"><span class="pl-c">#</span> choose (linear) SVM as learning algorithm with regularization parameter 0.1</span>
svm <span class="pl-k">=</span> <span class="pl-c1">SVM</span>(X, y; λ<span class="pl-k">=</span><span class="pl-c1">0.1</span>)

<span class="pl-c"><span class="pl-c">#</span> get a solution </span>
model <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(svm)

<span class="pl-c"><span class="pl-c">#</span> make predictions and compute accuracy</span>
ybar <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X)
acc <span class="pl-k">=</span> <span class="pl-c1">mean</span>(ybar <span class="pl-k">.==</span> y)
</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Full documentation available at <a href="http://regerms.readthedocs.org/en/latest/index.html" rel="nofollow">Read the Docs</a>.</p>
</article></div>