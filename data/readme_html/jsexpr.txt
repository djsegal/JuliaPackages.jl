<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jsexpr" class="anchor" aria-hidden="true" href="#jsexpr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JSExpr</h1>
<table>
<thead>
<tr>
<th>Build</th>
<th>Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://travis-ci.org/JuliaGizmos/JSExpr.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f5cd7fbc516fd1e5997bcae50593a5aabcb4624bf7ab180823d3b38dddc96dd9/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147697a6d6f732f4a53457870722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGizmos/JSExpr.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td><a href="https://codecov.io/gh/JuliaGizmos/JSExpr.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/053c06c59cc372080f46f65b2e3ee7c2b2c88c72133f5ea8b8c23eb6cc98c0a7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696147697a6d6f732f4a53457870722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGizmos/JSExpr.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package provides two macros that are used to write JavaScript code inside
of Julia programs.</p>
<ul>
<li>The <code>@js</code> macro translates Julia syntax to the equivalent JavaScript</li>
<li>The <code>@js"..."</code> macro is used to write code using string literals with <em>smart</em>
interpolation of values from Julia</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using JSExpr

julia&gt; @js document.querySelector(&quot;#root&quot;)
JSString(&quot;document.querySelector(\&quot;#root\&quot;)&quot;)

julia&gt; @js (a, b) -&gt; a + b
JSString(&quot;(a, b) =&gt; { return a + b; }&quot;)

julia&gt; config = Dict(&quot;foo&quot; =&gt; &quot;bar&quot;);
julia&gt; js&quot;initializeProgram($config);&quot;
JSString(&quot;initializeProgram({\&quot;foo\&quot;:\&quot;bar\&quot;});&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JSExpr

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> document<span class="pl-k">.</span><span class="pl-c1">querySelector</span>(<span class="pl-s"><span class="pl-pds">"</span>#root<span class="pl-pds">"</span></span>)
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>document.querySelector(<span class="pl-cce">\"</span>#root<span class="pl-cce">\"</span>)<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> (a, b) <span class="pl-k">-&gt;</span> a <span class="pl-k">+</span> b
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>(a, b) =&gt; { return a + b; }<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">js</span><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-en">initializeProgram</span>($config);</span><span class="pl-pds">"</span>
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>initializeProgram({<span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>});<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-interpolation" class="anchor" aria-hidden="true" href="#interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interpolation</h2>
<p>You can interpolate Julia objects or <code>JSString</code>s (e.g. from other <code>@js</code> or
<code>js"..."</code> invocations) as well as values from Julia (such as normal
strings, <code>Dict</code>s, etc.).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; foo = 42;
julia&gt; callback = @js a -&gt; a + $foo
JSString(&quot;(a) =&gt; { return a + 42; }&quot;)

julia&gt; f = @js array -&gt; array.map($callback)
JSString(&quot;(array) =&gt; { return array.map((a) =&gt; { return a + 42; }); }&quot;)
"><pre>julia<span class="pl-k">&gt;</span> foo <span class="pl-k">=</span> <span class="pl-c1">42</span>;
julia<span class="pl-k">&gt;</span> callback <span class="pl-k">=</span> <span class="pl-c1">@js</span> a <span class="pl-k">-&gt;</span> a <span class="pl-k">+</span> <span class="pl-k">$</span>foo
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>(a) =&gt; { return a + 42; }<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@js</span> array <span class="pl-k">-&gt;</span> array<span class="pl-k">.</span><span class="pl-c1">map</span>(<span class="pl-k">$</span>callback)
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>(array) =&gt; { return array.map((a) =&gt; { return a + 42; }); }<span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-custom-interpolation" class="anchor" aria-hidden="true" href="#custom-interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Interpolation</h4>
<p>By default, values are serialized using the <code>JSON</code> package.
This makes sense for <code>Dict</code>s, <code>Array</code>s, and most other "primitive" types.</p>
<p>3rd-party packages can customize serialization of their own types by defining
a method for <code>JSExpr.interpolate</code>.
The return value of <code>JSExpr.interpolate</code> should be a <code>JSNode</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct Link; text::String; href::String; end;
julia&gt; JSExpr.interpolate(link::Link) = JSExpr.JSTerminal(js&quot;&lt;a href=$(link.href)&gt;$(link.text)&lt;/a&gt;&quot;);
julia&gt; @js @const link = $(Link(&quot;Julia&quot;, &quot;https://julialang.org/&quot;))
JSString(&quot;const link = &lt;a href=\&quot;https://julialang.org/\&quot;&gt;\&quot;Julia\&quot;&lt;/a&gt;&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Link; text<span class="pl-k">::</span><span class="pl-c1">String</span>; href<span class="pl-k">::</span><span class="pl-c1">String</span>; <span class="pl-k">end</span>;
julia<span class="pl-k">&gt;</span> JSExpr<span class="pl-k">.</span><span class="pl-en">interpolate</span>(link<span class="pl-k">::</span><span class="pl-c1">Link</span>) <span class="pl-k">=</span> JSExpr<span class="pl-k">.</span><span class="pl-c1">JSTerminal</span>(<span class="pl-c1">js</span><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-k">&lt;</span>a href<span class="pl-k">=</span><span class="pl-en">$</span>(<span class="pl-smi">link</span>.<span class="pl-c1">href</span>)<span class="pl-k">&gt;</span><span class="pl-en">$</span>(<span class="pl-smi">link</span>.<span class="pl-c1">text</span>)<span class="pl-k">&lt;</span><span class="pl-k">/</span>a<span class="pl-k">&gt;</span></span><span class="pl-pds">"</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> <span class="pl-c1">@const</span> link <span class="pl-k">=</span> <span class="pl-k">$</span>(<span class="pl-c1">Link</span>(<span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>https://julialang.org/<span class="pl-pds">"</span></span>))
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>const link = &lt;a href=<span class="pl-cce">\"</span>https://julialang.org/<span class="pl-cce">\"</span>&gt;<span class="pl-cce">\"</span>Julia<span class="pl-cce">\"</span>&lt;/a&gt;<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-object-literals" class="anchor" aria-hidden="true" href="#object-literals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Object Literals</h2>
<p>Objects are ubiquitous in JavaScript.
To create objects using JSExpr, you can use a simple syntax using braces.
There are two variants of this syntax (<em>NamedTuple</em> style and <em>Pair</em> style).
You can also create objects use normal <code>NamedTuple</code> syntax.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# NamedTuple braces style
julia&gt; @js { foo=&quot;foo&quot;, bar=&quot;bar&quot; }
JSString(&quot;{\&quot;foo\&quot;: \&quot;foo\&quot;, \&quot;bar\&quot;: \&quot;bar\&quot;}&quot;)

# Pair braces style (similar to Dict constructor)
julia&gt; @js { :foo =&gt; &quot;foo&quot;, :bar =&gt; &quot;bar&quot; }
JSString(&quot;{\&quot;foo\&quot;: \&quot;foo\&quot;, \&quot;bar\&quot;: \&quot;bar\&quot;}&quot;)

# NamedTuple syntax
julia&gt; @js (foo=&quot;foo&quot;, bar=&quot;bar&quot;)
JSString(&quot;{\&quot;foo\&quot;: \&quot;foo\&quot;, \&quot;bar\&quot;: \&quot;bar\&quot;}&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> NamedTuple braces style</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> { foo<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, bar<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> }
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>: <span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>, <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>: <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>}<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Pair braces style (similar to Dict constructor)</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> { <span class="pl-c1">:foo</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">:bar</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> }
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>: <span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>, <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>: <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>}<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> NamedTuple syntax</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> (foo<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, bar<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>)
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>: <span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>, <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>: <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>}<span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-why-not-dict" class="anchor" aria-hidden="true" href="#why-not-dict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why not <code>Dict</code>?</h4>
<p>JSExpr does not attempt to translate <em>semantics</em> between Julia and JavaScript
(with a few very minor exceptions covered in <em>Juliaisms</em> below).
Since <code>Dict</code> can be a valid function name in JavaScript, we do not translate
the Julia <code>Dict</code> constructor to an object creation syntax.</p>
<h2><a id="user-content-juliaisms" class="anchor" aria-hidden="true" href="#juliaisms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Juliaisms</h2>
<p>JSExpr, for the most part, does not attempt to translate semantics between
Julia and the resulting JavaScript code.
The reason for the decision is that Julia and JavaScript are
wildly different languages and we would invariably mess up some edge cases.
We do, however, translate a few Julian constructs to a <em>semantically</em> equivalent
JavaScript.</p>
<h4><a id="user-content-range-syntax-" class="anchor" aria-hidden="true" href="#range-syntax-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Range Syntax (<code>...:...</code>)</h4>
<p>JavaScript doesn't have a native <code>Range</code> object and the typical way to repeat a
loop body <code>n</code> times is to use a C-style <code>for</code> loop. There is no syntax for this
style of for loop in Julia, and <code>:</code> is not a valid JavaScript identifier, so the
colon function (<code>:</code>) is translated to JavaScript code that acts like a <code>Range</code>
object in Julia.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @js for i in 1:10
         console.log(i)
       end
JSString(&quot;for (let i of (new Array(10).fill(undefined).map((_, i) =&gt; i + 1))) { console.log(i); }&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@js</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
         console<span class="pl-k">.</span><span class="pl-c1">log</span>(i)
       <span class="pl-k">end</span>
<span class="pl-c1">JSString</span>(<span class="pl-s"><span class="pl-pds">"</span>for (let i of (new Array(10).fill(undefined).map((_, i) =&gt; i + 1))) { console.log(i); }<span class="pl-pds">"</span></span>)</pre></div>
<p>The resulting JS is very ugly and will fully materialize the range and so
should only be used for relatively small ranges.</p>
<h2><a id="user-content-serialization" class="anchor" aria-hidden="true" href="#serialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Serialization</h2>
<p>Serializing a <code>JSString</code> to JSON will result in a normal string containing the
JavaScript code.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = @js array -&gt; array.map($callback);
julia&gt; JSON.print(Dict(&quot;foo&quot; =&gt; &quot;bar&quot;, &quot;bar&quot;=&gt;f))
{&quot;bar&quot;:&quot;(array) =&gt; { return array.map((a) =&gt; { return a + 42; }); }&quot;,&quot;foo&quot;:&quot;bar&quot;}
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@js</span> array <span class="pl-k">-&gt;</span> array<span class="pl-k">.</span><span class="pl-c1">map</span>(<span class="pl-k">$</span>callback);
julia<span class="pl-k">&gt;</span> JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>f))
{<span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>(array) =&gt; { return array.map((a) =&gt; { return a + 42; }); }<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>}</pre></div>
<h2><a id="user-content-supported-expressions" class="anchor" aria-hidden="true" href="#supported-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported Expressions</h2>
<ul>
<li>Function calls</li>
<li>Comparison operators</li>
<li>Object and array literals</li>
<li>Function creation (named and anonymous functions)</li>
<li>If statements</li>
<li>For and while loops</li>
<li>JavaScript keywords (<code>@new</code>, <code>@var</code>, <code>@let</code>, <code>@const</code>)</li>
</ul>
<h2><a id="user-content-unsupported-expressions" class="anchor" aria-hidden="true" href="#unsupported-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unsupported Expressions</h2>
<h3><a id="user-content-not-yet-supported" class="anchor" aria-hidden="true" href="#not-yet-supported"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Not Yet Supported</h3>
<ul>
<li>Ternary expressions (<code>... ? ... : ...</code>)</li>
<li><code>try</code> / <code>catch</code></li>
</ul>
<h3><a id="user-content-might-never-be-supported" class="anchor" aria-hidden="true" href="#might-never-be-supported"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Might Never Be Supported</h3>
<ul>
<li>Object destructuring</li>
<li>Argument splatting</li>
</ul>
<p>If you notice anything else that's not supported or doesn't work as intended,
please <a href="https://github.com/JuliaGizmos/JSExpr.jl/issues">open an issue</a>.</p>
<h4><a id="user-content-ternary-expressions" class="anchor" aria-hidden="true" href="#ternary-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ternary Expressions</h4>
<p>Julia lowers (during parse) <code>if</code> statements and ternary expressions (<code>... ? ... : ...</code>)
to the same <code>Expr</code>, so JSExpr cannot distinguish between the two.
This poses an issue because JavaScript does not allow non-expression statements
(e.g., loops and variable declarations) inside of a ternary expression, but if
statements cannot be used in contexts which expect a value (but they <em>can</em> be
used in such contexts in Julia).</p>
<p>There are plans to implement a heuristic to emit a ternary expression if
appropriate (e.g., if the bodies of the ternary expression contains only one
sub-expression) but this is not implemented yet.</p>
</article></div>