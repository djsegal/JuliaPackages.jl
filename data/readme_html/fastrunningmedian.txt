<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a id="user-content-fastrunningmedian.jl"></a></p>
<p><a id="user-content-fastrunningmedian.jl-1"></a></p>
<h1><a id="user-content-fastrunningmedianjl" class="anchor" aria-hidden="true" href="#fastrunningmedianjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FastRunningMedian.jl</h1>
<p>This Julia Package allows you to calculate a running median - fast.</p>
<p><a id="user-content-installation"></a></p>
<p><a id="user-content-installation-1"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In Julia, execute:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add FastRunningMedian
"><pre>]add FastRunningMedian</pre></div>
<p><a id="user-content-high-level-api"></a></p>
<p><a id="user-content-high-level-api-1"></a></p>
<h2><a id="user-content-high-level-api" class="anchor" aria-hidden="true" href="#high-level-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-level API</h2>
<p><a id="user-content-fastrunningmedian.running_median" href="#FastRunningMedian.running_median">#</a>
<strong><code>FastRunningMedian.running_median</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="running_median(input, window_size, tapering=:symmetric)
"><pre><span class="pl-c1">running_median</span>(input, window_size, tapering<span class="pl-k">=</span><span class="pl-c1">:symmetric</span>)</pre></div>
<p>Run a median filter of <code>window_size</code> over the input array and return the result.</p>
<p><strong>Taperings</strong></p>
<p>The tapering decides the behaviour at the ends of the input. All taperings are mirror symmetric with respect to the middle of the input array. The available taperings are:</p>
<ul>
<li><code>:symmteric</code> or <code>:sym</code>: Ensure that the window is symmetric around each point of the output array by always growing or shrinking the window by 2. The output has the same length as the input if <code>window_size</code> is odd. If <code>window_size</code> is even, the output has one element less.</li>
<li><code>:asymmetric</code> or <code>:asym</code>: Always adds or removes one element when calculating the next output value. Creates asymmetric windowing at the edges of the array. If the input is N long, the output is N+window_size-1 elements long.</li>
<li><code>:asymmetric_truncated</code> or <code>:asym_trunc</code>: The same as asymmetric, but truncated at beginning and end to match the size of <code>:symmetric</code>.</li>
<li><code>:none</code> or <code>:no</code>: No tapering towards the ends. If the input has N elements, the output is only N-window_size+1 long.</li>
</ul>
<p>If you choose an even <code>window_size</code>, the elements of the output array lie in the middle between the input elements on a continuous underlying axis.</p>
<p><strong>Performance</strong></p>
<p>The underlying algorithm should scale as O(N log w) with the input size N and the window_size w.</p>
<p><a id="user-content-taperings-visualized"></a></p>
<p><a id="user-content-taperings-visualized-1"></a></p>
<h2><a id="user-content-taperings-visualized" class="anchor" aria-hidden="true" href="#taperings-visualized"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Taperings Visualized</h2>
<p>Each data point is shown as a cross and the windows are visualized as colored boxes, the input is grey.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/resources/tapering%20examples.png"><img src="docs/resources/tapering%20examples.png" alt="Tapering Examples" style="max-width:100%;"></a></p>
<p><a id="user-content-performance-comparison"></a></p>
<p><a id="user-content-performance-comparison-1"></a></p>
<h2><a id="user-content-performance-comparison" class="anchor" aria-hidden="true" href="#performance-comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance Comparison</h2>
<p><a target="_blank" rel="noopener noreferrer" href="docs/resources/Running%20Median%20Benchmarks.png"><img src="docs/resources/Running%20Median%20Benchmarks.png" alt="Benchmark Comparison" style="max-width:100%;"></a></p>
<p>For large window sizes, this package performs even better than calling <code>runmed</code> in R, which uses the Turlach implementation written in C. For small window sizes, the Stuetzle implementation in R still outperforms this package, but the overhead from RCall doesn't seem worth it. If you want to add a fast implementation for small window sizes to this package, feel free to put in a PR or open an issue with any questions you might have.</p>
<p>In contrast to this package, <a href="https://github.com/sairus7/SortFilters.jl">SortFilters.jl</a> supports arbitrary probability levels, for example to calculate quantiles.</p>
<p>You can find the Notebook used to create the above graph in the <code>benchmark</code> folder. I ran it on an i7-2600K with 8 GB RAM while editing and browsing in the background.</p>
<p><a id="user-content-stateful-api"></a></p>
<p><a id="user-content-stateful-api-1"></a></p>
<h2><a id="user-content-stateful-api" class="anchor" aria-hidden="true" href="#stateful-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stateful API</h2>
<p>FastRunningMedian provides a stateful API that can be used for streaming data, e. g. to reduce RAM consumption, or build your own high-level API.</p>
<p><a id="user-content-fastrunningmedian.medianfilter" href="#FastRunningMedian.MedianFilter">#</a>
<strong><code>FastRunningMedian.MedianFilter</code></strong> — <em>Type</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MedianFilter(first_val::T, window_size::Int) where T &lt;: Real
"><pre><span class="pl-c1">MedianFilter</span>(first_val<span class="pl-k">::</span><span class="pl-c1">T</span>, window_size<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">Real</span></pre></div>
<p>Construct a stateful running median filter.</p>
<p>Manipulate with <a href="README.md#FastRunningMedian.grow!"><code>grow!</code></a>, <a href="README.md#FastRunningMedian.roll!"><code>roll!</code></a>, <a href="README.md#FastRunningMedian.shrink!"><code>shrink!</code></a>.  Query with <a href="README.md#FastRunningMedian.median"><code>median</code></a>, <a href="README.md#Base.length"><code>length</code></a>, <a href="README.md#FastRunningMedian.window_size"><code>window_size</code></a>, <a href="README.md#FastRunningMedian.isfull"><code>isfull</code></a>.</p>
<p><a id="user-content-fastrunningmedian.grow!" href="#FastRunningMedian.grow!">#</a>
<strong><code>FastRunningMedian.grow!</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="grow!(mf::MedianFilter, val)
"><pre><span class="pl-c1">grow!</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>, val)</pre></div>
<p>Grow mf with the new value <code>val</code>.</p>
<p>Returns the updated median. If mf would grow beyond maximum window size, an error is thrown. In this case you probably wanted to use <a href="README.md#FastRunningMedian.roll!"><code>roll!</code></a>.</p>
<p>The new element is pushed onto the end of the circular buffer.</p>
<p><a id="user-content-fastrunningmedian.roll!" href="#FastRunningMedian.roll!">#</a>
<strong><code>FastRunningMedian.roll!</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="roll!(mf::MedianFilter, val)
"><pre><span class="pl-c1">roll!</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>, val)</pre></div>
<p>Roll the window over to the next position by replacing the first and oldest element in the ciruclar buffer with the new value <code>val</code>.</p>
<p>Will error when <code>mf</code> is not full yet - in this case you must first <a href="README.md#FastRunningMedian.grow!"><code>grow!</code></a> mf to maximum capacity.</p>
<p><a id="user-content-fastrunningmedian.shrink!" href="#FastRunningMedian.shrink!">#</a>
<strong><code>FastRunningMedian.shrink!</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="shrink!(mf::MedianFilter)
"><pre><span class="pl-c1">shrink!</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>)</pre></div>
<p>Shrinks <code>mf</code> by removing the first and oldest element in the circular buffer.</p>
<p>Returns the updated median. Will error if mf contains only one element as a MedianFilter with zero elements would not have a median.</p>
<p><a id="user-content-fastrunningmedian.median" href="#FastRunningMedian.median">#</a>
<strong><code>FastRunningMedian.median</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="median(mf::MedianFilter)
"><pre><span class="pl-c1">median</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>)</pre></div>
<p>Determine the current median in <code>mf</code>.</p>
<p><strong>Implementation</strong></p>
<p>If the number of elements in MedianFilter is odd, the low_heap is always one element bigger than the high_heap. The top element of the low_heap then is the median.</p>
<p>If the number of elements in MedianFilter is even, both heaps are the same size and the median is the mean of both top elements.</p>
<p><a id="user-content-base.length" href="#Base.length">#</a>
<strong><code>Base.length</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="length(mf::MedianFilter)
"><pre><span class="pl-c1">length</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>)</pre></div>
<p>Returns the number of elements in the stateful median filter <code>mf</code>.</p>
<p>This number is equal to the length of the internal circular buffer.</p>
<p><a id="user-content-fastrunningmedian.window_size" href="#FastRunningMedian.window_size">#</a>
<strong><code>FastRunningMedian.window_size</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="window_size(mf::MedianFilter)
"><pre><span class="pl-c1">window_size</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>)</pre></div>
<p>Returns the window_size of the stateful median filter <code>mf</code>.</p>
<p>This number is equal to the capacity of the internal circular buffer.</p>
<p><a id="user-content-fastrunningmedian.isfull" href="#FastRunningMedian.isfull">#</a>
<strong><code>FastRunningMedian.isfull</code></strong> — <em>Function</em>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="isfull(mf::MedianFilter)
"><pre><span class="pl-c1">isfull</span>(mf<span class="pl-k">::</span><span class="pl-c1">MedianFilter</span>)</pre></div>
<p>Returns true, when the length of the stateful median filter <code>mf</code> equals its window_size.</p>
<p><a id="user-content-sources"></a></p>
<p><a id="user-content-sources-1"></a></p>
<h2><a id="user-content-sources" class="anchor" aria-hidden="true" href="#sources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sources</h2>
<p>W. Hardle, W. Steiger 1995: Optimal Median Smoothing. Published in  Journal of the Royal Statistical Society, Series C (Applied Statistics), Vol. 44, No. 2 (1995), pp. 258-264. <a href="https://doi.org/10.2307/2986349" rel="nofollow">https://doi.org/10.2307/2986349</a></p>
<p>(I did not implement their custom double heap, but used two heaps from <a href="https://github.com/JuliaCollections/DataStructures.jl">DataStructures.jl</a>)</p>
<p><a id="user-content-keywords"></a></p>
<p><a id="user-content-keywords-1"></a></p>
<h2><a id="user-content-keywords" class="anchor" aria-hidden="true" href="#keywords"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Keywords</h2>
<p>Running Median is also known as Rolling Median or Moving Median.</p>
</article></div>