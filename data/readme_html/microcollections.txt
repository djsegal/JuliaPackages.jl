<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-microcollections" class="anchor" aria-hidden="true" href="#microcollections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MicroCollections</h1>
<p><a href="https://juliafolds.github.io/MicroCollections.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFolds/MicroCollections.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/JuliaFolds/MicroCollections.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>MicroCollections.jl provides immutable empty and singleton collections.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using MicroCollections

julia&gt; vec0()  # or EmptyVector()
0-element EmptyVector{Union{}}

julia&gt; vec0(Int)  # or EmptyVector{Int}()
0-element EmptyVector{Int64}

julia&gt; vec1(1)  # or SingletonVector((1,))
1-element SingletonVector{Int64}:
 1

julia&gt; EmptyDict()
EmptyDict{Union{},Union{}}()

julia&gt; EmptyDict{Symbol,Char}()
EmptyDict{Symbol,Char}()

julia&gt; SingletonDict(:a =&gt; 0)
SingletonDict{Symbol,Int64} with 1 entry:
  :a =&gt; 0

julia&gt; EmptySet()
EmptySet{Union{}}()

julia&gt; EmptySet{Int64}()
EmptySet{Int64}()

julia&gt; SingletonSet((1,))
SingletonSet{Int64} with 1 element:
  1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MicroCollections

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vec0</span>()  <span class="pl-c"><span class="pl-c">#</span> or EmptyVector()</span>
<span class="pl-c1">0</span><span class="pl-k">-</span>element EmptyVector{Union{}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vec0</span>(Int)  <span class="pl-c"><span class="pl-c">#</span> or EmptyVector{Int}()</span>
<span class="pl-c1">0</span><span class="pl-k">-</span>element EmptyVector{Int64}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vec1</span>(<span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> or SingletonVector((1,))</span>
<span class="pl-c1">1</span><span class="pl-k">-</span>element SingletonVector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">EmptyDict</span>()
<span class="pl-c1">EmptyDict</span><span class="pl-c1">{Union{},Union{}}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">EmptyDict</span><span class="pl-c1">{Symbol,Char}</span>()
<span class="pl-c1">EmptyDict</span><span class="pl-c1">{Symbol,Char}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SingletonDict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)
SingletonDict{Symbol,Int64} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">EmptySet</span>()
<span class="pl-c1">EmptySet</span><span class="pl-c1">{Union{}}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">EmptySet</span><span class="pl-c1">{Int64}</span>()
<span class="pl-c1">EmptySet</span><span class="pl-c1">{Int64}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SingletonSet</span>((<span class="pl-c1">1</span>,))
SingletonSet{Int64} with <span class="pl-c1">1</span> element<span class="pl-k">:</span>
  <span class="pl-c1">1</span></pre></div>
<p>With BangBang.jl, MicroCollections.jl is useful for constructing
singleton solutions that can be combined with a reduce:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using BangBang.Experimental: mergewith!!

julia&gt; @assert mapreduce(
           x -&gt; SingletonDict(abs(x) % 10 =&gt; 1), mergewith!!(+), 1:1000,
       ) == Dict(
           0 =&gt; 100,
           1 =&gt; 100,
           2 =&gt; 100,
           3 =&gt; 100,
           4 =&gt; 100,
           5 =&gt; 100,
           6 =&gt; 100,
           7 =&gt; 100,
           8 =&gt; 100,
           9 =&gt; 100,
       )
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BangBang<span class="pl-k">.</span>Experimental<span class="pl-k">:</span> mergewith!<span class="pl-k">!</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@assert</span> <span class="pl-c1">mapreduce</span>(
           x <span class="pl-k">-&gt;</span> <span class="pl-c1">SingletonDict</span>(<span class="pl-c1">abs</span>(x) <span class="pl-k">%</span> <span class="pl-c1">10</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>), <span class="pl-c1">mergewith!!</span>(<span class="pl-k">+</span>), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>,
       ) <span class="pl-k">==</span> <span class="pl-c1">Dict</span>(
           <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">7</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">8</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
           <span class="pl-c1">9</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>,
       )</pre></div>
</article></div>