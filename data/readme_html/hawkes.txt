<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hawkesjl" class="anchor" aria-hidden="true" href="#hawkesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hawkes.jl</h1>
<p dir="auto">Simulation and likelihood methods for univariate and multivariate Hawkes Processes with exponential kernels</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Hawkes
using DynamicHMC, LogDensityProblems, TransformVariables
using Distributions, Parameters, Random, Statistics
import ForwardDiff

# Simulate a 2-dimensional Hawkes process
u = [0.5, 0.1]
α = [1.3 0.8; 0.0 1.3]
δ = [2.0, 2.0]
ts = hawkes_simulate(u, α, δ, 10^4)

# Use DynamicHMC to recover the parameters from the simulated times
struct HP
    ts::Vector{Vector{Float64}}
end

function (problem::HP)(θ)
    @unpack u1,u2,α1,α2,δ1 = θ
    @unpack ts = problem
    u = [u1, u2]
    α = [α1 α2; 0.0 α1]
    δ = [δ1, δ1]
    prior = loglikelihood(Exponential(10.0), [u1, u2, α1, α2, δ1])
    hawkes_loglikelihood(u,α,δ,ts) + prior
end

p = HP(ts)
tr = as((u1 = as_positive_real, u2 = as_positive_real, α1 = as_positive_real, α2 = as_positive_real, δ1 = as_positive_real))
P = TransformedLogDensity(tr, p)
dP = ADgradient(:ForwardDiff, P);

results = mcmc_with_warmup(Random.MersenneTwister(1), dP, 10^4)

transform.(tr, results.chain) |&gt; x -&gt; collect(zip(keys(x[1]),  mapslices(mean,  map(collect,x), dims=[1])))

5-element Array{Tuple{Symbol,Float64},1}:
 (:u1, 0.49881371330080354)
 (:u2, 0.09750867941083316)
 (:α1, 1.241428210846674)
 (:α2, 0.765949249773491)
 (:δ1, 1.8858744824012086)
"><pre><span class="pl-k">using</span> Hawkes
<span class="pl-k">using</span> DynamicHMC, LogDensityProblems, TransformVariables
<span class="pl-k">using</span> Distributions, Parameters, Random, Statistics
<span class="pl-k">import</span> ForwardDiff

<span class="pl-c"><span class="pl-c">#</span> Simulate a 2-dimensional Hawkes process</span>
u <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.1</span>]
α <span class="pl-k">=</span> [<span class="pl-c1">1.3</span> <span class="pl-c1">0.8</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.3</span>]
δ <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>]
ts <span class="pl-k">=</span> <span class="pl-c1">hawkes_simulate</span>(u, α, δ, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Use DynamicHMC to recover the parameters from the simulated times</span>
<span class="pl-k">struct</span> HP
    ts<span class="pl-k">::</span><span class="pl-c1">Vector{Vector{Float64}}</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> (problem<span class="pl-k">::</span><span class="pl-c1">HP</span>)(θ)
    <span class="pl-c1">@unpack</span> u1,u2,α1,α2,δ1 <span class="pl-k">=</span> θ
    <span class="pl-c1">@unpack</span> ts <span class="pl-k">=</span> problem
    u <span class="pl-k">=</span> [u1, u2]
    α <span class="pl-k">=</span> [α1 α2; <span class="pl-c1">0.0</span> α1]
    δ <span class="pl-k">=</span> [δ1, δ1]
    prior <span class="pl-k">=</span> <span class="pl-c1">loglikelihood</span>(<span class="pl-c1">Exponential</span>(<span class="pl-c1">10.0</span>), [u1, u2, α1, α2, δ1])
    <span class="pl-c1">hawkes_loglikelihood</span>(u,α,δ,ts) <span class="pl-k">+</span> prior
<span class="pl-k">end</span>

p <span class="pl-k">=</span> <span class="pl-c1">HP</span>(ts)
tr <span class="pl-k">=</span> <span class="pl-c1">as</span>((u1 <span class="pl-k">=</span> as_positive_real, u2 <span class="pl-k">=</span> as_positive_real, α1 <span class="pl-k">=</span> as_positive_real, α2 <span class="pl-k">=</span> as_positive_real, δ1 <span class="pl-k">=</span> as_positive_real))
P <span class="pl-k">=</span> <span class="pl-c1">TransformedLogDensity</span>(tr, p)
dP <span class="pl-k">=</span> <span class="pl-c1">ADgradient</span>(<span class="pl-c1">:ForwardDiff</span>, P);

results <span class="pl-k">=</span> <span class="pl-c1">mcmc_with_warmup</span>(Random<span class="pl-k">.</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">1</span>), dP, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>)

<span class="pl-c1">transform</span>.(tr, results<span class="pl-k">.</span>chain) <span class="pl-k">|&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">zip</span>(<span class="pl-c1">keys</span>(x[<span class="pl-c1">1</span>]),  <span class="pl-c1">mapslices</span>(mean,  <span class="pl-c1">map</span>(collect,x), dims<span class="pl-k">=</span>[<span class="pl-c1">1</span>])))

<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Tuple{Symbol,Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">:u1</span>, <span class="pl-c1">0.49881371330080354</span>)
 (<span class="pl-c1">:u2</span>, <span class="pl-c1">0.09750867941083316</span>)
 (<span class="pl-c1">:α1</span>, <span class="pl-c1">1.241428210846674</span>)
 (<span class="pl-c1">:α2</span>, <span class="pl-c1">0.765949249773491</span>)
 (<span class="pl-c1">:δ1</span>, <span class="pl-c1">1.8858744824012086</span>)
</pre></div>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">This implementation is based on the following two papers:</p>
<ul dir="auto">
<li><a href="https://projecteuclid.org/euclid.ecp/1465315601" rel="nofollow">Exact simulation of Hawkes process with exponentially decaying intensity</a></li>
<li><a href="https://pat-laub.github.io/pdfs/honours_thesis.pdf" rel="nofollow">Hawkes Processes: Simulation, Estimation, and Validation</a></li>
</ul>
</article></div>