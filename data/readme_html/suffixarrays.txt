<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-suffixarrays" class="anchor" aria-hidden="true" href="#suffixarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SuffixArrays</h1>
<p><a href="https://travis-ci.org/JuliaCollections/SuffixArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0750cf30c7939ce1e5dee43506e01d30068642f5c754337c07375b0a328a9afb/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961436f6c6c656374696f6e732f5375666669784172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCollections/SuffixArrays.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A Julia package for computing <a href="http://en.wikipedia.org/wiki/Suffix_array" rel="nofollow">Suffix Arrays</a>.
The underlying suffix array sorting implementation is a pure Julia port of <a href="https://sites.google.com/site/yuta256/sais" rel="nofollow">sais</a>, by Yuta Mori.</p>
<p>You can use the package by running:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SuffixArrays

julia&gt; s = &quot;banana&quot;
&quot;banana&quot;

julia&gt; sa = suffixsort(s)
6-element Array{UInt8,1}:
 0x06
 0x04
 0x02
 0x01
 0x05
 0x03

julia&gt; [s[i:end] for i in sa]
6-element Array{String,1}:
 &quot;a&quot;
 &quot;ana&quot;
 &quot;anana&quot;
 &quot;banana&quot;
 &quot;na&quot;
 &quot;nana&quot;

julia&gt; issorted(ans)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SuffixArrays

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> sa <span class="pl-k">=</span> <span class="pl-c1">suffixsort</span>(s)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x06</span>
 <span class="pl-c1">0x04</span>
 <span class="pl-c1">0x02</span>
 <span class="pl-c1">0x01</span>
 <span class="pl-c1">0x05</span>
 <span class="pl-c1">0x03</span>

julia<span class="pl-k">&gt;</span> [s[i<span class="pl-k">:</span><span class="pl-c1">end</span>] <span class="pl-k">for</span> i <span class="pl-k">in</span> sa]
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>ana<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>anana<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>na<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>nana<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">issorted</span>(ans)
<span class="pl-c1">true</span></pre></div>
<p>The <code>suffixsort</code> function can compute a suffix array for vectors of <code>UInt8</code> or <code>UInt16</code> values, or for strings with code units that are one of these two types.
When generating a suffix array for a string, the suffix indices are in terms of code units, not characters, which means that some indices will be into the middle of characters that span multiple code units.
For UTF-8 and UTF-16 this doesn't affect using the suffix array as search index since a valid substring cannot start in the middle of a character anyway.
In other words, invalid substrings occuring in the suffix array will simply not match.</p>
<p>By default, <code>suffixsort(v)</code> produces an array of 1-based indices, but it can be called as <code>suffixsort(v, 0)</code> in order to produce an array of 0-based indices, which may be desirable to interface with 0-based libraries (or to save a tiny bit of space).</p>
</article></div>