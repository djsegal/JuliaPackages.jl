<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-faustjl" class="anchor" aria-hidden="true" href="#faustjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faust.jl</h1>
<p dir="auto">Julia wrapper for the <a href="https://faust.grame.fr/" rel="nofollow">Faust</a> compiler.</p>
<p dir="auto">Uses the Faust LLVM <a href="https://github.com/grame-cncm/faust/blob/master-dev/architecture/faust/dsp/llvm-c-dsp.h">C API</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Faust

# Create a DSP factory.
dsp = compile(&quot;&quot;&quot;
import(&quot;stdfaust.lib&quot;);

freq = hslider(&quot;freq&quot;, 440, 20, 20000, 1);
gain = hslider(&quot;gain&quot;, 0.25, 0, 1, 0.001);
process = os.oscs(freq) * gain;
&quot;&quot;&quot;)

# Initialize DSP instance and controls.
init!(dsp; block_size=1024, samplerate=48000)

# Compute one block of audio.
compute!(dsp)"><pre><span class="pl-k">using</span> Faust

<span class="pl-c"><span class="pl-c">#</span> Create a DSP factory.</span>
dsp <span class="pl-k">=</span> <span class="pl-c1">compile</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">import("stdfaust.lib");</span>
<span class="pl-s"></span>
<span class="pl-s">freq = hslider("freq", 440, 20, 20000, 1);</span>
<span class="pl-s">gain = hslider("gain", 0.25, 0, 1, 0.001);</span>
<span class="pl-s">process = os.oscs(freq) * gain;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Initialize DSP instance and controls.</span>
<span class="pl-c1">init!</span>(dsp; block_size<span class="pl-k">=</span><span class="pl-c1">1024</span>, samplerate<span class="pl-k">=</span><span class="pl-c1">48000</span>)

<span class="pl-c"><span class="pl-c">#</span> Compute one block of audio.</span>
<span class="pl-c1">compute!</span>(dsp)</pre></div>
<p dir="auto">By default, programs are compiled as single-precision; you can give <code>-double</code> or
other arguments to the compiler like so:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="compile(&quot;process = _;&quot;; name=&quot;passthrough&quot;, argv=[&quot;-double&quot;, &quot;-vec&quot;])"><pre class="notranslate"><code>compile("process = _;"; name="passthrough", argv=["-double", "-vec"])
</code></pre></div>
<p dir="auto">Each call to <code>compute!</code> will calculate <code>block_size</code> samples and return the
output as a matrix of (block_size, n_channels). If the program takes input,
set <code>dsp.inputs</code> to a (block_size, n_channels) matrix before calling <code>compute!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="passthrough = init!(compile(&quot;process = _, _;&quot;))
x = rand(Float32, 256, 2)
passthrough.inputs = x
@test compute!(passthrough) == x"><pre>passthrough <span class="pl-k">=</span> <span class="pl-c1">init!</span>(<span class="pl-c1">compile</span>(<span class="pl-s"><span class="pl-pds">"</span>process = _, _;<span class="pl-pds">"</span></span>))
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">256</span>, <span class="pl-c1">2</span>)
passthrough<span class="pl-k">.</span>inputs <span class="pl-k">=</span> x
<span class="pl-c1">@test</span> <span class="pl-c1">compute!</span>(passthrough) <span class="pl-k">==</span> x</pre></div>
<p dir="auto">After calling <code>init!</code>, any UI elements declared in your code will have their
path names and ranges available via <code>dsp.ui.ranges</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dsp.ui.ranges
Dict{String, Faust.UIRange} with 2 entries:
  &quot;/score/gain&quot; =&gt; UIRange(0.25, 0.0, 1.0, 0.001)
  &quot;/score/freq&quot; =&gt; UIRange(440.0, 20.0, 20000.0, 1.0)

julia&gt; ctrl = dsp.ui.ranges[&quot;/score/freq&quot;]; (ctrl.min, ctrl.max)
(20.0f0, 20000.0f0)"><pre>julia<span class="pl-k">&gt;</span> dsp<span class="pl-k">.</span>ui<span class="pl-k">.</span>ranges
Dict{String, Faust<span class="pl-k">.</span>UIRange} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>/score/gain<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">UIRange</span>(<span class="pl-c1">0.25</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.001</span>)
  <span class="pl-s"><span class="pl-pds">"</span>/score/freq<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">UIRange</span>(<span class="pl-c1">440.0</span>, <span class="pl-c1">20.0</span>, <span class="pl-c1">20000.0</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> ctrl <span class="pl-k">=</span> dsp<span class="pl-k">.</span>ui<span class="pl-k">.</span>ranges[<span class="pl-s"><span class="pl-pds">"</span>/score/freq<span class="pl-pds">"</span></span>]; (ctrl<span class="pl-k">.</span>min, ctrl<span class="pl-k">.</span>max)
(<span class="pl-c1">20.0f0</span>, <span class="pl-c1">20000.0f0</span>)</pre></div>
<p dir="auto">One can then set the values of these params like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="setparams!(dsp, Dict(&quot;/score/freq&quot; =&gt; 220.0f0))"><pre class="notranslate"><code>setparams!(dsp, Dict("/score/freq" =&gt; 220.0f0))
</code></pre></div>
<p dir="auto">See <a href="examples/portaudio.jl">examples/portaudio.jl</a> to understand how the DSP can
be wrapped for audio IO.</p>
</article></div>