<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-clang" class="anchor" aria-hidden="true" href="#clang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clang</h2>
<p><a href="https://github.com/JuliaInterop/Clang.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaInterop/Clang.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://github.com/JuliaInterop/Clang.jl/actions/workflows/TagBot.yml"><img src="https://github.com/JuliaInterop/Clang.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaInterop/Clang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/706fb9e41c60479c566aa276f6bf4a39ee9406b21b5adbf1cafd511441c50e32/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961496e7465726f702f436c616e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaInterop/Clang.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://JuliaInterop.github.io/Clang.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaInterop.github.io/Clang.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>This package provides a Julia language wrapper for libclang: the stable, C-exported
interface to the LLVM Clang compiler. The <a href="http://clang.llvm.org/doxygen/group__CINDEX.html" rel="nofollow">libclang API documentation</a>
provides background on the functionality available through libclang, and thus
through the Julia wrapper. The repository also hosts related tools built
on top of libclang functionality.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is under an overhaul. It's highly recommended to use the master branch and the new generator API.</p>
<p>If you'd like to use the old version, please checkout <a href="https://github.com/JuliaInterop/Clang.jl/tree/old-generator">this branch</a> for the documentation. Should you have any questions on how to upgrade the generator script, feel free to submit a post/request in the <a href="https://github.com/JuliaInterop/Clang.jl/discussions">Discussions</a> area.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; dev Clang
"><pre><code>pkg&gt; dev Clang
</code></pre></div>
<h2><a id="user-content-binding-generator" class="anchor" aria-hidden="true" href="#binding-generator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Binding Generator</h2>
<p>Clang.jl provides a module <code>Clang.Generators</code> for auto-generating C library bindings for Julia language from C headers.</p>
<h3><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h3>
<p>Write a config file <code>generator.toml</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[general]
library_name = &quot;libclang&quot;
output_file_path = &quot;./LibClang.jl&quot;
module_name = &quot;LibClang&quot;
jll_pkg_name = &quot;Clang_jll&quot;
export_symbol_prefixes = [&quot;CX&quot;, &quot;clang_&quot;]
"><pre><code>[general]
library_name = "libclang"
output_file_path = "./LibClang.jl"
module_name = "LibClang"
jll_pkg_name = "Clang_jll"
export_symbol_prefixes = ["CX", "clang_"]
</code></pre></div>
<p>and a Julia script <code>generator.jl</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Clang.Generators
using Clang.LibClang.Clang_jll

cd(@__DIR__)

include_dir = joinpath(Clang_jll.artifact_dir, &quot;include&quot;) |&gt; normpath
clang_dir = joinpath(include_dir, &quot;clang-c&quot;)

options = load_options(joinpath(@__DIR__, &quot;generator.toml&quot;))

# add compiler flags, e.g. &quot;-DXXXXXXXXX&quot;
args = get_default_args()
push!(args, &quot;-I$include_dir&quot;)

headers = [joinpath(clang_dir, header) for header in readdir(clang_dir) if endswith(header, &quot;.h&quot;)]
# there is also an experimental `detect_headers` function for auto-detecting top-level headers in the directory
# headers = detect_headers(clang_dir, args)

# create context
ctx = create_context(headers, args, options)

# run generator
build!(ctx)
"><pre><span class="pl-k">using</span> Clang<span class="pl-k">.</span>Generators
<span class="pl-k">using</span> Clang<span class="pl-k">.</span>LibClang<span class="pl-k">.</span>Clang_jll

<span class="pl-c1">cd</span>(<span class="pl-c1">@__DIR__</span>)

include_dir <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(Clang_jll<span class="pl-k">.</span>artifact_dir, <span class="pl-s"><span class="pl-pds">"</span>include<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> normpath
clang_dir <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(include_dir, <span class="pl-s"><span class="pl-pds">"</span>clang-c<span class="pl-pds">"</span></span>)

options <span class="pl-k">=</span> <span class="pl-c1">load_options</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>generator.toml<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> add compiler flags, e.g. "-DXXXXXXXXX"</span>
args <span class="pl-k">=</span> <span class="pl-c1">get_default_args</span>()
<span class="pl-c1">push!</span>(args, <span class="pl-s"><span class="pl-pds">"</span>-I<span class="pl-v">$include_dir</span><span class="pl-pds">"</span></span>)

headers <span class="pl-k">=</span> [<span class="pl-c1">joinpath</span>(clang_dir, header) <span class="pl-k">for</span> header <span class="pl-k">in</span> <span class="pl-c1">readdir</span>(clang_dir) <span class="pl-k">if</span> <span class="pl-c1">endswith</span>(header, <span class="pl-s"><span class="pl-pds">"</span>.h<span class="pl-pds">"</span></span>)]
<span class="pl-c"><span class="pl-c">#</span> there is also an experimental `detect_headers` function for auto-detecting top-level headers in the directory</span>
<span class="pl-c"><span class="pl-c">#</span> headers = detect_headers(clang_dir, args)</span>

<span class="pl-c"><span class="pl-c">#</span> create context</span>
ctx <span class="pl-k">=</span> <span class="pl-c1">create_context</span>(headers, args, options)

<span class="pl-c"><span class="pl-c">#</span> run generator</span>
<span class="pl-c1">build!</span>(ctx)</pre></div>
<p>Please refer to <a href="https://github.com/JuliaInterop/Clang.jl/blob/master/gen/generator.toml">this toml file</a> for a full list of configuration options.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p>The generator is currently used by several projects and you can take them as examples.</p>
<ul>
<li><a href="https://github.com/JuliaInterop/Clang.jl">JuliaInterop/Clang.jl</a>: the thin low-level LibClang.jl is generated by this package itself</li>
<li><a href="https://github.com/Gnimuc/CImGui.jl/tree/master/gen">Gnimuc/CImGui.jl</a>: generate additional field access methods</li>
<li><a href="https://github.com/JuliaMultimedia/CSFML.jl">JuliaMultimedia/CSFML.jl</a>: config multiple library names</li>
<li><a href="https://github.com/JuliaGraphics/FreeType.jl">JuliaGraphics/FreeType.jl</a>: select function-like macros</li>
<li><a href="https://github.com/maleadt/LLVM.jl">maleadt/LLVM.jl</a>: cross-platform support with patches</li>
<li><a href="https://github.com/JuliaWeb/LibCURL.jl">JuliaWeb/LibCURL.jl</a>: cross-platform build</li>
<li><a href="https://github.com/scipopt/SCIP.jl">scipopt/SCIP.jl</a>: applying custom patches by using <code>prologue.jl</code>&amp;<code>epilogue.jl</code></li>
<li><a href="https://github.com/JuliaLang/SuiteSparse.jl">JuliaLang/SuiteSparse.jl</a>: config compiler definitions for cross-platform</li>
<li><a href="https://github.com/JuliaGPU/VulkanCore.jl">JuliaGPU/VulkanCore.jl</a>: cross-platform build with third-party JLL dependencies</li>
<li><a href="https://github.com/JuliaGPU/oneAPI.jl">JuliaGPU/oneAPI.jl</a>: format the generated code with <a href="https://github.com/domluna/JuliaFormatter.jl">JuliaFormatter.jl</a></li>
</ul>

</article></div>