<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-clang" class="anchor" aria-hidden="true" href="#clang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clang</h2>
<p><a href="https://travis-ci.org/JuliaInterop/Clang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f28691076a1dde25e634ecb2e19d258c4141e65b/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961496e7465726f702f436c616e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaInterop/Clang.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/Gnimuc/clang-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/2f576b245c3137f8398cd467ef101e605bdcdd44/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7534726b70766d3279346f38626f38722f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/u4rkpvm2y4o8bo8r/branch/master?svg=true" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaInterop/Clang.jl/workflows/TagBot/badge.svg"><img src="https://github.com/JuliaInterop/Clang.jl/workflows/TagBot/badge.svg" alt="TagBot" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaInterop/Clang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1a293f7635533e12a1592a406156528e2809d96a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961496e7465726f702f436c616e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaInterop/Clang.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://JuliaInterop.github.io/Clang.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaInterop.github.io/Clang.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>This package provides a Julia language wrapper for libclang: the stable, C-exported
interface to the LLVM Clang compiler. The <a href="http://clang.llvm.org/doxygen/group__CINDEX.html" rel="nofollow">libclang API documentation</a>
provides background on the functionality available through libclang, and thus
through the Julia wrapper. The repository also hosts related tools built
on top of libclang functionality.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Now, the package provides an out-of-box installation experience on Linux, macOS and Windows. You
could simply install it by running:</p>
<pre><code>pkg&gt; add Clang
</code></pre>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-c-bindings-generator" class="anchor" aria-hidden="true" href="#c-bindings-generator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>C-bindings generator</h3>
<p>The package includes a generator to create Julia wrappers for C libraries from a collection of header files. The following declarations are currently supported:</p>
<ul>
<li>function: translated to Julia ccall(<code>va_list</code> and vararg argument are not supported)</li>
<li>struct: translated to Julia struct</li>
<li>enum: translated to <a href="https://github.com/JuliaInterop/CEnum.jl"><code>CEnum</code></a></li>
<li>union: translated to Julia struct</li>
<li>typedef: translated to Julia typealias to underlying intrinsic type</li>
<li>macro: limited support(see src/wrap_c.jl)</li>
</ul>
<p>Here is a simple example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Clang
<span class="pl-k">using</span> Clang<span class="pl-k">.</span>LibClang<span class="pl-k">.</span>LLVM_jll

<span class="pl-c"><span class="pl-c">#</span> LIBCLANG_HEADERS are those headers to be wrapped.</span>
<span class="pl-k">const</span> LIBCLANG_INCLUDE <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(LLVM_jll<span class="pl-k">.</span>libclang_path), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>include<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>clang-c<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> normpath
<span class="pl-k">const</span> LIBCLANG_HEADERS <span class="pl-k">=</span> [<span class="pl-c1">joinpath</span>(LIBCLANG_INCLUDE, header) <span class="pl-k">for</span> header <span class="pl-k">in</span> <span class="pl-c1">readdir</span>(LIBCLANG_INCLUDE) <span class="pl-k">if</span> <span class="pl-c1">endswith</span>(header, <span class="pl-s"><span class="pl-pds">"</span>.h<span class="pl-pds">"</span></span>)]

wc <span class="pl-k">=</span> <span class="pl-c1">init</span>(; headers <span class="pl-k">=</span> LIBCLANG_HEADERS,
            output_file <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>libclang_api.jl<span class="pl-pds">"</span></span>),
            common_file <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>libclang_common.jl<span class="pl-pds">"</span></span>),
            clang_includes <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(LIBCLANG_INCLUDE, CLANG_INCLUDE),
            clang_args <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>-I<span class="pl-pds">"</span></span>, <span class="pl-c1">joinpath</span>(LIBCLANG_INCLUDE, <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>)],
            header_wrapped <span class="pl-k">=</span> (root, current)<span class="pl-k">-&gt;</span>root <span class="pl-k">==</span> current,
            header_library <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span><span class="pl-s"><span class="pl-pds">"</span>libclang<span class="pl-pds">"</span></span>,
            clang_diagnostics <span class="pl-k">=</span> <span class="pl-c1">true</span>,
            )

<span class="pl-c1">run</span>(wc)</pre></div>
<p>Note that it might complain about missing some std headers, e.g. <code>fatal error: 'time.h' file not found</code>,
which could be fixed by adding <code>-Istdlib/include/on/your/specific/platform</code> to <code>clang_args</code>, for example,</p>
<pre><code># on macOS
using Clang: find_std_headers
for header in find_std_headers()
    push!(clang_args, "-I"*header)
end
</code></pre>
<h4><a id="user-content-backward-compatibility" class="anchor" aria-hidden="true" href="#backward-compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Backward compatibility</h4>
<p>If you miss those old behaviors before v0.8, please <code>Pkg.pin</code> the package to v0.8 and
make the following change in your old generator script:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Clang<span class="pl-k">:</span> CLANG_INCLUDE
<span class="pl-k">using</span> Clang<span class="pl-k">.</span>Deprecated<span class="pl-k">.</span>wrap_c
<span class="pl-k">using</span> Clang<span class="pl-k">.</span>Deprecated<span class="pl-k">.</span>cindex</pre></div>
<h3><a id="user-content-build-a-custom-c-bindings-generator" class="anchor" aria-hidden="true" href="#build-a-custom-c-bindings-generator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Build a custom C-bindings generator</h3>
<p>A custom C-bindings generator tends to be used on large codebases, often with multiple API versions to support. Building a generator requires some customization effort, so for small libraries the initial
investment may not pay off.</p>
<p>The above-mentioned C-bindings generator only exposes several entry points for customization.
In fact, it's actually not that hard to directly build your own C-bindings generator,
for example, the following script is used for generating <code>LibClang</code>, you could refer to docs for
further details.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Clang
<span class="pl-k">using</span> Clang<span class="pl-k">.</span>LibClang<span class="pl-k">.</span>LLVM_jll

<span class="pl-k">const</span> LIBCLANG_INCLUDE <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(LLVM_jll<span class="pl-k">.</span>libclang_path), <span class="pl-s"><span class="pl-pds">"</span>include<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>clang-c<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> normpath
<span class="pl-k">const</span> LIBCLANG_HEADERS <span class="pl-k">=</span> [<span class="pl-c1">joinpath</span>(LIBCLANG_INCLUDE, header) <span class="pl-k">for</span> header <span class="pl-k">in</span> <span class="pl-c1">readdir</span>(LIBCLANG_INCLUDE) <span class="pl-k">if</span> <span class="pl-c1">endswith</span>(header, <span class="pl-s"><span class="pl-pds">"</span>.h<span class="pl-pds">"</span></span>)]

<span class="pl-c"><span class="pl-c">#</span> create a work context</span>
ctx <span class="pl-k">=</span> <span class="pl-c1">DefaultContext</span>()

<span class="pl-c"><span class="pl-c">#</span> parse headers</span>
<span class="pl-c1">parse_headers!</span>(ctx, LIBCLANG_HEADERS,
               args<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>-I<span class="pl-pds">"</span></span>, <span class="pl-c1">joinpath</span>(LIBCLANG_INCLUDE, <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>)],
               includes<span class="pl-k">=</span><span class="pl-c1">vcat</span>(LIBCLANG_INCLUDE, CLANG_INCLUDE),
               )

<span class="pl-c"><span class="pl-c">#</span> settings</span>
ctx<span class="pl-k">.</span>libname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>libclang<span class="pl-pds">"</span></span>
ctx<span class="pl-k">.</span>options[<span class="pl-s"><span class="pl-pds">"</span>is_function_strictly_typed<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">false</span>
ctx<span class="pl-k">.</span>options[<span class="pl-s"><span class="pl-pds">"</span>is_struct_mutable<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">false</span>

<span class="pl-c"><span class="pl-c">#</span> write output</span>
api_file <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>libclang_api.jl<span class="pl-pds">"</span></span>)
api_stream <span class="pl-k">=</span> <span class="pl-c1">open</span>(api_file, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)

<span class="pl-k">for</span> trans_unit <span class="pl-k">in</span> ctx<span class="pl-k">.</span>trans_units
    root_cursor <span class="pl-k">=</span> <span class="pl-c1">getcursor</span>(trans_unit)
    <span class="pl-c1">push!</span>(ctx<span class="pl-k">.</span>cursor_stack, root_cursor)
    header <span class="pl-k">=</span> <span class="pl-c1">spelling</span>(root_cursor)
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>wrapping header: <span class="pl-v">$header</span> ...<span class="pl-pds">"</span></span>
    <span class="pl-c"><span class="pl-c">#</span> loop over all of the child cursors and wrap them, if appropriate.</span>
    ctx<span class="pl-k">.</span>children <span class="pl-k">=</span> <span class="pl-c1">children</span>(root_cursor)
    <span class="pl-k">for</span> (i, child) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(ctx<span class="pl-k">.</span>children)
        child_name <span class="pl-k">=</span> <span class="pl-c1">name</span>(child)
        child_header <span class="pl-k">=</span> <span class="pl-c1">filename</span>(child)
        ctx<span class="pl-k">.</span>children_index <span class="pl-k">=</span> i
        <span class="pl-c"><span class="pl-c">#</span> choose which cursor to wrap</span>
        <span class="pl-c1">startswith</span>(child_name, <span class="pl-s"><span class="pl-pds">"</span>__<span class="pl-pds">"</span></span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>  <span class="pl-c"><span class="pl-c">#</span> skip compiler definitions</span>
        child_name <span class="pl-k">in</span> <span class="pl-c1">keys</span>(ctx<span class="pl-k">.</span>common_buffer) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>  <span class="pl-c"><span class="pl-c">#</span> already wrapped</span>
        child_header <span class="pl-k">!=</span> header <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>  <span class="pl-c"><span class="pl-c">#</span> skip if cursor filename is not in the headers to be wrapped</span>

        <span class="pl-c1">wrap!</span>(ctx, child)
    <span class="pl-k">end</span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>writing <span class="pl-v">$(api_file)</span><span class="pl-pds">"</span></span>
    <span class="pl-c1">println</span>(api_stream, <span class="pl-s"><span class="pl-pds">"</span># Julia wrapper for header: <span class="pl-v">$(<span class="pl-c1">basename</span>(header))</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(api_stream, <span class="pl-s"><span class="pl-pds">"</span># Automatically generated using Clang.jl<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">print_buffer</span>(api_stream, ctx<span class="pl-k">.</span>api_buffer)
    <span class="pl-c1">empty!</span>(ctx<span class="pl-k">.</span>api_buffer)  <span class="pl-c"><span class="pl-c">#</span> clean up api_buffer for the next header</span>
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(api_stream)

<span class="pl-c"><span class="pl-c">#</span> write "common" definitions: types, typealiases, etc.</span>
common_file <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>libclang_common.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">open</span>(common_file, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">println</span>(f, <span class="pl-s"><span class="pl-pds">"</span># Automatically generated using Clang.jl<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">print_buffer</span>(f, <span class="pl-c1">dump_to_buffer</span>(ctx<span class="pl-k">.</span>common_buffer))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> uncomment the following code to generate dependency and template files</span>
<span class="pl-c"><span class="pl-c">#</span> copydeps(dirname(api_file))</span>
<span class="pl-c"><span class="pl-c">#</span> print_template(joinpath(dirname(api_file), "LibTemplate.jl"))</span></pre></div>
<h3><a id="user-content-libclang" class="anchor" aria-hidden="true" href="#libclang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LibClang</h3>
<p>LibClang is a thin wrapper over libclang. It's one-to-one mapped to the libclang APIs.
By <code>using Clang.LibClang</code>, all of the <code>CX</code>/<code>clang_</code>-prefixed libclang APIs are imported into the
current namespace, with which you could build up your own tools from the scratch. If you are
unfamiliar with the Clang AST, a good starting point is the <a href="http://clang.llvm.org/docs/IntroductionToTheClangAST.html" rel="nofollow">Introduction to the Clang AST</a>.</p>
</article></div>