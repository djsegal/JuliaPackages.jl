<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kerneldensityestimatejl" class="anchor" aria-hidden="true" href="#kerneldensityestimatejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KernelDensityEstimate.jl</h1>
<p><a href="https://travis-ci.org/JuliaRobotics/KernelDensityEstimate.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7608ba833d43acaec3ca47b4219bfd0bc9fd9ec8/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f4b65726e656c44656e73697479457374696d6174652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/KernelDensityEstimate.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaRobotics/KernelDensityEstimate.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d6b387cf68cd278bc2c0f77baa34e48286d3be05/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f4b65726e656c44656e73697479457374696d6174652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaRobotics/KernelDensityEstimate.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>

<p>Kernel Density Estimation <strong>with product approximation using multiscale Gibbs sampling</strong>.</p>
<p>All code is implemented in native Julia, including plotting which uses Gadfly. The main focus of this module is the ability to take the product between multiple KDEs, and makes this module unique from other KDE implementations. This package also supports n-dimensional KDEs. Please see examples below for details. The implementation is already fairly optimized from a symbolic standpoint and is based on work by:</p>
<pre><code>Sudderth, Erik B.; Ihler, Alexander, et al. "Nonparametric belief propagation." Communications of the ACM 53.10 (2010): 95-103.
</code></pre>
<p>The package has built in plotting functionality, using <a href="https://github.com/GiovineItalia/Gadfly.jl">Gadfly</a>.  Comments welcome.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In Julia 0.7 and above:</p>
<div class="highlight highlight-source-julia"><pre>] add KernelDensityEstimate</pre></div>
<h2><a id="user-content-plotting-functions" class="anchor" aria-hidden="true" href="#plotting-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plotting Functions</h2>
<p>The plotting fucntions for this library have been separated into <a href="http://www.github.com/JuliaRobotics/KernelDensityEstimatePlotting.jl">KernelDensityEstimatePlotting.jl</a>.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<p>Bring the module into the workspace</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> KernelDensityEstimate
<span class="pl-c"><span class="pl-c">#</span> Basic one dimensional examples</span>
<span class="pl-c"><span class="pl-c">#</span> using leave-one-out likelihood cross validation for bandwidth estimation</span>
p100 <span class="pl-k">=</span> <span class="pl-c1">kde!</span>([<span class="pl-c1">randn</span>(<span class="pl-c1">50</span>);<span class="pl-c1">10.0</span><span class="pl-k">.+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">50</span>)])
p2 <span class="pl-k">=</span> <span class="pl-c1">kde!</span>([<span class="pl-c1">0.0</span>;<span class="pl-c1">10.0</span>],[<span class="pl-c1">1.0</span>]) <span class="pl-c"><span class="pl-c">#</span> multibandwidth still to be added</span>
p75 <span class="pl-k">=</span> <span class="pl-c1">resample</span>(p2,<span class="pl-c1">75</span>)

<span class="pl-c"><span class="pl-c">#</span> bring in the plotting functions</span>
<span class="pl-k">using</span> KernelDensityEstimatePlotting
<span class="pl-c1">plot</span>([p100;p2;p75],c<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> using Gadfly under the hood</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/FirstExamplePlot.png"><img src="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/FirstExamplePlot.png" alt="alt tag" style="max-width:100%;"></a></p>
<p>Multidimensional example</p>
<div class="highlight highlight-source-julia"><pre>pd2 <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">100</span>));
<span class="pl-c1">@time</span> pd2 <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">100</span>)); <span class="pl-c"><span class="pl-c">#</span> defaults to loocv</span>
pm12 <span class="pl-k">=</span> <span class="pl-c1">marginal</span>(pd2,[<span class="pl-c1">1</span>;<span class="pl-c1">2</span>]);
pm2 <span class="pl-k">=</span> <span class="pl-c1">marginal</span>(pm12,[<span class="pl-c1">2</span>]);
<span class="pl-c1">plot</span>(pm2);</pre></div>
<p>Multiscale Gibbs product approximation example</p>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">100</span>))
q <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">2.0</span><span class="pl-k">.+</span><span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">100</span>))
dummy <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">100</span>),[<span class="pl-c1">1.0</span>]);
mcmciters <span class="pl-k">=</span> <span class="pl-c1">5</span>
pGM, <span class="pl-k">=</span> <span class="pl-c1">prodAppxMSGibbsS</span>(dummy, [p;q], <span class="pl-c1">nothing</span>, <span class="pl-c1">nothing</span>, Niter<span class="pl-k">=</span>mcmciters)
pq <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(pGM)
pq1 <span class="pl-k">=</span> <span class="pl-c1">marginal</span>(pq,[<span class="pl-c1">1</span>])
Pl1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>([<span class="pl-c1">marginal</span>(p,[<span class="pl-c1">1</span>]);<span class="pl-c1">marginal</span>(q,[<span class="pl-c1">1</span>]);<span class="pl-c1">marginal</span>(pq,[<span class="pl-c1">1</span>])],c<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>])</pre></div>
<p>Direct histogram of points from the product</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gadfly
Pl2 <span class="pl-k">=</span> Gadfly<span class="pl-k">.</span><span class="pl-c1">plot</span>(x<span class="pl-k">=</span>pGM[<span class="pl-c1">1</span>,:],y<span class="pl-k">=</span>pGM[<span class="pl-c1">2</span>,:],Geom<span class="pl-k">.</span>histogram2d);
<span class="pl-c1">draw</span>(<span class="pl-c1">PDF</span>(<span class="pl-s"><span class="pl-pds">"</span>product.pdf<span class="pl-pds">"</span></span>,<span class="pl-c1">15</span>cm,<span class="pl-c1">8</span>cm),<span class="pl-c1">hstack</span>(Pl1,Pl2))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/product.png"><img src="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/product.png" alt="alt tag" style="max-width:100%;"></a></p>
<p>KDE product between non-gaussian distributions</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Distributions
p <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">Beta</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">0.45</span>),<span class="pl-c1">300</span>));
q <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">Rayleigh</span>(<span class="pl-c1">0.5</span>),<span class="pl-c1">100</span>)<span class="pl-k">.-</span><span class="pl-c1">0.5</span>);
dummy <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span>,<span class="pl-c1">100</span>),[<span class="pl-c1">1.0</span>]);
pGM, <span class="pl-k">=</span> <span class="pl-c1">prodAppxMSGibbsS</span>(dummy, [p;q], <span class="pl-c1">nothing</span>, <span class="pl-c1">nothing</span>, Niter<span class="pl-k">=</span><span class="pl-c1">5</span>)
pq <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(pGM)
<span class="pl-c1">plot</span>([p;q;pq],c<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>])</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/RayleighBetaProduct.png"><img src="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/RayleighBetaProduct.png" alt="alt tag" style="max-width:100%;"></a></p>
<p>Draw multidimensional distributions as marginalized 2D contour plots</p>
<div class="highlight highlight-source-julia"><pre>axis<span class="pl-k">=</span>[[<span class="pl-k">-</span><span class="pl-c1">5.0</span>;<span class="pl-c1">5</span>]';[<span class="pl-k">-</span><span class="pl-c1">2.0</span>;<span class="pl-c1">2.0</span>]';[<span class="pl-k">-</span><span class="pl-c1">10.0</span>;<span class="pl-c1">10</span>]';[<span class="pl-k">-</span><span class="pl-c1">5.0</span>;<span class="pl-c1">5</span>]']
<span class="pl-c1">draw</span>(<span class="pl-c1">PDF</span>(<span class="pl-s"><span class="pl-pds">"</span>test.pdf<span class="pl-pds">"</span></span>,<span class="pl-c1">30</span>cm,<span class="pl-c1">20</span>cm),
 <span class="pl-c1">plot</span>( <span class="pl-c1">kde!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">4</span>,<span class="pl-c1">200</span>)) ) )

N<span class="pl-k">=</span><span class="pl-c1">200</span>;
pts <span class="pl-k">=</span> [<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">1</span>,N)<span class="pl-k">.+</span><span class="pl-c1">3</span>;
 [<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">1</span>,<span class="pl-c1">round</span>(Int,N<span class="pl-k">/</span><span class="pl-c1">2</span>))<span class="pl-k">'</span><span class="pl-k">.+</span><span class="pl-c1">3.0</span>;<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">1</span>,<span class="pl-c1">round</span>(Int,N<span class="pl-k">/</span><span class="pl-c1">2</span>))<span class="pl-k">'</span><span class="pl-k">.-</span><span class="pl-c1">3.0</span>]';
 <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,N)<span class="pl-k">.+</span><span class="pl-c1">3</span>];
p, q <span class="pl-k">=</span> <span class="pl-c1">kde!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">4</span>,<span class="pl-c1">100</span>)), <span class="pl-c1">kde!</span>(pts);
<span class="pl-c1">draw</span>(<span class="pl-c1">PNG</span>(<span class="pl-s"><span class="pl-pds">"</span>MultidimPlot.png<span class="pl-pds">"</span></span>,<span class="pl-c1">15</span>cm,<span class="pl-c1">10</span>cm),
 <span class="pl-c1">plot</span>( [p<span class="pl-k">*</span>q;p;q],c<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>], axis<span class="pl-k">=</span>axis, dims<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>,dimLbls<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>], levels<span class="pl-k">=</span><span class="pl-c1">4</span>) )</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/MultidimPlot.png"><img src="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/MultidimPlot.png" alt="alt tag" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> or draw product natively</span>
<span class="pl-c1">draw</span>(<span class="pl-c1">PNG</span>(<span class="pl-s"><span class="pl-pds">"</span>MultidimPlotProd.png<span class="pl-pds">"</span></span>,<span class="pl-c1">10</span>cm,<span class="pl-c1">7</span>cm),
 <span class="pl-c1">plot</span>( p<span class="pl-k">*</span>q, axis<span class="pl-k">=</span>axis, dims<span class="pl-k">=</span>[<span class="pl-c1">2</span>;<span class="pl-c1">4</span>],dimLbls<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>;<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>]) )</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/MultidimPlotProd.png"><img src="https://raw.githubusercontent.com/JuliaRobotics/KernelDensityEstimate.jl/master/test/MultidimPlotProd.png" alt="alt tag" style="max-width:100%;"></a></p>
<h1><a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributors</h1>
<p>The original C++ kde package was written by Alex Ihler and Mike Mandel in 2003, and has be rewritten in Julia and continuously modified by Dehann Fourie since.</p>
<p>Thank you to contributors and users alike, comments and improvements welcome according to JuliaLang and JuliaRobotics standards.</p>
</article></div>