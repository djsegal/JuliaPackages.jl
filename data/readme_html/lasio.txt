<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lasio" class="anchor" aria-hidden="true" href="#lasio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LasIO</h1>
<p dir="auto"><a href="https://github.com/visr/LasIO.jl/actions/workflows/CI.yml"><img src="https://github.com/visr/LasIO.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Julia package for reading and writing the LAS lidar format.</p>
<p dir="auto">This is a pure Julia package for reading and writing ASPRS <code>.las</code> files. Currently only LAS versions 1.1 - 1.3 and point formats 0 - 3 are supported. For LAZ support see below.</p>
<p dir="auto">If the file fits into memory, it can be loaded using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FileIO, LasIO
header, points = load(&quot;test.las&quot;)"><pre><span class="pl-k">using</span> FileIO, LasIO
header, points <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test.las<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">where <code>header</code> is of type <code>LasHeader</code>, and, if it is point format 3, <code>points</code> is a <code>Vector{LasPoint3}</code>. <code>LasPoint3</code> is an immutable that directly corresponds to the binary data in the LAS file. Use functions like <code>xcoord(p::LasPoint, header::LasHeader)</code> to take out the desired items in the point.</p>
<p dir="auto">If the file does not fit into memory, it can be memory mapped using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FileIO, LasIO
header, points = load(&quot;test.las&quot;, mmap=true)"><pre><span class="pl-k">using</span> FileIO, LasIO
header, points <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test.las<span class="pl-pds">"</span></span>, mmap<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">where <code>points</code> is now a memory mapped <code>PointVector{LasPoint3}</code> which behaves in the same way as the <code>Vector{LasPoint3}</code>, but reads the points on the fly from disk when indexed, not allocating the complete vector beforehand.</p>
<p dir="auto">See <code>test/runtests.jl</code> for other usages.</p>
<h2 dir="auto"><a id="user-content-laz-support" class="anchor" aria-hidden="true" href="#laz-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LAZ support</h2>
<p dir="auto">We advise to use <a href="https://github.com/evetion/LazIO.jl">LazIO</a>, which works out of the box and is compatible with LasIO.</p>
<p dir="auto">The compressed LAZ format is supported by LasIO itself, but requires the user to make sure the <code>laszip</code> executable can be found in the PATH. LAZ files are piped through <code>laszip</code> to provide reading and writing capability. <code>laszip</code> is not distributed with this package. One way to get it is to download <code>LAStools</code> from <a href="https://rapidlasso.com/" rel="nofollow">https://rapidlasso.com/</a>. The LAStools ZIP file already contains <code>laszip.exe</code> for Windows, for Linux or Mac it needs to be compiled first. When this is done this should work just like with LAS:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FileIO, LasIO
header, points = load(&quot;test.laz&quot;)"><pre><span class="pl-k">using</span> FileIO, LasIO
header, points <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test.laz<span class="pl-pds">"</span></span>)</pre></div>
</article></div>