<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-emojifyjl" class="anchor" aria-hidden="true" href="#emojifyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Emojify.jl</h1>
<p dir="auto">Emojify helps you spread chaos by replacing function and variable names in your code with random emoji.
The output is still valid Julia code.</p>
<h2 dir="auto"><a id="user-content-emojify-your-code" class="anchor" aria-hidden="true" href="#emojify-your-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Emojify your code</h2>
<p dir="auto">You can use either a string with Julia code as input, or a file path.
If a file path is given, all files referenced with <code>include()</code> will also be emojified.
If your code defines modules, module names, names of exported functions, and keyword arguments of exported functions will not be emojified.</p>
<p dir="auto">For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Emojify
emojify(&quot;
function Ï‰(x::AbstractVector{&lt;:Number}, i::Unsigned, z::Number)
    y = 1
    for j in 1:i
        y *= (z - x[j])
    end
    y
end
Ï‰(x::AbstractVector{&lt;:Number}, i::Number, z::Number) = Ï‰(x, unsigned(i), z)
&quot;)"><pre><span class="pl-k">using</span> Emojify
<span class="pl-c1">emojify</span>(<span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s">function Ï‰(x::AbstractVector{&lt;:Number}, i::Unsigned, z::Number)</span>
<span class="pl-s">    y = 1</span>
<span class="pl-s">    for j in 1:i</span>
<span class="pl-s">        y *= (z - x[j])</span>
<span class="pl-s">    end</span>
<span class="pl-s">    y</span>
<span class="pl-s">end</span>
<span class="pl-s">Ï‰(x::AbstractVector{&lt;:Number}, i::Number, z::Number) = Ï‰(x, unsigned(i), z)</span>
<span class="pl-s"><span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">will return</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function ğŸ–´(ğŸ•¼::AbstractVector{&lt;:Number}, ğŸ‘–::Unsigned, ğŸ“„::Number)
    ğŸ–… = 1
    for ğŸ–¥ in 1:ğŸ‘–
        ğŸ–… *= (ğŸ“„ - ğŸ•¼[ğŸ–¥])
    end
    ğŸ–…
end
ğŸ–´(ğŸ•¼::AbstractVector{&lt;:Number}, ğŸ‘–::Number, ğŸ“„::Number) = ğŸ–´(ğŸ•¼, unsigned(ğŸ‘–), ğŸ“„)"><pre><span class="pl-k">function</span> <span class="pl-en">ğŸ–´</span>(ğŸ•¼<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:Number}</span>, ğŸ‘–<span class="pl-k">::</span><span class="pl-c1">Unsigned</span>, ğŸ“„<span class="pl-k">::</span><span class="pl-c1">Number</span>)
    ğŸ–… <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">for</span> ğŸ–¥ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>ğŸ‘–
        ğŸ–… <span class="pl-k">*=</span> (ğŸ“„ <span class="pl-k">-</span> ğŸ•¼[ğŸ–¥])
    <span class="pl-k">end</span>
    ğŸ–…
<span class="pl-k">end</span>
<span class="pl-en">ğŸ–´</span>(ğŸ•¼<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:Number}</span>, ğŸ‘–<span class="pl-k">::</span><span class="pl-c1">Number</span>, ğŸ“„<span class="pl-k">::</span><span class="pl-c1">Number</span>) <span class="pl-k">=</span> <span class="pl-c1">ğŸ–´</span>(ğŸ•¼, <span class="pl-c1">unsigned</span>(ğŸ‘–), ğŸ“„)</pre></div>
<p dir="auto">To emojify a file, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="emojify(&quot;path_to_input_file.jl&quot;, &quot;path_to_output_directory&quot;)"><pre><span class="pl-c1">emojify</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_input_file.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>path_to_output_directory<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">You can also pass a <code>Vector{Char}</code> as the last argument to use instead of the default emoji:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
emojify(&quot;path_to_input_file.jl&quot;, &quot;path_to_output_directory&quot;, Char.(0x02107:0x0214A))"><pre><span class="pl-c1">emojify</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_input_file.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>path_to_output_directory<span class="pl-pds">"</span></span>, <span class="pl-c1">Char</span>.(<span class="pl-c1">0x02107</span><span class="pl-k">:</span><span class="pl-c1">0x0214A</span>))</pre></div>
<h2 dir="auto"><a id="user-content-emojifying-calls-to-base-julia-functions" class="anchor" aria-hidden="true" href="#emojifying-calls-to-base-julia-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Emojifying calls to base Julia functions</h2>
<p dir="auto">To achieve absolute chaos, I recommend using this package together with <a href="https://github.com/theogf/WatchJuliaBurn.jl">WatchJuliaBurn.jl</a>.</p>
</article></div>