<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-perfchecker" class="anchor" aria-hidden="true" href="#perfchecker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PerfChecker</h1>
<p dir="auto"><a href="https://JuliaConstraints.github.io/PerfChecker.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaConstraints.github.io/PerfChecker.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaConstraints/PerfChecker.jl/actions"><img src="https://github.com/JuliaConstraints/PerfChecker.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaConstraints/PerfChecker.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b15b23a59be7ca9baefb2ae6a67b26ce0b23bd56f2bc2db121f51cbc9a29358/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961436f6e73747261696e74732f50657266436865636b65722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d59564a684e3464704270" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaConstraints/PerfChecker.jl/branch/main/graph/badge.svg?token=YVJhN4dpBp" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://nohost.iijlab.net/chat/signup_user_complete/?id=nnuc1g14gtrqtnas6thu193xmr" rel="nofollow"><img src="https://camo.githubusercontent.com/5e557b8d43e8760c4eee2750fbeec53a14fac881bfe736d2f3ead82453189dd0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6d61747465726d6f73742d626c756576696f6c65742e737667" alt="Chat: Mattermost" data-canonical-src="https://img.shields.io/badge/chat-mattermost-blueviolet.svg" style="max-width: 100%;"></a>
<a href="https://juliaconstraints.github.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/f13b428b4b4dcdc8f0869c9a45e7c969f5aec5cc2fd736d5b270a2f1b0b37de4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f776562736974652d4a756c6961436f6e73747261696e74732d696e666f726d6174696f6e616c2e737667" alt="Website: JuliaConstraints" data-canonical-src="https://img.shields.io/badge/website-JuliaConstraints-informational.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>PerfChecker</code> is a set of performance checking tools for Julia packages. The ultimate aim is to create an environment where the tool can run similarly to a test environment. By doing so, it would be possible to test the performance of a package <code>P</code> in separate Julia instances. This would allow for each version of <code>P</code>:</p>
<ul dir="auto">
<li>The use of the latest compatible versions of Julia and other dependencies of P</li>
<li>Independence of compatibility requirements of <code>PerfChecker.jl</code> from the environment used during performance checks.</li>
</ul>
<h2 dir="auto"><a id="user-content-google-summer-of-code-2023" class="anchor" aria-hidden="true" href="#google-summer-of-code-2023"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Google Summer of Code (2023)</h2>
<p dir="auto"><code>JuliaConstraints</code>, including <code>PerfChecker.jl</code>, is participating in Google Summer of Code (GSoC) through the Julia language umbrella and is looking for contributors. Complete lists of projects:</p>
<ul dir="auto">
<li><a href="https://julialang.org/jsoc/gsoc/juliaconstraints/" rel="nofollow">JuliaConstraints</a></li>
<li>Other <a href="https://julialang.org/jsoc/projects/" rel="nofollow">Julia language projects</a></li>
</ul>
<h3 dir="auto"><a id="user-content-project-ideas" class="anchor" aria-hidden="true" href="#project-ideas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Ideas</h3>
<p dir="auto">This package consists of a set of tools designed to check the performance of packages over time and versions. The targeted audience is the whole community of packages' developers in Julia (not only JuliaConstraints).</p>
<p dir="auto">This README provides a short demo on how PerfChecker can be used.</p>
<p dir="auto"><strong>Basic features to implement (length ≈ 175 hours)</strong></p>
<ul dir="auto">
<li>PerfCheck environment similar to Test.jl and Pkg.jl</li>
<li>Sugar syntax <code>@bench</code>, <code>@alloc</code>, <code>@profile</code> similar to Test.jl and Pkg.jl</li>
<li>Interactive REPL interface</li>
<li>Interactive GUI interface (using for instance Makie)</li>
<li>Automatic Profiling ? (not sure how, there already is a bunch of super cool packages)</li>
<li>Automatic plotting of previous features</li>
</ul>
<p dir="auto"><strong>Advanced features (length +≈ 175 hours)</strong></p>
<ul dir="auto">
<li><em>Smart</em> semi-automatic analysis of performances</li>
<li>Performances bottlenecks</li>
<li>Regressions</li>
<li>Allocations vs speed trade-off</li>
<li>Descriptive plot captions</li>
<li>Handle Julia and other packages versions</li>
<li>Integrates with juliaup</li>
<li>Automatically generate versions parametric space for both packages and Julia</li>
</ul>
<p dir="auto">Note that some features are interchangeable depending on the interest of the candidate. For candidates with a special interest in the JuliaConstraints ecosystem, checking the performances of some packages is an option.</p>
<p dir="auto"><strong>Length</strong></p>
<p dir="auto">175 hours – 350 hours (depending on features)</p>
<p dir="auto"><strong>Recommended Skills (||)</strong></p>
<ul dir="auto">
<li>Familiarity with package development</li>
<li>REPL and/or GUI interfaces</li>
<li>Coverage, Benchmarks, and Profiling tools</li>
</ul>
<p dir="auto"><strong>Difficulty</strong></p>
<p dir="auto">Easy to Medium, depending on the features implemented</p>
<h3 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h3>
<p dir="auto">Although it is part of JuliaConstraints, <code>PerfChecker</code> is a standalone project. As such a good start is to understand fully its features and workflow. For instance, one way is to write a small use case in the vein of the small tutorial below. Possible packages could be</p>
<ul dir="auto">
<li>A JuliaConstraints package or dependency</li>
<li>A package written by the GSoC candidate</li>
<li>Another package from the Julia community</li>
</ul>
<p dir="auto">Please bear in mind that, ideally, writing performance checks for such a package should be simple.</p>
<p dir="auto">Also, allocation checks generate memory files in the package local folder. Ideally the package should be <code>dev</code>ed in a local environment.</p>
<p dir="auto">To contribute, please fork the repo, create a new branch, make your changes, and submit a pull request. If you are unsure about anything or need any help, please don't hesitate to ask through issues, <a href="https://nohost.iijlab.net/chat/signup_user_complete/?id=nnuc1g14gtrqtnas6thu193xmr" rel="nofollow">JuliaConstraints chat</a>, or the <code>#juliaconstraints</code> channel on Humans-of-Julia's <a href="https://discord.gg/7KC28q98nP" rel="nofollow">Discord</a>.</p>
<p dir="auto">We encourage students and other possible GSoC contributors to participate in <code>PerfChecker</code>'s development as it would bring a tools for the Julia community as a whole. It would bring them experience and deep understanding of Julia packages development and, more generally, open source development along with performance testing.
We're looking forward for proposals submissions.</p>
<h2 dir="auto"><a id="user-content-small-tutorial" class="anchor" aria-hidden="true" href="#small-tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Small tutorial</h2>
<p dir="auto">This tutorial is based on a beta version and is prone to change frequently. Please use it as a workflow example.</p>
<p dir="auto">Let's write two small scripts to check allocations (<code>allocs.jl</code>) and benchmarks (<code>bench.jl</code>) for <a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl">CompositionalNetworks.jl</a> using <code>PerfChecker.jl</code>.
In the current state, we write and execute the scripts (and stores a local environment) in the <code>/perf</code> folder of <code>CompositionalNetworks.jl</code>. You can use <code>julia --project</code> to activate that environment when running the script. For instance, I run the check for <code>CompositionalNetworks.jl</code> with the following command,</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia -t 10 --project"><pre>julia -t 10 --project</pre></div>
<p dir="auto">To generate results from different versions of the targeted package, be sure to change the version in the local environment.</p>
<p dir="auto">We will generate plots from the allocations check and the benchmark check from the <code>REPL</code>.</p>
<p dir="auto">Please add to the environment the following packages (adapt to your use case):</p>
<ul dir="auto">
<li><code>PerfChecker.jl</code></li>
<li><code>Test.jl</code>: for allocations</li>
<li><code>BenchmarkTools</code>: for benchmarks</li>
<li><code>CompositionalNetworks.jl</code>: target</li>
<li><code>ConstraintDomains.jl</code>: dependency</li>
</ul>
<p dir="auto"><strong>Remark on code compilation and <code>PerfChecker.jl</code></strong></p>
<p dir="auto">Depending on the nature of your code, it is important to be sure to trigger all compilation previous to the allocation check. This role is annotated in both scripts.</p>
<p dir="auto">Note that in the case of <code>CompositionalNetworks.jl</code>, it stochastically generates a great deal of methods to compile.</p>
<p dir="auto">For deterministic code, <code>pre-alloc()</code> can be minimal, and <code>@benchmark</code> will handle triggering the necessary compilation before the checks.</p>
<h3 dir="auto"><a id="user-content-allocation-checks" class="anchor" aria-hidden="true" href="#allocation-checks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Allocation checks</h3>
<p dir="auto">The current state of <code>PerfChecker.jl</code> requires the use of <code>Test.jl</code>, but this requirement will disappear soon.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Required to run the script
using PerfChecker
using Test

# Target(s)
using CompositionalNetworks # lastest release: 0.3.1

# Direct dependencies of this script
using ConstraintDomains

@testset &quot;PerfChecker.jl&quot; begin
    # Title of the alloc check (for logging purpose)
    title = &quot;Explore, Learn, and Compose&quot;

    # Dependencies needed to execute pre_alloc and alloc
    dependencies = [CompositionalNetworks, ConstraintDomains]

    # Target of the alloc check
    targets = [CompositionalNetworks]

    # Code specific to the package being checked
    domains = fill(domain([1, 2, 3]), 3)

    # Code to trigger precompilation before the alloc check
    pre_alloc() = foreach(_ -&gt; explore_learn_compose(domains, allunique), 1:10)

    # Code being allocations check
    alloc() = explore_learn_compose(domains, allunique)

    # Actual call to PerfChecker
    alloc_check(title, dependencies, targets, pre_alloc, alloc; path=@__DIR__, threads=10)
end"><pre><span class="pl-c"><span class="pl-c">#</span> Required to run the script</span>
<span class="pl-k">using</span> PerfChecker
<span class="pl-k">using</span> Test

<span class="pl-c"><span class="pl-c">#</span> Target(s)</span>
<span class="pl-k">using</span> CompositionalNetworks <span class="pl-c"><span class="pl-c">#</span> lastest release: 0.3.1</span>

<span class="pl-c"><span class="pl-c">#</span> Direct dependencies of this script</span>
<span class="pl-k">using</span> ConstraintDomains

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>PerfChecker.jl<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c"><span class="pl-c">#</span> Title of the alloc check (for logging purpose)</span>
    title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Explore, Learn, and Compose<span class="pl-pds">"</span></span>

    <span class="pl-c"><span class="pl-c">#</span> Dependencies needed to execute pre_alloc and alloc</span>
    dependencies <span class="pl-k">=</span> [CompositionalNetworks, ConstraintDomains]

    <span class="pl-c"><span class="pl-c">#</span> Target of the alloc check</span>
    targets <span class="pl-k">=</span> [CompositionalNetworks]

    <span class="pl-c"><span class="pl-c">#</span> Code specific to the package being checked</span>
    domains <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">domain</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]), <span class="pl-c1">3</span>)

    <span class="pl-c"><span class="pl-c">#</span> Code to trigger precompilation before the alloc check</span>
    <span class="pl-en">pre_alloc</span>() <span class="pl-k">=</span> <span class="pl-c1">foreach</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">explore_learn_compose</span>(domains, allunique), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)

    <span class="pl-c"><span class="pl-c">#</span> Code being allocations check</span>
    <span class="pl-en">alloc</span>() <span class="pl-k">=</span> <span class="pl-c1">explore_learn_compose</span>(domains, allunique)

    <span class="pl-c"><span class="pl-c">#</span> Actual call to PerfChecker</span>
    <span class="pl-c1">alloc_check</span>(title, dependencies, targets, pre_alloc, alloc; path<span class="pl-k">=</span><span class="pl-c1">@__DIR__</span>, threads<span class="pl-k">=</span><span class="pl-c1">10</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This script will output the table below (and store it as <code>mallocs/mallocs-0.3.1.csv</code>). Note that the allocations are provided in decreasing order. The <code>.mem</code> files generated by tracking allocations are automatically deleted (unless your code run into an error).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/PerfChecker-alloc_check.png"><img src="/images/PerfChecker-alloc_check.png" alt="Malloc-check" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-benchmark-checks" class="anchor" aria-hidden="true" href="#benchmark-checks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark checks</h3>
<p dir="auto">As <code>BenchmarkTools.jl</code> provides already a great set of functionalities, we use it directly. In the future, it is likely that <code>PerfChecker.jl</code> will provide synthetic sugar to wrap <code>@benchmark</code> with similar behavior to make using <code>BenchmarkTools.jl</code> invisible.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Required to run the script
using PerfChecker
using BenchmarkTools

# Target(s)
using CompositionalNetworks # lastest release: 0.3.1

# Direct dependencies of this script
using ConstraintDomains

# Target of the benchmark
target = CompositionalNetworks

# Code specific to the package being checked
domains = fill(domain([1, 2, 3, 4]), 4)

# Code to trigger precompilation before the bench (optional)
foreach(_ -&gt; explore_learn_compose(domains, allunique), 1:10)

# Code being benchmarked (be sure to enforce specific amounts of evals and samples for each version benchmarked)
bench = @benchmark explore_learn_compose(domains, allunique) evals=1 samples=10 seconds=3600

# Store the bench results
store_benchmark(bench, target; path=@__DIR__)"><pre><span class="pl-c"><span class="pl-c">#</span> Required to run the script</span>
<span class="pl-k">using</span> PerfChecker
<span class="pl-k">using</span> BenchmarkTools

<span class="pl-c"><span class="pl-c">#</span> Target(s)</span>
<span class="pl-k">using</span> CompositionalNetworks <span class="pl-c"><span class="pl-c">#</span> lastest release: 0.3.1</span>

<span class="pl-c"><span class="pl-c">#</span> Direct dependencies of this script</span>
<span class="pl-k">using</span> ConstraintDomains

<span class="pl-c"><span class="pl-c">#</span> Target of the benchmark</span>
target <span class="pl-k">=</span> CompositionalNetworks

<span class="pl-c"><span class="pl-c">#</span> Code specific to the package being checked</span>
domains <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">domain</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]), <span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Code to trigger precompilation before the bench (optional)</span>
<span class="pl-c1">foreach</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">explore_learn_compose</span>(domains, allunique), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> Code being benchmarked (be sure to enforce specific amounts of evals and samples for each version benchmarked)</span>
bench <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">explore_learn_compose</span>(domains, allunique) evals<span class="pl-k">=</span><span class="pl-c1">1</span> samples<span class="pl-k">=</span><span class="pl-c1">10</span> seconds<span class="pl-k">=</span><span class="pl-c1">3600</span>

<span class="pl-c"><span class="pl-c">#</span> Store the bench results</span>
<span class="pl-c1">store_benchmark</span>(bench, target; path<span class="pl-k">=</span><span class="pl-c1">@__DIR__</span>)</pre></div>
<p dir="auto">This script will output the results of <code>@benchmark</code> as a table (and store it as <code>benchmarks/benchmark-0.3.1.csv</code>). Note that it is recommended (but not necessary) to ensure that for each version of the package benchmarked, the output is of similar length.</p>
<h3 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h3>
<p dir="auto">We will generate some plots, in <code>perf/mallocs</code> and <code>perf/benchmarks</code>. In the REPL (or a notebook), please run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PerfChecker
using CompositionalNetworks

alloc_plot([CompositionalNetworks])
bench_plot([COmpositionalNetworks])
"><pre><span class="pl-k">using</span> PerfChecker
<span class="pl-k">using</span> CompositionalNetworks

<span class="pl-c1">alloc_plot</span>([CompositionalNetworks])
<span class="pl-c1">bench_plot</span>([COmpositionalNetworks])
</pre></div>
<p dir="auto"><strong>Allocs (Pie Chart)</strong></p>
<p dir="auto">For each version checked with the previous scripts, we get a pie plot showing the distribution of the allocations (per line). Obviously, improving the allocations at the 5th line of <code>metrics.jl</code> would improve allocations (and likely overall performances) in <code>CompositionalNetworks.jl</code>. Let's try to spot issues through the evolution of allocations over time.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/mallocs-0.3.1.png"><img src="images/mallocs-0.3.1.png" alt="Malloc-pie" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Allocs over time</strong></p>
<p dir="auto">Luckily, an overview of the evolution of the allocations within each file is also plotted. The allocations in <code>CompositionalNetworks.jl</code> improve a lot from <code>v0.3.x</code>. Interestingly, the changes also introduced an increase in allocations in the <code>metrics.jl</code> file. Maybe there really is an issue (answer in future releases of <code>CompositionalNetworks.jl</code>).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/mallocs-evolutions.png"><img src="/images/mallocs-evolutions.png" alt="Malloc-evolution" style="max-width: 100%;"></a></p>
<p dir="auto">First, we should check how the performances are impacted by the changes in memory allocations.</p>
<p dir="auto"><strong>Benchmarks (allocs and memory)</strong></p>
<p dir="auto">To confirm the improvement of allocations above, let's have a look at the evolution of allocations and memory use over time.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/benchmark-allocs.png"><img src="/images/benchmark-allocs.png" alt="Benchmark-allocs" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="/images/benchmark-memory.png"><img src="/images/benchmark-memory.png" alt="Benchmark-memory" style="max-width: 100%;"></a></p>
<p dir="auto">Both distribution of allocations and memory is very stable. This meet the improvement of the design of <code>CompositionalNetworks.jl</code> that ensure allocations of one data structure at the start of each <code>explore_learn_compose</code> call evaluated by both scripts.</p>
<p dir="auto"><strong>Benchmarks (times and garbage collection times)</strong></p>
<p dir="auto">Garbage collection brings a lot of comfort for programmers, and it participates in the attractiveness of the Julia language. However, careless allocations can be a performance pitfall. Such was the case of <code>CompositionalNetworks.jl</code> prior to <code>v0.3</code>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/benchmark-gctimes.png"><img src="/images/benchmark-gctimes.png" alt="Benchmark-gctimes" style="max-width: 100%;"></a></p>
<p dir="auto">The changes introduce from that version clearly improved our GC issues. Does it reflect on the global time performance? (spoiler: yes, it does, cf next plot)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/benchmark-times.png"><img src="/images/benchmark-times.png" alt="Benchmark-times" style="max-width: 100%;"></a></p>
<p dir="auto">We can remark important deviations (beware the logarithmic scale ...) from the mean. As mentioned above, <code>CompositionalNetworks.jl</code> uses a stochastic process, so it is not surprising. At least, memory (allocations) are stable.</p>
<p dir="auto"><strong>Benchmarks (evolutions overview)</strong></p>
<p dir="auto">Well, we probably could get the gist of the previous 4 plots from the wrap-up plot below.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/benchmark-evolutions.png"><img src="/images/benchmark-evolutions.png" alt="Benchmark-evolutions" style="max-width: 100%;"></a></p>
<p dir="auto">Note that the analysis on memory stability despite a stochastic process that reflect on the <code>times</code> and <code>gctimes</code> is not possible here. But it looks much better if you only can show off one performance plot.</p>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.</p>
<p dir="auto">To contribute, please fork the repo, create a new branch, make your changes, and submit a pull request. If you are unsure about anything or need any help, please don't hesitate to ask.</p>
<h2 dir="auto"><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgments</h2>
<p dir="auto">This package is part of the <a href="https://juliaconstraints.github.io/" rel="nofollow">JuliaConstraints</a> project. We thank the entire community for their contributions.</p>
</article></div>