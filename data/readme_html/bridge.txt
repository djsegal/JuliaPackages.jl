<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/mschauer/Bridge.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/74e6e9f9e15ef487d00adf177fce444268bca840/68747470733a2f2f7472617669732d63692e6f72672f6d736368617565722f4272696467652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mschauer/Bridge.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://mschauer.github.io/Bridge.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://mschauer.github.io/Bridge.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6f66adaf58b10c8d7883435c7ed336cfd5803082/68747470733a2f2f6d736368617565722e6769746875622e696f2f4272696467652e6a6c2f6272696467656c6f676f2e676966"><img src="https://camo.githubusercontent.com/6f66adaf58b10c8d7883435c7ed336cfd5803082/68747470733a2f2f6d736368617565722e6769746875622e696f2f4272696467652e6a6c2f6272696467656c6f676f2e676966" alt="Logo" data-canonical-src="https://mschauer.github.io/Bridge.jl/bridgelogo.gif" style="max-width:100%;"></a></p>
<h1><a id="user-content-bridgejl" class="anchor" aria-hidden="true" href="#bridgejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bridge.jl</h1>
<p>Statistics and stochastic calculus for Markov processes in continuous time, include univariate and multivariate stochastic processes such as stochastic differential equations or diffusions (SDE's) or Levy processes.</p>
<p>I am personally interested in doing Bayesian inference on discretely observed diffusion processes, but this package is written to be of general use and contributions are welcome.
Specifically for our code for parameter inference for diffusion processes from discrete data or passage times, check out the dependent package <a href="https://github.com/mmider/BridgeSDEInference.jl">BridgeSDEInference.jl</a>.
The statistical method relies a lot on simulating conditional diffusions (so called "difffusion bridges"). See <a href="./example/tutorial.jl">./example/tutorial.jl</a> for a more general introduction into working with this package.</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Define and simulate diffusion processes in one or more dimension</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Continuous and discrete likelihood using Girsanovs theorem and transition densities</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Monte Carlo sample diffusion bridges, diffusion processes conditioned to hit a point v at a prescribed time T</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Brownian motion in one and more dimensions</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Ornstein-Uhlenbeck processes and Ornstein-Uhlenbeck bridges</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Bessel processes</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Gamma processes</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Inhomogenous poisson process</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Basic stochastic calculus functionality (Ito integral, quadratic variation)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Euler-Scheme and implicit methods (Runge-Kutta)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Levy-driven SDEs</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Continuous-discrete filtering for partially observed diffusion processes</li>
</ul>
<p>The layout/api was originally written to be compatible with Simon Danisch's package <a href="https://github.com/SimonDanisch/FixedSizeArrays.jl">FixedSizeArrays.jl</a>. It was refactored to be compatible with <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> by Dan Getz.
Some SDE and ODE solvers in Bridge are accessible with the <code>JuliaDiffEq</code> common interface via <a href="https://github.com/JuliaDiffEq/BridgeDiffEq.jl">BridgeDiffEq.jl</a>.</p>
<p>The example programs in the example/ directory have additional dependencies: ConjugatePriors and a plotting library.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>The key objects introduced are the abstract type <code>ContinuousTimeProcess{T}</code> parametrised by the state space of the path, for example <code>T == Float64</code> and various <code>structs</code> suptyping it, for example <code>Wiener{Float64}</code> for a real Brownian motion. These play roughly a similar role as types subtyping <code>Distribution</code> in the Distributions.jl package.</p>
<p>Secondly, the struct</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> SamplePath{T}
    tt<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    yy<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>
    <span class="pl-en">SamplePath</span><span class="pl-c1">{T}</span>(tt, yy) <span class="pl-k">where</span> {T} <span class="pl-k">=</span> <span class="pl-c1">new</span>(tt, yy)
<span class="pl-k">end</span></pre></div>
<p>serves as container for sample path returned by direct and approximate samplers (<code>sample</code>, <code>euler</code>, ...).
<code>tt</code> is the vector of the grid points of the simulation and <code>yy</code> the corresponding vector of states.</p>
<p>Help is available at the REPL:</p>
<pre><code>help?&gt; GammaProcess
search: GammaProcess LocalGammaProcess VarianceGammaProcess
</code></pre>
<table>
<thead>
<tr>
<th><code>GammaProcess</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>A <em>GammaProcess</em> with jump rate <code>γ</code> and inverse jump size <code>λ</code> has increments <code>Gamma(t*γ, 1/λ)</code> and Levy measure</p><p>ν(x) = γ x⁻¹ exp(-λ x),</p><p>Here <code>Gamma(α,θ)</code> is the Gamma distribution in julia's parametrization with shape parameter <code>α</code> and scale <code>θ</code>.</p> <p> <b> Examples </b></p><p><code> julia&gt; sample(linspace(0.0, 1.0),  GammaProcess(1.0, 0.5)) </code></p></td>
</tr>
</tbody>
</table>
<p>Pre-defined processes defined are
<code>Wiener</code>, <code>WienerBridge</code>, <code>Gamma</code>, <code>LinPro</code> (linear diffusion/generalized Ornstein-Uhlenbeck) and others.</p>
<p>It is also quite transparent how to add a new process:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Bridge
<span class="pl-k">using</span> Plots

<span class="pl-c"><span class="pl-c">#</span> Define a diffusion process</span>
<span class="pl-k">struct</span> OrnsteinUhlenbeck  <span class="pl-k">&lt;:</span> <span class="pl-c1">ContinuousTimeProcess{Float64}</span>
    β<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-c"><span class="pl-c">#</span> drift parameter (also known as inverse relaxation time)</span>
    σ<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-c"><span class="pl-c">#</span> diffusion parameter</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> define drift and diffusion coefficient of OrnsteinUhlenbeck</span>
Bridge<span class="pl-k">.</span><span class="pl-en">b</span>(t, x, P<span class="pl-k">::</span><span class="pl-c1">OrnsteinUhlenbeck</span>) <span class="pl-k">=</span> <span class="pl-k">-</span>P<span class="pl-k">.</span>β<span class="pl-k">*</span>x
Bridge<span class="pl-k">.</span>σ(t, x, P<span class="pl-k">::</span><span class="pl-c1">OrnsteinUhlenbeck</span>) <span class="pl-k">=</span> P<span class="pl-k">.</span>σ

<span class="pl-c"><span class="pl-c">#</span> simulate OrnsteinUhlenbeck using Euler scheme</span>
W <span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">Wiener</span>())
X <span class="pl-k">=</span> <span class="pl-c1">solve</span>(<span class="pl-c1">EulerMaruyama</span>(), <span class="pl-c1">0.1</span>, W, <span class="pl-c1">OrnsteinUhlenbeck</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>))
<span class="pl-c1">plot</span>(X, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0da08a7616b0d27004f4a9ec52d060cf84f9c0e5/68747470733a2f2f6d736368617565722e6769746875622e696f2f4272696467652e6a6c2f6c61746573742f6173736574732f6f752e706e67"><img src="https://camo.githubusercontent.com/0da08a7616b0d27004f4a9ec52d060cf84f9c0e5/68747470733a2f2f6d736368617565722e6769746875622e696f2f4272696467652e6a6c2f6c61746573742f6173736574732f6f752e706e67" alt="OrnsteinUhlenbeck" data-canonical-src="https://mschauer.github.io/Bridge.jl/latest/assets/ou.png" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Levy (Difference-Gamma process) driven OrnsteinUhlenbeck</span>
Z <span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">GammaProcess</span>(<span class="pl-c1">100.0</span>,<span class="pl-c1">10.0</span>))
Z<span class="pl-k">.</span>yy <span class="pl-k">.-</span><span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">GammaProcess</span>(<span class="pl-c1">100.0</span>,<span class="pl-c1">10.0</span>))<span class="pl-k">.</span>yy
Y <span class="pl-k">=</span> <span class="pl-c1">solve</span>(<span class="pl-c1">EulerMaruyama</span>(), <span class="pl-c1">0.1</span>, Z, <span class="pl-c1">OrnsteinUhlenbeck</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>))
<span class="pl-c1">plot</span>(Y, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7b5061b97d8da279a791c9dc21779853b469bc03/68747470733a2f2f6d736368617565722e6769746875622e696f2f4272696467652e6a6c2f6c61746573742f6173736574732f6c6576796f752e706e67"><img src="https://camo.githubusercontent.com/7b5061b97d8da279a791c9dc21779853b469bc03/68747470733a2f2f6d736368617565722e6769746875622e696f2f4272696467652e6a6c2f6c61746573742f6173736574732f6c6576796f752e706e67" alt="Levy OrnsteinUhlenbeck" data-canonical-src="https://mschauer.github.io/Bridge.jl/latest/assets/levyou.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-feedback-and-contributing" class="anchor" aria-hidden="true" href="#feedback-and-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Feedback and Contributing</h2>
<p>See the <a href="https://mschauer.github.io/Bridge.jl/latest/" rel="nofollow">documentation</a> for more functionality and <a href="https://github.com/mschauer/Bridge.jl/issues/12">issue #12 (Feedback and Contribution)</a> for coordination of the development.
Bridge is free software under the MIT licence. If you use Bridge.jl in a closed environment I’d be happy to hear about your use case in a mail to <a href="mailto:moritzschauer@web.de">moritzschauer@web.de</a> and able to give some support.</p>
<h2><a id="user-content-literature" class="anchor" aria-hidden="true" href="#literature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Literature</h2>
<p>F. v. d. Meulen, M. Schauer: Bayesian estimation of discretely observed multi-dimensional diffusion processes using guided proposals. <em>Electronic Journal of Statistics</em> 11 (1), 2017, <a href="http://dx.doi.org/10.1214/17-EJS1290" rel="nofollow">doi:10.1214/17-EJS1290</a>.</p>
<p>M. Schauer, F. v. d. Meulen, H. v. Zanten: Guided proposals for simulating multi-dimensional diffusion bridges. <em>Bernoulli</em> 23 (4A), 2017, <a href="http://dx.doi.org/10.3150/16-BEJ833" rel="nofollow">doi:10.3150/16-BEJ833</a>.</p>
</article></div>