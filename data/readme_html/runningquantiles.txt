<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-runningquantilesjl" class="anchor" aria-hidden="true" href="#runningquantilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RunningQuantiles.jl</h1>
<p dir="auto"><em>Reasonably fast running quantiles with NaN handling</em></p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="result = running_quantile(v, p, w, nan_mode=SkipNaNs())"><pre>result <span class="pl-k">=</span> <span class="pl-c1">running_quantile</span>(v, p, w, nan_mode<span class="pl-k">=</span><span class="pl-c1">SkipNaNs</span>())</pre></div>
<p dir="auto">computes the running <code>p</code>-th quantile of <code>v</code> with window <code>w</code>, where <code>w</code> is an odd window length, or a range of offsets.
Specifically,</p>
<ul dir="auto">
<li>if <code>w</code> is a <code>AbstractUnitRange</code>, <code>result[i]</code> is the <code>p</code>-th quantile of <code>v[(i .+ w) ∩ eachindex(v)]</code>, where <code>NaN</code>s are handled according to <code>nan_mode</code>:
<ul dir="auto">
<li><code>nan_mode==SkipNaN()</code>: <code>NaN</code> values are ignored; quantile is computed over non-<code>NaN</code>s</li>
<li><code>nan_mode==PropagateNaNs()</code>: the result is <code>NaN</code> whenever the input window contains <code>NaN</code></li>
<li><code>nan_mode==ErrOnNaN()</code>: an error is raise if at least one input window contains <code>NaN</code></li>
</ul>
</li>
<li>if <code>w</code> is an odd integer, a centered window of length <code>w</code> is used, namely <code>-w÷2:w÷2</code></li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="running_median(v, w, nan_mode=SkipNaNs())"><pre><span class="pl-c1">running_median</span>(v, w, nan_mode<span class="pl-k">=</span><span class="pl-c1">SkipNaNs</span>())</pre></div>
<p dir="auto">computes the running median, i.e. 1/2-th quantile, as above.</p>
<h2 dir="auto"><a id="user-content-alternatives-and-benchmakrs" class="anchor" aria-hidden="true" href="#alternatives-and-benchmakrs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives and benchmakrs</h2>
<p dir="auto">These two packages also implement running quantiles/medians, but do not handle <code>NaN</code>s (output is garbage when <code>NaN</code>s are present):</p>
<ul dir="auto">
<li><a href="https://github.com/sairus7/SortFilters.jl">SortFilters.jl</a> is faster for small window sizes.</li>
<li><a href="https://github.com/Firionus/FastRunningMedian.jl">FastRunningMedian.jl</a> is faster for all window size, but only supports median, rather than arbitrary quantiles. It also offers more options for handling of edges.</li>
</ul>
<p dir="auto">These package handle the edges and the correspondence of input to output indices differently; please refer to their respective documentation for details.</p>
<p dir="auto">The most versatile alternative, in terms of options for edge padding and handling of <code>NaN</code> values, is probably <a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering.mapwindow</a>. But it is not specialized for quantiles, and is therefore a <em>much</em> slower option.</p>
<p dir="auto">Benchmarks for running median on a random vector of length <code>100_000</code>:
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/4170948/176232529-91b9b282-27c1-43b8-930a-ab8b4d8b0a51.png"><img src="https://user-images.githubusercontent.com/4170948/176232529-91b9b282-27c1-43b8-930a-ab8b4d8b0a51.png" alt="RunningQuantiles benchmarks" style="max-width: 100%;"></a></p>
<p dir="auto">Shaded areas indicate standard deviation. The input vector has no <code>NaN</code>s. Performance of this package in the presence of <code>NaN</code>s is generally faster, roughly proportional to the number of non-<code>NaN</code>s (the other two packages do not handle <code>NaN</code> values correctly).</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = [1:3; fill(NaN,3); 1:5]
11-element Vector{Float64}:
   1.0
   2.0
   3.0
 NaN
 NaN
 NaN
   1.0
   2.0
   3.0
   4.0
   5.0

julia&gt; running_median(v, 3)
11-element Vector{Float64}:
   1.5
   2.0
   2.5
   3.0
 NaN
   1.0
   1.5
   2.0
   3.0
   4.0
   4.5

julia&gt; running_median(v, 3, PropagateNaNs())
11-element Vector{Float64}:
   1.5
   2.0
 NaN
 NaN
 NaN
 NaN
 NaN
   2.0
   3.0
   4.0
   4.5

julia&gt; running_median(v, -3:5) # specifying a non-centered window
11-element Vector{Float64}:
 2.0
 1.5
 2.0
 2.0
 2.5
 3.0
 3.0
 3.0
 3.0
 3.0
 3.5"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> [<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>; <span class="pl-c1">fill</span>(<span class="pl-c1">NaN</span>,<span class="pl-c1">3</span>); <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
<span class="pl-c1">11</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
   <span class="pl-c1">1.0</span>
   <span class="pl-c1">2.0</span>
   <span class="pl-c1">3.0</span>
 <span class="pl-c1">NaN</span>
 <span class="pl-c1">NaN</span>
 <span class="pl-c1">NaN</span>
   <span class="pl-c1">1.0</span>
   <span class="pl-c1">2.0</span>
   <span class="pl-c1">3.0</span>
   <span class="pl-c1">4.0</span>
   <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">running_median</span>(v, <span class="pl-c1">3</span>)
<span class="pl-c1">11</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
   <span class="pl-c1">1.5</span>
   <span class="pl-c1">2.0</span>
   <span class="pl-c1">2.5</span>
   <span class="pl-c1">3.0</span>
 <span class="pl-c1">NaN</span>
   <span class="pl-c1">1.0</span>
   <span class="pl-c1">1.5</span>
   <span class="pl-c1">2.0</span>
   <span class="pl-c1">3.0</span>
   <span class="pl-c1">4.0</span>
   <span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">running_median</span>(v, <span class="pl-c1">3</span>, <span class="pl-c1">PropagateNaNs</span>())
<span class="pl-c1">11</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
   <span class="pl-c1">1.5</span>
   <span class="pl-c1">2.0</span>
 <span class="pl-c1">NaN</span>
 <span class="pl-c1">NaN</span>
 <span class="pl-c1">NaN</span>
 <span class="pl-c1">NaN</span>
 <span class="pl-c1">NaN</span>
   <span class="pl-c1">2.0</span>
   <span class="pl-c1">3.0</span>
   <span class="pl-c1">4.0</span>
   <span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">running_median</span>(v, <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> specifying a non-centered window</span>
<span class="pl-c1">11</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">1.5</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.5</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">3.5</span></pre></div>
</article></div>