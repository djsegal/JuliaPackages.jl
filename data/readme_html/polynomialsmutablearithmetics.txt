<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polynomialsmutablearithmetics" class="anchor" aria-hidden="true" href="#polynomialsmutablearithmetics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PolynomialsMutableArithmetics</h1>
<p dir="auto"><a href="https://jverzani.github.io/PolynomialsMutableArithmetics.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jverzani.github.io/PolynomialsMutableArithmetics.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jverzani/PolynomialsMutableArithmetics.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jverzani/PolynomialsMutableArithmetics.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jverzani/PolynomialsMutableArithmetics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bcd171cd579f4e5ed98fe6fb15a622d77e38e62c84d807c31aad2c330d500fe4/68747470733a2f2f636f6465636f762e696f2f67682f6a7665727a616e692f506f6c796e6f6d69616c734d757461626c6541726974686d65746963732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jverzani/PolynomialsMutableArithmetics.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Add support for <code>MutableArithmetics</code> to <code>Polynomials</code>.</p>
<p dir="auto">Based on work by <code>@blegat</code> in PR <a href="https://github.com/JuliaMath/Polynomials.jl/pull/331" data-hovercard-type="pull_request" data-hovercard-url="/JuliaMath/Polynomials.jl/pull/331/hovercard">#331</a>.</p>
<hr>
<p dir="auto">While polynomials of type <code>Polynomial</code> are mutable objects, operations such as
<code>+</code>, <code>-</code>, <code>*</code>, always create new polynomials without modifying its arguments.
The time needed for these allocations and copies of the polynomial coefficients
may be noticeable in some use cases. This is amplified when the coefficients
are for instance <code>BigInt</code> or <code>BigFloat</code> which are mutable themself.
This can be avoided by modifying existing polynomials to contain the result
of the operation using the <a href="https://github.com/jump-dev/MutableArithmetics.jl">MutableArithmetics (MA) API</a>.</p>
<p dir="auto">Consider for instance the following arrays of polynomials</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Polynomials
d, m, n = 30, 20, 20
p(d) = Polynomial(big.(1:d))
A = [p(d) for i in 1:m, j in 1:n]
b = [p(d) for i in 1:n]"><pre><span class="pl-k">using</span> Polynomials
d, m, n <span class="pl-k">=</span> <span class="pl-c1">30</span>, <span class="pl-c1">20</span>, <span class="pl-c1">20</span>
<span class="pl-en">p</span>(d) <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">big</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>d))
A <span class="pl-k">=</span> [<span class="pl-c1">p</span>(d) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]
b <span class="pl-k">=</span> [<span class="pl-c1">p</span>(d) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]</pre></div>
<p dir="auto">In this case, the arrays are mutable objects for which the elements are mutable
polynomials which have mutable coefficients (<code>BigInt</code>s).
These three nested levels of mutable objects communicate with the MA
API in order to reduce allocation.
Calling <code>A * b</code> requires approximately 40 MiB due to 2 M allocations
as it does not exploit any mutability. Using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PolynomialsMutableArithmetics"><pre><span class="pl-k">using</span> PolynomialsMutableArithmetics</pre></div>
<p dir="auto">To register <code>Polynomials</code> with <code>MutableArithmetics</code>, then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MutableArithmetics
const MA = MutableArithmetics
MA.operate(*, A, b)"><pre><span class="pl-k">using</span> MutableArithmetics
<span class="pl-k">const</span> MA <span class="pl-k">=</span> MutableArithmetics
MA<span class="pl-k">.</span><span class="pl-c1">operate</span>(<span class="pl-k">*</span>, A, b)</pre></div>
<p dir="auto">exploits the mutability and hence only allocates approximately 70 KiB due to 4 k
allocations. If the resulting vector is already allocated, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z(d) = Polynomial([zero(BigInt) for i in 1:d])
c = [z(2d - 1) for i in 1:m]"><pre><span class="pl-en">z</span>(d) <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>([<span class="pl-c1">zero</span>(BigInt) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d])
c <span class="pl-k">=</span> [<span class="pl-c1">z</span>(<span class="pl-c1">2</span>d <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m]</pre></div>
<p dir="auto">then we can exploit its mutability with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MA.operate!(MA.add_mul, c, A, b)"><pre>MA<span class="pl-k">.</span><span class="pl-c1">operate!</span>(MA<span class="pl-k">.</span>add_mul, c, A, b)</pre></div>
<p dir="auto">to reduce the allocation down to 48 bytes due to 3 allocations. These remaining
allocations are due to the <code>BigInt</code> buffer used to store the result of
intermediate multiplications. This buffer can be preallocated with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="buffer = MA.buffer_for(MA.add_mul, typeof(c), typeof(A), typeof(b))
MA.buffered_operate!(buffer, MA.add_mul, c, A, b)"><pre>buffer <span class="pl-k">=</span> MA<span class="pl-k">.</span><span class="pl-c1">buffer_for</span>(MA<span class="pl-k">.</span>add_mul, <span class="pl-c1">typeof</span>(c), <span class="pl-c1">typeof</span>(A), <span class="pl-c1">typeof</span>(b))
MA<span class="pl-k">.</span><span class="pl-c1">buffered_operate!</span>(buffer, MA<span class="pl-k">.</span>add_mul, c, A, b)</pre></div>
<p dir="auto">then the second line is allocation-free.</p>
<p dir="auto">The <code>MA.@rewrite</code> macro rewrite an expression into an equivalent code that
exploit the mutability of the intermediate results.
For instance</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MA.@rewrite(A1 * b1 + A2 * b2)"><pre>MA<span class="pl-k">.</span><span class="pl-c1">@rewrite</span>(A1 <span class="pl-k">*</span> b1 <span class="pl-k">+</span> A2 <span class="pl-k">*</span> b2)</pre></div>
<p dir="auto">is rewritten into</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = MA.operate!(MA.add_mul, MA.Zero(), A1, b1)
MA.operate!(MA.add_mul, c, A2, b2)"><pre>c <span class="pl-k">=</span> MA<span class="pl-k">.</span><span class="pl-c1">operate!</span>(MA<span class="pl-k">.</span>add_mul, MA<span class="pl-k">.</span><span class="pl-c1">Zero</span>(), A1, b1)
MA<span class="pl-k">.</span><span class="pl-c1">operate!</span>(MA<span class="pl-k">.</span>add_mul, c, A2, b2)</pre></div>
<p dir="auto">which is equivalent to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = MA.operate(*, A1, b1)
MA.mutable_operate!(MA.add_mul, c, A2, b2)"><pre>c <span class="pl-k">=</span> MA<span class="pl-k">.</span><span class="pl-c1">operate</span>(<span class="pl-k">*</span>, A1, b1)
MA<span class="pl-k">.</span><span class="pl-c1">mutable_operate!</span>(MA<span class="pl-k">.</span>add_mul, c, A2, b2)</pre></div>
<p dir="auto"><em>Note that currently, only the <code>Polynomial</code> type implements the API and it only
implements part of it.</em></p>
</article></div>