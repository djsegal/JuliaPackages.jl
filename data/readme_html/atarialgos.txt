<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-atarialgos" class="anchor" aria-hidden="true" href="#atarialgos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AtariAlgos</h2>
<h4 dir="auto"><a id="user-content-author-thomas-breloff" class="anchor" aria-hidden="true" href="#author-thomas-breloff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author: <a href="https://github.com/tbreloff">Thomas Breloff</a></h4>
<p dir="auto"><a href="https://travis-ci.org/JuliaML/AtariAlgos.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/adddc533edc880a1079f905f95b795657241964e95015522c64679432eff1a53/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d4c2f4174617269416c676f732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaML/AtariAlgos.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">AtariAlgos wraps the <a href="https://github.com/nowozin/ArcadeLearningEnvironment.jl">ArcadeLearningEnvironment</a> as an implementation of an <code>AbstractEnvironment</code> from the <a href="https://github.com/JuliaML/Reinforce.jl">Reinforce interface</a>.  This allows it to be used as a plug-and-play module with general reinforcement learning agents.</p>
<p dir="auto">Setup:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/JuliaML/AtariAlgos.jl&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaML/AtariAlgos.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">(Optional) Download roms:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AtariAlgos
AtariAlgos.download_roms()"><pre><span class="pl-k">using</span> AtariAlgos
AtariAlgos<span class="pl-k">.</span><span class="pl-c1">download_roms</span>()</pre></div>
<p dir="auto">Games can also be "plotted" using <a href="https://juliaplots.github.io/" rel="nofollow">Plots.jl</a> through a simple definition of a <a href="https://juliaplots.github.io/recipes/" rel="nofollow">recipe</a> for <code>AtariEnv</code> objects, allowing it to be a component of more complex visualizations for tracking learning progress and more, as well as making it easy to create animations.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AtariAlgos

# construct a game of Breakout
game = AtariEnv(&quot;breakout&quot;)

# set up for plotting
using Plots
gr(size=(200,300), leg=false)
rewards = Float64[]

# run the episode using the Episode iterator, creating an animated gif in the process
@gif for sars in Episode(game, RandomPolicy())
	push!(rewards, sars[3])
	plot(
		plot(game),
		sticks(rewards, yticks=nothing),
		layout=@layout [a;b{0.2h}]
	)
end every 10"><pre><span class="pl-k">using</span> AtariAlgos

<span class="pl-c"><span class="pl-c">#</span> construct a game of Breakout</span>
game <span class="pl-k">=</span> <span class="pl-c1">AtariEnv</span>(<span class="pl-s"><span class="pl-pds">"</span>breakout<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> set up for plotting</span>
<span class="pl-k">using</span> Plots
<span class="pl-c1">gr</span>(size<span class="pl-k">=</span>(<span class="pl-c1">200</span>,<span class="pl-c1">300</span>), leg<span class="pl-k">=</span><span class="pl-c1">false</span>)
rewards <span class="pl-k">=</span> Float64[]

<span class="pl-c"><span class="pl-c">#</span> run the episode using the Episode iterator, creating an animated gif in the process</span>
<span class="pl-c1">@gif</span> <span class="pl-k">for</span> sars <span class="pl-k">in</span> <span class="pl-c1">Episode</span>(game, <span class="pl-c1">RandomPolicy</span>())
	<span class="pl-c1">push!</span>(rewards, sars[<span class="pl-c1">3</span>])
	<span class="pl-c1">plot</span>(
		<span class="pl-c1">plot</span>(game),
		<span class="pl-c1">sticks</span>(rewards, yticks<span class="pl-k">=</span><span class="pl-c1">nothing</span>),
		layout<span class="pl-k">=</span><span class="pl-c1">@layout</span> [a;b{<span class="pl-c1">0.2</span>h}]
	)
<span class="pl-k">end</span> every <span class="pl-c1">10</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://cloud.githubusercontent.com/assets/933338/17670982/8923a2f6-62e2-11e6-943f-bd0a2a7b5c1f.gif"><img src="https://cloud.githubusercontent.com/assets/933338/17670982/8923a2f6-62e2-11e6-943f-bd0a2a7b5c1f.gif" alt="" data-animated-image="" style="max-width: 100%;"></a></p>
</article></div>