<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-cucountmap" class="anchor" aria-hidden="true" href="#cucountmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CuCountmap</h2>
<p dir="auto"><code>cucountmap</code> is a faster <code>countmap</code> equivalent utilizing CUDA.jl  for <code>Vector{T}</code> where <code>isbits(T)</code> and <code>sizeof(T) &lt;= 2</code>.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CuCountMap

v = rand(Int16, 1_000_000)

cucountmap(v) # converts v to cu(v) and then run countmap

using CUDA: cu

cuv = cu(v)
countmap(cuv) # StatsBase.countmap is overloaded for CuArrays"><pre><span class="pl-k">using</span> CuCountMap

v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int16, <span class="pl-c1">1_000_000</span>)

<span class="pl-c1">cucountmap</span>(v) <span class="pl-c"><span class="pl-c">#</span> converts v to cu(v) and then run countmap</span>

<span class="pl-k">using</span> CUDA<span class="pl-k">:</span> cu

cuv <span class="pl-k">=</span> <span class="pl-c1">cu</span>(v)
<span class="pl-c1">countmap</span>(cuv) <span class="pl-c"><span class="pl-c">#</span> StatsBase.countmap is overloaded for CuArrays</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Dict{Int16, Int64} with 65536 entries:
  -23731 =&gt; 18
  29965  =&gt; 13
  30270  =&gt; 14
  1703   =&gt; 17
  7685   =&gt; 16
  -7029  =&gt; 16
  3406   =&gt; 12
  -30706 =&gt; 18
  28804  =&gt; 10
  27640  =&gt; 14
  -17985 =&gt; 18
  -28261 =&gt; 12
  -2851  =&gt; 19
  2015   =&gt; 12
  -25023 =&gt; 15
  31375  =&gt; 16
  -13631 =&gt; 15
  -8219  =&gt; 19
  28165  =&gt; 14
  ⋮      =&gt; ⋮"><pre class="notranslate"><code>Dict{Int16, Int64} with 65536 entries:
  -23731 =&gt; 18
  29965  =&gt; 13
  30270  =&gt; 14
  1703   =&gt; 17
  7685   =&gt; 16
  -7029  =&gt; 16
  3406   =&gt; 12
  -30706 =&gt; 18
  28804  =&gt; 10
  27640  =&gt; 14
  -17985 =&gt; 18
  -28261 =&gt; 12
  -2851  =&gt; 19
  2015   =&gt; 12
  -25023 =&gt; 15
  31375  =&gt; 16
  -13631 =&gt; 15
  -8219  =&gt; 19
  28165  =&gt; 14
  ⋮      =&gt; ⋮
</code></pre></div>
<h3 dir="auto"><a id="user-content-example--benchmarks" class="anchor" aria-hidden="true" href="#example--benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example &amp; Benchmarks</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CUDA
using CuCountMap
using StatsBase: countmap

v = rand(Int16, 10_000_000);

using BenchmarkTools

cpu_to_gpu_benchmark = @benchmark gpu_countmap = cucountmap($v)"><pre><span class="pl-k">using</span> CUDA
<span class="pl-k">using</span> CuCountMap
<span class="pl-k">using</span> StatsBase<span class="pl-k">:</span> countmap

v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int16, <span class="pl-c1">10_000_000</span>);

<span class="pl-k">using</span> BenchmarkTools

cpu_to_gpu_benchmark <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> gpu_countmap <span class="pl-k">=</span> <span class="pl-c1">cucountmap</span>(<span class="pl-k">$</span>v)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 954 samples with 1 evaluation.
 Range (min … max):  4.374 ms … 13.528 ms  ┊ GC (min … max): 0.00% … 52.22%
 Time  (median):     4.814 ms              ┊ GC (median):    0.00%
 Time  (mean ± σ):   5.151 ms ±  1.145 ms  ┊ GC (mean ± σ):  3.24% ±  8.90%

   ██                                                         
  ▅██▇▇▇▆▅▄▄▄▄▃▃▃▃▃▂▂▂▂▁▂▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂ ▃
  4.37 ms        Histogram: frequency by time        11.3 ms &lt;

 Memory estimate: 2.38 MiB, allocs estimate: 103."><pre class="notranslate"><code>BenchmarkTools.Trial: 954 samples with 1 evaluation.
 Range (min … max):  4.374 ms … 13.528 ms  ┊ GC (min … max): 0.00% … 52.22%
 Time  (median):     4.814 ms              ┊ GC (median):    0.00%
 Time  (mean ± σ):   5.151 ms ±  1.145 ms  ┊ GC (mean ± σ):  3.24% ±  8.90%

   ██                                                         
  ▅██▇▇▇▆▅▄▄▄▄▃▃▃▃▃▂▂▂▂▁▂▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂ ▃
  4.37 ms        Histogram: frequency by time        11.3 ms &lt;

 Memory estimate: 2.38 MiB, allocs estimate: 103.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cpu_to_cpu_benchmark = @benchmark cpu_countmap = countmap($v)"><pre>cpu_to_cpu_benchmark <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> cpu_countmap <span class="pl-k">=</span> <span class="pl-c1">countmap</span>(<span class="pl-k">$</span>v)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 291 samples with 1 evaluation.
 Range (min … max):  15.864 ms … 26.632 ms  ┊ GC (min … max): 0.00% … 18.12
%
 Time  (median):     16.843 ms              ┊ GC (median):    0.00%
 Time  (mean ± σ):   17.195 ms ±  1.444 ms  ┊ GC (mean ± σ):  1.72% ±  5.17
%

      ▃ ▅██▆▄▁                                                 
  ▃█▇▆████████▇▇▄▃▃▂▂▂▂▁▁▁▁▂▁▂▁▂▂▁▁▁▁▂▂▁▂▁▄▁▁▁▂▁▁▂▁▂▂▁▁▁▄▁▃▁▂ ▃
  15.9 ms         Histogram: frequency by time        22.6 ms &lt;

 Memory estimate: 4.17 MiB, allocs estimate: 37."><pre class="notranslate"><code>BenchmarkTools.Trial: 291 samples with 1 evaluation.
 Range (min … max):  15.864 ms … 26.632 ms  ┊ GC (min … max): 0.00% … 18.12
%
 Time  (median):     16.843 ms              ┊ GC (median):    0.00%
 Time  (mean ± σ):   17.195 ms ±  1.444 ms  ┊ GC (mean ± σ):  1.72% ±  5.17
%

      ▃ ▅██▆▄▁                                                 
  ▃█▇▆████████▇▇▄▃▃▂▂▂▂▁▁▁▁▂▁▂▁▂▂▁▁▁▁▂▂▁▂▁▄▁▁▁▂▁▁▂▁▂▂▁▁▁▄▁▃▁▂ ▃
  15.9 ms         Histogram: frequency by time        22.6 ms &lt;

 Memory estimate: 4.17 MiB, allocs estimate: 37.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cuv = CUDA.cu(v)
gpu_to_gpu_benchmark = @benchmark gpu_countmap2 = countmap(cuv)"><pre>cuv <span class="pl-k">=</span> CUDA<span class="pl-k">.</span><span class="pl-c1">cu</span>(v)
gpu_to_gpu_benchmark <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> gpu_countmap2 <span class="pl-k">=</span> <span class="pl-c1">countmap</span>(cuv)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 2242 samples with 1 evaluation.
 Range (min … max):  1.799 ms …   9.377 ms  ┊ GC (min … max): 0.00% … 73.02
%
 Time  (median):     1.995 ms               ┊ GC (median):    0.00%
 Time  (mean ± σ):   2.150 ms ± 643.115 μs  ┊ GC (mean ± σ):  3.50% ±  8.43
%

   █▃                                                          
  ▄███▄▅▅▄▄▃▃▂▂▂▂▂▂▂▁▁▂▂▁▁▁▂▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂ ▂
  1.8 ms          Histogram: frequency by time        5.82 ms &lt;

 Memory estimate: 2.38 MiB, allocs estimate: 134."><pre class="notranslate"><code>BenchmarkTools.Trial: 2242 samples with 1 evaluation.
 Range (min … max):  1.799 ms …   9.377 ms  ┊ GC (min … max): 0.00% … 73.02
%
 Time  (median):     1.995 ms               ┊ GC (median):    0.00%
 Time  (mean ± σ):   2.150 ms ± 643.115 μs  ┊ GC (mean ± σ):  3.50% ±  8.43
%

   █▃                                                          
  ▄███▄▅▅▄▄▃▃▂▂▂▂▂▂▂▁▁▂▂▁▁▁▂▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂ ▂
  1.8 ms          Histogram: frequency by time        5.82 ms &lt;

 Memory estimate: 2.38 MiB, allocs estimate: 134.
</code></pre></div>
<h4 dir="auto"><a id="user-content-benchmark-plot" class="anchor" aria-hidden="true" href="#benchmark-plot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark Plot</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
using Statistics: mean

cpu_to_gpu = mean(cpu_to_gpu_benchmark.times)/1000/1000
gpu_to_gpu = mean(gpu_to_gpu_benchmark.times)/1000/1000
cpu_to_cpu = mean(cpu_to_cpu_benchmark.times)/1000/1000

plot(
[&quot;CPU Array on CPU \n countmap(v)&quot;, &quot;convert CPU Array to GPU array on GPU \n cucountmap(cu(v))&quot;, &quot;GPU array on GPU \n cucountmap(cuv)&quot;],
[cpu_to_cpu, cpu_to_gpu, gpu_to_gpu],
seriestypes = :bar, title=&quot;CuCountMap.cucountmap vs StatsBase.countmap&quot;, label=&quot;ms&quot;,
legendtitle=&quot;Mean time&quot;)"><pre><span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Statistics<span class="pl-k">:</span> mean

cpu_to_gpu <span class="pl-k">=</span> <span class="pl-c1">mean</span>(cpu_to_gpu_benchmark<span class="pl-k">.</span>times)<span class="pl-k">/</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span>
gpu_to_gpu <span class="pl-k">=</span> <span class="pl-c1">mean</span>(gpu_to_gpu_benchmark<span class="pl-k">.</span>times)<span class="pl-k">/</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span>
cpu_to_cpu <span class="pl-k">=</span> <span class="pl-c1">mean</span>(cpu_to_cpu_benchmark<span class="pl-k">.</span>times)<span class="pl-k">/</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span>

<span class="pl-c1">plot</span>(
[<span class="pl-s"><span class="pl-pds">"</span>CPU Array on CPU <span class="pl-cce">\n</span> countmap(v)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>convert CPU Array to GPU array on GPU <span class="pl-cce">\n</span> cucountmap(cu(v))<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>GPU array on GPU <span class="pl-cce">\n</span> cucountmap(cuv)<span class="pl-pds">"</span></span>],
[cpu_to_cpu, cpu_to_gpu, gpu_to_gpu],
seriestypes <span class="pl-k">=</span> <span class="pl-c1">:bar</span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CuCountMap.cucountmap vs StatsBase.countmap<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ms<span class="pl-pds">"</span></span>,
legendtitle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mean time<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[ Info: Precompiling Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80]"><pre class="notranslate"><code>[ Info: Precompiling Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80]
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figures/README_5_1.png"><img src="figures/README_5_1.png" alt="" style="max-width: 100%;"></a></p>
</article></div>