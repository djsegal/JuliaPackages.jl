<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-cucountmap" class="anchor" aria-hidden="true" href="#cucountmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CuCountmap</h2>
<p><code>cucountmap</code> is a faster <code>countmap</code> equivalent utilizing CUDA.jl  for <code>Vector{T}</code> where <code>isbits(T)</code> and <code>sizeof(T) &lt;= 2</code>.</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
using CuCountMap

v = rand(Int16, 1_000_000)

cucountmap(v) # converts v to cu(v) and then run countmap

using CUDA: cu

cuv = cu(v)
countmap(cuv) # StatsBase.countmap is overloaded for CuArrays
"><pre><span class="pl-k">using</span> CuCountMap

v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int16, <span class="pl-c1">1_000_000</span>)

<span class="pl-c1">cucountmap</span>(v) <span class="pl-c"><span class="pl-c">#</span> converts v to cu(v) and then run countmap</span>

<span class="pl-k">using</span> CUDA<span class="pl-k">:</span> cu

cuv <span class="pl-k">=</span> <span class="pl-c1">cu</span>(v)
<span class="pl-c1">countmap</span>(cuv) <span class="pl-c"><span class="pl-c">#</span> StatsBase.countmap is overloaded for CuArrays</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Dict{Int16,Int64} with 65536 entries:
  -13838 =&gt; 17
  22035  =&gt; 12
  -15285 =&gt; 19
  -13843 =&gt; 12
  -18190 =&gt; 19
  -20309 =&gt; 11
  19698  =&gt; 11
  -8633  =&gt; 20
  -17455 =&gt; 12
  -16936 =&gt; 22
  29981  =&gt; 14
  -20376 =&gt; 15
  7237   =&gt; 20
  -27415 =&gt; 10
  17959  =&gt; 17
  27248  =&gt; 17
  -32758 =&gt; 17
  -13400 =&gt; 17
  5784   =&gt; 10
  ⋮      =&gt; ⋮
"><pre><code>Dict{Int16,Int64} with 65536 entries:
  -13838 =&gt; 17
  22035  =&gt; 12
  -15285 =&gt; 19
  -13843 =&gt; 12
  -18190 =&gt; 19
  -20309 =&gt; 11
  19698  =&gt; 11
  -8633  =&gt; 20
  -17455 =&gt; 12
  -16936 =&gt; 22
  29981  =&gt; 14
  -20376 =&gt; 15
  7237   =&gt; 20
  -27415 =&gt; 10
  17959  =&gt; 17
  27248  =&gt; 17
  -32758 =&gt; 17
  -13400 =&gt; 17
  5784   =&gt; 10
  ⋮      =&gt; ⋮
</code></pre></div>
<h3><a id="user-content-example--benchmarks" class="anchor" aria-hidden="true" href="#example--benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example &amp; Benchmarks</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
using CUDA
using CuCountMap
using StatsBase: countmap

v = rand(Int16, 10_000_000);

using BenchmarkTools

cpu_to_gpu_benchmark = @benchmark gpu_countmap = cucountmap($v)
"><pre><span class="pl-k">using</span> CUDA
<span class="pl-k">using</span> CuCountMap
<span class="pl-k">using</span> StatsBase<span class="pl-k">:</span> countmap

v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int16, <span class="pl-c1">10_000_000</span>);

<span class="pl-k">using</span> BenchmarkTools

cpu_to_gpu_benchmark <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> gpu_countmap <span class="pl-k">=</span> <span class="pl-c1">cucountmap</span>(<span class="pl-k">$</span>v)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 
  memory estimate:  4.17 MiB
  allocs estimate:  76
  --------------
  minimum time:     4.751 ms (0.00% GC)
  median time:      4.974 ms (0.00% GC)
  mean time:        5.320 ms (3.50% GC)
  maximum time:     14.950 ms (55.27% GC)
  --------------
  samples:          940
  evals/sample:     1
"><pre><code>BenchmarkTools.Trial: 
  memory estimate:  4.17 MiB
  allocs estimate:  76
  --------------
  minimum time:     4.751 ms (0.00% GC)
  median time:      4.974 ms (0.00% GC)
  mean time:        5.320 ms (3.50% GC)
  maximum time:     14.950 ms (55.27% GC)
  --------------
  samples:          940
  evals/sample:     1
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
cpu_to_cpu_benchmark = @benchmark cpu_countmap = countmap($v)
"><pre>cpu_to_cpu_benchmark <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> cpu_countmap <span class="pl-k">=</span> <span class="pl-c1">countmap</span>(<span class="pl-k">$</span>v)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 
  memory estimate:  4.17 MiB
  allocs estimate:  37
  --------------
  minimum time:     14.915 ms (0.00% GC)
  median time:      15.344 ms (0.00% GC)
  mean time:        15.670 ms (1.06% GC)
  maximum time:     22.093 ms (28.90% GC)
  --------------
  samples:          320
  evals/sample:     1
"><pre><code>BenchmarkTools.Trial: 
  memory estimate:  4.17 MiB
  allocs estimate:  37
  --------------
  minimum time:     14.915 ms (0.00% GC)
  median time:      15.344 ms (0.00% GC)
  mean time:        15.670 ms (1.06% GC)
  maximum time:     22.093 ms (28.90% GC)
  --------------
  samples:          320
  evals/sample:     1
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
cuv = CUDA.cu(v)
gpu_to_gpu_benchmark = @benchmark gpu_countmap2 = countmap(cuv)
"><pre>cuv <span class="pl-k">=</span> CUDA<span class="pl-k">.</span><span class="pl-c1">cu</span>(v)
gpu_to_gpu_benchmark <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> gpu_countmap2 <span class="pl-k">=</span> <span class="pl-c1">countmap</span>(cuv)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 
  memory estimate:  4.17 MiB
  allocs estimate:  64
  --------------
  minimum time:     2.512 ms (0.00% GC)
  median time:      2.692 ms (0.00% GC)
  mean time:        2.984 ms (5.91% GC)
  maximum time:     17.421 ms (73.12% GC)
  --------------
  samples:          1675
  evals/sample:     1
"><pre><code>BenchmarkTools.Trial: 
  memory estimate:  4.17 MiB
  allocs estimate:  64
  --------------
  minimum time:     2.512 ms (0.00% GC)
  median time:      2.692 ms (0.00% GC)
  mean time:        2.984 ms (5.91% GC)
  maximum time:     17.421 ms (73.12% GC)
  --------------
  samples:          1675
  evals/sample:     1
</code></pre></div>
<h4><a id="user-content-benchmark-plot" class="anchor" aria-hidden="true" href="#benchmark-plot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmark Plot</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
using Plots
using Statistics: mean

cpu_to_gpu = mean(cpu_to_gpu_benchmark.times)/1000/1000
gpu_to_gpu = mean(gpu_to_gpu_benchmark.times)/1000/1000
cpu_to_cpu = mean(cpu_to_cpu_benchmark.times)/1000/1000

plot(
[&quot;CPU Array on CPU \n countmap(v)&quot;, &quot;convert CPU Array to GPU array on GPU \n cucountmap(cu(v))&quot;, &quot;GPU array on GPU \n cucountmap(cuv)&quot;],
[cpu_to_cpu, cpu_to_gpu, gpu_to_gpu],
seriestypes = :bar, title=&quot;CuCountMap.cucountmap vs StatsBase.countmap&quot;, label=&quot;ms&quot;,
legendtitle=&quot;Mean time&quot;)
"><pre><span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Statistics<span class="pl-k">:</span> mean

cpu_to_gpu <span class="pl-k">=</span> <span class="pl-c1">mean</span>(cpu_to_gpu_benchmark<span class="pl-k">.</span>times)<span class="pl-k">/</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span>
gpu_to_gpu <span class="pl-k">=</span> <span class="pl-c1">mean</span>(gpu_to_gpu_benchmark<span class="pl-k">.</span>times)<span class="pl-k">/</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span>
cpu_to_cpu <span class="pl-k">=</span> <span class="pl-c1">mean</span>(cpu_to_cpu_benchmark<span class="pl-k">.</span>times)<span class="pl-k">/</span><span class="pl-c1">1000</span><span class="pl-k">/</span><span class="pl-c1">1000</span>

<span class="pl-c1">plot</span>(
[<span class="pl-s"><span class="pl-pds">"</span>CPU Array on CPU <span class="pl-cce">\n</span> countmap(v)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>convert CPU Array to GPU array on GPU <span class="pl-cce">\n</span> cucountmap(cu(v))<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>GPU array on GPU <span class="pl-cce">\n</span> cucountmap(cuv)<span class="pl-pds">"</span></span>],
[cpu_to_cpu, cpu_to_gpu, gpu_to_gpu],
seriestypes <span class="pl-k">=</span> <span class="pl-c1">:bar</span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CuCountMap.cucountmap vs StatsBase.countmap<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ms<span class="pl-pds">"</span></span>,
legendtitle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mean time<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/README_5_1.png"><img src="figures/README_5_1.png" alt="" style="max-width:100%;"></a></p>
</article></div>