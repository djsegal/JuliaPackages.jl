<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-modularindices" class="anchor" aria-hidden="true" href="#modularindices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModularIndices</h1>
<p dir="auto"><a href="https://travis-ci.com/ericphanson/ModularIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1266596701de65d234fdc0796728592f67ae231eb47ee51d474f2e0c556ec5ff/68747470733a2f2f7472617669732d63692e636f6d2f657269637068616e736f6e2f4d6f64756c6172496e64696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ericphanson/ModularIndices.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ericphanson/ModularIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/318b345b83d0bde6e303141dcf8fb7a1ee584ef880e52562be57c070b3be43a7/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f4d6f64756c6172496e64696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ericphanson/ModularIndices.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Note: this package was made before I realized you could do e.g. <code>A[mod1(4, end)]</code> without any external packages, which probably suffices for most cases.</p>
<p dir="auto">A very simple package (26 lines of code before comments, docstring, and tests) with one export: <code>Mod</code>. This is an object using for indexing, like <code>Colon</code> from Base, and <code>Not</code> from <a href="https://github.com/mbauman/InvertedIndices.jl">InvertedIndices.jl</a>. <code>Mod</code> provides an easy way to have wrap-around indexing of vectors and arrays (which can otherwise be annoying with 1-based indexing).</p>
<p dir="auto">Usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = rand(3)
3-element Array{Float64,1}:
 0.523471984061487
 0.3975791533002422
 0.3230510641200286

julia&gt; A[Mod(4)]
0.523471984061487

julia&gt; A[4]
ERROR: BoundsError: attempt to access 3-element Array{Float64,1} at index [4]
Stacktrace:
 [1] getindex(::Array{Float64,1}, ::Int64) at ./array.jl:729
 [2] top-level scope at none:0"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.523471984061487</span>
 <span class="pl-c1">0.3975791533002422</span>
 <span class="pl-c1">0.3230510641200286</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>)]
<span class="pl-c1">0.523471984061487</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">4</span>]
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>} at index [<span class="pl-c1">4</span>]
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">getindex</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>array<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">729</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span></pre></div>
<p dir="auto">Just like regular indexing, <code>Mod</code> accepts</p>
<ul dir="auto">
<li>scalars like<code>A[Mod(1)]</code> (i.e. type <code>Int</code>),</li>
<li>ranges like <code>A[Mod(1:2)]</code> (<code>AbstractRange{Int}</code>)</li>
<li>and vectors like <code>A[Mod([1,2])]</code>  (<code>AbstractVector{Int}</code>). A non-allocating alternative is also provided here, namely <code>A[Mod(1,2)] == A[Mod([1,2])]</code>.</li>
</ul>
<p dir="auto">and is able to index into collections <code>A</code> which are indexable and use <code>Base.to_indices</code> to process the indices (which I think mostly are <code>AbstractArray</code>'s). For example, <code>A</code> could be an <code>Array</code>, <code>OffsetArray</code>, <code>SubArray</code>, <code>StaticArray</code>, etc.</p>
<p dir="auto">This package should possibly be called <code>PeriodicIndices.jl</code> and <code>Mod</code> renamed to <code>Periodic</code> or similar.</p>
<p dir="auto">This is similar to <a href="https://github.com/JuliaArrays/FFTViews.jl">FFTViews.jl</a>, but instead of constructing a periodic view type into an array, it provides an indexing object.</p>
<p dir="auto">The code is heavily inspired by InvertedIndices.jl (but it's actually much simpler to do modular indexing than inverted indexing), and the idea for <code>Mod</code> was discussed on <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="467684393" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/32571" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/32571/hovercard" href="https://github.com/JuliaLang/julia/issues/32571">JuliaLang/julia#32571</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = 1:3
1:3

julia&gt; A[Mod(4)]
1

julia&gt; A[Mod(2:4)]
3-element Array{Int64,1}:
 2
 3
 1

julia&gt; A = reshape(1:8, 2, 4)
2×4 reshape(::UnitRange{Int64}, 2, 4) with eltype Int64:
 1  3  5  7
 2  4  6  8

julia&gt; A[Mod(4),2]
 4"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>)]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>),<span class="pl-c1">2</span>]
 <span class="pl-c1">4</span></pre></div>
<p dir="auto">Works with <a href="https://github.com/JuliaArrays/OffsetArrays.jl">OffsetArrays.jl</a> too:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OffsetArrays

julia&gt; A = OffsetArray([1,2,3], -1)
OffsetArray(::Array{Int64,1}, 0:2) with eltype Int64 with indices 0:2:
 1
 2
 3

julia&gt; A[3]
ERROR: BoundsError: attempt to access OffsetArray(::Array{Int64,1}, 0:2) with eltype Int64 with indices 0:2 at index [3]
Stacktrace:
 [1] throw_boundserror(::OffsetArray{Int64,1,Array{Int64,1}}, ::Tuple{Int64}) at ./abstractarray.jl:484
 [2] checkbounds at ./abstractarray.jl:449 [inlined]
 [3] getindex(::OffsetArray{Int64,1,Array{Int64,1}}, ::Int64) at /Users/eh540/.julia/packages/OffsetArrays/vIbpP/src/OffsetArrays.jl:135
 [4] top-level scope at none:0

julia&gt; A[Mod(3)]
1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OffsetArrays

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Int64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">3</span>]
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Int64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span> at index [<span class="pl-c1">3</span>]
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">throw_boundserror</span>(<span class="pl-k">::</span><span class="pl-c1">OffsetArray{Int64,1,Array{Int64,1}}</span>, <span class="pl-k">::</span><span class="pl-c1">Tuple{Int64}</span>) at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">484</span>
 [<span class="pl-c1">2</span>] checkbounds at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">449</span> [inlined]
 [<span class="pl-c1">3</span>] <span class="pl-c1">getindex</span>(<span class="pl-k">::</span><span class="pl-c1">OffsetArray{Int64,1,Array{Int64,1}}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">/</span>Users<span class="pl-k">/</span>eh540<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>OffsetArrays<span class="pl-k">/</span>vIbpP<span class="pl-k">/</span>src<span class="pl-k">/</span>OffsetArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">135</span>
 [<span class="pl-c1">4</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>)]
<span class="pl-c1">1</span>
</pre></div>
</article></div>