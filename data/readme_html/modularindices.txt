<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-modularindices" class="anchor" aria-hidden="true" href="#modularindices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ModularIndices</h1>
<p><a href="https://travis-ci.com/ericphanson/ModularIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4936f11b9f2098383f3a62fb30d6c9b2c7233d40/68747470733a2f2f7472617669732d63692e636f6d2f657269637068616e736f6e2f4d6f64756c6172496e64696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ericphanson/ModularIndices.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ericphanson/ModularIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b6f994153e493415b0b6fe0a95f1f76166c5e9fa/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f4d6f64756c6172496e64696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ericphanson/ModularIndices.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Note: this package was made before I realized you could do e.g. <code>A[mod1(4, end)]</code> without any external packages, which probably suffices for most cases.</p>
<p>A very simple package (26 lines of code before comments, docstring, and tests) with one export: <code>Mod</code>. This is an object using for indexing, like <code>Colon</code> from Base, and <code>Not</code> from <a href="https://github.com/mbauman/InvertedIndices.jl">InvertedIndices.jl</a>. <code>Mod</code> provides an easy way to have wrap-around indexing of vectors and arrays (which can otherwise be annoying with 1-based indexing).</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.523471984061487</span>
 <span class="pl-c1">0.3975791533002422</span>
 <span class="pl-c1">0.3230510641200286</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>)]
<span class="pl-c1">0.523471984061487</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">4</span>]
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>} at index [<span class="pl-c1">4</span>]
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">getindex</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>array<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">729</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span></pre></div>
<p>Just like regular indexing, <code>Mod</code> accepts</p>
<ul>
<li>scalars like<code>A[Mod(1)]</code> (i.e. type <code>Int</code>),</li>
<li>ranges like <code>A[Mod(1:2)]</code> (<code>AbstractRange{Int}</code>)</li>
<li>and vectors like <code>A[Mod([1,2])]</code>  (<code>AbstractVector{Int}</code>). A non-allocating alternative is also provided here, namely <code>A[Mod(1,2)] == A[Mod([1,2])]</code>.</li>
</ul>
<p>and is able to index into collections <code>A</code> which are indexable and use <code>Base.to_indices</code> to process the indices (which I think mostly are <code>AbstractArray</code>'s). For example, <code>A</code> could be an <code>Array</code>, <code>OffsetArray</code>, <code>SubArray</code>, <code>StaticArray</code>, etc.</p>
<p>This package should possibly be called <code>PeriodicIndices.jl</code> and <code>Mod</code> renamed to <code>Periodic</code> or similar.</p>
<p>This is similar to <a href="https://github.com/JuliaArrays/FFTViews.jl">FFTViews.jl</a>, but instead of constructing a periodic view type into an array, it provides an indexing object.</p>
<p>The code is heavily inspired by InvertedIndices.jl (but it's actually much simpler to do modular indexing than inverted indexing), and the idea for <code>Mod</code> was discussed on <a href="https://github.com/JuliaLang/julia/issues/32571">https://github.com/JuliaLang/julia/issues/32571</a>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>)]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">4</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>),<span class="pl-c1">2</span>]
 <span class="pl-c1">4</span></pre></div>
<p>Works with <a href="https://github.com/JuliaArrays/OffsetArrays.jl">OffsetArrays.jl</a> too:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OffsetArrays

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Int64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">3</span>]
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Int64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span> at index [<span class="pl-c1">3</span>]
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">throw_boundserror</span>(<span class="pl-k">::</span><span class="pl-c1">OffsetArray{Int64,1,Array{Int64,1}}</span>, <span class="pl-k">::</span><span class="pl-c1">Tuple{Int64}</span>) at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">484</span>
 [<span class="pl-c1">2</span>] checkbounds at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">449</span> [inlined]
 [<span class="pl-c1">3</span>] <span class="pl-c1">getindex</span>(<span class="pl-k">::</span><span class="pl-c1">OffsetArray{Int64,1,Array{Int64,1}}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">/</span>Users<span class="pl-k">/</span>eh540<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>OffsetArrays<span class="pl-k">/</span>vIbpP<span class="pl-k">/</span>src<span class="pl-k">/</span>OffsetArrays<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">135</span>
 [<span class="pl-c1">4</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>)]
<span class="pl-c1">1</span>
</pre></div>
</article></div>