<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/44394955/58797326-085dd580-8600-11e9-958c-b1698e1d370e.png"><img src="https://user-images.githubusercontent.com/44394955/58797326-085dd580-8600-11e9-958c-b1698e1d370e.png" alt="fem" width="400" style="max-width:100%;"></a></p>
<h2><a id="user-content-a-minimal-finite-element-tool-for-demonstration-and-teaching" class="anchor" aria-hidden="true" href="#a-minimal-finite-element-tool-for-demonstration-and-teaching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A minimal finite element tool for demonstration and teaching.</h2>
<ul>
<li>
<p>The purpose of this package is to provide an easy and minimalistic introdcution to the finite element method.</p>
</li>
<li>
<p>We restrict ourselves to linear finite elements on two-dimensional, triangular grids.</p>
</li>
<li>
<p>This code imports meshes in GMSH v2 and v4 format and outputs VTK format for Paraview.</p>
</li>
</ul>
<p>First we need to add the MinFEM package to our Julia installation.
Thus, hit the <strong>]</strong> key and type</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="add MinFEM
test MinFEM
"><pre><code>add MinFEM
test MinFEM
</code></pre></div>
<p>Lets go through a code for the Poisson equation on a unit square with homogeneous Dirichlet boundary conditions.</p>
<p>First we have to load the package MinFEM and WriteVTK. The latter is used to write the results in a format suitable for Paraview. We then generate a uniform, triangular 30x30 mesh for the unit square.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MinFEM

mesh = unit_square(30)
"><pre><span class="pl-k">using</span> MinFEM

mesh <span class="pl-k">=</span> <span class="pl-c1">unit_square</span>(<span class="pl-c1">30</span>)</pre></div>
<p>As an alternative: Download the package from github to obtain the examples and meshes and navigate, within the julia console, to the <strong>examples</strong> folder. Then import one of the mesh files generated with GMSH.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mesh = import_mesh(&quot;../meshes/poisson.msh&quot;)
"><pre>mesh <span class="pl-k">=</span> <span class="pl-c1">import_mesh</span>(<span class="pl-s"><span class="pl-pds">"</span>../meshes/poisson.msh<span class="pl-pds">"</span></span>)</pre></div>
<p>The next step is to assemble the matrices which discretize the weak formulation:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="L = asmLaplacian(mesh)
M = asmMassMatrix(mesh)
"><pre>L <span class="pl-k">=</span> <span class="pl-c1">asmLaplacian</span>(mesh)
M <span class="pl-k">=</span> <span class="pl-c1">asmMassMatrix</span>(mesh)</pre></div>
<p>We now want to set s as an eigenfunction of the Laplacian multiplied with the corresponding eigenvalue:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="n=3
m=2
f(x) = ((n*pi)^2 + (m*pi)^2) *sin(n*x[1]*pi)*sin(m*x[2]*pi)
s = evaluateMeshFunction(mesh, f)
"><pre>n<span class="pl-k">=</span><span class="pl-c1">3</span>
m<span class="pl-k">=</span><span class="pl-c1">2</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> ((n<span class="pl-k">*</span><span class="pl-c1">pi</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (m<span class="pl-k">*</span><span class="pl-c1">pi</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">*</span><span class="pl-c1">sin</span>(n<span class="pl-k">*</span>x[<span class="pl-c1">1</span>]<span class="pl-k">*</span><span class="pl-c1">pi</span>)<span class="pl-k">*</span><span class="pl-c1">sin</span>(m<span class="pl-k">*</span>x[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">pi</span>)
s <span class="pl-k">=</span> <span class="pl-c1">evaluateMeshFunction</span>(mesh, f)</pre></div>
<p>The next step is to set up a PDESystem structure, which holds all necessary information for the PDE. These are the stiffness matrix, the load vector, Dirichlet values and indices of the boundary nodes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="boundary = union(mesh.Boundaries[1001].Nodes,
                 mesh.Boundaries[1002].Nodes,
                 mesh.Boundaries[1003].Nodes,
                 mesh.Boundaries[1004].Nodes)

pde = PDESystem(A=L, b=M*s, bc=zeros(mesh.nnodes), DI=boundary)
"><pre>boundary <span class="pl-k">=</span> <span class="pl-c1">union</span>(mesh<span class="pl-k">.</span>Boundaries[<span class="pl-c1">1001</span>]<span class="pl-k">.</span>Nodes,
                 mesh<span class="pl-k">.</span>Boundaries[<span class="pl-c1">1002</span>]<span class="pl-k">.</span>Nodes,
                 mesh<span class="pl-k">.</span>Boundaries[<span class="pl-c1">1003</span>]<span class="pl-k">.</span>Nodes,
                 mesh<span class="pl-k">.</span>Boundaries[<span class="pl-c1">1004</span>]<span class="pl-k">.</span>Nodes)

pde <span class="pl-k">=</span> <span class="pl-c1">PDESystem</span>(A<span class="pl-k">=</span>L, b<span class="pl-k">=</span>M<span class="pl-k">*</span>s, bc<span class="pl-k">=</span><span class="pl-c1">zeros</span>(mesh<span class="pl-k">.</span>nnodes), DI<span class="pl-k">=</span>boundary)</pre></div>
<p>Note that the mesh is designed to have four physical boundaries identified by the indices 1001-1004.</p>
<p>Finally, we solve the PDE and write the solution in a file for visualization with Paraview:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="solve(pde)
vtkfile = open_vtk_file(mesh, &quot;poisson.vtu&quot;)
write_point_data(vtkfile, pde.state, &quot;Y&quot;)
write_point_data(vtkfile, s, &quot;S&quot;)
save_vtk_file(vtkfile)
"><pre><span class="pl-c1">solve</span>(pde)
vtkfile <span class="pl-k">=</span> <span class="pl-c1">open_vtk_file</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>poisson.vtu<span class="pl-pds">"</span></span>)
<span class="pl-c1">write_point_data</span>(vtkfile, pde<span class="pl-k">.</span>state, <span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>)
<span class="pl-c1">write_point_data</span>(vtkfile, s, <span class="pl-s"><span class="pl-pds">"</span>S<span class="pl-pds">"</span></span>)
<span class="pl-c1">save_vtk_file</span>(vtkfile)</pre></div>
</article></div>