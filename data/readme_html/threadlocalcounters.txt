<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-threadlocalcounters" class="anchor" aria-hidden="true" href="#threadlocalcounters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreadLocalCounters</h1>
<p dir="auto"><a href="https://juliaconcurrent.github.io/ThreadLocalCounters.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaConcurrent/ThreadLocalCounters.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaConcurrent/ThreadLocalCounters.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">ThreadLocalCounters.jl provides a macro <code>@tlc</code> to associate a counter to a code location.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ThreadLocalCounters

julia&gt; hello_world() = @tlc hello_world;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThreadLocalCounters

julia<span class="pl-k">&gt;</span> <span class="pl-en">hello_world</span>() <span class="pl-k">=</span> <span class="pl-c1">@tlc</span> hello_world;</pre></div>
<p dir="auto">The installed counters can be enumerated using <code>ThreadLocalCounters.list</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ThreadLocalCounters.list(; all = true)
1-element Vector{ThreadLocalCounters.Internal.ThreadLocalCounter}:
 [0] hello_world @Main #= REPL[2]:2 =#"><pre>julia<span class="pl-k">&gt;</span> ThreadLocalCounters<span class="pl-k">.</span><span class="pl-c1">list</span>(; all <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{ThreadLocalCounters<span class="pl-k">.</span>Internal<span class="pl-k">.</span>ThreadLocalCounter}<span class="pl-k">:</span>
 [<span class="pl-c1">0</span>] hello_world <span class="pl-c1">@Main</span> <span class="pl-c"><span class="pl-c">#=</span> REPL[2]:2 <span class="pl-c">=#</span></span></pre></div>
<p dir="auto">The thread-local counter is incremented each time the program hits the associated code
location:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; hello_world();

julia&gt; ThreadLocalCounters.list()
1-element Vector{ThreadLocalCounters.Internal.ThreadLocalCounter}:
 [1] hello_world @Main #= REPL[2]:2 =#

julia&gt; hello_world();

julia&gt; ThreadLocalCounters.list()
1-element Vector{ThreadLocalCounters.Internal.ThreadLocalCounter}:
 [2] hello_world @Main #= REPL[2]:2 =#"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hello_world</span>();

julia<span class="pl-k">&gt;</span> ThreadLocalCounters<span class="pl-k">.</span><span class="pl-c1">list</span>()
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{ThreadLocalCounters<span class="pl-k">.</span>Internal<span class="pl-k">.</span>ThreadLocalCounter}<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] hello_world <span class="pl-c1">@Main</span> <span class="pl-c"><span class="pl-c">#=</span> REPL[2]:2 <span class="pl-c">=#</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">hello_world</span>();

julia<span class="pl-k">&gt;</span> ThreadLocalCounters<span class="pl-k">.</span><span class="pl-c1">list</span>()
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{ThreadLocalCounters<span class="pl-k">.</span>Internal<span class="pl-k">.</span>ThreadLocalCounter}<span class="pl-k">:</span>
 [<span class="pl-c1">2</span>] hello_world <span class="pl-c1">@Main</span> <span class="pl-c"><span class="pl-c">#=</span> REPL[2]:2 <span class="pl-c">=#</span></span></pre></div>
</article></div>