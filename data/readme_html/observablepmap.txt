<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-observablepmap" class="anchor" aria-hidden="true" href="#observablepmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ObservablePmap</h1>
<p dir="auto"><em>distributed <code>map</code> returning an observable for following worker progress</em></p>
<h2 dir="auto"><a id="user-content-directly-setting-worker-status-message--opmap" class="anchor" aria-hidden="true" href="#directly-setting-worker-status-message--opmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Directly setting worker status message – <code>opmap</code></h2>
<p dir="auto">The <code>opmap</code> function is a wrapper around <code>pmap</code> which allows workers to report their status. The function passed to <code>opmap</code> takes as its first argument a callback <code>setmessage</code> that can be used to set a status message for the current worker. Unlike <code>pmap</code>, the mapping is performed asynchronously. <code>opmap</code> returns an <a href="https://github.com/JuliaGizmos/Observables.jl">Observable</a> summary string of worker statuses, and the <code>Task</code> performing the mapping.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<p dir="auto">Running some fake work and viewing worker state in IJulia or Juno plot pane using HTML:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs(2)

@everywhere using ObservablePmap
using CSSUtil: vbox

obs, task = opmap(1:5; schedule_now=false, on_error=identity) do setmessage, x
    setmessage(&quot;Initializing...&quot;)
    sleep(1)
    n = rand(2:10)
    for i=1:n
        setmessage(&quot;Fooing $x-bars ($i/$n) &quot;)
        x==3 &amp;&amp; error(&quot;Error at $i&quot;)
        sleep(rand())
    end
    setmessage(&quot;All $x-bars successfully fooed.&quot;)
end

html = map(x -&gt; HTML(&quot;&lt;pre&gt;$x&lt;/pre&gt;&quot;), obs)
schedule(task)
vbox(html)  # not necessary on IJulia"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>)

<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ObservablePmap
<span class="pl-k">using</span> CSSUtil<span class="pl-k">:</span> vbox

obs, task <span class="pl-k">=</span> <span class="pl-c1">opmap</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>; schedule_now<span class="pl-k">=</span><span class="pl-c1">false</span>, on_error<span class="pl-k">=</span>identity) <span class="pl-k">do</span> setmessage, x
    <span class="pl-c1">setmessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Initializing...<span class="pl-pds">"</span></span>)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">1</span>)
    n <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
    <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
        <span class="pl-c1">setmessage</span>(<span class="pl-s"><span class="pl-pds">"</span>Fooing <span class="pl-v">$x</span>-bars (<span class="pl-v">$i</span>/<span class="pl-v">$n</span>) <span class="pl-pds">"</span></span>)
        x<span class="pl-k">==</span><span class="pl-c1">3</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Error at <span class="pl-v">$i</span><span class="pl-pds">"</span></span>)
        <span class="pl-c1">sleep</span>(<span class="pl-c1">rand</span>())
    <span class="pl-k">end</span>
    <span class="pl-c1">setmessage</span>(<span class="pl-s"><span class="pl-pds">"</span>All <span class="pl-v">$x</span>-bars successfully fooed.<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

html <span class="pl-k">=</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">HTML</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;pre&gt;<span class="pl-v">$x</span>&lt;/pre&gt;<span class="pl-pds">"</span></span>), obs)
<span class="pl-c1">schedule</span>(task)
<span class="pl-c1">vbox</span>(html)  <span class="pl-c"><span class="pl-c">#</span> not necessary on IJulia</span></pre></div>
<p dir="auto">Here's what the output looks like in Juno's plot pane:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/yha/ObservablePmap.jl/master/opmap-html-output.gif"><img src="https://raw.githubusercontent.com/yha/ObservablePmap.jl/master/opmap-html-output.gif" width="600" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-observing-log-messages--ologpmap" class="anchor" aria-hidden="true" href="#observing-log-messages--ologpmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Observing log messages – <code>ologpmap</code></h2>
<p dir="auto">When using <code>ologpmap</code>, log messages produced by workers are used as their status message. Accordingly, the function argument to <code>ologpmap</code> does <em>not</em> take an additional <code>setmessage</code> argument. By default, log messages in workers are processed by a <code>Base.CoreLogging.SimpleLogger</code>, and its output is used as the status message. The <code>logger_f</code> keyword argument to <code>ologpmap</code> can be used to specify a different logger: specifically, <code>logger_f(io)</code> should produce a logger writing log messages to <code>io</code>.</p>
<h3 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<p dir="auto">This example uses <code>ProgressLogging.jl</code> and <code>TerminalLoggers.jl</code> to show progress bars.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs(2)
@everywhere using ObservablePmap
@everywhere using ProgressLogging
@everywhere using TerminalLoggers
using CSSUtil: vbox

summ, task = ologpmap( 'a':'e', 2:2:10; logger_f=TerminalLogger ) do c, x
    @withprogress name=&quot;Processing '$c'&quot; for i=1:x
        sleep(rand())
        @logprogress i/x
    end
    @info &quot;finished '$c'.&quot;
    x
end

html = map(x -&gt; HTML(&quot;&lt;pre&gt;$x&lt;/pre&gt;&quot;), summ)
vbox(html)"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ObservablePmap
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ProgressLogging
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> TerminalLoggers
<span class="pl-k">using</span> CSSUtil<span class="pl-k">:</span> vbox

summ, task <span class="pl-k">=</span> <span class="pl-c1">ologpmap</span>( <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>e<span class="pl-pds">'</span></span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>; logger_f<span class="pl-k">=</span>TerminalLogger ) <span class="pl-k">do</span> c, x
    <span class="pl-c1">@withprogress</span> name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Processing '<span class="pl-v">$c</span>'<span class="pl-pds">"</span></span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>x
        <span class="pl-c1">sleep</span>(<span class="pl-c1">rand</span>())
        <span class="pl-c1">@logprogress</span> i<span class="pl-k">/</span>x
    <span class="pl-k">end</span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>finished '<span class="pl-v">$c</span>'.<span class="pl-pds">"</span></span>
    x
<span class="pl-k">end</span>

html <span class="pl-k">=</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">HTML</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;pre&gt;<span class="pl-v">$x</span>&lt;/pre&gt;<span class="pl-pds">"</span></span>), summ)
<span class="pl-c1">vbox</span>(html)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/yha/ObservablePmap.jl/master/ologpmap-html-output.gif"><img src="https://raw.githubusercontent.com/yha/ObservablePmap.jl/master/ologpmap-html-output.gif" width="800" data-animated-image="" style="max-width: 100%;"></a></p>
</article></div>