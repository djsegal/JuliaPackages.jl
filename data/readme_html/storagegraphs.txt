<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-storagegraphs" class="anchor" aria-hidden="true" href="#storagegraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StorageGraphs</h1>
<p><a href="https://SebastianM-C.github.io/StorageGraphs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://SebastianM-C.github.io/StorageGraphs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/SebastianM-C/StorageGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/08eae60e9d1bcf9be22b654664ef067daf5867647e825f7f089a81fd22b11cf5/68747470733a2f2f7472617669732d63692e636f6d2f53656261737469616e4d2d432f53746f726167654772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/SebastianM-C/StorageGraphs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/SebastianM-C/StorageGraphs-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0ba10557fcc1c70d0bd85089ed353c92c2237f3ccf20f7d3f9df186dc035f0ba/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f53656261737469616e4d2d432f53746f726167654772617068732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/SebastianM-C/StorageGraphs.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SebastianM-C/StorageGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/efe96feda0efd52db730ce176bc9182bdb7afc8e79679b608f8012b24d5f085a/68747470733a2f2f636f6465636f762e696f2f67682f53656261737469616e4d2d432f53746f726167654772617068732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/SebastianM-C/StorageGraphs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This is an <em>experimental</em> package for storing hierarchical data in graphs in a non-redundant way.
This package aims to be useful when one has a combination of data and metadata or parameters
and the use of tables would lead to a lot of redundancy in the corresponding columns.</p>
<h3><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h3>
<p>In general a graph is a collection of objects with some relations between them.
If we describe the graph from a mathematical point of view, the objects correspond
to vertices and the relations to edges. Graphs can be represented by diagrams.
For example:</p>
<table>
<thead>
<tr>
<th align="center">Simple graph</th>
<th align="center">Simple directed graph</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="assets/simple_graph.svg"><img src="assets/simple_graph.svg" alt="graph example" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="assets/simple_digraph.svg"><img src="assets/simple_digraph.svg" alt="graph example" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>If the vertices have a direction, we call them directed graphs. We can use graphs
to store data. To do this we will use a (directed) graph and associate metadata
to the vertices and the edges. Each vertex will contain some data and the edges
will provide the required connections. More precisely, a path will be associated
with the (ordered) set of data entries. We will call a node a vertex
and its associated metadata and a path will be the collection of all edges (identified
by an id). For example if we have <code>x = [1, 2, 3]</code>, then the graph looks like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="assets/ex1.svg"><img src="assets/ex1.svg" alt="graph example" style="max-width:100%;"></a></p>
<p>Now, let's consider that we have a function, say <code>f(x) = x^2</code>, and we apply it
to our <code>x</code> and want to store the resulting <code>y = [1, 4, 9]</code>. We encode
the fact that <code>y</code> was derived / computed from <code>x</code> by using edges oriented from
the <code>x</code> nodes to the <code>y</code> nodes. This creates a hierarchy in the data.
Moreover, to use the graph efficiently, we can store all the entries of <code>x</code>
in a node (and similar for <code>y</code>).
We can compare the graph and the table representations:</p>
<table>
  <tbody><tr>
    <th>
<table>
<thead>
<tr>
<th>id</th>
<th>x</th>
<th>y</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>9</td>
</tr>
</tbody>
</table>
</th>
    <th>
<a target="_blank" rel="noopener noreferrer" href="assets/ex2.svg"><img src="assets/ex2.svg" style="max-width:100%;"></a>
    </th>
  </tr>
</tbody></table>
<h3><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h3>
<p>In this package we use <code>NamedTuple</code>s to specify the information contained in the nodes.
To specify the dependencies between nodes we use (nested) pairs(<code>=&gt;</code>).
For example, for generating the above graph
we can use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StorageGraphs

g = StorageGraph()
add_nodes!(g, (x=[1,2,3],)=&gt;(y=[1,4,9],))
"><pre><span class="pl-k">using</span> StorageGraphs

g <span class="pl-k">=</span> <span class="pl-c1">StorageGraph</span>()
<span class="pl-c1">add_nodes!</span>(g, (x<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>],)<span class="pl-k">=&gt;</span>(y<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">9</span>],))</pre></div>
<p>Note: <code>NamedTuple</code>s with a single element must use a comma.
(<code>(a=1,)</code> is not the same as <code>(a=1)</code>)</p>
<p>This package provides a custom a <code>AbstractGraph</code> type called <code>StorageGraph</code>
(similar to <code>MetaDiGraph</code>s in <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs.jl</a>).
The metadata is stored in dictionaries with the keys being given by vertices or edges.
For nodes the data is in the <code>g.data</code> field, while for edges in <code>g.paths</code>.
The nodes of the graph can be found via the inverse dictionary <code>g.index</code> in
which the keys are given by the data. The main search tool in the graph is
the overloaded <code>getindex</code> function.</p>
<ul>
<li>
<p>One way to search is by symbols. For example, for the above graph <code>g[:x]</code>
will give all the values corresponding to <code>:x</code> (<code>[1,2,3]</code>).
<strong>Important Note</strong>: the order of the values is not necessary the same as the
order given when the data was added. This is because the order of the edges
in the graph is not inherently defined. This way of searching is equivalent with
searching on columns in a table.</p>
</li>
<li>
<p>Other ways of searching take advantage of the graph structure. For example we
could search for the nodes which descend from a given hierarchy. This requires a
more complicated graph structure to exemplify, so concrete examples will be provided
later.</p>
</li>
</ul>
<h2><a id="user-content-tutorial-and-motivation" class="anchor" aria-hidden="true" href="#tutorial-and-motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tutorial and motivation</h2>
<p>Let us consider that we have some simulation data with the following structure:</p>
<ul>
<li>simulation parameters: <code>P</code>  which takes a value or each simulation.</li>
<li>initial conditions: for each <code>P</code> we have an algorithm that generates some
initial conditions. The algorithm itself may have parameters.</li>
<li>simulation results: for each initial conditions the simulation produces some results
(we can think of this as being a function of the initial conditions as illustrated
in the Introduction).</li>
</ul>
<p>We will now progressively build up the graph. Let's say that the first simulation
has <code>P=1</code> and using <code>"alg1"</code> we generated some initial conditions (<code>x</code>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StorageGraphs

g = StorageGraph()

add_nodes!(g, (P=1,)=&gt;(alg=&quot;alg1&quot;,)=&gt;(x=[10., 20., 30.],))
"><pre><span class="pl-k">using</span> StorageGraphs

g <span class="pl-k">=</span> <span class="pl-c1">StorageGraph</span>()

<span class="pl-c1">add_nodes!</span>(g, (P<span class="pl-k">=</span><span class="pl-c1">1</span>,)<span class="pl-k">=&gt;</span>(alg<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>alg1<span class="pl-pds">"</span></span>,)<span class="pl-k">=&gt;</span>(x<span class="pl-k">=</span>[<span class="pl-c1">10.</span>, <span class="pl-c1">20.</span>, <span class="pl-c1">30.</span>],))</pre></div>
<p>Up to this point the graph and the equivalent table are presented below:</p>
<table>
  <tbody><tr>
    <th>
<table>
<thead>
<tr>
<th>id</th>
<th>P</th>
<th>alg</th>
<th>x</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>"alg1"</td>
<td>10.</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>"alg1"</td>
<td>20.</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>"alg1"</td>
<td>30.</td>
</tr>
</tbody>
</table>
</th>
    <th>
      <a target="_blank" rel="noopener noreferrer" href="assets/ic_graph.svg"><img src="assets/ic_graph.svg" style="max-width:100%;"></a>
  </th>
  </tr>
  </tbody></table>
<p>For the initial conditions we used a node for the algorithm (containing the name)
and one for each of the produced values. Next, we will obtain our simulation results
and add them to the graph.
Note: It is crucial that we load the initial conditions from the graph since
we must get them in the correct order.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# retrieve the previously stored initial conditions
x = g[:x, (P=1,)=&gt;(alg=&quot;alg1&quot;,)][1]
# there is only one node depending on (P=1,)=&gt;(alg=&quot;alg1&quot;,), so that's why
# we take only the first element
results = simulation(x, alg=&quot;alg1&quot;)
add_nodes!(g, foldr(=&gt;, ((P=1,), (alg=&quot;alg1&quot;,), (x=x,), (r=results,))))
# foldr(=&gt;, dep) can be useful for building long dependency chanis form parts
"><pre><span class="pl-c"><span class="pl-c">#</span> retrieve the previously stored initial conditions</span>
x <span class="pl-k">=</span> g[<span class="pl-c1">:x</span>, (P<span class="pl-k">=</span><span class="pl-c1">1</span>,)<span class="pl-k">=&gt;</span>(alg<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>alg1<span class="pl-pds">"</span></span>,)][<span class="pl-c1">1</span>]
<span class="pl-c"><span class="pl-c">#</span> there is only one node depending on (P=1,)=&gt;(alg="alg1",), so that's why</span>
<span class="pl-c"><span class="pl-c">#</span> we take only the first element</span>
results <span class="pl-k">=</span> <span class="pl-c1">simulation</span>(x, alg<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>alg1<span class="pl-pds">"</span></span>)
<span class="pl-c1">add_nodes!</span>(g, <span class="pl-c1">foldr</span>(<span class="pl-k">=&gt;</span>, ((P<span class="pl-k">=</span><span class="pl-c1">1</span>,), (alg<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>alg1<span class="pl-pds">"</span></span>,), (x<span class="pl-k">=</span>x,), (r<span class="pl-k">=</span>results,))))
<span class="pl-c"><span class="pl-c">#</span> foldr(=&gt;, dep) can be useful for building long dependency chanis form parts</span></pre></div>
<p>Here we presented another way of querying the graph. We used the fact
the initial conditions depend on the previously stored parameters
and we retrieved them based on the hierarchy.
After this step we have</p>
<table>
  <tbody><tr>
    <th>
<table>
<thead>
<tr>
<th>id</th>
<th>P</th>
<th>alg</th>
<th>x</th>
<th>r</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>"alg1"</td>
<td>10.</td>
<td>12.</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>"alg1"</td>
<td>20.</td>
<td>22.</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>"alg1"</td>
<td>30.</td>
<td>32.</td>
</tr>
</tbody>
</table>
</th>
<th>
  <a target="_blank" rel="noopener noreferrer" href="assets/sim_graph.svg"><img src="assets/sim_graph.svg" style="max-width:100%;"></a>
  </th>
  </tr>
  </tbody></table><p>Now consider what would happen if in a second simulation we would have
<code>P=2</code>, but still <code>"alg1"</code>. As we can see with increasing complexity
the columns corresponding to simulation parameters or metadata would
contain a lot of redundant information. In the graph we can only store
them once and keep track of things through paths. This is the main
motivation for this package.</p><table>

</table><table>
  <tbody><tr>
    <th>
<table>
<thead>
<tr>
<th>id</th>
<th>P</th>
<th>alg</th>
<th>x</th>
<th>r</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>"alg1"</td>
<td>10.</td>
<td>12.</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>"alg1"</td>
<td>20.</td>
<td>22.</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>"alg1"</td>
<td>30.</td>
<td>32.</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>"alg1"</td>
<td>20.</td>
<td>24.</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>"alg1"</td>
<td>40.</td>
<td>44.</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>"alg1"</td>
<td>60.</td>
<td>64.</td>
</tr>
</tbody>
</table>
</th>
<th>
  <a target="_blank" rel="noopener noreferrer" href="assets/complicated_graph.svg"><img src="assets/complicated_graph.svg" style="max-width:100%;"></a>
  </th>
  </tr>
  </tbody></table>
</article></div>