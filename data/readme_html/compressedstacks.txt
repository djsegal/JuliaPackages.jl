<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-compressedstacks" class="anchor" aria-hidden="true" href="#compressedstacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CompressedStacks</h1>
<p><a href="https://travis-ci.org/azzaare/CompressedStacks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c153f3c562f2aff6d0afba7173f3a26430b28c1/68747470733a2f2f7472617669732d63692e6f72672f617a7a616172652f436f6d70726573736564537461636b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/azzaare/CompressedStacks.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The documentation is still in progress (so is the package).</p>
<p>CompressedStacks.jl is a Julia package that provides a framework for compressed stacks. The design of this package is based on the article of ...
All data structures and algorithms are implemented in <em>pure Julia</em>, and thus they are portable.</p>
<h3><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Main Features</h3>
<p>The compressed stack structure used in <em>CompressedStacks.jl</em> requires conditions to be used optimally. If implemented with a classical stack, the problem requirements should be as follows:</p>
<ul>
<li>The input is read sequentially and only once (in practice we require the user to read input from a file)</li>
<li>The reading of the stack can be written as below</li>
</ul>
<pre><code>1 : Initialize stack and auxiliary data structure DS with O(1) elements from I
2 : for all subsequent input a âˆˆ I do
3 :    while pop-condition(a,DS,stack.top(1),. . . , stack.top(k)) do
4 :      stack.pop
5 :    end while
6 :    if push-condition(a,DS,stack.top(1),. . . , stack.top(k)) then
7 :      stack.push(a)
8 :    end if
9 : end for
10: Report(stack)
</code></pre>
<ul>
<li>
<p>The user is required to give the following functions (even for classical stacks)</p>
<ul>
<li>pop_condition as in line 3 [return Bool]</li>
<li>push_condition as in line 6 [return Bool]</li>
<li>pop_action! to do when an element is popped (line 4) [return void]</li>
<li>push_action! to when an element is pushed (line 7) [return void]</li>
<li>read_input (line 2) [return D, where D is the data_type of the stack]</li>
</ul>
</li>
<li>
<p>For Compressed Stacks, the following parameters are also required</p>
<ul>
<li>(expected) size of the input or depth of the compressed stack</li>
<li>maximum space usage or space order</li>
<li>buffer of the stack (number of elements of the top than can be accessed anytime)</li>
<li>optional data_structure</li>
<li>context and data types</li>
</ul>
</li>
</ul>
</article></div>