<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-compressedstacks" class="anchor" aria-hidden="true" href="#compressedstacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CompressedStacks</h1>
<p dir="auto"><a href="https://travis-ci.org/azzaare/CompressedStacks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51b8660032e757b8a1d0a0a1c8ce96ba1a32a17f0d5b84f150b219b59647528a/68747470733a2f2f7472617669732d63692e6f72672f617a7a616172652f436f6d70726573736564537461636b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/azzaare/CompressedStacks.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">The documentation is still in progress (so is the package).</p>
<p dir="auto">CompressedStacks.jl is a Julia package that provides a framework for compressed stacks. The design of this package is based on the article of ...
All data structures and algorithms are implemented in <em>pure Julia</em>, and thus they are portable.</p>
<h3 dir="auto"><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main Features</h3>
<p dir="auto">The compressed stack structure used in <em>CompressedStacks.jl</em> requires conditions to be used optimally. If implemented with a classical stack, the problem requirements should be as follows:</p>
<ul dir="auto">
<li>The input is read sequentially and only once (in practice we require the user to read input from a file)</li>
<li>The reading of the stack can be written as below</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1 : Initialize stack and auxiliary data structure DS with O(1) elements from I
2 : for all subsequent input a ∈ I do
3 :    while pop-condition(a,DS,stack.top(1),. . . , stack.top(k)) do
4 :      stack.pop
5 :    end while
6 :    if push-condition(a,DS,stack.top(1),. . . , stack.top(k)) then
7 :      stack.push(a)
8 :    end if
9 : end for
10: Report(stack)"><pre class="notranslate"><code>1 : Initialize stack and auxiliary data structure DS with O(1) elements from I
2 : for all subsequent input a ∈ I do
3 :    while pop-condition(a,DS,stack.top(1),. . . , stack.top(k)) do
4 :      stack.pop
5 :    end while
6 :    if push-condition(a,DS,stack.top(1),. . . , stack.top(k)) then
7 :      stack.push(a)
8 :    end if
9 : end for
10: Report(stack)
</code></pre></div>
<ul dir="auto">
<li>
<p dir="auto">The user is required to give the following functions (even for classical stacks)</p>
<ul dir="auto">
<li>pop_condition as in line 3 [return Bool]</li>
<li>push_condition as in line 6 [return Bool]</li>
<li>pop_action! to do when an element is popped (line 4) [return void]</li>
<li>push_action! to when an element is pushed (line 7) [return void]</li>
<li>read_input (line 2) [return D, where D is the data_type of the stack]</li>
</ul>
</li>
<li>
<p dir="auto">For Compressed Stacks, the following parameters are also required</p>
<ul dir="auto">
<li>(expected) size of the input or depth of the compressed stack</li>
<li>maximum space usage or space order</li>
<li>buffer of the stack (number of elements of the top than can be accessed anytime)</li>
<li>optional data_structure</li>
<li>context and data types</li>
</ul>
</li>
</ul>
</article></div>