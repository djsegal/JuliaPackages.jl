<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-contextualmacros" class="anchor" aria-hidden="true" href="#contextualmacros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ContextualMacros</h1>
<p><a href="https://github.com/tkf//ContextualMacros.jl/actions?query=workflow%3ARun+tests"><img src="https://github.com/tkf//ContextualMacros.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>ContextualMacros.jl is a package for implementing contextual macro
expansion.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="module MyAbstractMacroPackage
    using ContextualMacros
    @contextualmacro @f
end

module MyPackageA
    export @f, @context_a

    using ContextualMacros
    using ..MyAbstractMacroPackage: @f

    macro context_a(ex)
        ContextualMacros.expandwith(
            __module__,
            ex;
            f = ctx -&gt; Expr(:call, +, ctx.args...),
        )
    end
end

module MyPackageB
    export @f, @context_b

    using ContextualMacros
    using ..MyAbstractMacroPackage: @f

    macro context_b(ex)
        ContextualMacros.expandwith(
            __module__,
            ex;
            f = ctx -&gt; Expr(:call, *, ctx.args...),
        )
    end
end

using .MyPackageA
using .MyPackageB

(@context_a @f 1 2 3 4), (@context_b @f 1 2 3 4), (@context_b @context_a @f 1 2 3 4)

# output

(10, 24, 10)
"><pre><span class="pl-k">module</span> MyAbstractMacroPackage
    <span class="pl-k">using</span> ContextualMacros
    <span class="pl-c1">@contextualmacro</span> <span class="pl-c1">@f</span>
<span class="pl-k">end</span>

<span class="pl-k">module</span> MyPackageA
    <span class="pl-k">export</span> <span class="pl-c1">@f</span>, <span class="pl-c1">@context_a</span>

    <span class="pl-k">using</span> ContextualMacros
    <span class="pl-k">using</span> <span class="pl-k">..</span>MyAbstractMacroPackage<span class="pl-k">:</span> <span class="pl-c1">@f</span>

    <span class="pl-k">macro</span> <span class="pl-en">context_a</span>(ex)
        ContextualMacros<span class="pl-k">.</span><span class="pl-c1">expandwith</span>(
            __module__,
            ex;
            f <span class="pl-k">=</span> ctx <span class="pl-k">-&gt;</span> <span class="pl-c1">Expr</span>(<span class="pl-c1">:call</span>, <span class="pl-k">+</span>, ctx<span class="pl-k">.</span>args<span class="pl-k">...</span>),
        )
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">module</span> MyPackageB
    <span class="pl-k">export</span> <span class="pl-c1">@f</span>, <span class="pl-c1">@context_b</span>

    <span class="pl-k">using</span> ContextualMacros
    <span class="pl-k">using</span> <span class="pl-k">..</span>MyAbstractMacroPackage<span class="pl-k">:</span> <span class="pl-c1">@f</span>

    <span class="pl-k">macro</span> <span class="pl-en">context_b</span>(ex)
        ContextualMacros<span class="pl-k">.</span><span class="pl-c1">expandwith</span>(
            __module__,
            ex;
            f <span class="pl-k">=</span> ctx <span class="pl-k">-&gt;</span> <span class="pl-c1">Expr</span>(<span class="pl-c1">:call</span>, <span class="pl-k">*</span>, ctx<span class="pl-k">.</span>args<span class="pl-k">...</span>),
        )
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">using</span> <span class="pl-k">.</span>MyPackageA
<span class="pl-k">using</span> <span class="pl-k">.</span>MyPackageB

(<span class="pl-c1">@context_a</span> <span class="pl-c1">@f</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>), (<span class="pl-c1">@context_b</span> <span class="pl-c1">@f</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>), (<span class="pl-c1">@context_b</span> <span class="pl-c1">@context_a</span> <span class="pl-c1">@f</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> output</span>

(<span class="pl-c1">10</span>, <span class="pl-c1">24</span>, <span class="pl-c1">10</span>)</pre></div>
</article></div>