<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dumbcompleter" class="anchor" aria-hidden="true" href="#dumbcompleter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DumbCompleter</h1>
<p><a href="https://travis-ci.com/christopher-dG/DumbCompleter.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ecc09e39e26f2da2572e90c33421bc71a7dde9b4/68747470733a2f2f7472617669732d63692e636f6d2f6368726973746f706865722d64472f44756d62436f6d706c657465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/christopher-dG/DumbCompleter.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A dumb code completer.</p>
<h2><a id="user-content-usage-julia" class="anchor" aria-hidden="true" href="#usage-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage (Julia)</h2>
<p>The main entrypoint to this package for Julia code is <code>completions</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DumbCompleter<span class="pl-k">:</span> completions

julia<span class="pl-k">&gt;</span> leaves <span class="pl-k">=</span> <span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>)
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PROGRAM_FILE</span>, String, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Pair</span>, UnionAll, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PartialQuickSort</span>, UnionAll, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PermutedDimsArray</span>, UnionAll, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Pipe</span>, DataType, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PipeBuffer</span>, <span class="pl-c1">typeof</span>(PipeBuffer), Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Ptr</span>, UnionAll, Core)

julia<span class="pl-k">&gt;</span> leaf <span class="pl-k">=</span> <span class="pl-c1">first</span>(leaves);

julia<span class="pl-k">&gt;</span> leaf<span class="pl-k">.</span>name
<span class="pl-c1">:PROGRAM_FILE</span>

julia<span class="pl-k">&gt;</span> leaf<span class="pl-k">.</span>type
String

julia<span class="pl-k">&gt;</span> leaf<span class="pl-k">.</span>mod
Base

julia<span class="pl-k">&gt;</span> <span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>, Core)  <span class="pl-c"><span class="pl-c">#</span> "Core" or :Core work, too.</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PhiCNode</span>, DataType, Core)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PhiNode</span>, DataType, Core)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PiNode</span>, DataType, Core)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Ptr</span>, UnionAll, Core)</pre></div>
<p>To load some new modules, use <code>activate!</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DumbCompleter<span class="pl-k">:</span> activate!, completions

julia<span class="pl-k">&gt;</span> <span class="pl-c1">activate!</span>(<span class="pl-c1">@__DIR__</span>)

julia<span class="pl-k">&gt;</span> DumbCompleter<span class="pl-k">.</span><span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>js<span class="pl-pds">"</span></span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:json</span>, <span class="pl-c1">typeof</span>(JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span>json), JSON)

julia<span class="pl-k">&gt;</span> DumbCompleter<span class="pl-k">.</span><span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-c1">:Pkg</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:activate</span>, <span class="pl-c1">typeof</span>(Pkg<span class="pl-k">.</span>API<span class="pl-k">.</span>activate), Pkg)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:add</span>, <span class="pl-c1">typeof</span>(Pkg<span class="pl-k">.</span>API<span class="pl-k">.</span>add), Pkg)</pre></div>
<h2><a id="user-content-usage-emacs" class="anchor" aria-hidden="true" href="#usage-emacs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage (Emacs)</h2>
<p>First, make sure you have <a href="http://company-mode.github.io" rel="nofollow">Company</a> set up.
Then, put <code>emacs/julia-dumbcompleter.el</code> somewhere on your load path.
Lastly, add <code>(require 'julia-dumbcompleter)</code> somewhere in your <code>init.el</code>.</p>
<p>To load modules from the package you're developing, use <code>jldc/activate</code> and enter your package's root directory.</p>
<h2><a id="user-content-integration" class="anchor" aria-hidden="true" href="#integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Integration</h2>
<p>Supporting a new text editor is not too hard, and just involves maintaining a server process and its IO.
To start a server, run the following:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DumbCompleter
<span class="pl-c1">ioserver</span>()</pre></div>
<p>Then, send requests to the server process's standard input as JSON.
Currently, the available commands are:</p>
<ul>
<li><code>{"type": "completions", "module": "Module.Name.Or.Null", "text": "prefix_to_complete"}</code></li>
<li><code>{"type": "activate", "path": "package/root/directory"}</code></li>
</ul>
<p>The JSON response, written to standard output, contains an <code>error</code> field which is <code>null</code> or a string describing an error.
For <code>completions</code> requests, the response contains a <code>completions</code> field that looks like this:</p>
<div class="highlight highlight-source-json"><pre>[
  {
    <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>:   <span class="pl-s"><span class="pl-pds">"</span>variable name<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>:   <span class="pl-s"><span class="pl-pds">"</span>value's type<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>module owning the type<span class="pl-pds">"</span></span>
  }
]</pre></div>
<p>For <code>activate</code> requests, the response contains no other fields.</p>
</article></div>