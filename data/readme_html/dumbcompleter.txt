<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dumbcompleter" class="anchor" aria-hidden="true" href="#dumbcompleter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DumbCompleter</h1>
<p><a href="https://travis-ci.com/christopher-dG/DumbCompleter.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4c648ff2ec0fc18c668f938839d857b4680c290b8891ecb78df653d3d7922102/68747470733a2f2f7472617669732d63692e636f6d2f6368726973746f706865722d64472f44756d62436f6d706c657465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/christopher-dG/DumbCompleter.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A dumb code completer.</p>
<h2><a id="user-content-usage-julia" class="anchor" aria-hidden="true" href="#usage-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage (Julia)</h2>
<p>The main entrypoint to this package for Julia code is <code>completions</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DumbCompleter: completions

julia&gt; leaves = completions(&quot;P&quot;)
7-element Array{DumbCompleter.Leaf,1}:
 DumbCompleter.Leaf(:PROGRAM_FILE, String, Base)
 DumbCompleter.Leaf(:Pair, UnionAll, Base)
 DumbCompleter.Leaf(:PartialQuickSort, UnionAll, Base)
 DumbCompleter.Leaf(:PermutedDimsArray, UnionAll, Base)
 DumbCompleter.Leaf(:Pipe, DataType, Base)
 DumbCompleter.Leaf(:PipeBuffer, typeof(PipeBuffer), Base)
 DumbCompleter.Leaf(:Ptr, UnionAll, Core)

julia&gt; leaf = first(leaves);

julia&gt; leaf.name
:PROGRAM_FILE

julia&gt; leaf.type
String

julia&gt; leaf.mod
Base

julia&gt; completions(&quot;P&quot;, Core)  # &quot;Core&quot; or :Core work, too.
4-element Array{DumbCompleter.Leaf,1}:
 DumbCompleter.Leaf(:PhiCNode, DataType, Core)
 DumbCompleter.Leaf(:PhiNode, DataType, Core)
 DumbCompleter.Leaf(:PiNode, DataType, Core)
 DumbCompleter.Leaf(:Ptr, UnionAll, Core)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DumbCompleter<span class="pl-k">:</span> completions

julia<span class="pl-k">&gt;</span> leaves <span class="pl-k">=</span> <span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>)
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PROGRAM_FILE</span>, String, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Pair</span>, UnionAll, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PartialQuickSort</span>, UnionAll, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PermutedDimsArray</span>, UnionAll, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Pipe</span>, DataType, Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PipeBuffer</span>, <span class="pl-c1">typeof</span>(PipeBuffer), Base)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Ptr</span>, UnionAll, Core)

julia<span class="pl-k">&gt;</span> leaf <span class="pl-k">=</span> <span class="pl-c1">first</span>(leaves);

julia<span class="pl-k">&gt;</span> leaf<span class="pl-k">.</span>name
<span class="pl-c1">:PROGRAM_FILE</span>

julia<span class="pl-k">&gt;</span> leaf<span class="pl-k">.</span>type
String

julia<span class="pl-k">&gt;</span> leaf<span class="pl-k">.</span>mod
Base

julia<span class="pl-k">&gt;</span> <span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>, Core)  <span class="pl-c"><span class="pl-c">#</span> "Core" or :Core work, too.</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PhiCNode</span>, DataType, Core)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PhiNode</span>, DataType, Core)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:PiNode</span>, DataType, Core)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:Ptr</span>, UnionAll, Core)</pre></div>
<p>To load some new modules, use <code>activate!</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DumbCompleter: activate!, completions

julia&gt; activate!(@__DIR__)

julia&gt; DumbCompleter.completions(&quot;js&quot;)
1-element Array{DumbCompleter.Leaf,1}:
 DumbCompleter.Leaf(:json, typeof(JSON.Writer.json), JSON)

julia&gt; DumbCompleter.completions(&quot;a&quot;, :Pkg)
2-element Array{DumbCompleter.Leaf,1}:
 DumbCompleter.Leaf(:activate, typeof(Pkg.API.activate), Pkg)
 DumbCompleter.Leaf(:add, typeof(Pkg.API.add), Pkg)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DumbCompleter<span class="pl-k">:</span> activate!, completions

julia<span class="pl-k">&gt;</span> <span class="pl-c1">activate!</span>(<span class="pl-c1">@__DIR__</span>)

julia<span class="pl-k">&gt;</span> DumbCompleter<span class="pl-k">.</span><span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>js<span class="pl-pds">"</span></span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:json</span>, <span class="pl-c1">typeof</span>(JSON<span class="pl-k">.</span>Writer<span class="pl-k">.</span>json), JSON)

julia<span class="pl-k">&gt;</span> DumbCompleter<span class="pl-k">.</span><span class="pl-c1">completions</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-c1">:Pkg</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{DumbCompleter<span class="pl-k">.</span>Leaf,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:activate</span>, <span class="pl-c1">typeof</span>(Pkg<span class="pl-k">.</span>API<span class="pl-k">.</span>activate), Pkg)
 DumbCompleter<span class="pl-k">.</span><span class="pl-c1">Leaf</span>(<span class="pl-c1">:add</span>, <span class="pl-c1">typeof</span>(Pkg<span class="pl-k">.</span>API<span class="pl-k">.</span>add), Pkg)</pre></div>
<h2><a id="user-content-usage-emacs" class="anchor" aria-hidden="true" href="#usage-emacs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage (Emacs)</h2>
<p>First, make sure you have <a href="http://company-mode.github.io" rel="nofollow">Company</a> set up.
Then, put <code>emacs/julia-dumbcompleter.el</code> somewhere on your load path.
Lastly, add <code>(require 'julia-dumbcompleter)</code> somewhere in your <code>init.el</code>.</p>
<p>To load modules from the package you're developing, use <code>jldc/activate</code> and enter your package's root directory.</p>
<h2><a id="user-content-integration" class="anchor" aria-hidden="true" href="#integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integration</h2>
<p>Supporting a new text editor is not too hard, and just involves maintaining a server process and its IO.
To start a server, run the following:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DumbCompleter
ioserver()
"><pre><span class="pl-k">using</span> DumbCompleter
<span class="pl-c1">ioserver</span>()</pre></div>
<p>Then, send requests to the server process's standard input as JSON.
Currently, the available commands are:</p>
<ul>
<li><code>{"type": "completions", "module": "Module.Name.Or.Null", "text": "prefix_to_complete"}</code></li>
<li><code>{"type": "activate", "path": "package/root/directory"}</code></li>
</ul>
<p>The JSON response, written to standard output, contains an <code>error</code> field which is <code>null</code> or a string describing an error.
For <code>completions</code> requests, the response contains a <code>completions</code> field that looks like this:</p>
<div class="highlight highlight-source-json position-relative" data-snippet-clipboard-copy-content="[
  {
    &quot;name&quot;:   &quot;variable name&quot;,
    &quot;type&quot;:   &quot;value's type&quot;,
    &quot;module&quot;: &quot;module owning the type&quot;
  }
]
"><pre>[
  {
    <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>:   <span class="pl-s"><span class="pl-pds">"</span>variable name<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>:   <span class="pl-s"><span class="pl-pds">"</span>value's type<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>module owning the type<span class="pl-pds">"</span></span>
  }
]</pre></div>
<p>For <code>activate</code> requests, the response contains no other fields.</p>
</article></div>