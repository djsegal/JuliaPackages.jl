<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-banyan-julia" class="anchor" aria-hidden="true" href="#banyan-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Banyan Julia</h1>
<p dir="auto">Banyan Julia is a suite of libraries for processing big data with massive parallelism in the cloud. The difference between Banyan Julia and alternatives (such as Dagger.jl, Distributed, MPI.jl) is that anything you can <a href="https://www.banyancomputing.com/computing-futures" rel="nofollow"><code>compute</code></a> can be instantly <a href="https://www.banyancomputing.com/sampling-data" rel="nofollow"><code>sample</code></a>d.</p>
<ul dir="auto">
<li><a href="https://www.banyancomputing.com/banyan-arrays-jl-docs" rel="nofollow">BanyanArrays.jl</a> for reading/writing large HDF5 datasets and distributed map-reduce computation</li>
<li><a href="https://www.banyancomputing.com/banyan-images-jl-docs" rel="nofollow">BanyanImages.jl</a> for massively parallel image processing</li>
<li><a href="https://www.banyancomputing.com/banyan-data-frames-jl-docs" rel="nofollow">BanyanDataFrames.jl</a> for distributed reading/writing Parquet/CSV/Arrow datasets and selecting, aggregating, and transforming data</li>
<li><a href="https://www.banyancomputing.com/banyan-onnx-run-time-jl-docs" rel="nofollow">BanyanONNXRunTime.jl</a> for high-performance ML inference (bring your own PyTorch and TensorFlow models!)</li>
<li>BanyanDBInterface.jl (WIP - please contact <a href="mailto:support@banyancomputing.com">support@banyancomputing.com</a>) for extracting from and loading to your database</li>
<li><a href="https://www.banyancomputing.com/custom-scripting" rel="nofollow">Banyan.jl's Custom Scripting</a> for running single-worker or many-worker Julia scripts with easy access to MPI, parallel HDF5, and Amazon S3 (with the mounted <code>s3/</code> directory)</li>
</ul>
<p dir="auto">You can effectively be able to use these libraries as drop-in replacements of the standard library Arrays and the DataFrames.jl library. By changing an import statement, you can run your code as is with Banyan scaling to arbitrary data or compute needs and read in
array/image/table data from S3 or the Internet (e.g., GitHub or public APIs).</p>
<p dir="auto">Visit <a href="https://www.banyancomputing.com/resources/" rel="nofollow">Banyan Computing</a> for full documentation.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">Banyan is the best way to unleash Julia on big data in the cloud! To get started:</p>
<ol dir="auto">
<li>Follow the <a href="banyancomputing.com/getting-started">getting started steps</a> (15 minutes)</li>
<li>Create a cluster on the <a href="banyancomputing.com/dashboard">dashboard</a></li>
<li>Start a cluster session wherever you are running Julia with <code>start_session</code> (between 15s and 30min)</li>
<li>Use functions in <a href="https://www.banyancomputing.com/banyan-arrays-jl-docs" rel="nofollow">BanyanArrays.jl</a> or <a href="https://www.banyancomputing.com/banyan-data-frames-jl-docs" rel="nofollow">BanyanDataFrames.jl</a> for big data processing!</li>
<li>End the cluster session with <code>end_session</code></li>
<li>Destroy the cluster on the <a href="banyancomputing.com/dashboard">dashboard</a></li>
</ol>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Please create branches named according the the author name and the feature name
like <code>{author-name}/{feature-name}</code>. For example: <code>caleb/add-tests-for-hdf5</code>.
Then, submit a pull request on GitHub to merge your branch into the branch with
the latest version number.</p>
<p dir="auto">When pulling/pushing code, you may need to add the appropriate SSH key. Look
up GitHub documentation for how to generate an SSH key, then make sure to add
it. You may need to do this repeatedly if you have multiple SSH keys for
different GitHub accounts. For example, on Windows you may need to:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="eval `ssh-agent`
ssh-add -D
ssh-add /c/Users/Claris/.ssh/id_rsa_clarisw
git remote set-url origin git@github.com:banyan-team/banyan-website.git"><pre class="notranslate"><code>eval `ssh-agent`
ssh-add -D
ssh-add /c/Users/Claris/.ssh/id_rsa_clarisw
git remote set-url origin git@github.com:banyan-team/banyan-website.git
</code></pre></div>
<h2 dir="auto"><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing</h2>
<p dir="auto">To see an example of how to add tests, see <code>BanyanArrays/test/runtests.jl</code> and <code>BanyanArrays/test/hdf5.jl</code>.</p>
<p dir="auto">To run tests, ensure that you have a Banyan account connected to an AWS account.
Then, <code>cd</code> into the directory with the Banyan Julia project you want to run
tests for (e.g., <code>Banyan</code> for Banyan.jl or <code>BanyanDataFrames</code> for
BanyanDataFrames.jl) and run <code>julia --project=. -e "using Pkg; Pkg.test()"</code>.
To filter and run a subset of test sets (where each test set is defined with
<code>@testset</code>) with names matching a given pattern, run
<code>julia --project=. -e "using Pkg; Pkg.test(test_args=[\"{pattern 1}\", \"{pattern 2}\"])"</code> where
the pattern could be, for example, <code>Sampl(.*)parquet</code> (a regular expression)
or <code>Sample collection</code>.</p>
<p dir="auto">You must then specify the cluster name with the <code>BANYAN_CLUSTER_NAME</code>
environment variable. You must also specify the relevant <code>BANYAN_*</code>
and <code>AWS_*</code> environment variables to provide credentials. AWS
credentials are specified in the same way as they would be if using
the AWS CLI (either use environment variables or use the relevant
AWS configuration files) and the Banyan environment variables
are saved in <code>banyanconfig.toml</code> so you don't need to specify it
every time.</p>
<p dir="auto">You must also specify the branch you would like to test with the <code>BANYAN_JULIA_BRANCH</code>
environment variables.</p>
<p dir="auto">For example, if you have previously specified your Banyan API key, user ID, and AWS credentials, you could:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd BanyanDataFrames
BANYAN_CLUSTER_NAME=pumpkincluster0 BANYAN_JULIA_BRANCH=v0.1.3 julia --project=. -e &quot;using Pkg; Pkg.test(test_args=[\&quot;ample\&quot;])"><pre class="notranslate"><code>cd BanyanDataFrames
BANYAN_CLUSTER_NAME=pumpkincluster0 BANYAN_JULIA_BRANCH=v0.1.3 julia --project=. -e "using Pkg; Pkg.test(test_args=[\"ample\"])
</code></pre></div>
<p dir="auto">If your AWS credentials are saved under a profile named <code>banyan-testing</code>, you could use <code>AWS_DEFAULT_PROFILE=banyan-testing</code>.</p>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<p dir="auto">Make sure to use the <code>] dev ...</code> command or <code>Pkg.dev(...)</code> to ensure that when you
are using BanyanArrays.jl or BanyanDataFrames.jl you are using the local version.</p>
</article></div>