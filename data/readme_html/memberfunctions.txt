<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-memberfunctionsjl" class="anchor" aria-hidden="true" href="#memberfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MemberFunctions.jl</h1>
<p dir="auto"><code>MemberFunctions.jl</code> helps writing member-like functions, reducing the amount of
code required to implement them. All functions prefixed by the <code>@member</code> macro
can access, i.e. read and write, fields of the first argument directly.</p>
<p dir="auto"><strong>Example</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct Foo
  value
end

@member get_value(foo::Foo) = value

@member function set_value!(foo::Foo, v)
  value = v
end

foo = Foo(1)
set_value!(foo, 2)

get_value(foo) == 1

set_value!(foo, 2)
get_value(foo) == 2"><pre><span class="pl-k">mutable struct</span> Foo
  value
<span class="pl-k">end</span>

<span class="pl-c1">@member</span> <span class="pl-en">get_value</span>(foo<span class="pl-k">::</span><span class="pl-c1">Foo</span>) <span class="pl-k">=</span> value

<span class="pl-c1">@member</span> <span class="pl-k">function</span> <span class="pl-en">set_value!</span>(foo<span class="pl-k">::</span><span class="pl-c1">Foo</span>, v)
  value <span class="pl-k">=</span> v
<span class="pl-k">end</span>

foo <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">set_value!</span>(foo, <span class="pl-c1">2</span>)

<span class="pl-c1">get_value</span>(foo) <span class="pl-k">==</span> <span class="pl-c1">1</span>

<span class="pl-c1">set_value!</span>(foo, <span class="pl-c1">2</span>)
<span class="pl-c1">get_value</span>(foo) <span class="pl-k">==</span> <span class="pl-c1">2</span></pre></div>
</article></div>