<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sqlfluff" class="anchor" aria-hidden="true" href="#sqlfluff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SQLFluff</h1>
<p dir="auto">To install run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="]add SQLFluff.jl"><pre class="notranslate"><code>]add SQLFluff.jl
</code></pre></div>
<p dir="auto">This package is a thin wrapper around <a href="https://github.com/JuliaComputing/SQLStrings.jl">SQLStrings</a> which adds linting via <a href="https://github.com/sqlfluff/sqlfluff">sqlfluff</a>, so that incorrect SQL should throw an informative error for example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sql&quot;SELET * FROM table &quot;
# ERROR: SQLParseError(Line 1, Position 1: Found unparsable section: 'SELET * FROM mytable')"><pre><span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>"</span>SELET * FROM table <span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> ERROR: SQLParseError(Line 1, Position 1: Found unparsable section: 'SELET * FROM mytable')</span></pre></div>
<p dir="auto">You can configure a specific dialect with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dialect!(&quot;sqlite&quot;)"><pre><span class="pl-c1">dialect!</span>(<span class="pl-s"><span class="pl-pds">"</span>sqlite<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Where the supported dialects are</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[
    &quot;ansi&quot;,
    &quot;bigquery&quot;,
    &quot;db2&quot;,
    &quot;exasol&quot;,
    &quot;hive&quot;,
    &quot;mysql&quot;,
    &quot;oracle&quot;,
    &quot;postgres&quot;,
    &quot;redshift&quot;,
    &quot;snowflake&quot;,
    &quot;sparksql&quot;,
    &quot;sqlite&quot;,
    &quot;teradata&quot;,
    &quot;tsql&quot;,
]"><pre>[
    <span class="pl-s"><span class="pl-pds">"</span>ansi<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>bigquery<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>db2<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>exasol<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>hive<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>mysql<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>oracle<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>postgres<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>redshift<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>snowflake<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>sparksql<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>sqlite<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>teradata<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>tsql<span class="pl-pds">"</span></span>,
]</pre></div>
<p dir="auto">For SQL code that contains interpolated symbols, e.g <code>SELECT * FROM table WHERE x=$x</code> we need to know how to format the data types so the generated SQL can be linted. If your datatype is unsupported you can define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="formatter(::Val{:dialect}, ::MyType) = x -&gt; &quot;$x my format&quot;"><pre><span class="pl-en">formatter</span>(<span class="pl-k">::</span><span class="pl-c1">Val{:dialect}</span>, <span class="pl-k">::</span><span class="pl-c1">MyType</span>) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$x</span> my format<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">It should return a function that is capable of correctly formatting your data type. Initial support will go into covering formatting for Postgres and Sqlite.</p>
</article></div>