<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-eyeballjl" class="anchor" aria-hidden="true" href="#eyeballjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Eyeball.jl</h1>
<p dir="auto"><em>Object and type viewer for Julia</em></p>
<p dir="auto"><a href="https://github.com/tshort/Eyeball.jl/actions"><img src="https://github.com/tshort/Eyeball.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Eyeball exports one main tool to browse Julia objects and types.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eye(object)
eye(object, depth)
eye(object = Main, depth = 10; interactive = true, all = false)"><pre><span class="pl-c1">eye</span>(object)
<span class="pl-c1">eye</span>(object, depth)
<span class="pl-c1">eye</span>(object <span class="pl-k">=</span> Main, depth <span class="pl-k">=</span> <span class="pl-c1">10</span>; interactive <span class="pl-k">=</span> <span class="pl-c1">true</span>, all <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><code>depth</code> controls the depth of folding. <code>all</code> expands options.</p>
<p dir="auto">The user can interactively browse the object tree using the following keys:</p>
<ul dir="auto">
<li><code>↑</code> <code>↓</code> <code>←</code> <code>→</code> -- Up and down moves through the tree. Left collapses a tree. Right expands a folded tree. Vim movement keys (<code>h</code> <code>j</code> <code>k</code> <code>l</code>) are also supported.</li>
<li><code>d</code> -- Docs. Show documentation on the object.</li>
<li><code>e</code> -- Expand. Show more subobjects. The number of objects is doubled each time.</li>
<li><code>f</code> -- Toggle fields. By default, parameters are shown for most objects.
<code>f</code> toggles between the normal view and a view showing the fields of an object.</li>
<li><code>m</code> -- Methodswith. Show methods available for objects of this type. <code>M</code> specifies <code>supertypes = true</code>.</li>
<li><code>o</code> -- Open. Open the object in a new tree view. <code>O</code> opens all (mainly useful for modules).</li>
<li><code>r</code> -- Return tree (a <code>FoldingTrees.Node</code>).</li>
<li><code>s</code> -- Show object.</li>
<li><code>S</code> -- Sort. Open the sorted object in a new view.</li>
<li><code>t</code> -- Typeof. Show the type of the object in a new tree view.</li>
<li><code>z</code> -- Summarize. Toggle a summary of the object and child objects.
For arrays, this shows the mean and 0, 25, 50, 75, and 100% quantiles (skipping missings).</li>
<li><code>.</code> -- Sizes. Toggle display of sizes between none, <code>Base.summarysize</code> (includes subobjects), and <code>sizeof</code>.</li>
<li><code>0</code>-<code>9</code> -- Fold to depth. Also toggles expansion of items normally left folded.</li>
<li><code>enter</code> -- Return the selected object.</li>
<li><code>q</code> -- Quit.</li>
</ul>
<p dir="auto">Notes:</p>
<ul dir="auto">
<li>Longer objects only have the first few elements shown when unfolded. Use <code>e</code> to expand.</li>
<li>Some types are left folded by default (numbers, typed arrays, ...).
The number keys for folding cycle between keeping these folded and unfolding these.</li>
<li>Some types are not recursed into. This includes modules. You can use <code>o</code> to open these in a new tree view.</li>
<li><code>O</code> and <code>all = true</code> adds a wrapper <code>Eyeball.All</code> around the object.
This is mainly for use with modules where options are taken with <code>name(module, all = true)</code>.</li>
<li>Summarize <code>z</code> shows a summary of child objects. That's useful for DataFrames, nested arrays, and similar types.</li>
<li>For dictionaries with simple keys (symbols, strings, or numbers), the key is shown directly.
For others, a list of key-value pairs is shown.</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h4 dir="auto"><a id="user-content-explore-an-object" class="anchor" aria-hidden="true" href="#explore-an-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Explore an object:</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = (h=rand(5), e=:(5sin(pi*t)), f=sin, c=33im, set=Set((:a, 9, rand(1:5, 8))), b=(c=1,d=9,e=(i=9,f=0)), x=9 =&gt; 99:109, d=Dict(1=&gt;2, 3=&gt;4), ds=Dict(:s=&gt;4,:t=&gt;7), dm=Dict(1=&gt;9, &quot;x&quot;=&gt;8))
eye(a)"><pre>a <span class="pl-k">=</span> (h<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">5</span>), e<span class="pl-k">=</span>:(<span class="pl-c1">5</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>t)), f<span class="pl-k">=</span>sin, c<span class="pl-k">=</span><span class="pl-c1">33im</span>, set<span class="pl-k">=</span><span class="pl-c1">Set</span>((<span class="pl-c1">:a</span>, <span class="pl-c1">9</span>, <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">8</span>))), b<span class="pl-k">=</span>(c<span class="pl-k">=</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-c1">9</span>,e<span class="pl-k">=</span>(i<span class="pl-k">=</span><span class="pl-c1">9</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>)), x<span class="pl-k">=</span><span class="pl-c1">9</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">99</span><span class="pl-k">:</span><span class="pl-c1">109</span>, d<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>), ds<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-c1">:s</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>,<span class="pl-c1">:t</span><span class="pl-k">=&gt;</span><span class="pl-c1">7</span>), dm<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">9</span>, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">8</span>))
<span class="pl-c1">eye</span>(a)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; eye(a)
[f] fields [d] docs [e] expand [m/M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
 &gt;   : NamedTuple{(:h, :e, :f, :c, :set, :b, :x, :d, :ds, :dm), Tuple{Vector{Float64}, Expr, typeof(sin), Complex{Int64}   +  h: Vector{Float64} (5,) 40 [0.589398, 0.761107, 0.963494, 0.835393, 0.488657]
      e: Expr  :(5 * sin(pi * t))
       head: Symbol  :call
       args: Vector{Any} (3,) 24 Any[:*, 5, :(sin(pi * t))]
        1: Symbol  :*
        2: Int64  5
        3: Expr  :(sin(pi * t))
         head: Symbol  :call
         args: Vector{Any} (2,) 16 Any[:sin, :(pi * t)]
          1: Symbol  :sin
          2: Expr  :(pi * t)
           head: Symbol  :call
           args: Vector{Any} (3,) 24 Any[:*, :pi, :t]
            1: Symbol  :*
            2: Symbol  :pi
            3: Symbol  :t
      f: typeof(sin)  sin
   +  c: Complex{Int64}  0+33im
      set: Set{Any}  Set(Any[:a, 9, [2, 3, 2, 5, 5, 1, 4, 5]])
       : Symbol  :a
       : Int64  9
   +   : Vector{Int64} (8,) 64 [2, 3, 2, 5, 5, 1, 4, 5]
      b: NamedTuple{(:c, :d, :e), Tuple{Int64, Int64, NamedTuple{(:i, :f), Tuple{Int64, Int64}}}}  (c = 1, d = 9, e = (i       c: Int64  1
       d: Int64  9
       e: NamedTuple{(:i, :f), Tuple{Int64, Int64}}  (i = 9, f = 0)
        i: Int64  9
        f: Int64  0
   +  x: Pair{Int64, UnitRange{Int64}}  9=&gt;99:109
      d: Dict{Int64, Int64}  Dict(3=&gt;4, 1=&gt;2)
       3: Int64  4
       1: Int64  2
      ds: Dict{Symbol, Int64}  Dict(:s=&gt;4, :t=&gt;7)
       s: Int64  4
v      t: Int64  7"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">eye</span>(a)
[f] fields [d] docs [e] expand [m<span class="pl-k">/</span>M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
 <span class="pl-k">&gt;</span>   <span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:h</span>, <span class="pl-c1">:e</span>, <span class="pl-c1">:f</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:set</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:x</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:ds</span>, <span class="pl-c1">:dm</span>), Tuple{Vector{Float64}, Expr, <span class="pl-c1">typeof</span>(sin), Complex{Int64}   <span class="pl-k">+</span>  h<span class="pl-k">:</span> Vector{Float64} (<span class="pl-c1">5</span>,) <span class="pl-c1">40</span> [<span class="pl-c1">0.589398</span>, <span class="pl-c1">0.761107</span>, <span class="pl-c1">0.963494</span>, <span class="pl-c1">0.835393</span>, <span class="pl-c1">0.488657</span>]
      e<span class="pl-k">:</span> Expr  :(<span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t))
       head<span class="pl-k">:</span> Symbol  <span class="pl-c1">:call</span>
       args<span class="pl-k">:</span> Vector{Any} (<span class="pl-c1">3</span>,) <span class="pl-c1">24</span> Any[:<span class="pl-k">*</span>, <span class="pl-c1">5</span>, :(<span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t))]
        <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol  :<span class="pl-k">*</span>
        <span class="pl-c1">2</span><span class="pl-k">:</span> Int64  <span class="pl-c1">5</span>
        <span class="pl-c1">3</span><span class="pl-k">:</span> Expr  :(<span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t))
         head<span class="pl-k">:</span> Symbol  <span class="pl-c1">:call</span>
         args<span class="pl-k">:</span> Vector{Any} (<span class="pl-c1">2</span>,) <span class="pl-c1">16</span> Any[<span class="pl-c1">:sin</span>, :(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t)]
          <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol  <span class="pl-c1">:sin</span>
          <span class="pl-c1">2</span><span class="pl-k">:</span> Expr  :(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t)
           head<span class="pl-k">:</span> Symbol  <span class="pl-c1">:call</span>
           args<span class="pl-k">:</span> Vector{Any} (<span class="pl-c1">3</span>,) <span class="pl-c1">24</span> Any[:<span class="pl-k">*</span>, <span class="pl-c1">:pi</span>, <span class="pl-c1">:t</span>]
            <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol  :<span class="pl-k">*</span>
            <span class="pl-c1">2</span><span class="pl-k">:</span> Symbol  <span class="pl-c1">:pi</span>
            <span class="pl-c1">3</span><span class="pl-k">:</span> Symbol  <span class="pl-c1">:t</span>
      f<span class="pl-k">:</span> <span class="pl-c1">typeof</span>(sin)  sin
   <span class="pl-k">+</span>  c<span class="pl-k">:</span> Complex{Int64}  <span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">33im</span>
      set<span class="pl-k">:</span> Set{Any}  <span class="pl-c1">Set</span>(Any[<span class="pl-c1">:a</span>, <span class="pl-c1">9</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]])
       <span class="pl-k">:</span> Symbol  <span class="pl-c1">:a</span>
       <span class="pl-k">:</span> Int64  <span class="pl-c1">9</span>
   <span class="pl-k">+</span>   <span class="pl-k">:</span> Vector{Int64} (<span class="pl-c1">8</span>,) <span class="pl-c1">64</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]
      b<span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:e</span>), Tuple{Int64, Int64, NamedTuple{(<span class="pl-c1">:i</span>, <span class="pl-c1">:f</span>), Tuple{Int64, Int64}}}}  (c <span class="pl-k">=</span> <span class="pl-c1">1</span>, d <span class="pl-k">=</span> <span class="pl-c1">9</span>, e <span class="pl-k">=</span> (i       c<span class="pl-k">:</span> Int64  <span class="pl-c1">1</span>
       d<span class="pl-k">:</span> Int64  <span class="pl-c1">9</span>
       e<span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:i</span>, <span class="pl-c1">:f</span>), Tuple{Int64, Int64}}  (i <span class="pl-k">=</span> <span class="pl-c1">9</span>, f <span class="pl-k">=</span> <span class="pl-c1">0</span>)
        i<span class="pl-k">:</span> Int64  <span class="pl-c1">9</span>
        f<span class="pl-k">:</span> Int64  <span class="pl-c1">0</span>
   <span class="pl-k">+</span>  x<span class="pl-k">:</span> Pair{Int64, UnitRange{Int64}}  <span class="pl-c1">9</span><span class="pl-k">=&gt;</span><span class="pl-c1">99</span><span class="pl-k">:</span><span class="pl-c1">109</span>
      d<span class="pl-k">:</span> Dict{Int64, Int64}  <span class="pl-c1">Dict</span>(<span class="pl-c1">3</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>)
       <span class="pl-c1">3</span><span class="pl-k">:</span> Int64  <span class="pl-c1">4</span>
       <span class="pl-c1">1</span><span class="pl-k">:</span> Int64  <span class="pl-c1">2</span>
      ds<span class="pl-k">:</span> Dict{Symbol, Int64}  <span class="pl-c1">Dict</span>(<span class="pl-c1">:s</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>, <span class="pl-c1">:t</span><span class="pl-k">=&gt;</span><span class="pl-c1">7</span>)
       s<span class="pl-k">:</span> Int64  <span class="pl-c1">4</span>
v      t<span class="pl-k">:</span> Int64  <span class="pl-c1">7</span></pre></div>
<h4 dir="auto"><a id="user-content-explore-a-module" class="anchor" aria-hidden="true" href="#explore-a-module"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Explore a Module:</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eye()      # equivalent to `eye(Main)`"><pre><span class="pl-c1">eye</span>()      <span class="pl-c"><span class="pl-c">#</span> equivalent to `eye(Main)`</span></pre></div>
<details>
  <summary>Expand results</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; eye()
[f] fields [d] docs [e] expand [m/M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
 &gt;   : Module  Main
      Base: Module  Base
      Core: Module  Core
      InteractiveUtils: Module  InteractiveUtils
      Main: Module  Main
      a: NamedTuple{(:h, :e, :f, :c, :set, :b, :x, :d, :ds, :dm), Tuple{Vector{Float64}, Expr, typeof(sin), Complex{Int6   +   h: Vector{Float64} (5,) 40 [0.589398, 0.761107, 0.963494, 0.835393, 0.488657]
       e: Expr  :(5 * sin(pi * t))
        head: Symbol  :call
        args: Vector{Any} (3,) 24 Any[:*, 5, :(sin(pi * t))]
         1: Symbol  :*
         2: Int64  5
         3: Expr  :(sin(pi * t))
          head: Symbol  :call
          args: Vector{Any} (2,) 16 Any[:sin, :(pi * t)]
           1: Symbol  :sin
           2: Expr  :(pi * t)
            head: Symbol  :call
            args: Vector{Any} (3,) 24 Any[:*, :pi, :t]
             1: Symbol  :*
             2: Symbol  :pi
             3: Symbol  :t
       f: typeof(sin)  sin
   +   c: Complex{Int64}  0+33im
       set: Set{Any}  Set(Any[:a, 9, [2, 3, 2, 5, 5, 1, 4, 5]])
        : Symbol  :a
        : Int64  9
   +    : Vector{Int64} (8,) 64 [2, 3, 2, 5, 5, 1, 4, 5]
       b: NamedTuple{(:c, :d, :e), Tuple{Int64, Int64, NamedTuple{(:i, :f), Tuple{Int64, Int64}}}}  (c = 1, d = 9, e = (        c: Int64  1
        d: Int64  9
        e: NamedTuple{(:i, :f), Tuple{Int64, Int64}}  (i = 9, f = 0)
         i: Int64  9
         f: Int64  0
   +   x: Pair{Int64, UnitRange{Int64}}  9=&gt;99:109
v      d: Dict{Int64, Int64}  Dict(3=&gt;4, 1=&gt;2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">eye</span>()
[f] fields [d] docs [e] expand [m<span class="pl-k">/</span>M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
 <span class="pl-k">&gt;</span>   <span class="pl-k">:</span> Module  Main
      Base<span class="pl-k">:</span> Module  Base
      Core<span class="pl-k">:</span> Module  Core
      InteractiveUtils<span class="pl-k">:</span> Module  InteractiveUtils
      Main<span class="pl-k">:</span> Module  Main
      a<span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:h</span>, <span class="pl-c1">:e</span>, <span class="pl-c1">:f</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:set</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:x</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:ds</span>, <span class="pl-c1">:dm</span>), Tuple{Vector{Float64}, Expr, <span class="pl-c1">typeof</span>(sin), Complex{Int6   <span class="pl-k">+</span>   h<span class="pl-k">:</span> Vector{Float64} (<span class="pl-c1">5</span>,) <span class="pl-c1">40</span> [<span class="pl-c1">0.589398</span>, <span class="pl-c1">0.761107</span>, <span class="pl-c1">0.963494</span>, <span class="pl-c1">0.835393</span>, <span class="pl-c1">0.488657</span>]
       e<span class="pl-k">:</span> Expr  :(<span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t))
        head<span class="pl-k">:</span> Symbol  <span class="pl-c1">:call</span>
        args<span class="pl-k">:</span> Vector{Any} (<span class="pl-c1">3</span>,) <span class="pl-c1">24</span> Any[:<span class="pl-k">*</span>, <span class="pl-c1">5</span>, :(<span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t))]
         <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol  :<span class="pl-k">*</span>
         <span class="pl-c1">2</span><span class="pl-k">:</span> Int64  <span class="pl-c1">5</span>
         <span class="pl-c1">3</span><span class="pl-k">:</span> Expr  :(<span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t))
          head<span class="pl-k">:</span> Symbol  <span class="pl-c1">:call</span>
          args<span class="pl-k">:</span> Vector{Any} (<span class="pl-c1">2</span>,) <span class="pl-c1">16</span> Any[<span class="pl-c1">:sin</span>, :(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t)]
           <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol  <span class="pl-c1">:sin</span>
           <span class="pl-c1">2</span><span class="pl-k">:</span> Expr  :(<span class="pl-c1">pi</span> <span class="pl-k">*</span> t)
            head<span class="pl-k">:</span> Symbol  <span class="pl-c1">:call</span>
            args<span class="pl-k">:</span> Vector{Any} (<span class="pl-c1">3</span>,) <span class="pl-c1">24</span> Any[:<span class="pl-k">*</span>, <span class="pl-c1">:pi</span>, <span class="pl-c1">:t</span>]
             <span class="pl-c1">1</span><span class="pl-k">:</span> Symbol  :<span class="pl-k">*</span>
             <span class="pl-c1">2</span><span class="pl-k">:</span> Symbol  <span class="pl-c1">:pi</span>
             <span class="pl-c1">3</span><span class="pl-k">:</span> Symbol  <span class="pl-c1">:t</span>
       f<span class="pl-k">:</span> <span class="pl-c1">typeof</span>(sin)  sin
   <span class="pl-k">+</span>   c<span class="pl-k">:</span> Complex{Int64}  <span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">33im</span>
       set<span class="pl-k">:</span> Set{Any}  <span class="pl-c1">Set</span>(Any[<span class="pl-c1">:a</span>, <span class="pl-c1">9</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]])
        <span class="pl-k">:</span> Symbol  <span class="pl-c1">:a</span>
        <span class="pl-k">:</span> Int64  <span class="pl-c1">9</span>
   <span class="pl-k">+</span>    <span class="pl-k">:</span> Vector{Int64} (<span class="pl-c1">8</span>,) <span class="pl-c1">64</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]
       b<span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:e</span>), Tuple{Int64, Int64, NamedTuple{(<span class="pl-c1">:i</span>, <span class="pl-c1">:f</span>), Tuple{Int64, Int64}}}}  (c <span class="pl-k">=</span> <span class="pl-c1">1</span>, d <span class="pl-k">=</span> <span class="pl-c1">9</span>, e <span class="pl-k">=</span> (        c<span class="pl-k">:</span> Int64  <span class="pl-c1">1</span>
        d<span class="pl-k">:</span> Int64  <span class="pl-c1">9</span>
        e<span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:i</span>, <span class="pl-c1">:f</span>), Tuple{Int64, Int64}}  (i <span class="pl-k">=</span> <span class="pl-c1">9</span>, f <span class="pl-k">=</span> <span class="pl-c1">0</span>)
         i<span class="pl-k">:</span> Int64  <span class="pl-c1">9</span>
         f<span class="pl-k">:</span> Int64  <span class="pl-c1">0</span>
   <span class="pl-k">+</span>   x<span class="pl-k">:</span> Pair{Int64, UnitRange{Int64}}  <span class="pl-c1">9</span><span class="pl-k">=&gt;</span><span class="pl-c1">99</span><span class="pl-k">:</span><span class="pl-c1">109</span>
v      d<span class="pl-k">:</span> Dict{Int64, Int64}  <span class="pl-c1">Dict</span>(<span class="pl-c1">3</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>)</pre></div>
</details>
<h4 dir="auto"><a id="user-content-explore-a-type-tree" class="anchor" aria-hidden="true" href="#explore-a-type-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Explore a type tree:</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eye(Number)"><pre><span class="pl-c1">eye</span>(Number)</pre></div>
<details>
  <summary>Expand results</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; eye(Number)
[f] fields [d] docs [e] expand [m/M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
&gt;   : DataType  Number
   +  : UnionAll  Complex
      : DataType  Real
       : DataType  AbstractFloat
   +    : DataType  BigFloat
        : DataType  Float16
        : DataType  Float32
        : DataType  Float64
       : DataType  AbstractIrrational
   +    : UnionAll  Irrational
       : DataType  Integer
        : DataType  Bool
        : DataType  Signed
   +     : DataType  BigInt
         : DataType  Int128
         : DataType  Int16
         : DataType  Int32
         : DataType  Int64
         : DataType  Int8
        : DataType  Unsigned
         : DataType  UInt128
         : DataType  UInt16
         : DataType  UInt32
         : DataType  UInt64
         : DataType  UInt8
   +   : UnionAll  Rational"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">eye</span>(Number)
[f] fields [d] docs [e] expand [m<span class="pl-k">/</span>M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
<span class="pl-k">&gt;</span>   <span class="pl-k">:</span> DataType  Number
   <span class="pl-k">+</span>  <span class="pl-k">:</span> UnionAll  Complex
      <span class="pl-k">:</span> DataType  Real
       <span class="pl-k">:</span> DataType  AbstractFloat
   <span class="pl-k">+</span>    <span class="pl-k">:</span> DataType  BigFloat
        <span class="pl-k">:</span> DataType  Float16
        <span class="pl-k">:</span> DataType  Float32
        <span class="pl-k">:</span> DataType  Float64
       <span class="pl-k">:</span> DataType  AbstractIrrational
   <span class="pl-k">+</span>    <span class="pl-k">:</span> UnionAll  Irrational
       <span class="pl-k">:</span> DataType  Integer
        <span class="pl-k">:</span> DataType  Bool
        <span class="pl-k">:</span> DataType  Signed
   <span class="pl-k">+</span>     <span class="pl-k">:</span> DataType  BigInt
         <span class="pl-k">:</span> DataType  Int128
         <span class="pl-k">:</span> DataType  Int16
         <span class="pl-k">:</span> DataType  Int32
         <span class="pl-k">:</span> DataType  Int64
         <span class="pl-k">:</span> DataType  Int8
        <span class="pl-k">:</span> DataType  Unsigned
         <span class="pl-k">:</span> DataType  UInt128
         <span class="pl-k">:</span> DataType  UInt16
         <span class="pl-k">:</span> DataType  UInt32
         <span class="pl-k">:</span> DataType  UInt64
         <span class="pl-k">:</span> DataType  UInt8
   <span class="pl-k">+</span>   <span class="pl-k">:</span> UnionAll  Rational</pre></div>
</details>
<h4 dir="auto"><a id="user-content-use-noninteractively" class="anchor" aria-hidden="true" href="#use-noninteractively"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use noninteractively</h4>
<p dir="auto">With the keyword argument <code>interactive</code> set to <code>false</code>, <code>eye</code> returns the tree as a <code>FoldingTrees.Node</code>.
That is automatically displayed via <code>show</code> or by using <code>FoldingTrees.print_tree</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eye(Number, interactive = false)"><pre><span class="pl-c1">eye</span>(Number, interactive <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<details>
  <summary>Expand results</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; eye(Number, interactive = false)
  DataType
├─ + : UnionAll Complex
└─   : DataType Real
   ├─   : DataType AbstractFloat
   │  ├─ + : DataType BigFloat
   │  ├─   : DataType Float16
   │  ├─   : DataType Float32
   │  └─   : DataType Float64
   ├─   : DataType AbstractIrrational
   │  └─ + : UnionAll Irrational
   ├─   : DataType Integer
   │  ├─   : DataType Bool
   │  ├─   : DataType Signed
   │  │  ├─ + : DataType BigInt
   │  │  ├─   : DataType Int128
   │  │  ├─   : DataType Int16
   │  │  ├─   : DataType Int32
   │  │  ├─   : DataType Int64
   │  │  └─   : DataType Int8
   │  └─   : DataType Unsigned
   │     ├─   : DataType UInt128
   │     ├─   : DataType UInt16
   │     ├─   : DataType UInt32
   │     ├─   : DataType UInt64
   │     └─   : DataType UInt8
   └─ + : UnionAll Rational"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">eye</span>(Number, interactive <span class="pl-k">=</span> <span class="pl-c1">false</span>)
  DataType
├─ <span class="pl-k">+</span> <span class="pl-k">:</span> UnionAll Complex
└─   <span class="pl-k">:</span> DataType Real
   ├─   <span class="pl-k">:</span> DataType AbstractFloat
   │  ├─ <span class="pl-k">+</span> <span class="pl-k">:</span> DataType BigFloat
   │  ├─   <span class="pl-k">:</span> DataType Float16
   │  ├─   <span class="pl-k">:</span> DataType Float32
   │  └─   <span class="pl-k">:</span> DataType Float64
   ├─   <span class="pl-k">:</span> DataType AbstractIrrational
   │  └─ <span class="pl-k">+</span> <span class="pl-k">:</span> UnionAll Irrational
   ├─   <span class="pl-k">:</span> DataType Integer
   │  ├─   <span class="pl-k">:</span> DataType Bool
   │  ├─   <span class="pl-k">:</span> DataType Signed
   │  │  ├─ <span class="pl-k">+</span> <span class="pl-k">:</span> DataType BigInt
   │  │  ├─   <span class="pl-k">:</span> DataType Int128
   │  │  ├─   <span class="pl-k">:</span> DataType Int16
   │  │  ├─   <span class="pl-k">:</span> DataType Int32
   │  │  ├─   <span class="pl-k">:</span> DataType Int64
   │  │  └─   <span class="pl-k">:</span> DataType Int8
   │  └─   <span class="pl-k">:</span> DataType Unsigned
   │     ├─   <span class="pl-k">:</span> DataType UInt128
   │     ├─   <span class="pl-k">:</span> DataType UInt16
   │     ├─   <span class="pl-k">:</span> DataType UInt32
   │     ├─   <span class="pl-k">:</span> DataType UInt64
   │     └─   <span class="pl-k">:</span> DataType UInt8
   └─ <span class="pl-k">+</span> <span class="pl-k">:</span> UnionAll Rational</pre></div>
</details>
<h4 dir="auto"><a id="user-content-summarize" class="anchor" aria-hidden="true" href="#summarize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summarize</h4>
<p dir="auto">Show a summary of arrays in a named tuple (also useful for DataFrames).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = (a = rand(100), b = rand(100:200, 100), c = 4rand(Float32, 100))
eye(d)    # then hit `z` to summarize"><pre>d <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>), b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">200</span>, <span class="pl-c1">100</span>), c <span class="pl-k">=</span> <span class="pl-c1">4</span><span class="pl-c1">rand</span>(Float32, <span class="pl-c1">100</span>))
<span class="pl-c1">eye</span>(d)    <span class="pl-c"><span class="pl-c">#</span> then hit `z` to summarize</span></pre></div>
<details>
  <summary>Expand results</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; eye(d)
[f] fields [d] docs [e] expand [m/M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
 &gt;   : NamedTuple{(:a, :b, :c), Tuple{Vector{Float64}, Vector{Int64}, Vector{Float32}}}  (a = [0.721857, 0.174408, 0.897
 &gt;      +  a: Vector{Float64} (100,) 800 x̄=0.535717, q=[0.0372074, 0.305533, 0.556568, 0.770658, 0.979569]
 &gt;      +  b: Vector{Int64} (100,) 800 x̄=145.5, q=[100.0, 117.0, 145.5, 170.0, 200.0]
 &gt;      +  c: Vector{Float32} (100,) 400 x̄=1.90419, q=[0.0898504, 1.09705, 1.9039, 2.68442, 3.93898]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">eye</span>(d)
[f] fields [d] docs [e] expand [m<span class="pl-k">/</span>M] methodswith [o] open [r] tree [s] show [t] typeof [z] summarize [q] quit
 <span class="pl-k">&gt;</span>   <span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>), Tuple{Vector{Float64}, Vector{Int64}, Vector{Float32}}}  (a <span class="pl-k">=</span> [<span class="pl-c1">0.721857</span>, <span class="pl-c1">0.174408</span>, <span class="pl-c1">0.897</span>
 <span class="pl-k">&gt;</span>      <span class="pl-k">+</span>  a<span class="pl-k">:</span> Vector{Float64} (<span class="pl-c1">100</span>,) <span class="pl-c1">800</span> x̄<span class="pl-k">=</span><span class="pl-c1">0.535717</span>, q<span class="pl-k">=</span>[<span class="pl-c1">0.0372074</span>, <span class="pl-c1">0.305533</span>, <span class="pl-c1">0.556568</span>, <span class="pl-c1">0.770658</span>, <span class="pl-c1">0.979569</span>]
 <span class="pl-k">&gt;</span>      <span class="pl-k">+</span>  b<span class="pl-k">:</span> Vector{Int64} (<span class="pl-c1">100</span>,) <span class="pl-c1">800</span> x̄<span class="pl-k">=</span><span class="pl-c1">145.5</span>, q<span class="pl-k">=</span>[<span class="pl-c1">100.0</span>, <span class="pl-c1">117.0</span>, <span class="pl-c1">145.5</span>, <span class="pl-c1">170.0</span>, <span class="pl-c1">200.0</span>]
 <span class="pl-k">&gt;</span>      <span class="pl-k">+</span>  c<span class="pl-k">:</span> Vector{Float32} (<span class="pl-c1">100</span>,) <span class="pl-c1">400</span> x̄<span class="pl-k">=</span><span class="pl-c1">1.90419</span>, q<span class="pl-k">=</span>[<span class="pl-c1">0.0898504</span>, <span class="pl-c1">1.09705</span>, <span class="pl-c1">1.9039</span>, <span class="pl-c1">2.68442</span>, <span class="pl-c1">3.93898</span>]</pre></div>
</details>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">By default, <code>eye</code> shows the properties of an object.
That can be customized for different objects.
For example, <code>Dict</code>s are shown with the key then the value, and abstract types are shown with subtypes.
To customize what's shown for <code>SomeType</code>, define <code>Eyeball.getobjects(x::SomeType)</code>.
This method should return an iterator that returns a key and a value describing each of the child objects to be shown.</p>
<p dir="auto">The display of objects can also be customized with the following boolean methods:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Eyeball.shouldrecurse(x)   
Eyeball.foldobject(x)   "><pre>Eyeball<span class="pl-k">.</span><span class="pl-c1">shouldrecurse</span>(x)   
Eyeball<span class="pl-k">.</span><span class="pl-c1">foldobject</span>(x)   </pre></div>
<p dir="auto"><code>shouldrecurse</code> controls whether <code>eye</code> recurses into object <code>x</code>.
This defaults to <code>true</code>.
For overly large or complex objects, it helps to return <code>false</code>.
That's done internally for <code>Module</code>s, <code>Method</code>s, and a few other types.
<code>foldobject</code> controls whether <code>eye</code> automatically folds the object.
This is useful for types where the components usually don't need to be shown.
This defaults to <code>false</code>.</p>
<p dir="auto">To add additional "summarize" options, define <code>Base.show(io::IO, x::Eyeball.Summarize{T})</code> for type <code>T</code>.</p>
<h2 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the Hood</h2>
<p dir="auto"><code>Eyeball</code> uses <a href="https://github.com/JuliaCollections/FoldingTrees.jl">FoldingTrees</a> for display of trees and interactivity.
<a href="https://github.com/MichaelHatherly/InteractiveErrors.jl/tree/master/src/vendor/FoldingTrees">This fork</a>
was extended to support customized key presses.
<a href="https://github.com/ronisbr/TerminalPager.jl">TerminalPager</a> is used for paging.</p>
<p dir="auto">The code was adapted from <a href="https://github.com/MichaelHatherly/InteractiveErrors.jl">InteractiveErrors.jl</a>
and <a href="https://github.com/JuliaDebug/Cthulhu.jl">Cthulhu.jl</a>.</p>
</article></div>