<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cthulhujl" class="anchor" aria-hidden="true" href="#cthulhujl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cthulhu.jl</h1>
<p><em>The slow descent into madness</em></p>
<p><a href="https://github.com/JuliaDebug/Cthulhu.jl/actions?query=workflow%3A%22CI%22+branch%3Amaster"><img src="https://github.com/JuliaDebug/Cthulhu.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaDebug/Cthulhu.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b0b06cd2273ede8aca808517e92e26a9728df80b8f63e7d82ca81e8508ec45f/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c696144656275672f437468756c68752e6a6c2f636f7665726167652e737667" alt="Codecov" data-canonical-src="https://codecov.io/github/JuliaDebug/Cthulhu.jl/coverage.svg" style="max-width:100%;"></a></p>
<p>Cthulhu can help you debug type inference issues by recursively showing the
<code>code_typed</code> output until you find the exact point where inference gave up,
messed up, or did something unexpected. Using the Cthulhu interface you can
debug type inference problems faster.</p>
<p>Looking at type-inferred code can be a bit daunting initially, but you grow more
comfortable with practice. Consider starting with a <a href="https://juliadebug.github.io/JuliaInterpreter.jl/stable/ast/" rel="nofollow">tutorial on "lowered" representation</a>,
which introduces most of the new concepts. Type-inferrred code differs mostly
by having additional type annotation and (depending on whether you're looking
at optimized or non-optimized code) may incorporate inlining and other fairly
significant transformations of the original code as written by the programmer.</p>
<p>Cthulhu's main tool, <code>descend</code>, can be invoked like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="descend(f, tt)     # function and argument types
@descend f(args)   # normal call
"><pre><span class="pl-c1">descend</span>(f, tt)     <span class="pl-c"><span class="pl-c">#</span> function and argument types</span>
<span class="pl-c1">@descend</span> <span class="pl-c1">f</span>(args)   <span class="pl-c"><span class="pl-c">#</span> normal call</span></pre></div>
<p><code>descend</code> allows you to interactively explore the output of
<code>code_typed</code> by descending into <code>invoke</code> and <code>call</code> statements. (<code>invoke</code>
statements correspond to static dispatch, whereas <code>call</code> statements correspond
to dynamic dispatch.) Press enter to select an <code>invoke</code> or <code>call</code> to descend
into, select <g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">â†©</g-emoji>  to ascend, and press q or control-c to quit.</p>
<h3><a id="user-content-juliacon-2019-talk-and-demo" class="anchor" aria-hidden="true" href="#juliacon-2019-talk-and-demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JuliaCon 2019 Talk and Demo</h3>
<p><a href="https://www.youtube.com/watch?v=qf9oA09wxXY" rel="nofollow">Watch on YouTube</a><br>
<a href="https://www.youtube.com/watch?v=qf9oA09wxXY" rel="nofollow"><img src="https://camo.githubusercontent.com/bd5cf77f33b7b5ae78789025d8a73776292a20cdbe4bc06e97957a8b8ec6273e/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f7166396f413039777858592f302e6a7067" alt="Click to watch video" data-canonical-src="https://img.youtube.com/vi/qf9oA09wxXY/0.jpg" style="max-width:100%;"></a></p>
<p>The version of Cthulu in the demo is a little outdated, without the newest features, but largely it has not changed too much.</p>
<h2><a id="user-content-usage-descend" class="anchor" aria-hidden="true" href="#usage-descend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage: descend</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function foo()
    T = rand() &gt; 0.5 ? Int64 : Float64
    sum(rand(T, 100))
end

descend(foo, Tuple{})
@descend foo()
"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>()
    T <span class="pl-k">=</span> <span class="pl-c1">rand</span>() <span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span> <span class="pl-k">?</span> Int64 <span class="pl-k">:</span> Float64
    <span class="pl-c1">sum</span>(<span class="pl-c1">rand</span>(T, <span class="pl-c1">100</span>))
<span class="pl-k">end</span>

<span class="pl-c1">descend</span>(foo, Tuple{})
<span class="pl-c1">@descend</span> <span class="pl-c1">foo</span>()</pre></div>
<h2><a id="user-content-methods-descend" class="anchor" aria-hidden="true" href="#methods-descend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods: descend</h2>
<ul>
<li><code>@descend_code_typed</code></li>
<li><code>descend_code_typed</code></li>
<li><code>@descend_code_warntype</code></li>
<li><code>descend_code_warntype</code></li>
<li><code>@descend</code>: Shortcut for <code>@descend_code_typed</code></li>
<li><code>descend</code>: Shortcut for <code>descend_code_typed</code></li>
</ul>
<h2><a id="user-content-usage-ascend" class="anchor" aria-hidden="true" href="#usage-ascend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage: ascend</h2>
<p>Cthulhu also provides the "upwards-looking" <code>ascend</code>. While <code>descend</code> allows
you to explore a call tree starting from the outermost caller, <code>ascend</code>
allows you to explore a call chain or tree starting from the innermost
callee. Its primary purpose is to support analysis of invalidation and inference
triggers in conjunction with <a href="https://github.com/timholy/SnoopCompile.jl">SnoopCompile</a>,
but you can use it as a standalone tool.
There is a <a href="https://www.youtube.com/watch?v=7VbXbI6OmYo" rel="nofollow">video using ascend to fix invalidations</a>,
where the part on <code>ascend</code> starts at minute 4:55.</p>
<p>For example, you can use it to examine all the inferred callers of a method instance:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; m = which(length, (Set{Symbol},))
length(s::Set) in Base at set.jl:55

julia&gt; mi = m.specializations[1]
MethodInstance for length(::Set{Symbol})

julia&gt; ascend(mi)
Choose a call for analysis (q to quit):
 &gt;   length(::Set{Symbol})
       union!(::Set{Symbol}, ::Vector{Symbol})
         Set{Symbol}(::Vector{Symbol})
         intersect!(::Set{Union{Int64, Symbol}}, ::Vector{Symbol})
           _shrink(::typeof(intersect!), ::Vector{Union{Int64, Symbol}}, ::Tuple{Vector{Symbol}})
             intersect(::Vector{Union{Int64, Symbol}}, ::Vector{Symbol})
       union!(::Set{Symbol}, ::Set{Symbol})
         union!(::Set{Symbol}, ::Set{Symbol}, ::Set{Symbol})
           union(::Set{Symbol}, ::Set{Symbol})
"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">which</span>(length, (Set{Symbol},))
<span class="pl-c1">length</span>(s<span class="pl-k">::</span><span class="pl-c1">Set</span>) <span class="pl-k">in</span> Base at set<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">55</span>

julia<span class="pl-k">&gt;</span> mi <span class="pl-k">=</span> m<span class="pl-k">.</span>specializations[<span class="pl-c1">1</span>]
MethodInstance <span class="pl-k">for</span> <span class="pl-c1">length</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ascend</span>(mi)
Choose a call <span class="pl-k">for</span> analysis (q to quit)<span class="pl-k">:</span>
 <span class="pl-k">&gt;</span>   <span class="pl-c1">length</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>)
       <span class="pl-c1">union!</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>)
         <span class="pl-c1">Set</span><span class="pl-c1">{Symbol}</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>)
         <span class="pl-c1">intersect!</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Union{Int64, Symbol}}</span>, <span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>)
           <span class="pl-c1">_shrink</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(intersect!), <span class="pl-k">::</span><span class="pl-c1">Vector{Union{Int64, Symbol}}</span>, <span class="pl-k">::</span><span class="pl-c1">Tuple{Vector{Symbol}}</span>)
             <span class="pl-c1">intersect</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Union{Int64, Symbol}}</span>, <span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>)
       <span class="pl-c1">union!</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>)
         <span class="pl-c1">union!</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>)
           <span class="pl-c1">union</span>(<span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Set{Symbol}</span>)</pre></div>
<p>You use the up/down arrows to navigate this menu, enter to select a call to <code>descend</code> into,
and your space bar to toggle branch-folding.</p>
<p>It also works on stacktraces:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; bt = try
           [sqrt(x) for x in [1, -1]]
       catch
           catch_backtrace()
       end;

julia&gt; ascend(bt)
Choose a call for analysis (q to quit):
 &gt;   throw_complex_domainerror(::Symbol, ::Float64) at ./math.jl:33
       sqrt at ./math.jl:582 =&gt; sqrt at ./math.jl:608 =&gt; iterate at ./generator.jl:47 =&gt; collect_to! at ./array.jl:710 =&gt; collect_to_with_first!(::Vector{Float64}, ::Float64, ::Base.Generator{Vector{Int64}, typeof(sqrt)}, ::Int64) at ./array.jl:688
         collect(::Base.Generator{Vector{Int64}, typeof(sqrt)}) at ./array.jl:669
           eval(::Module, ::Any) at ./boot.jl:360
             eval_user_input(::Any, ::REPL.REPLBackend) at /home/tim/src/julia-master/usr/share/julia/stdlib/v1.6/REPL/src/REPL.jl:139
...
"><pre>julia<span class="pl-k">&gt;</span> bt <span class="pl-k">=</span> <span class="pl-k">try</span>
           [<span class="pl-c1">sqrt</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> [<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]]
       <span class="pl-k">catch</span>
           <span class="pl-c1">catch_backtrace</span>()
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ascend</span>(bt)
Choose a call <span class="pl-k">for</span> analysis (q to quit)<span class="pl-k">:</span>
 <span class="pl-k">&gt;</span>   <span class="pl-c1">throw_complex_domainerror</span>(<span class="pl-k">::</span><span class="pl-c1">Symbol</span>, <span class="pl-k">::</span><span class="pl-c1">Float64</span>) at <span class="pl-k">./</span>math<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
       sqrt at <span class="pl-k">./</span>math<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">582</span> <span class="pl-k">=&gt;</span> sqrt at <span class="pl-k">./</span>math<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">608</span> <span class="pl-k">=&gt;</span> iterate at <span class="pl-k">./</span>generator<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">47</span> <span class="pl-k">=&gt;</span> collect_to! at <span class="pl-k">./</span>array<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">710</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">collect_to_with_first!</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, <span class="pl-k">::</span><span class="pl-c1">Float64</span>, <span class="pl-k">::</span><span class="pl-c1">Base.Generator{Vector{Int64}, typeof(sqrt)}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>array<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">688</span>
         <span class="pl-c1">collect</span>(<span class="pl-k">::</span><span class="pl-c1">Base.Generator{Vector{Int64}, typeof(sqrt)}</span>) at <span class="pl-k">./</span>array<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">669</span>
           <span class="pl-c1">eval</span>(<span class="pl-k">::</span><span class="pl-c1">Module</span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>) at <span class="pl-k">./</span>boot<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">360</span>
             <span class="pl-c1">eval_user_input</span>(<span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">REPL.REPLBackend</span>) at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span>src<span class="pl-k">/</span>julia<span class="pl-k">-</span>master<span class="pl-k">/</span>usr<span class="pl-k">/</span>share<span class="pl-k">/</span>julia<span class="pl-k">/</span>stdlib<span class="pl-k">/</span>v1.<span class="pl-c1">6</span><span class="pl-k">/</span>REPL<span class="pl-k">/</span>src<span class="pl-k">/</span>REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">139</span>
<span class="pl-k">...</span></pre></div>
<p>The calls that appear on the same line separated by <code>=&gt;</code> represent inlined methods; when you select such a line,
you enter at the final (topmost) call on that line.</p>
<p>By default,</p>
<ul>
<li><code>descend</code> views optimized code without "warn" coloration of types</li>
<li><code>ascend</code> views non-optimized code with "warn" coloration</li>
</ul>
<p>You can toggle between these with <code>o</code> and <code>w</code>.</p>
</article></div>