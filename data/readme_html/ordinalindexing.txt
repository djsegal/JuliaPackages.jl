<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ordinalindexing" class="anchor" aria-hidden="true" href="#ordinalindexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OrdinalIndexing</h1>
<p dir="auto"><a href="https://github.com/jishnub/OrdinalIndexing.jl/actions/workflows/ci.yml"><img src="https://github.com/jishnub/OrdinalIndexing.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">This package exports the constants <code>th</code>, <code>st</code>, <code>nd</code> and <code>rd</code>, that may be multiplied to integers to construct ordinal numbers. These may subsequently be used in indexing.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; 2nd
2nd

julia&gt; n = 2
2

julia&gt; n * th
2nd"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>nd
<span class="pl-c1">2</span>nd

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> n <span class="pl-k">*</span> th
<span class="pl-c1">2</span>nd</pre></div>
<h2 dir="auto"><a id="user-content-how-to-use-the-package" class="anchor" aria-hidden="true" href="#how-to-use-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use the package</h2>
<p dir="auto">This package allows one to index an array by using ordinal numbers, that is the rank of an index rather than its value. This is best explained through an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OrdinalIndexing, OffsetArrays

julia&gt; a = 1:10
1:10

julia&gt; a[2nd]
2

julia&gt; b = OffsetArray(a, -10)
1:10 with indices -9:0

julia&gt; b[2nd]
2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OrdinalIndexing, OffsetArrays

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> a[<span class="pl-c1">2</span>nd]
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(a, <span class="pl-k">-</span><span class="pl-c1">10</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> with indices <span class="pl-k">-</span><span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> b[<span class="pl-c1">2</span>nd]
<span class="pl-c1">2</span></pre></div>
<p dir="auto">In this example, we aceess the <code>2nd</code> index of the array directly, instead of the conventional way to do this: <code>a[begin - 1 + 2]</code>. The general way to access the n-th element of an array using this package is <code>a[n*th]</code>. We may use this in Cartesian indexing as well, for example as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = reshape(1:9, 3, 3)
3×3 reshape(::UnitRange{Int64}, 3, 3) with eltype Int64:
 1  4  7
 2  5  8
 3  6  9

julia&gt; a[2nd, 3rd]
8"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> a[<span class="pl-c1">2</span>nd, <span class="pl-c1">3</span>rd]
<span class="pl-c1">8</span></pre></div>
<p dir="auto">This often makes writing loops over arrays easier. For example, to sum an <code>n x n</code> block of an array starting from the first element, we may use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(a, n) = sum(a[i, j] for i in axes(a, 1)[begin .+ (0:n-1)], j in axes(a,2)[begin .+ (0:n-1)])
f (generic function with 1 method)

julia&gt; f(a, 2)
12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(a, n) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(a[i, j] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">axes</span>(a, <span class="pl-c1">1</span>)[<span class="pl-c1">begin</span> <span class="pl-k">.+</span> (<span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>)], j <span class="pl-k">in</span> <span class="pl-c1">axes</span>(a,<span class="pl-c1">2</span>)[<span class="pl-c1">begin</span> <span class="pl-k">.+</span> (<span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>)])
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a, <span class="pl-c1">2</span>)
<span class="pl-c1">12</span></pre></div>
<p dir="auto">Using this package, we may express the function as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; g(a, n) = sum(a[i, j] for i in (1:n)th, j in (1:n)th)
g (generic function with 1 method)

julia&gt; g(a, 2)
12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">g</span>(a, n) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(a[i, j] <span class="pl-k">for</span> i <span class="pl-k">in</span> (<span class="pl-c1">1</span><span class="pl-k">:</span>n)th, j <span class="pl-k">in</span> (<span class="pl-c1">1</span><span class="pl-k">:</span>n)th)
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(a, <span class="pl-c1">2</span>)
<span class="pl-c1">12</span></pre></div>
<p dir="auto">This works correctly for <code>OffsetArrays</code> as well:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; b = OffsetArray(a, -10, -20);

julia&gt; f(a, 2) == g(a, 2)
true"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(a, <span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-k">-</span><span class="pl-c1">20</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">g</span>(a, <span class="pl-c1">2</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">We may also index into the axes first, instead of indexing into the array directly, which will be faster:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; h(a, n) = sum(a[i, j] for i in axes(a, 1)[(1:n)th], j in axes(a,2)[(1:n)th])
h (generic function with 1 method)

julia&gt; a = collect(reshape(1:100^2, 100, 100));

julia&gt; @btime f($a, 50)
  3.599 μs (0 allocations: 0 bytes)
6188750

julia&gt; @btime g($a, 50)
  4.655 μs (0 allocations: 0 bytes)
6188750

julia&gt; @btime h($a, 50)
  3.615 μs (0 allocations: 0 bytes)
6188750

julia&gt; b = OffsetArray(a, -10, -20);

julia&gt; f(b, 50) == g(b, 50) == h(b, 50)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">h</span>(a, n) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(a[i, j] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">axes</span>(a, <span class="pl-c1">1</span>)[(<span class="pl-c1">1</span><span class="pl-k">:</span>n)th], j <span class="pl-k">in</span> <span class="pl-c1">axes</span>(a,<span class="pl-c1">2</span>)[(<span class="pl-c1">1</span><span class="pl-k">:</span>n)th])
h (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">f</span>(<span class="pl-k">$</span>a, <span class="pl-c1">50</span>)
  <span class="pl-c1">3.599</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">6188750</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">g</span>(<span class="pl-k">$</span>a, <span class="pl-c1">50</span>)
  <span class="pl-c1">4.655</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">6188750</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">h</span>(<span class="pl-k">$</span>a, <span class="pl-c1">50</span>)
  <span class="pl-c1">3.615</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">6188750</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(a, <span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-k">-</span><span class="pl-c1">20</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(b, <span class="pl-c1">50</span>) <span class="pl-k">==</span> <span class="pl-c1">g</span>(b, <span class="pl-c1">50</span>) <span class="pl-k">==</span> <span class="pl-c1">h</span>(b, <span class="pl-c1">50</span>)
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package isn't registered yet, so install it using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.pkg&quot;add https://github.com/jishnub/OrdinalIndexing.jl/&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/jishnub/OrdinalIndexing.jl/<span class="pl-pds">"</span></span></pre></div>
</article></div>