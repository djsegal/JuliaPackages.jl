<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sgp4jl" class="anchor" aria-hidden="true" href="#sgp4jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SGP4.jl</h1>
<p><a href="https://travis-ci.org/crbinz/SGP4.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f6ef8d0831bfefda84c513638455e765eabfbff5/68747470733a2f2f7472617669732d63692e6f72672f637262696e7a2f534750342e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/crbinz/SGP4.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><em>NOTE</em>: Consider using the pure-julia SGP4 implementation in <a href="https://github.com/JuliaSpace/SatelliteToolbox.jl#sgp4">SatelliteToolbox.jl</a>.</p>
<p>This package enables satellite orbit propagation using the <a href="https://en.wikipedia.org/wiki/Simplified_perturbations_models" rel="nofollow">SGP4</a> models, given the satellites two-line element set (<a href="http://www.celestrak.com/NORAD/documentation/tle-fmt.asp" rel="nofollow">TLE</a>). For now, this is a simple wrapper of <a href="https://github.com/brandon-rhodes/python-sgp4">python-sgp4</a> using <a href="https://github.com/stevengj/PyCall.jl">PyCall.jl</a>. There are several small changes from <code>python-sgp4</code>:</p>
<ol>
<li>
<p>Gravity coefficients are loaded into a <code>GravityModel</code> type. For instance, to load the WGS-72 coefficients, just do <code>GravityModel("wgs72")</code>. The other two options are "wgs72old" and "wgs84".</p>
</li>
<li>
<p>Propagation is a standalone function, as opposed to a <code>satellite</code> member function. So, propagation is accomplished by <code>propagate( sat, year, month, day, hour, min, sec)</code>.</p>
</li>
</ol>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Following the example given <a href="https://pypi.python.org/pypi/sgp4/" rel="nofollow">here</a>, the TEME position and velocity for Vanguard 1 at 12:50:19 on 29 June 2000 may be calculated by:</p>
<pre><code>using SGP4
line1 = "1 00005U 58002B   00179.78495062  .00000023  00000-0  28098-4 0  4753"
line2 = "2 00005  34.2682 348.7242 1859667 331.7664  19.3264 10.82419157413667"
wgs72 = GravityModel("wgs72")
satellite = twoline2rv(line1, line2, wgs72)
(position, velocity) = propagate(satellite, 2000, 6, 29, 12, 50, 19)
</code></pre>
<p><code>satellite</code> attributes, such as the TLE epoch, may be accessed as <code>satellite[:epoch]</code>.</p>
<p>You can also generate an ephemeris, given a TLE, start date/time, stop date/time, and time step:</p>
<pre><code>(positions, velocities) = propagate(satellite, Dates.DateTime("2000-06-29T12:50:19.000"), Dates.DateTime("2000-06-30T12:50:19.000"), Dates.Second(60))
</code></pre>
<p>For more examples, see <code>test/runtests.jl</code>.</p>
<p>For other documentation, see <a href="https://pypi.python.org/pypi/sgp4/" rel="nofollow">this page</a>.</p>
</article></div>