<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-circulararraybuffers" class="anchor" aria-hidden="true" href="#circulararraybuffers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CircularArrayBuffers</h1>
<p dir="auto"><a href="https://github.com/JuliaReinforcementLearning/CircularArrayBuffers.jl/actions"><img src="https://github.com/JuliaReinforcementLearning/CircularArrayBuffers.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><code>CircularArrayBuffers.jl</code> is a small package to wrap an <code>AbstractArray</code> as a buffer along the last dimension. The main benefit compared to <a href="https://juliacollections.github.io/DataStructures.jl/latest/circ_buffer/" rel="nofollow"><code>CircularBuffer</code></a> in <a href="https://github.com/JuliaCollections/DataStructures.jl"><code>DataStructures.jl</code></a> is that the view of consecutive elements is a <code>SubArray</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CircularArrayBuffers

julia&gt; names(CircularArrayBuffers)
5-element Array{Symbol,1}:
 :CircularArrayBuffer
 :CircularArrayBuffers
 :CircularVectorBuffer
 :capacity
 :isfull

julia&gt; a = CircularArrayBuffer(rand(2,3))
2×3 CircularArrayBuffer{Float64,2}:
 0.0510714  0.0260738  0.0245707
 0.856257   0.571643   0.0189365

julia&gt; b = CircularArrayBuffer{Float64}(2,3)
2×0 CircularArrayBuffer{Float64,2}

julia&gt; push!(b, rand(2))
2×1 CircularArrayBuffer{Float64,2}:
 0.4215856115651755
 0.5485806794787502

julia&gt; push!(b, rand(2))
2×2 CircularArrayBuffer{Float64,2}:
 0.421586  0.640501
 0.548581  0.774729

julia&gt; push!(b, rand(2))
2×3 CircularArrayBuffer{Float64,2}:
 0.421586  0.640501  0.653054
 0.548581  0.774729  0.902611

julia&gt; push!(b, rand(2))
2×3 CircularArrayBuffer{Float64,2}:
 0.640501  0.653054  0.640373
 0.774729  0.902611  0.227435

julia&gt; pop!(b)
2-element view(::CircularArrayBuffer{Float64,2}, :, 3) with eltype Float64:
 0.6403725468830439
 0.22743495787074597

julia&gt; b
2×2 CircularArrayBuffer{Float64,2}:
 0.640501  0.653054
 0.774729  0.902611

julia&gt; size(b)
(2, 2)

julia&gt; capacity(b)
3

julia&gt; isfull(b)
false

julia&gt; push!(b, rand(2))
2×3 CircularArrayBuffer{Float64,2}:
 0.640501  0.653054  0.885887
 0.774729  0.902611  0.0332439

julia&gt; isfull(b)
true

julia&gt; eltype(b)
Float64"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CircularArrayBuffers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">names</span>(CircularArrayBuffers)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Symbol,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:CircularArrayBuffer</span>
 <span class="pl-c1">:CircularArrayBuffers</span>
 <span class="pl-c1">:CircularVectorBuffer</span>
 <span class="pl-c1">:capacity</span>
 <span class="pl-c1">:isfull</span>

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">CircularArrayBuffer</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0510714</span>  <span class="pl-c1">0.0260738</span>  <span class="pl-c1">0.0245707</span>
 <span class="pl-c1">0.856257</span>   <span class="pl-c1">0.571643</span>   <span class="pl-c1">0.0189365</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">CircularArrayBuffer</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">0</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(b, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.4215856115651755</span>
 <span class="pl-c1">0.5485806794787502</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(b, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.421586</span>  <span class="pl-c1">0.640501</span>
 <span class="pl-c1">0.548581</span>  <span class="pl-c1">0.774729</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(b, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.421586</span>  <span class="pl-c1">0.640501</span>  <span class="pl-c1">0.653054</span>
 <span class="pl-c1">0.548581</span>  <span class="pl-c1">0.774729</span>  <span class="pl-c1">0.902611</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(b, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.640501</span>  <span class="pl-c1">0.653054</span>  <span class="pl-c1">0.640373</span>
 <span class="pl-c1">0.774729</span>  <span class="pl-c1">0.902611</span>  <span class="pl-c1">0.227435</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop!</span>(b)
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">CircularArrayBuffer{Float64,2}</span>, :, <span class="pl-c1">3</span>) with eltype Float64<span class="pl-k">:</span>
 <span class="pl-c1">0.6403725468830439</span>
 <span class="pl-c1">0.22743495787074597</span>

julia<span class="pl-k">&gt;</span> b
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.640501</span>  <span class="pl-c1">0.653054</span>
 <span class="pl-c1">0.774729</span>  <span class="pl-c1">0.902611</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(b)
(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">capacity</span>(b)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isfull</span>(b)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(b, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> CircularArrayBuffer{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.640501</span>  <span class="pl-c1">0.653054</span>  <span class="pl-c1">0.885887</span>
 <span class="pl-c1">0.774729</span>  <span class="pl-c1">0.902611</span>  <span class="pl-c1">0.0332439</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isfull</span>(b)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eltype</span>(b)
Float64</pre></div>
</article></div>