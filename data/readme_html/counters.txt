<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-counters" class="anchor" aria-hidden="true" href="#counters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Counters</h1>
<p><a href="https://travis-ci.org/scheinerman/Counters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/25ded5664f54747df29d15e705c75c50a0ffac4d/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f436f756e746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/Counters.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/Counters.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/66b9a05eb9f0c98ec051652e6c4598a0292d9414/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f436f756e746572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/Counters.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/Counters.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/95efefb0479884aafb5ac8dd1c54925c4da151c4/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f436f756e746572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/Counters.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>We often want to count things and a way to do that is to create a dictionary
that maps objects to their counts. A <code>Counter</code> object simplifies that
process. Say we want to count values of type <code>String</code>. We would
create a counter for that type like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{String}</span>()
Counter{String} with <span class="pl-c1">0</span> entries</pre></div>
<p>The two primary operations for a <code>Counter</code> are value increment and
value retrieval. To increment the value of a counter we do this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c[<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span></pre></div>
<p>To access the count, we use square brackets:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c[<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> c[<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>]
<span class="pl-c1">0</span></pre></div>
<p>Notice that we need not worry about whether or not a key is
already known to the <code>Counter</code>. If presented with an unknown key,
the <code>Counter</code> assumes its value is <code>0</code>.</p>
<p>A <code>Counter</code> may be assigned to like this <code>c["alpha"]=4</code> but
the more likely use case is <code>c["bravo"]+=1</code> invoked each
time a value, such as <code>"bravo"</code> is encountered.</p>
<h3><a id="user-content-counting-the-elements-of-a-list" class="anchor" aria-hidden="true" href="#counting-the-elements-of-a-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Counting the elements of a list</h3>
<p>The function <code>counter</code> (lowercase 'c') counts the element of a list/array
or set. The multiplicity of an element is the number of times it
appears in the list.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [ <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span> ];

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">counter</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">showall</span>(C)
Counter{String} with these nonzero values<span class="pl-k">:</span>
alpha <span class="pl-k">==&gt;</span> <span class="pl-c1">2</span>
bravo <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
gamma <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">counter</span>(<span class="pl-c1">eye</span>(<span class="pl-c1">3</span>))
SimpleTools<span class="pl-k">.</span>Counter{Float64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span></pre></div>
<h3><a id="user-content-addition-of-counters" class="anchor" aria-hidden="true" href="#addition-of-counters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Addition of counters</h3>
<p>If <code>c</code> and <code>d</code> are counters (of the same type of object) their sum
<code>c+d</code> creates a new counter by adding the values in <code>c</code> and <code>d</code>. That
is, if <code>a=c+d</code> and <code>k</code> is any key, then <code>a[k]</code> equals <code>c[k]+d[k]</code>.</p>
<h3><a id="user-content-incrementing" class="anchor" aria-hidden="true" href="#incrementing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Incrementing</h3>
<p>To increment the count of an item <code>x</code> in a counter <code>c</code> we may either
use <code>c[x]+=1</code> or the increment function like this: <code>incr!(c,x)</code>.</p>
<p>The increment function <code>incr!</code> is more useful for incrementing a
collection of items. Use <code>incr!(c,items)</code> to add 1 to the count
for each element held in <code>items</code>. If an element is present in <code>items</code>
multiple times, its count is incremented for each occurrence.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
SimpleTools<span class="pl-k">.</span>Counter{Int64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> items <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">incr!</span>(c,items)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">showall</span>(c)
Counter{Int64} with these nonzero values<span class="pl-k">:</span>
Counter{Int64} with these nonzero values<span class="pl-k">:</span>
<span class="pl-c1">1</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">3</span>
<span class="pl-c1">2</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">2</span>
<span class="pl-c1">3</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
<span class="pl-c1">4</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span></pre></div>
<p>In addition, <code>incr!</code> may be used to increment one counter
by the amount held in another. Note that it's the first argument <code>c</code>
that gets changed; there is no effect on the second argument <code>d</code>.</p>
<p><strong>Note</strong>: <code>incr!(c,d)</code> and <code>c += d</code> have the same effect, but the first
is more efficient.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>();

julia<span class="pl-k">&gt;</span> d[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>;;

julia<span class="pl-k">&gt;</span> d[<span class="pl-c1">5</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">incr!</span>(c,d)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">showall</span>(c)
Counter{Int64} with these nonzero values<span class="pl-k">:</span>
<span class="pl-c1">1</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">4</span>
<span class="pl-c1">2</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">2</span>
<span class="pl-c1">3</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
<span class="pl-c1">4</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
<span class="pl-c1">5</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span></pre></div>
<h3><a id="user-content-more-functions" class="anchor" aria-hidden="true" href="#more-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>More functions</h3>
<ul>
<li><code>sum(c)</code> returns the sum of the values in <code>c</code>; that is, the total
of all the counts.</li>
<li><code>length(c)</code> returns the number of values held in <code>c</code>. Note that
this might include objects with value <code>0</code>.</li>
<li><code>nnz(c)</code> returns the number of nonzero values held
in <code>c</code>.</li>
<li><code>keys(c)</code> returns an iterator for the keys held by <code>c</code>.</li>
<li><code>values(c)</code> returns an iterator for the values held by <code>c</code>.</li>
<li><code>showall(c)</code> gives a print out of all the keys and their nonzero
values in <code>c</code>.</li>
<li><code>clean!(c)</code> removes all keys from <code>c</code> whose value is <code>0</code>. This
won't change its behavior, but will free up some memory.</li>
</ul>
<p>In addition, we can convert a <code>Counter</code> into a one-dimensional
array in which each element appears with its appropriate multiplicity
using <code>collect</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
SimpleTools<span class="pl-k">.</span>Counter{Int64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">5</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-k">-</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(C)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">3</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(C))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">3</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span>
  <span class="pl-c1">5</span></pre></div>
<h3><a id="user-content-average-value" class="anchor" aria-hidden="true" href="#average-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Average value</h3>
<p>If the objects counted in <code>C</code> are numbers, then we compute the weighted
average of those numbers with <code>mean(C)</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
SimpleTools<span class="pl-k">.</span>Counter{Int64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">7</span>
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mean</span>(C)
<span class="pl-c1">2.7</span></pre></div>
<h3><a id="user-content-hashing" class="anchor" aria-hidden="true" href="#hashing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hashing</h3>
<p><code>hash(C::Counter)</code> returns a hash value for the <code>C</code>. Note that
<code>clean!</code> is applied to <code>C</code> before computing the hash. This is
done to ensure that equal counters give the same hash value.</p>
<p>May also be invoked as <code>hash(C::Counter, h::Uint)</code>.</p>
<h3><a id="user-content-its-associative" class="anchor" aria-hidden="true" href="#its-associative"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>It's <code>Associative</code></h3>
<p>A <code>Counter</code> is a subtype of <code>Associative</code> and therefore we can
use methods such as <code>keys</code> and/or <code>values</code> to get iterators to
those items.</p>
<h3><a id="user-content-csv-printing" class="anchor" aria-hidden="true" href="#csv-printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSV Printing</h3>
<p>The function <code>csv_print</code> writes a <code>Counter</code> to the screen in
comma-separated format. This can be readily used for importing
into a spreadsheet.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Float64}</span>()
SimpleTools<span class="pl-k">.</span>Counter{Float64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">3.4</span>]<span class="pl-k">=</span><span class="pl-c1">10</span>
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">2.2</span>]<span class="pl-k">=</span><span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">csv_print</span>(C)
<span class="pl-c1">2.2</span>, <span class="pl-c1">3</span>
<span class="pl-c1">3.4</span>, <span class="pl-c1">10</span></pre></div>
<h3><a id="user-content-counting-in-parallel" class="anchor" aria-hidden="true" href="#counting-in-parallel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Counting in parallel</h3>
<p>See the <code>parallel-example</code> directory for an illustration of how to
use <code>Counters</code> in multiple parallel processes.</p>
</article></div>