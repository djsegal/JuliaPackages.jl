<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-counters" class="anchor" aria-hidden="true" href="#counters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Counters</h1>
<p dir="auto"><a href="https://travis-ci.com/scheinerman/Counters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ac805ba9c795fabf6468be7afcb1c0f5ad310d1f8ee9863cdde8c0936bb749c0/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f436f756e746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/Counters.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">We often want to count things and a way to do that is to create a dictionary
that maps objects to their counts. A <code>Counter</code> object simplifies that
process. Say we want to count values of type <code>String</code>. We would
create a counter for that type like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = Counter{String}()
Counter{String} with 0 entries"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{String}</span>()
Counter{String} with <span class="pl-c1">0</span> entries</pre></div>
<p dir="auto">The two primary operations for a <code>Counter</code> are value increment and
value retrieval. To increment the value of a counter we do this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c[&quot;hello&quot;] += 1
1"><pre>julia<span class="pl-k">&gt;</span> c[<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span></pre></div>
<p dir="auto">To access the count, we use square brackets:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c[&quot;hello&quot;]
1

julia&gt; c[&quot;bye&quot;]
0"><pre>julia<span class="pl-k">&gt;</span> c[<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> c[<span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>]
<span class="pl-c1">0</span></pre></div>
<p dir="auto">Notice that we need not worry about whether or not a key is
already known to the <code>Counter</code>. If presented with an unknown key,
the <code>Counter</code> assumes its value is <code>0</code>.</p>
<p dir="auto">A <code>Counter</code> may be assigned to like this <code>c["alpha"]=4</code> but
the more likely use case is <code>c["bravo"]+=1</code> invoked each
time a value, such as <code>"bravo"</code> is encountered.</p>
<h3 dir="auto"><a id="user-content-counting-the-elements-of-a-list" class="anchor" aria-hidden="true" href="#counting-the-elements-of-a-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Counting the elements of a list</h3>
<p dir="auto">The function <code>counter</code> (lowercase 'c') counts the element of a list/array
or set. The multiplicity of an element is the number of times it
appears in the list.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = [ &quot;alpha&quot;, &quot;bravo&quot;, &quot;alpha&quot;, &quot;gamma&quot; ];

julia&gt; C = counter(A);

julia&gt; C
Counter{String} with these nonzero values:
alpha ==&gt; 2
bravo ==&gt; 1
gamma ==&gt; 1"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [ <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span> ];

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">counter</span>(A);

julia<span class="pl-k">&gt;</span> C
Counter{String} with these nonzero values<span class="pl-k">:</span>
alpha <span class="pl-k">==&gt;</span> <span class="pl-c1">2</span>
bravo <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
gamma <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span></pre></div>
<h3 dir="auto"><a id="user-content-addition-of-counters" class="anchor" aria-hidden="true" href="#addition-of-counters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Addition of counters</h3>
<p dir="auto">If <code>c</code> and <code>d</code> are counters (of the same type of object) their sum
<code>c+d</code> creates a new counter by adding the values in <code>c</code> and <code>d</code>. That
is, if <code>a=c+d</code> and <code>k</code> is any key, then <code>a[k]</code> equals <code>c[k]+d[k]</code>.</p>
<h3 dir="auto"><a id="user-content-incrementing" class="anchor" aria-hidden="true" href="#incrementing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Incrementing</h3>
<p dir="auto">To increment the count of an item <code>x</code> in a counter <code>c</code> we may either
use <code>c[x]+=1</code> or the increment function like this: <code>incr!(c,x)</code>.</p>
<p dir="auto">The increment function <code>incr!</code> is more useful for incrementing a
collection of items. Use <code>incr!(c,items)</code> to add 1 to the count
for each element held in <code>items</code>. If an element is present in <code>items</code>
multiple times, its count is incremented for each occurrence.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = Counter{Int}()
Counter{Int64} with 0 entries

julia&gt; items = [1,2,3,4,1,2,1]
7-element Array{Int64,1}:
 1
 2
 3
 4
 1
 2
 1

julia&gt; incr!(c,items)

julia&gt; c
Counter{Int64} with these nonzero values:
1 ==&gt; 3
2 ==&gt; 2
3 ==&gt; 1
4 ==&gt; 1"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
Counter{Int64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> items <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">incr!</span>(c,items)

julia<span class="pl-k">&gt;</span> c
Counter{Int64} with these nonzero values<span class="pl-k">:</span>
<span class="pl-c1">1</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">3</span>
<span class="pl-c1">2</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">2</span>
<span class="pl-c1">3</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
<span class="pl-c1">4</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">In addition, <code>incr!</code> may be used to increment one counter
by the amount held in another. Note that it's the first argument <code>c</code>
that gets changed; there is no effect on the second argument <code>d</code>.</p>
<p dir="auto"><strong>Note</strong>: <code>incr!(c,d)</code> and <code>c += d</code> have the same effect, but the first
is more efficient.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = Counter{Int}()
Counter{Int64} with these nonzero values:

julia&gt; items = [1,2,3,4,1,2,1]
7-element Vector{Int64}:
 1
 2
 3
 4
 1
 2
 1

julia&gt; incr!(c,items)

julia&gt; c
Counter{Int64} with these nonzero values:
1 ==&gt; 3
2 ==&gt; 2
3 ==&gt; 1
4 ==&gt; 1"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
Counter{Int64} with these nonzero values<span class="pl-k">:</span>

julia<span class="pl-k">&gt;</span> items <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">incr!</span>(c,items)

julia<span class="pl-k">&gt;</span> c
Counter{Int64} with these nonzero values<span class="pl-k">:</span>
<span class="pl-c1">1</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">3</span>
<span class="pl-c1">2</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">2</span>
<span class="pl-c1">3</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span>
<span class="pl-c1">4</span> <span class="pl-k">==&gt;</span> <span class="pl-c1">1</span></pre></div>
<h3 dir="auto"><a id="user-content-more-functions" class="anchor" aria-hidden="true" href="#more-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More functions</h3>
<ul dir="auto">
<li><code>sum(c)</code> returns the sum of the values in <code>c</code>; that is, the total
of all the counts.</li>
<li><code>length(c)</code> returns the number of values held in <code>c</code>. Note that
this might include objects with value <code>0</code>.</li>
<li><code>nnz(c)</code> returns the number of nonzero values held
in <code>c</code>.</li>
<li><code>keys(c)</code> returns an iterator for the keys held by <code>c</code>.</li>
<li><code>values(c)</code> returns an iterator for the values held by <code>c</code>.</li>
<li><code>display(c)</code> gives a print out of all the keys and their nonzero
values in <code>c</code>.</li>
<li><code>clean!(c)</code> removes all keys from <code>c</code> whose value is <code>0</code>. This
won't change its behavior, but will free up some memory.</li>
</ul>
<h3 dir="auto"><a id="user-content-listing-elements" class="anchor" aria-hidden="true" href="#listing-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Listing elements</h3>
<p dir="auto">We can convert a <code>Counter</code> into a one-dimensional
array in which each element appears with its appropriate multiplicity
using <code>collect</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = Counter{Int}()
Counter{Int64} with 0 entries

julia&gt; C[3] = 4
4

julia&gt; C[5] = 0
0

julia&gt; C[-2] = 2
2

julia&gt; collect(C)
6-element Array{Int64,1}:
  3
  3
  3
  3
 -2
 -2
"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
Counter{Int64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">5</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-k">-</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(C)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">3</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span>
</pre></div>
<p dir="auto">The function <code>collect_by_counts</code> lists the elements of a <code>Counter</code> once each,
but in decreasing order of their counts. That is, the element with the highest count
is first, the element with the second highest count is second, and so forth.
Elements whose count is zero are not listed.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; collect_by_counts(C)
2-element Vector{Int64}:
  3
 -2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect_by_counts</span>(C)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">3</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span></pre></div>
<h3 dir="auto"><a id="user-content-average-value" class="anchor" aria-hidden="true" href="#average-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Average value</h3>
<p dir="auto">If the objects counted in <code>C</code> are numbers, then we compute the weighted
average of those numbers with <code>mean(C)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = Counter{Int}()
Counter{Int64} with 0 entries

julia&gt; C[2] = 3
3

julia&gt; C[3] = 7
7

julia&gt; mean(C)
2.7"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Int}</span>()
Counter{Int64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">7</span>
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mean</span>(C)
<span class="pl-c1">2.7</span></pre></div>
<h3 dir="auto"><a id="user-content-hashing" class="anchor" aria-hidden="true" href="#hashing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hashing</h3>
<p dir="auto"><code>hash(C::Counter)</code> returns a hash value for the <code>C</code>. Note that
<code>clean!</code> is applied to <code>C</code> before computing the hash. This is
done to ensure that equal counters give the same hash value.</p>
<p dir="auto">May also be invoked as <code>hash(C::Counter, h::Uint)</code>.</p>
<h3 dir="auto"><a id="user-content-its-associative" class="anchor" aria-hidden="true" href="#its-associative"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>It's <code>Associative</code></h3>
<p dir="auto">A <code>Counter</code> is a subtype of <code>Associative</code> and therefore we can
use methods such as <code>keys</code> and/or <code>values</code> to get iterators to
those items.</p>
<h3 dir="auto"><a id="user-content-csv-printing" class="anchor" aria-hidden="true" href="#csv-printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CSV Printing</h3>
<p dir="auto">The function <code>csv_print</code> writes a <code>Counter</code> to the screen in
comma-separated format. This can be readily used for importing
into a spreadsheet.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = Counter{Float64}()
Counter{Float64} with 0 entries

julia&gt; C[3.4]=10
10

julia&gt; C[2.2]=3
3

julia&gt; csv_print(C)
2.2, 3
3.4, 10"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Counter</span><span class="pl-c1">{Float64}</span>()
Counter{Float64} with <span class="pl-c1">0</span> entries

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">3.4</span>]<span class="pl-k">=</span><span class="pl-c1">10</span>
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> C[<span class="pl-c1">2.2</span>]<span class="pl-k">=</span><span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">csv_print</span>(C)
<span class="pl-c1">2.2</span>, <span class="pl-c1">3</span>
<span class="pl-c1">3.4</span>, <span class="pl-c1">10</span></pre></div>
<h3 dir="auto"><a id="user-content-counting-in-parallel" class="anchor" aria-hidden="true" href="#counting-in-parallel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Counting in parallel</h3>
<p dir="auto">See the <code>parallel-example</code> directory for an illustration of how to
use <code>Counters</code> in multiple parallel processes.</p>
</article></div>