<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-csyntax" class="anchor" aria-hidden="true" href="#csyntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSyntax</h1>
<p><a href="https://travis-ci.com/Gnimuc/CSyntax.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52264094128a12bc3f5a6dca519cbc61bc97e7d8/68747470733a2f2f7472617669732d63692e636f6d2f476e696d75632f4353796e7461782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Gnimuc/CSyntax.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/Gnimuc/CSyntax-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/54f6af4a590430caeba5ea473343f9f7550e8cc9/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f476e696d75632f4353796e7461782e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/Gnimuc/CSyntax.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Gnimuc/CSyntax.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f65a1e4b72d5b74c760ac48df9084ceac5597d0d/68747470733a2f2f636f6465636f762e696f2f67682f476e696d75632f4353796e7461782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/Gnimuc/CSyntax.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package provides several macros for making life easier when translating C code to Julia.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<pre><code>pkg&gt; add CSyntax
</code></pre>
<h2><a id="user-content-submodules" class="anchor" aria-hidden="true" href="#submodules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Submodules</h2>
<h3><a id="user-content-cref" class="anchor" aria-hidden="true" href="#cref"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CRef</h3>
<p>This module provides a macro <code>@cref</code>/<code>@c</code> for emulating C's <code>&amp;</code>(address) operator:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CRef

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(x)
           x[] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
           <span class="pl-k">return</span> x
       <span class="pl-k">end</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cref</span> <span class="pl-c1">foo</span>(<span class="pl-k">&amp;</span>x)
Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">1</span></pre></div>
<p>It's very useful when calling C-bindings from Julia. Comparing the following Julia code</p>
<div class="highlight highlight-source-julia"><pre>vbo <span class="pl-k">=</span> <span class="pl-c1">GLuint</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">@c</span> <span class="pl-c1">glGenBuffers</span>(<span class="pl-c1">1</span>, <span class="pl-k">&amp;</span>vbo)
<span class="pl-c1">glBindBuffer</span>(GL_ARRAY_BUFFER, vbo)
<span class="pl-c1">glBufferData</span>(GL_ARRAY_BUFFER, <span class="pl-c1">9</span> <span class="pl-k">*</span> <span class="pl-c1">sizeof</span>(GLfloat), points, GL_STATIC_DRAW)</pre></div>
<p>to</p>
<div class="highlight highlight-source-c"><pre>GLuint vbo;
<span class="pl-en">glGenBuffers</span>(<span class="pl-c1">1</span>, &amp;vbo);
<span class="pl-en">glBindBuffer</span>(GL_ARRAY_BUFFER, vbo);
<span class="pl-en">glBufferData</span>(GL_ARRAY_BUFFER, <span class="pl-c1">9</span> * <span class="pl-k">sizeof</span>(GLfloat), points, GL_STATIC_DRAW);</pre></div>
<p>they're nearly identical aside from the <code>@c</code> macro. Without this, one need to manually edit the code at least 3 more times and life will be quickly burning in the hell:</p>
<div class="highlight highlight-source-julia"><pre>vboID <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{GLuint}</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">glGenBuffers</span>(<span class="pl-c1">1</span>, vboID)
<span class="pl-c1">glBindBuffer</span>(GL_ARRAY_BUFFER, vboID[])
<span class="pl-c"><span class="pl-c">#</span> errors are waiting for you unless you dereference vboID correctly in every place hereafter</span></pre></div>
<p>Note, everything after <code>&amp;</code> will be treated as scalar except one dimensional arrays indexing in which case the corresponding pointer address will be retrieved, for example:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">@c</span> <span class="pl-c1">foo</span>(a, b, <span class="pl-k">&amp;</span>A[n]) <span class="pl-c"><span class="pl-c">#</span> ==&gt; foo(a, b, pointer(A) + n * Core.sizeof(eltype(A)))</span></pre></div>
<p>but</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">@c</span> <span class="pl-c1">foo</span>(a, b, <span class="pl-k">&amp;</span>A)
<span class="pl-c"><span class="pl-c">#</span> this is not array indexing, so the result is</span>
<span class="pl-c"><span class="pl-c">#</span> A_cref = Ref(A)</span>
<span class="pl-c"><span class="pl-c">#</span> foo(a, b, A_cref)</span>
<span class="pl-c"><span class="pl-c">#</span> A = A_cref[]</span></pre></div>
<h3><a id="user-content-cstatic" class="anchor" aria-hidden="true" href="#cstatic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CStatic</h3>
<p>This submodule provides a <code>@cstatic</code> macro for emulating C's static syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>()
    <span class="pl-c1">@cstatic</span> i<span class="pl-k">=</span><span class="pl-c1">0</span> <span class="pl-k">begin</span>
        <span class="pl-k">for</span> n <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
            i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>vs</p>
<div class="highlight highlight-source-c"><pre><span class="pl-k">int</span> <span class="pl-en">foo</span>(<span class="pl-k">void</span>) {
    <span class="pl-k">static</span> <span class="pl-k">int</span> i = <span class="pl-c1">0</span>;
    <span class="pl-k">for</span> (<span class="pl-k">int</span> n = <span class="pl-c1">0</span>; n &lt; <span class="pl-c1">10</span>; n++) {
        i++;
    }
    <span class="pl-k">return</span> i;
}</pre></div>
<p><code>@cstatic</code> will return a tuple of current state of the input arguments, but note that jumping
out from the <code>@cstatic</code> block (e.g. <code>return</code>, <code>goto</code>, etc.) is currently not supported,
state changes before jumping will be lost.</p>
<h3><a id="user-content-cfor" class="anchor" aria-hidden="true" href="#cfor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CFor</h3>
<p>This submodule provides a <code>@cfor</code> macro for emulating C's for-loops syntax:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CFor

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cfor</span> i<span class="pl-k">=</span><span class="pl-c1">0</span> i<span class="pl-k">&lt;</span><span class="pl-c1">10</span> i<span class="pl-k">+=</span><span class="pl-c1">1</span> <span class="pl-k">begin</span>
           <span class="pl-k">global</span> x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">10</span>

<span class="pl-c"><span class="pl-c">#</span> @cfor with @++</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">:</span> @<span class="pl-k">++</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cfor</span> i<span class="pl-k">=</span><span class="pl-c1">0</span> i<span class="pl-k">&lt;</span><span class="pl-c1">10</span> @<span class="pl-k">++</span>(i) <span class="pl-k">begin</span>
           i <span class="pl-k">&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>  <span class="pl-c"><span class="pl-c">#</span> well, this is actually illegal in C</span>
           <span class="pl-k">global</span> x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span>
           <span class="pl-k">global</span> j
           <span class="pl-c1">@cfor</span> <span class="pl-c1">nothing</span> (j <span class="pl-k">&gt;</span> <span class="pl-c1">3</span>) j<span class="pl-k">-=</span><span class="pl-c1">1</span> <span class="pl-k">begin</span>
               <span class="pl-k">global</span> x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">23</span></pre></div>
<h3><a id="user-content-cswitch" class="anchor" aria-hidden="true" href="#cswitch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSwitch</h3>
<p>This submodule provides C-like switch statement with the "falling through" behavior.
It is inspired by <a href="https://github.com/dcjones"><code>dcjones</code></a>'s package <a href="https://github.com/dcjones/Switch.jl">Switch.jl</a> which has died out since Julia v0.5. Anyway, it has been resurrected here.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CSwitch

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enum</span> test t<span class="pl-k">=</span><span class="pl-c1">1</span> f<span class="pl-k">=</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> tester <span class="pl-k">=</span> t
t<span class="pl-k">::</span><span class="pl-c1">test</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cswitch</span> tester <span class="pl-k">begin</span>
           <span class="pl-c1">@case</span> t
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
               <span class="pl-k">break</span>
           <span class="pl-c1">@case</span> f
               x <span class="pl-k">=</span> <span class="pl-c1">2</span>
               <span class="pl-k">break</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">1</span></pre></div>
<h3><a id="user-content-cenum" class="anchor" aria-hidden="true" href="#cenum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CEnum</h3>
<p><a href="https://github.com/JuliaInterop/CEnum.jl">CEnum.jl</a> is also integrated in this package.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enum</span> Foo a <span class="pl-k">=</span> <span class="pl-c1">1</span> b <span class="pl-k">=</span> <span class="pl-c1">2</span> c <span class="pl-k">=</span> <span class="pl-c1">1</span>
ERROR<span class="pl-k">:</span> LoadError<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> values <span class="pl-k">for</span> Enum Foo are not unique
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">@enum</span>(<span class="pl-k">::</span><span class="pl-c1">LineNumberNode</span>, <span class="pl-k">::</span><span class="pl-c1">Module</span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">Vararg{Any,N}</span> <span class="pl-k">where</span> N) at <span class="pl-k">./</span>Enums<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">128</span>
in expression starting at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CEnum

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cenum</span>(Bar, d <span class="pl-k">=</span> <span class="pl-c1">1</span>, e <span class="pl-k">=</span> <span class="pl-c1">2</span>, f <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> d <span class="pl-k">==</span> f
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO?</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>@cmacro</code>? how to correctly handle recursive macro expansion rules?</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>@cdo-while</code>? it's very trivial to implement but not very useful I guess</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>@cstar</code>? <code>*</code> aka the so called indirection operator</li>
</ul>
</article></div>