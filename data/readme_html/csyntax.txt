<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-csyntax" class="anchor" aria-hidden="true" href="#csyntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CSyntax</h1>
<p dir="auto"><a href="https://github.com/Gnimuc/CSyntax.jl/actions/workflows/ci.yml"><img src="https://github.com/Gnimuc/CSyntax.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/Gnimuc/CSyntax.jl/actions/workflows/TagBot.yml"><img src="https://github.com/Gnimuc/CSyntax.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Gnimuc/CSyntax.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0be0bd5f0d71c56d8d45150b0b8098af66bfd0415b3e5d11b52b7184695e94b1/68747470733a2f2f636f6465636f762e696f2f67682f476e696d75632f4353796e7461782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/Gnimuc/CSyntax.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides several macros for making life easier when translating C code to Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add CSyntax"><pre class="notranslate"><code>pkg&gt; add CSyntax
</code></pre></div>
<h2 dir="auto"><a id="user-content-submodules" class="anchor" aria-hidden="true" href="#submodules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Submodules</h2>
<h3 dir="auto"><a id="user-content-cref" class="anchor" aria-hidden="true" href="#cref"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CRef</h3>
<p dir="auto">This module provides a macro <code>@cref</code>/<code>@c</code> for emulating C's <code>&amp;</code>(address) operator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CSyntax.CRef

julia&gt; function foo(x)
           x[] += 1
           return x
       end
foo (generic function with 1 method)

julia&gt; x = 0
0

julia&gt; @cref foo(&amp;x)
Base.RefValue{Int64}(1)

julia&gt; x
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CRef

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(x)
           x[] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
           <span class="pl-k">return</span> x
       <span class="pl-k">end</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cref</span> <span class="pl-c1">foo</span>(<span class="pl-k">&amp;</span>x)
Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">1</span></pre></div>
<p dir="auto">It's very useful when calling C-bindings from Julia. Comparing the following Julia code</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="vbo = GLuint(0)
@c glGenBuffers(1, &amp;vbo)
glBindBuffer(GL_ARRAY_BUFFER, vbo)
glBufferData(GL_ARRAY_BUFFER, 9 * sizeof(GLfloat), points, GL_STATIC_DRAW)"><pre>vbo <span class="pl-k">=</span> <span class="pl-c1">GLuint</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">@c</span> <span class="pl-c1">glGenBuffers</span>(<span class="pl-c1">1</span>, <span class="pl-k">&amp;</span>vbo)
<span class="pl-c1">glBindBuffer</span>(GL_ARRAY_BUFFER, vbo)
<span class="pl-c1">glBufferData</span>(GL_ARRAY_BUFFER, <span class="pl-c1">9</span> <span class="pl-k">*</span> <span class="pl-c1">sizeof</span>(GLfloat), points, GL_STATIC_DRAW)</pre></div>
<p dir="auto">to</p>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GLuint vbo;
glGenBuffers(1, &amp;vbo);
glBindBuffer(GL_ARRAY_BUFFER, vbo);
glBufferData(GL_ARRAY_BUFFER, 9 * sizeof(GLfloat), points, GL_STATIC_DRAW);"><pre>GLuint vbo;
<span class="pl-en">glGenBuffers</span>(<span class="pl-c1">1</span>, &amp;vbo);
<span class="pl-en">glBindBuffer</span>(GL_ARRAY_BUFFER, vbo);
<span class="pl-en">glBufferData</span>(GL_ARRAY_BUFFER, <span class="pl-c1">9</span> * <span class="pl-k">sizeof</span>(GLfloat), points, GL_STATIC_DRAW);</pre></div>
<p dir="auto">they're nearly identical aside from the <code>@c</code> macro. Without this, one need to manually edit the code at least 3 more times and life will be quickly burning in the hell:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="vboID = Ref{GLuint}(0)
glGenBuffers(1, vboID)
glBindBuffer(GL_ARRAY_BUFFER, vboID[])
# errors are waiting for you unless you dereference vboID correctly in every place hereafter"><pre>vboID <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{GLuint}</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">glGenBuffers</span>(<span class="pl-c1">1</span>, vboID)
<span class="pl-c1">glBindBuffer</span>(GL_ARRAY_BUFFER, vboID[])
<span class="pl-c"><span class="pl-c">#</span> errors are waiting for you unless you dereference vboID correctly in every place hereafter</span></pre></div>
<p dir="auto">Note, everything after <code>&amp;</code> will be treated as scalar except one dimensional arrays indexing in which case the corresponding pointer address will be retrieved, for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = rand(10)
@c foo(a, b, &amp;A[n]) # ==&gt; foo(a, b, pointer(A) + n * Core.sizeof(eltype(A)))"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">@c</span> <span class="pl-c1">foo</span>(a, b, <span class="pl-k">&amp;</span>A[n]) <span class="pl-c"><span class="pl-c">#</span> ==&gt; foo(a, b, pointer(A) + n * Core.sizeof(eltype(A)))</span></pre></div>
<p dir="auto">but</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = rand(10)
@c foo(a, b, &amp;A)
# this is not array indexing, so the result is
# A_cref = Ref(A)
# foo(a, b, A_cref)
# A = A_cref[]"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">@c</span> <span class="pl-c1">foo</span>(a, b, <span class="pl-k">&amp;</span>A)
<span class="pl-c"><span class="pl-c">#</span> this is not array indexing, so the result is</span>
<span class="pl-c"><span class="pl-c">#</span> A_cref = Ref(A)</span>
<span class="pl-c"><span class="pl-c">#</span> foo(a, b, A_cref)</span>
<span class="pl-c"><span class="pl-c">#</span> A = A_cref[]</span></pre></div>
<h3 dir="auto"><a id="user-content-cstatic" class="anchor" aria-hidden="true" href="#cstatic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CStatic</h3>
<p dir="auto">This submodule provides a <code>@cstatic</code> macro for emulating C's static syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function foo()
    @cstatic i=0 begin
        for n = 1:10
            i += 1
        end
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>()
    <span class="pl-c1">@cstatic</span> i<span class="pl-k">=</span><span class="pl-c1">0</span> <span class="pl-k">begin</span>
        <span class="pl-k">for</span> n <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
            i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">vs</p>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="int foo(void) {
    static int i = 0;
    for (int n = 0; n &lt; 10; n++) {
        i++;
    }
    return i;
}"><pre><span class="pl-k">int</span> <span class="pl-en">foo</span>(<span class="pl-k">void</span>) {
    <span class="pl-k">static</span> <span class="pl-k">int</span> i = <span class="pl-c1">0</span>;
    <span class="pl-k">for</span> (<span class="pl-k">int</span> n = <span class="pl-c1">0</span>; n &lt; <span class="pl-c1">10</span>; n++) {
        i++;
    }
    <span class="pl-k">return</span> i;
}</pre></div>
<p dir="auto"><code>@cstatic</code> will return a tuple of current state of the input arguments, but note that jumping
out from the <code>@cstatic</code> block (e.g. <code>return</code>, <code>goto</code>, etc.) is currently not supported,
state changes before jumping will be lost.</p>
<h3 dir="auto"><a id="user-content-cfor" class="anchor" aria-hidden="true" href="#cfor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CFor</h3>
<p dir="auto">This submodule provides a <code>@cfor</code> macro for emulating C's for-loops syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CSyntax.CFor

julia&gt; x = 0
0

julia&gt; @cfor i=0 i&lt;10 i+=1 begin
           global x += 1
       end

julia&gt; x
10

# @cfor with @++
julia&gt; using CSyntax: @++

julia&gt; @cfor i=0 i&lt;10 @++(i) begin
           i &gt; 5 &amp;&amp; continue  # well, this is actually illegal in C
           global x += 1
       end

julia&gt; x
16

julia&gt; let
           global j
           @cfor nothing (j &gt; 3) j-=1 begin
               global x += 1
           end
       end

julia&gt; x
23"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CFor

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cfor</span> i<span class="pl-k">=</span><span class="pl-c1">0</span> i<span class="pl-k">&lt;</span><span class="pl-c1">10</span> i<span class="pl-k">+=</span><span class="pl-c1">1</span> <span class="pl-k">begin</span>
           <span class="pl-k">global</span> x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">10</span>

<span class="pl-c"><span class="pl-c">#</span> @cfor with @++</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">:</span> @<span class="pl-k">++</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cfor</span> i<span class="pl-k">=</span><span class="pl-c1">0</span> i<span class="pl-k">&lt;</span><span class="pl-c1">10</span> @<span class="pl-k">++</span>(i) <span class="pl-k">begin</span>
           i <span class="pl-k">&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>  <span class="pl-c"><span class="pl-c">#</span> well, this is actually illegal in C</span>
           <span class="pl-k">global</span> x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span>
           <span class="pl-k">global</span> j
           <span class="pl-c1">@cfor</span> <span class="pl-c1">nothing</span> (j <span class="pl-k">&gt;</span> <span class="pl-c1">3</span>) j<span class="pl-k">-=</span><span class="pl-c1">1</span> <span class="pl-k">begin</span>
               <span class="pl-k">global</span> x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">23</span></pre></div>
<h3 dir="auto"><a id="user-content-cswitch" class="anchor" aria-hidden="true" href="#cswitch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CSwitch</h3>
<p dir="auto">This submodule provides C-like switch statement with the "falling through" behavior.
It is inspired by <a href="https://github.com/dcjones"><code>dcjones</code></a>'s package <a href="https://github.com/dcjones/Switch.jl">Switch.jl</a> which has died out since Julia v0.5. Anyway, it has been resurrected here.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CSyntax.CSwitch

julia&gt; @enum test t=1 f=2

julia&gt; tester = t
t::test = 1

julia&gt; @cswitch tester begin
           @case t
               x = 1
               break
           @case f
               x = 2
               break
       end

julia&gt; x
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CSwitch

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enum</span> test t<span class="pl-k">=</span><span class="pl-c1">1</span> f<span class="pl-k">=</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> tester <span class="pl-k">=</span> t
t<span class="pl-k">::</span><span class="pl-c1">test</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cswitch</span> tester <span class="pl-k">begin</span>
           <span class="pl-c1">@case</span> t
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
               <span class="pl-k">break</span>
           <span class="pl-c1">@case</span> f
               x <span class="pl-k">=</span> <span class="pl-c1">2</span>
               <span class="pl-k">break</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">1</span></pre></div>
<h3 dir="auto"><a id="user-content-cenum" class="anchor" aria-hidden="true" href="#cenum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CEnum</h3>
<p dir="auto"><a href="https://github.com/JuliaInterop/CEnum.jl">CEnum.jl</a> is also integrated in this package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @enum Foo a = 1 b = 2 c = 1
ERROR: LoadError: ArgumentError: values for Enum Foo are not unique
Stacktrace:
 [1] @enum(::LineNumberNode, ::Module, ::Any, ::Vararg{Any,N} where N) at ./Enums.jl:128
in expression starting at REPL[12]:1

julia&gt; using CSyntax.CEnum

julia&gt; @cenum(Bar, d = 1, e = 2, f = 1)

julia&gt; d == f
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@enum</span> Foo a <span class="pl-k">=</span> <span class="pl-c1">1</span> b <span class="pl-k">=</span> <span class="pl-c1">2</span> c <span class="pl-k">=</span> <span class="pl-c1">1</span>
ERROR<span class="pl-k">:</span> LoadError<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> values <span class="pl-k">for</span> Enum Foo are not unique
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">@enum</span>(<span class="pl-k">::</span><span class="pl-c1">LineNumberNode</span>, <span class="pl-k">::</span><span class="pl-c1">Module</span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">Vararg{Any,N}</span> <span class="pl-k">where</span> N) at <span class="pl-k">./</span>Enums<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">128</span>
in expression starting at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CSyntax<span class="pl-k">.</span>CEnum

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cenum</span>(Bar, d <span class="pl-k">=</span> <span class="pl-c1">1</span>, e <span class="pl-k">=</span> <span class="pl-c1">2</span>, f <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> d <span class="pl-k">==</span> f
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO?</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>@cmacro</code>? how to correctly handle recursive macro expansion rules?</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>@cdo-while</code>? it's very trivial to implement but not very useful I guess</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>@cstar</code>? <code>*</code> aka the so called indirection operator</li>
</ul>
</article></div>