<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-itensorchemistryjl" class="anchor" aria-hidden="true" href="#itensorchemistryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ITensorChemistry.jl</h1>
<p dir="auto"><a href="https://mtfishman.github.io/ITensorChemistry.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://mtfishman.github.io/ITensorChemistry.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/mtfishman/ITensorChemistry.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/mtfishman/ITensorChemistry.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mtfishman/ITensorChemistry.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5450493f899632943ff985ebd24e187d8c49e489661a10cf23216b4f374ebab6/68747470733a2f2f636f6465636f762e696f2f67682f6d74666973686d616e2f4954656e736f724368656d69737472792e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mtfishman/ITensorChemistry.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The main functionality of this package is outputting a second quantized quantum chemistry Hamiltonian in the molecular orbital basis, given a molecule and atomic orbital basis.</p>
<p dir="auto">Under the hood, the package uses Hartree-Fock implemented in <a href="https://pyscf.org/" rel="nofollow">PySCF</a>, which we call using <a href="https://cjdoris.github.io/PythonCall.jl/stable/" rel="nofollow">PythonCall.jl</a>, to obtain the molecular orbital basis and one-electron and two-electron integrals.</p>
<p dir="auto">The main output is an <code>OpSum</code> from <a href="https://itensor.github.io/ITensors.jl/dev/" rel="nofollow">ITensors.jl</a>, which is a representation of the second quantized Hamiltonian. This can be converted into a variety of other formats, such as a matrix product operator (MPO) to run DMRG, quantum circuit, full matrix representation for exact diagonalization (ED) for full configuration interaction (FCI) calculations, etc.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(; url=&quot;https://github.com/mtfishman/ITensorChemistry.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(; url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/mtfishman/ITensorChemistry.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-dissociation-energies" class="anchor" aria-hidden="true" href="#dissociation-energies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dissociation energies</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ITensors
using ITensorChemistry
using Plots

function energy_at_bond(r)
  # define molecule geometry
  molecule = Molecule([(&quot;H&quot;, 0.0, 0.0, 0.0), 
                       (&quot;H&quot;,   r, 0.0, 0.0)])
  
  # build electronic hamiltonian and solve HF
  hf = molecular_orbital_hamiltonian(molecule; basis=&quot;sto-3g&quot;)
  hamiltonian = hf.hamiltonian
  hartree_fock_state = hf.hartree_fock_state
  hartree_fock_energy = hf.hartree_fock_energy

  # hilbert space
  s = siteinds(&quot;Electron&quot;, 2; conserve_qns=true)

  H = MPO(hamiltonian, s)
  
  # initialize MPS to HF state
  ψhf = MPS(s, hartree_fock_state)
  
  # run dmrg
  dmrg_kwargs = (;
    nsweeps=10,
    maxdim=[10,20,30,40,50,100],
    cutoff=1e-8,
    noise=[1e-6, 1e-7, 1e-8, 0.0],
  )
  dmrg_energy, _ = dmrg(H, ψhf; nsweeps=10, outputlevel=0)
  return hartree_fock_energy, dmrg_energy
end

# bond distances
r⃗ = 0.3:0.03:3.0

energies = []
for r in r⃗
  push!(energies, energy_at_bond(r))
end"><pre><span class="pl-k">using</span> ITensors
<span class="pl-k">using</span> ITensorChemistry
<span class="pl-k">using</span> Plots

<span class="pl-k">function</span> <span class="pl-en">energy_at_bond</span>(r)
  <span class="pl-c"><span class="pl-c">#</span> define molecule geometry</span>
  molecule <span class="pl-k">=</span> <span class="pl-c1">Molecule</span>([(<span class="pl-s"><span class="pl-pds">"</span>H<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), 
                       (<span class="pl-s"><span class="pl-pds">"</span>H<span class="pl-pds">"</span></span>,   r, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)])
  
  <span class="pl-c"><span class="pl-c">#</span> build electronic hamiltonian and solve HF</span>
  hf <span class="pl-k">=</span> <span class="pl-c1">molecular_orbital_hamiltonian</span>(molecule; basis<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sto-3g<span class="pl-pds">"</span></span>)
  hamiltonian <span class="pl-k">=</span> hf<span class="pl-k">.</span>hamiltonian
  hartree_fock_state <span class="pl-k">=</span> hf<span class="pl-k">.</span>hartree_fock_state
  hartree_fock_energy <span class="pl-k">=</span> hf<span class="pl-k">.</span>hartree_fock_energy

  <span class="pl-c"><span class="pl-c">#</span> hilbert space</span>
  s <span class="pl-k">=</span> <span class="pl-c1">siteinds</span>(<span class="pl-s"><span class="pl-pds">"</span>Electron<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>; conserve_qns<span class="pl-k">=</span><span class="pl-c1">true</span>)

  H <span class="pl-k">=</span> <span class="pl-c1">MPO</span>(hamiltonian, s)
  
  <span class="pl-c"><span class="pl-c">#</span> initialize MPS to HF state</span>
  ψhf <span class="pl-k">=</span> <span class="pl-c1">MPS</span>(s, hartree_fock_state)
  
  <span class="pl-c"><span class="pl-c">#</span> run dmrg</span>
  dmrg_kwargs <span class="pl-k">=</span> (;
    nsweeps<span class="pl-k">=</span><span class="pl-c1">10</span>,
    maxdim<span class="pl-k">=</span>[<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">30</span>,<span class="pl-c1">40</span>,<span class="pl-c1">50</span>,<span class="pl-c1">100</span>],
    cutoff<span class="pl-k">=</span><span class="pl-c1">1e-8</span>,
    noise<span class="pl-k">=</span>[<span class="pl-c1">1e-6</span>, <span class="pl-c1">1e-7</span>, <span class="pl-c1">1e-8</span>, <span class="pl-c1">0.0</span>],
  )
  dmrg_energy, _ <span class="pl-k">=</span> <span class="pl-c1">dmrg</span>(H, ψhf; nsweeps<span class="pl-k">=</span><span class="pl-c1">10</span>, outputlevel<span class="pl-k">=</span><span class="pl-c1">0</span>)
  <span class="pl-k">return</span> hartree_fock_energy, dmrg_energy
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> bond distances</span>
r⃗ <span class="pl-k">=</span> <span class="pl-c1">0.3</span><span class="pl-k">:</span><span class="pl-c1">0.03</span><span class="pl-k">:</span><span class="pl-c1">3.0</span>

energies <span class="pl-k">=</span> []
<span class="pl-k">for</span> r <span class="pl-k">in</span> r⃗
  <span class="pl-c1">push!</span>(energies, <span class="pl-c1">energy_at_bond</span>(r))
<span class="pl-k">end</span></pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="examples/dissociation.png"><img src="examples/dissociation.png" width="600" style="max-width: 100%;"></a>
</p>
<h3 dir="auto"><a id="user-content-jordan-wigner-transformation" class="anchor" aria-hidden="true" href="#jordan-wigner-transformation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jordan-Wigner transformation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ITensors
using ITensorChemistry

# Nitrogen molecule
molecule = Molecule(&quot;N₂&quot;)
basis = &quot;sto-3g&quot;
@show molecule

hf = molecular_orbital_hamiltonian(molecule; basis);
hamiltonian = hf.hamiltonian;
hartree_fock_state = hf.hartree_fock_state

println(&quot;Number of orbitals = &quot;, length(hartree_fock_state))
@show hamiltonian[end];
println(&quot;Number of fermionic operators = &quot;, length(hamiltonian))
println(&quot;Hartree-Fock state |HF⟩ = |&quot;, prod(string.(hartree_fock_state)),&quot;⟩&quot;)

qubit_hamiltonian = jordanwigner(hamiltonian);
qubit_state = jordanwigner(hartree_fock_state)
@show qubit_hamiltonian[end];
println(&quot;Number of qubit operators = &quot;, length(qubit_hamiltonian))
println(&quot;Hartree-Fock state |HF⟩ = |&quot;, prod(string.(qubit_state)),&quot;⟩&quot;) 
# -------------------------------------------------------------------------- 
#  molecule = Molecule
#   Atom 1: N,   r⃗ = (0.0, 0.0, 0.550296)
#   Atom 2: N,   r⃗ = (0.0, 0.0, -0.550296)
#  Number of orbitals = 10
#  Number of fermionic operators = 14181
#  |HF⟩ = |4444444111⟩
#  Number of qubit operators = 17005
#  |HF⟩ = |22222222222222111111⟩"><pre><span class="pl-k">using</span> ITensors
<span class="pl-k">using</span> ITensorChemistry

<span class="pl-c"><span class="pl-c">#</span> Nitrogen molecule</span>
molecule <span class="pl-k">=</span> <span class="pl-c1">Molecule</span>(<span class="pl-s"><span class="pl-pds">"</span>N₂<span class="pl-pds">"</span></span>)
basis <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sto-3g<span class="pl-pds">"</span></span>
<span class="pl-c1">@show</span> molecule

hf <span class="pl-k">=</span> <span class="pl-c1">molecular_orbital_hamiltonian</span>(molecule; basis);
hamiltonian <span class="pl-k">=</span> hf<span class="pl-k">.</span>hamiltonian;
hartree_fock_state <span class="pl-k">=</span> hf<span class="pl-k">.</span>hartree_fock_state

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Number of orbitals = <span class="pl-pds">"</span></span>, <span class="pl-c1">length</span>(hartree_fock_state))
<span class="pl-c1">@show</span> hamiltonian[<span class="pl-c1">end</span>];
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Number of fermionic operators = <span class="pl-pds">"</span></span>, <span class="pl-c1">length</span>(hamiltonian))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hartree-Fock state |HF⟩ = |<span class="pl-pds">"</span></span>, <span class="pl-c1">prod</span>(<span class="pl-c1">string</span>.(hartree_fock_state)),<span class="pl-s"><span class="pl-pds">"</span>⟩<span class="pl-pds">"</span></span>)

qubit_hamiltonian <span class="pl-k">=</span> <span class="pl-c1">jordanwigner</span>(hamiltonian);
qubit_state <span class="pl-k">=</span> <span class="pl-c1">jordanwigner</span>(hartree_fock_state)
<span class="pl-c1">@show</span> qubit_hamiltonian[<span class="pl-c1">end</span>];
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Number of qubit operators = <span class="pl-pds">"</span></span>, <span class="pl-c1">length</span>(qubit_hamiltonian))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hartree-Fock state |HF⟩ = |<span class="pl-pds">"</span></span>, <span class="pl-c1">prod</span>(<span class="pl-c1">string</span>.(qubit_state)),<span class="pl-s"><span class="pl-pds">"</span>⟩<span class="pl-pds">"</span></span>) 
<span class="pl-c"><span class="pl-c">#</span> -------------------------------------------------------------------------- </span>
<span class="pl-c"><span class="pl-c">#</span>  molecule = Molecule</span>
<span class="pl-c"><span class="pl-c">#</span>   Atom 1: N,   r⃗ = (0.0, 0.0, 0.550296)</span>
<span class="pl-c"><span class="pl-c">#</span>   Atom 2: N,   r⃗ = (0.0, 0.0, -0.550296)</span>
<span class="pl-c"><span class="pl-c">#</span>  Number of orbitals = 10</span>
<span class="pl-c"><span class="pl-c">#</span>  Number of fermionic operators = 14181</span>
<span class="pl-c"><span class="pl-c">#</span>  |HF⟩ = |4444444111⟩</span>
<span class="pl-c"><span class="pl-c">#</span>  Number of qubit operators = 17005</span>
<span class="pl-c"><span class="pl-c">#</span>  |HF⟩ = |22222222222222111111⟩</span></pre></div>
</article></div>