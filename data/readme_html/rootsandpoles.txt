<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rootsandpolesjl-global-complex-roots-and-poles-finding-in-julia" class="anchor" aria-hidden="true" href="#rootsandpolesjl-global-complex-roots-and-poles-finding-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RootsAndPoles.jl: Global complex Roots and Poles Finding in Julia</h1>
<p><a href="https://travis-ci.com/fgasdia/RootsAndPoles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a0566b470b14bde6096ee8228dd78bc8d01ebe408a53a6a1b7d1bb6a940665e6/68747470733a2f2f7472617669732d63692e636f6d2f666761736469612f526f6f7473416e64506f6c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/fgasdia/RootsAndPoles.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/fgasdia/rootsandpoles-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5574388b1b11c4a768379671c57ffb98875959893daf71d1dce80556fb2f6ddf/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6d656770676e386c31656a356d3377773f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/megpgn8l1ej5m3ww?svg=true" style="max-width:100%;"></a> <a href="https://zenodo.org/badge/latestdoi/154031378" rel="nofollow"><img src="https://camo.githubusercontent.com/1caf3712e728041a19ad421d81877b32d5dff5c753917cc9b74c204406ee54ad/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3135343033313337382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/154031378.svg" style="max-width:100%;"></a></p>
<p>A Julia implementation of <a href="https://github.com/PioKow/GRPF">GRPF</a> by Piotr Kowalczyk.</p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p><code>RootsAndPoles.jl</code> attempts to <strong>find all the zeros and poles of a complex valued function with complex arguments in a fixed region</strong>.
These types of problems are frequently encountered in electromagnetics, but the algorithm can also be used for similar problems in e.g. optics, acoustics, etc.</p>
<p>The GRPF algorithm first samples the function on a triangular mesh through Delaunay triangulation.
Candidate regions to search for roots and poles are determined and the discretized <a href="https://en.wikipedia.org/wiki/Argument_principle" rel="nofollow">Cauchy's argument principle</a> is applied <em>without needing the derivative of the function or integration over the contour</em>.
To improve the accuracy of the results, a self-adaptive mesh refinement occurs inside the identified candidate regions.</p>
<p><a target="_blank" rel="noopener noreferrer" href="simplefcn.svg"><img src="simplefcn.svg" alt="simplefcn" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add RootsAndPoles
"><pre>]add RootsAndPoles</pre></div>
<h3><a id="user-content-example-problem" class="anchor" aria-hidden="true" href="#example-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Problem</h3>
<p>Consider a simple rational (complex) argument function <code>simplefcn(z)</code> for which we seek roots and poles.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function simplefcn(z)
    w = (z - 1)*(z - im)^2*(z + 1)^3/(z + im)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">simplefcn</span>(z)
    w <span class="pl-k">=</span> (z <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">*</span>(z <span class="pl-k">-</span> im)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>(z <span class="pl-k">+</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">/</span>(z <span class="pl-k">+</span> im)
<span class="pl-k">end</span></pre></div>
<p>Next, we define parameters for the initial complex domain over which we would like to search.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xb = -2  # real part begin
xe = 2  # real part end
yb = -2  # imag part begin
ye = 2  # imag part end
r = 0.1  # initial mesh step
tolerance = 1e-9
"><pre>xb <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> real part begin</span>
xe <span class="pl-k">=</span> <span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> real part end</span>
yb <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> imag part begin</span>
ye <span class="pl-k">=</span> <span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> imag part end</span>
r <span class="pl-k">=</span> <span class="pl-c1">0.1</span>  <span class="pl-c"><span class="pl-c">#</span> initial mesh step</span>
tolerance <span class="pl-k">=</span> <span class="pl-c1">1e-9</span></pre></div>
<p>This package includes convenience functions for rectangular and disk shaped domains, but any "shape" can be used.
<code>origcoords</code> below is simply a vector of complex numbers containing the original mesh coordinates which will be Delaunay triangulated.
For maximum efficiency, the original mesh nodes should form equilateral triangles.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RootsAndPoles

origcoords = rectangulardomain(complex(xb, yb), complex(xe, ye), r)
"><pre><span class="pl-k">using</span> RootsAndPoles

origcoords <span class="pl-k">=</span> <span class="pl-c1">rectangulardomain</span>(<span class="pl-c1">complex</span>(xb, yb), <span class="pl-c1">complex</span>(xe, ye), r)</pre></div>
<p>Roots and poles can be obtained with the <code>grpf</code> function.
We only need to pass the handle to our <code>simplefcn</code> and the <code>origcoords</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles = grpf(simplefcn, origcoords)
"><pre>zroots, zpoles <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords)</pre></div>
<h3><a id="user-content-additional-parameters" class="anchor" aria-hidden="true" href="#additional-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional parameters</h3>
<p>Additional parameters can be provided to the tessellation and GRPF algorithms by explicitly passing a <code>GRPFParams</code> struct.</p>
<p>The two most useful parameters are <code>tess_sizehint</code> for the final total number of nodes in the internal <code>DelaunayTessellation2D</code> object and the root finder <code>tolerance</code> at which the mesh refinement stops.
Just like <code>sizehint!</code> for other collections, setting <code>tess_sizehint</code> to a value approximately equal to the final number of nodes in the tessellation can improve performance.
<code>tolerance</code> is the largest triangle edge length of the candidate edges defined in the <code>origcoords</code> domain.
In practice, the root and pole accuracy is a larger value than <code>tolerance</code>, so <code>tolerance</code> needs to be set smaller than the desired tolerance on the roots and poles.</p>
<p>By default, the value of <code>tess_sizehint</code> is 5000 and the <code>tolerance</code> is 1e-9, but they can be specified by providing the <code>GRPFParams</code> argument</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles = grpf(simplefcn, origcoords, GRPFParams(5000, 1e-9))
"><pre>zroots, zpoles <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords, <span class="pl-c1">GRPFParams</span>(<span class="pl-c1">5000</span>, <span class="pl-c1">1e-9</span>))</pre></div>
<p>Beginning version <code>v1.1.0</code>, calls to the provided function, e.g. <code>simplefcn</code>, can be <strong>multithreaded</strong> using Julia's <code>@threads</code> capability.
The function is called at every node of the triangulation and the results should be independent of one another.
For fast-running functions like <code>simplefcn</code>, the overall runtime of <code>grpf</code> is dominated by the Delaunay Triangulation itself, but for more complicated functions, threading can provide a significant advantage.
To enable multithreading of the function calls, specify so as a <code>GRPFParams</code> argument</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles = grpf(simplefcn, origcoords, GRPFParams(5000, 1e-9, true))
"><pre>zroots, zpoles <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords, <span class="pl-c1">GRPFParams</span>(<span class="pl-c1">5000</span>, <span class="pl-c1">1e-9</span>, <span class="pl-c1">true</span>))</pre></div>
<p>By default, <code>multithreading = false</code>.</p>
<p>Additional parameters which can be controlled are <code>maxiterations</code>, <code>maxnodes</code>, and <code>skinnytriangle</code>. <code>maxiterations</code> sets the maximum number of mesh refinement iterations and <code>maxnodes</code> sets the maximum number of nodes allowed in the <code>DelaunayTessellation2D</code> before returning.
<code>skinnytriangle</code> is the maximum allowed ratio of the longest to shortest side length in a tessellation triangle before the triangle is automatically subdivided in the mesh refinement step.
Default values are</p>
<ul>
<li><code>maxiterations</code>: 100</li>
<li><code>maxnodes</code>: 500000</li>
<li><code>skinnytriangle</code>: 3</li>
</ul>
<p>These can be specified along with the <code>tess_sizehint</code>, <code>tolerance</code> and <code>multithreading</code> as, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles = grpf(simplefcn, origcoords, GRPFParams(100, 500000, 3, 5000, 1e-9, true))
"><pre>zroots, zpoles <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords, <span class="pl-c1">GRPFParams</span>(<span class="pl-c1">100</span>, <span class="pl-c1">500000</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5000</span>, <span class="pl-c1">1e-9</span>, <span class="pl-c1">true</span>))</pre></div>
<h3><a id="user-content-plot-data" class="anchor" aria-hidden="true" href="#plot-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plot data</h3>
<p>If mesh node <code>quadrants</code> and <code>phasediffs</code> are wanted for plotting, simply pass a <code>PlotData()</code> instance.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles, quadrants, phasediffs, tess, g2f = grpf(simplefcn, origcoords, PlotData())
"><pre>zroots, zpoles, quadrants, phasediffs, tess, g2f <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords, <span class="pl-c1">PlotData</span>())</pre></div>
<p>A <code>GRPFParams</code> can also be passed.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles, quadrants, phasediffs, tess, g2f = grpf(simplefcn, origcoords, PlotData(), GRPFParams(5000, 1e-9))
"><pre>zroots, zpoles, quadrants, phasediffs, tess, g2f <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords, <span class="pl-c1">PlotData</span>(), <span class="pl-c1">GRPFParams</span>(<span class="pl-c1">5000</span>, <span class="pl-c1">1e-9</span>))</pre></div>
<p>In <code>v1.4.0</code>, a function <code>getplotdata</code> makes plotting the tessellation results more convenient.
The code below was used to create the figure shown at the top of the page.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="zroots, zpoles, quadrants, phasediffs, tess, g2f = grpf(simplefcn, origcoords, PlotData());
z, edgecolors = getplotdata(tess, quadrants, phasediffs, g2f);

using Plots

pal = [&quot;yellow&quot;, &quot;purple&quot;, &quot;green&quot;, &quot;orange&quot;, &quot;black&quot;, &quot;cyan&quot;]
plot(real(z), imag(z), group=edgecolors, palette=pal,
     xlabel=&quot;Re(z)&quot;, ylabel=&quot;Im(z)&quot;,
     xlims=(-2, 2), ylims=(-2, 2),
     legend=:outerright, legendtitle=&quot;f(z)&quot;, title=&quot;Simple rational function&quot;,
     label=[&quot;Re &gt; 0, Im ≥ 0&quot; &quot;Re ≤ 0, Im &gt; 0&quot; &quot;Re &lt; 0, Im ≤ 0&quot; &quot;Re ≥ 0, Im &lt; 0&quot; &quot;&quot; &quot;&quot;])
"><pre>zroots, zpoles, quadrants, phasediffs, tess, g2f <span class="pl-k">=</span> <span class="pl-c1">grpf</span>(simplefcn, origcoords, <span class="pl-c1">PlotData</span>());
z, edgecolors <span class="pl-k">=</span> <span class="pl-c1">getplotdata</span>(tess, quadrants, phasediffs, g2f);

<span class="pl-k">using</span> Plots

pal <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>yellow<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>purple<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cyan<span class="pl-pds">"</span></span>]
<span class="pl-c1">plot</span>(<span class="pl-c1">real</span>(z), <span class="pl-c1">imag</span>(z), group<span class="pl-k">=</span>edgecolors, palette<span class="pl-k">=</span>pal,
     xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Re(z)<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Im(z)<span class="pl-pds">"</span></span>,
     xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>),
     legend<span class="pl-k">=</span><span class="pl-c1">:outerright</span>, legendtitle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>f(z)<span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Simple rational function<span class="pl-pds">"</span></span>,
     label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Re &gt; 0, Im ≥ 0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Re ≤ 0, Im &gt; 0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Re &lt; 0, Im ≤ 0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Re ≥ 0, Im &lt; 0<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>])</pre></div>
<h3><a id="user-content-additional-examples" class="anchor" aria-hidden="true" href="#additional-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional examples</h3>
<p>See <a href="test/">test/</a> for additional examples.</p>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h2>
<p>This package uses <a href="https://github.com/JuliaGeometry/VoronoiDelaunay.jl">VoronoiDelaunay.jl</a> to perform the Delaunay tessellation.
<code>VoronoiDelaunay</code> is numerically limited to the range of <code>1.0+eps(Float64)</code> to <code>2.0-2eps(Float64)</code> for its point coordinates.
<code>RootsAndPoles.jl</code> will accept functions and <code>origcoords</code> that aren't limited to <code>Complex{Float64}</code>, for example <code>Complex{BigFloat}</code>, but the internal tolerance of the root finding is limited to <code>Float64</code> precision.</p>
<h2><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing</h2>
<p>Please consider citing Piotr's publications if this code is used in scientific work:</p>
<ol>
<li>
<p>P. Kowalczyk, “Complex Root Finding Algorithm Based on Delaunay Triangulation”, ACM Transactions on Mathematical Software, vol. 41, no. 3, art. 19, pp. 1-13, June 2015. <a href="https://dl.acm.org/citation.cfm?id=2699457" rel="nofollow">https://dl.acm.org/citation.cfm?id=2699457</a></p>
</li>
<li>
<p>P. Kowalczyk, "Global Complex Roots and Poles Finding Algorithm Based on Phase Analysis for Propagation and Radiation Problems," IEEE Transactions on Antennas and Propagation, vol. 66, no. 12, pp. 7198-7205, Dec. 2018. <a href="https://ieeexplore.ieee.org/document/8457320" rel="nofollow">https://ieeexplore.ieee.org/document/8457320</a></p>
</li>
</ol>
<p>We also encourage you to cite this package if used in scientific work.
Refer to the Zenodo DOI at the top of the page or <a href="CITATION.bib">CITATION.bib</a>.</p>
</article></div>