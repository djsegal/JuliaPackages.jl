<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-finitehorizonvalueiteration" class="anchor" aria-hidden="true" href="#finitehorizonvalueiteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FiniteHorizonValueIteration</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaPOMDP/FiniteHorizonValueIteration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/82a7efd91cb0300c9da63b94731c1293b68650e23a4163b7750ddb99becf0fc4/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961504f4d44502f46696e697465486f72697a6f6e56616c7565497465726174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPOMDP/FiniteHorizonValueIteration.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaPOMDP/FiniteHorizonValueIteration.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/59d9bc2e84841f23c6763b9623d5e3edc909c7ba0fee555e3c4e66c1165d941d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961504f4d44502f46696e697465486f72697a6f6e56616c7565497465726174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaPOMDP/FiniteHorizonValueIteration.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">The package contains a finite horizon MDP solver for discrete problems. This algorithm is a modified version of infinite horizon value iteration.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You must have <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a> installed. To install <code>FiniteHorizonValueIteration</code>, run the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using POMDPs
using Pkg
POMDPs.add_registry() # TODO: Is this still needed?
Pkg.add(&quot;FiniteHorizonValueIteration&quot;)"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> Pkg
POMDPs<span class="pl-k">.</span><span class="pl-c1">add_registry</span>() <span class="pl-c"><span class="pl-c">#</span> TODO: Is this still needed?</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FiniteHorizonValueIteration<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using FiniteHorizonValueIteration

mdp = MyMDP() # initialize MDP

# initialize the solver
solver = FiniteHorizonSolver(verbose=false)

# run the solver
policy = solve(solver, mdp)"><pre class="notranslate"><code>using FiniteHorizonValueIteration

mdp = MyMDP() # initialize MDP

# initialize the solver
solver = FiniteHorizonSolver(verbose=false)

# run the solver
policy = solve(solver, mdp)
</code></pre></div>
<h1 dir="auto"><a id="user-content-output-and-validation" class="anchor" aria-hidden="true" href="#output-and-validation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output and validation</h1>
<p dir="auto">The policy is stored to <code>FiniteHorizonPolicy</code>.
Example problems are defined in <code>test/instances/...</code>, examples are used in corresponding test files. Results are validated against the value iteration executed on all epochs simultaneously.</p>
</article></div>