<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-memoizationjl" class="anchor" aria-hidden="true" href="#memoizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Memoization.jl</h1>
<p><a href="https://travis-ci.com/marius311/Memoization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e3f85ef93247f3e92c4fd79554efe7fc365519ef2fcf0c0b0595efd8daf8081e/68747470733a2f2f7472617669732d63692e636f6d2f6d61726975733331312f4d656d6f697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/marius311/Memoization.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Easily and efficiently memoize any function in Julia.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; using Memoization

julia&gt; @memoize f(x) = (println(&quot;Computed $x&quot;); x)

julia&gt; f(2)
Computed 2
2

julia&gt; f(2)
2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Memoization

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@memoize</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span><span class="pl-pds">"</span></span>); x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)
Computed <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-highlights" class="anchor" aria-hidden="true" href="#highlights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Highlights</h2>
<ul>
<li>
<p>All function definition forms with args and/or kwargs and/or type parameters work.</p>
</li>
<li>
<p>Your function remains inferrable.</p>
</li>
<li>
<p>Multiple memoized methods for the same function can be defined across different modules (no warnings are generated).</p>
</li>
<li>
<p>You can choose the cache type, e.g.,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@memoize Dict f(x) = ...
@memoize LRU(maxsize=5) f(x) = ...      # using https://github.com/JuliaCollections/LRUCache.jl
"><pre><span class="pl-c1">@memoize</span> Dict <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-c1">@memoize</span> <span class="pl-en">LRU</span>(maxsize<span class="pl-k">=</span><span class="pl-c1">5</span>) <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-k">...</span>      <span class="pl-c"><span class="pl-c">#</span> using https://github.com/JuliaCollections/LRUCache.jl</span></pre></div>
<p>The specifier should be a type which can be called without arguments to create the cache, or an expression which creates an instance of a cache (note: cache creation is delayed until the first time a function is called, so it is not possible to pass a pre-instantiated cache).</p>
<p>The default cache type is <code>IdDict</code> which
counts arguments the same if they <code>===</code> each other. Another common choice is <code>Dict</code> which memoizes based on if they <code>==</code> each other (this is probably useful if you want to count e.g. vectors which contain the same entries as the same, but will lead to somewhat slower cache lookup).</p>
</li>
<li>
<p>You can clear the cache for a given function at any time with <code>Memoization.empty_cache!(f)</code>. Defining new memoized methods for a function will also clear the cache.</p>
</li>
<li>
<p>You can also clear all caches for all functions with <code>Memoization.empty_all_caches!()</code>.</p>
</li>
<li>
<p>You are free to memoize some methods of a function but not others, e.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @memoize f(x) = (println(&quot;Computed $x&quot;); x)
f (generic function with 1 method)

julia&gt; f(x,y) = (println(&quot;Computed $x,$y&quot;); f(x+y))
f (generic function with 2 methods)

julia&gt; f(1,2)
Computed 1,2
Computed 3
3

julia&gt; f(1,2)
Computed 1,2
3

julia&gt; f(1,2)
Computed 1,2
3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@memoize</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span><span class="pl-pds">"</span></span>); x)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x,y) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span>,<span class="pl-v">$y</span><span class="pl-pds">"</span></span>); <span class="pl-c1">f</span>(x<span class="pl-k">+</span>y))
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">2</span>
Computed <span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">2</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">2</span>
<span class="pl-c1">3</span></pre></div>
</li>
<li>
<p>You can memoize individual instances of closures, e.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; function make_func(x)
           @memoize func(y) = (println(&quot;Computed $x,$y&quot;); (x,y))
       end;

julia&gt; f = make_func(1);

julia&gt; f(3)
Computed 1,3
(1, 3)

julia&gt; f(3)
(1, 3)

julia&gt; g = make_func(2);

julia&gt; g(3)
Computed 2,3
(2, 3)

julia&gt; g(3)
(2, 3)

julia&gt; f(3) # note both f and g memoized separately at this point
(1, 3)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">make_func</span>(x)
           <span class="pl-c1">@memoize</span> <span class="pl-en">func</span>(y) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span>,<span class="pl-v">$y</span><span class="pl-pds">"</span></span>); (x,y))
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">make_func</span>(<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">make_func</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">2</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> note both f and g memoized separately at this point</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)</pre></div>
</li>
<li>
<p>You can memoize individual instances of "callables", e.g.,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct Foo
           x
       end

julia&gt; @memoize (f::Foo)(x) = (println(&quot;Computed $(f.x), $x&quot;); (f.x, x))

julia&gt; foo1 = Foo(1);

julia&gt; foo1(3)
Computed 1,3
(1,3)

julia&gt; foo1(3)
(1,3)

julia&gt; foo2 = Foo(2);

julia&gt; foo2(3)
Computed 2,3
(2,3)

julia&gt; foo2(3)
(2,3)

julia&gt; foo1(3) # note both foo1 and foo2 memoized separately at this point
(1,3)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo
           x
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@memoize</span> (f<span class="pl-k">::</span><span class="pl-c1">Foo</span>)(x) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$(f<span class="pl-k">.</span>x)</span>, <span class="pl-v">$x</span><span class="pl-pds">"</span></span>); (f<span class="pl-k">.</span>x, x))

julia<span class="pl-k">&gt;</span> foo1 <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo1</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo1</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> foo2 <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo2</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">2</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo2</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo1</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> note both foo1 and foo2 memoized separately at this point</span>
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)</pre></div>
</li>
</ul>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h2>
<ul>
<li>This package is not thread-safe with either <code>Dict</code> or <code>IdDict</code>. However, if a thread-safe cache is used (e.g. <a href="https://github.com/wherrera10/ThreadSafeDicts.jl">ThreadSafeDicts.jl</a>), then memoizing top-level functions is thread-safe. Memoizing closures and callables is not yet thread-safe with any cache type.</li>
</ul>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h2>
<p>This package can be used as a drop-in replacement for <a href="https://github.com/JuliaCollections/Memoize.jl">Memoize.jl</a>, and, as of this writing, has fewer limitations.</p>
<p>The design is partly inspired by both <a href="https://github.com/JuliaCollections/Memoize.jl">Memoize.jl</a> and <a href="https://stackoverflow.com/a/52084004/1078529" rel="nofollow">this</a> Stack Overflow comment.</p>
</article></div>