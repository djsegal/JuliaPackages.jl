<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-memoizationjl" class="anchor" aria-hidden="true" href="#memoizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Memoization.jl</h1>
<p><a href="https://travis-ci.com/marius311/Memoization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5eca6fcf6ff21e72a6968825e5e3d616a4faa5c/68747470733a2f2f7472617669732d63692e636f6d2f6d61726975733331312f4d656d6f697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/marius311/Memoization.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Easily and efficiently memoize any function in Julia.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Memoization

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@memoize</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span><span class="pl-pds">"</span></span>); x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)
Computed <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-highlights" class="anchor" aria-hidden="true" href="#highlights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Highlights</h2>
<ul>
<li>
<p>All function definition forms with args and/or kwargs and/or type parameters work.</p>
</li>
<li>
<p>Your function remains inferrable.</p>
</li>
<li>
<p>Multiple memoized methods for the same function can be defined across different modules (no warnings are generated).</p>
</li>
<li>
<p>You can choose the cache type with e.g. <code>@memoize Dict f(x) = ...</code>. The default is <code>IdDict</code> which memoizes based on the object-id of the arguments.  <code>Dict</code> might be useful if you want to memoize based on their values, e.g. so that vectors which contain the same entries count as the same.</p>
</li>
<li>
<p>You can clear the cache for a given function at any time with <code>Memoization.empty_cache!(f)</code>. Defining new memoized methods for a function will also clear the cache.</p>
</li>
<li>
<p>You can also clear all caches for all functions with <code>Memoization.empty_all_caches!()</code>.</p>
</li>
<li>
<p>You are free to memoize some methods of a function but not others, e.g.:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@memoize</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span><span class="pl-pds">"</span></span>); x)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x,y) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span>,<span class="pl-v">$y</span><span class="pl-pds">"</span></span>); <span class="pl-c1">f</span>(x<span class="pl-k">+</span>y))
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">2</span>
Computed <span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">2</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">2</span>
<span class="pl-c1">3</span></pre></div>
</li>
<li>
<p>You can memoize individual instances of closures, e.g.:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">make_func</span>(x)
           <span class="pl-c1">@memoize</span> <span class="pl-en">func</span>(y) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$x</span>,<span class="pl-v">$y</span><span class="pl-pds">"</span></span>); (x,y))
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">make_func</span>(<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">make_func</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">2</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> note both f and g memoized separately at this point</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)</pre></div>
</li>
<li>
<p>You can memoize individual instances of "callables", e.g.,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo
           x
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@memoize</span> (f<span class="pl-k">::</span><span class="pl-c1">Foo</span>)(x) <span class="pl-k">=</span> (<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Computed <span class="pl-v">$(f<span class="pl-k">.</span>x)</span>, <span class="pl-v">$x</span><span class="pl-pds">"</span></span>); (f<span class="pl-k">.</span>x, x))

julia<span class="pl-k">&gt;</span> foo1 <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo1</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">1</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo1</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> foo2 <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo2</span>(<span class="pl-c1">3</span>)
Computed <span class="pl-c1">2</span>,<span class="pl-c1">3</span>
(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo2</span>(<span class="pl-c1">3</span>)
(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo1</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> note both foo1 and foo2 memoized separately at this point</span>
(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)</pre></div>
</li>
</ul>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limitations</h2>
<ul>
<li>This package is not threadsafe with either <code>Dict</code> or <code>IdDict</code>. However, if a threadsafe dictionary is used (not sure if any exist in Julia yet though), then memoizing top-level functions is threadsafe. Memoizing closures is not yet threadsafe with any cache type.</li>
<li>If using custom cache types other than <code>Dict</code> or <code>IdDict</code>, the custom type must be defined <em>before</em> the first time you call <code>using Memoization</code> in a given session.</li>
</ul>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes</h2>
<p>This package can be used as a drop-in replacement for <a href="https://github.com/JuliaCollections/Memoize.jl">Memoize.jl</a>, and, as of this writing, has fewer limitations.</p>
<p>The design is partly inspired by both <a href="https://github.com/JuliaCollections/Memoize.jl">Memoize.jl</a> and <a href="https://stackoverflow.com/a/52084004/1078529" rel="nofollow">this</a> Stack Overflow comment.</p>
</article></div>