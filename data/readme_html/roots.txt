<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-root-finding-functions-for-julia" class="anchor" aria-hidden="true" href="#root-finding-functions-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Root finding functions for Julia</h1>
<p dir="auto"><a href="https://JuliaMath.github.io/Roots.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaMath.github.io/Roots.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMath/Roots.jl/actions"><img src="https://github.com/JuliaMath/Roots.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMath/Roots.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ba73f6386706981c2c131aec9da5cee429a2f9b67e45c2b057603c47942c3d2f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f526f6f74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaMath/Roots.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package contains simple routines for finding roots, or zeros, of
scalar functions of a single real variable using floating-point math. The <code>find_zero</code> function
provides the primary interface. The basic call is
<code>find_zero(f, x0, [M], [p]; kws...)</code> where, typically, <code>f</code> is a function, <code>x0</code> a starting point or
bracketing interval,  <code>M</code> is used to adjust the default algorithms used, and <code>p</code> can be used to pass in parameters.</p>
<p dir="auto">The various algorithms include:</p>
<ul dir="auto">
<li>
<p dir="auto">Bisection-like algorithms. For functions where a bracketing interval
is known (one where <code>f(a)</code> and <code>f(b)</code> have alternate signs), a
bracketing method, like <code>Bisection</code>, can be specified.  The default
is <code>Bisection</code>, for most floating point number types, employed in a
manner exploiting floating point storage conventions. For other
number types (e.g. <code>BigFloat</code>), an algorithm of Alefeld, Potra, and
Shi is used by default. These default methods are guaranteed to
converge.  Other bracketing methods are available.</p>
</li>
<li>
<p dir="auto">Several derivative-free algorithms. These  are specified
through the methods <code>Order0</code>, <code>Order1</code> (the secant method), <code>Order2</code>
(the Steffensen method), <code>Order5</code>, <code>Order8</code>, and <code>Order16</code>. The
number indicates, roughly, the order of convergence. The <code>Order0</code>
method is the default, and the most robust, but may take  more
function calls to converge, as it employs a bracketing method when
possible. The higher order methods promise faster
convergence, though don't always yield results with fewer function
calls than <code>Order1</code> or <code>Order2</code>. The methods <code>Roots.Order1B</code> and
<code>Roots.Order2B</code> are superlinear and quadratically converging methods
independent of the multiplicity of the zero.</p>
</li>
<li>
<p dir="auto">There are historic algorithms that require a derivative or two to be
specified: <code>Roots.Newton</code> and <code>Roots.Halley</code>. <code>Roots.Schroder</code>
provides a quadratic method, like Newton's method, which is
independent of the multiplicity of the zero. This is generalized by
<code>Roots.ThukralXB</code> (with <code>X</code> being 2,3,4, or 5).</p>
</li>
<li>
<p dir="auto">There are several non-exported algorithms, such as, <code>Roots.Brent()</code>,
<code>Roots.LithBoonkkampIJzermanBracket</code>, and
<code>Roots.LithBoonkkampIJzerman</code>.</p>
</li>
</ul>
<p dir="auto">Each method's documentation has additional detail.</p>
<p dir="auto">Some examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Roots

julia&gt; f(x) = exp(x) - x^4;

julia&gt; α₀, α₁, α₂ = -0.8155534188089607, 1.4296118247255556, 8.6131694564414;

julia&gt; find_zero(f, (8,9), Bisection()) ≈ α₂ # a bisection method has the bracket specified
true

julia&gt; find_zero(f, (-10, 0)) ≈ α₀ # Bisection is default if x in `find_zero(f, x)` is not scalar
true


julia&gt; find_zero(f, (-10, 0), Roots.A42()) ≈ α₀ # fewer function evaluations than Bisection
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Roots

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x) <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">4</span>;

julia<span class="pl-k">&gt;</span> α₀, α₁, α₂ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.8155534188089607</span>, <span class="pl-c1">1.4296118247255556</span>, <span class="pl-c1">8.6131694564414</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, (<span class="pl-c1">8</span>,<span class="pl-c1">9</span>), <span class="pl-c1">Bisection</span>()) <span class="pl-k">≈</span> α₂ <span class="pl-c"><span class="pl-c">#</span> a bisection method has the bracket specified</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, (<span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-c1">0</span>)) <span class="pl-k">≈</span> α₀ <span class="pl-c"><span class="pl-c">#</span> Bisection is default if x in `find_zero(f, x)` is not scalar</span>
<span class="pl-c1">true</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, (<span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-c1">0</span>), Roots<span class="pl-k">.</span><span class="pl-c1">A42</span>()) <span class="pl-k">≈</span> α₀ <span class="pl-c"><span class="pl-c">#</span> fewer function evaluations than Bisection</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">For non-bracketing methods, the initial position is passed in as a
scalar, or, possibly, for secant-like methods an iterable like <code>(x_0, x_1)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; find_zero(f, 3) ≈ α₁  # find_zero(f, x0::Number) will use Order0()
true

julia&gt; find_zero(f, 3, Order1()) ≈ α₁ # same answer, different method (secant)
true

julia&gt; find_zero(f, (3, 2), Order1()) ≈ α₁ # start secant method with (3, f(3), (2, f(2))
true


julia&gt; find_zero(sin, BigFloat(3.0), Order16()) ≈ π # 2 iterations to 6 using Order1()
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, <span class="pl-c1">3</span>) <span class="pl-k">≈</span> α₁  <span class="pl-c"><span class="pl-c">#</span> find_zero(f, x0::Number) will use Order0()</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, <span class="pl-c1">3</span>, <span class="pl-c1">Order1</span>()) <span class="pl-k">≈</span> α₁ <span class="pl-c"><span class="pl-c">#</span> same answer, different method (secant)</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Order1</span>()) <span class="pl-k">≈</span> α₁ <span class="pl-c"><span class="pl-c">#</span> start secant method with (3, f(3), (2, f(2))</span>
<span class="pl-c1">true</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(sin, <span class="pl-c1">BigFloat</span>(<span class="pl-c1">3.0</span>), <span class="pl-c1">Order16</span>()) <span class="pl-k">≈</span> π <span class="pl-c"><span class="pl-c">#</span> 2 iterations to 6 using Order1()</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">The <code>find_zero</code> function can be used with callable objects:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Polynomials;

julia&gt; x = variable();

julia&gt; find_zero(x^5 - x - 1, 1.0) ≈ 1.1673039782614187
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polynomials;

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">variable</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(x<span class="pl-k">^</span><span class="pl-c1">5</span> <span class="pl-k">-</span> x <span class="pl-k">-</span> <span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>) <span class="pl-k">≈</span> <span class="pl-c1">1.1673039782614187</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">The function should respect the units of the <code>Unitful</code> package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Unitful

julia&gt; s, m  = u&quot;s&quot;, u&quot;m&quot;;

julia&gt; g, v₀, y₀ = 9.8*m/s^2, 10m/s, 16m;


julia&gt; y(t) = -g*t^2 + v₀*t + y₀
y (generic function with 1 method)

julia&gt; find_zero(y, 1s)  ≈ 1.886053370668014s
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> s, m  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> g, v₀, y₀ <span class="pl-k">=</span> <span class="pl-c1">9.8</span><span class="pl-k">*</span>m<span class="pl-k">/</span>s<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">10</span>m<span class="pl-k">/</span>s, <span class="pl-c1">16</span>m;


julia<span class="pl-k">&gt;</span> <span class="pl-en">y</span>(t) <span class="pl-k">=</span> <span class="pl-k">-</span>g<span class="pl-k">*</span>t<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> v₀<span class="pl-k">*</span>t <span class="pl-k">+</span> y₀
y (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(y, <span class="pl-c1">1</span>s)  <span class="pl-k">≈</span> <span class="pl-c1">1.886053370668014</span>s
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Newton's method can be used without taking derivatives by hand. The
following examples use the <code>ForwardDiff</code> package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ForwardDiff

julia&gt; D(f) = x -&gt; ForwardDiff.derivative(f,float(x))
D (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ForwardDiff

julia<span class="pl-k">&gt;</span> <span class="pl-en">D</span>(f) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">derivative</span>(f,<span class="pl-c1">float</span>(x))
D (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Now we have:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = x^3 - 2x - 5
f (generic function with 1 method)

julia&gt; x0 = 2
2

julia&gt; find_zero((f, D(f)), x0, Roots.Newton()) ≈ 2.0945514815423265
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">2</span>x <span class="pl-k">-</span> <span class="pl-c1">5</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x0 <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>((f, <span class="pl-c1">D</span>(f)), x0, Roots<span class="pl-k">.</span><span class="pl-c1">Newton</span>()) <span class="pl-k">≈</span> <span class="pl-c1">2.0945514815423265</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Automatic derivatives allow for easy solutions to finding critical
points of a function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Statistics: mean, median

julia&gt; as = rand(5);

julia&gt; M(x) = sum((x-a)^2 for a in as)
M (generic function with 1 method)

julia&gt; find_zero(D(M), .5) ≈ mean(as)
true

julia&gt; med(x) = sum(abs(x-a) for a in as)
med (generic function with 1 method)

julia&gt; find_zero(D(med), (0, 1)) ≈ median(as)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Statistics<span class="pl-k">:</span> mean, median

julia<span class="pl-k">&gt;</span> as <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">M</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sum</span>((x<span class="pl-k">-</span>a)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">for</span> a <span class="pl-k">in</span> as)
M (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(<span class="pl-c1">D</span>(M), .<span class="pl-c1">5</span>) <span class="pl-k">≈</span> <span class="pl-c1">mean</span>(as)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">med</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">abs</span>(x<span class="pl-k">-</span>a) <span class="pl-k">for</span> a <span class="pl-k">in</span> as)
med (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(<span class="pl-c1">D</span>(med), (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)) <span class="pl-k">≈</span> <span class="pl-c1">median</span>(as)
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-the-commonsolve-interface" class="anchor" aria-hidden="true" href="#the-commonsolve-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The CommonSolve interface</h3>
<p dir="auto">The
<a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations</a>
interface of setting up a problem; initializing the problem; then
solving the problem is also implemented using the types
<code>ZeroProblem</code> and the methods <code>init</code>, <code>solve!</code>, and <code>solve</code> (from <a href="https://github.com/SciML/CommonSolve.jl">CommonSolve</a>).</p>
<p dir="auto">For example, we can solve a problem with many different methods, as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = exp(-x) - x^3
f (generic function with 1 method)

julia&gt; x0 = 2.0
2.0

julia&gt; fx = ZeroProblem(f, x0)
ZeroProblem{typeof(f), Float64}(f, 2.0)

julia&gt; solve(fx) ≈ 0.7728829591492101
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x) <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x0 <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
<span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> fx <span class="pl-k">=</span> <span class="pl-c1">ZeroProblem</span>(f, x0)
<span class="pl-c1">ZeroProblem</span><span class="pl-c1">{typeof(f), Float64}</span>(f, <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(fx) <span class="pl-k">≈</span> <span class="pl-c1">0.7728829591492101</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">With no default, and a single initial point specified, the default
<code>Order1</code> method is used.  The <code>solve</code> method allows other root-solving
methods to be passed, along with other options. For example, to use
the <code>Order2</code> method using a convergence criteria (see below) that
<code>|xₙ - xₙ₋₁| ≤ δ</code>, we could make this call:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; solve(fx, Order2(); atol=0.0, rtol=0.0) ≈ 0.7728829591492101
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(fx, <span class="pl-c1">Order2</span>(); atol<span class="pl-k">=</span><span class="pl-c1">0.0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0.0</span>) <span class="pl-k">≈</span> <span class="pl-c1">0.7728829591492101</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Unlike <code>find_zero</code>, which errors on non-convergence, <code>solve</code> returns
<code>NaN</code> on non-convergence.</p>
<p dir="auto">This next example has a zero at <code>0.0</code>, but
for most initial values will escape towards <code>±∞</code>, sometimes causing a
relative tolerance to return a misleading value. Here we can see the
differences:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = cbrt(x) * exp(-x^2)
f (generic function with 1 method)

julia&gt; x0 = 0.1147
0.1147

julia&gt; find_zero(f, x0, Roots.Order1()) ≈ 5.075844588445206 # stopped as |f(xₙ)| ≤ |xₙ|ϵ
true

julia&gt; find_zero(f, x0, Roots.Order1(), atol=0.0, rtol=0.0) # error as no check on `|f(xn)|`
ERROR: Roots.ConvergenceFailed(&quot;Algorithm failed to converge&quot;)
[...]

julia&gt; fx = ZeroProblem(f, x0);

julia&gt; solve(fx, Roots.Order1(), atol=0.0, rtol=0.0) # NaN, not an error
NaN

julia&gt; fx = ZeroProblem((f, D(f)), x0); # higher order methods can identify zero of this function

julia&gt; solve(fx, Roots.LithBoonkkampIJzerman(2,1), atol=0.0, rtol=0.0)
0.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">cbrt</span>(x) <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x0 <span class="pl-k">=</span> <span class="pl-c1">0.1147</span>
<span class="pl-c1">0.1147</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, x0, Roots<span class="pl-k">.</span><span class="pl-c1">Order1</span>()) <span class="pl-k">≈</span> <span class="pl-c1">5.075844588445206</span> <span class="pl-c"><span class="pl-c">#</span> stopped as |f(xₙ)| ≤ |xₙ|ϵ</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zero</span>(f, x0, Roots<span class="pl-k">.</span><span class="pl-c1">Order1</span>(), atol<span class="pl-k">=</span><span class="pl-c1">0.0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0.0</span>) <span class="pl-c"><span class="pl-c">#</span> error as no check on `|f(xn)|`</span>
ERROR<span class="pl-k">:</span> Roots<span class="pl-k">.</span><span class="pl-c1">ConvergenceFailed</span>(<span class="pl-s"><span class="pl-pds">"</span>Algorithm failed to converge<span class="pl-pds">"</span></span>)
[<span class="pl-k">...</span>]

julia<span class="pl-k">&gt;</span> fx <span class="pl-k">=</span> <span class="pl-c1">ZeroProblem</span>(f, x0);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(fx, Roots<span class="pl-k">.</span><span class="pl-c1">Order1</span>(), atol<span class="pl-k">=</span><span class="pl-c1">0.0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0.0</span>) <span class="pl-c"><span class="pl-c">#</span> NaN, not an error</span>
<span class="pl-c1">NaN</span>

julia<span class="pl-k">&gt;</span> fx <span class="pl-k">=</span> <span class="pl-c1">ZeroProblem</span>((f, <span class="pl-c1">D</span>(f)), x0); <span class="pl-c"><span class="pl-c">#</span> higher order methods can identify zero of this function</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(fx, Roots<span class="pl-k">.</span><span class="pl-c1">LithBoonkkampIJzerman</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>), atol<span class="pl-k">=</span><span class="pl-c1">0.0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
<span class="pl-c1">0.0</span></pre></div>
<p dir="auto">Functions may be parameterized, as illustrated:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x, p=2) = cos(x) - x/p
f (generic function with 2 methods)

julia&gt; Z = ZeroProblem(f, pi/4)
ZeroProblem{typeof(f), Float64}(f, 0.7853981633974483)

julia&gt; solve(Z, Order1()) ≈ 1.0298665293222586     # use p=2 default
true

julia&gt; solve(Z, Order1(), p=3) ≈ 1.170120950002626 # use p=3
true

julia&gt; solve(Z, Order1(), 4) ≈ 1.2523532340025887  # by position, uses p=4
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x, p<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x) <span class="pl-k">-</span> x<span class="pl-k">/</span>p
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> Z <span class="pl-k">=</span> <span class="pl-c1">ZeroProblem</span>(f, <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">4</span>)
<span class="pl-c1">ZeroProblem</span><span class="pl-c1">{typeof(f), Float64}</span>(f, <span class="pl-c1">0.7853981633974483</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(Z, <span class="pl-c1">Order1</span>()) <span class="pl-k">≈</span> <span class="pl-c1">1.0298665293222586</span>     <span class="pl-c"><span class="pl-c">#</span> use p=2 default</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(Z, <span class="pl-c1">Order1</span>(), p<span class="pl-k">=</span><span class="pl-c1">3</span>) <span class="pl-k">≈</span> <span class="pl-c1">1.170120950002626</span> <span class="pl-c"><span class="pl-c">#</span> use p=3</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(Z, <span class="pl-c1">Order1</span>(), <span class="pl-c1">4</span>) <span class="pl-k">≈</span> <span class="pl-c1">1.2523532340025887</span>  <span class="pl-c"><span class="pl-c">#</span> by position, uses p=4</span>
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-multiple-zeros" class="anchor" aria-hidden="true" href="#multiple-zeros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiple zeros</h3>
<p dir="auto">The <code>find_zeros</code> function can be used to search for all zeros in a
specified interval. The basic algorithm essentially splits the interval into many
subintervals. For each, if there is a bracket, a bracketing algorithm
is used to identify a zero, otherwise a derivative free method is used
to search for zeros. This heuristic algorithm can miss zeros for various reasons, so the
results should be confirmed by other means.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = exp(x) - x^4
f (generic function with 2 methods)

julia&gt; find_zeros(f, -10,10) ≈ [α₀, α₁, α₂] # from above
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x) <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">4</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zeros</span>(f, <span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>) <span class="pl-k">≈</span> [α₀, α₁, α₂] <span class="pl-c"><span class="pl-c">#</span> from above</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">The interval can also be specified using a structure with <code>extrema</code>
defined, where <code>extrema</code> returns two different values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using IntervalSets

julia&gt; find_zeros(f, -10..10) ≈ [α₀, α₁, α₂]
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IntervalSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_zeros</span>(f, <span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">..</span><span class="pl-c1">10</span>) <span class="pl-k">≈</span> [α₀, α₁, α₂]
<span class="pl-c1">true</span></pre></div>
<p dir="auto">(For tougher problems, the
<a href="https://github.com/JuliaIntervals/IntervalRootFinding.jl">IntervalRootFinding</a>
package gives guaranteed results, rather than the heuristically
identified values returned by <code>find_zeros</code>.)</p>
<h3 dir="auto"><a id="user-content-convergence" class="anchor" aria-hidden="true" href="#convergence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Convergence</h3>
<p dir="auto">For most algorithms, convergence is decided when</p>
<ul dir="auto">
<li>
<p dir="auto">The value <code>|f(x_n)| &lt;= tol</code> with <code>tol = max(atol, abs(x_n)*rtol)</code>, or</p>
</li>
<li>
<p dir="auto">the values <code>x_n ≈ x_{n-1}</code> with tolerances <code>xatol</code> and <code>xrtol</code> <em>and</em>
<code>f(x_n) ≈ 0</code> with a <em>relaxed</em> tolerance based on <code>atol</code> and <code>rtol</code>.</p>
</li>
</ul>
<p dir="auto">The <code>find_zero</code> algorithm stops if</p>
<ul dir="auto">
<li>
<p dir="auto">it encounters an <code>NaN</code> or an <code>Inf</code>, or</p>
</li>
<li>
<p dir="auto">the number of iterations exceed <code>maxevals</code></p>
</li>
</ul>
<p dir="auto">If the algorithm stops and the relaxed convergence criteria is met,
the suspected zero is returned. Otherwise an error is thrown
indicating no convergence. To adjust the tolerances, <code>find_zero</code>
accepts keyword arguments <code>atol</code>, <code>rtol</code>, <code>xatol</code>, and <code>xrtol</code>, as
seen in some examples above.</p>
<p dir="auto">The <code>Bisection</code> and <code>Roots.A42</code> methods are guaranteed to converge
even if the tolerances are set to zero, so these are the
defaults. Non-zero values for <code>xatol</code> and <code>xrtol</code> can be specified to
reduce the number of function calls when lower precision is required.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fx = ZeroProblem(sin, (3,4));

julia&gt; solve(fx, Bisection(); xatol=1/16)
3.125"><pre>julia<span class="pl-k">&gt;</span> fx <span class="pl-k">=</span> <span class="pl-c1">ZeroProblem</span>(sin, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(fx, <span class="pl-c1">Bisection</span>(); xatol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">16</span>)
<span class="pl-c1">3.125</span></pre></div>
<h2 dir="auto"><a id="user-content-an-alternate-interface" class="anchor" aria-hidden="true" href="#an-alternate-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>An alternate interface</h2>
<p dir="auto">This functionality is provided by the <code>fzero</code> function, familiar to
MATLAB users. <code>Roots</code> also provides this alternative interface:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>fzero(f, x0::Real; order=0)</code> calls a
derivative-free method. with the order specifying one of
<code>Order0</code>, <code>Order1</code>, etc.</p>
</li>
<li>
<p dir="auto"><code>fzero(f, a::Real, b::Real)</code> calls the <code>find_zero</code> algorithm with the
<code>Bisection</code> method.</p>
</li>
<li>
<p dir="auto"><code>fzeros(f, a::Real, b::Real)</code> will call <code>find_zeros</code>.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage examples</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = exp(x) - x^4
f (generic function with 2 methods)

julia&gt; fzero(f, 8, 9) ≈ α₂   # bracketing
true

julia&gt; fzero(f, -10, 0) ≈ α₀
true

julia&gt; fzeros(f, -10, 10) ≈ [α₀, α₁, α₂]
true

julia&gt; fzero(f, 3) ≈ α₁      # default is Order0()
true

julia&gt; fzero(sin, big(3), order=16)  ≈ π # uses higher order method
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x) <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">4</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fzero</span>(f, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>) <span class="pl-k">≈</span> α₂   <span class="pl-c"><span class="pl-c">#</span> bracketing</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fzero</span>(f, <span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-c1">0</span>) <span class="pl-k">≈</span> α₀
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fzeros</span>(f, <span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-c1">10</span>) <span class="pl-k">≈</span> [α₀, α₁, α₂]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fzero</span>(f, <span class="pl-c1">3</span>) <span class="pl-k">≈</span> α₁      <span class="pl-c"><span class="pl-c">#</span> default is Order0()</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fzero</span>(sin, <span class="pl-c1">big</span>(<span class="pl-c1">3</span>), order<span class="pl-k">=</span><span class="pl-c1">16</span>)  <span class="pl-k">≈</span> π <span class="pl-c"><span class="pl-c">#</span> uses higher order method</span>
<span class="pl-c1">true</span></pre></div>
</article></div>