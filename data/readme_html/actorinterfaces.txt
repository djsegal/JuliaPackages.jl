<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-actorinterfacesjl" class="anchor" aria-hidden="true" href="#actorinterfacesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ActorInterfaces.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a></p>

<p><a href="https://juliaactors.github.io/ActorInterfaces.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>A formalization of the actor model family in Julia.</p>
<p>The goal of this project is to provide a standard and usable API for actor programming. Applications written using this API will be independent from any specific actor library, and will run under all implementations of ActorInterfaces.jl.</p>
<p>There is no such thing as <em>The</em> Actor Model, there are interpretations and extensions of it.
ActorInterfaces tries to handle this diversity by defining a minimalistic base called the Classic
Model, and extensions to it.</p>
<h3><a id="user-content-the-classic-model" class="anchor" aria-hidden="true" href="#the-classic-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>Classic</code> model</h3>
<p>The Classic model is the one described by Gul Agha in the book <a href="https://dl.acm.org/doi/book/10.5555/7929" rel="nofollow">"ACTORS: A Model of
Concurrent Computation in Distributed Systems"</a>:</p>
<blockquote>
<p>Actors are computational agents which map each incoming communication
to a 3-tuple consisting of:</p>
<ol>
<li>a finite set of communications sent to other actors;</li>
<li>a new behavior (which will govern the response to the next communication processed); and,</li>
<li>a finite set of new actors created.</li>
</ol>
</blockquote>
<p><code>ActorInterfaces.Classic</code> maps these to the primitives <code>send()</code>, <code>become()</code> and <code>spawn()</code>. The incoming communication will be dispatched to <code>onmessage()</code>.</p>
<p>Agha's stack example illustrates the API:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ActorInterfaces.Classic

struct Pop
    customer::Addr
end

struct Push
    content
end

struct StackNode
    content
    link::Union{Addr, Nothing} # The next node
end

struct Forwarder
    target::Addr
end

@ctx function Classic.onmessage(me::Forwarder, msg)
    send(me.target, msg)
end

@ctx function Classic.onmessage(me::StackNode, msg::Push)
    p = spawn(StackNode(me.content, me.link))
    become(StackNode(msg.content, p))
end

@ctx function Classic.onmessage(me::StackNode, msg::Pop)
    if !isnothing(me.link)
        become(Forwarder(me.link))
    end
    send(msg.customer, me.content)
end
"><pre><span class="pl-k">using</span> ActorInterfaces<span class="pl-k">.</span>Classic

<span class="pl-k">struct</span> Pop
    customer<span class="pl-k">::</span><span class="pl-c1">Addr</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Push
    content
<span class="pl-k">end</span>

<span class="pl-k">struct</span> StackNode
    content
    link<span class="pl-k">::</span><span class="pl-c1">Union{Addr, Nothing}</span> <span class="pl-c"><span class="pl-c">#</span> The next node</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Forwarder
    target<span class="pl-k">::</span><span class="pl-c1">Addr</span>
<span class="pl-k">end</span>

<span class="pl-c1">@ctx</span> <span class="pl-k">function</span> Classic<span class="pl-k">.</span><span class="pl-en">onmessage</span>(me<span class="pl-k">::</span><span class="pl-c1">Forwarder</span>, msg)
    <span class="pl-c1">send</span>(me<span class="pl-k">.</span>target, msg)
<span class="pl-k">end</span>

<span class="pl-c1">@ctx</span> <span class="pl-k">function</span> Classic<span class="pl-k">.</span><span class="pl-en">onmessage</span>(me<span class="pl-k">::</span><span class="pl-c1">StackNode</span>, msg<span class="pl-k">::</span><span class="pl-c1">Push</span>)
    p <span class="pl-k">=</span> <span class="pl-c1">spawn</span>(<span class="pl-c1">StackNode</span>(me<span class="pl-k">.</span>content, me<span class="pl-k">.</span>link))
    <span class="pl-c1">become</span>(<span class="pl-c1">StackNode</span>(msg<span class="pl-k">.</span>content, p))
<span class="pl-k">end</span>

<span class="pl-c1">@ctx</span> <span class="pl-k">function</span> Classic<span class="pl-k">.</span><span class="pl-en">onmessage</span>(me<span class="pl-k">::</span><span class="pl-c1">StackNode</span>, msg<span class="pl-k">::</span><span class="pl-c1">Pop</span>)
    <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">isnothing</span>(me<span class="pl-k">.</span>link)
        <span class="pl-c1">become</span>(<span class="pl-c1">Forwarder</span>(me<span class="pl-k">.</span>link))
    <span class="pl-k">end</span>
    <span class="pl-c1">send</span>(msg<span class="pl-k">.</span>customer, me<span class="pl-k">.</span>content)
<span class="pl-k">end</span></pre></div>
<p><em>Please note that this runs inefficiently on implementations that lack forward-chain optimization.</em></p>
<p>Actor libraries currently provide their own API for exchanging messages with actors from the outside of the actor system. It is not yet covered by ActorInterfaces.</p>
<h3><a id="user-content-known-implementations" class="anchor" aria-hidden="true" href="#known-implementations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known implementations</h3>
<ul>
<li><a href="https://github.com/JuliaActors/QuickActors.jl">QuickActors.jl</a>, the reference implementation.</li>
</ul>
<h3><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Project Status</h3>
<p>The Classic interface settled recently, major semantical changes are unlikely.
Extensions will be added continously. If you have an extension idea, please open an issue or
a topic on Discourse.</p>
</article></div>