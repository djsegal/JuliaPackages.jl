<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mccormickjl" class="anchor" aria-hidden="true" href="#mccormickjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>McCormick.jl</h1>
<p dir="auto">A Forward McCormick Operator Library</p>
<table>
<thead>
<tr>
<th align="center"><strong>Linux/Windows</strong></th>
<th align="center"><strong>Coverage</strong></th>
<th align="center"><strong>Persistent DOI</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/PSORLab/McCormick.jl/actions?query=workflow%3ACI"><img src="https://github.com/PSORLab/McCormick.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/PSORLab/McCormick.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f05930036817b05c5df6372c303dcc2142ab43ff05a84f186b3809ccebf785e1/68747470733a2f2f636f6465636f762e696f2f67682f50534f524c61622f4d63436f726d69636b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/PSORLab/McCormick.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://zenodo.org/badge/latestdoi/245830962" rel="nofollow"><img src="https://camo.githubusercontent.com/60d46da493e832f62ab319690a8d8c6b29fd26d587ff5fd2b703a8d4a802ec5f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3234353833303936322e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/245830962.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">McCormick.jl is a component package in the EAGO ecosystem and is reexported by <a href="https://github.com/PSORLab/EAGO.jl">EAGO.jl</a>. It contains a library of forward McCormick operators (both nonsmooth and differentiable). Documentation for this is included in the <a href="https://github.com/PSORLab/EAGO.jl">EAGO.jl</a> package and additional usage examples are included in <a href="https://github.com/PSORLab/EAGO-notebooks">EAGO-notebooks</a> as Jupyter notebooks.</p>
<h2 dir="auto"><a id="user-content-mccormick-operator-variants" class="anchor" aria-hidden="true" href="#mccormick-operator-variants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>McCormick operator variants</h2>
<p dir="auto">Each McCormick object is associated with a
parameter <code>T &lt;: RelaxTag</code> which is either <code>NS</code> for nonsmooth relaxations (<a href="https://epubs.siam.org/doi/abs/10.1137/080717341" rel="nofollow">Mitsos2009</a>, <a href="https://link.springer.com/article/10.1007/s10898-011-9664-7" rel="nofollow">Scott2011</a>), <code>MV</code> for multivariate relaxations (<a href="https://link.springer.com/article/10.1007/s10898-014-0176-0" rel="nofollow">Tsoukalas2014</a>, <a href="https://link.springer.com/article/10.1007/s10898-016-0470-0" rel="nofollow">Najman2017</a>),
and <code>Diff</code> for differentiable relaxations (<a href="https://link.springer.com/article/10.1007/s10898-016-0440-6" rel="nofollow">Khan2016</a>, <a href="https://link.springer.com/article/10.1007/s10898-017-0601-2" rel="nofollow">Khan2018</a>, <a href="https://www.tandfonline.com/doi/abs/10.1080/02331934.2018.1534108" rel="nofollow">Khan2019</a>). Conversion between <code>MV</code>, <code>NS</code>, and <code>Diff</code> relax tags are not currently supported. Convex and concave envelopes are used to compute relaxations of univariate functions.</p>
<h2 dir="auto"><a id="user-content-supported-operators" class="anchor" aria-hidden="true" href="#supported-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Supported Operators</strong></h2>
<p dir="auto">In addition to supporting the implicit relaxation routines of (<a href="https://www.tandfonline.com/doi/abs/10.1080/10556788.2014.924514?journalCode=goms20" rel="nofollow">Stuber 2015</a>), this package
supports the computation of convex/concave relaxations (and associated subgradients) for
expressions containing the following operations:</p>
<p dir="auto"><strong>Common algebraic expressions</strong>: <code>inv</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>exp</code>, <code>exp2</code>, <code>exp10</code>,
<code>sqrt</code>, <code>+</code>, <code>-</code>, <code>^</code>, <code>min</code>, <code>max</code>, <code>/</code>, <code>*</code>, <code>abs</code>, <code>step</code>, <code>sign</code>, <code>deg2rad</code>, <code>rad2deg</code>, <code>abs2</code>, <code>cbrt</code>, <code>fma</code></p>
<p dir="auto"><strong>Trignometric Functions</strong>: <code>sin</code>, <code>cos</code>, <code>tan</code>, <code>asin</code>, <code>acos</code>, <code>atan</code>, <code>sec</code>, <code>csc</code>, <code>cot</code>, <code>asec</code>, <code>acsc</code>, <code>acot</code>, <code>sind</code>, <code>cosd</code>, <code>tand</code>, <code>asind</code>, <code>acosd</code>, <code>atand</code>, <code>secd</code>, <code>cscd</code>, <code>cotd</code>, <code>asecd</code>, <code>acscd</code>, <code>acotd</code>, <code>sinpi</code>, <code>cospi</code></p>
<p dir="auto"><strong>Hyperbolic Functions</strong>: <code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>asinh</code>, <code>acosh</code>, <code>atanh</code>, <code>sech</code>, <code>csch</code>, <code>coth</code>, <code>acsch</code>, <code>acoth</code></p>
<p dir="auto"><strong>Special Functions</strong>: <code>erf</code>, <code>erfc</code>, <code>erfcinv</code>, <code>erfc</code></p>
<p dir="auto"><strong>Activation Functions</strong>: <code>relu</code>, <code>leaky_relu</code>, <code>param_relu</code>, <code>sigmoid</code>, <code>bisigmoid</code>,
<code>softsign</code>, <code>softplus</code>, <code>maxtanh</code>, <code>pentanh</code>, <code>gelu</code>,
<code>elu</code>, <code>selu</code>, <code>swish1</code></p>
<p dir="auto"><strong>Common Algebraic Expressions</strong>: <code>xlogx</code>, <code>arh</code>, <code>xexpax</code></p>
<p dir="auto"><strong>Bound Specification Functions</strong>: <code>positive</code>, <code>negative</code>, <code>lower_bnd</code>, <code>upper_bnd</code>, <code>bnd</code></p>
<p dir="auto"><strong>Other Functions</strong>: <code>one</code>, <code>zero</code>, <code>intersect</code>, <code>real</code>, <code>dist</code>, <code>eps</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code></p>
<p dir="auto">Differentiable relaxations (<code>Diff &lt;: RelaxTag</code>) are supported for the functions given in <a href="https://link.springer.com/article/10.1007/s10898-016-0440-6" rel="nofollow">Khan2016</a>, <a href="https://link.springer.com/article/10.1007/s10898-017-0601-2" rel="nofollow">Khan2018</a>, <a href="https://www.tandfonline.com/doi/abs/10.1080/02331934.2018.1534108" rel="nofollow">Khan2019</a>. However, differentiable relaxations for other nonsmooth terms listed above have yet to be developed and as such have been omitted.</p>
<h2 dir="auto"><a id="user-content-bounding-a-function-via-mccormick-operators" class="anchor" aria-hidden="true" href="#bounding-a-function-via-mccormick-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Bounding a function via McCormick operators</strong></h2>
<p dir="auto">In order to bound a function using a McCormick relaxation, you first construct a
structure that bounds the input variables and then you pass these variables
to a function.</p>
<p dir="auto">In the example below, convex/concave relaxations of the function <code>f(x) = sin(2x) + exp(x) - x</code>
are calculated at <code>x = 1</code> on the interval <code>[-2,3]</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using McCormick

# create MC object for x = 2.0 on [1.0,3.0] for relaxing
# a function f(x) on the interval Intv

f(x) = x*(x-5.0)*sin(x)

x = 2.0                          # value of independent variable x
Intv = Interval(1.0,4.0)         # define interval to relax over
                                 # Note that McCormick.jl reexports IntervalArithmetic.jl
                                 # and StaticArrays. So no using statement for these is
                                 # necessary.
# create McCormick object
xMC = MC{1,NS}(x,Intv,1)

fMC = f(xMC)             # relax the function

cv = fMC.cv              # convex relaxation
cc = fMC.cc              # concave relaxation
cvgrad = fMC.cv_grad     # subgradient/gradient of convex relaxation
ccgrad = fMC.cc_grad     # subgradient/gradient of concave relaxation
Iv = fMC.Intv           # retrieve interval bounds of f(x) on Intv"><pre><span class="pl-k">using</span> McCormick

<span class="pl-c"><span class="pl-c">#</span> create MC object for x = 2.0 on [1.0,3.0] for relaxing</span>
<span class="pl-c"><span class="pl-c">#</span> a function f(x) on the interval Intv</span>

<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">*</span>(x<span class="pl-k">-</span><span class="pl-c1">5.0</span>)<span class="pl-k">*</span><span class="pl-c1">sin</span>(x)

x <span class="pl-k">=</span> <span class="pl-c1">2.0</span>                          <span class="pl-c"><span class="pl-c">#</span> value of independent variable x</span>
Intv <span class="pl-k">=</span> <span class="pl-c1">Interval</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">4.0</span>)         <span class="pl-c"><span class="pl-c">#</span> define interval to relax over</span>
                                 <span class="pl-c"><span class="pl-c">#</span> Note that McCormick.jl reexports IntervalArithmetic.jl</span>
                                 <span class="pl-c"><span class="pl-c">#</span> and StaticArrays. So no using statement for these is</span>
                                 <span class="pl-c"><span class="pl-c">#</span> necessary.</span>
<span class="pl-c"><span class="pl-c">#</span> create McCormick object</span>
xMC <span class="pl-k">=</span> <span class="pl-c1">MC</span><span class="pl-c1">{1,NS}</span>(x,Intv,<span class="pl-c1">1</span>)

fMC <span class="pl-k">=</span> <span class="pl-c1">f</span>(xMC)             <span class="pl-c"><span class="pl-c">#</span> relax the function</span>

cv <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cv              <span class="pl-c"><span class="pl-c">#</span> convex relaxation</span>
cc <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cc              <span class="pl-c"><span class="pl-c">#</span> concave relaxation</span>
cvgrad <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cv_grad     <span class="pl-c"><span class="pl-c">#</span> subgradient/gradient of convex relaxation</span>
ccgrad <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cc_grad     <span class="pl-c"><span class="pl-c">#</span> subgradient/gradient of concave relaxation</span>
Iv <span class="pl-k">=</span> fMC<span class="pl-k">.</span>Intv           <span class="pl-c"><span class="pl-c">#</span> retrieve interval bounds of f(x) on Intv</span></pre></div>
<p dir="auto">Plotting the results, we can easily visualize the convex and concave
relaxations, interval bounds, and affine bounds constructed using the subgradient
at the middle of X.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="Figure_1.png"><img src="Figure_1.png" alt="Figure_1" style="max-width: 100%;"></a></p>
<p dir="auto">This can readily be extended to multivariate functions as shown below</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
f(x) = max(x[1],x[2])

x = [2.0 1.0]                                    # values of independent variable x
Intv = [Interval(-4.0,5.0), Interval(-5.0,3.0)]  # define intervals to relax over

# create McCormick object
xMC = [MC{2,Diff}(x[i], Intv[i], i) for i=1:2)]

fMC = f(xMC)            # relax the function

cv = fMC.cv              # convex relaxation
cc = fMC.cc              # concave relaxation
cvgrad = fMC.cv_grad     # subgradient/gradient of convex relaxation
ccgrad = fMC.cc_grad     # subgradient/gradient of concave relaxation
Iv = fMC.Intv            # retrieve interval bounds of f(x) on Intv"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">max</span>(x[<span class="pl-c1">1</span>],x[<span class="pl-c1">2</span>])

x <span class="pl-k">=</span> [<span class="pl-c1">2.0</span> <span class="pl-c1">1.0</span>]                                    <span class="pl-c"><span class="pl-c">#</span> values of independent variable x</span>
Intv <span class="pl-k">=</span> [<span class="pl-c1">Interval</span>(<span class="pl-k">-</span><span class="pl-c1">4.0</span>,<span class="pl-c1">5.0</span>), <span class="pl-c1">Interval</span>(<span class="pl-k">-</span><span class="pl-c1">5.0</span>,<span class="pl-c1">3.0</span>)]  <span class="pl-c"><span class="pl-c">#</span> define intervals to relax over</span>

<span class="pl-c"><span class="pl-c">#</span> create McCormick object</span>
xMC <span class="pl-k">=</span> [<span class="pl-c1">MC</span><span class="pl-c1">{2,Diff}</span>(x[i], Intv[i], i) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>)]

fMC <span class="pl-k">=</span> <span class="pl-c1">f</span>(xMC)            <span class="pl-c"><span class="pl-c">#</span> relax the function</span>

cv <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cv              <span class="pl-c"><span class="pl-c">#</span> convex relaxation</span>
cc <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cc              <span class="pl-c"><span class="pl-c">#</span> concave relaxation</span>
cvgrad <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cv_grad     <span class="pl-c"><span class="pl-c">#</span> subgradient/gradient of convex relaxation</span>
ccgrad <span class="pl-k">=</span> fMC<span class="pl-k">.</span>cc_grad     <span class="pl-c"><span class="pl-c">#</span> subgradient/gradient of concave relaxation</span>
Iv <span class="pl-k">=</span> fMC<span class="pl-k">.</span>Intv            <span class="pl-c"><span class="pl-c">#</span> retrieve interval bounds of f(x) on Intv</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="Figure_3.png"><img src="Figure_3.png" alt="Figure_3" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-citing-mccormickjl" class="anchor" aria-hidden="true" href="#citing-mccormickjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing McCormick.jl</h2>
<p dir="auto">McCormick.jl is a component of the EAGO.jl ecosystem. Please cite the following paper when using McCormick.jl:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=" M. E. Wilhelm &amp; M. D. Stuber (2020) EAGO.jl: easy advanced global optimization in Julia,
 Optimization Methods and Software, DOI: 10.1080/10556788.2020.1786566"><pre class="notranslate"><code> M. E. Wilhelm &amp; M. D. Stuber (2020) EAGO.jl: easy advanced global optimization in Julia,
 Optimization Methods and Software, DOI: 10.1080/10556788.2020.1786566
</code></pre></div>
<h2 dir="auto"><a id="user-content-unit-testing-note" class="anchor" aria-hidden="true" href="#unit-testing-note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unit Testing Note</h2>
<p dir="auto">While McCormick.jl generally supports Julia 1.1+, some functions may return an error for Julia versions less than 1.3. In particular, <code>cbrt</code> will result in a StackOverflow when called. McCormick is unit tested using Julia versions 1.3 and beyond.</p>
<h3 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h3>
<ul dir="auto">
<li><strong>Khan KA, Watson HAJ, Barton PI (2017).</strong> Differentiable McCormick relaxations. <em>Journal of Global Optimization</em>, 67(4):687-729.</li>
<li><strong>Khan KA, Wilhelm ME, Stuber MD, Cao H, Watson HAJ, Barton PI (2018).</strong> Corrections to: Differentiable McCormick relaxations. <em>Journal of Global Optimization</em>, 70(3):705-706.</li>
<li><strong>Khan KA (2019).</strong> Whitney differentiability of optimal-value functions for bound-constrained convex programming problems. <em>Optimization</em> 68(2-3): 691-711</li>
<li><strong>Mitsos A, Chachuat B, and Barton PI. (2009).</strong> McCormick-based relaxations of algorithms. <em>SIAM Journal on Optimization</em>, 20(2):573–601.</li>
<li><strong>Najman J, Bongratz D, Tsoukalas A, and Mitsos A (2017).</strong> Erratum to: Multivariate McCormick relaxations. <em>Journal of Global Optimization</em>, 68:219-225.</li>
<li><strong>Najman, J, Bongartz, D., and Mitsos A (2019).</strong> "Relaxations of thermodynamic property and costing models in process engineering." <em>Computers &amp; Chemical Engineering</em>, 130, 106571.</li>
<li><strong>Scott JK,  Stuber MD, and Barton PI. (2011).</strong> Generalized McCormick relaxations. <em>Journal of Global Optimization</em>, 51(4):569–606.</li>
<li><strong>Stuber MD, Scott JK, Barton PI (2015).</strong> Convex and concave relaxations of implicit functions. <em>Optim. Methods Softw.</em> 30(3), 424–460</li>
<li><strong>Tsoukalas A and Mitsos A (2014).</strong> Multivariate McCormick Relaxations. <em>Journal of Global Optimization</em>, 59:633–662.</li>
<li><strong>Wechsung A, Scott JK, Watson HAJ, and Barton PI. (2015).</strong> Reverse propagation of McCormick relaxations. <em>Journal of Global Optimization</em> 63(1):1-36.</li>
</ul>
</article></div>