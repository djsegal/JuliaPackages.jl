<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simpledrawing" class="anchor" aria-hidden="true" href="#simpledrawing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleDrawing</h1>
<p dir="auto">This package provides some convenient drawing tools derived from the
<code>Plots</code> module. It also defines the <code>draw()</code> function that can be extended
by other modules including <code>DrawSimpleGraphs</code>, <code>HyperbolicPlane</code>, and
(maybe some day) poset drawing for <code>SimplePosets</code>.</p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<h3 dir="auto"><a id="user-content-general" class="anchor" aria-hidden="true" href="#general"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General</h3>
<ul dir="auto">
<li><code>newdraw()</code> presents a blank canvas on which to draw (and erases anything
that's already in that window).</li>
<li><code>finish()</code> ensures that the figure appears on the screen with
aspect ratio equal to 1, and that
we hide the axes, grid, and legend.</li>
<li><code>draw()</code> does nothing. It is a placeholder function for other modules to
override.</li>
<li><code>resize_gr_window(wide=800,tall=600)</code> changes the size of the GR window.</li>
</ul>
<h3 dir="auto"><a id="user-content-drawing-specific-shapes" class="anchor" aria-hidden="true" href="#drawing-specific-shapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Drawing Specific Shapes</h3>
<ul dir="auto">
<li><code>draw_point(x::Real,y::Real;opts...)</code> plots a point (small disk). This
may also be invoked as <code>draw_point(z::Complex)</code>. If <code>plist</code> is a list of
complex numbers, may also use <code>draw_point(plist)</code> to draw all those points.</li>
<li><code>draw_segment(x::Real,y::Real,xx::Real,yy::Real;opts...)</code> draws a
line segment from <code>(x,y)</code> to <code>(xx,yy)</code>. May also be invoked as
<code>draw_segment(z::Complex,zz::Complex)</code>.</li>
<li><code>draw_vector(x::Real,y::Real)</code> draws a vector from <code>(0,0)</code> to <code>(x,y)</code>. A
different base point may be specified <code>draw_vector(x,y,basex,basey)</code> in which
case the vector starts at <code>(basex,basey)</code> and extends to <code>(basex+x,basey+y)</code>.
This may also be used with complex arguments: <code>draw_vector(z)</code> and
<code>draw_vector(z, basez)</code>.</li>
<li><code>draw_arc(x::Real,y::Real,r::Real,t1::Real,t2::Real;opts...)</code> draws an
arc of a circle centered at <code>(x,y)</code>, with radius <code>r</code>, and arcing between
angles <code>t1</code> and <code>t2</code>.</li>
<li><code>draw_arc(a::Complex,b::Complex,c::Complex;opts...)</code> draws
the arc with end points <code>a</code> and <code>c</code> passing through <code>b</code>.</li>
<li><code>draw_circle(x::Real,y::Real,r::Real;opts...)</code> draws a circle centered
at <code>(x,y)</code> with radius <code>r</code>. Also <code>draw_circle(z::Complex,r::Real;opts...)</code>.</li>
<li><code>draw_disc</code> works just like <code>draw_circle</code>, but the interior is filled. Try, for example,
<code>draw_disc(0,1,3; color=:yellow, linecolor=:red)</code>.</li>
<li><code>draw_curve(pts;opts...)</code> draws a curve through the points specified by <code>pts</code>, a
one-dimensional array of complex numbers. By default, this gives a closed curve.
To draw an open curve, use <code>draw(pts,false;opts...)</code></li>
<li><code>draw_rectangle(x::Real,y::Real,xx::Real,yy::Real;opts...)</code> draws a rectangle
with corners <code>(x,y)</code> and <code>(xx,yy)</code>.
Also available as <code>draw_rectangle(w::Complex,z::Complex)</code>.</li>
<li><code>draw_polygon(xs, ys; opts...)</code> draws a closed polygon based on the lists of real coordinates <code>xs</code> and <code>ys</code>. Also available as <code>draw_polygon(zs; opts)</code> where <code>zs</code> is a list of complex numbers.</li>
</ul>
<h3 dir="auto"><a id="user-content-drawing-coordinate-axes" class="anchor" aria-hidden="true" href="#drawing-coordinate-axes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Drawing Coordinate Axes</h3>
<p dir="auto">The functions <code>draw_xaxis</code> and <code>draw_yaxis</code> can be used to create axes for figure.
We assume that the axes emanate from the origin.</p>
<ul dir="auto">
<li><code>draw_xaxis(x)</code> draws an axis from the origin to <code>(x,0)</code>.</li>
<li><code>draw_xaxis(x1,x2)</code> is equivalent to calling <code>draw_xaxis(x1)</code> and then <code>draw_xaxis(x2)</code>.</li>
<li><code>draw_xaxis()</code> draws a pair of x-axes extended 10% further than the values returned by <code>xlims()</code>.</li>
</ul>
<p dir="auto">The function <code>draw_yaxis()</code> has analogous behavior.</p>
<p dir="auto">A call to <code>draw_axes()</code> invokes <code>draw_xaxis()</code> and <code>draw_yaxis()</code>.</p>
<p dir="auto">The functions <code>draw_xtick</code> and <code>draw_ytick</code> can be used to make small
tick marks on the axes.</p>
<ul dir="auto">
<li><code>draw_xtick(x,len)</code> draws a small tick mark with total length <code>len</code>
at the point <code>x</code> on the x-axis.</li>
<li><code>draw_xtick(xlist,len)</code> calls <code>draw_xtick</code> for the values in <code>xlist</code>.</li>
</ul>
<p dir="auto">If <code>len</code> is omitted, a default value is used. The function <code>draw_ytick</code>
works analogously.</p>
<p dir="auto">The size of the drawing area can be determined with the function <code>corners</code>
which returns the lower left and upper right corners of the drawing area
as a pair of complex numbers. (See <code>xlims</code> and <code>ylims</code> in the <code>Plots</code> module.)</p>
<h4 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Plots, SimpleDrawing
julia&gt; plot(sin,-5,5,linewidth=2,color=:black)
julia&gt; draw_xaxis()
julia&gt; draw_yaxis()
julia&gt; draw_xtick(-5:5)
julia&gt; finish()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots, SimpleDrawing
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(sin,<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>,linewidth<span class="pl-k">=</span><span class="pl-c1">2</span>,color<span class="pl-k">=</span><span class="pl-c1">:black</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw_xaxis</span>()
julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw_yaxis</span>()
julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw_xtick</span>(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">finish</span>()</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="axes-example.png"><img src="axes-example.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-supporting-functions" class="anchor" aria-hidden="true" href="#supporting-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supporting Functions</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>find_center(a,b,c)</code> returns the center of the circle that passes through
the three points (represented as complex numbers). Returns
<code>inf + inf*im</code> if the points are collinear.</p>
</li>
<li>
<p dir="auto"><code>non_collinear_check(a,b,c)</code> checks if the three points (represented as
complex numbers) are noncollinear; returns <code>true</code> if so and <code>false</code> if they
are collinear (including if two are the same).</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-spying-a-matrix" class="anchor" aria-hidden="true" href="#spying-a-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Spying a matrix</h2>
<p dir="auto"><code>my_spy(A)</code> creates a black-and-white image representing the matrix <code>A</code>
in which nonzero entries are black squares and zeros are white squares.</p>
<p dir="auto">For example, if the matrix is this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; A
5×8 Array{Int64,2}:
 1  1  0  0  1  1  1  0
 1  0  1  0  0  1  1  1
 0  1  0  1  1  0  1  0
 0  1  0  1  0  1  1  1
 1  1  1  1  0  0  1  0"><pre class="notranslate"><code>julia&gt; A
5×8 Array{Int64,2}:
 1  1  0  0  1  1  1  0
 1  0  1  0  0  1  1  1
 0  1  0  1  1  0  1  0
 0  1  0  1  0  1  1  1
 1  1  1  1  0  0  1  0
</code></pre></div>
<p dir="auto">then <code>my_spy(A)</code> creates this image:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="my_spy.png"><img src="my_spy.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using SimpleDrawing, Plots
newdraw()
draw_circle(1,1,2; color=:red)
draw_arc(2,1,1,0,pi; color=:blue, linestyle=:dash)
draw_segment(-1+im,1+im; color=:green, linestyle=:dot)
savefig(&quot;example.png&quot;)"><pre class="notranslate"><code>using SimpleDrawing, Plots
newdraw()
draw_circle(1,1,2; color=:red)
draw_arc(2,1,1,0,pi; color=:blue, linestyle=:dash)
draw_segment(-1+im,1+im; color=:green, linestyle=:dot)
savefig("example.png")
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/example.png"><img src="/example.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-splines" class="anchor" aria-hidden="true" href="#splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Splines</h2>
<p dir="auto">The implementation of <code>draw_curve</code> relies on cubic splines. Let <code>y</code> be an
<code>n</code>-long array of numbers. Then use one of these to create an interpolating
spline:</p>
<ul dir="auto">
<li><code>S = Spline(y,:open)</code> for an open-ended spline.</li>
<li><code>S = Spline(y,:closed)</code> for a periodic spline.</li>
</ul>
<p dir="auto">In both cases, <code>S(1)==y[1]</code> through <code>S(n)==y[n]</code>. For closed splines, however,
<code>S(n+1)==y[1]</code> and so forth.</p>
<p dir="auto">Note that while <code>S</code> can be applied like a function, if is not a Julia <code>Function</code>.
Thus <code>plot(S,1,4)</code> won't work. To convert a spline to a callable function, use
<code>funk(S)</code>.</p>
<p dir="auto">The derivative of <code>S</code> is available as <code>S'</code>. The derivative is also of type
<code>Spline</code>; to plot its values over the interval <code>[a,b]</code>, use <code>plot(funk(S'),a,b)</code>.</p>
</article></div>