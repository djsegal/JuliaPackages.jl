<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simpledrawing" class="anchor" aria-hidden="true" href="#simpledrawing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleDrawing</h1>
<p><a href="https://travis-ci.org/scheinerman/SimpleDrawing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dd69964ee7ec33a011357787b8233d7b86aac7f9/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f53696d706c6544726177696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/SimpleDrawing.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/SimpleDrawing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fb4408151ee77c798a1b9e74ed449d13de0791d3/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f53696d706c6544726177696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/SimpleDrawing.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides some convenient drawing tools derived from the
<code>Plots</code> module. It also defines the <code>draw()</code> function that can be extended
by other modules including <code>DrawSimpleGraphs</code>, <code>HyperbolicPlane</code>, and
(maybe some day) poset drawing for <code>SimplePosets</code>.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<h4><a id="user-content-general" class="anchor" aria-hidden="true" href="#general"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General</h4>
<ul>
<li><code>newdraw()</code> presents a blank canvas on which to draw (and erases anything
that's already in that window).</li>
<li><code>finish()</code> ensures that the figure appears on the screen with
aspect ratio equal to 1, and that
we hide the axes, grid, and legend.</li>
<li><code>draw()</code> does nothing. It is a placeholder function for other modules to
override.</li>
</ul>
<h4><a id="user-content-drawing-specific-shapes" class="anchor" aria-hidden="true" href="#drawing-specific-shapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Drawing Specific Shapes</h4>
<ul>
<li><code>draw_point(x::Real,y::Real;opts...)</code> plots a point (small disk). This
may also be invoked as <code>draw_point(z::Complex)</code>. If <code>plist</code> is a list of
complex numbers, may also use <code>draw_point(plist)</code> to draw all those points.</li>
<li><code>draw_segment(x::Real,y::Real,xx::Real,yy::Real;opts...)</code> draws a
line segment from <code>(x,y)</code> to <code>(xx,yy)</code>. May also be invoked as
<code>draw_segment(z::Complex,zz::Complex)</code>.</li>
<li><code>draw_vector(x::Real,y::Real)</code> draws a vector from <code>(0,0)</code> to <code>(x,y)</code>. A
different base point may be specified <code>draw_vector(x,y,basex,basey)</code> in which
case the vector starts at <code>(basex,basey)</code> and extends to <code>(basex+x,basey+y)</code>.
This may also be used with complex arguments: <code>draw_vector(z)</code> and
<code>draw_vector(z, basez)</code>.</li>
<li><code>draw_arc(x::Real,y::Real,r::Real,t1::Real,t2::Real;opts...)</code> draws an
arc of a circle centered at <code>(x,y)</code>, with radius <code>r</code>, and arcing between
angles <code>t1</code> and <code>t2</code>.</li>
<li><code>draw_arc(a::Complex,b::Complex,c::Complex;opts...)</code> draws
the arc with end points <code>a</code> and <code>c</code> passing through <code>b</code>.</li>
<li><code>draw_circle(x::Real,y::Real,r::Real;opts...)</code> draws a circle centered
at <code>(x,y)</code> with radius <code>r</code>. Also <code>draw_circle(z::Complex,r::Real;opts...)</code>.</li>
<li><code>draw_curve(pts;opts...)</code> draws a curve through the points specified by <code>pts</code>, a
one-dimensional array of complex numbers. By default, this gives a closed curve.
To draw an open curve, use <code>draw(pts,false;opts...)</code></li>
<li><code>draw_rectangle(x::Real,y::Real,xx::Real,yy::Real;opts...)</code> draws a rectangle
with corners <code>(x,y)</code> and <code>(xx,yy)</code>.
Also available as <code>draw_rectangle(w::Complex,z::Complex)</code>.</li>
</ul>
<h4><a id="user-content-supporting-functions" class="anchor" aria-hidden="true" href="#supporting-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supporting Functions</h4>
<ul>
<li>
<p><code>find_center(a,b,c)</code> returns the center of the circle that passes through
the three points (represented as complex numbers). Returns
<code>inf + inf*im</code> if the points are collinear.</p>
</li>
<li>
<p><code>non_collinear_check(a,b,c)</code> checks if the three points (represented as
complex numbers) are noncollinear; returns <code>true</code> if so and <code>false</code> if they
are collinear (including if two are the same).</p>
</li>
</ul>
<h2><a id="user-content-spying-a-matrix" class="anchor" aria-hidden="true" href="#spying-a-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spying a matrix</h2>
<p><code>my_spy(A)</code> creates a black-and-white image representing the matrix <code>A</code>
in which nonzero entries are black squares and zeros are white squares.</p>
<p>For example, if the matrix is this:</p>
<pre><code>julia&gt; A
5Ã—8 Array{Int64,2}:
 1  1  0  0  1  1  1  0
 1  0  1  0  0  1  1  1
 0  1  0  1  1  0  1  0
 0  1  0  1  0  1  1  1
 1  1  1  1  0  0  1  0
</code></pre>
<p>then <code>my_spy(A)</code> creates this image:</p>
<p><a target="_blank" rel="noopener noreferrer" href="/my_spy.png"><img src="/my_spy.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<pre><code>using SimpleDrawing, Plots
newdraw()
draw_circle(1,1,2; color=:red)
draw_arc(2,1,1,0,pi; color=:blue, linestyle=:dash)
draw_segment(-1+im,1+im; color=:green, linestyle=:dot)
savefig("example.png")
</code></pre>
<p><a target="_blank" rel="noopener noreferrer" href="/example.png"><img src="/example.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-splines" class="anchor" aria-hidden="true" href="#splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Splines</h2>
<p>The implementation of <code>draw_curve</code> relies on cubic splines. Let <code>y</code> be an
<code>n</code>-long array of numbers. Then use one of these to create an interpolating
spline:</p>
<ul>
<li><code>S = Spline(y,:open)</code> for an open-ended spline.</li>
<li><code>S = Spline(y,:closed)</code> for a periodic spline.</li>
</ul>
<p>In both cases, <code>S(1)==y[1]</code> through <code>S(n)==y[n]</code>. For closed splines, however,
<code>S(n+1)==y[1]</code> and so forth.</p>
<p>Note that while <code>S</code> can be applied like a function, if is not a Julia <code>Function</code>.
Thus <code>plot(S,1,4)</code> won't work. To convert a spline to a callable function, use
<code>funk(S)</code>.</p>
<p>The derivative of <code>S</code> is available as <code>S'</code>. The derivative is also of type
<code>Spline</code>; to plot its values over the interval <code>[a,b]</code>, use <code>plot(funk(S'),a,b)</code>.</p>
</article></div>