<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-vectorizedrng" class="anchor" aria-hidden="true" href="#vectorizedrng"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VectorizedRNG</h1>
<p><a href="https://chriselrod.github.io/VectorizedRNG.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://chriselrod.github.io/VectorizedRNG.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/chriselrod/VectorizedRNG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be964b68e1822afb11a5659da49e969da400f202/68747470733a2f2f7472617669732d63692e636f6d2f6368726973656c726f642f566563746f72697a6564524e472e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/chriselrod/VectorizedRNG.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chriselrod/VectorizedRNG-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5bb15e6014fde66cc2a693ff61a540f2477f74a7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6368726973656c726f642f566563746f72697a6564524e472e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/chriselrod/VectorizedRNG.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chriselrod/VectorizedRNG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/184a1a3fbfacace7623ecab1016c1e508becc43f/68747470733a2f2f636f6465636f762e696f2f67682f6368726973656c726f642f566563746f72697a6564524e472e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/chriselrod/VectorizedRNG.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This library provides a vectorized Xoshiro256++ random number generator. The larger the host computers SIMD vector width, the better they will perform. On a machine with AVX-512, they are faster than <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/" rel="nofollow">SIMD-oriented Fast Mersenne Twister (SFMT) </a>. Base Julia uses dSFMT,  which in a few tests appears to outperform this library on avx2 systems in generating uniformly distributed random numbers.</p>
<p>You can get a thread-local instance of the <code>Xoshiro</code> generator with <code>local_rng()</code>. Each parallel stream jumps ahead <code>2^128</code> samples, which should be more than enough samples per stream for any real calculation. Each thread gets 8 parallel streams with AVX, or 16 with AVX512, allowing there to be up to <code>2^125</code> or <code>2^124</code> threads with AVX512.</p>
<p>Testing on an old haswell machine (AVX2-only):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, Random, VectorizedRNG

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">1024</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">randn!</span>(<span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">7.235</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">7.900</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">8.034</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">233.290</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">5</span>
 
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">randn!</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">3.744</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">4.156</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">4.137</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">59.169</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">8</span></pre></div>
<p>The performance advantage is thanks primarily to a fast SIMD <a href="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform" rel="nofollow">Box-Muller</a> implementation; <code>randn(::MersenneTwister)</code> uses the ziggurat algorithm, which is more efficient for scalars. Performance is closer when only comparing random-uniform generation:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">rand!</span>(<span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">791.047</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">904.541</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">915.753</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">13.978</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">85</span>
 
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">rand!</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">513.000</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">568.578</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">571.597</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">4.706</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">192</span></pre></div>
<p>This library shines on a system with AVX512:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, Random, VectorizedRNG

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">1024</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">randn!</span>(<span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">4.105</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">4.318</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">4.345</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">7.111</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">randn!</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">1.270</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">1.275</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">1.277</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">2.297</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">rand!</span>(<span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">566.435</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">568.386</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">569.601</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">745.505</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">184</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">rand!</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-k">$</span>x)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">201.215</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">201.531</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">201.761</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">269.386</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">590</span></pre></div>
<h2><a id="user-content-setting-the-seed" class="anchor" aria-hidden="true" href="#setting-the-seed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting the seed</h2>
<p>VectorizedRNG is initialized with a random seed (based on the default <code>Random.GLOBAL_RNG</code>) when loaded, but <code>Random.seed!</code> wont change the state of the VectorizedRNG. You can set the seed of the VectorizedRNG with <code>VectorizedRNG.seed!</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> VectorizedRNG

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-c1">15</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">15</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.580812</span>  <span class="pl-c1">0.813531</span>  <span class="pl-c1">0.359055</span>  <span class="pl-c1">0.590277</span>  <span class="pl-c1">0.551968</span>  <span class="pl-c1">0.635421</span>  <span class="pl-c1">0.160614</span>  <span class="pl-c1">0.312387</span>  <span class="pl-c1">0.00787783</span>  <span class="pl-c1">0.554571</span>  <span class="pl-c1">0.368705</span>  <span class="pl-c1">0.0219756</span>  <span class="pl-c1">0.804188</span>  <span class="pl-c1">0.0740875</span>  <span class="pl-c1">0.939065</span>

julia<span class="pl-k">&gt;</span> VectorizedRNG<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-c1">15</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">15</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.371016</span>  <span class="pl-c1">0.804553</span>  <span class="pl-c1">0.243923</span>  <span class="pl-c1">0.261726</span>  <span class="pl-c1">0.875966</span>  <span class="pl-c1">0.942672</span>  <span class="pl-c1">0.875786</span>  <span class="pl-c1">0.0255004</span>  <span class="pl-c1">0.236359</span>  <span class="pl-c1">0.59697</span>  <span class="pl-c1">0.480488</span>  <span class="pl-c1">0.790366</span>  <span class="pl-c1">0.0263995</span>  <span class="pl-c1">0.715227</span>  <span class="pl-c1">0.514725</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-c1">15</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">15</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.246595</span>  <span class="pl-c1">0.326417</span>  <span class="pl-c1">0.98997</span>  <span class="pl-c1">0.335991</span>  <span class="pl-c1">0.839723</span>  <span class="pl-c1">0.628247</span>  <span class="pl-c1">0.814513</span>  <span class="pl-c1">0.924231</span>  <span class="pl-c1">0.398405</span>  <span class="pl-c1">0.604068</span>  <span class="pl-c1">0.915064</span>  <span class="pl-c1">0.984332</span>  <span class="pl-c1">0.773448</span>  <span class="pl-c1">0.325699</span>  <span class="pl-c1">0.490881</span>

julia<span class="pl-k">&gt;</span> VectorizedRNG<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-c1">15</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">15</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.371016</span>  <span class="pl-c1">0.804553</span>  <span class="pl-c1">0.243923</span>  <span class="pl-c1">0.261726</span>  <span class="pl-c1">0.875966</span>  <span class="pl-c1">0.942672</span>  <span class="pl-c1">0.875786</span>  <span class="pl-c1">0.0255004</span>  <span class="pl-c1">0.236359</span>  <span class="pl-c1">0.59697</span>  <span class="pl-c1">0.480488</span>  <span class="pl-c1">0.790366</span>  <span class="pl-c1">0.0263995</span>  <span class="pl-c1">0.715227</span>  <span class="pl-c1">0.514725</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">local_rng</span>(), <span class="pl-c1">15</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">15</span> LinearAlgebra<span class="pl-k">.</span>Adjoint{Float64,Array{Float64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0.246595</span>  <span class="pl-c1">0.326417</span>  <span class="pl-c1">0.98997</span>  <span class="pl-c1">0.335991</span>  <span class="pl-c1">0.839723</span>  <span class="pl-c1">0.628247</span>  <span class="pl-c1">0.814513</span>  <span class="pl-c1">0.924231</span>  <span class="pl-c1">0.398405</span>  <span class="pl-c1">0.604068</span>  <span class="pl-c1">0.915064</span>  <span class="pl-c1">0.984332</span>  <span class="pl-c1">0.773448</span>  <span class="pl-c1">0.325699</span>  <span class="pl-c1">0.490881</span></pre></div>
<h2><a id="user-content-bigcrush" class="anchor" aria-hidden="true" href="#bigcrush"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BigCrush</h2>
<p>The generators pass <a href="https://github.com/andreasnoack/RNGTest.jl">BigCrush</a>. We can run BigCrush in a matter of minutes on a multicore system (10980XE CPU). Testing the uniform number generator:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed; <span class="pl-c1">addprocs</span>(); <span class="pl-c1">nprocs</span>()
<span class="pl-c1">37</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> RNGTest, VectorizedRNG, Random

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">struct</span> U01 <span class="pl-k">&lt;:</span> <span class="pl-c1">Random.AbstractRNG</span> <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> Random<span class="pl-k">.</span><span class="pl-en">rand!</span>(r<span class="pl-k">::</span><span class="pl-c1">U01</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>) <span class="pl-k">=</span> <span class="pl-c1">rand!</span>(<span class="pl-c1">local_rng</span>(), x)

julia<span class="pl-k">&gt;</span> u01 <span class="pl-k">=</span> <span class="pl-c1">U01</span>()
<span class="pl-c1">U01</span>()

julia<span class="pl-k">&gt;</span> rngunif <span class="pl-k">=</span> RNGTest<span class="pl-k">.</span><span class="pl-c1">wrap</span>(<span class="pl-c1">U01</span>(), Float64);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> bcjunif <span class="pl-k">=</span> RNGTest<span class="pl-k">.</span><span class="pl-c1">bigcrushJulia</span>(rngunif);
<span class="pl-c1">511.531281</span> seconds (<span class="pl-c1">31.91</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.619</span> GiB, <span class="pl-c1">0.10</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">minimum</span>(<span class="pl-c1">minimum</span>.(bcjunif))
<span class="pl-c1">0.004345184234132201</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">maximum</span>(<span class="pl-c1">maximum</span>.(bcjunif))
<span class="pl-c1">0.99900365621945</span></pre></div>
<p>and applying the cdf to the normal generator, it runs in under 10 minutes:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed; <span class="pl-c1">addprocs</span>(); <span class="pl-c1">nprocs</span>()
<span class="pl-c1">37</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">begin</span>;
        <span class="pl-k">using</span> Random
        <span class="pl-k">using</span> VectorizedRNG
        <span class="pl-k">using</span> RNGTest
        <span class="pl-k">const</span> INVSQRT2 <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>)
        <span class="pl-c1">@inline</span> <span class="pl-k">function</span> <span class="pl-en">normalcdf</span>(v)
                T <span class="pl-k">=</span> <span class="pl-c1">eltype</span>(v)
                <span class="pl-c1">T</span>(<span class="pl-c1">0.5</span>) <span class="pl-k">*</span> ( <span class="pl-c1">one</span>(T) <span class="pl-k">+</span> VectorizedRNG<span class="pl-k">.</span>SIMDPirates<span class="pl-k">.</span><span class="pl-c1">verf</span>( v <span class="pl-k">*</span> INVSQRT2 ) )
        <span class="pl-k">end</span>
        <span class="pl-k">function</span> <span class="pl-en">normalcdf!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>) <span class="pl-k">where</span> {T}
                _W, Wshift <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector_width_shift</span>(T)
                W <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">pick_vector_width_val</span>(T)
                N <span class="pl-k">=</span> <span class="pl-c1">length</span>(x)
                ptrx <span class="pl-k">=</span> <span class="pl-c1">pointer</span>(x)
                i <span class="pl-k">=</span> <span class="pl-c1">0</span>
                <span class="pl-k">for</span> _ <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span>(N <span class="pl-k">&gt;&gt;&gt;</span> Wshift)
                        ptrxᵢ <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">gep</span>(ptrx, i)
                        v <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>SIMDPirates<span class="pl-k">.</span><span class="pl-c1">vload</span>(W, ptrxᵢ)
                        VectorizedRNG<span class="pl-k">.</span>SIMDPirates<span class="pl-k">.</span><span class="pl-c1">vstore!</span>(ptrxᵢ, <span class="pl-c1">normalcdf</span>(v))
                        i <span class="pl-k">+=</span> _W
                <span class="pl-k">end</span>
                <span class="pl-k">if</span> i <span class="pl-k">&lt;</span> N
                        ptrxᵢ <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">gep</span>(ptrx, i)
                        mask <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">mask</span>(T, N <span class="pl-k">&amp;</span> (_W <span class="pl-k">-</span> <span class="pl-c1">1</span>))
                        v <span class="pl-k">=</span> VectorizedRNG<span class="pl-k">.</span>SIMDPirates<span class="pl-k">.</span><span class="pl-c1">vload</span>(W, ptrxᵢ, mask)
                        VectorizedRNG<span class="pl-k">.</span>SIMDPirates<span class="pl-k">.</span><span class="pl-c1">vstore!</span>(ptrxᵢ, <span class="pl-c1">normalcdf</span>(v), mask)
                <span class="pl-k">end</span>
                x
        <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">struct</span> RN01 <span class="pl-k">&lt;:</span> <span class="pl-c1">Random.AbstractRNG</span> <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> Random<span class="pl-k">.</span><span class="pl-en">rand!</span>(r<span class="pl-k">::</span><span class="pl-c1">RN01</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>) <span class="pl-k">=</span> <span class="pl-c1">normalcdf!</span>(<span class="pl-c1">randn!</span>(<span class="pl-c1">local_rng</span>(), x))

julia<span class="pl-k">&gt;</span> rngnorm <span class="pl-k">=</span> RNGTest<span class="pl-k">.</span><span class="pl-c1">wrap</span>(<span class="pl-c1">RN01</span>(), Float64);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> bcj <span class="pl-k">=</span> RNGTest<span class="pl-k">.</span><span class="pl-c1">bigcrushJulia</span>(rngnorm);
<span class="pl-c1">592.920986</span> seconds (<span class="pl-c1">9.58</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">498.928</span> MiB, <span class="pl-c1">0.03</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">minimum</span>(<span class="pl-c1">minimum</span>.(bcj))
<span class="pl-c1">0.0007985263854837221</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">maximum</span>(<span class="pl-c1">maximum</span>.(bcj))
<span class="pl-c1">0.9990856044252019</span></pre></div>
<p>Given the comparatively small diference in runtimes between the uniforn and normal -&gt; normal quantile RNG Tests, most of the runtime is spent in RNGTest rather than evaluating the random numbers.</p>
<p>I don't think these are great looking minimum or maximum p-values. For comparison, the default MersenneTwister:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> wrappedtwister <span class="pl-k">=</span> RNGTest<span class="pl-k">.</span><span class="pl-c1">wrap</span>(<span class="pl-c1">MersenneTwister</span>(), Float64);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> bcjmtwister <span class="pl-k">=</span> RNGTest<span class="pl-k">.</span><span class="pl-c1">bigcrushJulia</span>(wrappedtwister);
<span class="pl-c1">481.782432</span> seconds (<span class="pl-c1">9.73</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">508.753</span> MiB, <span class="pl-c1">0.04</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">minimum</span>(<span class="pl-c1">minimum</span>.(bcjmtwister))
<span class="pl-c1">0.0015850804769910467</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">maximum</span>(<span class="pl-c1">maximum</span>.(bcjmtwister))
<span class="pl-c1">0.9912021397939957</span></pre></div>
<p>Interestingly, this completed faster. I should've monitored clock speeds, but can say that (subjectively) the CPU fans were louder when running this benchmark, making me wonder if this is a case where downclocking of non-AVX code decreases performance.</p>
<p>Watch out when mixing vectorized and non-vectorized code.</p>
<hr>
<p>On vectorization: the strategy is to simply have many distinct streams, and sample from them simultaneously via SIMD operations.</p>
</article></div>