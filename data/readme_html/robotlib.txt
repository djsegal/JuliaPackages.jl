<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/baggepinnen/Robotlib.jl/actions"><img src="https://github.com/baggepinnen/Robotlib.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/Robotlib.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/11478b16362a1a9e6fb2cec2529e9e1d89a6f388f5a2f285829ed045e5855032/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f526f626f746c69622e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/Robotlib.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-robotlib" class="anchor" aria-hidden="true" href="#robotlib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Robotlib</h1>
<p dir="auto">This is a library of functions to help out in a robotics lab. At present stage, it contains functions for forward kinematics, jacobians, iterative inverse kinematics and for a few robotics related calibration problems. The library also contains a number of functions to convert from various orientation representations and other robotics related helper functions.</p>
<p dir="auto">Install using</p>
<p dir="auto"><code>using Pkg; Pkg.add("Robotlib")</code></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fkine, ikine, jacobian = get_kinematic_functions(&quot;yumi&quot;) # Replace yumi for your robot model, as long as it's supported
data = csv2dict(path) # Read data from a csv-file and store in a dict
q = getdata(&quot;robot_0.*posRawAbs&quot;, data, 1, removeNaN = false) # Extract columns from data object using regex like syntax"><pre>fkine, ikine, jacobian <span class="pl-k">=</span> <span class="pl-c1">get_kinematic_functions</span>(<span class="pl-s"><span class="pl-pds">"</span>yumi<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Replace yumi for your robot model, as long as it's supported</span>
data <span class="pl-k">=</span> <span class="pl-c1">csv2dict</span>(path) <span class="pl-c"><span class="pl-c">#</span> Read data from a csv-file and store in a dict</span>
q <span class="pl-k">=</span> <span class="pl-c1">getdata</span>(<span class="pl-s"><span class="pl-pds">"</span>robot_0.*posRawAbs<span class="pl-pds">"</span></span>, data, <span class="pl-c1">1</span>, removeNaN <span class="pl-k">=</span> <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> Extract columns from data object using regex like syntax</span></pre></div>
<p dir="auto">For ABB YuMi, joint angles <code>q</code> must be converted to logical order using e.g. <code>abb2logical!(q)</code>
If you use the kinematic functions privided by <code>get_kinematic_functions</code>, the base transform is handled automatically. If you use the standard kinematic functions provided in Robotlib, you must also consider the base transform.</p>
<h3 dir="auto"><a id="user-content-case-study-calibrate-force-sensor-or-accelerometer" class="anchor" aria-hidden="true" href="#case-study-calibrate-force-sensor-or-accelerometer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Case study, calibrate force sensor (or accelerometer)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Robotlib
using DSP # For filtfilt

# Define robot to use, in this case YuMi
dh = DHYuMi()
fkine, ikine, jacobian = get_kinematic_functions(&quot;robotname&quot;)

q,q̇,τ = load_your_data()

# Apply gear ratio transformation
q = q*dh.GR'
q̇ = q̇*dh.GR'
τ = τ*inv(dh.GR')

# Filter velocities to get accelerations
q̈ = filtfilt(ones(50),[50.],centralDiff(q̇))

# plot(abs([q̇, q̈]))

# Sort out data with low acceleration
lowAcc  = all(abs.(q̈) .&lt; 3e-4,2)
q       = q[lowAcc,:]
q̇       = q̇[lowAcc,:]
τ       = τ[lowAcc,:]
f       = f[lowAcc,:]
N       = size(q,1)

# Apply forward kinematics to get end-effector poses
T  = cat([fkine(q[i,:]) for i = 1:N]..., dims=3)

trajplot(T) # Plots a trajectory of R4x4 transformation matrices

# Perform the force sensor calibration and plot the errors
Rf,m,offset     = calib_force(T,f,0.2205,offset=true) # See also calib_force_iterative, calib_force_eigen
err = hcat([Rf*f[i,1:3] + offset - T[1:3,1:3,i]'*[0, 0, m*-9.82] for i = 1:N]...)'
plot(f[:,1:3],lab=&quot;Force&quot;)
plot!(err,l=:dash,lab=&quot;Error&quot;)
println(&quot;Error: &quot;, round(rms(err), digits=4))"><pre><span class="pl-k">using</span> Robotlib
<span class="pl-k">using</span> DSP <span class="pl-c"><span class="pl-c">#</span> For filtfilt</span>

<span class="pl-c"><span class="pl-c">#</span> Define robot to use, in this case YuMi</span>
dh <span class="pl-k">=</span> <span class="pl-c1">DHYuMi</span>()
fkine, ikine, jacobian <span class="pl-k">=</span> <span class="pl-c1">get_kinematic_functions</span>(<span class="pl-s"><span class="pl-pds">"</span>robotname<span class="pl-pds">"</span></span>)

q,q̇,τ <span class="pl-k">=</span> <span class="pl-c1">load_your_data</span>()

<span class="pl-c"><span class="pl-c">#</span> Apply gear ratio transformation</span>
q <span class="pl-k">=</span> q<span class="pl-k">*</span>dh<span class="pl-k">.</span>GR<span class="pl-k">'</span>
q̇ <span class="pl-k">=</span> q̇<span class="pl-k">*</span>dh<span class="pl-k">.</span>GR<span class="pl-k">'</span>
τ <span class="pl-k">=</span> τ<span class="pl-k">*</span><span class="pl-c1">inv</span>(dh<span class="pl-k">.</span>GR<span class="pl-k">'</span>)

<span class="pl-c"><span class="pl-c">#</span> Filter velocities to get accelerations</span>
q̈ <span class="pl-k">=</span> <span class="pl-c1">filtfilt</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">50</span>),[<span class="pl-c1">50.</span>],<span class="pl-c1">centralDiff</span>(q̇))

<span class="pl-c"><span class="pl-c">#</span> plot(abs([q̇, q̈]))</span>

<span class="pl-c"><span class="pl-c">#</span> Sort out data with low acceleration</span>
lowAcc  <span class="pl-k">=</span> <span class="pl-c1">all</span>(<span class="pl-c1">abs</span>.(q̈) <span class="pl-k">.&lt;</span> <span class="pl-c1">3e-4</span>,<span class="pl-c1">2</span>)
q       <span class="pl-k">=</span> q[lowAcc,:]
q̇       <span class="pl-k">=</span> q̇[lowAcc,:]
τ       <span class="pl-k">=</span> τ[lowAcc,:]
f       <span class="pl-k">=</span> f[lowAcc,:]
N       <span class="pl-k">=</span> <span class="pl-c1">size</span>(q,<span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Apply forward kinematics to get end-effector poses</span>
T  <span class="pl-k">=</span> <span class="pl-c1">cat</span>([<span class="pl-c1">fkine</span>(q[i,:]) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N]<span class="pl-k">.</span><span class="pl-k">..</span>, dims<span class="pl-k">=</span><span class="pl-c1">3</span>)

<span class="pl-c1">trajplot</span>(T) <span class="pl-c"><span class="pl-c">#</span> Plots a trajectory of R4x4 transformation matrices</span>

<span class="pl-c"><span class="pl-c">#</span> Perform the force sensor calibration and plot the errors</span>
Rf,m,offset     <span class="pl-k">=</span> <span class="pl-c1">calib_force</span>(T,f,<span class="pl-c1">0.2205</span>,offset<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> See also calib_force_iterative, calib_force_eigen</span>
err <span class="pl-k">=</span> <span class="pl-c1">hcat</span>([Rf<span class="pl-k">*</span>f[i,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">+</span> offset <span class="pl-k">-</span> T[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,i]<span class="pl-k">'</span><span class="pl-k">*</span>[<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, m<span class="pl-k">*-</span><span class="pl-c1">9.82</span>] <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N]<span class="pl-k">.</span><span class="pl-k">..</span>)<span class="pl-k">'</span>
<span class="pl-c1">plot</span>(f[:,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>],lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Force<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(err,l<span class="pl-k">=</span><span class="pl-c1">:dash</span>,lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Error<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Error: <span class="pl-pds">"</span></span>, <span class="pl-c1">round</span>(<span class="pl-c1">rms</span>(err), digits<span class="pl-k">=</span><span class="pl-c1">4</span>))</pre></div>
<h2 dir="auto"><a id="user-content-exported-functions" class="anchor" aria-hidden="true" href="#exported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported functions</h2>
<p dir="auto">See</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="names(Robotlib)
names(Robotlib.Frames)"><pre><span class="pl-c1">names</span>(Robotlib)
<span class="pl-c1">names</span>(Robotlib<span class="pl-k">.</span>Frames)</pre></div>
<p dir="auto">The submodule <code>Robotlib.Frames</code> supports creation of frames, simple projections, fitting of planes, lines etc. and has a number of plotting options. It must be separately imported with <code>using Robotlib.Frames</code>.</p>
<h2 dir="auto"><a id="user-content-kinematics" class="anchor" aria-hidden="true" href="#kinematics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kinematics</h2>
<p dir="auto">The library has functions for calculation of forward kinematics, inverse kinematics and jacobians. Several versions of all kinematics functions are provided; calculations can be made using either the DH-convention or the (local) product of exponentials formulation. To support a new robot, create an object of the type <code>DH</code>, or provide a matrix with POE-style link twists, for use with the kinematic functions.</p>
<h3 dir="auto"><a id="user-content-usage-1" class="anchor" aria-hidden="true" href="#usage-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dh = DH7600() # ABB Irb 7600
xi = DH2twistsPOE(dh)
T  = fkinePOE(xi, q)"><pre>dh <span class="pl-k">=</span> <span class="pl-c1">DH7600</span>() <span class="pl-c"><span class="pl-c">#</span> ABB Irb 7600</span>
xi <span class="pl-k">=</span> <span class="pl-c1">DH2twistsPOE</span>(dh)
T  <span class="pl-k">=</span> <span class="pl-c1">fkinePOE</span>(xi, q)</pre></div>
<p dir="auto">or alternatively</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dh = DH7600()
Jn, J0, T, Ti, trans = jacobian(q, dh)"><pre>dh <span class="pl-k">=</span> <span class="pl-c1">DH7600</span>()
Jn, J0, T, Ti, trans <span class="pl-k">=</span> <span class="pl-c1">jacobian</span>(q, dh)</pre></div>
<p dir="auto">many other options exits, check <a href="src/kinematics.jl">kinematics.jl</a></p>
<h1 dir="auto"><a id="user-content-frames" class="anchor" aria-hidden="true" href="#frames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Frames</h1>
<p dir="auto">This module is aimed at assisting with the creation of frames for tracking using optical tracking systems. It supports projection of points and lines onto planes, creating frames from features and has some plotting functionality.</p>
<h2 dir="auto"><a id="user-content-usage-2" class="anchor" aria-hidden="true" href="#usage-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">This is an example of how data can be loaded from files and how different geometrical objects can be fitted to data, projected onto other objects etc.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Frames
import MAT
function setupframes(path)
	path = Pkg.dir(&quot;Robotlib&quot;,&quot;src&quot;,&quot;applications&quot;,&quot;frames/&quot;)

	# Add frame names to the dictionary
	add_frame_name!(&quot;SEAM&quot;,&quot;Weld seam frame&quot;)
	add_frame_name!(&quot;TAB&quot;,&quot;Table frame&quot;)

	# Read matrices from file
	T_RB_Tm = MAT.matread(path*&quot;T_RB_T.mat&quot;)[&quot;T_RB_T&quot;]
	T_TF_TCPm = MAT.matread(path*&quot;T_TF_TCP.mat&quot;)[&quot;T_TF_TCP&quot;]
	T_T_TABm = MAT.matread(path*&quot;T_T_Table.mat&quot;)[&quot;T_T_Table&quot;]

	# Create frames from matrices
	T_RB_T = Frame(T_RB_Tm,&quot;RB&quot;,&quot;T&quot;)
	T_S_D = Frame(T_TF_TCPm,&quot;S&quot;,&quot;D&quot;)
	T_T_TAB = Frame(T_T_TABm,&quot;T&quot;,&quot;TAB&quot;)

	# Read point clouds generated by nikon software from file
	cloud_seam = readcloud(path*&quot;CloudSeam_edge.txt&quot;)
	plane_seam = readplane(path*&quot;PlaneSeam_edge.txt&quot;)

	# Project points onto plane and fit a line
	cloud_seam_projected = project(plane_seam,cloud_seam)
	line_seam = fitline(cloud_seam_projected)

	# Create a frame from the measured features
	T_T_SEAM = framefromfeatures((&quot;z+&quot;,line_seam),(&quot;y-&quot;,plane_seam),cloud_seam_projected[1],&quot;SEAM&quot;)
	T_RB_SEAM = T_RB_T*T_T_SEAM
	T_RB_TAB = T_RB_T*T_T_TAB
	T_TAB_SEAM = inv(T_T_TAB)*T_T_SEAM


	cloud_seam_RB = T_RB_T*cloud_seam
	cloud_seam_projected_RB = T_RB_T*cloud_seam_projected
	plane_seam_RB = T_RB_T*plane_seam
	line_seam_RB = T_RB_T*line_seam

	# Plot results
	plot(Frame(I4,&quot;RB&quot;,&quot;U&quot;), 200)
	plot!(cloud_seam_RB, c=:blue)
	plot!(cloud_seam_projected_RB, c=:red)
	plot!(line_seam_RB, 500, label=&quot;Line seam&quot;)
	plot!(plane_seam_RB, 200, label=&quot;Plane seam&quot;)
	plot!(T_RB_SEAM, 200, label=&quot;T_RB_SEAM&quot;)
	plot!(T_RB_TAB, 200, label=&quot;T_RB_TAB&quot;)

	xlabel!(&quot;x&quot;)
	ylabel!(&quot;y&quot;)
	# zlabel!(&quot;z&quot;)

    # Write frames to file
    MAT.matwrite(path*&quot;T_TAB_SEAM.mat&quot;,[&quot;T_TAB_SEAM&quot; =&gt; T_TAB_SEAM.T])
    MAT.matwrite(path*&quot;T_T_SEAM.mat&quot;,[&quot;T_T_SEAM&quot; =&gt; T_T_SEAM.T])
    MAT.matwrite(path*&quot;T_RB_TAB.mat&quot;,[&quot;T_RB_TAB&quot; =&gt; T_RB_TAB.T])
    println(&quot;Wrote T_TAB_SEAM, T_T_SEAM, T_RB_TAB to files in $path&quot;)
end"><pre><span class="pl-k">using</span> Frames
<span class="pl-k">import</span> MAT
<span class="pl-k">function</span> <span class="pl-en">setupframes</span>(path)
	path <span class="pl-k">=</span> Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>Robotlib<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>src<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>applications<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>frames/<span class="pl-pds">"</span></span>)

	<span class="pl-c"><span class="pl-c">#</span> Add frame names to the dictionary</span>
	<span class="pl-c1">add_frame_name!</span>(<span class="pl-s"><span class="pl-pds">"</span>SEAM<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Weld seam frame<span class="pl-pds">"</span></span>)
	<span class="pl-c1">add_frame_name!</span>(<span class="pl-s"><span class="pl-pds">"</span>TAB<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Table frame<span class="pl-pds">"</span></span>)

	<span class="pl-c"><span class="pl-c">#</span> Read matrices from file</span>
	T_RB_Tm <span class="pl-k">=</span> MAT<span class="pl-k">.</span><span class="pl-c1">matread</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>T_RB_T.mat<span class="pl-pds">"</span></span>)[<span class="pl-s"><span class="pl-pds">"</span>T_RB_T<span class="pl-pds">"</span></span>]
	T_TF_TCPm <span class="pl-k">=</span> MAT<span class="pl-k">.</span><span class="pl-c1">matread</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>T_TF_TCP.mat<span class="pl-pds">"</span></span>)[<span class="pl-s"><span class="pl-pds">"</span>T_TF_TCP<span class="pl-pds">"</span></span>]
	T_T_TABm <span class="pl-k">=</span> MAT<span class="pl-k">.</span><span class="pl-c1">matread</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>T_T_Table.mat<span class="pl-pds">"</span></span>)[<span class="pl-s"><span class="pl-pds">"</span>T_T_Table<span class="pl-pds">"</span></span>]

	<span class="pl-c"><span class="pl-c">#</span> Create frames from matrices</span>
	T_RB_T <span class="pl-k">=</span> <span class="pl-c1">Frame</span>(T_RB_Tm,<span class="pl-s"><span class="pl-pds">"</span>RB<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>T<span class="pl-pds">"</span></span>)
	T_S_D <span class="pl-k">=</span> <span class="pl-c1">Frame</span>(T_TF_TCPm,<span class="pl-s"><span class="pl-pds">"</span>S<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>)
	T_T_TAB <span class="pl-k">=</span> <span class="pl-c1">Frame</span>(T_T_TABm,<span class="pl-s"><span class="pl-pds">"</span>T<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>TAB<span class="pl-pds">"</span></span>)

	<span class="pl-c"><span class="pl-c">#</span> Read point clouds generated by nikon software from file</span>
	cloud_seam <span class="pl-k">=</span> <span class="pl-c1">readcloud</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>CloudSeam_edge.txt<span class="pl-pds">"</span></span>)
	plane_seam <span class="pl-k">=</span> <span class="pl-c1">readplane</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>PlaneSeam_edge.txt<span class="pl-pds">"</span></span>)

	<span class="pl-c"><span class="pl-c">#</span> Project points onto plane and fit a line</span>
	cloud_seam_projected <span class="pl-k">=</span> <span class="pl-c1">project</span>(plane_seam,cloud_seam)
	line_seam <span class="pl-k">=</span> <span class="pl-c1">fitline</span>(cloud_seam_projected)

	<span class="pl-c"><span class="pl-c">#</span> Create a frame from the measured features</span>
	T_T_SEAM <span class="pl-k">=</span> <span class="pl-c1">framefromfeatures</span>((<span class="pl-s"><span class="pl-pds">"</span>z+<span class="pl-pds">"</span></span>,line_seam),(<span class="pl-s"><span class="pl-pds">"</span>y-<span class="pl-pds">"</span></span>,plane_seam),cloud_seam_projected[<span class="pl-c1">1</span>],<span class="pl-s"><span class="pl-pds">"</span>SEAM<span class="pl-pds">"</span></span>)
	T_RB_SEAM <span class="pl-k">=</span> T_RB_T<span class="pl-k">*</span>T_T_SEAM
	T_RB_TAB <span class="pl-k">=</span> T_RB_T<span class="pl-k">*</span>T_T_TAB
	T_TAB_SEAM <span class="pl-k">=</span> <span class="pl-c1">inv</span>(T_T_TAB)<span class="pl-k">*</span>T_T_SEAM


	cloud_seam_RB <span class="pl-k">=</span> T_RB_T<span class="pl-k">*</span>cloud_seam
	cloud_seam_projected_RB <span class="pl-k">=</span> T_RB_T<span class="pl-k">*</span>cloud_seam_projected
	plane_seam_RB <span class="pl-k">=</span> T_RB_T<span class="pl-k">*</span>plane_seam
	line_seam_RB <span class="pl-k">=</span> T_RB_T<span class="pl-k">*</span>line_seam

	<span class="pl-c"><span class="pl-c">#</span> Plot results</span>
	<span class="pl-c1">plot</span>(<span class="pl-c1">Frame</span>(I4,<span class="pl-s"><span class="pl-pds">"</span>RB<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>U<span class="pl-pds">"</span></span>), <span class="pl-c1">200</span>)
	<span class="pl-c1">plot!</span>(cloud_seam_RB, c<span class="pl-k">=</span><span class="pl-c1">:blue</span>)
	<span class="pl-c1">plot!</span>(cloud_seam_projected_RB, c<span class="pl-k">=</span><span class="pl-c1">:red</span>)
	<span class="pl-c1">plot!</span>(line_seam_RB, <span class="pl-c1">500</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Line seam<span class="pl-pds">"</span></span>)
	<span class="pl-c1">plot!</span>(plane_seam_RB, <span class="pl-c1">200</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Plane seam<span class="pl-pds">"</span></span>)
	<span class="pl-c1">plot!</span>(T_RB_SEAM, <span class="pl-c1">200</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>T_RB_SEAM<span class="pl-pds">"</span></span>)
	<span class="pl-c1">plot!</span>(T_RB_TAB, <span class="pl-c1">200</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>T_RB_TAB<span class="pl-pds">"</span></span>)

	<span class="pl-c1">xlabel!</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
	<span class="pl-c1">ylabel!</span>(<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)
	<span class="pl-c"><span class="pl-c">#</span> zlabel!("z")</span>

    <span class="pl-c"><span class="pl-c">#</span> Write frames to file</span>
    MAT<span class="pl-k">.</span><span class="pl-c1">matwrite</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>T_TAB_SEAM.mat<span class="pl-pds">"</span></span>,[<span class="pl-s"><span class="pl-pds">"</span>T_TAB_SEAM<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> T_TAB_SEAM<span class="pl-k">.</span>T])
    MAT<span class="pl-k">.</span><span class="pl-c1">matwrite</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>T_T_SEAM.mat<span class="pl-pds">"</span></span>,[<span class="pl-s"><span class="pl-pds">"</span>T_T_SEAM<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> T_T_SEAM<span class="pl-k">.</span>T])
    MAT<span class="pl-k">.</span><span class="pl-c1">matwrite</span>(path<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>T_RB_TAB.mat<span class="pl-pds">"</span></span>,[<span class="pl-s"><span class="pl-pds">"</span>T_RB_TAB<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> T_RB_TAB<span class="pl-k">.</span>T])
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Wrote T_TAB_SEAM, T_T_SEAM, T_RB_TAB to files in <span class="pl-v">$path</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h1 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h1>
<p dir="auto">This package was developed for the thesis
<a href="https://www.control.lth.se/staff/fredrik-bagge-carlson/" rel="nofollow">Bagge Carlson, F.</a>, <a href="https://lup.lub.lu.se/search/publication/ffb8dc85-ce12-4f75-8f2b-0881e492f6c0" rel="nofollow">"Machine Learning and System Identification for Estimation in Physical Systems"</a> (PhD Thesis 2018).</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@thesis{bagge2018,
  title        = {Machine Learning and System Identification for Estimation in Physical Systems},
  author       = {Bagge Carlson, Fredrik},
  keyword      = {Machine Learning,System Identification,Robotics,Spectral estimation,Calibration,State estimation},
  month        = {12},
  type         = {PhD Thesis},
  number       = {TFRT-1122},
  institution  = {Dept. Automatic Control, Lund University, Sweden},
  year         = {2018},
  url          = {https://lup.lub.lu.se/search/publication/ffb8dc85-ce12-4f75-8f2b-0881e492f6c0},
}"><pre><span class="pl-k">@thesis</span>{<span class="pl-en">bagge2018</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Machine Learning and System Identification for Estimation in Physical Systems<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Bagge Carlson, Fredrik<span class="pl-pds">}</span></span>,
  <span class="pl-s">keyword</span>      = <span class="pl-s"><span class="pl-pds">{</span>Machine Learning,System Identification,Robotics,Spectral estimation,Calibration,State estimation<span class="pl-pds">}</span></span>,
  <span class="pl-s">month</span>        = <span class="pl-s"><span class="pl-pds">{</span>12<span class="pl-pds">}</span></span>,
  <span class="pl-s">type</span>         = <span class="pl-s"><span class="pl-pds">{</span>PhD Thesis<span class="pl-pds">}</span></span>,
  <span class="pl-s">number</span>       = <span class="pl-s"><span class="pl-pds">{</span>TFRT-1122<span class="pl-pds">}</span></span>,
  <span class="pl-s">institution</span>  = <span class="pl-s"><span class="pl-pds">{</span>Dept. Automatic Control, Lund University, Sweden<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2018<span class="pl-pds">}</span></span>,
  <span class="pl-s">url</span>          = <span class="pl-s"><span class="pl-pds">{</span>https://lup.lub.lu.se/search/publication/ffb8dc85-ce12-4f75-8f2b-0881e492f6c0<span class="pl-pds">}</span></span>,
}</pre></div>
<p dir="auto">The algorithm <code>calibNAXP</code> was presented in</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@inproceedings{bagge2015calibration,
  title        = {Six {DOF} eye-to-hand calibration from {2D} measurements using planar constraints},
  author       = {Bagge Carlson, Fredrik and Johansson, Rolf and Robertsson, Anders},
  booktitle    = {International Conference on Intelligent Robots and Systems (IROS)},
  year         = {2015},
  organization = {IEEE}
}"><pre><span class="pl-k">@inproceedings</span>{<span class="pl-en">bagge2015calibration</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Six {DOF} eye-to-hand calibration from {2D} measurements using planar constraints<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Bagge Carlson, Fredrik and Johansson, Rolf and Robertsson, Anders<span class="pl-pds">}</span></span>,
  <span class="pl-s">booktitle</span>    = <span class="pl-s"><span class="pl-pds">{</span>International Conference on Intelligent Robots and Systems (IROS)<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2015<span class="pl-pds">}</span></span>,
  <span class="pl-s">organization</span> = <span class="pl-s"><span class="pl-pds">{</span>IEEE<span class="pl-pds">}</span></span>
}</pre></div>
<p dir="auto">The friction model <code>frictionRBFN</code> was presented in</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@inproceedings{bagge2015friction,
  title        = {Modeling and identification of position and temperature dependent friction phenomena without temperature sensing},
  author       = {Bagge Carlson, Fredrik and Robertsson, Anders and Johansson, Rolf},
  booktitle    = {International Conference on Intelligent Robots and Systems (IROS)},
  year         = {2015},
  organization = {IEEE}
}"><pre><span class="pl-k">@inproceedings</span>{<span class="pl-en">bagge2015friction</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Modeling and identification of position and temperature dependent friction phenomena without temperature sensing<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Bagge Carlson, Fredrik and Robertsson, Anders and Johansson, Rolf<span class="pl-pds">}</span></span>,
  <span class="pl-s">booktitle</span>    = <span class="pl-s"><span class="pl-pds">{</span>International Conference on Intelligent Robots and Systems (IROS)<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2015<span class="pl-pds">}</span></span>,
  <span class="pl-s">organization</span> = <span class="pl-s"><span class="pl-pds">{</span>IEEE<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>