<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-twilitetimeline" class="anchor" aria-hidden="true" href="#twilitetimeline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TwiliteTimeline</h1>
<p dir="auto"><a href="https://DataPsycho.github.io/TwiliteTimeline.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://DataPsycho.github.io/TwiliteTimeline.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/DataPsycho/TwiliteTimeline.jl/actions"><img src="https://github.com/DataPsycho/TwiliteTimeline.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/DataPsycho/TwiliteTimeline.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36dc7f0f6e3bf5615b63ac94d3956ad6d9b44a14c1461bca4d13f6e0511217f3/68747470733a2f2f636f6465636f762e696f2f67682f4461746150737963686f2f5477696c69746554696d656c696e652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/DataPsycho/TwiliteTimeline.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">TwiliteTimeline is a twitter API client, which is capable of querying the Twitter <code>statuses/user_timeline</code> and <code>statuses/update</code> endpoint. <strong>The current version of the package only valid for Twitter API version 1.1</strong></p>
<h2 dir="auto"><a id="user-content-use-case--example" class="anchor" aria-hidden="true" href="#use-case--example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case &amp; Example:</h2>
<p dir="auto">The current version of the App has limited feature which will be improved in future updates. Each new feature will be introduced with elaborate examples. The current version has introduced new feature, now you can post tweet using TwiliteTimeline. But the design also changed along the way and old usecase examples are deprecated. Please follow new use cases to know more.</p>
<h3 dir="auto"><a id="user-content-use-case--get-latest-5-tweets-from-a-profile" class="anchor" aria-hidden="true" href="#use-case--get-latest-5-tweets-from-a-profile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case:  Get latest 5 tweets from a Profile</h3>
<p dir="auto">To be able to use the package first user need their OAuth tokens and secrets which can be created after log in to twitter developer account by creating a new app. Then using the <code>Authentictor</code> and <code>ParamsGetTweets</code> type provided by the package they need to define values of that type and finally use the <code>get_tweets</code> methods to query the API.</p>
<ul dir="auto">
<li>Authentictor is a julia concrete type to store the Consumer Key, Consumer Secret, OAuth Token and OAuth Token from twitter API. It is recommended that user save them into environment and load them by using <code>ENV</code> keyword.</li>
<li>The ResourceParams concrete type is to store the Parameters needed to query the API and based on the <a href="https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline" rel="nofollow">API document version 1.1</a>. The default values in the package are sometime different than the API document. By default the <code>trim_user</code> is set to <code>false</code>, when providing any valid count parameter the <code>include_rts</code> will be set to <code>true</code> silently.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="creds = Authentictor(ENV[&quot;CKEY&quot;], ENV[&quot;CSEC&quot;], ENV[&quot;OTOK&quot;], ENV[&quot;OSEC&quot;]);
params = ParamsGetTweets(&quot;rustlang&quot;, count=5);
tweets = get_tweets(creds, params);"><pre>creds <span class="pl-k">=</span> <span class="pl-c1">Authentictor</span>(<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CKEY<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CSEC<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>OTOK<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>OSEC<span class="pl-pds">"</span></span>]);
params <span class="pl-k">=</span> <span class="pl-c1">ParamsGetTweets</span>(<span class="pl-s"><span class="pl-pds">"</span>rustlang<span class="pl-pds">"</span></span>, count<span class="pl-k">=</span><span class="pl-c1">5</span>);
tweets <span class="pl-k">=</span> <span class="pl-c1">get_tweets</span>(creds, params);</pre></div>
<h3 dir="auto"><a id="user-content-use-case-post-a-new-tweet" class="anchor" aria-hidden="true" href="#use-case-post-a-new-tweet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case: Post a New Tweet</h3>
<p dir="auto">To be able to use the package first user need their OAuth tokens and secrets which can be created after log in to twitter developer account by creating a new app. Then using the <code>Authentictor</code> and <code>ParamsPostTweet</code> type provided by the package they need to define values of that type and finally use the <code>post_tweet</code> methods to send the request.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="creds = Authentictor(ENV[&quot;CKEY&quot;], ENV[&quot;CSEC&quot;], ENV[&quot;OTOK&quot;], ENV[&quot;OSEC&quot;]);
params = ParamsPostTweet(&quot;... asdf asdf test tweet .... @JuliaLanguage using TwiliteTimeline.jl&quot;);
tweet = post_tweet(creds, params);"><pre>creds <span class="pl-k">=</span> <span class="pl-c1">Authentictor</span>(<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CKEY<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CSEC<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>OTOK<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>OSEC<span class="pl-pds">"</span></span>]);
params <span class="pl-k">=</span> <span class="pl-c1">ParamsPostTweet</span>(<span class="pl-s"><span class="pl-pds">"</span>... asdf asdf test tweet .... @JuliaLanguage using TwiliteTimeline.jl<span class="pl-pds">"</span></span>);
tweet <span class="pl-k">=</span> <span class="pl-c1">post_tweet</span>(creds, params);</pre></div>
<p dir="auto">As twitter also return the whole tweet object after success post it is possible to persist every twitter after every post request or atleast test the return value that everything went well. In <code>ParamsPostTweet</code> type the <code>status</code> field is required and all other field either optional or has default value. **The other field need proper understanding before you use so please follow the <code>status/update.json</code> api doc before adding the other field of <code>ParamsPostTweet</code>.</p>
<p dir="auto">Now it is possible to write and read json files having single tweets or array of tweets for better persistency.</p>
<h3 dir="auto"><a id="user-content-use-case-write-to-json-and-read-from-json" class="anchor" aria-hidden="true" href="#use-case-write-to-json-and-read-from-json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case: Write to Json and Read from Json</h3>
<p dir="auto">First run the any of the first or second usecase to load the tweets in to a object called <code>tweets</code>. Assuming we have a <code>temp</code> directory to store the tweets. Then follow the example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Write the tweets
write_to_json(&quot;./temp/all_tweets.json&quot;, tweets)

# Later read the tweets
read_from_json(&quot;./temp/all_tweets.json&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Write the tweets</span>
<span class="pl-c1">write_to_json</span>(<span class="pl-s"><span class="pl-pds">"</span>./temp/all_tweets.json<span class="pl-pds">"</span></span>, tweets)

<span class="pl-c"><span class="pl-c">#</span> Later read the tweets</span>
<span class="pl-c1">read_from_json</span>(<span class="pl-s"><span class="pl-pds">"</span>./temp/all_tweets.json<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><strong>Deprecated and will be removed in the next minor release</strong>
To be able to use the package first user need their OAuth tokens and secrets which can be created after log in to twitter developer account by creating a new app. Then using the <code>Authentictor</code> and <code>ResourceParams</code> type provided by the package they need to define values of that type and finally use the <code>collect_tweets</code> methods to query the API.</p>
<ul dir="auto">
<li>Authentictor is a julia concrete type to store the Consumer Key, Consumer Secret, OAuth Token and OAuth Token from twitter API. It is recommended that user save them into environment and load them by using <code>ENV</code> keyword.</li>
<li>The ResourceParams concrete type is to store the Parameters needed to query the API and based on the <a href="https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline" rel="nofollow">API document version 1.1</a>. The default values in the package are sometime different than the API document. By default the <code>trim_user</code> is set to <code>false</code>, when providing any valid count parameter the <code>include_rts</code> will be set to <code>true</code> silently.</li>
</ul>
<h3 dir="auto"><a id="user-content-use-case-get-latest-100-tweets-from-a-profile" class="anchor" aria-hidden="true" href="#use-case-get-latest-100-tweets-from-a-profile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case: Get latest 100 tweets from a Profile</h3>
<p dir="auto">In the following example the all credentials is saved as environment variable and later loaded from ENV dictionary.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create value of type Authentictor
creds = Authentictor(ENV[&quot;CKEY&quot;], ENV[&quot;CSEC&quot;], ENV[&quot;OTOK&quot;], ENV[&quot;OSEC&quot;])
# Create Value of Type ResourceParams
rps = ResourceParams(&quot;Viral_B_Shah&quot;, count=100)

# Call The Twitter API
tweets = collect_tweets(creds, rps)"><pre><span class="pl-c"><span class="pl-c">#</span> Create value of type Authentictor</span>
creds <span class="pl-k">=</span> <span class="pl-c1">Authentictor</span>(<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CKEY<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CSEC<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>OTOK<span class="pl-pds">"</span></span>], <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>OSEC<span class="pl-pds">"</span></span>])
<span class="pl-c"><span class="pl-c">#</span> Create Value of Type ResourceParams</span>
rps <span class="pl-k">=</span> <span class="pl-c1">ResourceParams</span>(<span class="pl-s"><span class="pl-pds">"</span>Viral_B_Shah<span class="pl-pds">"</span></span>, count<span class="pl-k">=</span><span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> Call The Twitter API</span>
tweets <span class="pl-k">=</span> <span class="pl-c1">collect_tweets</span>(creds, rps)</pre></div>
<h3 dir="auto"><a id="user-content-use-case-get-latest-5-tweets-with-excluding-replies-and-trim-user-data" class="anchor" aria-hidden="true" href="#use-case-get-latest-5-tweets-with-excluding-replies-and-trim-user-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case: Get latest 5 tweets with Excluding Replies and Trim User Data</h3>
<p dir="auto">The field <code>trim_user</code> and <code>exclude_replies</code> decides that if we want to exclude user data and  exclude replies when fetching the data or not.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Create value of type Authentictor
creds = Authentictor(ENV[&quot;CKEY&quot;], ENV[&quot;CSEC&quot;], ENV[&quot;OTOK&quot;], ENV[&quot;OSEC&quot;])

# Create Value of Type ResourceParams
rps = ResourceParams(&quot;tomkwong&quot;, count=5, trim_user=true, exclude_replies=true)

# Call The Twitter API
tweets = collect_tweets(creds, rps)"><pre class="notranslate"><code># Create value of type Authentictor
creds = Authentictor(ENV["CKEY"], ENV["CSEC"], ENV["OTOK"], ENV["OSEC"])

# Create Value of Type ResourceParams
rps = ResourceParams("tomkwong", count=5, trim_user=true, exclude_replies=true)

# Call The Twitter API
tweets = collect_tweets(creds, rps)
</code></pre></div>
<p dir="auto">The data return as list/array of dictionary, were each dictionary object is a Tweet.</p>
</article></div>