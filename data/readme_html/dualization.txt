<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dualizationjl" class="anchor" aria-hidden="true" href="#dualizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dualization.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://jump.dev/Dualization.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://jump.dev/Dualization.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/jump-dev/Dualization.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/Dualization.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a> <a href="http://codecov.io/github/jump-dev/Dualization.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f84fb69fb67541c8818d0d9409d03062e28460b11d3e5fdf21955d819b358a11/687474703a2f2f636f6465636f762e696f2f6769746875622f6a756d702d6465762f4475616c697a6174696f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/jump-dev/Dualization.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://gitter.im/AutomaticDualization/community#" rel="nofollow"><img src="https://camo.githubusercontent.com/79baa92a6268dae7c2343bb889dbc3db79a17031e3e37fa5b34c2b28569d1e94/68747470733a2f2f6261646765732e6769747465722e696d2f6a756d702d6465762f4a754d502d6465762e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/jump-dev/JuMP-dev.svg" style="max-width:100%;"></a> <a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow"><img src="https://camo.githubusercontent.com/f8462892b313c50a43156c23b37fd7e732af7b406ad01b816528b3d2dc776d48/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61662f446973636f757273655f6c6f676f2e706e672f37393970782d446973636f757273655f6c6f676f2e706e67" width="64" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Discourse_logo.png/799px-Discourse_logo.png" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Repository with implementations of the automatic dualization feature for MathOptInterface.jl conic optimization problems</p>
<p>Dualization.jl has two main features.</p>
<ul>
<li>The function <code>dualize</code> that can dualize either a <a href="https://github.com/jump-dev/MathOptInterface.jl"><code>MathOptInterface.jl</code></a> or <a href="https://github.com/jump-dev/JuMP.jl"><code>JuMP.jl</code></a> model.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dual_model = dualize(model)
"><pre>dual_model <span class="pl-k">=</span> <span class="pl-c1">dualize</span>(model)</pre></div>
<ul>
<li>The <code>DualOptimizer</code> that will pass the dual representation of the model to the solver of your choice.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Model(dual_optimizer(SOLVER.Optimizer))
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">dual_optimizer</span>(SOLVER<span class="pl-k">.</span>Optimizer))</pre></div>
<h2><a id="user-content-common-use-cases" class="anchor" aria-hidden="true" href="#common-use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Common use cases</h2>
<h3><a id="user-content-solve-problems-via-dual-representation" class="anchor" aria-hidden="true" href="#solve-problems-via-dual-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solve problems via dual representation</h3>
<p>This is specially useful for conic optimization because some solvers
can only represent specific formulation types. Dualizing the problem can leave
a problem closer to the form expected by the solver without adding
slack variables and constraints.</p>
<p>Solving an optimization problem via its dual representation can be useful because some conic solvers assume the model is in the standard form and others use the geometric form.</p>
<table>
<thead>
<tr>
<th align="center">Standard form</th>
<th align="center">Geometric form</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">SDPT3</td>
<td align="center">CDCS</td>
</tr>
<tr>
<td align="center">SDPNAL</td>
<td align="center">SCS</td>
</tr>
<tr>
<td align="center">CSDP</td>
<td align="center">ECOS</td>
</tr>
<tr>
<td align="center">SDPA</td>
<td align="center">SeDuMi</td>
</tr>
<tr>
<td align="center">Mosek</td>
<td align="center">MOI.FileFormats.SDPA</td>
</tr>
</tbody>
</table>
<p>For more informations please read the <a href="https://jump.dev/Dualization.jl/stable/" rel="nofollow">documentation</a></p>
<h3><a id="user-content-bilevel-optimization" class="anchor" aria-hidden="true" href="#bilevel-optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bilevel optimization</h3>
<p>One classic method employed to solve bilevel optimization programs is to add the
KKT conditions of the second level problem to the upper level problem.
This package is used to obtain the dual feasibility constraint of the KKT conditions
in <a href="https://github.com/joaquimg/BilevelJuMP.jl"><code>BilevelJuMP.jl</code></a>.</p>
</article></div>