<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-clusterpathjl" class="anchor" aria-hidden="true" href="#clusterpathjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clusterpath.jl</h1>
<p>Julia implementation of $\ell_1$ Clusterpath, described in the paper[^1].</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Clusterpath&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Clusterpath<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<h3><a id="user-content-sample-procedure-with-big-merge-tracker" class="anchor" aria-hidden="true" href="#sample-procedure-with-big-merge-tracker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample procedure (with Big Merge Tracker)</h3>
<ul>
<li><code>generate_mixture_normal()</code>
<ul>
<li>generate <code>n</code> observations from mixture of univariate normals each with standard deviation $1$ and mean parameters <code>m</code> and proportion <code>p</code>.</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Random.seed!(0)
x1 = generate_mixture_normal(1000, [-4.5, 4.5], [0.35, 0.65])
"><pre>Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">0</span>)
x1 <span class="pl-k">=</span> <span class="pl-c1">generate_mixture_normal</span>(<span class="pl-c1">1000</span>, [<span class="pl-k">-</span><span class="pl-c1">4.5</span>, <span class="pl-c1">4.5</span>], [<span class="pl-c1">0.35</span>, <span class="pl-c1">0.65</span>])</pre></div>
<ul>
<li><code>clusterpath()</code>
<ul>
<li>inputs:
<ul>
<li><code>x</code>: observation vector</li>
<li><code>alpha</code>: Big Merge Tracker threshold</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="cc = clusterpath(x1, α=0., return_split=true)[&quot;splits&quot;][end]
"><pre>cc <span class="pl-k">=</span> <span class="pl-c1">clusterpath</span>(x1, α<span class="pl-k">=</span><span class="pl-c1">0.</span>, return_split<span class="pl-k">=</span><span class="pl-c1">true</span>)[<span class="pl-s"><span class="pl-pds">"</span>splits<span class="pl-pds">"</span></span>][<span class="pl-c1">end</span>]</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="-1.3447486506416237
"><pre><code>-1.3447486506416237
</code></pre></div>
<ul>
<li>Another toy data</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="N = 100
Random.seed!(1)
xx = [randn(N, 2) .* .5; (randn(N, 2) .* 0.3 .+ 3)]
gt = repeat([1, 2], inner=N);
"><pre>N <span class="pl-k">=</span> <span class="pl-c1">100</span>
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1</span>)
xx <span class="pl-k">=</span> [<span class="pl-c1">randn</span>(N, <span class="pl-c1">2</span>) <span class="pl-k">.*</span> <span class="pl-c1">.5</span>; (<span class="pl-c1">randn</span>(N, <span class="pl-c1">2</span>) <span class="pl-k">.*</span> <span class="pl-c1">0.3</span> <span class="pl-k">.+</span> <span class="pl-c1">3</span>)]
gt <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], inner<span class="pl-k">=</span>N);</pre></div>
<ul>
<li><code>plot_path()</code>
<ul>
<li>plot clusterpath with the data(<code>x</code>) and the solution path casted by <code>cast_solution()</code>.</li>
<li>If the dimension of <code>x</code> is greater than 4, only plot combinations of first four dimensions.<br>
<em><strong><code>Gaston.jl</code> and <code>gnuplot</code> should be installed and on the PATH of your system. Install gnuplot <a href="https://sourceforge.net/projects/gnuplot/files/gnuplot/" rel="nofollow">here</a>.</strong></em></li>
<li><code>x</code>: data</li>
<li><code>solution</code>: solution path dataframe from <code>cast_solution()</code></li>
<li><code>gt</code>: ground truth labels</li>
<li><code>savefig</code>: whether to save the figure as a PNG file. (default: <code>false</code>)</li>
<li><code>fname</code>: image file name to be used when <code>savefig</code> is <code>true</code>. (default: <code>"path_plot"</code>)</li>
<li><code>show</code>: whether to show the plot in the notebook. <strong>Highly recommended not to show if the number of samples is large.</strong> (default: <code>true</code>)</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot_path(xx[:, 1], α=0., gt=gt, show=true)
"><pre><span class="pl-c1">plot_path</span>(xx[:, <span class="pl-c1">1</span>], α<span class="pl-k">=</span><span class="pl-c1">0.</span>, gt<span class="pl-k">=</span>gt, show<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/output_34_0.png"><img src="./docs/output_34_0.png" alt="png" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot_path(xx; α=0., gt=gt, show=true)
"><pre><span class="pl-c1">plot_path</span>(xx; α<span class="pl-k">=</span><span class="pl-c1">0.</span>, gt<span class="pl-k">=</span>gt, show<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/output_36_0.png"><img src="./docs/output_36_0.png" alt="png" style="max-width:100%;"></a></p>
<ul>
<li><code>plot_cluster()</code>
<ul>
<li>Plots the scatter plot of the data <code>x</code> colored according to the cluster assigned by clusterpath algorithm.</li>
<li>If the dimension of <code>x</code> is greater than 2, perform PCA and plot two PCs.<br>
***<code>Gaston.jl</code> and <code>gnuplot</code> should be installed and on the PATH of your system. Install gnuplot <a href="https://sourceforge.net/projects/gnuplot/files/gnuplot/" rel="nofollow">here</a>. ***</li>
<li><code>x</code>: data</li>
<li><code>α</code>: threshold for BMT-clusterpath</li>
<li><code>n_node</code>: if greater than <code>1</code>, will assign clusters from previous merge status. (default: <code>1</code>)</li>
<li><code>show</code>: whether to show the figure.</li>
<li><code>savefig</code>: whether to save the figure as a png file. (default: <code>false</code>)</li>
<li><code>fname</code>: file name to save if <code>savefig</code> is true. (default: <code>"plot_clst"</code>)</li>
<li><code>verbose</code>: print out current iteration. (default: <code>false</code>)</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot_cluster(xx, α=0.2; show=true, savefig=false)
"><pre><span class="pl-c1">plot_cluster</span>(xx, α<span class="pl-k">=</span><span class="pl-c1">0.2</span>; show<span class="pl-k">=</span><span class="pl-c1">true</span>, savefig<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/output_38_0.png"><img src="./docs/output_38_0.png" alt="png" style="max-width:100%;"></a></p>
<ul>
<li><code>assign_clusters()</code>
<ul>
<li>assign cluster to each of the observations in <code>x</code>.</li>
<li>returns an array of length=size(x, 1) of cluster indices.</li>
<li><code>x</code>: data</li>
<li><code>α</code>: threshold for BMT-clusterpath</li>
<li><code>n_node</code>: if greater than <code>1</code>, will assign clusters from previous merge status. (default: <code>1</code>)</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="assign_cluster(xx, α=.2)'
"><pre><span class="pl-c1">assign_cluster</span>(xx, α<span class="pl-k">=</span><span class="pl-c1">.2</span>)<span class="pl-k">'</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="1×200 Adjoint{Int64,Array{Int64,1}}:
 1  1  1  1  1  1  1  1  1  1  1  1  1  …  2  2  2  2  2  2  2  2  2  2  2  2
"><pre><code>1×200 Adjoint{Int64,Array{Int64,1}}:
 1  1  1  1  1  1  1  1  1  1  1  1  1  …  2  2  2  2  2  2  2  2  2  2  2  2
</code></pre></div>
<h3><a id="user-content-population-procedure" class="anchor" aria-hidden="true" href="#population-procedure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Population Procedure</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="include(&quot;PopulationSplit.jl&quot;);
"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>PopulationSplit.jl<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>
<p><code>cond_mean_on_LR()</code></p>
<ul>
<li>Conditional mean on $(L, R)$, defined as $\mu_{L,R} = \big(\int_L^R f(x) dx\big)^{-1} \cdot \int_L^R x f(x) dx$</li>
</ul>
</li>
<li>
<p><code>find_split()</code></p>
<ul>
<li>Find a split point if <code>find_split=true</code>, or $\delta_1, \delta_2$ for truncation point searching if <code>find_deltas=true</code>.</li>
</ul>
</li>
<li>
<p><code>find_truncation()</code></p>
<ul>
<li>Find the population split points.</li>
</ul>
</li>
<li>
<p><code>clusterpath_pop()</code></p>
<ul>
<li>population-equivalent version of sample <code>clusterpath()</code> procedure.</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="splits = Array{Float64, 1}()
Lstars = Array{Float64, 1}()
Rstars = Array{Float64, 1}()

for p=0.5:0.05:0.9
    cp = clusterpath_pop(p, 4.5)
    push!(splits, cp[&quot;s&quot;])
    push!(Lstars, cp[&quot;L*&quot;])
    push!(Rstars, cp[&quot;R*&quot;])
end

println([round(s, digits=2) for s in splits]')
println([round(l, digits=2) for l in Lstars]')
println([round(r, digits=2) for r in Rstars]')
"><pre>splits <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64, 1}</span>()
Lstars <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64, 1}</span>()
Rstars <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64, 1}</span>()

<span class="pl-k">for</span> p<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">0.9</span>
    cp <span class="pl-k">=</span> <span class="pl-c1">clusterpath_pop</span>(p, <span class="pl-c1">4.5</span>)
    <span class="pl-c1">push!</span>(splits, cp[<span class="pl-s"><span class="pl-pds">"</span>s<span class="pl-pds">"</span></span>])
    <span class="pl-c1">push!</span>(Lstars, cp[<span class="pl-s"><span class="pl-pds">"</span>L*<span class="pl-pds">"</span></span>])
    <span class="pl-c1">push!</span>(Rstars, cp[<span class="pl-s"><span class="pl-pds">"</span>R*<span class="pl-pds">"</span></span>])
<span class="pl-k">end</span>

<span class="pl-c1">println</span>([<span class="pl-c1">round</span>(s, digits<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> s <span class="pl-k">in</span> splits]')
<span class="pl-c1">println</span>([<span class="pl-c1">round</span>(l, digits<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> l <span class="pl-k">in</span> Lstars]')
<span class="pl-c1">println</span>([<span class="pl-c1">round</span>(r, digits<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> r <span class="pl-k">in</span> Rstars]')</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[0.0 -0.45 -0.9 -1.36 -1.82 -2.31 -2.89 -3.82 NaN]
[-8.98 -8.54 -8.09 -7.63 -7.17 -6.67 -6.09 -5.18 NaN]
[8.98 9.44 9.89 10.34 10.79 11.24 11.7 12.17 NaN]
"><pre><code>[0.0 -0.45 -0.9 -1.36 -1.82 -2.31 -2.89 -3.82 NaN]
[-8.98 -8.54 -8.09 -7.63 -7.17 -6.67 -6.09 -5.18 NaN]
[8.98 9.44 9.89 10.34 10.79 11.24 11.7 12.17 NaN]
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="splits = Array{Float64, 1}()

for p=0.5:0.05:0.9
    push!(splits, clusterpath_pop(p, 4.5)[&quot;s&quot;])
end

splits'
"><pre>splits <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64, 1}</span>()

<span class="pl-k">for</span> p<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">0.9</span>
    <span class="pl-c1">push!</span>(splits, <span class="pl-c1">clusterpath_pop</span>(p, <span class="pl-c1">4.5</span>)[<span class="pl-s"><span class="pl-pds">"</span>s<span class="pl-pds">"</span></span>])
<span class="pl-k">end</span>

splits<span class="pl-k">'</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="1×9 Adjoint{Float64,Array{Float64,1}}:
 0.0  -0.4495  -0.9005  -1.355  -1.8195  -2.314  -2.8935  -3.816  NaN
"><pre><code>1×9 Adjoint{Float64,Array{Float64,1}}:
 0.0  -0.4495  -0.9005  -1.355  -1.8195  -2.314  -2.8935  -3.816  NaN
</code></pre></div>
<p>: exactly the same results as in the paper (supp. p.29 Table 1).</p>
<hr>
<p>[^1]: Radchenko, P. and Mukherjee, G. (2017), Convex clustering via l1 fusion penalization. J. R. Stat. Soc. B, 79: 1527-1546. <a href="https://doi.org/10.1111/rssb.12226" rel="nofollow">https://doi.org/10.1111/rssb.12226</a></p>
</article></div>