<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-wavjl" class="anchor" aria-hidden="true" href="#wavjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>WAV.jl</h1>
<p><a href="http://pkg.julialang.org/?pkg=WAV&amp;ver=1.0" rel="nofollow"><img src="https://camo.githubusercontent.com/3f1aa7250ee18997694ac553afed9b73f48eb7bd/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5741565f312e302e737667" alt="WAV" data-canonical-src="http://pkg.julialang.org/badges/WAV_1.0.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/dancasimiro/WAV.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/92d850f4e9c667d5c9997f8cff84af85616b757a/68747470733a2f2f7472617669732d63692e6f72672f64616e636173696d69726f2f5741562e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/dancasimiro/WAV.jl.png" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dancasimiro/wav-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f7294cd7b3256d73e803599a33fd42c4eb50919/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f64616e636173696d69726f2f7761762e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Windows Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/dancasimiro/wav.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/dancasimiro/WAV.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4cf1c3f18acf0d1b9255c79f4039548f4e3f66cc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f64616e636173696d69726f2f5741562e6a6c2f62616467652e706e67" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/dancasimiro/WAV.jl/badge.png" style="max-width:100%;"></a></p>
<p>This is a Julia package to read and write the WAV audio file format.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<pre><code>julia&gt; Pkg.add("WAV")
</code></pre>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h2>
<p>WAV provides <code>wavread</code>, <code>wavwrite</code>, and <code>wavappend</code> commands to read,
write, and append WAV files. Here is an example to get you started. It
generates some data, writes it to a file and then reads the data back.
<code>wavplay</code> is also provided for simple audio playback.</p>
<pre lang="jlcon"><code>julia&gt; using WAV
julia&gt; x = [0:7999;]
julia&gt; y = sin.(2 * pi * x / 8000)
julia&gt; wavwrite(y, "example.wav", Fs=8000)
julia&gt; y, fs = wavread("example.wav")
julia&gt; y = cos.(2 * pi * x / 8000)
julia&gt; wavappend(y, "example.wav")
julia&gt; y, fs = wavread("example.wav")
julia&gt; wavplay(y, fs)
</code></pre>
<h2><a id="user-content-wavread" class="anchor" aria-hidden="true" href="#wavread"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>wavread</h2>
<p>This function reads the samples from a WAV file. The samples are converted to floating
point values in the range from -1.0 to 1.0 by default.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">wavread</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>; subrange<span class="pl-k">=</span>Any, format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double<span class="pl-pds">"</span></span>)
<span class="pl-k">function</span> <span class="pl-en">wavread</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>; subrange<span class="pl-k">=</span>Any, format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double<span class="pl-pds">"</span></span>)</pre></div>
<p>The available options, and the default values, are:</p>
<ul>
<li><code>format</code> (default = <code>double</code>): changes the format of the returned samples. The string
<code>double</code> returns double precision floating point values in the range -1.0 to 1.0. The string
<code>native</code> returns the values as encoded in the file. The string <code>size</code> returns the number
of samples in the file, rather than the actual samples.</li>
<li><code>subrange</code> (default = <code>Any</code>): controls which samples are returned. The default, <code>Any</code>
returns all of the samples. Passing a number (<code>Real</code>), <code>N</code>, will return the first <code>N</code>
samples of each channel. Passing a range (<code>Range1{Real}</code>), <code>R</code>, will return the samples
in that range of each channel.</li>
</ul>
<p>The returned values are:</p>
<ul>
<li><code>y</code>: The acoustic samples; A matrix is returned for files that contain multiple channels.</li>
<li><code>Fs</code>: The sampling frequency</li>
<li><code>nbits</code>: The number of bits used to encode each sample</li>
<li><code>opt</code>: A vector of <code>WAVChunk</code> of optional chunks found in the WAV file.</li>
</ul>
<p>The elements in the <code>opt</code> vector depend on the contents
of the WAV file.</p>
<p>A <code>WAVChunk</code> is defined as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> WAVChunk
    id<span class="pl-k">::</span><span class="pl-c1">Symbol</span>
    data<span class="pl-k">::</span><span class="pl-c1">Vector{UInt8}</span>
<span class="pl-k">end</span></pre></div>
<p>where the ID is the four-character chunk ID. All valid WAV files will contain a <code>fmt</code> chunk,
with ID <code>Symbol("fmt ")</code> (note the trailing space).</p>
<p>In order to obtain the contents of the format chunk,
call <code>getformat(opt)</code>. This will return an instance of type
<code>WAVFormat</code>. The <code>WAVFormat</code> type is defined as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> WAVFormat
    compression_code<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
    nchannels<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
    sample_rate<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
    bytes_per_second<span class="pl-k">::</span><span class="pl-c1">UInt32</span> <span class="pl-c"><span class="pl-c">#</span> average bytes per second</span>
    block_align<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
    nbits<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
    ext<span class="pl-k">::</span><span class="pl-c1">WAVFormatExtension</span>
<span class="pl-k">end</span></pre></div>
<p>The <code>ext</code> field of type <code>WAVFormatExtension</code> is defined as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> WAVFormatExtension
    nbits<span class="pl-k">::</span><span class="pl-c1">UInt16</span> <span class="pl-c"><span class="pl-c">#</span> overrides nbits in WAVFormat type</span>
    channel_mask<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
    sub_format<span class="pl-k">::</span><span class="pl-c1">Array{UInt8, 1}</span> <span class="pl-c"><span class="pl-c">#</span> 16 byte GUID</span>
    <span class="pl-en">WAVFormatExtension</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">Array</span>(UInt8, <span class="pl-c1">0</span>))
    <span class="pl-en">WAVFormatExtension</span>(nb, cm, sb) <span class="pl-k">=</span> <span class="pl-c1">new</span>(nb, cm, sb)
<span class="pl-k">end</span></pre></div>
<p>You can use the <code>isformat</code> function to test how the samples are
encoded, without worrying about the <code>WAVFormatExtension</code>
type. Extended WAV files were added to deal with some ambiguity in the
original specification.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">isformat</span>(fmt<span class="pl-k">::</span><span class="pl-c1">WAVFormat</span>, code)</pre></div>
<p>The <code>isformat</code> function takes the <code>WAVFormat</code> object returned by
<code>getformat</code> and one of <code>WAV_FORMAT_</code>
constants, respectively. The function returns <code>true</code> when the
samples are encoded in the specified <code>code</code>.</p>
<p>The following functions are also defined to make this function compatible with MATLAB:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">wavread</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>, fmt<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(filename, format<span class="pl-k">=</span>fmt)
<span class="pl-en">wavread</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>, N<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(filename, subrange<span class="pl-k">=</span>N)
<span class="pl-en">wavread</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>, N<span class="pl-k">::</span><span class="pl-c1">Range1{Int}</span>) <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(filename, subrange<span class="pl-k">=</span>N)
<span class="pl-en">wavread</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>, N<span class="pl-k">::</span><span class="pl-c1">Int</span>, fmt<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(filename, subrange<span class="pl-k">=</span>N, format<span class="pl-k">=</span>fmt)
<span class="pl-en">wavread</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>, N<span class="pl-k">::</span><span class="pl-c1">Range1{Int}</span>, fmt<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(filename, subrange<span class="pl-k">=</span>N, format<span class="pl-k">=</span>fmt)</pre></div>
<h2><a id="user-content-wavwrite" class="anchor" aria-hidden="true" href="#wavwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>wavwrite</h2>
<p>Writes samples to a RIFF/WAVE file io object. The <code>io</code> argument
accepts either an <code>IO</code> object or a filename (<code>String</code>). The
function assumes that the sample rate is 8 kHz and uses 16 bits to
encode each sample. Both of these values can be changed with the
options parameter. Each column of the data represents a different
channel. Stereo files should contain two columns. The options are
passed via an <code>Options</code> object (see the :ref:<code>options page &lt;options-module&gt;</code>).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">wavwrite</span>(samples<span class="pl-k">::</span><span class="pl-c1">Array</span>, io<span class="pl-k">::</span><span class="pl-c1">IO</span>; Fs<span class="pl-k">=</span><span class="pl-c1">8000</span>, nbits<span class="pl-k">=</span><span class="pl-c1">16</span>, compression<span class="pl-k">=</span>WAVE_FORMAT_PCM, chunks<span class="pl-k">::</span><span class="pl-c1">Vector{WAVChunk}</span><span class="pl-k">=</span>WAVChunk[])
<span class="pl-k">function</span> <span class="pl-en">wavwrite</span>(samples<span class="pl-k">::</span><span class="pl-c1">Array</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>; Fs<span class="pl-k">=</span><span class="pl-c1">8000</span>, nbits<span class="pl-k">=</span><span class="pl-c1">16</span>, compression<span class="pl-k">=</span>WAVE_FORMAT_PCM, chunks<span class="pl-k">::</span><span class="pl-c1">Vector{WAVChunk}</span><span class="pl-k">=</span>WAVChunk[])</pre></div>
<p>The available options, and the default values, are:</p>
<ul>
<li><code>Fs</code> (default = <code>8000</code>): sampling frequency</li>
<li><code>nbits</code> (default = <code>16</code>): number of bits used to encode each
sample</li>
<li><code>compression</code> (default = <code>WAV_FORMAT_PCM</code>): controls the type of encoding used in the file</li>
<li><code>chunks</code> (default = <code>WAVChunk[]</code>): a vector of <code>WAVChunk</code> objects to be written to the file (in addition to the format chunk). See below for some utilities for creating <code>CUE</code> and <code>INFO</code>
chunks.</li>
</ul>
<p>The type of the input array, samples, also affects the generated
file. "Native" WAVE files are written when integers are passed into
wavwrite. This means that the literal values are written into the
file. The input ranges are as follows for integer samples.</p>
<table>
<thead>
<tr>
<th>N Bits</th>
<th>y Data Type</th>
<th>y Data Range</th>
<th>Output Format</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>uint8</td>
<td>0 &lt;= y &lt;= 255</td>
<td>uint8</td>
</tr>
<tr>
<td>16</td>
<td>int16</td>
<td>–32768 &lt;= y &lt;= +32767</td>
<td>int16</td>
</tr>
<tr>
<td>24</td>
<td>int32</td>
<td>–2^23 &lt;= y &lt;= 2^23 – 1</td>
<td>int32</td>
</tr>
</tbody>
</table>
<p>If samples contains floating point values, the input data ranges
are the following.</p>
<table>
<thead>
<tr>
<th>N Bits</th>
<th>y Data Type</th>
<th>y Data Range</th>
<th>Output Format</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>single or double</td>
<td>–1.0 &lt;= y &lt; +1.0</td>
<td>uint8</td>
</tr>
<tr>
<td>16</td>
<td>single or double</td>
<td>–1.0 &lt;= y &lt; +1.0</td>
<td>int16</td>
</tr>
<tr>
<td>24</td>
<td>single or double</td>
<td>–1.0 &lt;= y &lt; +1.0</td>
<td>int32</td>
</tr>
<tr>
<td>32</td>
<td>single or double</td>
<td>–1.0 &lt;= y &lt;= +1.0</td>
<td>single</td>
</tr>
</tbody>
</table>
<p>Floating point (single and double precision) values are written to the
file unaltered. The library will not modify the data range or representation.</p>
<p>The following functions are also defined to make this function
compatible with MATLAB:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array</span>, f<span class="pl-k">::</span><span class="pl-c1">Real</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, filename, Fs<span class="pl-k">=</span>f)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array</span>, f<span class="pl-k">::</span><span class="pl-c1">Real</span>, N<span class="pl-k">::</span><span class="pl-c1">Real</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, filename, Fs<span class="pl-k">=</span>f, nbits<span class="pl-k">=</span>N)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array{T}</span>, io<span class="pl-k">::</span><span class="pl-c1">IO</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Integer</span>} <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, io, nbits<span class="pl-k">=</span><span class="pl-c1">sizeof</span>(T)<span class="pl-k">*</span><span class="pl-c1">8</span>)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array{T}</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Integer</span>} <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, filename, nbits<span class="pl-k">=</span><span class="pl-c1">sizeof</span>(T)<span class="pl-k">*</span><span class="pl-c1">8</span>)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array{Int32}</span>, io<span class="pl-k">::</span><span class="pl-c1">IO</span>) <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, io, nbits<span class="pl-k">=</span><span class="pl-c1">24</span>)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array{Int32}</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, filename, nbits<span class="pl-k">=</span><span class="pl-c1">24</span>)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array{T}</span>, io<span class="pl-k">::</span><span class="pl-c1">IO</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">FloatingPoint</span>} <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, io, nbits<span class="pl-k">=</span><span class="pl-c1">sizeof</span>(T)<span class="pl-k">*</span><span class="pl-c1">8</span>, compression<span class="pl-k">=</span>WAVE_FORMAT_IEEE_FLOAT)
<span class="pl-en">wavwrite</span>(y<span class="pl-k">::</span><span class="pl-c1">Array{T}</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">FloatingPoint</span>} <span class="pl-k">=</span> <span class="pl-c1">wavwrite</span>(y, filename, nbits<span class="pl-k">=</span><span class="pl-c1">sizeof</span>(T)<span class="pl-k">*</span><span class="pl-c1">8</span>, compression<span class="pl-k">=</span>WAVE_FORMAT_IEEE_FLOAT)</pre></div>
<h2><a id="user-content-wavappend" class="anchor" aria-hidden="true" href="#wavappend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>wavappend</h2>
<p>Append samples to an existing WAV file.  All parameters (data type and range, output format, number of bits, number of channels, etc.) are assumed to match.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">wavappend</span>(samples<span class="pl-k">::</span><span class="pl-c1">Array</span>, io<span class="pl-k">::</span><span class="pl-c1">IO</span>)
<span class="pl-k">function</span> <span class="pl-en">wavappend</span>(samples<span class="pl-k">::</span><span class="pl-c1">Array</span>, filename<span class="pl-k">::</span><span class="pl-c1">String</span>)</pre></div>
<h2><a id="user-content-wavplay" class="anchor" aria-hidden="true" href="#wavplay"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>wavplay</h2>
<p>Playing audio back is also supported. The supported backends are:
AudioQueue (MacOSX) and Pulse Audio (Linux, libpulse-simple). There is
not a native backend for Windows yet.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">wavplay</span>(samples<span class="pl-k">::</span><span class="pl-c1">Array</span>, fs<span class="pl-k">::</span><span class="pl-c1">Number</span>)</pre></div>
<h2><a id="user-content-wavchunk" class="anchor" aria-hidden="true" href="#wavchunk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>WAVChunk</h2>
<p>Experimental support for reading and writing <code>CUE</code> and <code>INFO</code> chunks has been added in
version 1. The function</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">wav_cue_read</span>(chunks<span class="pl-k">::</span><span class="pl-c1">Vector{WAVChunk}</span>)</pre></div>
<p>takes a <code>Vector{WAVChunk}</code> (as returned by <code>wavread</code>) and returns a <code>Vector{WAVMarker}</code>,
where a <code>WAVMarker</code> is defined as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> WAVMarker
    label<span class="pl-k">::</span><span class="pl-c1">String</span>
    start_time<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
    duration<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
<span class="pl-k">end</span></pre></div>
<p>Where <code>start_time</code> and <code>duration</code> are in samples.
You can also turn <code>WAVMarker</code>s into a <code>Vector{WAVChunk}</code> (as accepted by <code>wavwrite</code>) by calling</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">wav_cue_write</span>(markers<span class="pl-k">::</span><span class="pl-c1">Dict{UInt32, WAVMarker}</span>)</pre></div>
<p>where the key for the dictionary is the ID of the marker to be written to file.</p>
<p>Similar functions exist for <code>INFO</code> chunks, namely</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">wav_info_write</span>(tags<span class="pl-k">::</span><span class="pl-c1">Dict{Symbol, String}</span>)<span class="pl-k">::</span><span class="pl-c1">Vector{WAVChunk}</span>
<span class="pl-c1">wav_info_read</span>(chunks<span class="pl-k">::</span><span class="pl-c1">Vector{WAVChunk}</span>)<span class="pl-k">::</span><span class="pl-c1">Dict{Symbol, String}</span></pre></div>
<p>where the keys for the <code>Dict{Symbol, String}</code> should be four-character RIFF INFO tag IDs as specified <a href="https://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info" rel="nofollow">here</a>. The values of the dictionary
correspond to the tag data.</p>
<h2><a id="user-content-other-julia-audio-packages" class="anchor" aria-hidden="true" href="#other-julia-audio-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other Julia Audio Packages</h2>
<p><a href="https://github.com/ssfrr/AudioIO.jl">AudioIO</a> is another audio
library in the Julia ecosystem. It supports more file formats
(including WAV) and implements a more powerful playback
interface. However, the license is more restrictive (GPL) because
of a dependence on <a href="http://www.mega-nerd.com/libsndfile/" rel="nofollow">libsndfile</a>.</p>
<p>Additionally, <a href="https://github.com/dmbates/FLAC.jl">FLAC.jl</a> includes
an <code>mmap</code> based WAV <a href="https://github.com/dmbates/FLAC.jl/blob/master/src/WAV.jl">reader</a>.</p>
</article></div>