<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-wavjl" class="anchor" aria-hidden="true" href="#wavjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WAV.jl</h1>
<p><a href="https://travis-ci.org/dancasimiro/WAV.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51bb278d336f2743fee0acd552f347d7800e080d884d3793d3fdffbae882a470/68747470733a2f2f7472617669732d63692e6f72672f64616e636173696d69726f2f5741562e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/dancasimiro/WAV.jl.png" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dancasimiro/wav-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6ec35256d2c802580b570f56ab2485ccf145dde1e0aef3d5b389908792886cd/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f64616e636173696d69726f2f7761762e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Windows Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/dancasimiro/wav.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/dancasimiro/WAV.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7e43b2763a1a81d8544c280f147b1154b736c461fd8a602b3fc21dd104cfcc27/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f64616e636173696d69726f2f5741562e6a6c2f62616467652e706e67" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/dancasimiro/WAV.jl/badge.png" style="max-width:100%;"></a></p>
<p>This is a Julia package to read and write the <a href="https://en.wikipedia.org/wiki/WAV" rel="nofollow">WAV audio file
format</a>.</p>
<p>WAV provides <code>wavread</code>, <code>wavwrite</code> and <code>wavappend</code> functions to read,
write, and append to WAV files. The function <code>wavplay</code> provides simple
audio playback.</p>
<p>These functions behave similarly to the former MATLAB functions of the
same name.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add WAV
"><pre><code>julia&gt; ]
pkg&gt; add WAV
</code></pre></div>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>The following example generates waveform data for a one second long 1
kHz sine tone, at a sampling frequency of 8 kHz, writes it to a WAV
file and then reads the data back. It then appends a 2 kHz tone to the
same file and plays the result.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using WAV
fs = 8e3
t = 0.0:1/fs:prevfloat(1.0)
f = 1e3
y = sin.(2pi * f * t) * 0.1
wavwrite(y, &quot;example.wav&quot;, Fs=fs)

y, fs = wavread(&quot;example.wav&quot;)
y = sin.(2pi * 2f * t) * 0.1
wavappend(y, &quot;example.wav&quot;)

y, fs = wavread(&quot;example.wav&quot;)
wavplay(y, fs)
"><pre><span class="pl-k">using</span> WAV
fs <span class="pl-k">=</span> <span class="pl-c1">8e3</span>
t <span class="pl-k">=</span> <span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">/</span>fs<span class="pl-k">:</span><span class="pl-c1">prevfloat</span>(<span class="pl-c1">1.0</span>)
f <span class="pl-k">=</span> <span class="pl-c1">1e3</span>
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi <span class="pl-k">*</span> f <span class="pl-k">*</span> t) <span class="pl-k">*</span> <span class="pl-c1">0.1</span>
<span class="pl-c1">wavwrite</span>(y, <span class="pl-s"><span class="pl-pds">"</span>example.wav<span class="pl-pds">"</span></span>, Fs<span class="pl-k">=</span>fs)

y, fs <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(<span class="pl-s"><span class="pl-pds">"</span>example.wav<span class="pl-pds">"</span></span>)
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>pi <span class="pl-k">*</span> <span class="pl-c1">2</span>f <span class="pl-k">*</span> t) <span class="pl-k">*</span> <span class="pl-c1">0.1</span>
<span class="pl-c1">wavappend</span>(y, <span class="pl-s"><span class="pl-pds">"</span>example.wav<span class="pl-pds">"</span></span>)

y, fs <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(<span class="pl-s"><span class="pl-pds">"</span>example.wav<span class="pl-pds">"</span></span>)
<span class="pl-c1">wavplay</span>(y, fs)</pre></div>
<h2><a id="user-content-news" class="anchor" aria-hidden="true" href="#news"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>News</h2>
<p>Experimental support for reading and writing <code>CUE</code> and <code>INFO</code>
chunks has been added in version 1, via the functions <code>wav_cue_read</code>,
<code>wav_cue_write</code>, <code>wav_info_read</code>, <code>wav_info_write</code>. See their
respective help text for details.</p>
<h2><a id="user-content-other-julia-audio-packages" class="anchor" aria-hidden="true" href="#other-julia-audio-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Julia Audio Packages</h2>
<p><a href="https://github.com/JuliaAudio/LibSndFile.jl">LibSndFile</a> is another
Julia audio file library. It supports more file formats (including
WAV) and implements a more powerful playback interface, all based on
<a href="http://www.mega-nerd.com/libsndfile/" rel="nofollow">libsndfile</a>.</p>
</article></div>