<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-numpyarraysjl" class="anchor" aria-hidden="true" href="#numpyarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NumPyArrays.jl</h1>
<p dir="auto">NumPyArrays.jl is a <a href="https://julialang.org/" rel="nofollow">Julia</a> language package that extends <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a>
in order to convert additional Julia arrays into <a href="https://numpy.org/" rel="nofollow">NumPy</a> arrays in <a href="https://python.org/" rel="nofollow">Python</a>.
An array produced by the <a href="https://docs.julialang.org/en/v1/base/arrays/#Base.view" rel="nofollow"><code>view</code></a>,
<a href="https://docs.julialang.org/en/v1/base/arrays/#Base.@view" rel="nofollow"><code>@view</code></a>, or
<a href="https://docs.julialang.org/en/v1/base/arrays/#Base.reinterpret" rel="nofollow"><code>reinterpret</code></a>
methods in Julia can be converted into a <a href="https://numpy.org/doc/1.20/reference/generated/numpy.ndarray.html" rel="nofollow"><code>numpy.ndarray</code></a>
in Python using this package.</p>
<h2 dir="auto"><a id="user-content-additional-features" class="anchor" aria-hidden="true" href="#additional-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional Features</h2>
<p dir="auto">NumPyArrays.jl also provides a <a href="https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-array" rel="nofollow"><code>AbstractArray</code> interface</a>
and extends some functions of PyCall to apply to a <code>NumPyArray</code>. Much of this is redundant with the functionality of <code>PyCall.PyArray</code>, which this wraps.</p>
<p dir="auto">For advanced usage with PyCall, it is recommended to convert the <code>NumPyArray</code> to a <code>PyObject</code> or <code>PyArray</code>.</p>
<h2 dir="auto"><a id="user-content-pycall-only-converts-some-julia-arrays-into-a-numpy-array" class="anchor" aria-hidden="true" href="#pycall-only-converts-some-julia-arrays-into-a-numpy-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PyCall only converts some Julia arrays into a NumPy array</h2>
<p dir="auto">PyCall.jl already converts a Julia <code>Array</code> into a NumPy array.
However, PyCall converts a <code>SubArray</code>, <code>PermutedDimsArray</code>,
<code>Base.ReinterpretArray</code>, or <code>Base.ReshapedArray</code>
a Python <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow"><code>list</code></a>
even if their element type is compatible with NumPy.</p>
<p dir="auto">NumPyArrays.jl extends PyCall.jl to allow any array with a compatible
element type where the method <code>strides</code> is applicable and who has a
parent or ancestor that is mutable. This includes the above array types
in <code>Base</code>.</p>
<h2 dir="auto"><a id="user-content-example-and-demonstration" class="anchor" aria-hidden="true" href="#example-and-demonstration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example and Demonstration</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using NumPyArrays, PyCall

julia&gt; rA = reinterpret(UInt8, zeros(Int8, 4,4))
4×4 reinterpret(UInt8, ::Array{Int8,2}):
 0x00  0x00  0x00  0x00
 0x00  0x00  0x00  0x00
 0x00  0x00  0x00  0x00
 0x00  0x00  0x00  0x00

julia&gt; pytypeof(PyObject(rA))
PyObject &lt;class 'list'&gt;

julia&gt; PyObject(rA)
PyObject [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

julia&gt; pytypeof(NumPyArray(rA))
PyObject &lt;class 'numpy.ndarray'&gt;

julia&gt; NumPyArray(rA)
4×4 NumPyArray{UInt8,2}:
 0x00  0x00  0x00  0x00
 0x00  0x00  0x00  0x00
 0x00  0x00  0x00  0x00
 0x00  0x00  0x00  0x00

julia&gt; PyObject(NumPyArray(rA))
PyObject array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=uint8)

julia&gt; sA = @view collect(1:16)[5:9]
5-element view(::Array{Int64,1}, 5:9) with eltype Int64:
 5
 6
 7
 8
 9

julia&gt; pytypeof(PyObject(sA))
PyObject &lt;class 'list'&gt;

julia&gt; PyObject(sA)
PyObject [5, 6, 7, 8, 9]

julia&gt; pytypeof(NumPyArray(sA))
PyObject &lt;class 'numpy.ndarray'&gt;

julia&gt; npsA = NumPyArray(sA)
5-element NumPyArray{Int64,1} with indices 0:4:
 5
 6
 7
 8
 9

julia&gt; sum(npsA)
35

julia&gt; np = pyimport(&quot;numpy&quot;); np.sum(npsA)
35"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NumPyArrays, PyCall

julia<span class="pl-k">&gt;</span> rA <span class="pl-k">=</span> <span class="pl-c1">reinterpret</span>(UInt8, <span class="pl-c1">zeros</span>(Int8, <span class="pl-c1">4</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">reinterpret</span>(UInt8, <span class="pl-k">::</span><span class="pl-c1">Array{Int8,2}</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pytypeof</span>(<span class="pl-c1">PyObject</span>(rA))
PyObject <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>list<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PyObject</span>(rA)
PyObject [[<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pytypeof</span>(<span class="pl-c1">NumPyArray</span>(rA))
PyObject <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>numpy.ndarray<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NumPyArray</span>(rA)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> NumPyArray{UInt8,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>  <span class="pl-c1">0x00</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PyObject</span>(<span class="pl-c1">NumPyArray</span>(rA))
PyObject <span class="pl-c1">array</span>([[<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>],
       [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>],
       [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>],
       [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]], dtype<span class="pl-k">=</span>uint8)

julia<span class="pl-k">&gt;</span> sA <span class="pl-k">=</span> <span class="pl-c1">@view</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">16</span>)[<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">9</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">9</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span>
 <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pytypeof</span>(<span class="pl-c1">PyObject</span>(sA))
PyObject <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>list<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PyObject</span>(sA)
PyObject [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pytypeof</span>(<span class="pl-c1">NumPyArray</span>(sA))
PyObject <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>numpy.ndarray<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> npsA <span class="pl-k">=</span> <span class="pl-c1">NumPyArray</span>(sA)
<span class="pl-c1">5</span><span class="pl-k">-</span>element NumPyArray{Int64,<span class="pl-c1">1</span>} with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span>
 <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(npsA)
<span class="pl-c1">35</span>

julia<span class="pl-k">&gt;</span> np <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>numpy<span class="pl-pds">"</span></span>); np<span class="pl-k">.</span><span class="pl-c1">sum</span>(npsA)
<span class="pl-c1">35</span></pre></div>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is being registered in Julia's general registry: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="941411612" data-permission-text="Title is private" data-url="https://github.com/JuliaRegistries/General/issues/40675" data-hovercard-type="pull_request" data-hovercard-url="/JuliaRegistries/General/pull/40675/hovercard" href="https://github.com/JuliaRegistries/General/pull/40675">JuliaRegistries/General#40675</a> .
When that pull request is merged, released versions of this package can be added using <code>Pkg.jl</code> via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add NumPyArrays"><pre>] add NumPyArrays</pre></div>
<p dir="auto">Alternatively, you can use <code>using Pkg; Pkg.add("NumPyArrays")</code>.</p>
<h3 dir="auto"><a id="user-content-obtaining-the-latest-version-of-this-package" class="anchor" aria-hidden="true" href="#obtaining-the-latest-version-of-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Obtaining the latest version of this package</h3>
<p dir="auto">To obtain tha latest of this package, including versions which may yet to be released,
use the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add https://github.com/mkitti/NumPyArrays.jl"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>mkitti<span class="pl-k">/</span>NumPyArrays<span class="pl-k">.</span>jl</pre></div>
<p dir="auto">Alternatively, you can use <code>using Pkg; Pkg.add(url="https://github.com/mkitti/NumPyArrays.jl")</code>.
<em>Note: Only released versions are intended to be stable</em></p>
<p dir="auto">If you wish to help develop this package, do one the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] dev https://github.com/mkitti/NumPyArrays.jl
] dev NumPyArrays"><pre>] dev https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>mkitti<span class="pl-k">/</span>NumPyArrays<span class="pl-k">.</span>jl
] dev NumPyArrays</pre></div>
<h2 dir="auto"><a id="user-content-questions" class="anchor" aria-hidden="true" href="#questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Questions</h2>
<h3 dir="auto"><a id="user-content-why-not-add-this-functionality-to-pycalljl" class="anchor" aria-hidden="true" href="#why-not-add-this-functionality-to-pycalljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why not add this functionality to PyCall.jl?</h3>
<p dir="auto">There is a pending pull request on PyCall.jl to integrate this functionality.
See <a href="https://github.com/JuliaPy/PyCall.jl/pull/876" data-hovercard-type="pull_request" data-hovercard-url="/JuliaPy/PyCall.jl/pull/876/hovercard">PyCall.jl#876: Convert AbstractArrays with strides to NumPy arrays</a>.
As of the creation of this package on July 10th, 2021, the pull request was last reviewed six months ago on January 13th, 2021.</p>
<h3 dir="auto"><a id="user-content-should-i-use-numpyarray-or-pycallpyarray-to-wrap-arrays-from-python" class="anchor" aria-hidden="true" href="#should-i-use-numpyarray-or-pycallpyarray-to-wrap-arrays-from-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Should I use <code>NumPyArray</code> or <code>PyCall.PyArray</code> to wrap arrays from Python?</h3>
<p dir="auto">You should <code>PyCall.PyArray</code>. This package is primarily useful for converting certain Julia arrays into a <code>PyCall.PyArray</code>.</p>
<h3 dir="auto"><a id="user-content-why-not-just-extend-pyobject--pyarray-by-adding-methods-to-those-types" class="anchor" aria-hidden="true" href="#why-not-just-extend-pyobject--pyarray-by-adding-methods-to-those-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why not just extend PyObject / PyArray by adding methods to those types?</h3>
<p dir="auto">Since boith <code>PyObject</code> or <code>PyArray</code> are defined in PyCall.jl and not this package, adding methods to those types would be
<a href="https://docs.julialang.org/en/v1/manual/style-guide/#Avoid-type-piracy" rel="nofollow">type piracy</a>. We avoid type piracy in this package
by creating a new type <code>NumPyArray</code> which wraps <code>PyArray</code>.</p>
<h2 dir="auto"><a id="user-content-have-you-heard-of-pythoncalljl" class="anchor" aria-hidden="true" href="#have-you-heard-of-pythoncalljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Have you heard of <a href="https://github.com/cjdoris/PythonCall.jl">PythonCall.jl</a>?</h2>
<p dir="auto">Yes. <a href="https://discourse.julialang.org/t/converting-julia-arrays-views-to-numpy-arrays-via-pycall/61186/6" rel="nofollow">PythonCall.jl</a>
is another implementation of a Julia language interface to the Python language. My understanding is that PythonCall.jl
already includes this functionality.</p>
<h3 dir="auto"><a id="user-content-should-numpyarraysjl-moved-under-the-pyjulia-organization" class="anchor" aria-hidden="true" href="#should-numpyarraysjl-moved-under-the-pyjulia-organization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Should NumPyArrays.jl moved under the PyJulia organization?</h3>
<p dir="auto">Sure. Feel free to contact me.</p>
</article></div>