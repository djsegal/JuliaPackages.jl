<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-saslibjl" class="anchor" aria-hidden="true" href="#saslibjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SASLib.jl</h1>
<p><a href="https://travis-ci.org/tk3369/SASLib.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5192891888fef25013cc5884f6c992456c59e234/68747470733a2f2f7472617669732d63692e6f72672f746b333336392f5341534c69622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/tk3369/SASLib.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tk3369/saslib-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/7a7ce632d4bfba2870a13c9017953f971daa351a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f72646735683938386169666e376c76672f6272616e63682f6d61737465723f7376673d74727565" alt="Appveyor Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/rdg5h988aifn7lvg/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tk3369/SASLib.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/00ca9c370495019528365bfbec59a115b2627786/687474703a2f2f636f6465636f762e696f2f6769746875622f746b333336392f5341534c69622e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tk3369/SASLib.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>SASLib is a fast reader for sas7bdat files. The goal is to allow easier integration with SAS processes.  Only <code>sas7bdat</code> format is supported.  SASLib is licensed under the MIT Expat license.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<pre><code>Pkg.add("SASLib")
</code></pre>
<h2><a id="user-content-read-performance" class="anchor" aria-hidden="true" href="#read-performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Read Performance</h2>
<p>I did benchmarking mostly on my Macbook Pro laptop.  In general, the Julia implementation is somewhere between 10-100x faster than the Python Pandas.  Test results are documented in the <code>test/perf_results_&lt;version&gt;</code> folders.</p>
<p>Latest performance <a href="test/perf_results_1.0.0">test results for v1.0.0</a> is as follows:</p>
<table>
<thead>
<tr>
<th>Test</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>py_jl_homimp_50.md</td>
<td>30x faster than Python/Pandas</td>
</tr>
<tr>
<td>py_jl_numeric_1000000_2_100.md</td>
<td>10x faster than Python/Pandas</td>
</tr>
<tr>
<td>py_jl_productsales_100.md</td>
<td>50x faster than Python/Pandas</td>
</tr>
<tr>
<td>py_jl_test1_100.md</td>
<td>120x faster than Python/Pandas</td>
</tr>
<tr>
<td>py_jl_topical_30.md</td>
<td>30x faster than Python/Pandas</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-user-guide" class="anchor" aria-hidden="true" href="#user-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>User Guide</h2>
<pre><code>julia&gt; using SASLib
</code></pre>
<h3><a id="user-content-reading-sas-files" class="anchor" aria-hidden="true" href="#reading-sas-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading SAS Files</h3>
<p>Use the <code>readsas</code> function to read a SAS7BDAT file.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> rs <span class="pl-k">=</span> <span class="pl-c1">readsas</span>(<span class="pl-s"><span class="pl-pds">"</span>productsales.sas7bdat<span class="pl-pds">"</span></span>)
Read productsales<span class="pl-k">.</span>sas7bdat with size <span class="pl-c1">1440</span> x <span class="pl-c1">10</span> <span class="pl-k">in</span> <span class="pl-c1">0.00256</span> seconds
SASLib<span class="pl-k">.</span>ResultSet (<span class="pl-c1">1440</span> rows x <span class="pl-c1">10</span> columns)
Columns <span class="pl-c1">1</span><span class="pl-k">:</span>ACTUAL, <span class="pl-c1">2</span><span class="pl-k">:</span>PREDICT, <span class="pl-c1">3</span><span class="pl-k">:</span>COUNTRY, <span class="pl-c1">4</span><span class="pl-k">:</span>REGION, <span class="pl-c1">5</span><span class="pl-k">:</span>DIVISION, <span class="pl-c1">6</span><span class="pl-k">:</span>PRODTYPE, <span class="pl-c1">7</span><span class="pl-k">:</span>PRODUCT, <span class="pl-c1">8</span><span class="pl-k">:</span>QUARTER, <span class="pl-c1">9</span><span class="pl-k">:</span>YEAR, <span class="pl-c1">10</span><span class="pl-k">:</span>MONTH
<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">925.0</span>, <span class="pl-c1">850.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">1.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-c1">999.0</span>, <span class="pl-c1">297.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">1.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">02</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">608.0</span>, <span class="pl-c1">846.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">1.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">03</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">4</span><span class="pl-k">:</span> <span class="pl-c1">642.0</span>, <span class="pl-c1">533.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">2.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">04</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">5</span><span class="pl-k">:</span> <span class="pl-c1">656.0</span>, <span class="pl-c1">646.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">2.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">01</span>
⋮</pre></div>
<h3><a id="user-content-accessing-results" class="anchor" aria-hidden="true" href="#accessing-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accessing Results</h3>
<p>There are several ways to access the data conveniently without using any third party packages. Each cell value may be retrieved directly via the regular <code>[i,j]</code> index.  Accessing an entire row or column returns a tuple and a vector respectively.</p>
<h4><a id="user-content-direct-cell-access" class="anchor" aria-hidden="true" href="#direct-cell-access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Direct cell access</h4>
<pre><code>julia&gt; rs[4,2]
533.0

julia&gt; rs[4, :PREDICT]
533.0
</code></pre>
<h4><a id="user-content-indexing-by-row-number-returns-a-named-tuple" class="anchor" aria-hidden="true" href="#indexing-by-row-number-returns-a-named-tuple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Indexing by row number returns a named tuple</h4>
<pre><code>julia&gt; rs[1]
(ACTUAL = 925.0, PREDICT = 850.0, COUNTRY = "CANADA", REGION = "EAST", DIVISION = "EDUCATION", PRODTYPE = "FURNITURE", PRODUCT = "SOFA", QUARTER = 1.0, YEAR = 1993.0, MONTH = 1993-01-01)
</code></pre>
<h4><a id="user-content-columns-access-by-name-via-indexing-or-as-a-property" class="anchor" aria-hidden="true" href="#columns-access-by-name-via-indexing-or-as-a-property"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Columns access by name via indexing or as a property</h4>
<pre><code>julia&gt; rs[:ACTUAL]
1440-element Array{Float64,1}:
 925.0
 999.0
 608.0
 ⋮

julia&gt; rs.ACTUAL
1440-element Array{Float64,1}:
 925.0
 999.0
 608.0
 ⋮
</code></pre>
<h4><a id="user-content-slice-a-range-of-rows" class="anchor" aria-hidden="true" href="#slice-a-range-of-rows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Slice a range of rows</h4>
<pre><code>julia&gt; rs[2:4]
SASLib.ResultSet (3 rows x 10 columns)
Columns 1:ACTUAL, 2:PREDICT, 3:COUNTRY, 4:REGION, 5:DIVISION, 6:PRODTYPE, 7:PRODUCT, 8:QUARTER, 9:YEAR, 10:MONTH
1: 999.0, 297.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-02-01
2: 608.0, 846.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-03-01
3: 642.0, 533.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 2.0, 1993.0, 1993-04-01
</code></pre>
<h4><a id="user-content-slice-a-subset-of-columns" class="anchor" aria-hidden="true" href="#slice-a-subset-of-columns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Slice a subset of columns</h4>
<pre><code>julia&gt; rs[:ACTUAL, :PREDICT, :YEAR, :MONTH]
SASLib.ResultSet (1440 rows x 4 columns)
Columns 1:ACTUAL, 2:PREDICT, 3:YEAR, 4:MONTH
1: 925.0, 850.0, 1993.0, 1993-01-01
2: 999.0, 297.0, 1993.0, 1993-02-01
3: 608.0, 846.0, 1993.0, 1993-03-01
4: 642.0, 533.0, 1993.0, 1993-04-01
5: 656.0, 646.0, 1993.0, 1993-05-01
⋮
</code></pre>
<h3><a id="user-content-mutation" class="anchor" aria-hidden="true" href="#mutation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutation</h3>
<p>You may assign values at the cell level, causing a side effect in memory:</p>
<pre><code>julia&gt; srs = rs[:ACTUAL, :PREDICT, :YEAR, :MONTH][1:2]
SASLib.ResultSet (2 rows x 4 columns)
Columns 1:ACTUAL, 2:PREDICT, 3:YEAR, 4:MONTH
1: 925.0, 850.0, 1993.0, 1993-01-01
2: 999.0, 297.0, 1993.0, 1993-02-01

julia&gt; srs[2,2] = 3
3

julia&gt; rs[1:2]
SASLib.ResultSet (2 rows x 10 columns)
Columns 1:ACTUAL, 2:PREDICT, 3:COUNTRY, 4:REGION, 5:DIVISION, 6:PRODTYPE, 7:PRODUCT, 8:QUARTER, 9:YEAR, 10:MONTH
1: 925.0, 850.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-01-01
2: 999.0, 3.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-02-01
</code></pre>
<h3><a id="user-content-iteration" class="anchor" aria-hidden="true" href="#iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Iteration</h3>
<p>ResultSet implements the usual standard iteration interface, so it's easy to walk through the results:</p>
<pre><code>julia&gt; mean(r.ACTUAL - r.PREDICT for r in rs)
16.695833333333333
</code></pre>
<h3><a id="user-content-metadata" class="anchor" aria-hidden="true" href="#metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Metadata</h3>
<p>There are simple functions to retrieve meta information about a ResultSet.</p>
<pre><code>names(rs)
size(rs)
length(rs)
</code></pre>
<h3><a id="user-content-tablesjl--dataframe" class="anchor" aria-hidden="true" href="#tablesjl--dataframe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tables.jl / DataFrame</h3>
<p>It may be beneficial to convert the result set to DataFrame for more complex queries and manipulations.
The <code>SASLib.ResultSet</code> object implements the <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> interface,
so you can directly create a DataFrame as shown below:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(rs);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(df, <span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">10</span> DataFrame
│ Row │ ACTUAL  │ PREDICT │ COUNTRY │ REGION │ DIVISION  │ PRODTYPE  │ PRODUCT │ QUARTER │ YEAR    │ MONTH      │
│     │ Float64 │ Float64 │ String  │ String │ String    │ String    │ String  │ Float64 │ Float64 │ Dates…⍰    │
├─────┼─────────┼─────────┼─────────┼────────┼───────────┼───────────┼─────────┼─────────┼─────────┼────────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">925.0</span>   │ <span class="pl-c1">850.0</span>   │ CANADA  │ EAST   │ EDUCATION │ FURNITURE │ SOFA    │ <span class="pl-c1">1.0</span>     │ <span class="pl-c1">1993.0</span>  │ <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span> │
│ <span class="pl-c1">2</span>   │ <span class="pl-c1">999.0</span>   │ <span class="pl-c1">297.0</span>   │ CANADA  │ EAST   │ EDUCATION │ FURNITURE │ SOFA    │ <span class="pl-c1">1.0</span>     │ <span class="pl-c1">1993.0</span>  │ <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">02</span><span class="pl-k">-</span><span class="pl-c1">01</span> │
│ <span class="pl-c1">3</span>   │ <span class="pl-c1">608.0</span>   │ <span class="pl-c1">846.0</span>   │ CANADA  │ EAST   │ EDUCATION │ FURNITURE │ SOFA    │ <span class="pl-c1">1.0</span>     │ <span class="pl-c1">1993.0</span>  │ <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">03</span><span class="pl-k">-</span><span class="pl-c1">01</span> │
│ <span class="pl-c1">4</span>   │ <span class="pl-c1">642.0</span>   │ <span class="pl-c1">533.0</span>   │ CANADA  │ EAST   │ EDUCATION │ FURNITURE │ SOFA    │ <span class="pl-c1">2.0</span>     │ <span class="pl-c1">1993.0</span>  │ <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">04</span><span class="pl-k">-</span><span class="pl-c1">01</span> │
│ <span class="pl-c1">5</span>   │ <span class="pl-c1">656.0</span>   │ <span class="pl-c1">646.0</span>   │ CANADA  │ EAST   │ EDUCATION │ FURNITURE │ SOFA    │ <span class="pl-c1">2.0</span>     │ <span class="pl-c1">1993.0</span>  │ <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">01</span> │</pre></div>
<h3><a id="user-content-inclusionexclusion-of-columns" class="anchor" aria-hidden="true" href="#inclusionexclusion-of-columns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inclusion/Exclusion of Columns</h3>
<p><strong>Column Inclusion</strong></p>
<p>It is always faster to read only the columns that you need.  The <code>include_columns</code> argument comes in handy:</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", include_columns=[:YEAR, :MONTH, :PRODUCT, :ACTUAL])
Read productsales.sas7bdat with size 1440 x 4 in 0.00151 seconds
SASLib.ResultSet (1440 rows x 4 columns)
Columns 1:ACTUAL, 2:PRODUCT, 3:YEAR, 4:MONTH
1: 925.0, SOFA, 1993.0, 1993-01-01
2: 999.0, SOFA, 1993.0, 1993-02-01
3: 608.0, SOFA, 1993.0, 1993-03-01
4: 642.0, SOFA, 1993.0, 1993-04-01
5: 656.0, SOFA, 1993.0, 1993-05-01
⋮
</code></pre>
<p><strong>Column Exclusion</strong></p>
<p>Likewise, you can read all columns except the ones you don't want as specified in <code>exclude_columns</code> argument:</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", exclude_columns=[:YEAR, :MONTH, :PRODUCT, :ACTUAL])
Read productsales.sas7bdat with size 1440 x 6 in 0.00265 seconds
SASLib.ResultSet (1440 rows x 6 columns)
Columns 1:PREDICT, 2:COUNTRY, 3:REGION, 4:DIVISION, 5:PRODTYPE, 6:QUARTER
1: 850.0, CANADA, EAST, EDUCATION, FURNITURE, 1.0
2: 297.0, CANADA, EAST, EDUCATION, FURNITURE, 1.0
3: 846.0, CANADA, EAST, EDUCATION, FURNITURE, 1.0
4: 533.0, CANADA, EAST, EDUCATION, FURNITURE, 2.0
5: 646.0, CANADA, EAST, EDUCATION, FURNITURE, 2.0
⋮
</code></pre>
<p><strong>Case Sensitivity and Column Number</strong></p>
<p>Column symbols are matched in a case insensitive manner with SAS column names.</p>
<p>Both <code>include_columns</code> and <code>exclude_columns</code> accept column number.  In fact, you can mixed column symbols and column numbers as such:</p>
<pre><code>julia&gt; readsas("productsales.sas7bdat", include_columns=[:actual, :predict, 8, 9, 10])
Read productsales.sas7bdat with size 1440 x 5 in 0.16378 seconds
SASLib.ResultSet (1440 rows x 5 columns)
Columns 1:ACTUAL, 2:PREDICT, 3:QUARTER, 4:YEAR, 5:MONTH
1: 925.0, 850.0, 1.0, 1993.0, 1993-01-01
2: 999.0, 297.0, 1.0, 1993.0, 1993-02-01
3: 608.0, 846.0, 1.0, 1993.0, 1993-03-01
4: 642.0, 533.0, 2.0, 1993.0, 1993-04-01
5: 656.0, 646.0, 2.0, 1993.0, 1993-05-01
⋮
</code></pre>
<h3><a id="user-content-incremental-reading" class="anchor" aria-hidden="true" href="#incremental-reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Incremental Reading</h3>
<p>If you need to read files incrementally, you can use the <code>SASLib.open</code> function to obtain a handle of the file.  Then, use the <code>SASLib.read</code> function to fetch a number of rows.  Remember to close the handler with <code>SASLib.close</code> to avoid memory leak.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> handler <span class="pl-k">=</span> SASLib<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>productsales.sas7bdat<span class="pl-pds">"</span></span>)
SASLib<span class="pl-k">.</span>Handler[productsales<span class="pl-k">.</span>sas7bdat]

julia<span class="pl-k">&gt;</span> rs <span class="pl-k">=</span> SASLib<span class="pl-k">.</span><span class="pl-c1">read</span>(handler, <span class="pl-c1">2</span>)
Read productsales<span class="pl-k">.</span>sas7bdat with size <span class="pl-c1">2</span> x <span class="pl-c1">10</span> <span class="pl-k">in</span> <span class="pl-c1">0.06831</span> seconds
SASLib<span class="pl-k">.</span>ResultSet (<span class="pl-c1">2</span> rows x <span class="pl-c1">10</span> columns)
Columns <span class="pl-c1">1</span><span class="pl-k">:</span>ACTUAL, <span class="pl-c1">2</span><span class="pl-k">:</span>PREDICT, <span class="pl-c1">3</span><span class="pl-k">:</span>COUNTRY, <span class="pl-c1">4</span><span class="pl-k">:</span>REGION, <span class="pl-c1">5</span><span class="pl-k">:</span>DIVISION, <span class="pl-c1">6</span><span class="pl-k">:</span>PRODTYPE, <span class="pl-c1">7</span><span class="pl-k">:</span>PRODUCT, <span class="pl-c1">8</span><span class="pl-k">:</span>QUARTER, <span class="pl-c1">9</span><span class="pl-k">:</span>YEAR, <span class="pl-c1">10</span><span class="pl-k">:</span>MONTH
<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">925.0</span>, <span class="pl-c1">850.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">1.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-c1">999.0</span>, <span class="pl-c1">297.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">1.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">02</span><span class="pl-k">-</span><span class="pl-c1">01</span>

julia<span class="pl-k">&gt;</span> rs <span class="pl-k">=</span> SASLib<span class="pl-k">.</span><span class="pl-c1">read</span>(handler, <span class="pl-c1">3</span>)
Read productsales<span class="pl-k">.</span>sas7bdat with size <span class="pl-c1">3</span> x <span class="pl-c1">10</span> <span class="pl-k">in</span> <span class="pl-c1">0.00046</span> seconds
SASLib<span class="pl-k">.</span>ResultSet (<span class="pl-c1">3</span> rows x <span class="pl-c1">10</span> columns)
Columns <span class="pl-c1">1</span><span class="pl-k">:</span>ACTUAL, <span class="pl-c1">2</span><span class="pl-k">:</span>PREDICT, <span class="pl-c1">3</span><span class="pl-k">:</span>COUNTRY, <span class="pl-c1">4</span><span class="pl-k">:</span>REGION, <span class="pl-c1">5</span><span class="pl-k">:</span>DIVISION, <span class="pl-c1">6</span><span class="pl-k">:</span>PRODTYPE, <span class="pl-c1">7</span><span class="pl-k">:</span>PRODUCT, <span class="pl-c1">8</span><span class="pl-k">:</span>QUARTER, <span class="pl-c1">9</span><span class="pl-k">:</span>YEAR, <span class="pl-c1">10</span><span class="pl-k">:</span>MONTH
<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">608.0</span>, <span class="pl-c1">846.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">1.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">03</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-c1">642.0</span>, <span class="pl-c1">533.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">2.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">04</span><span class="pl-k">-</span><span class="pl-c1">01</span>
<span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">656.0</span>, <span class="pl-c1">646.0</span>, CANADA, EAST, EDUCATION, FURNITURE, SOFA, <span class="pl-c1">2.0</span>, <span class="pl-c1">1993.0</span>, <span class="pl-c1">1993</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">01</span>

julia<span class="pl-k">&gt;</span> SASLib<span class="pl-k">.</span><span class="pl-c1">close</span>(handler)</pre></div>
<p>Note that there is no facility at the moment to jump and read a subset of rows.<br>
SASLib always read from the beginning.</p>
<h3><a id="user-content-string-column-constructor" class="anchor" aria-hidden="true" href="#string-column-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>String Column Constructor</h3>
<p>By default, string columns are read into a special AbstractArray structure called <code>ObjectPool</code> in order to conserve memory space that might otherwise be wasted for duplicate string values.  SASLib tries to be smart -- when it encounters too many unique values (&gt; 10%) in a large array (&gt; 2000 rows), it falls back to a regular Julia array.</p>
<p>You can use a different array type (e.g. <a href="https://github.com/JuliaData/CategoricalArrays.jl">CategoricalArray</a> or <a href="https://github.com/JuliaComputing/PooledArrays.jl">PooledArray</a>) for any columns as you wish by specifying a <code>string_array_fn</code> parameter when reading the file.  This argument must be a Dict that maps a column symbol into a function that takes an integer argument and returns any array of that size.</p>
<p>Here's the normal case:</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", include_columns=[:COUNTRY, :REGION]);
Read productsales.sas7bdat with size 1440 x 2 in 0.00193 seconds

julia&gt; typeof.(columns(rs))
2-element Array{DataType,1}:
 SASLib.ObjectPool{String,UInt16}
 SASLib.ObjectPool{String,UInt16}
</code></pre>
<p>If you really want a regular String array, you can force SASLib to do so as such:</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", include_columns=[:COUNTRY, :REGION],
                    string_array_fn=Dict(:COUNTRY =&gt; (n)-&gt;fill("",n)));
Read productsales.sas7bdat with size 1440 x 2 in 0.00333 seconds

julia&gt; typeof.(columns(rs))
2-element Array{DataType,1}:
 Array{String,1}                 
 SASLib.ObjectPool{String,UInt16}
</code></pre>
<p>For convenience, <code>SASLib.REGULAR_STR_ARRAY</code> is a function that does exactly that.  In addition, if you need all columns to be configured the same then the key of the <code>string_array_fn</code> dict may be just the symbol <code>:_all_</code>.</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", include_columns=[:COUNTRY, :REGION],
                    string_array_fn=Dict(:_all_ =&gt; REGULAR_STR_ARRAY));
Read productsales.sas7bdat with size 1440 x 2 in 0.00063 seconds

julia&gt; typeof.(columns(rs))
2-element Array{DataType,1}:
 Array{String,1}
 Array{String,1}
</code></pre>
<h3><a id="user-content-numeric-columns-constructor" class="anchor" aria-hidden="true" href="#numeric-columns-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Numeric Columns Constructor</h3>
<p>In general, SASLib allocates native arrays when returning numerical column data.  However, you can provide a custom constructor so you would be able to either pre-allcoate the array or construct a different type of array.  The <code>number_array_fn</code> parameter is a <code>Dict</code> that maps column symbols to the custom constructors.  Similar to <code>string_array_fn</code>, this Dict may be specified with a special symbol <code>:_all_</code> to indicate such constructor be used for all numeric columns.</p>
<p>Example - create <code>SharedArray</code>:</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", include_columns=[:ACTUAL,:PREDICT], 
                    number_array_fn=Dict(:ACTUAL =&gt; (n)-&gt;SharedArray{Float64}(n)));
Read productsales.sas7bdat with size 1440 x 2 in 0.00385 seconds

julia&gt; typeof.(columns(rs))
2-element Array{DataType,1}:
 SharedArray{Float64,1}
 Array{Float64,1}          
</code></pre>
<p>Example - preallocate arrays:</p>
<pre><code>julia&gt; A = zeros(1440, 2);

julia&gt; f1(n) = @view A[:, 1];

julia&gt; f2(n) = @view A[:, 2];

julia&gt; readsas("productsales.sas7bdat", include_columns=[:ACTUAL,:PREDICT], 
               number_array_fn=Dict(:ACTUAL =&gt; f1, :PREDICT =&gt; f2));
Read productsales.sas7bdat with size 1440 x 2 in 0.00041 seconds

julia&gt; A[1:5,:]
5×2 Array{Float64,2}:
 925.0  850.0
 999.0  297.0
 608.0  846.0
 642.0  533.0
 656.0  646.0
</code></pre>
<h3><a id="user-content-column-type-conversion" class="anchor" aria-hidden="true" href="#column-type-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Column Type Conversion</h3>
<p>Often, you want a column to be an integer but the SAS7BDAT stores everything as Float64. Specifying the <code>column_type</code> argument does the conversion for you.</p>
<pre><code>julia&gt; rs = readsas("productsales.sas7bdat", column_types=Dict(:ACTUAL=&gt;Int))
Read productsales.sas7bdat with size 1440 x 10 in 0.08043 seconds
SASLib.ResultSet (1440 rows x 10 columns)
Columns 1:ACTUAL, 2:PREDICT, 3:COUNTRY, 4:REGION, 5:DIVISION, 6:PRODTYPE, 7:PRODUCT, 8:QUARTER, 9:YEAR, 10:MONTH
1: 925, 850.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-01-01
2: 999, 297.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-02-01
3: 608, 846.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 1.0, 1993.0, 1993-03-01
4: 642, 533.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 2.0, 1993.0, 1993-04-01
5: 656, 646.0, CANADA, EAST, EDUCATION, FURNITURE, SOFA, 2.0, 1993.0, 1993-05-01

julia&gt; typeof(rs[:ACTUAL])
Array{Int64,1}
</code></pre>
<h3><a id="user-content-file-metadata" class="anchor" aria-hidden="true" href="#file-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>File Metadata</h3>
<p>You may obtain meta data for a SAS data file using the <code>metadata</code> function.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> md <span class="pl-k">=</span> <span class="pl-c1">metadata</span>(<span class="pl-s"><span class="pl-pds">"</span>productsales.sas7bdat<span class="pl-pds">"</span></span>)
File<span class="pl-k">:</span> productsales<span class="pl-k">.</span>sas7bdat (<span class="pl-c1">1440</span> x <span class="pl-c1">10</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">ACTUAL</span>(Float64)                <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">DIVISION</span>(String)               <span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-c1">YEAR</span>(Float64)
<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">PREDICT</span>(Float64)               <span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">PRODTYPE</span>(String)               <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">MONTH</span>(Date<span class="pl-k">/</span>Missings<span class="pl-k">.</span>Missing)
<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">COUNTRY</span>(String)                <span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">PRODUCT</span>(String) 
<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">REGION</span>(String)                 <span class="pl-c1">8</span><span class="pl-k">:</span><span class="pl-c1">QUARTER</span>(Float64)</pre></div>
<p>It's OK to access the fields directly.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(SASLib<span class="pl-k">.</span>Metadata)
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{Symbol,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:filename</span>   
 <span class="pl-c1">:encoding</span>   
 <span class="pl-c1">:endianness</span> 
 <span class="pl-c1">:compression</span>
 <span class="pl-c1">:pagesize</span>   
 <span class="pl-c1">:npages</span>     
 <span class="pl-c1">:nrows</span>      
 <span class="pl-c1">:ncols</span>      
 <span class="pl-c1">:columnsinfo</span>

julia<span class="pl-k">&gt;</span> md <span class="pl-k">=</span> <span class="pl-c1">metadata</span>(<span class="pl-s"><span class="pl-pds">"</span>test3.sas7bdat<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> md<span class="pl-k">.</span>compression
<span class="pl-c1">:RDC</span></pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related Packages</h2>
<p><a href="https://github.com/davidanthoff/ReadStat.jl">ReadStat.jl</a> uses the <a href="https://github.com/WizardMac/ReadStat">ReadStat C-library</a>.  However, ReadStat-C does not support reading RDC-compressed binary files.</p>
<p><a href="https://github.com/davidanthoff/StatFiles.jl">StatFiles.jl</a> is a higher-level package built on top of ReadStat.jl and implements the <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a> interface.</p>
<p><a href="https://github.com/pandas-dev/pandas">Python Pandas</a> package has an implementation of SAS file reader that SASLib borrows heavily from.</p>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credits</h2>
<ul>
<li>Jared Hobbs, the author of the SAS reader code from Pandas.  See LICENSE_SAS7BDAT.md.</li>
<li><a href="https://github.com/evanmiller">Evan Miller</a>, the author of ReadStat C/C++ library.  See LICENSE_READSTAT.md.</li>
<li><a href="https://github.com/davidanthoff">David Anthoff</a>, who provided many valuable ideas at the early stage of development.</li>
<li><a href="https://github.com/tbeason">Tyler Beason</a></li>
<li><a href="https://github.com/xiaodaigh">susabi</a></li>
</ul>
<p>I also want to thank all the active members at the <a href="https://discourse.julialang.org" rel="nofollow">Julia Discourse community</a>.  This project wouldn't be possible without all the help I got from the community.  That's the beauty of open-source development.</p>
</article></div>