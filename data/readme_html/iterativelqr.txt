<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-iterativelqrjl" class="anchor" aria-hidden="true" href="#iterativelqrjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IterativeLQR.jl</h1>
<p dir="auto"><a href="https://github.com/thowell/IterativeLQR.jl/actions/workflows/CI.yml"><img src="https://github.com/thowell/IterativeLQR.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thowell/IterativeLQR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad628f88b9b041c5faf85267f7506077b173bea5ffb113446f675848d7654115/68747470733a2f2f636f6465636f762e696f2f67682f74686f77656c6c2f4974657261746976654c51522e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d46474d33334f314b3145" alt="codecov" data-canonical-src="https://codecov.io/gh/thowell/IterativeLQR.jl/branch/main/graph/badge.svg?token=FGM33O1K1E" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for solving constrained trajectory optimization problems with iterative LQR (iLQR).</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="bf0b90346ba78569db18f756210926be">$$
\begin{align*}
\underset{x_{1:T}, \phantom{,} u_{1:T-1}}{\text{minimize }} &amp; \phantom{,} g_T(x_T; \theta_T) + \sum \limits_{t = 1}^{T-1} g_t(x_t, u_t; \theta_t)\\
\text{subject to } &amp; \phantom{,} f_t(x_t, u_t; \theta_t) = x_{t+1}, \phantom{,} \quad t = 1,\dots,T-1,\\
&amp; \phantom{,} c_t(x_t, u_t; \theta_t) \phantom{,}[\leq, =] \phantom{,} 0, \quad t = 1, \dots, T,\\
\end{align*}
$$</math-renderer></p>
<p dir="auto">with</p>
<ul dir="auto">
<li>
<p dir="auto"><math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bf0b90346ba78569db18f756210926be">$x_{1:T}$</math-renderer>: state trajectory</p>
</li>
<li>
<p dir="auto"><math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bf0b90346ba78569db18f756210926be">$u_{1:T-1}$</math-renderer>: action trajectory</p>
</li>
<li>
<p dir="auto"><math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bf0b90346ba78569db18f756210926be">$\theta_{1:T}$</math-renderer>: problem-data trajectory</p>
</li>
<li>
<p dir="auto">Fast and allocation-free gradients and Jacobians are automatically generated using <a href="https://github.com/JuliaSymbolics/Symbolics.jl">Symbolics.jl</a> for user-provided costs, constraints, and dynamics.</p>
</li>
<li>
<p dir="auto">Constraints are handled using an <a href="https://en.wikipedia.org/wiki/Augmented_Lagrangian_method" rel="nofollow">augmented Lagrangian framework</a>.</p>
</li>
<li>
<p dir="auto">Cost, dynamics, and constraints can have varying dimensions at each time step.</p>
</li>
<li>
<p dir="auto">Parameters are exposed (and gradients wrt these values coming soon!)</p>
</li>
</ul>
<p dir="auto">For more details, see our related paper: <a href="http://roboticexplorationlab.org/papers/altro-iros.pdf" rel="nofollow">ALTRO: A Fast Solver for Constrained Trajectory Optimization</a></p>
<h2 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/thowell/IterativeLQR.jl"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>thowell<span class="pl-k">/</span>IterativeLQR<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto">
<a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IterativeLQR 
using LinearAlgebra

# horizon 
T = 11 

# particle 
num_state = 2
num_action = 1 

function particle_discrete(x, u)
   A = [1.0 1.0; 0.0 1.0]
   B = [0.0; 1.0] 
   return A * x + B * u[1]
end

# model
particle = Dynamics(particle_discrete, num_state, num_action)
model = [particle for t = 1:T-1] 

# initialization
x1 = [0.0; 0.0] 
xT = [1.0; 0.0]
ū = [1.0e-1 * randn(num_action) for t = 1:T-1] 
x̄ = rollout(model, x1, ū)

# objective  
objective = [
   [Cost((x, u) -&gt; 0.1 * dot(x, x) + 0.1 * dot(u, u), num_state, num_action) for t = 1:T-1]..., 
   Cost((x, u) -&gt; 0.1 * dot(x, x), num_state, 0)
]

# constraints
constraints = [
   [Constraint() for t = 1:T-1]..., 
   Constraint((x, u) -&gt; x - xT, num_state, 0)
] 

# solver
solver = Solver(model, objective, constraints)
initialize_controls!(solver, ū)
initialize_states!(solver, x̄)

# solve
solve!(solver)

# solution
x_sol, u_sol = get_trajectory(solver)"><pre><span class="pl-k">using</span> IterativeLQR 
<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> horizon </span>
T <span class="pl-k">=</span> <span class="pl-c1">11</span> 

<span class="pl-c"><span class="pl-c">#</span> particle </span>
num_state <span class="pl-k">=</span> <span class="pl-c1">2</span>
num_action <span class="pl-k">=</span> <span class="pl-c1">1</span> 

<span class="pl-k">function</span> <span class="pl-en">particle_discrete</span>(x, u)
   A <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>]
   B <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>; <span class="pl-c1">1.0</span>] 
   <span class="pl-k">return</span> A <span class="pl-k">*</span> x <span class="pl-k">+</span> B <span class="pl-k">*</span> u[<span class="pl-c1">1</span>]
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> model</span>
particle <span class="pl-k">=</span> <span class="pl-c1">Dynamics</span>(particle_discrete, num_state, num_action)
model <span class="pl-k">=</span> [particle <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>T<span class="pl-k">-</span><span class="pl-c1">1</span>] 

<span class="pl-c"><span class="pl-c">#</span> initialization</span>
x1 <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span>] 
xT <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>; <span class="pl-c1">0.0</span>]
ū <span class="pl-k">=</span> [<span class="pl-c1">1.0e-1</span> <span class="pl-k">*</span> <span class="pl-c1">randn</span>(num_action) <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>T<span class="pl-k">-</span><span class="pl-c1">1</span>] 
x̄ <span class="pl-k">=</span> <span class="pl-c1">rollout</span>(model, x1, ū)

<span class="pl-c"><span class="pl-c">#</span> objective  </span>
objective <span class="pl-k">=</span> [
   [<span class="pl-c1">Cost</span>((x, u) <span class="pl-k">-&gt;</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(x, x) <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(u, u), num_state, num_action) <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>T<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">.</span><span class="pl-k">..</span>, 
   <span class="pl-c1">Cost</span>((x, u) <span class="pl-k">-&gt;</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(x, x), num_state, <span class="pl-c1">0</span>)
]

<span class="pl-c"><span class="pl-c">#</span> constraints</span>
constraints <span class="pl-k">=</span> [
   [<span class="pl-c1">Constraint</span>() <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>T<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">.</span><span class="pl-k">..</span>, 
   <span class="pl-c1">Constraint</span>((x, u) <span class="pl-k">-&gt;</span> x <span class="pl-k">-</span> xT, num_state, <span class="pl-c1">0</span>)
] 

<span class="pl-c"><span class="pl-c">#</span> solver</span>
solver <span class="pl-k">=</span> <span class="pl-c1">Solver</span>(model, objective, constraints)
<span class="pl-c1">initialize_controls!</span>(solver, ū)
<span class="pl-c1">initialize_states!</span>(solver, x̄)

<span class="pl-c"><span class="pl-c">#</span> solve</span>
<span class="pl-c1">solve!</span>(solver)

<span class="pl-c"><span class="pl-c">#</span> solution</span>
x_sol, u_sol <span class="pl-k">=</span> <span class="pl-c1">get_trajectory</span>(solver)</pre></div>
<h2 dir="auto">
<a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Please see the following for examples using this package:</p>
<ul dir="auto">
<li><a href="https://github.com/thowell/optimization_dynamics">Trajectory Optimization with Optimization-Based Dynamics</a></li>
<li><a href="https://github.com/dojo-sim/Dojo.jl">Dojo: A Differentiable Simulator for Robotics</a></li>
</ul>
</article></div>