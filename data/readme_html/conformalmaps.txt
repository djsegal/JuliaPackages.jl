<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-conformalmapsjl" class="anchor" aria-hidden="true" href="#conformalmapsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ConformalMaps.jl</h1>
<p><code>ConformalMaps</code> is a package for approximating the Riemann map from a
simply connected planar domain to a disk. It uses the zipper algorithm as
described in
<a href="http://arxiv.org/abs/math/0605532" rel="nofollow">Convergence of the zipper algorithm for conformal mapping</a>
by Don Marshall and Steffen Rohde.</p>
<p>The domain (approximated by a polygon) is specified as an array which lists
the vertices of the domain in counterclockwise order. A conformal
map from <code>domain</code> to the unit disk which maps <code>center</code> to the origin
is initialized as <code>ConformalMap(domain,center)</code>. The keyword argument
<code>pointspacing=ϵ</code> inserts equally spaced points along each side of
the polygon so that the spacing between consecutive points is
everywhere less than <code>ϵ</code>. Smaller values of <code>ϵ</code> give greater accuracy
but require longer to compute. The default value is 1% of the diameter
of the domain.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AsyPlots, ConformalMaps
vertices <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>;
            <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>;
           <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>;
            <span class="pl-c1">0.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>]
f <span class="pl-k">=</span> <span class="pl-c1">ConformalMap</span>(vertices,<span class="pl-c1">0.0</span>)</pre></div>
<p><code>f</code> supports function call syntax: <code>f(0.1im)</code></p>
<p>The inverse of <code>f</code> is obtained as <code>inv(f)</code> and is of type
<code>InverseConformalMap</code>.</p>
<p>If <a href="https://github.com/sswatson/AsyPlots.jl"><code>AsyPlots</code></a> is installed,
then <code>visualize</code> may be used to display the images of a hyperbolic
tiling of the disk (if called on an <code>InverseConformalMap</code>) or grid
lines (if called on a <code>ConformalMap</code>).</p>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">inv</span>(f)
<span class="pl-c1">visualize</span>(g) </pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/square.svg"><img src="images/square.svg" alt="Conformal map" style="max-width:100%;"></a></p>
<p><code>visualize</code> returns a <code>ConformalMapVisualization</code> object, whose
fields <code>domain</code> and <code>range</code> contain <code>AsyPlots.Plot2D</code> objects.
<code>combine</code> returns a single plot with the domain and the range</p>
<p><a href="https://travis-ci.org/sswatson/ConformalMaps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0f8d6271f3b441375608c8dba3db56aded4bf1c1/68747470733a2f2f7472617669732d63692e6f72672f7373776174736f6e2f436f6e666f726d616c4d6170732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sswatson/ConformalMaps.jl.svg?branch=master" style="max-width:100%;"></a></p>
</article></div>