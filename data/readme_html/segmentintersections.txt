<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://github.com/arnauqb/SegmentIntersections.jl/actions/workflows/blank.yml"><img src="https://github.com/arnauqb/SegmentIntersections.jl/actions/workflows/blank.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/arnauqb/SegmentIntersections.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4034156b17d644919fccb341415847d83db9c58392f7e2dcc284d1ae7d0407d5/68747470733a2f2f636f6465636f762e696f2f67682f61726e617571622f5365676d656e74496e74657273656374696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d3858543559314a435459" alt="codecov" data-canonical-src="https://codecov.io/gh/arnauqb/SegmentIntersections.jl/branch/main/graph/badge.svg?token=8XT5Y1JCTY" style="max-width:100%;"></a></p>
<h1><a id="user-content-segmentintersectionsjl" class="anchor" aria-hidden="true" href="#segmentintersectionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SegmentIntersections.jl</h1>
<p>This package implements two algorithms for computing the intersection points between a set of finite segments.</p>
<ul>
<li>A brute force algorithm, in which each segment is tested for intersection against all the other segments. The scaling of this algorithm is thus O(N^2).</li>
<li>The <a href="https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm" rel="nofollow">Bentley-Ottmann algorithm</a> which should scale much better for a high number of points. However, in many situations the brute force performs better. This could also be because of the BO algorithm needs a bit of memory optimization.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="images/random_lines.png"><img src="images/random_lines.png" alt="image" style="max-width:100%;"></a></p>
<p>The intersections for a complete K-graph need to be debugged, probably a toleranece error.</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/complete_graph.png"><img src="images/complete_graph.png" alt="image" style="max-width:100%;"></a></p>
<h1><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h1>
<p>The algorithm ignores purely horizontal and vertical segments. This will probably be implemented in the future.</p>
</article></div>