<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libraw" class="anchor" aria-hidden="true" href="#libraw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibRaw</h1>
<p dir="auto"><a href="https://docs.juliahub.com/LibRaw" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jonathanBieler/LibRaw.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jonathanBieler/LibRaw.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jonathanBieler/LibRaw.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1e52e7bcf8eac91c9686d57b1437fe2c8b9ab68f6aeb18dec974a09e078c0281/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6e617468616e4269656c65722f4c69625261772e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jonathanBieler/LibRaw.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://www.repostatus.org/#wip" rel="nofollow"><img src="https://camo.githubusercontent.com/b2837d6c1acaee6bce862487b13693c2226ea14f4e19fc3bac21e0edc55f5e65/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f7769702e737667" alt="Project Status: WIP â€“ Initial development is in progress, but there has not yet been a stable, usable release suitable for the public." data-canonical-src="https://www.repostatus.org/badges/latest/wip.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Bindings for the <a href="https://www.libraw.org/" rel="nofollow">LibRaw</a> library. The purpose of this package to read
raw file and access the data, and apply some basic post-processing (applying coefficients and color matrices, demosaicing). Colors.jl
and Images.jl could be used for further post-processing.</p>
<p dir="auto">Bindings were automatically generated using <a href="https://github.com/JuliaInterop/Clang.jl">Clang.jl</a>, see <code>gen/generator.jl</code>.</p>
<p dir="auto">Please open an issue if a functionality is missing or broken.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/cpp2.jpg"><img src="docs/cpp2.jpg" alt="screenshot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known issues</h2>
<ul dir="auto">
<li>Margins are not taken into account</li>
<li>Only RGBG Bayer pattern is supported</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">See <a href="examples/process_raw_file.jl">examples/process_raw_file.jl</a> for a more complete example.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="raw_img = LibRaw.RawImage(&quot;data/ccp2.nef&quot;)

@assert LibRaw.color_description(raw_img) == &quot;RGBG&quot;
img = LibRaw.demoisaic(LibRaw.BayerAverage(), raw_img)#h x w x 4 Array

# apply white balance as shot
LibRaw.apply_multipliers!(img, LibRaw.camera_multipliers(raw_img))"><pre>raw_img <span class="pl-k">=</span> LibRaw<span class="pl-k">.</span><span class="pl-c1">RawImage</span>(<span class="pl-s"><span class="pl-pds">"</span>data/ccp2.nef<span class="pl-pds">"</span></span>)

<span class="pl-c1">@assert</span> LibRaw<span class="pl-k">.</span><span class="pl-c1">color_description</span>(raw_img) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>RGBG<span class="pl-pds">"</span></span>
img <span class="pl-k">=</span> LibRaw<span class="pl-k">.</span><span class="pl-c1">demoisaic</span>(LibRaw<span class="pl-k">.</span><span class="pl-c1">BayerAverage</span>(), raw_img)<span class="pl-c"><span class="pl-c">#</span>h x w x 4 Array</span>

<span class="pl-c"><span class="pl-c">#</span> apply white balance as shot</span>
LibRaw<span class="pl-k">.</span><span class="pl-c1">apply_multipliers!</span>(img, LibRaw<span class="pl-k">.</span><span class="pl-c1">camera_multipliers</span>(raw_img))</pre></div>
</article></div>