<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-affinetransforms" class="anchor" aria-hidden="true" href="#affinetransforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AffineTransforms</h1>
<p><a href="https://travis-ci.org/timholy/AffineTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c0ad31652691b166bcdbc11bde948964edd12950/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f416666696e655472616e73666f726d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/AffineTransforms.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package for working with affine transformations. For new projects, I recommend <a href="https://github.com/FugroRoames/CoordinateTransformations.jl">CoordinateTransformations</a> instead.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In julia, type</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AffineTransforms<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-theory" class="anchor" aria-hidden="true" href="#theory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Theory</h2>
<p>An affine transformation is of the form</p>
<div class="highlight highlight-source-julia"><pre>y <span class="pl-k">=</span> A<span class="pl-k">*</span>x <span class="pl-k">+</span> b</pre></div>
<p>This is the "forward" transformation. The "inverse" transformation is therefore</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> A<span class="pl-k">\</span>(y<span class="pl-k">-</span>b)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Create an affine transformation with</p>
<div class="highlight highlight-source-julia"><pre>tfm <span class="pl-k">=</span> <span class="pl-c1">AffineTransform</span>(A, b)</pre></div>
<p>The following are all different ways of computing the forward transform:</p>
<div class="highlight highlight-source-julia"><pre>y <span class="pl-k">=</span> tfm <span class="pl-k">*</span> x
y <span class="pl-k">=</span> <span class="pl-c1">tformfwd</span>(tfm, x)
y <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x); <span class="pl-c1">tformfwd!</span>(y, tfm, x)</pre></div>
<p>Similarly, the following are all different ways of computing the inverse transform:</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> tfm<span class="pl-k">\</span>y
x <span class="pl-k">=</span> <span class="pl-c1">tforminv</span>(tfm, y)
x <span class="pl-k">=</span> <span class="pl-c1">similar</span>(y); <span class="pl-c1">tforminv!</span>(x, tfm, y)</pre></div>
<h3><a id="user-content-convenience-constructors" class="anchor" aria-hidden="true" href="#convenience-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Convenience constructors</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">tformeye</span>(T, nd)
<span class="pl-c1">tformeye</span>(nd)</pre></div>
<p>Creates the identity transformation in <code>nd</code> dimensions.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">tformtranslate</span>(v)</pre></div>
<p>Creates a shift (translation) transformation</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">tformrotate</span>(angle)   <span class="pl-c"><span class="pl-c">#</span> creates a 2d rotation</span>
<span class="pl-c1">tformrotate</span>(axis, angle)   <span class="pl-c"><span class="pl-c">#</span> creates a 3d rotation</span>
<span class="pl-c1">tformrotate</span>(axis)          <span class="pl-c"><span class="pl-c">#</span> creates a 3d rotation</span></pre></div>
<p>In 3d, these constructors work with angle-axis representation, where <code>axis</code> is a 3-vector.
When <code>angle</code> is provided, <code>axis</code> is used as if it were normalized to have unit length.
If you just specify <code>axis</code>, then <code>norm(axis)</code> is used for the <code>angle</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">tformscale</span>(scale<span class="pl-k">::</span><span class="pl-c1">Real</span>, nd)</pre></div>
<p>Creates a scaling transformation, where <code>A</code> will have <code>scale</code> along the diagonal.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">tformrigid</span>(p)</pre></div>
<p>Particularly useful for optimization of rigid transformations.
If <code>length(p) == 3</code>, this creates a 2d transform, where <code>p[1]</code> is the rotation angle, <code>p[2:3]</code> are
the two components of translation.
If <code>length(p) == 6</code>, this creates a 3d transform, where <code>p[1:3]</code> is <code>axis</code> for <code>tformrotate</code>,
and <code>p[4:6]</code> are the three components of translation.</p>
<h3><a id="user-content-representation-conversions" class="anchor" aria-hidden="true" href="#representation-conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Representation conversions</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">rotationparameters</span>(R)</pre></div>
<p>Converts a 2d or 3d rotation matrix <code>R</code> into an <code>angle</code> (in 2d) or the <code>axis</code> representation (in 3d).</p>
</article></div>