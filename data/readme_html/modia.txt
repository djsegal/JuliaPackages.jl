<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-modiajl" class="anchor" aria-hidden="true" href="#modiajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Modia.jl</h1>
<p><a href="https://modiasim.github.io/Modia.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/ModiaSim/Modia.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/ad8758fbaebbced78645b98e446c0bb5ec223676ed61700184320887cadbfb8e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square" style="max-width:100%;"></a></p>
<p>The <a href="https://modiasim.github.io/Modia.jl/stable/tutorial/GettingStarted.html" rel="nofollow">Modia Tutorial</a> provides an introduction to Modia. Modia is part of <a href="https://modiasim.github.io/docs/" rel="nofollow">ModiaSim</a>.</p>
<p>Modia is a Julia package for modeling and simulation of multidomain engineering systems
described by differential equations, algebraic equations, and (space-discretized) partial differential equations. It shares many powerful features of the <a href="https://www.modelica.org/modelicalanguage" rel="nofollow">Modelica language</a>, together with features not available in Modelica.</p>
<p>A user defines a model on a high level with model components (like an electrical resistance, a rotational inertia, a rod with heat transfer, a PI controller etc.) that are physically connected together. A model component is constructed by "expression = expression" equations. The defined model is symbolically transformed to ODE form dx/dt = f(x,t). For example, equations might be analytically differentiated, ODE states selected, linear equation systems numerically solved when evaluating the transformed model. From the transformed model a Julia function is generated that is used to simulate the model with integrators from <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations</a>. Simulation results can be plotted with <a href="https://github.com/ModiaSim/ModiaPlot.jl">ModiaPlot</a>, that provides a convenient interface to <a href="https://github.com/JuliaPlots/GLMakie.jl">GLMakie</a> line plots.</p>
<p>Other packages from the Julia eco-systems that are specially supported:</p>
<ul>
<li><a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a> to define and process physical units.</li>
<li><a href="https://github.com/JuliaPhysics/Measurements.jl">Measurements</a> to perform simulations with uncertain parameters and initial values with linear propagation theory.</li>
<li><a href="https://github.com/baggepinnen/MonteCarloMeasurements.jl">MonteCarloMeasurements</a> to perform simulations with uncertain parameters and initial values with particle theory.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Modia and ModiaPlot are registered and are installed with (Julia &gt;= 1.5 is required):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]add Modia, ModiaPlot
"><pre>julia<span class="pl-k">&gt;</span> ]add Modia, ModiaPlot</pre></div>
<p>It is recommended to also add the following packages, in order that all tests and examples can be executed in your standard environment:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]add Measurements 
        add MonteCarloMeasurements
        add Distributions
        add Interpolations
"><pre>julia<span class="pl-k">&gt;</span> ]add Measurements 
        add MonteCarloMeasurements
        add Distributions
        add Interpolations</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The following equations describe a damped pendulum:</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/resources/images/PendulumEquations.png"><img src="docs/resources/images/PendulumEquations.png" alt="Pendulum-Equations" style="max-width:100%;"></a></p>
<p>where <em>phi</em> is the rotation angle, <em>omega</em> the angular velocity, <em>m</em> the mass, <em>L</em> the rod length, <em>d</em> a damping constant, <em>g</em> the gravity constant and <em>r</em> the vector from the origin of the world system to the tip of the pendulum. These equations can be defined, simulated and plotted with
(note, you can define models also without units, or remove units before the model is processed):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Modia, ModiaPlot

Pendulum = Model(
   L = 0.8u&quot;m&quot;,
   m = 1.0u&quot;kg&quot;,
   d = 0.5u&quot;N*m*s/rad&quot;,
   g = 9.81u&quot;m/s^2&quot;,
   phi = Var(init = 1.57*u&quot;rad&quot;),
   w   = Var(init = 0u&quot;rad/s&quot;),
   equations = :[
          w = der(phi)
        0.0 = m*L^2*der(w) + d*w + m*g*L*sin(phi)
          r = [L*cos(phi), -L*sin(phi)]
   ]
)

pendulum1 = @instantiateModel(Pendulum)
simulate!(pendulum1, Tsit5(), stopTime = 10.0u&quot;s&quot;, log=true)
plot(pendulum1, [(&quot;phi&quot;, &quot;w&quot;); &quot;r&quot;], figure = 1)
"><pre><span class="pl-k">using</span> Modia, ModiaPlot

Pendulum <span class="pl-k">=</span> <span class="pl-c1">Model</span>(
   L <span class="pl-k">=</span> <span class="pl-c1">0.8</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>,
   m <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kg<span class="pl-pds">"</span></span>,
   d <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>N*m*s/rad<span class="pl-pds">"</span></span>,
   g <span class="pl-k">=</span> <span class="pl-c1">9.81</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s^2<span class="pl-pds">"</span></span>,
   phi <span class="pl-k">=</span> <span class="pl-c1">Var</span>(init <span class="pl-k">=</span> <span class="pl-c1">1.57</span><span class="pl-k">*</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>rad<span class="pl-pds">"</span></span>),
   w   <span class="pl-k">=</span> <span class="pl-c1">Var</span>(init <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>rad/s<span class="pl-pds">"</span></span>),
   equations <span class="pl-k">=</span> :[
          w <span class="pl-k">=</span> <span class="pl-c1">der</span>(phi)
        <span class="pl-c1">0.0</span> <span class="pl-k">=</span> m<span class="pl-k">*</span>L<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">der</span>(w) <span class="pl-k">+</span> d<span class="pl-k">*</span>w <span class="pl-k">+</span> m<span class="pl-k">*</span>g<span class="pl-k">*</span>L<span class="pl-k">*</span><span class="pl-c1">sin</span>(phi)
          r <span class="pl-k">=</span> [L<span class="pl-k">*</span><span class="pl-c1">cos</span>(phi), <span class="pl-k">-</span>L<span class="pl-k">*</span><span class="pl-c1">sin</span>(phi)]
   ]
)

pendulum1 <span class="pl-k">=</span> <span class="pl-c1">@instantiateModel</span>(Pendulum)
<span class="pl-c1">simulate!</span>(pendulum1, <span class="pl-c1">Tsit5</span>(), stopTime <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>, log<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">plot</span>(pendulum1, [(<span class="pl-s"><span class="pl-pds">"</span>phi<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>); <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>], figure <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<p>The result is the following plot:</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/resources/images/PendulumFigures.png"><img src="docs/resources/images/PendulumFigures.png" alt="Pendulum-Figure" style="max-width:100%;"></a></p>
<p>Simulation and plotting of the pendulum with normally distributed uncertainty added to some parameters is performed in the following way:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Measurements

PendulumWithUncertainties = Pendulum | Map(L = (0.8 ± 0.2)u&quot;m&quot;,
                                           m = (1.0 ± 0.2)u&quot;kg&quot;,
                                           d = (0.5 ± 0.2)u&quot;N*m*s/rad&quot;)

pendulum2 =  @instantiateModel(PendulumWithUncertainties,
                               FloatType = Measurement{Float64})

simulate!(pendulum2, Tsit5(), stopTime = 10.0u&quot;s&quot;)
plot(pendulum2, [(&quot;phi&quot;, &quot;w&quot;); &quot;r&quot;], figure = 2)
"><pre><span class="pl-k">using</span> Measurements

PendulumWithUncertainties <span class="pl-k">=</span> Pendulum <span class="pl-k">|</span> <span class="pl-c1">Map</span>(L <span class="pl-k">=</span> (<span class="pl-c1">0.8</span> ± <span class="pl-c1">0.2</span>)<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>,
                                           m <span class="pl-k">=</span> (<span class="pl-c1">1.0</span> ± <span class="pl-c1">0.2</span>)<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kg<span class="pl-pds">"</span></span>,
                                           d <span class="pl-k">=</span> (<span class="pl-c1">0.5</span> ± <span class="pl-c1">0.2</span>)<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>N*m*s/rad<span class="pl-pds">"</span></span>)

pendulum2 <span class="pl-k">=</span>  <span class="pl-c1">@instantiateModel</span>(PendulumWithUncertainties,
                               FloatType <span class="pl-k">=</span> Measurement{Float64})

<span class="pl-c1">simulate!</span>(pendulum2, <span class="pl-c1">Tsit5</span>(), stopTime <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(pendulum2, [(<span class="pl-s"><span class="pl-pds">"</span>phi<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>); <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>], figure <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p>resulting in the following plot where mean values are shown with thick lines
and standard deviations as area around the mean values.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/resources/images/PendulumWithUncertainties.png"><img src="docs/resources/images/PendulumWithUncertainties.png" alt="PendulumWithUncertainty" style="max-width:100%;"></a></p>
<h2><a id="user-content-main-developers" class="anchor" aria-hidden="true" href="#main-developers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Main Developers</h2>
<ul>
<li>
<p><a href="mailto:Hilding.Elmqvist@Mogram.net">Hilding Elmqvist</a>, <a href="http://www.mogram.net/" rel="nofollow">Mogram</a>.</p>
</li>
<li>
<p><a href="https://rmc.dlr.de/sr/en/staff/martin.otter/" rel="nofollow">Martin Otter</a>,
<a href="https://www.dlr.de/sr/en" rel="nofollow">DLR - Institute of System Dynamics and Control</a>.</p>
</li>
</ul>
<p>License: MIT (expat)</p>
</article></div>