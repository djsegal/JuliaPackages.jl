<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qcdmeasurementsjl" class="anchor" aria-hidden="true" href="#qcdmeasurementsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QCDMeasurements.jl</h1>
<p dir="auto">Measurements for lattice QCD.</p>
<p dir="auto">Lattice QCD is a well-established non-perturbative approach to solving the quantum chromodynamics (QCD) theory of quarks and gluons.
Gauge field for gluons is treated by <a href="https://github.com/akio-tomiya/Gaugefields.jl">Gaugefields.jl</a>.
Pseudo fermion field for quarks is treated by <a href="https://github.com/akio-tomiya/LatticeDiracOperators.jl">LatticeDiracOperators.jl</a>.
It is important to measure physical observables from gauge fields.
QCDMeasurements.jl is now the external package for measurements in Lattice QCD.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="LQCDjl_block.png"><img src="LQCDjl_block.png" width="300" style="max-width: 100%;"></a></p> 
<p dir="auto">This is intended to use in <a href="https://github.com/akio-tomiya/LatticeQCD.jl">LatticeQCD.jl</a>.</p>
<h1 dir="auto"><a id="user-content-what-this-package-can-do" class="anchor" aria-hidden="true" href="#what-this-package-can-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What this package can do:</h1>
<p dir="auto">This package has following functionarities</p>
<ul dir="auto">
<li>Plaquette measurement.</li>
<li>Poylakov loop measurement.</li>
<li>Pion correlator measurement.</li>
<li>Chiral condensate measurement.</li>
<li>Topological charge measurement.</li>
<li>Energy density measurement.</li>
<li>Wilson loop measurement</li>
</ul>
<h1 dir="auto"><a id="user-content-sample" class="anchor" aria-hidden="true" href="#sample"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sample</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QCDMeasurements
using Gaugefields
function test()
    println(&quot;SU3test&quot;)
    NX = 4
    NY = 4
    NZ = 4
    NT = 4
    Nwing = 0
    Dim = 4
    NC = 3

    U = Initialize_4DGaugefields(NC,Nwing,NX,NY,NZ,NT,condition = &quot;cold&quot;)
    #U = Initialize_Gaugefields(NC,Nwing,NX,NY,NZ,NT,condition = &quot;hot&quot;,randomnumber=&quot;Reproducible&quot;)
    filename = &quot;testconf.txt&quot;
    L = [NX,NY,NZ,NT]
    load_BridgeText!(filename,U,L,NC)
    #=
    filename = &quot;./conf_00000008.ildg&quot;
    ildg = ILDG(filename)
    i = 1
    L = [NX,NY,NZ,NT]
    load_gaugefield!(U,i,ildg,L,NC)
    =#

    m_plaq = Plaquette_measurement(U)
    m_poly = Polyakov_measurement(U)

    plaq = get_value(measure(m_plaq,U))
    poly = get_value(measure(m_poly,U))
    println(&quot;plaq: $plaq&quot;)
    println(&quot;poly: $poly&quot;)

    m_energy = Energy_density_measurement(U)
    m_topo = Topological_charge_measurement(U)
    energy = get_value(measure(m_energy,U))
    topo = get_value(measure(m_topo,U))
    println(&quot;energy: $energy&quot;)
    println(&quot;topo: $topo&quot;)

    m_wilson = Wilson_loop_measurement(U,printvalues=true)
    wilsonloop = get_value(measure(m_wilson,U))
    println(&quot;wilson loop: &quot;,wilsonloop)

    m_pion = Pion_correlator_measurement(U)
    m_pion_Staggered = Pion_correlator_measurement(U,fermiontype = &quot;Staggered&quot;)
    m_pion_Wilson = Pion_correlator_measurement(U,fermiontype = &quot;Wilson&quot;)
    pion = get_value(measure(m_pion,U))
    pion_s = get_value(measure(m_pion_Staggered,U))
    pion_w = get_value(measure(m_pion_Wilson,U))

    println(&quot;pion: $pion&quot;)
    println(&quot;pion correlator with Staggered fermion: $pion_s&quot;)
    println(&quot;pion correlator with  Wilson fermion: $pion_w&quot;)

    m_chiral_Staggered = Chiral_condensate_measurement(U,fermiontype = &quot;Staggered&quot;)
    m_chiral_Wilson = Chiral_condensate_measurement(U,fermiontype = &quot;Wilson&quot;)
    chiral_s = get_value(measure(m_chiral_Staggered,U))
    chiral_w = get_value(measure(m_chiral_Wilson,U))

    println(&quot;Chiral condensate with Staggered fermion: $chiral_s&quot;)
    println(&quot;Chiral condensatewith  Wilson fermion: $chiral_w&quot;)


    TC_methods = [&quot;plaquette&quot;,&quot;clover&quot;]
    m_topo = Topological_charge_measurement(U,TC_methods = TC_methods)
    g = Gradientflow(U)
    for itrj=1:100
        flow!(U,g)
        @time plaq_t = get_value(measure(m_plaq,U))
        @time poly = get_value(measure(m_poly,U))
        println(&quot;$itrj plaq_t = $plaq_t&quot;)
        println(&quot;$itrj polyakov loop = $(real(poly)) $(imag(poly))&quot;)

        @time topo = get_value(measure(m_topo,U))
        print(&quot;$itrj topological charge: &quot;)
        for (key,value) in topo
            print(&quot;$key $value \t&quot;)
        end
        println(&quot;\t&quot;)
    end

end
test()"><pre><span class="pl-k">using</span> QCDMeasurements
<span class="pl-k">using</span> Gaugefields
<span class="pl-k">function</span> <span class="pl-en">test</span>()
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>SU3test<span class="pl-pds">"</span></span>)
    NX <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NY <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NZ <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NT <span class="pl-k">=</span> <span class="pl-c1">4</span>
    Nwing <span class="pl-k">=</span> <span class="pl-c1">0</span>
    Dim <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NC <span class="pl-k">=</span> <span class="pl-c1">3</span>

    U <span class="pl-k">=</span> <span class="pl-c1">Initialize_4DGaugefields</span>(NC,Nwing,NX,NY,NZ,NT,condition <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>cold<span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span>U = Initialize_Gaugefields(NC,Nwing,NX,NY,NZ,NT,condition = "hot",randomnumber="Reproducible")</span>
    filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>testconf.txt<span class="pl-pds">"</span></span>
    L <span class="pl-k">=</span> [NX,NY,NZ,NT]
    <span class="pl-c1">load_BridgeText!</span>(filename,U,L,NC)
    <span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">    filename = "./conf_00000008.ildg"</span>
<span class="pl-c">    ildg = ILDG(filename)</span>
<span class="pl-c">    i = 1</span>
<span class="pl-c">    L = [NX,NY,NZ,NT]</span>
<span class="pl-c">    load_gaugefield!(U,i,ildg,L,NC)</span>
<span class="pl-c">    <span class="pl-c">=#</span></span>

    m_plaq <span class="pl-k">=</span> <span class="pl-c1">Plaquette_measurement</span>(U)
    m_poly <span class="pl-k">=</span> <span class="pl-c1">Polyakov_measurement</span>(U)

    plaq <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_plaq,U))
    poly <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_poly,U))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>plaq: <span class="pl-v">$plaq</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>poly: <span class="pl-v">$poly</span><span class="pl-pds">"</span></span>)

    m_energy <span class="pl-k">=</span> <span class="pl-c1">Energy_density_measurement</span>(U)
    m_topo <span class="pl-k">=</span> <span class="pl-c1">Topological_charge_measurement</span>(U)
    energy <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_energy,U))
    topo <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_topo,U))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>energy: <span class="pl-v">$energy</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>topo: <span class="pl-v">$topo</span><span class="pl-pds">"</span></span>)

    m_wilson <span class="pl-k">=</span> <span class="pl-c1">Wilson_loop_measurement</span>(U,printvalues<span class="pl-k">=</span><span class="pl-c1">true</span>)
    wilsonloop <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_wilson,U))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>wilson loop: <span class="pl-pds">"</span></span>,wilsonloop)

    m_pion <span class="pl-k">=</span> <span class="pl-c1">Pion_correlator_measurement</span>(U)
    m_pion_Staggered <span class="pl-k">=</span> <span class="pl-c1">Pion_correlator_measurement</span>(U,fermiontype <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Staggered<span class="pl-pds">"</span></span>)
    m_pion_Wilson <span class="pl-k">=</span> <span class="pl-c1">Pion_correlator_measurement</span>(U,fermiontype <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Wilson<span class="pl-pds">"</span></span>)
    pion <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_pion,U))
    pion_s <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_pion_Staggered,U))
    pion_w <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_pion_Wilson,U))

    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>pion: <span class="pl-v">$pion</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>pion correlator with Staggered fermion: <span class="pl-v">$pion_s</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>pion correlator with  Wilson fermion: <span class="pl-v">$pion_w</span><span class="pl-pds">"</span></span>)

    m_chiral_Staggered <span class="pl-k">=</span> <span class="pl-c1">Chiral_condensate_measurement</span>(U,fermiontype <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Staggered<span class="pl-pds">"</span></span>)
    m_chiral_Wilson <span class="pl-k">=</span> <span class="pl-c1">Chiral_condensate_measurement</span>(U,fermiontype <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Wilson<span class="pl-pds">"</span></span>)
    chiral_s <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_chiral_Staggered,U))
    chiral_w <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_chiral_Wilson,U))

    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Chiral condensate with Staggered fermion: <span class="pl-v">$chiral_s</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Chiral condensatewith  Wilson fermion: <span class="pl-v">$chiral_w</span><span class="pl-pds">"</span></span>)


    TC_methods <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>plaquette<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>clover<span class="pl-pds">"</span></span>]
    m_topo <span class="pl-k">=</span> <span class="pl-c1">Topological_charge_measurement</span>(U,TC_methods <span class="pl-k">=</span> TC_methods)
    g <span class="pl-k">=</span> <span class="pl-c1">Gradientflow</span>(U)
    <span class="pl-k">for</span> itrj<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
        <span class="pl-c1">flow!</span>(U,g)
        <span class="pl-c1">@time</span> plaq_t <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_plaq,U))
        <span class="pl-c1">@time</span> poly <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_poly,U))
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$itrj</span> plaq_t = <span class="pl-v">$plaq_t</span><span class="pl-pds">"</span></span>)
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$itrj</span> polyakov loop = <span class="pl-v">$(<span class="pl-c1">real</span>(poly))</span> <span class="pl-v">$(<span class="pl-c1">imag</span>(poly))</span><span class="pl-pds">"</span></span>)

        <span class="pl-c1">@time</span> topo <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m_topo,U))
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$itrj</span> topological charge: <span class="pl-pds">"</span></span>)
        <span class="pl-k">for</span> (key,value) <span class="pl-k">in</span> topo
            <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$key</span> <span class="pl-v">$value</span> <span class="pl-cce">\t</span><span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

<span class="pl-k">end</span>
<span class="pl-c1">test</span>()</pre></div>
<p dir="auto">You can also use the dictionary type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QCDMeasurements
using Gaugefields
function SU3test()
    println(&quot;SU3test&quot;)
    NX = 4
    NY = 4
    NZ = 4
    NT = 4
    Nwing = 0
    Dim = 4
    NC = 3

    U = Initialize_4DGaugefields(NC,Nwing,NX,NY,NZ,NT,condition = &quot;cold&quot;)
    #U = Initialize_Gaugefields(NC,Nwing,NX,NY,NZ,NT,condition = &quot;hot&quot;,randomnumber=&quot;Reproducible&quot;)
    filename = &quot;testconf.txt&quot;
    L = [NX,NY,NZ,NT]
    load_BridgeText!(filename,U,L,NC)
    
    #=
    filename = &quot;./conf_00000008.ildg&quot;
    ildg = ILDG(filename)
    i = 1
    L = [NX,NY,NZ,NT]
    load_gaugefield!(U,i,ildg,L,NC)
    =#
    method = Dict()
    methodname = &quot;Eigenvalue&quot;
    method[&quot;methodname&quot;] = methodname
    method[&quot;fermiontype&quot;] = &quot;Wilson&quot;
    κ = 0.141139
    method[&quot;hop&quot;] =  κ
    method[&quot;nev&quot;] = 1 #number of eigenvalues
    m = prepare_measurement_from_dict(U,method)
    value,vectors = get_value(measure(m,U)) #eigenvalues and eigenvectors
    println(&quot;$methodname $value&quot;)
    

    method = Dict()
    methodname = &quot;Pion_correlator&quot;
    method[&quot;methodname&quot;] = methodname
    method[&quot;fermiontype&quot;] = &quot;Staggered&quot;
    method[&quot;mass&quot;] = 1
    method[&quot;Nf&quot;] = 4
    m = prepare_measurement_from_dict(U,method)
    value = get_value(measure(m,U))
    println(&quot;$methodname $value&quot;)

    method = Dict()
    methodname = &quot;Pion_correlator&quot;
    method[&quot;methodname&quot;] = methodname
    method[&quot;fermiontype&quot;] = &quot;Wilson&quot;
    method[&quot;hop&quot;] = 1
    m = prepare_measurement_from_dict(U,method)
    value = get_value(measure(m,U))
    println(&quot;$methodname $value&quot;)


    methodsname = [&quot;Plaquette&quot;,&quot;Polyakov_loop&quot;,&quot;Topological_charge&quot;,&quot;Chiral_condensate&quot;,
            &quot;Pion_correlator&quot;,&quot;Energy_density&quot;,&quot;Wilson_loop&quot;,&quot;Eigenvalue&quot;]
    method = Dict()
    for methodname in methodsname
        method[&quot;methodname&quot;] = methodname
        m = prepare_measurement_from_dict(U,method)
        value = get_value(measure(m,U))
        if methodname == &quot;Eigenvalue&quot;
            println(&quot;$methodname $(value[1])&quot;)
        else
            println(&quot;$methodname $(value)&quot;)
        end
    end

end
SU3test()"><pre><span class="pl-k">using</span> QCDMeasurements
<span class="pl-k">using</span> Gaugefields
<span class="pl-k">function</span> <span class="pl-en">SU3test</span>()
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>SU3test<span class="pl-pds">"</span></span>)
    NX <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NY <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NZ <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NT <span class="pl-k">=</span> <span class="pl-c1">4</span>
    Nwing <span class="pl-k">=</span> <span class="pl-c1">0</span>
    Dim <span class="pl-k">=</span> <span class="pl-c1">4</span>
    NC <span class="pl-k">=</span> <span class="pl-c1">3</span>

    U <span class="pl-k">=</span> <span class="pl-c1">Initialize_4DGaugefields</span>(NC,Nwing,NX,NY,NZ,NT,condition <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>cold<span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span>U = Initialize_Gaugefields(NC,Nwing,NX,NY,NZ,NT,condition = "hot",randomnumber="Reproducible")</span>
    filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>testconf.txt<span class="pl-pds">"</span></span>
    L <span class="pl-k">=</span> [NX,NY,NZ,NT]
    <span class="pl-c1">load_BridgeText!</span>(filename,U,L,NC)
    
    <span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">    filename = "./conf_00000008.ildg"</span>
<span class="pl-c">    ildg = ILDG(filename)</span>
<span class="pl-c">    i = 1</span>
<span class="pl-c">    L = [NX,NY,NZ,NT]</span>
<span class="pl-c">    load_gaugefield!(U,i,ildg,L,NC)</span>
<span class="pl-c">    <span class="pl-c">=#</span></span>
    method <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    methodname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Eigenvalue<span class="pl-pds">"</span></span>
    method[<span class="pl-s"><span class="pl-pds">"</span>methodname<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> methodname
    method[<span class="pl-s"><span class="pl-pds">"</span>fermiontype<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Wilson<span class="pl-pds">"</span></span>
    κ <span class="pl-k">=</span> <span class="pl-c1">0.141139</span>
    method[<span class="pl-s"><span class="pl-pds">"</span>hop<span class="pl-pds">"</span></span>] <span class="pl-k">=</span>  κ
    method[<span class="pl-s"><span class="pl-pds">"</span>nev<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span>number of eigenvalues</span>
    m <span class="pl-k">=</span> <span class="pl-c1">prepare_measurement_from_dict</span>(U,method)
    value,vectors <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m,U)) <span class="pl-c"><span class="pl-c">#</span>eigenvalues and eigenvectors</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$methodname</span> <span class="pl-v">$value</span><span class="pl-pds">"</span></span>)
    

    method <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    methodname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Pion_correlator<span class="pl-pds">"</span></span>
    method[<span class="pl-s"><span class="pl-pds">"</span>methodname<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> methodname
    method[<span class="pl-s"><span class="pl-pds">"</span>fermiontype<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Staggered<span class="pl-pds">"</span></span>
    method[<span class="pl-s"><span class="pl-pds">"</span>mass<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
    method[<span class="pl-s"><span class="pl-pds">"</span>Nf<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">4</span>
    m <span class="pl-k">=</span> <span class="pl-c1">prepare_measurement_from_dict</span>(U,method)
    value <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m,U))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$methodname</span> <span class="pl-v">$value</span><span class="pl-pds">"</span></span>)

    method <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    methodname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Pion_correlator<span class="pl-pds">"</span></span>
    method[<span class="pl-s"><span class="pl-pds">"</span>methodname<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> methodname
    method[<span class="pl-s"><span class="pl-pds">"</span>fermiontype<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Wilson<span class="pl-pds">"</span></span>
    method[<span class="pl-s"><span class="pl-pds">"</span>hop<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
    m <span class="pl-k">=</span> <span class="pl-c1">prepare_measurement_from_dict</span>(U,method)
    value <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m,U))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$methodname</span> <span class="pl-v">$value</span><span class="pl-pds">"</span></span>)


    methodsname <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Plaquette<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Polyakov_loop<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Topological_charge<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Chiral_condensate<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>Pion_correlator<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Energy_density<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Wilson_loop<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Eigenvalue<span class="pl-pds">"</span></span>]
    method <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    <span class="pl-k">for</span> methodname <span class="pl-k">in</span> methodsname
        method[<span class="pl-s"><span class="pl-pds">"</span>methodname<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> methodname
        m <span class="pl-k">=</span> <span class="pl-c1">prepare_measurement_from_dict</span>(U,method)
        value <span class="pl-k">=</span> <span class="pl-c1">get_value</span>(<span class="pl-c1">measure</span>(m,U))
        <span class="pl-k">if</span> methodname <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Eigenvalue<span class="pl-pds">"</span></span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$methodname</span> <span class="pl-v">$(value[<span class="pl-c1">1</span>])</span><span class="pl-pds">"</span></span>)
        <span class="pl-k">else</span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$methodname</span> <span class="pl-v">$(value)</span><span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

<span class="pl-k">end</span>
<span class="pl-c1">SU3test</span>()</pre></div>
</article></div>