<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dpclustering" class="anchor" aria-hidden="true" href="#dpclustering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DPClustering</h1>
<p><a href="https://travis-ci.org/marcjwilliams1/DPClustering.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c15a885b4fe5cc6e39396973c6b03e8033722939/68747470733a2f2f7472617669732d63692e6f72672f6d6172636a77696c6c69616d73312f4450436c7573746572696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/marcjwilliams1/DPClustering.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/marcjwilliams1/DPClustering-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/51e97edb3d98e648d211fa3ed497c0a30b0da3d8/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6172636a77696c6c69616d73312f4450436c7573746572696e672e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/marcjwilliams1/DPClustering.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/marcjwilliams1/DPClustering.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/362fad3a5782a034e1f3fbbf8ba18be989d68203/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6172636a77696c6c69616d73312f4450436c7573746572696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/marcjwilliams1/DPClustering.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/marcjwilliams1/DPClustering.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c4b2e40a8d7378c96dce6f0f9a1c37680ca39f10/687474703a2f2f636f6465636f762e696f2f6769746875622f6d6172636a77696c6c69616d73312f4450436c7573746572696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/marcjwilliams1/DPClustering.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Perform Dirichlet clustering on Varaint Allele Frequncies (VAFs) from sequencing data of cancers a la Nik-Zainal et al.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting started</h2>
<p>Package is written in the <a href="https://julialang.org/" rel="nofollow">Julia</a> programming language.</p>
<p>To download this package use the <code>Pkg.add</code> function as below, which will download the package and install all the dependencies.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DPClustering<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-clustering" class="anchor" aria-hidden="true" href="#clustering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clustering</h2>
<p>Clustering is invoked using the <code>dpclustering</code> function which takes 2 vectors of equal size: y - the number of reads reporting the mutation and N - the depth of coverage at that locus. With these, clustering can be performed and the function will return a <code>DPresults</code> type. There are a number of optional arguments which are all set to reasonable defaults, you may want to change the number of iterations or set verbose to false. the default is to show a log of the time taken in the gibbs sampler. To see the optional arguments and their defaults use <code>?dpclustering</code> in a julia session.</p>
<div class="highlight highlight-source-julia"><pre>dp <span class="pl-k">=</span> <span class="pl-c1">dpclustering</span>(y, N, iterations <span class="pl-k">=</span> <span class="pl-c1">10000</span>, verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>);</pre></div>
<p>You can then plot the output using <code>plotresults(dp)</code>.</p>
<p>At the moment, clustering will only work with single samples and mutations in copy neutral regions. So the input mutations should either be filtered for copy number alterations or corrected for copy number before inputting.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>There is some example data provided originally in Nik-Zainal et al in the examples folder. So an analysis would proceed as follows. There is a built in function to plot the data and associated clustering.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DPClustering
data <span class="pl-k">=</span> <span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">"</span>example/data.csv<span class="pl-pds">"</span></span>, header <span class="pl-k">=</span> <span class="pl-c1">true</span>)
y <span class="pl-k">=</span> data[<span class="pl-c1">1</span>][:, <span class="pl-c1">1</span>]
N <span class="pl-k">=</span> data[<span class="pl-c1">1</span>][:, <span class="pl-c1">2</span>]

out <span class="pl-k">=</span> <span class="pl-c1">dpclustering</span>(y, N)
myplot <span class="pl-k">=</span> <span class="pl-c1">plotresults</span>(out, save <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/example/example.png"><img src="/example/example.png" alt="plot" style="max-width:100%;"></a></p>
<h2><a id="user-content-speed" class="anchor" aria-hidden="true" href="#speed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Speed</h2>
<p>Due to Julia's just in time compilation the sampling is relatively fast. For example, the analysis above (600 mutations) the time taken to generate 10,000 iterations/samples should be on the order of 2-3 minutes on a reasonably specced laptop.</p>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgments</h2>
<p>The model used in the Gibbs sampler is as described in Nik-Zainal et al. Bugs code provided in the supplementary information of this publication and code available from David Wedge's group (<a href="https://github.com/Wedge-Oxford/dpclust_docker">https://github.com/Wedge-Oxford/dpclust_docker</a>) were used in the development of the package.</p>
</article></div>