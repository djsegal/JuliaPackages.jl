<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-datagencopulabasedjl" class="anchor" aria-hidden="true" href="#datagencopulabasedjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DatagenCopulaBased.jl</h1>
<p><a href="https://travis-ci.org/iitis/DatagenCopulaBased.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37bd17e579c79b093c17a99d8cb174d93ea402c9/68747470733a2f2f7472617669732d63692e6f72672f69697469732f4461746167656e436f70756c6142617365642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/iitis/DatagenCopulaBased.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/iitis/DatagenCopulaBased.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37d911fdb157c2ffbaa4277406bbd68dea114cb0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f69697469732f4461746167656e436f70756c6142617365642e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/iitis/DatagenCopulaBased.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3676933" rel="nofollow"><img src="https://camo.githubusercontent.com/792bcb5ddc29c0709fbf794fd2de467aeb63628e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333637363933332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3676933.svg" style="max-width:100%;"></a></p>
<p>Copula based data generator. Returns data in the form of the <code>t x n</code> matrix <code>U</code> where<code>t</code> numerates the number of realisations, while <code>n</code> numerates the number of marginals. Be default each marginal (<code>U[:,i]</code>) is uniformly distributed on the segment <code>[0,1]</code>.</p>
<p>Interdependence between marginals is modelled by the appropriate <code>n</code>-variate copula function, see e.g.: R. B. Nelsen, 'An introduction to copulas', Springer Science &amp; Business Media (2007). See also Domino, K., 'Selected Methods for non-Gaussian Data Analysis', Gliwice, IITiS PAN, 2019, [arXiv:1811.10486] (<a href="https://arxiv.org/abs/1811.10486" rel="nofollow">https://arxiv.org/abs/1811.10486</a>).</p>
<p>This module support the following copula families:</p>
<ul>
<li>Elliptical copulas (Gaussian, t-Student),</li>
<li>Archimedean (nested) copulas (Clayton, Frank, Gumbel, Ali-Mikhail-Haq),</li>
<li>Frechet copulas (maximal, minimal, independent),</li>
<li>Marshall-Olkin copulas.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Within Julia, run</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add DatagenCopulaBased</pre></div>
<p>to install the files Julia 1.0 or higher is required.</p>
<h2><a id="user-content-elliptical-copulas" class="anchor" aria-hidden="true" href="#elliptical-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Elliptical copulas</h2>
<p>We use elliptical multivariate distribution (such as Gaussian or t-Student) to
construct a copula. Suppose <code>F(x₁, ..., xₙ)</code> is a cumulative density function
(cdf.)
of such multivariate distribution, and <code>Fᵢ(xᵢ)</code> is univariate cdf. of its <code>i</code>
th marginal. Hence <code>uᵢ = Fᵢ(xᵢ)</code> is from the uniform distribution on <code>[0,1]</code>,
and the elliptical
copula is: <code>C(u₁, ..., uₙ) = F(F₁⁻¹(u₁), ..., Fₙ⁻¹(uₙ))</code>.</p>
<h3><a id="user-content-the-gaussian-copula" class="anchor" aria-hidden="true" href="#the-gaussian-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Gaussian copula</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gausscopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, Σ<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span> <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span>])</pre></div>
<p>Returns <code>t</code> realisations of <code>n</code>-variate random vector, with uniformly distributed marginals on <code>[0,1]</code>. The cross-correlation is modelled by the Gaussian copula, parametrised by the symmetric positively defined <code>n x n</code> correlation or covariance matrix <code>Σ</code>. The number of marginals is given by the size of <code>Σ</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gausscopulagen</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.589188</span>  <span class="pl-c1">0.815308</span>
 <span class="pl-c1">0.708285</span>  <span class="pl-c1">0.924962</span>
 <span class="pl-c1">0.747341</span>  <span class="pl-c1">0.156994</span>
 <span class="pl-c1">0.227634</span>  <span class="pl-c1">0.183116</span>
 <span class="pl-c1">0.227575</span>  <span class="pl-c1">0.957376</span>
 <span class="pl-c1">0.271558</span>  <span class="pl-c1">0.364803</span>
 <span class="pl-c1">0.445691</span>  <span class="pl-c1">0.52792</span>
 <span class="pl-c1">0.585362</span>  <span class="pl-c1">0.23135</span>
 <span class="pl-c1">0.498593</span>  <span class="pl-c1">0.48266</span>
 <span class="pl-c1">0.190283</span>  <span class="pl-c1">0.594451</span></pre></div>
<h3><a id="user-content-the-t-student-copula" class="anchor" aria-hidden="true" href="#the-t-student-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The t-Student copula</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">tstudentcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, Σ<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span> <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span>], ν<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p>Returns <code>t</code> realisations of <code>n</code>-variate random vector, with uniformly distributed marginals on <code>[0,1]</code>. The cross-correlation is modelled by the t-Student copula, parametrised by the symmetric positively defined <code>n x n</code> correlation or covariance matrix <code>Σ</code> and the integer parameter <code>ν</code> interpreted as the number of degrees of freedom. The number of marginals is given by the size of <code>Σ</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tstudentcopulagen</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.658199</span>  <span class="pl-c1">0.937148</span>
 <span class="pl-c1">0.718244</span>  <span class="pl-c1">0.92602</span>  
 <span class="pl-c1">0.809521</span>  <span class="pl-c1">0.0980325</span>
 <span class="pl-c1">0.263068</span>  <span class="pl-c1">0.222589</span>
 <span class="pl-c1">0.187187</span>  <span class="pl-c1">0.971109</span>
 <span class="pl-c1">0.245373</span>  <span class="pl-c1">0.346428</span>
 <span class="pl-c1">0.452336</span>  <span class="pl-c1">0.524498</span>
 <span class="pl-c1">0.57113</span>   <span class="pl-c1">0.272525</span>
 <span class="pl-c1">0.498443</span>  <span class="pl-c1">0.48082</span>  
 <span class="pl-c1">0.113788</span>  <span class="pl-c1">0.633349</span></pre></div>
<h2><a id="user-content-the-archimedean-copulas" class="anchor" aria-hidden="true" href="#the-archimedean-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Archimedean copulas</h2>
<p>The bivariate Archimedean copula <code>C(u₁,u₂) = φ⁻¹(φ(u₁)+φ(u₂))</code> is defined by means of the continuous strictly
decreasing generator parametrised by <code>θ</code>. The generator fulfills <code>φ(t): [0,1] → [0, ∞)</code>.</p>
<p>The <code>n</code>-variate Archimedean copula canbe defined analogically: <code>C(u₁,..., uₙ) = φ⁻¹(φ(u₁)+...+φ(uₙ))</code>. Here the constrains for the<code>θ</code> parameter are more strict, see: M. Hofert, 'Sampling Archimedean copulas', Computational Statistics &amp; Data Analysis, 52 (2008), 5163-5174.</p>
<ul>
<li>Clayton copula - keyword = "clayton": <code>θ ∈ (0, ∞)</code> for <code>n &gt; 2</code> and <code>θ ∈ [-1, 0) ∪ (0, ∞)</code> for <code>n = 2</code>,</li>
<li>Frank copula - keyword = "frank": <code>θ ∈ (0, ∞)</code> for <code>n &gt; 2</code> and <code>θ ∈ (-∞, 0) ∪ (0, ∞)</code> for <code>n = 2</code>,</li>
<li>Gumbel copula - keyword = "gumbel": <code>θ ∈ [1, ∞)</code>,</li>
<li>Ali-Mikhail-Haq copula - keyword = "amh": <code>θ ∈ (0, 1)</code> for <code>n &gt; 2</code> and  <code>θ ∈ [-1, 1]</code> for <code>n = 2</code>.</li>
</ul>
<p>For sampling algorithms see as well P. Kumar, 'Probability Distributions and Estimation
of Ali-Mikhail-Haq Copula', Applied Mathematical Sciences, Vol. 4, 2010, no. 14, 657 - 666; and R. B. Nelsen, 'An introduction to copulas', Springer Science &amp; Business Media (2007).</p>
<p>To sample <code>t</code> realisations of <code>n</code>-variate data from the Archimedean copula with parameter θ run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">archcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Union{Float64, Int}</span>, copula<span class="pl-k">::</span><span class="pl-c1">String</span>; rev<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, cor<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p>Returns <code>t</code> realisations of <code>n</code>-variate random vector, with uniformly distributed marginals on <code>[0,1]</code>. The cross-correlation  is modelled by the corresponding Archimedean copula.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">archcopulagen</span>(<span class="pl-c1">10</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.770331</span>  <span class="pl-c1">0.932834</span>
 <span class="pl-c1">0.472847</span>  <span class="pl-c1">0.0806845</span>
 <span class="pl-c1">0.970749</span>  <span class="pl-c1">0.653029</span>
 <span class="pl-c1">0.622159</span>  <span class="pl-c1">0.0518025</span>
 <span class="pl-c1">0.402461</span>  <span class="pl-c1">0.228549</span>
 <span class="pl-c1">0.946375</span>  <span class="pl-c1">0.842883</span>
 <span class="pl-c1">0.809076</span>  <span class="pl-c1">0.129038</span>
 <span class="pl-c1">0.747983</span>  <span class="pl-c1">0.433829</span>
 <span class="pl-c1">0.374341</span>  <span class="pl-c1">0.437269</span>
 <span class="pl-c1">0.973066</span>  <span class="pl-c1">0.910103</span></pre></div>
<ul>
<li>If <code>cor = Kendall</code>, uses the Kendall's τ correlation coefficient to compute the parameter <code>θ</code>.</li>
<li>If <code>cor = Spearman</code>, uses the Spearman ρ correlation coefficient to compute the parameter <code>θ</code>.</li>
<li>If <code>reversed = true</code> returns data from reversed copula.</li>
</ul>
<p>The reversed copula is introduced by the following transformation  <code>∀ᵢ uᵢ → 1-uᵢ</code>.
For modelling justification see: K. Domino, T. Błachowicz, M. Ciupak, 'The use of copula functions for predictive analysis of correlations between extreme storm tides',
Physica A: Statistical Mechanics and its Applications 413, 489-497, (2014); and K. Domino, T. Błachowicz, 'The use of copula functions for modeling the risk of
investment in shares traded on the Warsaw Stock Exchange', Physica A: Statistical Mechanics and its Applications 413, 77-85, (2014).</p>
<h3><a id="user-content-the-nested-archimedean-copulas" class="anchor" aria-hidden="true" href="#the-nested-archimedean-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Nested Archimedean copulas</h3>
<p>To sample <code>t</code> realisations of <code>∑ᵢ nᵢ + m</code> variate data from nested
Archimedean copulas, by the algorithm form  McNeil, A.J., 'Sampling nested Archimedean
copulas', Journal of Statistical Computation and Simulation 78, 567–581 (2008), run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">nestedarchcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, ϕ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>, copula<span class="pl-k">::</span><span class="pl-c1">String</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>)
</pre></div>
<p>The parameter <code>n</code> is the vector of the number of variables of the children copulas, the parameter <code>ϕ</code> is the vector of
parameters of the children copulas, and <code>θ</code> is the parameter of the parent copula. The parameter <code>m</code> is the number of variables modelled only by the parent copula.
Only the nesting within the same family is supported. The sufficient nesting condition requires <code>0 &lt; θ ≤ minimum(ϕ)</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nestedarchcopulagen</span>(<span class="pl-c1">10</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">2</span>], [<span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>], <span class="pl-c1">1.1</span>, <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.333487</span>  <span class="pl-c1">0.584206</span>   <span class="pl-c1">0.970471</span>  <span class="pl-c1">0.352363</span>  <span class="pl-c1">0.793386</span>
 <span class="pl-c1">0.249313</span>  <span class="pl-c1">0.0802689</span>  <span class="pl-c1">0.298697</span>  <span class="pl-c1">0.46432</span>   <span class="pl-c1">0.78807</span>
 <span class="pl-c1">0.765832</span>  <span class="pl-c1">0.272857</span>   <span class="pl-c1">0.461754</span>  <span class="pl-c1">0.125465</span>  <span class="pl-c1">0.661781</span>
 <span class="pl-c1">0.897061</span>  <span class="pl-c1">0.346811</span>   <span class="pl-c1">0.745457</span>  <span class="pl-c1">0.899775</span>  <span class="pl-c1">0.477065</span>
 <span class="pl-c1">0.387096</span>  <span class="pl-c1">0.268233</span>   <span class="pl-c1">0.533175</span>  <span class="pl-c1">0.42922</span>   <span class="pl-c1">0.294137</span>
 <span class="pl-c1">0.42065</span>   <span class="pl-c1">0.247676</span>   <span class="pl-c1">0.641627</span>  <span class="pl-c1">0.538728</span>  <span class="pl-c1">0.507315</span>
 <span class="pl-c1">0.598049</span>  <span class="pl-c1">0.138186</span>   <span class="pl-c1">0.659411</span>  <span class="pl-c1">0.876095</span>  <span class="pl-c1">0.19471</span>
 <span class="pl-c1">0.125968</span>  <span class="pl-c1">0.0643853</span>  <span class="pl-c1">0.824152</span>  <span class="pl-c1">0.601356</span>  <span class="pl-c1">0.662842</span>
 <span class="pl-c1">0.57524</span>   <span class="pl-c1">0.625373</span>   <span class="pl-c1">0.688956</span>  <span class="pl-c1">0.57825</span>   <span class="pl-c1">0.545043</span>
 <span class="pl-c1">0.96839</span>   <span class="pl-c1">0.899199</span>   <span class="pl-c1">0.827176</span>  <span class="pl-c1">0.544107</span>  <span class="pl-c1">0.862751</span></pre></div>
<h4><a id="user-content-if-copula--gumbel-the-multiple-nesting-is-supported" class="anchor" aria-hidden="true" href="#if-copula--gumbel-the-multiple-nesting-is-supported"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>If <code>copula == "gumbel"</code> the multiple nesting is supported.</h4>
<p>To sample <code>t</code> realisations of the <code>length(θ)+1</code> variate data from the chain
nested Gumbel copula: <code>C_θₙ(... C_θ₂(C_θ₁(u₁, u₂), u₃)...,  uₙ)</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span>   <span class="pl-c1">nestedarchcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, copula<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>gumbel<span class="pl-pds">"</span></span>)
</pre></div>
<p>The nesting sufficient condition requires <code>1 ≤ θ_{i+1} ≤ θᵢ</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">nestedarchcopulagen</span>(<span class="pl-c1">5</span>, [<span class="pl-c1">4.</span>, <span class="pl-c1">3.</span>, <span class="pl-c1">2.</span>], <span class="pl-s"><span class="pl-pds">"</span>gumbel<span class="pl-pds">"</span></span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.832902</span>  <span class="pl-c1">0.915821</span>   <span class="pl-c1">0.852532</span>  <span class="pl-c1">0.903184</span>
 <span class="pl-c1">0.266333</span>  <span class="pl-c1">0.293338</span>   <span class="pl-c1">0.307899</span>  <span class="pl-c1">0.0346497</span>
 <span class="pl-c1">0.152431</span>  <span class="pl-c1">0.0432532</span>  <span class="pl-c1">0.319465</span>  <span class="pl-c1">0.42015</span>  
 <span class="pl-c1">0.812182</span>  <span class="pl-c1">0.685689</span>   <span class="pl-c1">0.721783</span>  <span class="pl-c1">0.554992</span>
 <span class="pl-c1">0.252867</span>  <span class="pl-c1">0.521345</span>   <span class="pl-c1">0.406719</span>  <span class="pl-c1">0.511759</span></pre></div>
<p>To generate <code>t</code> realisations of the <code>∑ᵢ ∑ⱼ nᵢⱼ</code> variate data from the double nested gumbel copula:
<code>C_θ(C_ϕ₁(C_Ψ₁₁(u,...), ..., C_C_Ψ₁,ₗ₁(u...)), ..., C_ϕₖ(C_Ψₖ₁(u,...), ..., C_Ψₖ,ₗₖ(u,...)))</code>
where <code>lᵢ = length(n[i])</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> nestedarchcopulagen<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Vector{Vector{Int}}</span>, Ψ<span class="pl-k">::</span><span class="pl-c1">Vector{Vector{Float64}}</span>, ϕ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, θ₀<span class="pl-k">::</span><span class="pl-c1">Float64</span>, copula<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>gumbel<span class="pl-pds">"</span></span>)
</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">nestedarchcopulagen</span>(<span class="pl-c1">5</span>, [[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">2</span>]], [[<span class="pl-c1">3.</span>, <span class="pl-c1">2.</span>], [<span class="pl-c1">4.</span>]], [<span class="pl-c1">1.5</span>, <span class="pl-c1">2.1</span>], <span class="pl-c1">1.2</span>, <span class="pl-s"><span class="pl-pds">"</span>gumbel<span class="pl-pds">"</span></span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
<span class="pl-c1">0.464403</span>  <span class="pl-c1">0.711722</span>   <span class="pl-c1">0.883035</span>   <span class="pl-c1">0.896706</span>   <span class="pl-c1">0.888614</span>   <span class="pl-c1">0.826514</span>
<span class="pl-c1">0.750596</span>  <span class="pl-c1">0.768193</span>   <span class="pl-c1">0.0659561</span>  <span class="pl-c1">0.0252472</span>  <span class="pl-c1">0.996014</span>   <span class="pl-c1">0.989127</span>
<span class="pl-c1">0.825211</span>  <span class="pl-c1">0.712079</span>   <span class="pl-c1">0.581356</span>   <span class="pl-c1">0.507739</span>   <span class="pl-c1">0.882675</span>   <span class="pl-c1">0.84959</span>
<span class="pl-c1">0.276326</span>  <span class="pl-c1">0.0827071</span>  <span class="pl-c1">0.240836</span>   <span class="pl-c1">0.434629</span>   <span class="pl-c1">0.0184611</span>  <span class="pl-c1">0.031363</span>
<span class="pl-c1">0.208422</span>  <span class="pl-c1">0.504727</span>   <span class="pl-c1">0.27561</span>    <span class="pl-c1">0.639089</span>   <span class="pl-c1">0.481855</span>   <span class="pl-c1">0.573715</span>
</pre></div>
<h3><a id="user-content-the-chain-of-bivariate-archimedean-copulas" class="anchor" aria-hidden="true" href="#the-chain-of-bivariate-archimedean-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The chain of bivariate Archimedean copulas</h3>
<p>To generate <code>t</code> realisations of the <code>length(θ)+1</code> variate data, using the chain of the bivariate Archimedean copulas parametrised by the vectof of parameter <code>θ</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chaincopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Union{Vector{Float64}, Vector{Int}}</span>, copula<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>; rev<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, cor<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
</pre></div>
<p>The <code>i</code>th element of <code>θ</code> i.e. <code>θᵢ</code> determinsed the cross-correlation between the <code>i</code>th and the <code>i+1</code>th marginal.
Following families are supported: "clayton", "frank" and the "amh" -  Ali-Mikhail-Haq.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">chaincopulagen</span>(<span class="pl-c1">10</span>, [<span class="pl-c1">4.</span>, <span class="pl-c1">11.</span>], [<span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>])
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.180975</span>  <span class="pl-c1">0.386303</span>   <span class="pl-c1">0.879254</span>
 <span class="pl-c1">0.775377</span>  <span class="pl-c1">0.247895</span>   <span class="pl-c1">0.144803</span>
 <span class="pl-c1">0.888934</span>  <span class="pl-c1">0.426854</span>   <span class="pl-c1">0.772457</span>
 <span class="pl-c1">0.924876</span>  <span class="pl-c1">0.395564</span>   <span class="pl-c1">0.223155</span>
 <span class="pl-c1">0.408278</span>  <span class="pl-c1">0.139002</span>   <span class="pl-c1">0.142997</span>
 <span class="pl-c1">0.912603</span>  <span class="pl-c1">0.901252</span>   <span class="pl-c1">0.949828</span>
 <span class="pl-c1">0.828727</span>  <span class="pl-c1">0.0295759</span>  <span class="pl-c1">0.0897796</span>
 <span class="pl-c1">0.400537</span>  <span class="pl-c1">0.0337673</span>  <span class="pl-c1">0.27872</span>  
 <span class="pl-c1">0.429437</span>  <span class="pl-c1">0.462771</span>   <span class="pl-c1">0.425435</span>
 <span class="pl-c1">0.955881</span>  <span class="pl-c1">0.953623</span>   <span class="pl-c1">0.969038</span></pre></div>
<h2><a id="user-content-the-marshall-olkin-copula" class="anchor" aria-hidden="true" href="#the-marshall-olkin-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Marshall-Olkin copula</h2>
<p>To generate <code>t</code> realisations of <code>n</code>-variate data from Marshall-Olkin copula with parameter series <code>λ</code> with non-negative elements <code>λₛ</code>, run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">marshallolkincopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, λ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)</pre></div>
<p>Number of marginals is <code>n = ceil(Int, log(2, length(λ)-1))</code>.
Parameters are ordered as follow: <code>λ = [λ₁, λ₂, ..., λₙ, λ₁₂, λ₁₃, ..., λ₁ₙ, λ₂₃, ..., λₙ₋₁ₙ, λ₁₂₃, ..., λ₁₂...ₙ]</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">marshallolkincopulagen</span>(<span class="pl-c1">10</span>, [<span class="pl-c1">0.2</span>, <span class="pl-c1">1.2</span>, <span class="pl-c1">1.6</span>])
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.99636</span>   <span class="pl-c1">0.994344</span>
 <span class="pl-c1">0.167268</span>  <span class="pl-c1">0.0619408</span>
 <span class="pl-c1">0.977418</span>  <span class="pl-c1">0.965093</span>
 <span class="pl-c1">0.495167</span>  <span class="pl-c1">0.0247053</span>
 <span class="pl-c1">0.410336</span>  <span class="pl-c1">0.250159</span>
 <span class="pl-c1">0.778989</span>  <span class="pl-c1">0.678064</span>
 <span class="pl-c1">0.50927</span>   <span class="pl-c1">0.350059</span>
 <span class="pl-c1">0.925875</span>  <span class="pl-c1">0.887095</span>
 <span class="pl-c1">0.353646</span>  <span class="pl-c1">0.219006</span>
 <span class="pl-c1">0.782477</span>  <span class="pl-c1">0.686799</span></pre></div>
<p>To generate data from the Marshall-Olkin copula we use algorithm presented P. Embrechts, F. Lindskog, A McNeil 'Modelling Dependence with Copulas and Applications to Risk Management', 2001
∗∗</p>
<h2><a id="user-content-frechet-family-copulas" class="anchor" aria-hidden="true" href="#frechet-family-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Frechet family copulas</h2>
<p>To generate <code>t</code> realisation of <code>n</code> variate one parameter Frechet copula <code>Cf = α C_{max} + (1-α) C_{⟂}</code>, where <code>0 ≤ α ≤ 1</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">frechetcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">frechetcopulagen</span>(<span class="pl-c1">10</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.180975</span>  <span class="pl-c1">0.661781</span>  
 <span class="pl-c1">0.775377</span>  <span class="pl-c1">0.775377</span>  
 <span class="pl-c1">0.888934</span>  <span class="pl-c1">0.125437</span>  
 <span class="pl-c1">0.924876</span>  <span class="pl-c1">0.924876</span>  
 <span class="pl-c1">0.408278</span>  <span class="pl-c1">0.408278</span>  
 <span class="pl-c1">0.912603</span>  <span class="pl-c1">0.740184</span>  
 <span class="pl-c1">0.828727</span>  <span class="pl-c1">0.00463791</span>
 <span class="pl-c1">0.400537</span>  <span class="pl-c1">0.0288987</span>
 <span class="pl-c1">0.429437</span>  <span class="pl-c1">0.429437</span>  
 <span class="pl-c1">0.955881</span>  <span class="pl-c1">0.851275</span>  </pre></div>
<p>Two parameters Frechet copula, <code>C = α C_{max} + β C_{min} + (1- α - β) C_{⟂}</code>
is supported only for <code>n == 2</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">frechetcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span>, β<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span>)</pre></div>
<p>Here where <code>0 ≤ α</code> , where <code>0 ≤ β</code> and <code>α + β ≤ 1</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">frechetcopulagen</span>(<span class="pl-c1">10</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.2</span>)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.180975</span>  <span class="pl-c1">0.661781</span>
 <span class="pl-c1">0.775377</span>  <span class="pl-c1">0.775377</span>
 <span class="pl-c1">0.888934</span>  <span class="pl-c1">0.125437</span>
 <span class="pl-c1">0.924876</span>  <span class="pl-c1">0.924876</span>
 <span class="pl-c1">0.408278</span>  <span class="pl-c1">0.591722</span>
 <span class="pl-c1">0.912603</span>  <span class="pl-c1">0.740184</span>
 <span class="pl-c1">0.828727</span>  <span class="pl-c1">0.171273</span>
 <span class="pl-c1">0.400537</span>  <span class="pl-c1">0.0288987</span>
 <span class="pl-c1">0.429437</span>  <span class="pl-c1">0.429437</span>
 <span class="pl-c1">0.955881</span>  <span class="pl-c1">0.851275</span></pre></div>
<h3><a id="user-content-chain-of-bivariate-frechet-copulas" class="anchor" aria-hidden="true" href="#chain-of-bivariate-frechet-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Chain of bivariate Frechet copulas</h3>
<p>To generate <code>t</code> realisations of <code>length(α)+1</code> multivariate data using a chain two parameter bivariate Frechet copulas with parameter <code>αᵢ</code> and <code>βᵢ</code> for each neighbour (i'th and i+1'th) marginals run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chainfrechetcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, β<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span> <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(α))
</pre></div>
<p>In other words <code>∀i∈[1, length(θ)]</code> data are generated from following Frechet copula <code>C_{αᵢ,βᵢ}(uᵢ, u_{i+1})</code>. Due to features of bivariate copulas, each marginal <code>uᵢ</code> is uniformly
distributed on <code>[0,1]</code>, hence we got a multivariate copula, defined by subsequent bivariate sub-copulas.
The relation between marginals <code>i</code> and <code>j</code>: <code>i ≠ j+1</code> are defined by a sequence of
bivariate copulas.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">srand</span>(<span class="pl-c1">43</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">chainfrechetcopulagen</span>(<span class="pl-c1">10</span>, [<span class="pl-c1">0.6</span>, <span class="pl-c1">0.4</span>], [<span class="pl-c1">0.3</span>, <span class="pl-c1">0.5</span>])
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.996764</span>  <span class="pl-c1">0.996764</span>  <span class="pl-c1">0.996764</span>
 <span class="pl-c1">0.204033</span>  <span class="pl-c1">0.795967</span>  <span class="pl-c1">0.204033</span>
 <span class="pl-c1">0.979901</span>  <span class="pl-c1">0.979901</span>  <span class="pl-c1">0.0200985</span>
 <span class="pl-c1">0.120669</span>  <span class="pl-c1">0.879331</span>  <span class="pl-c1">0.120669</span>
 <span class="pl-c1">0.453027</span>  <span class="pl-c1">0.453027</span>  <span class="pl-c1">0.453027</span>
 <span class="pl-c1">0.800909</span>  <span class="pl-c1">0.199091</span>  <span class="pl-c1">0.800909</span>
 <span class="pl-c1">0.54892</span>   <span class="pl-c1">0.54892</span>   <span class="pl-c1">0.54892</span>  
 <span class="pl-c1">0.933832</span>  <span class="pl-c1">0.933832</span>  <span class="pl-c1">0.0661679</span>
 <span class="pl-c1">0.396943</span>  <span class="pl-c1">0.396943</span>  <span class="pl-c1">0.396943</span>
 <span class="pl-c1">0.804096</span>  <span class="pl-c1">0.851275</span>  <span class="pl-c1">0.955881</span></pre></div>
<h2><a id="user-content-correlation-matrix-generation" class="anchor" aria-hidden="true" href="#correlation-matrix-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Correlation matrix generation</h2>
<p>We supply a few methods to generate a <code>n x n</code> correlation matrix <code>Σ</code>.</p>
<h3><a id="user-content-fully-random-cases" class="anchor" aria-hidden="true" href="#fully-random-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fully random cases</h3>
<p>to generate randomly a correlation matrix run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_rand</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>for different methods we have different outputs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.396865</span>  <span class="pl-c1">0.339354</span>  <span class="pl-c1">0.193335</span>
 <span class="pl-c1">0.396865</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.887028</span>  <span class="pl-c1">0.51934</span>
 <span class="pl-c1">0.339354</span>  <span class="pl-c1">0.887028</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.551519</span>
 <span class="pl-c1">0.193335</span>  <span class="pl-c1">0.51934</span>   <span class="pl-c1">0.551519</span>  <span class="pl-c1">1.0</span>     

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_rand</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.659183</span>  <span class="pl-c1">0.916879</span>  <span class="pl-c1">0.486979</span>
 <span class="pl-c1">0.659183</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.676167</span>  <span class="pl-c1">0.808264</span>
 <span class="pl-c1">0.916879</span>  <span class="pl-c1">0.676167</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.731206</span>
 <span class="pl-c1">0.486979</span>  <span class="pl-c1">0.808264</span>  <span class="pl-c1">0.731206</span>  <span class="pl-c1">1.0</span>  </pre></div>
<h3><a id="user-content-deterministic-cases" class="anchor" aria-hidden="true" href="#deterministic-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deterministic cases</h3>
<p>To generate a correlation matrix with constant elements run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<p>parameter <code>α</code> should satisfy <code>0 &lt;= α &lt;= 1</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.4</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">1.0</span></pre></div>
<p>the generalisation is</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_two_constant</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>, β<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<p>parameters should satisfy <code>0 &lt;= α &lt;= 1</code> and <code>α &gt; β</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_two_constant</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.2</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.5</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.5</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">1.0</span></pre></div>
<p>to generate Toeplitz matrix with parameter <code>0 &lt;= ρ &lt;= 1</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, ρ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>    <span class="pl-c1">0.5</span>   <span class="pl-c1">0.25</span>  <span class="pl-c1">0.125</span>
 <span class="pl-c1">0.5</span>    <span class="pl-c1">1.0</span>   <span class="pl-c1">0.5</span>   <span class="pl-c1">0.25</span>
 <span class="pl-c1">0.25</span>   <span class="pl-c1">0.5</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.5</span>  
 <span class="pl-c1">0.125</span>  <span class="pl-c1">0.25</span>  <span class="pl-c1">0.5</span>   <span class="pl-c1">1.0</span>  </pre></div>
<h3><a id="user-content-partially-random-and-partially-deterministic-cases" class="anchor" aria-hidden="true" href="#partially-random-and-partially-deterministic-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Partially random and partially deterministic cases</h3>
<p>To generate constant matrix with noise run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant_noised</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>; ϵ<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> (<span class="pl-c1">1.</span><span class="pl-k">-</span>α)<span class="pl-k">/</span><span class="pl-c1">2.</span>)</pre></div>
<p>where the parameter <code>ϵ</code> must satisfy <code>0 &lt;= ϵ &lt;= 1-α</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant_noised</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.314724</span>  <span class="pl-c1">0.590368</span>  <span class="pl-c1">0.346992</span>
 <span class="pl-c1">0.314724</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.314256</span>  <span class="pl-c1">0.512183</span>
 <span class="pl-c1">0.590368</span>  <span class="pl-c1">0.314256</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.538089</span>
 <span class="pl-c1">0.346992</span>  <span class="pl-c1">0.512183</span>  <span class="pl-c1">0.538089</span>  <span class="pl-c1">1.0</span>   </pre></div>
<p>Analogically generate noised two constants matrix run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_two_constant_noised</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.2</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>        <span class="pl-c1">0.314724</span>  <span class="pl-c1">0.290368</span>  <span class="pl-c1">0.0469922</span>
 <span class="pl-c1">0.314724</span>   <span class="pl-c1">1.0</span>       <span class="pl-c1">0.014256</span>  <span class="pl-c1">0.212183</span>
 <span class="pl-c1">0.290368</span>   <span class="pl-c1">0.014256</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.238089</span>
 <span class="pl-c1">0.0469922</span>  <span class="pl-c1">0.212183</span>  <span class="pl-c1">0.238089</span>  <span class="pl-c1">1.0</span>   </pre></div>
<p>Finally to generate noised Toeplitz matrix run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz_noised</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, ρ<span class="pl-k">::</span><span class="pl-c1">Float64</span>; ϵ<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>ρ)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>ρ)<span class="pl-k">/</span><span class="pl-c1">2</span>)</pre></div>
<p>where the parameter <code>ϵ must satisfy 0 &lt;= ϵ &lt;= (1-ρ)/(1+ρ)</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz_noised</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>        <span class="pl-c1">0.376483</span>  <span class="pl-c1">0.310246</span>  <span class="pl-c1">0.0229948</span>
 <span class="pl-c1">0.376483</span>   <span class="pl-c1">1.0</span>       <span class="pl-c1">0.376171</span>  <span class="pl-c1">0.258122</span>
 <span class="pl-c1">0.310246</span>   <span class="pl-c1">0.376171</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.525393</span>
 <span class="pl-c1">0.0229948</span>  <span class="pl-c1">0.258122</span>  <span class="pl-c1">0.525393</span>  <span class="pl-c1">1.0</span>  </pre></div>
<h2><a id="user-content-changes-the-subset-of-marginals-of-multivariate-gaussian-distributed-data" class="anchor" aria-hidden="true" href="#changes-the-subset-of-marginals-of-multivariate-gaussian-distributed-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Changes the subset of marginals of multivariate Gaussian distributed data</h2>
<p>To change a chosen marginals subset <code>ind</code> of multivariate Gaussian distributed data <code>x</code> by means of t-Student sub-copula with
a parameter <code>ν</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2tstudent</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ind<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, ν<span class="pl-k">::</span><span class="pl-c1">Int</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>all univariate marginal distributions are Gaussian and unaffected by a transformation.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2tstudent</span>(x, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], <span class="pl-c1">6</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.519458</span>  <span class="pl-k">-</span><span class="pl-c1">0.498377</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.37937</span>    <span class="pl-c1">1.66806</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.432902</span>  <span class="pl-k">-</span><span class="pl-c1">0.0178933</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">1.01216</span>    <span class="pl-c1">1.50814</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.226484</span>   <span class="pl-c1">1.12436</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.727203</span>   <span class="pl-c1">0.238701</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span></pre></div>
<p>To change a chosen marginals subset <code>inds[i][2]</code> of multivariate Gaussian distributed data <code>x</code> by means of Archimedean sub-copula of family <code>inds[i][1]</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2arch</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, inds<span class="pl-k">::</span><span class="pl-c1">Vector{Pair{String,Vector{Int64}}}</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, notnested<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>many disjoint subsets numbered by <code>i</code> with different Archimedean sub-copulas are possible. As before all univariate marginal distributions are Gaussian and unaffected by a transformation. Named parameter <code>naive</code> indicates a use of a naive algorithm of data substitution. Named parameter <code>notnested</code> means the use of one parameter Archimedean copula instead of a nested one.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2arch</span>(x, [<span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742443</span>   <span class="pl-c1">0.424851</span>  <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
  <span class="pl-c1">0.211894</span>   <span class="pl-c1">0.195774</span>  <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.989417</span>  <span class="pl-k">-</span><span class="pl-c1">0.299369</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">0.157683</span>   <span class="pl-c1">1.47768</span>    <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.154893</span>   <span class="pl-c1">0.893253</span>   <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.657297</span>  <span class="pl-k">-</span><span class="pl-c1">0.339814</span>  <span class="pl-k">-</span><span class="pl-c1">1.54419</span>
</pre></div>
<p>To change a chosen marginals subset <code>ind</code> of multivariate Gaussian distributed data <code>x</code> by means of Frechet maximal sub-copula:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2frechet</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ind<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>all univariate marginal distributions are Gaussian and unaffected by a transformation.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2frechet</span>(x, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.875777</span>   <span class="pl-k">-</span><span class="pl-c1">0.374723</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
  <span class="pl-c1">0.0960334</span>   <span class="pl-c1">0.905703</span>   <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.599792</span>   <span class="pl-k">-</span><span class="pl-c1">0.0110945</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">0.813717</span>    <span class="pl-c1">1.8513</span>      <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.599255</span>    <span class="pl-c1">1.56873</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.7223</span>     <span class="pl-k">-</span><span class="pl-c1">0.172507</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span></pre></div>
<p>To change a chosen marginals subset <code>ind</code> of multivariate Gaussian distributed data <code>x</code> by means of bivariate Marshall-Olkin copula:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2marshallolkin</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ind<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, λ<span class="pl-c1">1</span><span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1.</span>, λ<span class="pl-c1">2</span><span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1.5</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>all univariate marginal distributions are Gaussian and unaffected by a transformation.
We require <code>length(ind) = 2</code> <code>λ1 ≧ 0</code> and <code>λ2 ≧ 0</code>. The parameter <code>λ12</code> is computed from expected
correlation between both changed marginals.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2marshallolkin</span>(x, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.790756</span>   <span class="pl-c1">0.784371</span>  <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.28088</span>    <span class="pl-c1">0.338086</span>  <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.90688</span>   <span class="pl-k">-</span><span class="pl-c1">0.509684</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">0.738628</span>   <span class="pl-c1">1.71026</span>    <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.353654</span>   <span class="pl-c1">1.19357</span>    <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.867606</span>  <span class="pl-k">-</span><span class="pl-c1">0.589929</span>  <span class="pl-k">-</span><span class="pl-c1">1.54419</span></pre></div>
<h2><a id="user-content-helpers" class="anchor" aria-hidden="true" href="#helpers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Helpers</h2>
<h3><a id="user-content-converting-marginals" class="anchor" aria-hidden="true" href="#converting-marginals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Converting marginals</h3>
<p>Takes matrix <code>X</code>: <code>size(X) = (t, n)</code> ie <code>t</code> realisations of <code>n</code>-dimensional random variable, with all uniform marginal univariate distributions <code>∀ᵢ X[:,i] ∼ Uniform(0,1)</code>, and convert those marginals to common distribution <code>d</code> with parameters <code>p[i]</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertmarg!</span>(U<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, d<span class="pl-k">::</span><span class="pl-c1">UnionAll</span>, p<span class="pl-k">::</span><span class="pl-c1">Union{Vector{Vector{Int64}}, Vector{Vector{Float64}}}</span>; testunif<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p>If <code>testunif = true</code> each marginal is tested for uniformity.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> U <span class="pl-k">=</span> <span class="pl-c1">gausscopulagen</span>(<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertmarg!</span>(U, Normal, [[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>],[<span class="pl-c1">0</span>, <span class="pl-c1">10</span>]])

julia<span class="pl-k">&gt;</span> U
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.225457</span>      <span class="pl-c1">8.97627</span>
  <span class="pl-c1">0.548381</span>     <span class="pl-c1">14.3926</span>
  <span class="pl-c1">0.666147</span>    <span class="pl-k">-</span><span class="pl-c1">10.0689</span>                                                                                                                                                      
 <span class="pl-k">-</span><span class="pl-c1">0.746662</span>     <span class="pl-k">-</span><span class="pl-c1">9.03553</span>                                                                                                                                                     
 <span class="pl-k">-</span><span class="pl-c1">0.746857</span>     <span class="pl-c1">17.2101</span>                                                                                                                                                      
 <span class="pl-k">-</span><span class="pl-c1">0.608109</span>     <span class="pl-k">-</span><span class="pl-c1">3.45649</span>
 <span class="pl-k">-</span><span class="pl-c1">0.136555</span>      <span class="pl-c1">0.700419</span>
  <span class="pl-c1">0.215631</span>     <span class="pl-k">-</span><span class="pl-c1">7.34409</span>
 <span class="pl-k">-</span><span class="pl-c1">0.00352701</span>   <span class="pl-k">-</span><span class="pl-c1">0.434793</span>
 <span class="pl-k">-</span><span class="pl-c1">0.876853</span>      <span class="pl-c1">2.39009</span>
</pre></div>
<p>To convert <code>i</code> th marginal to univariate distribution <code>d</code> with parameters array
<code>p</code> run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quantile</span>.(<span class="pl-c1">d</span>(p<span class="pl-k">...</span>), U[:,i])</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> U <span class="pl-k">=</span> <span class="pl-c1">gausscopulagen</span>(<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quantile</span>.(<span class="pl-c1">Levy</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), U[:,<span class="pl-c1">2</span>])
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">18.327904335047272</span>
 <span class="pl-c1">112.72788160148863</span>  
   <span class="pl-c1">0.4992650891811052</span>
   <span class="pl-c1">0.5642861403809334</span>
 <span class="pl-c1">350.0676959136128</span>   
   <span class="pl-c1">1.2175971128674394</span>
   <span class="pl-c1">2.510078079677982</span>
   <span class="pl-c1">0.6980591543550244</span>
   <span class="pl-c1">2.0290242635860944</span>
   <span class="pl-c1">3.527994542141473</span></pre></div>
<p>To convert all marginals to the same <code>d</code> with the same parameters <code>p</code> run</p>
<pre><code>julia&gt; using Distributions

julia&gt; quantile.(d(p...), U)
</code></pre>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> julia<span class="pl-k">&gt;</span> <span class="pl-c1">quantile</span>.(<span class="pl-c1">Levy</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), U)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3.42919</span>    <span class="pl-c1">18.3279</span>  
 <span class="pl-c1">7.14305</span>   <span class="pl-c1">112.728</span>   
 <span class="pl-c1">9.6359</span>      <span class="pl-c1">0.499265</span>
 <span class="pl-c1">0.687009</span>    <span class="pl-c1">0.564286</span>
 <span class="pl-c1">0.686835</span>  <span class="pl-c1">350.068</span>   
 <span class="pl-c1">0.827224</span>    <span class="pl-c1">1.2176</span>  
 <span class="pl-c1">1.71944</span>     <span class="pl-c1">2.51008</span>
 <span class="pl-c1">3.3597</span>      <span class="pl-c1">0.698059</span>
 <span class="pl-c1">2.18374</span>     <span class="pl-c1">2.02902</span>
 <span class="pl-c1">0.582946</span>    <span class="pl-c1">3.52799</span></pre></div>
<h1><a id="user-content-citing-this-work" class="anchor" aria-hidden="true" href="#citing-this-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Citing this work</h1>
<p>This project was partially financed by the National Science Centre, Poland – project number 2014/15/B/ST6/05204.</p>
<ul>
<li>
<p>while reffering to <code>gcop2arch()</code>, <code>gcop2frechet()</code>, and <code>gcop2marshallolkin()</code> - cite K. Domino, A. Glos: 'Introducing higher order correlations to marginals' subset of multivariate data by means of Archimedean copulas', [arXiv:1803.07813] (<a href="https://arxiv.org/abs/1803.07813" rel="nofollow">https://arxiv.org/abs/1803.07813</a>).</p>
</li>
<li>
<p>while reffering to <code>gcop2tstudent()</code> - cite K. Domino: 'Multivariate cumulants in outlier detection for financial data analysis', [arXiv:1804.00541] (<a href="https://arxiv.org/abs/1804.00541" rel="nofollow">https://arxiv.org/abs/1804.00541</a>).</p>
</li>
</ul>
</article></div>