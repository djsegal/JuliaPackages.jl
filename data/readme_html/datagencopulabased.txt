<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-datagencopulabasedjl" class="anchor" aria-hidden="true" href="#datagencopulabasedjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DatagenCopulaBased.jl</h1>
<p><a href="https://travis-ci.org/iitis/DatagenCopulaBased.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37bd17e579c79b093c17a99d8cb174d93ea402c9/68747470733a2f2f7472617669732d63692e6f72672f69697469732f4461746167656e436f70756c6142617365642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/iitis/DatagenCopulaBased.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/iitis/DatagenCopulaBased.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37d911fdb157c2ffbaa4277406bbd68dea114cb0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f69697469732f4461746167656e436f70756c6142617365642e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/iitis/DatagenCopulaBased.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3837307" rel="nofollow"><img src="https://camo.githubusercontent.com/3a8eaa20eb1265e8f05d4924df13edb6a43a5fb3/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333833373330372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3837307.svg" style="max-width:100%;"></a></p>
<p>Copula based data generator. Returns data in the form of the <code>t x n</code> matrix <code>U</code> where<code>t</code> numerates the number of realizations, and <code>n</code> numerates the number of marginals. By the copula definition each marginal <code>uᵢ</code> is uniformly distributed on the segment <code>[0,1]</code>. Realizations of such marginal would be <code>U[:,i]</code>.</p>
<p>Interdependence between marginals is modeled by the <code>n</code>-variate copula, see e.g.: R. B. Nelsen, 'An introduction to copulas', Springer Science &amp; Business Media (2007). See also Domino, K., 'Selected Methods for non-Gaussian Data Analysis', Gliwice, IITiS PAN, 2019, [arXiv:1811.10486] (<a href="https://arxiv.org/abs/1811.10486" rel="nofollow">https://arxiv.org/abs/1811.10486</a>).</p>
<p>This module support the following copula families:</p>
<ul>
<li>Elliptical copulas (Gaussian, t-Student),</li>
<li>Frechet copulas (maximal, minimal, independent),</li>
<li>Marshall-Olkin copulas,</li>
<li>Archimedean copulas (Clayton, Frank, Gumbel, Ali-Mikhail-Haq),</li>
<li>Archimedean nested copulas.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, run</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add DatagenCopulaBased</pre></div>
<p>To install the files Julia 1.0 or higher is required.</p>
<h1><a id="user-content-sampling-data" class="anchor" aria-hidden="true" href="#sampling-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sampling data</h1>
<p>To sample <code>t</code> realisations of data from <code>copula::TypeOfCopula</code> use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, copula<span class="pl-k">::</span><span class="pl-c1">TypeOfCopula</span>; rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span> <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG)</pre></div>
<p>where <code>rng</code> is the random number genrator that can be selected.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">3</span>, <span class="pl-c1">Gaussian_cop</span>([<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span>]))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.589188</span>  <span class="pl-c1">0.815308</span>
 <span class="pl-c1">0.708285</span>  <span class="pl-c1">0.924962</span>
 <span class="pl-c1">0.747341</span>  <span class="pl-c1">0.156994</span></pre></div>
<p>For <code>simulate_copula</code> all mentioned below copulas are supported.</p>
<p>Given <code>U</code> the preallocated matrix of <code>Float64</code> it can be filled by
<code>size(U,1)</code> sample of the copula by running:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula!</span>(U<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, copula<span class="pl-k">::</span><span class="pl-c1">TypeOfCopula</span>; rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span> <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG)</pre></div>
<p>For <code>simulate_copula!</code> all mentioned Archimedean copulas (including nested and the chain) as well as the Frechet and the Marshal-Olkin copulas are supported. Number of marginals <code>size(U,2)</code> in the preallocated matrix must equal to these in the copula model, else the <code>Assertionerror</code> will be raised.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">6</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3.</span>)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula!</span>(u, c)

julia<span class="pl-k">&gt;</span> u
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.740919</span>   <span class="pl-c1">0.936613</span>   <span class="pl-c1">0.968594</span>
 <span class="pl-c1">0.369025</span>   <span class="pl-c1">0.698884</span>   <span class="pl-c1">0.586236</span>
 <span class="pl-c1">0.0701388</span>  <span class="pl-c1">0.185901</span>   <span class="pl-c1">0.0890538</span>
 <span class="pl-c1">0.535579</span>   <span class="pl-c1">0.516761</span>   <span class="pl-c1">0.538476</span>
 <span class="pl-c1">0.487668</span>   <span class="pl-c1">0.549494</span>   <span class="pl-c1">0.804122</span>
 <span class="pl-c1">0.653199</span>   <span class="pl-c1">0.0923366</span>  <span class="pl-c1">0.387304</span></pre></div>
<h2><a id="user-content-elliptical-copulas" class="anchor" aria-hidden="true" href="#elliptical-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Elliptical copulas</h2>
<p>Elliptical copula is derived form the multivariate elliptical distribution (such as the Gaussian or the t-Student). Suppose <code>F(x₁, ..., xₙ)</code> is the Cumulative Density Function (CDF)
of such multivariate distribution, and <code>Fᵢ(xᵢ)</code> is the univariate CDF of its <code>i</code>th marginal (we assume it is continuous). Hence <code>uᵢ = Fᵢ(xᵢ)</code> is modeled by the uniform distribution on <code>[0,1]</code>. Given the elliptical multivariate distribution, the elliptical
copula is: <code>C(u₁, ..., uₙ) = F(F₁⁻¹(u₁), ..., Fₙ⁻¹(uₙ))</code>.</p>
<h3><a id="user-content-the-gaussian-copula" class="anchor" aria-hidden="true" href="#the-gaussian-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Gaussian copula</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Gaussian_cop</span>(Σ<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>)</pre></div>
<p>The Gaussian copula is parameterized by the correlation matrix <code>Σ</code> that needs to be symmetric, positively defined and with ones on the diagonal. The number of marginals is given by the size of <code>Σ</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Gaussian_cop</span>([<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span>])
<span class="pl-c1">Gaussian_cop</span>([<span class="pl-c1">1.0</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.0</span>])</pre></div>
<h3><a id="user-content-the-t-student-copula" class="anchor" aria-hidden="true" href="#the-t-student-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The t-Student copula</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Student_cop</span>(Σ<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ν<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>The t-Student copula is parameterized by the <code>Σ</code> matrix a in the Gaussian copula case, and by the integer parameter <code>ν &gt; 0 </code> interpreted as the number of degrees of freedom. The number of marginals is given by the size of <code>Σ</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Student_cop</span>([<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span>], <span class="pl-c1">1</span>)
<span class="pl-c1">Student_cop</span>([<span class="pl-c1">1.0</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.0</span>], <span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-the-marshall-olkin-copula" class="anchor" aria-hidden="true" href="#the-marshall-olkin-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Marshall-Olkin copula</h2>
<p>The Marshall-Olkin copula is derived form the Marshall-Olkin exponential distribution with positively valued parameters. The Marshall-Olkin copula models the dependency between the random variables subjected to external shocks. The shock connected with the single variable is modeled there by <code>λₖ</code>, while the shock connected with two variables by <code>λₖₗ</code>, etc...</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Marshal_Olkin_cop</span>(λ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)</pre></div>
<p>Parameters are ordered as follow in the argument vector <code>λ = [λ₁, λ₂, ..., λₙ, λ₁₂, λ₁₃, ..., λ₁ₙ, λ₂₃, ..., λₙ₋₁ₙ, λ₁₂₃, ..., λ₁₂...ₙ]</code>, all must be non-negative. The number of marginals of such implemented Marshal-Olkin copula is <code>n = ceil(Int, log(2, length(λ)-1))</code>.</p>
<p>To generate data from the Marshall-Olkin copula we use algorithm presented in P. Embrechts, F. Lindskog, A McNeil 'modeling Dependence with Copulas and Applications to Risk Management', 2001.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Marshall_Olkin_cop</span>([<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>])
<span class="pl-c1">Marshall_Olkin_cop</span>(<span class="pl-c1">2</span>, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">5</span>, c)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.576703</span>   <span class="pl-c1">0.795618</span>
 <span class="pl-c1">0.361453</span>   <span class="pl-c1">0.625213</span>
 <span class="pl-c1">0.624422</span>   <span class="pl-c1">0.101533</span>
 <span class="pl-c1">0.731702</span>   <span class="pl-c1">0.12085</span>
 <span class="pl-c1">0.0661758</span>  <span class="pl-c1">0.893326</span></pre></div>
<h2><a id="user-content-the-frechet-copula" class="anchor" aria-hidden="true" href="#the-frechet-copula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Frechet copula</h2>
<p>The two parameters Frechet copula is <code>C(u₁, u₂) = α C_{max}(u₁, u₂) + β C_{min}(u₁, u₂) + (1- α - β) C_{⟂}(u₁, u₂)</code>. Here <code>C_{max}(u₁, u₂)</code> yields maximal <code>1</code> cross-correlation, while <code>C_{min}(u₁, u₂)</code> minimal <code>-1</code> cross correlation. The <code>C_{min}(u₁, u₂)</code> is the copula only in the bivariate case.
Obviously we require <code>0 ≤ α ≤ 1</code> , where <code>0 ≤ β ≤ 1</code> and <code>0 ≤ 1-α - β ≤ 1</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Frechet_cop</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>, β<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<p>is supported only for <code>n = 2</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Frechet_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.4</span>)
<span class="pl-c1">Frechet_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.4</span>)

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">10</span>, c)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.180975</span>   <span class="pl-c1">0.661781</span>  
 <span class="pl-c1">0.0742681</span>  <span class="pl-c1">0.0742681</span>
 <span class="pl-c1">0.888934</span>   <span class="pl-c1">0.125437</span>  
 <span class="pl-c1">0.0950087</span>  <span class="pl-c1">0.0950087</span>
 <span class="pl-c1">0.869526</span>   <span class="pl-c1">0.130474</span>  
 <span class="pl-c1">0.912603</span>   <span class="pl-c1">0.740184</span>  
 <span class="pl-c1">0.995362</span>   <span class="pl-c1">0.00463791</span>
 <span class="pl-c1">0.400537</span>   <span class="pl-c1">0.0288987</span>
 <span class="pl-c1">0.521601</span>   <span class="pl-c1">0.521601</span>  
 <span class="pl-c1">0.955881</span>   <span class="pl-c1">0.851275</span>  </pre></div>
<p>The one parameter Frechet copula <code>C(u₁, ..., uₙ) = α C_{max}(u₁, ..., uₙ) + (1-α) C_{⟂}(u₁, ..., uₙ)</code>, where <code>0 ≤ α ≤ 1</code> is supported for any <code>n ≥ 2</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Frechet_cop</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Frechet_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">0.4</span>)
<span class="pl-c1">Frechet_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">10</span>, c)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.180975</span>  <span class="pl-c1">0.661781</span>    <span class="pl-c1">0.996764</span>
 <span class="pl-c1">0.775377</span>  <span class="pl-c1">0.0742681</span>   <span class="pl-c1">0.204033</span>
 <span class="pl-c1">0.979901</span>  <span class="pl-c1">0.979901</span>    <span class="pl-c1">0.979901</span>
 <span class="pl-c1">0.924876</span>  <span class="pl-c1">0.0950087</span>   <span class="pl-c1">0.120669</span>
 <span class="pl-c1">0.453027</span>  <span class="pl-c1">0.453027</span>    <span class="pl-c1">0.453027</span>
 <span class="pl-c1">0.912603</span>  <span class="pl-c1">0.740184</span>    <span class="pl-c1">0.800909</span>
 <span class="pl-c1">0.828727</span>  <span class="pl-c1">0.00463791</span>  <span class="pl-c1">0.54892</span>
 <span class="pl-c1">0.400537</span>  <span class="pl-c1">0.0288987</span>   <span class="pl-c1">0.933832</span>
 <span class="pl-c1">0.396943</span>  <span class="pl-c1">0.396943</span>    <span class="pl-c1">0.396943</span>
 <span class="pl-c1">0.804096</span>  <span class="pl-c1">0.804096</span>    <span class="pl-c1">0.804096</span></pre></div>
<h2><a id="user-content-the-archimedean-copulas" class="anchor" aria-hidden="true" href="#the-archimedean-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Archimedean copulas</h2>
<p>The bivariate Archimedean copula <code>C(u₁,u₂) = φ⁻¹(φ(u₁)+φ(u₂))</code> is defined by the continuous strictly decreasing generator function <code>φ(t)</code> parameterized by <code>θ</code>. Such generator must fulfill <code>φ(t): [0,1] →[0, ∞)</code>.
The <code>n</code>-variate Archimedean copula can be defined analogically: <code>C(u₁,..., uₙ) = φ⁻¹(φ(u₁)+...+φ(uₙ))</code>. Here the constrains for the <code>θ</code> parameter are more strict, see: M. Hofert, 'Sampling Archimedean copulas', Computational Statistics &amp; Data Analysis, 52 (2008), 5163-5174.</p>
<p>Following Archimedean copulas are supported in the module:</p>
<ul>
<li>Clayton copula - parameter domain: <code>θ ∈ (0, ∞)</code> for <code>n &gt; 2</code> and <code>θ ∈ [-1, 0) ∪ (0, ∞)</code> for <code>n = 2</code>,</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Clayton_cop</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<ul>
<li>Frank copula - parameter domain: <code>θ ∈ (0, ∞)</code> for <code>n &gt; 2</code> and <code>θ ∈ (-∞, 0) ∪ (0, ∞)</code> for <code>n = 2</code>,</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Frank_cop</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<ul>
<li>Gumbel copula - parameter domain: <code>θ ∈ [1, ∞)</code>,</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Gumbel_cop</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<ul>
<li>Ali-Mikhail-Haq copula - parameter domain: <code>θ ∈ (0, 1)</code> for <code>n &gt; 2</code> and  <code>θ ∈ [-1, 1]</code> for <code>n = 2</code></li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">AMH_cop</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<p>For implemented sampling algorithms see as well P. Kumar, 'Probability Distributions and Estimation
of Ali-Mikhail-Haq Copula', Applied Mathematical Sciences, Vol. 4, 2010, no. 14, 657 - 666; and R. B. Nelsen, 'An introduction to copulas', Springer Science &amp; Business Media (2007).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3.</span>)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">5</span>, c)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.740919</span>   <span class="pl-c1">0.936613</span>  <span class="pl-c1">0.968594</span>
 <span class="pl-c1">0.369025</span>   <span class="pl-c1">0.698884</span>  <span class="pl-c1">0.586236</span>
 <span class="pl-c1">0.0701388</span>  <span class="pl-c1">0.185901</span>  <span class="pl-c1">0.0890538</span>
 <span class="pl-c1">0.535579</span>   <span class="pl-c1">0.516761</span>  <span class="pl-c1">0.538476</span>
 <span class="pl-c1">0.487668</span>   <span class="pl-c1">0.549494</span>  <span class="pl-c1">0.804122</span>  </pre></div>
<p>The optional third empty type <code>&lt;: CorrelationType</code> parameter is used to compute <code>θ</code> from the expected Kendall - <code>KendallCorrelation</code> or Speraman
<code>SpearmanCorrelation</code> cross-correlation.
Here only positive correlations are supported, and there are some limitations are for the Ali-Mikhail-Haq copula due to limitations on <code>θ</code> there.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">0.5</span>, KendallCorrelation)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">500_000</span>, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corkendall</span>(x)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.500576</span>  <span class="pl-c1">0.499986</span>
 <span class="pl-c1">0.500576</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.501574</span>
 <span class="pl-c1">0.499986</span>  <span class="pl-c1">0.501574</span>  <span class="pl-c1">1.0</span>      </pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">0.5</span>, SpearmanCorrelation)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1.0760904048732394</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">500_000</span>, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corspearman</span>(x)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.499662</span>  <span class="pl-c1">0.499637</span>
 <span class="pl-c1">0.499662</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.500228</span>
 <span class="pl-c1">0.499637</span>  <span class="pl-c1">0.500228</span>  <span class="pl-c1">1.0</span>   </pre></div>
<p>The reversed Gumbel, Clayton and Ali-Mikhail-Haq copulas are supported as well:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Gumbel_cop_rev</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Clayton_cop_rev</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">AMH_cop_rev</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<p>The reversed copula is introduced by the following transformation  <code>∀ᵢ uᵢ → 1-uᵢ</code>. For modeling justification see: K. Domino, T. Błachowicz, M. Ciupak, 'The use of copula functions for predictive analysis of correlations between extreme storm tides',
Physica A: Statistical Mechanics and its Applications 413, 489-497, (2014); and K. Domino, T. Błachowicz, 'The use of copula functions for modeling the risk of
investment in shares traded on the Warsaw Stock Exchange', Physica A: Statistical Mechanics and its Applications 413, 77-85, (2014).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop_rev</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5.</span>)
<span class="pl-c1">Clayton_cop_rev</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5.0</span>)

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">10</span>, c)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.246822</span>   <span class="pl-c1">0.0735546</span>
 <span class="pl-c1">0.0214448</span>  <span class="pl-c1">0.154414</span>
 <span class="pl-c1">0.453721</span>   <span class="pl-c1">0.598829</span>
 <span class="pl-c1">0.87328</span>    <span class="pl-c1">0.91861</span>  
 <span class="pl-c1">0.896485</span>   <span class="pl-c1">0.899053</span>
 <span class="pl-c1">0.966261</span>   <span class="pl-c1">0.981044</span>
 <span class="pl-c1">0.0372783</span>  <span class="pl-c1">0.0100412</span>
 <span class="pl-c1">0.899013</span>   <span class="pl-c1">0.758491</span>
 <span class="pl-c1">0.473352</span>   <span class="pl-c1">0.334147</span>
 <span class="pl-c1">0.0438898</span>  <span class="pl-c1">0.256301</span></pre></div>
<h3><a id="user-content-the-nested-archimedean-copulas" class="anchor" aria-hidden="true" href="#the-nested-archimedean-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The nested Archimedean copulas</h3>
<p>The Nested Archimedean copula is
<code>C_θ(C_ϕ₁(u₁₁, ..., u₁,ₙ₁), ..., C_ϕₖ(uₖ₁, ..., uₖ,ₙₖ), u₁ , ... uₘ)</code>.
Here <code>θ</code> is the parameter of the parent copula while <code>ϕᵢ</code> is the parameter of the child copula. If <code>m &gt; 0</code>, some random variables will be modeled by the parent copula only. The example is:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Nested_Clayton_cop</span>(childred<span class="pl-k">::</span><span class="pl-c1">Vector{Clayton_cop}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.</span>)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.</span>)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Nested_Clayton_cop</span>([a,b], <span class="pl-c1">0</span>, <span class="pl-c1">1.</span>)
<span class="pl-c1">Nested_Clayton_cop</span>(Clayton_cop[<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>), <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.0</span>)], <span class="pl-c1">0</span>, <span class="pl-c1">1.0</span>)</pre></div>
<p>Only the nesting within the same family is supported. The sufficient nesting condition requires parameters of the children copulas to be larger than the parameter of the parent copula. For sampling one uses the algorithm form  McNeil, A.J., 'Sampling nested Archimedean copulas', Journal of Statistical Computation and Simulation 78, 567–581 (2008).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">0.9</span>, KendallCorrelation)
<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">18.000000000000004</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Nested_Clayton_cop</span>([a], <span class="pl-c1">1</span>, <span class="pl-c1">.2</span>, KendallCorrelation)
<span class="pl-c1">Nested_Clayton_cop</span>(Clayton_cop[<span class="pl-c1">Clayton_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">18.000000000000004</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">500000</span>, b);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corkendall</span>(x)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.899927</span>  <span class="pl-c1">0.201108</span>
 <span class="pl-c1">0.899927</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.201252</span>
 <span class="pl-c1">0.201108</span>  <span class="pl-c1">0.201252</span>  <span class="pl-c1">1.0</span>    
</pre></div>
<p>For the Gumbel copula the double nesting is supported. Double Nested copula is: <code>C_θ(C_ϕ₁(C_Ψ₁₁(u,...), ..., C_C_Ψ₁,ₗ₁(u...)), ..., C_ϕₖ(C_Ψₖ₁(u,...), ..., C_Ψₖ,ₗₖ(u,...)))</code>. These are in the following form.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Double_Nested_Gumbel_cop</span>(children<span class="pl-k">::</span><span class="pl-c1">Vector{Nested_Gumbel_cop}</span>, θ)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2.</span>)
<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.</span>)
<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>)

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.</span>)
<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.0</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Nested_Gumbel_cop</span>([a,b], <span class="pl-c1">0</span>, <span class="pl-c1">1.75</span>)
<span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2.0</span>), <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>)], <span class="pl-c1">0</span>, <span class="pl-c1">1.75</span>)

julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">Nested_Gumbel_cop</span>([c], <span class="pl-c1">1</span>, <span class="pl-c1">1.5</span>)
<span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.0</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">1.5</span>)

julia<span class="pl-k">&gt;</span> gp <span class="pl-k">=</span> <span class="pl-c1">Double_Nested_Gumbel_cop</span>([p, p1], <span class="pl-c1">1.2</span>)
<span class="pl-c1">Double_Nested_Gumbel_cop</span>(Nested_Gumbel_cop[<span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2.0</span>), <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>)], <span class="pl-c1">0</span>, <span class="pl-c1">1.75</span>), <span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.0</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">1.5</span>)], <span class="pl-c1">1.2</span>)

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">2</span>, gp)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">7</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.103462</span>  <span class="pl-c1">0.358534</span>  <span class="pl-c1">0.068492</span>  <span class="pl-c1">0.0914353</span>  <span class="pl-c1">0.90365</span>   <span class="pl-c1">0.861869</span>  <span class="pl-c1">0.0716466</span>
 <span class="pl-c1">0.755824</span>  <span class="pl-c1">0.946489</span>  <span class="pl-c1">0.745881</span>  <span class="pl-c1">0.916382</span>   <span class="pl-c1">0.448706</span>  <span class="pl-c1">0.354352</span>  <span class="pl-c1">0.676657</span></pre></div>
<p>More straight forward example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">.9</span>, KendallCorrelation)
<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">10.000000000000002</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">0.8</span>, KendallCorrelation)
<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5.000000000000001</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Nested_Gumbel_cop</span>([a], <span class="pl-c1">1</span>, <span class="pl-c1">0.6</span>, KendallCorrelation)
<span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">10.000000000000002</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">2.5</span>)

julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">Nested_Gumbel_cop</span>([b], <span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>, KendallCorrelation)
<span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5.000000000000001</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> pp <span class="pl-k">=</span> <span class="pl-c1">Double_Nested_Gumbel_cop</span>([p,p1], <span class="pl-c1">0.1</span>, KendallCorrelation)
<span class="pl-c1">Double_Nested_Gumbel_cop</span>(Nested_Gumbel_cop[<span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">10.000000000000002</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">2.5</span>), <span class="pl-c1">Nested_Gumbel_cop</span>(Gumbel_cop[<span class="pl-c1">Gumbel_cop</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5.000000000000001</span>)], <span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>)], <span class="pl-c1">1.1111111111111112</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">750_000</span>, pp);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corkendall</span>(x)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>        <span class="pl-c1">0.90994</span>    <span class="pl-c1">0.599545</span>   <span class="pl-c1">0.0981701</span>  <span class="pl-c1">0.0982193</span>  <span class="pl-c1">0.099066</span>
 <span class="pl-c1">0.90994</span>    <span class="pl-c1">1.0</span>        <span class="pl-c1">0.599713</span>   <span class="pl-c1">0.0981766</span>  <span class="pl-c1">0.0982359</span>  <span class="pl-c1">0.0990366</span>
 <span class="pl-c1">0.599545</span>   <span class="pl-c1">0.599713</span>   <span class="pl-c1">1.0</span>        <span class="pl-c1">0.099002</span>   <span class="pl-c1">0.0989463</span>  <span class="pl-c1">0.0991464</span>
 <span class="pl-c1">0.0981701</span>  <span class="pl-c1">0.0981766</span>  <span class="pl-c1">0.099002</span>   <span class="pl-c1">1.0</span>        <span class="pl-c1">0.819611</span>   <span class="pl-c1">0.499707</span>
 <span class="pl-c1">0.0982193</span>  <span class="pl-c1">0.0982359</span>  <span class="pl-c1">0.0989463</span>  <span class="pl-c1">0.819611</span>   <span class="pl-c1">1.0</span>        <span class="pl-c1">0.499743</span>
 <span class="pl-c1">0.099066</span>   <span class="pl-c1">0.0990366</span>  <span class="pl-c1">0.0991464</span>  <span class="pl-c1">0.499707</span>   <span class="pl-c1">0.499743</span>   <span class="pl-c1">1.0</span>    </pre></div>
<p>Hierarchical nested Gumbel copula is supported as well <code>C_θₙ₋₁(C_θₙ₋₂( ... C_θ₂(C_θ₁(u₁, u₂), u₃) ,..., uₙ₋₁)uₙ)</code>. Here bivariate Gumbel copulas are nested one in the another. The most inner is the ground ... ground child one and the most outer is the ground ... ground parent one. Numbel of marginals is <code>n = length(θ)+1</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Hierarchical_Gumbel_cop</span>(θ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)</pre></div>
<p>Here <code>θ</code> is the parameter vector, starting form the ground ... ground child one and ending on the ground ... ground parent one. Hence elements of <code>θ</code>
must be sorted in the descending order.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Hierarchical_Gumbel_cop</span>([<span class="pl-c1">5.</span>, <span class="pl-c1">4.</span>, <span class="pl-c1">3.</span>])
<span class="pl-c1">Hierarchical_Gumbel_cop</span>(<span class="pl-c1">4</span>, [<span class="pl-c1">5.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">3.0</span>])

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">3</span>, c)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.100353</span>  <span class="pl-c1">0.207903</span>  <span class="pl-c1">0.0988337</span>  <span class="pl-c1">0.0431565</span>
 <span class="pl-c1">0.347417</span>  <span class="pl-c1">0.217052</span>  <span class="pl-c1">0.223734</span>   <span class="pl-c1">0.042903</span>
 <span class="pl-c1">0.73617</span>   <span class="pl-c1">0.347349</span>  <span class="pl-c1">0.168348</span>   <span class="pl-c1">0.410963</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Hierarchical_Gumbel_cop</span>([<span class="pl-c1">.9</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.1</span>], KendallCorrelation)
<span class="pl-c1">Hierarchical_Gumbel_cop</span>(<span class="pl-c1">5</span>, [<span class="pl-c1">10.000000000000002</span>, <span class="pl-c1">3.333333333333333</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">1.1111111111111112</span>])

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">750_000</span>, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corkendall</span>(x)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.900078</span>  <span class="pl-c1">0.700316</span>   <span class="pl-c1">0.499483</span>   <span class="pl-c1">0.100431</span>
 <span class="pl-c1">0.900078</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.700184</span>   <span class="pl-c1">0.499376</span>   <span class="pl-c1">0.100567</span>
 <span class="pl-c1">0.700316</span>  <span class="pl-c1">0.700184</span>  <span class="pl-c1">1.0</span>        <span class="pl-c1">0.499635</span>   <span class="pl-c1">0.0999502</span>
 <span class="pl-c1">0.499483</span>  <span class="pl-c1">0.499376</span>  <span class="pl-c1">0.499635</span>   <span class="pl-c1">1.0</span>        <span class="pl-c1">0.0999432</span>
 <span class="pl-c1">0.100431</span>  <span class="pl-c1">0.100567</span>  <span class="pl-c1">0.0999502</span>  <span class="pl-c1">0.0999432</span>  <span class="pl-c1">1.0</span>  </pre></div>
<h2><a id="user-content-the-chain-of-bivariate-copulas" class="anchor" aria-hidden="true" href="#the-chain-of-bivariate-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The chain of bivariate copulas</h2>
<p>The chain of the bivariate copulas is determined by the sequence of bivariate copulas <code>C₁, C₂, ..., Cₙ₋₁</code> where each model the subsequent pair of marginals <code>Cₖ(uₖ, uₖ₊₁)</code>.  Hence the cross-correlation is introduced locally and decreases as the distance between marginals grows.</p>
<h3><a id="user-content-the-chain-of-bivariate-archimedean-copulas" class="anchor" aria-hidden="true" href="#the-chain-of-bivariate-archimedean-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The chain of bivariate Archimedean copulas</h3>
<p>In this case, each element of the copula chain is the Archimedean copula (Clayton, Frank and Ali-Mikhail-Haq families are supported). Hence the chain is parameterized by the parameters vector <code>θ</code> (with parameters domains as in the case of bivariate copulas) and the vector of string determining the copula family. Following families are supported: Clayton - key: "clayton", Frank - key: "frank" and Ali-Mikhail-Haq - key: "amh".
The <code>i</code>th element of the vector <code>θ</code> (and the <code>i</code>th element of the string with copulas names) determine the cross-correlation between the <code>i</code>th and the <code>i+1</code>th marginal. Number of marginals is <code>n = length(θ)+1</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Chain_of_Archimedeans</span>(θ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, copulas<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>)</pre></div>
<p>if one want to use one copula type, use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Chain_of_Archimedeans</span>(θ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, copulas<span class="pl-k">::</span><span class="pl-c1">String</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Chain_of_Archimedeans</span>([<span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>], [<span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>])
<span class="pl-c1">Chain_of_Archimedeans</span>(<span class="pl-c1">3</span>, [<span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>], [<span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>])</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Chain_of_Archimedeans</span>([<span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>], <span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>)
<span class="pl-c1">Chain_of_Archimedeans</span>(<span class="pl-c1">3</span>, [<span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>], [<span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>frank<span class="pl-pds">"</span></span>])
</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Chain_of_Archimedeans</span>([<span class="pl-c1">0.7</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.7</span>], <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, KendallCorrelation)
<span class="pl-c1">Chain_of_Archimedeans</span>(<span class="pl-c1">4</span>, [<span class="pl-c1">4.666666666666666</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">4.666666666666666</span>], [<span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>])

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">750_000</span>, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corkendall</span>(x)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.699611</span>  <span class="pl-c1">0.443936</span>  <span class="pl-c1">0.399355</span>
 <span class="pl-c1">0.699611</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.499728</span>  <span class="pl-c1">0.443053</span>
 <span class="pl-c1">0.443936</span>  <span class="pl-c1">0.499728</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.699855</span>
 <span class="pl-c1">0.399355</span>  <span class="pl-c1">0.443053</span>  <span class="pl-c1">0.699855</span>  <span class="pl-c1">1.0</span>       </pre></div>
<p>Negative correlations are supported here as well:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Chain_of_Archimedeans</span>([<span class="pl-c1">0.7</span>, <span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.7</span>], <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, KendallCorrelation)
<span class="pl-c1">Chain_of_Archimedeans</span>(<span class="pl-c1">4</span>, [<span class="pl-c1">4.666666666666666</span>, <span class="pl-c1">2.0</span>, <span class="pl-k">-</span><span class="pl-c1">0.8235294117647058</span>], [<span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span>])

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">750_000</span>, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">corkendall</span>(x)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>        <span class="pl-c1">0.69992</span>    <span class="pl-c1">0.445151</span>  <span class="pl-k">-</span><span class="pl-c1">0.372628</span>
  <span class="pl-c1">0.69992</span>    <span class="pl-c1">1.0</span>        <span class="pl-c1">0.500511</span>  <span class="pl-k">-</span><span class="pl-c1">0.413707</span>
  <span class="pl-c1">0.445151</span>   <span class="pl-c1">0.500511</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.699821</span>
 <span class="pl-k">-</span><span class="pl-c1">0.372628</span>  <span class="pl-k">-</span><span class="pl-c1">0.413707</span>  <span class="pl-k">-</span><span class="pl-c1">0.699821</span>   <span class="pl-c1">1.0</span>    </pre></div>
<h3><a id="user-content-the-chain-of-bivariate-frechet-copulas" class="anchor" aria-hidden="true" href="#the-chain-of-bivariate-frechet-copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The chain of bivariate Frechet copulas</h3>
<p>Here, each bivariate copula is the two parameters Frechet one <code>Cₖ = C_{αₖ,βₖ}(uₖ, uₖ₊₁)</code>, where <code>αₖ</code> and <code>βₖ</code> are elements of parameter vectors <code>α</code> and <code>β</code> that must be of the equal size. Number of marginals in <code>n = length(α) = length(β)</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Chain_of_Frechet</span>(α, β)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Chain_of_Frechet</span>([<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.1</span>])
<span class="pl-c1">Chain_of_Frechet</span>(<span class="pl-c1">3</span>, [<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.1</span>])

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simulate_copula</span>(<span class="pl-c1">3</span>, c)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.828727</span>  <span class="pl-c1">0.171273</span>  <span class="pl-c1">0.180975</span>
 <span class="pl-c1">0.400537</span>  <span class="pl-c1">0.408278</span>  <span class="pl-c1">0.775377</span>
 <span class="pl-c1">0.429437</span>  <span class="pl-c1">0.912603</span>  <span class="pl-c1">0.888934</span></pre></div>
<h2><a id="user-content-correlation-matrix-generation" class="anchor" aria-hidden="true" href="#correlation-matrix-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Correlation matrix generation</h2>
<p>We supply a few methods to generate a <code>n x n</code> correlation matrix <code>Σ</code>.</p>
<h3><a id="user-content-fully-random-cases" class="anchor" aria-hidden="true" href="#fully-random-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fully random cases</h3>
<p>to generate randomly a correlation matrix run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_rand</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>For different methods we have different outputs</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.396865</span>  <span class="pl-c1">0.339354</span>  <span class="pl-c1">0.193335</span>
 <span class="pl-c1">0.396865</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.887028</span>  <span class="pl-c1">0.51934</span>
 <span class="pl-c1">0.339354</span>  <span class="pl-c1">0.887028</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.551519</span>
 <span class="pl-c1">0.193335</span>  <span class="pl-c1">0.51934</span>   <span class="pl-c1">0.551519</span>  <span class="pl-c1">1.0</span>     

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_rand</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.659183</span>  <span class="pl-c1">0.916879</span>  <span class="pl-c1">0.486979</span>
 <span class="pl-c1">0.659183</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.676167</span>  <span class="pl-c1">0.808264</span>
 <span class="pl-c1">0.916879</span>  <span class="pl-c1">0.676167</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.731206</span>
 <span class="pl-c1">0.486979</span>  <span class="pl-c1">0.808264</span>  <span class="pl-c1">0.731206</span>  <span class="pl-c1">1.0</span>  </pre></div>
<p>In general the second case gives higher values of correlations.</p>
<h3><a id="user-content-deterministic-cases" class="anchor" aria-hidden="true" href="#deterministic-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deterministic cases</h3>
<p>To generate a correlation matrix with constant elements run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<p>parameter <code>α</code> should satisfy <code>0 &lt;= α &lt;= 1</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.4</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>  <span class="pl-c1">1.0</span></pre></div>
<p>the generalisation is with two parameters <code>0 &lt;= α &lt;= 1</code> and <code>α &gt; β</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_two_constant</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>, β<span class="pl-k">::</span><span class="pl-c1">Float64</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_two_constant</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.2</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.5</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.5</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.2</span>
 <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">1.0</span></pre></div>
<p>Here the first constant refer to the "nesting" of the higher
correlation for the first half of marginals.
To generate the Toeplitz matrix with parameter <code>0 &lt;= ρ &lt;= 1</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, ρ<span class="pl-k">::</span><span class="pl-c1">Float64</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>    <span class="pl-c1">0.5</span>   <span class="pl-c1">0.25</span>  <span class="pl-c1">0.125</span>
 <span class="pl-c1">0.5</span>    <span class="pl-c1">1.0</span>   <span class="pl-c1">0.5</span>   <span class="pl-c1">0.25</span>
 <span class="pl-c1">0.25</span>   <span class="pl-c1">0.5</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">0.5</span>  
 <span class="pl-c1">0.125</span>  <span class="pl-c1">0.25</span>  <span class="pl-c1">0.5</span>   <span class="pl-c1">1.0</span>  </pre></div>
<h3><a id="user-content-partially-random-and-partially-deterministic-cases" class="anchor" aria-hidden="true" href="#partially-random-and-partially-deterministic-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Partially random and partially deterministic cases</h3>
<p>To generate constant matrix with the noise run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant_noised</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Float64</span>; ϵ<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> (<span class="pl-c1">1.</span><span class="pl-k">-</span>α)<span class="pl-k">/</span><span class="pl-c1">2.</span>)</pre></div>
<p>where the parameter <code>ϵ</code> must satisfy <code>0 &lt;= ϵ &lt;= 1-α</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_constant_noised</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.314724</span>  <span class="pl-c1">0.590368</span>  <span class="pl-c1">0.346992</span>
 <span class="pl-c1">0.314724</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.314256</span>  <span class="pl-c1">0.512183</span>
 <span class="pl-c1">0.590368</span>  <span class="pl-c1">0.314256</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.538089</span>
 <span class="pl-c1">0.346992</span>  <span class="pl-c1">0.512183</span>  <span class="pl-c1">0.538089</span>  <span class="pl-c1">1.0</span>   </pre></div>
<p>Analogically to generate noised two constants matrix run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_two_constant_noised</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">0.2</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>       <span class="pl-c1">0.754384</span>  <span class="pl-c1">0.194805</span>  <span class="pl-c1">0.171162</span>
 <span class="pl-c1">0.754384</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.117009</span>  <span class="pl-c1">0.27321</span>
 <span class="pl-c1">0.194805</span>  <span class="pl-c1">0.117009</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.139476</span>
 <span class="pl-c1">0.171162</span>  <span class="pl-c1">0.27321</span>   <span class="pl-c1">0.139476</span>  <span class="pl-c1">1.0</span>    </pre></div>
<p>Here the first constant refer to the "nesting" of the higher
correlation for the first half of marginals.
Finally to generate noised Toeplitz matrix run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz_noised</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>, ρ<span class="pl-k">::</span><span class="pl-c1">Float64</span>; ϵ<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>ρ)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>ρ)<span class="pl-k">/</span><span class="pl-c1">2</span>)</pre></div>
<p>where the parameter <code>ϵ must satisfy 0 &lt;= ϵ &lt;= (1-ρ)/(1+ρ)</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cormatgen_toeplitz_noised</span>(<span class="pl-c1">4</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>        <span class="pl-c1">0.376483</span>  <span class="pl-c1">0.310246</span>  <span class="pl-c1">0.0229948</span>
 <span class="pl-c1">0.376483</span>   <span class="pl-c1">1.0</span>       <span class="pl-c1">0.376171</span>  <span class="pl-c1">0.258122</span>
 <span class="pl-c1">0.310246</span>   <span class="pl-c1">0.376171</span>  <span class="pl-c1">1.0</span>       <span class="pl-c1">0.525393</span>
 <span class="pl-c1">0.0229948</span>  <span class="pl-c1">0.258122</span>  <span class="pl-c1">0.525393</span>  <span class="pl-c1">1.0</span>  </pre></div>
<h2><a id="user-content-changes-the-subset-of-marginals-of-multivariate-gaussian-distributed-data" class="anchor" aria-hidden="true" href="#changes-the-subset-of-marginals-of-multivariate-gaussian-distributed-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changes the subset of marginals of multivariate Gaussian distributed data</h2>
<p>To change the chosen marginals subset, determined by the vector of indices<code>ind</code>, of the multivariate Gaussian distributed data <code>x</code> by means of t-Student sub-copula with
a parameter <code>ν</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2tstudent</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ind<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, ν<span class="pl-k">::</span><span class="pl-c1">Int</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, rng <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG)</pre></div>
<p>all univariate marginal distributions will be Gaussian, hence unaffected by the transformation. The keyword <code>naive</code> means the naive resampling if true.
Custom random number generator is supported.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2tstudent</span>(x, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], <span class="pl-c1">6</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.519458</span>  <span class="pl-k">-</span><span class="pl-c1">0.498377</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.37937</span>    <span class="pl-c1">1.66806</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.432902</span>  <span class="pl-k">-</span><span class="pl-c1">0.0178933</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">1.01216</span>    <span class="pl-c1">1.50814</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.226484</span>   <span class="pl-c1">1.12436</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.727203</span>   <span class="pl-c1">0.238701</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span></pre></div>
<p>To change the chosen marginals subset  of the multivariate Gaussian distributed data <code>x</code> by means of the Archimedean copula run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2arch</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, inds<span class="pl-k">::</span><span class="pl-c1">Vector{Pair{String,Vector{Int64}}}</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, notnested<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, rng <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG)</pre></div>
<p>Marginals to be changed are list in <code>inds[i][2]</code>, while the corresponding Archimedean copula is determined in <code>inds[i][1]</code>.
Many disjoint subsets of marginals with different Archimedean copulas can be transformed. All univariate marginal distributions are Gaussian hence unaffected by the transformation. The keyword <code>naive</code> indicates the use of the naive data resampling if <code>true</code>. The keyword <code>notnested</code> if <code>true</code> indicates the use of one parameter Archimedean copula instead of a nested one. Custom random number generator is supported.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2arch</span>(x, [<span class="pl-s"><span class="pl-pds">"</span>clayton<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.742443</span>   <span class="pl-c1">0.424851</span>  <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
  <span class="pl-c1">0.211894</span>   <span class="pl-c1">0.195774</span>  <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.989417</span>  <span class="pl-k">-</span><span class="pl-c1">0.299369</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">0.157683</span>   <span class="pl-c1">1.47768</span>    <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.154893</span>   <span class="pl-c1">0.893253</span>   <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.657297</span>  <span class="pl-k">-</span><span class="pl-c1">0.339814</span>  <span class="pl-k">-</span><span class="pl-c1">1.54419</span>


julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
<span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
<span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
<span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
<span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
<span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
<span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2arch</span>(x, [<span class="pl-s"><span class="pl-pds">"</span>gumbel<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
<span class="pl-c1">0.178913</span>   <span class="pl-c1">1.60797</span>    <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
<span class="pl-c1">0.579476</span>   <span class="pl-c1">0.880272</span>   <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
<span class="pl-k">-</span><span class="pl-c1">0.986662</span>  <span class="pl-k">-</span><span class="pl-c1">0.0180474</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
<span class="pl-c1">1.20299</span>    <span class="pl-c1">2.55397</span>     <span class="pl-c1">0.966819</span>
<span class="pl-c1">0.857086</span>   <span class="pl-c1">1.86212</span>     <span class="pl-c1">0.989712</span>
<span class="pl-k">-</span><span class="pl-c1">0.548206</span>  <span class="pl-k">-</span><span class="pl-c1">0.439289</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>
</pre></div>
<p>To change the chosen marginals subset list in <code>ind</code> of the multivariate Gaussian distributed data <code>x</code> by means of the Frechet maximal copula run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2frechet</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ind<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>all univariate marginal distributions are Gaussian as they are unaffected by the transformation. The keyword <code>naive</code> means naive resampling if true.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2frechet</span>(x, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.875777</span>   <span class="pl-k">-</span><span class="pl-c1">0.374723</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
  <span class="pl-c1">0.0960334</span>   <span class="pl-c1">0.905703</span>   <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.599792</span>   <span class="pl-k">-</span><span class="pl-c1">0.0110945</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>
  <span class="pl-c1">0.813717</span>    <span class="pl-c1">1.8513</span>      <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.599255</span>    <span class="pl-c1">1.56873</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.7223</span>     <span class="pl-k">-</span><span class="pl-c1">0.172507</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span></pre></div>
<p>To change the chosen marginals subset list in <code>ind</code> of themultivariate Gaussian distributed data <code>x</code> by means of the bivariate Marshall-Olkin copula run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2marshallolkin</span>(x<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, ind<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, λ<span class="pl-c1">1</span><span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1.</span>, λ<span class="pl-c1">2</span><span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1.5</span>; naive<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, rng <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG)</pre></div>
<p>all univariate marginal distributions are Gaussian and unaffected by the transformation. In the keyword <code>naive</code> is <code>true</code> uses the naive resampling.
The algorithm requires <code>length(ind) = 2</code> <code>λ₁ ≥ 0</code> and <code>λ₂ ≥ 0</code>. The parameter <code>λ₁₂</code> is computed from expected correlation between both changed marginals. Custom random number generator is supported.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.5</span> <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>);

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Array</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">MvNormal</span>(Σ), <span class="pl-c1">6</span>)<span class="pl-k">'</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.556027</span>  <span class="pl-k">-</span><span class="pl-c1">0.662861</span>   <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.299484</span>   <span class="pl-c1">1.38993</span>    <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.468606</span>  <span class="pl-k">-</span><span class="pl-c1">0.0990787</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">1.00331</span>    <span class="pl-c1">1.43902</span>     <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.518149</span>   <span class="pl-c1">1.55065</span>     <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.886205</span>   <span class="pl-c1">0.149748</span>   <span class="pl-k">-</span><span class="pl-c1">1.54419</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gcop2marshallolkin</span>(x, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.790756</span>   <span class="pl-c1">0.784371</span>  <span class="pl-k">-</span><span class="pl-c1">0.384124</span>
 <span class="pl-k">-</span><span class="pl-c1">0.28088</span>    <span class="pl-c1">0.338086</span>  <span class="pl-k">-</span><span class="pl-c1">0.571326</span>
 <span class="pl-k">-</span><span class="pl-c1">0.90688</span>   <span class="pl-k">-</span><span class="pl-c1">0.509684</span>  <span class="pl-k">-</span><span class="pl-c1">2.3464</span>  
  <span class="pl-c1">0.738628</span>   <span class="pl-c1">1.71026</span>    <span class="pl-c1">0.966819</span>
  <span class="pl-c1">0.353654</span>   <span class="pl-c1">1.19357</span>    <span class="pl-c1">0.989712</span>
 <span class="pl-k">-</span><span class="pl-c1">0.867606</span>  <span class="pl-k">-</span><span class="pl-c1">0.589929</span>  <span class="pl-k">-</span><span class="pl-c1">1.54419</span></pre></div>
<h2><a id="user-content-helpers" class="anchor" aria-hidden="true" href="#helpers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Helpers</h2>
<h3><a id="user-content-converting-marginals" class="anchor" aria-hidden="true" href="#converting-marginals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Converting marginals</h3>
<p>Takes matrix <code>X</code>: <code>size(X) = (t, n)</code> ie <code>t</code> realisations of <code>n</code>-dimensional random variable, with all uniform marginal univariate distributions <code>∀ᵢ X[:,i] ∼ Uniform(0,1)</code>, and convert those marginals to the common distribution <code>d</code> with parameters <code>p[i]</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertmarg!</span>(U<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, d<span class="pl-k">::</span><span class="pl-c1">UnionAll</span>, p<span class="pl-k">::</span><span class="pl-c1">Union{Vector{Vector{Int64}}, Vector{Vector{Float64}}}</span>; testunif<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p>If <code>testunif = true</code> each marginal is tested for uniformity.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> U <span class="pl-k">=</span> <span class="pl-c1">gausscopulagen</span>(<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertmarg!</span>(U, Normal, [[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>],[<span class="pl-c1">0</span>, <span class="pl-c1">10</span>]])

julia<span class="pl-k">&gt;</span> U
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.225457</span>      <span class="pl-c1">8.97627</span>
  <span class="pl-c1">0.548381</span>     <span class="pl-c1">14.3926</span>
  <span class="pl-c1">0.666147</span>    <span class="pl-k">-</span><span class="pl-c1">10.0689</span>                                                                                                                                                      
 <span class="pl-k">-</span><span class="pl-c1">0.746662</span>     <span class="pl-k">-</span><span class="pl-c1">9.03553</span>                                                                                                                                                     
 <span class="pl-k">-</span><span class="pl-c1">0.746857</span>     <span class="pl-c1">17.2101</span>                                                                                                                                                      
 <span class="pl-k">-</span><span class="pl-c1">0.608109</span>     <span class="pl-k">-</span><span class="pl-c1">3.45649</span>
 <span class="pl-k">-</span><span class="pl-c1">0.136555</span>      <span class="pl-c1">0.700419</span>
  <span class="pl-c1">0.215631</span>     <span class="pl-k">-</span><span class="pl-c1">7.34409</span>
 <span class="pl-k">-</span><span class="pl-c1">0.00352701</span>   <span class="pl-k">-</span><span class="pl-c1">0.434793</span>
 <span class="pl-k">-</span><span class="pl-c1">0.876853</span>      <span class="pl-c1">2.39009</span>
</pre></div>
<p>To convert <code>i</code> th marginal to univariate distribution <code>d</code> with parameters array
<code>p</code> run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quantile</span>.(<span class="pl-c1">d</span>(p<span class="pl-k">...</span>), U[:,i])</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">43</span>);

julia<span class="pl-k">&gt;</span> U <span class="pl-k">=</span> <span class="pl-c1">gausscopulagen</span>(<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quantile</span>.(<span class="pl-c1">Levy</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), U[:,<span class="pl-c1">2</span>])
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">18.327904335047272</span>
 <span class="pl-c1">112.72788160148863</span>  
   <span class="pl-c1">0.4992650891811052</span>
   <span class="pl-c1">0.5642861403809334</span>
 <span class="pl-c1">350.0676959136128</span>   
   <span class="pl-c1">1.2175971128674394</span>
   <span class="pl-c1">2.510078079677982</span>
   <span class="pl-c1">0.6980591543550244</span>
   <span class="pl-c1">2.0290242635860944</span>
   <span class="pl-c1">3.527994542141473</span></pre></div>
<p>To convert all marginals to the same <code>d</code> with the same parameters <code>p</code> run</p>
<pre><code>julia&gt; using Distributions

julia&gt; quantile.(d(p...), U)
</code></pre>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">quantile</span>.(<span class="pl-c1">Levy</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), U)
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3.42919</span>    <span class="pl-c1">18.3279</span>  
 <span class="pl-c1">7.14305</span>   <span class="pl-c1">112.728</span>   
 <span class="pl-c1">9.6359</span>      <span class="pl-c1">0.499265</span>
 <span class="pl-c1">0.687009</span>    <span class="pl-c1">0.564286</span>
 <span class="pl-c1">0.686835</span>  <span class="pl-c1">350.068</span>   
 <span class="pl-c1">0.827224</span>    <span class="pl-c1">1.2176</span>  
 <span class="pl-c1">1.71944</span>     <span class="pl-c1">2.51008</span>
 <span class="pl-c1">3.3597</span>      <span class="pl-c1">0.698059</span>
 <span class="pl-c1">2.18374</span>     <span class="pl-c1">2.02902</span>
 <span class="pl-c1">0.582946</span>    <span class="pl-c1">3.52799</span></pre></div>
<h2><a id="user-content-old-dispatching-will-be-removed-in-future" class="anchor" aria-hidden="true" href="#old-dispatching-will-be-removed-in-future"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Old dispatching, will be removed in future</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gausscopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, Σ<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">archcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Union{Float64, Int}</span>, copula<span class="pl-k">::</span><span class="pl-c1">String</span>; rev<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, cor<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">nestedarchcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>, ϕ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, θ<span class="pl-k">::</span><span class="pl-c1">Float64</span>, copula<span class="pl-k">::</span><span class="pl-c1">String</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chaincopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, θ<span class="pl-k">::</span><span class="pl-c1">Union{Vector{Float64}, Vector{Int}}</span>, copula<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>; rev<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>, cor<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">marshallolkincopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, λ<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">frechetcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">frechetcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, n<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span>, β<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">chainfrechetcopulagen</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, α<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, β<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span> <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(α))</pre></div>
<h1><a id="user-content-citing-this-work" class="anchor" aria-hidden="true" href="#citing-this-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing this work</h1>
<p>This project was partially financed by the National Science Centre, Poland – project number 2014/15/B/ST6/05204.</p>
<ul>
<li>
<p>while reffering to <code>gcop2arch()</code>, <code>gcop2frechet()</code>, and <code>gcop2marshallolkin()</code> - cite K. Domino, A. Glos: 'Introducing higher order correlations to marginals' subset of multivariate data by means of Archimedean copulas', [arXiv:1803.07813] (<a href="https://arxiv.org/abs/1803.07813" rel="nofollow">https://arxiv.org/abs/1803.07813</a>).</p>
</li>
<li>
<p>while reffering to <code>gcop2tstudent()</code> - cite K. Domino: 'Multivariate cumulants in outlier detection for financial data analysis', [arXiv:1804.00541] (<a href="https://arxiv.org/abs/1804.00541" rel="nofollow">https://arxiv.org/abs/1804.00541</a>).</p>
</li>
</ul>
</article></div>