<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-showcode-show-code-in-various-ways" class="anchor" aria-hidden="true" href="#showcode-show-code-in-various-ways"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ShowCode: Show code in various ways</h1>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>ShowCode.jl provides interfaces like <code>@code_llvm</code> and <code>@code_native</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="c = @sc_ircode f(args...)
c = @sc_llvm f(args...)
c = @sc_native f(args...)
c = @sc_intel f(args...)
"><pre>c <span class="pl-k">=</span> <span class="pl-c1">@sc_ircode</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)
c <span class="pl-k">=</span> <span class="pl-c1">@sc_llvm</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)
c <span class="pl-k">=</span> <span class="pl-c1">@sc_native</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)
c <span class="pl-k">=</span> <span class="pl-c1">@sc_intel</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)</pre></div>
<h2><a id="user-content-julia-ssa-ir" class="anchor" aria-hidden="true" href="#julia-ssa-ir"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia SSA IR</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="c = @sc_ircode f(args...)

c                  # view IR in the REPL
display(c)         # (ditto)

c.cfg              # control-flow graph (CFG) visualizer
c.cfg_only         # CFG without IR in node label
c.dom              # dominator tree visualizer
c.dom_only         # dominator tree without IR in node label
display(c.cfg)     # display CFG

c.llvm             # create LLVM IR explore
c.native           # create native code explore
c.att              # (ditto)
c.intel            # create native code explore in intel syntax
edit(c.native)
abspath(c.native)
"><pre>c <span class="pl-k">=</span> <span class="pl-c1">@sc_ircode</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)

c                  <span class="pl-c"><span class="pl-c">#</span> view IR in the REPL</span>
<span class="pl-c1">display</span>(c)         <span class="pl-c"><span class="pl-c">#</span> (ditto)</span>

c<span class="pl-k">.</span>cfg              <span class="pl-c"><span class="pl-c">#</span> control-flow graph (CFG) visualizer</span>
c<span class="pl-k">.</span>cfg_only         <span class="pl-c"><span class="pl-c">#</span> CFG without IR in node label</span>
c<span class="pl-k">.</span>dom              <span class="pl-c"><span class="pl-c">#</span> dominator tree visualizer</span>
c<span class="pl-k">.</span>dom_only         <span class="pl-c"><span class="pl-c">#</span> dominator tree without IR in node label</span>
<span class="pl-c1">display</span>(c<span class="pl-k">.</span>cfg)     <span class="pl-c"><span class="pl-c">#</span> display CFG</span>

c<span class="pl-k">.</span>llvm             <span class="pl-c"><span class="pl-c">#</span> create LLVM IR explore</span>
c<span class="pl-k">.</span>native           <span class="pl-c"><span class="pl-c">#</span> create native code explore</span>
c<span class="pl-k">.</span>att              <span class="pl-c"><span class="pl-c">#</span> (ditto)</span>
c<span class="pl-k">.</span>intel            <span class="pl-c"><span class="pl-c">#</span> create native code explore in intel syntax</span>
<span class="pl-c1">edit</span>(c<span class="pl-k">.</span>native)
<span class="pl-c1">abspath</span>(c<span class="pl-k">.</span>native)</pre></div>
<p>... and so on; type <code>c.</code> + TAB to see the full list.</p>
<h2><a id="user-content-llvm-ir" class="anchor" aria-hidden="true" href="#llvm-ir"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LLVM IR</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="c = @sc_llvm f(args...)

c                  # view IR in the REPL
display(c)         # (ditto)
edit(c)            # open the IR in editor
print(c)           # print the IR
abspath(c)         # file path to the text containing the IR

c.native           # create native code explore
c.att              # (ditto)
c.intel            # create native code explore in intel syntax
eidt(c.native)
abspath(c.native)

c.cfg              # control-flow graph (CFG) visualizer
display(c.cfg)     # display CFG
edit(c.cfg.png)    # open PNG file in your editor
edit(c.cfg.svg)    # same for SVG
abspath(c.cfg.png) # file path to the PNG image
c.cfg_only
c.dom
"><pre>c <span class="pl-k">=</span> <span class="pl-c1">@sc_llvm</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)

c                  <span class="pl-c"><span class="pl-c">#</span> view IR in the REPL</span>
<span class="pl-c1">display</span>(c)         <span class="pl-c"><span class="pl-c">#</span> (ditto)</span>
<span class="pl-c1">edit</span>(c)            <span class="pl-c"><span class="pl-c">#</span> open the IR in editor</span>
<span class="pl-c1">print</span>(c)           <span class="pl-c"><span class="pl-c">#</span> print the IR</span>
<span class="pl-c1">abspath</span>(c)         <span class="pl-c"><span class="pl-c">#</span> file path to the text containing the IR</span>

c<span class="pl-k">.</span>native           <span class="pl-c"><span class="pl-c">#</span> create native code explore</span>
c<span class="pl-k">.</span>att              <span class="pl-c"><span class="pl-c">#</span> (ditto)</span>
c<span class="pl-k">.</span>intel            <span class="pl-c"><span class="pl-c">#</span> create native code explore in intel syntax</span>
<span class="pl-c1">eidt</span>(c<span class="pl-k">.</span>native)
<span class="pl-c1">abspath</span>(c<span class="pl-k">.</span>native)

c<span class="pl-k">.</span>cfg              <span class="pl-c"><span class="pl-c">#</span> control-flow graph (CFG) visualizer</span>
<span class="pl-c1">display</span>(c<span class="pl-k">.</span>cfg)     <span class="pl-c"><span class="pl-c">#</span> display CFG</span>
<span class="pl-c1">edit</span>(c<span class="pl-k">.</span>cfg<span class="pl-k">.</span>png)    <span class="pl-c"><span class="pl-c">#</span> open PNG file in your editor</span>
<span class="pl-c1">edit</span>(c<span class="pl-k">.</span>cfg<span class="pl-k">.</span>svg)    <span class="pl-c"><span class="pl-c">#</span> same for SVG</span>
<span class="pl-c1">abspath</span>(c<span class="pl-k">.</span>cfg<span class="pl-k">.</span>png) <span class="pl-c"><span class="pl-c">#</span> file path to the PNG image</span>
c<span class="pl-k">.</span>cfg_only
c<span class="pl-k">.</span>dom</pre></div>
<p>... and so on.  Type <code>c.</code> + TAB to see all the list.  All <code>-dot-*</code>
options in
<a href="https://llvm.org/docs/Passes.html" rel="nofollow"><code>opt</code> command line interface</a> are
supported.</p>
<h2><a id="user-content-native-code" class="anchor" aria-hidden="true" href="#native-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Native Code</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="c = @sc_native f(args...)
c = @sc_intel f(args...)  # short hand for syntax=:intel

c                  # view code in the REPL
display(c)         # (ditto)
edit(c)            # open the code in editor
print(c)           # print the code
abspath(c)         # file path to the text containing the code
"><pre>c <span class="pl-k">=</span> <span class="pl-c1">@sc_native</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)
c <span class="pl-k">=</span> <span class="pl-c1">@sc_intel</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> short hand for syntax=:intel</span>

c                  <span class="pl-c"><span class="pl-c">#</span> view code in the REPL</span>
<span class="pl-c1">display</span>(c)         <span class="pl-c"><span class="pl-c">#</span> (ditto)</span>
<span class="pl-c1">edit</span>(c)            <span class="pl-c"><span class="pl-c">#</span> open the code in editor</span>
<span class="pl-c1">print</span>(c)           <span class="pl-c"><span class="pl-c">#</span> print the code</span>
<span class="pl-c1">abspath</span>(c)         <span class="pl-c"><span class="pl-c">#</span> file path to the text containing the code</span></pre></div>
<h2><a id="user-content-post-to-godboltorg-compiler-explore" class="anchor" aria-hidden="true" href="#post-to-godboltorg-compiler-explore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Post to <a href="https://godbolt.org/" rel="nofollow"><code>godbolt.org</code></a> (Compiler Explore)</h2>
<p><strong>WARNING</strong>: For code with non-trivial length, <code>post_godbolt(ce)</code> and <code>ce()</code>
<em>post</em> the code to godbolt.org and there is no way to delete the code as of
writing.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ce = (@sc_llvm ...).godbolt
ce = (@sc_native ...).godbolt

post_godbolt(ce)  # post the code to godbolt.org
string(ce)        # get godbolt URL
ce()              # open the URL in browser
"><pre>ce <span class="pl-k">=</span> (<span class="pl-c1">@sc_llvm</span> <span class="pl-k">...</span>)<span class="pl-k">.</span>godbolt
ce <span class="pl-k">=</span> (<span class="pl-c1">@sc_native</span> <span class="pl-k">...</span>)<span class="pl-k">.</span>godbolt

<span class="pl-c1">post_godbolt</span>(ce)  <span class="pl-c"><span class="pl-c">#</span> post the code to godbolt.org</span>
<span class="pl-c1">string</span>(ce)        <span class="pl-c"><span class="pl-c">#</span> get godbolt URL</span>
<span class="pl-c1">ce</span>()              <span class="pl-c"><span class="pl-c">#</span> open the URL in browser</span></pre></div>
<h2><a id="user-content-cthulhu-integration" class="anchor" aria-hidden="true" href="#cthulhu-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cthulhu integration</h2>
<p>During Cthulhu's descent session, you can press <kbd>b</kbd> to
"bookmark" the method you are browsing.  This is stored in the global
variable <code>Cthulhu.BOOKMARKS</code>.  This can be converted to code explores
by:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="c = sc_ircode(Cthulhu.BOOKMARKS[end])
c = sc_llvm(Cthulhu.BOOKMARKS[end])
c = sc_native(Cthulhu.BOOKMARKS[end])
"><pre>c <span class="pl-k">=</span> <span class="pl-c1">sc_ircode</span>(Cthulhu<span class="pl-k">.</span>BOOKMARKS[<span class="pl-c1">end</span>])
c <span class="pl-k">=</span> <span class="pl-c1">sc_llvm</span>(Cthulhu<span class="pl-k">.</span>BOOKMARKS[<span class="pl-c1">end</span>])
c <span class="pl-k">=</span> <span class="pl-c1">sc_native</span>(Cthulhu<span class="pl-k">.</span>BOOKMARKS[<span class="pl-c1">end</span>])</pre></div>
</article></div>