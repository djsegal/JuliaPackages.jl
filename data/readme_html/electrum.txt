<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-electrumjl" class="anchor" aria-hidden="true" href="#electrumjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Electrum.jl</h1>
<p dir="auto"><a href="https://brainandforce.github.io/Electrum.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation (stable)" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://brainandforce.github.io/Electrum.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation (dev)" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/brainandforce/Electrum.jl/actions"><img src="https://github.com/brainandforce/Electrum.jl/workflows/CI/badge.svg" alt="CI status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/brainandforce/Electrum.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/7625839a171b0819a1d709396775d5f071ea4c4f665235a3429c759fc91aedb3/68747470733a2f2f636f6465636f762e696f2f67682f627261696e616e64666f7263652f456c65637472756d2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/brainandforce/Electrum.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua.jl" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for working with crystal structures, associated data, and various file formats,
with the aim of making theory development for solid state chemistry and materials science easier
for everyone.</p>
<p dir="auto">This package is written in pure Julia with minimal dependencies, so instead of pulling operations
from established packages in other languages (such as scipy) they are implemented in this package.
We hope that Electrum.jl can serve as a reference for both useful operations on crystal structures
and well-maintained scientific software.</p>
<h2 dir="auto"><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to install</h2>
<p dir="auto">Electrum.jl is not in the Julia package registry yet, so you'll need to install it like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.8) pkg&gt; add https://github.com/brainandforce/Electrum.jl "><pre class="notranslate"><code>(@v1.8) pkg&gt; add https://github.com/brainandforce/Electrum.jl 
</code></pre></div>
<p dir="auto">You can access package mode by typing <code>]</code> at the REPL. Alternatively, you can work with the <code>Pkg</code>
module:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(url=&quot;https://github.com/brainandforce/Electrum.jl&quot;)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; Pkg.add(url="https://github.com/brainandforce/Electrum.jl")
</code></pre></div>
<p dir="auto">If you'd like to track a specific branch, you can specify this as well (here, <code>release</code> is used as
an example):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.8) pkg&gt; add https://github.com/brainandforce/Electrum.jl#release"><pre class="notranslate"><code>(@v1.8) pkg&gt; add https://github.com/brainandforce/Electrum.jl#release
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(url=&quot;https://github.com/brainandforce/Electrum.jl&quot;, rev=&quot;release&quot;)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; Pkg.add(url="https://github.com/brainandforce/Electrum.jl", rev="release")
</code></pre></div>
<p dir="auto">The current development state is kept in the <code>main</code> branch, and the most recent stable version is
the head of the <code>release</code> branch. Specific releases for a minor version may be found by suffixing
the minor version with <code>/release</code>: for instance, <code>0.1/release</code> contains the latest release version
in the 0.1 series (there are no current releases).</p>
<h2 dir="auto"><a id="user-content-current-features" class="anchor" aria-hidden="true" href="#current-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current features</h2>
<ul dir="auto">
<li>Reading of common file formats:
<ul dir="auto">
<li>abinit potential, density, and wavefunction outputs from versions 7.10.5 and 8.10.4</li>
<li>LAMMPS atomic position data</li>
<li>VASP POSCAR, WAVECAR, DOSCAR, and PROCAR</li>
<li>XCrysDen XSF</li>
<li>XYZ files</li>
<li>CPpackage2 outputs</li>
</ul>
</li>
<li>Writing of common file formats:
<ul dir="auto">
<li>LAMMPS atomic position data</li>
<li>XCrysDen XSF</li>
<li>XYZ files</li>
<li>VASP POSCAR</li>
</ul>
</li>
<li>Operations on datagrids:
<ul dir="auto">
<li>Addition, subtraction, multiplication</li>
<li>FFTs and inverse FFTs on real and reciprocal space data</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-planned-features" class="anchor" aria-hidden="true" href="#planned-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Planned features</h2>
<p dir="auto">This project is just starting to get off the ground, but here's what we have planned:</p>
<ul dir="auto">
<li>Reading and writing of common file formats:
<ul dir="auto">
<li>XTL files</li>
<li>CIF files</li>
<li>abinit input and output files</li>
</ul>
</li>
<li>Manipulation of data grids associated with crystal structures
<ul dir="auto">
<li>Real space grid reinterpolation</li>
</ul>
</li>
<li>Other operations
<ul dir="auto">
<li>Converting k-point meshes to symmetry-reduced lists of weighted k-points</li>
</ul>
</li>
</ul>
<p dir="auto">...and more that we will decide in time! If you'd like to contibute, be sure to read the included
<a href="CONTRIBUTING.md">contributing guidelines.</a></p>
</article></div>