<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-actorsjl" class="anchor" aria-hidden="true" href="#actorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Actors.jl</h1>
<p>Concurrent computing in Julia with actors.</p>
<p><a href="https://juliaactors.github.io/Actors.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaActors.github.io/Actors.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaActors/Actors.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaActors/Actors.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaActors/Actors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/952689b12e836a0934f93683f13c2170b88556ce0a40b632fe2b1a816599907e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614163746f72732f4163746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaActors/Actors.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>Actors</code> implements the <a href="https://en.wikipedia.org/wiki/Actor_model" rel="nofollow">Actor Model</a> of computation:</p>
<blockquote>
<p>An actor ... in response to a message it receives, can concurrently:</p>
<ul>
<li>send a finite number of messages to other actors;</li>
<li>create a finite number of new actors;</li>
<li>designate the behavior to be used for the next message it receives.</li>
</ul>
</blockquote>
<p><code>Actors</code> make(s) concurrency easy to understand and reason about and integrate(s) well with Julia's multi-threading and distributed computing. It provides an API for writing <a href="https://www.reactivemanifesto.org" rel="nofollow">reactive</a> applications, that are:</p>
<ul>
<li><em>responsive</em>: react to inputs and events,</li>
<li><em>message-driven</em>: rely on asynchronous message-passing,</li>
<li><em>resilient</em>: can cope with failures,</li>
<li><em>elastic</em>: can distribute load over multiple threads and  workers.</li>
</ul>
<h2><a id="user-content-greeting-actors" class="anchor" aria-hidden="true" href="#greeting-actors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Greeting Actors</h2>
<p>The following example defines two behavior functions: <code>greet</code> and <code>hello</code> and spawns two actors with them. <code>sayhello</code> will forward a message to <code>greeter</code>, get a greeting string back and deliver it as a result:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Actors

julia&gt; import Actors: spawn

julia&gt; greet(greeting, msg) = greeting*&quot;, &quot;*msg*&quot;!&quot; # a greetings server
greet (generic function with 1 method)

julia&gt; hello(greeter, to) = request(greeter, to)    # a greetings client
hello (generic function with 1 method)

julia&gt; greeter = spawn(greet, &quot;Hello&quot;)              # start the server with a greet string
Link{Channel{Any}}(Channel{Any}(sz_max:32,sz_curr:0), 1, :default)

julia&gt; sayhello = spawn(hello, greeter)             # start the client with a link to the server
Link{Channel{Any}}(Channel{Any}(sz_max:32,sz_curr:0), 1, :default)

julia&gt; request(sayhello, &quot;World&quot;)                   # request the client
&quot;Hello, World!&quot;

julia&gt; request(sayhello, &quot;Kermit&quot;)
&quot;Hello, Kermit!&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Actors

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Actors<span class="pl-k">:</span> spawn

julia<span class="pl-k">&gt;</span> <span class="pl-en">greet</span>(greeting, msg) <span class="pl-k">=</span> greeting<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span><span class="pl-k">*</span>msg<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>!<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> a greetings server</span>
greet (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">hello</span>(greeter, to) <span class="pl-k">=</span> <span class="pl-c1">request</span>(greeter, to)    <span class="pl-c"><span class="pl-c">#</span> a greetings client</span>
hello (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> greeter <span class="pl-k">=</span> <span class="pl-c1">spawn</span>(greet, <span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)              <span class="pl-c"><span class="pl-c">#</span> start the server with a greet string</span>
<span class="pl-c1">Link</span><span class="pl-c1">{Channel{Any}}</span>(<span class="pl-c1">Channel</span><span class="pl-c1">{Any}</span>(sz_max<span class="pl-k">:</span><span class="pl-c1">32</span>,sz_curr<span class="pl-k">:</span><span class="pl-c1">0</span>), <span class="pl-c1">1</span>, <span class="pl-c1">:default</span>)

julia<span class="pl-k">&gt;</span> sayhello <span class="pl-k">=</span> <span class="pl-c1">spawn</span>(hello, greeter)             <span class="pl-c"><span class="pl-c">#</span> start the client with a link to the server</span>
<span class="pl-c1">Link</span><span class="pl-c1">{Channel{Any}}</span>(<span class="pl-c1">Channel</span><span class="pl-c1">{Any}</span>(sz_max<span class="pl-k">:</span><span class="pl-c1">32</span>,sz_curr<span class="pl-k">:</span><span class="pl-c1">0</span>), <span class="pl-c1">1</span>, <span class="pl-c1">:default</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">request</span>(sayhello, <span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>)                   <span class="pl-c"><span class="pl-c">#</span> request the client</span>
<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">request</span>(sayhello, <span class="pl-s"><span class="pl-pds">"</span>Kermit<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>Hello, Kermit!<span class="pl-pds">"</span></span></pre></div>
<p>Please look into <a href="https://JuliaActors.github.io/Actors.jl/dev" rel="nofollow">the manual</a> for more information and more serious examples.</p>
<h2><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Development</h2>
<p><code>Actors</code> is part of the Julia GitHub group <a href="https://github.com/JuliaActors">JuliaActors</a>. Please join!</p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<ul>
<li>Oliver Schulz (until v0.1, Oct 2017)</li>
<li>Paul Bayer (rewrite since v0.1.1, Nov 2020)</li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>MIT</p>
</article></div>