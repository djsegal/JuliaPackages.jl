<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-isdefjl" class="anchor" aria-hidden="true" href="#isdefjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IsDef.jl</h1>
<p dir="auto"><a href="https://jolin-io.github.io/IsDef.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jolin-io.github.io/IsDef.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jolin-io/IsDef.jl/actions"><img src="https://github.com/jolin-io/IsDef.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jolin-io/IsDef.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/44c6a308e3ef18b374c5a58ef79139e77f0c0bebabcc13d26d661adaf5dfa191/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6c696e2d696f2f49734465662e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jolin-io/IsDef.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides primitives for dispatching on whether certain methods are implemented or not.</p>
<p dir="auto">For installation or usage, open julia repl and run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IsDef"><pre><span class="pl-k">using</span> IsDef</pre></div>
<p dir="auto">which gives you access to following functions</p>
<ul dir="auto">
<li>
<p dir="auto"><code>isdef(f, arg1, arg2)::Bool</code> / <code>isdef(f, Arg1Type, Arg2Type)::Bool</code> checks whether a function is defined for the given types.</p>
<p dir="auto">If at least one of the arguments is not a type,
all arguments are automatically converted to types for you.</p>
</li>
<li>
<p dir="auto"><code>Out(f, arg1, arg2)::ReturnType</code> / <code>Out(f, Arg1Type, Arg2Type)::ReturnType</code> returns the returntype of the given functioncall.</p>
<p dir="auto">Note, that <code>Out</code> may return an abstract type that is wider than necessary, like e.g. <code>Any</code>.
If a functioncall is not defined, or predictably throws an error, <code>IsDef.NotApplicable</code> is returned.
<code>Out</code> is internally used by <code>isdef</code>.</p>
</li>
</ul>
<p dir="auto">Internally of <code>Out(f, Arg1Type, Arg2Type)</code> a one-argument-version of <code>Out</code> is used which expects a single Tuple type, specifying the entire call signature. This is the heart of the <code>IsDef</code> package. For the example it would be</p>
<ul dir="auto">
<li><code>Out(Tuple{typeof(f), Arg1Type, Arg2Type})</code></li>
</ul>
<p dir="auto">If you want to specify inference of your method (output of <code>Out</code>), or whether it is defined (output of <code>isdef</code>), you need to overload this very one-argument method of <code>Out</code>. For the example it could be</p>
<ul dir="auto">
<li><code>Out(::Type{&lt;:Tuple{typeof(f), Arg1Type, Arg2Type, Vararg}}) = ReturnType</code></li>
</ul>
<p dir="auto">Enjoy maintainable type inference.</p>
</article></div>