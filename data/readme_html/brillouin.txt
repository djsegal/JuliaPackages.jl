<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-brillouin" class="anchor" aria-hidden="true" href="#brillouin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Brillouin</h1>
<p dir="auto"><a href="https://thchr.github.io/Brillouin.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://thchr.github.io/Brillouin.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/thchr/Brillouin.jl/actions"><img src="https://github.com/thchr/Brillouin.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thchr/Brillouin.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/13fb52f9692b388f9b5336adf6cbd1a5f90414daa08969d6c51c0e207b886775/68747470733a2f2f636f6465636f762e696f2f67682f74686368722f4272696c6c6f75696e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/thchr/Brillouin.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Brillouin.jl is a Julia package that provides tools to generate and visualize <strong>k</strong>-space paths and Brillouin zones for eigenvalue problems in crystals.
The <strong>k</strong>-path functionalities are inspired by the Python <a href="https://github.com/giovannipizzi/seekpath">SeeK-path package</a> (and return equivalent paths in 3D).</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-wigner-seitz-cells--brillouin-zones" class="anchor" aria-hidden="true" href="#wigner-seitz-cells--brillouin-zones"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Wigner-Seitz cells &amp; Brillouin zones</h3>
<p dir="auto">To generate the Brillouin zone of a crystal in space group 147 (Hermann-Mauguin symbol, P-3; Bravais type, hP), we first define its reciprocal basis <code>Gs</code> (e.g., using <a href="https://github.com/thchr/Crystalline.jl">Bravais.jl</a>) and then call Brillouin's <code>wignerseitz</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Brillouin, 
julia&gt; using Bravais: reciprocalbasis
julia&gt; Rs = ([1.0, 0.0, 0.0], [-0.5, sqrt(3)/2, 0.0],   [0, 0, 1.25]) # direct basis for space group 147
julia&gt; Gs = reciprocalbasis(Rs) # using Bravais to create the reciprocal basis
julia&gt; cell = wignerseitz(Gs)   # construct associated Brillouin zone
Cell{3} (8 faces, 12 vertices):
  verts: [0.666667, -0.333333, -0.5]
         [0.333333, -0.666667, -0.5]
         [0.666667, -0.333333, 0.5]
         [0.333333, 0.333333, 0.5]
         [0.333333, 0.333333, -0.5]
         [0.333333, -0.666667, 0.5]
         [-0.333333, 0.666667, -0.5]
         [-0.666667, 0.333333, -0.5]
         [-0.333333, -0.333333, -0.5]
         [-0.333333, -0.333333, 0.5]
         [-0.666667, 0.333333, 0.5]
         [-0.333333, 0.666667, 0.5]
  faces: [5, 4, 3, 1]
         [8, 9, 10, 11]
         [2, 1, 3, 6]
         [2, 6, 10, 9]
         [7, 5, 1, 2, 9, 8]
         [4, 12, 11, 10, 6, 3]
         [4, 5, 7, 12]
         [11, 12, 7, 8]
  basis: [6.283185, 3.627599, -0.0]
         [0.0, 7.255197, 0.0]
         [0.0, -0.0, 5.026548]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Brillouin, 
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Bravais<span class="pl-k">:</span> reciprocalbasis
julia<span class="pl-k">&gt;</span> Rs <span class="pl-k">=</span> ([<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-k">-</span><span class="pl-c1">0.5</span>, <span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span>],   [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1.25</span>]) <span class="pl-c"><span class="pl-c">#</span> direct basis for space group 147</span>
julia<span class="pl-k">&gt;</span> Gs <span class="pl-k">=</span> <span class="pl-c1">reciprocalbasis</span>(Rs) <span class="pl-c"><span class="pl-c">#</span> using Bravais to create the reciprocal basis</span>
julia<span class="pl-k">&gt;</span> cell <span class="pl-k">=</span> <span class="pl-c1">wignerseitz</span>(Gs)   <span class="pl-c"><span class="pl-c">#</span> construct associated Brillouin zone</span>
Cell{<span class="pl-c1">3</span>} (<span class="pl-c1">8</span> faces, <span class="pl-c1">12</span> vertices)<span class="pl-k">:</span>
  verts<span class="pl-k">:</span> [<span class="pl-c1">0.666667</span>, <span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
         [<span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.666667</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
         [<span class="pl-c1">0.666667</span>, <span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-c1">0.5</span>]
         [<span class="pl-c1">0.333333</span>, <span class="pl-c1">0.333333</span>, <span class="pl-c1">0.5</span>]
         [<span class="pl-c1">0.333333</span>, <span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
         [<span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.666667</span>, <span class="pl-c1">0.5</span>]
         [<span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-c1">0.666667</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
         [<span class="pl-k">-</span><span class="pl-c1">0.666667</span>, <span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
         [<span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
         [<span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-c1">0.5</span>]
         [<span class="pl-k">-</span><span class="pl-c1">0.666667</span>, <span class="pl-c1">0.333333</span>, <span class="pl-c1">0.5</span>]
         [<span class="pl-k">-</span><span class="pl-c1">0.333333</span>, <span class="pl-c1">0.666667</span>, <span class="pl-c1">0.5</span>]
  faces<span class="pl-k">:</span> [<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>]
         [<span class="pl-c1">8</span>, <span class="pl-c1">9</span>, <span class="pl-c1">10</span>, <span class="pl-c1">11</span>]
         [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>]
         [<span class="pl-c1">2</span>, <span class="pl-c1">6</span>, <span class="pl-c1">10</span>, <span class="pl-c1">9</span>]
         [<span class="pl-c1">7</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">8</span>]
         [<span class="pl-c1">4</span>, <span class="pl-c1">12</span>, <span class="pl-c1">11</span>, <span class="pl-c1">10</span>, <span class="pl-c1">6</span>, <span class="pl-c1">3</span>]
         [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">7</span>, <span class="pl-c1">12</span>]
         [<span class="pl-c1">11</span>, <span class="pl-c1">12</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>]
  basis<span class="pl-k">:</span> [<span class="pl-c1">6.283185</span>, <span class="pl-c1">3.627599</span>, <span class="pl-k">-</span><span class="pl-c1">0.0</span>]
         [<span class="pl-c1">0.0</span>, <span class="pl-c1">7.255197</span>, <span class="pl-c1">0.0</span>]
         [<span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">0.0</span>, <span class="pl-c1">5.026548</span>]</pre></div>
<p dir="auto">The returned vertices are in the coordinates of the reciprocal basis (to convert, see <code>cartesianize(!)</code>); this is the default behavior in Brillouin. The basis is accessible with <code>basis(cell)</code>.</p>
<p dir="auto">The Brillouin zone can be plotted using e.g. <a href="https://github.com/JuliaPlots/PlotlyJS.jl">PlotlyJS.jl</a> (or 3D-capable backends of <a href="https://github.com/JuliaPlots/Makie.jl">Makie.jl</a> such as <a href="https://github.com/JuliaPlots/GLMakie.jl">GLMakie.jl</a>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PlotlyJS
julia&gt; plot(cell)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PlotlyJS
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(cell)</pre></div>
<p dir="auto">Examples of interactive visualizations are <a href="https://thchr.github.io/Brillouin.jl/stable/wignerseitz/" rel="nofollow">included in the documentation</a>.</p>
<h3 dir="auto"><a id="user-content-minimal-k-paths-in-the-irreducible-brillouin-zone" class="anchor" aria-hidden="true" href="#minimal-k-paths-in-the-irreducible-brillouin-zone"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimal <strong>k</strong>-paths in the irreducible Brillouin zone</h3>
<p dir="auto">Given a symmetry setting and a lattice, specified by a space group number <code>sgnum</code> and a conventional direct basis <code>Rs</code> (respecting the conventions of the International Tables of Crystallography, Volume A), <code>irrfbz_path</code> will return a "minimal" <strong>k</strong>-path in the irreducible Brillouin zone. E.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sgnum = 147
julia&gt; kp = irrfbz_path(sgnum, Rs)
KPath{3} (7 points, 3 paths, 13 points in paths):
 points: :M =&gt; [0.5, 0.0, 0.0]
         :A =&gt; [0.0, 0.0, 0.5]
         :H =&gt; [0.333333, 0.333333, 0.5]
         :K =&gt; [0.333333, 0.333333, 0.0]
         :Γ =&gt; [0.0, 0.0, 0.0]
         :L =&gt; [0.5, 0.0, 0.5]
         :H₂ =&gt; [0.333333, 0.333333, -0.5]
  paths: [:Γ, :M, :K, :Γ, :A, :L, :H, :A]
         [:L, :M]
         [:H, :K, :H₂]
  basis: [6.283185, 3.627599, -0.0]
         [0.0, 7.255197, 0.0]
         [0.0, -0.0, 5.026548]"><pre>julia<span class="pl-k">&gt;</span> sgnum <span class="pl-k">=</span> <span class="pl-c1">147</span>
julia<span class="pl-k">&gt;</span> kp <span class="pl-k">=</span> <span class="pl-c1">irrfbz_path</span>(sgnum, Rs)
KPath{<span class="pl-c1">3</span>} (<span class="pl-c1">7</span> points, <span class="pl-c1">3</span> paths, <span class="pl-c1">13</span> points <span class="pl-k">in</span> paths)<span class="pl-k">:</span>
 points<span class="pl-k">:</span> <span class="pl-c1">:M</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
         <span class="pl-c1">:A</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>]
         <span class="pl-c1">:H</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.333333</span>, <span class="pl-c1">0.333333</span>, <span class="pl-c1">0.5</span>]
         <span class="pl-c1">:K</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.333333</span>, <span class="pl-c1">0.333333</span>, <span class="pl-c1">0.0</span>]
         <span class="pl-c1">:Γ</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
         <span class="pl-c1">:L</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>]
         <span class="pl-c1">:H₂</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.333333</span>, <span class="pl-c1">0.333333</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>]
  paths<span class="pl-k">:</span> [<span class="pl-c1">:Γ</span>, <span class="pl-c1">:M</span>, <span class="pl-c1">:K</span>, <span class="pl-c1">:Γ</span>, <span class="pl-c1">:A</span>, <span class="pl-c1">:L</span>, <span class="pl-c1">:H</span>, <span class="pl-c1">:A</span>]
         [<span class="pl-c1">:L</span>, <span class="pl-c1">:M</span>]
         [<span class="pl-c1">:H</span>, <span class="pl-c1">:K</span>, <span class="pl-c1">:H₂</span>]
  basis<span class="pl-k">:</span> [<span class="pl-c1">6.283185</span>, <span class="pl-c1">3.627599</span>, <span class="pl-k">-</span><span class="pl-c1">0.0</span>]
         [<span class="pl-c1">0.0</span>, <span class="pl-c1">7.255197</span>, <span class="pl-c1">0.0</span>]
         [<span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">0.0</span>, <span class="pl-c1">5.026548</span>]</pre></div>
<p dir="auto">Returned <strong>k</strong>-vector coordinates are referred to the basis of the primitive reciprocal cell (in the CDML setting). The associated transformation matrix between conventional and primitive bases can be obtained via <a href="https://thchr.github.io/Crystalline.jl/stable/bravais/#Bravais.primitivebasismatrix" rel="nofollow">Bravais.jl's <code>primitivebasismatrix</code></a>.</p>
<p dir="auto">The resulting object <code>kp</code> can be interpolated, using either <code>interpolate(kp, N)</code> or <code>splice(kp, N)</code> which return a <code>KPathInterpolant</code> iterable whose values interpolate the connected paths (and enable convenient plotting of <a href="https://thchr.github.io/Brillouin.jl/stable/kpaths/#Band-structure" rel="nofollow">band structure diagrams</a>).
See also visualization <a href="https://thchr.github.io/Brillouin.jl/stable/kpaths/" rel="nofollow">examples in documentation</a>.</p>
</article></div>