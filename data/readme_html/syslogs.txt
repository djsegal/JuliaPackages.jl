<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-syslogs" class="anchor" aria-hidden="true" href="#syslogs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Syslogs</h1>
<p><a href="https://invenia.github.io/Syslogs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://invenia.github.io/Syslogs.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/invenia/Syslogs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/13caa5dace9cb1c6ef33b0cd2ac9397d8136d9b0/68747470733a2f2f7472617669732d63692e6f72672f696e76656e69612f5379736c6f67732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/invenia/Syslogs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/Syslogs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f2e4dd0ab815118e772459d6a3d0120ed0d3090/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f5379736c6f67732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/invenia/Syslogs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/invenia/Syslogs.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Syslogs.jl defines and exports a <code>Syslog</code> type which is a subtype of <code>IO</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Create our Syslog IO type which logs to the local syslog daemon via the libc interface.</span>
io <span class="pl-k">=</span> <span class="pl-c1">Syslog</span>()

<span class="pl-c"><span class="pl-c">#</span> Print a log message to syslog of the form "&lt;pri&gt;&lt;msg&gt;\0".</span>
<span class="pl-c1">println</span>(io, <span class="pl-c1">:info</span>, <span class="pl-s"><span class="pl-pds">"</span>Hello World!<span class="pl-pds">"</span></span>)</pre></div>
<p>To log to a remote server you can pass the remote ip address and port to the <code>Syslog</code> constructor.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Create our Syslog IO type which logs to a remote syslog service with the specified `ipaddr` and `port` via TCP.</span>
io <span class="pl-k">=</span> <span class="pl-c1">Syslog</span>(ipaddr, port; tcp<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> `log` is just and alias for `println` in this case.</span>
<span class="pl-c1">log</span>(io, <span class="pl-c1">:info</span>, <span class="pl-s"><span class="pl-pds">"</span>Hello World!<span class="pl-pds">"</span></span>)</pre></div>
<p>Several <code>IO</code> methods exist for the <code>Syslog</code> type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">println</span>(io<span class="pl-k">::</span><span class="pl-c1">Syslogs.Syslog</span>, level<span class="pl-k">::</span><span class="pl-c1">Symbol</span>, msg<span class="pl-k">::</span><span class="pl-c1">String</span>)
<span class="pl-c1">println</span>(io<span class="pl-k">::</span><span class="pl-c1">Syslogs.Syslog</span>, level<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, msg<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>)
<span class="pl-c1">log</span>(io<span class="pl-k">::</span><span class="pl-c1">Syslogs.Syslog</span>, args<span class="pl-k">...</span>)
<span class="pl-c1">close</span>(io<span class="pl-k">::</span><span class="pl-c1">Syslogs.Syslog</span>)
<span class="pl-c1">flush</span>(io<span class="pl-k">::</span><span class="pl-c1">Syslogs.Syslog</span>)</pre></div>
<p>Syslogs.jl also provides several methods to the <a href="https://www.gnu.org/software/libc/manual/html_node/Submitting-Syslog-Messages.html#Submitting-Syslog-Messages" rel="nofollow">libc interface</a>:</p>
<div class="highlight highlight-source-julia"><pre>Syslogs<span class="pl-k">.</span><span class="pl-c1">openlog</span>(ident<span class="pl-k">::</span><span class="pl-c1">String</span>, logopt<span class="pl-k">::</span><span class="pl-c1">Integer</span>, facility<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
Syslogs<span class="pl-k">.</span><span class="pl-c1">syslog</span>(priority<span class="pl-k">::</span><span class="pl-c1">Integer</span>, msg<span class="pl-k">::</span><span class="pl-c1">String</span>)
Syslogs<span class="pl-k">.</span><span class="pl-c1">closelog</span>()
Syslogs<span class="pl-k">.</span><span class="pl-c1">makepri</span>(facility<span class="pl-k">::</span><span class="pl-c1">Integer</span>, priority<span class="pl-k">::</span><span class="pl-c1">Integer</span>)   <span class="pl-c"><span class="pl-c">#</span> maps to the LOG_MAKEPRI macro</span></pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h2>
<ul>
<li>TLS support with MbedTLS.jl</li>
</ul>
</article></div>