<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-orthogonalpolynomialsquasijl" class="anchor" aria-hidden="true" href="#orthogonalpolynomialsquasijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OrthogonalPolynomialsQuasi.jl</h1>
<p>A package for representing orthogonal polynomials as quasi arrays</p>
<p><a href="https://travis-ci.org/JuliaApproximation/OrthogonalPolynomialsQuasi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a0c4b304ac99f51575a5386fff5a0ac08d049b9/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417070726f78696d6174696f6e2f4f7274686f676f6e616c506f6c796e6f6d69616c7351756173692e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaApproximation/OrthogonalPolynomialsQuasi.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/OrthogonalPolynomialsQuasi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3d9e7e3e71461504d3176c34bf9292fb2f27be3d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f4f7274686f676f6e616c506f6c796e6f6d69616c7351756173692e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/OrthogonalPolynomialsQuasi.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements classical orthogonal polynomials as quasi-arrays where one one axes is continuous and the other axis is discrete (countably infinite), as implemented in <a href="https://github.com/JuliaApproximation/QuasiArrays.jl">QuasiArrays.jl</a> and  <a href="https://github.com/JuliaApproximation/ContinuumArrays.jl">ContinuumArrays.jl</a>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OrthogonalPolynomialsQuasi, ContinuumArrays

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Legendre</span>(); <span class="pl-c"><span class="pl-c">#</span> Legendre polynomials</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(P) <span class="pl-c"><span class="pl-c">#</span> uncountable ∞ x countable ∞</span>
(ℵ₁, ∞)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(P) <span class="pl-c"><span class="pl-c">#</span> essentially (-1..1, 1:∞), Inclusion plays the same role as Slice</span>
(<span class="pl-c1">Inclusion</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span> (Chebyshev)), <span class="pl-c1">OneToInf</span>())

julia<span class="pl-k">&gt;</span> P[<span class="pl-c1">0.1</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>] <span class="pl-c"><span class="pl-c">#</span> [P_0(0.1), …, P_9(0.1)]</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>                
  <span class="pl-c1">0.1</span>                
 <span class="pl-k">-</span><span class="pl-c1">0.485</span>              
 <span class="pl-k">-</span><span class="pl-c1">0.14750000000000002</span>
  <span class="pl-c1">0.3379375</span>          
  <span class="pl-c1">0.17882875</span>         
 <span class="pl-k">-</span><span class="pl-c1">0.2488293125</span>       
 <span class="pl-k">-</span><span class="pl-c1">0.19949294375000004</span>
  <span class="pl-c1">0.180320721484375</span>  
  <span class="pl-c1">0.21138764183593753</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> P[<span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>; length<span class="pl-k">=</span><span class="pl-c1">10_000</span>), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10_000</span>]; <span class="pl-c"><span class="pl-c">#</span> construct 10_000^2 Vandermonde matrix</span>
  <span class="pl-c1">1.624796</span> seconds (<span class="pl-c1">10.02</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">1.491</span> GiB, <span class="pl-c1">6.81</span><span class="pl-k">%</span> gc time)</pre></div>
<p>This also works for associated Legendre polynomials as weighted Ultraspherical polynomials:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">associatedlegendre</span>(m) <span class="pl-k">=</span> ((<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">^</span>m<span class="pl-k">*</span><span class="pl-c1">prod</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>(<span class="pl-c1">2</span>m<span class="pl-k">-</span><span class="pl-c1">1</span>)))<span class="pl-k">*</span>(<span class="pl-c1">UltrasphericalWeight</span>((m<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">.*</span><span class="pl-c1">Ultraspherical</span>(m<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>))
associatedlegendre (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">associatedlegendre</span>(<span class="pl-c1">2</span>)[<span class="pl-c1">0.1</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
   <span class="pl-c1">2.9699999999999998</span>
   <span class="pl-c1">1.4849999999999999</span>
  <span class="pl-k">-</span><span class="pl-c1">6.9052500000000006</span>
  <span class="pl-k">-</span><span class="pl-c1">5.041575</span>          
  <span class="pl-c1">10.697754375</span>       
  <span class="pl-c1">10.8479361375</span>      
 <span class="pl-k">-</span><span class="pl-c1">13.334647528125</span>    
 <span class="pl-k">-</span><span class="pl-c1">18.735466024687497</span> 
  <span class="pl-c1">13.885467170308594</span> 
  <span class="pl-c1">28.220563705988674</span> </pre></div>
<h2><a id="user-content-p-finite-element-method" class="anchor" aria-hidden="true" href="#p-finite-element-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>p-Finite Element Method</h2>
<p>The language of quasi-arrays gives a natural framework for constructing p-finite element methods. The convention
is that adjoint-products are understood as inner products over the axes with uniform weight. Thus to solve Poisson's equation
using its weak formulation with Dirichlet conditions we can expand in a weighted Jacobi basis:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> P¹¹ <span class="pl-k">=</span> <span class="pl-c1">Jacobi</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>); <span class="pl-c"><span class="pl-c">#</span> Quasi-matrix of Jacobi polynomials</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">JacobiWeight</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>); <span class="pl-c"><span class="pl-c">#</span> quasi-vector correspoinding to (1-x^2)</span>

julia<span class="pl-k">&gt;</span> w[<span class="pl-c1">0.1</span>] <span class="pl-k">≈</span> (<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">0.1</span><span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> w <span class="pl-k">.*</span> P¹¹; <span class="pl-c"><span class="pl-c">#</span> Quasi-matrix of weighted Jacobi polynomials</span>

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>(<span class="pl-c1">axes</span>(S,<span class="pl-c1">1</span>)); <span class="pl-c"><span class="pl-c">#</span> quasi-matrix corresponding to derivative</span>

julia<span class="pl-k">&gt;</span> Δ <span class="pl-k">=</span> (D<span class="pl-k">*</span>S)<span class="pl-k">'</span><span class="pl-k">*</span>(D<span class="pl-k">*</span>S) <span class="pl-c"><span class="pl-c">#</span> weak laplacian corresponding to inner products of weighted Jacobi polynomials</span>
∞<span class="pl-k">×</span>∞ LazyArrays<span class="pl-k">.</span>ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(<span class="pl-k">*</span>),Tuple{Adjoint{Int64,BandedMatrices<span class="pl-k">.</span>BandedMatrix{Int64,Adjoint{Int64,InfiniteArrays<span class="pl-k">.</span>InfStepRange{Int64,Int64}},InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}}},LazyArrays<span class="pl-k">.</span>BroadcastArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(<span class="pl-k">*</span>),Tuple{LazyArrays<span class="pl-k">.</span>BroadcastArray{Float64,<span class="pl-c1">1</span>,<span class="pl-c1">typeof</span>(<span class="pl-k">/</span>),Tuple{Int64,InfiniteArrays<span class="pl-k">.</span>InfStepRange{Int64,Int64}}},BandedMatrices<span class="pl-k">.</span>BandedMatrix{Int64,Adjoint{Int64,InfiniteArrays<span class="pl-k">.</span>InfStepRange{Int64,Int64}},InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}}}}}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">×</span><span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-c1">2.66667</span>   <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      …  
  <span class="pl-k">⋅</span>       <span class="pl-c1">6.4</span>    <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>   <span class="pl-c1">10.2857</span>    <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>      <span class="pl-c1">14.2222</span>    <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      <span class="pl-c1">18.1818</span>    <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      <span class="pl-c1">22.1538</span>    <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      …  
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      <span class="pl-c1">26.1333</span>    <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      <span class="pl-c1">30.1176</span>     
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      …  
  <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
 ⋮                                         ⋮                         ⋱  </pre></div>
</article></div>