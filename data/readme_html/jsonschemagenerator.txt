<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jsonschemagenerator" class="anchor" aria-hidden="true" href="#jsonschemagenerator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JSONSchemaGenerator</h1>
<p dir="auto">Create minimal JSON schemas from custom Julia types.</p>
<p dir="auto">Current restrictions:</p>
<ul dir="auto">
<li>no parametric types</li>
<li>no Union types, except <code>Union{Nothing, T}</code> for optional fields</li>
<li>no abstract types in fields, only concrete types</li>
<li>must define <code>StructTypes.StructType</code> for your custom types if you want to <code>use_references=true</code></li>
<li>must define <code>StructTypes.omitempties</code> for optional fields</li>
</ul>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JSONSchemaGenerator, StructTypes

struct OptionalFieldSchema
    int::Int
    optional::Union{Nothing, String}
end
StructTypes.StructType(::Type{OptionalFieldSchema}) = StructTypes.Struct()
StructTypes.omitempties(::Type{OptionalFieldSchema}) = (:optional,)

struct NestedFieldSchema
    int::Int
    field::OptionalFieldSchema
    vector::Vector{OptionalFieldSchema}
end
StructTypes.StructType(::Type{NestedFieldSchema}) = StructTypes.Struct()

schema_dict = JSONSchemaGenerator.schema(NestedFieldSchema)"><pre><span class="pl-k">using</span> JSONSchemaGenerator, StructTypes

<span class="pl-k">struct</span> OptionalFieldSchema
    int<span class="pl-k">::</span><span class="pl-c1">Int</span>
    optional<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, String}</span>
<span class="pl-k">end</span>
StructTypes<span class="pl-k">.</span><span class="pl-en">StructType</span>(<span class="pl-k">::</span><span class="pl-c1">Type{OptionalFieldSchema}</span>) <span class="pl-k">=</span> StructTypes<span class="pl-k">.</span><span class="pl-c1">Struct</span>()
StructTypes<span class="pl-k">.</span><span class="pl-en">omitempties</span>(<span class="pl-k">::</span><span class="pl-c1">Type{OptionalFieldSchema}</span>) <span class="pl-k">=</span> (<span class="pl-c1">:optional</span>,)

<span class="pl-k">struct</span> NestedFieldSchema
    int<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field<span class="pl-k">::</span><span class="pl-c1">OptionalFieldSchema</span>
    vector<span class="pl-k">::</span><span class="pl-c1">Vector{OptionalFieldSchema}</span>
<span class="pl-k">end</span>
StructTypes<span class="pl-k">.</span><span class="pl-en">StructType</span>(<span class="pl-k">::</span><span class="pl-c1">Type{NestedFieldSchema}</span>) <span class="pl-k">=</span> StructTypes<span class="pl-k">.</span><span class="pl-c1">Struct</span>()

schema_dict <span class="pl-k">=</span> JSONSchemaGenerator<span class="pl-k">.</span><span class="pl-c1">schema</span>(NestedFieldSchema)</pre></div>
<p dir="auto">You can easily print the schema with JSON or JSON3</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using JSON

julia&gt; JSON.print(schema_dict, 2)
{
  &quot;type&quot;: &quot;object&quot;,
  &quot;properties&quot;: {
    &quot;int&quot;: {
      &quot;type&quot;: &quot;integer&quot;
    },
    &quot;field&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;properties&quot;: {
        &quot;int&quot;: {
          &quot;type&quot;: &quot;integer&quot;
        },
        &quot;optional&quot;: {
          &quot;type&quot;: &quot;string&quot;
        }
      },
      &quot;required&quot;: [
        &quot;int&quot;
      ]
    },
    &quot;vector&quot;: {
      &quot;type&quot;: &quot;array&quot;,
      &quot;items&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;int&quot;: {
            &quot;type&quot;: &quot;integer&quot;
          },
          &quot;optional&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        },
        &quot;required&quot;: [
          &quot;int&quot;
        ]
      }
    }
  },
  &quot;required&quot;: [
    &quot;int&quot;,
    &quot;field&quot;,
    &quot;vector&quot;
  ]
}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JSON

julia<span class="pl-k">&gt;</span> JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(schema_dict, <span class="pl-c1">2</span>)
{
  <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>object<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span>
    },
    <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>object<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>: {
          <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span>
        },
        <span class="pl-s"><span class="pl-pds">"</span>optional<span class="pl-pds">"</span></span>: {
          <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>
        }
      },
      <span class="pl-s"><span class="pl-pds">"</span>required<span class="pl-pds">"</span></span>: [
        <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>
      ]
    },
    <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>array<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>items<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>object<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>: {
          <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>: {
            <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span>
          },
          <span class="pl-s"><span class="pl-pds">"</span>optional<span class="pl-pds">"</span></span>: {
            <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>
          }
        },
        <span class="pl-s"><span class="pl-pds">"</span>required<span class="pl-pds">"</span></span>: [
          <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>
        ]
      }
    }
  },
  <span class="pl-s"><span class="pl-pds">"</span>required<span class="pl-pds">"</span></span>: [
    <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>
  ]
}</pre></div>
<h2 dir="auto"><a id="user-content-referenced-json-schema-types" class="anchor" aria-hidden="true" href="#referenced-json-schema-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Referenced JSON schema types.</h2>
<p dir="auto">By default the generated schema is recursively nested, meaning that any repeating type will be generated multiple times. The <code>use_references=true</code> keyword argument can generate the JSON references for you. You can see that the OptionalFieldSchema is now referenced with <code>$ref</code> towards the <code>$defs</code> section of the schema instead of being copied.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; schema_dict = JSONSchemaGenerator.schema(NestedFieldSchema, use_references=true);

julia&gt; JSON.print(schema_dict, 2)
{
  &quot;type&quot;: &quot;object&quot;,
  &quot;properties&quot;: {
    &quot;int&quot;: {
      &quot;type&quot;: &quot;integer&quot;
    },
    &quot;field&quot;: {
      &quot;$ref&quot;: &quot;#/$defs/OptionalFieldSchema&quot;
    },
    &quot;vector&quot;: {
      &quot;type&quot;: &quot;array&quot;,
      &quot;items&quot;: {
        &quot;$ref&quot;: &quot;#/$defs/OptionalFieldSchema&quot;
      }
    }
  },
  &quot;required&quot;: [
    &quot;int&quot;,
    &quot;field&quot;,
    &quot;vector&quot;
  ],
  &quot;$defs&quot;: {
    &quot;OptionalFieldSchema&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;properties&quot;: {
        &quot;int&quot;: {
          &quot;type&quot;: &quot;integer&quot;
        },
        &quot;optional&quot;: {
          &quot;type&quot;: &quot;string&quot;
        }
      },
      &quot;required&quot;: [
        &quot;int&quot;
      ]
    }
  }
}"><pre>julia<span class="pl-k">&gt;</span> schema_dict <span class="pl-k">=</span> JSONSchemaGenerator<span class="pl-k">.</span><span class="pl-c1">schema</span>(NestedFieldSchema, use_references<span class="pl-k">=</span><span class="pl-c1">true</span>);

julia<span class="pl-k">&gt;</span> JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(schema_dict, <span class="pl-c1">2</span>)
{
  <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>object<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span>
    },
    <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$ref</span><span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>#/<span class="pl-v">$defs</span>/OptionalFieldSchema<span class="pl-pds">"</span></span>
    },
    <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>array<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>items<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$ref</span><span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>#/<span class="pl-v">$defs</span>/OptionalFieldSchema<span class="pl-pds">"</span></span>
      }
    }
  },
  <span class="pl-s"><span class="pl-pds">"</span>required<span class="pl-pds">"</span></span>: [
    <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>
  ],
  <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$defs</span><span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>OptionalFieldSchema<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>object<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>: {
          <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>integer<span class="pl-pds">"</span></span>
        },
        <span class="pl-s"><span class="pl-pds">"</span>optional<span class="pl-pds">"</span></span>: {
          <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>
        }
      },
      <span class="pl-s"><span class="pl-pds">"</span>required<span class="pl-pds">"</span></span>: [
        <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>
      ]
    }
  }
}</pre></div>
<h2 dir="auto"><a id="user-content-schema-validation" class="anchor" aria-hidden="true" href="#schema-validation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Schema Validation</h2>
<p dir="auto"><a href="https://github.com/fredo-dedup/JSONSchema.jl">JSONSchema.jl</a> provides validation for JSON schemas. The schema dictionary generated by JSONSchemaGenerator.jl works together with JSONSchema.jl.</p>
<p dir="auto">JSONSchema.jl works with JSON.jl parsing, but JSON3.jl is better for direct JSON (de)serialization with StructTypes.jl definitions, so unfortunately you may need to use both JSON.jl and JSON3.jl, especially if you have optional fields defined with <code>Union{Nothing, T}</code>.</p>
<p dir="auto">Let's use the example above to generate a JSON string and validate it:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JSONSchema, JSON3, JSON
schema_dict = JSONSchemaGenerator.schema(NestedFieldSchema, use_references=true)

obj = NestedFieldSchema(
    1,
    OptionalFieldSchema(2, nothing),
    [OptionalFieldSchema(2, &quot;string&quot;), OptionalFieldSchema(2, nothing)]
)

# parsing back into a Dict, because that is what JSONSchema.validate wants
json_dict = JSON3.write(obj) |&gt; JSON.parse

JSONSchema.validate(JSONSchema.Schema(schema_dict), json_dict) === nothing"><pre><span class="pl-k">using</span> JSONSchema, JSON3, JSON
schema_dict <span class="pl-k">=</span> JSONSchemaGenerator<span class="pl-k">.</span><span class="pl-c1">schema</span>(NestedFieldSchema, use_references<span class="pl-k">=</span><span class="pl-c1">true</span>)

obj <span class="pl-k">=</span> <span class="pl-c1">NestedFieldSchema</span>(
    <span class="pl-c1">1</span>,
    <span class="pl-c1">OptionalFieldSchema</span>(<span class="pl-c1">2</span>, <span class="pl-c1">nothing</span>),
    [<span class="pl-c1">OptionalFieldSchema</span>(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>), <span class="pl-c1">OptionalFieldSchema</span>(<span class="pl-c1">2</span>, <span class="pl-c1">nothing</span>)]
)

<span class="pl-c"><span class="pl-c">#</span> parsing back into a Dict, because that is what JSONSchema.validate wants</span>
json_dict <span class="pl-k">=</span> JSON3<span class="pl-k">.</span><span class="pl-c1">write</span>(obj) <span class="pl-k">|&gt;</span> JSON<span class="pl-k">.</span>parse

JSONSchema<span class="pl-k">.</span><span class="pl-c1">validate</span>(JSONSchema<span class="pl-k">.</span><span class="pl-c1">Schema</span>(schema_dict), json_dict) <span class="pl-k">===</span> <span class="pl-c1">nothing</span></pre></div>
</article></div>