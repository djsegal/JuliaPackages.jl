<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-threadedsparsearraysjl" class="anchor" aria-hidden="true" href="#threadedsparsearraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreadedSparseArrays.jl</h1>
<p dir="auto"><a href="https://github.com/jagot/ThreadedSparseArrays.jl/actions"><img src="https://github.com/jagot/ThreadedSparseArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jagot/ThreadedSparseArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3b8cbf74c87e8c3a72a7aee3f3e2dd3b1380d87dcef92c46274da559475833a/68747470733a2f2f636f6465636f762e696f2f67682f6a61676f742f54687265616465645370617273654172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jagot/ThreadedSparseArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Simple package providing a wrapper type enabling threaded sparse
matrix–dense matrix multiplication. Based on <a href="https://github.com/JuliaLang/julia/pull/29525" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/29525/hovercard">this
PR</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install with:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add ThreadedSparseArrays"><pre class="notranslate"><code>] add ThreadedSparseArrays
</code></pre></div>
<p dir="auto">Note that you <em>must</em> enable threading in Julia for
ThreadedSparseArrays to work. You can do so by setting the
<a href="https://docs.julialang.org/en/v1/manual/environment-variables/#JULIA_NUM_THREADS-1" rel="nofollow">JULIA_NUM_THREADS</a>
environment variable. To test that it is set properly, run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Threads.nthreads()"><pre>Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>()</pre></div>
<p dir="auto">and make sure it returns the number of threads you wanted.</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">To use ThreadedSparseArrays, all you need to do is to wrap your sparse
matrix using the ThreadedSparseMatrixCSC type, like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays
using ThreadedSparseArrays

A = sprand(10000, 100, 0.05); # sparse
X1 = randn(100, 100); # dense
X2 = randn(10000, 100); # dense

At = ThreadedSparseMatrixCSC(A); # threaded version

# threaded sparse matrix–dense matrix multiplication
B1 = At*X1;
B2 = At'X2;"><pre><span class="pl-k">using</span> SparseArrays
<span class="pl-k">using</span> ThreadedSparseArrays

A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">10000</span>, <span class="pl-c1">100</span>, <span class="pl-c1">0.05</span>); <span class="pl-c"><span class="pl-c">#</span> sparse</span>
X1 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> dense</span>
X2 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>, <span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> dense</span>

At <span class="pl-k">=</span> <span class="pl-c1">ThreadedSparseMatrixCSC</span>(A); <span class="pl-c"><span class="pl-c">#</span> threaded version</span>

<span class="pl-c"><span class="pl-c">#</span> threaded sparse matrix–dense matrix multiplication</span>
B1 <span class="pl-k">=</span> At<span class="pl-k">*</span>X1;
B2 <span class="pl-k">=</span> At<span class="pl-k">'</span>X2;</pre></div>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<ul dir="auto">
<li>If the right hand side <code>X</code> is a <code>Vector</code>, you need to use <code>At'X</code> to
get threading. <code>At*X</code> will not work.</li>
<li>You might only get speedups for large matrices. Use <code>@btime</code> from
the <a href="https://github.com/JuliaCI/BenchmarkTools.jl">BenchmarkTools.jl</a>
package to check if your use case is improved.</li>
</ul>
</article></div>