<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-perceptron" class="anchor" aria-hidden="true" href="#perceptron"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Perceptron</h1>
<p>Package for training Multiclass Perceptron models.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>You can clone the package</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.clone(&quot;https://github.com/davidbp/MulticlassPerceptron.jl&quot;) 
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/davidbp/MulticlassPerceptron.jl<span class="pl-pds">"</span></span>) </pre></div>
<p>Or use <code>add</code> to install the package. Remember to be in <code>pkg&gt;</code> mode inside Julia (type <code>]</code>).</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(v1.1) pkg&gt; add &quot;https://github.com/davidbp/MulticlassPerceptron.jl&quot;
"><pre><code>(v1.1) pkg&gt; add "https://github.com/davidbp/MulticlassPerceptron.jl"
</code></pre></div>
<h3><a id="user-content-test-the-code" class="anchor" aria-hidden="true" href="#test-the-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Test the code</h3>
<p>In the <code>examples</code> folder there are some code examples to test the package.</p>
<p>Executing <code>julia --project=. ./examples/basic_usage_train.jl</code> you should get</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Loading data

MNIST Dataset Loading...

MNIST Dataset Loaded, it took 0.69 seconds

Start Learning

Epoch: 50 	 Accuracy: 0.899
Learning took 9.635 seconds

Results:
Train accuracy:0.93595
Test accuracy:0.9263
"><pre><code>Loading data

MNIST Dataset Loading...

MNIST Dataset Loaded, it took 0.69 seconds

Start Learning

Epoch: 50 	 Accuracy: 0.899
Learning took 9.635 seconds

Results:
Train accuracy:0.93595
Test accuracy:0.9263
</code></pre></div>
<p>If this works then you can already use <code>MulticlassPerceptron</code> models!</p>
<h3><a id="user-content-core-model" class="anchor" aria-hidden="true" href="#core-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Core model</h3>
<p>The following code shows how to instantiate a struct <code>MulticlassPerceptronCore</code> and how to train it.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CategoricalArrays
using MulticlassPerceptron
using Statistics

n, p, n_classes, sparse, f_average_weights = 100, 2, 2, false, true
X, y,_ = MulticlassPerceptron.make_blobs(n; centers=n_classes, random_seed=4, return_centers=true)
X = copy(X')

perceptron_core = MulticlassPerceptronCore(Float64, n_classes, p, sparse)
fit!(perceptron_core, X, y; n_epochs=200, f_average_weights=f_average_weights, verbosity=2)
ŷ = MulticlassPerceptron.predict(perceptron_core, X)

println(&quot;length(y)=$(length(y))&quot;)
println(&quot;size(X)=$(size(X))&quot;)
println(&quot;length(ŷ)=$(length(ŷ))&quot;)
println(&quot;Accuracy $(mean(ŷ .== y))&quot;)
"><pre><span class="pl-k">using</span> CategoricalArrays
<span class="pl-k">using</span> MulticlassPerceptron
<span class="pl-k">using</span> Statistics

n, p, n_classes, sparse, f_average_weights <span class="pl-k">=</span> <span class="pl-c1">100</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">false</span>, <span class="pl-c1">true</span>
X, y,_ <span class="pl-k">=</span> MulticlassPerceptron<span class="pl-k">.</span><span class="pl-c1">make_blobs</span>(n; centers<span class="pl-k">=</span>n_classes, random_seed<span class="pl-k">=</span><span class="pl-c1">4</span>, return_centers<span class="pl-k">=</span><span class="pl-c1">true</span>)
X <span class="pl-k">=</span> <span class="pl-c1">copy</span>(X<span class="pl-k">'</span>)

perceptron_core <span class="pl-k">=</span> <span class="pl-c1">MulticlassPerceptronCore</span>(Float64, n_classes, p, sparse)
<span class="pl-c1">fit!</span>(perceptron_core, X, y; n_epochs<span class="pl-k">=</span><span class="pl-c1">200</span>, f_average_weights<span class="pl-k">=</span>f_average_weights, verbosity<span class="pl-k">=</span><span class="pl-c1">2</span>)
ŷ <span class="pl-k">=</span> MulticlassPerceptron<span class="pl-k">.</span><span class="pl-c1">predict</span>(perceptron_core, X)

<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>length(y)=<span class="pl-v">$(<span class="pl-c1">length</span>(y))</span><span class="pl-pds">"</span></span>)
<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>size(X)=<span class="pl-v">$(<span class="pl-c1">size</span>(X))</span><span class="pl-pds">"</span></span>)
<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>length(ŷ)=<span class="pl-v">$(<span class="pl-c1">length</span>(ŷ))</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Accuracy <span class="pl-v">$(<span class="pl-c1">mean</span>(ŷ <span class="pl-k">.==</span> y))</span><span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h3>
<p>This code snippet loads the MNIST Dataset and saves the classes as a <code>CategoricalArray</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
using MulticlassPerceptron
using MLDatasets
using CategoricalArrays

## Load data
train_imgs = MNIST.images(:train)   # size(train_imgs) -&gt; (60000,)
test_imgs  = MNIST.images(:test)    # size(test_imgs) -&gt; (10000,)

## Prepare data
train_x    = Float32.(hcat(reshape.(train_imgs, :)...)) # size(train_x) -&gt; (784, 60000)
test_x     = Float32.(hcat(reshape.(test_imgs, :)...)) # size(test_x)   -&gt; (784, 60000)
train_y    = MNIST.labels(:train) .+ 1;
test_y     = MNIST.labels(:test)  .+ 1;

## Encode targets as CategoricalArray objects
train_y = CategoricalArray(train_y)
test_y  = CategoricalArray(test_y)
"><pre><span class="pl-k">using</span> MulticlassPerceptron
<span class="pl-k">using</span> MLDatasets
<span class="pl-k">using</span> CategoricalArrays

<span class="pl-c"><span class="pl-c">#</span># Load data</span>
train_imgs <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">images</span>(<span class="pl-c1">:train</span>)   <span class="pl-c"><span class="pl-c">#</span> size(train_imgs) -&gt; (60000,)</span>
test_imgs  <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">images</span>(<span class="pl-c1">:test</span>)    <span class="pl-c"><span class="pl-c">#</span> size(test_imgs) -&gt; (10000,)</span>

<span class="pl-c"><span class="pl-c">#</span># Prepare data</span>
train_x    <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">hcat</span>(<span class="pl-c1">reshape</span>.(train_imgs, :)<span class="pl-k">...</span>)) <span class="pl-c"><span class="pl-c">#</span> size(train_x) -&gt; (784, 60000)</span>
test_x     <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">hcat</span>(<span class="pl-c1">reshape</span>.(test_imgs, :)<span class="pl-k">...</span>)) <span class="pl-c"><span class="pl-c">#</span> size(test_x)   -&gt; (784, 60000)</span>
train_y    <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">labels</span>(<span class="pl-c1">:train</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>;
test_y     <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">labels</span>(<span class="pl-c1">:test</span>)  <span class="pl-k">.+</span> <span class="pl-c1">1</span>;

<span class="pl-c"><span class="pl-c">#</span># Encode targets as CategoricalArray objects</span>
train_y <span class="pl-k">=</span> <span class="pl-c1">CategoricalArray</span>(train_y)
test_y  <span class="pl-k">=</span> <span class="pl-c1">CategoricalArray</span>(test_y)</pre></div>
<p>We can create a <code>MulticlassPerceptronClassifer</code> as follows :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MulticlassPerceptron
n_features = size(train_x, 1);
n_classes  = length(unique(train_y));
perceptron =  MulticlassPerceptron.MulticlassPerceptronClassifier(n_epochs=50; f_average_weights=true)
"><pre><span class="pl-k">using</span> MulticlassPerceptron
n_features <span class="pl-k">=</span> <span class="pl-c1">size</span>(train_x, <span class="pl-c1">1</span>);
n_classes  <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(train_y));
perceptron <span class="pl-k">=</span>  MulticlassPerceptron<span class="pl-k">.</span><span class="pl-c1">MulticlassPerceptronClassifier</span>(n_epochs<span class="pl-k">=</span><span class="pl-c1">50</span>; f_average_weights<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>The function <code>fit</code> is used to train the model. The result containing the trained model is kept inside fitresult.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="fitresult, _ , _  = MLJBase.fit(perceptron, 1, train_x, train_y) 
"><pre><code>fitresult, _ , _  = MLJBase.fit(perceptron, 1, train_x, train_y) 
</code></pre></div>
</article></div>