<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-perceptron" class="anchor" aria-hidden="true" href="#perceptron"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Perceptron</h1>
<p>Package for training Multiclass Perceptron models.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h3>
<p>You can clone the package</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/davidbp/MulticlassPerceptron.jl<span class="pl-pds">"</span></span>) </pre></div>
<p>Or use <code>add</code> to install the package. Remember to be in <code>pkg&gt;</code> mode inside Julia (type <code>]</code>).</p>
<pre><code>(v1.1) pkg&gt; add "https://github.com/davidbp/MulticlassPerceptron.jl"
</code></pre>
<h3><a id="user-content-test-the-code" class="anchor" aria-hidden="true" href="#test-the-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Test the code</h3>
<p>In the <code>examples</code> folder there are some code examples to test the package.</p>
<p>Executing <code>basic_usage_train.jl</code> you should get</p>
<pre><code>Start Learning

Epoch: 50 	 Accuracy: 0.898
Learning Finished

Results:
Train accuracy:0.9359333333333333
Test accuracy:0.927
</code></pre>
<p>If this works then you can already use <code>MulticlassPerceptron</code> models!</p>
<h3><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic usage</h3>
<p>This code snippet loads the MNIST Dataset and saves the classes as a <code>CategoricalArray</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MulticlassPerceptron
<span class="pl-k">using</span> MLDatasets
<span class="pl-k">using</span> CategoricalArrays

<span class="pl-c"><span class="pl-c">#</span># Load data</span>
train_imgs <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">images</span>(<span class="pl-c1">:train</span>)   <span class="pl-c"><span class="pl-c">#</span> size(train_imgs) -&gt; (60000,)</span>
test_imgs  <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">images</span>(<span class="pl-c1">:test</span>)    <span class="pl-c"><span class="pl-c">#</span> size(test_imgs) -&gt; (10000,)</span>

<span class="pl-c"><span class="pl-c">#</span># Prepare data</span>
train_x    <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">hcat</span>(<span class="pl-c1">reshape</span>.(train_imgs, :)<span class="pl-k">...</span>)) <span class="pl-c"><span class="pl-c">#</span> size(train_x) -&gt; (784, 60000)</span>
test_x     <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">hcat</span>(<span class="pl-c1">reshape</span>.(test_imgs, :)<span class="pl-k">...</span>)) <span class="pl-c"><span class="pl-c">#</span> size(test_x)   -&gt; (784, 60000)</span>
train_y    <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">labels</span>(<span class="pl-c1">:train</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>;
test_y     <span class="pl-k">=</span> MNIST<span class="pl-k">.</span><span class="pl-c1">labels</span>(<span class="pl-c1">:test</span>)  <span class="pl-k">.+</span> <span class="pl-c1">1</span>;

<span class="pl-c"><span class="pl-c">#</span># Encode targets as CategoricalArray objects</span>
train_y <span class="pl-k">=</span> <span class="pl-c1">CategoricalArray</span>(train_y)
test_y  <span class="pl-k">=</span> <span class="pl-c1">CategoricalArray</span>(test_y)

</pre></div>
<p>We can create a <code>MulticlassPerceptronClassifer</code> as follows :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MulticlassPerceptron
n_features <span class="pl-k">=</span> <span class="pl-c1">size</span>(train_x, <span class="pl-c1">1</span>);
n_classes  <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">unique</span>(train_y));
perceptron <span class="pl-k">=</span>  MulticlassPerceptron<span class="pl-k">.</span><span class="pl-c1">MulticlassPerceptronClassifier</span>(n_epochs<span class="pl-k">=</span><span class="pl-c1">50</span>; f_average_weights<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>The function <code>fit</code> is used to train the model. The result containing the trained model is kept inside fitresult.</p>
<pre><code>fitresult, _ , _  = MLJBase.fit(perceptron, 1, train_x, train_y) 
</code></pre>
</article></div>