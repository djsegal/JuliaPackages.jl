<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/mauriciogtec/AdaptiveRejectionSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9f1ed2d43e670d22cfddf1c71d0b72308a73903a3a0727a9af8538f6f6fa8add/68747470733a2f2f7472617669732d63692e6f72672f6d6175726963696f677465632f416461707469766552656a656374696f6e53616d706c696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mauriciogtec/AdaptiveRejectionSampling.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/mauriciogtec/AdaptiveRejectionSampling.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0e246f27c34f20b4e8f75e4991dd966d184222ace90a6c40d3d7f745132dedba/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6175726963696f677465632f416461707469766552656a656374696f6e53616d706c696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/mauriciogtec/AdaptiveRejectionSampling.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mauriciogtec/AdaptiveRejectionSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1ec43af6d667653ffac75fa09d8e662fde83c4682047e89db0536a4e13968f51/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726963696f677465632f416461707469766552656a656374696f6e53616d706c696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mauriciogtec/AdaptiveRejectionSampling.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://opensource.org/licenses/mit-license.php" rel="nofollow"><img src="https://camo.githubusercontent.com/2238170e0b833085d0d818b71464632e2c9ed8fe59149d7d467ced786db7fed5/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f6f732f6d69742f6d69742e706e673f763d313033" alt="MIT Licence" data-canonical-src="https://badges.frapsoft.com/os/mit/mit.png?v=103" style="max-width:100%;"></a></p>
<h1><a id="user-content-adaptiverejectionsampling" class="anchor" aria-hidden="true" href="#adaptiverejectionsampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AdaptiveRejectionSampling</h1>
<p>This package is useful for efficientlysampling from log-concave univariate density functions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AdaptiveRejectionSampling
using Plots
"><pre><span class="pl-k">using</span> AdaptiveRejectionSampling
<span class="pl-k">using</span> Plots</pre></div>
<h2><a id="user-content-sampling-from-a-shifted-normal-distribution" class="anchor" aria-hidden="true" href="#sampling-from-a-shifted-normal-distribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sampling from a shifted normal distribution</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Define function to be sampled
μ, σ = 1.0, 2.0
f(x) = exp(-0.5(x - μ)^2 / σ^2) / sqrt(2pi * σ^2) 
support = (-Inf, Inf)

# Build the sampler and simulate 10,000 samples
sampler = RejectionSampler(f, support, max_segments = 5)
@time sim = run_sampler!(sampler, 10000);
"><pre><span class="pl-c"><span class="pl-c">#</span> Define function to be sampled</span>
μ, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">0.5</span>(x <span class="pl-k">-</span> μ)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> σ<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>pi <span class="pl-k">*</span> σ<span class="pl-k">^</span><span class="pl-c1">2</span>) 
support <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">Inf</span>, <span class="pl-c1">Inf</span>)

<span class="pl-c"><span class="pl-c">#</span> Build the sampler and simulate 10,000 samples</span>
sampler <span class="pl-k">=</span> <span class="pl-c1">RejectionSampler</span>(f, support, max_segments <span class="pl-k">=</span> <span class="pl-c1">5</span>)
<span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run_sampler!</span>(sampler, <span class="pl-c1">10000</span>);</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="  0.010434 seconds (192.15 k allocations: 3.173 MiB)
"><pre><code>  0.010434 seconds (192.15 k allocations: 3.173 MiB)
</code></pre></div>
<p>Let's verify the result</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Plot the results and compare to target distribution
x = range(-10.0, 10.0, length=100)
envelop = [eval_envelop(sampler.envelop, xi) for xi in x]
target = [f(xi) for xi in x]

histogram(sim, normalize = true, label = &quot;Histogram&quot;)
plot!(x, [target envelop], width = 2, label = [&quot;Normal(μ, σ)&quot; &quot;Envelop&quot;])
"><pre><span class="pl-c"><span class="pl-c">#</span> Plot the results and compare to target distribution</span>
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
envelop <span class="pl-k">=</span> [<span class="pl-c1">eval_envelop</span>(sampler<span class="pl-k">.</span>envelop, xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]
target <span class="pl-k">=</span> [<span class="pl-c1">f</span>(xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]

<span class="pl-c1">histogram</span>(sim, normalize <span class="pl-k">=</span> <span class="pl-c1">true</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Histogram<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x, [target envelop], width <span class="pl-k">=</span> <span class="pl-c1">2</span>, label <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Normal(μ, σ)<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Envelop<span class="pl-pds">"</span></span>])</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="img/example1.png"><img src="img/example1.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-lets-try-a-gamma" class="anchor" aria-hidden="true" href="#lets-try-a-gamma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Let's try a Gamma</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="α, β = 5.0, 2.0
f(x) = β^α * x^(α-1) * exp(-β*x) / gamma(α)
support = (0.0, Inf)

# Build the sampler and simulate 10,000 samples
sampler = RejectionSampler(f, support)
@time sim = run_sampler!(sampler, 10000) 

# Plot the results and compare to target distribution
x = range(0.0, 5.0, length=100)
envelop = [eval_envelop(sampler.envelop, xi) for xi in x]
target = [f(xi) for xi in x]

histogram(sim, normalize = true, label = &quot;Histogram&quot;)
plot!(x, [target envelop], width = 2, label = [&quot;Gamma(α, β)&quot; &quot;Envelop&quot;])
"><pre>α, β <span class="pl-k">=</span> <span class="pl-c1">5.0</span>, <span class="pl-c1">2.0</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> β<span class="pl-k">^</span>α <span class="pl-k">*</span> x<span class="pl-k">^</span>(α<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>β<span class="pl-k">*</span>x) <span class="pl-k">/</span> <span class="pl-c1">gamma</span>(α)
support <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">Inf</span>)

<span class="pl-c"><span class="pl-c">#</span> Build the sampler and simulate 10,000 samples</span>
sampler <span class="pl-k">=</span> <span class="pl-c1">RejectionSampler</span>(f, support)
<span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run_sampler!</span>(sampler, <span class="pl-c1">10000</span>) 

<span class="pl-c"><span class="pl-c">#</span> Plot the results and compare to target distribution</span>
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">5.0</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
envelop <span class="pl-k">=</span> [<span class="pl-c1">eval_envelop</span>(sampler<span class="pl-k">.</span>envelop, xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]
target <span class="pl-k">=</span> [<span class="pl-c1">f</span>(xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]

<span class="pl-c1">histogram</span>(sim, normalize <span class="pl-k">=</span> <span class="pl-c1">true</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Histogram<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x, [target envelop], width <span class="pl-k">=</span> <span class="pl-c1">2</span>, label <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Gamma(α, β)<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Envelop<span class="pl-pds">"</span></span>])</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="  0.007299 seconds (182.00 k allocations: 3.027 MiB)
"><pre><code>  0.007299 seconds (182.00 k allocations: 3.027 MiB)
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="img/example2.png"><img src="img/example2.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-truncated-distributions-and-unknown-normalisation-constant" class="anchor" aria-hidden="true" href="#truncated-distributions-and-unknown-normalisation-constant"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Truncated distributions and unknown normalisation constant</h2>
<p>We don't to provide an exact density--it will sample up to proportionality--and we can do truncated distributions</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="α, β = 5.0, 2.0
f(x) = β^α * x^(α-1) * exp(-β*x) / gamma(α)
support = (1.0, 3.5)

# Build the sampler and simulate 10,000 samples
sampler = RejectionSampler(f, support)
@time sim = run_sampler!(sampler, 10000) 

# Plot the results and compare to target distribution
x = range(0.01, 8.0, length=100)
envelop = [eval_envelop(sampler.envelop, xi) for xi in x]
target = [f(xi) for xi in x]

histogram(sim, normalize = true, label = &quot;histogram&quot;)
plot!(x, [target envelop], width = 2, label = [&quot;target density&quot; &quot;envelop&quot;])
"><pre>α, β <span class="pl-k">=</span> <span class="pl-c1">5.0</span>, <span class="pl-c1">2.0</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> β<span class="pl-k">^</span>α <span class="pl-k">*</span> x<span class="pl-k">^</span>(α<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>β<span class="pl-k">*</span>x) <span class="pl-k">/</span> <span class="pl-c1">gamma</span>(α)
support <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>, <span class="pl-c1">3.5</span>)

<span class="pl-c"><span class="pl-c">#</span> Build the sampler and simulate 10,000 samples</span>
sampler <span class="pl-k">=</span> <span class="pl-c1">RejectionSampler</span>(f, support)
<span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run_sampler!</span>(sampler, <span class="pl-c1">10000</span>) 

<span class="pl-c"><span class="pl-c">#</span> Plot the results and compare to target distribution</span>
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0.01</span>, <span class="pl-c1">8.0</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
envelop <span class="pl-k">=</span> [<span class="pl-c1">eval_envelop</span>(sampler<span class="pl-k">.</span>envelop, xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]
target <span class="pl-k">=</span> [<span class="pl-c1">f</span>(xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]

<span class="pl-c1">histogram</span>(sim, normalize <span class="pl-k">=</span> <span class="pl-c1">true</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>histogram<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x, [target envelop], width <span class="pl-k">=</span> <span class="pl-c1">2</span>, label <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>target density<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>envelop<span class="pl-pds">"</span></span>])</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="  0.007766 seconds (181.82 k allocations: 3.024 MiB)
"><pre><code>  0.007766 seconds (181.82 k allocations: 3.024 MiB)
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="img/example3.png"><img src="img/example3.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-elastic-net-distribution" class="anchor" aria-hidden="true" href="#elastic-net-distribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Elastic Net distribution</h2>
<p>The following example arises from elastic net regression and smoothing problems. In these cases, the integration constants are not available analytically.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Define function to be sampled
function f(x, μ, λ1, λ2)
      δ = x - μ
      nl = λ1 * abs(δ) + λ2 * δ^2
      return exp(-nl)
end
support = (-Inf, Inf)

# Build the sampler and simulate 10,000 samples
μ, λ1, λ2 = 0.0, 2.0, 1.0
sampler = RejectionSampler(x -&gt; f(x, μ, λ1, λ2), support, max_segments = 5)
@time sim = run_sampler!(sampler, 10000);

# Plot the results and compare to target distribution
x = range(-2.3, 2.3, length=100)
envelop = [eval_envelop(sampler.envelop, xi) for xi in x]
target = [f(xi, μ, λ1, λ2) for xi in x]

histogram(sim, normalize = true, label = &quot;histogram&quot;)
plot!(x, [target envelop], width = 2, label = [&quot;target density&quot; &quot;envelop&quot;])
"><pre><span class="pl-c"><span class="pl-c">#</span> Define function to be sampled</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(x, μ, λ1, λ2)
      δ <span class="pl-k">=</span> x <span class="pl-k">-</span> μ
      nl <span class="pl-k">=</span> λ1 <span class="pl-k">*</span> <span class="pl-c1">abs</span>(δ) <span class="pl-k">+</span> λ2 <span class="pl-k">*</span> δ<span class="pl-k">^</span><span class="pl-c1">2</span>
      <span class="pl-k">return</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>nl)
<span class="pl-k">end</span>
support <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">Inf</span>, <span class="pl-c1">Inf</span>)

<span class="pl-c"><span class="pl-c">#</span> Build the sampler and simulate 10,000 samples</span>
μ, λ1, λ2 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>
sampler <span class="pl-k">=</span> <span class="pl-c1">RejectionSampler</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">f</span>(x, μ, λ1, λ2), support, max_segments <span class="pl-k">=</span> <span class="pl-c1">5</span>)
<span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run_sampler!</span>(sampler, <span class="pl-c1">10000</span>);

<span class="pl-c"><span class="pl-c">#</span> Plot the results and compare to target distribution</span>
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">2.3</span>, <span class="pl-c1">2.3</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
envelop <span class="pl-k">=</span> [<span class="pl-c1">eval_envelop</span>(sampler<span class="pl-k">.</span>envelop, xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]
target <span class="pl-k">=</span> [<span class="pl-c1">f</span>(xi, μ, λ1, λ2) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x]

<span class="pl-c1">histogram</span>(sim, normalize <span class="pl-k">=</span> <span class="pl-c1">true</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>histogram<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x, [target envelop], width <span class="pl-k">=</span> <span class="pl-c1">2</span>, label <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>target density<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>envelop<span class="pl-pds">"</span></span>])</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="img/example4.png"><img src="img/example4.png" alt="" style="max-width:100%;"></a></p>
<p>To cite please use</p>
<div class="highlight highlight-text-bibtex position-relative" data-snippet-clipboard-copy-content="@manual{tec2018ars,
  title = {AdaptiveRejectionSampling.jl},
  author = {Mauricio Tec},
  year = {2018},
  url = {https://github.com/mauriciogtec/AdaptiveRejectionSampling.jl}
}
"><pre><span class="pl-k">@manual</span>{<span class="pl-en">tec2018ars</span>,
  <span class="pl-s">title</span> = <span class="pl-s"><span class="pl-pds">{</span>AdaptiveRejectionSampling.jl<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span> = <span class="pl-s"><span class="pl-pds">{</span>Mauricio Tec<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span> = <span class="pl-s"><span class="pl-pds">{</span>2018<span class="pl-pds">}</span></span>,
  <span class="pl-s">url</span> = <span class="pl-s"><span class="pl-pds">{</span>https://github.com/mauriciogtec/AdaptiveRejectionSampling.jl<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>