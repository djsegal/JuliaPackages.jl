<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-moleculardynamics" class="anchor" aria-hidden="true" href="#moleculardynamics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MolecularDynamics</h1>
<p><strong>Update 10/03/2020: This package is incompatible with Julia &gt;= 0.6. I do not plan on
continuing to develop this package, but forks are welcome that update
the package to be compatible with 0.6 and above.</strong></p>
<p>"MolecularDynamics" is a <a href="http://www.julialang.org" rel="nofollow">Julia</a> package for the
reading in and analysis of <a href="http://www.gromacs.org" rel="nofollow">Gromacs</a> Molecular Dynamics
simulations. The goal is to provide a small and simple framework for simulation analysis.
This project does not intend to provide every analytical tool possible, but
instead intends to give a foundation for writing analysis software, making it
easier to work with Gromacs files in Julia. Several statistical packages are
available for Julia that can be used in conjunction with this package.</p>
<p>The following modules are included in this package:</p>
<ul>
<li>Gmx - the main file processing module. Combines Xtc and Ndx functions to
be able to read in an xtc file into an
array for processing.</li>
<li>Utils - the main analysis module.</li>
<li>Xtc - reads in xtc files.</li>
<li>Ndx - reads in ndx files.</li>
</ul>
<p>Note that this is a work in progress and probably contains a few bugs. Please
check it out and give me some feedback.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<p>The xdrfile library is required for reading in Gromacs xtc files. You can
<a href="http://www.gromacs.org/Downloads" rel="nofollow">download it here</a> (bottom of the page). You
must enable building it as a shared library. Here is how to download and install
the library:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="wget ftp://ftp.gromacs.org/pub/contrib/xdrfile-1.1.1.tar.gz
tar xvzf xdrfile-1.1.1.tar.gz
cd xdrfile-1.1.1
./configure --enable-shared
make -j N
sudo make install
"><pre><code>wget ftp://ftp.gromacs.org/pub/contrib/xdrfile-1.1.1.tar.gz
tar xvzf xdrfile-1.1.1.tar.gz
cd xdrfile-1.1.1
./configure --enable-shared
make -j N
sudo make install
</code></pre></div>
<p>'N' is the number of processors with which to build.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Open the REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia
"><pre><code>julia
</code></pre></div>
<p>Now add the package:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;MolecularDynamics&quot;)
"><pre><code>julia&gt; Pkg.add("MolecularDynamics")
</code></pre></div>
<p>To start using the package do the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using MolecularDynamics
"><pre><code>julia&gt; using MolecularDynamics
</code></pre></div>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<p>###Reading in files</p>
<p>Here are a few ways to use these modules in the REPL. Any of these functions can
be put into a script. Some examples are in the "examples" directory, including a
radial distribution calculation.</p>
<p>The following uses "traj.xtc" and "index.ndx" from the "examples/gmx-test"
directory, but you can use any xtc file and corresponding index file you wish.
First open the REPL.</p>
<p>Now here are a few things you can do with "read_gmx". Read in an xtc file and
save all of the data to various variables:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = read_gmx(&quot;traj.xtc&quot;):
"><pre><code>julia&gt; g = read_gmx("traj.xtc"):
</code></pre></div>
<p>Your output should look something like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="First frame to save: 1
Last frame to save: 100000
Saving every frame.
Initializing traj.xtc
No. of atoms = 2014
Saving all atoms.
Saved 101 frames.
"><pre><code>First frame to save: 1
Last frame to save: 100000
Saving every frame.
Initializing traj.xtc
No. of atoms = 2014
Saving all atoms.
Saved 101 frames.
</code></pre></div>
<p>You can now access all of the saved information in the "g" object which has a type of
gmxType:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; typeof(g)
gmxType (constructor with 2 methods)

julia&gt; names(g)
5-element Array{Symbol,1}:
 :no_frames
 :time     
 :box      
 :x        
 :natoms
"><pre><code>juila&gt; typeof(g)
gmxType (constructor with 2 methods)

julia&gt; names(g)
5-element Array{Symbol,1}:
 :no_frames
 :time     
 :box      
 :x        
 :natoms
</code></pre></div>
<p>How many frames were saved to "g". Note that Gromacs simulations start at time
0, which is saved to the first element in our arrays.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.no_frames
101
"><pre><code>julia&gt; g.no_frames
101
</code></pre></div>
<p>Time at a frame 5 (in ps):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.time[5]
0.8f0
"><pre><code>julia&gt; g.time[5]
0.8f0
</code></pre></div>
<p>The box at frame 10:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.box[10]
3/x3 Array{Float32,2}:
 2.45527  0.0      0.0    
 0.0      2.45527  0.0    
 0.0      0.0      2.45527
"><pre><code>julia&gt; g.box[10]
3/x3 Array{Float32,2}:
 2.45527  0.0      0.0    
 0.0      2.45527  0.0    
 0.0      0.0      2.45527
</code></pre></div>
<p>Coordinates of the 5th atom at frame 20. Note that we have a special dictionary
entry "all" since no index file was specified (see below when one is).</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.x[&quot;all&quot;][20][:,5]
3-element Array{Float32,1}:
 1.335
 1.142
 0.591
"><pre><code>julia&gt; g.x["all"][20][:,5]
3-element Array{Float32,1}:
 1.335
 1.142
 0.591
</code></pre></div>
<p>How many atoms are in "all":</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.natoms[&quot;all&quot;]
2014
"><pre><code>julia&gt; g.natoms["all"]
2014
</code></pre></div>
<p>We can also read in an index file and specify one or more index groups to be
saved. In this case we'll save the "C" and "CH2" groups:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = read_gmx(&quot;traj.xtc&quot;,&quot;index.ndx&quot;,&quot;C&quot;,&quot;CH2&quot;):
First frame to save: 1
Last frame to save: 100000
Saving every frame.
Initializing traj.xtc
No. of atoms = 2014
Saving the following index groups:
  C (4 elements)
  CH2 (6 elements)
Saved 101 frames.
"><pre><code>julia&gt; g = read_gmx("traj.xtc","index.ndx","C","CH2"):
First frame to save: 1
Last frame to save: 100000
Saving every frame.
Initializing traj.xtc
No. of atoms = 2014
Saving the following index groups:
  C (4 elements)
  CH2 (6 elements)
Saved 101 frames.
</code></pre></div>
<p>Time, box, and no_frames are the same as before. We can now access the
coordinates for each specific group. Here's the 2nd atom in the group "C" at the
10th frame. Note that we are using the key "C" now instead of "all". We could
also use "CH2" since we read that one in as well.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.x[&quot;C&quot;][10][:,2]
3-element Array{Float32,1}:
 1.328
 1.141
 0.561
"><pre><code>julia&gt; g.x["C"][10][:,2]
3-element Array{Float32,1}:
 1.328
 1.141
 0.561
</code></pre></div>
<p>If you wanted just the x-coordinate of the above:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.x[&quot;C&quot;][10][1,2]
1.3280001f0
"><pre><code>julia&gt; g.x["C"][10][1,2]
1.3280001f0
</code></pre></div>
<p>Here is how many atoms are in the CH2 group:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.natoms[&quot;CH2&quot;]
6
"><pre><code>julia&gt; g.natoms["CH2"]
6
</code></pre></div>
<p>natoms and x are made up of dictionaries, as stated previously:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.natoms
Dict{Any,Any} with 2 entries:
  &quot;CH2&quot; =&gt; 6
  &quot;C&quot;   =&gt; 4

julia&gt; g.x
Dict{Any,Any} with 2 entries:
  &quot;CH2&quot; =&gt; {…
  &quot;C&quot;   =&gt; {…
"><pre><code>julia&gt; g.natoms
Dict{Any,Any} with 2 entries:
  "CH2" =&gt; 6
  "C"   =&gt; 4

julia&gt; g.x
Dict{Any,Any} with 2 entries:
  "CH2" =&gt; {…
  "C"   =&gt; {…
</code></pre></div>
<p>You can also save only specific frames to the gmxType object, specifying the first frame to save, the last frame to save, and whether or not to skip frames in saving. The following starts at the 5th frame and then ends at the 10th frame, saving only every other frame:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = read_gmx(&quot;traj.xtc&quot;,5,10,2);
First frame to save: 5
Last frame to save: 10
Saving every other frame.
Initializing traj.xtc
No. of atoms = 2014
Saving all atoms.
Saved 5 frames.
"><pre><code>julia&gt; g = read_gmx("traj.xtc",5,10,2);
First frame to save: 5
Last frame to save: 10
Saving every other frame.
Initializing traj.xtc
No. of atoms = 2014
Saving all atoms.
Saved 5 frames.
</code></pre></div>
<p>An index file can be specified with groups again:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = read_gmx(&quot;traj.xtc&quot;,5,10,2,&quot;index.ndx&quot;,&quot;C&quot;);
First frame to save: 5
Last frame to save: 10
Saving every other frame.
Initializing traj.xtc
No. of atoms = 2014
Saving the following index groups:
  C (4 elements)
Saved 5 frames.
"><pre><code>julia&gt; g = read_gmx("traj.xtc",5,10,2,"index.ndx","C");
First frame to save: 5
Last frame to save: 10
Saving every other frame.
Initializing traj.xtc
No. of atoms = 2014
Saving the following index groups:
  C (4 elements)
Saved 5 frames.
</code></pre></div>
<p>So far I've shown how to read in all the frames of an xtc file (or an index
group) and save them to a gmxType object. You can also read in the xtc file
frame-by-frame using the Xtc module:</p>
<p>First start initialize the file:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; stat, xtc = xtc_init(&quot;traj.xtc&quot;)
Initializing traj.xtc
No. of atoms = 2014

julia&gt; stat
0

julia&gt; typeof(xtc)
xtcType (constructor with 1 method)

juila&gt; names(xtc)
7-element Array{Symbol,1}:
 :natoms
 :step  
 :time  
 :box   
 :x     
 :prec  
 :xd   
"><pre><code>juila&gt; stat, xtc = xtc_init("traj.xtc")
Initializing traj.xtc
No. of atoms = 2014

julia&gt; stat
0

julia&gt; typeof(xtc)
xtcType (constructor with 1 method)

juila&gt; names(xtc)
7-element Array{Symbol,1}:
 :natoms
 :step  
 :time  
 :box   
 :x     
 :prec  
 :xd   
</code></pre></div>
<p>"stat" is returned and tells if the initialization / read was successful (0 is success). "xd" is a C pointer that cannot be accessed from Julia and is solely used for getting the data using the C library xdrfile.</p>
<p>Now you can read the first frame using the xtc object above.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; stat, xtc = read_xtc(xtc)
"><pre><code>julia&gt; stat, xtc = read_xtc(xtc)
</code></pre></div>
<p>Now you can get the info for the frame you just read in. Note that some of these
are zero element arrays for compatibility with the C library:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; stat
0

julia&gt; xtc.natoms
2014

juila&gt; xtc.step[]
0

juila&gt; xtc.time[]
0.0f0

juila&gt; xtc.box
3x3 Array{Float32,2}:
 2.47699  0.0      0.0    
 0.0      2.47699  0.0    
 0.0      0.0      2.47699
"><pre><code>julia&gt; stat
0

julia&gt; xtc.natoms
2014

juila&gt; xtc.step[]
0

juila&gt; xtc.time[]
0.0f0

juila&gt; xtc.box
3x3 Array{Float32,2}:
 2.47699  0.0      0.0    
 0.0      2.47699  0.0    
 0.0      0.0      2.47699
</code></pre></div>
<p>The coordinates of the first atom:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; xtc.x[:,1]
3-element Array{Float32,1}:
 1.297
 0.937
 0.483
"><pre><code>juila&gt; xtc.x[:,1]
3-element Array{Float32,1}:
 1.297
 0.937
 0.483
</code></pre></div>
<p>They y-coordinate of the 3rd atom:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; xtc.x[2,3]
0.984f0
"><pre><code>juila&gt; xtc.x[2,3]
0.984f0
</code></pre></div>
<p>The precision:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; xtc.prec[]
1000.0f0
"><pre><code>juila&gt; xtc.prec[]
1000.0f0
</code></pre></div>
<p>Note that the first read is at step 0 with a time of 0.0. That's just due to the way simulations work in Gromacs. Calling "read_xtc" again will read the next frame. Note that "read_xtc" returns a tuple with the first element giving the status of the read and the second giving an xtcType object containing all of the above information. You could simply place the "read_xtc" function in a loop and then do your calculations within the loop (the Gmx module does this but simply saves everything to a gmxType object). Once you're finished reading frames, you can close the xtc file:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; stat = close_xtc(xtc)

julia&gt; stat
0
"><pre><code>julia&gt; stat = close_xtc(xtc)

julia&gt; stat
0
</code></pre></div>
<p>You can also use the "read_ndx" module to probe the index file directly ("read_gmx"
does this when you specify an index file and index groups).</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ndx = read_ndx(&quot;index.ndx&quot;);
"><pre><code>julia&gt; ndx = read_ndx("index.ndx");
</code></pre></div>
<p>"read_ndx" returns a dictionary containing all of the different index groups:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; keys(ndx)
KeyIterator for a Dict{Any,Any} with 8 entries. Keys:
&quot;Water&quot;
&quot;System&quot;
&quot;CH2&quot;
&quot;CH3&quot;
&quot;non-Water&quot;
&quot;Other&quot;
&quot;C&quot;
&quot;SOL&quot;
"><pre><code>juila&gt; keys(ndx)
KeyIterator for a Dict{Any,Any} with 8 entries. Keys:
"Water"
"System"
"CH2"
"CH3"
"non-Water"
"Other"
"C"
"SOL"
</code></pre></div>
<p>Specifying a key returns the locations of those atoms in the xtc file:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; C_locations = ndx[&quot;C&quot;]
4-element Array{Int64,1}:
  1
  5
  8
 11
"><pre><code>julia&gt; C_locations = ndx["C"]
4-element Array{Int64,1}:
  1
  5
  8
 11
</code></pre></div>
<p>You could then access those atoms from an xtcType object:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="juila&gt; import Xtc: xtc_init, read_xtc, close_xtc

julia&gt; stat, xtc = xtc_init(&quot;traj.xtc&quot;);
Initializing traj.xtc
No. of atoms = 2014

juila&gt; stat, xtc = read_xtc(&quot;traj.xtc&quot;)
"><pre><code>juila&gt; import Xtc: xtc_init, read_xtc, close_xtc

julia&gt; stat, xtc = xtc_init("traj.xtc");
Initializing traj.xtc
No. of atoms = 2014

juila&gt; stat, xtc = read_xtc("traj.xtc")
</code></pre></div>
<p>These are the coordinates of just the "C" group from this frame:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; xtc.x[:,C_locations]
3x4 Array{Float32,2}:
 1.297  1.249  1.334  1.269
 0.937  1.021  1.145  1.21 
 0.483  0.601  0.638  0.762
"><pre><code>julia&gt; xtc.x[:,C_locations]
3x4 Array{Float32,2}:
 1.297  1.249  1.334  1.269
 0.937  1.021  1.145  1.21 
 0.483  0.601  0.638  0.762
</code></pre></div>
<p>As I stated earlier, some of these functions would be much more of use in a
script, so check out the examples.</p>
<p>###Analysis
Some basic functions are included in the Utils module. These include adjusting
for the periodic boundary condition (pbc), calculating bond angles
(bond_angle), and calculating dihedral angles (dih_angle).</p>
<p>####Periodic Boundary Condition
Use "pbc", Let's say you're interested in getting the distance between two atoms:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; atom1 = g.x[&quot;C&quot;][1][:,1]
3-element Array{Float32,1}:
 0.443
 4.49 
 3.818

julia&gt; atom2 = g.x[&quot;OW&quot;][1][:,1]
3-element Array{Float32,1}:
 3.273
 0.392
 2.835
"><pre><code>julia&gt; atom1 = g.x["C"][1][:,1]
3-element Array{Float32,1}:
 0.443
 4.49 
 3.818

julia&gt; atom2 = g.x["OW"][1][:,1]
3-element Array{Float32,1}:
 3.273
 0.392
 2.835
</code></pre></div>
<p>Here is the vector between these atoms:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = atom1 - atom2
3-element Array{Float32,1}:
 -2.83 
  4.098
  0.983
"><pre><code>julia&gt; a = atom1 - atom2
3-element Array{Float32,1}:
 -2.83 
  4.098
  0.983
</code></pre></div>
<p>Now to adjust for the periodic boundary condition. Note I'm using the box from
the same frame as the coordinates above.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = pbc(a,g.box[1])
3-element Array{Float64,1}:
  2.1698  
 -0.901803
  0.983   
"><pre><code>julia&gt; a = pbc(a,g.box[1])
3-element Array{Float64,1}:
  2.1698  
 -0.901803
  0.983   
</code></pre></div>
<p>The magnitude is the distance:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; sqrt(dot(a,a))
2.547073301335343
"><pre><code>julia&gt; sqrt(dot(a,a))
2.547073301335343
</code></pre></div>
<p>####Bond Angles
Use "bond_angle". There are several different methods, all of which return
angles in radians:</p>
<p>Using the coordinate of three atoms that form an angle:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle = bond_angle(g.x[&quot;C&quot;][1][:,1],
                          g.x[&quot;C&quot;][1][:,2],
                          g.x[&quot;C&quot;][1][:,3],
                          g.box[1])
2.082081985142061
"><pre><code>julia&gt; angle = bond_angle(g.x["C"][1][:,1],
                          g.x["C"][1][:,2],
                          g.x["C"][1][:,3],
                          g.box[1])
2.082081985142061
</code></pre></div>
<p>Note that I'm just passing xyz coordinates as the first three arguments:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.x[&quot;C&quot;][1][:,1]
3-element Array{Float32,1}:
 0.443
 4.49 
 3.818
"><pre><code>julia&gt; g.x["C"][1][:,1]
3-element Array{Float32,1}:
 0.443
 4.49 
 3.818
</code></pre></div>
<p>Getting all the bond angles of an index group (like a linear alkane) for a
single frame - note the two different methods:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle = bond_angle(g.x[&quot;C&quot;][1],g.box[1])
6-element Array{Float64,1}:
 2.08208
 1.93741
 2.01737
 1.87734
 2.02827
 2.01592

julia&gt; angle = bond_angle(g,&quot;C&quot;,1)
6-element Array{Float64,1}:
 2.08208
 1.93741
 2.01737
 1.87734
 2.02827
 2.01592
"><pre><code>julia&gt; angle = bond_angle(g.x["C"][1],g.box[1])
6-element Array{Float64,1}:
 2.08208
 1.93741
 2.01737
 1.87734
 2.02827
 2.01592

julia&gt; angle = bond_angle(g,"C",1)
6-element Array{Float64,1}:
 2.08208
 1.93741
 2.01737
 1.87734
 2.02827
 2.01592
</code></pre></div>
<p>Getting all the angles of an index group for all frames (in this case octane
using only four frames - note there are two ways to do this):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle = bond_angle(g.x[&quot;C&quot;],g.box)
6x4 Array{Float64,2}:
 2.08208  2.03211  1.96856  1.86377
 1.93741  1.92178  2.01451  1.92411
 2.01737  2.04895  1.93338  1.98445
 1.87734  1.98397  2.00395  1.8616 
 2.02827  2.00471  2.03594  2.04358
 2.01592  1.9744   1.83227  2.0012 

julia&gt; angle = bond_angle(g,&quot;C&quot;)
6x4 Array{Float64,2}:
 2.08208  2.03211  1.96856  1.86377
 1.93741  1.92178  2.01451  1.92411
 2.01737  2.04895  1.93338  1.98445
 1.87734  1.98397  2.00395  1.8616 
 2.02827  2.00471  2.03594  2.04358
 2.01592  1.9744   1.83227  2.0012 
"><pre><code>julia&gt; angle = bond_angle(g.x["C"],g.box)
6x4 Array{Float64,2}:
 2.08208  2.03211  1.96856  1.86377
 1.93741  1.92178  2.01451  1.92411
 2.01737  2.04895  1.93338  1.98445
 1.87734  1.98397  2.00395  1.8616 
 2.02827  2.00471  2.03594  2.04358
 2.01592  1.9744   1.83227  2.0012 

julia&gt; angle = bond_angle(g,"C")
6x4 Array{Float64,2}:
 2.08208  2.03211  1.96856  1.86377
 1.93741  1.92178  2.01451  1.92411
 2.01737  2.04895  1.93338  1.98445
 1.87734  1.98397  2.00395  1.8616 
 2.02827  2.00471  2.03594  2.04358
 2.01592  1.9744   1.83227  2.0012 
</code></pre></div>
<p>And here is the first angle for all of the frames from this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle[1,:]
1x4 Array{Float64,2}:
 2.08208  2.03211  1.96856  1.86377
"><pre><code>julia&gt; angle[1,:]
1x4 Array{Float64,2}:
 2.08208  2.03211  1.96856  1.86377
</code></pre></div>
<p>Here are all of the angles for the first frame:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle[:,1]
6-element Array{Float64,1}:
 2.08208
 1.93741
 2.01737
 1.87734
 2.02827
 2.01592
"><pre><code>julia&gt; angle[:,1]
6-element Array{Float64,1}:
 2.08208
 1.93741
 2.01737
 1.87734
 2.02827
 2.01592
</code></pre></div>
<p>####Dihedral Angles
Use the "dih_angle" function to calculate dihedral angles. There are several
methods. For now here are a few examples. Note that the dihedral angle is
returned in radians.</p>
<p>Using the coordinates of four atoms making up the angle:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle = dih_angle(g.x[&quot;C&quot;][1][:,1],
                     g.x[&quot;C&quot;][1][:,2],
                     g.x[&quot;C&quot;][1][:,3],
                     g.x[&quot;C&quot;][1][:,4],
                     g.box[1])
-1.384181494375928
"><pre><code>julia&gt; angle = dih_angle(g.x["C"][1][:,1],
                     g.x["C"][1][:,2],
                     g.x["C"][1][:,3],
                     g.x["C"][1][:,4],
                     g.box[1])
-1.384181494375928
</code></pre></div>
<p>Using one frame to return all angles in a sequence (in this case all the angles
in octane - note the two different ways to do this):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g.x[&quot;C&quot;][1]
3x8 Array{Float32,2}:
 0.443  0.549  0.675  0.646  0.773  0.728  0.827  0.767
 4.49   4.461  4.547  4.685  4.775  4.891  4.929  0.017
 3.818  3.926  3.932  4.003  4.032  4.125  4.242  4.354

julia&gt; angle = dih_angle(g.x[&quot;C&quot;][1], g.box[1])
5-element Array{Float64,1}:
 -1.38418
 -3.00861
  2.95432
 -2.4199 
  2.8746 

julia&gt; angle = dih_angle(g,&quot;C&quot;,1)
5-element Array{Float64,1}:
 -1.38418
 -3.00861
  2.95432
 -2.4199 
  2.8746 
"><pre><code>julia&gt; g.x["C"][1]
3x8 Array{Float32,2}:
 0.443  0.549  0.675  0.646  0.773  0.728  0.827  0.767
 4.49   4.461  4.547  4.685  4.775  4.891  4.929  0.017
 3.818  3.926  3.932  4.003  4.032  4.125  4.242  4.354

julia&gt; angle = dih_angle(g.x["C"][1], g.box[1])
5-element Array{Float64,1}:
 -1.38418
 -3.00861
  2.95432
 -2.4199 
  2.8746 

julia&gt; angle = dih_angle(g,"C",1)
5-element Array{Float64,1}:
 -1.38418
 -3.00861
  2.95432
 -2.4199 
  2.8746 
</code></pre></div>
<p>Using all frames to get all angles (in this case all frames of all carbons in octane;
I only read in the first four frames into "g" using "read_gmx"). Again, note the
two different ways of doing this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle = dih_angle(g.x[&quot;C&quot;],g.box)
5x4 Array{Float64,2}:
 -1.38418  -1.26239  -1.16925  -1.2465 
 -3.00861  -2.95298   3.00907  -2.70884
  2.95432   2.70807  -2.78729   3.09729
 -2.4199    2.92933   3.04705   2.89244
  2.8746    1.48004   1.14063   1.23341

julia&gt; angle = dih_angle(g,&quot;C&quot;)
5x4 Array{Float64,2}:
 -1.38418  -1.26239  -1.16925  -1.2465 
 -3.00861  -2.95298   3.00907  -2.70884
  2.95432   2.70807  -2.78729   3.09729
 -2.4199    2.92933   3.04705   2.89244
  2.8746    1.48004   1.14063   1.23341
"><pre><code>julia&gt; angle = dih_angle(g.x["C"],g.box)
5x4 Array{Float64,2}:
 -1.38418  -1.26239  -1.16925  -1.2465 
 -3.00861  -2.95298   3.00907  -2.70884
  2.95432   2.70807  -2.78729   3.09729
 -2.4199    2.92933   3.04705   2.89244
  2.8746    1.48004   1.14063   1.23341

julia&gt; angle = dih_angle(g,"C")
5x4 Array{Float64,2}:
 -1.38418  -1.26239  -1.16925  -1.2465 
 -3.00861  -2.95298   3.00907  -2.70884
  2.95432   2.70807  -2.78729   3.09729
 -2.4199    2.92933   3.04705   2.89244
  2.8746    1.48004   1.14063   1.23341
</code></pre></div>
<p>The first angle in all frames:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle[1,:]
1x4 Array{Float64,2}:
 -1.38418  -1.26239  -1.16925  -1.2465
"><pre><code>julia&gt; angle[1,:]
1x4 Array{Float64,2}:
 -1.38418  -1.26239  -1.16925  -1.2465
</code></pre></div>
<p>All angles in the first frame:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; angle[:,1]
5-element Array{Float64,1}:
 -1.38418
 -3.00861
  2.95432
 -2.4199 
  2.8746 
"><pre><code>julia&gt; angle[:,1]
5-element Array{Float64,1}:
 -1.38418
 -3.00861
  2.95432
 -2.4199 
  2.8746 
</code></pre></div>
<p>####Radial Distribution Function</p>
<p>First read in the two groups with "read_gmx". In this case it is the carbon of a
single methane and the water oxygens:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; gmx = read_gmx(&quot;.julia/v0.3/MolecularDynamics/examples/rdf/traj.xtc&quot;,&quot;.julia/v0.3/MolecularDynamics/examples/rdf/index.ndx&quot;,&quot;C&quot;,&quot;OW&quot;);
"><pre><code>julia&gt; gmx = read_gmx(".julia/v0.3/MolecularDynamics/examples/rdf/traj.xtc",".julia/v0.3/MolecularDynamics/examples/rdf/index.ndx","C","OW");
</code></pre></div>
<p>Then pass the entire gmxType object and the name of the two groups to be used.
You'll receive a warning that this function is only for constant volume, cubic
box simulations at this point..</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = rdf(gmx,&quot;C&quot;,&quot;OW&quot;);
"><pre><code>julia&gt; g = rdf(gmx,"C","OW");
</code></pre></div>
<p>Optionally you can select the binwidth (default: 0.002 nm) and the exclusion distance (default: 0.1 nm) for not
counting those atoms that are to close (and part of the same molecule):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = rdf(gmx,&quot;C&quot;,&quot;OW&quot;,0.002,0.1);
"><pre><code>julia&gt; g = rdf(gmx,"C","OW",0.002,0.1);
</code></pre></div>
<p>If you are just using one group (say you have several methanes and you want to
find the distribution between them), just pass one group name:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = rdf(gmx,&quot;C&quot;);
"><pre><code>julia&gt; g = rdf(gmx,"C");
</code></pre></div>
<p>A tuple with the distances corresponding to the bins and the distribution is
returned. To plot quickly you can use the "Gaston" package:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using Gaston

julia&gt; plot(g[1],g[2],&quot;title&quot;,&quot;&quot;,&quot;xlabel&quot;,&quot;r (nm)&quot;,&quot;ylabel&quot;,&quot;g(r)&quot;)
"><pre><code>julia&gt; using Gaston

julia&gt; plot(g[1],g[2],"title","","xlabel","r (nm)","ylabel","g(r)")
</code></pre></div>
<p>For the methane-methane radial distribution function from a simulation I did (10
methanes in water), the result looks like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/wesbarnett/MolecularDynamics.jl/master/images/rdf.png"><img src="https://raw.githubusercontent.com/wesbarnett/MolecularDynamics.jl/master/images/rdf.png" alt="&quot;Radial Distribution Function&quot;" style="max-width:100%;"></a></p>
<p>###Using Other Packages</p>
<h4><a id="user-content-dihedral-angle-distribution" class="anchor" aria-hidden="true" href="#dihedral-angle-distribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dihedral Angle Distribution</h4>
<p>As an example on how to use another package to help analyze some data, you could
use the Gaston package to plot a histogram of the dihedral angles of a molecule. For example, here is the distribution of butane
in water from a simulation I did at 293 K:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; g = read_gmx(&quot;prd.xtc&quot;,&quot;index.ndx&quot;,&quot;C&quot;);
First frame to save: 1
Last frame to save: 100000
Saving every frame.
Initializing /home/james/testing/2_prd_313.xtc
No. of atoms = 16494
Saving the following index groups:
  C (4 elements)
Saved 15001 frames.0

julia&gt; a = dih_angle(g.x[&quot;C&quot;],g.box);
"><pre><code>julia&gt; g = read_gmx("prd.xtc","index.ndx","C");
First frame to save: 1
Last frame to save: 100000
Saving every frame.
Initializing /home/james/testing/2_prd_313.xtc
No. of atoms = 16494
Saving the following index groups:
  C (4 elements)
Saved 15001 frames.0

julia&gt; a = dih_angle(g.x["C"],g.box);
</code></pre></div>
<p>This just shifts everything below 0 to be from pi to 2pi:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = map((x) -&gt; if(x &lt; 0.0) x += 2pi else x = x end, a);
"><pre><code>julia&gt; a = map((x) -&gt; if(x &lt; 0.0) x += 2pi else x = x end, a);
</code></pre></div>
<p>Change from radians to degrees:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = map((x) -&gt; x * 180.0/pi, a);
"><pre><code>julia&gt; a = map((x) -&gt; x * 180.0/pi, a);
</code></pre></div>
<p>Mean, median, and standard deviation of first angle (included in Standard
Library, so no need to add additional packages):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; mean(a)
182.7592278075726

julia&gt; median(a)
181.339154595044

julia&gt; std(a)
91.9910998654072
"><pre><code>julia&gt; mean(a)
182.7592278075726

julia&gt; median(a)
181.339154595044

julia&gt; std(a)
91.9910998654072
</code></pre></div>
<p>Install Gaston if you don't already have it:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;Gaston&quot;)
"><pre><code>julia&gt; Pkg.add("Gaston")
</code></pre></div>
<p>You'll also need gnuplot installed.
Now to plot the histogram:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using Gaston

julia&gt; histogram(a[1,:],&quot;bins&quot;,360,&quot;xlabel&quot;,&quot;Angle&quot;,&quot;ylabel&quot;,&quot;P&quot;,&quot;norm&quot;,1,&quot;xrange&quot;,&quot;[0:360]&quot;,&quot;title&quot;,&quot;Dihedral Angle Distribution&quot;)
"><pre><code>julia&gt; using Gaston

julia&gt; histogram(a[1,:],"bins",360,"xlabel","Angle","ylabel","P","norm",1,"xrange","[0:360]","title","Dihedral Angle Distribution")
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/wesbarnett/MolecularDynamics.jl/master/images/dih.png"><img src="https://raw.githubusercontent.com/wesbarnett/MolecularDynamics.jl/master/images/dih.png" alt="&quot;Dihedral angle distribution&quot;" style="max-width:100%;"></a></p>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>Please feel free to contribute to this project by forking the source code and then
initiating pull requests. The development version of the project is in the branch "develop." Stable
versions of the project are in the branch "master" and tagged with release
numbers.</p>
<p>A few tests are done to see if a build is passing. Here is the develop branch
status:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6e741b349dbbc2ba957423d06df20d8bd2428e48b0e1f422ffafc7d9e0970de2/68747470733a2f2f7472617669732d63692e6f72672f7765736261726e6574742f4d6f6c6563756c617244796e616d6963732e6a6c2e7376673f6272616e63683d646576656c6f70"><img src="https://camo.githubusercontent.com/6e741b349dbbc2ba957423d06df20d8bd2428e48b0e1f422ffafc7d9e0970de2/68747470733a2f2f7472617669732d63692e6f72672f7765736261726e6574742f4d6f6c6563756c617244796e616d6963732e6a6c2e7376673f6272616e63683d646576656c6f70" alt="&quot;status&quot;" data-canonical-src="https://travis-ci.org/wesbarnett/MolecularDynamics.jl.svg?branch=develop" style="max-width:100%;"></a></p>
</article></div>