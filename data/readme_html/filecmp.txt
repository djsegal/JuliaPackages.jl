<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-filecmp" class="anchor" aria-hidden="true" href="#filecmp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FileCmp</h1>
<p dir="auto"><a href="https://github.com/jlapeyre/FileCmp.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jlapeyre/FileCmp.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jlapeyre/FileCmp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62022530dc9a1687d2e40cb8ab40e9e29796457d1498fd7c29fa5932e1380dfc/68747470733a2f2f636f6465636f762e696f2f67682f6a6c6170657972652f46696c65436d702e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jlapeyre/FileCmp.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://github.com/aviatesk/JET.jl"><img src="https://camo.githubusercontent.com/3de76230f538a94a3ea8c5dc7c7abb94992d39a234fbb796184101d790424d9e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a45542e6a6c2d2545322539432538382545462542382538462d253233616134343434" alt="JET QA" data-canonical-src="https://img.shields.io/badge/JET.jl-%E2%9C%88%EF%B8%8F-%23aa4444" style="max-width: 100%;"></a></p>
<p dir="auto"><code>FileCmp</code> provides the function <code>filecmp</code>, which returns <code>true</code> if two files are equal byte by byte.</p>
<p dir="auto">This code is adapted from an example in <a href="https://discourse.julialang.org/t/how-to-obtain-the-result-of-a-diff-between-2-files-in-a-loop/23784/3" rel="nofollow">this Discourse post</a>.</p>
<p dir="auto">Only <code>filecmp</code> is exported.</p>
<h4 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FileCmp
julia&gt; filecmp(&quot;path1&quot;, &quot;path2&quot;)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FileCmp
julia<span class="pl-k">&gt;</span> <span class="pl-c1">filecmp</span>(<span class="pl-s"><span class="pl-pds">"</span>path1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>path2<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span></pre></div>
<h4 dir="auto"><a id="user-content-function-filecmp" class="anchor" aria-hidden="true" href="#function-filecmp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>function <code>filecmp</code></h4>
<p dir="auto"><code>filecmp</code> is similar to the Python function
<a href="https://docs.python.org/3/library/filecmp.html" rel="nofollow"><code>filecmp.cmp</code></a>
but provides more information, as does the Unix/Linux/GNU
command <a href="https://www.gnu.org/software/diffutils/" rel="nofollow"><code>cmp</code></a>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    filecmp(path1::AbstractString, path2::AbstractString, bufsize=0; info=Val(false); limit=0)
    filecmp(io1::IO, io2::IO, bufsize=0; info=Val(false), limit=0)"><pre class="notranslate"><code>    filecmp(path1::AbstractString, path2::AbstractString, bufsize=0; info=Val(false); limit=0)
    filecmp(io1::IO, io2::IO, bufsize=0; info=Val(false), limit=0)
</code></pre></div>
<ul dir="auto">
<li>Return <code>true</code> if <code>path1</code> and <code>path2</code> are equal byte by byte. Otherwise return <code>false</code>.</li>
<li>If either file does not exist an exception is thrown.</li>
<li>If <code>info</code> is <code>true</code>, then return an instance of <code>FileCmp.Info</code> instead of <code>Bool</code>.
The instance of <code>FileCmp.Info</code> is then queried with functions <code>files_equal</code>, <code>bytes_read</code>, and <code>got_eof</code>
to get information similar to Unix <code>cmp</code>.</li>
<li>The keyword argument <code>info</code> may be one of <code>true</code>, <code>false</code>, <code>Val(true)</code>, or
<code>Val(false)</code>. The latter two are supported in case the application requires
the return type to be inferrable.</li>
<li>If <code>limit</code> is greater than zero, then read at most <code>limit</code> bytes.</li>
<li>The files are read into buffers of <code>bufsize</code> bytes. If <code>bufsize=0</code>, then a default is used.</li>
</ul>
<h4 dir="auto"><a id="user-content-function-files_equal" class="anchor" aria-hidden="true" href="#function-files_equal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>function <code>files_equal</code></h4>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    FileCmp.files_equal(info::FileCmp.Info)"><pre class="notranslate"><code>    FileCmp.files_equal(info::FileCmp.Info)
</code></pre></div>
<p dir="auto">Return <code>true</code> if the files compared to produce <code>info</code> are the byte-for-byte equal.</p>
<p dir="auto">The following is always true:
<code>filecmp(p1, p2; info=false) == files_equal(filecmp(p1, p2; info=true))</code></p>
<h4 dir="auto"><a id="user-content-function-got_eof" class="anchor" aria-hidden="true" href="#function-got_eof"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>function <code>got_eof</code></h4>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="got_eof(info::FileCmp.Info)::Int"><pre class="notranslate"><code>got_eof(info::FileCmp.Info)::Int
</code></pre></div>
<p dir="auto">Return <code>-1</code> if first file is a prefix of the second one. That is,
an EOF occured on the first file, but not the second, and all compared bytes were equal.
Return <code>1</code> if the reverse happened. Otherwise, return <code>0</code>.</p>
<h4 dir="auto"><a id="user-content-function-bytes_read" class="anchor" aria-hidden="true" href="#function-bytes_read"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>function <code>bytes_read</code></h4>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="bytes_read(info::Info)"><pre class="notranslate"><code>bytes_read(info::Info)
</code></pre></div>
<p dir="auto">The number of bytes read from each file before either differing bytes were found,
or EOF on one or both files.</p>
</article></div>