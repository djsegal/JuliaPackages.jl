<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-unitfulangles" class="anchor" aria-hidden="true" href="#unitfulangles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UnitfulAngles</h1>
<p><a href="https://ci.appveyor.com/project/yakir12/unitfulangles-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f0436ae162e3b48d7cdc5d9e39bdbb199a2b39be9ed63e039c7c64c5f0daf2e4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f76686a6f6c716a7034783067346b68693f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/vhjolqjp4x0g4khi?svg=true" style="max-width:100%;"></a>
<a href="https://travis-ci.org/yakir12/UnitfulAngles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1855fbda3aeb236cf46997631d53ec43cff9f3086379aff4327335795e8ecb19/68747470733a2f2f7472617669732d63692e6f72672f79616b697231322f556e697466756c416e676c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/yakir12/UnitfulAngles.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/yakir12/UnitfulAngles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b9319eab28306f040e0608c610ea7349fe25ad25679ad8476f1032693607b771/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f79616b697231322f556e697466756c416e676c65732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/yakir12/UnitfulAngles.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>A supplemental units package for <a href="https://julialang.org" rel="nofollow">Julia</a>'s <a href="https://github.com/ajkeller34/Unitful.jl">Unitful.jl</a>.</p>
<p><code>UnitfulAngles.jl</code> introduces all the angular units found in Wikipedia's articles <a href="https://en.wikipedia.org/wiki/Angle#Units" rel="nofollow">Angle § Units</a>, <a href="https://en.wikipedia.org/wiki/Angular_unit" rel="nofollow">Angular unit</a> and <a href="https://en.wikipedia.org/wiki/Circular_sector" rel="nofollow">Circular sector</a>.</p>
<p>In addition to the <code>Radian</code> and <code>Degree</code> units already available in <code>Unitful.jl</code>, the following units are introduced: <code>DoubleTurn</code>, <code>Turn</code>, <code>HalfTurn</code>, <code>Quadrant</code>, <code>Sextant</code>, <code>Octant</code>, <code>ClockPosition</code>, <code>HourAngle</code>, <code>CompassPoint</code>, <code>Hexacontade</code>, <code>BinaryRadian</code>, <code>DiameterPart</code>, <code>Gradian</code>, <code>Arcminute</code>, and <code>Arcsecond</code>.</p>
<p>Because all the trigonometric functions work correctly regardless of the type of their argument, there is no need to convert between the units. However, to specifically convert one unit to the other, use <code>Unitful.jl</code>'s <code>uconvert</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Unitful

julia&gt; uconvert(u&quot;clockPosition&quot;, 128u&quot;brad&quot;)
6//1 clockPosition
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> <span class="pl-c1">uconvert</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>clockPosition<span class="pl-pds">"</span></span>, <span class="pl-c1">128</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>brad<span class="pl-pds">"</span></span>)
<span class="pl-c1">6</span><span class="pl-k">//</span><span class="pl-c1">1</span> clockPosition</pre></div>
<h2><a id="user-content-special-features" class="anchor" aria-hidden="true" href="#special-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Special features</h2>
<ul>
<li>All the trigonometric functions (<code>sin</code>, <code>sinc</code>, <code>cos</code>, <code>cosc</code>, <code>tan</code>, <code>sec</code>, <code>csc</code>, and <code>cot</code>) work as expected:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using UnitfulAngles

julia&gt; import UnitfulAngles: °, rad, octant

julia&gt; sin(30°)
0.5

julia&gt; cos(π*rad)
-1.0

julia&gt; tan(1octant)
1.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnitfulAngles

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> UnitfulAngles<span class="pl-k">:</span> °, rad, octant

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sin</span>(<span class="pl-c1">30</span>°)
<span class="pl-c1">0.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cos</span>(π<span class="pl-k">*</span>rad)
<span class="pl-k">-</span><span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tan</span>(<span class="pl-c1">1</span>octant)
<span class="pl-c1">1.0</span></pre></div>
</li>
<li>In order to get inverse functions (<code>acos</code>, <code>acot</code>, <code>acsc</code>, <code>asec</code>, <code>asin</code>, <code>atan</code>, and <code>atan2</code>) to return a specific unit, specify the desired unit as the first argument:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import UnitfulAngles.turn

julia&gt; asin(turn, 1)
0.25 τ
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> UnitfulAngles<span class="pl-k">.</span>turn

julia<span class="pl-k">&gt;</span> <span class="pl-c1">asin</span>(turn, <span class="pl-c1">1</span>)
<span class="pl-c1">0.25</span> τ</pre></div>
</li>
<li>As a bonus, you can also convert between an angle and <code>Dates.Time</code>:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; convert(Dates.Time, 200u&quot;grad&quot;)
12:00:00

julia&gt; convert(u&quot;sextant&quot;, Dates.Time(4,0,0))
1.0 sextant
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Dates<span class="pl-k">.</span>Time, <span class="pl-c1">200</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>grad<span class="pl-pds">"</span></span>)
<span class="pl-c1">12</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>sextant<span class="pl-pds">"</span></span>, Dates<span class="pl-k">.</span><span class="pl-c1">Time</span>(<span class="pl-c1">4</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">1.0</span> sextant</pre></div>
</li>
</ul>
</article></div>