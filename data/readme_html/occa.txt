<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-occajl" class="anchor" aria-hidden="true" href="#occajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OCCA.jl</h1>
<p dir="auto">OCCA is a cross platform single-instruction-multiple-data (<a href="http://en.wikipedia.org/wiki/SIMD" rel="nofollow">SIMD</a>)
threading library that is
retargetable to multiple backends such as pthreads, openmp, opencl, and cuda. OCCA.jl is a Julia interface into OCCA.
The main OCCA repository can be found
<a href="https://github.com/tcew/OCCA2">here</a>.</p>
<p dir="auto">#Installation and testing.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;OCCA&quot;);
#This takes a minute because no precompiled OCCA binaries exist.
#OCCA will build with no parallel backends by default because 
#reliable backend detection is under development.
#To rebuild with e.g. opencl and cuda you would run
using OCCA;
OCCA.rebuildwith!(opencl=true,cuda=true);

#To run tests for all compiled backends, run:
Pkg.test(&quot;OCCA&quot;);

#If a backend is not compiled, that test will simply pass without doing anything.
#OCCA will default to serial mode if no backend is installed, so the tests
#still provide some information about correctness of the test kernels (ignoring
#parallel issues such as race conditions and deadlocks)

"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>OCCA<span class="pl-pds">"</span></span>);
<span class="pl-c"><span class="pl-c">#</span>This takes a minute because no precompiled OCCA binaries exist.</span>
<span class="pl-c"><span class="pl-c">#</span>OCCA will build with no parallel backends by default because </span>
<span class="pl-c"><span class="pl-c">#</span>reliable backend detection is under development.</span>
<span class="pl-c"><span class="pl-c">#</span>To rebuild with e.g. opencl and cuda you would run</span>
<span class="pl-k">using</span> OCCA;
OCCA<span class="pl-k">.</span><span class="pl-c1">rebuildwith!</span>(opencl<span class="pl-k">=</span><span class="pl-c1">true</span>,cuda<span class="pl-k">=</span><span class="pl-c1">true</span>);

<span class="pl-c"><span class="pl-c">#</span>To run tests for all compiled backends, run:</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>OCCA<span class="pl-pds">"</span></span>);

<span class="pl-c"><span class="pl-c">#</span>If a backend is not compiled, that test will simply pass without doing anything.</span>
<span class="pl-c"><span class="pl-c">#</span>OCCA will default to serial mode if no backend is installed, so the tests</span>
<span class="pl-c"><span class="pl-c">#</span>still provide some information about correctness of the test kernels (ignoring</span>
<span class="pl-c"><span class="pl-c">#</span>parallel issues such as race conditions and deadlocks)</span>

</pre></div>
<p dir="auto">#An example script.</p>
<h2 dir="auto"><a id="user-content-addvectorsokl" class="anchor" aria-hidden="true" href="#addvectorsokl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>addVectors.okl</h2>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="kernel void addVectors(const int entries,
                       const float *a,
                       const float *b,
                       float *ab){
  for(int group = 0; group &lt; ((entries + 15) / 16); ++group; outer0){
    for(int item = 0; item &lt; 16; ++item; inner0){
      const int N = (item + (16 * group));

      if(N &lt; entries)
        ab[N] = a[N] + b[N];
    }
  }
}"><pre>kernel <span class="pl-k">void</span> <span class="pl-en">addVectors</span>(<span class="pl-k">const</span> <span class="pl-k">int</span> entries,
                       <span class="pl-k">const</span> <span class="pl-k">float</span> *a,
                       <span class="pl-k">const</span> <span class="pl-k">float</span> *b,
                       <span class="pl-k">float</span> *ab){
  <span class="pl-k">for</span>(<span class="pl-k">int</span> group = <span class="pl-c1">0</span>; group &lt; ((entries + <span class="pl-c1">15</span>) / <span class="pl-c1">16</span>); ++group; outer0){
    <span class="pl-k">for</span>(<span class="pl-k">int</span> item = <span class="pl-c1">0</span>; item &lt; <span class="pl-c1">16</span>; ++item; inner0){
      <span class="pl-k">const</span> <span class="pl-k">int</span> N = (item + (<span class="pl-c1">16</span> * group));

      <span class="pl-k">if</span>(N &lt; entries)
        ab[N] = a[N] + b[N];
    }
  }
}</pre></div>
<p dir="auto">##advectors.jl</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
    
    infostring   = &quot;mode = OpenMP  , schedule = compact, chunk = 10&quot;;

    entries = 5

    device = OCCA.Device(infostring);

    a  = Float32[1 - i for i in 1:entries]
    b  = Float32[i     for i in 1:entries]
    ab = Array(Float32,(length(a),));

    correctvals = [1.0 for i in 1:entries];

    o_a  = OCCA.malloc(device, a);
    o_b  = OCCA.malloc(device, b);
    o_ab = OCCA.malloc(device, ab);

    addvectors = OCCA.buildkernel(device,&quot;addVectors.okl&quot;,&quot;addVectors&quot;)

    OCCA.runkernel!(addvectors,entries,o_a,o_b,o_ab)

    OCCA.memcpy!(ab, o_ab)



"><pre>    
    infostring   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mode = OpenMP  , schedule = compact, chunk = 10<span class="pl-pds">"</span></span>;

    entries <span class="pl-k">=</span> <span class="pl-c1">5</span>

    device <span class="pl-k">=</span> OCCA<span class="pl-k">.</span><span class="pl-c1">Device</span>(infostring);

    a  <span class="pl-k">=</span> Float32[<span class="pl-c1">1</span> <span class="pl-k">-</span> i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>entries]
    b  <span class="pl-k">=</span> Float32[i     <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>entries]
    ab <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Float32,(<span class="pl-c1">length</span>(a),));

    correctvals <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>entries];

    o_a  <span class="pl-k">=</span> OCCA<span class="pl-k">.</span><span class="pl-c1">malloc</span>(device, a);
    o_b  <span class="pl-k">=</span> OCCA<span class="pl-k">.</span><span class="pl-c1">malloc</span>(device, b);
    o_ab <span class="pl-k">=</span> OCCA<span class="pl-k">.</span><span class="pl-c1">malloc</span>(device, ab);

    addvectors <span class="pl-k">=</span> OCCA<span class="pl-k">.</span><span class="pl-c1">buildkernel</span>(device,<span class="pl-s"><span class="pl-pds">"</span>addVectors.okl<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>addVectors<span class="pl-pds">"</span></span>)

    OCCA<span class="pl-k">.</span><span class="pl-c1">runkernel!</span>(addvectors,entries,o_a,o_b,o_ab)

    OCCA<span class="pl-k">.</span><span class="pl-c1">memcpy!</span>(ab, o_ab)



</pre></div>
<h1 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>#Known issues</h1>
<p dir="auto">-The build script does not work for Windows, this is under development.
-If OCCA kernel file uses shared memory and you target OpenCL+CPU, it will crash. This appears to be an OpenCL problem and not an OCCA problem.</p>
<p dir="auto">#Contributing</p>
<p dir="auto">##Contributing code
Fork this repository on Github, make desired changes, and submit pull request.</p>
<p dir="auto">##Helping with tests and builds
It would be enormously helpful if issues could be opened
with any build or test failures, along with the specs of the machines
on which the builds or tests failed.</p>
<p dir="auto">#Editor Issues
.OKL files have a nearly-C grammar, and so most syntax highlighting modules designed for vanilla C will also
do a decent job highlighting .OKL files.</p>
</article></div>