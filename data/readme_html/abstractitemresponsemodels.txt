<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-abstractitemresponsemodelsjl" class="anchor" aria-hidden="true" href="#abstractitemresponsemodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AbstractItemResponseModels.jl</h1>
<p dir="auto"><a href="https://JuliaPsychometrics.github.io/AbstractItemResponseModels.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaPsychometrics.github.io/AbstractItemResponseModels.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaPsychometrics/AbstractItemResponseModels.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/JuliaPsychometrics/AbstractItemResponseModels.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPsychometrics/AbstractItemResponseModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fc0d595d79928abd75875eb0b575880ae03f9e1a91adf77dcf726013cf368a28/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696150737963686f6d6574726963732f41627374726163744974656d526573706f6e73654d6f64656c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaPsychometrics/AbstractItemResponseModels.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a generic interface for item response models in Julia. It is targeted
at developers of item response model packages. Packages sucessfully implementing the
AbstractItemResponseModels interface will profit from features within <a href="https://github.com/JuliaPsychometrics/">JuliaPsychometrics</a>
such as plotting for their item response models (e.g. via <a href="https://github.com/JuliaPsychometrics/ItemResponsePlots.jl">ItemResponsePlots.jl</a>).</p>
<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<p dir="auto">Creating a package using AbstractItemResponseModels requires that</p>
<ol dir="auto">
<li>AbstractItemResponseModels.jl is added as a package dependency</li>
<li>the AbstractItemResponseModels interface is implemented as described below</li>
<li>[optional] the interface tested (also described below)</li>
</ol>
<h3 dir="auto"><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types</h3>
<p dir="auto">AbstractItemResponseModels offers a single abstract type defining an item response model.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type ItemResponseModel end"><pre><span class="pl-k">abstract type</span> ItemResponseModel <span class="pl-k">end</span></pre></div>
<p dir="auto">All concrete implementations of item response models must inherit from this abstract type, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct MyFancyIRTModel &lt;: ItemResponseModel end"><pre><span class="pl-k">struct</span> MyFancyIRTModel <span class="pl-k">&lt;:</span> <span class="pl-c1">ItemResponseModel</span> <span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-traits" class="anchor" aria-hidden="true" href="#traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Traits</h3>
<p dir="auto">Item response models have traits attached to them allowing for flexible dispatch.
AbstractItemResponseModels defines a total of 4 such traits.</p>
<h4 dir="auto"><a id="user-content-response-type" class="anchor" aria-hidden="true" href="#response-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Response type</h4>
<p dir="auto">Each item response model must define its response type.
The response type sets the plausible values that the response data can take.</p>
<p dir="auto">The available response types are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type Dichotomous &lt;: ResponseType end
abstract type Nominal &lt;: ResponseType end
abstract type Ordinal &lt;: ResponseType end
abstract type Continuous &lt;: ResponseType end"><pre><span class="pl-k">abstract type</span> Dichotomous <span class="pl-k">&lt;:</span> <span class="pl-c1">ResponseType</span> <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> Nominal <span class="pl-k">&lt;:</span> <span class="pl-c1">ResponseType</span> <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> Ordinal <span class="pl-k">&lt;:</span> <span class="pl-c1">ResponseType</span> <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> Continuous <span class="pl-k">&lt;:</span> <span class="pl-c1">ResponseType</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">To define a response type for an item response model, implement the <code>response_type</code> function
for your model such as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="response_type(::Type{MyFancyIRTModel}) = Dichotomous"><pre><span class="pl-en">response_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyFancyIRTModel}</span>) <span class="pl-k">=</span> Dichotomous</pre></div>
<h4 dir="auto"><a id="user-content-dimensionality" class="anchor" aria-hidden="true" href="#dimensionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dimensionality</h4>
<p dir="auto">An item response model defines the dimensionality of both item and person parameters.
The dimensionality can be univariate or multivariate.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type Univariate &lt;: Dimensionality end
abstract type Multivariate &lt;: Dimensionality end"><pre><span class="pl-k">abstract type</span> Univariate <span class="pl-k">&lt;:</span> <span class="pl-c1">Dimensionality</span> <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> Multivariate <span class="pl-k">&lt;:</span> <span class="pl-c1">Dimensionality</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">Define the person and item dimensionality of your model by specifying the <code>person_dimensionality</code>
and <code>item_dimensionality</code> function respectively.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="person_dimensionality(::Type{MyFancyIRTModel}) = Multivariate
item_dimensionality(::Type{MyFancyIRTModel}) = Univariate"><pre><span class="pl-en">person_dimensionality</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyFancyIRTModel}</span>) <span class="pl-k">=</span> Multivariate
<span class="pl-en">item_dimensionality</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyFancyIRTModel}</span>) <span class="pl-k">=</span> Univariate</pre></div>
<h4 dir="auto"><a id="user-content-estimation-type" class="anchor" aria-hidden="true" href="#estimation-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Estimation type</h4>
<p dir="auto">Defining an estimation type allows dispatching based on the type of parameter estimation in
an item response model. AbstractItemResponseModels differentiates between point estimation
(e.g. Maximum Likelihood Estimation) and sampling based estimation such as Markov Chain Monte
Carlo Methods).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type PointEstimate &lt;: EstimationType end
abstract type SamplingEstimate &lt;: EstimationType end"><pre><span class="pl-k">abstract type</span> PointEstimate <span class="pl-k">&lt;:</span> <span class="pl-c1">EstimationType</span> <span class="pl-k">end</span>
<span class="pl-k">abstract type</span> SamplingEstimate <span class="pl-k">&lt;:</span> <span class="pl-c1">EstimationType</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">The estimation type can be defined for a model via the <code>estimation_type</code> function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="estimation_type(::Type{MyFancyIRTModel}) = PointEstimate"><pre><span class="pl-en">estimation_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyFancyIRTModel}</span>) <span class="pl-k">=</span> PointEstimate</pre></div>
<h3 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h3>
<p dir="auto">Implementing the AbstractItemResponseModels interface requires defining methods for the
generic functions provided in this package.</p>
<p dir="auto">First a item response function must be provided by extending the <code>irf</code> generic function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="irf(model::ItemResponseModel, theta, i, y)"><pre><span class="pl-c1">irf</span>(model<span class="pl-k">::</span><span class="pl-c1">ItemResponseModel</span>, theta, i, y)</pre></div>
<p dir="auto">Further an item information function must be defined,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="iif(model::ItemResponseModel, theta, i, y)"><pre><span class="pl-c1">iif</span>(model<span class="pl-k">::</span><span class="pl-c1">ItemResponseModel</span>, theta, i, y)</pre></div>
<p dir="auto">An item response model is fitted to data by a <code>fit</code> function,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fit(::Type{&lt;:ItemResponseModel}, data, args...; kwargs...)"><pre><span class="pl-c1">fit</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:ItemResponseModel}</span>, data, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p dir="auto">If applicable, an expected score function and an information function must be provided.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="expected_score(model::ItemResponseModel, theta[, is]; scoring_function)
information(model::ItemResponseModel, theta[, is]; scoring_function)"><pre><span class="pl-c1">expected_score</span>(model<span class="pl-k">::</span><span class="pl-c1">ItemResponseModel</span>, theta[, is]; scoring_function)
<span class="pl-c1">information</span>(model<span class="pl-k">::</span><span class="pl-c1">ItemResponseModel</span>, theta[, is]; scoring_function)</pre></div>
<h2 dir="auto"><a id="user-content-interface-tests" class="anchor" aria-hidden="true" href="#interface-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface Tests</h2>
<p dir="auto">AbstractItemResponseModels provides standardized testing of the interface in a separate
module <code>Tests</code>.</p>
<p dir="auto">To test if your implementation of the interface is correct, add the <code>test_interface</code> function
to your <code>test/runtests.jl</code> file as in the example below.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MyFancyIRTPackage
using Test
using AbstractItemResponseModels.Tests

@testset &quot;MyFancyIRTPackage&quot; begin
    test_interface(MyFancyIRTModel, args...; kwargs...) 
    # additional unit tests...
end"><pre><span class="pl-k">using</span> MyFancyIRTPackage
<span class="pl-k">using</span> Test
<span class="pl-k">using</span> AbstractItemResponseModels<span class="pl-k">.</span>Tests

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>MyFancyIRTPackage<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">test_interface</span>(MyFancyIRTModel, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) 
    <span class="pl-c"><span class="pl-c">#</span> additional unit tests...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">If you implement multiple models in your package, make sure to call <code>test_interface</code> for all
model types. An example of this can be seen in the <a href="https://github.com/JuliaPsychometrics/RaschModels.jl/blob/main/test/test_interface.jl">RaschModels.jl</a> package.</p>
</article></div>