<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graphdatasets" class="anchor" aria-hidden="true" href="#graphdatasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GraphDatasets</h1>


<p dir="auto"><a href="https://github.com/simonschoelly/GraphDatasets.jl/actions"><img src="https://github.com/simonschoelly/GraphDatasets.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/simonschoelly/GraphDatasets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cafccda9d78a14c1061c71d6c79f7a2c4382c60b862cae01cecd1c553cd607ac/68747470733a2f2f636f6465636f762e696f2f67682f73696d6f6e7363686f656c6c792f477261706844617461736574732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/simonschoelly/GraphDatasets.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>GraphDatasets.jl</em> is a package for downloading and working with graph datasets. It currently provides the
ability to download some of the datasets from <a href="https://chrsmrrs.github.io/datasets/" rel="nofollow">graphlearning.io</a>.</p>
<h2 dir="auto"><a id="user-content-quick-example" class="anchor" aria-hidden="true" href="#quick-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Load GraphDatasets
julia&gt; using GraphDatasets

# List all available datasets
julia&gt; list_datasets()
TUDatasets.AIDSDataset
TUDatasets.AspirinDataset
TUDatasets.BZRDataset
[...]

# Load QM9 from TUDatasets. This dataset contains 129433 molecules represented as graphs.
# The resulting ValGraphCollection is an immutable collection of graphs.
julia&gt; qm9 = loadgraphs(TUDatasets.QM9Dataset(); resolve_categories=true)
129433-element ValGraphCollection of graphs with
              eltype: Int8
  vertex value types: (Bool, Bool, Bool, Bool, Bool, Int8, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Float64, Float64, Float64)
    edge value types: (Bool, Bool, Bool, Bool)
   graph value types: (μ = Float64, α = Float64, ϵ_HOMO = Float64, ϵ_LUMO = Float64, Δϵ = Float64, electronic_spatial_energy = Float64, ZPVE = Float64, U_0 = Float64, U = Float64, H = Float64, G = Float64, c_v = Float64, UATOM_0 = Float64, UTAM = Float64, HATOM = Float64, GATOM = Float64, A = Float64, B = Float64, C = Float64)

# We can have a look at the readme for this dataset
julia&gt; loadreadme(TUDatasets.QM9Dataset())
README for dataset QM9
[..]

# A ValGraphCollection can be indexed to get a ValGraphCollectionView of a single graph.
julia&gt; g = qm9[1234]
{19, 18} undirected ValGraphCollectionView with
              eltype: Int8
  vertex value types: (Bool, Bool, Bool, Bool, Bool, Int8, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Float64, Float64, Float64)
    edge value types: (Bool, Bool, Bool, Bool)
   graph value types: (μ = Float64, α = Float64, ϵ_HOMO = Float64, ϵ_LUMO = Float64, Δϵ = Float64, electronig_spatial_energy = Float64, ZPVE = Float64, U_0 = Float64, U = Float64, H = Float64, G = Float64, c_v = Float64, UATOM_0 = Float64, UTAM = Float64, HATOM = Float64, GATOM = Float64, A = Float64, B = Float64, C = Float64)

# ValGraphCollectionView inherits from Graphs.AbstractGraph and SimpleValueGraphs.AbstractValGraph
# and can therefore be used like other graph types
julia&gt; using Graphs: diameter

julia&gt; diameter(g)
7

# We can also convert it to a SimpleGraph without keeping the metadata
julia&gt; SimpleGraph(g)
{19, 18} undirected simple Int8 graph

# or to a ValGraph
julia&gt; ValGraph(g)
{19, 18} undirected ValGraph with
              eltype: Int8
  vertex value types: (Bool, Bool, Bool, Bool, Bool, Int8, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Float64, Float64, Float64)
    edge value types: (Bool, Bool, Bool, Bool)
   graph value types: (μ = Float64, α = Float64, ϵ_HOMO = Float64, ϵ_LUMO = Float64, Δϵ = Float64, electronig_spatial_energy = Float64, ZPVE = Float64, U_0 = Float64, U = Float64, H = Float64, G = Float64, c_v = Float64, UATOM_0 = Float64, UTAM = Float64, HATOM = Float64, GATOM = Float64, A = Float64, B = Float64, C = Float64)"><pre><span class="pl-c"><span class="pl-c">#</span> Load GraphDatasets</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GraphDatasets

<span class="pl-c"><span class="pl-c">#</span> List all available datasets</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">list_datasets</span>()
TUDatasets<span class="pl-k">.</span>AIDSDataset
TUDatasets<span class="pl-k">.</span>AspirinDataset
TUDatasets<span class="pl-k">.</span>BZRDataset
[<span class="pl-k">...</span>]

<span class="pl-c"><span class="pl-c">#</span> Load QM9 from TUDatasets. This dataset contains 129433 molecules represented as graphs.</span>
<span class="pl-c"><span class="pl-c">#</span> The resulting ValGraphCollection is an immutable collection of graphs.</span>
julia<span class="pl-k">&gt;</span> qm9 <span class="pl-k">=</span> <span class="pl-c1">loadgraphs</span>(TUDatasets<span class="pl-k">.</span><span class="pl-c1">QM9Dataset</span>(); resolve_categories<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">129433</span><span class="pl-k">-</span>element ValGraphCollection of graphs with
              eltype<span class="pl-k">:</span> Int8
  vertex value types<span class="pl-k">:</span> (Bool, Bool, Bool, Bool, Bool, Int8, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Float64, Float64, Float64)
    edge value types<span class="pl-k">:</span> (Bool, Bool, Bool, Bool)
   graph value types<span class="pl-k">:</span> (μ <span class="pl-k">=</span> Float64, α <span class="pl-k">=</span> Float64, ϵ_HOMO <span class="pl-k">=</span> Float64, ϵ_LUMO <span class="pl-k">=</span> Float64, Δϵ <span class="pl-k">=</span> Float64, electronic_spatial_energy <span class="pl-k">=</span> Float64, ZPVE <span class="pl-k">=</span> Float64, U_0 <span class="pl-k">=</span> Float64, U <span class="pl-k">=</span> Float64, H <span class="pl-k">=</span> Float64, G <span class="pl-k">=</span> Float64, c_v <span class="pl-k">=</span> Float64, UATOM_0 <span class="pl-k">=</span> Float64, UTAM <span class="pl-k">=</span> Float64, HATOM <span class="pl-k">=</span> Float64, GATOM <span class="pl-k">=</span> Float64, A <span class="pl-k">=</span> Float64, B <span class="pl-k">=</span> Float64, C <span class="pl-k">=</span> Float64)

<span class="pl-c"><span class="pl-c">#</span> We can have a look at the readme for this dataset</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">loadreadme</span>(TUDatasets<span class="pl-k">.</span><span class="pl-c1">QM9Dataset</span>())
README <span class="pl-k">for</span> dataset QM9
[<span class="pl-k">..</span>]

<span class="pl-c"><span class="pl-c">#</span> A ValGraphCollection can be indexed to get a ValGraphCollectionView of a single graph.</span>
julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> qm9[<span class="pl-c1">1234</span>]
{<span class="pl-c1">19</span>, <span class="pl-c1">18</span>} undirected ValGraphCollectionView with
              eltype<span class="pl-k">:</span> Int8
  vertex value types<span class="pl-k">:</span> (Bool, Bool, Bool, Bool, Bool, Int8, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Float64, Float64, Float64)
    edge value types<span class="pl-k">:</span> (Bool, Bool, Bool, Bool)
   graph value types<span class="pl-k">:</span> (μ <span class="pl-k">=</span> Float64, α <span class="pl-k">=</span> Float64, ϵ_HOMO <span class="pl-k">=</span> Float64, ϵ_LUMO <span class="pl-k">=</span> Float64, Δϵ <span class="pl-k">=</span> Float64, electronig_spatial_energy <span class="pl-k">=</span> Float64, ZPVE <span class="pl-k">=</span> Float64, U_0 <span class="pl-k">=</span> Float64, U <span class="pl-k">=</span> Float64, H <span class="pl-k">=</span> Float64, G <span class="pl-k">=</span> Float64, c_v <span class="pl-k">=</span> Float64, UATOM_0 <span class="pl-k">=</span> Float64, UTAM <span class="pl-k">=</span> Float64, HATOM <span class="pl-k">=</span> Float64, GATOM <span class="pl-k">=</span> Float64, A <span class="pl-k">=</span> Float64, B <span class="pl-k">=</span> Float64, C <span class="pl-k">=</span> Float64)

<span class="pl-c"><span class="pl-c">#</span> ValGraphCollectionView inherits from Graphs.AbstractGraph and SimpleValueGraphs.AbstractValGraph</span>
<span class="pl-c"><span class="pl-c">#</span> and can therefore be used like other graph types</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Graphs<span class="pl-k">:</span> diameter

julia<span class="pl-k">&gt;</span> <span class="pl-c1">diameter</span>(g)
<span class="pl-c1">7</span>

<span class="pl-c"><span class="pl-c">#</span> We can also convert it to a SimpleGraph without keeping the metadata</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">SimpleGraph</span>(g)
{<span class="pl-c1">19</span>, <span class="pl-c1">18</span>} undirected simple Int8 graph

<span class="pl-c"><span class="pl-c">#</span> or to a ValGraph</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ValGraph</span>(g)
{<span class="pl-c1">19</span>, <span class="pl-c1">18</span>} undirected ValGraph with
              eltype<span class="pl-k">:</span> Int8
  vertex value types<span class="pl-k">:</span> (Bool, Bool, Bool, Bool, Bool, Int8, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Float64, Float64, Float64)
    edge value types<span class="pl-k">:</span> (Bool, Bool, Bool, Bool)
   graph value types<span class="pl-k">:</span> (μ <span class="pl-k">=</span> Float64, α <span class="pl-k">=</span> Float64, ϵ_HOMO <span class="pl-k">=</span> Float64, ϵ_LUMO <span class="pl-k">=</span> Float64, Δϵ <span class="pl-k">=</span> Float64, electronig_spatial_energy <span class="pl-k">=</span> Float64, ZPVE <span class="pl-k">=</span> Float64, U_0 <span class="pl-k">=</span> Float64, U <span class="pl-k">=</span> Float64, H <span class="pl-k">=</span> Float64, G <span class="pl-k">=</span> Float64, c_v <span class="pl-k">=</span> Float64, UATOM_0 <span class="pl-k">=</span> Float64, UTAM <span class="pl-k">=</span> Float64, HATOM <span class="pl-k">=</span> Float64, GATOM <span class="pl-k">=</span> Float64, A <span class="pl-k">=</span> Float64, B <span class="pl-k">=</span> Float64, C <span class="pl-k">=</span> Float64)</pre></div>
<h2 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h2>
<ul dir="auto">
<li><a href="https://github.com/yuehhua/GraphMLDatasets.jl">GraphMLDatasets.jl</a></li>
<li><a href="https://github.com/JuliaGraphs/SNAPDatasets.jl">SNAPDatasets.jl</a></li>
<li><a href="https://github.com/JuliaGraphs/GraphsExtras.jl">GraphsExtras.j</a></li>
<li><a href="https://github.com/JuliaSparse/MatrixMarket.jl">MatrixMarket.jl</a></li>
<li><a href="https://github.com/JuliaMatrices/MatrixDepot.jl">MatrixDepot.jl</a></li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">[1]: <a href="https://arxiv.org/pdf/2007.08663.pdf" rel="nofollow">Morris, Christopher, Nils M. Kriege, Franka Bause, Kristian Kersting, Petra Mutzel, and Marion Neumann. "Tudataset: A collection of benchmark datasets for learning with graphs." arXiv preprint arXiv:2007.08663 (2020).</a></p>
</article></div>