<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mortar2djl" class="anchor" aria-hidden="true" href="#mortar2djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mortar2D.jl</h1>
<p><a href="https://zenodo.org/badge/latestdoi/97968807" rel="nofollow"><img src="https://camo.githubusercontent.com/312af21b457e11530ab4d1ff7a25f9a23140f85c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39373936383830372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/97968807.svg" style="max-width:100%;"></a><a href="https://travis-ci.org/JuliaFEM/Mortar2D.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7674aacf4691146072927d64a7e2a9ff4a746def/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146454d2f4d6f7274617232442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaFEM/Mortar2D.jl.svg?branch=master" style="max-width:100%;"></a><a href="https://coveralls.io/github/JuliaFEM/Mortar2D.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d47460776e45b6d9354f712c42ea1d6d26072baf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696146454d2f4d6f7274617232442e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaFEM/Mortar2D.jl/badge.svg?branch=master" style="max-width:100%;"></a><a href="https://juliafem.github.io/Mortar2D.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a><a href="https://juliafem.github.io/Mortar2D.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a><a href="https://github.com/JuliaFEM/Mortar2D.jl/issues"><img src="https://camo.githubusercontent.com/259d03aa932a00a6193b0aa37595be5b4ee89dc0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4a756c696146454d2f4d6f7274617232442e6a6c2e737667" alt="Issues" data-canonical-src="https://img.shields.io/github/issues/JuliaFEM/Mortar2D.jl.svg" style="max-width:100%;"></a></p>
<p>Mortar2D.jl is a Julia package to calculate discrete projections between
non-conforming finite element mesheds. The resulting "mortar matrices" can
be used to tie non-conforming finite element meshes together which are meshed
separately to construct bigger models.</p>
<p>Using mortar methods in mesh tie problems results variationally consistent
solution. Mathematically, goal is to solve mixed problem with primary field
variable and Lagrange multipliers, which have a physical meaning (e.g. contact
pressure if unknown field is displacement). The problem arising is a typical
saddle point problem with zeros on diagonal.</p>
<h2><a id="user-content-installing-and-testing-package" class="anchor" aria-hidden="true" href="#installing-and-testing-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing and testing package</h2>
<p>Installing package goes same way like other packages in julia, i.e.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Mortar2D<span class="pl-pds">"</span></span>)</pre></div>
<p>Testing package can be done using <code>Pkg.test</code>, i.e.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>Mortar2D<span class="pl-pds">"</span></span>)</pre></div>
<p>Probably the easiest way to test the functionality of package is to
use <a href="https://juliabox.com/" rel="nofollow">JuliaBox</a>.</p>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage example</h2>
<p>Let us calculate projection matrices D and M for the following problem:</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/figs/poisson_problem_discretized.png"><img src="docs/src/figs/poisson_problem_discretized.png" alt="" style="max-width:100%;"></a></p>
<p>Problem setup:</p>
<div class="highlight highlight-source-julia"><pre>Xs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">4</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>])
Xm <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>])
coords <span class="pl-k">=</span> <span class="pl-c1">merge</span>(Xm , Xs)
Es <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
Em <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>], <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>])
elements <span class="pl-k">=</span> <span class="pl-c1">merge</span>(Es, Em)
element_types <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>, <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>, <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>)
slave_element_ids <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
master_element_ids <span class="pl-k">=</span> [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]</pre></div>
<p>Calculate projection matrices D and M</p>
<div class="highlight highlight-source-julia"><pre>s, m, D, M <span class="pl-k">=</span> <span class="pl-c1">calculate_mortar_assembly</span>(
    elements, element_types, coords,
    slave_element_ids, master_element_ids)</pre></div>
<p>According to theory, the interface should transfer constant without any
error. Let's test that:</p>
<div class="highlight highlight-source-julia"><pre>u_m <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>)
u_s <span class="pl-k">=</span> D[s,s] <span class="pl-k">\</span> (M[s,m]<span class="pl-k">*</span>um)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span></pre></div>
<p>The rest of the story can be read from the <a href="https://juliafem.github.io/Mortar2D.jl/latest/" rel="nofollow">documentation</a>.
There's also brief review to the theory behind non-conforming finite element meshes.</p>
</article></div>