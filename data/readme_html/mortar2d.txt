<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mortar2djl" class="anchor" aria-hidden="true" href="#mortar2djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mortar2D.jl</h1>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/97968807" rel="nofollow"><img src="https://camo.githubusercontent.com/dfd0f3e80763d6ee0150cf7cebb6139a9c63a56e387d5b38b47df449f25be5b1/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39373936383830372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/97968807.svg" style="max-width: 100%;"></a><a href="https://travis-ci.org/JuliaFEM/Mortar2D.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9807fbc4b69a478291414b8faa87920ace458907281ccdb5b07c1fa625182335/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146454d2f4d6f7274617232442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaFEM/Mortar2D.jl.svg?branch=master" style="max-width: 100%;"></a><a href="https://coveralls.io/github/JuliaFEM/Mortar2D.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4430963af7a1b3eac951700fe258895836369946993be2694f7c4d361866eabe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696146454d2f4d6f7274617232442e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaFEM/Mortar2D.jl/badge.svg?branch=master" style="max-width: 100%;"></a><a href="https://juliafem.github.io/Mortar2D.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a><a href="https://juliafem.github.io/Mortar2D.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a><a href="https://github.com/JuliaFEM/Mortar2D.jl/issues"><img src="https://camo.githubusercontent.com/b9c0dd2fb01e101f5b22a426e7dac141662cd8658aee9186e527dbb8ecba84d3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4a756c696146454d2f4d6f7274617232442e6a6c2e737667" alt="Issues" data-canonical-src="https://img.shields.io/github/issues/JuliaFEM/Mortar2D.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Mortar2D.jl is a Julia package to calculate discrete projections between
non-conforming finite element meshes. The resulting "mortar matrices" can
be used to tie non-conforming finite element meshes together which are meshed
separately to construct bigger models.</p>
<p dir="auto">Using mortar methods in mesh tie problems results variationally consistent
solution. Mathematically, goal is to solve mixed problem with primary field
variable and Lagrange multipliers, which have a physical meaning (e.g. contact
pressure if unknown field is displacement). The problem arising is a typical
saddle point problem with zeros on diagonal.</p>
<h2 dir="auto"><a id="user-content-installing-and-testing-package" class="anchor" aria-hidden="true" href="#installing-and-testing-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing and testing package</h2>
<p dir="auto">Installing package goes same way like other packages in julia, i.e.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;Mortar2D&quot;)"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Mortar2D<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Testing package can be done using <code>Pkg.test</code>, i.e.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.test(&quot;Mortar2D&quot;)"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>Mortar2D<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Probably the easiest way to test the functionality of package is to
use <a href="https://juliabox.com/" rel="nofollow">JuliaBox</a>.</p>
<h2 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage example</h2>
<p dir="auto">Let us calculate projection matrices D and M for the following problem:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/figs/poisson_problem_discretized.png"><img src="docs/src/figs/poisson_problem_discretized.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Problem setup:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Xs = Dict(1 =&gt; [0.0, 1.0], 2 =&gt; [5/4, 1.0], 3 =&gt; [2.0, 1.0])
Xm = Dict(4 =&gt; [0.0, 1.0], 5 =&gt; [1.0, 1.0], 6 =&gt; [2.0, 1.0])
coords = merge(Xm , Xs)
Es = Dict(1 =&gt; [1, 2], 2 =&gt; [2, 3])
Em = Dict(3 =&gt; [4, 5], 4 =&gt; [5, 6])
elements = merge(Es, Em)
element_types = Dict(1 =&gt; :Seg2, 2 =&gt; :Seg2, 3 =&gt; :Seg2, 4 =&gt; :Seg2)
slave_element_ids = [1, 2]
master_element_ids = [3, 4]"><pre>Xs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">4</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>])
Xm <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>])
coords <span class="pl-k">=</span> <span class="pl-c1">merge</span>(Xm , Xs)
Es <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
Em <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>], <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>])
elements <span class="pl-k">=</span> <span class="pl-c1">merge</span>(Es, Em)
element_types <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>, <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>, <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:Seg2</span>)
slave_element_ids <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
master_element_ids <span class="pl-k">=</span> [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]</pre></div>
<p dir="auto">Calculate projection matrices D and M</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="s, m, D, M = calculate_mortar_assembly(
    elements, element_types, coords,
    slave_element_ids, master_element_ids)"><pre>s, m, D, M <span class="pl-k">=</span> <span class="pl-c1">calculate_mortar_assembly</span>(
    elements, element_types, coords,
    slave_element_ids, master_element_ids)</pre></div>
<p dir="auto">According to theory, the interface should transfer constant without any
error. Let's test that:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u_m = ones(3)
u_s = D[s,s] \ (M[s,m]*um)

# output

3-element Array{Float64,1}:
 1.0
 1.0
 1.0"><pre>u_m <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>)
u_s <span class="pl-k">=</span> D[s,s] <span class="pl-k">\</span> (M[s,m]<span class="pl-k">*</span>um)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span></pre></div>
<p dir="auto">The rest of the story can be read from the <a href="https://juliafem.github.io/Mortar2D.jl/latest/" rel="nofollow">documentation</a>.
There's also brief review to the theory behind non-conforming finite element meshes.</p>
</article></div>