<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.com/digitaldomain/HalfEdges.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a62b0222e2b4f9583ca6ad2de614050959bed08/68747470733a2f2f7472617669732d63692e636f6d2f6469676974616c646f6d61696e2f48616c6645646765732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/digitaldomain/HalfEdges.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/digitaldomain/HalfEdges.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/100242de0d9f458e6c5c7690bb0e2abeb0ecfa3d/68747470733a2f2f636f6465636f762e696f2f6769746875622f6469676974616c646f6d61696e2f48616c6645646765732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/digitaldomain/HalfEdges.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-halfedges" class="anchor" aria-hidden="true" href="#halfedges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HalfEdges</h1>
<p>The <code>HalfEdges</code> <a href="http://julialang.org" rel="nofollow">Julia</a> package defines the <code>HalfEdges</code> type and
methods/types to implement operations on the
<a href="https://en.wikipedia.org/wiki/Doubly_connected_edge_list" rel="nofollow">halfedge data structure</a>.</p>
<p>At this time HalfEdges only supports immutable operations (read-only).  i.e. you can't currently modify a Topology once created.</p>
<h2><a id="user-content-creation" class="anchor" aria-hidden="true" href="#creation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creation</h2>
<p>To represent the topology of a discrete polygon mesh, instance the <code>Topology</code> type.</p>
<pre><code>julia&gt; topo = Topology([[1,2,3],[1,3,4],[1,4,5,2]],5)
</code></pre>
<p>or</p>
<pre><code>julia&gt; topo = Topology([1,2,3,1,3,4,1,4,2])
</code></pre>
<p>a flat list of indices is assumed to be a manifold set of connected triangles.</p>
<h2><a id="user-content-handles" class="anchor" aria-hidden="true" href="#handles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Handles</h2>
<p>There are unique handle types for each simplex element.  These are essentially uniquely typed integer handles for the different simplex parts you might want to reference.
<code>EdgeHandle</code>, <code>VertexHandle</code>, and <code>FaceHandle</code>.</p>
<p><code>HalfEdgeHandle</code> is the most common return type for methods in the <code>HalfEdges</code> package.
<code>EdgeHandle</code> represents a unique edge, whereas there are two distinct <code>HalfEdgeHandle</code> per edge.</p>
<pre><code>julia&gt; using HalfEdges: vertices, edges, face, halfedge, head, tail    

julia&gt; vertices(topo) |&gt; first |&gt; typeof
HalfEdgeHandle

julia&gt; vertices(topo) |&gt; first |&gt; heᵢ-&gt;tail(topo, heᵢ) |&gt; typeof
VertexHandle
</code></pre>
<h2><a id="user-content-halfedge-conventions" class="anchor" aria-hidden="true" href="#halfedge-conventions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HalfEdge conventions</h2>
<p>A given <code>HalfEdge</code> points from <code>tail</code> to <code>head</code> <code>vertex</code> and is associated with the <code>face</code> on it's left.
A <code>Polygon</code> is considered to be "wound" in the counterclockwise direction.
<code>FaceHandle</code> and <code>VertexHandle</code> integer values will correspond to the polygon and vertex indices you created the <code>Topology</code> with, so long as you haven't called any methods that do any reindexing.</p>
<pre><code>julia&gt; using HalfEdges: halfedges, vertices, vertex, edges, edge, halfedge, face, head, tail, opposite, next

    2
   /|\
  / | \ 
 /  |  \
3---1---4

julia&gt; topo = Topology([[1,2,3],[1,4,2]])

# find the only halfedge pointing from vertex 1 to 2
julia&gt; h = Iterators.filter(h-&gt;head(topo, h)==VertexHandle(2), OneRing(topo, VertexHandle(1))) |&gt; first
3

julia&gt; tail(topo, h)
1

julia&gt; head(topo, h)
2

julia&gt; vertex(topo, h) == ans
true

julia&gt; map( hᵢ-&gt;vertex(topo, hᵢ), Polygon(topo, face(topo, h)))
3-element Array{VertexHandle,1}:
 3
 1
 2

julia&gt; h = opposite(topo, h)
4

julia&gt; map( hᵢ-&gt;vertex(topo, hᵢ), Polygon(topo, face(topo, h)))
3-element Array{VertexHandle,1}:
 1
 4
 2
</code></pre>
<h2><a id="user-content-iterating-over-components" class="anchor" aria-hidden="true" href="#iterating-over-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Iterating over components</h2>
<p>A number of iterators are provided.  Unless stated, the iterates are <code>HalfEdgeHandles</code></p>
<ul>
<li><code>OneRing</code> iterates around the edge "spokes" radiating out from a vertex.  This iteration is done clockwise for performance reasons.</li>
<li><code>Rim</code> iterates around the "tire" edges of the polygons attached to a vertex.  This iteration is performned in a clockwise manner.</li>
<li><code>Polygon</code> iterates around a polgon in a counterclockwise manner.</li>
<li><code>BoundaryLoop</code> iterates around the boundary connected to the given halfedge.</li>
</ul>
<p>Examples:</p>
<pre><code>    2====6
   /+\  ||
  / + \ ||
 /  +  \||
3+++1+++4
 \     /
  \   /
   \ /
    5 

OneRing₁ =&gt; '+'
Rim₁ =&gt; '-'

julia&gt; topo = Topology([[1,2,3],[1,4,2],[1,3,5,4],[2,4,6]])  # note we have a quad mixed in 

julia&gt; edges(topo, OneRing(topo, VertexHandle(1)))
3-element Array{Tuple{VertexHandle,VertexHandle},1}:
 (1, 3)
 (1, 2)
 (1, 4)

julia&gt; edges(topo, Rim(topo, VertexHandle(1)))
4-element Array{Tuple{VertexHandle,VertexHandle},1}:
 (2, 3)
 (4, 2)
 (3, 5)
 (5, 4)

julia&gt; BoundaryLoop(topo, first(OneRing(topo, VertexHandle(1))))

julia&gt; edges(topo, BoundaryLoop(topo, first(OneRing(topo, VertexHandle(2)))))
5-element Array{Tuple{VertexHandle,VertexHandle},1}:
 (2, 6)
 (6, 4)
 (4, 5)
 (5, 3)
 (3, 2)

julia&gt; edges(topo, Polygon(topo, FaceHandle(1)))
3-element Array{Tuple{VertexHandle,VertexHandle},1}:
 (3, 1)
 (1, 2)
 (2, 3)
</code></pre>
<h2><a id="user-content-navigating-a-mesh" class="anchor" aria-hidden="true" href="#navigating-a-mesh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Navigating a mesh</h2>
<p>Methods to move around by following <code>HalfEdgeHandle</code> are the most flexible ways to navigate.</p>
<p>Lets move from an edge on vertex 1 to vertex 6.</p>
<pre><code>    2---6
   /^+  ^
  / + + +
 /  +  &gt;+
3++&gt;1---4
</code></pre>
<p>We start on the halfedge 3-&gt;1, which is on the interior of the face (1,2,3).<br>
Use <code>next</code> to move ccw onto 1-&gt;2
<code>opposite</code> will jump across the edge to the halfedge 2-&gt;1 on face (1,4,2)
Now we pivot around vertex 2 over edge (2,4) using <code>next</code> and land on the halfedge 2-&gt;4 on face (4,6,2)
We finally move ccw  one more time with <code>next</code>
Finally check we are pointing at vertex 6</p>
<pre><code># do it the long way
julia&gt; head(topo, next(topo, opposite(topo, next(topo, next(topo, opposite(topo, next(topo, HalfEdgeHandle(1))))))))
6

# use 1-arity methods to avoid repeating topo parameter excessively

# make a function to pivot around a vertex over an edge
julia&gt; pivot = opposite(next(next))
#62 (generic function with 1 method)

# execute our plan to get from 3-&gt;1 to vertex 6
julia&gt; head(next)(topo, pivot(topo, opposite(next)(topo, HalfEdgeHandle(1))))
6

# use julia's function chaining macro to order operations in a more natural way.
julia&gt; (halfedge |&gt; next |&gt; opposite |&gt; next |&gt; next |&gt; opposite |&gt; next |&gt; head)(topo, (3,1)) == ans
true
</code></pre>
<h2><a id="user-content-collision-detection" class="anchor" aria-hidden="true" href="#collision-detection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Collision Detection</h2>
<p>There is support for accelerating collision queries using a Bounding Volume Hierarchy.</p>
<pre><code># create a Collider first to cache the BVH
julia&gt; col = Collider(topo, P)

# can query all the faces that overlap a bounding box
julia&gt; query_aabb(col, HalfEdges.BVH.AABB(SVector{3}(0.,0.,0.5), SVector{3}(1.0,1.0,1.0)))  

# we need to provide our own method to actually collide the candidate faces
julia&gt; traingle_vs_triangle(a1,b1,c1, a2,b2,c2) = (true, "some collision data")  # provide your own

# now we can do a self-intersection test on the entire mesh
julia&gt; hits = collide_self(col, triangle_vs_triangle)
</code></pre>
<h2><a id="user-content-project-information" class="anchor" aria-hidden="true" href="#project-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Project Information</h2>
<h3><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contributing</h3>
<p>Please read <a href="./CONTRIBUTING.md">CONTRIBUTING.md</a> for details.</p>
<h3><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Authors</h3>
<ul>
<li><strong>Michael Alexander Ewert</strong> - Developer - <a href="https://digitaldomain.com" rel="nofollow">Digital Domain</a></li>
</ul>
<h3><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h3>
<p>This project is licensed under a modified Apache 2.0 license - see the <a href="./LICENSE">LICENSE</a> file for details</p>
</article></div>