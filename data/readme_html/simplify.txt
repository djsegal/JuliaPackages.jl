<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplifyjl" class="anchor" aria-hidden="true" href="#simplifyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simplify.jl</h1>
<p><a href="https://travis-ci.org/HarrisonGrodin/Simplify.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9e6a48c2035cd0b7b5d6d2a0b3521594bd690ef6/68747470733a2f2f7472617669732d63692e6f72672f4861727269736f6e47726f64696e2f53696d706c6966792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/HarrisonGrodin/Simplify.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/HarrisonGrodin/simplify-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/a04ab628c1a763075f89eb50d59e0b82427deba5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f696837347233737036383230306530743f7376673d74727565" alt="AppVeyor Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ih74r3sp68200e0t?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/HarrisonGrodin/Simplify.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1a2566e88f5a98a465f2bcfc665a0c4c5c2f446e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4861727269736f6e47726f64696e2f53696d706c6966792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/HarrisonGrodin/Simplify.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>Simplify.jl</strong> implements methods for symbolic algebraic simplification in the Julia language.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Normalization involves determining the unique normal form of an expression ("simplest" equivalent expression) through repeated application of rules. <em>Simplify.jl</em> will use its <a href="./src/rules.jl">internal set of algebraic rules</a> by default, which includes trigonometry, logarithms, differentiation (based on <a href="https://github.com/JuliaDiff/DiffRules.jl">DiffRules.jl</a>), and more.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> x y b θ;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">sin</span>(<span class="pl-k">-</span>θ) <span class="pl-k">/</span> <span class="pl-c1">cos</span>(<span class="pl-k">-</span>θ))))
<span class="pl-c1">@term</span>(<span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-k">-</span>(<span class="pl-c1">sin</span>(θ)) <span class="pl-k">/</span> <span class="pl-c1">cos</span>(θ)))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">log</span>(b, <span class="pl-c1">1</span> <span class="pl-k">/</span> (b<span class="pl-k">^</span><span class="pl-c1">abs</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span>)))))
<span class="pl-c1">@term</span>(<span class="pl-c1">log</span>(b, <span class="pl-c1">1</span> <span class="pl-k">/</span> b <span class="pl-k">^</span> <span class="pl-c1">abs</span>(x <span class="pl-k">^</span> <span class="pl-c1">2</span>)))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">diff</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">2</span>x) <span class="pl-k">-</span> <span class="pl-c1">log</span>(x<span class="pl-k">+</span>y), x)))
<span class="pl-c1">@term</span>(<span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-k">-</span>(<span class="pl-c1">inv</span>(x <span class="pl-k">+</span> y) <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">diff</span>(y, x) <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">one</span>(x))) <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">cos</span>(<span class="pl-c1">2</span>x) <span class="pl-k">*</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">one</span>(x) <span class="pl-k">+</span> x <span class="pl-k">*</span> <span class="pl-c1">0</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-k">!</span>x <span class="pl-k">&amp;</span> x <span class="pl-k">|</span> (y <span class="pl-k">&amp;</span> (y <span class="pl-k">|</span> <span class="pl-c1">true</span>))))
<span class="pl-c1">@term</span>(<span class="pl-k">!</span>x <span class="pl-k">&amp;</span> x <span class="pl-k">|</span> (y <span class="pl-k">|</span> <span class="pl-c1">true</span>) <span class="pl-k">&amp;</span> y)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(y<span class="pl-k">^</span>(<span class="pl-c1">6</span> <span class="pl-k">-</span> <span class="pl-c1">3</span><span class="pl-c1">log</span>(x, x<span class="pl-k">^</span><span class="pl-c1">2</span>))))
<span class="pl-c1">@term</span>(y <span class="pl-k">^</span> (<span class="pl-k">-</span>(<span class="pl-c1">6</span> <span class="pl-k">*</span> <span class="pl-c1">log</span>(x, x)) <span class="pl-k">+</span> <span class="pl-c1">6</span>))</pre></div>
<p>In many cases, it is useful to specify entirely custom rules by passing a Term Rewriting System as the second argument to <code>normalize</code>. This may be done either by manually constructing a <code>Rules</code> object or by using the <code>RULES</code> strategy for <code>@term</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> f g h;
       <span class="pl-c1">@vars</span> x y;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">f</span>(x, <span class="pl-c1">f</span>(y, y))), <span class="pl-c1">@term</span> RULES [
          <span class="pl-c1">f</span>(x, x) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
          <span class="pl-c1">f</span>(x, <span class="pl-c1">1</span>) <span class="pl-k">=&gt;</span> x
       ])
<span class="pl-c1">@term</span>(x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">f</span>(<span class="pl-c1">g</span>(<span class="pl-c1">f</span>(<span class="pl-c1">1</span>), <span class="pl-c1">h</span>()))), <span class="pl-c1">Rules</span>(
          <span class="pl-c1">@term</span>(<span class="pl-c1">f</span>(x)) <span class="pl-k">=&gt;</span> <span class="pl-c1">@term</span>(x),
          <span class="pl-c1">@term</span>(<span class="pl-c1">h</span>())  <span class="pl-k">=&gt;</span> <span class="pl-c1">@term</span>(<span class="pl-c1">3</span>),
       ))
<span class="pl-c1">@term</span>(<span class="pl-c1">g</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Simplify<span class="pl-k">:</span> EvalRule

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">f</span>(<span class="pl-c1">g</span>(<span class="pl-c1">f</span>(<span class="pl-c1">1</span>), <span class="pl-c1">h</span>()))), <span class="pl-c1">Rules</span>(
          <span class="pl-c1">@term</span>(<span class="pl-c1">f</span>(x)) <span class="pl-k">=&gt;</span> <span class="pl-c1">@term</span>(x),
          <span class="pl-c1">@term</span>(<span class="pl-c1">h</span>())  <span class="pl-k">=&gt;</span> <span class="pl-c1">@term</span>(<span class="pl-c1">3</span>),
          <span class="pl-c1">EvalRule</span>(g, (a, b) <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>a <span class="pl-k">+</span> b)
       ))
<span class="pl-c1">@term</span>(<span class="pl-c1">5</span>)</pre></div>
<p>Variables may contain information about their domain, which may result in more specific normalizations.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SpecialSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> x y z;

julia<span class="pl-k">&gt;</span> ctx <span class="pl-k">=</span> [<span class="pl-c1">get_context</span>(); <span class="pl-c1">Image</span>(y, <span class="pl-c1">GreaterThan</span>(<span class="pl-c1">3</span>)); <span class="pl-c1">Image</span>(z, Even <span class="pl-k">∩</span> <span class="pl-c1">LessThan</span>(<span class="pl-c1">0</span>))];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_context</span>(ctx) <span class="pl-k">do</span>
           <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">abs</span>(x)))
       <span class="pl-k">end</span>
<span class="pl-c1">@term</span>(<span class="pl-c1">abs</span>(x))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_context</span>(ctx) <span class="pl-k">do</span>
           <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">abs</span>(y)))
       <span class="pl-k">end</span>
<span class="pl-c1">@term</span>(y)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_context</span>(ctx) <span class="pl-k">do</span>
           <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">abs</span>(z)))
       <span class="pl-k">end</span>
<span class="pl-c1">@term</span>(<span class="pl-k">-</span>z)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ctx <span class="pl-k">=</span> [<span class="pl-c1">get_context</span>(); <span class="pl-c1">Image</span>(x, <span class="pl-c1">TypeSet</span>(Int)); <span class="pl-c1">Image</span>(y, <span class="pl-c1">TypeSet</span>(Int))];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_context</span>(ctx) <span class="pl-k">do</span>
           <span class="pl-c1">normalize</span>(<span class="pl-c1">@term</span>(<span class="pl-c1">diff</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">2</span>x) <span class="pl-k">-</span> <span class="pl-c1">log</span>(x <span class="pl-k">+</span> y), x)))
       <span class="pl-k">end</span>
<span class="pl-c1">@term</span>(<span class="pl-c1">cos</span>(<span class="pl-c1">2</span>x) <span class="pl-k">*</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-k">-</span>(<span class="pl-c1">inv</span>(x <span class="pl-k">+</span> y) <span class="pl-k">*</span> (<span class="pl-c1">diff</span>(y, x) <span class="pl-k">+</span> <span class="pl-c1">1</span>)))</pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<ul>
<li><a href="https://www21.in.tum.de/~nipkow/TRaAT/" rel="nofollow"><em>Term Rewriting and All That</em></a></li>
<li><a href="https://github.com/MasonProtter">@MasonProtter</a></li>
<li><a href="https://github.com/Yijia-Chen">@Yijia-Chen</a></li>
</ul>
</article></div>