<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-jdf" class="anchor" aria-hidden="true" href="#jdf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JDF</h1>
<p>A Julia <code>DataFrame</code>s serialization format with the following goals</p>
<ul>
<li>Fast save and load times</li>
<li>Compressed storage on disk</li>
<li>Enable disk-based data manipulation (not yet achieved; from v0.4.0)</li>
<li>Supports machine learning workloads, e.g. mini-batch, sampling (not yet achieved; from v0.4.0)</li>
</ul>
<p>JDF stores a <code>DataFrame</code> in a folder with each column stored as a separate file.
There is also a <code>metadata.jls</code> file that stores metadata about the original
<code>DataFrame</code>. Collectively, the column files, the metadata file, and the folder
is called a JDF "file".</p>
<p><code>JDF.jl</code> is Julia-only solution and there are a lot of ways to do nifty things
like compression and encapsulating the underlying struture of the arrays that's
hard to do in R and Python. E.g. Python's numpy arrays are C objects, but all
the vector types used in JDF are Julia data types.</p>
<h2><a id="user-content-please-note" class="anchor" aria-hidden="true" href="#please-note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Please note</h2>
<p>The next version of JDF which is v0.3 will contain breaking changes. But don't worry I am fully committed to providing an automatic upgrade path for JDF v0.2 users. This means that you can safely use JDF.jl v0.2 to save your data and not have to worry about the impending breaking change breaking all your JDF files.</p>
<h2><a id="user-content-example-quick-start" class="anchor" aria-hidden="true" href="#example-quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example: Quick Start</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> RDatasets, JDF, DataFrames

a <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>);

<span class="pl-c1">head</span>(a, <span class="pl-c1">2</span>)</pre></div>
<pre><code>2×5 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species      
│
│     │ Float64     │ Float64    │ Float64     │ Float64    │ Categorical… 
│
├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────────
┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ setosa       
│
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ setosa       
│
</code></pre>
<h3><a id="user-content-saving-and-loading-data" class="anchor" aria-hidden="true" href="#saving-and-loading-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><em>Saving</em> and <em>Loading</em> data</h3>
<p>By default JDF loads and saves <code>DataFrame</code>s using multiple threads starting from
Julia 1.3. For Julia &lt; 1.3, it saves and loads using one thread only.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@time</span> jdffile <span class="pl-k">=</span> <span class="pl-c1">savejdf</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>, a)</pre></div>
<pre><code>0.748441 seconds (2.50 M allocations: 126.151 MiB, 5.03% gc time)
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@time</span> a2 <span class="pl-k">=</span> <span class="pl-c1">loadjdf</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>)</pre></div>
<pre><code>0.779215 seconds (1.72 M allocations: 86.003 MiB)
150×5 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species      
│
│     │ Float64     │ Float64    │ Float64     │ Float64    │ Categorical… 
│
├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────────
┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ setosa       
│
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ setosa       
│
│ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ setosa       
│
│ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ setosa       
│
│ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ setosa       
│
│ 6   │ 5.4         │ 3.9        │ 1.7         │ 0.4        │ setosa       
│
│ 7   │ 4.6         │ 3.4        │ 1.4         │ 0.3        │ setosa       
│
⋮
│ 143 │ 5.8         │ 2.7        │ 5.1         │ 1.9        │ virginica    
│
│ 144 │ 6.8         │ 3.2        │ 5.9         │ 2.3        │ virginica    
│
│ 145 │ 6.7         │ 3.3        │ 5.7         │ 2.5        │ virginica    
│
│ 146 │ 6.7         │ 3.0        │ 5.2         │ 2.3        │ virginica    
│
│ 147 │ 6.3         │ 2.5        │ 5.0         │ 1.9        │ virginica    
│
│ 148 │ 6.5         │ 3.0        │ 5.2         │ 2.0        │ virginica    
│
│ 149 │ 6.2         │ 3.4        │ 5.4         │ 2.3        │ virginica    
│
│ 150 │ 5.9         │ 3.0        │ 5.1         │ 1.8        │ virginica    
│
</code></pre>
<p>Simple checks for correctness</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">all</span>(<span class="pl-c1">names</span>(a2) <span class="pl-k">.==</span> <span class="pl-c1">names</span>(a)) <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">all</span>(<span class="pl-c1">skipmissing</span>([<span class="pl-c1">all</span>(a2[<span class="pl-k">!</span>,name] <span class="pl-k">.==</span> <span class="pl-c1">Array</span>(a[<span class="pl-k">!</span>,name])) <span class="pl-k">for</span> name <span class="pl-k">in</span> <span class="pl-c1">names</span>(a2)])) <span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>
<pre><code>true
</code></pre>
<h3><a id="user-content-loading-only-certain-columns" class="anchor" aria-hidden="true" href="#loading-only-certain-columns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Loading only certain columns</h3>
<p>You can load only a few columns from the dataset by specifying <code>cols = [:column1, :column2]</code>. For example</p>
<div class="highlight highlight-source-julia"><pre>a2_selected <span class="pl-k">=</span> <span class="pl-c1">loadjdf</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>, cols <span class="pl-k">=</span> [<span class="pl-c1">:Species</span>, <span class="pl-c1">:SepalLength</span>, <span class="pl-c1">:PetalWidth</span>])</pre></div>
<pre><code>150×3 DataFrames.DataFrame
│ Row │ SepalLength │ PetalWidth │ Species      │
│     │ Float64     │ Float64    │ Categorical… │
├─────┼─────────────┼────────────┼──────────────┤
│ 1   │ 5.1         │ 0.2        │ setosa       │
│ 2   │ 4.9         │ 0.2        │ setosa       │
│ 3   │ 4.7         │ 0.2        │ setosa       │
│ 4   │ 4.6         │ 0.2        │ setosa       │
│ 5   │ 5.0         │ 0.2        │ setosa       │
│ 6   │ 5.4         │ 0.4        │ setosa       │
│ 7   │ 4.6         │ 0.3        │ setosa       │
⋮
│ 143 │ 5.8         │ 1.9        │ virginica    │
│ 144 │ 6.8         │ 2.3        │ virginica    │
│ 145 │ 6.7         │ 2.5        │ virginica    │
│ 146 │ 6.7         │ 2.3        │ virginica    │
│ 147 │ 6.3         │ 1.9        │ virginica    │
│ 148 │ 6.5         │ 2.0        │ virginica    │
│ 149 │ 6.2         │ 2.3        │ virginica    │
│ 150 │ 5.9         │ 1.8        │ virginica    │
</code></pre>
<p>The difference with loading the whole datasets and then subsetting the columns
is that it saves time as only the selected columns are loaded from disk.</p>
<h3><a id="user-content-some-dataframe-like-convenience-syntaxfunctions" class="anchor" aria-hidden="true" href="#some-dataframe-like-convenience-syntaxfunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Some <code>DataFrame</code>-like convenience syntax/functions</h3>
<p>To take advatnage of some these convenience functions, you need to create a variable of type <code>JDFFile</code> pointed to the JDF file on disk. For example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>path/to/JDF.jdf<span class="pl-pds">"</span></span></pre></div>
<pre><code>JDF.JDFFile{String}("path/to/JDF.jdf")
</code></pre>
<p>or</p>
<div class="highlight highlight-source-julia"><pre>path_to_JDF <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>path/to/JDF.jdf<span class="pl-pds">"</span></span>
<span class="pl-c1">JDFFile</span>(path_to_JDF)</pre></div>
<pre><code>JDF.JDFFile{String}("path/to/JDF.jdf")
</code></pre>
<h4><a id="user-content-using-dfrows-cols-syntax" class="anchor" aria-hidden="true" href="#using-dfrows-cols-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using <code>df[rows, cols]</code> syntax</h4>
<p>You can load arbitrary <code>rows</code> and <code>cols</code> using the <code>df[rows, cols]</code> syntax. However, some of these operations are not yet optimized and hence may not be efficient.</p>
<div class="highlight highlight-source-julia"><pre>afile <span class="pl-k">=</span> <span class="pl-c1">JDFFile</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>)

afile[<span class="pl-k">!</span>, <span class="pl-c1">:Species</span>] <span class="pl-c"><span class="pl-c">#</span> load Species column</span>
afile[<span class="pl-k">!</span>, [<span class="pl-c1">:Species</span>, <span class="pl-c1">:PetalLength</span>]] <span class="pl-c"><span class="pl-c">#</span> load Species and PetalLength column</span>

afile[:, <span class="pl-c1">:Species</span>] <span class="pl-c"><span class="pl-c">#</span> load Species column</span>
afile[:, [<span class="pl-c1">:Species</span>, <span class="pl-c1">:PetalLength</span>]] <span class="pl-c"><span class="pl-c">#</span> load Species and PetalLength column</span>

<span class="pl-c1">@view</span>(afile[<span class="pl-k">!</span>, <span class="pl-c1">:Species</span>]) <span class="pl-c"><span class="pl-c">#</span> load Species column</span>
<span class="pl-c1">@view</span>(afile[<span class="pl-k">!</span>, [<span class="pl-c1">:Species</span>, <span class="pl-c1">:PetalLength</span>]]) <span class="pl-c"><span class="pl-c">#</span> load Species and PetalLength column</span></pre></div>
<pre><code>150×2 DataFrames.DataFrame
│ Row │ PetalLength │ Species      │
│     │ Float64     │ Categorical… │
├─────┼─────────────┼──────────────┤
│ 1   │ 1.4         │ setosa       │
│ 2   │ 1.4         │ setosa       │
│ 3   │ 1.3         │ setosa       │
│ 4   │ 1.5         │ setosa       │
│ 5   │ 1.4         │ setosa       │
│ 6   │ 1.7         │ setosa       │
│ 7   │ 1.4         │ setosa       │
⋮
│ 143 │ 5.1         │ virginica    │
│ 144 │ 5.9         │ virginica    │
│ 145 │ 5.7         │ virginica    │
│ 146 │ 5.2         │ virginica    │
│ 147 │ 5.0         │ virginica    │
│ 148 │ 5.2         │ virginica    │
│ 149 │ 5.4         │ virginica    │
│ 150 │ 5.1         │ virginica    │
</code></pre>
<p>In fact most syntax for <code>a[rows, cols]</code> will work <strong>except</strong> for assignments i.e. <code>a[!, cols] = something</code> will <strong>not</strong> work.</p>
<p>This was developed to make it possible for <a href="https://github.com/xiaodaigh/JLBoost.jl">JLBoost.jl</a> to fit models without loading the whole data into memory, and so the functionalities is kept to a minimum for now.</p>
<h4><a id="user-content-jdffile-is-tablejl-columm-accessible" class="anchor" aria-hidden="true" href="#jdffile-is-tablejl-columm-accessible"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JDFFile is Table.jl columm-accessible</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Tables
ajdf <span class="pl-k">=</span> <span class="pl-c1">JDFFile</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>)
Tables<span class="pl-k">.</span><span class="pl-c1">columnaccess</span>(ajdf)</pre></div>
<pre><code>true
</code></pre>
<div class="highlight highlight-source-julia"><pre>Tables<span class="pl-k">.</span><span class="pl-c1">columns</span>(ajdf)</pre></div>
<pre><code>JDF.JDFFile{String}("iris.jdf")
</code></pre>
<div class="highlight highlight-source-julia"><pre>Tables<span class="pl-k">.</span><span class="pl-c1">schema</span>(ajdf)</pre></div>
<pre><code>Tables.Schema:
 :SepalLength  …  Float64                                                  
                                
 :SepalWidth      Float64                                                  
                                
 :PetalLength     Float64                                                  
                                
 :PetalWidth      Float64                                                  
                                
 :Species         CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1
 where U where C where V where T
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">getproperty</span>(Tables<span class="pl-k">.</span><span class="pl-c1">columns</span>(ajdf), <span class="pl-c1">:Species</span>)</pre></div>
<pre><code>150-element CategoricalArrays.CategoricalArray{String,1,UInt8}:
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 "setosa"   
 ⋮          
 "virginica"
 "virginica"
 "virginica"
 "virginica"
 "virginica"
 "virginica"
 "virginica"
 "virginica"
 "virginica"
</code></pre>
<h4><a id="user-content-load-each-column-from-disk" class="anchor" aria-hidden="true" href="#load-each-column-from-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Load each column from disk</h4>
<p>You can load each column of a JDF file from disk using iterations</p>
<div class="highlight highlight-source-julia"><pre>jdffile <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>iris.jdf<span class="pl-pds">"</span></span>
<span class="pl-k">for</span> col <span class="pl-k">in</span> <span class="pl-c1">eachcol</span>(jdffile)
  <span class="pl-c"><span class="pl-c">#</span> do something to col</span>
  <span class="pl-c"><span class="pl-c">#</span> where `col` is the content of one column of iris.jdf</span>
<span class="pl-k">end</span></pre></div>
<p>To iterate through the columns names and the <code>col</code></p>
<div class="highlight highlight-source-julia"><pre>jdffile <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>iris.jdf<span class="pl-pds">"</span></span>
<span class="pl-k">for</span> (name, col) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(<span class="pl-c1">names</span>(jdffile), <span class="pl-c1">eachcol</span>(jdffile))
  <span class="pl-c"><span class="pl-c">#</span> `name::Symbol` is the name of the column</span>
  <span class="pl-c"><span class="pl-c">#</span>  `col` is the content of one column of iris.jdf</span>
<span class="pl-k">end</span></pre></div>
<h4><a id="user-content-metadata-names--size-from-disk" class="anchor" aria-hidden="true" href="#metadata-names--size-from-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Metadata Names &amp; Size from disk</h4>
<p>You can obtain the column names and size (<code>nrow</code> and <code>ncol</code>) of a JDF, for
example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JDF, DataFrames
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
<span class="pl-c1">savejdf</span>(df, <span class="pl-s"><span class="pl-pds">"</span>plsdel.jdf<span class="pl-pds">"</span></span>)


<span class="pl-c1">names</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>plsdel.jdf<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> [:a, :b]</span>

<span class="pl-c1">nrow</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>plsdel.jdf<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c1">ncol</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>plsdel.jdf<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> 2</span>

<span class="pl-c1">size</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>plsdel.jdf<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> (3, 2)</span>

<span class="pl-c1">size</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>plsdel.jdf<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> 2</span>

<span class="pl-c1">size</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">jdf</span>"</span>plsdel.jdf<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c"><span class="pl-c">#</span> clean up</span>
<span class="pl-c1">rm</span>(<span class="pl-s"><span class="pl-pds">"</span>plsdel.jdf<span class="pl-pds">"</span></span>, force <span class="pl-k">=</span> <span class="pl-c1">true</span>, recursive <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<h3><a id="user-content-save-and-load-serially" class="anchor" aria-hidden="true" href="#save-and-load-serially"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Save and load serially</h3>
<p>You can use the <code>ssavejdf</code> and <code>sloadjdf</code> function to save a <code>DataFrame</code>
serially, i.e. without using parallel processes.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@time</span> jdffile <span class="pl-k">=</span> <span class="pl-c1">ssavejdf</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>, a)</pre></div>
<pre><code>0.064414 seconds (214.17 k allocations: 11.695 MiB)
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@time</span> jdffile <span class="pl-k">=</span> <span class="pl-c1">sloadjdf</span>(<span class="pl-s"><span class="pl-pds">"</span>iris.jdf<span class="pl-pds">"</span></span>)</pre></div>
<pre><code>0.025039 seconds (10.29 k allocations: 1.152 MiB)
150×5 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species      
│
│     │ Float64     │ Float64    │ Float64     │ Float64    │ Categorical… 
│
├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────────
┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ setosa       
│
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ setosa       
│
│ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ setosa       
│
│ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ setosa       
│
│ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ setosa       
│
│ 6   │ 5.4         │ 3.9        │ 1.7         │ 0.4        │ setosa       
│
│ 7   │ 4.6         │ 3.4        │ 1.4         │ 0.3        │ setosa       
│
⋮
│ 143 │ 5.8         │ 2.7        │ 5.1         │ 1.9        │ virginica    
│
│ 144 │ 6.8         │ 3.2        │ 5.9         │ 2.3        │ virginica    
│
│ 145 │ 6.7         │ 3.3        │ 5.7         │ 2.5        │ virginica    
│
│ 146 │ 6.7         │ 3.0        │ 5.2         │ 2.3        │ virginica    
│
│ 147 │ 6.3         │ 2.5        │ 5.0         │ 1.9        │ virginica    
│
│ 148 │ 6.5         │ 3.0        │ 5.2         │ 2.0        │ virginica    
│
│ 149 │ 6.2         │ 3.4        │ 5.4         │ 2.3        │ virginica    
│
│ 150 │ 5.9         │ 3.0        │ 5.1         │ 1.8        │ virginica    
│
</code></pre>
<h3><a id="user-content-additional-functionality-in-memory-dataframe-compression" class="anchor" aria-hidden="true" href="#additional-functionality-in-memory-dataframe-compression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional functionality: In memory <code>DataFrame</code> compression</h3>
<p><code>DataFrame</code> sizes are out of control. A 2GB CSV file can easily take up 10GB in
RAM. One can use the function <code>type_compress!(df)</code>  to compress any
<code>df::DataFrame</code>. E.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">type_compress!</span>(df)</pre></div>
<pre><code>3×2 DataFrames.DataFrame
│ Row │ a    │ b    │
│     │ Int8 │ Int8 │
├─────┼──────┼──────┤
│ 1   │ 1    │ 1    │
│ 2   │ 2    │ 2    │
│ 3   │ 3    │ 3    │
</code></pre>
<p>The function looks at <code>Int*</code> columns and see if it can be safely "downgraded" to
another <code>Int*</code> type with a smaller bits size. It will convert <code>Float64</code> to
<code>Float32</code> if <code>compress_float = true</code>. E.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">type_compress!</span>(df, compress_float <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<pre><code>3×2 DataFrames.DataFrame
│ Row │ a    │ b    │
│     │ Int8 │ Int8 │
├─────┼──────┼──────┤
│ 1   │ 1    │ 1    │
│ 2   │ 2    │ 2    │
│ 3   │ 3    │ 3    │
</code></pre>
<p><code>String</code> compression is <em>planned</em> and will likely employ categorical encoding
combined with RLE encoding.</p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmarks</h2>
<p>Here are some benchmarks using the <a href="https://docs.rapids.ai/datasets/mortgage-data" rel="nofollow">Fannie Mae Mortgage
Data</a>. Please note that a reading
of zero means that the method has failed to read or write.</p>
<p>JDF is a decent performer on both read and write and can achieve comparable
performance to <a href="https://www.fstpackage.org/" rel="nofollow">R's {fst}</a>, once compiled. The JDF
format also results in much smaller file size vs Feather.jl in this particular
example (probably due to Feather.jl's inefficient storage of <code>Union{String, Missing}</code>).</p>
<p><a target="_blank" rel="noopener noreferrer" href="benchmarks/results/fannie-mae-read-Performance_2004Q3.txt.png"><img src="benchmarks/results/fannie-mae-read-Performance_2004Q3.txt.png" alt="" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="benchmarks/results/fannie-mae-write-Performance_2004Q3.txt.png"><img src="benchmarks/results/fannie-mae-write-Performance_2004Q3.txt.png" alt="" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="benchmarks/results/fannie-mae-filesize-Performance_2004Q3.txt.png"><img src="benchmarks/results/fannie-mae-filesize-Performance_2004Q3.txt.png" alt="" style="max-width:100%;"></a></p>
<p>Please note that the benchmarks were obtained on Julia 1.3+. On earlier versions
of Julia where multi-threading isn't available, JDF is roughly 2x slower than as
shown in the benchmarks.</p>
<h2><a id="user-content-supported-data-types" class="anchor" aria-hidden="true" href="#supported-data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported data types</h2>
<p>I believe that restricting the types that JDF supports is vital for simplicity and maintainability.</p>
<p>There is support for</p>
<ul>
<li><code>WeakRefStrings.StringVector</code></li>
<li><code>Vector{T}</code>, <code>Vector{Union{Mising, T}}</code>, <code>Vector{Union{Nothing, T}}</code></li>
<li><code>CategoricalArrays.CategoricalVetors{T}</code></li>
</ul>
<p>where <code>T</code> can be <code>String</code>, <code>Bool</code>, <code>Symbol</code>, <code>Char</code>, <code>TimeZones.ZonedDateTime</code> (experimental) and <code>isbits</code> types i.e. <code>UInt*</code>, <code>Int*</code>,
and <code>Float*</code> <code>Date*</code> types etc.</p>
<p><code>RLEVectors</code> support will be considered in the future when <code>missing</code> support
arrives for <code>RLEVectors.jl</code>.</p>
<h2><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Resources</h2>
<p><a href="https://github.com/bkamins/">@bkamins</a>'s excellent <a href="https://github.com/bkamins/Julia-DataFrames-Tutorial/blob/master/04_loadsave.ipynb">DataFrames.jl tutorial</a> contains a section on using JDF.jl.</p>
<h2><a id="user-content-how-does-jdf-work" class="anchor" aria-hidden="true" href="#how-does-jdf-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How does JDF work?</h2>
<p>When saving a JDF, each vector is Blosc compressed (using the default settings)
if possible; this includes all <code>T</code> and <code>Unions{Missing, T}</code> types where <code>T</code> is
<code>isbits</code>. For <code>String</code> vectors, they are first converted to a  Run Length
Encoding (RLE) representation, and the lengths component in the RLE are <code>Blosc</code>
compressed.</p>
<h2><a id="user-content-development-plans" class="anchor" aria-hidden="true" href="#development-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Development Plans</h2>
<p>I fully intend to develop JDF.jl into a language neutral format by version v0.4. However, I have other OSS commitments including <a href="http:/diskframe.com">R's
{disk.frame}</a> and hence new features might be slow to come onboard. But I am fully committed to making JDF files created using JDF.jl v0.2 or higher loadable in all future JDF.jl versions.</p>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes</h2>
<ul>
<li>Parallel read and write support is only available from Julia 1.3.</li>
<li>The design of JDF was inspired by <a href="fstpackage.org">fst</a> in terms of using compressions and allowing random-access to columns</li>
</ul>
</article></div>