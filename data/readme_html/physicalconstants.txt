<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-physicalconstantsjl" class="anchor" aria-hidden="true" href="#physicalconstantsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PhysicalConstants.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://juliaphysics.github.io/PhysicalConstants.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaPhysics/PhysicalConstants.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaPhysics/PhysicalConstants.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/JuliaPhysics/PhysicalConstants.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a8ea92f5de202cd50da234c8988e49b568dd627eaa22e4cb582db6126697173f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961506879736963732f506879736963616c436f6e7374616e74732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaPhysics/PhysicalConstants.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://juliaphysics.github.io/PhysicalConstants.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"></td>
<td align="center"><a href="https://codecov.io/gh/JuliaPhysics/PhysicalConstants.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1e1749031327a8997295a3a5392f4aedc597a743160c1313acf65e32668b1b2/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506879736963732f506879736963616c436f6e7374616e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaPhysics/PhysicalConstants.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p><code>PhysicalConstants.jl</code> provides common physical constants.  They are defined as
instances of the new <code>Constant</code> type, which is subtype of <code>AbstractQuantity</code>
(from <a href="https://github.com/ajkeller34/Unitful.jl"><code>Unitful.jl</code></a> package) and can
also be turned into <code>Measurement</code> objects (from
<a href="https://github.com/JuliaPhysics/Measurements.jl"><code>Measurements.jl</code></a> package) at
request.</p>
<p>Constants are grouped into different submodules, so that the user can choose
different datasets as needed.  Currently, 2014 and 2018 editions of
<a href="https://physics.nist.gov/cuu/Constants/" rel="nofollow">CODATA</a> recommended values of the
fundamental physical constants are provided.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The latest version of <code>PhysicalConstants.jl</code> is available for Julia 1.0 and
later versions, and can be installed with <a href="https://julialang.github.io/Pkg.jl/stable/" rel="nofollow">Julia built-in package
manager</a>.  After entering the
package manager mode by pressing <code>]</code>, run the command</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add PhysicalConstants
"><pre>pkg<span class="pl-k">&gt;</span> add PhysicalConstants</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>You can load the package as usual with <code>using PhysicalConstants</code> but this module
does not provide anything useful for the end-users.  You most probably want to
directly load the submodule with the dataset you are interested in.  For
example, for CODATA 2018 load <code>PhysicalConstants.CODATA2018</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PhysicalConstants.CODATA2018

julia&gt; SpeedOfLightInVacuum
Speed of light in vacuum (c_0)
Value                         = 2.99792458e8 m s^-1
Standard uncertainty          = (exact)
Relative standard uncertainty = (exact)
Reference                     = CODATA 2018

julia&gt; NewtonianConstantOfGravitation
Newtonian constant of gravitation (G)
Value                         = 6.6743e-11 m^3 kg^-1 s^-2
Standard uncertainty          = 1.5e-15 m^3 kg^-1 s^-2
Relative standard uncertainty = 2.2e-5
Reference                     = CODATA 2018
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PhysicalConstants<span class="pl-k">.</span>CODATA2018

julia<span class="pl-k">&gt;</span> SpeedOfLightInVacuum
Speed of light <span class="pl-k">in</span> vacuum (c_0)
Value                         <span class="pl-k">=</span> <span class="pl-c1">2.99792458e8</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>
Standard uncertainty          <span class="pl-k">=</span> (exact)
Relative standard uncertainty <span class="pl-k">=</span> (exact)
Reference                     <span class="pl-k">=</span> CODATA <span class="pl-c1">2018</span>

julia<span class="pl-k">&gt;</span> NewtonianConstantOfGravitation
Newtonian constant of gravitation (G)
Value                         <span class="pl-k">=</span> <span class="pl-c1">6.6743e-11</span> m<span class="pl-k">^</span><span class="pl-c1">3</span> kg<span class="pl-k">^-</span><span class="pl-c1">1</span> s<span class="pl-k">^-</span><span class="pl-c1">2</span>
Standard uncertainty          <span class="pl-k">=</span> <span class="pl-c1">1.5e-15</span> m<span class="pl-k">^</span><span class="pl-c1">3</span> kg<span class="pl-k">^-</span><span class="pl-c1">1</span> s<span class="pl-k">^-</span><span class="pl-c1">2</span>
Relative standard uncertainty <span class="pl-k">=</span> <span class="pl-c1">2.2e-5</span>
Reference                     <span class="pl-k">=</span> CODATA <span class="pl-c1">2018</span></pre></div>
<p><code>SpeedOfLightInVacuum</code> and <code>NewtonianConstantOfGravitation</code> are two of the
<code>PhysicalConstant</code>s defined in the <code>PhysicalConstants.CODATA2018</code> module, the
full list of available constants is given below.</p>
<p><code>PhysicalConstant</code>s can be readily used in mathematical operations, using by
default their <code>Float64</code> value:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import PhysicalConstants.CODATA2018: c_0, ε_0, μ_0

julia&gt; 2 * ε_0
1.77083756256e-11 F m^-1

julia&gt; ε_0 - 1 / (μ_0 * c_0 ^ 2)
-3.8450973786644646e-25 A^2 s^4 kg^-1 m^-3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> PhysicalConstants<span class="pl-k">.</span>CODATA2018<span class="pl-k">:</span> c_0, ε_0, μ_0

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> ε_0
<span class="pl-c1">1.77083756256e-11</span> F m<span class="pl-k">^-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> ε_0 <span class="pl-k">-</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> (μ_0 <span class="pl-k">*</span> c_0 <span class="pl-k">^</span> <span class="pl-c1">2</span>)
<span class="pl-k">-</span><span class="pl-c1">3.8450973786644646e-25</span> A<span class="pl-k">^</span><span class="pl-c1">2</span> s<span class="pl-k">^</span><span class="pl-c1">4</span> kg<span class="pl-k">^-</span><span class="pl-c1">1</span> m<span class="pl-k">^-</span><span class="pl-c1">3</span></pre></div>
<p>If you want to use a different precision for the value of the constant, use the
function <code>float(float_type, constant)</code>, for example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; float(Float32, ε_0)
8.854188f-12 F m^-1

julia&gt; float(BigFloat, ε_0)
8.854187812799999999999999999999999999999999999999999999999999999999999999999973e-12 F m^-1

julia&gt; big(ε_0)
8.854187812799999999999999999999999999999999999999999999999999999999999999999973e-12 F m^-1

julia&gt; big(ε_0) - inv(big(μ_0) * big(c_0)^2)
-3.849883307464075736533920296598236938395867709081184624499315166190408485179288e-25 A^2 s^4 kg^-1 m^-3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(Float32, ε_0)
<span class="pl-c1">8.854188f-12</span> F m<span class="pl-k">^-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(BigFloat, ε_0)
<span class="pl-c1">8.854187812799999999999999999999999999999999999999999999999999999999999999999973e-12</span> F m<span class="pl-k">^-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">big</span>(ε_0)
<span class="pl-c1">8.854187812799999999999999999999999999999999999999999999999999999999999999999973e-12</span> F m<span class="pl-k">^-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">big</span>(ε_0) <span class="pl-k">-</span> <span class="pl-c1">inv</span>(<span class="pl-c1">big</span>(μ_0) <span class="pl-k">*</span> <span class="pl-c1">big</span>(c_0)<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-k">-</span><span class="pl-c1">3.849883307464075736533920296598236938395867709081184624499315166190408485179288e-25</span> A<span class="pl-k">^</span><span class="pl-c1">2</span> s<span class="pl-k">^</span><span class="pl-c1">4</span> kg<span class="pl-k">^-</span><span class="pl-c1">1</span> m<span class="pl-k">^-</span><span class="pl-c1">3</span></pre></div>
<p>Note that <code>big(constant)</code> is an alias for <code>float(BigFloat, constant)</code>.</p>
<p>If in addition to units you also want the standard uncertainty associated with
the constant, use <code>measurement(x)</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Measurements

julia&gt; import PhysicalConstants.CODATA2018: h, ħ

julia&gt; measurement(ħ)
1.0545718176461565e-34 ± 0.0 J s

julia&gt; measurement(Float32, ħ)
1.0545718e-34 ± 0.0 J s

julia&gt; measurement(BigFloat, ħ)
1.054571817646156391262428003302280744722826330020413122421923470598435912734741e-34 ± 0.0 J s

julia&gt; measurement(BigFloat, ħ) / (measurement(BigFloat, h) / (2 * big(pi)))
1.0 ± 0.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Measurements

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> PhysicalConstants<span class="pl-k">.</span>CODATA2018<span class="pl-k">:</span> h, ħ

julia<span class="pl-k">&gt;</span> <span class="pl-c1">measurement</span>(ħ)
<span class="pl-c1">1.0545718176461565e-34</span> ± <span class="pl-c1">0.0</span> J s

julia<span class="pl-k">&gt;</span> <span class="pl-c1">measurement</span>(Float32, ħ)
<span class="pl-c1">1.0545718e-34</span> ± <span class="pl-c1">0.0</span> J s

julia<span class="pl-k">&gt;</span> <span class="pl-c1">measurement</span>(BigFloat, ħ)
<span class="pl-c1">1.054571817646156391262428003302280744722826330020413122421923470598435912734741e-34</span> ± <span class="pl-c1">0.0</span> J s

julia<span class="pl-k">&gt;</span> <span class="pl-c1">measurement</span>(BigFloat, ħ) <span class="pl-k">/</span> (<span class="pl-c1">measurement</span>(BigFloat, h) <span class="pl-k">/</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">big</span>(<span class="pl-c1">pi</span>)))
<span class="pl-c1">1.0</span> ± <span class="pl-c1">0.0</span></pre></div>
<p>For more information read the
<a href="https://juliaphysics.github.io/PhysicalConstants.jl/stable/" rel="nofollow">documentation</a>,
which includes the full list of constants defined by the package.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>The <code>PhysicalConstants.jl</code> package is licensed under the MIT "Expat" License.
The original author is <a href="https://github.com/giordano/">Mosè Giordano</a>.</p>
</article></div>