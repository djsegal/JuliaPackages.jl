<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-numericalintegration" class="anchor" aria-hidden="true" href="#numericalintegration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NumericalIntegration</h1>
<p dir="auto"><a href="https://travis-ci.org/deXtoRious/NumericalIntegration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/59e184ddcb6ee7b1eaee249dd52b80630b7f4318ab3d0890933e499538265d13/68747470733a2f2f7472617669732d63692e6f72672f646578746f72696f75732f4e756d65726963616c496e746567726174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dextorious/NumericalIntegration.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/dextorious/NumericalIntegration.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4c8c39670e945566d6ac1350b59a2202177f45e3bd09e5343f63fc8c17c704c4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f646578746f72696f75732f4e756d65726963616c496e746567726174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/dextorious/NumericalIntegration.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/dextorious/NumericalIntegration.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8f235eb3bf5c1e52046c37cd893a922a444fc28fe09bf0dae89efd8008db56eb/687474703a2f2f636f6465636f762e696f2f6769746875622f646578746f72696f75732f4e756d65726963616c496e746567726174696f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/dextorious/NumericalIntegration.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This is a simple package to provide functionality for numerically integrating presampled data (meaning you can't choose arbitrary nodes). If you have the ability to evaluate your integrand at arbitrary points, please consider using better tools for the job (such as the excellent <a href="https://github.com/ajt60gaibb/FastGaussQuadrature.jl">FastGaussQuadrature.jl</a>).</p>
<p dir="auto">Do note that while the code is trivial, it has not been extensively tested and does not focus on numerical precision. Issues, suggestions and pull requests are welcome.</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# setup some data
x = collect(-π/2 : π/1000 : π/2)
y = sin.(x)

# integrate using the default Trapezoidal method
integrate(x, y)

# integrate using a specific method
integrate(x, y, SimpsonEven())

# compute cumulative integral
Y = cumul_integrate(x, y)

# compute cumulative integral for each column of an array
z = [sin.(x) cos.(x) exp.(x/pi)]
Z = cumul_integrate(x, z)

# compute cumulative integral for each line of an array
zp = permutedims(z)
ZP = cumul_integrate(x, zp, dims=1)

# Multidimensional integration
Y = [i*j for i=x,j=y]
integrate((x,y), Y)"><pre><span class="pl-c"><span class="pl-c">#</span> setup some data</span>
x <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-k">-</span>π<span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">:</span> π<span class="pl-k">/</span><span class="pl-c1">1000</span> <span class="pl-k">:</span> π<span class="pl-k">/</span><span class="pl-c1">2</span>)
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(x)

<span class="pl-c"><span class="pl-c">#</span> integrate using the default Trapezoidal method</span>
<span class="pl-c1">integrate</span>(x, y)

<span class="pl-c"><span class="pl-c">#</span> integrate using a specific method</span>
<span class="pl-c1">integrate</span>(x, y, <span class="pl-c1">SimpsonEven</span>())

<span class="pl-c"><span class="pl-c">#</span> compute cumulative integral</span>
Y <span class="pl-k">=</span> <span class="pl-c1">cumul_integrate</span>(x, y)

<span class="pl-c"><span class="pl-c">#</span> compute cumulative integral for each column of an array</span>
z <span class="pl-k">=</span> [<span class="pl-c1">sin</span>.(x) <span class="pl-c1">cos</span>.(x) <span class="pl-c1">exp</span>.(x<span class="pl-k">/</span><span class="pl-c1">pi</span>)]
Z <span class="pl-k">=</span> <span class="pl-c1">cumul_integrate</span>(x, z)

<span class="pl-c"><span class="pl-c">#</span> compute cumulative integral for each line of an array</span>
zp <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(z)
ZP <span class="pl-k">=</span> <span class="pl-c1">cumul_integrate</span>(x, zp, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Multidimensional integration</span>
Y <span class="pl-k">=</span> [i<span class="pl-k">*</span>j <span class="pl-k">for</span> i<span class="pl-k">=</span>x,j<span class="pl-k">=</span>y]
<span class="pl-c1">integrate</span>((x,y), Y)</pre></div>
<p dir="auto">The currently available methods are:</p>
<ul dir="auto">
<li>Trapezoidal (default)</li>
<li>TrapezoidalEven</li>
<li>TrapezoidalFast</li>
<li>TrapezoidalEvenFast</li>
<li>SimpsonEven</li>
<li>SimpsonEvenFast</li>
<li>RombergEven</li>
</ul>
<p dir="auto">Currently cumulative integrals and multidimensional integrals are restricted to using Trapezoidal methods.</p>
<p dir="auto">All methods containing "Even" in the name assume evenly spaced data. All methods containing "Fast" omit basic correctness checks and focus on performance. Consequently, the fast methods will segfault or produce incorrect results if you supply incorrect data (vectors of different lengths, etc.). RombergEven needs a power of 2 + 1 points (so 9, 17, 33, 65, 129, 257, 513, 1025...) evenly spaced for it to work. Useful when control over accuracy is needed.</p>
</article></div>