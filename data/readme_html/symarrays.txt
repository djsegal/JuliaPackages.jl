<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symarraysjl" class="anchor" aria-hidden="true" href="#symarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymArrays.jl</h1>
<p dir="auto"><a href="https://jfeist.github.io/SymArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jfeist.github.io/SymArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/jfeist/SymArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/57039387968facd906c32cc31d3c7d969606d7e2d218b608be4893e8950aa9bd/68747470733a2f2f7472617669732d63692e636f6d2f6a66656973742f53796d4172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jfeist/SymArrays.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jfeist/SymArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/990d743412b18636977a9fec7300f75be7f62ee63af919662b7de2dd7dd7a4ec/68747470733a2f2f636f6465636f762e696f2f67682f6a66656973742f53796d4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jfeist/SymArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides some tools to efficiently store arrays with exchange symmetries, i.e., arrays where exchanging two indices leaves the value unchanged. It stores the underlying data in a flat vector and provides mappings that allow to address it as a "normal" <code>AbstractArray{T,N}</code>. To generate a new one with undefined data, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="S = SymArray{Nsyms,T}(dims...)"><pre>S <span class="pl-k">=</span> <span class="pl-c1">SymArray</span><span class="pl-c1">{Nsyms,T}</span>(dims<span class="pl-k">...</span>)</pre></div>
<p dir="auto">where <code>NSyms</code> is a tuple that indicates the size of each group of exchangeable indices (which have to be adjacent for simplicity), <code>T</code> is the element type (e.g., <code>Float64</code> or <code>ComplexF64</code>), and <code>dims</code> are the dimensions of the array (which have to fulfill <code>length(dims)==sum(Nsyms)</code>. As an example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="S = SymArray{(3,1,2,1),Float64}(10,10,10,3,50,50,50)"><pre>S <span class="pl-k">=</span> <span class="pl-c1">SymArray</span><span class="pl-c1">{(3,1,2,1),Float64}</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">3</span>,<span class="pl-c1">50</span>,<span class="pl-c1">50</span>,<span class="pl-c1">50</span>)</pre></div>
<p dir="auto">declares an array <code>S[(i,j,k),l,(m,n),o]</code> where any permutation of <code>(i,j,k)</code> leaves the value unchanged, as does any permutation of <code>(m,n)</code>. Note that interchangeable indices obviously have to have the same size.</p>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO:</h2>
<ul dir="auto">
<li>Allow specification and treatment of Hermitian indices, where any permutation conjugates the result (possibly only for 2 indices at a time?).</li>
</ul>
</article></div>