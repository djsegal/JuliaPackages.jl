<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bittwiddlingconveniencefunctions" class="anchor" aria-hidden="true" href="#bittwiddlingconveniencefunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BitTwiddlingConvenienceFunctions</h1>
<p dir="auto"><a href="https://JuliaSIMD.github.io/BitTwiddlingConvenienceFunctions.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSIMD.github.io/BitTwiddlingConvenienceFunctions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/BitTwiddlingConvenienceFunctions.jl/actions"><img src="https://github.com/JuliaSIMD/BitTwiddlingConvenienceFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/BitTwiddlingConvenienceFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0f37bff35aef412354c29fd7ebe0dcfb28941b4059d8e0d27ebd9d26f76f25fb/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f42697454776964646c696e67436f6e76656e69656e636546756e6374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSIMD/BitTwiddlingConvenienceFunctions.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Useful for going to next/previous mask size, or calculating corresponding shifts:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BitTwiddlingConvenienceFunctions: prevpow2, nextpow2, intlog2

julia&gt; prevpow2.(7:9)'
1×3 adjoint(::Vector{Int64}) with eltype Int64:
 4  8  8

julia&gt; nextpow2.(7:9)'
1×3 adjoint(::Vector{Int64}) with eltype Int64:
 8  8  16

julia&gt; intlog2.(7:9)' # truncated
1×3 adjoint(::Vector{Int64}) with eltype Int64:
 2  3  3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BitTwiddlingConvenienceFunctions<span class="pl-k">:</span> prevpow2, nextpow2, intlog2

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prevpow2</span>.(<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">9</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">adjoint</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">8</span>  <span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nextpow2</span>.(<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">9</span>)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">adjoint</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">8</span>  <span class="pl-c1">8</span>  <span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">intlog2</span>.(<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">9</span>)<span class="pl-k">'</span> <span class="pl-c"><span class="pl-c">#</span> truncated</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">adjoint</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span></pre></div>
</article></div>