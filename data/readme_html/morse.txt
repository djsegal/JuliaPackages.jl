<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-morse" class="anchor" aria-hidden="true" href="#morse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Morse</h1>
<p>Morse is the morphological analysis model described in:</p>
<p>Akyürek, Ekin, Erenay Dayanık, and Deniz Yuret. "Morphological Analysis Using a Sequence Decoder." <em>Transactions of the Association for Computational Linguistics</em> 7 (2019): 567-579. (<a href="https://www.transacl.org/ojs/index.php/tacl/article/view/1654" rel="nofollow">TACL</a>, <a href="https://arxiv.org/abs/1805.07946" rel="nofollow">arXiv</a>).</p>
<h2><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dependencies</h2>
<ul>
<li>Julia 1.x</li>
<li>Network connection</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="   git clone https://github.com/ai-ku/Morse.jl
   cd Morse.jl
"><pre>   git clone https://github.com/ai-ku/Morse.jl
   <span class="pl-c1">cd</span> Morse.jl</pre></div>
<p><strong>Note</strong>: Setup and Data is optional because running an experiment from the scripts directory automatically sets up the environment and installs required data when needed. However, if you're working in a cluster node that has no internet connection, you may need to perform these steps manually. To get the <code>pkg&gt;</code> prompt in Julia for package commands please use the ']' key. Backspace gets back to the original <code>julia&gt;</code> prompt.</p>
<ul>
<li>
<h4><a id="user-content-setup-optional" class="anchor" aria-hidden="true" href="#setup-optional"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setup (Optional)</h4>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="   julia&gt; # Press the `]` key to get the `pkg&gt;` prompt
   (v1.1) pkg&gt; activate .
   (v1.1) Morse&gt; instantiate # only in the first time
"><pre>   julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Press the `]` key to get the `pkg&gt;` prompt</span>
   (v1.<span class="pl-c1">1</span>) pkg<span class="pl-k">&gt;</span> activate .
   (v1.<span class="pl-c1">1</span>) Morse<span class="pl-k">&gt;</span> instantiate <span class="pl-c"><span class="pl-c">#</span> only in the first time</span></pre></div>
<ul>
<li>
<h4><a id="user-content-data-optional" class="anchor" aria-hidden="true" href="#data-optional"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Data (Optional)</h4>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="   julia&gt; using Morse
   julia&gt; download(TRDataSet)
   julia&gt; download(UDDataSet)
"><pre>   julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Morse
   julia<span class="pl-k">&gt;</span> <span class="pl-c1">download</span>(TRDataSet)
   julia<span class="pl-k">&gt;</span> <span class="pl-c1">download</span>(UDDataSet)</pre></div>
<h2><a id="user-content-experiments" class="anchor" aria-hidden="true" href="#experiments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Experiments</h2>
<p>To verify the results presented in the paper, you may run the scripts to train models and ablations. During training logs will be created at <a href="logs/">logs/</a> folder.</p>
<p>Detailed information about experiments can be found in <a href="scripts/README.md">scripts/</a></p>
<p><strong>Note</strong>: An Nvidia GPU is required to train the models in a reasonable amount of time.</p>
<h2><a id="user-content-tagging" class="anchor" aria-hidden="true" href="#tagging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tagging</h2>
<p>Available Pre-Trained Models</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="trained(MorseModel, TRDataSet);
trained(MorseModel, UDDataSet, lang=&quot;ru&quot;); # Russian
trained(MorseModel, UDDataSet, lang=&quot;da&quot;); # Danish
trained(MorseModel, UDDataSet, lang=&quot;fi&quot;); # Finnish
trained(MorseModel, UDDataSet, lang=&quot;pt&quot;); # Portuguese
trained(MorseModel, UDDataSet, lang=&quot;es&quot;); # Español
trained(MorseModel, UDDataSet, lang=&quot;hu&quot;); # Hungarian
trained(MorseModel, UDDataSet, lang=&quot;bg&quot;); # Bulgarian
trained(MorseModel, UDDataSet, lang=&quot;sv&quot;); # Swedish
"><pre><span class="pl-c1">trained</span>(MorseModel, TRDataSet);
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ru<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Russian</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>da<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Danish</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>fi<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Finnish</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>pt<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Portuguese</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>es<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Español</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>hu<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Hungarian</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bg<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Bulgarian</span>
<span class="pl-c1">trained</span>(MorseModel, UDDataSet, lang<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sv<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> Swedish</span></pre></div>
<h3><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How To Use</h3>
<p>Note: Please use lowercased and tokenized inputs.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="   julia&gt; using Knet, KnetLayers, Morse
   julia&gt; model, vocabulary, parser = trained(MorseModel, TRDataSet);
   julia&gt; predictions = model(&quot;annem sana yardım edemez .&quot;, v=vocabulary, p=parser)
   annem anne+Noun+A3sg+P1sg+Nom
   sana sen+Pron+Pers+A2sg+Pnon+Dat
   yardım yardım+Noun+A3sg+Pnon+Nom
   edemez et+Verb^DB+Verb+Able+Neg+Aor+A3sg
   . .+Punct
"><pre>   julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Knet, KnetLayers, Morse
   julia<span class="pl-k">&gt;</span> model, vocabulary, parser <span class="pl-k">=</span> <span class="pl-c1">trained</span>(MorseModel, TRDataSet);
   julia<span class="pl-k">&gt;</span> predictions <span class="pl-k">=</span> <span class="pl-c1">model</span>(<span class="pl-s"><span class="pl-pds">"</span>annem sana yardım edemez .<span class="pl-pds">"</span></span>, v<span class="pl-k">=</span>vocabulary, p<span class="pl-k">=</span>parser)
   annem anne<span class="pl-k">+</span>Noun<span class="pl-k">+</span>A3sg<span class="pl-k">+</span>P1sg<span class="pl-k">+</span>Nom
   sana sen<span class="pl-k">+</span>Pron<span class="pl-k">+</span>Pers<span class="pl-k">+</span>A2sg<span class="pl-k">+</span>Pnon<span class="pl-k">+</span>Dat
   yardım yardım<span class="pl-k">+</span>Noun<span class="pl-k">+</span>A3sg<span class="pl-k">+</span>Pnon<span class="pl-k">+</span>Nom
   edemez et<span class="pl-k">+</span>Verb<span class="pl-k">^</span>DB<span class="pl-k">+</span>Verb<span class="pl-k">+</span>Able<span class="pl-k">+</span>Neg<span class="pl-k">+</span>Aor<span class="pl-k">+</span>A3sg
   . <span class="pl-k">.+</span>Punct</pre></div>
<h2><a id="user-content-customized-training" class="anchor" aria-hidden="true" href="#customized-training"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Customized Training</h2>
<p>Note: Nvidia GPU is required to train on a reasonable time.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="   julia&gt; using Knet, KnetLayers, Morse
   julia&gt; config = Morse.intro(split(&quot;--logFile nothing --lemma --dataSet TRDataSet&quot;)) # you can modify the program arguments
   julia&gt; dataFiles = [&quot;train.txt&quot;, &quot;test.txt&quot;] # make sure you have theese files exists in the given path
   julia&gt; data, vocab, parser = prepareData(dataFiles,TRDataSet) # or UDDataSet
   julia&gt; data = miniBatch(data,vocab) # sentence minibatching is required for processing a sentence correctly
   julia&gt; model = MorseModel(config,vocab)
   julia&gt; setoptim!(model, SGD(;lr=1.6,gclip=60.0))
   julia&gt; trainmodel!(model,data,config,vocab,parser) # can take hours or more depends to your data
   julia&gt; predictions = model(&quot;Annem sana yardım edemez .&quot;, v=vocab, p=parser)
"><pre>   julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Knet, KnetLayers, Morse
   julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> Morse<span class="pl-k">.</span><span class="pl-c1">intro</span>(<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">"</span>--logFile nothing --lemma --dataSet TRDataSet<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> you can modify the program arguments</span>
   julia<span class="pl-k">&gt;</span> dataFiles <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>train.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test.txt<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> make sure you have theese files exists in the given path</span>
   julia<span class="pl-k">&gt;</span> data, vocab, parser <span class="pl-k">=</span> <span class="pl-c1">prepareData</span>(dataFiles,TRDataSet) <span class="pl-c"><span class="pl-c">#</span> or UDDataSet</span>
   julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">miniBatch</span>(data,vocab) <span class="pl-c"><span class="pl-c">#</span> sentence minibatching is required for processing a sentence correctly</span>
   julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">MorseModel</span>(config,vocab)
   julia<span class="pl-k">&gt;</span> <span class="pl-c1">setoptim!</span>(model, <span class="pl-c1">SGD</span>(;lr<span class="pl-k">=</span><span class="pl-c1">1.6</span>,gclip<span class="pl-k">=</span><span class="pl-c1">60.0</span>))
   julia<span class="pl-k">&gt;</span> <span class="pl-c1">trainmodel!</span>(model,data,config,vocab,parser) <span class="pl-c"><span class="pl-c">#</span> can take hours or more depends to your data</span>
   julia<span class="pl-k">&gt;</span> predictions <span class="pl-k">=</span> <span class="pl-c1">model</span>(<span class="pl-s"><span class="pl-pds">"</span>Annem sana yardım edemez .<span class="pl-pds">"</span></span>, v<span class="pl-k">=</span>vocab, p<span class="pl-k">=</span>parser)</pre></div>
</article></div>