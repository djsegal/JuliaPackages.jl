<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kissmcmc" class="anchor" aria-hidden="true" href="#kissmcmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KissMCMC</h1>
<p><a href="https://github.com/mauro3/KissMCMC.jl/actions"><img src="https://github.com/mauro3/KissMCMC.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mauro3/KissMCMC-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/329abae34b4ffc39aa4aac85f77779fd89a7d26ea233813981431eab11d6d5e6/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6175726f332f4b6973734d434d432e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mauro3/KissMCMC.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mauro3/KissMCMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/311b62ab669f361719fddb9d377453ec5f78b5c9f462a3fe5b88004fe3ee1a45/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726f332f4b6973734d434d432e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mauro3/KissMCMC.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Got a probability density function you want to draw samples from?
Don't want to learn all the fancy stuff of the fancy sampler packages?
The KissMCMC (Keep it simple, stupid, MCMC) package intends to provide
a few simple MCMC samplers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using KissMCMC
# the distribution to sample from,
logpdf(x::T) where {T} = x&lt;0 ? -convert(T,Inf) : -x
# initial point of walker
theta0 = 0.5

# Metropolis MCMC sampler:
sample_prop_normal(theta) = 1.5*randn() + theta # samples the proposal (or jump) distribution
thetas, accept_ratio = metropolis(logpdf, sample_prop_normal, theta0, niter=10^5)
println(&quot;Accept ratio Metropolis: $accept_ratio&quot;)

# emcee MCMC sampler:
thetase, accept_ratioe = emcee(logpdf, make_theta0s(theta0, 0.1, logpdf, 100), niter=10^5)
# check convergence using integrated autocorrelation
thetase, accept_ratioe = squash_walkers(thetase, accept_ratioe) # puts all walkers into one
println(&quot;Accept ratio emcee: $accept_ratio&quot;)

using Plots
histogram(thetas, normalize=true, fillalpha=0.4)
histogram!(thetase, normalize=true, fillalpha=0.1)
plot!(0:0.01:5, map(x-&gt;exp(logpdf(x)[1]), 0:0.01:5), lw=3)
"><pre><span class="pl-k">using</span> KissMCMC
<span class="pl-c"><span class="pl-c">#</span> the distribution to sample from,</span>
<span class="pl-en">logpdf</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> {T} <span class="pl-k">=</span> x<span class="pl-k">&lt;</span><span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-k">-</span><span class="pl-c1">convert</span>(T,<span class="pl-c1">Inf</span>) <span class="pl-k">:</span> <span class="pl-k">-</span>x
<span class="pl-c"><span class="pl-c">#</span> initial point of walker</span>
theta0 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>

<span class="pl-c"><span class="pl-c">#</span> Metropolis MCMC sampler:</span>
<span class="pl-en">sample_prop_normal</span>(theta) <span class="pl-k">=</span> <span class="pl-c1">1.5</span><span class="pl-k">*</span><span class="pl-c1">randn</span>() <span class="pl-k">+</span> theta <span class="pl-c"><span class="pl-c">#</span> samples the proposal (or jump) distribution</span>
thetas, accept_ratio <span class="pl-k">=</span> <span class="pl-c1">metropolis</span>(logpdf, sample_prop_normal, theta0, niter<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Accept ratio Metropolis: <span class="pl-v">$accept_ratio</span><span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> emcee MCMC sampler:</span>
thetase, accept_ratioe <span class="pl-k">=</span> <span class="pl-c1">emcee</span>(logpdf, <span class="pl-c1">make_theta0s</span>(theta0, <span class="pl-c1">0.1</span>, logpdf, <span class="pl-c1">100</span>), niter<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> check convergence using integrated autocorrelation</span>
thetase, accept_ratioe <span class="pl-k">=</span> <span class="pl-c1">squash_walkers</span>(thetase, accept_ratioe) <span class="pl-c"><span class="pl-c">#</span> puts all walkers into one</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Accept ratio emcee: <span class="pl-v">$accept_ratio</span><span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> Plots
<span class="pl-c1">histogram</span>(thetas, normalize<span class="pl-k">=</span><span class="pl-c1">true</span>, fillalpha<span class="pl-k">=</span><span class="pl-c1">0.4</span>)
<span class="pl-c1">histogram!</span>(thetase, normalize<span class="pl-k">=</span><span class="pl-c1">true</span>, fillalpha<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">exp</span>(<span class="pl-c1">logpdf</span>(x)[<span class="pl-c1">1</span>]), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">5</span>), lw<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p>outputs:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/4098145/16770344/dcb4a47a-484c-11e6-8f6e-0c2d223e9443.png"><img src="https://cloud.githubusercontent.com/assets/4098145/16770344/dcb4a47a-484c-11e6-8f6e-0c2d223e9443.png" alt="" style="max-width:100%;"></a></p>
<p>MCMC samplers:</p>
<ul>
<li>Metropolis (serial) <code>metropolis</code></li>
<li>Affine invariant MCMC, aka emcee <code>emcee</code> (threaded)</li>
</ul>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<p>Other, probably better Julia MCMC packages:</p>
<ul>
<li><a href="https://github.com/tpapp/DynamicHMC.jl">https://github.com/tpapp/DynamicHMC.jl</a></li>
<li><a href="https://github.com/madsjulia/AffineInvariantMCMC.jl">https://github.com/madsjulia/AffineInvariantMCMC.jl</a></li>
<li><a href="https://github.com/brian-j-smith/Mamba.jl">https://github.com/brian-j-smith/Mamba.jl</a></li>
<li>and many others</li>
</ul>
<p>The (original) emcee python package: <a href="https://github.com/dfm/emcee">https://github.com/dfm/emcee</a></p>
</article></div>