<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-kissmcmc" class="anchor" aria-hidden="true" href="#kissmcmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>KissMCMC</h1>
<p><a href="https://travis-ci.com/mauro3/KissMCMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e968443204b50e20728397e922cdc3dba486711a/68747470733a2f2f7472617669732d63692e636f6d2f6d6175726f332f4b6973734d434d432e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mauro3/KissMCMC.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mauro3/KissMCMC-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e51fa6842eeea6abfccf43dca4ef2c56c7c60c0c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6175726f332f4b6973734d434d432e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mauro3/KissMCMC.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mauro3/KissMCMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/65db33932514e8ce8ed58880eb46041cf370da19/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726f332f4b6973734d434d432e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mauro3/KissMCMC.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/mauro3/KissMCMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3779233ae87e78984761e0cb313ac751747ee69b/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f6d6175726f332f4b6973734d434d432e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/mauro3/KissMCMC.jl.svg" style="max-width:100%;"></a></p>
<p>Got a probability density function you want to draw samples from?
Don't want to learn all the fancy stuff of the fancy sampler packages?
The KissMCMC (Keep it simple, stupid, MCMC) package intends to provide
a few simple MCMC samplers.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> KissMCMC
<span class="pl-c"><span class="pl-c">#</span> the distribution to sample from,</span>
<span class="pl-en">logpdf</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> {T} <span class="pl-k">=</span> x<span class="pl-k">&lt;</span><span class="pl-c1">0</span> ? <span class="pl-k">-</span><span class="pl-c1">convert</span>(T,<span class="pl-c1">Inf</span>) : <span class="pl-k">-</span>x
<span class="pl-c"><span class="pl-c">#</span> initial point of walker</span>
theta0 <span class="pl-k">=</span> <span class="pl-c1">0.5</span>

<span class="pl-c"><span class="pl-c">#</span> Metropolis MCMC sampler:</span>
<span class="pl-en">sample_prop_normal</span>(theta) <span class="pl-k">=</span> <span class="pl-c1">1.5</span><span class="pl-k">*</span><span class="pl-c1">randn</span>() <span class="pl-k">+</span> theta <span class="pl-c"><span class="pl-c">#</span> samples the proposal (or jump) distribution</span>
thetas, accept_ratio <span class="pl-k">=</span> <span class="pl-c1">metropolis</span>(logpdf, sample_prop_normal, theta0, niter<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Accept ratio Metropolis: <span class="pl-v">$accept_ratio</span><span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> emcee MCMC sampler:</span>
thetase, accept_ratioe <span class="pl-k">=</span> <span class="pl-c1">emcee</span>(logpdf, <span class="pl-c1">make_theta0s</span>(theta0, <span class="pl-c1">0.1</span>, logpdf, <span class="pl-c1">100</span>), niter<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> check convergence using integrated autocorrelation</span>
thetase, accept_ratioe <span class="pl-k">=</span> <span class="pl-c1">squash_walkers</span>(thetase, accept_ratioe) <span class="pl-c"><span class="pl-c">#</span> puts all walkers into one</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Accept ratio emcee: <span class="pl-v">$accept_ratio</span><span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> Plots
<span class="pl-c1">histogram</span>(thetas, normalize<span class="pl-k">=</span><span class="pl-c1">true</span>, fillalpha<span class="pl-k">=</span><span class="pl-c1">0.4</span>)
<span class="pl-c1">histogram!</span>(thetase, normalize<span class="pl-k">=</span><span class="pl-c1">true</span>, fillalpha<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">exp</span>(<span class="pl-c1">logpdf</span>(x)[<span class="pl-c1">1</span>]), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">5</span>), lw<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p>outputs:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/4098145/16770344/dcb4a47a-484c-11e6-8f6e-0c2d223e9443.png"><img src="https://cloud.githubusercontent.com/assets/4098145/16770344/dcb4a47a-484c-11e6-8f6e-0c2d223e9443.png" alt="" style="max-width:100%;"></a></p>
<p>MCMC samplers:</p>
<ul>
<li>Metropolis (serial) <code>metropolis</code></li>
<li>Affine invariant MCMC, aka emcee <code>emcee</code> (threaded)</li>
</ul>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h1>
<p>Other, probably better Julia MCMC packages:</p>
<ul>
<li><a href="https://github.com/tpapp/DynamicHMC.jl">https://github.com/tpapp/DynamicHMC.jl</a></li>
<li><a href="https://github.com/madsjulia/AffineInvariantMCMC.jl">https://github.com/madsjulia/AffineInvariantMCMC.jl</a></li>
<li><a href="https://github.com/brian-j-smith/Mamba.jl">https://github.com/brian-j-smith/Mamba.jl</a></li>
<li>and many others</li>
</ul>
<p>The (original) emcee python package: <a href="http://dan.iel.fm/emcee/current/" rel="nofollow">http://dan.iel.fm/emcee/current/</a></p>
</article></div>