<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-binaryprovider" class="anchor" aria-hidden="true" href="#binaryprovider"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BinaryProvider</h1>
<p><a href="https://travis-ci.org/JuliaPackaging/BinaryProvider.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f6c0fe90a293b4e63dd101e6cdde712794ccf1ae/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615061636b6167696e672f42696e61727950726f76696465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Status" data-canonical-src="https://travis-ci.org/JuliaPackaging/BinaryProvider.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://ci.appveyor.com/project/staticfloat/binaryprovider-jl-fu5p5/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/b436e0840e65e450dd8bbf56005cdcd7af42c85d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f30736270323869696530376335646e332f6272616e63682f6d61737465723f7376673d74727565" alt="Appveyor Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/0sbp28iie07c5dn3/branch/master?svg=true" style="max-width:100%;"></a></p>
<p><a href="https://cirrus-ci.com/github/JuliaPackaging/BinaryProvider.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ba13e6d6d988703c6d95b4b5dd5d1679e853764e/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c69615061636b6167696e672f42696e61727950726f76696465722e6a6c2e737667" alt="Cirrus Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaPackaging/BinaryProvider.jl.svg" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaPackaging/BinaryProvider.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f59e28c4bcbe17e25307ccf3fe23eebc3c138c97/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615061636b6167696e672f42696e61727950726f76696465722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaPackaging/BinaryProvider.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-basic-concepts" class="anchor" aria-hidden="true" href="#basic-concepts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic concepts</h2>
<p>Packages are installed to a <code>Prefix</code>; a folder that acts similar to the <code>/usr/local</code> directory on Unix-like systems, containing a <code>bin</code> folder for binaries, a <code>lib</code> folder for libraries, etc...  <code>Prefix</code> objects can have tarballs <code>install()</code>'ed within them, <code>uninstall()</code>'ed from them, etc...</p>
<p><code>BinaryProvider</code> has the concept of a <code>Product</code>, the result of a package installation.  <code>LibraryProduct</code> and <code>ExecutableProduct</code> are two example <code>Product</code> object types that can be used to keep track of the binary objects installed by an <code>install()</code> invocation.  <code>Products</code> can check to see if they are already satisfied (e.g. whether a file exists, or is executable, or is <code>dlopen()</code>'able), allowing for very quick and easy <code>build.jl</code> construction.</p>
<p><code>BinaryProvider</code> also contains a platform abstraction layer for common operations like downloading and unpacking tarballs.  The primary method you should be using to interact with these operations is through the <code>install()</code> method, however if you need more control, there are more fundamental methods such as <code>download_verify()</code>, or <code>unpack()</code>, or even the wittingly-named <code>download_verify_unpack()</code>.</p>
<p>The method documentation within the <code>BinaryProvider</code> module should be considered the primary source of documentation for this package, usage examples are provided in the form of the <code>LibFoo.jl</code> mock package <a href="test/LibFoo.jl">within this repository</a>, as well as other packages that use this package for binary installation such as</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>To download and install a package into a <code>Prefix</code>, the basic syntax is:</p>
<div class="highlight highlight-source-julia"><pre>prefix <span class="pl-k">=</span> <span class="pl-c1">Prefix</span>(<span class="pl-s"><span class="pl-pds">"</span>./deps<span class="pl-pds">"</span></span>)
<span class="pl-c1">install</span>(url, tarball_hash; prefix<span class="pl-k">=</span>prefix)</pre></div>
<p>It is recommended to inspect examples for a fuller treatment of installation, the <a href="test/LibFoo.jl"><code>LibFoo.jl</code> package within this repository</a> contains a <a href="test/LibFoo.jl/deps/build.jl"><code>deps/build.jl</code> file</a> that may be instructive.</p>
<p>To actually generate the tarballs that are installed by this package, check out the <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl"><code>BinaryBuilder.jl</code> package</a>.</p>
<h2><a id="user-content-miscellanea" class="anchor" aria-hidden="true" href="#miscellanea"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Miscellanea</h2>
<ul>
<li>
<p>This package contains a <code>run(::Cmd)</code> wrapper class named <code>OutputCollector</code> that captures the output of shell commands, and in particular, captures the <code>stdout</code> and <code>stderr</code> streams separately, colorizing, buffering and timestamping appropriately to provide seamless printing of shell output in a consistent and intuitive way.  Critically, it also allows for saving of the captured streams to log files, a very useful feature for <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl"><code>BinaryBuilder.jl</code></a>, which makes extensive use of this class, however all commands run by <code>BinaryProvider.jl</code> also use this same mechanism to provide coloring of <code>stderr</code>.</p>
</li>
<li>
<p>When providing <code>ExecutableProduct</code>s to a client package, <code>BinaryProvider</code> will automatically append Julia's private library directory to <code>LD_LIBRARY_PATH</code> on Linux, and <code>DYLD_LIBRARY_PATH</code> on macOS.  This is due to the fact that the compiled binaries may be dependent on libraries such as <code>libgfortran</code>, which ship with Julia and must be found by the system linker or else the binaries will not function.  If you wish to use the binaries outside of Julia, you may need to override those environment variables in a similar fashion; see the generated <code>deps.jl</code> file for the <code>check_deps()</code> function where the precise overriding values can be found.</p>
</li>
</ul>
</article></div>