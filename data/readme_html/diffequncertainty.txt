<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-diffequncertaintyjl" class="anchor" aria-hidden="true" href="#diffequncertaintyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiffEqUncertainty.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/833b89353967086ef3bf7e1d470c469fd93cc80696ae173ffc5fbcf401d2f5af/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/DiffEqUncertainty.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DiffEqUncertainty.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/DiffEqUncertainty.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6cdbbce4b84cd961b68dfe225b02a6157396037377eb64542eeec8cc8a55b57e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614469666645712f446966664571556e6365727461696e74792e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDiffEq/DiffEqUncertainty.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaDiffEq/DiffEqUncertainty.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/40151b4204e59418f73d4b0d79981779fcd3c57d07aacc05d3436158e94a34d7/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614469666645712f446966664571556e6365727461696e74792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaDiffEq/DiffEqUncertainty.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>DiffEqUncertainty.jl is a component package in the DifferentialEquations ecosystem. It holds the
utilities for solving uncertainty quantification. This includes quantifying uncertainties due to either:</p>
<ul>
<li>The propagation of initial condition and parametric uncertainties through an ODE</li>
<li>The finite approximation of numerical solutions of ODEs and PDEs (ProbInts)</li>
</ul>
<h2><a id="user-content-initial-condition-and-parameteric-uncertanties" class="anchor" aria-hidden="true" href="#initial-condition-and-parameteric-uncertanties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initial Condition and Parameteric Uncertanties</h2>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<p>Here, we wish to compute the expected value for the number prey in the Lotka-Volterra model at 10s with uncertainty in the second initial condition and last model parameter. We will solve the expectation using two different algorithms, <code>MonteCarlo</code> and <code>Koopman</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DiffEqUncertainty, OrdinaryDiffEq, Distributions

function f!(du,u,p,t)
    du[1] = p[1]*u[1] - p[2]*u[1]*u[2] #prey
    du[2] = -p[3]*u[2] + p[4]*u[1]*u[2] #predator
end

tspan = (0.0,10.0)
u0 = [1.0;1.0]
p = [1.5,1.0,3.0,1.0]
prob = ODEProblem(f!,u0,tspan,p)

u0_dist = [1.0, Uniform(0.8, 1.1)]
p_dist = [1.5,1.0,3.0,truncated(Normal(1.0,.1),.6, 1.4)]

g(sol) = sol[1,end]

expectation(g, prob, u0_dist, p_dist, MonteCarlo(), Tsit5(); trajectories = 100_000)
expectation(g, prob, u0_dist, p_dist, Koopman(), Tsit5())  
"><pre><span class="pl-k">using</span> DiffEqUncertainty, OrdinaryDiffEq, Distributions

<span class="pl-k">function</span> <span class="pl-en">f!</span>(du,u,p,t)
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> p[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">1</span>] <span class="pl-k">-</span> p[<span class="pl-c1">2</span>]<span class="pl-k">*</span>u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span>prey</span>
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>p[<span class="pl-c1">3</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">+</span> p[<span class="pl-c1">4</span>]<span class="pl-k">*</span>u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span>predator</span>
<span class="pl-k">end</span>

tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>;<span class="pl-c1">1.0</span>]
p <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">1.0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f!,u0,tspan,p)

u0_dist <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">Uniform</span>(<span class="pl-c1">0.8</span>, <span class="pl-c1">1.1</span>)]
p_dist <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">truncated</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">.1</span>),<span class="pl-c1">.6</span>, <span class="pl-c1">1.4</span>)]

<span class="pl-en">g</span>(sol) <span class="pl-k">=</span> sol[<span class="pl-c1">1</span>,<span class="pl-c1">end</span>]

<span class="pl-c1">expectation</span>(g, prob, u0_dist, p_dist, <span class="pl-c1">MonteCarlo</span>(), <span class="pl-c1">Tsit5</span>(); trajectories <span class="pl-k">=</span> <span class="pl-c1">100_000</span>)
<span class="pl-c1">expectation</span>(g, prob, u0_dist, p_dist, <span class="pl-c1">Koopman</span>(), <span class="pl-c1">Tsit5</span>())  </pre></div>
<p>If we wish to compute the variance, or 2nd central moment, of this same observable, we can do so as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="centralmoment(2, g, prob, u0_dist, p_dist, Koopman(), Tsit5())[2]  
"><pre><span class="pl-c1">centralmoment</span>(<span class="pl-c1">2</span>, g, prob, u0_dist, p_dist, <span class="pl-c1">Koopman</span>(), <span class="pl-c1">Tsit5</span>())[<span class="pl-c1">2</span>]  </pre></div>
<p>See <a href="https://github.com/SciML/SciMLTutorials.jl">SciMLTutorials.jl</a> for additional examples.</p>
<h3><a id="user-content-expectations" class="anchor" aria-hidden="true" href="#expectations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expectations</h3>
<p>DiffEqUncertainty.jl provides algorithms for computing the expectation of an observable, or quantity of interest, <code>g</code> of the states of a dynamical system as the system evolves in time. These algorithms are applicable to ODEs with initial condition and/or parametric uncertainty. Process noise is not currently supported.</p>
<p>You can compute the expectation by using the <code>expectation</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="expectation(g, prob, u0, p, expalg, args...; kwargs...)
"><pre><span class="pl-c1">expectation</span>(g, prob, u0, p, expalg, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<ul>
<li><code>g</code>: A function for computing the observable from an ODE solution <code>g(sol)</code></li>
<li><code>prob</code>: An <code>ODEProblem</code></li>
<li><code>u0</code>: Initial conditions. This can include a mixture of <code>Real</code> and <code>ContinuousUnivariateDistribution</code> (from Distributions.jl) types, e.g. <code>u0=[2.0, Uniform(1.0,2.0), Normal(4.0,1.0)]</code>. This allows you to specify both uncertain and deterministic initial conditions</li>
<li><code>p</code>: ODE parameters. This also can include a mixture of <code>Real</code> and <code>ContinuousUnivariateDistribution</code> (from Distributions.jl) types.</li>
<li><code>expalg</code>: Expectation algorithm to use</li>
</ul>
<h4><a id="user-content-algorithms" class="anchor" aria-hidden="true" href="#algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Algorithms</h4>
<p>The following algorithms are available:</p>
<ul>
<li><code>MonteCarlo</code>: Provides a convenient wrapper to <code>EnsembleProblem</code> for computing expectations via Monte Carlo simulation. Requires setting <code>trajectories &gt;1</code>. See the <a href="https://diffeq.sciml.ai/stable/features/ensemble/#" rel="nofollow">DifferentialEquations.jl documentation</a> for additional details.</li>
<li><code>Koopman</code>: Leverages the Koopman operator to compute the expectation efficiently via quadrature methods. This capability is built on top of DifferntialEquations.jl and Quadrature.jl. See Quadrature.jl for additional options. For additional details on this algorithm, refer to <a href="https://arxiv.org/abs/2008.08737" rel="nofollow">The Koopman Expectation: An Operator Theoretic Method for Efficient Analysis and Optimization of Uncertain Hybrid Dynamical Systems</a></li>
</ul>
<h4><a id="user-content-common-keyword-arguments-for-koopman" class="anchor" aria-hidden="true" href="#common-keyword-arguments-for-koopman"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Common Keyword Arguments for <code>Koopman</code></h4>
<ul>
<li><code>quadalg</code>: Quadrature algorithm. See Quadrature.jl for available algorithms</li>
<li><code>maxiter</code>: Maximum number of allowable quadrature iterations</li>
<li><code>ireltol</code>: Relative tolerance for quadrature integration</li>
<li><code>iabstol</code>: Absolute tolerance for quadrature integration</li>
<li><code>nout</code>: Output size of observable <code>g</code>. Used to specify vector-valued expectations</li>
<li><code>batch</code>: The preferred number of points to batch. This allows user-side
parallelization of the expectation. See Quadrature.jl for additional details</li>
</ul>
<h3><a id="user-content-central-moments" class="anchor" aria-hidden="true" href="#central-moments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Central Moments</h3>
<p>These algorithms can also be used to compute higher order central moments via <code>centralmoments</code>. This function returns the central moments up to the requested number.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="centralmoments(n, args...; kwargs...)
"><pre><span class="pl-c1">centralmoments</span>(n, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<ul>
<li><code>n</code>: highest-order central moment to be computed. <code>centralmoments</code> will return an <code>n</code> length array with central moments 1 through <code>n</code></li>
<li><code>args</code> and <code>kwargs</code>: This function wraps <code>expectation</code>. See <code>expectation</code> for additional options.</li>
</ul>
<h2><a id="user-content-probints" class="anchor" aria-hidden="true" href="#probints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ProbInts</h2>
<p>Users interested in using this functionality should check out the <a href="https://diffeq.sciml.ai/stable/analysis/uncertainty_quantification/#ProbInts-1" rel="nofollow">DifferentialEquations.jl documentation</a>.</p>
</article></div>