<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-implotjl" class="anchor" aria-hidden="true" href="#implotjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ImPlot.jl</h1>
<p>Plotting extension library that can be used in conjunction with
<a href="https://github.com/Gnimuc/CImGui.jl">CImGui.jl</a> to provide enhanced immediate-mode data
visualization.</p>
<p>ImPlot.jl provides an interface to <a href="https://github.com/cimgui/cimplot">cimplot</a>,
which is an auto-generated C API to <a href="https://github.com/epezent/implot">implot</a>, a C++
plotting extension library for <a href="https://github.com/ocornut/imgui">imgui</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Simple installation via the package registry:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add ImPlot
"><pre>]add ImPlot</pre></div>
<p>NOTE: The current stable version of <strong>ImPlot on the registry is backed by binaries built from implot v0.4</strong>. If you would like to try out some of the newer plot types and features, the development branch is currently running with binaries built from implot v0.8. To use that instead, install via:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="]add https://github.com/wsphillips/ImPlot.jl#master
"><pre><code>]add https://github.com/wsphillips/ImPlot.jl#master
</code></pre></div>
<p>Also note, there are currently no convenience functions for the newer implot features on the development branch. You will have to work with the lower-level function wrappers in the <code>LibCImPlot</code> submodule</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<p>Use <code>demo/demo.jl</code> to check if things are working + the demo window that shows off what the
API can do.</p>
<p>Plots are delcarative and follow a similar pattern as CImGui.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
## within a CImGui.jl render loop
## This assumes you have CImGui.LibCImGui.ImGuiCond_Once in scope
...

if show_window
    @c CImGui.Begin(&quot;Plot Window&quot;, &amp;show_window)
    y = rand(1000)
    ImPlot.SetNextPlotLimits(0.0,1000,0.0,1.0, ImGuiCond_Once)
    if (ImPlot.BeginPlot(&quot;Foo&quot;, &quot;x1&quot;, &quot;y1&quot;, CImGui.ImVec2(-1,300)))
        ImPlot.PlotLine(y)
        ImPlot.EndPlot()
    end
    CImGui.End()
end
"><pre><span class="pl-c"><span class="pl-c">#</span># within a CImGui.jl render loop</span>
<span class="pl-c"><span class="pl-c">#</span># This assumes you have CImGui.LibCImGui.ImGuiCond_Once in scope</span>
<span class="pl-k">...</span>

<span class="pl-k">if</span> show_window
    <span class="pl-c1">@c</span> CImGui<span class="pl-k">.</span><span class="pl-c1">Begin</span>(<span class="pl-s"><span class="pl-pds">"</span>Plot Window<span class="pl-pds">"</span></span>, <span class="pl-k">&amp;</span>show_window)
    y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>)
    ImPlot<span class="pl-k">.</span><span class="pl-c1">SetNextPlotLimits</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1000</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>, ImGuiCond_Once)
    <span class="pl-k">if</span> (ImPlot<span class="pl-k">.</span><span class="pl-c1">BeginPlot</span>(<span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>x1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>y1<span class="pl-pds">"</span></span>, CImGui<span class="pl-k">.</span><span class="pl-c1">ImVec2</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">300</span>)))
        ImPlot<span class="pl-k">.</span><span class="pl-c1">PlotLine</span>(y)
        ImPlot<span class="pl-k">.</span><span class="pl-c1">EndPlot</span>()
    <span class="pl-k">end</span>
    CImGui<span class="pl-k">.</span><span class="pl-c1">End</span>()
<span class="pl-k">end</span></pre></div>
<p>For some basic Julia imlementation examples, see also <code>demo/example_plots.jl</code> Another good
place to look is the <a href="https://github.com/epezent/implot/blob/v0.3/implot_demo.cpp">C++ demo
sources</a></p>
</article></div>