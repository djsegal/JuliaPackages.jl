<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-roxygenjl" class="anchor" aria-hidden="true" href="#roxygenjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Roxygen.jl</h1>
<p>A draft implementation of a Roxygen-like package for automatically
generating documentation from Julia source files.</p>
<h1><a id="user-content-basic-format" class="anchor" aria-hidden="true" href="#basic-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Format</h1>
<p>The following file shows how a Julia file can use Roxygen through specially
formatted comments:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="#' @@name count
#'
#' @@description
#'
#' Count the number of missing values in every column of an
#' AbstractDataFrame.
#'
#' @@arg adf::AbstractDataFrame An AbstractDataFrame.
#' @@arg skip::Int The index of a column to skip.
#'
#' @@return missing::Vector{Int} The number of missing values in each column.
#' @@return success::Bool Did the operation complete successfully?
#'
#' @@examples
#'
#' df = DataFrame(A = 1:3, B = [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])
#' count(df)

function count(adf::AbstractDataFrame, skip::Int)
	return Int[], false
end

#' @@name sum
#'
#' @@description
#'
#' Sum the elements of each column of an AbstractDataFrame.
#'
#' @@arg adf::AbstractDataFrame An AbstractDataFrame.
#'
#' @@return sums::Vector{Float64} The sums of each column's entries.
#'
#' @@examples
#'
#' df = DataFrame(A = 1:3, B = [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])
#' sum(df)

function sum(adf::AbstractDataFrame)
	return Float64[]
end
"><pre><code>#' @@name count
#'
#' @@description
#'
#' Count the number of missing values in every column of an
#' AbstractDataFrame.
#'
#' @@arg adf::AbstractDataFrame An AbstractDataFrame.
#' @@arg skip::Int The index of a column to skip.
#'
#' @@return missing::Vector{Int} The number of missing values in each column.
#' @@return success::Bool Did the operation complete successfully?
#'
#' @@examples
#'
#' df = DataFrame(A = 1:3, B = ["x", "y", "z"])
#' count(df)

function count(adf::AbstractDataFrame, skip::Int)
	return Int[], false
end

#' @@name sum
#'
#' @@description
#'
#' Sum the elements of each column of an AbstractDataFrame.
#'
#' @@arg adf::AbstractDataFrame An AbstractDataFrame.
#'
#' @@return sums::Vector{Float64} The sums of each column's entries.
#'
#' @@examples
#'
#' df = DataFrame(A = 1:3, B = ["x", "y", "z"])
#' sum(df)

function sum(adf::AbstractDataFrame)
	return Float64[]
end
</code></pre></div>
<p>This file contains Julia code as well as comments that use a set of
<strong>directives</strong>, like <code>@@arg</code> and `@@return`` to describe properties of the
function being documented. The valid directives and requirements for their
use are described below:</p>
<ul>
<li><code>@@name</code>: The name of the function. A name directive usage must look like
<code>@@name NAME</code> with whitespace after the directive and a single name after
the initial whitespace.</li>
<li><code>@@exported</code>: Is the function exported by the package being documented?</li>
<li><code>@@description</code>: A short summary of the use and purpose of the function.</li>
<li><code>@@arg</code>: A summary of each argument of a function in the order required
by the function. Must contain argument name, argument type and a
short verbal description.</li>
<li><code>@@field</code>: A summary of each field of a composite type in the order required
by the type's constructor. Must contain field name, field type and a
short verbal description.</li>
<li><code>@@return</code>: A summary of each return value of a function in the order
returned by the function. Must contain value name, value type and a
short verbal description.</li>
<li><code>@@examples</code>: A free-form set of examples of the function or type's use.</li>
</ul>
<h1><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage Example</h1>
<p>To generate documentation for all <code>.jl</code> files in the <code>src</code> directory and place
this documentation in the <code>doc</code> directory, run the following command:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Roxygen
roxygenize(&quot;src&quot;, &quot;doc&quot;)
"><pre><code>using Roxygen
roxygenize("src", "doc")
</code></pre></div>
<p>Only files from the source directory that contained Roxygen documentation
will give rise to files in the output directory.</p>
</article></div>