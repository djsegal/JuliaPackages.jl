<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-animatedplots" class="anchor" aria-hidden="true" href="#animatedplots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AnimatedPlots</h1>
<p dir="auto">Animated plots is a package for making animated and static plots. It is built on top of [SFML.jl] (<a href="https://github.com/zyedidia/SFML.jl">https://github.com/zyedidia/SFML.jl</a>) and allows for fast plotting of functions and variables over time.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b33a6961d89057ed56d7b23c0c34401162aa245dce6d316be2f68b6866ba4977/68747470733a2f2f7a796564696469612e6769746875622e696f2f6173736574732f646f75626c655f70656e64756c756d322e676966"><img src="https://camo.githubusercontent.com/b33a6961d89057ed56d7b23c0c34401162aa245dce6d316be2f68b6866ba4977/68747470733a2f2f7a796564696469612e6769746875622e696f2f6173736574732f646f75626c655f70656e64756c756d322e676966" alt="double pendulum" data-animated-image="" data-canonical-src="https://zyedidia.github.io/assets/double_pendulum2.gif" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">Make sure you have SFML and CSFML installed (see the SFML [installation instructions] (<a href="https://github.com/zyedidia/SFML.jl#installation">https://github.com/zyedidia/SFML.jl#installation</a>) for more information)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.clone(&quot;https://github.com/zyedidia/AnimatedPlots.jl&quot;)"><pre class="notranslate"><code>julia&gt; Pkg.clone("https://github.com/zyedidia/AnimatedPlots.jl")
</code></pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">The easiest way to plot a function is to use the <code>plot</code> function:</p>
<h3 dir="auto"><a id="user-content-static-plots" class="anchor" aria-hidden="true" href="#static-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Static Plots</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; plot(sin)
julia&gt; close(current_window())"><pre class="notranslate"><code>julia&gt; plot(sin)
julia&gt; close(current_window())
</code></pre></div>
<p dir="auto">A <code>StaticGraph</code> object can also be passed to <code>plot</code> if you want to be able to modify the graph afterward (such as changing the color or line thickness)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; sin_graph = StaticGraph(sin, thickness=5, color=SFML.blue) # thickness and color
julia&gt; plot(sin_graph)
julia&gt; sin_graph.color = SFML.green
julia&gt; plot(cos)
julia&gt; close(current_window())"><pre class="notranslate"><code>julia&gt; sin_graph = StaticGraph(sin, thickness=5, color=SFML.blue) # thickness and color
julia&gt; plot(sin_graph)
julia&gt; sin_graph.color = SFML.green
julia&gt; plot(cos)
julia&gt; close(current_window())
</code></pre></div>
<h3 dir="auto"><a id="user-content-animated-plots" class="anchor" aria-hidden="true" href="#animated-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Animated Plots</h3>
<p dir="auto">You can use the <code>AnimatedGraph</code> to make animated plots.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; animated_sin = AnimatedGraph(sin)
julia&gt; plot(animated_sin)
julia&gt; animated_cos = AnimatedGraph(cos, color=SFML.blue, startx=-10)
julia&gt; animated_cos.speed = 3 # Speed in units per second
julia&gt; plot(animated_cos)
julia&gt; follow(animated_cos) # have the camera follow the plot"><pre class="notranslate"><code>julia&gt; animated_sin = AnimatedGraph(sin)
julia&gt; plot(animated_sin)
julia&gt; animated_cos = AnimatedGraph(cos, color=SFML.blue, startx=-10)
julia&gt; animated_cos.speed = 3 # Speed in units per second
julia&gt; plot(animated_cos)
julia&gt; follow(animated_cos) # have the camera follow the plot
</code></pre></div>
<p dir="auto">See <code>examples/double_pendulum.jl</code> for an advanced showcase of how to integrate an animated plot into an SFML application</p>
<h3 dir="auto"><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output</h3>
<p dir="auto">AnimatedPlots supports creating images and gifs of your plots. Creating gifs may take a while, only close your program after it says <code>Created gif file.gif</code>. In addition, you must have [imagemagick] (<a href="http://www.imagemagick.org/script/binary-releases.php" rel="nofollow">http://www.imagemagick.org/script/binary-releases.php</a>) installed in order to make gifs (most package managers provide it).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; screenshot(&quot;my_screenshot.png&quot;) # Take a screenshot and save it to my_screenshot.png
julia&gt; make_gif(300, 300, 10, &quot;MyGif.gif&quot;, 0.06) # Create a gif with width, height, duration (in seconds), filename, and delay (the delay between each frame in seconds)"><pre class="notranslate"><code>julia&gt; screenshot("my_screenshot.png") # Take a screenshot and save it to my_screenshot.png
julia&gt; make_gif(300, 300, 10, "MyGif.gif", 0.06) # Create a gif with width, height, duration (in seconds), filename, and delay (the delay between each frame in seconds)
</code></pre></div>
</article></div>