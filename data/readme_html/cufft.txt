<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-this-package-is-deprecated" class="anchor" aria-hidden="true" href="#this-package-is-deprecated"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This package is deprecated.</h2>
<p>The same functionality is available in <a href="https://github.com/JuliaGPU/CuArrays.jl">CuArrays.jl</a>.</p>
<h1><a id="user-content-cufft" class="anchor" aria-hidden="true" href="#cufft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CUFFT</h1>
<p><strong>Build status</strong>: <a href="http://ci.maleadt.net/shields/url.php?builder=CUFFT-julia05-x86-64bit" rel="nofollow"><img src="https://camo.githubusercontent.com/844ce8344f808e026f25a9d90dbd29bcbd3e4b866a762a10105c022ee5db0838/687474703a2f2f63692e6d616c656164742e6e65742f736869656c64732f6275696c642e7068703f6275696c6465723d43554646542d6a756c696130352d7838362d3634626974266e616d653d6a756c6961253230302e35" alt="" data-canonical-src="http://ci.maleadt.net/shields/build.php?builder=CUFFT-julia05-x86-64bit&amp;name=julia%200.5" style="max-width:100%;"></a> <a href="http://ci.maleadt.net/shields/url.php?builder=CUFFT-julia06-x86-64bit" rel="nofollow"><img src="https://camo.githubusercontent.com/6d98dc0464d04ae8bbfcd2141fbfbb32996bbda2ad0628f47ccf3f975066ddd2/687474703a2f2f63692e6d616c656164742e6e65742f736869656c64732f6275696c642e7068703f6275696c6465723d43554646542d6a756c696130362d7838362d3634626974266e616d653d6a756c6961253230302e36" alt="" data-canonical-src="http://ci.maleadt.net/shields/build.php?builder=CUFFT-julia06-x86-64bit&amp;name=julia%200.6" style="max-width:100%;"></a></p>
<p>This is a wrapper of the CUFFT library. It works in conjunction with the <a href="https://github.com/JuliaGPU/CUDArt.jl">CUDArt</a> package.</p>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example</h2>
<p>Here's an example of taking a 2D real transform, and then it's inverse, and comparing against Julia's CPU-based</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CUDArt, CUFFT, Base.Test

CUDArt.devices(dev-&gt;capability(dev)[1] &gt;= 2, nmax=1) do devlist
    A = rand(7,6)
    # Move data to GPU
    G = CudaArray(A)
    # Allocate space for the output (transformed array)
    GFFT = CudaArray(Complex{eltype(A)}, div(size(G,1),2)+1, size(G,2))
    # Compute the FFT
    pl! = plan(GFFT, G)
    pl!(GFFT, G, true)
    # Copy the result to main memory
    AFFTG = to_host(GFFT)
    # Compare against Julia's rfft
    AFFT = rfft(A)
    @test_approx_eq AFFTG AFFT
    # Now compute the inverse transform
    pli! = plan(G,GFFT)
    pli!(G, GFFT, false)
    A2 = to_host(G)
    @test_approx_eq A A2/length(A)
end
"><pre><span class="pl-k">using</span> CUDArt, CUFFT, Base<span class="pl-k">.</span>Test

CUDArt<span class="pl-k">.</span><span class="pl-c1">devices</span>(dev<span class="pl-k">-&gt;</span><span class="pl-c1">capability</span>(dev)[<span class="pl-c1">1</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">2</span>, nmax<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">do</span> devlist
    A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">7</span>,<span class="pl-c1">6</span>)
    <span class="pl-c"><span class="pl-c">#</span> Move data to GPU</span>
    G <span class="pl-k">=</span> <span class="pl-c1">CudaArray</span>(A)
    <span class="pl-c"><span class="pl-c">#</span> Allocate space for the output (transformed array)</span>
    GFFT <span class="pl-k">=</span> <span class="pl-c1">CudaArray</span>(Complex{<span class="pl-c1">eltype</span>(A)}, <span class="pl-c1">div</span>(<span class="pl-c1">size</span>(G,<span class="pl-c1">1</span>),<span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>, <span class="pl-c1">size</span>(G,<span class="pl-c1">2</span>))
    <span class="pl-c"><span class="pl-c">#</span> Compute the FFT</span>
    pl! <span class="pl-k">=</span> <span class="pl-c1">plan</span>(GFFT, G)
    <span class="pl-c1">pl!</span>(GFFT, G, <span class="pl-c1">true</span>)
    <span class="pl-c"><span class="pl-c">#</span> Copy the result to main memory</span>
    AFFTG <span class="pl-k">=</span> <span class="pl-c1">to_host</span>(GFFT)
    <span class="pl-c"><span class="pl-c">#</span> Compare against Julia's rfft</span>
    AFFT <span class="pl-k">=</span> <span class="pl-c1">rfft</span>(A)
    <span class="pl-c1">@test_approx_eq</span> AFFTG AFFT
    <span class="pl-c"><span class="pl-c">#</span> Now compute the inverse transform</span>
    pli! <span class="pl-k">=</span> <span class="pl-c1">plan</span>(G,GFFT)
    <span class="pl-c1">pli!</span>(G, GFFT, <span class="pl-c1">false</span>)
    A2 <span class="pl-k">=</span> <span class="pl-c1">to_host</span>(G)
    <span class="pl-c1">@test_approx_eq</span> A A2<span class="pl-k">/</span><span class="pl-c1">length</span>(A)
<span class="pl-k">end</span></pre></div>
<h4><a id="user-content-notes-on-memory" class="anchor" aria-hidden="true" href="#notes-on-memory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes on memory</h4>
<p>For those who dive into the internals, one potentially-confusing point is that C's (or FFTW's) convention for representing array dimensions is opposite that of Julia. C's convention stems from the static representation of arrays,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="const NX = 3
const NY = 5
double *myarray[NX][NY] = {
  {1.0, 2.0, 3.0, 4.0, 5.0},
  {6.0, 7.0, 8.0, 9.0, 10.0},
  {11.0, 12.0, 13.0, 14.0, 15.0}};
"><pre><code>const NX = 3
const NY = 5
double *myarray[NX][NY] = {
  {1.0, 2.0, 3.0, 4.0, 5.0},
  {6.0, 7.0, 8.0, 9.0, 10.0},
  {11.0, 12.0, 13.0, 14.0, 15.0}};
</code></pre></div>
<p>Consequently, <code>NX</code> represents the number of rows, and <code>NY</code> the number of columns (even though visually <code>x</code> is the horizontal axis and <code>y</code> the vertical axis). The first dimension therefore does <em>not</em> correspond to the "fast" dimension in linear-memory layout.</p>
</article></div>