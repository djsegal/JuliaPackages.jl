<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/sflammia/PauliPopRec.jl/actions?query=workflow%3ATests"><img src="https://github.com/sflammia/PauliPopRec.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/Apache-2.0" rel="nofollow"><img src="https://camo.githubusercontent.com/2a2157c971b7ae1deb8eb095799440551c33dcf61ea3d965d86b496a5a65df55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-Apache%202.0-blue.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/2105.02885" rel="nofollow"><img src="https://camo.githubusercontent.com/bc7aaf7019b3a1b202e42bb566ac9b7b7fd0e9c300cefba99cff2fc9b553f45e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323130352e30323838352d6233316231622e737667" alt="arXiv" data-canonical-src="https://img.shields.io/badge/arXiv-2105.02885-b31b1b.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-paulipoprecjl" class="anchor" aria-hidden="true" href="#paulipoprecjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PauliPopRec.jl</h1>
<h2 dir="auto"><a id="user-content-pauli-error-estimation-via-population-recovery" class="anchor" aria-hidden="true" href="#pauli-error-estimation-via-population-recovery"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pauli error estimation via population recovery</h2>
<p dir="auto">This is an implementation of the algorithm in S. T. Flammia and R. O'Donnell, "Pauli error estimation via population recovery", <em>Quantum</em> <strong>5</strong>, 549 (2021); <a href="https://arxiv.org/abs/2105.02885" rel="nofollow">arXiv:2105.02885</a>.</p>
<p dir="auto">To get started with a little more explanation, see the <a href="https://github.com/sflammia/PauliPopRec/blob/main/docs/PauliPopRecTutorial.ipynb">tutorial notebook</a>. Here is a rough sketch of how to use this package to estimate Pauli error rates.</p>
<p dir="auto">If you have never installed <code>PauliPopRec</code> before, you can add it to your local repository with these commands. This only needs to be done once.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# add the package to your local installation
import Pkg
Pkg.add(&quot;PauliPopRec&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> add the package to your local installation</span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PauliPopRec<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Now whenever you want to load the package, simply type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# load the package
using PauliPopRec"><pre><span class="pl-c"><span class="pl-c">#</span> load the package</span>
<span class="pl-k">using</span> PauliPopRec</pre></div>
<p dir="auto">We consider an example with <code>n = 5</code> qubits and <code>k = 25</code> nonzero Pauli error probabilities sampled at random. With <code>m = 10^6</code> samples, we don't expect to be able to reconstruct error rates with probabilities less than about 10<sup>-3</sup>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Define your experiment
n = 5 # number of qubits
m = 10^6 # number of measurements
A = rand(Int8.(1:3),m,n) # get m random probe states

# Define a simulated Pauli channel
k = 25 # size of channel support
δ = 0.2 # probability of some nontrivial error occurring
P = randpaulichannel(n,k,δ)

# Obtain the simulation results
R = probepaulichannel(P,A)

P"><pre><span class="pl-c"><span class="pl-c">#</span> Define your experiment</span>
n <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> number of qubits</span>
m <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">6</span> <span class="pl-c"><span class="pl-c">#</span> number of measurements</span>
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Int8</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>),m,n) <span class="pl-c"><span class="pl-c">#</span> get m random probe states</span>

<span class="pl-c"><span class="pl-c">#</span> Define a simulated Pauli channel</span>
k <span class="pl-k">=</span> <span class="pl-c1">25</span> <span class="pl-c"><span class="pl-c">#</span> size of channel support</span>
δ <span class="pl-k">=</span> <span class="pl-c1">0.2</span> <span class="pl-c"><span class="pl-c">#</span> probability of some nontrivial error occurring</span>
P <span class="pl-k">=</span> <span class="pl-c1">randpaulichannel</span>(n,k,δ)

<span class="pl-c"><span class="pl-c">#</span> Obtain the simulation results</span>
R <span class="pl-k">=</span> <span class="pl-c1">probepaulichannel</span>(P,A)

P</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Dict{Vector{Int8}, Float64} with 25 entries:
  [2, 0, 1, 3, 2] =&gt; 0.00286122
  [1, 2, 0, 1, 1] =&gt; 0.00262801
  [1, 2, 3, 3, 0] =&gt; 0.00971039
  [1, 2, 1, 2, 3] =&gt; 0.006714
  [3, 0, 1, 3, 1] =&gt; 0.00774545
  [1, 3, 0, 0, 2] =&gt; 0.00695082
  [2, 0, 0, 1, 1] =&gt; 0.0118502
  [1, 2, 2, 1, 3] =&gt; 0.0236053
  [1, 2, 1, 1, 2] =&gt; 0.0176598
  [0, 1, 3, 1, 1] =&gt; 0.00252022
  [1, 1, 3, 3, 3] =&gt; 0.0441254
  [3, 1, 2, 2, 3] =&gt; 0.00394266
  [0, 3, 2, 2, 0] =&gt; 0.00661846
  [0, 3, 3, 3, 3] =&gt; 0.00310002
  [0, 0, 0, 3, 2] =&gt; 0.00800969
  [2, 0, 3, 0, 2] =&gt; 0.00426104
  [3, 3, 2, 3, 2] =&gt; 0.01067
  [0, 0, 0, 0, 0] =&gt; 0.8
  [2, 1, 0, 3, 3] =&gt; 0.00629306
  [3, 2, 3, 2, 2] =&gt; 0.00806051
  [1, 2, 1, 1, 0] =&gt; 0.00391613
  [3, 1, 1, 1, 0] =&gt; 0.00288139
  [1, 3, 3, 2, 0] =&gt; 0.00245237
  [2, 1, 3, 3, 2] =&gt; 0.00104182
  [2, 2, 3, 0, 0] =&gt; 0.00238201"><pre>Dict{Vector{Int8}, Float64} with <span class="pl-c1">25</span> entries<span class="pl-k">:</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00286122</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00262801</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00971039</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.006714</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00774545</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00695082</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0118502</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0236053</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0176598</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00252022</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0441254</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00394266</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00661846</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00310002</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00800969</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00426104</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.01067</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.8</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00629306</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00806051</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00391613</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00288139</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00245237</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00104182</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00238201</span></pre></div>
<p dir="auto">We can run the algorithm with a specific choice of threshold value for pruning. Here we just choose <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="e1374cefd7d3b552034ace6f1e83e49b">$1/\sqrt{m}$</math-renderer>, even though the rigorous theorem requires using some log factors. We get a pretty accurate reconstruction, as quantified by the total variation distance (TVD).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ϵ = 1/sqrt(m) # pick a simple choice for the thresholding value
@time Q = pauli_poprec(A,R,ϵ)"><pre>ϵ <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">sqrt</span>(m) <span class="pl-c"><span class="pl-c">#</span> pick a simple choice for the thresholding value</span>
<span class="pl-c1">@time</span> Q <span class="pl-k">=</span> <span class="pl-c1">pauli_poprec</span>(A,R,ϵ)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  6.518071 seconds (335.72 k allocations: 7.448 GiB, 11.23% gc time, 1.21% compilation time)"><pre>  <span class="pl-c1">6.518071</span> seconds (<span class="pl-c1">335.72</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">7.448</span> GiB, <span class="pl-c1">11.23</span><span class="pl-k">%</span> gc time, <span class="pl-c1">1.21</span><span class="pl-k">%</span> compilation time)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Dict{Vector{Int8}, Float64} with 24 entries:
  [2, 0, 1, 3, 2] =&gt; 0.00264581
  [1, 2, 0, 1, 1] =&gt; 0.00246216
  [1, 2, 3, 3, 0] =&gt; 0.0090255
  [1, 2, 1, 2, 3] =&gt; 0.006663
  [3, 0, 1, 3, 1] =&gt; 0.00769397
  [1, 3, 0, 0, 2] =&gt; 0.00687487
  [2, 0, 0, 1, 1] =&gt; 0.0116704
  [1, 2, 2, 1, 3] =&gt; 0.0235204
  [1, 2, 1, 1, 2] =&gt; 0.0175356
  [0, 1, 3, 1, 1] =&gt; 0.00266447
  [1, 1, 3, 3, 3] =&gt; 0.0439482
  [3, 1, 2, 2, 3] =&gt; 0.00390891
  [0, 3, 2, 2, 0] =&gt; 0.00675103
  [0, 3, 3, 3, 3] =&gt; 0.00309328
  [0, 0, 0, 3, 2] =&gt; 0.00789797
  [2, 0, 3, 0, 2] =&gt; 0.0043065
  [3, 2, 3, 2, 2] =&gt; 0.00822019
  [0, 0, 0, 0, 0] =&gt; 0.800279
  [2, 1, 0, 3, 3] =&gt; 0.00632972
  [3, 3, 2, 3, 2] =&gt; 0.010396
  [1, 2, 1, 1, 0] =&gt; 0.00376725
  [3, 1, 1, 1, 0] =&gt; 0.00290316
  [1, 3, 3, 2, 0] =&gt; 0.00213225
  [2, 2, 3, 0, 0] =&gt; 0.00242184"><pre>Dict{Vector{Int8}, Float64} with <span class="pl-c1">24</span> entries<span class="pl-k">:</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00264581</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00246216</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0090255</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.006663</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00769397</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00687487</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0116704</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0235204</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0175356</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00266447</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0439482</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00390891</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00675103</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00309328</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00789797</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0043065</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00822019</span>
  [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.800279</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00632972</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.010396</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00376725</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00290316</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00213225</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00242184</span></pre></div>
<p dir="auto">Here is the TVD:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pauli_tvd(P,Q)"><pre><span class="pl-c1">pauli_tvd</span>(P,Q)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0.0023034701460466077"><pre><span class="pl-c1">0.0023034701460466077</span></pre></div>
<p dir="auto">The error bars are fairly tight as well.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="σ = pauli_stderr(Q,A,R)
sum(σ)/length(σ)"><pre>σ <span class="pl-k">=</span> <span class="pl-c1">pauli_stderr</span>(Q,A,R)
<span class="pl-c1">sum</span>(σ)<span class="pl-k">/</span><span class="pl-c1">length</span>(σ)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0.00020968924879989553"><pre><span class="pl-c1">0.00020968924879989553</span></pre></div>
<p dir="auto">What about the estimates that we threw away with our choice of threshold? We can see what those estimates look like by computing all the probability estimates for every Pauli string, even the ones less than <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="e1374cefd7d3b552034ace6f1e83e49b">$\delta$</math-renderer> but that are still positive. What does the TVD look like now? It is much worse, but this is not surprising because we are overfitting.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@time S = pauli_totalrecall(A,R)
pauli_tvd(P,S)"><pre><span class="pl-c1">@time</span> S <span class="pl-k">=</span> <span class="pl-c1">pauli_totalrecall</span>(A,R)
<span class="pl-c1">pauli_tvd</span>(P,S)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" 31.902549 seconds (786.36 k allocations: 34.350 GiB, 9.75% gc time, 0.50% compilation time)"><pre> <span class="pl-c1">31.902549</span> seconds (<span class="pl-c1">786.36</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">34.350</span> GiB, <span class="pl-c1">9.75</span><span class="pl-k">%</span> gc time, <span class="pl-c1">0.50</span><span class="pl-k">%</span> compilation time)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="0.041446673271046584"><pre><span class="pl-c1">0.041446673271046584</span></pre></div>
<p dir="auto">We can do a scatter plot to compare the complete list of nonnegative estimates to the thresholded values and the "true" values.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots"><pre><span class="pl-k">using</span> Plots</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# convert the dictionary key quaternary digits to plotable numbers
keys2num(P,n) = hcat(collect(keys(P))...)' * (4 .^((n-1):-1:0))
vals2num(P) = collect(values(P))

scatter(keys2num(P,n), vals2num(P), 
    yaxis = (&quot;log10(p)&quot;,:log10, [1e-4,1e-1]),
    xaxis = &quot;Pauli number&quot;,
    label = &quot;p (true)&quot;, markershape = :x, markersize = 4)
scatter!(keys2num(Q,n), vals2num(Q),
    label = &quot;q (estimate)&quot;, markershape = :hline, markersize = 6,
    markerstrokecolor = :auto, yerror = σ)
scatter!(keys2num(S,n), vals2num(S),
    label = &quot;all estimates&quot;, markershape = :+, markersize = 3, markeralpha = .3)"><pre><span class="pl-c"><span class="pl-c">#</span> convert the dictionary key quaternary digits to plotable numbers</span>
<span class="pl-en">keys2num</span>(P,n) <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(P))<span class="pl-k">...</span>)<span class="pl-k">'</span> <span class="pl-k">*</span> (<span class="pl-c1">4</span> <span class="pl-k">.^</span>((n<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>))
<span class="pl-en">vals2num</span>(P) <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">values</span>(P))

<span class="pl-c1">scatter</span>(<span class="pl-c1">keys2num</span>(P,n), <span class="pl-c1">vals2num</span>(P), 
    yaxis <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>log10(p)<span class="pl-pds">"</span></span>,<span class="pl-c1">:log10</span>, [<span class="pl-c1">1e-4</span>,<span class="pl-c1">1e-1</span>]),
    xaxis <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Pauli number<span class="pl-pds">"</span></span>,
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>p (true)<span class="pl-pds">"</span></span>, markershape <span class="pl-k">=</span> <span class="pl-c1">:x</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">4</span>)
<span class="pl-c1">scatter!</span>(<span class="pl-c1">keys2num</span>(Q,n), <span class="pl-c1">vals2num</span>(Q),
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q (estimate)<span class="pl-pds">"</span></span>, markershape <span class="pl-k">=</span> <span class="pl-c1">:hline</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">6</span>,
    markerstrokecolor <span class="pl-k">=</span> <span class="pl-c1">:auto</span>, yerror <span class="pl-k">=</span> σ)
<span class="pl-c1">scatter!</span>(<span class="pl-c1">keys2num</span>(S,n), <span class="pl-c1">vals2num</span>(S),
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>all estimates<span class="pl-pds">"</span></span>, markershape <span class="pl-k">=</span> :<span class="pl-k">+</span>, markersize <span class="pl-k">=</span> <span class="pl-c1">3</span>, markeralpha <span class="pl-k">=</span> .<span class="pl-c1">3</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/fig.svg"><img src="docs/fig.svg" alt="svg" style="max-width: 100%;"></a></p>
</article></div>