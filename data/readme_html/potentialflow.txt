<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-potentialflow" class="anchor" aria-hidden="true" href="#potentialflow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PotentialFlow</h1>
<p><em>a scaffolding for building 2D inviscid models</em></p>
<table>
<thead>
<tr>
<th align="center">Documentation</th>
<th align="center">Build Status</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://darwindarak.github.com/PotentialFlow.jl"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a> <a href="https://beta.mybinder.org/v2/gh/darwindarak/PotentialFlow.jl/binder?filepath=binder%2Fnotebooks" rel="nofollow"><img src="https://camo.githubusercontent.com/4d823fc68bd6a1cb91f0df486e0905604ef6b7229d28dee8132b8528659c4faf/68747470733a2f2f626574612e6d7962696e6465722e6f72672f62616467652e737667" alt="Binder" data-canonical-src="https://beta.mybinder.org/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/darwindarak/PotentialFlow.jl/actions"><img src="https://github.com/darwindarak/PotentialFlow.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/darwindarak/PotentialFlow.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad28b58b004749197d562674b1960940b9f7b3ff2ef724bdc9afd9fa3906fc38/68747470733a2f2f636f6465636f762e696f2f67682f64617277696e646172616b2f506f74656e7469616c466c6f772e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/darwindarak/PotentialFlow.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>PotentialFlow can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add PotentialFlow
"><pre lang="julia-repl"><code>pkg&gt; add PotentialFlow
</code></pre></div>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<p>Let's create a point vortex and a point source and probe their associated velocity field:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using PotentialFlow

julia&gt; t = 0.0
0.0

julia&gt; vortex = Vortex.Point(1.0 + 1.0im, π)
Vortex.Point(1.0 + 1.0im, 3.141592653589793)

julia&gt; source = Source.Point(1.0 - 1.0im, -π)
Source.Point(1.0 - 1.0im, 3.141592653589793)

julia&gt; induce_velocity(0.0im, vortex, t)
0.25 - 0.25im

julia&gt; induce_velocity(source, vortex, t)
0.25 - 0.0im

julia&gt; induce_velocity(0.0im, (vortex, source), t)
0.5 - 0.5im

julia&gt; induce_velocity([0.0im, 1.0im, 1.0], (vortex, source), t)
3-element Array{Complex{Float64},1}:
 0.5-0.5im
 0.1-0.7im
 0.5-0.5im
"><pre lang="julia-repl"><code>julia&gt; using PotentialFlow

julia&gt; t = 0.0
0.0

julia&gt; vortex = Vortex.Point(1.0 + 1.0im, π)
Vortex.Point(1.0 + 1.0im, 3.141592653589793)

julia&gt; source = Source.Point(1.0 - 1.0im, -π)
Source.Point(1.0 - 1.0im, 3.141592653589793)

julia&gt; induce_velocity(0.0im, vortex, t)
0.25 - 0.25im

julia&gt; induce_velocity(source, vortex, t)
0.25 - 0.0im

julia&gt; induce_velocity(0.0im, (vortex, source), t)
0.5 - 0.5im

julia&gt; induce_velocity([0.0im, 1.0im, 1.0], (vortex, source), t)
3-element Array{Complex{Float64},1}:
 0.5-0.5im
 0.1-0.7im
 0.5-0.5im
</code></pre></div>
<p>Note the all positions and velocities are given in complex coordiantes.</p>
<p>Now let's move on to something more interesting.
We'll create a stationary flat plate (bound vortex sheet) and place it in a freestream.
In order to enforce the Kutta condition, we also place a starting vortex at <code>-Inf</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PotentialFlow
using Plots

c₀ = 0.0im # initial centroid position
α = π/9    # angle of attack
L = 1.0    # chord length
N = 128    # number of discretization points

ċ = 0.0    # translation velocity
α̇ = 0.0    # rate of rotation
t = 0.0    # current time

freestream = Freestream(-1.0)

plate = Plate(N, L, c₀, α)
motion = Plates.RigidBodyMotion(ċ, α̇)
Plates.enforce_no_flow_through!(plate, motion, freestream, 0.0)

# We now want to determine the strength of the starting vortex
# to satisfy the Kutta condition at the trailing edge of the plate
_, Γ = Plates.vorticity_flux!(plate, (), Vortex.Point(-Inf, 1.0), t, Inf, 0);
starting_vortex = Vortex.Point(-Inf, Γ)

# Plot some streamlines

x = range(-2, 1, length=100)
y = range(-0.5, 0.5, length=100)

streamlines(x, y, (plate, freestream), legend = false, colorbar = false)
plot!(plate, linewidth = 2, ratio = 1, size = (600, 300))
"><pre><span class="pl-k">using</span> PotentialFlow
<span class="pl-k">using</span> Plots

c₀ <span class="pl-k">=</span> <span class="pl-c1">0.0im</span> <span class="pl-c"><span class="pl-c">#</span> initial centroid position</span>
α <span class="pl-k">=</span> π<span class="pl-k">/</span><span class="pl-c1">9</span>    <span class="pl-c"><span class="pl-c">#</span> angle of attack</span>
L <span class="pl-k">=</span> <span class="pl-c1">1.0</span>    <span class="pl-c"><span class="pl-c">#</span> chord length</span>
N <span class="pl-k">=</span> <span class="pl-c1">128</span>    <span class="pl-c"><span class="pl-c">#</span> number of discretization points</span>

ċ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>    <span class="pl-c"><span class="pl-c">#</span> translation velocity</span>
α̇ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>    <span class="pl-c"><span class="pl-c">#</span> rate of rotation</span>
t <span class="pl-k">=</span> <span class="pl-c1">0.0</span>    <span class="pl-c"><span class="pl-c">#</span> current time</span>

freestream <span class="pl-k">=</span> <span class="pl-c1">Freestream</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>)

plate <span class="pl-k">=</span> <span class="pl-c1">Plate</span>(N, L, c₀, α)
motion <span class="pl-k">=</span> Plates<span class="pl-k">.</span><span class="pl-c1">RigidBodyMotion</span>(ċ, α̇)
Plates<span class="pl-k">.</span><span class="pl-c1">enforce_no_flow_through!</span>(plate, motion, freestream, <span class="pl-c1">0.0</span>)

<span class="pl-c"><span class="pl-c">#</span> We now want to determine the strength of the starting vortex</span>
<span class="pl-c"><span class="pl-c">#</span> to satisfy the Kutta condition at the trailing edge of the plate</span>
_, Γ <span class="pl-k">=</span> Plates<span class="pl-k">.</span><span class="pl-c1">vorticity_flux!</span>(plate, (), Vortex<span class="pl-k">.</span><span class="pl-c1">Point</span>(<span class="pl-k">-</span><span class="pl-c1">Inf</span>, <span class="pl-c1">1.0</span>), t, <span class="pl-c1">Inf</span>, <span class="pl-c1">0</span>);
starting_vortex <span class="pl-k">=</span> Vortex<span class="pl-k">.</span><span class="pl-c1">Point</span>(<span class="pl-k">-</span><span class="pl-c1">Inf</span>, Γ)

<span class="pl-c"><span class="pl-c">#</span> Plot some streamlines</span>

x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
y <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)

<span class="pl-c1">streamlines</span>(x, y, (plate, freestream), legend <span class="pl-k">=</span> <span class="pl-c1">false</span>, colorbar <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>(plate, linewidth <span class="pl-k">=</span> <span class="pl-c1">2</span>, ratio <span class="pl-k">=</span> <span class="pl-c1">1</span>, size <span class="pl-k">=</span> (<span class="pl-c1">600</span>, <span class="pl-c1">300</span>))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/336fd5ce75da00c5d98df42c525387fa3134c75751d43c5aeea87641e9c7abb0/68747470733a2f2f64617277696e646172616b2e6769746875622e696f2f506f74656e7469616c466c6f772e6a6c2f6c61746573742f7472616e736c6174696e675f706c6174652e737667"><img src="https://camo.githubusercontent.com/336fd5ce75da00c5d98df42c525387fa3134c75751d43c5aeea87641e9c7abb0/68747470733a2f2f64617277696e646172616b2e6769746875622e696f2f506f74656e7469616c466c6f772e6a6c2f6c61746573742f7472616e736c6174696e675f706c6174652e737667" alt="Flat plate in freestream" data-canonical-src="https://darwindarak.github.io/PotentialFlow.jl/latest/translating_plate.svg" style="max-width:100%;"></a></p>
<p>More examples can be found in the <a href="https://darwindarak.github.io/PotentialFlow.jl" rel="nofollow">documentation</a> and the <a href="https://github.com/darwindarak/PotentialFlow.jl/tree/binder/binder/notebooks">Jupyter notebooks</a>.
You can also run the notebooks directly in your browser <a href="https://beta.mybinder.org/v2/gh/darwindarak/PotentialFlow.jl/binder?filepath=binder%2Fnotebooks" rel="nofollow">here</a>.</p>
</article></div>