<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-persistentcohomology" class="anchor" aria-hidden="true" href="#persistentcohomology"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PersistentCohomology</h1>
<p><a href="https://travis-ci.org/piever/PersistentCohomology.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02f51233b21294e2a666f168484269c98f163ccf/68747470733a2f2f7472617669732d63692e6f72672f7069657665722f50657273697374656e74436f686f6d6f6c6f67792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/piever/PersistentCohomology.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/piever/PersistentCohomology.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b46bbc7e6a6f82bf8b432dc43c9a661dc0be9ead/687474703a2f2f636f6465636f762e696f2f6769746875622f7069657665722f50657273697374656e74436f686f6d6f6c6f67792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/piever/PersistentCohomology.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Pure Julia package to compute persistent cohomology. In particular it implements the persistent cocycle algorithm from <a href="https://link.springer.com/article/10.1007/s00454-011-9344-x" rel="nofollow">Persistent Cohomology and Circular Coordinates - Vin de Silva, Dmitriy Morozov, Mikael Vejdemo-Johansson</a>. The algorithm can be used with coefficients on an arbitrary field: finite fields are available in Julia via the <a href="https://github.com/tkluck/GaloisFields.jl">GaloisFields</a> package.</p>
<p>This package provides a type to hold cochains (called <code>Cochain</code>) and two functions: <code>vietorisrips</code> to compute the filtered Vietoris Rips complex from a sparse distance matrix and <code>persistentcocycles</code> to compute persistent cohomolofy on such complex. See the docstrings of <code>Cochain</code>, <code>vietorisrips</code> and <code>persistentcocycles</code> for more details.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h2>
<p>To install this package (and GaloisFields which you'll probably need as well):</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>piever<span class="pl-k">/</span>PersistentCohomology<span class="pl-k">.</span>jl<span class="pl-k">.</span>git

pkg<span class="pl-k">&gt;</span> add GaloisFields</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PersistentCohomology, SparseArrays, GaloisFields

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">sparse</span>(<span class="pl-c1">diagm</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>), <span class="pl-c1">3</span>), <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">2</span>), <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>)]))
<span class="pl-c1">4</span><span class="pl-k">√ó</span><span class="pl-c1">4</span> SparseMatrixCSC{Float64,Int64} with <span class="pl-c1">6</span> stored entries<span class="pl-k">:</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]  <span class="pl-k">=</span>  <span class="pl-c1">1.41421</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>]  <span class="pl-k">=</span>  <span class="pl-c1">2.0</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>]  <span class="pl-k">=</span>  <span class="pl-c1">1.41421</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>]  <span class="pl-k">=</span>  <span class="pl-c1">1.41421</span>
  [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]  <span class="pl-k">=</span>  <span class="pl-c1">2.0</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]  <span class="pl-k">=</span>  <span class="pl-c1">1.41421</span>

julia<span class="pl-k">&gt;</span> cplx <span class="pl-k">=</span> <span class="pl-c1">vietorisrips</span>(M, <span class="pl-c1">2</span>)
(Float64<span class="pl-k">-</span>valued <span class="pl-c1">0</span><span class="pl-k">-</span>Cochain, Float64<span class="pl-k">-</span>valued <span class="pl-c1">1</span><span class="pl-k">-</span>Cochain, Float64<span class="pl-k">-</span>valued <span class="pl-c1">2</span><span class="pl-k">-</span>Cochain)

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> F3 <span class="pl-k">=</span> <span class="pl-c1">@GaloisFields</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> cocycles, spans <span class="pl-k">=</span> <span class="pl-c1">persistentcocycles</span>(F3, cplx, <span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> cocycles[<span class="pl-c1">1</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Cochain{StructArrays<span class="pl-k">.</span>StructArray{Tuple{Int64},<span class="pl-c1">1</span>,NamedTuple{(<span class="pl-c1">:x1</span>,),Tuple{Array{Int64,<span class="pl-c1">1</span>}}}},SparseVector{ùîΩ‚ÇÉ,Int64}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Sparse ùîΩ‚ÇÉ<span class="pl-k">-</span>valued <span class="pl-c1">0</span><span class="pl-k">-</span>Cochain. Non<span class="pl-k">-</span>zero values<span class="pl-k">:</span>
(<span class="pl-c1">1</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
(<span class="pl-c1">2</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
(<span class="pl-c1">3</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
(<span class="pl-c1">4</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>

 Sparse ùîΩ‚ÇÉ<span class="pl-k">-</span>valued <span class="pl-c1">0</span><span class="pl-k">-</span>Cochain. Non<span class="pl-k">-</span>zero values<span class="pl-k">:</span>
(<span class="pl-c1">2</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>

 Sparse ùîΩ‚ÇÉ<span class="pl-k">-</span>valued <span class="pl-c1">0</span><span class="pl-k">-</span>Cochain. Non<span class="pl-k">-</span>zero values<span class="pl-k">:</span>
(<span class="pl-c1">3</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>

 Sparse ùîΩ‚ÇÉ<span class="pl-k">-</span>valued <span class="pl-c1">0</span><span class="pl-k">-</span>Cochain. Non<span class="pl-k">-</span>zero values<span class="pl-k">:</span>
(<span class="pl-c1">4</span>,) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>


julia<span class="pl-k">&gt;</span> spans[<span class="pl-c1">1</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{IntervalSets<span class="pl-k">.</span>Interval{<span class="pl-c1">:closed</span>,<span class="pl-c1">:open</span>,Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">Inf</span> (closed‚Äìopen)
 <span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.4142135623730951</span> (closed‚Äìopen)
 <span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.4142135623730951</span> (closed‚Äìopen)
 <span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.4142135623730951</span> (closed‚Äìopen)

julia<span class="pl-k">&gt;</span> cocycles[<span class="pl-c1">2</span>]
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Cochain{StructArrays<span class="pl-k">.</span>StructArray{Tuple{Int64,Int64},<span class="pl-c1">1</span>,NamedTuple{(<span class="pl-c1">:x1</span>, <span class="pl-c1">:x2</span>),Tuple{Array{Int64,<span class="pl-c1">1</span>},Array{Int64,<span class="pl-c1">1</span>}}}},SparseVector{ùîΩ‚ÇÉ,Int64}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Sparse ùîΩ‚ÇÉ<span class="pl-k">-</span>valued <span class="pl-c1">1</span><span class="pl-k">-</span>Cochain. Non<span class="pl-k">-</span>zero values<span class="pl-k">:</span>
(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>


julia<span class="pl-k">&gt;</span> spans[<span class="pl-c1">2</span>]
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{IntervalSets<span class="pl-k">.</span>Interval{<span class="pl-c1">:closed</span>,<span class="pl-c1">:open</span>,Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.4142135623730951</span><span class="pl-k">..</span><span class="pl-c1">2.0</span> (closed‚Äìopen)</pre></div>
</article></div>