<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-markableintegers" class="anchor" aria-hidden="true" href="#markableintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Markable Integers</h1>
<h3 dir="auto"><a id="user-content-signed-and-unsigned-integers-individually-unmarkable" class="anchor" aria-hidden="true" href="#signed-and-unsigned-integers-individually-unmarkable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Signed and Unsigned Integers, individually [un]markable.</h3>
<h4 dir="auto"><a id="user-content-two-state-integers-unmarked-state-marked-state" class="anchor" aria-hidden="true" href="#two-state-integers-unmarked-state-marked-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Two-state Integers (unmarked state, marked state)</h4>
<h4 dir="auto"><a id="user-content-released-under-the-mit-license----copyright--2018-by-jeffrey-sarnoff" class="anchor" aria-hidden="true" href="#released-under-the-mit-license----copyright--2018-by-jeffrey-sarnoff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Released under the MIT License.        Copyright © 2018 by Jeffrey Sarnoff.</h4>
<blockquote>
<p dir="auto"><em>this package requires Julia v0.7-</em></p>
</blockquote>
<hr>
<h2 dir="auto"><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Purpose</h2>
<p dir="auto">MarkableIntegers allow elements (integer values) of a sequence, mesh, voxel image, or time series to be distinguished. Any one or more of the constituent numbers may be noted with a mark (a re-find-able tag).  Marking one value does not mean that all other occurances of that value become marked.  You may choose to mark some, all or none of the other occurances.</p>
<p dir="auto">You may be seeking to identify regions within the dataform or datastream that are of some greater interest.  Often this requires preliminary identification, contextual refinement, and revisiting.  There are well-know methods to manage this sort of incremental refinement.  All lean on ancillary structures and dynamic update.</p>
<p dir="auto">MarkableIntegers bring the ability to provide informed data and then to refine an algorithmic focus directly.  For some applications, this suffices.  For others, intelligent use of ancillary data structures and dynamic updating therewith is the proper complement to markable integers.</p>
<hr>
<h2 dir="auto"><a id="user-content-techniques-please-add-yours" class="anchor" aria-hidden="true" href="#techniques-please-add-yours"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Techniques (please add yours)</h2>
<p dir="auto">An easy way to find more lengthy runs of marked values is to run length encode the Bool sequence obtained with map(ismarked, seq).  A way to find more highly valued regions of marked values is to sum over each run.</p>
<p dir="auto">One may mark values which are inconsistent with an underlying model or are otherwise suspect (e.g. values that appear to be "drop outs").  The unmarked values could then provide a neater view with which to begin exploration. Or, the marked values may be used as targets for simple fitting to provide a more digestable version of the info.</p>
<p dir="auto">With evolutionary or swarm intellegence approaches (simulated annealing, ant colony, tabu search, ...) better solution spaces develop through process.  There may be an opportunity for speedup by using local markers to influence aspects of the process.</p>
<hr>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">There are <code>Markable</code> versions of each <code>Signed</code> (<code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Int128</code>) and each <code>Unsigned</code> (<code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code> ,<code>UInt64</code>, <code>UInt128</code>) type.  The <code>Markable</code> types are prefixed with <code>Mark</code> (<code>MarkInt32</code>, <code>MarkUInt64</code>).</p>
<p dir="auto">For most uses, you do not need to be that specific.  Variables that hold markable integers are initialized with (constructed from) some <code>Signed</code> or <code>Unsigned</code> value (or with e.g. <code>zero(MarkInt)</code>, <code>one(MarkInt16)</code>).</p>
<p dir="auto">You can use <code>Unmarked</code> or <code>Marked</code> with any legitimate initializer and forget about the specific type names. <code>ismarked</code> and <code>isunmarked</code> are provided to ascertain markedness during computation.  <code>allmarked</code> and <code>allunmarked</code> let you collect over markedness.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; an_unmarked_value = Unmarked(10)
10
julia&gt; a_marked_value = Marked(16)
16

julia&gt; isunmarked(an_unmarked_value), ismarked(an_unmarked_value)
true, false

julia&gt; isunmarked(a_marked_value), ismarked(a_marked_value)
false, true"><pre>julia<span class="pl-k">&gt;</span> an_unmarked_value <span class="pl-k">=</span> <span class="pl-c1">Unmarked</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">10</span>
julia<span class="pl-k">&gt;</span> a_marked_value <span class="pl-k">=</span> <span class="pl-c1">Marked</span>(<span class="pl-c1">16</span>)
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isunmarked</span>(an_unmarked_value), <span class="pl-c1">ismarked</span>(an_unmarked_value)
<span class="pl-c1">true</span>, <span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isunmarked</span>(a_marked_value), <span class="pl-c1">ismarked</span>(a_marked_value)
<span class="pl-c1">false</span>, <span class="pl-c1">true</span></pre></div>
<p dir="auto">There are two ways of marking an unmarked value or unmarking a marked value.
The first way uses the same form as is used with initialization. The result must be assigned to some value to be of use. The second uses macros to change values in place.  The macros reassign the variable given.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ten = Unmarked(10)
10
julia&gt; sixteen = Marked(16)
16

julia&gt; isunmarked(ten)
true
julia&gt; ten = Marked(ten)
10
julia&gt; isunmarked(ten)
false

julia&gt; ismarked(sixteen)
true
julia&gt; sixteen = Unmarked(sixteen)
16
julia&gt; ismarked(sixteen)
false"><pre>julia<span class="pl-k">&gt;</span> ten <span class="pl-k">=</span> <span class="pl-c1">Unmarked</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">10</span>
julia<span class="pl-k">&gt;</span> sixteen <span class="pl-k">=</span> <span class="pl-c1">Marked</span>(<span class="pl-c1">16</span>)
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isunmarked</span>(ten)
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> ten <span class="pl-k">=</span> <span class="pl-c1">Marked</span>(ten)
<span class="pl-c1">10</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">isunmarked</span>(ten)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ismarked</span>(sixteen)
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> sixteen <span class="pl-k">=</span> <span class="pl-c1">Unmarked</span>(sixteen)
<span class="pl-c1">16</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ismarked</span>(sixteen)
<span class="pl-c1">false</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ten = Unmarked(10);
julia&gt; sixteen = Marked(16);
julia&gt; @mark!(ten)
10
julia&gt; @unmark!(sixteen)
16
julia&gt; ismarked(ten), isunmarked(sixteen)
true, true

julia&gt; @unmark!(ten);
julia&gt; @mark!(sixteen);
julia&gt; isunmarked(ten), ismarked(sixteen)
true, true"><pre>julia<span class="pl-k">&gt;</span> ten <span class="pl-k">=</span> <span class="pl-c1">Unmarked</span>(<span class="pl-c1">10</span>);
julia<span class="pl-k">&gt;</span> sixteen <span class="pl-k">=</span> <span class="pl-c1">Marked</span>(<span class="pl-c1">16</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mark!</span>(ten)
<span class="pl-c1">10</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@unmark!</span>(sixteen)
<span class="pl-c1">16</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ismarked</span>(ten), <span class="pl-c1">isunmarked</span>(sixteen)
<span class="pl-c1">true</span>, <span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@unmark!</span>(ten);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mark!</span>(sixteen);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">isunmarked</span>(ten), <span class="pl-c1">ismarked</span>(sixteen)
<span class="pl-c1">true</span>, <span class="pl-c1">true</span></pre></div>
<p dir="auto">MarkableSigned integers readily convert to Signed and MarkableUnsigned integers readily convert to Unsigned.  <code>Signed</code> and <code>Unsigned</code> provide these conversions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; markable_two = Unmarked(Int64(2));
julia&gt; markable_three = Marked(UInt16(3));

julia&gt; typeof(markable_two), typeof(markable_three)
(MarkInt64, MarkUInt16)

julia&gt; two = Signed(markable_two);
julia&gt; three = Unsigned(markable_three);

julia&gt; typeof(two), typeof(three)
(Int64, UInt16)"><pre>julia<span class="pl-k">&gt;</span> markable_two <span class="pl-k">=</span> <span class="pl-c1">Unmarked</span>(<span class="pl-c1">Int64</span>(<span class="pl-c1">2</span>));
julia<span class="pl-k">&gt;</span> markable_three <span class="pl-k">=</span> <span class="pl-c1">Marked</span>(<span class="pl-c1">UInt16</span>(<span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(markable_two), <span class="pl-c1">typeof</span>(markable_three)
(MarkInt64, MarkUInt16)

julia<span class="pl-k">&gt;</span> two <span class="pl-k">=</span> <span class="pl-c1">Signed</span>(markable_two);
julia<span class="pl-k">&gt;</span> three <span class="pl-k">=</span> <span class="pl-c1">Unsigned</span>(markable_three);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(two), <span class="pl-c1">typeof</span>(three)
(Int64, UInt16)</pre></div>
<p dir="auto">You can gather the marked values and the unmarked values.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; seq = [Marked(1), Unmarked(2), Unmarked(3), Marked(4), Unmarked(1)]
julia&gt; allmarked(seq)
julia&gt; allunmarked(seq)
"><pre>julia<span class="pl-k">&gt;</span> seq <span class="pl-k">=</span> [<span class="pl-c1">Marked</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Unmarked</span>(<span class="pl-c1">2</span>), <span class="pl-c1">Unmarked</span>(<span class="pl-c1">3</span>), <span class="pl-c1">Marked</span>(<span class="pl-c1">4</span>), <span class="pl-c1">Unmarked</span>(<span class="pl-c1">1</span>)]
julia<span class="pl-k">&gt;</span> <span class="pl-c1">allmarked</span>(seq)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">allunmarked</span>(seq)
</pre></div>
<hr>
<h2 dir="auto"><a id="user-content-exports" class="anchor" aria-hidden="true" href="#exports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exports</h2>
<h4 dir="auto"><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructors</h4>
<ul dir="auto">
<li>Unmarked, Marked</li>
<li>Signed, Unsigned</li>
</ul>
<h4 dir="auto"><a id="user-content-abstract-and-collective-types" class="anchor" aria-hidden="true" href="#abstract-and-collective-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Abstract and Collective Types</h4>
<ul dir="auto">
<li><code>MarkableInteger</code>, <code>MarkableSigned</code>, <code>MarkableUnsigned</code></li>
</ul>
<h4 dir="auto"><a id="user-content-concrete-types" class="anchor" aria-hidden="true" href="#concrete-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Concrete Types</h4>
<ul dir="auto">
<li><code>MarkInt</code>, <code>MarkInt8</code>, <code>MarkInt16</code>, <code>MarkInt32</code>, <code>MarkInt64</code>, <code>MarkInt128</code></li>
<li><code>MarkUInt</code>, <code>MarkUInt8</code>, <code>MarkUInt16</code>, <code>MarkUInt32</code>, <code>MarkUInt64</code>, <code>MarkUInt128</code></li>
</ul>
<h4 dir="auto"><a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Predicates</h4>
<ul dir="auto">
<li><code>ismarked</code>, <code>isunmarked</code></li>
<li><code>allmarked</code>, <code>allunmarked</code></li>
</ul>
<h4 dir="auto"><a id="user-content-comparatives" class="anchor" aria-hidden="true" href="#comparatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparatives</h4>
<ul dir="auto">
<li><code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code></li>
<li><code>isless</code>, <code>isequal</code></li>
</ul>
<h4 dir="auto"><a id="user-content-bitwise-primitives-wip" class="anchor" aria-hidden="true" href="#bitwise-primitives-wip"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bitwise Primitives (wip)</h4>
<ul dir="auto">
<li><code>leading_zeros</code>, <code>trailing_zeros</code>, <code>leading_ones</code>, <code>trailing_ones</code></li>
<li><code>count_zeros</code>, <code>count_ones</code></li>
</ul>
<h4 dir="auto"><a id="user-content-bitwise-logic" class="anchor" aria-hidden="true" href="#bitwise-logic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bitwise Logic</h4>
<ul dir="auto">
<li><code>~</code>, <code>&amp;</code>, <code>|</code>, <code>⊻</code></li>
</ul>
<h4 dir="auto"><a id="user-content-math" class="anchor" aria-hidden="true" href="#math"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Math</h4>
<ul dir="auto">
<li><code>abs</code>, <code>signbit</code>, <code>sign</code></li>
<li><code>+</code>, <code>-</code>, <code>*</code>, <code>div</code>, <code>fld</code>, <code>cld</code>, <code>rem</code>, <code>mod</code></li>
<li><code>/</code></li>
</ul>
</article></div>