<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-thermodynamicintegration" class="anchor" aria-hidden="true" href="#thermodynamicintegration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ThermodynamicIntegration</h1>
<p><a href="https://theogf.github.io/ThermodynamicIntegration.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://theogf.github.io/ThermodynamicIntegration.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/theogf/ThermodynamicIntegration.jl/actions"><img src="https://github.com/theogf/ThermodynamicIntegration.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/theogf/ThermodynamicIntegration.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/60895eaa6b8fd75a2ddcce956cfa18c61757d8288a79bd30db37b4bb8db65629/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7468656f67662f546865726d6f64796e616d6963496e746567726174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/theogf/ThermodynamicIntegration.jl/badge.svg?branch=main" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<h2><a id="user-content-thermodynamic-integration" class="anchor" aria-hidden="true" href="#thermodynamic-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thermodynamic Integration</h2>
<p><a href="">Thermodynamic integration</a> is a technique from physics to get an accurate estimate of the log evidence.
By creating a schedule going from the prior to the posterior and estimating the log likelihood at each step one gets a stable ad robust estimate of the log evidence.</p>
<h2><a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A simple example</h2>
<p>A simple package to compute Thermodynamic Integration for computing the evidence in a Bayesian setting.
You need to provide the <code>logprior</code> and the <code>loglikelihood</code> as well as an initial sample:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    using Distributions, ThermodynamicIntegration
    D = 5
    prior = MvNormal(0.5 * ones(D)) # The prior distribution
    likelihood = MvNormal(2.0 * ones(D))
    logprior(x) = logpdf(prior, x) # The log-prior function
    loglikelihood(x) = logpdf(likelihood, x) # The log-likelihood function

    alg = ThermInt(n_samples=5000) # We are going to sample 5000 samples at every step

    logZ = alg(logprior, loglikelihood, rand(prior)) # Compute the log evidence
    # -8.244829688529377
    true_logZ = -0.5 * (logdet(cov(prior) + cov(likelihood)) + D * log(2π)) # we compare twith the true value
    # -8.211990123364176
"><pre>    <span class="pl-k">using</span> Distributions, ThermodynamicIntegration
    D <span class="pl-k">=</span> <span class="pl-c1">5</span>
    prior <span class="pl-k">=</span> <span class="pl-c1">MvNormal</span>(<span class="pl-c1">0.5</span> <span class="pl-k">*</span> <span class="pl-c1">ones</span>(D)) <span class="pl-c"><span class="pl-c">#</span> The prior distribution</span>
    likelihood <span class="pl-k">=</span> <span class="pl-c1">MvNormal</span>(<span class="pl-c1">2.0</span> <span class="pl-k">*</span> <span class="pl-c1">ones</span>(D))
    <span class="pl-en">logprior</span>(x) <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(prior, x) <span class="pl-c"><span class="pl-c">#</span> The log-prior function</span>
    <span class="pl-en">loglikelihood</span>(x) <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(likelihood, x) <span class="pl-c"><span class="pl-c">#</span> The log-likelihood function</span>

    alg <span class="pl-k">=</span> <span class="pl-c1">ThermInt</span>(n_samples<span class="pl-k">=</span><span class="pl-c1">5000</span>) <span class="pl-c"><span class="pl-c">#</span> We are going to sample 5000 samples at every step</span>

    logZ <span class="pl-k">=</span> <span class="pl-c1">alg</span>(logprior, loglikelihood, <span class="pl-c1">rand</span>(prior)) <span class="pl-c"><span class="pl-c">#</span> Compute the log evidence</span>
    <span class="pl-c"><span class="pl-c">#</span> -8.244829688529377</span>
    true_logZ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span> <span class="pl-k">*</span> (<span class="pl-c1">logdet</span>(<span class="pl-c1">cov</span>(prior) <span class="pl-k">+</span> <span class="pl-c1">cov</span>(likelihood)) <span class="pl-k">+</span> D <span class="pl-k">*</span> <span class="pl-c1">log</span>(<span class="pl-c1">2</span>π)) <span class="pl-c"><span class="pl-c">#</span> we compare twith the true value</span>
    <span class="pl-c"><span class="pl-c">#</span> -8.211990123364176</span></pre></div>
<p>You can also simply pass a Turing model :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    using Turing
    @model function gauss(y)
        x ~ prior
        y ~ MvNormal(x, cov(likelihood))
    end

    alg = ThermInt(n_samples=5000)
    model = gauss(zeros(D))
    turing_logZ = alg(model)
    # # -8.211990123364176
"><pre>    <span class="pl-k">using</span> Turing
    <span class="pl-c1">@model</span> <span class="pl-k">function</span> <span class="pl-en">gauss</span>(y)
        x <span class="pl-k">~</span> prior
        y <span class="pl-k">~</span> <span class="pl-c1">MvNormal</span>(x, <span class="pl-c1">cov</span>(likelihood))
    <span class="pl-k">end</span>

    alg <span class="pl-k">=</span> <span class="pl-c1">ThermInt</span>(n_samples<span class="pl-k">=</span><span class="pl-c1">5000</span>)
    model <span class="pl-k">=</span> <span class="pl-c1">gauss</span>(<span class="pl-c1">zeros</span>(D))
    turing_logZ <span class="pl-k">=</span> <span class="pl-c1">alg</span>(model)
    <span class="pl-c"><span class="pl-c">#</span> # -8.211990123364176</span></pre></div>
<h2><a id="user-content-parallel-sampling" class="anchor" aria-hidden="true" href="#parallel-sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel sampling</h2>
<p>The algorithm also works on multiple threads by calling :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    alg = ThermInt(n_samples=5000) 
    logZ = alg(logprior, loglikelihood, rand(prior), TIParallelThreads())
"><pre>    alg <span class="pl-k">=</span> <span class="pl-c1">ThermInt</span>(n_samples<span class="pl-k">=</span><span class="pl-c1">5000</span>) 
    logZ <span class="pl-k">=</span> <span class="pl-c1">alg</span>(logprior, loglikelihood, <span class="pl-c1">rand</span>(prior), <span class="pl-c1">TIParallelThreads</span>())</pre></div>
<h2><a id="user-content-sampling-methods" class="anchor" aria-hidden="true" href="#sampling-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sampling methods</h2>
<p>Right now sampling is based on <a href="https://github.com/TuringLang/AdvancedHMC.jl"><code>AdvancedHMC.jl</code></a>, with the <code>ForwardDiff</code> AD backend.
To change the backend to <code>Zygote</code> or <code>ReverseDiff</code> (recommended for variables with large dimensions you can do:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    using Zygote # (or ReverseDiff)
    ThermoDynamicIntegration.set_adbackend(:Zygote) # (or :ReverseDiff)
"><pre>    <span class="pl-k">using</span> Zygote <span class="pl-c"><span class="pl-c">#</span> (or ReverseDiff)</span>
    ThermoDynamicIntegration<span class="pl-k">.</span><span class="pl-c1">set_adbackend</span>(<span class="pl-c1">:Zygote</span>) <span class="pl-c"><span class="pl-c">#</span> (or :ReverseDiff)</span></pre></div>
<p>More samplers will be available in the future.</p>
<h2><a id="user-content-further-options" class="anchor" aria-hidden="true" href="#further-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Further options</h2>
<p>You can disactivate the progress by calling <code>progress=false</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    alg()
"><pre>    <span class="pl-c1">alg</span>()</pre></div>
</article></div>