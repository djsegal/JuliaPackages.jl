<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mathoptsetdistances" class="anchor" aria-hidden="true" href="#mathoptsetdistances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptSetDistances</h1>
<p dir="auto"><a href="https://github.com/matbesancon/MathOptSetDistances.jl/actions"><img src="https://github.com/matbesancon/MathOptSetDistances.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/matbesancon/MathOptSetDistances.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3b8d2b5680bb32f810a7c10de819c0d48c13d342324266ddb9ffa200b68fac7a/68747470733a2f2f636f6465636f762e696f2f67682f6d6174626573616e636f6e2f4d6174684f707453657444697374616e6365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/matbesancon/MathOptSetDistances.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/265924605" rel="nofollow"><img src="https://camo.githubusercontent.com/4b576e48cfa83f17acc6f0f849496f5bf14266c34e50e7f260059eb4c44c1a9f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3236353932343630352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/265924605.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Set of functions to compute distances and projections to sets defined in <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface.jl</a>.</p>
<h2 dir="auto"><a id="user-content-distance-to-set" class="anchor" aria-hidden="true" href="#distance-to-set"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Distance to set</h2>
<p dir="auto"><code>set_distance(d::D, v::V, s::S)</code> defines the distance of a point <code>v</code> to a set <code>s</code>. The distance is always 0 if <code>v âˆˆ s</code>.
<code>S</code> is a <code>MOI.AbstractSet</code>, <code>v</code> is a scalar or vector value and <code>d</code> a type of distance that is a subtype of <code>AbstractDistance</code>.</p>
<p dir="auto">New sets should implement at least <code>set_distance(::DefaultDistance, v::V, s::MySet)</code>.</p>
<h2 dir="auto"><a id="user-content-projection-on-set" class="anchor" aria-hidden="true" href="#projection-on-set"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Projection on set</h2>
<p dir="auto"><code>projection_on_set(d::D, v, s::S)</code> returns the point on <code>S</code> that is closest to <code>v</code> with respect to the distance <code>d</code>.
<code>projection_gradient_on_set</code> returns the gradient of this projection, i.e. the transpose of the Jacobian.</p>
<h2 dir="auto"><a id="user-content-gradients-as-chainrules" class="anchor" aria-hidden="true" href="#gradients-as-chainrules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gradients as ChainRules</h2>
<p dir="auto">Gradients <code>projection_gradient_on_set</code> eagerly computes the full derivative matrix.
This is often simpler to test and implement, but leads to unnecessary allocations and expensive operations.
They are also implemented using <a href="https://github.com/JuliaDiff/ChainRulesCore.jl">ChainRulesCore.jl</a>
methods <code>rrule</code> and <code>frule</code>.
Both methods should be implemented for each derivative and tested against <code>projection_gradient_on_set</code>
and <code>FiniteDifferences.jl</code>.</p>
<h2 dir="auto"><a id="user-content-special-matrix-types" class="anchor" aria-hidden="true" href="#special-matrix-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Special matrix types</h2>
<p dir="auto">When some gradients or projections have structural zeros (sparsity patterns),
they can and should return non-standard matrices including <code>FillArrays</code> <code>Zeros, Eyes, Ones, Fill</code>,
sparse arrays and <code>LinearAlgebra.Diagonal</code>.</p>
</article></div>