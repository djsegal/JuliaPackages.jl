<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-functionindices" class="anchor" aria-hidden="true" href="#functionindices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionIndices</h1>
<p dir="auto"><a href="https://github.com/wangl-cc/FunctionIndices.jl/actions/workflows/ci.yml"><img src="https://github.com/wangl-cc/FunctionIndices.jl/actions/workflows/ci.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/wangl-cc/FunctionIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c734de9a94be869fe4ffb5dc0bd072d745c2fc68202231ccd5984f1a439ca1df/68747470733a2f2f636f6465636f762e696f2f67682f77616e676c2d63632f46756e6374696f6e496e64696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/wangl-cc/FunctionIndices.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/wangl-cc/FunctionIndices.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/feca83790a8318add3279804abd9512fb878e51866199cae409168a591d46768/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77616e676c2d63632f46756e6374696f6e496e64696365732e6a6c" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/wangl-cc/FunctionIndices.jl" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/FunctionIndices.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/FunctionIndices.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A small package allows indexing array with functions via a simple wrapper <code>FI</code>.
For example, <code>A[FI(iseven)]</code> returns an array containing all elements of <code>A</code> whose indices instead of values are even, like <code>(0:3)[FI(iseven)] == [1, 3]</code>.
To access elements whose values are even, try <code>filter(iseven, A)</code>.
As a special case, for indexing with <code>!=(i)</code> or <code>!in(I)</code>, which are expected to get elements whose index are not is <code>i</code> or not in <code>I</code>,
there is another wrapper <code>not</code> providing a convenient and optimized way.
The <code>not</code> is similar to <code>Not</code> of <a href="https://github.com/JuliaData/InvertedIndices.jl"><code>InvertedIndices</code></a>, but faster in some cases,
see <a href="https://wangl-cc.github.io/FunctionIndices.jl/stable/performance" rel="nofollow">performance comparing</a> for more information.</p>
<h2 dir="auto"><a id="user-content-quick-start-to-index-with-function-index" class="anchor" aria-hidden="true" href="#quick-start-to-index-with-function-index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start to index with function index</h2>
<p dir="auto">1-d indexing <code>A[FI(f)]</code> is equivalent to <code>A[map(f, begin:end)]</code>,
multidimensional indexing <code>A[FI(f1), ..., FI(fn)]</code> is equivalent to <code>A[map(FI(f1), axes(A, 1)), ..., map(FI(fn), axes(A, n))]</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FunctionIndices

julia&gt; A = reshape(0:11, 3, 4)
3×4 reshape(::UnitRange{Int64}, 3, 4) with eltype Int64:
 0  3  6   9
 1  4  7  10
 2  5  8  11

julia&gt; A[FI(iseven)]
6-element Vector{Int64}:
  1
  3
  5
  7
  9
 11

julia&gt; A[map(iseven, begin:end)]
6-element Vector{Int64}:
  1
  3
  5
  7
  9
 11

julia&gt; A[FI(isodd), FI(iseven)]
2×2 Matrix{Int64}:
 3   9
 5  11

julia&gt; A[map(isodd, begin:end), map(iseven, begin:end)]
2×2 Matrix{Int64}:
 3   9
 5  11"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FunctionIndices

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">11</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">6</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>  <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">FI</span>(iseven)]
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">map</span>(iseven, <span class="pl-k">begin</span><span class="pl-k">:</span>end)]
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">FI</span>(isodd), <span class="pl-c1">FI</span>(iseven)]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">map</span>(isodd, <span class="pl-k">begin</span><span class="pl-k">:</span>end), <span class="pl-c1">map</span>(iseven, <span class="pl-k">begin</span><span class="pl-k">:</span>end)]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">11</span></pre></div>
<p dir="auto"><code>not</code> is an alternative to <code>Not</code>, and in most cases they are equivalent:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using InvertedIndices

julia&gt; A[not(1)] == A[Not(1)]
true

julia&gt; A[not(1, 2)] == A[Not(1, 2)]
true

julia&gt; A[not(1:2)] == A[Not(1:2)]
true

julia&gt; let I = rand(Bool, size(A)); A[not(I)] == A[Not(I)] end
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InvertedIndices

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">not</span>(<span class="pl-c1">1</span>)] <span class="pl-k">==</span> A[<span class="pl-c1">Not</span>(<span class="pl-c1">1</span>)]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">not</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)] <span class="pl-k">==</span> A[<span class="pl-c1">Not</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">not</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>)] <span class="pl-k">==</span> A[<span class="pl-c1">Not</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>)]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> I <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool, <span class="pl-c1">size</span>(A)); A[<span class="pl-c1">not</span>(I)] <span class="pl-k">==</span> A[<span class="pl-c1">Not</span>(I)] <span class="pl-k">end</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">But for <code>CartesianIndex</code> and <code>CartesianIndices</code>,
<code>A[not(CartesianIndex(i, j,...))]</code> is equivalent to <code>A[not(i), not(j), ...]</code>
and <code>A[not(CartesianIndices((I, J,...))]</code> is equivalent to <code>A[not(I), not(J), ...]</code>,
where <code>not</code> treats inverted Cartesian indices as Cartesian inverted indices,
and always returns an array with the same dimension.
However, <code>A[Not(CartesianIndex(i, j,...))]</code>
converts <code>CartesianIndex</code> to linear index and return a vector,
and <code>A[Not(CartesianIndices((I, J,...)))]</code> seems an undefined behaviour.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A[not(CartesianIndex(1, 2))] # equivalent to A[not(1), not(2)]
2×3 Matrix{Int64}:
 1  7  10
 2  8  11

julia&gt; A[Not(CartesianIndex(1, 2))] # equivalent to A[Not(3)]
11-element Vector{Int64}:
  0
  1
  2
  4
  5
  ⋮
  8
  9
 10
 11

julia&gt; A[not(CartesianIndex(1, 2):CartesianIndex(2, 3))] # equivalent to A[not(1:2), not(2:3)]
1×2 Matrix{Int64}:
 2  11

julia&gt; A[Not(CartesianIndex(1, 2):CartesianIndex(2, 3))] # seems an undefined behavior
1×2 Matrix{Int64}:
 5  8"><pre>julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">not</span>(<span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))] <span class="pl-c"><span class="pl-c">#</span> equivalent to A[not(1), not(2)]</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">8</span>  <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Not</span>(<span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))] <span class="pl-c"><span class="pl-c">#</span> equivalent to A[Not(3)]</span>
<span class="pl-c1">11</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
  <span class="pl-c1">0</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>
  ⋮
  <span class="pl-c1">8</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">not</span>(<span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)<span class="pl-k">:</span><span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>))] <span class="pl-c"><span class="pl-c">#</span> equivalent to A[not(1:2), not(2:3)]</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Not</span>(<span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)<span class="pl-k">:</span><span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>))] <span class="pl-c"><span class="pl-c">#</span> seems an undefined behavior</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">8</span></pre></div>
<p dir="auto">Besides, for out of bounds index like <code>A[4, 5]</code>,
<code>A[not(4), not(5)]</code> is equivalent to <code>A[:, :]</code>,
because inbounds indices are not equal to the given value,
while <code>A[Not[4], Not(5)]</code> throws a <code>BoundsError</code>.</p>
<p dir="auto">This package is also compatible with <code>OffsetArrays</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OffsetArrays

julia&gt; OA = OffsetArray(A, 2:4, 0:3)
3×4 OffsetArray(reshape(::UnitRange{Int64}, 3, 4), 2:4, 0:3) with eltype Int64 with indices 2:4×0:3:
 0  3  6   9
 1  4  7  10
 2  5  8  11

julia&gt; OA[FI(iseven), FI(iseven)] # OA[[2, 4], [0, 2]]
2×2 Matrix{Int64}:
 0  6
 2  8

julia&gt; OA[not(2), not(3)] # OA[[3, 4], [0, 1, 2]]
2×3 Matrix{Int64}:
 1  4  7
 2  5  8"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OffsetArrays

julia<span class="pl-k">&gt;</span> OA <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(A, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-c1">reshape</span>(<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int64}</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>), <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Int64 with indices <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">6</span>   <span class="pl-c1">9</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span>  <span class="pl-c1">11</span>

julia<span class="pl-k">&gt;</span> OA[<span class="pl-c1">FI</span>(iseven), <span class="pl-c1">FI</span>(iseven)] <span class="pl-c"><span class="pl-c">#</span> OA[[2, 4], [0, 2]]</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">6</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> OA[<span class="pl-c1">not</span>(<span class="pl-c1">2</span>), <span class="pl-c1">not</span>(<span class="pl-c1">3</span>)] <span class="pl-c"><span class="pl-c">#</span> OA[[3, 4], [0, 1, 2]]</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">4</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">8</span></pre></div>
</article></div>