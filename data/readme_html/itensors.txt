<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://itensor.github.io/ITensors.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://itensor.github.io/ITensors.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/ITensor/ITensors.jl/actions?query=workflow%3ATests"><img src="https://github.com/ITensor/ITensors.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width:100%;"></a> <a href="https://codecov.io/gh/ITensor/ITensors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b71c7dc07e9cdfd4b7e90614caf5462a40da92888ab81848f0b3b21890d572ad/68747470733a2f2f636f6465636f762e696f2f67682f4954656e736f722f4954656e736f72732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/ITensor/ITensors.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="center"><strong>Citation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://arxiv.org/abs/2007.14822" rel="nofollow"><img src="https://camo.githubusercontent.com/c6543927e4f46dafb8ab1c28e30ddedba266017da5ef3ab0e71f1f10da74c766/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323030372e31343832322d6233316231622e737667" alt="arXiv" data-canonical-src="https://img.shields.io/badge/arXiv-2007.14822-b31b1b.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="center"><strong>Style Guide</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>ITensors is a library for rapidly creating correct and efficient
tensor network algorithms.</p>
<p>The source code for ITensors can be found here: <a href="https://github.com/ITensor/ITensors.jl">https://github.com/ITensor/ITensors.jl</a>.</p>
<p>Additional documentation can be found on the ITensor website <a href="https://itensor.org/" rel="nofollow">itensor.org</a>.</p>
<p>An ITensor is a tensor whose interface
is independent of its memory layout. ITensor indices are
objects which carry extra information and which
'recognize' each other (compare equal to each other).</p>
<p>The ITensor library also includes composable and extensible
algorithms for optimizing and transforming tensor networks, such as
matrix product state and matrix product operators, such as
the DMRG algorithm.</p>
<p>Development of ITensor is supported by the Flatiron Institute, a division of the Simons Foundation.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The ITensors package can be installed with the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="~ julia
"><pre><code>~ julia
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]

pkg&gt; add ITensors
"><pre>julia<span class="pl-k">&gt;</span> ]

pkg<span class="pl-k">&gt;</span> add ITensors</pre></div>
<p>Or, equivalently, via the <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;ITensors&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ITensors<span class="pl-pds">"</span></span>)</pre></div>
<p>Please note that right now, ITensors.jl requires that you use Julia v1.3 or later (since ITensors.jl relies on a feature that was introduced in Julia v1.3).</p>
<p>We recommend using ITensors.jl with Intel MKL in order to get the best possible performance. If you have not done so already, you can replace your current BLAS and LAPACK implementation with MKL by using the MKL.jl package. Please follow the instructions <a href="https://github.com/JuliaComputing/MKL.jl">here</a>.</p>
<p>Also note that the MKL.jl package currently doesn't work if you are using Julia v1.6, but you can patch it with the instructions described <a href="https://github.com/JuliaLinearAlgebra/MKL.jl/issues/60#issuecomment-808329869">here</a>.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<ul>
<li><a href="https://itensor.github.io/ITensors.jl/stable/" rel="nofollow"><strong>STABLE</strong></a> --  <strong>documentation of the most recently tagged version.</strong></li>
<li><a href="https://itensor.github.io/ITensors.jl/dev/" rel="nofollow"><strong>DEVEL</strong></a> -- <em>documentation of the in-development version.</em></li>
</ul>
<h2><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citation</h2>
<p>If you use ITensors.jl in your work, for now please cite the <a href="https://arxiv.org/abs/2007.14822" rel="nofollow">arXiv preprint</a>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@misc{itensor,
    title={The \mbox{ITensor} Software Library for Tensor Network Calculations},
    author={Matthew Fishman and Steven R. White and E. Miles Stoudenmire},
    year={2020},
    eprint={2007.14822},
    archivePrefix={arXiv}
}
"><pre><code>@misc{itensor,
    title={The \mbox{ITensor} Software Library for Tensor Network Calculations},
    author={Matthew Fishman and Steven R. White and E. Miles Stoudenmire},
    year={2020},
    eprint={2007.14822},
    archivePrefix={arXiv}
}
</code></pre></div>
<h2><a id="user-content-full-example-codes" class="anchor" aria-hidden="true" href="#full-example-codes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Full Example Codes</h2>
<p>The ITensors.jl package contains a directory of examples, which we
will continue to add to. You can find them online <a href="https://github.com/ITensor/ITensors.jl/tree/main/examples">here</a>.
Additionally, once you have installed ITensors.jl you can find a local version
of the examples in the directory <code>ITensors.examples_dir()</code>, and you can run them
as follows from the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ITensors

julia&gt; cd(ITensors.examples_dir())

julia&gt; readdir()
7-element Array{String,1}:
 &quot;basic_ops&quot;
 &quot;ctmrg&quot;
 &quot;dmrg&quot;
 &quot;gate_evolution&quot;
 &quot;krylov_methods&quot;
 &quot;src&quot;
 &quot;trg&quot;

julia&gt; cd(&quot;dmrg&quot;)

julia&gt; readdir()
8-element Array{String,1}:
 &quot;1d_heisenberg.jl&quot;
 &quot;1d_heisenberg_conserve_spin.jl&quot;
 &quot;1d_hubbard_extended.jl&quot;
 &quot;1d_ising_with_observer.jl&quot;
 &quot;2d_heisenberg_conserve_spin.jl&quot;
 &quot;2d_hubbard_conserve_momentum.jl&quot;
 &quot;2d_hubbard_conserve_particles.jl&quot;
 &quot;input_files&quot;

julia&gt; include(&quot;1d_heisenberg.jl&quot;)
sweeps = Sweeps
1 cutoff=1.0E-11, maxdim=10, mindim=1, noise=0.0E+00
2 cutoff=1.0E-11, maxdim=20, mindim=1, noise=0.0E+00
3 cutoff=1.0E-11, maxdim=100, mindim=1, noise=0.0E+00
4 cutoff=1.0E-11, maxdim=100, mindim=1, noise=0.0E+00
5 cutoff=1.0E-11, maxdim=200, mindim=1, noise=0.0E+00

After sweep 1 energy=-138.837988775764 maxlinkdim=10 time=13.760
After sweep 2 energy=-138.937408365962 maxlinkdim=20 time=0.249
After sweep 3 energy=-138.940084788852 maxlinkdim=100 time=1.867
After sweep 4 energy=-138.940086091070 maxlinkdim=100 time=3.824
After sweep 5 energy=-138.940086113999 maxlinkdim=122 time=4.527
Final energy = -138.940086113999

julia&gt; pwd()
&quot;[path_to_package_installation]/ITensors/examples/dmrg&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ITensors

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span>(ITensors<span class="pl-k">.</span><span class="pl-c1">examples_dir</span>())

julia<span class="pl-k">&gt;</span> <span class="pl-c1">readdir</span>()
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>basic_ops<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>ctmrg<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>dmrg<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>gate_evolution<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>krylov_methods<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>src<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>trg<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span>(<span class="pl-s"><span class="pl-pds">"</span>dmrg<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">readdir</span>()
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>1d_heisenberg.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>1d_heisenberg_conserve_spin.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>1d_hubbard_extended.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>1d_ising_with_observer.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>2d_heisenberg_conserve_spin.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>2d_hubbard_conserve_momentum.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>2d_hubbard_conserve_particles.jl<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>input_files<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>1d_heisenberg.jl<span class="pl-pds">"</span></span>)
sweeps <span class="pl-k">=</span> Sweeps
<span class="pl-c1">1</span> cutoff<span class="pl-k">=</span><span class="pl-c1">1.0E-11</span>, maxdim<span class="pl-k">=</span><span class="pl-c1">10</span>, mindim<span class="pl-k">=</span><span class="pl-c1">1</span>, noise<span class="pl-k">=</span><span class="pl-c1">0.0E+00</span>
<span class="pl-c1">2</span> cutoff<span class="pl-k">=</span><span class="pl-c1">1.0E-11</span>, maxdim<span class="pl-k">=</span><span class="pl-c1">20</span>, mindim<span class="pl-k">=</span><span class="pl-c1">1</span>, noise<span class="pl-k">=</span><span class="pl-c1">0.0E+00</span>
<span class="pl-c1">3</span> cutoff<span class="pl-k">=</span><span class="pl-c1">1.0E-11</span>, maxdim<span class="pl-k">=</span><span class="pl-c1">100</span>, mindim<span class="pl-k">=</span><span class="pl-c1">1</span>, noise<span class="pl-k">=</span><span class="pl-c1">0.0E+00</span>
<span class="pl-c1">4</span> cutoff<span class="pl-k">=</span><span class="pl-c1">1.0E-11</span>, maxdim<span class="pl-k">=</span><span class="pl-c1">100</span>, mindim<span class="pl-k">=</span><span class="pl-c1">1</span>, noise<span class="pl-k">=</span><span class="pl-c1">0.0E+00</span>
<span class="pl-c1">5</span> cutoff<span class="pl-k">=</span><span class="pl-c1">1.0E-11</span>, maxdim<span class="pl-k">=</span><span class="pl-c1">200</span>, mindim<span class="pl-k">=</span><span class="pl-c1">1</span>, noise<span class="pl-k">=</span><span class="pl-c1">0.0E+00</span>

After sweep <span class="pl-c1">1</span> energy<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">138.837988775764</span> maxlinkdim<span class="pl-k">=</span><span class="pl-c1">10</span> time<span class="pl-k">=</span><span class="pl-c1">13.760</span>
After sweep <span class="pl-c1">2</span> energy<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">138.937408365962</span> maxlinkdim<span class="pl-k">=</span><span class="pl-c1">20</span> time<span class="pl-k">=</span><span class="pl-c1">0.249</span>
After sweep <span class="pl-c1">3</span> energy<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">138.940084788852</span> maxlinkdim<span class="pl-k">=</span><span class="pl-c1">100</span> time<span class="pl-k">=</span><span class="pl-c1">1.867</span>
After sweep <span class="pl-c1">4</span> energy<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">138.940086091070</span> maxlinkdim<span class="pl-k">=</span><span class="pl-c1">100</span> time<span class="pl-k">=</span><span class="pl-c1">3.824</span>
After sweep <span class="pl-c1">5</span> energy<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">138.940086113999</span> maxlinkdim<span class="pl-k">=</span><span class="pl-c1">122</span> time<span class="pl-k">=</span><span class="pl-c1">4.527</span>
Final energy <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">138.940086113999</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pwd</span>()
<span class="pl-s"><span class="pl-pds">"</span>[path_to_package_installation]/ITensors/examples/dmrg<span class="pl-pds">"</span></span></pre></div>
<p>You can use your favorite text editor to view these examples. If you
would like to modify them, either copy them into your own directory,
or checkout ITensors.jl in development mode using the instructions
in <a href="@ref">Developing ITensors.jl</a>.</p>
<h2><a id="user-content-itensor-code-samples" class="anchor" aria-hidden="true" href="#itensor-code-samples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ITensor Code Samples</h2>
<h3><a id="user-content-basic-overview" class="anchor" aria-hidden="true" href="#basic-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Overview</h3>
<p>ITensor construction, setting of elements, contraction, and addition.
Before constructing an ITensor, one constructs Index objects
representing tensor indices.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using ITensors
let
  i = Index(3)
  j = Index(5)
  k = Index(2)
  l = Index(7)

  A = ITensor(i,j,k)
  B = ITensor(j,l)

  # Set elements of A
  A[i=&gt;1,j=&gt;1,k=&gt;1] = 11.1
  A[i=&gt;2,j=&gt;1,k=&gt;2] = -21.2
  A[k=&gt;1,i=&gt;3,j=&gt;1] = 31.1  # can provide Index values in any order
  # ...

  # Contract over shared index j
  C = A * B

  @show hasinds(C,i,k,l) # = true

  D = randomITensor(k,j,i) # ITensor with random elements

  # Add two ITensors
  # must have same set of indices
  # but can be in any order
  R = A + D

  nothing
end

# output

hasinds(C, i, k, l) = true
"><pre lang="jldoctest;"><code>using ITensors
let
  i = Index(3)
  j = Index(5)
  k = Index(2)
  l = Index(7)

  A = ITensor(i,j,k)
  B = ITensor(j,l)

  # Set elements of A
  A[i=&gt;1,j=&gt;1,k=&gt;1] = 11.1
  A[i=&gt;2,j=&gt;1,k=&gt;2] = -21.2
  A[k=&gt;1,i=&gt;3,j=&gt;1] = 31.1  # can provide Index values in any order
  # ...

  # Contract over shared index j
  C = A * B

  @show hasinds(C,i,k,l) # = true

  D = randomITensor(k,j,i) # ITensor with random elements

  # Add two ITensors
  # must have same set of indices
  # but can be in any order
  R = A + D

  nothing
end

# output

hasinds(C, i, k, l) = true
</code></pre></div>
<h3><a id="user-content-singular-value-decomposition-svd-of-a-matrix" class="anchor" aria-hidden="true" href="#singular-value-decomposition-svd-of-a-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Singular Value Decomposition (SVD) of a Matrix</h3>
<p>In this example, we create a random 10x20 matrix
and compute its SVD. The resulting factors can
be simply multiplied back together using the
ITensor <code>*</code> operation, which automatically recognizes
the matching indices between U and S, and between S and V
and contracts (sums over) them.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using ITensors
let
  i = Index(10)           # index of dimension 10
  j = Index(20)           # index of dimension 20
  M = randomITensor(i,j)  # random matrix, indices i,j
  U,S,V = svd(M,i)        # compute SVD with i as row index
  @show M ≈ U*S*V         # = true

  nothing
end

# output

M ≈ U * S * V = true
"><pre lang="jldoctest;"><code>using ITensors
let
  i = Index(10)           # index of dimension 10
  j = Index(20)           # index of dimension 20
  M = randomITensor(i,j)  # random matrix, indices i,j
  U,S,V = svd(M,i)        # compute SVD with i as row index
  @show M ≈ U*S*V         # = true

  nothing
end

# output

M ≈ U * S * V = true
</code></pre></div>
<h3><a id="user-content-singular-value-decomposition-svd-of-a-tensor" class="anchor" aria-hidden="true" href="#singular-value-decomposition-svd-of-a-tensor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Singular Value Decomposition (SVD) of a Tensor</h3>
<p>In this example, we create a random 4x4x4x4 tensor
and compute its SVD, temporarily treating the indices i and k
together as the "row" index and j and l as the "column" index
for the purposes of the SVD. The resulting factors can
be simply multiplied back together using the
ITensor <code>*</code> operation, which automatically recognizes
the matching indices between U and S, and between S and V
and contracts (sums over) them.</p>
<p><a target="_blank" rel="noopener noreferrer" href="svd_tensor.png"><img src="svd_tensor.png" alt="" style="max-width:100%;"></a></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using ITensors
let
  i = Index(4,&quot;i&quot;)
  j = Index(4,&quot;j&quot;)
  k = Index(4,&quot;k&quot;)
  l = Index(4,&quot;l&quot;)
  T = randomITensor(i,j,k,l)
  U,S,V = svd(T,i,k)   # compute SVD with (i,k) as row indices (indices of U)
  @show hasinds(U,i,k) # = true
  @show hasinds(V,j,l) # = true
  @show T ≈ U*S*V      # = true

  nothing
end

# output

hasinds(U, i, k) = true
hasinds(V, j, l) = true
T ≈ U * S * V = true
"><pre lang="jldoctest;"><code>using ITensors
let
  i = Index(4,"i")
  j = Index(4,"j")
  k = Index(4,"k")
  l = Index(4,"l")
  T = randomITensor(i,j,k,l)
  U,S,V = svd(T,i,k)   # compute SVD with (i,k) as row indices (indices of U)
  @show hasinds(U,i,k) # = true
  @show hasinds(V,j,l) # = true
  @show T ≈ U*S*V      # = true

  nothing
end

# output

hasinds(U, i, k) = true
hasinds(V, j, l) = true
T ≈ U * S * V = true
</code></pre></div>
<h3><a id="user-content-tensor-indices-tags-and-prime-levels" class="anchor" aria-hidden="true" href="#tensor-indices-tags-and-prime-levels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tensor Indices: Tags and Prime Levels</h3>
<p>Before making an ITensor, you have to define its indices.
Tensor Index objects carry extra information beyond just their dimension.</p>
<p>All Index objects carry a permanent, immutable id number which is
determined when it is constructed, and allow it to be matched
(compare equal) with copies of itself.</p>
<p>Additionally, an Index can have up to four tag strings, and an
integer primelevel. If two Index objects have different tags or
different prime levels, they do not compare equal even if they
have the same id.</p>
<p>Tags are also useful for identifying Index objects when printing
tensors, and for performing certain Index manipulations (e.g.
priming indices having certain sets of tags).</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using ITensors
let
  i = Index(3)     # Index of dimension 3
  @show dim(i)     # = 3
  @show id(i)      # = 0x5d28aa559dd13001 or similar

  ci = copy(i)
  @show ci == i    # = true

  j = Index(5,&quot;j&quot;) # Index with a tag &quot;j&quot;

  @show j == i     # = false

  s = Index(2,&quot;n=1,Site&quot;) # Index with two tags,
                          # &quot;Site&quot; and &quot;n=1&quot;
  @show hastags(s,&quot;Site&quot;) # = true
  @show hastags(s,&quot;n=1&quot;)  # = true

  i1 = prime(i) # i1 has a &quot;prime level&quot; of 1
                # but otherwise same properties as i
  @show i1 == i # = false, prime levels do not match

  nothing
end

# output

dim(i) = 3
id(i) = 0x5d28aa559dd13001
ci == i = true
j == i = false
hastags(s, &quot;Site&quot;) = true
hastags(s, &quot;n=1&quot;) = true
i1 == i = false
"><pre lang="jldoctest;"><code>using ITensors
let
  i = Index(3)     # Index of dimension 3
  @show dim(i)     # = 3
  @show id(i)      # = 0x5d28aa559dd13001 or similar

  ci = copy(i)
  @show ci == i    # = true

  j = Index(5,"j") # Index with a tag "j"

  @show j == i     # = false

  s = Index(2,"n=1,Site") # Index with two tags,
                          # "Site" and "n=1"
  @show hastags(s,"Site") # = true
  @show hastags(s,"n=1")  # = true

  i1 = prime(i) # i1 has a "prime level" of 1
                # but otherwise same properties as i
  @show i1 == i # = false, prime levels do not match

  nothing
end

# output

dim(i) = 3
id(i) = 0x5d28aa559dd13001
ci == i = true
j == i = false
hastags(s, "Site") = true
hastags(s, "n=1") = true
i1 == i = false
</code></pre></div>
<h3><a id="user-content-dmrg-calculation" class="anchor" aria-hidden="true" href="#dmrg-calculation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DMRG Calculation</h3>
<p>DMRG is an iterative algorithm for finding the dominant
eigenvector of an exponentially large, Hermitian matrix.
It originates in physics with the purpose of finding
eigenvectors of Hamiltonian (energy) matrices which model
the behavior of quantum systems.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using ITensors
let
  # Create 100 spin-one indices
  N = 100
  sites = siteinds(&quot;S=1&quot;,N)

  # Input operator terms which define 
  # a Hamiltonian matrix, and convert
  # these terms to an MPO tensor network
  # (here we make the 1D Heisenberg model)
  ampo = OpSum()
  for j=1:N-1
    ampo += &quot;Sz&quot;,j,&quot;Sz&quot;,j+1
    ampo += 0.5,&quot;S+&quot;,j,&quot;S-&quot;,j+1
    ampo += 0.5,&quot;S-&quot;,j,&quot;S+&quot;,j+1
  end
  H = MPO(ampo,sites)

  # Create an initial random matrix product state
  psi0 = randomMPS(sites)

  # Plan to do 5 passes or 'sweeps' of DMRG,
  # setting maximum MPS internal dimensions 
  # for each sweep and maximum truncation cutoff
  # used when adapting internal dimensions:
  sweeps = Sweeps(5)
  setmaxdim!(sweeps, 10,20,100,100,200)
  setcutoff!(sweeps, 1E-10)
  @show sweeps

  # Run the DMRG algorithm, returning energy 
  # (dominant eigenvalue) and optimized MPS
  energy, psi = dmrg(H,psi0, sweeps)
  println(&quot;Final energy = $energy&quot;)

  nothing
end

# output

sweeps = Sweeps
1 cutoff=1.0E-10, maxdim=10, mindim=1, noise=0.0E+00
2 cutoff=1.0E-10, maxdim=20, mindim=1, noise=0.0E+00
3 cutoff=1.0E-10, maxdim=100, mindim=1, noise=0.0E+00
4 cutoff=1.0E-10, maxdim=100, mindim=1, noise=0.0E+00
5 cutoff=1.0E-10, maxdim=200, mindim=1, noise=0.0E+00

After sweep 1 energy=-137.954199761732 maxlinkdim=9 maxerr=2.43E-16 time=9.356
After sweep 2 energy=-138.935058943878 maxlinkdim=20 maxerr=4.97E-06 time=0.671
After sweep 3 energy=-138.940080155429 maxlinkdim=92 maxerr=1.00E-10 time=4.522
After sweep 4 energy=-138.940086009318 maxlinkdim=100 maxerr=1.05E-10 time=11.644
After sweep 5 energy=-138.940086058840 maxlinkdim=96 maxerr=1.00E-10 time=12.771
Final energy = -138.94008605883985
"><pre lang="jldoctest;"><code>using ITensors
let
  # Create 100 spin-one indices
  N = 100
  sites = siteinds("S=1",N)

  # Input operator terms which define 
  # a Hamiltonian matrix, and convert
  # these terms to an MPO tensor network
  # (here we make the 1D Heisenberg model)
  ampo = OpSum()
  for j=1:N-1
    ampo += "Sz",j,"Sz",j+1
    ampo += 0.5,"S+",j,"S-",j+1
    ampo += 0.5,"S-",j,"S+",j+1
  end
  H = MPO(ampo,sites)

  # Create an initial random matrix product state
  psi0 = randomMPS(sites)

  # Plan to do 5 passes or 'sweeps' of DMRG,
  # setting maximum MPS internal dimensions 
  # for each sweep and maximum truncation cutoff
  # used when adapting internal dimensions:
  sweeps = Sweeps(5)
  setmaxdim!(sweeps, 10,20,100,100,200)
  setcutoff!(sweeps, 1E-10)
  @show sweeps

  # Run the DMRG algorithm, returning energy 
  # (dominant eigenvalue) and optimized MPS
  energy, psi = dmrg(H,psi0, sweeps)
  println("Final energy = $energy")

  nothing
end

# output

sweeps = Sweeps
1 cutoff=1.0E-10, maxdim=10, mindim=1, noise=0.0E+00
2 cutoff=1.0E-10, maxdim=20, mindim=1, noise=0.0E+00
3 cutoff=1.0E-10, maxdim=100, mindim=1, noise=0.0E+00
4 cutoff=1.0E-10, maxdim=100, mindim=1, noise=0.0E+00
5 cutoff=1.0E-10, maxdim=200, mindim=1, noise=0.0E+00

After sweep 1 energy=-137.954199761732 maxlinkdim=9 maxerr=2.43E-16 time=9.356
After sweep 2 energy=-138.935058943878 maxlinkdim=20 maxerr=4.97E-06 time=0.671
After sweep 3 energy=-138.940080155429 maxlinkdim=92 maxerr=1.00E-10 time=4.522
After sweep 4 energy=-138.940086009318 maxlinkdim=100 maxerr=1.05E-10 time=11.644
After sweep 5 energy=-138.940086058840 maxlinkdim=96 maxerr=1.00E-10 time=12.771
Final energy = -138.94008605883985
</code></pre></div>
</article></div>