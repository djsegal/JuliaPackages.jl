<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaIO/CRC32.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaIO/CRC32.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/CRC32.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fe09d74a095f943698cae69d234330adc4c1767f191045acfadcffdd78c14474/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f43524333322e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d396c77695778455a6a4d" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaIO/CRC32.jl/branch/main/graph/badge.svg?token=9lwiWxEZjM" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-crc32" class="anchor" aria-hidden="true" href="#crc32"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CRC32</h1>
<p dir="auto">CRC32 is a <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/" rel="nofollow">Julia package</a> for computing the <a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check" rel="nofollow">CRC-32 checksum</a> as defined by
the ISO 3309 / ITU-T V.42 / CRC-32-IEEE standards, designed as a drop-in replacement for
Julia's <a href="https://docs.julialang.org/en/v1/stdlib/CRC32c/" rel="nofollow">CRC32c standard library</a> (which computes the CRC-32<strong>c</strong> checksum).   A wider variety of CRC checksum algorithms is provided by the <a href="https://github.com/andrewcooke/CRC.jl">CRC.jl package</a>, and cryptographic checksums can be found in <a href="https://github.com/JuliaCrypto/MD5.jl">MD5.jl</a> and <a href="https://github.com/JuliaCrypto/SHA.jl">SHA.jl</a>.</p>
<ul dir="auto">
<li><em>Note:</em> This JuliaIO/CRC32.jl package is completely independent from the older <a href="https://github.com/fhs/CRC32.jl">fhs/CRC32.jl package</a> by <a href="https://github.com/fhs">Fazlul Shahriar</a>, which is no longer maintained (and much slower).  If you run <code>add CRC32</code> in <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/" rel="nofollow">Julia's package manager</a> you will get JuliaIO/CRC32.jl, <em>not</em> fhs/CRC32.jl.</li>
</ul>
<p dir="auto">It exports a single function, <code>crc32</code>, described below (analogous to <a href="https://docs.julialang.org/en/v1/stdlib/CRC32c/#CRC32c.crc32c" rel="nofollow"><code>CRC32c.crc32c</code></a>).</p>
<p dir="auto">The implementation uses the <a href="https://refspecs.linuxbase.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/zlib-crc32-1.html" rel="nofollow"><code>crc32</code> function</a> in the <a href="https://zlib.net/" rel="nofollow">zlib library</a> by <a href="https://en.wikipedia.org/wiki/Mark_Adler" rel="nofollow">Mark Adler</a> and others.</p>
<p dir="auto">Although zlib's CRC-32 implementation is <a href="https://github.com/madler/zlib/blob/04f42ceca40f73e2978b50e93806c2a18c1281fc/crc32.c">highly optimized</a>,
it is still typically slower than the <code>CRC32c.crc32c</code> function of the Julia standard
library (which is also based on <a href="https://github.com/JuliaLang/julia/blob/162ee48e1c34b2a2cd797395353f19a7aca21aa2/src/crc32c.c">code by Mark Adler</a>), because CRC-32c checksums benefit from greater hardware
acceleration on typical CPUs.   The main motivation for this package
is for validating data from external sources that only provide a
CRC-32 checksum.</p>
<h2 dir="auto"><a id="user-content-crc32data-crc-and-crc32io-crc" class="anchor" aria-hidden="true" href="#crc32data-crc-and-crc32io-crc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>crc32(data, [crc])</code> and <code>crc32(io, [crc])</code>:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="crc32(data, crc::UInt32=0x00000000)"><pre><span class="pl-c1">crc32</span>(data, crc<span class="pl-k">::</span><span class="pl-c1">UInt32</span><span class="pl-k">=</span><span class="pl-c1">0x00000000</span>)</pre></div>
<p dir="auto">Computes the CRC-32 checksum (ISO 3309, ITU-T V.42, CRC-32-IEEE) of the given <code>data</code>, which can be
an <code>Array{UInt8}</code>, a contiguous subarray thereof, or a <code>String</code>.  Optionally, you can pass
a starting <code>crc</code> integer to be mixed in with the checksum.  The <code>crc</code> parameter
can be used to compute a checksum on data divided into chunks: performing
<code>crc32(data2, crc32(data1))</code> is equivalent to the checksum of <code>[data1; data2]</code>.</p>
<p dir="auto">There is also a method <code>crc32(io, nb, crc)</code> to checksum <code>nb</code> bytes from
a stream <code>io</code>, or <code>crc32(io, crc)</code> to checksum all the remaining bytes.
Hence you can do <a href="@ref"><code>open(crc32, filename)</code></a> to checksum an entire file,
or <code>crc32(seekstart(buf))</code> to checksum an <a href="@ref"><code>IOBuffer</code></a> without
calling <a href="@ref"><code>take!</code></a>.</p>
<p dir="auto">For a <code>String</code>, note that the result is specific to the UTF-8 encoding
(a different checksum would be obtained from a different Unicode encoding).</p>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<p dir="auto">Steven G. Johnson, based on API code from the Julia CRC32c standard
library (also <a href="https://github.com/JuliaLang/julia/pull/18297" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/18297/hovercard">originally contributed</a> by SGJ).   The <a href="https://github.com/madler/zlib/blob/04f42ceca40f73e2978b50e93806c2a18c1281fc/crc32.c"><code>crc32</code> function in zlib</a> was
developed by Mark Adler.</p>
<p dir="auto">The Julia code in this package (and its antecedents in the Julia CRC32c standard library) is free/open-source software under the MIT License (see <code>LICENSE</code> file).   Zlib is free/open-source software under a <a href="https://www.zlib.net/zlib_license.html" rel="nofollow">similar license</a>.</p>
</article></div>