<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-univariatedensityestimatejl" class="anchor" aria-hidden="true" href="#univariatedensityestimatejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnivariateDensityEstimate.jl</h1>
<p dir="auto">Julia Package for univariate density estimation with combinatorial constraints, based on Bernstein polynomials.</p>
<h2 dir="auto"><a id="user-content--installing-the-package-" class="anchor" aria-hidden="true" href="#-installing-the-package-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a> Installing the package </h2>
<p dir="auto">Run the following code to install the package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.clone(&quot;https://github.com/visuddhi/UnivariateDensityEstimate.jl&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/visuddhi/UnivariateDensityEstimate.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Or install directly through</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;UnivariateDensityEstimate&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>UnivariateDensityEstimate<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">from Julia registries.</p>
<p dir="auto">You need to also have Julia v1.1 installed (the package does not support the syntax for older Julia versions before v1.0) to be able to use this package.</p>
<h2 dir="auto"><a id="user-content--the-mirror-descent-md-algorithm-" class="anchor" aria-hidden="true" href="#-the-mirror-descent-md-algorithm-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a> The mirror-descent (MD) algorithm </h2>
<p dir="auto">It is recommended to use <code>BernsteinEstimate_MD(Y,m,a,b,k,e,T,MaxIter,obj,flag,Reg)</code> when combinatorial constraints are not imposed.</p>
<ul dir="auto">
<li>Y: data</li>
<li>m: number of Bernstein basis</li>
<li>[a,b]: domain of the estimator</li>
<li>k: number of modes (only k=0,1 is supported for 'BernsteinEstimate_MD' now; k=0 means vanilla density estimation, k=1 means unimodal density estimation)</li>
<li>e: tolerance of error, 1e-4 by default</li>
<li>T: maximum computational time (in sceonds), 10e10 by default</li>
<li>MaxIter: maximum number of iterations</li>
<li>obj: "Log" or "Quad", "Log" -&gt; maximum log likelihood estimator; "Quad" -&gt; Anderson-Darling estimator</li>
<li>flag: "Acc" or "NonAcc", only applicable for k=0, "Acc" -&gt; accelerated mirror descent, "NonAcc" -&gt; nonaccelerated mirror descent</li>
<li>Reg: coefficient of the L2 regularizer</li>
</ul>
<h2 dir="auto"><a id="user-content--the-mixed-integer-qudratic-optimization-miqo-algorithm-" class="anchor" aria-hidden="true" href="#-the-mixed-integer-qudratic-optimization-miqo-algorithm-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a> The mixed-integer-qudratic-optimization (MIQO) algorithm </h2>
<p dir="auto">It is recommended to use <code>BernsteinEstimate_MIQO(Y,m,a,b,k,e,T)</code> when there are combinatorial constraints.</p>
<ul dir="auto">
<li>Y: data</li>
<li>m: number of Bernstein basis</li>
<li>[a,b]: domain of the estimator</li>
<li>k: number of modes, k can be arbitrary positive integer</li>
<li>e: MIP gap</li>
<li>T: maximum computational time (in sceonds)</li>
</ul>
<p dir="auto">Caution: you need to install Gurobi and maintain a valid license in order for the MIQO algorithm to work.</p>
<h2 dir="auto"><a id="user-content--an-example-" class="anchor" aria-hidden="true" href="#-an-example-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a> An example </h2>
The provided notebook (<a href="https://github.com/visuddhi/UnivariateDensityEstimate.jl/blob/master/Example.ipynb">https://github.com/visuddhi/UnivariateDensityEstimate.jl/blob/master/Example.ipynb</a>) contains a basic example of how to use the package to do density estimation, based on a tweet timing real dataset.
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
using UnivariateDensityEstimate, Statistics, Plots"><pre><span class="pl-k">import</span> Pkg
<span class="pl-k">using</span> UnivariateDensityEstimate, Statistics, Plots</pre></div>
<p dir="auto">After importing the package, we read the dataset:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DelimitedFiles
Y1 = readdlm(&quot;data/tweet_data.txt&quot;,',');
Y1 = log.(Y1[:,2])
Y1 = Y1[Y1.&gt;6]
Y1 = sort(vec(Y1));
a = Float64(minimum(Y1)-Statistics.std(Y1)/length(Y1)^0.5)
b = Float64(maximum(Y1)+Statistics.std(Y1)/length(Y1)^0.5)"><pre><span class="pl-k">using</span> DelimitedFiles
Y1 <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>data/tweet_data.txt<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>);
Y1 <span class="pl-k">=</span> <span class="pl-c1">log</span>.(Y1[:,<span class="pl-c1">2</span>])
Y1 <span class="pl-k">=</span> Y1[Y1<span class="pl-k">.&gt;</span><span class="pl-c1">6</span>]
Y1 <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">vec</span>(Y1));
a <span class="pl-k">=</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">minimum</span>(Y1)<span class="pl-k">-</span>Statistics<span class="pl-k">.</span><span class="pl-c1">std</span>(Y1)<span class="pl-k">/</span><span class="pl-c1">length</span>(Y1)<span class="pl-k">^</span><span class="pl-c1">0.5</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">maximum</span>(Y1)<span class="pl-k">+</span>Statistics<span class="pl-k">.</span><span class="pl-c1">std</span>(Y1)<span class="pl-k">/</span><span class="pl-c1">length</span>(Y1)<span class="pl-k">^</span><span class="pl-c1">0.5</span>)</pre></div>
<p dir="auto">We first plot the histogram of the dataset: it can be seen the empirical distribution has several modes.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="histogram(Y1, label = &quot;tweet data&quot;)"><pre><span class="pl-c1">histogram</span>(Y1, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>tweet data<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/visuddhi/UnivariateDensityEstimate.jl/blob/master/fig/tweet_histogram.png"><img src="https://github.com/visuddhi/UnivariateDensityEstimate.jl/raw/master/fig/tweet_histogram.png" alt="tweet_histogram" style="max-width: 100%;"></a></p>
<p dir="auto">Then we compute the solution from both the MD algorithm and MIQO algorithm for different number of modes:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = 250  
sol_MD_0, obj_MD_0 = BernsteinEstimate_MD(Y1,m,a,b,0,-1,10e10,15000,&quot;Log&quot;,&quot;Acc&quot;,0);
sol_MIQO_0 = BernsteinEstimate_MIQO(Y1,m,a,b,0,0,500);
sol_MIQO_1 = BernsteinEstimate_MIQO(Y1,m,a,b,1,0,500);
sol_MIQO_2 = BernsteinEstimate_MIQO(Y1,m,a,b,2,0,500);
sol_MIQO_3 = BernsteinEstimate_MIQO(Y1,m,a,b,3,0,500);

D = 1000

val_MD_0 = vec(zeros(D,1))
val_MIQO_0 = vec(zeros(D,1))
val_MIQO_1 = vec(zeros(D,1))
val_MIQO_2 = vec(zeros(D,1))
val_MIQO_3 = vec(zeros(D,1))
x = range(a,stop = b, length = D)
for i = 1:D
    for j = 1:m
        val_MD_0[i] = val_MD_0[i]+sol_MD_0[j]*betapdf(j, m-j+1, (x[i]-a)/(b-a))/(b-a);
        val_MIQO_0[i] = val_MIQO_0[i]+sol_MIQO_0[j]*betapdf(j, m-j+1, (x[i]-a)/(b-a))/(b-a);
        val_MIQO_1[i] = val_MIQO_1[i]+sol_MIQO_1[j]*betapdf(j, m-j+1, (x[i]-a)/(b-a))/(b-a);
        val_MIQO_2[i] = val_MIQO_2[i]+sol_MIQO_2[j]*betapdf(j, m-j+1, (x[i]-a)/(b-a))/(b-a);
        val_MIQO_3[i] = val_MIQO_3[i]+sol_MIQO_3[j]*betapdf(j, m-j+1, (x[i]-a)/(b-a))/(b-a);
    end
end"><pre>m <span class="pl-k">=</span> <span class="pl-c1">250</span>  
sol_MD_0, obj_MD_0 <span class="pl-k">=</span> <span class="pl-c1">BernsteinEstimate_MD</span>(Y1,m,a,b,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">10e10</span>,<span class="pl-c1">15000</span>,<span class="pl-s"><span class="pl-pds">"</span>Log<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Acc<span class="pl-pds">"</span></span>,<span class="pl-c1">0</span>);
sol_MIQO_0 <span class="pl-k">=</span> <span class="pl-c1">BernsteinEstimate_MIQO</span>(Y1,m,a,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">500</span>);
sol_MIQO_1 <span class="pl-k">=</span> <span class="pl-c1">BernsteinEstimate_MIQO</span>(Y1,m,a,b,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">500</span>);
sol_MIQO_2 <span class="pl-k">=</span> <span class="pl-c1">BernsteinEstimate_MIQO</span>(Y1,m,a,b,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">500</span>);
sol_MIQO_3 <span class="pl-k">=</span> <span class="pl-c1">BernsteinEstimate_MIQO</span>(Y1,m,a,b,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>,<span class="pl-c1">500</span>);

D <span class="pl-k">=</span> <span class="pl-c1">1000</span>

val_MD_0 <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">zeros</span>(D,<span class="pl-c1">1</span>))
val_MIQO_0 <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">zeros</span>(D,<span class="pl-c1">1</span>))
val_MIQO_1 <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">zeros</span>(D,<span class="pl-c1">1</span>))
val_MIQO_2 <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">zeros</span>(D,<span class="pl-c1">1</span>))
val_MIQO_3 <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">zeros</span>(D,<span class="pl-c1">1</span>))
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(a,stop <span class="pl-k">=</span> b, length <span class="pl-k">=</span> D)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>D
    <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m
        val_MD_0[i] <span class="pl-k">=</span> val_MD_0[i]<span class="pl-k">+</span>sol_MD_0[j]<span class="pl-k">*</span><span class="pl-c1">betapdf</span>(j, m<span class="pl-k">-</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>, (x[i]<span class="pl-k">-</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a))<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);
        val_MIQO_0[i] <span class="pl-k">=</span> val_MIQO_0[i]<span class="pl-k">+</span>sol_MIQO_0[j]<span class="pl-k">*</span><span class="pl-c1">betapdf</span>(j, m<span class="pl-k">-</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>, (x[i]<span class="pl-k">-</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a))<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);
        val_MIQO_1[i] <span class="pl-k">=</span> val_MIQO_1[i]<span class="pl-k">+</span>sol_MIQO_1[j]<span class="pl-k">*</span><span class="pl-c1">betapdf</span>(j, m<span class="pl-k">-</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>, (x[i]<span class="pl-k">-</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a))<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);
        val_MIQO_2[i] <span class="pl-k">=</span> val_MIQO_2[i]<span class="pl-k">+</span>sol_MIQO_2[j]<span class="pl-k">*</span><span class="pl-c1">betapdf</span>(j, m<span class="pl-k">-</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>, (x[i]<span class="pl-k">-</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a))<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);
        val_MIQO_3[i] <span class="pl-k">=</span> val_MIQO_3[i]<span class="pl-k">+</span>sol_MIQO_3[j]<span class="pl-k">*</span><span class="pl-c1">betapdf</span>(j, m<span class="pl-k">-</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>, (x[i]<span class="pl-k">-</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a))<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">We plot the estimated density functions and we see when no combinatorial constraints are imposed, the estimated density is close to the empirical denstiy; and when we constrain the number of modes, the estimated density become more regular (less significant modes are eliminated).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(x,val_MD_0,label=&quot;MD pdf (k=0)&quot;)
plot!(x,val_MIQO_0,label=&quot;QO pdf (k=0)&quot;)
plot!(x,val_MIQO_1,label=&quot;MIQO pdf (k=1)&quot;)
plot!(x,val_MIQO_2,label=&quot;MIQO pdf (k=2)&quot;)
plot!(x,val_MIQO_3,label=&quot;MIQO pdf (k=3)&quot;)"><pre><span class="pl-c1">plot</span>(x,val_MD_0,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MD pdf (k=0)<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x,val_MIQO_0,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>QO pdf (k=0)<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x,val_MIQO_1,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MIQO pdf (k=1)<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x,val_MIQO_2,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MIQO pdf (k=2)<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x,val_MIQO_3,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MIQO pdf (k=3)<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/visuddhi/UnivariateDensityEstimate.jl/blob/master/fig/tweet_pdf_estimated.png"><img src="https://github.com/visuddhi/UnivariateDensityEstimate.jl/raw/master/fig/tweet_pdf_estimated.png" alt="tweet_pdf" style="max-width: 100%;"></a></p>
</article></div>