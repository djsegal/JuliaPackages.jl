<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-arrayinitializersjl" class="anchor" aria-hidden="true" href="#arrayinitializersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ArrayInitializers.jl</h1>
<p dir="auto"><a href="https://mkitti.github.io/ArrayInitializers.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://mkitti.github.io/ArrayInitializers.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/mkitti/ArrayInitializers.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/mkitti/ArrayInitializers.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Create array initializers and allocate arrays without curly braces in Julia.
The initializer instances can be passed as the first argument of an <code>AbstractArray</code> constructor to initialize the array.
If the initializer is typed, the element type of the <code>AbstractArray</code> constructor is optional.</p>
<p dir="auto">Compatible with <code>OffsetArrays</code> and other subtypes of Julia arrays that implement <code>Base.fill!</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ArrayInitializers

julia&gt; fives = init(5)
ArrayInitializers.FillArrayInitializer{Int64}(5)

julia&gt; Array(fives, 3)
3-element Vector{Int64}:
 5
 5
 5

julia&gt; Vector(fives, 3)
3-element Vector{Any}:
 5
 5
 5

julia&gt; Array{Float64}(fives, 3)
3-element Vector{Float64}:
 5.0
 5.0
 5.0

julia&gt; Array(oneinit(Int), 5)
5-element Vector{Int64}:
 1
 1
 1
 1
 1

julia&gt; Array(zeroinit(Float64), 5)
5-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.0
 0.0

julia&gt; Array(undeftype(Rational), 3, 2)
3×2 Matrix{Rational}:
 #undef  #undef
 #undef  #undef
 #undef  #undef"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ArrayInitializers

julia<span class="pl-k">&gt;</span> fives <span class="pl-k">=</span> <span class="pl-c1">init</span>(<span class="pl-c1">5</span>)
ArrayInitializers<span class="pl-k">.</span><span class="pl-c1">FillArrayInitializer</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(fives, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Vector</span>(fives, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(fives, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(<span class="pl-c1">oneinit</span>(Int), <span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(<span class="pl-c1">zeroinit</span>(Float64), <span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(<span class="pl-c1">undeftype</span>(Rational), <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Rational}<span class="pl-k">:</span>
 <span class="pl-c"><span class="pl-c">#</span>undef  #undef</span>
 <span class="pl-c"><span class="pl-c">#</span>undef  #undef</span>
 <span class="pl-c"><span class="pl-c">#</span>undef  #undef</span></pre></div>
</article></div>