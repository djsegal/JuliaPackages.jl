<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lcmcore-low-level-julia-bindings-for-lcm" class="anchor" aria-hidden="true" href="#lcmcore-low-level-julia-bindings-for-lcm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LCMCore: Low-level Julia bindings for LCM</h1>
<p><a href="https://travis-ci.org/JuliaRobotics/LCMCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c3eb697997cc3a8996d9f4ec4c5438b987abb4b2/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f4c434d436f72652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/LCMCore.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaRobotics/LCMCore.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/49e86e21189454a6765108332d80ff2783c528e3/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f4c434d436f72652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaRobotics/LCMCore.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>LCMCore.jl provides a low-level Julia interface to the <a href="https://lcm-proj.github.io/" rel="nofollow">Lightweight Communications and Marshalling (LCM) library</a>. It uses LCM by calling directly into the C library, so it should have very low overhead.</p>
<p><strong>Note:</strong> This is not a full-fledged LCM implementation. Most notably, there is no <code>lcm-gen</code> tool to automatically generate Julia encoder/decoder functions for LCM message types. Fortunately, we provide a helpful Julia macro to <a href="#pure-julia-lcmtype-and-lcmtypesetup">automate most of the process</a>.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>The following package is required (Ubuntu 18.04):</p>
<div class="highlight highlight-source-shell"><pre>sudo apt-get install libglib2.0-dev</pre></div>
<p>From Julia, you can do:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LCMCore<span class="pl-pds">"</span></span>)</pre></div>
<p>Installing LCMCore.jl will automatically download and build a new copy of the LCM library for you.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>This interface has been designed to be similar to the LCM Python interface.</p>
<p>Create an LCM interface object:</p>
<div class="highlight highlight-source-julia"><pre>lcm <span class="pl-k">=</span> <span class="pl-c1">LCM</span>()</pre></div>
<p>Subscribe to a particular channel, using a callback:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">callback</span>(channel<span class="pl-k">::</span><span class="pl-c1">String</span>, message_data<span class="pl-k">::</span><span class="pl-c1">Vector{UInt8}</span>)
    <span class="pl-c1">@show</span> channel
    <span class="pl-c1">@show</span> message_data
<span class="pl-k">end</span>

<span class="pl-c1">subscribe</span>(lcm, <span class="pl-s"><span class="pl-pds">"</span>MY_CHANNEL<span class="pl-pds">"</span></span>, callback)</pre></div>
<p>Publish a raw byte array to a channel:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">publish</span>(lcm, <span class="pl-s"><span class="pl-pds">"</span>MY_CHANNEL<span class="pl-pds">"</span></span>, UInt8[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])</pre></div>
<p>Receive a single message and dispatch its callback:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">handle</span>(lcm)</pre></div>
<h2><a id="user-content-asynchronous-handling" class="anchor" aria-hidden="true" href="#asynchronous-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Asynchronous Handling</h2>
<p>LCMCore.jl supports Julia's async model internally, so setting up an asynchronous handler task is as easy as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@async</span> <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">handle</span>(lcm)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-closing-the-lcm-object" class="anchor" aria-hidden="true" href="#closing-the-lcm-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Closing the LCM Object</h2>
<p>Spawning lots of LCM objects can result in your system running out of file descriptors. This rarely occurs in practice, but if it does happen, you can close an LCM object with:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">close</span>(lcm)</pre></div>
<p>It's safe to call <code>close()</code> multiple times on the same LCM object.</p>
<p>To deterministically close an LCM automatically, you can use the do-block syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">LCM</span>() <span class="pl-k">do</span> lcm
    <span class="pl-c1">publish</span>(lcm, channel, message)
<span class="pl-k">end</span></pre></div>
<p>which will automatically close the LCM object at the end of the block.</p>
<h2><a id="user-content-message-types" class="anchor" aria-hidden="true" href="#message-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Message Types</h2>
<p>Calling <code>subscribe()</code> with three arguments, like this: <code>subscribe(lcm, channel, callback)</code> will result in your callback being called with the raw byte array received by LCM. You are then responsible for decoding that byte array as a particular message type.</p>
<p>Since that's probably inconvenient, there's another way to call subscribe:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> MyMessageType
    <span class="pl-k">&lt;</span>your code here<span class="pl-k">&gt;</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">callback</span>(channel<span class="pl-k">::</span><span class="pl-c1">String</span>, msg<span class="pl-k">::</span><span class="pl-c1">MyMessageType</span>)
    <span class="pl-c1">@show</span> channel
    <span class="pl-c1">@show</span> msg
<span class="pl-k">end</span>

<span class="pl-c1">subscribe</span>(lcm, <span class="pl-s"><span class="pl-pds">"</span>MY_CHANNEL<span class="pl-pds">"</span></span>, callback, MyMessageType)</pre></div>
<p>When <code>subscribe()</code> is called with the message type as the final argument, your callback will receive the decoded message directly, instead of the raw bytes.</p>
<p>To make this work, you have to define two methods, <code>encode()</code> and <code>decode()</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> LCMCore<span class="pl-k">:</span> encode, decode

<span class="pl-en">encode</span>(msg<span class="pl-k">::</span><span class="pl-c1">MyMessageType</span>) <span class="pl-k">=</span> <span class="pl-k">&lt;</span>serialize your message as a Vector{UInt8}<span class="pl-k">&gt;</span>

<span class="pl-en">decode</span>(data<span class="pl-k">::</span><span class="pl-c1">Vector{UInt8}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{MyMessageType}</span>) <span class="pl-k">=</span> <span class="pl-k">&lt;</span><span class="pl-k">return</span> an instance of MyMessageType from the given data<span class="pl-k">&gt;</span></pre></div>
<h2><a id="user-content-complex-message-types" class="anchor" aria-hidden="true" href="#complex-message-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Complex Message Types</h2>
<p>Manually defining <code>encode()</code> and <code>decode()</code> functions is annoying, so we provide a convenient way to automate the process:</p>
<p>LCMCore.jl provides the <code>LCMType</code> abstract type and the <code>@lcmtypesetup</code> macro to make it easy to describe LCM message types in pure Julia. To use this approach, simply create a <code>mutable struct</code> which is a subtype of <code>LCMType</code>, and make sure that struct's field names and types match the LCM type definition. For a real-world example, check out CaesarLCMTypes.jl:</p>
<ul>
<li>Type definition: <a href="https://github.com/JuliaRobotics/CaesarLCMTypes.jl/blob/bb26d44b1b04ba777049ec7f62f070e8ff2df5c5/src/example_t.jl">example_t.jl</a></li>
<li>Sender: <a href="https://github.com/JuliaRobotics/CaesarLCMTypes.jl/blob/bb26d44b1b04ba777049ec7f62f070e8ff2df5c5/examples/example_sender.jl">example_sender.jl</a></li>
<li>Listener: <a href="https://github.com/JuliaRobotics/CaesarLCMTypes.jl/blob/bb26d44b1b04ba777049ec7f62f070e8ff2df5c5/examples/example_listener.jl">example_listener.jl</a></li>
</ul>
<p>or for more detailed information, keep reading. For example, given this LCM type:</p>
<div class="highlight highlight-source-c"><pre><span class="pl-k">struct</span> <span class="pl-c1">example_t</span> {
  <span class="pl-c1">int64_t</span> timestamp;
  <span class="pl-k">double</span> position[<span class="pl-c1">3</span>];
  string name;
}</pre></div>
<p>we would manually create the following Julia struct definition:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LCMCore, StaticArrays

<span class="pl-k">mutable struct</span> example_t <span class="pl-k">&lt;:</span> <span class="pl-c1">LCMType</span>
  timestamp<span class="pl-k">::</span><span class="pl-c1">Int64</span>
  position<span class="pl-k">::</span><span class="pl-c1">SVector{3, Float64}</span>
  name<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-c1">@lcmtypesetup</span>(example_t)</pre></div>
<p>The call to <code>@lcmtypesetup(example_t)</code> analyzes the field names and types of our Julia struct to generate efficient <code>encode()</code> and <code>decode()</code> methods. Note the use of SVectors from StaticArrays.jl to represent the fixed-length <code>position</code> array in the LCM type.</p>
<p>LCM types frequently contain variable-length vectors of primitives or other LCM types. For example, if we have the following LCM type definition:</p>
<div class="highlight highlight-source-c"><pre><span class="pl-k">struct</span> <span class="pl-c1">example_vector_t</span> {
  <span class="pl-c1">int32_t</span> num_floats;
  <span class="pl-k">float</span> data[num_floats];

  <span class="pl-c1">int32_t</span> num_examples;
  <span class="pl-c1">example_t</span> examples[num_examples];
}</pre></div>
<p>then we simply need to pass two additional arguments to <code>@lcmtypesetup</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> example_vector_t <span class="pl-k">&lt;:</span> <span class="pl-c1">LCMType</span>
  num_floats<span class="pl-k">::</span><span class="pl-c1">Int32</span>
  data<span class="pl-k">::</span><span class="pl-c1">Vector{Float32}</span>

  num_examples<span class="pl-k">::</span><span class="pl-c1">Int32</span>
  examples<span class="pl-k">::</span><span class="pl-c1">Vector{example_t}</span>  <span class="pl-c"><span class="pl-c">#</span> where example_t is the Julia struct we defined earlier</span>
<span class="pl-k">end</span>

<span class="pl-c1">@lcmtypesetup</span>(example_vector_t,
  data <span class="pl-k">=&gt;</span> (num_floats,),
  examples <span class="pl-k">=&gt;</span> (num_examples,)
)</pre></div>
<p>The format of each additional argument to <code>@lcmtypesetup</code> is <code>field_name =&gt; tuple_of_size_fields</code>.</p>
<p>Multi-dimensional arrays are also supported, including arrays with some fixed dimensions and some variable dimensions:</p>
<div class="highlight highlight-source-c"><pre><span class="pl-k">struct</span> <span class="pl-c1">matrix_example_t</span> {
  <span class="pl-c1">int32_t</span> rows;
  <span class="pl-c1">int32_t</span> cols;
  <span class="pl-k">float</span> data[rows][cols];

  <span class="pl-c1">int32_t</span> num_points;
  <span class="pl-k">float</span> coordinates[<span class="pl-c1">3</span>][num_points];
}</pre></div>
<p>in Julia, we would do:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> matrix_example_t <span class="pl-k">&lt;:</span> <span class="pl-c1">LCMType</span>
  rows<span class="pl-k">::</span><span class="pl-c1">Int32</span>
  cols<span class="pl-k">::</span><span class="pl-c1">Int32</span>
  data<span class="pl-k">::</span><span class="pl-c1">Matrix{Float32}</span>

  num_points<span class="pl-k">::</span><span class="pl-c1">Int32</span>
  coordinates<span class="pl-k">::</span><span class="pl-c1">Matrix{Float32}</span>
<span class="pl-k">end</span>

<span class="pl-c1">@lcmtypesetup</span>(matrix_example_t,
  data <span class="pl-k">=&gt;</span> (rows, cols),
  coordinates <span class="pl-k">=&gt;</span> (<span class="pl-c1">3</span>, num_points)
)</pre></div>
<h2><a id="user-content-reading-lcm-log-files-directly" class="anchor" aria-hidden="true" href="#reading-lcm-log-files-directly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading LCM log files directly</h2>
<p>LCM log files can also be read directly, without the UDP multicasting events.
Events are read from file one at a time and use a similar API as the UDP traffic interface.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">callback</span>(channel, msgdata)
  msg <span class="pl-k">=</span> <span class="pl-c1">decode</span>(MsgType, msgdata) <span class="pl-c"><span class="pl-c">#</span> slower, fresh memory allocation -- consider typedcallback(...) with decode! instead</span>
  <span class="pl-c1">@show</span> msg
  <span class="pl-c"><span class="pl-c">#</span> ...</span>
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">typed_callback</span>(channel, msg<span class="pl-k">::</span><span class="pl-c1">MsgType</span>)
  <span class="pl-c1">@show</span> msg
  <span class="pl-c"><span class="pl-c">#</span> ...</span>
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

lcm <span class="pl-k">=</span> <span class="pl-c1">LCMLog</span>(<span class="pl-s"><span class="pl-pds">"</span>log.lcm<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>subscribe(lcm, "CHANNEL", callback )</span>
<span class="pl-c1">subscribe</span>(lcm, <span class="pl-s"><span class="pl-pds">"</span>CHANNEL<span class="pl-pds">"</span></span>, typed_callback, MsgType )

<span class="pl-k">while</span> <span class="pl-c1">true</span>
  <span class="pl-c1">handle</span>(lcm)
<span class="pl-k">end</span></pre></div>
<p>See the <code>test</code> folder for a more detailed example.</p>
</article></div>