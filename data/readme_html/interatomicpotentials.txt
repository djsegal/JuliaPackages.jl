<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-interatomicpotentialsjl" class="anchor" aria-hidden="true" href="#interatomicpotentialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>InteratomicPotentials.jl</h1>
<p dir="auto"><a href="https://mit-license.org" rel="nofollow"><img src="https://camo.githubusercontent.com/ca265f1f44f7c2dde766f5294e23a644ee801b7f67266e1a421355a460cd524d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265253232" alt="License" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square%22" style="max-width: 100%;"></a>
<a href="https://github.com/cesmix-mit/InteratomicPotentials.jl/actions"><img src="https://github.com/cesmix-mit/InteratomicPotentials.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cesmix-mit/InteratomicPotentials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b9aa33e1e208ff043923a93de040c142073cc8c2c17338cf14321a1043fe82b/68747470733a2f2f636f6465636f762e696f2f67682f6365736d69782d6d69742f496e74657261746f6d6963506f74656e7469616c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4946367a766c35306a39" alt="codecov" data-canonical-src="https://codecov.io/gh/cesmix-mit/InteratomicPotentials.jl/branch/main/graph/badge.svg?token=IF6zvl50j9" style="max-width: 100%;"></a>
<a href="https://cesmix-mit.github.io/InteratomicPotentials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cesmix-mit.github.io/InteratomicPotentials.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This repository implements some basic language and syntax for manipulating interatomic potentials in Julia. The primary purpose of this package is to design a flexible package for use with data-driven and parameter-fitted interatomic potentials. This package is also being designed in order to allow users to define custom potentials and forces for use in molecular dynamics.</p>
<p dir="auto">This package is part of the CESMIX molecular modeling suite. This package is also intended to be used with Atomistic.jl (for molecular dynamics, with Molly.jl), InteratomicBasisPotentials.jl (for machine learning potentials like SNAP and ACE), and  PotentialLearning.jl (for fitting potentials from data).</p>
<p dir="auto">This package is a work in progress.</p>
<h2 dir="auto"><a id="user-content-working-example" class="anchor" aria-hidden="true" href="#working-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Working Example</h2>
<p dir="auto">In order to compute the interatomic energy of a system, or the forces between atoms in a system, the user has to</p>
<ul dir="auto">
<li>
<ol dir="auto">
<li>define an <code>AbstractSystem</code> using <code> AtomsBase</code> and</li>
</ol>
</li>
<li>
<ol start="2" dir="auto">
<li>construct a potential (subtype of an ArbitraryPotential).</li>
</ol>
</li>
</ul>
<p dir="auto">Once these two structures have ben instantiated, the quantity of interest can be computed using the signature <code>func(system, potential)</code>.</p>
<p dir="auto">First, let's create a configuration:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using InteratomicPotentials, StaticArrays
using AtomsBase, Unitful, UnitfulAtomic
# Define an atomic system
elem = :Ar
atom1     = Atom(elem, ( @SVector [1.0, 0.0, 0.0] ) * 1u&quot;Å&quot;)
atom2    = Atom(elem, ( @SVector [1.0, 0.25, 0.0] ) * 1u&quot;Å&quot;)
atoms = [atom1,atom2]
box = [[1., 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]] * 1u&quot;Å&quot;
bcs = [DirichletZero(), Periodic(), Periodic()]
system   = FlexibleSystem(atoms, box , bcs)"><pre><span class="pl-k">using</span> InteratomicPotentials, StaticArrays
<span class="pl-k">using</span> AtomsBase, Unitful, UnitfulAtomic
<span class="pl-c"><span class="pl-c">#</span> Define an atomic system</span>
elem <span class="pl-k">=</span> <span class="pl-c1">:Ar</span>
atom1     <span class="pl-k">=</span> <span class="pl-c1">Atom</span>(elem, ( <span class="pl-c1">@SVector</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>] ) <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>)
atom2    <span class="pl-k">=</span> <span class="pl-c1">Atom</span>(elem, ( <span class="pl-c1">@SVector</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">0.0</span>] ) <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>)
atoms <span class="pl-k">=</span> [atom1,atom2]
box <span class="pl-k">=</span> [[<span class="pl-c1">1.</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>]] <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
bcs <span class="pl-k">=</span> [<span class="pl-c1">DirichletZero</span>(), <span class="pl-c1">Periodic</span>(), <span class="pl-c1">Periodic</span>()]
system   <span class="pl-k">=</span> <span class="pl-c1">FlexibleSystem</span>(atoms, box , bcs)</pre></div>
<p dir="auto">Now we can define the parameters of our interatomic potential:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ϵ = 1.0 * 1u&quot;eV&quot;
σ = 0.25 * 1u&quot;Å&quot;
rcutoff  = 2.25 * 1u&quot;Å&quot;
lj       = LennardJones(ϵ, σ, rcutoff, [elem])           # &lt;: EmpiricalPotential &lt;: AbstractPotential"><pre>ϵ <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>
σ <span class="pl-k">=</span> <span class="pl-c1">0.25</span> <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
rcutoff  <span class="pl-k">=</span> <span class="pl-c1">2.25</span> <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
lj       <span class="pl-k">=</span> <span class="pl-c1">LennardJones</span>(ϵ, σ, rcutoff, [elem])           <span class="pl-c"><span class="pl-c">#</span> &lt;: EmpiricalPotential &lt;: AbstractPotential</span></pre></div>
<p dir="auto">Now we can compute a variety of quantities of the system:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pe       = potential_energy(system, lj)               # &lt;: Float64 (Hartree)
f        = force(system, lj)                          # &lt;: Vector{SVector{3, Float64}} (Hartree/Bohr)
v        = virial(system, lj)                         # &lt;: Float64 (Hartree)
v_tensor = virial_stress(system, lj)                  # &lt;: SVector{6, Float64} (Hartree)"><pre>pe       <span class="pl-k">=</span> <span class="pl-c1">potential_energy</span>(system, lj)               <span class="pl-c"><span class="pl-c">#</span> &lt;: Float64 (Hartree)</span>
f        <span class="pl-k">=</span> <span class="pl-c1">force</span>(system, lj)                          <span class="pl-c"><span class="pl-c">#</span> &lt;: Vector{SVector{3, Float64}} (Hartree/Bohr)</span>
v        <span class="pl-k">=</span> <span class="pl-c1">virial</span>(system, lj)                         <span class="pl-c"><span class="pl-c">#</span> &lt;: Float64 (Hartree)</span>
v_tensor <span class="pl-k">=</span> <span class="pl-c1">virial_stress</span>(system, lj)                  <span class="pl-c"><span class="pl-c">#</span> &lt;: SVector{6, Float64} (Hartree)</span></pre></div>
<p dir="auto">When computing the force, the energy is already available. A convenience implementation that returns both quantities is given by:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pe, f    = energy_and_force(system, lj)"><pre>pe, f    <span class="pl-k">=</span> <span class="pl-c1">energy_and_force</span>(system, lj)</pre></div>
<p dir="auto">See "/test/" for further examples.</p>
<h2 dir="auto"><a id="user-content-utility-functions" class="anchor" aria-hidden="true" href="#utility-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utility functions</h2>
<p dir="auto">There are a growing number of features designed to allow handle of potential parameter easier. For example, one can retrieve the parameters of a potential via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="get_rcutoff(lj) # Gets radial cutoff (here: 2.25 * 1u&quot;Angstrom&quot;)
get_species(lj) # Returns the species the potential is defined for (here: [:Ar])
get_parameters(lj) # Returns the parameters (here: [ϵ, σ])
set_parameters(lj, (ϵ = 2.0 * 1u&quot;eV&quot;, σ = 1.0 * 1u&quot;Å&quot;)) # Set parameters (returns a new potential)"><pre><span class="pl-c1">get_rcutoff</span>(lj) <span class="pl-c"><span class="pl-c">#</span> Gets radial cutoff (here: 2.25 * 1u"Angstrom")</span>
<span class="pl-c1">get_species</span>(lj) <span class="pl-c"><span class="pl-c">#</span> Returns the species the potential is defined for (here: [:Ar])</span>
<span class="pl-c1">get_parameters</span>(lj) <span class="pl-c"><span class="pl-c">#</span> Returns the parameters (here: [ϵ, σ])</span>
<span class="pl-c1">set_parameters</span>(lj, (ϵ <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">*</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> Set parameters (returns a new potential)</span></pre></div>
<h2 dir="auto"><a id="user-content-potential-types" class="anchor" aria-hidden="true" href="#potential-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Potential Types</h2>
<p dir="auto">All interatomic potentials listed in this project are subtypes of <code>ArbitraryPotential</code>. At this point, as of v2.0, there are two branches of potentials: <code>EmpiricalPotential</code> and <code>MixedPotentials</code>. A sister package, <code>julia InteratomicBasisPotentials.jl</code> defines a potential called <code>BasisPotential</code>, see that package for additional details.</p>
<p dir="auto"><code>EmpiricalPotential</code>s include two-body potentials like <code>BornMayer</code>, <code>LennardJones</code>. <code>MixedPotential</code> is a convenience type for allowing the linear combination of potentials. An example would be:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lj1 = LennardJones(1.0 * u&quot;eV&quot;, 1.0 * u&quot;Angstrom&quot;, 2.5 * u&quot;Angstrom&quot;, [:Ar]) # Ar-Ar Interactions
lj2 = LennardJones(1.0 * u&quot;eV&quot;, 1.5 * u&quot;Angstrom&quot;, 3.0 * u&quot;Angstrom&quot;, [:Xe]) # Xe-Xe Interactions
lj3 = LennardJones(1.5 * u&quot;eV&quot;, 1.3 * u&quot;Angstrom&quot;, 2.5 * u&quot;Angstrom&quot;, [:Ar, :Xe]) # Ar-Xe Interactions
lj = lj1 + lj2 + lj3# Potential defined for all interactions in an Ar-Xe system."><pre>lj1 <span class="pl-k">=</span> <span class="pl-c1">LennardJones</span>(<span class="pl-c1">1.0</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>, <span class="pl-c1">1.0</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Angstrom<span class="pl-pds">"</span></span>, <span class="pl-c1">2.5</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Angstrom<span class="pl-pds">"</span></span>, [<span class="pl-c1">:Ar</span>]) <span class="pl-c"><span class="pl-c">#</span> Ar-Ar Interactions</span>
lj2 <span class="pl-k">=</span> <span class="pl-c1">LennardJones</span>(<span class="pl-c1">1.0</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>, <span class="pl-c1">1.5</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Angstrom<span class="pl-pds">"</span></span>, <span class="pl-c1">3.0</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Angstrom<span class="pl-pds">"</span></span>, [<span class="pl-c1">:Xe</span>]) <span class="pl-c"><span class="pl-c">#</span> Xe-Xe Interactions</span>
lj3 <span class="pl-k">=</span> <span class="pl-c1">LennardJones</span>(<span class="pl-c1">1.5</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>, <span class="pl-c1">1.3</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Angstrom<span class="pl-pds">"</span></span>, <span class="pl-c1">2.5</span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Angstrom<span class="pl-pds">"</span></span>, [<span class="pl-c1">:Ar</span>, <span class="pl-c1">:Xe</span>]) <span class="pl-c"><span class="pl-c">#</span> Ar-Xe Interactions</span>
lj <span class="pl-k">=</span> lj1 <span class="pl-k">+</span> lj2 <span class="pl-k">+</span> lj3<span class="pl-c"><span class="pl-c">#</span> Potential defined for all interactions in an Ar-Xe system.</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="EmpiricalPotential &lt;: AbstractPotential
BornMayer &lt;: EmpiricalPotential
LennardJones &lt;: EmpiricalPotential
Coulomb     &lt;: EmpiricalPotential
ZBL         &lt;: EmpiricalPotential

LinearCombinationPotential &lt;: MixedPotential

# See InteratomicBasisPotentials.jl
BasisPotential &lt;: AbstractPotential
SNAP           &lt;: BasisPotential
ACE            &lt;: BasisPotential"><pre>EmpiricalPotential <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractPotential</span>
BornMayer <span class="pl-k">&lt;:</span> <span class="pl-c1">EmpiricalPotential</span>
LennardJones <span class="pl-k">&lt;:</span> <span class="pl-c1">EmpiricalPotential</span>
Coulomb     <span class="pl-k">&lt;:</span> <span class="pl-c1">EmpiricalPotential</span>
ZBL         <span class="pl-k">&lt;:</span> <span class="pl-c1">EmpiricalPotential</span>

LinearCombinationPotential <span class="pl-k">&lt;:</span> <span class="pl-c1">MixedPotential</span>

<span class="pl-c"><span class="pl-c">#</span> See InteratomicBasisPotentials.jl</span>
BasisPotential <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractPotential</span>
SNAP           <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisPotential</span>
ACE            <span class="pl-k">&lt;:</span> <span class="pl-c1">BasisPotential</span></pre></div>
</article></div>