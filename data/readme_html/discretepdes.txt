<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-discretepdesjl" class="anchor" aria-hidden="true" href="#discretepdesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiscretePDEs.jl</h1>
<p><a href="https://travis-ci.com/rigetti/DiscretePDEs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/741dc5caf262a01de0f37db9ef7f086dcb9a8f90/68747470733a2f2f7472617669732d63692e636f6d2f726967657474692f4469736372657465504445732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/rigetti/DiscretePDEs.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>DiscretePDEs.jl is a package for discretizing partial differential equations using <a href="https://github.com/rigetti/DiscreteExteriorCalculus.jl">DiscreteExteriorCalculus.jl</a>. 3D visualization and meshing is performed with <a href="http://gmsh.info/" rel="nofollow">Gmsh</a>. Geometrical models
can be created using the Gmsh scripting functionality or by importing a GDS file. <a href="https://layouteditor.com/" rel="nofollow">LayoutEditor</a> is a convenient program for creating and manipulating GDS files.</p>
<p>In addition to functionality for discretizing arbitrary PDEs, DiscretePDEs.jl also has
functionality specifically for modeling electromagnetism:</p>
<ul>
<li>Electrostatic fields and the capacitance matrix.</li>
<li>Magnetostatic fields and the inductance matrix, including the London equation.</li>
<li>Electrodynamic <a href="https://arxiv.org/abs/1810.11510" rel="nofollow">Positive Second Order models</a>
including Ohm's Law and the London equation, using <a href="https://github.com/rigetti/AdmittanceModels.jl">AdmittanceModels.jl</a>
<ul>
<li>Normal modes.</li>
<li>Transfer functions.</li>
</ul>
</li>
</ul>
<p>The tests in the <code>test</code> folder also serve as in-depth examples for each of these problem
types.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Clone the repository from GitHub and install Julia 1.1. Then use the Julia package manager to <code>activate</code> and <code>build</code>. Since the build can take a while, you may prefer <code>using Pkg; Pkg.build(verbose=true)</code>.</p>
<p><strong>Notes on build</strong>: This package has two non-Julia dependencies. One is <a href="http://gmsh.info/" rel="nofollow">Gmsh</a>, a 3D visualization and meshing program, and the other is <a href="https://github.com/heitzmann/gdspy">gdspy</a>, a Python package for manipulating GDS files. The <code>deps/build.jl</code> file configures the <code>gmsh</code> and <code>gdspy</code> dependencies and installs them if they are not present.</p>
<p>For <code>gmsh</code></p>
<ul>
<li>If <code>ENV["gmshjl"]</code> is set or <code>gmshjl=...</code> is in a <code>deps/.env</code> file, the <code>gmsh.jl</code> file at the indicated path is used. Precedent is given to the environment variable over the <code>deps/.env</code> entry.</li>
<li>Else if a <code>gmsh.jl</code> file can be found somewhere within <code>/usr/bin</code>, that <code>gmsh.jl</code> file is used.</li>
<li>Else <code>gmsh.jl</code> is installed using <code>deps/install_gmsh.sh</code>. This will work on Mac OSX or Linux Ubuntu:18.10.</li>
</ul>
<p>For <code>gdspy</code></p>
<ul>
<li>If <code>ENV["PYTHON"]</code> is set or <code>PYTHON=...</code> is in the <code>deps/.env</code> file, the <code>python</code> binary at the indicated path is used. Precedent is given to the environment variable over the <code>.env</code> entry.</li>
<li>Else
<ul>
<li>If <code>which conda</code> fails, and <code>miniconda3</code> is not already present in the home directory, <code>miniconda3</code> is installed in the home directory. The <code>.bashrc</code> and <code>.bash_profile</code> etc. are not modified.</li>
<li>If a <code>DiscretePDEs</code> <code>conda</code> environment does not already exist, one is made using the <code>deps/conda_env.yml</code> file. The <code>python</code> from this <code>conda</code> environment is used to build <code>PyCall.jl</code>.</li>
</ul>
</li>
</ul>
<p>If this all succeeds, the paths to <code>gmsh.jl</code> and python are saved in <code>deps/.env</code> so later builds will use the same <code>gmsh</code> and <code>python</code>.</p>
<h2><a id="user-content-example-usage-electromagnetic-modes-of-a-box" class="anchor" aria-hidden="true" href="#example-usage-electromagnetic-modes-of-a-box"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage: electromagnetic modes of a box</h2>
<p>See <code>test/test_modes_box.jl</code> for a more complete version of this example.</p>
<p>Import packages.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DiscreteExteriorCalculus, DiscretePDEs
<span class="pl-k">using</span> AdmittanceModels<span class="pl-k">:</span> lossless_modes_dense, apply_transform
<span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> norm</pre></div>
<p>Create a file <code>box.geo</code> that describes a 10×12×14 box.</p>
<div class="highlight highlight-source-julia"><pre>a, b, c <span class="pl-k">=</span> <span class="pl-c1">10</span>, <span class="pl-c1">12</span>, <span class="pl-c1">14</span>
file_name <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>box.geo<span class="pl-pds">"</span></span>)
<span class="pl-c1">geo_write!</span>(file_name, characteristic_length_factor<span class="pl-k">=</span><span class="pl-c1">1</span>,
    footer<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    Box(1) = {0, 0, 0, <span class="pl-v">$a</span>, <span class="pl-v">$b</span>, <span class="pl-v">$c</span>};</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>)</pre></div>
<p>Start gmsh, open the file, mesh the box, and create a <code>TriangulatedComplex</code> for the primal
mesh.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">initialize!</span>()
<span class="pl-c1">gmsh_open!</span>(file_name)
N, K <span class="pl-k">=</span> <span class="pl-c1">3</span>, <span class="pl-c1">4</span>
<span class="pl-c1">mesh!</span>(K)
node_tags, points, tcomp <span class="pl-k">=</span> <span class="pl-c1">get_triangulated_complex</span>(N, K)</pre></div>
<p>Orient the primal mesh, compute the dual mesh, and put them both into a <code>Mesh</code> object.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">orient!</span>(tcomp<span class="pl-k">.</span>complex)
m <span class="pl-k">=</span> <span class="pl-c1">Metric</span>(N)
mesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(tcomp, <span class="pl-c1">circumcenter</span>(m))</pre></div>
<p>Create a <a href="https://arxiv.org/abs/1810.11510" rel="nofollow">Positive Second Order model</a> and apply the
Coulomb gauge and boundary condition constraints.</p>
<div class="highlight highlight-source-julia"><pre>comp <span class="pl-k">=</span> tcomp<span class="pl-k">.</span>complex
μ⁻_form <span class="pl-k">=</span> <span class="pl-c1">get_material</span>(comp, <span class="pl-c1">1</span><span class="pl-k">/</span>DiscretePDEs<span class="pl-k">.</span>μ₀, <span class="pl-c1">3</span>)
Λ⁻_form <span class="pl-k">=</span> <span class="pl-c1">get_material</span>(comp, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>)
σ_form <span class="pl-k">=</span> <span class="pl-c1">get_material</span>(comp, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>)
ϵ_form <span class="pl-k">=</span> <span class="pl-c1">get_material</span>(comp, DiscretePDEs<span class="pl-k">.</span>ϵ₀, <span class="pl-c1">2</span>)
pso, null_basis <span class="pl-k">=</span> <span class="pl-c1">electrodynamics_pso</span>(m, mesh, Vector{Cell{N}}[], <span class="pl-c1">boundary</span>(comp),
    μ⁻_form, Λ⁻_form, σ_form, ϵ_form)
constrained_pso <span class="pl-k">=</span> <span class="pl-c1">apply_transform</span>(pso, null_basis)</pre></div>
<p>Find the normal modes of the box.</p>
<div class="highlight highlight-source-julia"><pre>λs, vs <span class="pl-k">=</span> <span class="pl-c1">lossless_modes_dense</span>(constrained_pso)
freqs <span class="pl-k">=</span> <span class="pl-c1">imag</span>(λs)<span class="pl-k">/</span>(<span class="pl-c1">2</span>π)</pre></div>
<p>Plot the mesh and lowest normal mode using gmsh.</p>
<div class="highlight highlight-source-julia"><pre>vec_A <span class="pl-k">=</span> <span class="pl-c1">sharp</span>(m, comp, null_basis <span class="pl-k">*</span> vs[:,<span class="pl-c1">1</span>])
vec_A <span class="pl-k">/=</span> <span class="pl-c1">maximum</span>(<span class="pl-c1">norm</span>.(vec_A))
comp_points <span class="pl-k">=</span> [c<span class="pl-k">.</span>points[<span class="pl-c1">1</span>] <span class="pl-k">for</span> c <span class="pl-k">in</span> comp<span class="pl-k">.</span>cells[<span class="pl-c1">1</span>]]
ordering <span class="pl-k">=</span> [<span class="pl-c1">findfirst</span>(<span class="pl-c1">isequal</span>(p), comp_points) <span class="pl-k">for</span> p <span class="pl-k">in</span> points]
<span class="pl-c1">add_field!</span>(<span class="pl-s"><span class="pl-pds">"</span>Vector potential<span class="pl-pds">"</span></span>, node_tags, vec_A[ordering])
<span class="pl-c1">gui!</span>()</pre></div>
<p>Mesh: <a target="_blank" rel="noopener noreferrer" href="docs/BoxMesh.png"><img src="docs/BoxMesh.png" alt="" style="max-width:100%;"></a>
Lowest normal mode vector potential: <a target="_blank" rel="noopener noreferrer" href="docs/BoxMode1.png"><img src="docs/BoxMode1.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-example-usage-modes-of-a-λ4-coplanar-waveguide-resonator" class="anchor" aria-hidden="true" href="#example-usage-modes-of-a-λ4-coplanar-waveguide-resonator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage: modes of a λ/4 coplanar waveguide resonator</h2>
<p>See <code>test/test_cpw_resonator.jl</code>. A non-uniform mesh with 7282 tetrahedra is used.</p>
<p>Mesh: <a target="_blank" rel="noopener noreferrer" href="docs/CPWMesh.png"><img src="docs/CPWMesh.png" alt="" style="max-width:100%;"></a>
Lowest normal mode vector potential: <a target="_blank" rel="noopener noreferrer" href="docs/CPWMode1.png"><img src="docs/CPWMode1.png" alt="" style="max-width:100%;"></a>
Second lowest normal mode vector potential: <a target="_blank" rel="noopener noreferrer" href="docs/CPWMode2.png"><img src="docs/CPWMode2.png" alt="" style="max-width:100%;"></a></p>
</article></div>