<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplegraphconverter" class="anchor" aria-hidden="true" href="#simplegraphconverter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleGraphConverter</h1>
<p dir="auto">This package convertes graphs between the
<a href="https://github.com/JuliaGraphs/Graphs.jl"><code>Graphs</code></a> and
<a href="https://github.com/scheinerman/SimpleGraphs.jl.git"><code>SimpleGraphs</code></a> modules.</p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The Julia modules <code>Graphs</code> [formerly <code>LightGraphs</code>] and <code>SimpleGraphs</code> can be used for graph theory computations.
Simple graphs (graphs without directions, loops, or multiple edges) are defined in both modules.</p>
<ul dir="auto">
<li>In <code>Graphs</code> the datatype is <code>SimpleGraph</code>.</li>
<li>In <code>SimpleGraphs</code> the data type is <code>UndirectedGraph</code> (which may be abbreviated <code>UG</code>).</li>
</ul>
<p dir="auto">This <code>SimpleGraphConverter</code> module helps with conversion from one type to the other.</p>
<ul dir="auto">
<li>If <code>g</code> is a <code>SimpleGraph</code>, then <code>UndirectedGraph(g)</code> [or <code>UG(g)</code>] converts the graph to type <code>UndirectedGraph</code>.</li>
<li>If <code>G</code> is an <code>UndirectedGraph</code>, then <code>SimpleGraph(G)</code> converts the graph to a <code>SimpleGraph</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h4 dir="auto"><a id="user-content-converting-a-simplegraph-to-an-undirectedgraph" class="anchor" aria-hidden="true" href="#converting-a-simplegraph-to-an-undirectedgraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Converting a <code>SimpleGraph</code> to an <code>UndirectedGraph</code></h4>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Graphs, SimpleGraphs, SimpleGraphConverter

julia&gt; g = cycle_graph(6)
{6, 6} undirected simple Int64 graph

julia&gt; G = UG(g)
UndirectedGraph{Int64} (n=6, m=6)

julia&gt; G == Cycle(6)
true"><pre class="notranslate"><code>julia&gt; using Graphs, SimpleGraphs, SimpleGraphConverter

julia&gt; g = cycle_graph(6)
{6, 6} undirected simple Int64 graph

julia&gt; G = UG(g)
UndirectedGraph{Int64} (n=6, m=6)

julia&gt; G == Cycle(6)
true
</code></pre></div>
<h4 dir="auto"><a id="user-content-converting-an-undirectedgraph-to-a-simplegraph" class="anchor" aria-hidden="true" href="#converting-an-undirectedgraph-to-a-simplegraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Converting an <code>UndirectedGraph</code> to a <code>SimpleGraph</code></h4>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G = Path(9)
Path (n=9, m=8)

julia&gt; g = SimpleGraph(G)
{9, 8} undirected simple Int64 graph

julia&gt; g == path_graph(9)
true"><pre class="notranslate"><code>julia&gt; G = Path(9)
Path (n=9, m=8)

julia&gt; g = SimpleGraph(G)
{9, 8} undirected simple Int64 graph

julia&gt; g == path_graph(9)
true
</code></pre></div>
<h2 dir="auto"><a id="user-content-loss-of-vertex-names" class="anchor" aria-hidden="true" href="#loss-of-vertex-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loss of vertex names</h2>
<p dir="auto">The vertices of a <code>SimpleGraph</code> (from the <code>Graphs</code> module) is always a
set of integers of the form <code>{1,2,...,n}</code>.
The vertex set of an <code>UndirectedGraph</code> can contain
arbitrary types.
When converting from a <code>SimpleGraph</code> to an <code>UndirectedGraph</code>, the names
of the vertices are converted to consecutive integers.</p>
<p dir="auto">In this example, the <code>Petersen()</code> function returns the Petersen graph as an <code>UndirectedGraph</code>. The ten vertices are the two-element subsets of <code>{1,2,3,4,5}</code>.
When we convert to a <code>SimpleGraph</code>, the resulting graph has ten vertices that are the integers from <code>1</code> to <code>10</code>. When we convert that <code>SimpleGraph</code> back to an <code>UndirectedGraph</code>, the
vertices are different (integers vs. two-element sets) from the original.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using ShowSet

julia&gt; G = Petersen()
Petersen (n=10, m=15)

julia&gt; g = SimpleGraph(G)
{10, 15} undirected simple Int64 graph

julia&gt; H = UG(g)
UndirectedGraph{Int64} (n=10, m=15)

julia&gt; G == H  
false

julia&gt; using SimpleGraphAlgorithms

julia&gt; is_iso(G,H)   # lots of output deleted
true"><pre class="notranslate"><code>julia&gt; using ShowSet

julia&gt; G = Petersen()
Petersen (n=10, m=15)

julia&gt; g = SimpleGraph(G)
{10, 15} undirected simple Int64 graph

julia&gt; H = UG(g)
UndirectedGraph{Int64} (n=10, m=15)

julia&gt; G == H  
false

julia&gt; using SimpleGraphAlgorithms

julia&gt; is_iso(G,H)   # lots of output deleted
true
</code></pre></div>
</article></div>