<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-limited-memory-ldl-factorization" class="anchor" aria-hidden="true" href="#limited-memory-ldl-factorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limited-Memory LDL' Factorization</h1>
<p><a href="https://travis-ci.org/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b03c34a771cc02232f8a7e4b7a4cb28569fc8e8/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f4c696d697465644c444c466163746f72697a6174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dpo/limitedldlfactorizations-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/4b4dbcb0840939cd485319b8254ea58eea70f0dc/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75617975736e7132666c6874386d38302f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/uayusnq2flht8m80/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ecfbf9df731fbec5e4313c1c030aaec2605ebff5/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c696d697465644c444c466163746f72697a6174696f6e732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fa2d0eb773c36e9c2f28e9cfd3a48ea5e46e0a76/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c696d697465644c444c466163746f72697a6174696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>A Port of LLDL to Julia
See <a href="https://github.com/optimizers/lldl">https://github.com/optimizers/lldl</a>.</p>
<p>LimitedLDLFactorizations is a limited-memory LDL' factorization for symmetric matrices.
Given a symmetric matrix A, we search for a unit lower triangular L, a
diagonal D and a diagonal ∆ such that LDL' is an incomplete factorization
of A+∆. The elements of the diagonal matrix ∆ have the form ±α, where α ≥ 0
is a shift.</p>
<h2><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LimitedLDLFactorizations<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-brief-description" class="anchor" aria-hidden="true" href="#brief-description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Brief Description</h2>
<p>The only function exported is <code>lldl()</code>.
Supply a dense array or sparse matrix.
Dense arrays will be converted to sparse.
The strict lower triangle and diagonal of sparse matrices will be extracted.</p>
<p>Optionally, supply</p>
<ul>
<li>a memory parameter to allow more fill in the L factor;</li>
<li>a drop tolerance to discard small elements in the L factor;</li>
<li>an initial shift to speed up the process in case the factorization does
not exist without shift.</li>
</ul>
<p>Currently, ordering is not implicitly supported.
The input matrix A must be ordered explicitly before calling <code>lldl()</code>.
For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AMD
julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">amd</span>(A)
julia<span class="pl-k">&gt;</span> PAP <span class="pl-k">=</span> A[p, p]
julia<span class="pl-k">&gt;</span> L, d, α <span class="pl-k">=</span> <span class="pl-c1">lldl</span>(A)</pre></div>
<p>Using a memory parameter larger than or equal to the size of A will yield an
exact factorization provided one exists without pivoting. That is the
case of symmetric quasi-definite matrices. However, it is probably not the
most efficient way to compute such a factorization.</p>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>More Examples</h2>
<p>See <code>examples/example.jl</code> and <code>tests/runtest.jl</code>.</p>
<h2><a id="user-content-complete-description" class="anchor" aria-hidden="true" href="#complete-description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Complete Description</h2>
<p>[1] C.-J. Lin and J. J. Moré. Incomplete Cholesky factorizations with limited
memory. SIAM Journal on Scientific Computing, 21(1):24--45, 1999.
DOI <a href="10.1137/S1064827597327334">https://doi.org/10.1137/S1064827597327334</a>.
<br>
[2] <a href="http://www.mcs.anl.gov/~more/icfs" rel="nofollow">http://www.mcs.anl.gov/~more/icfs</a>
<br>
[3] D. Orban. Limited-Memory LDLT Factorization of Symmetric Quasi-Definite
Matrices with Application to Constrained Optimization. Numerical Algorithms
70(1):9--41, 2015. DOI <a href="10.1007/s11075-014-9933-x">https://doi.org/10.1007/s11075-014-9933-x</a>.
<br>
[4] <a href="https://github.com/optimizers/lldl">https://github.com/optimizers/lldl</a></p>
</article></div>