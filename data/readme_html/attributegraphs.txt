<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-attributegraphsjl" class="anchor" aria-hidden="true" href="#attributegraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AttributeGraphs.jl</h1>
<p dir="auto"><a href="https://UniStuttgart-IKR.github.io/AttributeGraphs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/UniStuttgart-IKR/AttributeGraphs.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/4596b392f7e6519733a18f352ba2151fad494b2db9f5a044b7148ac23fd76139/687474703a2f2f636f6465636f762e696f2f6769746875622f556e695374757474676172742d494b522f4174747269627574654772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov.io" data-canonical-src="http://codecov.io/github/UniStuttgart-IKR/AttributeGraphs.jl/coverage.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto"><code>AttributeGraphs.jl</code> is an effort to make a dead-simple, type-stable, flexible, compliant with <a href="https://github.com/JuliaGraphs/Graphs.jl"><code>Graphs.jl</code></a> container of a graph and its attributes.
It wraps an <code>AbstractGraph</code>, thus in theory it can play with all subtypes, and provides API for edge, vertices and graph properties.
The type of properties is parametric and fully flexible.</p>
<p dir="auto">To access the properties you can use <code>vertex_attr(), edge_attr(), graph_attr()</code>.</p>
<p dir="auto">An opinionated API using <code>addvertex!, remvertex!, addedge!, remedge!</code> is exported, but if not appreciated one can directly use the <code>add_vertex!, rem_vertex!, add_edge!, rem_edge!</code> functions or easily create his/her own.
The opinionated implementation uses a Vector for the data properties of each vertex and a Dict for the edge properties.
The Dict keys are updated after a vertex removal.</p>
<p dir="auto">See <a href="https://unistuttgart-ikr.github.io/AttributeGraphs.jl/dev/#Similar-packages-and-differences" rel="nofollow">the docs</a> for a comparison with similar packages</p>
<p dir="auto"><code>AttributesGraphs.jl</code> is a simple and small project and might break often in favor of design improvements.</p>
</article></div>