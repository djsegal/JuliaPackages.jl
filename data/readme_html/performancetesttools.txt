<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-performancetesttools" class="anchor" aria-hidden="true" href="#performancetesttools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PerformanceTestTools</h1>
<p dir="auto"><a href="https://juliatesting.github.io/PerformanceTestTools.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliatesting.github.io/PerformanceTestTools.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/JuliaTesting/PerformanceTestTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa70b91f83b316c2f7d026717d86085ca4f274f8562dc27ca763a7b1cb7a1b14/68747470733a2f2f7472617669732d63692e636f6d2f4a756c696154657374696e672f506572666f726d616e636554657374546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaTesting/PerformanceTestTools.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaTesting/PerformanceTestTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/647bbf8d5f9704d2435123a8b26495b2ebfbfc29114a7728a0568a4a1a11b95e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696154657374696e672f506572666f726d616e636554657374546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaTesting/PerformanceTestTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaTesting/PerformanceTestTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fecd2c5bd5e06f95ef1312553deb02366245bdb36e122ec10806a594fba235a1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696154657374696e672f506572666f726d616e636554657374546f6f6c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaTesting/PerformanceTestTools.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/PerformanceTestTools.jl"><img src="https://camo.githubusercontent.com/1ddcf07da35e204cc4f22734c71e3a8309336720d436cdb5b42fb60da5a14d14/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f4a756c696154657374696e672f506572666f726d616e636554657374546f6f6c732e6a6c2f76302e312e332e7376673f7374796c653d736f6369616c266c6f676f3d676974687562" alt="GitHub commits since tagged version" data-canonical-src="https://img.shields.io/github/commits-since/JuliaTesting/PerformanceTestTools.jl/v0.1.3.svg?style=social&amp;logo=github" style="max-width: 100%;"></a></p>
<p dir="auto">Testing generated IRs inside CI is useful for avoiding performance
regression.  However, test suites are normally run under flags like
<code>--check-bounds=yes</code> and <code>--code-coverage=user</code> which block <code>julia</code>
compiler to generate efficient code.
<code>PerformanceTestTools.@include(script)</code> automatically detects such
flags and run the <code>script</code> in a separate <code>julia</code> process started
without these flags.</p>
</article></div>