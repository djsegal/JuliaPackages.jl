<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-threeq-julia-interface-to-d-waves-quantum-annealing-hardware" class="anchor" aria-hidden="true" href="#threeq-julia-interface-to-d-waves-quantum-annealing-hardware"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ThreeQ: Julia interface to D-Wave's quantum annealing hardware</h1>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p>ThreeQ is a <a href="http://julialang.org/" rel="nofollow">Julia</a> module that includes several macros which effectively extend the syntax of Julia to enable rapid prototyping of codes for <a href="https://www.dwavesys.com/" rel="nofollow">D-Wave</a> hardware. ThreeQ uses various tools from D-Wave's software suite (including the Python SAPI, <a href="https://github.com/dwavesystems/qbsolv">qbsolv</a>, and dw) as backends to access D-Wave hardware.</p>
<p>A number of <a href="https://github.com/lanl/ThreeQ.jl/tree/master/examples">examples</a> are including that illustrate how to use ThreeQ. These examples include <a href="https://github.com/lanl/ThreeQ.jl/blob/master/examples/binlin/binlin.jl">solving systems of linear equations</a>, <a href="https://github.com/lanl/ThreeQ.jl/blob/master/examples/factorsmart/factorsmart.jl">factoring integers</a>, <a href="https://github.com/lanl/ThreeQ.jl/blob/master/examples/mcmc/hydro/ex.jl">PDE-constrained optimization</a>, and <a href="https://github.com/lanl/ThreeQ.jl/blob/master/examples/canada_dwqmi/canada.jl">map coloring</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>First, Julia  must be installed. Julia binaries can be obtained <a href="http://julialang.org/downloads/" rel="nofollow">here</a>. In order to actually use the D-Wave, D-Wave hardware must be available and at least part of D-Wave's software stack must also be installed. D-Wave's <a href="https://github.com/dwavesystems/qbsolv">qbsolv</a> tool can be used without D-Wave hardware. Other components (the Python SAPI and dw) must be obtained from D-Wave, if needed.</p>
<p>Second, this repo must be cloned into a place where Julia can find it. You can tell Julia where to look for it by adding a line to your .juliarc.jl file like</p>
<pre><code>push!(LOAD_PATH, "/dir/where/this/repo/is")
</code></pre>
<p>For instance, my .juliarc.jl file contains</p>
<pre><code>push!(LOAD_PATH, "$(homedir())/codes")
</code></pre>
<p>and within ~/codes, there is a directory containing this repo called "ThreeQ.jl" or "ThreeQ".</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>ThreeQ is provided under a BSD-ish license with a "modifications must be indicated" clause.  See LICENSE.md file for the full text.</p>
<p>This package is part of the Hybrid Quantum-Classical Computing suite, known internally as LA-CC-16-032.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>Daniel O'Malley, <a href="mailto:omalled@lanl.gov">omalled@lanl.gov</a></p>
</article></div>