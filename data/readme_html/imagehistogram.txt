<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-imagehistogram" class="anchor" aria-hidden="true" href="#imagehistogram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ImageHistogram</h1>
<p dir="auto"><a href="https://travis-ci.org/t37w/ImageHistogram.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9baa61a7efd2b906b8801fd86cd5d551ca74dea90cfcf07f49cdcd0c31fbf867/68747470733a2f2f7472617669732d63692e6f72672f743337772f496d616765486973746f6772616d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/t37w/ImageHistogram.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/t37w/ImageHistogram.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/75d0549e71d2c50947cb34f4087d67a4e204b3b0b4a663a143d0f88cbb4330aa/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f743337772f496d616765486973746f6772616d2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/t37w/ImageHistogram.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/t37w/ImageHistogram.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6af1e41357d740dd3a9310d242cab688e918dee64a36f43d48d47eecb405fe98/687474703a2f2f636f6465636f762e696f2f6769746875622f743337772f496d616765486973746f6772616d2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/t37w/ImageHistogram.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Implement 2d and 3d histograms of images. Support gray and colored. Include support for plotting and some predefined layouts.</p>
<h2 dir="auto"><a id="user-content-goal-and-purpose" class="anchor" aria-hidden="true" href="#goal-and-purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Goal and purpose</h2>
<p dir="auto">Main purpose is to have a view to the color sitribution to check the quality of photos.
And to have a reasonable sized window and not a little stamp.</p>
<ul dir="auto">
<li>2d histograms
<ul dir="auto">
<li>gray, red, green, blue</li>
</ul>
</li>
<li>3d histogram
<ul dir="auto">
<li>x-, y-, z-axis : derive from red, green, blue</li>
<li>plot using colored dots in RGB24 to get an impression of used color distribution within the image</li>
</ul>
</li>
<li>identify which Plt package is best for 3d plotting
<ul dir="auto">
<li>current decison for purpose :  plot ImageHistograms
<ul dir="auto">
<li>Plots : very good for 2D plotting and customitzed layouts</li>
<li>Gnuplot : very good for 3D plotting; in 2D it needs too much typing</li>
<li>GR : out of the game. Found no syntax for RGB colored dots</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-used-packages" class="anchor" aria-hidden="true" href="#used-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Used Packages</h2>
<ul dir="auto">
<li>julia as programming language</li>
<li>Images.jl</li>
<li>TestImages.jl</li>
<li>Plots.jl : as default for 2D plots; easy to use, very good customizable. Currently not the first choice when doing 3D stuff. Too slow to work with several array having ~140000 elements.</li>
<li>Gnuplot.jl : Currently too complex for this purpose in 2D.  But best for 3D stuff. Works fine and within seconds for test picture "lena_color_512" which has ~148279 different colors.</li>
<li>GR.jl : can show 3D. But I have no idea how to plot each marker dot with its own RGB color.</li>
</ul>
<h2 dir="auto"><a id="user-content-package-tree-layout" class="anchor" aria-hidden="true" href="#package-tree-layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package tree layout</h2>
<ul dir="auto">
<li>directory src:
<ul dir="auto">
<li>module "ImageHistogram" : contains the stable source. No cooked plotting</li>
<li>module "ImageHistogramTest" : contains the unstable source; use to try something, add new stuff, change existing, ...
<ul dir="auto">
<li>cooked plotting in 2D using Plots</li>
<li>cooked plotting in 3D using Gnuplot
This way, source and runtime can be compared easily.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-background-information-and-related-urls-todo" class="anchor" aria-hidden="true" href="#background-information-and-related-urls-todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background Information and related URLs [ToDo]</h2>
<ul dir="auto">
<li>Color to Gray conversions</li>
<li>Color schemes</li>
<li>RGB and friends</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Copy ImageHistogram.jl and/or ImageHistogramTest.jl into the load path of julia.
Alternatively extend julia's load path to contain the directory the module files are located.</p>
<p dir="auto">ImageHistogramTest contains functions trying to plot 3D using Plots.</p>
<h3 dir="auto"><a id="user-content-use-of-imagehistogramjl" class="anchor" aria-hidden="true" href="#use-of-imagehistogramjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>use of ImageHistogram.jl</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Images, TestImages ; reload(&quot;ImageHistogram&quot;) ; img_col256 = testimage(&quot;lena_color_256&quot;);

ihR,ihG,ihB = ImageHistogramTest.imhistogramRGB(img_col256);

ihgray = ImageHistogramTest.imhistogramGray(img_col256);

plot(ihgray, color=:lightgray, w=3, line=:sticks)

plot(ihR, line=:red, w=2)

plot_red = plot(ihR, line=:red, w=2); plot_green = plot(ihG, line=:green, w=2); plot_blue = plot(ihB, line=:blue, w=2); plot_Gray = plot(ihgray, line=:lightgray, w=2);"><pre class="notranslate"><code>using Images, TestImages ; reload("ImageHistogram") ; img_col256 = testimage("lena_color_256");

ihR,ihG,ihB = ImageHistogramTest.imhistogramRGB(img_col256);

ihgray = ImageHistogramTest.imhistogramGray(img_col256);

plot(ihgray, color=:lightgray, w=3, line=:sticks)

plot(ihR, line=:red, w=2)

plot_red = plot(ihR, line=:red, w=2); plot_green = plot(ihG, line=:green, w=2); plot_blue = plot(ihB, line=:blue, w=2); plot_Gray = plot(ihgray, line=:lightgray, w=2);
</code></pre></div>
<h3 dir="auto"><a id="user-content-use-of-imagehistogramtestjl" class="anchor" aria-hidden="true" href="#use-of-imagehistogramtestjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>use of ImageHistogramTest.jl</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Images, TestImages ; reload(&quot;ImageHistogramTest&quot;) ; img_col256 = testimage(&quot;mandril_color&quot;);

ihR,ihG,ihB = ImageHistogramTest.imhistogramRGB(img_col256);

ihgray = ImageHistogramTest.imhistogramGray(img_col256);

ImageHistogramTest.plot_imhi(ihR_cooked=ihR, ihG_cooked=ihG, ihB_cooked=ihB,how=1,bg=1)

ImageHistogramTest.plot_imhi(ihR_cooked=ihR, ihG_cooked=ihG, ihB_cooked=ihB,how=4,bg=1)

ImageHistogramTest.plot_imhi(ihGray_cooked=ihgray,ihR_cooked=ihR, ihG_cooked=ihG, ihB_cooked=ihB,how=3,bg=1)


ImageHistogramTest.plot_imhi_GrayRGB(img_col256)

ImageHistogramTest.plot_imhi_GrayRGB(img_col256, how=3, bg=0)"><pre class="notranslate"><code>using Images, TestImages ; reload("ImageHistogramTest") ; img_col256 = testimage("mandril_color");

ihR,ihG,ihB = ImageHistogramTest.imhistogramRGB(img_col256);

ihgray = ImageHistogramTest.imhistogramGray(img_col256);

ImageHistogramTest.plot_imhi(ihR_cooked=ihR, ihG_cooked=ihG, ihB_cooked=ihB,how=1,bg=1)

ImageHistogramTest.plot_imhi(ihR_cooked=ihR, ihG_cooked=ihG, ihB_cooked=ihB,how=4,bg=1)

ImageHistogramTest.plot_imhi(ihGray_cooked=ihgray,ihR_cooked=ihR, ihG_cooked=ihG, ihB_cooked=ihB,how=3,bg=1)


ImageHistogramTest.plot_imhi_GrayRGB(img_col256)

ImageHistogramTest.plot_imhi_GrayRGB(img_col256, how=3, bg=0)
</code></pre></div>
<h2 dir="auto"><a id="user-content-plotting-3d-a-color-cube" class="anchor" aria-hidden="true" href="#plotting-3d-a-color-cube"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting 3D: a color cube</h2>
<h3 dir="auto"><a id="user-content--with-package-gnuplot" class="anchor" aria-hidden="true" href="#-with-package-gnuplot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>... with package Gnuplot</h3>
<p dir="auto">With the new Gnuplot.jl verion 0.2.0, doing splot based stuff is easier, and works well.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Gnuplot;

using Images, TestImages ; reload(&quot;ImageHistogram&quot;) ; img_col256 = testimage(&quot;lena_color_512&quot;);

redv, greenv,bluev, colv = ImageHistogramTest.imhistogramRGB3d_new2(img_col256);

redv=redv*255.0; greenv=greenv*255.0; bluev=bluev*255.0;

gen_pcv(cv24_a)=(pcv24=zeros(length(cv24_a));for i = 1:endof(cv24_a); pcv24[i]=cv24_a[i].color; end;return pcv24)

@gsp(redv[1:10:end],greenv[1:10:end],bluev[1:10:end],gen_pcv(colv[1:10:end]),&quot;with points pt 13 ps 0.7 lc rgb variable&quot;, xrange=(0,255), yrange=(0,255), zrange=(0,255), xlabel=&quot;red&quot;, ylabel=&quot;green&quot;, zlabel=&quot;blue&quot;, &quot;set border -1&quot;, &quot;set tics in mirror&quot;, &quot;set grid&quot;, &quot;set zticks out mirror&quot;, &quot;set grid ztics&quot;, &quot;set xyplane at 0.0&quot;)"><pre class="notranslate"><code>using Gnuplot;

using Images, TestImages ; reload("ImageHistogram") ; img_col256 = testimage("lena_color_512");

redv, greenv,bluev, colv = ImageHistogramTest.imhistogramRGB3d_new2(img_col256);

redv=redv*255.0; greenv=greenv*255.0; bluev=bluev*255.0;

gen_pcv(cv24_a)=(pcv24=zeros(length(cv24_a));for i = 1:endof(cv24_a); pcv24[i]=cv24_a[i].color; end;return pcv24)

@gsp(redv[1:10:end],greenv[1:10:end],bluev[1:10:end],gen_pcv(colv[1:10:end]),"with points pt 13 ps 0.7 lc rgb variable", xrange=(0,255), yrange=(0,255), zrange=(0,255), xlabel="red", ylabel="green", zlabel="blue", "set border -1", "set tics in mirror", "set grid", "set zticks out mirror", "set grid ztics", "set xyplane at 0.0")
</code></pre></div>
<p dir="auto">After hitting the return-key, be patient for a few seconds. Especially if you use the full range of the color arrays. Each has a size of 148279.</p>
<p dir="auto">Doing the same with "mandril_color" has much less colors and color spots than smooth distribution.</p>
<h3 dir="auto"><a id="user-content--with-package-plots" class="anchor" aria-hidden="true" href="#-with-package-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>... with package Plots</h3>
<p dir="auto">With GR as backend.
Ensure to feed scatter3d() with less than 3000 - 4000 points per color.  It is too slow and it may die.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Plots;

using Images, TestImages ; reload(&quot;ImageHistogram&quot;) ; img_col256 = testimage(&quot;lena_color_512&quot;);

redv, greenv,bluev, colv = ImageHistogramTest.imhistogramRGB3d_new2(img_col256);

redv=redv*255.0; greenv=greenv*255.0; bluev=bluev*255.0;

scatter3d(redv[1:50:end], greenv[1:50:end], bluev[1:50:end],color=colv[1:50:end], markerstrokewidth=0, markersize=2,marker=:circle)  # set border of marker symbol to zero with 'markerstrokewidth=0'

scatter3d(redv[1:11:end], greenv[1:11:end], bluev[1:11:end],color=colv[1:11:end], ms=0.1, msw=0, xlims=(0,255),ylims=(0,255),bg=:black, cam=(85,80))  #  set the camera angle to see the plot in this case from above"><pre class="notranslate"><code>using Plots;

using Images, TestImages ; reload("ImageHistogram") ; img_col256 = testimage("lena_color_512");

redv, greenv,bluev, colv = ImageHistogramTest.imhistogramRGB3d_new2(img_col256);

redv=redv*255.0; greenv=greenv*255.0; bluev=bluev*255.0;

scatter3d(redv[1:50:end], greenv[1:50:end], bluev[1:50:end],color=colv[1:50:end], markerstrokewidth=0, markersize=2,marker=:circle)  # set border of marker symbol to zero with 'markerstrokewidth=0'

scatter3d(redv[1:11:end], greenv[1:11:end], bluev[1:11:end],color=colv[1:11:end], ms=0.1, msw=0, xlims=(0,255),ylims=(0,255),bg=:black, cam=(85,80))  #  set the camera angle to see the plot in this case from above
</code></pre></div>
<p dir="auto">or just call</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ImageHistogramTest.plot_imhi_3D(img_col256); # with default range_step = 50, i.e. just take each 50s point

ImageHistogramTest.plot_imhi_3D(img_col256, range_step = 30); # 
ImageHistogramTest.plot_imhi_3D(img_col256, range_step = 1); # take each color value; requires much mem; on Windows best after a re-boot"><pre class="notranslate"><code>ImageHistogramTest.plot_imhi_3D(img_col256); # with default range_step = 50, i.e. just take each 50s point

ImageHistogramTest.plot_imhi_3D(img_col256, range_step = 30); # 
ImageHistogramTest.plot_imhi_3D(img_col256, range_step = 1); # take each color value; requires much mem; on Windows best after a re-boot
</code></pre></div>
<p dir="auto">to create a draft 3D histogram.</p>
<p dir="auto">Hints for improvements are welcome via tickets, pull requests, ...</p>
<p dir="auto">PS:
My coding style uses ';' at line ends by intention. I use copy-n-paste from/to REPL and want quiet exec.</p>
</article></div>