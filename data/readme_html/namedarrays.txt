<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-namedarrays" class="anchor" aria-hidden="true" href="#namedarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NamedArrays</h1>
<p dir="auto">Julia type that implements a drop-in wrapper for <code>AbstractArray</code> type, providing named indices and dimensions.</p>
<p dir="auto"><a href="https://github.com/davidavdav/NamedArrays.jl/actions/workflows/CI.yml"><img src="https://github.com/davidavdav/NamedArrays.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/davidavdav/NamedArrays.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/9ef5a2d448ffe6c209bd9cb6ac583c9935ff5d6ad76a31c209d263201e87cd41/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f646176696461766461762f4e616d65644172726179732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/davidavdav/NamedArrays.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-idea" class="anchor" aria-hidden="true" href="#idea"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Idea</h2>
<p dir="auto">We would want to have the possibility to give each row/column/... in
an Array names, as well as the array dimensions themselves.  This
could be used for pretty-printing, indexing, and perhaps even some
sort of dimension-checking in certain matrix computations.</p>
<p dir="auto">In all other respects, a <code>NamedArray</code> should behave the same as the underlying <code>AbstractArray</code>.</p>
<p dir="auto">A <code>NamedArray</code> should adhere to the <a href="https://docs.julialang.org/en/latest/manual/interfaces/#man-interface-array-1" rel="nofollow">interface definition</a> of an <code>AbstractArray</code> itself, if there are cases where this is not true, these should be considered bugs in the implementation of <code>NamedArrays</code>.</p>
<h2 dir="auto"><a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Synopsis</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using NamedArrays

julia&gt; n = NamedArray(rand(2,4))
2×4 Named Matrix{Float64}
A ╲ B │         1          2          3          4
──────┼───────────────────────────────────────────
1     │  0.640719   0.996256   0.534355   0.610259
2     │   0.67784   0.281928  0.0112326   0.672123

julia&gt; setnames!(n, [&quot;one&quot;, &quot;two&quot;], 1)         # give the names &quot;one&quot; and &quot;two&quot; to the rows (dimension 1)
(OrderedCollections.OrderedDict{Any, Int64}(&quot;one&quot; =&gt; 1, &quot;two&quot; =&gt; 2), OrderedCollections.OrderedDict{Any, Int64}(&quot;1&quot; =&gt; 1, &quot;2&quot; =&gt; 2, &quot;3&quot; =&gt; 3, &quot;4&quot; =&gt; 4))

julia&gt; n[&quot;one&quot;, 2:3]
2-element Named Vector{Float64}
B  │
───┼─────────
2  │ 0.996256
3  │ 0.534355

julia&gt; n[&quot;two&quot;, :] = 11:14
11:14

julia&gt; n[Not(&quot;two&quot;), :] = 4:7                  # all rows but the one called &quot;two&quot;
4:7

julia&gt; n
2×4 Named Matrix{Float64}
A ╲ B │    1     2     3     4
──────┼───────────────────────
one   │  4.0   5.0   6.0   7.0
two   │ 11.0  12.0  13.0  14.0

julia&gt; sum(n, dims=1)
1×4 Named Matrix{Float64}
 A ╲ B │    1     2     3     4
───────┼───────────────────────
sum(A) │ 15.0  17.0  19.0  21.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NamedArrays

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Named Matrix{Float64}
A ╲ B │         <span class="pl-c1">1</span>          <span class="pl-c1">2</span>          <span class="pl-c1">3</span>          <span class="pl-c1">4</span>
──────┼───────────────────────────────────────────
<span class="pl-c1">1</span>     │  <span class="pl-c1">0.640719</span>   <span class="pl-c1">0.996256</span>   <span class="pl-c1">0.534355</span>   <span class="pl-c1">0.610259</span>
<span class="pl-c1">2</span>     │   <span class="pl-c1">0.67784</span>   <span class="pl-c1">0.281928</span>  <span class="pl-c1">0.0112326</span>   <span class="pl-c1">0.672123</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">setnames!</span>(n, [<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>], <span class="pl-c1">1</span>)         <span class="pl-c"><span class="pl-c">#</span> give the names "one" and "two" to the rows (dimension 1)</span>
(OrderedCollections<span class="pl-k">.</span><span class="pl-c1">OrderedDict</span><span class="pl-c1">{Any, Int64}</span>(<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>), OrderedCollections<span class="pl-k">.</span><span class="pl-c1">OrderedDict</span><span class="pl-c1">{Any, Int64}</span>(<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>4<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> n[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Named Vector{Float64}
B  │
───┼─────────
<span class="pl-c1">2</span>  │ <span class="pl-c1">0.996256</span>
<span class="pl-c1">3</span>  │ <span class="pl-c1">0.534355</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, :] <span class="pl-k">=</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">14</span>
<span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">14</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">Not</span>(<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>), :] <span class="pl-k">=</span> <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">7</span>                  <span class="pl-c"><span class="pl-c">#</span> all rows but the one called "two"</span>
<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> n
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Named Matrix{Float64}
A ╲ B │    <span class="pl-c1">1</span>     <span class="pl-c1">2</span>     <span class="pl-c1">3</span>     <span class="pl-c1">4</span>
──────┼───────────────────────
one   │  <span class="pl-c1">4.0</span>   <span class="pl-c1">5.0</span>   <span class="pl-c1">6.0</span>   <span class="pl-c1">7.0</span>
two   │ <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(n, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">4</span> Named Matrix{Float64}
 A ╲ B │    <span class="pl-c1">1</span>     <span class="pl-c1">2</span>     <span class="pl-c1">3</span>     <span class="pl-c1">4</span>
───────┼───────────────────────
<span class="pl-c1">sum</span>(A) │ <span class="pl-c1">15.0</span>  <span class="pl-c1">17.0</span>  <span class="pl-c1">19.0</span>  <span class="pl-c1">21.0</span></pre></div>
<h2 dir="auto"><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction</h2>
<h3 dir="auto"><a id="user-content-default-names-for-indices-and-dimensions" class="anchor" aria-hidden="true" href="#default-names-for-indices-and-dimensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Default names for indices and dimensions</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n = NamedArray([1 2; 3 4]) ## NamedArray(a::Array)
2×2 Named Matrix{Int64}
A ╲ B │ 1  2
──────┼─────
1     │ 1  2
2     │ 3  4

n = NamedArray{Int}(2, 2) ## NamedArray{T}(dims...)
2×2 Named Matrix{Int64}
A ╲ B │                 1                  2
──────┼─────────────────────────────────────
1     │             33454  72058693549555969
2     │ 72339073326448640         4318994440"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>]) <span class="pl-c"><span class="pl-c">#</span># NamedArray(a::Array)</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
A ╲ B │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
──────┼─────
<span class="pl-c1">1</span>     │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
<span class="pl-c1">2</span>     │ <span class="pl-c1">3</span>  <span class="pl-c1">4</span>

n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span># NamedArray{T}(dims...)</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
A ╲ B │                 <span class="pl-c1">1</span>                  <span class="pl-c1">2</span>
──────┼─────────────────────────────────────
<span class="pl-c1">1</span>     │             <span class="pl-c1">33454</span>  <span class="pl-c1">72058693549555969</span>
<span class="pl-c1">2</span>     │ <span class="pl-c1">72339073326448640</span>         <span class="pl-c1">4318994440</span></pre></div>
<p dir="auto">These constructors add default names to the array of type String, <code>"1"</code>,
<code>"2"</code>, ... for each dimension, and names the dimensions <code>:A</code>, <code>:B</code>,
... (which will be all right for 26 dimensions to start with; 26
dimensions should be enough for anyone:-).  The former initializes
the NamedArray with the Array <code>a</code>, the latter makes an uninitialized
NamedArray of element type <code>T</code> with the specified dimensions <code>dims...</code>.</p>
<h3 dir="auto"><a id="user-content-lower-level-constructors" class="anchor" aria-hidden="true" href="#lower-level-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lower level constructors</h3>
<p dir="auto">The key-lookup for names is implemented by using <code>DataStructures.OrderedDict</code>s for each dimension.  At a lower level, you can construct <code>NamedArrays</code> this way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataStructures

julia&gt; n = NamedArray([1 3; 2 4], ( OrderedDict(&quot;A&quot;=&gt;1, &quot;B&quot;=&gt;2), OrderedDict(&quot;C&quot;=&gt;1, &quot;D&quot;=&gt;2) ),
                      (&quot;Rows&quot;, &quot;Cols&quot;))
2×2 Named Matrix{Int64}
Rows ╲ Cols │ C  D
────────────┼─────
A           │ 1  3
B           │ 2  4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataStructures

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">3</span>; <span class="pl-c1">2</span> <span class="pl-c1">4</span>], ( <span class="pl-c1">OrderedDict</span>(<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>), <span class="pl-c1">OrderedDict</span>(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>) ),
                      (<span class="pl-s"><span class="pl-pds">"</span>Rows<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cols<span class="pl-pds">"</span></span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
Rows ╲ Cols │ C  D
────────────┼─────
A           │ <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
B           │ <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p dir="auto">This is the basic constructor for a NamedArray.  The second argument <code>names</code> must be a tuple of <code>OrderedDict</code>s whose range (the values) are exactly covering the range <code>1:size(a,dim)</code> for each dimension.   The keys in the various dictionaries may be of mixed types, but after construction, the type of the names cannot be altered.  The third argument <code>dimnames</code> is a tuple of the names of the dimensions themselves, and these names may be of any type.</p>
<h3 dir="auto"><a id="user-content-vectors-of-names" class="anchor" aria-hidden="true" href="#vectors-of-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vectors of names</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# NamedArray{T,N}(a::AbstractArray{T,N}, names::NTuple{N,Vector}, dimnames::NTuple{N})
julia&gt; n = NamedArray([1 3; 2 4], ( [&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;] ), (&quot;Rows&quot;, &quot;Cols&quot;))
2×2 Named Matrix{Int64}
Rows ╲ Cols │ c  d
────────────┼─────
a           │ 1  3
b           │ 2  4

# NamedArray{T,N}(a::AbstractArray{T,N}, names::NTuple{N,Vector})
julia&gt; n = NamedArray([1 3; 2 4], ( [&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;] ))
2×2 Named Matrix{Int64}
A ╲ B │ c  d
──────┼─────
a     │ 1  3
b     │ 2  4

julia&gt; n = NamedArray([1, 2], ( [&quot;a&quot;, &quot;b&quot;], ))  # note the comma after [&quot;a&quot;, &quot;b&quot;] to ensure evaluation as tuple
2-element Named Vector{Int64}
A  │
───┼──
a  │ 1
b  │ 2

# Names can also be set with keyword arguments
julia&gt; n = NamedArray([1 3; 2 4]; names=( [&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;] ), dimnames=(&quot;Rows&quot;, &quot;Cols&quot;))
2×2 Named Matrix{Int64}
Rows ╲ Cols │ c  d
────────────┼─────
a           │ 1  3
b           │ 2  4"><pre><span class="pl-c"><span class="pl-c">#</span> NamedArray{T,N}(a::AbstractArray{T,N}, names::NTuple{N,Vector}, dimnames::NTuple{N})</span>
julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">3</span>; <span class="pl-c1">2</span> <span class="pl-c1">4</span>], ( [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], [<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>] ), (<span class="pl-s"><span class="pl-pds">"</span>Rows<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cols<span class="pl-pds">"</span></span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
Rows ╲ Cols │ c  d
────────────┼─────
a           │ <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
b           │ <span class="pl-c1">2</span>  <span class="pl-c1">4</span>

<span class="pl-c"><span class="pl-c">#</span> NamedArray{T,N}(a::AbstractArray{T,N}, names::NTuple{N,Vector})</span>
julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">3</span>; <span class="pl-c1">2</span> <span class="pl-c1">4</span>], ( [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], [<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>] ))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
A ╲ B │ c  d
──────┼─────
a     │ <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
b     │ <span class="pl-c1">2</span>  <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], ( [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], ))  <span class="pl-c"><span class="pl-c">#</span> note the comma after ["a", "b"] to ensure evaluation as tuple</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Named Vector{Int64}
A  │
───┼──
a  │ <span class="pl-c1">1</span>
b  │ <span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> Names can also be set with keyword arguments</span>
julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">3</span>; <span class="pl-c1">2</span> <span class="pl-c1">4</span>]; names<span class="pl-k">=</span>( [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], [<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>] ), dimnames<span class="pl-k">=</span>(<span class="pl-s"><span class="pl-pds">"</span>Rows<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Cols<span class="pl-pds">"</span></span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
Rows ╲ Cols │ c  d
────────────┼─────
a           │ <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
b           │ <span class="pl-c1">2</span>  <span class="pl-c1">4</span></pre></div>
<p dir="auto">This is a more friendly version of the basic constructor, where the range of the dictionaries is automatically assigned the values <code>1:size(a, dim)</code> for the <code>names</code> in order. If <code>dimnames</code> is not specified, the default values will be used (<code>:A</code>, <code>:B</code>, etc.).</p>
<p dir="auto">In principle, there is no limit imposed to the type of the <code>names</code> used, but we discourage the use of <code>Real</code>, <code>AbstractArray</code> and <code>Range</code>, because they have a special interpretation in <code>getindex()</code> and <code>setindex</code>.</p>
<h2 dir="auto"><a id="user-content-indexing" class="anchor" aria-hidden="true" href="#indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Indexing</h2>
<h3 dir="auto"><a id="user-content-integer-indices" class="anchor" aria-hidden="true" href="#integer-indices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Integer</code> indices</h3>
<p dir="auto">Single and multiple integer indices work as for the underlying array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n[1, 1]
1

julia&gt; n[1]
1"><pre>julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">1</span>]
<span class="pl-c1">1</span></pre></div>
<p dir="auto">Because the constructed <code>NamedArray</code> itself is an <code>AbstractArray</code>, integer indices always have precedence:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = rand(2, 4)
2×4 Matrix{Float64}:
 0.272237  0.904488  0.847206  0.20988
 0.533134  0.284041  0.370965  0.421939

julia&gt; dodgy = NamedArray(a, ([2, 1], [10, 20, 30, 40]))
2×4 Named Matrix{Float64}
A ╲ B │       10        20        30        40
──────┼───────────────────────────────────────
2     │ 0.272237  0.904488  0.847206   0.20988
1     │ 0.533134  0.284041  0.370965  0.421939

julia&gt; dodgy[1, 1] == a[1, 1]
true

julia&gt; dodgy[1, 10] ## BoundsError
ERROR: BoundsError: attempt to access 2×4 Matrix{Float64} at index [1, 10]"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.272237</span>  <span class="pl-c1">0.904488</span>  <span class="pl-c1">0.847206</span>  <span class="pl-c1">0.20988</span>
 <span class="pl-c1">0.533134</span>  <span class="pl-c1">0.284041</span>  <span class="pl-c1">0.370965</span>  <span class="pl-c1">0.421939</span>

julia<span class="pl-k">&gt;</span> dodgy <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>(a, ([<span class="pl-c1">2</span>, <span class="pl-c1">1</span>], [<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">30</span>, <span class="pl-c1">40</span>]))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Named Matrix{Float64}
A ╲ B │       <span class="pl-c1">10</span>        <span class="pl-c1">20</span>        <span class="pl-c1">30</span>        <span class="pl-c1">40</span>
──────┼───────────────────────────────────────
<span class="pl-c1">2</span>     │ <span class="pl-c1">0.272237</span>  <span class="pl-c1">0.904488</span>  <span class="pl-c1">0.847206</span>   <span class="pl-c1">0.20988</span>
<span class="pl-c1">1</span>     │ <span class="pl-c1">0.533134</span>  <span class="pl-c1">0.284041</span>  <span class="pl-c1">0.370965</span>  <span class="pl-c1">0.421939</span>

julia<span class="pl-k">&gt;</span> dodgy[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">==</span> a[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> dodgy[<span class="pl-c1">1</span>, <span class="pl-c1">10</span>] <span class="pl-c"><span class="pl-c">#</span># BoundsError</span>
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float64} at index [<span class="pl-c1">1</span>, <span class="pl-c1">10</span>]</pre></div>
<p dir="auto">In some cases, e.g., with contingency tables, it would be very handy to be able to use named Integer indices.  In this case, in order to circumvent the normal <code>AbstractArray</code> interpretation of the index, you can wrap the indexing argument in the type <code>Name()</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dodgy[Name(1), Name(30)] == a[2, 3] ## true
true"><pre>julia<span class="pl-k">&gt;</span> dodgy[<span class="pl-c1">Name</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Name</span>(<span class="pl-c1">30</span>)] <span class="pl-k">==</span> a[<span class="pl-c1">2</span>, <span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span># true</span>
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-named-indices" class="anchor" aria-hidden="true" href="#named-indices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Named indices</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n = NamedArray([1 2 3; 4 5 6], ([&quot;one&quot;, &quot;two&quot;], [:a, :b, :c]))
2×3 Named Matrix{Int64}
A ╲ B │ a  b  c
──────┼────────
one   │ 1  2  3
two   │ 4  5  6


julia&gt; n[&quot;one&quot;, :a] == 1
true

julia&gt; n[:, :b] == [2, 5]
true

julia&gt; n[&quot;two&quot;, [1, 3]] == [4, 6]
true

julia&gt; n[&quot;one&quot;, [:a, :b]] == [1, 2]
true
"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>], ([<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>], [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>]))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
A ╲ B │ a  b  c
──────┼────────
one   │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
two   │ <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>


julia<span class="pl-k">&gt;</span> n[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">:a</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[:, <span class="pl-c1">:b</span>] <span class="pl-k">==</span> [<span class="pl-c1">2</span>, <span class="pl-c1">5</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>]] <span class="pl-k">==</span> [<span class="pl-c1">4</span>, <span class="pl-c1">6</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>]] <span class="pl-k">==</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">true</span>
</pre></div>
<p dir="auto">This is the main use of <code>NamedArrays</code>.  Names (keys) and arrays of names can be specified as an index, and these can be mixed with other forms of indexing.</p>
<h3 dir="auto"><a id="user-content-slices" class="anchor" aria-hidden="true" href="#slices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Slices</h3>
<p dir="auto">The example above just shows how the indexing works for the values, but there is a slight subtlety in how the return type of slices is determined</p>
<p dir="auto">When a single element is selected by an index expression, a scalar value is returned.  When an array slice is selected, an attempt is made to return a NamedArray with the correct names for the dimensions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n[:, :b] ## this expression drops the singleton dimensions, and hence the names
2-element Named Vector{Int64}
A   │
────┼──
one │ 2
two │ 5

julia&gt; n[[&quot;one&quot;], [:a]] ## this expression keeps the names
1×1 Named Matrix{Int64}
A ╲ B │ a
──────┼──
one   │ 1"><pre>julia<span class="pl-k">&gt;</span> n[:, <span class="pl-c1">:b</span>] <span class="pl-c"><span class="pl-c">#</span># this expression drops the singleton dimensions, and hence the names</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Named Vector{Int64}
A   │
────┼──
one │ <span class="pl-c1">2</span>
two │ <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> n[[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>], [<span class="pl-c1">:a</span>]] <span class="pl-c"><span class="pl-c">#</span># this expression keeps the names</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">1</span> Named Matrix{Int64}
A ╲ B │ a
──────┼──
one   │ <span class="pl-c1">1</span></pre></div>
<h3 dir="auto"><a id="user-content-negation--complement" class="anchor" aria-hidden="true" href="#negation--complement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Negation / complement</h3>
<p dir="auto">There is a special type constructor <code>Not()</code>, whose function is to specify which elements to exclude from the array.  This is similar to negative indices in the language R.  The elements in <code>Not(elements...)</code> select all but the indicated elements from the array.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n[Not(1), :] == n[[2], :] ## note that `n` stays 2-dimensional
true

julia&gt; n[2, Not(:a)] == n[2, [:b, :c]]
true

julia&gt; dodgy[1, Not(Name(30))] == dodgy[1, [1, 2, 4]]
true"><pre>julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">Not</span>(<span class="pl-c1">1</span>), :] <span class="pl-k">==</span> n[[<span class="pl-c1">2</span>], :] <span class="pl-c"><span class="pl-c">#</span># note that `n` stays 2-dimensional</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">2</span>, <span class="pl-c1">Not</span>(<span class="pl-c1">:a</span>)] <span class="pl-k">==</span> n[<span class="pl-c1">2</span>, [<span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>]]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> dodgy[<span class="pl-c1">1</span>, <span class="pl-c1">Not</span>(<span class="pl-c1">Name</span>(<span class="pl-c1">30</span>))] <span class="pl-k">==</span> dodgy[<span class="pl-c1">1</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>]]
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Both integers and names can be negated.</p>
<h3 dir="auto"><a id="user-content-dictionary-style-indexing" class="anchor" aria-hidden="true" href="#dictionary-style-indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dictionary-style indexing</h3>
<p dir="auto">You can also use a dictionary-style indexing, if you don't want to bother about the order of the dimensions, or make a slice using a specific named dimension:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n[:A =&gt; &quot;one&quot;] == [1, 2, 3]
true

julia&gt; n[:B =&gt; :c, :A =&gt; &quot;two&quot;] == 6
true

julia&gt; n[:A=&gt;:, :B=&gt;:c] == [3, 6]
true

julia&gt; n[:B=&gt;[:a, :b]] == [1 2; 4 5]
true

julia&gt; n[:A=&gt;[&quot;one&quot;, &quot;two&quot;], :B=&gt;:a] == [1, 4]
true

julia&gt; n[:A=&gt;[1, 2], :B=&gt;:a] == [1, 4]
true

julia&gt; n[:A=&gt;[&quot;one&quot;], :B=&gt;1:2] == [1 2]
true

julia&gt; n[:A=&gt;[&quot;three&quot;]] # Throws ArgumentError when trying to access non-existent dimension.
ERROR: ArgumentError: Elements for A =&gt; [&quot;three&quot;] not found."><pre>julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:A</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:B</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:c</span>, <span class="pl-c1">:A</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> <span class="pl-c1">6</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:A</span><span class="pl-k">=&gt;</span>:, <span class="pl-c1">:B</span><span class="pl-k">=&gt;</span><span class="pl-c1">:c</span>] <span class="pl-k">==</span> [<span class="pl-c1">3</span>, <span class="pl-c1">6</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:B</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>]] <span class="pl-k">==</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:A</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>], <span class="pl-c1">:B</span><span class="pl-k">=&gt;</span><span class="pl-c1">:a</span>] <span class="pl-k">==</span> [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:A</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">:B</span><span class="pl-k">=&gt;</span><span class="pl-c1">:a</span>] <span class="pl-k">==</span> [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:A</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>], <span class="pl-c1">:B</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">==</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:A</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>]] <span class="pl-c"><span class="pl-c">#</span> Throws ArgumentError when trying to access non-existent dimension.</span>
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> Elements <span class="pl-k">for</span> A <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>] not found.</pre></div>
<h3 dir="auto"><a id="user-content-assignment" class="anchor" aria-hidden="true" href="#assignment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Assignment</h3>
<p dir="auto">Most index types can be used for assignment as LHS</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n[1, 1] = 0
0

julia&gt; n[&quot;one&quot;, :b] = 1
1

julia&gt; n[:, :c] = 101:102
101:102

julia&gt; n[:B=&gt;:b, :A=&gt;&quot;two&quot;] = 50
50

julia&gt; n
2×3 Named Matrix{Int64}
A ╲ B │   a    b    c
──────┼──────────────
one   │   0    1  101
two   │   4   50  102"><pre>julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">:b</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> n[:, <span class="pl-c1">:c</span>] <span class="pl-k">=</span> <span class="pl-c1">101</span><span class="pl-k">:</span><span class="pl-c1">102</span>
<span class="pl-c1">101</span><span class="pl-k">:</span><span class="pl-c1">102</span>

julia<span class="pl-k">&gt;</span> n[<span class="pl-c1">:B</span><span class="pl-k">=&gt;</span><span class="pl-c1">:b</span>, <span class="pl-c1">:A</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">50</span>
<span class="pl-c1">50</span>

julia<span class="pl-k">&gt;</span> n
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
A ╲ B │   a    b    c
──────┼──────────────
one   │   <span class="pl-c1">0</span>    <span class="pl-c1">1</span>  <span class="pl-c1">101</span>
two   │   <span class="pl-c1">4</span>   <span class="pl-c1">50</span>  <span class="pl-c1">102</span></pre></div>
<h2 dir="auto"><a id="user-content-general-functions" class="anchor" aria-hidden="true" href="#general-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General functions</h2>
<h3 dir="auto"><a id="user-content-access-to-the-names-of-the-indices-and-dimensions" class="anchor" aria-hidden="true" href="#access-to-the-names-of-the-indices-and-dimensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Access to the names of the indices and dimensions</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; names(n::NamedArray) ## get all index names for all dimensions
2-element Vector{Vector}:
 [&quot;one&quot;, &quot;two&quot;]
 [:a, :b, :c]

julia&gt; names(n::NamedArray, 1) ## just for dimension `1`
2-element Vector{String}:
 &quot;one&quot;
 &quot;two&quot;

julia&gt; dimnames(n::NamedArray) ## the names of the dimensions
2-element Vector{Symbol}:
 :A
 :B"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">names</span>(n<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>) <span class="pl-c"><span class="pl-c">#</span># get all index names for all dimensions</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector}<span class="pl-k">:</span>
 [<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>]
 [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">names</span>(n<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span># just for dimension `1`</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dimnames</span>(n<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>) <span class="pl-c"><span class="pl-c">#</span># the names of the dimensions</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Symbol}<span class="pl-k">:</span>
 <span class="pl-c1">:A</span>
 <span class="pl-c1">:B</span></pre></div>
<h3 dir="auto"><a id="user-content-setting-the-names-after-construction" class="anchor" aria-hidden="true" href="#setting-the-names-after-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting the names after construction</h3>
<p dir="auto">Because the type of the keys are encoded in the type of the <code>NamedArray</code>, you can only change the names of indices if they have the same type as before.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" setnames!(n::NamedArray, names::Vector, dim::Integer)
 setnames!(n::NamedArray, name, dim::Int, index:Integer)
 setdimnames!(n::NamedArray, name, dim:Integer)"><pre> <span class="pl-c1">setnames!</span>(n<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>, names<span class="pl-k">::</span><span class="pl-c1">Vector</span>, dim<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
 <span class="pl-c1">setnames!</span>(n<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>, name, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>, index<span class="pl-k">:</span>Integer)
 <span class="pl-c1">setdimnames!</span>(n<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>, name, dim<span class="pl-k">:</span>Integer)</pre></div>
<p dir="auto">sets all the names of dimension <code>dim</code>, or only the name at index <code>index</code>, or the name of the dimension <code>dim</code>.</p>
<h3 dir="auto"><a id="user-content-enameration" class="anchor" aria-hidden="true" href="#enameration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Enameration</h3>
<p dir="auto">Similar to the iterator <code>enumerate</code> this package provides an <code>enamerate</code> function for iterating simultaneously over both names and values.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="enamerate(a::NamedArray)"><pre><span class="pl-c1">enamerate</span>(a<span class="pl-k">::</span><span class="pl-c1">NamedArray</span>)</pre></div>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n = NamedArray([1 2 3; 4 5 6], ([&quot;one&quot;, &quot;two&quot;], [:a, :b, :c]))
2×3 Named Matrix{Int64}
A ╲ B │ a  b  c
──────┼────────
one   │ 1  2  3
two   │ 4  5  6

julia&gt; for (name, val) in enamerate(n)
           println(&quot;$name ==  $val&quot;)
       end
(&quot;one&quot;, :a) ==  1
(&quot;two&quot;, :a) ==  4
(&quot;one&quot;, :b) ==  2
(&quot;two&quot;, :b) ==  5
(&quot;one&quot;, :c) ==  3
(&quot;two&quot;, :c) ==  6"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>], ([<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>], [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>]))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
A ╲ B │ a  b  c
──────┼────────
one   │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
two   │ <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (name, val) <span class="pl-k">in</span> <span class="pl-c1">enamerate</span>(n)
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$name</span> ==  <span class="pl-v">$val</span><span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
(<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">:a</span>) <span class="pl-k">==</span>  <span class="pl-c1">1</span>
(<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, <span class="pl-c1">:a</span>) <span class="pl-k">==</span>  <span class="pl-c1">4</span>
(<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">:b</span>) <span class="pl-k">==</span>  <span class="pl-c1">2</span>
(<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, <span class="pl-c1">:b</span>) <span class="pl-k">==</span>  <span class="pl-c1">5</span>
(<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-c1">:c</span>) <span class="pl-k">==</span>  <span class="pl-c1">3</span>
(<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, <span class="pl-c1">:c</span>) <span class="pl-k">==</span>  <span class="pl-c1">6</span></pre></div>
<h3 dir="auto"><a id="user-content-aggregating-functions" class="anchor" aria-hidden="true" href="#aggregating-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Aggregating functions</h3>
<p dir="auto">Some functions, when operated on a NamedArray, will a name for the singleton index:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sum(n, dims=1)
1×3 Named Matrix{Int64}
 A ╲ B │ a  b  c
───────┼────────
sum(A) │ 5  7  9

julia&gt; prod(n, dims=2)
2×1 Named Matrix{Int64}
A ╲ B │ prod(B)
──────┼────────
one   │       6
two   │     120

Aggregating functions are `sum`, `prod`, `maximum`,  `minimum`,  `mean`,  `std`.

### Convert

```julia
convert(::Type{Array}, a::NamedArray)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(n, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
 A ╲ B │ a  b  c
───────┼────────
<span class="pl-c1">sum</span>(A) │ <span class="pl-c1">5</span>  <span class="pl-c1">7</span>  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prod</span>(n, dims<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span> Named Matrix{Int64}
A ╲ B │ <span class="pl-c1">prod</span>(B)
──────┼────────
one   │       <span class="pl-c1">6</span>
two   │     <span class="pl-c1">120</span>

Aggregating functions are <span class="pl-s"><span class="pl-pds">`</span>sum<span class="pl-pds">`</span></span>, <span class="pl-s"><span class="pl-pds">`</span>prod<span class="pl-pds">`</span></span>, <span class="pl-s"><span class="pl-pds">`</span>maximum<span class="pl-pds">`</span></span>,  <span class="pl-s"><span class="pl-pds">`</span>minimum<span class="pl-pds">`</span></span>,  <span class="pl-s"><span class="pl-pds">`</span>mean<span class="pl-pds">`</span></span>,  <span class="pl-s"><span class="pl-pds">`</span>std<span class="pl-pds">`</span></span>.

<span class="pl-c"><span class="pl-c">#</span>## Convert</span>

<span class="pl-s"><span class="pl-pds">```</span>julia</span>
<span class="pl-s">convert(::Type{Array}, a::NamedArray)</span></pre></div>
<p dir="auto">converts a NamedArray to an Array by dropping all name information.  You can also directly access the underlying array using <code>n.array</code>, or use the accessor function <code>array(n)</code>.</p>
<h2 dir="auto"><a id="user-content-methods-with-special-treatment-of-names--dimnames" class="anchor" aria-hidden="true" href="#methods-with-special-treatment-of-names--dimnames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods with special treatment of names / dimnames</h2>
<h3 dir="auto"><a id="user-content-concatenation" class="anchor" aria-hidden="true" href="#concatenation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Concatenation</h3>
<p dir="auto">If the names are identical
for the relevant dimension, these are retained in the results.  Otherwise,
the names are reinitialized to the default "1", "2", ...</p>
<p dir="auto">In the concatenated direction, the names are always re-initialized.  This may change is people find we should put more effort to check the concatenated names for uniqueness, and keep original names if that is the case.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; hcat(n, n)
2×6 Named Matrix{Int64}
A ╲ hcat │ 1  2  3  4  5  6
─────────┼─────────────────
one      │ 1  2  3  1  2  3
two      │ 4  5  6  4  5  6

julia&gt; vcat(n, n)
4×3 Named Matrix{Int64}
vcat ╲ B │ a  b  c
─────────┼────────
1        │ 1  2  3
2        │ 4  5  6
3        │ 1  2  3
4        │ 4  5  6
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">hcat</span>(n, n)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">6</span> Named Matrix{Int64}
A ╲ hcat │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>
─────────┼─────────────────
one      │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
two      │ <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vcat</span>(n, n)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
vcat ╲ B │ a  b  c
─────────┼────────
<span class="pl-c1">1</span>        │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
<span class="pl-c1">2</span>        │ <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>
<span class="pl-c1">3</span>        │ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
<span class="pl-c1">4</span>        │ <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>
</pre></div>
<h3 dir="auto"><a id="user-content-transposition" class="anchor" aria-hidden="true" href="#transposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transposition</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n'
3×2 Named LinearAlgebra.Adjoint{Int64, Matrix{Int64}}
B ╲ A │ one  two
──────┼─────────
a     │   1    4
b     │   2    5
c     │   3    6

julia&gt; circshift(n, (1, 2))
2×3 Named Matrix{Int64}
A ╲ B │ b  c  a
──────┼────────
two   │ 5  6  4
one   │ 2  3  1
"><pre>julia<span class="pl-k">&gt;</span> n<span class="pl-k">'</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named LinearAlgebra<span class="pl-k">.</span>Adjoint{Int64, Matrix{Int64}}
B ╲ A │ one  two
──────┼─────────
a     │   <span class="pl-c1">1</span>    <span class="pl-c1">4</span>
b     │   <span class="pl-c1">2</span>    <span class="pl-c1">5</span>
c     │   <span class="pl-c1">3</span>    <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">circshift</span>(n, (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
A ╲ B │ b  c  a
──────┼────────
two   │ <span class="pl-c1">5</span>  <span class="pl-c1">6</span>  <span class="pl-c1">4</span>
one   │ <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">1</span>
</pre></div>
<p dir="auto">Similar functions: <code>adjoint</code>, <code>transpose</code>, <code>permutedims</code> operate on the dimnames as well.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; rotl90(n)
3×2 Named Matrix{Int64}
B ╲ A │ one  two
──────┼─────────
c     │   3    6
b     │   2    5
a     │   1    4

julia&gt; rotr90(n)
3×2 Named Matrix{Int64}
B ╲ A │ two  one
──────┼─────────
a     │   4    1
b     │   5    2
c     │   6    3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotl90</span>(n)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
B ╲ A │ one  two
──────┼─────────
c     │   <span class="pl-c1">3</span>    <span class="pl-c1">6</span>
b     │   <span class="pl-c1">2</span>    <span class="pl-c1">5</span>
a     │   <span class="pl-c1">1</span>    <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotr90</span>(n)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Named Matrix{Int64}
B ╲ A │ two  one
──────┼─────────
a     │   <span class="pl-c1">4</span>    <span class="pl-c1">1</span>
b     │   <span class="pl-c1">5</span>    <span class="pl-c1">2</span>
c     │   <span class="pl-c1">6</span>    <span class="pl-c1">3</span></pre></div>
<h3 dir="auto"><a id="user-content-reordering-of-dimensions-in-namedvectors" class="anchor" aria-hidden="true" href="#reordering-of-dimensions-in-namedvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reordering of dimensions in NamedVectors</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = NamedArray([1, 2, 3], [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])
3-element Named Vector{Int64}
A  │
───┼──
a  │ 1
b  │ 2
c  │ 3

julia&gt; Combinatorics.nthperm(v, 4)
3-element Named Vector{Int64}
A  │
───┼──
b  │ 2
c  │ 3
a  │ 1

julia&gt; Random.shuffle(v)
3-element Named Vector{Int64}
A  │
───┼──
b  │ 2
a  │ 1
c  │ 3

julia&gt; reverse(v)
3-element Named Vector{Int64}
A  │
───┼──
c  │ 3
b  │ 2
a  │ 1

julia&gt; sort(1 ./ v)
3-element Named Vector{Float64}
A  │
───┼─────────
c  │ 0.333333
b  │      0.5
a  │      1.0"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element Named Vector{Int64}
A  │
───┼──
a  │ <span class="pl-c1">1</span>
b  │ <span class="pl-c1">2</span>
c  │ <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> Combinatorics<span class="pl-k">.</span><span class="pl-c1">nthperm</span>(v, <span class="pl-c1">4</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Named Vector{Int64}
A  │
───┼──
b  │ <span class="pl-c1">2</span>
c  │ <span class="pl-c1">3</span>
a  │ <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">shuffle</span>(v)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Named Vector{Int64}
A  │
───┼──
b  │ <span class="pl-c1">2</span>
a  │ <span class="pl-c1">1</span>
c  │ <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reverse</span>(v)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Named Vector{Int64}
A  │
───┼──
c  │ <span class="pl-c1">3</span>
b  │ <span class="pl-c1">2</span>
a  │ <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort</span>(<span class="pl-c1">1</span> <span class="pl-k">./</span> v)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Named Vector{Float64}
A  │
───┼─────────
c  │ <span class="pl-c1">0.333333</span>
b  │      <span class="pl-c1">0.5</span>
a  │      <span class="pl-c1">1.0</span></pre></div>
<p dir="auto">operate on the names of the rows as well</p>
<h3 dir="auto"><a id="user-content-broadcasts" class="anchor" aria-hidden="true" href="#broadcasts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Broadcasts</h3>
<p dir="auto">In broadcasting, the names of the first argument are kept</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ni = NamedArray(1 ./ n.array)
2×3 Named Matrix{Float64}
A ╲ B │        1         2         3
──────┼─────────────────────────────
1     │      1.0       0.5  0.333333
2     │     0.25       0.2  0.166667

julia&gt; n .+ ni
┌ Warning: Using names of left argument
└ @ NamedArrays ~/werk/julia/NamedArrays.jl/src/arithmetic.jl:25
2×3 Named Matrix{Float64}
A ╲ B │       a        b        c
──────┼──────────────────────────
one   │     2.0      2.5  3.33333
two   │    4.25      5.2  6.16667

julia&gt; n .- v'
2×3 Named Matrix{Int64}
A ╲ B │ a  b  c
──────┼────────
one   │ 0  0  0
two   │ 3  3  3
"><pre>julia<span class="pl-k">&gt;</span> ni <span class="pl-k">=</span> <span class="pl-c1">NamedArray</span>(<span class="pl-c1">1</span> <span class="pl-k">./</span> n<span class="pl-k">.</span>array)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Float64}
A ╲ B │        <span class="pl-c1">1</span>         <span class="pl-c1">2</span>         <span class="pl-c1">3</span>
──────┼─────────────────────────────
<span class="pl-c1">1</span>     │      <span class="pl-c1">1.0</span>       <span class="pl-c1">0.5</span>  <span class="pl-c1">0.333333</span>
<span class="pl-c1">2</span>     │     <span class="pl-c1">0.25</span>       <span class="pl-c1">0.2</span>  <span class="pl-c1">0.166667</span>

julia<span class="pl-k">&gt;</span> n <span class="pl-k">.+</span> ni
┌ Warning<span class="pl-k">:</span> Using names of left argument
└ @ NamedArrays <span class="pl-k">~</span><span class="pl-k">/</span>werk<span class="pl-k">/</span>julia<span class="pl-k">/</span>NamedArrays<span class="pl-k">.</span>jl<span class="pl-k">/</span>src<span class="pl-k">/</span>arithmetic<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">25</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Float64}
A ╲ B │       a        b        c
──────┼──────────────────────────
one   │     <span class="pl-c1">2.0</span>      <span class="pl-c1">2.5</span>  <span class="pl-c1">3.33333</span>
two   │    <span class="pl-c1">4.25</span>      <span class="pl-c1">5.2</span>  <span class="pl-c1">6.16667</span>

julia<span class="pl-k">&gt;</span> n <span class="pl-k">.-</span> v<span class="pl-k">'</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named Matrix{Int64}
A ╲ B │ a  b  c
──────┼────────
one   │ <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
two   │ <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>
</pre></div>
<p dir="auto">This is implemented through <code>broadcast</code>.</p>
<h2 dir="auto"><a id="user-content-further-development" class="anchor" aria-hidden="true" href="#further-development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Further Development</h2>
<p dir="auto">The current goal is to reduce complexity of the implementation.  Where possible, we want to use more of the <code>Base.AbstractArray</code> implementation.</p>
<p dir="auto">A longer term goal is to improve type stability, this might have a repercussion to the semantics of some operations.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<p dir="auto">The Julia ecosystem now has a number of packages implementing the general idea of attaching names to arrays. For some purposes they may be interchangeable. For others, flexibility or speed or support for particular functions may make one preferable.</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/JuliaArrays/AxisArrays.jl">AxisArrays.jl</a> is of comparable age. It attaches a Symbol to each dimension; this is part of the type thus cannot be mutated after creation.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/rafaqz/DimensionalData.jl">DimensionalData.jl</a>, <a href="https://github.com/mcabbott/AxisKeys.jl">AxisKeys.jl</a> and <a href="https://github.com/Tokazama/AxisIndices.jl">AxisIndices.jl</a> are, to first approximation, post-Julia 1.0 re-writes of that. DimensionalData.jl similarly builds in dimension names, in AxisKeys.jl they are provided by composition with NamedDims.jl, and AxisIndices.jl does not support them. All allow some form of named indexing but the notation varies.</p>
</li>
</ul>
<p dir="auto">Packages with some overlap but a different focus include:</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/invenia/NamedDims.jl">NamedDims.jl</a> only attaches a name to each dimension, allowing <code>sum(A, dims = :time)</code> and <code>A[time=3]</code> but keeping indices the usual integers.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/SciML/LabelledArrays.jl">LabelledArrays.jl</a> instead attaches names to individual elements, allowing <code>A.second == A[2]</code>.</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/JuliaArrays/OffsetArrays.jl">OffsetArrays.jl</a> shifts the indices of an array, allowing say <code>A[-3]</code> to <code>A[3]</code> to be the first &amp; last elements.</p>
</li>
</ul>
</article></div>