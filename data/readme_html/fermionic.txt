<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-welcome-to-fermionicjl" class="anchor" aria-hidden="true" href="#welcome-to-fermionicjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Welcome to Fermionic.jl</h1>
<p><a href="https://travis-ci.com/Marco-Di-Tullio/Fermionic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0064fa5dfe66d95856b2881f0eb53bcba98c700f3972b66ab14f519578534726/68747470733a2f2f7472617669732d63692e636f6d2f4d6172636f2d44692d54756c6c696f2f4665726d696f6e69632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Marco-Di-Tullio/Fermionic.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/Marco-Di-Tullio/Fermionic-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6a0a21e1e1b2d1d6f931f30c1623a166e823bdbb96c764dcf946c0438b04425c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f4d6172636f2d44692d54756c6c696f2f4665726d696f6e69632e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/Marco-Di-Tullio/Fermionic.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Marco-Di-Tullio/Fermionic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b037481a5ff8eed3b968fac9d1f3d2b07fadb6658b68aae564abc507bc3a1197/68747470733a2f2f636f6465636f762e696f2f67682f4d6172636f2d44692d54756c6c696f2f4665726d696f6e69632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/Marco-Di-Tullio/Fermionic.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://mybinder.org/v2/gh/Marco-Di-Tullio/Fermionic.jl/master" rel="nofollow"><img src="https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="https://mybinder.org/badge_logo.svg" style="max-width:100%;"></a></p>
<p>Fermionic is a Julia toolkit for implementing fermionic simulations and exploring its quantum information properties.</p>
<p>Everything relating to fermions can be expressed in terms of annihilation and creation operators. This package numerically constructs fermionic operators and can therefore be used for building any fermionic operator and state. It also defines the main Quantum Gates.</p>
<p>The corresponding fermionic operators can be constructed both in the full Fock space or in the fixed particle number subspace. Then you can define states in the corresponding base and calculate several properties.</p>
<p>Many interesting quantities can be obtained from states in Fermionic, such as one body matrices entropy, partially traced systems, m-bodies density matrices, one body entropies, majorization relations, average particle number and more.</p>
<p>You can also perform any unitary operation with this package and use some of the most common logical gates (Pauli matrices, phase shift, Hadamard, Ucnot, SWAP) to perform fermionic quantum computation.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>For installing this package, you must first access the pkg REPL (by typing ']' in your command line) and then execute</p>
<p><code>add Fermionic</code></p>
<p>The pkg manager will automatically download the package. Then you can initialize it by typing</p>
<p><code>using Fermionic</code></p>
<p>Alternatively, you can install the package from an editor/Jupyter notebook by typing</p>
<p><code>import Pkg</code></p>
<p><code>Pkg.add("Fermionic")</code></p>
<p><code>using Fermionic</code></p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h2>
<p>For instructions on how to use this package, you can read the tutorials located in the folder 'examples'.  For a quick preview, check out the following snippet for a simple example of Fermionic in action:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Fermionic

# We initialize the fermionic operators in dimension d
d = 4
o = Op(d)

# We build the state by applying creation operators on the vacuum
vac = vacuum(o)
st = cdm(o,1)*cdm(o,2)*cdm(o,3)*vac
"><pre><span class="pl-k">using</span> Fermionic

<span class="pl-c"><span class="pl-c">#</span> We initialize the fermionic operators in dimension d</span>
d <span class="pl-k">=</span> <span class="pl-c1">4</span>
o <span class="pl-k">=</span> <span class="pl-c1">Op</span>(d)

<span class="pl-c"><span class="pl-c">#</span> We build the state by applying creation operators on the vacuum</span>
vac <span class="pl-k">=</span> <span class="pl-c1">vacuum</span>(o)
st <span class="pl-k">=</span> <span class="pl-c1">cdm</span>(o,<span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">cdm</span>(o,<span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">cdm</span>(o,<span class="pl-c1">3</span>)<span class="pl-k">*</span>vac</pre></div>
<p>Output</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="16-element SparseArrays.SparseVector{Float64,Int64} with 1 stored entry:
  [15]  =  1.0
"><pre><span class="pl-c1">16</span><span class="pl-k">-</span>element SparseArrays<span class="pl-k">.</span>SparseVector{Float64,Int64} with <span class="pl-c1">1</span> stored entry<span class="pl-k">:</span>
  [<span class="pl-c1">15</span>]  <span class="pl-k">=</span>  <span class="pl-c1">1.0</span></pre></div>
<p>as we are working on the Fock Space, were</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Matrix(basis(o))[15,:]
"><pre><span class="pl-c1">Matrix</span>(<span class="pl-c1">basis</span>(o))[<span class="pl-c1">15</span>,:]</pre></div>
<p>is equal to</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="4-element Array{Float64,1}:
 1.0
 1.0
 1.0
 0.0
"><pre><span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<p>A more interesting exaple: Simulating a superconductor.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Fermionic

#=
We will construct the superconducting Hamiltonian, obtain its fundamental state and some property
=#

# This system will have 4 levels with a double degeneracy
d = 8 
o = Op(d);

# We select the energy of each level and the coupling between them
e0 = 1.0
g = 5.0

epsilon = [2*e0*(i-d/4-1/2) for i in 1:d/2]
epsilon = sort([epsilon; epsilon])

# The non interacting Hamiltonian
h0 = sum([epsilon[i]*(cdm(o,i)*cm(o,i) + cdm(o,i+1)*cm(o,i+1)) for i in 1:2:(Int(d)-1)])

# The interacting Hamiltonian
hi = sum([sum([if i==j spzeros(2^d, 2^d) else g*(cdm(o,j)*cdm(o,j+1)*cm(o,i+1)*cm(o,i)) end
                    for i in 1:2:(Int(d)-1)]) for j in 1:2:(Int(d)-1)])

# The full Hamiltonian
h = h0 - hi

# We compute the fundamental state of the full Hamiltonian
fundamental = eigvecs(Matrix(h))[:,1]

# We normalize the state
fundamental = fundamental/sqrt(fundamental'*fundamental)

# We initialize a state with fundamental
fund = State(fundamental,o)

# We can now access some properties, for instance the eigenvalues of the one body matrix
eigensp(fund)
"><pre><span class="pl-k">using</span> Fermionic

<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">We will construct the superconducting Hamiltonian, obtain its fundamental state and some property</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

<span class="pl-c"><span class="pl-c">#</span> This system will have 4 levels with a double degeneracy</span>
d <span class="pl-k">=</span> <span class="pl-c1">8</span> 
o <span class="pl-k">=</span> <span class="pl-c1">Op</span>(d);

<span class="pl-c"><span class="pl-c">#</span> We select the energy of each level and the coupling between them</span>
e0 <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
g <span class="pl-k">=</span> <span class="pl-c1">5.0</span>

epsilon <span class="pl-k">=</span> [<span class="pl-c1">2</span><span class="pl-k">*</span>e0<span class="pl-k">*</span>(i<span class="pl-k">-</span>d<span class="pl-k">/</span><span class="pl-c1">4</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d<span class="pl-k">/</span><span class="pl-c1">2</span>]
epsilon <span class="pl-k">=</span> <span class="pl-c1">sort</span>([epsilon; epsilon])

<span class="pl-c"><span class="pl-c">#</span> The non interacting Hamiltonian</span>
h0 <span class="pl-k">=</span> <span class="pl-c1">sum</span>([epsilon[i]<span class="pl-k">*</span>(<span class="pl-c1">cdm</span>(o,i)<span class="pl-k">*</span><span class="pl-c1">cm</span>(o,i) <span class="pl-k">+</span> <span class="pl-c1">cdm</span>(o,i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">cm</span>(o,i<span class="pl-k">+</span><span class="pl-c1">1</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>(<span class="pl-c1">Int</span>(d)<span class="pl-k">-</span><span class="pl-c1">1</span>)])

<span class="pl-c"><span class="pl-c">#</span> The interacting Hamiltonian</span>
hi <span class="pl-k">=</span> <span class="pl-c1">sum</span>([<span class="pl-c1">sum</span>([<span class="pl-k">if</span> i<span class="pl-k">==</span>j <span class="pl-c1">spzeros</span>(<span class="pl-c1">2</span><span class="pl-k">^</span>d, <span class="pl-c1">2</span><span class="pl-k">^</span>d) <span class="pl-k">else</span> g<span class="pl-k">*</span>(<span class="pl-c1">cdm</span>(o,j)<span class="pl-k">*</span><span class="pl-c1">cdm</span>(o,j<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">cm</span>(o,i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">cm</span>(o,i)) <span class="pl-c1">end</span>
                    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>(<span class="pl-c1">Int</span>(d)<span class="pl-k">-</span><span class="pl-c1">1</span>)]) <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>(<span class="pl-c1">Int</span>(d)<span class="pl-k">-</span><span class="pl-c1">1</span>)])

<span class="pl-c"><span class="pl-c">#</span> The full Hamiltonian</span>
h <span class="pl-k">=</span> h0 <span class="pl-k">-</span> hi

<span class="pl-c"><span class="pl-c">#</span> We compute the fundamental state of the full Hamiltonian</span>
fundamental <span class="pl-k">=</span> <span class="pl-c1">eigvecs</span>(<span class="pl-c1">Matrix</span>(h))[:,<span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> We normalize the state</span>
fundamental <span class="pl-k">=</span> fundamental<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(fundamental<span class="pl-k">'</span><span class="pl-k">*</span>fundamental)

<span class="pl-c"><span class="pl-c">#</span> We initialize a state with fundamental</span>
fund <span class="pl-k">=</span> <span class="pl-c1">State</span>(fundamental,o)

<span class="pl-c"><span class="pl-c">#</span> We can now access some properties, for instance the eigenvalues of the one body matrix</span>
<span class="pl-c1">eigensp</span>(fund)</pre></div>
<p>Output</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="8-element Array{Float64,1}:
 0.688488188313256
 0.688488188313256
 0.575317665651686
 0.575317665651686
 0.424682334348314
 0.424682334348314
 0.311511811686744
 0.311511811686744
"><pre><span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.688488188313256</span>
 <span class="pl-c1">0.688488188313256</span>
 <span class="pl-c1">0.575317665651686</span>
 <span class="pl-c1">0.575317665651686</span>
 <span class="pl-c1">0.424682334348314</span>
 <span class="pl-c1">0.424682334348314</span>
 <span class="pl-c1">0.311511811686744</span>
 <span class="pl-c1">0.311511811686744</span></pre></div>
<p>This can also be done in a more efficient way working in the fixed particle number subspace, or symbolically (non fixed g and e), as you can see in 'examples\6. Solving a superconducting system (Example)'.</p>
<p><a target="_blank" rel="noopener noreferrer" href="/images/quantuminfo.png"><img src="/images/quantuminfo.png" alt="" style="max-width:100%;"></a></p>
</article></div>