<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kissabc-30" class="anchor" aria-hidden="true" href="#kissabc-30"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KissABC 3.0</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francescoalemanno/KissABC.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/francescoalemanno/KissABC.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/francescoalemanno/KissABC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ce8390a441b5da1d707ce1695f825ceac02476e92a12c278571de24aa435d34b/687474703a2f2f636f6465636f762e696f2f6769746875622f6672616e636573636f616c656d616e6e6f2f4b6973734142432e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="http://codecov.io/github/francescoalemanno/KissABC.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://francescoalemanno.github.io/KissABC.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://francescoalemanno.github.io/KissABC.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Table of Contents</h1>
<ul dir="auto">
<li><a href="#usage-guide">Beginners Usage Guide</a></li>
</ul>
<h3 dir="auto"><a id="user-content-release-notes" class="anchor" aria-hidden="true" href="#release-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Release Notes</h3>
<ul dir="auto">
<li>3.0: Added SMC algorithm callable with <code>smc</code> for efficient Approximate bayesian computation, the speedup is 20X for reaching the same epsilon tolerance. Removed <code>AISChain</code> return type in favour of <code>MonteCarloMeasurements</code> particle, this change allows immediate use of the inference results for further processing.</li>
</ul>
<h2 dir="auto"><a id="user-content-usage-guide" class="anchor" aria-hidden="true" href="#usage-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage guide</h2>
<p dir="auto">The ingredients you need to use Approximate Bayesian Computation:</p>
<ol dir="auto">
<li>A simulation which depends on some parameters, able to generate datasets similar to your target dataset if parameters are tuned</li>
<li>A prior distribution over such parameters</li>
<li>A distance function to compare generated dataset to the true dataset</li>
</ol>
<p dir="auto">We will start with a simple example, we have a dataset generated according to an Normal distribution whose parameters are unknown</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tdata=randn(1000).*0.04.+2"><pre>tdata<span class="pl-k">=</span><span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>)<span class="pl-k">.*</span><span class="pl-c1">0.04</span><span class="pl-k">.+</span><span class="pl-c1">2</span></pre></div>
<p dir="auto">we are ofcourse able to simulate normal random numbers, so this constitutes our simulation</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sim((μ,σ)) = randn(1000) .* σ .+ μ"><pre><span class="pl-en">sim</span>((μ,σ)) <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>) <span class="pl-k">.*</span> σ <span class="pl-k">.+</span> μ</pre></div>
<p dir="auto">The second ingredient is a prior over the parameters μ and σ</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KissABC
prior=Factored(Uniform(1,3), Truncated(Normal(0,0.1), 0, 100))"><pre><span class="pl-k">using</span> KissABC
prior<span class="pl-k">=</span><span class="pl-c1">Factored</span>(<span class="pl-c1">Uniform</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>), <span class="pl-c1">Truncated</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0.1</span>), <span class="pl-c1">0</span>, <span class="pl-c1">100</span>))</pre></div>
<p dir="auto">we have chosen a uniform distribution over the interval [1,3] for μ and a normal distribution truncated over ℝ⁺ for σ.</p>
<p dir="auto">Now all that we need is a distance function to compare the true dataset to the simulated dataset, for this purpose comparing mean and variance is optimal,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function cost((μ,σ)) 
    x=sim((μ,σ))
    y=tdata
    d1 = mean(x) - mean(y)
    d2 = std(x) - std(y)
    hypot(d1, d2 * 50)
end"><pre><span class="pl-k">function</span> <span class="pl-en">cost</span>((μ,σ)) 
    x<span class="pl-k">=</span><span class="pl-c1">sim</span>((μ,σ))
    y<span class="pl-k">=</span>tdata
    d1 <span class="pl-k">=</span> <span class="pl-c1">mean</span>(x) <span class="pl-k">-</span> <span class="pl-c1">mean</span>(y)
    d2 <span class="pl-k">=</span> <span class="pl-c1">std</span>(x) <span class="pl-k">-</span> <span class="pl-c1">std</span>(y)
    <span class="pl-c1">hypot</span>(d1, d2 <span class="pl-k">*</span> <span class="pl-c1">50</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now we are all set, we can use <code>AIS</code> which is an Affine Invariant MC algorithm via the <code>sample</code> function, to simulate the posterior distribution for this model, inferring <code>μ</code> and <code>σ</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="approx_density = ApproxKernelizedPosterior(prior,cost,0.005)
res = sample(approx_density,AIS(10),1000,ntransitions=100)"><pre>approx_density <span class="pl-k">=</span> <span class="pl-c1">ApproxKernelizedPosterior</span>(prior,cost,<span class="pl-c1">0.005</span>)
res <span class="pl-k">=</span> <span class="pl-c1">sample</span>(approx_density,<span class="pl-c1">AIS</span>(<span class="pl-c1">10</span>),<span class="pl-c1">1000</span>,ntransitions<span class="pl-k">=</span><span class="pl-c1">100</span>)</pre></div>
<p dir="auto">the repl output is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Sampling 100%|██████████████████████████████████████████████████| Time: 0:00:02
2-element Array{Particles{Float64,1000},1}:
 2.0 ± 0.018
 0.0395 ± 0.00093"><pre lang="TTY" class="notranslate"><code>Sampling 100%|██████████████████████████████████████████████████| Time: 0:00:02
2-element Array{Particles{Float64,1000},1}:
 2.0 ± 0.018
 0.0395 ± 0.00093
</code></pre></div>
<p dir="auto">We chose a tolerance on distances equal to <code>0.005</code>, a number of particles equal to <code>10</code>, we chose a number of steps per sample <code>ntransitions = 100</code> and we acquired <code>1000</code> samples.
For comparison let's extract some prior samples</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prsample=[rand(prior) for i in 1:5000] #some samples from the prior for comparison"><pre>prsample<span class="pl-k">=</span>[<span class="pl-c1">rand</span>(prior) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5000</span>] <span class="pl-c"><span class="pl-c">#</span>some samples from the prior for comparison</span></pre></div>
<p dir="auto">plotting prior and posterior side by side we get:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="images/inf_normaldist.png"><img src="images/inf_normaldist.png" alt="plots of the Inference Results" title="Inference Results" style="max-width: 100%;"></a></p>
<p dir="auto">we can see that the algorithm has correctly inferred both parameters, this exact recipe will work for much more complicated models and simulations, with some tuning.</p>
<p dir="auto">to this same problem we can perhaps even more easily apply <code>smc</code>, a more advanced adaptive sequential monte carlo method</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; smc(prior,cost)
(P = Particles{Float64,79}[2.0 ± 0.0062, 0.0401 ± 0.00081], W = 0.0127, ϵ = 0.011113205245491245)"><pre lang="TTY" class="notranslate"><code>julia&gt; smc(prior,cost)
(P = Particles{Float64,79}[2.0 ± 0.0062, 0.0401 ± 0.00081], W = 0.0127, ϵ = 0.011113205245491245)
</code></pre></div>
<p dir="auto">to know how to tune the configuration defaults of <code>smc</code>, consult the docs :)
for more example look at the <code>examples</code> folder.</p>
</article></div>