<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dynamicnlpmodelsjl" class="anchor" aria-hidden="true" href="#dynamicnlpmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DynamicNLPModels.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://madnlp.github.io/DynamicNLPModels.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="doc" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/MadNLP/DynamicNLPModels.jl/actions"><img src="https://github.com/MadNLP/DynamicNLPModels.jl/actions/workflows/ci.yml/badge.svg" alt="build" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/MadNLP/DynamicNLPModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/56ce32aed39aa7097ffd768ce04eaea3e2768f9a3f313b567597a9040dc1cc15/68747470733a2f2f636f6465636f762e696f2f67682f4d61644e4c502f44796e616d69634e4c504d6f64656c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d325a3138464955345237" alt="codecov" data-canonical-src="https://codecov.io/gh/MadNLP/DynamicNLPModels.jl/branch/main/graph/badge.svg?token=2Z18FIU4R7" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">DynamicNLPModels.jl is a package for <a href="https://julialang.org/" rel="nofollow">Julia</a> designed for representing linear <a href="https://en.wikipedia.org/wiki/Model_predictive_control" rel="nofollow">model predictive control (MPC)</a> problems. It includes an API for building a model from user defined data and querying solutions.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install this package, please use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/MadNLP/DynamicNLPModels.jl.git&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/MadNLP/DynamicNLPModels.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/MadNLP/DynamicNLPModels.jl.git"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MadNLP<span class="pl-k">/</span>DynamicNLPModels<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">DynamicNLPModels.jl can construct both sparse and condensed formulations for MPC problems based on user defined data. We use the methods discussed by <a href="https://doi.org/10.1016/j.automatica.2012.03.010" rel="nofollow">Jerez et al.</a> to eliminate the states and condense the problem. DynamicNLPModels.jl constructs models that are subtypes of <code>AbstractNLPModel</code> from <a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a> enabling both the sparse and condensed models to be solved with a variety of different solver packages in Julia. DynamicNLPModels was designed in part with the goal of solving linear MPC problems on the GPU. This can be done within <a href="https://github.com/MadNLP/MadNLP.jl">MadNLP.jl</a> using <a href="https://github.com/MadNLP/MadNLP.jl/tree/master/lib/MadNLPGPU">MadNLPGPU.jl</a>.</p>
<p dir="auto">The general sparse formulation used within DynamicNLPModels.jl is</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$$\begin{align*}
\min_{s, u, v} \quad &amp; s_N^\top Q_f s_N + \frac{1}{2} \sum_{i = 0}^{N-1} \left[ \begin{array}{c} s_i \ u_i \end{array} \right]^\top \left[ \begin{array}{cc} Q &amp; S \ S^\top &amp; R \end{array} \right] \left[ \begin{array}{c} s_i \ u_i \end{array} \right]\\
\textrm{s.t.} \quad &amp; s_{i+1} = As_i + Bu_i + w_i \quad \forall i = 0, 1, \cdots, N - 1 \\
&amp; u_i = Ks_i + v_i \quad  \forall i = 0, 1, \cdots, N - 1 \\
&amp; g^l \le E s_i + F u_i \le g^u \quad \forall i = 0, 1, \cdots, N - 1\\
&amp; s^l \le s_i \le s^u \quad \forall i = 0, 1, \cdots, N \\
&amp; u^l \le u_i \le u^u \quad \forall i = 0, 1, \cdots, N - 1\\
&amp; s_0 = \bar{s}
\end{align*}$$</math-renderer></p>
<p dir="auto">where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$s_i$</math-renderer> are the states, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$u_i$</math-renderer> are the inputs$, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$N$</math-renderer> is the time horizon, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$\bar{s}$</math-renderer> are the initial states, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$Q$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$R$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$A$</math-renderer>, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$B$</math-renderer> are user defined data. The matrices <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$Q_f$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$S$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$K$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$E$</math-renderer>, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$F$</math-renderer> and the vectors <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$w$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$g^l$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$g^u$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$s^l$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$s^u$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$u^l$</math-renderer>, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$u^u$</math-renderer> are optional data. <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$v_t$</math-renderer> is only needed in the condensed formulation, and it arises when <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$K$</math-renderer> is defined by the user to ensure numerical stability of the condensed problem.</p>
<p dir="auto">The condensed formulation used within DynamicNLPModels.jl is</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$$\begin{align*}
\min_{\boldsymbol{v}} \quad &amp; \frac{1}{2} \boldsymbol{v}^\top \boldsymbol{H} \boldsymbol{v} + \boldsymbol{h}^\top \boldsymbol{v} + \boldsymbol{h}_0\\
\textrm{s.t.} \quad &amp; d^l \le \boldsymbol{J} \boldsymbol{v} \le d^u.
\end{align*}$$</math-renderer></p>
<h2 dir="auto">
<a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">DynamicNLPModels.jl takes user defined data to form a <code>SparseLQDyanmicModel</code> or a <code>DenseLQDynamicModel</code>. The user can first create an object containing the <code>LQDynamicData</code>, or they can pass the data directly to the <code>SparseLQDynamicModel</code> or <code>DenseLQDynamicModel</code> constructors.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DynamicNLPModels, Random, LinearAlgebra

Q  = 1.5 * Matrix(I, (3, 3))
R  = 2.0 * Matrix(I, (2, 2))
A  = rand(3, 3)
B  = rand(3, 2)
N  = 5
s0 = [1.0, 2.0, 3.0]

lqdd = LQDynamicData(s0, A, B, Q, R, N; **kwargs)

sparse_lqdm = SparseLQDynamicModel(lqdd)
dense_lqdm  = DenseLQDynamicModel(lqdd)

# or 

sparse_lqdm = SparseLQDynamicModel(s0, A, B, Q, R, N; **kwargs)
dense_lqdm  = DenseLQDynamicModel(s0, A, B, Q, R, N; **kwargs)"><pre><span class="pl-k">using</span> DynamicNLPModels, Random, LinearAlgebra

Q  <span class="pl-k">=</span> <span class="pl-c1">1.5</span> <span class="pl-k">*</span> <span class="pl-c1">Matrix</span>(I, (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>))
R  <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> <span class="pl-c1">Matrix</span>(I, (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
A  <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
B  <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
N  <span class="pl-k">=</span> <span class="pl-c1">5</span>
s0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>]

lqdd <span class="pl-k">=</span> <span class="pl-c1">LQDynamicData</span>(s0, A, B, Q, R, N; <span class="pl-k">**</span>kwargs)

sparse_lqdm <span class="pl-k">=</span> <span class="pl-c1">SparseLQDynamicModel</span>(lqdd)
dense_lqdm  <span class="pl-k">=</span> <span class="pl-c1">DenseLQDynamicModel</span>(lqdd)

<span class="pl-c"><span class="pl-c">#</span> or </span>

sparse_lqdm <span class="pl-k">=</span> <span class="pl-c1">SparseLQDynamicModel</span>(s0, A, B, Q, R, N; <span class="pl-k">**</span>kwargs)
dense_lqdm  <span class="pl-k">=</span> <span class="pl-c1">DenseLQDynamicModel</span>(s0, A, B, Q, R, N; <span class="pl-k">**</span>kwargs)</pre></div>
<p dir="auto">Optional data (such as <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$s^l$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$s^u$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$S$</math-renderer>, or <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$Q_f$</math-renderer>) can be passed as key word arguments. The models <code>sparse_lqdm</code> or <code>dense_lqdm</code> can be solved by different solvers such as MadNLP.jl or Ipopt (Ipopt requires the extension NLPModelsIpopt.jl). An example script under <code>\examples</code> shows how the dense problem can be solved on a GPU using MadNLPGPU.jl.</p>
<p dir="auto">DynamicNLPModels.jl also includes an API for querying solutions and reseting data. Solutions can be queried using <code>get_u(solver_ref, dynamic_model)</code> and <code>get_s(solver_ref, dynamic_model)</code>. The problem can be reset with a new <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d4ada57dbfba3e51a80206f946bfb8b">$s_0$</math-renderer> by calling <code>reset_s0!(dynamic_model, s0)</code>.</p>
</article></div>