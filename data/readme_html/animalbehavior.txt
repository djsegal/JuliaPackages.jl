<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-animalbehaviorjl" class="anchor" aria-hidden="true" href="#animalbehaviorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AnimalBehavior.jl</h1>
<p dir="auto"><a href="https://github.com/sqwayer/AnimalBehavior.jl/actions"><img src="https://github.com/sqwayer/AnimalBehavior.jl/workflows/CI/badge.svg" alt="Build status (Github Actions)" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/sqwayer/AnimalBehavior.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/267fe9dc23de7606cf8f062ee6123b65442d50ce8671435c4c4f31b05cc2b7c2/687474703a2f2f636f6465636f762e696f2f6769746875622f737177617965722f416e696d616c4265686176696f722e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov.io" data-canonical-src="http://codecov.io/github/sqwayer/AnimalBehavior.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://sqwayer.github.io/AnimalBehavior.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://sqwayer.github.io/AnimalBehavior.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Generative models of animal behavior rely on the same global structure :</p>
<ul dir="auto">
<li>They are defined by a set of <em><strong>latent variables</strong></em> (either fixed parameters or evolving variables)</li>
<li>Those latent variables evolve as a function of external observations by an <em><strong>evolution function</strong></em></li>
<li>Actions are generated by sampling from distributions defined by an <em><strong>observation function</strong></em> of the latent variables</li>
</ul>
<p dir="auto">AnimalBehavior.jl takes advantage of this common structure to wrap some functionnalities of the <a href="https://github.com/TuringLang">Turing langage for dynamic probabilistic programming</a>, in order to simulate and fit behavioral models with a minimal set of specifications from the user.</p>
<h2 dir="auto"><a id="user-content-create-a-model" class="anchor" aria-hidden="true" href="#create-a-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create a model</h2>
<p dir="auto">First, you need to create a <a href="https://github.com/TuringLang">DynamicPPL model</a> using the <code>@model</code> macro, that returns all the latent variables of your model as a <code>NamedTuple</code> :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@model Qlearning(na, ns) = begin
    α ~ Beta()
    logβ ~ Normal(1,1)

    return (α=α, β=exp(logβ), Values = fill(1/na,na,ns))
end

MyModel = Qlearning(2,1)
"><pre><span class="pl-c1">@model</span> <span class="pl-en">Qlearning</span>(na, ns) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    α <span class="pl-k">~</span> <span class="pl-c1">Beta</span>()
    logβ <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)

    <span class="pl-k">return</span> (α<span class="pl-k">=</span>α, β<span class="pl-k">=</span><span class="pl-c1">exp</span>(logβ), Values <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>na,na,ns))
<span class="pl-k">end</span>

MyModel <span class="pl-k">=</span> <span class="pl-c1">Qlearning</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
</pre></div>
<p dir="auto">Latent variables can be sampled from a prior distribution, and/or transformed by any arbitrary function</p>
<p dir="auto">Then you have to define an evolution and an observation functions with the macros <code>@evolution</code>and <code>@observation</code>respectively with the following syntax :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@evolution MyModel begin 
        Values[a,s] += α * (r - Values[a,s]) # or : delta_rule!(s, a, r, Values, α)
    end

@observation MyModel begin
        Categorical(softmax(β * @views(Values[:,s])))
    end"><pre><span class="pl-c1">@evolution</span> MyModel <span class="pl-k">begin</span> 
        Values[a,s] <span class="pl-k">+=</span> α <span class="pl-k">*</span> (r <span class="pl-k">-</span> Values[a,s]) <span class="pl-c"><span class="pl-c">#</span> or : delta_rule!(s, a, r, Values, α)</span>
    <span class="pl-k">end</span>

<span class="pl-c1">@observation</span> MyModel <span class="pl-k">begin</span>
        <span class="pl-c1">Categorical</span>(<span class="pl-c1">softmax</span>(β <span class="pl-k">*</span> <span class="pl-c1">@views</span>(Values[:,s])))
    <span class="pl-k">end</span></pre></div>
<p dir="auto">The expression in the <code>begin</code> <code>end</code> statement can use the <strong>reserved variables names</strong> <code>s</code>, <code>a</code> and <code>r</code> for the current state, action and feedback respectively, and/or any latent variable defined earlier.
Moreover, the observation function must return a <code>Distribution</code> from the <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl package</a>.</p>
<h2 dir="auto"><a id="user-content-simulate-behavior" class="anchor" aria-hidden="true" href="#simulate-behavior"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simulate behavior</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Simulation of a probabilistic reversal task
function pr_feedback(history) # Reverse the correct response every 20 trials
    correct = mod(length(history)/20, 2) &lt; 1 ? 1 : 2
    return rand() &lt; 0.9 ? history[end].a == correct : history[end].a ≠ correct 
end

sim = simulate(MyModel; feedback=pr_feedback);"><pre><span class="pl-c"><span class="pl-c">#</span> Simulation of a probabilistic reversal task</span>
<span class="pl-k">function</span> <span class="pl-en">pr_feedback</span>(history) <span class="pl-c"><span class="pl-c">#</span> Reverse the correct response every 20 trials</span>
    correct <span class="pl-k">=</span> <span class="pl-c1">mod</span>(<span class="pl-c1">length</span>(history)<span class="pl-k">/</span><span class="pl-c1">20</span>, <span class="pl-c1">2</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">1</span> <span class="pl-k">?</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">2</span>
    <span class="pl-k">return</span> <span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">0.9</span> <span class="pl-k">?</span> history[<span class="pl-c1">end</span>]<span class="pl-k">.</span>a <span class="pl-k">==</span> correct <span class="pl-k">:</span> history[<span class="pl-c1">end</span>]<span class="pl-k">.</span>a <span class="pl-k">≠</span> correct 
<span class="pl-k">end</span>

sim <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(MyModel; feedback<span class="pl-k">=</span>pr_feedback);</pre></div>
<p dir="auto"><code>simulate</code> returns a <code>Simulation</code> structure with fields <code>data</code> and <code>latent</code>.</p>
<h2 dir="auto"><a id="user-content-inference" class="anchor" aria-hidden="true" href="#inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inference</h2>
<p dir="auto">The package re-export the <code>sample</code> function to return a <a href="https://github.com/TuringLang/MCMCChains.jl">Chains</a> object, with the following syntax :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sample(model, data, args...; kwargs...)"><pre><span class="pl-c1">sample</span>(model, data, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p dir="auto">e.g. :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="chn = sample(MyModel, sim.data, NUTS(), 1000)"><pre>chn <span class="pl-k">=</span> <span class="pl-c1">sample</span>(MyModel, sim<span class="pl-k">.</span>data, <span class="pl-c1">NUTS</span>(), <span class="pl-c1">1000</span>)</pre></div>
<h2 dir="auto"><a id="user-content-model-comparison" class="anchor" aria-hidden="true" href="#model-comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model comparison</h2>
<p dir="auto">WIP</p>
</article></div>