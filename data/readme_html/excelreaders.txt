<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-excelreaders" class="anchor" aria-hidden="true" href="#excelreaders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExcelReaders</h1>
<p><a href="https://travis-ci.org/queryverse/ExcelReaders.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2871c2a41cbbf3bbf68034db671b8d6cd2646994/68747470733a2f2f7472617669732d63692e6f72672f717565727976657273652f457863656c526561646572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/queryverse/ExcelReaders.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/queryverse/excelreaders-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/d6e2a93472178827eba8e5ff7e8ce60b3a27c7c5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7637623630676672673635716b7174352f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/v7b60gfrg65qkqt5/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/queryverse/ExcelReaders.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5216c1cbba982d407332909284c2a84c06b3194c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f717565727976657273652f457863656c526561646572732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/queryverse/ExcelReaders.jl/badge.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/queryverse/ExcelReaders.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bf0debeeb2584bb6a8c9a0556af92dddcec8b9a1/68747470733a2f2f636f6465636f762e696f2f67682f717565727976657273652f457863656c526561646572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/queryverse/ExcelReaders.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>ExcelReaders is a package that provides functionality to read Excel files.</p>
<p><strong>WARNING</strong>: Version v0.9.0 removed all support for <a href="https://github.com/JuliaData/DataFrames.jl">DataFrames.jl</a>
from this package. The <a href="https://github.com/queryverse/ExcelFiles.jl">ExcelFiles.jl</a>
package now provides functionality to read data from an Excel file into
a <code>DataFrame</code> (or any other table type), and users are encouraged to use
that package for tabular data going forward. Version v0.9.0 also no longer
uses <a href="https://github.com/JuliaStats/DataArrays.jl">DataArrays.jl</a>, but instead
is based on <a href="https://github.com/queryverse/DataValues.jl">DataValues.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Use <code>Pkg.add("ExcelReaders")</code> in Julia to install ExcelReaders and its dependencies.</p>
<p>The package uses the Python xlrd library. If either Python or the xlrd package are not installed on your Mac or Windows system, the package will use the <a href="https://github.com/Luthaf/Conda.jl">Conda.jl</a> package to install all necessary dependencies automatically. If you are on another system you can either install Python and xlrd yourself or instruct PyCall to use Conda.jl to manage its own python install (<code>ENV["PYTHON"]=""; Pkg.build("PyCall")</code> and restart Julia).</p>
<h2><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternatives</h2>
<p>The <a href="https://github.com/aviks/Taro.jl">Taro</a> package also provides Excel file reading functionality. The main difference between the two packages (in terms of Excel functionality) is that ExcelReaders uses the Python package <a href="https://github.com/python-excel/xlrd">xlrd</a> for its processing, whereas Taro uses the Java packages Apache <a href="http://tika.apache.org/" rel="nofollow">Tika</a> and Apache <a href="http://poi.apache.org/" rel="nofollow">POI</a>.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h2>
<p>The most basic usage is this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelReaders

data <span class="pl-k">=</span> <span class="pl-c1">readxl</span>(<span class="pl-s"><span class="pl-pds">"</span>Filename.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1!A1:C4<span class="pl-pds">"</span></span>)</pre></div>
<p>This will return an array with all the data in the cell range A1 to C4 on Sheet1 in the Excel file Filename.xlsx.</p>
<p>If you expect to read multiple ranges from the same Excel file you can get much better performance by opening the Excel file only once:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelReaders

f <span class="pl-k">=</span> <span class="pl-c1">openxl</span>(<span class="pl-s"><span class="pl-pds">"</span>Filename.xlsx<span class="pl-pds">"</span></span>)

data1 <span class="pl-k">=</span> <span class="pl-c1">readxl</span>(f, <span class="pl-s"><span class="pl-pds">"</span>Sheet1!A1:C4<span class="pl-pds">"</span></span>)
data2 <span class="pl-k">=</span> <span class="pl-c1">readxl</span>(f, <span class="pl-s"><span class="pl-pds">"</span>Sheet2!B4:F10<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-reading-a-whole-sheet" class="anchor" aria-hidden="true" href="#reading-a-whole-sheet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading a whole sheet</h2>
<p>The <code>readxlsheet</code> function reads complete Excel sheets, without a need to specify precise range information. The most basic usage is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelReaders

data <span class="pl-k">=</span> <span class="pl-c1">readxlsheet</span>(<span class="pl-s"><span class="pl-pds">"</span>Filename.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>)</pre></div>
<p>This will read all content on Sheet1 in the file Filename.xlsx. Eventual blank rows and columns at the top and left are skipped. <code>readxlsheet</code> takes a number of optional keyword arguments:</p>
<ul>
<li><code>skipstartrows</code> accepts either <code>:blanks</code> (default) or a positive integer. With <code>:blank</code> any empty initial rows are skipped. An integer skips as many rows as specified.</li>
<li><code>skipstartcols</code> accepts either <code>:blanks</code> (default) or a positive integer. With <code>:blank</code> any empty initial columns are skipped. An integer skips as many columns as specified.</li>
<li><code>nrows</code> accepts either <code>:all</code> (default) or a positive integer. With <code>:all</code>, all rows (except skipped ones) are read. An integer specifies the exact number of rows to be read.</li>
<li><code>ncols</code> accepts either <code>:all</code> (default) or a postiive integer. With <code>:all</code>, all columns (except skipped ones) are read. An integer specifies the exact number of columns to be read.</li>
</ul>
<p><code>readxlsheet</code> also accepts an ExcelFile (as obtained from <code>openxl</code>) as its first argument.</p>
</article></div>