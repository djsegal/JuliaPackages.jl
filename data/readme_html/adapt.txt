<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-adapt" class="anchor" aria-hidden="true" href="#adapt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adapt</h1>
<p><a href="https://travis-ci.org/JuliaGPU/Adapt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fa22c360b49ef609dc8c505e5f26922b575d542a/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614750552f41646170742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGPU/Adapt.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The <code>adapt(T, x)</code> function acts like <code>convert(T, x)</code>, but without the
restriction of returning a <code>T</code>. This allows you to "convert" wrapper types like
<code>Adjoint</code> to be GPU compatible (for example) without throwing away the wrapper.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">adapt</span>(CuArray, <span class="pl-k">::</span><span class="pl-c1">Adjoint{Array}</span>)<span class="pl-k">::</span><span class="pl-c1">Adjoint{CuArray}</span></pre></div>
<p>New wrapper types like <code>Adjoint</code> should overload <code>adapt_structure(T, ::Adjoint)</code>
(usually just to forward the call to <code>adapt</code>):</p>
<div class="highlight highlight-source-julia"><pre>Adapt<span class="pl-k">.</span><span class="pl-en">adapt_structure</span>(to, x<span class="pl-k">::</span><span class="pl-c1">Adjoint</span>) <span class="pl-k">=</span> <span class="pl-c1">Adjoint</span>(<span class="pl-c1">adapt</span>(to, <span class="pl-c1">parent</span>(x)))</pre></div>
<p>A similar function, <code>adapt_storage</code>, can be used to define the conversion
behavior for the innermost storage types:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">adapt_storage</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:CuArray}</span>, xs<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>) <span class="pl-k">=</span> <span class="pl-c1">convert</span>(CuArray, xs)</pre></div>
<p>Implementations of <code>adapt_storage</code> will typically be part of libraries that use
Adapt. For example, CuArrays.jl defines methods of
<code>adapt_storage(::Type{&lt;:CuArray}, ...)</code> and uses that to convert different kinds
of arrays, while CUDAnative.jl provides implementations of
<code>adapt_storage(::CUDAnative.Adaptor, ...)</code> to convert various values to
GPU-compatible alternatives.</p>
<p>Packages that define new wrapper types and want to be compatible with packages
that use Adapt.jl should provide implementations of <code>adapt_structure</code> that
preserve the wrapper type. Adapt.jl already provides such methods for array
wrappers that are part of the Julia standard library.</p>
</article></div>