<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-adapt" class="anchor" aria-hidden="true" href="#adapt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adapt</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaGPU/Adapt.jl/actions?query=workflow:CI"><img src="https://github.com/JuliaGPU/Adapt.jl/workflows/CI/badge.svg" alt="" style="max-width:100%;"></a> <a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/A/Adapt.html" rel="nofollow"><img src="https://camo.githubusercontent.com/f40fd476e4f3fdb125d69f76ad81d49fe8dcd0e2ebc0e03389ee61ad2f3a3478/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f412f41646170742e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/A/Adapt.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaGPU/Adapt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62adc62f64ca401201ffbbf7c26d42a80869dcea39d51ac9e4e28e510373d543/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614750552f41646170742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaGPU/Adapt.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The <code>adapt(T, x)</code> function acts like <code>convert(T, x)</code>, but without the
restriction of returning a <code>T</code>. This allows you to "convert" wrapper types like
<code>Adjoint</code> to be GPU compatible (for example) without throwing away the wrapper.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="adapt(CuArray, ::Adjoint{Array})::Adjoint{CuArray}
"><pre><span class="pl-c1">adapt</span>(CuArray, <span class="pl-k">::</span><span class="pl-c1">Adjoint{Array}</span>)<span class="pl-k">::</span><span class="pl-c1">Adjoint{CuArray}</span></pre></div>
<p>New wrapper types like <code>Adjoint</code> should overload <code>adapt_structure(T, ::Adjoint)</code>
(usually just to forward the call to <code>adapt</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Adapt.adapt_structure(to, x::Adjoint) = Adjoint(adapt(to, parent(x)))
"><pre>Adapt<span class="pl-k">.</span><span class="pl-en">adapt_structure</span>(to, x<span class="pl-k">::</span><span class="pl-c1">Adjoint</span>) <span class="pl-k">=</span> <span class="pl-c1">Adjoint</span>(<span class="pl-c1">adapt</span>(to, <span class="pl-c1">parent</span>(x)))</pre></div>
<p>A similar function, <code>adapt_storage</code>, can be used to define the conversion
behavior for the innermost storage types:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="adapt_storage(::Type{&lt;:CuArray}, xs::AbstractArray) = convert(CuArray, xs)
"><pre><span class="pl-en">adapt_storage</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:CuArray}</span>, xs<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>) <span class="pl-k">=</span> <span class="pl-c1">convert</span>(CuArray, xs)</pre></div>
<p>Implementations of <code>adapt_storage</code> will typically be part of libraries that use
Adapt. For example, CUDA.jl defines methods of
<code>adapt_storage(::Type{&lt;:CuArray}, ...)</code> and uses that to convert different kinds
of arrays, while CUDAnative.jl provides implementations of
<code>adapt_storage(::CUDAnative.Adaptor, ...)</code> to convert various values to
GPU-compatible alternatives.</p>
<p>Packages that define new wrapper types and want to be compatible with packages
that use Adapt.jl should provide implementations of <code>adapt_structure</code> that
preserve the wrapper type. Adapt.jl already provides such methods for array
wrappers that are part of the Julia standard library.</p>
</article></div>