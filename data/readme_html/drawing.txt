<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/andrewcooke/Drawing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b89513190c572141104dcb22a5e815f29834ed05/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f44726177696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/Drawing.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Tests failing because of problems with Tk:
<a href="http://pkg.julialang.org/?pkg=Drawing&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/ac327a36babc3419438670afce66f3069c26189c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f44726177696e675f302e342e737667" alt="Drawing" data-canonical-src="http://pkg.julialang.org/badges/Drawing_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Drawing&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/f761b92438918fe1a35ce2bc6cdf176e07dd5fc1/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f44726177696e675f302e352e737667" alt="Drawing" data-canonical-src="http://pkg.julialang.org/badges/Drawing_0.5.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-warning" class="anchor" aria-hidden="true" href="#warning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Warning:</h2>
<p>Currently (Nov 2015) Julia graphics libs seem to be in a mess.  I had
a really bad time just getting basic dependencies installed and
running.  As far as I can tell this isn't my library's fault.  Sorry!</p>
<p>Also, you need to use the development version of the Tk package to
avoid deprecation errors
(<code>Pkg.clone("git@github.com:JuliaLang/Tk.jl.git")</code> or similar).</p>
<h1><a id="user-content-drawing" class="anchor" aria-hidden="true" href="#drawing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Drawing</h1>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#api">API</a>
<ul>
<li><a href="#scopes">Scopes</a></li>
<li><a href="#attributes">Attributes</a></li>
<li><a href="#actions">Actions</a></li>
</ul>
</li>
</ul>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h1>
<p>A library for easy, extensible, drawing (diagrams, lines, shapes).</p>
<p>In other words: simple, imperative vector graphics; a wrapper around Cairo;
an interface similar to Processing.  For a declarative approach, see
<a href="https://github.com/dcjones/Compose.jl">Compose.jl</a>.  For more control and
complexity, use <a href="https://github.com/JuliaLang/Cairo.jl">Cairo.jl</a> directly.</p>
<p>In providing a simple API, the package has two important aims:</p>
<ol>
<li>
<p>Changes to the graphics context are <em>scoped</em>.  This is implemented via "do
blocks".</p>
</li>
<li>
<p>Changes are <em>nested and composable</em>.  So, for example, you can define a
context with certain attributes (ink colour, pen width, etc), and then have
an inner scope that changes a subset of those values.</p>
</li>
</ol>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<h2><a id="user-content-smiley-face" class="anchor" aria-hidden="true" href="#smiley-face"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Smiley Face</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Drawing<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Drawing

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with</span>(<span class="pl-c1">Axes</span>(negative<span class="pl-k">=</span><span class="pl-c1">true</span>), <span class="pl-c1">Pen</span>(<span class="pl-c1">0.2</span>)) <span class="pl-k">do</span>
           <span class="pl-c1">paint</span>(<span class="pl-c1">Ink</span>(<span class="pl-s"><span class="pl-pds">"</span>yellow<span class="pl-pds">"</span></span>)) <span class="pl-k">do</span>
               <span class="pl-c1">circle</span>(<span class="pl-c1">1</span>)           <span class="pl-c"><span class="pl-c">#</span> face background, painted yellow</span>
           <span class="pl-k">end</span>
           <span class="pl-c1">draw</span>() <span class="pl-k">do</span>
               <span class="pl-c1">circle</span>(<span class="pl-c1">1</span>)           <span class="pl-c"><span class="pl-c">#</span> face outline, drawn black (default)</span>
               <span class="pl-c1">circle</span>(<span class="pl-c1">0.5</span>; from<span class="pl-k">=</span><span class="pl-c1">200</span>deg, to<span class="pl-k">=</span><span class="pl-c1">340</span>deg)    <span class="pl-c"><span class="pl-c">#</span> smile</span>
           <span class="pl-k">end</span>
           <span class="pl-c1">paint</span>() <span class="pl-k">do</span>
               <span class="pl-c1">move</span>(<span class="pl-c1">0.3</span>, <span class="pl-c1">0.25</span>)     <span class="pl-c"><span class="pl-c">#</span> right eye position</span>
               <span class="pl-c1">circle</span>(<span class="pl-c1">0.2</span>)         <span class="pl-c"><span class="pl-c">#</span> paint eye</span>
               <span class="pl-c1">move</span>(<span class="pl-k">-</span><span class="pl-c1">0.3</span>, <span class="pl-c1">0.25</span>)    <span class="pl-c"><span class="pl-c">#</span> left eye position</span>
               <span class="pl-c1">circle</span>(<span class="pl-c1">0.2</span>)         <span class="pl-c"><span class="pl-c">#</span> paint eye</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
Press RETURN to close window</pre></div>
<p>which displays this window:</p>
<p><a target="_blank" rel="noopener noreferrer" href="screenshot.png"><img src="screenshot.png" alt="screenshot" style="max-width:100%;"></a></p>
<h2><a id="user-content-transparent-colours" class="anchor" aria-hidden="true" href="#transparent-colours"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transparent Colours</h2>
<p>Pressing return and continuing...</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ColorTypes
julia<span class="pl-k">&gt;</span> r1, r2, r3, n, w <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">200</span>, <span class="pl-c1">0.5</span>
julia<span class="pl-k">&gt;</span> d1, d2, rotn <span class="pl-k">=</span> <span class="pl-c1">120</span>, <span class="pl-k">-</span><span class="pl-c1">140</span>, <span class="pl-c1">40</span>
julia<span class="pl-k">&gt;</span> sat, val, alpha <span class="pl-k">=</span> <span class="pl-c1">0.7</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.1</span>
julia<span class="pl-k">&gt;</span> width <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>pi<span class="pl-k">*</span>r1 <span class="pl-k">/</span> n <span class="pl-k">*</span> w
julia<span class="pl-k">&gt;</span> <span class="pl-c1">with</span>(<span class="pl-c1">Axes</span>(negative<span class="pl-k">=</span><span class="pl-c1">true</span>),
            <span class="pl-c1">Translate</span>(<span class="pl-c1">0.9</span>, <span class="pl-c1">0.9</span>), <span class="pl-c1">Scale</span>(<span class="pl-c1">3</span>),
            <span class="pl-c1">Paper</span>(<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>),
            <span class="pl-c1">Pen</span>(width; cap<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>round<span class="pl-pds">"</span></span>)) <span class="pl-k">do</span>
           <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">shuffle!</span>([i <span class="pl-k">/</span> n <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n])
               hue <span class="pl-k">=</span> x <span class="pl-k">*</span> <span class="pl-c1">360</span>
               theta1 <span class="pl-k">=</span> <span class="pl-c1">deg2rad</span>(rotn <span class="pl-k">+</span> x<span class="pl-k">*</span><span class="pl-c1">360</span>)
               theta2 <span class="pl-k">=</span> theta1 <span class="pl-k">+</span> <span class="pl-c1">deg2rad</span>(d1)
               theta3 <span class="pl-k">=</span> theta1 <span class="pl-k">+</span> <span class="pl-c1">deg2rad</span>(d2)
               <span class="pl-c1">draw</span>(<span class="pl-c1">Ink</span>(<span class="pl-c1">HSVA</span>(hue, sat, val <span class="pl-k">+</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>val)<span class="pl-k">*</span><span class="pl-c1">rand</span>(), alpha))) <span class="pl-k">do</span>
                   <span class="pl-c1">move</span>(r1 <span class="pl-k">*</span> <span class="pl-c1">cos</span>(<span class="pl-k">-</span>theta1), r1  <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-k">-</span>theta1))
                   <span class="pl-c1">line</span>(r2 <span class="pl-k">*</span> <span class="pl-c1">cos</span>(<span class="pl-k">-</span>theta2), r2  <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-k">-</span>theta2))
                   <span class="pl-c1">move</span>(r1 <span class="pl-k">*</span> <span class="pl-c1">cos</span>(<span class="pl-k">-</span>theta1), r1  <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-k">-</span>theta1))
                   <span class="pl-c1">line</span>(r3 <span class="pl-k">*</span> <span class="pl-c1">cos</span>(<span class="pl-k">-</span>theta3), r3  <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-k">-</span>theta3))
               <span class="pl-k">end</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
Press RETURN to close window</pre></div>
<p>displays</p>
<p><a target="_blank" rel="noopener noreferrer" href="screenshot2.png"><img src="screenshot2.png" alt="screenshot" style="max-width:100%;"></a></p>
<h2><a id="user-content-other" class="anchor" aria-hidden="true" href="#other"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other</h2>
<ul>
<li>A <a href="examples/go-1.png">chart</a> showing evolution of a genetic
algorithm over time.</li>
</ul>
<h1><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h1>
<p>The API consists of:</p>
<ol>
<li>
<p><strong>Scopes</strong> introduce <em>attributes</em>, may include either nested <em>scopes</em> or
<em>actions</em>, and may trigger some process (like stroking or filling a path)
at the end.  For example, <code>draw()</code> is a scope that introduces attributes,
includes actions, and draws the path on closing.</p>
</li>
<li>
<p><strong>Attributes</strong> modify the Cairo context for the duration of the scope.  For
example, <code>Ink()</code> sets the Cairo source.</p>
</li>
<li>
<p><strong>Actions</strong> typically describe a Cairo path.  For example, <code>move()</code> and
<code>line()</code>.</p>
</li>
</ol>
<p>These can be seen in the example below, which has three scopes, nested two
deep, and includes the attributes <code>Ink()</code>, <code>Pen()</code>, etc.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">with</span>(<span class="pl-c1">PNG</span>(<span class="pl-s"><span class="pl-pds">"</span>red-blue-square.png<span class="pl-pds">"</span></span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>), <span class="pl-c1">Ink</span>(<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>), <span class="pl-c1">Pen</span>(<span class="pl-c1">0.1</span>)) <span class="pl-k">do</span>
    <span class="pl-c1">draw</span>(<span class="pl-c1">Ink</span>(<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>)) <span class="pl-k">do</span>
        <span class="pl-c1">move</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
        <span class="pl-c1">line</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>)
        <span class="pl-c1">line</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
    <span class="pl-k">end</span>
	<span class="pl-c1">draw</span>() <span class="pl-k">do</span>  <span class="pl-c"><span class="pl-c">#</span> the Ink is red here - the scope above has closed</span>
		<span class="pl-c1">line</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
        <span class="pl-c1">line</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
	<span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p><a href="test/red-blue-square.jl"><img align="left" src="test/target/red-blue-square.png" style="max-width:100%;"></a></p>
<p>The default coordinate system is from 0 to 1 (on the shorter axis, origin
bottom left), with 10% of the space used as a border on each side.  Unlike
"raw" cairo, the "current point" is preserved across strokes.</p>
<h2><a id="user-content-scopes" class="anchor" aria-hidden="true" href="#scopes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scopes</h2>
<ul>
<li>
<p><code>with()</code> defines a scope, but takes no action on closing.</p>
</li>
<li>
<p><code>draw()</code> defines a scope and, on closing, draws the current path.</p>
</li>
<li>
<p><code>paint()</code> defines a scope and, on closing, fills the current path.</p>
</li>
<li>
<p><code>cairo()</code> should be followed by a do block with a single argument, which is
the cairo context.  This can then be used to make arbitrary calls to Cairo
functions.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Drawing

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Cairo

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cairo</span>() <span class="pl-k">do</span> ctx
  		<span class="pl-c1">line_to</span>(ctx, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
  		<span class="pl-c1">stroke</span>(ctx)
  	 <span class="pl-k">end</span>
Press RETURN to close window</pre></div>
</li>
</ul>
<p>There are some constraints on how scopes are used: the <code>with()</code> scope cannot
contain actions; the <code>draw()</code>, <code>paint()</code> and <code>cairo()</code> scopes cannot contain
nested scopes.</p>
<h2><a id="user-content-attributes" class="anchor" aria-hidden="true" href="#attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Attributes</h2>
<p>There are two kinds of attribute: initial and dynamic.</p>
<p>The order of initial attributes is not important, but they can only appear in
the outermost scope.  The order of dynamic attributes may be important (eg the
relative order of <code>Scale()</code> and <code>Translate()</code>) and follows the order given in
the scope, from left to right.</p>
<h3><a id="user-content-initial-attributes" class="anchor" aria-hidden="true" href="#initial-attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Initial Attributes</h3>
<ul>
<li>
<p><code>PNG(path, width_px, height_px)</code> initializes a Cairo context and, at the end
of the scope, writes a PNG format image, of the given size, to the given
path.  Here width and height are measured in <em>pixels</em>.</p>
</li>
<li>
<p><code>PDF(path, width_mm, height_mm)</code> initializes a Cairo context and, at the end
of the scope, writes a PDF format image, of the given size, to the given
path.  Here width and height are measured in <em>mm</em>.</p>
</li>
<li>
<p><code>PDF(path; size="a4", orientation="landscape")</code> initializes a Cairo context
and, at the end of the scope, writes a PDF format image, of the given size,
to the given path.</p>
</li>
<li>
<p><code>TK(width_px, height_px; name="Drawing", destroy=true)</code> initializes a Cairo
context associated with a Tk window, which is displayed at the end of the
scope.  If <code>destroy=true</code> then the user is asked to press return, after which
the window is destroyed; if it is false then there is no prompt and the
window remains on the screen (until the window is closed by the user or
julia exits).</p>
</li>
<li>
<p><code>Paper(background)</code> sets the background colour.</p>
</li>
<li>
<p><code>Axes(; scale=1, border=0.1, centred=true, negative=false)</code> Sets the
Cairo user coordinates.  Excluding the border (measured as a
fraction of the smallest side), the coordinate system is either
bottom left, or centred, and is scaled uniformly (ie assuming square
pixels), so that the smallest axis has the given scale (length).  If
<code>negative=true</code> then the axis is from <code>-scale</code> to <code>scale</code>.</p>
<p>The <code>scale</code> can also be a tuple, <code>(nx, ny)</code>.  In that case, the
scale is chosen so that both those scales fit within the plotting
area (but pixels remain square).</p>
<p>Below are plotted unit axes (x is horizontal) for 100x140 pixel
images, with a border of 0.1 (ie 10 pixels), where the landscape
axes extend to negative values.  Note that drawing is not clipped to
the unit axes area - it can extend over the whole page.</p>
<p><a href="test/portrait.jl"><img src="test/target/portrait.png" alt="portrait" style="max-width:100%;"></a>
<a href="test/negative-landscape.jl"><img src="test/target/negative-landscape.png" alt="landscape, negative" style="max-width:100%;"></a></p>
<p><em>Click on image to see associated script.</em></p>
</li>
</ul>
<h3><a id="user-content-dynamic-attributes" class="anchor" aria-hidden="true" href="#dynamic-attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dynamic Attributes</h3>
<ul>
<li>
<p><code>Ink(colour)</code> sets the Cairo source (ie the colour used to draw or paint).
The colour can be a <code>Color</code> (see the Colors.jl package) or string ("red",
"blue", etc).</p>
</li>
<li>
<p><code>Pen(width; cap=..., join=...)</code> sets the Cairo stroke properties (cap and
join can be strings or constants from the Cairo.jl package).  Omitted values
are unchanged.</p>
<p><strong>Note:</strong> pen width is in user units, but does not change if <code>Scale()</code> is
used <em>afterwards</em>.</p>
</li>
<li>
<p><code>Pen(; cap=..., join=...)</code> as above, but allows width to be omitted (in
which case the previous value is used).</p>
<p>Below, example lines with cap/join (from left to right) of round/round,
butt/mitre, square/bevel.</p>
<p><a href="test/round-round.jl"><img src="test/target/round-round.png" alt="round/round" style="max-width:100%;"></a>
<a href="test/butt-mitre.jl"><img src="test/target/butt-mitre.png" alt="butt/mitre" style="max-width:100%;"></a>
<a href="test/square-bevel.jl"><img src="test/target/square-bevel.png" alt="square/bevel" style="max-width:100%;"></a></p>
<p><em>Click on image to see associated script.</em></p>
</li>
<li>
<p><code>Scale(factor)</code> scales the Cairo user coordinates.  This is a relative
correction - values smaller than one mean that the same shape (ie the same
coordinates) displays a smaller result.</p>
<p><strong>Note:</strong> To scale the initial axes to have a range of 0-100, say, use
<code>Scale(1/100)</code> (ie use the reciprocal of the range required).</p>
</li>
<li>
<p><code>Translate(x, y)</code> translates the Cairo user coordinates.  This is a relative
correction - the same shape (ie the same coordinates) appear shifted by the
given x and y offsets.</p>
<p><a href="test/square.jl"><img src="test/target/square.png" alt="default" style="max-width:100%;"></a>
<a href="test/square-scale.jl"><img src="test/target/square-scale.png" alt="scale" style="max-width:100%;"></a>
<a href="test/square-scale-translate.jl"><img src="test/target/square-scale-translate.png" alt="scale+translate" style="max-width:100%;"></a></p>
<p><em>Click on image to see associated script.</em></p>
</li>
</ul>
<h2><a id="user-content-actions" class="anchor" aria-hidden="true" href="#actions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Actions</h2>
<p>Currently, all actions affect the Cairo path.</p>
<ul>
<li>
<p><code>move(x, y)</code> moves the current point to given point in user coordinates.</p>
</li>
<li>
<p><code>line(x, y)</code> creates a straught line path between the current point and the
given point, in user coordinates.</p>
</li>
<li>
<p><code>circle(radius; from=0, to=360)</code> create a circle centred at the current
point, with a given radius.  Setting <code>from</code> and <code>to</code> to smaller angles
creates an arc (incomplete circle, with angles measured anti-clockwise from
the x axis, in degrees).</p>
</li>
<li>
<p><code>rectangle(width, height; align=1, rotate=0)</code> create a rectangle, rotated
and placed relative to the current point using the "telephone pad" align (1
is top left, 9 is bottom right).</p>
</li>
<li>
<p><code>square(side; align=1, rotate=0)</code> create a square, rotated and placed
relative to the current point using the "telephone pad" align (1 is top
left, 9 is bottom right).</p>
</li>
<li>
<p><code>text(s; align=1, rotate=0)</code> create the given text, rotated and placed
relative to the current point using the "telephone pad" align (1 is top
left, 9 is bottom right).</p>
</li>
</ul>
<p>To clarify the <code>align</code> parameter, here are some text paths, align to the
nearest orange cross.</p>
<p><a href="test/text-align.jl"><img src="test/target/text-align.png" alt="align" style="max-width:100%;"></a></p>
<p><em>Click on image to see associated script.</em></p>
<h1><a id="user-content-changes" class="anchor" aria-hidden="true" href="#changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Changes</h1>
<ul>
<li>Post 0.1: Changed <code>Axes()</code> so that what was <code>centred</code> is now <code>negative</code>,
while what is now <code>centred</code> is <em>really</em> centred.</li>
</ul>
</article></div>