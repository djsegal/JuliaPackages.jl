<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-metadatajl" class="anchor" aria-hidden="true" href="#metadatajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Metadata.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/Tokazama/Metadata.jl/workflows/CI/badge.svg"><img src="https://github.com/Tokazama/Metadata.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/Metadata.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable-docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/Metadata.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev-docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Tokazama/Metadata.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f71c632073708aeb2270a51d98194baa04a80b6d577cb6a9c718fa9913525aba/68747470733a2f2f636f6465636f762e696f2f67682f546f6b617a616d612f4d657461646174612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d687837686249496f7845" alt="codecov" data-canonical-src="https://codecov.io/gh/Tokazama/Metadata.jl/branch/master/graph/badge.svg?token=hx7hbIIoxE" style="max-width:100%;"></a></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h1>
<p>The term "metadata" is widely used across very different applications.
Therefore, "metadata" may translate to very different structures and implementations in code.
The <code>Metadata</code> package attempts to provide a generic interface for interacting with metadata in Julia that is agnostic to the exact type of metadata present.
This package typically assumes metadata to be a collection of values paired to <code>Symbol</code> keys (e.g., <code>AbstractDict{Symbol,Any}</code>, <code>NamedTuple</code>), but metadata that doesn't perfectly fit this criteria should still work with most methods if adhering to the basic interface.</p>
<h1><a id="user-content-attaching-metadata" class="anchor" aria-hidden="true" href="#attaching-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Attaching Metadata</h1>
<p>The most important method to know is <code>attach_metadata</code>.
It's intended to give users a generic way of attaching metadata to any given type without worrying about the particulars what type is appropriate for binding metadata to a particular.
For example, attaching metadata to an array should produce something that can act like an array still.
Instead of requiring users to know what type is used internally (<code>Metadata.MetaArray</code>), an appropriate type is chosen by default and the method of accessing metadata is the same.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Metadata

julia&gt; x = ones(2, 2);

julia&gt; meta = (x = 1, y = 2);

julia&gt; mx = attach_metadata(x, meta)
2×2 attach_metadata(::Matrix{Float64}, ::NamedTuple{(:x, :y), Tuple{Int64, Int64}}
  • metadata:
     x = 1
     y = 2
)
 1.0  1.0
 1.0  1.0

julia&gt; mx.x
1

julia&gt; mx.y
2

julia&gt; attach_metadata(x, (x = 1, y = 2, suppress= [:x]))
2×2 attach_metadata(::Matrix{Float64}, ::NamedTuple{(:x, :y, :suppress), Tuple{Int64, Int64, Vector{Symbol}}}
  • metadata:
     x = &lt;suppressed&gt;
     y = 2
)
 1.0  1.0
 1.0  1.0

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Metadata

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> meta <span class="pl-k">=</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> mx <span class="pl-k">=</span> <span class="pl-c1">attach_metadata</span>(x, meta)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">attach_metadata</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:x, :y), Tuple{Int64, Int64}}</span>
  • metadata<span class="pl-k">:</span>
     x <span class="pl-k">=</span> <span class="pl-c1">1</span>
     y <span class="pl-k">=</span> <span class="pl-c1">2</span>
)
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> mx<span class="pl-k">.</span>x
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> mx<span class="pl-k">.</span>y
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">attach_metadata</span>(x, (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, suppress<span class="pl-k">=</span> [<span class="pl-c1">:x</span>]))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> <span class="pl-c1">attach_metadata</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:x, :y, :suppress), Tuple{Int64, Int64, Vector{Symbol}}}</span>
  • metadata<span class="pl-k">:</span>
     x <span class="pl-k">=</span> <span class="pl-k">&lt;</span>suppressed<span class="pl-k">&gt;</span>
     y <span class="pl-k">=</span> <span class="pl-c1">2</span>
)
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
</pre></div>
<p>There are three things you should notice from the previous example:</p>
<ol>
<li>The display is nearly identical to how the parent <code>x</code> would be printed. The only addition is a list of the metadata and the argument used to bind the <code>x</code> and <code>meta</code>.</li>
<li>We can access the metadata as if they were properties.</li>
<li>We can suppress the printing of any value if <code>metadata(x, :suppress)</code> returns a collection of symbols containing that value.</li>
</ol>
<p>There are a limited number of interfaces that require special types for binding metadata.
The rest are bound to <code>Metadata.MetaStruct</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; mr = attach_metadata(3//5, meta)
attach_metadata(3//5, ::NamedTuple{(:x, :y), Tuple{Int64, Int64}})
  • metadata:
     x = 1
     y = 2

julia&gt; propertynames(mr)
(:x, :y)

julia&gt; mr.num
3

julia&gt; mr.den
5
"><pre>julia<span class="pl-k">&gt;</span> mr <span class="pl-k">=</span> <span class="pl-c1">attach_metadata</span>(<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">5</span>, meta)
<span class="pl-c1">attach_metadata</span>(<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">5</span>, <span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:x, :y), Tuple{Int64, Int64}}</span>)
  • metadata<span class="pl-k">:</span>
     x <span class="pl-k">=</span> <span class="pl-c1">1</span>
     y <span class="pl-k">=</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(mr)
(<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)

julia<span class="pl-k">&gt;</span> mr<span class="pl-k">.</span>num
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> mr<span class="pl-k">.</span>den
<span class="pl-c1">5</span></pre></div>
<p>Here we attached the same metadata to a rational number.
Again, our metadata is now considered the properties of <code>mr</code>, but we can still access the parent's properties.</p>
<p>If the type you want to attach metadata to is mutable then each instance has a unique global identifier and you may attach metadata to a global dictionary.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = ones(2, 2);

julia&gt; @attach_metadata(x, meta);

julia&gt; @metadata!(x, :z, 3);

julia&gt; @metadata(x, :z)
3

julia&gt; Pair(:x, 1) in @metadata(x)
true
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@attach_metadata</span>(x, meta);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@metadata!</span>(x, <span class="pl-c1">:z</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@metadata</span>(x, <span class="pl-c1">:z</span>)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pair</span>(<span class="pl-c1">:x</span>, <span class="pl-c1">1</span>) <span class="pl-k">in</span> <span class="pl-c1">@metadata</span>(x)
<span class="pl-c1">true</span></pre></div>
<p>If users want to access all of the metadata from one structure and attach it to another they should instead use <code>share_metadata(src, dst)</code> or <code>copy_metadata(src, dst)</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; mx = attach_metadata(ones(2, 2), @metadata(x));

julia&gt; mx2 = share_metadata(mx, ones(2, 2));

julia&gt; metadata(mx2) === metadata(mx)
true

julia&gt; mx3 = copy_metadata(mx2, ones(2, 2));

julia&gt; metadata(mx3) === metadata(mx2)
false

julia&gt; metadata(mx3) == metadata(mx2)
true
"><pre>julia<span class="pl-k">&gt;</span> mx <span class="pl-k">=</span> <span class="pl-c1">attach_metadata</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">@metadata</span>(x));

julia<span class="pl-k">&gt;</span> mx2 <span class="pl-k">=</span> <span class="pl-c1">share_metadata</span>(mx, <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">metadata</span>(mx2) <span class="pl-k">===</span> <span class="pl-c1">metadata</span>(mx)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> mx3 <span class="pl-k">=</span> <span class="pl-c1">copy_metadata</span>(mx2, <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">metadata</span>(mx3) <span class="pl-k">===</span> <span class="pl-c1">metadata</span>(mx2)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">metadata</span>(mx3) <span class="pl-k">==</span> <span class="pl-c1">metadata</span>(mx2)
<span class="pl-c1">true</span></pre></div>
<h1><a id="user-content-creating-new-metadata-types" class="anchor" aria-hidden="true" href="#creating-new-metadata-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating New Metadata Types</h1>
<p>This package creates a very minimal number of dedicated structures and creating new dedicated structures that use this interface is encouraged.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="abstract type AbstractNoop end

struct Noop &lt;: AbstractNoop end

struct MetaNoop{P&lt;:AbstractNoop,M} &lt;: AbstractNoop
    parent::P
    metadata::M
end

Metadata.metadata(x::MetaNoop) = getfield(x, :metadata)
Metadata.attach_metadata(x::AbstractNoop, m) = MetaNoop(x, m)
Metadata.metadata_type(::Type{MetaNoop{P,M}}) where {P,M} = M

ArrayInterface.parent_type(::Type{MetaNoop{P,M}}) where {P,M} = P
Base.parent(x::MetaNoop) = getfield(x, :parent)
"><pre><span class="pl-k">abstract type</span> AbstractNoop <span class="pl-k">end</span>

<span class="pl-k">struct</span> Noop <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractNoop</span> <span class="pl-k">end</span>

<span class="pl-k">struct</span> MetaNoop{P<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractNoop</span>,M} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractNoop</span>
    parent<span class="pl-k">::</span><span class="pl-c1">P</span>
    metadata<span class="pl-k">::</span><span class="pl-c1">M</span>
<span class="pl-k">end</span>

Metadata<span class="pl-k">.</span><span class="pl-en">metadata</span>(x<span class="pl-k">::</span><span class="pl-c1">MetaNoop</span>) <span class="pl-k">=</span> <span class="pl-c1">getfield</span>(x, <span class="pl-c1">:metadata</span>)
Metadata<span class="pl-k">.</span><span class="pl-en">attach_metadata</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractNoop</span>, m) <span class="pl-k">=</span> <span class="pl-c1">MetaNoop</span>(x, m)
Metadata<span class="pl-k">.</span><span class="pl-en">metadata_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MetaNoop{P,M}}</span>) <span class="pl-k">where</span> {P,M} <span class="pl-k">=</span> M

ArrayInterface<span class="pl-k">.</span><span class="pl-en">parent_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MetaNoop{P,M}}</span>) <span class="pl-k">where</span> {P,M} <span class="pl-k">=</span> P
Base<span class="pl-k">.</span><span class="pl-en">parent</span>(x<span class="pl-k">::</span><span class="pl-c1">MetaNoop</span>) <span class="pl-k">=</span> <span class="pl-c1">getfield</span>(x, <span class="pl-c1">:parent</span>)</pre></div>
<p>It's advised that <code>Metadata.test_wrapper(MetaNoop, Noop())</code> is run to ensure it works.
Note that using the dot operator (<code>.</code>) that aliases <code>getproperty</code> and <code>setproperty!</code> is not necessary.</p>
</article></div>