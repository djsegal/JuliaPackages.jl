<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-multijump" class="anchor" aria-hidden="true" href="#multijump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MultiJuMP</h1>
<p><a href="https://travis-ci.org/anriseth/MultiJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f05bba5987f489db0090375ae1b1b794012cfbaf/68747470733a2f2f7472617669732d63692e6f72672f616e7269736574682f4d756c74694a754d502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/anriseth/MultiJuMP.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/41850916" rel="nofollow"><img src="https://camo.githubusercontent.com/d76a94a11756b913b840fdafd3e5b613383cfbbb/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f34313835303931362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/41850916.svg" style="max-width:100%;"></a></p>
<p>MultiJuMP enables the user to easily run multiobjective optimisation problems
and generate Pareto fronts. The code is built as an extension of
<a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a>.
We have implemented three ways to trace out the Pareto front:</p>
<ul>
<li>Normal Boundary Intersection (<code>solve(m, method = NBI())</code>)
<ul>
<li>This method is applicable only for nonlinear optimisation</li>
</ul>
</li>
<li>Weighted sums (<code>solve(m, method = WeightedSum())</code>)</li>
<li>Constraint methods (<code>solve(m, method = EpsilonCons())</code>)
<ul>
<li>This method only works for biobjective optimisation as of now</li>
</ul>
</li>
</ul>
<p><strong>Disclaimer</strong>: MultiJuMP is <em>not</em> developed or maintained by the JuMP developers.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In Julia, call <code>Pkg.add("MultiJuMP")</code> to install MultiJuMP.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Have a look at the tests and <code>examples/</code> directory for different use cases, including
tri-objective Pareto fronts.</p>
<p>MultiJuMP supports linear problems using the <code>linear=true</code> keyword when
calling <code>multi_model(linear=true)</code>. Currently, only the <code>EpsilonCons()</code>
and <code>WeightedSum()</code> methods are supported for linear problems.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MultiJuMP, JuMP
<span class="pl-k">using</span> Clp<span class="pl-k">:</span> ClpSolver

<span class="pl-k">const</span> mmodel <span class="pl-k">=</span> <span class="pl-c1">multi_model</span>(solver <span class="pl-k">=</span> <span class="pl-c1">ClpSolver</span>(), linear <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-k">const</span> y <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(mmodel, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span>)
<span class="pl-k">const</span> z <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(mmodel, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> z <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span>)
<span class="pl-c1">@constraint</span>(mmodel, y <span class="pl-k">+</span> z <span class="pl-k">&lt;=</span> <span class="pl-c1">15.0</span>)

<span class="pl-c"><span class="pl-c">#</span> objectives</span>
<span class="pl-k">const</span> exp_obj1 <span class="pl-k">=</span> <span class="pl-c1">@expression</span>(mmodel, <span class="pl-k">-</span>y <span class="pl-k">+</span><span class="pl-c1">0.05</span> <span class="pl-k">*</span> z)
<span class="pl-k">const</span> exp_obj2 <span class="pl-k">=</span> <span class="pl-c1">@expression</span>(mmodel, <span class="pl-c1">0.05</span> <span class="pl-k">*</span> y <span class="pl-k">-</span> z)
<span class="pl-k">const</span> obj1 <span class="pl-k">=</span> <span class="pl-c1">SingleObjective</span>(exp_obj1)
<span class="pl-k">const</span> obj2 <span class="pl-k">=</span> <span class="pl-c1">SingleObjective</span>(exp_obj2)

<span class="pl-c"><span class="pl-c">#</span> setting objectives in the data</span>
<span class="pl-k">const</span> multim <span class="pl-k">=</span> <span class="pl-c1">get_multidata</span>(mmodel)
multim<span class="pl-k">.</span>objectives <span class="pl-k">=</span> [obj1, obj2]

<span class="pl-c1">solve</span>(mmodel, method <span class="pl-k">=</span> <span class="pl-c1">WeightedSum</span>())

<span class="pl-c"><span class="pl-c">#</span> Get the Utopia and Nadir points</span>
utopiapoint <span class="pl-k">=</span> <span class="pl-c1">getutopia</span>(multim)
nadirpoint <span class="pl-k">=</span> <span class="pl-c1">getnadir</span>(multim)</pre></div>
<p>Plotting  with <code>Plots.jl</code> is supported via recipes:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots<span class="pl-k">:</span> plot, title!
pltlin <span class="pl-k">=</span> <span class="pl-c1">plot</span>(multim)
<span class="pl-c1">title!</span>(pltlin, <span class="pl-s"><span class="pl-pds">"</span>Extrema of the Pareto front<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Show Utopia and Nadir points</span>
<span class="pl-c"><span class="pl-c">#</span> (This is probably a hacky way to do this)</span>
<span class="pl-c1">scatter!</span>(pltlin,
    [utopiapoint[<span class="pl-c1">1</span>], nadirpoint[<span class="pl-c1">1</span>]], [utopiapoint[<span class="pl-c1">2</span>], nadirpoint[<span class="pl-c1">2</span>]],
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Utopia/Nadir<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="./img/linear.svg"><img src="./img/linear.svg" alt="Linear pareto front" style="max-width:100%;"></a></p>
<p>As a non-linear usage example, we implement the test from
<em>Das and Dennis, 1998: Normal-boundary intersection: A new method for
generating the Pareto surface in nonlinear multicriteria optimization problems</em>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MultiJuMP, JuMP
<span class="pl-k">using</span> Ipopt

m <span class="pl-k">=</span> <span class="pl-c1">multi_model</span>(solver <span class="pl-k">=</span> <span class="pl-c1">IpoptSolver</span>())
<span class="pl-c1">@variable</span>(m, x[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
<span class="pl-c1">@NLexpression</span>(m, f1, <span class="pl-c1">sum</span>(x[i]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>))
<span class="pl-c1">@NLexpression</span>(m, f2, <span class="pl-c1">3</span>x[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">2</span>x[<span class="pl-c1">2</span>]<span class="pl-k">-</span>x[<span class="pl-c1">3</span>]<span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">0.01</span><span class="pl-k">*</span>(x[<span class="pl-c1">4</span>]<span class="pl-k">-</span>x[<span class="pl-c1">5</span>])<span class="pl-k">^</span><span class="pl-c1">3</span>)
<span class="pl-c1">@NLconstraint</span>(m, x[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">2</span>x[<span class="pl-c1">2</span>]<span class="pl-k">-</span>x[<span class="pl-c1">3</span>]<span class="pl-k">-</span><span class="pl-c1">0.5</span>x[<span class="pl-c1">4</span>]<span class="pl-k">+</span>x[<span class="pl-c1">5</span>]<span class="pl-k">==</span><span class="pl-c1">2</span>)
<span class="pl-c1">@NLconstraint</span>(m, <span class="pl-c1">4</span>x[<span class="pl-c1">1</span>]<span class="pl-k">-</span><span class="pl-c1">2</span>x[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">0.8</span>x[<span class="pl-c1">3</span>]<span class="pl-k">+</span><span class="pl-c1">0.6</span>x[<span class="pl-c1">4</span>]<span class="pl-k">+</span><span class="pl-c1">0.5</span>x[<span class="pl-c1">5</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>)
<span class="pl-c1">@NLconstraint</span>(m, <span class="pl-c1">sum</span>(x[i]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)

iv1 <span class="pl-k">=</span> [<span class="pl-c1">0.3</span>, <span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.26</span>, <span class="pl-k">-</span><span class="pl-c1">0.13</span>, <span class="pl-c1">0.28</span>] <span class="pl-c"><span class="pl-c">#</span> Initial guess</span>
obj1 <span class="pl-k">=</span> <span class="pl-c1">SingleObjective</span>(f1, sense <span class="pl-k">=</span> <span class="pl-c1">:Min</span>,
                       iv <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>(<span class="pl-c1">:x</span> <span class="pl-k">=&gt;</span> iv1))
obj2 <span class="pl-k">=</span> <span class="pl-c1">SingleObjective</span>(f2, sense <span class="pl-k">=</span> <span class="pl-c1">:Min</span>)

md <span class="pl-k">=</span> <span class="pl-c1">get_multidata</span>(m)
md<span class="pl-k">.</span>objectives <span class="pl-k">=</span> [obj1, obj2]
md<span class="pl-k">.</span>pointsperdim <span class="pl-k">=</span> <span class="pl-c1">20</span>
<span class="pl-c1">solve</span>(m, method <span class="pl-k">=</span> <span class="pl-c1">NBI</span>(<span class="pl-c1">false</span>)) <span class="pl-c"><span class="pl-c">#</span> or method = WeightedSum() or method = EpsilonCons()</span>

<span class="pl-c"><span class="pl-c">#</span> Get the Utopia and Nadir points</span>
utopiapoint <span class="pl-k">=</span> <span class="pl-c1">getutopia</span>(md)
nadirpoint <span class="pl-k">=</span> <span class="pl-c1">getnadir</span>(md)

<span class="pl-k">using</span> Plots
pltnbi <span class="pl-k">=</span> <span class="pl-c1">plot</span>(md)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="./img/pareto_example.svg"><img src="./img/pareto_example.svg" alt="NBI Pareto front example" style="max-width:100%;"></a></p>
</article></div>