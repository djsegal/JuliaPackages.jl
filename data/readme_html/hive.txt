<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hivejl" class="anchor" aria-hidden="true" href="#hivejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hive.jl</h1>
<p dir="auto">A client for distributed SQL engines that provide a HiveServer2 interface.
E.g.: <a href="https://hive.apache.org/" rel="nofollow">Hive</a>, <a href="http://spark.apache.org/sql/" rel="nofollow">Spark SQL</a>, <a href="http://impala.io/" rel="nofollow">Impala</a></p>
<p dir="auto"><a href="https://travis-ci.org/JuliaDatabases/Hive.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7e5f30b29f21d43bf19233d288b41dcc004ee7d65a801c76d107b5ff57ec8448/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614461746162617365732f486976652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDatabases/Hive.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-connecting" class="anchor" aria-hidden="true" href="#connecting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Connecting</h2>
<p dir="auto">To connect to the server, create an instance of HiveSession.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="session = HiveSession()"><pre class="notranslate"><code>session = HiveSession()
</code></pre></div>
<p dir="auto">Without any parameters, this attempts to connect to a server running on <code>localhost</code> port <code>10000</code>.
A remote server can be connected to by specifying the hostname and port number.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="session = HiveSession(&quot;localhost&quot;, 10000)"><pre class="notranslate"><code>session = HiveSession("localhost", 10000)
</code></pre></div>
<p dir="auto">As of now only SASL-Plain authentication is supported, without any <code>qop</code>. The default implementation
authenticates with the same user-id as that of the login shell. That can be overridden by providing
an appropriate instance of <code>HiveAuth</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="session = HiveSession(&quot;localhost&quot;, 10000, HiveAuthSASLPlain(&quot;uid&quot;, &quot;pwd&quot;, &quot;zid&quot;))"><pre class="notranslate"><code>session = HiveSession("localhost", 10000, HiveAuthSASLPlain("uid", "pwd", "zid"))
</code></pre></div>
<p dir="auto">The thrift <code>TBinaryProtocol</code> is used by default, which is also the default for most server setups.
Other protocols can be used by specifying the optional named parameter <code>tprotocol</code>.
As of now, <code>:binary</code> and <code>:compact</code> protocols are supported.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="session = HiveSession(&quot;localhost&quot;, 10000; tprotocol=:binary)"><pre class="notranslate"><code>session = HiveSession("localhost", 10000; tprotocol=:binary)
</code></pre></div>
<h2 dir="auto"><a id="user-content-executing-queries" class="anchor" aria-hidden="true" href="#executing-queries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Executing Queries</h2>
<p dir="auto">Statement to be executed can be DML, DDL, SET, etc.</p>
<p dir="auto">Optional <code>config</code> parameter can have additional keyword parameters that will be passed as configuration
properties that are overlayed on top of the the existing session configuration before this statement is
executed. They apply to this statement only and are not permanent.</p>
<p dir="auto">When <code>async</code> is <code>true</code>, execution is asynchronous and a <code>PendingResult</code> may be returned.
If the returned value is a <code>PendingResult</code>:</p>
<ul dir="auto">
<li><code>isready</code> must be called on the <code>PendingResult</code> instance to check for completion.</li>
<li>once ready, calling <code>result</code> on it returns <code>ResultSet</code></li>
<li>when not ready, calling <code>result</code> returns the same <code>PendingResult</code> instance</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rs = execute(session, &quot;select * from twitter_small where fromid &lt; 100&quot;;
             async=true, config=Dict())
while !isready(rs)
    println(&quot;waiting...&quot;) 
    sleep(10)
end
rs = result(rs)"><pre class="notranslate"><code>rs = execute(session, "select * from twitter_small where fromid &lt; 100";
             async=true, config=Dict())
while !isready(rs)
    println("waiting...") 
    sleep(10)
end
rs = result(rs)
</code></pre></div>
<h2 dir="auto"><a id="user-content-working-with-a-result-set" class="anchor" aria-hidden="true" href="#working-with-a-result-set"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Working with a Result Set</h2>
<p dir="auto">Result sets can be iterated upon with iterators and must be closed at the end by calling the <code>close</code> method, to release resources.</p>
<p dir="auto">Two kinds of iterators are available as of now:</p>
<ul dir="auto">
<li><strong>record iterator</strong>: returns a row at a time as a <code>Tuple</code>.</li>
<li><strong>column chunk iterator</strong>: returns a list of column name and column data pairs for a block of records</li>
</ul>
<p dir="auto">Calling <code>records</code> results in a record iterator:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rs = execute(session, &quot;select * from twitter_small where fromid &lt; 100&quot;)
for rec in records(rs)
   println(rec)
end
close(rs)"><pre class="notranslate"><code>rs = execute(session, "select * from twitter_small where fromid &lt; 100")
for rec in records(rs)
   println(rec)
end
close(rs)
</code></pre></div>
<p dir="auto">Calling <code>columnchunks</code> results in a column chunk iterator:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rs = execute(session, &quot;select * from twitter_small where fromid &lt; 100&quot;)
for colframe in columnchunks(rs)
    for cols in colframe
        println(&quot;name  : &quot;, cols[1])
        println(&quot;values: &quot;, cols[2])
    end
end
close(rs)"><pre class="notranslate"><code>rs = execute(session, "select * from twitter_small where fromid &lt; 100")
for colframe in columnchunks(rs)
    for cols in colframe
        println("name  : ", cols[1])
        println("values: ", cols[2])
    end
end
close(rs)
</code></pre></div>
<p dir="auto">All records can be read from a result set by simply calling <code>columnchunk</code>. This should only be used when the result is sure to fit in memory.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rs = execute(session, &quot;select * from twitter_small where fromid &lt; 100&quot;)
println(columnchunk(rs))
close(rs)"><pre class="notranslate"><code>rs = execute(session, "select * from twitter_small where fromid &lt; 100")
println(columnchunk(rs))
close(rs)
</code></pre></div>
<h2 dir="auto"><a id="user-content-pretty-printing-data" class="anchor" aria-hidden="true" href="#pretty-printing-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pretty Printing Data</h2>
<p dir="auto">An exported type named <code>Tabular</code> can be used to display column chunks in a tabular format. Optional display parameters can be passed:</p>
<ul dir="auto">
<li><code>full</code>: whether to display all rows (default is <code>false</code>, i.e. to skip data from the middle to fit display height)</li>
<li><code>compact_if_too_wide</code>: whether to display only column summary if display width is not enough to fit data (default is <code>true</code>)</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rs = execute(session, &quot;select * from twitter_small where fromid &lt; 100&quot;)
Tabular(columnchunk(rs); full=false, compact_if_too_wide=true)"><pre class="notranslate"><code>rs = execute(session, "select * from twitter_small where fromid &lt; 100")
Tabular(columnchunk(rs); full=false, compact_if_too_wide=true)
</code></pre></div>
<p dir="auto">A convenience iterator that produces <code>Tabular</code> types is also provided:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rs = execute(session, &quot;select * from twitter_small where fromid &lt; 100&quot;)
for tab in tabulars(rs)
    println(tab)
end"><pre class="notranslate"><code>rs = execute(session, "select * from twitter_small where fromid &lt; 100")
for tab in tabulars(rs)
    println(tab)
end
</code></pre></div>
<h2 dir="auto"><a id="user-content-fetching-servertable-metadata" class="anchor" aria-hidden="true" href="#fetching-servertable-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fetching Server/Table Metadata</h2>
<p dir="auto">Server configuration can be fetched by calling <code>get_info</code>.
Here, <code>info_type</code> is one of the values from the enumeration <code>InfoType</code>, e.g. <code>InfoType.CLI_SERVER_NAME</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="info_type = InfoType.CLI_SERVER_NAME
info = get_info(session, info_type)"><pre class="notranslate"><code>info_type = InfoType.CLI_SERVER_NAME
info = get_info(session, info_type)
</code></pre></div>
<p dir="auto">Catalogs, Schemas, TableTypes, Functions, Tables, Columns defined on the server can be listed by calling the appropriate API listed below.
The results are returned as a DataFrame.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# list all catalogs
catalogs(session)

# list all table types configured
tabletypes(session)

# list all schemas
schemas(session)

# schema list can be optionally filtered with catalog and schema name
schemas(session; catalog_pattern=&quot;%&quot;, schema_pattern=&quot;%&quot;)

# list all tables
tables(session)

# table list can be optionally filtered
tables(session; catalog_pattern=&quot;%&quot;, schema_pattern=&quot;%&quot;,
       table_pattern=&quot;%&quot;, table_types=[])

# list columns
columns(session)

# columns list can be optionally filtered
columns(session; catalog=&quot;&quot;, schema_pattern=&quot;%&quot;,
        table_pattern=&quot;%&quot;, column_pattern=&quot;%&quot;)

# list functions matching given function name pattern
functions(session, &quot;%&quot;)

# functions list can be optionally filtered
functions(session, &quot;%&quot;; catalog=&quot;&quot;, schema_pattern=&quot;%&quot;)"><pre class="notranslate"><code># list all catalogs
catalogs(session)

# list all table types configured
tabletypes(session)

# list all schemas
schemas(session)

# schema list can be optionally filtered with catalog and schema name
schemas(session; catalog_pattern="%", schema_pattern="%")

# list all tables
tables(session)

# table list can be optionally filtered
tables(session; catalog_pattern="%", schema_pattern="%",
       table_pattern="%", table_types=[])

# list columns
columns(session)

# columns list can be optionally filtered
columns(session; catalog="", schema_pattern="%",
        table_pattern="%", column_pattern="%")

# list functions matching given function name pattern
functions(session, "%")

# functions list can be optionally filtered
functions(session, "%"; catalog="", schema_pattern="%")
</code></pre></div>
</article></div>