<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-extrafun" class="anchor" aria-hidden="true" href="#extrafun"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExtraFun</h1>
<p>Extra general purpose functions, stubs, macros &amp; meta types.</p>
<p>These functions, macros &amp; types are either commonly used patterns, or mere stubs.</p>
<h1><a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Table of Contents</h1>
<ul>
<li><a href="#extrafun">ExtraFun</a></li>
<li><a href="#table-of-contents">Table of Contents</a></li>
<li><a href="#stubs">Stubs</a>
<ul>
<li><a href="#cancel">cancel</a></li>
<li><a href="#clear">clear</a></li>
<li><a href="#init">init</a></li>
<li><a href="#restore">restore</a></li>
<li><a href="#store">store</a></li>
<li><a href="#update">update!</a></li>
<li><a href="#use">use</a></li>
</ul>
</li>
<li><a href="#functionals">Functionals</a>
<ul>
<li><a href="#negate">negate</a></li>
<li><a href="#isathing">isathing</a></li>
<li><a href="#truthy-and-falsy">truthy and falsy</a></li>
<li><a href="#indexed">indexed</a></li>
</ul>
</li>
<li><a href="#functions">Functions</a>
<ul>
<li><a href="#curry">curry</a></li>
<li><a href="#indexof">indexof</a></li>
<li><a href="#isiterable">isiterable</a></li>
<li><a href="#hassignature">hassignature</a></li>
<li><a href="#shift">shift</a></li>
<li><a href="#unshift">unshift</a></li>
<li><a href="#smart-baseinsert">Smart Base.insert!</a></li>
<li><a href="#basesplit">Base.split</a></li>
</ul>
</li>
<li><a href="#macros">Macros</a>
<ul>
<li><a href="#curry-1">@curry</a></li>
<li><a href="#once">@once</a></li>
<li><a href="#sym_str">@sym_str</a></li>
<li><a href="#with">@with</a></li>
</ul>
</li>
<li><a href="#types">Types</a>
<ul>
<li><a href="#mutable">Mutable</a></li>
<li><a href="#cancellabletask">CancellableTask</a></li>
<li><a href="#timeouttask">TimeoutTask</a></li>
</ul>
</li>
<li><a href="#meta-types">Meta Types</a>
<ul>
<li><a href="#ident">Ident</a></li>
</ul>
</li>
<li><a href="#xcopy">XCopy</a>
<ul>
<li><a href="#xcopy-function">xcopy function</a></li>
<li><a href="#xcopy-macro">@xcopy macro</a></li>
<li><a href="#xcopy_construct-function">xcopy_construct function</a></li>
<li><a href="#xcopy_override">xcopy_override</a></li>
<li><a href="#xcopy_override-1">@xcopy_override</a></li>
</ul>
</li>
</ul>
<h1><a id="user-content-stubs" class="anchor" aria-hidden="true" href="#stubs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stubs</h1>
<p>Function stubs are generically named functions without any actual body - they are, by default, noop. Every defined stub
takes no arguments and do absolutely nothing.</p>
<p>These stubs are meant to be complementary to the Julia standard library. Similar to overloading <code>Base.push!</code>, you would
overload <code>ExtraFun.use</code>. Then, users of your library may simply <code>using ExtraFun</code> and call <code>use(&lt;your type&gt;)</code> without
having to worry about absolutely addressing the appropriate module. ExtraFun allows for shorter function names and thus
ease of use.</p>
<p>Following is an enumeration of all function stubs exported by ExtraFun, along with their respective intention. In turn,
these intentions are merely intended to give you an idea what to use these stubs for.</p>
<h2><a id="user-content-cancel" class="anchor" aria-hidden="true" href="#cancel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>cancel</h2>
<p>Intended to cancel a time-consuming task, such as an intense computation or a blocking IO operation.</p>
<h2><a id="user-content-clear" class="anchor" aria-hidden="true" href="#clear"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>clear</h2>
<p>Intended to empty a collection or clear the state of an object.</p>
<h2><a id="user-content-init" class="anchor" aria-hidden="true" href="#init"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>init</h2>
<p>Initialize something. Intended for deferred initialization of a resource. Possibly reopen an existing resource without
having to fully reconstruct it, reusing previously supplied data.</p>
<h2><a id="user-content-restore" class="anchor" aria-hidden="true" href="#restore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>restore</h2>
<p>Restore the state of an object from an external resource, typically a file or an internet resource. Forms the
complementary counterpiece to <code>ExtraFun.store</code> method.</p>
<h2><a id="user-content-store" class="anchor" aria-hidden="true" href="#store"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>store</h2>
<p>Store the state of an object in an external resource, typically a file or an internet resource. Unlike the standard
library's <code>Serialization.deserialize</code> method, this method is intended for Julia-version and platform independent
serialization. For this purpose, it is advised to store a complementary file format version and/or parity data.</p>
<h2><a id="user-content-update" class="anchor" aria-hidden="true" href="#update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>update!</h2>
<p>Intended to update the (internal) state of an object. Useful to defer comparatively heavy computations to the end of a
cycle, for example.</p>
<h2><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>use</h2>
<p>Intended to indicate a change of state, either globally or locally to a container object.</p>
<h1><a id="user-content-functionals" class="anchor" aria-hidden="true" href="#functionals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functionals</h1>
<p>Following are general purpose patterns packaged in functions (and possibly corresponding types) for convenience.</p>
<h2><a id="user-content-negate" class="anchor" aria-hidden="true" href="#negate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>negate</h2>
<p>Simple functional negation of a callable. Useful to shorten down callbacks rather than using lambdas.</p>
<h3><a id="user-content-signature" class="anchor" aria-hidden="true" href="#signature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="negate(callable)::Bool
"><pre><span class="pl-c1">negate</span>(callable)<span class="pl-k">::</span><span class="pl-c1">Bool</span></pre></div>
<p>Naturally, it is assumed <code>callable</code> returns a boolean value.</p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="isdiv3(x) = x % 3 == 0
filter!(negate(isdiv3), [1, 2, 3, 4])
"><pre><span class="pl-en">isdiv3</span>(x) <span class="pl-k">=</span> x <span class="pl-k">%</span> <span class="pl-c1">3</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>
<span class="pl-c1">filter!</span>(<span class="pl-c1">negate</span>(isdiv3), [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>])</pre></div>
<h2><a id="user-content-isathing" class="anchor" aria-hidden="true" href="#isathing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>isathing</h2>
<p>Simple negation of <code>Base.isnothing(x)</code>.</p>
<h2><a id="user-content-truthy-and-falsy" class="anchor" aria-hidden="true" href="#truthy-and-falsy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>truthy and falsy</h2>
<p><code>truthy</code> is a functional way of evaluating the "truth" of a value - as prominent in many other languages. In general, this means at least one bit is set. <code>falsy</code> is simply <code>negate(truthy)</code>.</p>
<h3><a id="user-content-signatures" class="anchor" aria-hidden="true" href="#signatures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signatures</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="truthy(::Nothing) = false
truthy(b::Bool) = b
truthy(n::Number) = n != 0
truthy(_) = true
falsy(x) = !truthy(x)
"><pre><span class="pl-en">truthy</span>(<span class="pl-k">::</span><span class="pl-c1">Nothing</span>) <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-en">truthy</span>(b<span class="pl-k">::</span><span class="pl-c1">Bool</span>) <span class="pl-k">=</span> b
<span class="pl-en">truthy</span>(n<span class="pl-k">::</span><span class="pl-c1">Number</span>) <span class="pl-k">=</span> n <span class="pl-k">!=</span> <span class="pl-c1">0</span>
<span class="pl-en">truthy</span>(_) <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-en">falsy</span>(x) <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-c1">truthy</span>(x)</pre></div>
<h2><a id="user-content-indexed" class="anchor" aria-hidden="true" href="#indexed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>indexed</h2>
<p>A functional alternative to <code>Base.collect(coll)</code> which only collects <code>coll</code> into a <code>Vector</code> if it isn't indexable, otherwise returns <code>coll</code> itself.</p>
<h1><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h1>
<p>Imperative general purpose functions.</p>
<h2><a id="user-content-curry" class="anchor" aria-hidden="true" href="#curry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>curry</h2>
<p>Currying is a pattern where a new method is derived from an existing. When calling the curried method, positional arguments specified in the original <code>curry</code> call are prepended to the arguments of the curried call, and keyword arguments are added.</p>
<p>A macro to conveniently curry every single first-level function call also exists.</p>
<h3><a id="user-content-signature-1" class="anchor" aria-hidden="true" href="#signature-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="curry(callable, args...; kwargs...)
"><pre><span class="pl-c1">curry</span>(callable, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<h3><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function foo(num, factor; dofloor)
    res = num * factor
    if dofloor
        res = floor(res)
    end
    return res
end

bar = curry(foo, 42; dofloor=true)
bar(0.5) # == 21
bar(2.1) # == 88
"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(num, factor; dofloor)
    res <span class="pl-k">=</span> num <span class="pl-k">*</span> factor
    <span class="pl-k">if</span> dofloor
        res <span class="pl-k">=</span> <span class="pl-c1">floor</span>(res)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> res
<span class="pl-k">end</span>

bar <span class="pl-k">=</span> <span class="pl-c1">curry</span>(foo, <span class="pl-c1">42</span>; dofloor<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">bar</span>(<span class="pl-c1">0.5</span>) <span class="pl-c"><span class="pl-c">#</span> == 21</span>
<span class="pl-c1">bar</span>(<span class="pl-c1">2.1</span>) <span class="pl-c"><span class="pl-c">#</span> == 88</span></pre></div>
<h2><a id="user-content-indexof" class="anchor" aria-hidden="true" href="#indexof"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>indexof</h2>
<p>Finds the index of the given element in the array-like. If the element was not found, returns <code>nothing</code>.</p>
<h3><a id="user-content-signature-2" class="anchor" aria-hidden="true" href="#signature-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="indexof(ary, elem; by = identity, offset = 0, strict = false)::Integer
"><pre><span class="pl-c1">indexof</span>(ary, elem; by <span class="pl-k">=</span> identity, offset <span class="pl-k">=</span> <span class="pl-c1">0</span>, strict <span class="pl-k">=</span> <span class="pl-c1">false</span>)<span class="pl-k">::</span><span class="pl-c1">Integer</span></pre></div>
<p><code>by</code> specifies a mapping callback on each element returning the mapped value to compare. The mapper is not called on <code>elem</code>.</p>
<p><code>offset</code> specifies the 0-based offset from the start of the array-like to begin search.</p>
<p><code>strict</code> specifies whether to use simple equality (<code>==</code>) or strict equality (<code>===</code>).</p>
<h3><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="indexof([1, 2, 3], 5, by=(i)-&gt;i-2, strict=true) # == 3
indexof([1, 2, 3], 5) # == -1
indexof([1, 2, 3], 1, offset=2) # == -1
"><pre><span class="pl-c1">indexof</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">5</span>, by<span class="pl-k">=</span>(i)<span class="pl-k">-&gt;</span>i<span class="pl-k">-</span><span class="pl-c1">2</span>, strict<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> == 3</span>
<span class="pl-c1">indexof</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> == -1</span>
<span class="pl-c1">indexof</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">1</span>, offset<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> == -1</span></pre></div>
<h2><a id="user-content-isiterable" class="anchor" aria-hidden="true" href="#isiterable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>isiterable</h2>
<p>Generated function pattern to test if a signature for <code>Base.iterate(::T)</code> exists.</p>
<p>Beware as this pattern may malbehave if such a signature is loaded <em>after</em> the first call to this generated function.</p>
<h3><a id="user-content-example-3" class="anchor" aria-hidden="true" href="#example-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="isiterable([]) # == true
isiterable(:foobar) # == false
isiterable(42) # == true
"><pre><span class="pl-c1">isiterable</span>([]) <span class="pl-c"><span class="pl-c">#</span> == true</span>
<span class="pl-c1">isiterable</span>(<span class="pl-c1">:foobar</span>) <span class="pl-c"><span class="pl-c">#</span> == false</span>
<span class="pl-c1">isiterable</span>(<span class="pl-c1">42</span>) <span class="pl-c"><span class="pl-c">#</span> == true</span></pre></div>
<h2><a id="user-content-hassignature" class="anchor" aria-hidden="true" href="#hassignature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>hassignature</h2>
<p>Function pattern to test if a specific signature of a function exists.</p>
<h3><a id="user-content-signature-3" class="anchor" aria-hidden="true" href="#signature-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hassignature(callable, argtypes::Type...)::Bool
"><pre><span class="pl-c1">hassignature</span>(callable, argtypes<span class="pl-k">::</span><span class="pl-c1">Type...</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span></pre></div>
<h3><a id="user-content-example-4" class="anchor" aria-hidden="true" href="#example-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyStruct end

hassignature(push!, Vector{Int}) # == true
hassignature(push!, MyStruct) # == false
"><pre><span class="pl-k">struct</span> MyStruct <span class="pl-k">end</span>

<span class="pl-c1">hassignature</span>(push!, Vector{Int}) <span class="pl-c"><span class="pl-c">#</span> == true</span>
<span class="pl-c1">hassignature</span>(push!, MyStruct) <span class="pl-c"><span class="pl-c">#</span> == false</span></pre></div>
<h2><a id="user-content-shift" class="anchor" aria-hidden="true" href="#shift"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>shift</h2>
<p>Retrieve and remove the first element from the array-like.</p>
<h3><a id="user-content-signature-4" class="anchor" aria-hidden="true" href="#signature-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="shift(ary::Iterable{T})::T
"><pre><span class="pl-c1">shift</span>(ary<span class="pl-k">::</span><span class="pl-c1">Iterable{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span></pre></div>
<p>Note that <code>Iterable</code> is not an actual type and used here merely for clarity.</p>
<p>The array-like must specialize <code>Base.getindex</code> and <code>Base.deleteat!</code> functions.</p>
<h3><a id="user-content-example-5" class="anchor" aria-hidden="true" href="#example-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vec = [1, 2, 3]
shift(vec) # == 1
shift(vec) # == 2
vec # == [3]
"><pre>vec <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
<span class="pl-c1">shift</span>(vec) <span class="pl-c"><span class="pl-c">#</span> == 1</span>
<span class="pl-c1">shift</span>(vec) <span class="pl-c"><span class="pl-c">#</span> == 2</span>
vec <span class="pl-c"><span class="pl-c">#</span> == [3]</span></pre></div>
<h2><a id="user-content-unshift" class="anchor" aria-hidden="true" href="#unshift"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>unshift</h2>
<p>Insert an element at index 1 of an array-like.</p>
<h3><a id="user-content-signature-5" class="anchor" aria-hidden="true" href="#signature-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="unshift(ary::Iterable{T}, elem::T) -&gt; ary
"><pre><span class="pl-c1">unshift</span>(ary<span class="pl-k">::</span><span class="pl-c1">Iterable{T}</span>, elem<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">-&gt;</span> ary</pre></div>
<p>Note that <code>Iterable</code> is not an actual type and is used here only for clarity.</p>
<p>The array-like must support the signature <code>Base.insert!(::typeof(ary), 1, ::typeof(elem))</code>.</p>
<h3><a id="user-content-example-6" class="anchor" aria-hidden="true" href="#example-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="unshift([2, 3, 4], 1) # == [1, 2, 3, 4]
"><pre><span class="pl-c1">unshift</span>([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> == [1, 2, 3, 4]</span></pre></div>
<h2><a id="user-content-smart-baseinsert" class="anchor" aria-hidden="true" href="#smart-baseinsert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Smart Base.insert!</h2>
<p>Insert a new element before or after an existing in a <code>Vector</code>.</p>
<h3><a id="user-content-signature-6" class="anchor" aria-hidden="true" href="#signature-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Base.insert!(vec::Vector{T}, elem::T; [befure], [after], by = identity, strict::Bool = false)
"><pre>Base<span class="pl-k">.</span><span class="pl-c1">insert!</span>(vec<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>, elem<span class="pl-k">::</span><span class="pl-c1">T</span>; [befure], [after], by <span class="pl-k">=</span> identity, strict<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>Either <code>before</code> or <code>after</code> keyword argument must be supplied, but not both. Otherwise, an <code>ArgumentError</code> is thrown.</p>
<p><code>by</code> is a mapping callback transforming the elements of <code>vec</code>, but not <code>before</code>/<code>after</code> or <code>elem</code>. This is useful to, for example, insert <code>elem</code> before another which meets a specific condition.</p>
<p><code>strict</code> can be used to specify whether to use strict equality (<code>===</code>) or simple equality (<code>==</code>).</p>
<h3><a id="user-content-example-7" class="anchor" aria-hidden="true" href="#example-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Wrapper
    int::Int
end
insert!(Wrapper.([1, 2, 3, 4, 6]), 5, before=6, by=(w)-&gt;w.int)
insert!(Wrapper.([1, 2, 3, 4, 6]), 5, after=4, by=(w)-&gt;w.int)
"><pre><span class="pl-k">struct</span> Wrapper
    int<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>
<span class="pl-c1">insert!</span>(<span class="pl-c1">Wrapper</span>.([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>]), <span class="pl-c1">5</span>, before<span class="pl-k">=</span><span class="pl-c1">6</span>, by<span class="pl-k">=</span>(w)<span class="pl-k">-&gt;</span>w<span class="pl-k">.</span>int)
<span class="pl-c1">insert!</span>(<span class="pl-c1">Wrapper</span>.([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>]), <span class="pl-c1">5</span>, after<span class="pl-k">=</span><span class="pl-c1">4</span>, by<span class="pl-k">=</span>(w)<span class="pl-k">-&gt;</span>w<span class="pl-k">.</span>int)</pre></div>
<h2><a id="user-content-basesplit" class="anchor" aria-hidden="true" href="#basesplit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Base.split</h2>
<p>Split a collection into two distinct ones where the first contains all elements for which a given condition returns true and the second all those for which it returns false.</p>
<p>Currently supports standard vectors and tuples.</p>
<h3><a id="user-content-signature-7" class="anchor" aria-hidden="true" href="#signature-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="split(condition, collection::Iterable{T})::Tuple{Vector{T}, Vector{T}}
"><pre><span class="pl-c1">split</span>(condition, collection<span class="pl-k">::</span><span class="pl-c1">Iterable{T}</span>)<span class="pl-k">::</span><span class="pl-c1">Tuple{Vector{T}, Vector{T}}</span></pre></div>
<p>Note that <code>Iterable</code> is not an actual type and is used here only for clarity.</p>
<p>The first vector contains all items of <code>collection</code> for which <code>condition</code> returned true. The second vector contains all remaining items.</p>
<h3><a id="user-content-example-8" class="anchor" aria-hidden="true" href="#example-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="split(iseven, collect(1:10)) # == ([2, 4, 6, 8, 10], [1, 3, 5, 7, 9])
"><pre><span class="pl-c1">split</span>(iseven, <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)) <span class="pl-c"><span class="pl-c">#</span> == ([2, 4, 6, 8, 10], [1, 3, 5, 7, 9])</span></pre></div>
<h1><a id="user-content-macros" class="anchor" aria-hidden="true" href="#macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Macros</h1>
<p>ExtraFun provides a handful of useful yet simple macros. These include:</p>
<h2><a id="user-content-curry-1" class="anchor" aria-hidden="true" href="#curry-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@curry</h2>
<p>A convenience macro which curries every single first-level function call in its block expression. This is useful to call multiple functions reusing various identical arguments.</p>
<h3><a id="user-content-example-9" class="anchor" aria-hidden="true" href="#example-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@curry 0xFF42 file = stderr begin
    println(&quot;foobar&quot;) # prints &quot;0xFF42 foobar&quot; to stderr
    println(42) # prints &quot;0xFF42 42&quot; to stderr
end
"><pre><span class="pl-c1">@curry</span> <span class="pl-c1">0xFF42</span> file <span class="pl-k">=</span> <span class="pl-c1">stderr</span> <span class="pl-k">begin</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>foobar<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> prints "0xFF42 foobar" to stderr</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">42</span>) <span class="pl-c"><span class="pl-c">#</span> prints "0xFF42 42" to stderr</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-once" class="anchor" aria-hidden="true" href="#once"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@once</h2>
<p>A convenience macro which ensures the given code is only executed once per session.</p>
<h3><a id="user-content-example-10" class="anchor" aria-hidden="true" href="#example-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function foo(n)
    @once n &gt; 512 println(&quot;parameter exceeds safety threshold&quot;)
    n+1
end

foo(513)
# prints: parameter exceeds safety threshold
foo(514)
# does not print
"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(n)
    <span class="pl-c1">@once</span> n <span class="pl-k">&gt;</span> <span class="pl-c1">512</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>parameter exceeds safety threshold<span class="pl-pds">"</span></span>)
    n<span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-c1">foo</span>(<span class="pl-c1">513</span>)
<span class="pl-c"><span class="pl-c">#</span> prints: parameter exceeds safety threshold</span>
<span class="pl-c1">foo</span>(<span class="pl-c1">514</span>)
<span class="pl-c"><span class="pl-c">#</span> does not print</span></pre></div>
<h2><a id="user-content-sym_str" class="anchor" aria-hidden="true" href="#sym_str"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@sym_str</h2>
<p>A simple string prefix to produce a symbol. Literally equivalent to <code>Symbol(str)</code>. The advantage of using the <code>sym""</code>
notation is that it allows using characters otherwise illegal in <code>:</code> notation whilst shortening syntax slightly.</p>
<h2><a id="user-content-with" class="anchor" aria-hidden="true" href="#with"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@with</h2>
<p>Resource management inspired by other languages' <code>with</code> keyword. It generates Julia code in the following syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@with resources... block
# is (almost) equivalent to
try
  let resources...
    block
  end
finally
  close.(resources)
end
"><pre><span class="pl-c1">@with</span> resources<span class="pl-k">...</span> block
<span class="pl-c"><span class="pl-c">#</span> is (almost) equivalent to</span>
<span class="pl-k">try</span>
  <span class="pl-k">let</span> resources<span class="pl-k">...</span>
    block
  <span class="pl-k">end</span>
<span class="pl-k">finally</span>
  <span class="pl-c1">close</span>.(resources)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<p>Usage is similar to other languages' <code>with</code> keyword:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="res1 = SomeCloseableResource()
@with res1 res2 = SomeCloseableResource() SomeCloseableResource() begin
  println(res1)
  println(res2)
end
println(res1)
# res2 and last resource undefined here
"><pre>res1 <span class="pl-k">=</span> <span class="pl-c1">SomeCloseableResource</span>()
<span class="pl-c1">@with</span> res1 res2 <span class="pl-k">=</span> <span class="pl-c1">SomeCloseableResource</span>() <span class="pl-c1">SomeCloseableResource</span>() <span class="pl-k">begin</span>
  <span class="pl-c1">println</span>(res1)
  <span class="pl-c1">println</span>(res2)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(res1)
<span class="pl-c"><span class="pl-c">#</span> res2 and last resource undefined here</span></pre></div>
<p><em>Note:</em> For <code>res1</code> above to work, <code>SomeCloseableResource()</code> should be or contain a reference to the closeable resource. If
it can be copied bitwise, <code>res1</code> may remain unchanged outside of <code>@with</code>.</p>
<h1><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h1>
<p>General purpose and simple types.</p>
<h2><a id="user-content-mutable" class="anchor" aria-hidden="true" href="#mutable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mutable</h2>
<p>A simple mutable wrapper around a single field of type <code>T</code>. The <code>Mutable</code> type comes in handy either as a way to reference variables, or to mark a single field of an otherwise immutable struct as mutable.</p>
<h3><a id="user-content-signature-8" class="anchor" aria-hidden="true" href="#signature-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Mutable{T}
  value::T
end
"><pre><span class="pl-k">struct</span> Mutable{T}
  value<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-example-11" class="anchor" aria-hidden="true" href="#example-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExtraFun

struct Immutable
    immutable::Int
    mutable::Mutable{Bool}
end
Immutable(immutable, mutable::Bool) = Immutable(immutable, Mutable(mutable))

myvar = Immutable(42, false)
myvar.mutable[] # == false
myvar.mutable[] = true
myvar.mutable[] # == true
myvar.immutable += 1 # throws
"><pre><span class="pl-k">using</span> ExtraFun

<span class="pl-k">struct</span> Immutable
    immutable<span class="pl-k">::</span><span class="pl-c1">Int</span>
    mutable<span class="pl-k">::</span><span class="pl-c1">Mutable{Bool}</span>
<span class="pl-k">end</span>
<span class="pl-en">Immutable</span>(immutable, mutable<span class="pl-k">::</span><span class="pl-c1">Bool</span>) <span class="pl-k">=</span> <span class="pl-c1">Immutable</span>(immutable, <span class="pl-c1">Mutable</span>(mutable))

myvar <span class="pl-k">=</span> <span class="pl-c1">Immutable</span>(<span class="pl-c1">42</span>, <span class="pl-c1">false</span>)
myvar<span class="pl-k">.</span>mutable[] <span class="pl-c"><span class="pl-c">#</span> == false</span>
myvar<span class="pl-k">.</span>mutable[] <span class="pl-k">=</span> <span class="pl-c1">true</span>
myvar<span class="pl-k">.</span>mutable[] <span class="pl-c"><span class="pl-c">#</span> == true</span>
myvar<span class="pl-k">.</span>immutable <span class="pl-k">+=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> throws</span></pre></div>
<h2><a id="user-content-cancellabletask" class="anchor" aria-hidden="true" href="#cancellabletask"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CancellableTask</h2>
<p>Wrapper around a <code>Task</code> object with a specialization of <code>ExtraFun.cancel</code> to cancel cancel a blocking and/or yielding task prematurely. Unfortunately, these cannot be used with <code>@sync</code> and <code>@async</code>.</p>
<h3><a id="user-content-with_cancel" class="anchor" aria-hidden="true" href="#with_cancel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>with_cancel</h3>
<p>To conveniently create such a task, the <code>with_cancel</code> method is introduced. Its signature is as follows:</p>
<h3><a id="user-content-signature-9" class="anchor" aria-hidden="true" href="#signature-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="with_cancel(callback, schedule_immediately::Bool = false)::CancellableTask
"><pre><span class="pl-c1">with_cancel</span>(callback, schedule_immediately<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>)<span class="pl-k">::</span><span class="pl-c1">CancellableTask</span></pre></div>
<h3><a id="user-content-example-12" class="anchor" aria-hidden="true" href="#example-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExtraFun

task1 = with_cancel() do
  sleep(9999)
end
task2 = with_cancel() do
  return 42
end
task3 = with_cancel() do
  throw(&quot;foobar&quot;)
end

cancel(task1)
wait(task1) # throws TaskFailedException wrapping CancellationError

fetch(task2) == 42 # success

wait(task3) # throws TaskFailedException wrapping &quot;foobar&quot;
"><pre><span class="pl-k">using</span> ExtraFun

task1 <span class="pl-k">=</span> <span class="pl-c1">with_cancel</span>() <span class="pl-k">do</span>
  <span class="pl-c1">sleep</span>(<span class="pl-c1">9999</span>)
<span class="pl-k">end</span>
task2 <span class="pl-k">=</span> <span class="pl-c1">with_cancel</span>() <span class="pl-k">do</span>
  <span class="pl-k">return</span> <span class="pl-c1">42</span>
<span class="pl-k">end</span>
task3 <span class="pl-k">=</span> <span class="pl-c1">with_cancel</span>() <span class="pl-k">do</span>
  <span class="pl-c1">throw</span>(<span class="pl-s"><span class="pl-pds">"</span>foobar<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">cancel</span>(task1)
<span class="pl-c1">wait</span>(task1) <span class="pl-c"><span class="pl-c">#</span> throws TaskFailedException wrapping CancellationError</span>

<span class="pl-c1">fetch</span>(task2) <span class="pl-k">==</span> <span class="pl-c1">42</span> <span class="pl-c"><span class="pl-c">#</span> success</span>

<span class="pl-c1">wait</span>(task3) <span class="pl-c"><span class="pl-c">#</span> throws TaskFailedException wrapping "foobar"</span></pre></div>
<h2><a id="user-content-timeouttask" class="anchor" aria-hidden="true" href="#timeouttask"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TimeoutTask</h2>
<p>Wrapper around a <code>Task</code> object with an automatic timeout. The timeout only affects the task if it blocks and/or yields. One can <code>Base.wait</code>, <code>Base.fetch</code>, or <code>ExtraFun.cancel</code> the task. Like a <code>CancellableTask</code>, the <code>CancellationError</code> thrown by <code>Base.wait</code> and <code>Base.fetch</code> will be wrapped by a <code>TaskFailedException</code>. Analogously, the <code>TimeoutError</code> triggered upon timing out will also be wrapped in such a <code>TaskFailedException</code>. Like <code>CancellableTask</code>, these tasks are incompatible with <code>@sync</code> and <code>@async</code>.</p>
<h3><a id="user-content-with_timeout" class="anchor" aria-hidden="true" href="#with_timeout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>with_timeout</h3>
<p>To conveniently create such a task, the <code>with_timeout</code> method is introduced. Its signature is as follows:</p>
<h3><a id="user-content-signature-10" class="anchor" aria-hidden="true" href="#signature-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="with_timeout(callback, timeout::Real; schedule_immediately::Bool)::TimeoutTask
"><pre><span class="pl-c1">with_timeout</span>(callback, timeout<span class="pl-k">::</span><span class="pl-c1">Real</span>; schedule_immediately<span class="pl-k">::</span><span class="pl-c1">Bool</span>)<span class="pl-k">::</span><span class="pl-c1">TimeoutTask</span></pre></div>
<h3><a id="user-content-example-13" class="anchor" aria-hidden="true" href="#example-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExtraFun

task1 = with_timeout(2) do
  sleep(3)
end
task2 = with_timeout(2) do
  return 42
end
task3 = with_timeout(2) do
  sleep(3)
end
task4 = with_timeout(3) do
  throw(&quot;foobar&quot;)
end

wait(task1) # throws TaskFailedException wrapping TimeoutError

fetch(task2) == 42 # success

cancel(task3)
wait(task3) # throws TaskFailedException wrapping CancellationError

wait(task4) # throws TaskFailedException wrapping &quot;foobar&quot;
"><pre><span class="pl-k">using</span> ExtraFun

task1 <span class="pl-k">=</span> <span class="pl-c1">with_timeout</span>(<span class="pl-c1">2</span>) <span class="pl-k">do</span>
  <span class="pl-c1">sleep</span>(<span class="pl-c1">3</span>)
<span class="pl-k">end</span>
task2 <span class="pl-k">=</span> <span class="pl-c1">with_timeout</span>(<span class="pl-c1">2</span>) <span class="pl-k">do</span>
  <span class="pl-k">return</span> <span class="pl-c1">42</span>
<span class="pl-k">end</span>
task3 <span class="pl-k">=</span> <span class="pl-c1">with_timeout</span>(<span class="pl-c1">2</span>) <span class="pl-k">do</span>
  <span class="pl-c1">sleep</span>(<span class="pl-c1">3</span>)
<span class="pl-k">end</span>
task4 <span class="pl-k">=</span> <span class="pl-c1">with_timeout</span>(<span class="pl-c1">3</span>) <span class="pl-k">do</span>
  <span class="pl-c1">throw</span>(<span class="pl-s"><span class="pl-pds">"</span>foobar<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">wait</span>(task1) <span class="pl-c"><span class="pl-c">#</span> throws TaskFailedException wrapping TimeoutError</span>

<span class="pl-c1">fetch</span>(task2) <span class="pl-k">==</span> <span class="pl-c1">42</span> <span class="pl-c"><span class="pl-c">#</span> success</span>

<span class="pl-c1">cancel</span>(task3)
<span class="pl-c1">wait</span>(task3) <span class="pl-c"><span class="pl-c">#</span> throws TaskFailedException wrapping CancellationError</span>

<span class="pl-c1">wait</span>(task4) <span class="pl-c"><span class="pl-c">#</span> throws TaskFailedException wrapping "foobar"</span></pre></div>
<h1><a id="user-content-meta-types" class="anchor" aria-hidden="true" href="#meta-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Meta Types</h1>
<p>Meta Types are types (abstract or concrete) which either provide additional information on other types, or merely convey
additional information to the compiler. In the simplest instance, this allows adjusting the behavior of otherwise
identical functions, or, vice versa, customizing the behavior of an otherwise identical structure.</p>
<h2><a id="user-content-ident" class="anchor" aria-hidden="true" href="#ident"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ident</h2>
<p>The <code>Ident</code> meta type does not contain any information. It is designed to enable the compiler to dispatch based on
actual <code>Symbol</code> values as opposed to the <code>Symbol</code> type.</p>
<h3><a id="user-content-signature-11" class="anchor" aria-hidden="true" href="#signature-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Ident{S} end
"><pre><span class="pl-k">struct</span> Ident{S} <span class="pl-k">end</span></pre></div>
<h3><a id="user-content-example-14" class="anchor" aria-hidden="true" href="#example-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Ident{S} end

extract(::Ident{:foo}) = 42
extract(::Ident{:bar}) = 69.69
"><pre><span class="pl-k">struct</span> Ident{S} <span class="pl-k">end</span>

<span class="pl-en">extract</span>(<span class="pl-k">::</span><span class="pl-c1">Ident{:foo}</span>) <span class="pl-k">=</span> <span class="pl-c1">42</span>
<span class="pl-en">extract</span>(<span class="pl-k">::</span><span class="pl-c1">Ident{:bar}</span>) <span class="pl-k">=</span> <span class="pl-c1">69.69</span></pre></div>
<h1><a id="user-content-xcopy" class="anchor" aria-hidden="true" href="#xcopy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>XCopy</h1>
<p>A more complex pattern which ExtraFun provides is the <code>xcopy</code> function and macro family. These allow customizing by various degrees of depth how an object is copied.</p>
<h2><a id="user-content-xcopy-function" class="anchor" aria-hidden="true" href="#xcopy-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>xcopy function</h2>
<p>Copies the template object, overriding the copy's fields by keyword arguments.</p>
<h3><a id="user-content-signature-12" class="anchor" aria-hidden="true" href="#signature-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xcopy(x::T)::T
"><pre><span class="pl-c1">xcopy</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>)<span class="pl-k">::</span><span class="pl-c1">T</span></pre></div>
<h3><a id="user-content-example-15" class="anchor" aria-hidden="true" href="#example-15"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyStruct
    int::Int
    flag::Bool
end

@xcopy MyStruct
xcopy(MyStruct(0, false), int=42) # MyStruct(42, false)
"><pre><span class="pl-k">struct</span> MyStruct
    int<span class="pl-k">::</span><span class="pl-c1">Int</span>
    flag<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span>

<span class="pl-c1">@xcopy</span> MyStruct
<span class="pl-c1">xcopy</span>(<span class="pl-c1">MyStruct</span>(<span class="pl-c1">0</span>, <span class="pl-c1">false</span>), int<span class="pl-k">=</span><span class="pl-c1">42</span>) <span class="pl-c"><span class="pl-c">#</span> MyStruct(42, false)</span></pre></div>
<h2><a id="user-content-xcopy-macro" class="anchor" aria-hidden="true" href="#xcopy-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@xcopy macro</h2>
<p>Makes a given type <code>xcopy</code>able; <code>xcopy</code> is by design not generic.</p>
<h3><a id="user-content-signature-13" class="anchor" aria-hidden="true" href="#signature-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@xcopy(T::Type)
"><pre><span class="pl-c1">@xcopy</span>(T<span class="pl-k">::</span><span class="pl-c1">Type</span>)</pre></div>
<h2><a id="user-content-xcopy_construct-function" class="anchor" aria-hidden="true" href="#xcopy_construct-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>xcopy_construct function</h2>
<p>Actually constructs a new instance of the same type of the source object.</p>
<h3><a id="user-content-signature-14" class="anchor" aria-hidden="true" href="#signature-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xcopy_construct(tpl::T, args...; kwargs...)::T
"><pre><span class="pl-c1">xcopy_construct</span>(tpl<span class="pl-k">::</span><span class="pl-c1">T</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)<span class="pl-k">::</span><span class="pl-c1">T</span></pre></div>
<p>Creates a new instance of <code>T</code> with specified <code>args</code> and <code>kwargs</code>. Specializations may change the behavior entirely, or simply add further initialization based on <code>tpl</code>. The arguments - both positional and keyword - are received from <code>xcopy</code> which copies these either from <code>tpl</code> or uses a customized/overridden value.</p>
<p>Normally, it won't be necessary to override this method, but it can be useful to trigger additional logic upon the newly constructed object.</p>
<h2><a id="user-content-xcopy_override" class="anchor" aria-hidden="true" href="#xcopy_override"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>xcopy_override</h2>
<p>Retrieves the copied value for the copied object. By default, retrieves <code>tpl</code>'s own field. If the field itself is <code>Base.copy</code>able, it is copied. Otherwise, it is returned directly (referenced).</p>
<h3><a id="user-content-signature-15" class="anchor" aria-hidden="true" href="#signature-15"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xcopy_override(tpl, ::FieldCopyOverride{F})::Any
"><pre><span class="pl-c1">xcopy_override</span>(tpl, <span class="pl-k">::</span><span class="pl-c1">FieldCopyOverride{F}</span>)<span class="pl-k">::</span><span class="pl-c1">Any</span></pre></div>
<p><code>F</code> is a <code>Symbol</code> representing the field name for which to retrieve the copied value.</p>
<p>Specializations may specialize this method to further customize the behavior of copying individual fields of <code>tpl</code>. However, it is strongly advised to use <code>@xcopy_override</code> to implement such a specialization for convenience.</p>
<h2><a id="user-content-xcopy_override-1" class="anchor" aria-hidden="true" href="#xcopy_override-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>@xcopy_override</h2>
<p>Convenience macro to specialize <code>xcopy_override</code>.</p>
<h3><a id="user-content-signature-16" class="anchor" aria-hidden="true" href="#signature-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signature</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@xcopy_override(T::Type, S::Symbol, expr::Expr)
"><pre><span class="pl-c1">@xcopy_override</span>(T<span class="pl-k">::</span><span class="pl-c1">Type</span>, S<span class="pl-k">::</span><span class="pl-c1">Symbol</span>, expr<span class="pl-k">::</span><span class="pl-c1">Expr</span>)</pre></div>
<p><code>T</code> is the type for which the <code>xcopy</code> is being implemented. <code>S</code> is the field for which the copied value is overridden. <code>expr</code> is the expression used to compute the overridden value.</p>
<h3><a id="user-content-example-16" class="anchor" aria-hidden="true" href="#example-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyStruct
    int::Int
    flag::Bool
end

@xcopy MyStruct
@xcopy_override MyStruct :int tpl.int + 1
xcopy(MyStruct(1, false)) == MyStruct(2, false) # == true
"><pre><span class="pl-k">struct</span> MyStruct
    int<span class="pl-k">::</span><span class="pl-c1">Int</span>
    flag<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span>

<span class="pl-c1">@xcopy</span> MyStruct
<span class="pl-c1">@xcopy_override</span> MyStruct <span class="pl-c1">:int</span> tpl<span class="pl-k">.</span>int <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">xcopy</span>(<span class="pl-c1">MyStruct</span>(<span class="pl-c1">1</span>, <span class="pl-c1">false</span>)) <span class="pl-k">==</span> <span class="pl-c1">MyStruct</span>(<span class="pl-c1">2</span>, <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> == true</span></pre></div>
</article></div>