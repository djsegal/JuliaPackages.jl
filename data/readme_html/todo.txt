<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-todojl" class="anchor" aria-hidden="true" href="#todojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Todo.jl</h1>
<p dir="auto">Todo task management and tracking in Julia using the <a href="https://github.com/todotxt/todo.txt">todo.txt format</a>.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">This package introduces a framework for placing "todo" text within Julia code.
You can do so by using the <code>@todo_str</code> string macro literally anywhere you wish.
The text content of the todo should be what is defined in the <a href="https://github.com/todotxt/todo.txt">todo.txt format</a>.</p>
<p dir="auto">Defined in a file and <code>include(...)</code>-ed in the REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module ExampleUsage
using Todo

todo&quot;implement some functionality&quot;      # a simple todo
todo&quot;2019-05-13 add tests&quot;              # with a creation date
todo&quot;(A) 2019-05-13 add documentation&quot;  # with the highest priority and a creation date
todo&quot;(Z) notify some friends&quot;           # with the lowest priority
todo&quot;x (A) 2019-05-14 2019-05-13 &quot;      # with the lowest priority
todo&quot;include a tag:value any:where&quot;     # with tags &quot;tag&quot; =&gt; &quot;value&quot; and &quot;any&quot; =&gt; &quot;where&quot;
todo&quot;and projects +Project1 +Project2&quot;  # with projects &quot;Project1&quot; and &quot;Project2&quot;
todo&quot;and contexts @here @there&quot;         # with contexts &quot;here&quot; and &quot;there&quot;

iscornercase(i) = (todo&quot;add checks for corner cases&quot; ; false)

function f()
	todo&quot;support another use-case&quot;
	
	for i in 1:10
		iscornercase(i) &amp;&amp; todo&quot;handle special corner case&quot;
	end
end

end"><pre><span class="pl-k">module</span> ExampleUsage
<span class="pl-k">using</span> Todo

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>implement some functionality<span class="pl-pds">"</span></span>      <span class="pl-c"><span class="pl-c">#</span> a simple todo</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>2019-05-13 add tests<span class="pl-pds">"</span></span>              <span class="pl-c"><span class="pl-c">#</span> with a creation date</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>(A) 2019-05-13 add documentation<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> with the highest priority and a creation date</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>(Z) notify some friends<span class="pl-pds">"</span></span>           <span class="pl-c"><span class="pl-c">#</span> with the lowest priority</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>x (A) 2019-05-14 2019-05-13 <span class="pl-pds">"</span></span>      <span class="pl-c"><span class="pl-c">#</span> with the lowest priority</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>include a tag:value any:where<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> with tags "tag" =&gt; "value" and "any" =&gt; "where"</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>and projects +Project1 +Project2<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> with projects "Project1" and "Project2"</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>and contexts @here @there<span class="pl-pds">"</span></span>         <span class="pl-c"><span class="pl-c">#</span> with contexts "here" and "there"</span>

<span class="pl-en">iscornercase</span>(i) <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>add checks for corner cases<span class="pl-pds">"</span></span> ; <span class="pl-c1">false</span>)

<span class="pl-k">function</span> <span class="pl-en">f</span>()
	<span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>support another use-case<span class="pl-pds">"</span></span>
	
	<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
		<span class="pl-c1">iscornercase</span>(i) <span class="pl-k">&amp;&amp;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">todo</span>"</span>handle special corner case<span class="pl-pds">"</span></span>
	<span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">You might be thinking, "So what? That's no different than using a comment!"
Well, this is where the additional functionality of Todo.jl comes in handy.
When running from the REPL (or when <code>isinteractive() == true</code>) Todo.jl keeps track of the number of times each todo task is hit.
This information can help you prioritize your package's todos based on how often the todo is encountered under your desired workload.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Todo

julia&gt; ExampleUsage.f()

julia&gt; todo_hits()
Dict{TodoTask,Int64} with 10 entries:
  TodoTask(...) =&gt; 1
  TodoTask(...) =&gt; 1
  TodoTask(...) =&gt; 10
  ...
  TodoTask(...) =&gt; 1

julia&gt; reset_hits()

julia&gt; ExampleUsage.f()

julia&gt; todo_hits()
Dict{TodoTask,Int64} with 2 entries:
  TodoTask(...) =&gt; 10
  TodoTask(...) =&gt; 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Todo

julia<span class="pl-k">&gt;</span> ExampleUsage<span class="pl-k">.</span><span class="pl-c1">f</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">todo_hits</span>()
Dict{TodoTask,Int64} with <span class="pl-c1">10</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>
  <span class="pl-k">...</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reset_hits</span>()

julia<span class="pl-k">&gt;</span> ExampleUsage<span class="pl-k">.</span><span class="pl-c1">f</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">todo_hits</span>()
Dict{TodoTask,Int64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto">When not running from the REPL (<code>isinteractive() == false</code>), the package does not keep track of the hit counts for each todo task.
This behavior allows for the complete removal of any runtime impact that the todo tracking might incur.
The package can be manually forced to track or not track todos by defining <code>@eval Main TRACK_TODOS = true|false</code> before the package is first imported.</p>
<p dir="auto">Todo.jl includes the ability to load and save a .txt file according to the todo.txt format.
It can also save a markdown file which could be used for the TODO section of your package!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; save_todos(&quot;todo.txt&quot;, todos())

julia&gt; tasks = load_todos(&quot;todo.txt&quot;)
11-element Array{TodoTask,1}:
  TodoTask(...)
  TodoTask(...)
  ...
  TodoTask(...)

julia&gt; save_todos(&quot;todo.md&quot;, tasks, format = :markdown)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">save_todos</span>(<span class="pl-s"><span class="pl-pds">"</span>todo.txt<span class="pl-pds">"</span></span>, <span class="pl-c1">todos</span>())

julia<span class="pl-k">&gt;</span> tasks <span class="pl-k">=</span> <span class="pl-c1">load_todos</span>(<span class="pl-s"><span class="pl-pds">"</span>todo.txt<span class="pl-pds">"</span></span>)
<span class="pl-c1">11</span><span class="pl-k">-</span>element Array{TodoTask,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>)
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>)
  <span class="pl-k">...</span>
  <span class="pl-c1">TodoTask</span>(<span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">save_todos</span>(<span class="pl-s"><span class="pl-pds">"</span>todo.md<span class="pl-pds">"</span></span>, tasks, format <span class="pl-k">=</span> <span class="pl-c1">:markdown</span>)</pre></div>
</article></div>