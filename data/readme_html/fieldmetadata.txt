<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fieldmetadata" class="anchor" aria-hidden="true" href="#fieldmetadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FieldMetadata</h1>
<p><a href="https://travis-ci.org/rafaqz/FieldMetadata.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fb77c1500eadbbe236f8082cfdd65b7bb655cb57/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f4669656c644d657461646174612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/FieldMetadata.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/rafaqz/FieldMetadata.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6b65fa3772be9f5d5bc08ae463211cf227c465d9/687474703a2f2f636f6465636f762e696f2f6769746875622f72616661717a2f4669656c644d657461646174612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rafaqz/FieldMetadata.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package lets you define metadata about fields in a struct, like tags
in Go. It uses a similar syntax to Parameters.jl, with a <code>|</code> bar instead of <code>=</code>.
You can use it as a minimalist replacement for Parameters.jl with the aid of
<a href="https://github.com/rafaqz/FieldDefaults.jl">FieldDefaults.jl</a>.</p>
<p>FieldMetadata on nested structs can be flattened into a vector or tuple very efficiently with <a href="https://github.com/rafaqz/Flatten.jl">Flatten.jl</a>, where they are also used to
exclude fields from flattening.</p>
<p>This example that adds string description metadata to fields in a struct:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@metadata</span> describe <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>

<span class="pl-c1">@describe</span> <span class="pl-k">mutable struct</span> Described
   a<span class="pl-k">::</span><span class="pl-c1">Int</span>     <span class="pl-k">|</span> <span class="pl-s"><span class="pl-pds">"</span>an Int with a description<span class="pl-pds">"</span></span>  
   b<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">|</span> <span class="pl-s"><span class="pl-pds">"</span>a Float with a description<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

d <span class="pl-k">=</span> <span class="pl-c1">Described</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span><span class="pl-c1">describe</span>(d, <span class="pl-c1">:a</span>) 
<span class="pl-s"><span class="pl-pds">"</span>an Int with a description<span class="pl-pds">"</span></span>  

julia<span class="pl-k">&gt;</span><span class="pl-c1">describe</span>(d, <span class="pl-c1">:b</span>) 
<span class="pl-s"><span class="pl-pds">"</span>a Float with a description<span class="pl-pds">"</span></span>  

julia<span class="pl-k">&gt;</span><span class="pl-c1">describe</span>(d, <span class="pl-c1">:c</span>) 
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>  </pre></div>
<p>A more complex example :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Parameters
<span class="pl-c1">@metadata</span> describe <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
<span class="pl-c1">@metadata</span> limits (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)

<span class="pl-c1">@describe</span> <span class="pl-c1">@limits</span> <span class="pl-c1">@with_kw</span> <span class="pl-k">struct</span> WithKeyword{T}
    a<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">|</span> (<span class="pl-c1">0</span>, <span class="pl-c1">100</span>) <span class="pl-k">|</span> <span class="pl-s"><span class="pl-pds">"</span>a field with a range, description and default<span class="pl-pds">"</span></span>
    b<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-k">|</span> (<span class="pl-c1">2</span>, <span class="pl-c1">9</span>)   <span class="pl-k">|</span> <span class="pl-s"><span class="pl-pds">"</span>another field with a range, description and default<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

k <span class="pl-k">=</span> <span class="pl-c1">WithKeyword</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(k, <span class="pl-c1">:b</span>) 
<span class="pl-s"><span class="pl-pds">"</span>another field with a range, description and default<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">paramrange</span>(k, <span class="pl-c1">:a</span>) 
[<span class="pl-c1">0</span>, <span class="pl-c1">100</span>]
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>  </pre></div>
<p>You can chain as many metadata macros together as you want. Just remember that
the data for the first <code>@metadata</code> macro goes at the end on the
line in the struct. This makes sense when you consider that a macro like
@with_kw from Parameters.jl has to be the last macro, but the first item in the
row after the field type.</p>
<p>You can also update or add fields on a type that is already declared using the
same syntax, by prepending <code>re</code> to the start of the macro, like <code>@redescribe</code>.
You don't need to include all fields or their types.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(d)                                                                                                     
(<span class="pl-s"><span class="pl-pds">"</span>an Int with a description<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>a Float with a description<span class="pl-pds">"</span></span>)  

<span class="pl-c1">@redescribe</span> <span class="pl-k">struct</span> Described
   b <span class="pl-k">|</span> <span class="pl-s"><span class="pl-pds">"</span>a much better description<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Described</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(d)
(<span class="pl-s"><span class="pl-pds">"</span>an Int with a description<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>a much better description<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-metadata-placeholders" class="anchor" aria-hidden="true" href="#metadata-placeholders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Metadata placeholders</h1>
<p>FieldMetadata provides an api of some simple metadata tags to be used across
packages:</p>
<table>
<thead>
<tr>
<th>Metadata</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>: nothing</td>
</tr>
<tr>
<td>units</td>
<td>1</td>
</tr>
<tr>
<td>prior</td>
<td>nothing</td>
</tr>
<tr>
<td>description</td>
<td>""</td>
</tr>
<tr>
<td>limits</td>
<td>(1e-7, 1.0)</td>
</tr>
<tr>
<td>label</td>
<td>""</td>
</tr>
<tr>
<td>logscaled</td>
<td>false</td>
</tr>
<tr>
<td>flattenable</td>
<td>true</td>
</tr>
<tr>
<td>plottable</td>
<td>true</td>
</tr>
<tr>
<td>selectable</td>
<td>Nothing</td>
</tr>
</tbody>
</table>
<p>To use them, call:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> FieldMetadata<span class="pl-k">:</span> <span class="pl-c1">@prior</span>, <span class="pl-c1">@reprior</span>, prior</pre></div>
<p>You <em>must</em> <code>import</code> at least the function to use these placeholders, <code>using</code> is
not enough as you are effectively adding methods for you own types. Calling
<code>@reprior</code> or similar on someone elses struct is type piracy and shouldn't be
done in a published package, but can be useful in scripts.</p>
</article></div>