<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pythermo" class="anchor" aria-hidden="true" href="#pythermo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PyThermo</h1>
<p dir="auto"><a href="https://stillyslalom.github.io/PyThermo.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://stillyslalom.github.io/PyThermo.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/stillyslalom/PyThermo.jl/actions"><img src="https://github.com/stillyslalom/PyThermo.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">PyThermo.jl offers access to <a href="https://github.com/CalebBell/thermo">Thermo</a>, a Python library for thermophysical properties with data available for a large number of chemical species. Accessor functions are available for basic properties (density, pressure, gas constant, ...), with returned values in SI units. Many additional properties can be accessed as properties of the underlying <code>PyObject</code>, although these internal properties are non-<code>Unitful</code>. Those properties are detailed for <a href="https://thermo.readthedocs.io/thermo.chemical.html" rel="nofollow"><code>Species</code></a> and <a href="https://thermo.readthedocs.io/thermo.mixture.html" rel="nofollow"><code>Mixture</code></a> in Thermo's external documentation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PyThermo

julia&gt; argon = Species(&quot;Ar&quot;, P = 101325, T = 300)
Species(Ar, 300.0 K, 1.013e+05 Pa)

julia&gt; density(argon)
1.6237570273514512 kg m^-3

julia&gt; argon.molecular_diameter # Angstrom
3.40744"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyThermo

julia<span class="pl-k">&gt;</span> argon <span class="pl-k">=</span> <span class="pl-c1">Species</span>(<span class="pl-s"><span class="pl-pds">"</span>Ar<span class="pl-pds">"</span></span>, P <span class="pl-k">=</span> <span class="pl-c1">101325</span>, T <span class="pl-k">=</span> <span class="pl-c1">300</span>)
<span class="pl-c1">Species</span>(Ar, <span class="pl-c1">300.0</span> K, <span class="pl-c1">1.013e+05</span> Pa)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">density</span>(argon)
<span class="pl-c1">1.6237570273514512</span> kg m<span class="pl-k">^-</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> argon<span class="pl-k">.</span>molecular_diameter <span class="pl-c"><span class="pl-c">#</span> Angstrom</span>
<span class="pl-c1">3.40744</span></pre></div>
<p dir="auto">If left unspecified, the pressure and temperature are set to STP. if given as <code>Float64</code> numbers, <code>P</code> and <code>T</code> must have units of Pascal and Kelvin, respectively. The state variables can also be set as <code>Unitful</code> quantities.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Unitful

julia&gt; air = Mixture([&quot;N2&quot; =&gt; 0.78, &quot;O2&quot; =&gt; 0.21, &quot;Ar&quot; =&gt; 0.01], P = 1u&quot;atm&quot;)
Mixture(78% nitrogen, 21% oxygen, 1% argon, 298.1 K, 1.013e+05 Pa)

julia&gt; air.Cp
1004.1326426200408"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> air <span class="pl-k">=</span> <span class="pl-c1">Mixture</span>([<span class="pl-s"><span class="pl-pds">"</span>N2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.78</span>, <span class="pl-s"><span class="pl-pds">"</span>O2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.21</span>, <span class="pl-s"><span class="pl-pds">"</span>Ar<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.01</span>], P <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>atm<span class="pl-pds">"</span></span>)
<span class="pl-c1">Mixture</span>(<span class="pl-c1">78</span><span class="pl-k">%</span> nitrogen, <span class="pl-c1">21</span><span class="pl-k">%</span> oxygen, <span class="pl-c1">1</span><span class="pl-k">%</span> argon, <span class="pl-c1">298.1</span> K, <span class="pl-c1">1.013e+05</span> Pa)

julia<span class="pl-k">&gt;</span> air<span class="pl-k">.</span>Cp
<span class="pl-c1">1004.1326426200408</span></pre></div>
<p dir="auto">State-dependent properties are updated for a given phase when the <code>T</code> or <code>P</code> fields are set, but in case of phase change, the state variables must be updated via the bound <code>calculate</code> method.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; SF6 = Species(&quot;SF6&quot;, P=30u&quot;psi&quot;)
Species(SF6, 298.1 K, 2.068e+05 Pa)

julia&gt; SF6.GWP # global warming potential
22800.0

julia&gt; SF6.phase # one of &quot;g&quot;, &quot;l&quot;, &quot;s&quot;
&quot;g&quot;

julia&gt; SF6.T = 20u&quot;K&quot;
20 K

julia&gt; density(SF6)
181.67446044245906 kg m^-3

julia&gt; SF6.phase # that's not right!
&quot;g&quot;

julia&gt; SF6.calculate(T = 20)

julia&gt; SF6.phase # much better!
&quot;s&quot;"><pre>julia<span class="pl-k">&gt;</span> SF6 <span class="pl-k">=</span> <span class="pl-c1">Species</span>(<span class="pl-s"><span class="pl-pds">"</span>SF6<span class="pl-pds">"</span></span>, P<span class="pl-k">=</span><span class="pl-c1">30</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>psi<span class="pl-pds">"</span></span>)
<span class="pl-c1">Species</span>(SF6, <span class="pl-c1">298.1</span> K, <span class="pl-c1">2.068e+05</span> Pa)

julia<span class="pl-k">&gt;</span> SF6<span class="pl-k">.</span>GWP <span class="pl-c"><span class="pl-c">#</span> global warming potential</span>
<span class="pl-c1">22800.0</span>

julia<span class="pl-k">&gt;</span> SF6<span class="pl-k">.</span>phase <span class="pl-c"><span class="pl-c">#</span> one of "g", "l", "s"</span>
<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> SF6<span class="pl-k">.</span>T <span class="pl-k">=</span> <span class="pl-c1">20</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>K<span class="pl-pds">"</span></span>
<span class="pl-c1">20</span> K

julia<span class="pl-k">&gt;</span> <span class="pl-c1">density</span>(SF6)
<span class="pl-c1">181.67446044245906</span> kg m<span class="pl-k">^-</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> SF6<span class="pl-k">.</span>phase <span class="pl-c"><span class="pl-c">#</span> that's not right!</span>
<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> SF6<span class="pl-k">.</span><span class="pl-c1">calculate</span>(T <span class="pl-k">=</span> <span class="pl-c1">20</span>)

julia<span class="pl-k">&gt;</span> SF6<span class="pl-k">.</span>phase <span class="pl-c"><span class="pl-c">#</span> much better!</span>
<span class="pl-s"><span class="pl-pds">"</span>s<span class="pl-pds">"</span></span></pre></div>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto">PyThermo.jl is registered in Julia's general package repository and can be installed with the package manager. <a href="https://github.com/cjdoris/CondaPkg.jl">CondaPkg.jl</a> is used to automatically install all Python dependencies to a PyThermo-specific Conda environment unless otherwise specified (see CondaPkg docs for details).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(v1.8) pkg&gt; add PyThermo
   Resolving package versions...
   Installed PyThermo ─ v0.2.0"><pre class="notranslate"><code>(v1.8) pkg&gt; add PyThermo
   Resolving package versions...
   Installed PyThermo ─ v0.2.0
</code></pre></div>
<h3 dir="auto"><a id="user-content-future-development" class="anchor" aria-hidden="true" href="#future-development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future development</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add <code>Unitful</code> accessors for more properties</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Use <code>missing</code> instead of <code>nothing</code> for missing properties</li>
</ul>
<h3 dir="auto"><a id="user-content-easter-eggs" class="anchor" aria-hidden="true" href="#easter-eggs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Easter eggs</h3>
<p dir="auto">PyThermo includes a sub-module for 1D gas dynamics capable of calculating shock properties for gas species and mixtures.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PyThermo, PyThermo.ShockTube, Unitful

julia&gt; driver = Species(&quot;He&quot;)
Species(He, 298.1 K, 1.013e+05 Pa)

julia&gt; driven = Mixture([&quot;He&quot; =&gt; 0.95, &quot;acetone&quot; =&gt; 0.05], T = 18u&quot;°C&quot;, P = 85u&quot;kPa&quot;)
Mixture(95% helium, 5% acetone, 291.1 K, 8.500e+04 Pa)

julia&gt; shockjump(driven, 2.2) # find shock jump conditions
(Mixture(95% helium, 5% acetone, 623.7 K, 4.819e+05 Pa), 1023.9438673559401 m s^-1)

julia&gt; shockcalc(driver, driven, 2.2) # calculate shock states for M=2.2
  Region    P [MPa] T [K] ρ [kg/m³] cₛ [m/s]
  ––––––––– ––––––– ––––– ––––––––– ––––––––
  Driver     3.732  298.1   5.92      1016
  Driven     0.085  291.1  0.2355    748.1
  Shocked   0.4819  623.7  0.6231     1066  
  Reflected  1.754  1003    1.408     1332

Driver gas: helium
Driven gas: 95% helium, 5% acetone
Post-shock velocity: 1024 m/s

julia&gt; density(ans.shocked) / density(ans.driven)
2.64075735975203"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyThermo, PyThermo<span class="pl-k">.</span>ShockTube, Unitful

julia<span class="pl-k">&gt;</span> driver <span class="pl-k">=</span> <span class="pl-c1">Species</span>(<span class="pl-s"><span class="pl-pds">"</span>He<span class="pl-pds">"</span></span>)
<span class="pl-c1">Species</span>(He, <span class="pl-c1">298.1</span> K, <span class="pl-c1">1.013e+05</span> Pa)

julia<span class="pl-k">&gt;</span> driven <span class="pl-k">=</span> <span class="pl-c1">Mixture</span>([<span class="pl-s"><span class="pl-pds">"</span>He<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.95</span>, <span class="pl-s"><span class="pl-pds">"</span>acetone<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.05</span>], T <span class="pl-k">=</span> <span class="pl-c1">18</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°C<span class="pl-pds">"</span></span>, P <span class="pl-k">=</span> <span class="pl-c1">85</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kPa<span class="pl-pds">"</span></span>)
<span class="pl-c1">Mixture</span>(<span class="pl-c1">95</span><span class="pl-k">%</span> helium, <span class="pl-c1">5</span><span class="pl-k">%</span> acetone, <span class="pl-c1">291.1</span> K, <span class="pl-c1">8.500e+04</span> Pa)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">shockjump</span>(driven, <span class="pl-c1">2.2</span>) <span class="pl-c"><span class="pl-c">#</span> find shock jump conditions</span>
(<span class="pl-c1">Mixture</span>(<span class="pl-c1">95</span><span class="pl-k">%</span> helium, <span class="pl-c1">5</span><span class="pl-k">%</span> acetone, <span class="pl-c1">623.7</span> K, <span class="pl-c1">4.819e+05</span> Pa), <span class="pl-c1">1023.9438673559401</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">shockcalc</span>(driver, driven, <span class="pl-c1">2.2</span>) <span class="pl-c"><span class="pl-c">#</span> calculate shock states for M=2.2</span>
  Region    P [MPa] T [K] ρ [kg<span class="pl-k">/</span>m³] cₛ [m<span class="pl-k">/</span>s]
  ––––––––– ––––––– ––––– ––––––––– ––––––––
  Driver     <span class="pl-c1">3.732</span>  <span class="pl-c1">298.1</span>   <span class="pl-c1">5.92</span>      <span class="pl-c1">1016</span>
  Driven     <span class="pl-c1">0.085</span>  <span class="pl-c1">291.1</span>  <span class="pl-c1">0.2355</span>    <span class="pl-c1">748.1</span>
  Shocked   <span class="pl-c1">0.4819</span>  <span class="pl-c1">623.7</span>  <span class="pl-c1">0.6231</span>     <span class="pl-c1">1066</span>  
  Reflected  <span class="pl-c1">1.754</span>  <span class="pl-c1">1003</span>    <span class="pl-c1">1.408</span>     <span class="pl-c1">1332</span>

Driver gas<span class="pl-k">:</span> helium
Driven gas<span class="pl-k">:</span> <span class="pl-c1">95</span><span class="pl-k">%</span> helium, <span class="pl-c1">5</span><span class="pl-k">%</span> acetone
Post<span class="pl-k">-</span>shock velocity<span class="pl-k">:</span> <span class="pl-c1">1024</span> m<span class="pl-k">/</span>s

julia<span class="pl-k">&gt;</span> <span class="pl-c1">density</span>(ans<span class="pl-k">.</span>shocked) <span class="pl-k">/</span> <span class="pl-c1">density</span>(ans<span class="pl-k">.</span>driven)
<span class="pl-c1">2.64075735975203</span></pre></div>
</article></div>