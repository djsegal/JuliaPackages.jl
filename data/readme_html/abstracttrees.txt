<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-abstracttrees" class="anchor" aria-hidden="true" href="#abstracttrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AbstractTrees</h1>
<p dir="auto"><a href="https://github.com/JuliaCollections/AbstractTrees.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaCollections/AbstractTrees.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaCollections/AbstractTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fede1d37069579c28bfc380c7af53b83ba96b4c65b0b833557e826280e0f2dce/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961436f6c6c656374696f6e732f416273747261637454726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaCollections/AbstractTrees.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://JuliaCollections.github.io/AbstractTrees.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://JuliaCollections.github.io/AbstractTrees.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A package for dealing with generalized tree-like data structures.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; t = [[1,2], [3,4]];  # AbstractArray and AbstractDict are trees

julia&gt; children(t)
2-element Vector{Vector{Int64}}:
 [1, 2]
 [3, 4]

julia&gt; getdescendant(t, (2,1))
3

julia&gt; collect(PreOrderDFS(t))  # iterate from root to leaves
7-element Vector{Any}:
  [[1, 2], [3, 4]]
  [1, 2]
 1
 2
  [3, 4]
 3
 4

julia&gt; collect(PostOrderDFS(t))  # iterate from leaves to root
7-element Vector{Any}:
 1
 2
  [1, 2]
 3
 4
  [3, 4]
  [[1, 2], [3, 4]]

julia&gt; collect(Leaves(t))  # iterate over leaves
4-element Vector{Int64}:
 1
 2
 3
 4

julia&gt; struct FloatTree  # make your own trees
        x::Float64
        children::Vector{FloatTree}
    end;

julia&gt; AbstractTrees.children(t::FloatTree) = t.children;

julia&gt; AbstractTrees.nodevalue(t::FloatTree) = t.x;

julia&gt; print_tree(FloatTree(NaN, [FloatTree(Inf, []), FloatTree(-Inf, [])]))
NaN
├─ Inf
└─ -Inf"><pre>julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> [[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]];  <span class="pl-c"><span class="pl-c">#</span> AbstractArray and AbstractDict are trees</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">children</span>(t)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{Int64}}<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
 [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">getdescendant</span>(t, (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>))
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">PreOrderDFS</span>(t))  <span class="pl-c"><span class="pl-c">#</span> iterate from root to leaves</span>
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
  [[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]]
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">PostOrderDFS</span>(t))  <span class="pl-c"><span class="pl-c">#</span> iterate from leaves to root</span>
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
  [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
  [[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">Leaves</span>(t))  <span class="pl-c"><span class="pl-c">#</span> iterate over leaves</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> FloatTree  <span class="pl-c"><span class="pl-c">#</span> make your own trees</span>
        x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
        children<span class="pl-k">::</span><span class="pl-c1">Vector{FloatTree}</span>
    <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> AbstractTrees<span class="pl-k">.</span><span class="pl-en">children</span>(t<span class="pl-k">::</span><span class="pl-c1">FloatTree</span>) <span class="pl-k">=</span> t<span class="pl-k">.</span>children;

julia<span class="pl-k">&gt;</span> AbstractTrees<span class="pl-k">.</span><span class="pl-en">nodevalue</span>(t<span class="pl-k">::</span><span class="pl-c1">FloatTree</span>) <span class="pl-k">=</span> t<span class="pl-k">.</span>x;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(<span class="pl-c1">FloatTree</span>(<span class="pl-c1">NaN</span>, [<span class="pl-c1">FloatTree</span>(<span class="pl-c1">Inf</span>, []), <span class="pl-c1">FloatTree</span>(<span class="pl-k">-</span><span class="pl-c1">Inf</span>, [])]))
<span class="pl-c1">NaN</span>
├─ <span class="pl-c1">Inf</span>
└─ <span class="pl-k">-</span><span class="pl-c1">Inf</span></pre></div>
</article></div>