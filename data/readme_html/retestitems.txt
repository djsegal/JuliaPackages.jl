<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaTesting/ReTestItems.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaTesting/ReTestItems.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaTesting/ReTestItems.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cdabe3415340375bcdc3cabcf593439a023fcc317080d6feee095b8e7c455396/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696154657374696e672f5265546573744974656d732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaTesting/ReTestItems.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-retestitemsjl" class="anchor" aria-hidden="true" href="#retestitemsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReTestItems.jl</h1>
<p dir="auto">A package for running <code>@testitem</code>s in parallel.</p>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<p dir="auto">Wrap your tests in the <code>@testitem</code> macro, place then in a file name <code>*_test.jl</code>, and use <code>runtests</code> to run them:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# test/arithmetic_tests.jl
@testitem &quot;addition&quot; begin
    @test 1 + 2 == 3
    @test 0 + 2 == 2
    @test -1 + 2 == 1
end
@testitem &quot;multiplication&quot; begin
    @test 1 * 2 == 2
    @test 0 * 2 == 0
    @test -1 * 2 == -2
end"><pre><span class="pl-c"><span class="pl-c">#</span> test/arithmetic_tests.jl</span>
<span class="pl-c1">@testitem</span> <span class="pl-s"><span class="pl-pds">"</span>addition<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">3</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">2</span>
    <span class="pl-c1">@test</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>
<span class="pl-c1">@testitem</span> <span class="pl-s"><span class="pl-pds">"</span>multiplication<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">2</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">0</span> <span class="pl-k">*</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>
    <span class="pl-c1">@test</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ReTestItems

julia&gt; runtests(&quot;test/arithmetic_tests.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ReTestItems

julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>(<span class="pl-s"><span class="pl-pds">"</span>test/arithmetic_tests.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Run test-items in parallel on multiple processes by passing <code>nworkers</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; runtests(&quot;test/arithmetic_tests.jl&quot;; nworkers=2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>(<span class="pl-s"><span class="pl-pds">"</span>test/arithmetic_tests.jl<span class="pl-pds">"</span></span>; nworkers<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<h2 dir="auto"><a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running tests</h2>
<p dir="auto">You can run tests using the <code>runtests</code> function, which will run all tests for the current active project.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ReTestItems

julia&gt; runtests()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ReTestItems

julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>()</pre></div>
<p dir="auto">Test-items must be in files named with the suffix <code>_test.jl</code> or <code>_tests.jl</code>.
ReTestItems uses these file suffixes to identify which files are "test files";
all other files will be ignored by <code>runtests</code>.</p>
<p dir="auto"><code>runtests</code> allows you to run a subset of tests by passing the directory or file path(s) you want to run.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; runtests(
           &quot;test/Database/physical_representation_tests.jl&quot;,
           &quot;test/PhysicalRepresentation/&quot;,
       )"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>(
           <span class="pl-s"><span class="pl-pds">"</span>test/Database/physical_representation_tests.jl<span class="pl-pds">"</span></span>,
           <span class="pl-s"><span class="pl-pds">"</span>test/PhysicalRepresentation/<span class="pl-pds">"</span></span>,
       )</pre></div>
<p dir="auto">You can use the <code>name</code> keyword, to select test-items by name.
Pass a string to select a test-item by its exact name,
or pass a regular expression (regex) to match multiple test-item names.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; runtests(&quot;test/Database/&quot;; name=&quot;issue-123&quot;)

julia&gt; runtests(&quot;test/Database/&quot;; name=r&quot;^issue&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>(<span class="pl-s"><span class="pl-pds">"</span>test/Database/<span class="pl-pds">"</span></span>; name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>issue-123<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>(<span class="pl-s"><span class="pl-pds">"</span>test/Database/<span class="pl-pds">"</span></span>; name<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">r"</span>^issue<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">For interactive sessions, all logs from the tests will be printed out in the REPL by default.
You can disable this by passing <code>logs=:issues</code> in which case logs from a test-item are only printed if that test-items errors or fails.
<code>logs=:issues</code> is also the default for non-interactive sessions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; runtests(&quot;test/Database/&quot;; logs=:issues)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">runtests</span>(<span class="pl-s"><span class="pl-pds">"</span>test/Database/<span class="pl-pds">"</span></span>; logs<span class="pl-k">=</span><span class="pl-c1">:issues</span>)</pre></div>
<h2 dir="auto"><a id="user-content-writing-tests" class="anchor" aria-hidden="true" href="#writing-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing tests</h2>
<p dir="auto">Tests must be wrapped in a <code>@testitem</code>.
In most cases, a <code>@testitem</code> can just be used instead of a <code>@testset</code>, wrapping together a bunch of related tests:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@testitem &quot;min/max&quot; begin
    @test min(1, 2) == 1
    @test max(1, 2) == 2
end"><pre><span class="pl-c1">@testitem</span> <span class="pl-s"><span class="pl-pds">"</span>min/max<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">min</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">1</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">max</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The test-item's code is evaluated as top-level code in a new module,
so it can include imports, define new structs or helper functions, as well as declare <code>@test</code>s and <code>@testset</code>s.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@testitem &quot;Do cool stuff&quot; begin
    using MyPkgDep
    function really_cool_stuff()
        # ...
    end
    @testset &quot;Cool stuff doing&quot; begin
        @test really_cool_stuff()
    end
end"><pre><span class="pl-c1">@testitem</span> <span class="pl-s"><span class="pl-pds">"</span>Do cool stuff<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-k">using</span> MyPkgDep
    <span class="pl-k">function</span> <span class="pl-en">really_cool_stuff</span>()
        <span class="pl-c"><span class="pl-c">#</span> ...</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Cool stuff doing<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        <span class="pl-c1">@test</span> <span class="pl-c1">really_cool_stuff</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">By default, <code>Test</code> and the package being tested will be imported into the <code>@testitem</code> automatically.</p>
<p dir="auto">Since a <code>@testitem</code> is the block of code that will be executed, <code>@testitem</code>s cannot be nested.</p>
<p dir="auto">If some test-specific code needs to be shared by multiple <code>@testitem</code>s, this code can be placed in a <code>module</code> and marked as <code>@testsetup</code>,
and the <code>@testitem</code>s can depend on it via the <code>setup</code> keyword.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@testsetup module TestIrrationals
    export PI, area
    const PI = 3.14159
    area(radius) = PI * radius^2
end
@testitem &quot;Arithmetic&quot; setup=[TestIrrationals] begin
    @test 1 / PI ≈ 0.31831 atol=1e-6
end
@testitem &quot;Geometry&quot; setup=[TestIrrationals] begin
    @test area(1) ≈ PI
end"><pre><span class="pl-c1">@testsetup</span> <span class="pl-k">module</span> TestIrrationals
    <span class="pl-k">export</span> PI, area
    <span class="pl-k">const</span> PI <span class="pl-k">=</span> <span class="pl-c1">3.14159</span>
    <span class="pl-en">area</span>(radius) <span class="pl-k">=</span> PI <span class="pl-k">*</span> radius<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>
<span class="pl-c1">@testitem</span> <span class="pl-s"><span class="pl-pds">"</span>Arithmetic<span class="pl-pds">"</span></span> setup<span class="pl-k">=</span>[TestIrrationals] <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> PI <span class="pl-k">≈</span> <span class="pl-c1">0.31831</span> atol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>
<span class="pl-k">end</span>
<span class="pl-c1">@testitem</span> <span class="pl-s"><span class="pl-pds">"</span>Geometry<span class="pl-pds">"</span></span> setup<span class="pl-k">=</span>[TestIrrationals] <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">area</span>(<span class="pl-c1">1</span>) <span class="pl-k">≈</span> PI
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary</h3>
<ol dir="auto">
<li>Write tests inside of an <code>@testitem</code> block.
<ul dir="auto">
<li>These are like an <code>@testset</code>, except that they must contain all the code they need to run;
any imports or definitions required for the tests must be inside the <code>@testitem</code>.</li>
<li>A <code>@testset</code> can still be used to add structure to your tests, but all <code>@testset</code>s must be inside an <code>@testitem</code>.
These nested <code>@testset</code>s can add structure to the reporting, but serve no other purpose.</li>
<li>Tests that might previously have had imports and <code>struct</code> or <code>function</code> definitions outside of an <code>@testset</code> should instead now declare these inside of a <code>@testitem</code>.</li>
<li><code>@testitem</code> will be run in parallel (using whatever threads or workers are available to the current Julia process).</li>
</ul>
</li>
<li>Write shared/re-used testing code in a <code>@testsetup module</code>
<ul dir="auto">
<li>If you want to split tests up into multiple <code>@testitem</code> (so they can run in parallel), but also want to share common helper functions, types, or constants,
then put the shared helper code in a module marked with <code>@testsetup</code>.</li>
<li>Each <code>@testsetup</code> will only be evaluated once per Julia process.</li>
<li>A <code>@testsetup module</code> is recommended to be used for sharing helper definitions or shared immutable data;
not for initializing shared global state that is meant to be mutated (like starting a server).
For example, a server should be explicitly started and stopped as needed in a <code>@testitem</code>, not started within a <code>@testsetup module</code>.</li>
</ul>
</li>
<li>Write tests in files named <code>*_test.jl</code> or <code>*_tests.jl</code>.
<ul dir="auto">
<li>ReTestItems scans the directory tree for any file with the correct naming scheme and automatically schedules for evaluation the <code>@testitem</code> they contain.</li>
<li>Files without this naming convention will not run.</li>
<li>Test files can reside in either the <code>src/</code> or <code>test/</code> directory,
so long as they are named like <code>src/sorted_set_tests.jl</code> (note the <code>_tests.jl</code> suffix).</li>
<li>No explicit <code>include</code> of these files is required.</li>
<li>Files containing only <code>@testsetup</code>s can be named <code>*_testsetup.jl</code> or <code>*_testsetups.jl</code>,
and these files will always be included.</li>
<li>Note that <code>test/runtests.jl</code> does not meet the naming convention, and should not itself contain <code>@testitems</code>.</li>
</ul>
</li>
<li>Make sure your <code>test/runtests.jl</code> script calls <code>runtests</code>.
<ul dir="auto">
<li><code>test/runtests.jl</code> is the script run when you call <code>Pkg.test()</code> or <code>] test</code> at the REPL.</li>
<li>This script can have ReTestItems.jl run tests by calling <code>runtests</code>, for example
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# test/runtests.jl
using ReTestItems, MyPackage
runtests(MyPackage)"><pre><span class="pl-c"><span class="pl-c">#</span> test/runtests.jl</span>
<span class="pl-k">using</span> ReTestItems, MyPackage
<span class="pl-c1">runtests</span>(MyPackage)</pre></div>
</li>
</ul>
</li>
</ol>
<hr>
<h3 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h3>
<p dir="auto">Issues and pull requests are welcome!
New contributors should make sure to read the <a href="https://github.com/SciML/ColPrac">ColPrac Contributor Guide</a>.
For significant changes please <a href="https://github.com/JuliaTesting/ReTestItems.jl/issues">open an issue</a> for discussion before opening a PR.
Information on adding tests is in the <a href="test/README.md">test/README.md</a>.</p>
</article></div>