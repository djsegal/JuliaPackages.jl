<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sphericalharmonicmodesjl" class="anchor" aria-hidden="true" href="#sphericalharmonicmodesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SphericalHarmonicModes.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jishnub/SphericalHarmonicModes.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/jishnub/SphericalHarmonicModes.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/jishnub/SphericalHarmonicModes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b1284fc12768e8a1e030326b35d156dfd355b925aaa577bde452b0ec3c107d97/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6973686e75622f53706865726963616c4861726d6f6e69634d6f6465732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jishnub/SphericalHarmonicModes.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://jishnub.github.io/SphericalHarmonicModes.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jishnub.github.io/SphericalHarmonicModes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a few iterators that are relevant in the context of spherical harmonics. The goal of this project is to convert multi-dimensional Cartesian indices to one-dimensional ones. They may therefore be used for indexing arrays, and would allow storing arrays of spherical harmonic coefficients contiguously. There is also the package <a href="https://github.com/jishnub/SphericalHarmonicArrays.jl">SphericalHarmonicArrays.jl</a> that uses these iterators for indexing.</p>
<p dir="auto">The iterators implemented currently are:</p>
<ol dir="auto">
<li><code>LM</code> and <code>ML</code>: Two iterators to loop over spherical harmonic modes denoted by <code>(l,m)</code>, where <code>l</code> is the angular degree and <code>m</code> is the azimuthal order.</li>
<li><code>L2L1Triangle</code>: An iterator to loop over pairs of spherical harmonic degrees <code>l2</code> and <code>l1</code> that satisfy the triangle condition <code>|l1-Δl| &lt;= l2 &lt;= l1+Δl</code>. The iterator generates pairs of <code>(l2,l1)</code> for a specified range of <code>l1</code> and all <code>Δl</code> that satisfy <code>0 ⩽ Δl ⩽ Δl_max</code> for a specified <code>Δl_max</code>. Optionally a bound on <code>l2</code> may be specified.</li>
</ol>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<h3 dir="auto"><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add SphericalHarmonicModes

julia&gt; using SphericalHarmonicModes"><pre>] add SphericalHarmonicModes

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SphericalHarmonicModes</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-creating-a-spherical-harmonic-mode-iterator" class="anchor" aria-hidden="true" href="#creating-a-spherical-harmonic-mode-iterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating a spherical harmonic mode iterator</h3>
<p dir="auto">There are two different orderings possible to iterate over spherical harmonic modes, with either <code>l</code> or <code>m</code> increasing faster than the other. They are denoted by <code>LM</code> and <code>ML</code>, where --- going by the Julia convention of column-major arrays --- the first index increases faster than the second. Irrespective of which ordering is chosen, the modes are always returned as <code>(l,m)</code> when the iterators are looped over.</p>
<p dir="auto">Both the iterators are created using the general syntax <code>itr(l_range, m_range)</code> where <code>itr</code> may be <code>LM</code> or <code>ML</code>. To create an iterator with <code>m</code> increasing faster than <code>l</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; itr = ML(0:1, -1:1)
Spherical harmonic modes with m increasing faster than l
(l_min = 0, l_max = 1, m_min = -1, m_max = 1)

julia&gt; collect(itr)
4-element Array{Tuple{Int64,Int64},1}:
 (0, 0) 
 (1, -1)
 (1, 0) 
 (1, 1)"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)
Spherical harmonic modes with m increasing faster than l
(l_min <span class="pl-k">=</span> <span class="pl-c1">0</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">1</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">To create an iterator with <code>l</code> increasing faster than <code>m</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; itr = LM(0:1, -1:1)
Spherical harmonic modes with l increasing faster than m
(l_min = 0, l_max = 1, m_min = -1, m_max = 1)

julia&gt; collect(itr)
4-element Array{Tuple{Int64,Int64},1}:
 (1, -1)
 (0, 0) 
 (1, 0) 
 (1, 1)"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">LM</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)
Spherical harmonic modes with l increasing faster than m
(l_min <span class="pl-k">=</span> <span class="pl-c1">0</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">1</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">Special constructors to include all <code>m</code>'s are available for convenience.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; LM(2:4) # a range in l, and all valid m for each l
Spherical harmonic modes with l increasing faster than m
(l_min = 2, l_max = 4, m_min = -4, m_max = 4)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LM</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> a range in l, and all valid m for each l</span>
Spherical harmonic modes with l increasing faster than m
(l_min <span class="pl-k">=</span> <span class="pl-c1">2</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">4</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">4</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">4</span>)</pre></div>
<h3 dir="auto"><a id="user-content-creating-an-l2l1-iterator" class="anchor" aria-hidden="true" href="#creating-an-l2l1-iterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating an (l2,l1) iterator</h3>
<p dir="auto">This iterator may be created as <code>L2L1Triangle(l1_min,l1_max,Δl_max,l2_min,l2_max)</code>, for example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; itr = L2L1Triangle(1,3,2,2,4)
Spherical harmonic modes (l2,l1) that satisfy l1 - 2 ⩽ l2 ⩽ l1 + 2, with 2 ⩽ l2 ⩽ 4 and 1 ⩽ l1 ⩽ 3

julia&gt; collect(itr)
8-element Array{Tuple{Int64,Int64},1}:
 (2, 1)
 (3, 1)
 (2, 2)
 (3, 2)
 (4, 2)
 (2, 3)
 (3, 3)
 (4, 3)"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">L2L1Triangle</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
Spherical harmonic modes (l2,l1) that satisfy l1 <span class="pl-k">-</span> <span class="pl-c1">2</span> ⩽ l2 ⩽ l1 <span class="pl-k">+</span> <span class="pl-c1">2</span>, with <span class="pl-c1">2</span> ⩽ l2 ⩽ <span class="pl-c1">4</span> and <span class="pl-c1">1</span> ⩽ l1 ⩽ <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">3</span>)</pre></div>
<p dir="auto">The ranges of <code>l1</code> and <code>l2</code> will be clipped to the maximal valid subset dictated by <code>Δl_max</code>.</p>
<h3 dir="auto"><a id="user-content-using-the-iterators" class="anchor" aria-hidden="true" href="#using-the-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using the iterators</h3>
<p dir="auto">The length of an iterator can be computed in <code>O(1)</code> time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime length(m) setup=(m=LM(0:rand(1:1000000)))
  3.197 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">length</span>(m) setup<span class="pl-k">=</span>(m<span class="pl-k">=</span><span class="pl-c1">LM</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>)))
  <span class="pl-c1">3.197</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">It is easy to check whether a mode is present in the iterator. This can also be checked in <code>O(1)</code> time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime el in m setup=(m=LM(0:rand(1:1000000)); el=(rand(1:100),rand(1:100)))
  7.307 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> el <span class="pl-k">in</span> m setup<span class="pl-k">=</span>(m<span class="pl-k">=</span><span class="pl-c1">LM</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>)); el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)))
  <span class="pl-c1">7.307</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">The index at which a mode is present can be checked using <code>modeindex</code>. For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; itr = ML(0:2,-1:2);

julia&gt; collect(itr)
8-element Array{Tuple{Int64,Int64},1}:
 (0, 0) 
 (1, -1)
 (1, 0) 
 (1, 1) 
 (2, -1)
 (2, 0) 
 (2, 1) 
 (2, 2) 

julia&gt; modeindex(itr,(1,0))
3

julia&gt; modeindex(itr,(2,2))
8"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) 
 (<span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) 
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modeindex</span>(itr,(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modeindex</span>(itr,(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">8</span></pre></div>
<p dir="auto">This is also evaluated in <code>O(1)</code> time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; itr = ML(0:20000);

julia&gt; @btime modeindex($itr,el) setup=(el=(rand(1000:20000),rand(1:1000)))
  6.386 ns (0 allocations: 0 bytes)

julia&gt; itr = LM(0:20000);

julia&gt; @btime modeindex($itr,el) setup=(el=(rand(1000:20000),rand(1:1000)))
  9.595 ns (0 allocations: 0 bytes)

julia&gt; itr = L2L1Triangle(1:100, 100);

julia&gt; @btime modeindex($itr,el) setup=(el=(rand(1:100),rand(1:100)))
  15.411 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">20000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">modeindex</span>(<span class="pl-k">$</span>itr,el) setup<span class="pl-k">=</span>(el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span><span class="pl-k">:</span><span class="pl-c1">20000</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>)))
  <span class="pl-c1">6.386</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">LM</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">20000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">modeindex</span>(<span class="pl-k">$</span>itr,el) setup<span class="pl-k">=</span>(el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span><span class="pl-k">:</span><span class="pl-c1">20000</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>)))
  <span class="pl-c1">9.595</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">L2L1Triangle</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, <span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">modeindex</span>(<span class="pl-k">$</span>itr,el) setup<span class="pl-k">=</span>(el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)))
  <span class="pl-c1">15.411</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">Indexing is not supported at the moment, but the last element can be obtained easily.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; itr = ML(0:2,-1:2);

julia&gt; collect(itr)[end]
(2, 2)

julia&gt; last(itr)
(2, 2)

julia&gt; itr = ML(0:20000);

julia&gt; @btime last(m) setup=(m=ML(0:rand(1:20000)))
  3.734 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)[<span class="pl-c1">end</span>]
(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">last</span>(itr)
(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">20000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">last</span>(m) setup<span class="pl-k">=</span>(m<span class="pl-k">=</span><span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20000</span>)))
  <span class="pl-c1">3.734</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">This project is licensed under the MIT License - see the <a href="https://github.com/jishnub/SphericalHarmonicModes.jl/blob/master/LICENSE">LICENSE.md</a> file for details.</p>
</article></div>