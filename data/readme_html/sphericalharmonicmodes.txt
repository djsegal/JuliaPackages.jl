<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sphericalharmonicmodesjl" class="anchor" aria-hidden="true" href="#sphericalharmonicmodesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SphericalHarmonicModes.jl</h1>
<p><a href="https://travis-ci.com/jishnub/SphericalHarmonicModes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/96da231825fef5461817b0b6cc68587459b19704/68747470733a2f2f7472617669732d63692e636f6d2f6a6973686e75622f53706865726963616c4861726d6f6e69634d6f6465732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jishnub/SphericalHarmonicModes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/jishnub/SphericalHarmonicModes-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7212a2686b4bb7cdec1a6310c1047d06f1e29b5c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a6973686e75622f53706865726963616c4861726d6f6e69634d6f6465732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/jishnub/SphericalHarmonicModes.jl?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/jishnub/SphericalHarmonicModes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6390822ec78ebf193db3fe95a43d3d1100ddeb36/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6973686e75622f53706865726963616c4861726d6f6e69634d6f6465732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jishnub/SphericalHarmonicModes.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides a few iterators that are relevant in the context of spherical harmonics. The goal of this project is to convert multi-dimensional Cartesian indices to one-dimensional ones. They may therefore be used for indexing arrays, and would allow storing arrays of spherical harmonic coefficients contiguously. There is also the package <a href="https://github.com/jishnub/SphericalHarmonicArrays.jl">SphericalHarmonicArrays.jl</a> that uses these iterators for indexing.</p>
<p>The iterators implemented currently are:</p>
<ol>
<li><code>LM</code> and <code>ML</code>: Two iterators to loop over spherical harmonic modes denoted by <code>(l,m)</code>, where <code>l</code> is the angular degree and <code>m</code> is the azimuthal order.</li>
<li><code>L₂L₁Δ</code>: An iterator to loop over pairs of spherical harmonic degrees <code>l₁</code> and <code>l₂</code>, where <code>|l₁-Δl| &lt;= l₂ &lt;= l₁+Δl</code>. The iterator generates pairs of <code>(l₂,l₁)</code> for a specified range of <code>l₁</code> and all <code>Δl</code> that satisfy <code>0 ⩽ Δl ⩽ Δl_max</code> for a specified <code>Δl_max</code>. Optionally a bound on <code>l₂</code> may be specified.</li>
</ol>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<h3><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h3>
<div class="highlight highlight-source-julia"><pre>] add SphericalHarmonicModes

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SphericalHarmonicModes</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-creating-a-spherical-harmonic-mode-iterator" class="anchor" aria-hidden="true" href="#creating-a-spherical-harmonic-mode-iterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating a spherical harmonic mode iterator</h3>
<p>There are two different orderings possible to iterate over spherical harmonic modes, with either <code>l</code> or <code>m</code> increasing faster than the other. They are denoted by <code>LM</code> and <code>ML</code>, where --- going by the Julia convention of column-major arrays --- the first index increases faster than the second. Irrespective of which ordering is chosen, the modes are always returned as <code>(l,m)</code> when the iterators are looped over.</p>
<p>Both the iterators are created using the general syntax <code>itr(l_min,l_max,m_min,m_max)</code> where <code>itr</code> may be <code>LM</code> or <code>ML</code>. To create an iterator with <code>m</code> increasing faster than <code>l</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
Spherical harmonic modes with m increasing faster than l
(l_min <span class="pl-k">=</span> <span class="pl-c1">0</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">1</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<p>To create an iterator with <code>l</code> increasing faster than <code>m</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">LM</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
Spherical harmonic modes with l increasing faster than m
(l_min <span class="pl-k">=</span> <span class="pl-c1">0</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">1</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<p>Special constructors to include all <code>m</code>'s are available for convenience.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LM</span>(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> only one l, and all valid m for that l</span>
Spherical harmonic modes with l increasing faster than m
(l_min <span class="pl-k">=</span> <span class="pl-c1">2</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">2</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LM</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> a range in l, and all valid m for each l</span>
Spherical harmonic modes with l increasing faster than m
(l_min <span class="pl-k">=</span> <span class="pl-c1">2</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">4</span>, m_min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">4</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">LM</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>) <span class="pl-k">==</span> <span class="pl-c1">LM</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> may specify the range as a UnitRange</span>
<span class="pl-c1">true</span></pre></div>
<p>You may also choose a range of <code>m</code>'s.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">LM</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> a range in l, and all valid m in range for each l</span>
Spherical harmonic modes with l increasing faster than m
(l_min <span class="pl-k">=</span> <span class="pl-c1">2</span>, l_max <span class="pl-k">=</span> <span class="pl-c1">4</span>, m_min <span class="pl-k">=</span> <span class="pl-c1">0</span>, m_max <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<h3><a id="user-content-creating-an-ll-iterator" class="anchor" aria-hidden="true" href="#creating-an-ll-iterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating an (l₂,l₁) iterator</h3>
<p>This iterator may be created as <code>L₂L₁Δ(l₁_min,l₁_max,Δl_max,l₂_min,l₂_max)</code>, for example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> L₂L₁Δ(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
Spherical harmonic modes (l₂,l₁) <span class="pl-k">where</span> <span class="pl-k">|</span>l₁<span class="pl-k">-</span>Δl<span class="pl-k">|</span> ⩽ l₂ ⩽ l₁<span class="pl-k">+</span>Δl <span class="pl-k">for</span> <span class="pl-c1">0</span> ⩽ Δl ⩽ Δl_max, l₁_min ⩽ l₁ ⩽ l₁_max, and l₂_min ⩽ l₂ ⩽ l₂_max
(<span class="pl-c1">2</span> ⩽ l₂ ⩽ <span class="pl-c1">4</span> and <span class="pl-c1">1</span> ⩽ l₁ ⩽ <span class="pl-c1">3</span>, with Δl_max <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">3</span>)</pre></div>
<p>The ranges of <code>l₁</code> and <code>l₂</code> will be clipped to the maximal valid subset dictated by <code>Δl_max</code>. Several convenience constructors are available, such as</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> L₂L₁Δ(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> all valid l₂</span>
Spherical harmonic modes (l₂,l₁) <span class="pl-k">where</span> <span class="pl-k">|</span>l₁<span class="pl-k">-</span>Δl<span class="pl-k">|</span> ⩽ l₂ ⩽ l₁<span class="pl-k">+</span>Δl <span class="pl-k">for</span> <span class="pl-c1">0</span> ⩽ Δl ⩽ Δl_max, l₁_min ⩽ l₁ ⩽ l₁_max, and l₂_min ⩽ l₂ ⩽ l₂_max
(<span class="pl-c1">0</span> ⩽ l₂ ⩽ <span class="pl-c1">4</span> and <span class="pl-c1">1</span> ⩽ l₁ ⩽ <span class="pl-c1">2</span>, with Δl_max <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> L₂L₁Δ(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-k">==</span> L₂L₁Δ(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> the range in l₁ may be specified as a UnitRange</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> L₂L₁Δ(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> all valid l₂ that lie above the lower cutoff</span>
Spherical harmonic modes (l₂,l₁) <span class="pl-k">where</span> <span class="pl-k">|</span>l₁<span class="pl-k">-</span>Δl<span class="pl-k">|</span> ⩽ l₂ ⩽ l₁<span class="pl-k">+</span>Δl <span class="pl-k">for</span> <span class="pl-c1">0</span> ⩽ Δl ⩽ Δl_max, l₁_min ⩽ l₁ ⩽ l₁_max, and l₂_min ⩽ l₂ ⩽ l₂_max
(<span class="pl-c1">2</span> ⩽ l₂ ⩽ <span class="pl-c1">4</span> and <span class="pl-c1">1</span> ⩽ l₁ ⩽ <span class="pl-c1">2</span>, with Δl_max <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> L₂L₁Δ(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> all valid l₂ in range</span>
Spherical harmonic modes (l₂,l₁) <span class="pl-k">where</span> <span class="pl-k">|</span>l₁<span class="pl-k">-</span>Δl<span class="pl-k">|</span> ⩽ l₂ ⩽ l₁<span class="pl-k">+</span>Δl <span class="pl-k">for</span> <span class="pl-c1">0</span> ⩽ Δl ⩽ Δl_max, l₁_min ⩽ l₁ ⩽ l₁_max, and l₂_min ⩽ l₂ ⩽ l₂_max
(<span class="pl-c1">2</span> ⩽ l₂ ⩽ <span class="pl-c1">2</span> and <span class="pl-c1">1</span> ⩽ l₁ ⩽ <span class="pl-c1">2</span>, with Δl_max <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> L₂L₁Δ(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>) <span class="pl-k">==</span> L₂L₁Δ(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> the range in l₂ may be specified as a UnitRange</span>
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-using-the-iterators" class="anchor" aria-hidden="true" href="#using-the-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the iterators</h3>
<p>The length of an iterator can be computed in <code>O(1)</code> time.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">length</span>(m) setup<span class="pl-k">=</span>(m<span class="pl-k">=</span><span class="pl-c1">LM</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>)))
  <span class="pl-c1">20.160</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p>It is easy to check whether a mode is present in the iterator. This can also be checked in <code>O(1)</code> time.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> el <span class="pl-k">in</span> m setup<span class="pl-k">=</span>(m<span class="pl-k">=</span><span class="pl-c1">LM</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>)); el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)))
  <span class="pl-c1">2.676</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p>The index at which a mode is present can be checked using <code>modeindex</code>. For example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) 
 (<span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">0</span>) 
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>) 
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modeindex</span>(itr,(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modeindex</span>(itr,(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">8</span></pre></div>
<p>This is also evaluated in <code>O(1)</code> time.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span>,<span class="pl-c1">20000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">modeindex</span>(<span class="pl-k">$</span>itr,el) setup<span class="pl-k">=</span>(el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span><span class="pl-k">:</span><span class="pl-c1">20000</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>)))
  <span class="pl-c1">17.488</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">LM</span>(<span class="pl-c1">0</span>,<span class="pl-c1">20000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">modeindex</span>(<span class="pl-k">$</span>itr,el) setup<span class="pl-k">=</span>(el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span><span class="pl-k">:</span><span class="pl-c1">20000</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>)))
  <span class="pl-c1">18.084</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> L₂L₁Δ(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">modeindex</span>(<span class="pl-k">$</span>itr,el) setup<span class="pl-k">=</span>(el<span class="pl-k">=</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)))
  <span class="pl-c1">15.411</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p>Indexing is not supported at the moment, but the last element can be obtained easily.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(itr)[<span class="pl-c1">end</span>]
(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">last</span>(itr)
(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> itr <span class="pl-k">=</span> <span class="pl-c1">ML</span>(<span class="pl-c1">0</span>,<span class="pl-c1">20000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">last</span>(m) setup<span class="pl-k">=</span>(m<span class="pl-k">=</span><span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20000</span>)))
  <span class="pl-c1">3.734</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This project is licensed under the MIT License - see the <a href="https://github.com/jishnub/SphericalHarmonicModes.jl/blob/master/LICENSE">LICENSE.md</a> file for details.</p>
</article></div>