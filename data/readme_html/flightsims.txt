<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-flightsims" class="anchor" aria-hidden="true" href="#flightsims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FlightSims</h1>
<p dir="auto"><a href="https://github.com/JinraeKim/FlightSims.jl">FlightSims.jl</a> is a general-purpose numerical simulator supporting nested environments and convenient macro-based data logging.</p>
<h2 dir="auto"><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>APIs</h2>
<p dir="auto">Main APIs can be found in <a href="https://github.com/JinraeKim/FSimBase.jl">FSimBase.jl</a>.
In FlightSims.jl, the default differential equation (DE) solver is <a href="https://diffeq.sciml.ai/stable/#Solver-Algorithms" rel="nofollow"><code>Tsit5()</code></a> for ordinary DE (ODE).</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto">If you want more functionality, please feel free to report an issue!</p>
<h3 dir="auto"><a id="user-content-nested-environments-and-zoo" class="anchor" aria-hidden="true" href="#nested-environments-and-zoo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nested Environments and Zoo</h3>
<ul dir="auto">
<li>Environments usually stand for <strong>dynamical systems</strong> but also include <strong>other utilities</strong>, for example, controllers.</li>
<li>One can generate user-defined nested environments using provided APIs.
Also, some predefined environments are provided for reusability.
Take a look at <a href="https://github.com/JinraeKim/FSimZoo.jl">FSimZoo.jl</a>.</li>
</ul>
<h3 dir="auto"><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utilities</h3>
<ul dir="auto">
<li>Some utilities are also provided for dynamical system simulation.</li>
<li>Examples include
<ul dir="auto">
<li><strong>Simulation rendering</strong>
<ul dir="auto">
<li>See <a href="https://github.com/JinraeKim/FSimPlots.jl">FSimPlots.jl</a>. Note that FSimPlots.jl is not exported in the default setting to reduce precompilation time.</li>
</ul>
</li>
</ul>
  
  
<ul dir="auto">
<li><strong>ROS2 compatibility</strong>
<ul dir="auto">
<li>See <a href="https://github.com/JinraeKim/FSimROS.jl">FSimROS.jl</a>. Note that FSimROS.jl is not exported in the default setting.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<h2 dir="auto"><a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic</h2>
<h3 dir="auto"><a id="user-content-minimal-examples" class="anchor" aria-hidden="true" href="#minimal-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimal examples</h3>
<ul dir="auto">
<li>For minimal examples of FlightSims.jl,
see <a href="https://github.com/JinraeKim/FSimBase.jl">FSimBase.jl</a>.</li>
</ul>
<h3 dir="auto"><a id="user-content-discrete-problem" class="anchor" aria-hidden="true" href="#discrete-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Discrete problem</h3>
<ul dir="auto">
<li>See <code>test/environments/basics/discrete_problem.jl</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DifferentialEquations


function main()
    t0, tf = 0, 10
    x0 = [1.0, 2, 3]
    &quot;&quot;&quot;
    dx: next x
    &quot;&quot;&quot;
    @Loggable function dynamics!(dx, x, p, t; u)
        @log x
        dx .= 0.99*x + u
        @onlylog u_next = dx
    end
    simulator = Simulator(x0, apply_inputs(dynamics!; u=zeros(3));
                          Problem=:Discrete,
                          tf=tf,  # default step length = 1 for Discrete problem
                         )
    df = solve(simulator)
end"><pre><span class="pl-k">using</span> DifferentialEquations


<span class="pl-k">function</span> <span class="pl-en">main</span>()
    t0, tf <span class="pl-k">=</span> <span class="pl-c1">0</span>, <span class="pl-c1">10</span>
    x0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
    <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    dx: next x</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>
    <span class="pl-c1">@Loggable</span> <span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(dx, x, p, t; u)
        <span class="pl-c1">@log</span> x
        dx <span class="pl-k">.=</span> <span class="pl-c1">0.99</span><span class="pl-k">*</span>x <span class="pl-k">+</span> u
        <span class="pl-c1">@onlylog</span> u_next <span class="pl-k">=</span> dx
    <span class="pl-k">end</span>
    simulator <span class="pl-k">=</span> <span class="pl-c1">Simulator</span>(x0, <span class="pl-c1">apply_inputs</span>(dynamics!; u<span class="pl-k">=</span><span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>));
                          Problem<span class="pl-k">=</span><span class="pl-c1">:Discrete</span>,
                          tf<span class="pl-k">=</span>tf,  <span class="pl-c"><span class="pl-c">#</span> default step length = 1 for Discrete problem</span>
                         )
    df <span class="pl-k">=</span> <span class="pl-c1">solve</span>(simulator)
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; main()
11×2 DataFrame
 Row │ time     sol
     │ Float64  NamedTup…
─────┼────────────────────────────────────────────
   1 │     0.0  (u_next = [0.99, 1.98, 2.97], x …
   2 │     1.0  (u_next = [0.9801, 1.9602, 2.940…
   3 │     2.0  (u_next = [0.970299, 1.9406, 2.9…
   4 │     3.0  (u_next = [0.960596, 1.92119, 2.…
   5 │     4.0  (u_next = [0.95099, 1.90198, 2.8…
   6 │     5.0  (u_next = [0.94148, 1.88296, 2.8…
   7 │     6.0  (u_next = [0.932065, 1.86413, 2.…
   8 │     7.0  (u_next = [0.922745, 1.84549, 2.…
   9 │     8.0  (u_next = [0.913517, 1.82703, 2.…
  10 │     9.0  (u_next = [0.904382, 1.80876, 2.…
  11 │    10.0  (u_next = [0.895338, 1.79068, 2.…"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">main</span>()
<span class="pl-c1">11</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ time     sol
     │ Float64  NamedTup…
─────┼────────────────────────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">0.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.99</span>, <span class="pl-c1">1.98</span>, <span class="pl-c1">2.97</span>], x …
   <span class="pl-c1">2</span> │     <span class="pl-c1">1.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.9801</span>, <span class="pl-c1">1.9602</span>, <span class="pl-c1">2.940</span>…
   <span class="pl-c1">3</span> │     <span class="pl-c1">2.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.970299</span>, <span class="pl-c1">1.9406</span>, <span class="pl-c1">2.9</span>…
   <span class="pl-c1">4</span> │     <span class="pl-c1">3.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.960596</span>, <span class="pl-c1">1.92119</span>, <span class="pl-c1">2.</span>…
   <span class="pl-c1">5</span> │     <span class="pl-c1">4.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.95099</span>, <span class="pl-c1">1.90198</span>, <span class="pl-c1">2.8</span>…
   <span class="pl-c1">6</span> │     <span class="pl-c1">5.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.94148</span>, <span class="pl-c1">1.88296</span>, <span class="pl-c1">2.8</span>…
   <span class="pl-c1">7</span> │     <span class="pl-c1">6.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.932065</span>, <span class="pl-c1">1.86413</span>, <span class="pl-c1">2.</span>…
   <span class="pl-c1">8</span> │     <span class="pl-c1">7.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.922745</span>, <span class="pl-c1">1.84549</span>, <span class="pl-c1">2.</span>…
   <span class="pl-c1">9</span> │     <span class="pl-c1">8.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.913517</span>, <span class="pl-c1">1.82703</span>, <span class="pl-c1">2.</span>…
  <span class="pl-c1">10</span> │     <span class="pl-c1">9.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.904382</span>, <span class="pl-c1">1.80876</span>, <span class="pl-c1">2.</span>…
  <span class="pl-c1">11</span> │    <span class="pl-c1">10.0</span>  (u_next <span class="pl-k">=</span> [<span class="pl-c1">0.895338</span>, <span class="pl-c1">1.79068</span>, <span class="pl-c1">2.</span>…</pre></div>
<h2 dir="auto"><a id="user-content-dynamical-system-control" class="anchor" aria-hidden="true" href="#dynamical-system-control"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dynamical system control</h2>
<h3 dir="auto"><a id="user-content-optimal-control-and-reinforcement-learning" class="anchor" aria-hidden="true" href="#optimal-control-and-reinforcement-learning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Optimal control and reinforcement learning</h3>
<ul dir="auto">
<li>For an example of <strong>infinite-horizon continuous-time linear quadratic regulator (LQR)</strong> with callbacks,
see the following example code (<code>test/environments/basics/lqr.jl</code>).</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FlightSims
const FS = FlightSims
using DifferentialEquations
using LinearAlgebra
using Plots
using Test


function main()
    # linear system
    A = [0 1;
         0 0]  # 2 x 2
    B = [0 1]'  # 2 x 1
    n, m = 2, 1
    env = LinearSystem(A, B)  # exported from FlightSims
    x0 = State(env)([0.5, 0.5])
    # optimal control
    Q = Matrix(I, n, n)
    R = 10.0*Matrix(I, m, m)
    lqr = LQR(A, B, Q, R)  # exported from FlightSims
    u_lqr = Command(lqr)  # (x, p, t) -&gt; -K*x; minimise J = ∫ (x' Q x + u' R u) from 0 to ∞
    u0 = u_lqr(x0)
    p0 = zeros(size(u0)...)  # auxiliary parameter

    # simulation
    Δt = 0.05
    tf = 10.0
    affect!(integrator) = integrator.p .= u_lqr(copy(integrator.u))  # auxiliary callback funciton
    cb = PeriodicCallback(affect!, Δt; initial_affect=true)  # auxiliary callback
    @Loggable function dynamics!(dx, x, p, t)
        @onlylog p  # activate this line only when logging data
        u = p
        @log x, u
        @nested_log Dynamics!(env)(dx, x, p, t; u=u)  # exported `state` and `input` from `Dynamics!(env)`
    end
    simulator = Simulator(x0, dynamics!, p0;
                          tf=tf)
    df = solve(
               simulator;
               callback=cb, savestep=Δt,
               dtmax=Δt/2,
              )
    # CAUTION: when using PeriodicCallback for MPC-like control, the initial input may be overwritten by the second input.
    # I guess that the adaptive solver &quot;goes back in time&quot; when `dt` is not set small enough, which violates the results with Callbacks including SavingCallback and PeriodicCallback.
    ts = df.time
    xs = [datum.x for datum in df.sol]
    us = [datum.u for datum in df.sol]
    ps = [datum.p for datum in df.sol]
    states = [datum.state for datum in df.sol]
    inputs = [datum.input for datum in df.sol]
    @test u0 == us[1]
    @test xs == states
    @test us == inputs
    p_x = plot(ts, hcat(states...)';
               title=&quot;state variable&quot;, label=[&quot;x1&quot; &quot;x2&quot;], color=[:black :black], lw=1.5,
              )  # Plots
    plot!(p_x, ts, hcat(ps...)';
          ls=:dash, label=&quot;param&quot;, color=[:red :orange], lw=1.5
         )
    p_u = plot(ts, hcat(inputs...)'; title=&quot;control input&quot;, label=&quot;u&quot;, seriestype=:steppost)  # Plots
    fig = plot(p_x, p_u; layout=(2, 1))
    mkpath(&quot;figures&quot;)
    savefig(fig, &quot;figures/lqr.png&quot;)
    display(fig)
    df
end

@testset &quot;lqr example&quot; begin
    main()
end"><pre><span class="pl-k">using</span> FlightSims
<span class="pl-k">const</span> FS <span class="pl-k">=</span> FlightSims
<span class="pl-k">using</span> DifferentialEquations
<span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Test


<span class="pl-k">function</span> <span class="pl-en">main</span>()
    <span class="pl-c"><span class="pl-c">#</span> linear system</span>
    A <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span>;
         <span class="pl-c1">0</span> <span class="pl-c1">0</span>]  <span class="pl-c"><span class="pl-c">#</span> 2 x 2</span>
    B <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span>]<span class="pl-k">'</span>  <span class="pl-c"><span class="pl-c">#</span> 2 x 1</span>
    n, m <span class="pl-k">=</span> <span class="pl-c1">2</span>, <span class="pl-c1">1</span>
    env <span class="pl-k">=</span> <span class="pl-c1">LinearSystem</span>(A, B)  <span class="pl-c"><span class="pl-c">#</span> exported from FlightSims</span>
    x0 <span class="pl-k">=</span> <span class="pl-c1">State</span>(env)([<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>])
    <span class="pl-c"><span class="pl-c">#</span> optimal control</span>
    Q <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(I, n, n)
    R <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-k">*</span><span class="pl-c1">Matrix</span>(I, m, m)
    lqr <span class="pl-k">=</span> <span class="pl-c1">LQR</span>(A, B, Q, R)  <span class="pl-c"><span class="pl-c">#</span> exported from FlightSims</span>
    u_lqr <span class="pl-k">=</span> <span class="pl-c1">Command</span>(lqr)  <span class="pl-c"><span class="pl-c">#</span> (x, p, t) -&gt; -K*x; minimise J = ∫ (x' Q x + u' R u) from 0 to ∞</span>
    u0 <span class="pl-k">=</span> <span class="pl-c1">u_lqr</span>(x0)
    p0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">size</span>(u0)<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> auxiliary parameter</span>

    <span class="pl-c"><span class="pl-c">#</span> simulation</span>
    Δt <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
    tf <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
    <span class="pl-en">affect!</span>(integrator) <span class="pl-k">=</span> integrator<span class="pl-k">.</span>p <span class="pl-k">.=</span> <span class="pl-c1">u_lqr</span>(<span class="pl-c1">copy</span>(integrator<span class="pl-k">.</span>u))  <span class="pl-c"><span class="pl-c">#</span> auxiliary callback funciton</span>
    cb <span class="pl-k">=</span> <span class="pl-c1">PeriodicCallback</span>(affect!, Δt; initial_affect<span class="pl-k">=</span><span class="pl-c1">true</span>)  <span class="pl-c"><span class="pl-c">#</span> auxiliary callback</span>
    <span class="pl-c1">@Loggable</span> <span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(dx, x, p, t)
        <span class="pl-c1">@onlylog</span> p  <span class="pl-c"><span class="pl-c">#</span> activate this line only when logging data</span>
        u <span class="pl-k">=</span> p
        <span class="pl-c1">@log</span> x, u
        <span class="pl-c1">@nested_log</span> <span class="pl-c1">Dynamics!</span>(env)(dx, x, p, t; u<span class="pl-k">=</span>u)  <span class="pl-c"><span class="pl-c">#</span> exported `state` and `input` from `Dynamics!(env)`</span>
    <span class="pl-k">end</span>
    simulator <span class="pl-k">=</span> <span class="pl-c1">Simulator</span>(x0, dynamics!, p0;
                          tf<span class="pl-k">=</span>tf)
    df <span class="pl-k">=</span> <span class="pl-c1">solve</span>(
               simulator;
               callback<span class="pl-k">=</span>cb, savestep<span class="pl-k">=</span>Δt,
               dtmax<span class="pl-k">=</span>Δt<span class="pl-k">/</span><span class="pl-c1">2</span>,
              )
    <span class="pl-c"><span class="pl-c">#</span> CAUTION: when using PeriodicCallback for MPC-like control, the initial input may be overwritten by the second input.</span>
    <span class="pl-c"><span class="pl-c">#</span> I guess that the adaptive solver "goes back in time" when `dt` is not set small enough, which violates the results with Callbacks including SavingCallback and PeriodicCallback.</span>
    ts <span class="pl-k">=</span> df<span class="pl-k">.</span>time
    xs <span class="pl-k">=</span> [datum<span class="pl-k">.</span>x <span class="pl-k">for</span> datum <span class="pl-k">in</span> df<span class="pl-k">.</span>sol]
    us <span class="pl-k">=</span> [datum<span class="pl-k">.</span>u <span class="pl-k">for</span> datum <span class="pl-k">in</span> df<span class="pl-k">.</span>sol]
    ps <span class="pl-k">=</span> [datum<span class="pl-k">.</span>p <span class="pl-k">for</span> datum <span class="pl-k">in</span> df<span class="pl-k">.</span>sol]
    states <span class="pl-k">=</span> [datum<span class="pl-k">.</span>state <span class="pl-k">for</span> datum <span class="pl-k">in</span> df<span class="pl-k">.</span>sol]
    inputs <span class="pl-k">=</span> [datum<span class="pl-k">.</span>input <span class="pl-k">for</span> datum <span class="pl-k">in</span> df<span class="pl-k">.</span>sol]
    <span class="pl-c1">@test</span> u0 <span class="pl-k">==</span> us[<span class="pl-c1">1</span>]
    <span class="pl-c1">@test</span> xs <span class="pl-k">==</span> states
    <span class="pl-c1">@test</span> us <span class="pl-k">==</span> inputs
    p_x <span class="pl-k">=</span> <span class="pl-c1">plot</span>(ts, <span class="pl-c1">hcat</span>(states<span class="pl-k">...</span>)<span class="pl-k">'</span>;
               title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>state variable<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>x1<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>x2<span class="pl-pds">"</span></span>], color<span class="pl-k">=</span>[<span class="pl-c1">:black</span> <span class="pl-c1">:black</span>], lw<span class="pl-k">=</span><span class="pl-c1">1.5</span>,
              )  <span class="pl-c"><span class="pl-c">#</span> Plots</span>
    <span class="pl-c1">plot!</span>(p_x, ts, <span class="pl-c1">hcat</span>(ps<span class="pl-k">...</span>)<span class="pl-k">'</span>;
          ls<span class="pl-k">=</span><span class="pl-c1">:dash</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>param<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span>[<span class="pl-c1">:red</span> <span class="pl-c1">:orange</span>], lw<span class="pl-k">=</span><span class="pl-c1">1.5</span>
         )
    p_u <span class="pl-k">=</span> <span class="pl-c1">plot</span>(ts, <span class="pl-c1">hcat</span>(inputs<span class="pl-k">...</span>)<span class="pl-k">'</span>; title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>control input<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>, seriestype<span class="pl-k">=</span><span class="pl-c1">:steppost</span>)  <span class="pl-c"><span class="pl-c">#</span> Plots</span>
    fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(p_x, p_u; layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>))
    <span class="pl-c1">mkpath</span>(<span class="pl-s"><span class="pl-pds">"</span>figures<span class="pl-pds">"</span></span>)
    <span class="pl-c1">savefig</span>(fig, <span class="pl-s"><span class="pl-pds">"</span>figures/lqr.png<span class="pl-pds">"</span></span>)
    <span class="pl-c1">display</span>(fig)
    df
<span class="pl-k">end</span>

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>lqr example<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">main</span>()
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; main()
1001×2 DataFrame
  Row │ time     sol
      │ Float64  NamedTup…
──────┼────────────────────────────────────────────
    1 │    0.0   (p = [1.01978, 1.95564], state =…
    2 │    0.01  (p = [1.01978, 1.95564], state =…
    3 │    0.02  (p = [1.03911, 1.91186], state =…
    4 │    0.03  (p = [1.05802, 1.86863], state =…
    5 │    0.04  (p = [1.07649, 1.82596], state =…
  ⋮   │    ⋮                     ⋮
  998 │    9.97  (p = [-0.00093419, 0.00103198], …
  999 │    9.98  (p = [-0.000923913, 0.00102347],…
 1000 │    9.99  (p = [-0.00091372, 0.001015], st…
 1001 │   10.0   (p = [-0.00091372, 0.001015], st…
                                   992 rows omitted"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">main</span>()
<span class="pl-c1">1001</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
  Row │ time     sol
      │ Float64  NamedTup…
──────┼────────────────────────────────────────────
    <span class="pl-c1">1</span> │    <span class="pl-c1">0.0</span>   (p <span class="pl-k">=</span> [<span class="pl-c1">1.01978</span>, <span class="pl-c1">1.95564</span>], state <span class="pl-k">=</span>…
    <span class="pl-c1">2</span> │    <span class="pl-c1">0.01</span>  (p <span class="pl-k">=</span> [<span class="pl-c1">1.01978</span>, <span class="pl-c1">1.95564</span>], state <span class="pl-k">=</span>…
    <span class="pl-c1">3</span> │    <span class="pl-c1">0.02</span>  (p <span class="pl-k">=</span> [<span class="pl-c1">1.03911</span>, <span class="pl-c1">1.91186</span>], state <span class="pl-k">=</span>…
    <span class="pl-c1">4</span> │    <span class="pl-c1">0.03</span>  (p <span class="pl-k">=</span> [<span class="pl-c1">1.05802</span>, <span class="pl-c1">1.86863</span>], state <span class="pl-k">=</span>…
    <span class="pl-c1">5</span> │    <span class="pl-c1">0.04</span>  (p <span class="pl-k">=</span> [<span class="pl-c1">1.07649</span>, <span class="pl-c1">1.82596</span>], state <span class="pl-k">=</span>…
  ⋮   │    ⋮                     ⋮
  <span class="pl-c1">998</span> │    <span class="pl-c1">9.97</span>  (p <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.00093419</span>, <span class="pl-c1">0.00103198</span>], …
  <span class="pl-c1">999</span> │    <span class="pl-c1">9.98</span>  (p <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.000923913</span>, <span class="pl-c1">0.00102347</span>],…
 <span class="pl-c1">1000</span> │    <span class="pl-c1">9.99</span>  (p <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.00091372</span>, <span class="pl-c1">0.001015</span>], st…
 <span class="pl-c1">1001</span> │   <span class="pl-c1">10.0</span>   (p <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.00091372</span>, <span class="pl-c1">0.001015</span>], st…
                                   <span class="pl-c1">992</span> rows omitted</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./test/figures/lqr.png"><img src="./test/figures/lqr.png" alt="ex_screenshot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-linear-system-with-zero-order-hold-zoh-input" class="anchor" aria-hidden="true" href="#linear-system-with-zero-order-hold-zoh-input"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear system with zero-order-hold (ZOH) input</h3>
<ul dir="auto">
<li>Note that this example utilises interactive simulation interface. See <code>test/environments/integrated_environments/linear_system_zoh_input.jl</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FlightSims
import FlightSims: State, Dynamics!
using DataFrames
using ComponentArrays
using UnPack
using Transducers
using Plots
using SciMLBase
using Test


struct LinearSystem_ZOH_Input &lt;: AbstractEnv
    linear_env::LinearSystem
end

function State(env::LinearSystem_ZOH_Input)
    State(env.linear_env)
end

function Dynamics!(env::LinearSystem_ZOH_Input)
    @Loggable function dynamics!(dx, x, input, t)
        @nested_log Dynamics!(env.linear_env)(dx, x, nothing, t; u=input)
    end
end

function main()
    A = [0 1;
         0 0]
    B = [0 1]'
    linear_env = LinearSystem(A, B)
    env = LinearSystem_ZOH_Input(linear_env)
    x0_state = [1, 2]
    input = zeros(1)
    x0 = State(env)(x0_state)
    t0 = 0.0
    tf = 20.0
    simulator = Simulator(x0, Dynamics!(env), input; tf=tf)
    # interactive sim
    Δt = 0.1  # save period
    df = DataFrame()
    @time for (i, t) in enumerate(t0:Δt:tf)
        # To perform interactive simulation,
        # you should be aware of the integrator interface
        # provided by DifferentialEquations.jl;
        # see https://diffeq.sciml.ai/stable/basics/integrator/#integrator
        # e.g., DO NOT directly change the integrator state
        state = simulator.integrator.u
        input = simulator.integrator.p
        if (i-1) % 10 == 0  # update input period
            input .= -sum(state)
        end
        step_until!(simulator, t, df)
    end
    # plot
    ts = df.time
    states = df.sol |&gt; Map(datum -&gt; datum.state) |&gt; collect
    inputs = df.sol |&gt; Map(datum -&gt; datum.input) |&gt; collect
    p_x = plot(ts, hcat(states...)';
               title=&quot;state variable&quot;, label=[&quot;x1&quot; &quot;x2&quot;],
              )
    p_u = plot(ts, hcat(inputs...)';
               title=&quot;input variable&quot;, label=&quot;u&quot;,
               linetype=:steppost,  # to plot zero-order-hold input appropriately
              )
    fig = plot(p_x, p_u; layout=(2, 1))
    savefig(&quot;figures/interactive_sim.png&quot;)
    display(fig)
end


@testset &quot;linear_system_zoh_input&quot; begin
    main()
end"><pre><span class="pl-k">using</span> FlightSims
<span class="pl-k">import</span> FlightSims<span class="pl-k">:</span> State, Dynamics!
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> ComponentArrays
<span class="pl-k">using</span> UnPack
<span class="pl-k">using</span> Transducers
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> SciMLBase
<span class="pl-k">using</span> Test


<span class="pl-k">struct</span> LinearSystem_ZOH_Input <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractEnv</span>
    linear_env<span class="pl-k">::</span><span class="pl-c1">LinearSystem</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">State</span>(env<span class="pl-k">::</span><span class="pl-c1">LinearSystem_ZOH_Input</span>)
    <span class="pl-c1">State</span>(env<span class="pl-k">.</span>linear_env)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Dynamics!</span>(env<span class="pl-k">::</span><span class="pl-c1">LinearSystem_ZOH_Input</span>)
    <span class="pl-c1">@Loggable</span> <span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(dx, x, input, t)
        <span class="pl-c1">@nested_log</span> <span class="pl-c1">Dynamics!</span>(env<span class="pl-k">.</span>linear_env)(dx, x, <span class="pl-c1">nothing</span>, t; u<span class="pl-k">=</span>input)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">main</span>()
    A <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span>;
         <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
    B <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span>]<span class="pl-k">'</span>
    linear_env <span class="pl-k">=</span> <span class="pl-c1">LinearSystem</span>(A, B)
    env <span class="pl-k">=</span> <span class="pl-c1">LinearSystem_ZOH_Input</span>(linear_env)
    x0_state <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
    input <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">1</span>)
    x0 <span class="pl-k">=</span> <span class="pl-c1">State</span>(env)(x0_state)
    t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    tf <span class="pl-k">=</span> <span class="pl-c1">20.0</span>
    simulator <span class="pl-k">=</span> <span class="pl-c1">Simulator</span>(x0, <span class="pl-c1">Dynamics!</span>(env), input; tf<span class="pl-k">=</span>tf)
    <span class="pl-c"><span class="pl-c">#</span> interactive sim</span>
    Δt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>  <span class="pl-c"><span class="pl-c">#</span> save period</span>
    df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>()
    <span class="pl-c1">@time</span> <span class="pl-k">for</span> (i, t) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(t0<span class="pl-k">:</span>Δt<span class="pl-k">:</span>tf)
        <span class="pl-c"><span class="pl-c">#</span> To perform interactive simulation,</span>
        <span class="pl-c"><span class="pl-c">#</span> you should be aware of the integrator interface</span>
        <span class="pl-c"><span class="pl-c">#</span> provided by DifferentialEquations.jl;</span>
        <span class="pl-c"><span class="pl-c">#</span> see https://diffeq.sciml.ai/stable/basics/integrator/#integrator</span>
        <span class="pl-c"><span class="pl-c">#</span> e.g., DO NOT directly change the integrator state</span>
        state <span class="pl-k">=</span> simulator<span class="pl-k">.</span>integrator<span class="pl-k">.</span>u
        input <span class="pl-k">=</span> simulator<span class="pl-k">.</span>integrator<span class="pl-k">.</span>p
        <span class="pl-k">if</span> (i<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">%</span> <span class="pl-c1">10</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>  <span class="pl-c"><span class="pl-c">#</span> update input period</span>
            input <span class="pl-k">.=</span> <span class="pl-k">-</span><span class="pl-c1">sum</span>(state)
        <span class="pl-k">end</span>
        <span class="pl-c1">step_until!</span>(simulator, t, df)
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> plot</span>
    ts <span class="pl-k">=</span> df<span class="pl-k">.</span>time
    states <span class="pl-k">=</span> df<span class="pl-k">.</span>sol <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(datum <span class="pl-k">-&gt;</span> datum<span class="pl-k">.</span>state) <span class="pl-k">|&gt;</span> collect
    inputs <span class="pl-k">=</span> df<span class="pl-k">.</span>sol <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(datum <span class="pl-k">-&gt;</span> datum<span class="pl-k">.</span>input) <span class="pl-k">|&gt;</span> collect
    p_x <span class="pl-k">=</span> <span class="pl-c1">plot</span>(ts, <span class="pl-c1">hcat</span>(states<span class="pl-k">...</span>)<span class="pl-k">'</span>;
               title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>state variable<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>x1<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>x2<span class="pl-pds">"</span></span>],
              )
    p_u <span class="pl-k">=</span> <span class="pl-c1">plot</span>(ts, <span class="pl-c1">hcat</span>(inputs<span class="pl-k">...</span>)<span class="pl-k">'</span>;
               title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>input variable<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>,
               linetype<span class="pl-k">=</span><span class="pl-c1">:steppost</span>,  <span class="pl-c"><span class="pl-c">#</span> to plot zero-order-hold input appropriately</span>
              )
    fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(p_x, p_u; layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>))
    <span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>figures/interactive_sim.png<span class="pl-pds">"</span></span>)
    <span class="pl-c1">display</span>(fig)
<span class="pl-k">end</span>


<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>linear_system_zoh_input<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">main</span>()
<span class="pl-k">end</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./test/figures/interactive_sim.png"><img src="./test/figures/interactive_sim.png" alt="ex_screenshot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-multicopter-position-control" class="anchor" aria-hidden="true" href="#multicopter-position-control"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multicopter position control</h3>
<ul dir="auto">
<li>For an example of <strong>backstepping position tracking controller for quadcopters</strong>,
see <code>test/environments/integrated_environments/backstepping_position_controller_static_allocator_multicopter_env.jl</code>.
See <code>./test/environments/controllers/geometric_tracking.jl</code> and <code>./test/environments/controllers/geometric_tracking_inner_outer.jl</code> for <a href="https://ieeexplore.ieee.org/abstract/document/5717652/" rel="nofollow">the geometric tracking controller</a>.</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./test/figures/multicopter_position_control.png"><img src="./test/figures/multicopter_position_control.png" alt="ex_screenshot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-control-barrier-function-cbf-methods" class="anchor" aria-hidden="true" href="#control-barrier-function-cbf-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Control barrier function (CBF) methods</h3>
<p dir="auto">For examples of CBF methods, see <code>./test/environments/controllers/cbf.jl</code>.</p>
<h2 dir="auto"><a id="user-content-visualisation" class="anchor" aria-hidden="true" href="#visualisation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualisation</h2>
<h3 dir="auto"><a id="user-content-missile-guidance-with-interactive-visualisation" class="anchor" aria-hidden="true" href="#missile-guidance-with-interactive-visualisation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Missile guidance with interactive visualisation</h3>
<ul dir="auto">
<li>See <code>test/pluto_guidance.jl</code> (thanks to <a href="https://github.com/nhcho91">@nhcho91</a>).</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./test/figures/missile_guidance.gif"><img src="./test/figures/missile_guidance.gif" alt="Alt Text" data-animated-image="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-multicopter-rendering" class="anchor" aria-hidden="true" href="#multicopter-rendering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multicopter rendering</h3>
<ul dir="auto">
<li>For more details, see <a href="https://github.com/JinraeKim/FSimPlots.jl">FSimPlots.jl</a>.</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./test/figures/anim.gif"><img src="./test/figures/anim.gif" alt="Alt Text" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-examples-with-ros2" class="anchor" aria-hidden="true" href="#examples-with-ros2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples with ROS2</h2>
<p dir="auto">See <a href="https://github.com/JinraeKim/FSimROS.jl">FSimROS.jl</a>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./test/figures/ros.gif"><img src="./test/figures/ros.gif" alt="Alt Text" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<h3 dir="auto"><a id="user-content-fsim-family" class="anchor" aria-hidden="true" href="#fsim-family"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FSim family</h3>
<ul dir="auto">
<li><a href="https://github.com/JinraeKim/FSimBase.jl">FSimBase.jl</a> is
the lightweight base package for numerical simulation supporting nested dynamical systems and macro-based data logger. For more functionality, see FlightSims.jl.</li>
<li><a href="https://github.com/JinraeKim/FSimZoo.jl">FSimZoo.jl</a>
contains predefined environments and controllers for FlightSims.jl.</li>
<li><a href="https://github.com/JinraeKim/FSimPlots.jl">FSimPlots.jl</a> is
the plotting package for predefined environments exported from FlightSims.jl</li>
<li><a href="https://github.com/JinraeKim/FSimROS.jl">FSimROS.jl</a> is
a package of FlightSims.jl family for ROS2.</li>
</ul>
<h3 dir="auto"><a id="user-content-packages-using-flightsimsjl" class="anchor" aria-hidden="true" href="#packages-using-flightsimsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Packages using FlightSims.jl</h3>
<ul dir="auto">
<li><a href="https://github.com/JinraeKim/FaultTolerantControl.jl">FaultTolerantControl.jl</a>:
fault tolerant control (FTC) with various models and algorithms of faults, fault detection and isolation (FDI), and reconfiguration (R) control.</li>
<li><a href="https://github.com/nhcho91/FlightGNC.jl">FlightGNC.jl</a> (<a href="https://github.com/nhcho91">@nhcho91</a>):
FlightGNC.jl is a Julia package containing GNC algorithms for autonomous systems.</li>
</ul>
<h3 dir="auto"><a id="user-content-useful-packages" class="anchor" aria-hidden="true" href="#useful-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Useful packages</h3>
<ul dir="auto">
<li>It is highly based on <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a> but mainly focusing on ODE (ordinary differential equations).</li>
<li>The construction of nested environments are based on <a href="https://github.com/jonniedie/ComponentArrays.jl">ComponentArrays.jl</a>.</li>
<li>The structure of the resulting data from simulation result is based on <a href="https://github.com/JuliaData/DataFrames.jl">DataFrames.jl</a>.</li>
<li>Logging tool is based on <a href="https://github.com/JinraeKim/SimulationLogger.jl">SimulationLogger.jl</a>.</li>
</ul>
<h2 dir="auto"><a id="user-content-trouble-shootings" class="anchor" aria-hidden="true" href="#trouble-shootings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Trouble shootings</h2>
<h3 dir="auto"><a id="user-content-solve-produces-an-empty-dataframe" class="anchor" aria-hidden="true" href="#solve-produces-an-empty-dataframe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>solve</code> produces an empty Dataframe</h3>
<ul dir="auto">
<li>Please check whether you put <code>@Loggable</code> in front of the dynamics function in a proper way, e.g.,</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Dynamics!(env::MyEnv)
    @Loggable function dynamics!(dx, x, p, t; u)
    # return @Loggable dynamics!(dx, x, p, t; u)  # This would not work
        # blahblah...
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">Dynamics!</span>(env<span class="pl-k">::</span><span class="pl-c1">MyEnv</span>)
    <span class="pl-c1">@Loggable</span> <span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(dx, x, p, t; u)
    <span class="pl-c"><span class="pl-c">#</span> return @Loggable dynamics!(dx, x, p, t; u)  # This would not work</span>
        <span class="pl-c"><span class="pl-c">#</span> blahblah...</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-loggable-does-not-work-error-loaderror-loaderror-loaderror-loaderror-loaderror-loaderror-keyerror-key-name-not-found" class="anchor" aria-hidden="true" href="#loggable-does-not-work-error-loaderror-loaderror-loaderror-loaderror-loaderror-loaderror-keyerror-key-name-not-found"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@Loggable</code> does not work; <code>ERROR: LoadError: LoadError: LoadError: LoadError: LoadError: LoadError: KeyError: key :name not found</code></h3>
<ul dir="auto">
<li>Please check whether you assigned a name of function annotated by <code>@Loggable</code>, e.g.,</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Dynamics!(env::YourEnv)
    @Loggable function dynamics!(dX, X, p, ; u)
        ...
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">Dynamics!</span>(env<span class="pl-k">::</span><span class="pl-c1">YourEnv</span>)
    <span class="pl-c1">@Loggable</span> <span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(dX, X, p, ; u)
        <span class="pl-k">...</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">instead of</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Dynamics!(env::YourEnv)
    @Loggable function (dX, X, p, ; u)
        ...
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">Dynamics!</span>(env<span class="pl-k">::</span><span class="pl-c1">YourEnv</span>)
    <span class="pl-c1">@Loggable</span> <span class="pl-k">function</span> (dX, X, p, ; u)
        <span class="pl-k">...</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-the-first-input-of-the-logged-inputs-is-incorrect-when-using-periodiccallback-for-zero-order-hold-zoh-control-161" class="anchor" aria-hidden="true" href="#the-first-input-of-the-logged-inputs-is-incorrect-when-using-periodiccallback-for-zero-order-hold-zoh-control-161"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The first input of the logged inputs is incorrect when using PeriodicCallback for zero-order-hold (ZOH) control (#161)</h3>
<p dir="auto">Due to the adaptive-time-step solver, it might "go back in time", which contradicts the saved results from SavingCallback with the applied input using PeriodicCallback.
If the time step of PeriodicCallback is <code>Δt</code>, then set the keyword argument <code>dtmax</code> of <code>solve</code> to be small, e.g., <code>dtmax = Δt/2</code> (see <code>./test/environments/basics/lqr.jl</code> as an example.)</p>
</article></div>