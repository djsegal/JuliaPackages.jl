<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dotnetjl" class="anchor" aria-hidden="true" href="#dotnetjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DotNET.jl</h1>
<p dir="auto"><a href="https://github.com/azurefx/DotNET.jl/actions/workflows/ci.yml"><img src="https://github.com/azurefx/DotNET.jl/actions/workflows/ci.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://makeapullrequest.com" rel="nofollow"><img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome" data-canonical-src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides interoperability between Julia and <a href="https://docs.microsoft.com/dotnet/standard/clr" rel="nofollow"><code>Common Language Runtime</code></a>, the execution engine of <code>.NET</code> applications. Many languages run on CLR, including <code>C#</code>, <code>Visual Basic .NET</code> and <code>PowerShell</code>.</p>
<h2 dir="auto"><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prerequisites</h2>
<ul dir="auto">
<li><code>Julia</code> version 1.3+</li>
<li><code>.NET Core Runtime</code> version 2.2+ (<a href="https://dotnet.microsoft.com/download" rel="nofollow">Download</a>)</li>
</ul>
<p dir="auto"><code>WinForms</code> and other GUI-related features require a <a href="https://github.com/azurefx/DotNET.jl/issues/11" data-hovercard-type="issue" data-hovercard-url="/azurefx/DotNET.jl/issues/11/hovercard">desktop runtime</a>.</p>
<p dir="auto">If the package fails to locate the runtime, set <code>DOTNET_ROOT</code> environment variable to the path containing the <code>dotnet</code> or <code>dotnet.exe</code> binary.</p>
<p dir="auto"><code>.NET Framework</code> is not supported yet.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In the REPL, type <code>]add DotNET</code> and press <code>Enter</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(v1.x) pkg&gt; add DotNET"><pre class="notranslate"><code>(v1.x) pkg&gt; add DotNET
</code></pre></div>
<p dir="auto">Or use <code>Pkg.add</code> for <a href="https://pkgdocs.julialang.org/v1/api/" rel="nofollow">more options</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(PackageSpec(url = &quot;https://github.com/azurefx/DotNET.jl&quot;))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/azurefx/DotNET.jl<span class="pl-pds">"</span></span>))</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DotNET"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DotNET</pre></div>
<h3 dir="auto"><a id="user-content-types-and-objects" class="anchor" aria-hidden="true" href="#types-and-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types and Objects</h3>
<p dir="auto"><code>DotNET.jl</code> provides the <a href="https://docs.microsoft.com/dotnet/standard/assembly/find-fully-qualified-name" rel="nofollow"><code>T"AssemblyQualifiedTypeName"</code></a> literal for type reference:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Console = T&quot;System.Console, mscorlib&quot;
System.Console"><pre>julia<span class="pl-k">&gt;</span> Console <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Console, mscorlib<span class="pl-pds">"</span></span>
System<span class="pl-k">.</span>Console</pre></div>
<p dir="auto">Given a type object, you can access its properties or methods using the dot operator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Console.WriteLine(&quot;Hello from .NET!&quot;);
Hello from .NET!"><pre>julia<span class="pl-k">&gt;</span> Console<span class="pl-k">.</span><span class="pl-c1">WriteLine</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello from .NET!<span class="pl-pds">"</span></span>);
Hello from <span class="pl-k">.</span>NET!</pre></div>
<p dir="auto">To create an object, use the <code>new</code> syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; T&quot;System.Guid&quot;.new(&quot;CA761232-ED42-11CE-BACD-00AA0057B223&quot;)
System.Guid(&quot;ca761232-ed42-11ce-bacd-00aa0057b223&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Guid<span class="pl-pds">"</span></span><span class="pl-k">.</span><span class="pl-c1">new</span>(<span class="pl-s"><span class="pl-pds">"</span>CA761232-ED42-11CE-BACD-00AA0057B223<span class="pl-pds">"</span></span>)
System<span class="pl-k">.</span><span class="pl-c1">Guid</span>(<span class="pl-s"><span class="pl-pds">"</span>ca761232-ed42-11ce-bacd-00aa0057b223<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">All <code>.NET</code> objects are represented by <code>CLRObject</code>s in Julia, including types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; typeof(Console)
CLRObject

julia&gt; typeof(null)
CLRObject"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(Console)
CLRObject

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(null)
CLRObject</pre></div>
<p dir="auto"><code>null</code> is a built-in object that does not refer to a valid <code>.NET</code> object. When you try to access a member on a <code>null</code> value, a <code>System.NullReferenceException</code> is thrown.</p>
<p dir="auto">Arguments passed to <code>.NET</code> methods are automatically converted to <code>CLRObject</code>s, and return values are converted to corresponding Julia types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; T&quot;System.Convert&quot;.ToInt64(&quot;42&quot;)
42"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Convert<span class="pl-pds">"</span></span><span class="pl-k">.</span><span class="pl-c1">ToInt64</span>(<span class="pl-s"><span class="pl-pds">"</span>42<span class="pl-pds">"</span></span>)
<span class="pl-c1">42</span></pre></div>
<p dir="auto">Or you could do some explicit conversions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; s = convert(CLRObject, &quot;❤&quot;)
System.String(&quot;❤&quot;)

julia&gt; DotNET.unbox(s)
&quot;❤&quot;"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">convert</span>(CLRObject, <span class="pl-s"><span class="pl-pds">"</span>❤<span class="pl-pds">"</span></span>)
System<span class="pl-k">.</span><span class="pl-c1">String</span>(<span class="pl-s"><span class="pl-pds">"</span>❤<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> DotNET<span class="pl-k">.</span><span class="pl-c1">unbox</span>(s)
<span class="pl-s"><span class="pl-pds">"</span>❤<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">To pass an argument by reference (<code>out</code>/<code>ref</code> in <code>C#</code>), wrap it into a <code>Ref</code> object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; result = Ref{Int}()
Base.RefValue{Int64}(212700848)

julia&gt; T&quot;System.Int64&quot;.TryParse(&quot;1970&quot;, result)
true

julia&gt; result[]
1970

julia&gt; result = Ref(null)
Base.RefValue{CLRObject}(null)

julia&gt; T&quot;System.Int64&quot;.TryParse(&quot;2022&quot;, result)
true

julia&gt; result[]
System.Int64(2022)"><pre>julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Int}</span>()
Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">212700848</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Int64<span class="pl-pds">"</span></span><span class="pl-k">.</span><span class="pl-c1">TryParse</span>(<span class="pl-s"><span class="pl-pds">"</span>1970<span class="pl-pds">"</span></span>, result)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> result[]
<span class="pl-c1">1970</span>

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">Ref</span>(null)
Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{CLRObject}</span>(null)

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Int64<span class="pl-pds">"</span></span><span class="pl-k">.</span><span class="pl-c1">TryParse</span>(<span class="pl-s"><span class="pl-pds">"</span>2022<span class="pl-pds">"</span></span>, result)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> result[]
System<span class="pl-k">.</span><span class="pl-c1">Int64</span>(<span class="pl-c1">2022</span>)</pre></div>
<h3 dir="auto"><a id="user-content-arrays-and-collections" class="anchor" aria-hidden="true" href="#arrays-and-collections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arrays and Collections</h3>
<p dir="auto">To copy a multidimensional array from <code>.NET</code> to Julia, use <code>collect</code> method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; arr = convert(CLRObject, reshape(1:8, 2, 2, 2))
System.Int64[,,](&quot;System.Int64[,,]&quot;)

julia&gt; collect(arr)
2×2×2 Array{Int64, 3}:
[:, :, 1] =
 1  3
 2  4

[:, :, 2] =
 5  7
 6  8"><pre>julia<span class="pl-k">&gt;</span> arr <span class="pl-k">=</span> <span class="pl-c1">convert</span>(CLRObject, <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
System<span class="pl-k">.</span>Int64[,,](<span class="pl-s"><span class="pl-pds">"</span>System.Int64[,,]<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(arr)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int64, <span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">4</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">6</span>  <span class="pl-c1">8</span></pre></div>
<p dir="auto">CLI <code>Array</code> elements are stored in <em>row-major</em> order, thus the equivalent definition in <code>C#</code> is</p>
<div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="public static long[,,] Get3DArray() {
  return new long[2, 2, 2] {
    {{1, 2}, {3, 4}},
    {{5, 6}, {7, 8}}
  };
}"><pre><span class="pl-k">public</span> <span class="pl-k"><span class="pl-k">static</span></span> <span class="pl-smi">long</span><span class="pl-kos">[</span><span class="pl-kos">,</span><span class="pl-kos">,</span><span class="pl-kos">]</span> Get3DArray<span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">long</span><span class="pl-kos">[</span><span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">]</span> <span class="pl-kos">{</span>
    <span class="pl-kos">{</span><span class="pl-kos">{</span><span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-c1">2</span><span class="pl-kos">}</span><span class="pl-kos">,</span> <span class="pl-kos">{</span><span class="pl-c1">3</span><span class="pl-kos">,</span> <span class="pl-c1">4</span><span class="pl-kos">}</span><span class="pl-kos">}</span><span class="pl-kos">,</span>
    <span class="pl-kos">{</span><span class="pl-kos">{</span><span class="pl-c1">5</span><span class="pl-kos">,</span> <span class="pl-c1">6</span><span class="pl-kos">}</span><span class="pl-kos">,</span> <span class="pl-kos">{</span><span class="pl-c1">7</span><span class="pl-kos">,</span> <span class="pl-c1">8</span><span class="pl-kos">}</span><span class="pl-kos">}</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<p dir="auto">To index into arrays, use <code>arraystore</code> and <code>arrayload</code> methods. Note that CLI <code>Array</code>s use zero-based indexing.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; DotNET.arraystore(arr, (1, 1, 1), 0)
null

julia&gt; DotNET.arrayload(arr, (1, 1, 1)) == collect(arr)[2, 2, 2]
true"><pre>julia<span class="pl-k">&gt;</span> DotNET<span class="pl-k">.</span><span class="pl-c1">arraystore</span>(arr, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">0</span>)
null

julia<span class="pl-k">&gt;</span> DotNET<span class="pl-k">.</span><span class="pl-c1">arrayload</span>(arr, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)) <span class="pl-k">==</span> <span class="pl-c1">collect</span>(arr)[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]
<span class="pl-c1">true</span></pre></div>
<p dir="auto">If an object implements <code>IEnumerable</code> interface, you can call <code>GetEnumerator</code> to iterate over the array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ch = Channel() do it
           e = arr.GetEnumerator()
           while e.MoveNext()
               put!(it, e.Current)
           end
       end
Channel{Any}(0) (1 item available)

julia&gt; collect(ch)
8-element Vector{Any}:
 1
 ⋮
 8"><pre>julia<span class="pl-k">&gt;</span> ch <span class="pl-k">=</span> <span class="pl-c1">Channel</span>() <span class="pl-k">do</span> it
           e <span class="pl-k">=</span> arr<span class="pl-k">.</span><span class="pl-c1">GetEnumerator</span>()
           <span class="pl-k">while</span> e<span class="pl-k">.</span><span class="pl-c1">MoveNext</span>()
               <span class="pl-c1">put!</span>(it, e<span class="pl-k">.</span>Current)
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
<span class="pl-c1">Channel</span><span class="pl-c1">{Any}</span>(<span class="pl-c1">0</span>) (<span class="pl-c1">1</span> item available)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(ch)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 ⋮
 <span class="pl-c1">8</span></pre></div>
<p dir="auto">Or just use the <code>for-in</code> loop:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for x in arr
    println(x)
end"><pre><span class="pl-k">for</span> x <span class="pl-k">in</span> arr
    <span class="pl-c1">println</span>(x)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-loading-external-assemblies" class="anchor" aria-hidden="true" href="#loading-external-assemblies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading External Assemblies</h3>
<p dir="auto">If you have a <code>DLL</code> file, you can load it using reflection:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; T&quot;System.Reflection.Assembly&quot;.LoadFrom(raw&quot;C:\Users\Azure\Desktop\test.dll&quot;)
System.Reflection.RuntimeAssembly(&quot;test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Reflection.Assembly<span class="pl-pds">"</span></span><span class="pl-k">.</span><span class="pl-c1">LoadFrom</span>(<span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>C:\Users\Azure\Desktop\test.dll<span class="pl-pds">"</span></span>)
System<span class="pl-k">.</span>Reflection<span class="pl-k">.</span><span class="pl-c1">RuntimeAssembly</span>(<span class="pl-s"><span class="pl-pds">"</span>test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Now you have access to types defined in the assembly.</p>
<h3 dir="auto"><a id="user-content-generics" class="anchor" aria-hidden="true" href="#generics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generics</h3>
<p dir="auto">Generic types are be expressed in the following ways:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ListT = T&quot;System.Collections.Generic.List`1&quot;
System.Collections.Generic.List`1[T]

julia&gt; ListInt64 = T&quot;System.Collections.Generic.List`1[System.Int64]&quot;
System.Collections.Generic.List`1[System.Int64]"><pre>julia<span class="pl-k">&gt;</span> ListT <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Collections.Generic.List`1<span class="pl-pds">"</span></span>
System<span class="pl-k">.</span>Collections<span class="pl-k">.</span>Generic<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">List</span>`</span>1[T]</span>
<span class="pl-s"></span>
<span class="pl-s">julia&gt; ListInt64 = T"System.Collections.Generic.List<span class="pl-pds">`</span></span><span class="pl-c1">1</span>[System<span class="pl-k">.</span>Int64]<span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s">System.Collections.Generic.List`1[System.Int64]</span></pre></div>
<p dir="auto">The number <code>1</code> after the backtick indicates the type <code>System.Collections.Generic.List&lt;T&gt;</code> has one type parameter. <code>ListT</code> has a free type variable, just like <code>Vector{T} where T</code> in Julia. A type that includes at least one type argument is called a <em>constructed type</em>. <code>ListInt64</code> is a constructed type.</p>
<p dir="auto">One can substitute type variables and make a constructed type by calling <code>makegenerictype</code> method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; DotNET.makegenerictype(ListT, T&quot;System.String&quot;)
System.Collections.Generic.List`1[System.String]"><pre>julia<span class="pl-k">&gt;</span> DotNET<span class="pl-k">.</span><span class="pl-c1">makegenerictype</span>(ListT, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.String<span class="pl-pds">"</span></span>)
System<span class="pl-k">.</span>Collections<span class="pl-k">.</span>Generic<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">List</span>`</span>1[System.String]</span></pre></div>
<p dir="auto">To invoke a generic method, put type arguments into square brackets:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; list = ListT.new[T&quot;System.Int64&quot;]()
System.Collections.Generic.List`1[System.Int64](&quot;System.Collections.Generic.List`1[System.Int64]&quot;)"><pre>julia<span class="pl-k">&gt;</span> list <span class="pl-k">=</span> ListT<span class="pl-k">.</span>new[<span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Int64<span class="pl-pds">"</span></span>]()
System<span class="pl-k">.</span>Collections<span class="pl-k">.</span>Generic<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">List</span>`</span>1[System.Int64]("System.Collections.Generic.List<span class="pl-pds">`</span></span><span class="pl-c1">1</span>[System<span class="pl-k">.</span>Int64]<span class="pl-s"><span class="pl-pds">"</span>)</span></pre></div>
<h3 dir="auto"><a id="user-content-delegates" class="anchor" aria-hidden="true" href="#delegates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Delegates</h3>
<p dir="auto">To create a delegate from a Julia method, use <code>delegate</code> method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; list = ListT.new[T&quot;System.Int64&quot;](1:5)
System.Collections.Generic.List`1[System.Int64](&quot;System.Collections.Generic.List`1[System.Int64]&quot;)

julia&gt; list.RemoveAll(delegate(iseven, T&quot;System.Predicate`1[System.Int64]&quot;))
2

julia&gt; collect(list)
3-element Vector{Int64}:
 1
 3
 5"><pre>julia<span class="pl-k">&gt;</span> list <span class="pl-k">=</span> ListT<span class="pl-k">.</span>new[<span class="pl-s"><span class="pl-pds"><span class="pl-c1">T</span>"</span>System.Int64<span class="pl-pds">"</span></span>](<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
System<span class="pl-k">.</span>Collections<span class="pl-k">.</span>Generic<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">List</span>`</span>1[System.Int64]("System.Collections.Generic.List<span class="pl-pds">`</span></span><span class="pl-c1">1</span>[System<span class="pl-k">.</span>Int64]<span class="pl-s"><span class="pl-pds">"</span>)</span>
<span class="pl-s"></span>
<span class="pl-s">julia&gt; list.RemoveAll(delegate(iseven, T<span class="pl-pds">"</span></span>System<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">Predicate</span>`</span>1[System.Int64]"))</span>
<span class="pl-s">2</span>
<span class="pl-s"></span>
<span class="pl-s">julia&gt; collect(list)</span>
<span class="pl-s">3-element Vector{Int64}:</span>
<span class="pl-s"> 1</span>
<span class="pl-s"> 3</span>
<span class="pl-s"> 5</span></pre></div>

</article></div>