<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-phdsejl" class="anchor" aria-hidden="true" href="#phdsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PhDSE.jl</h1>
<div align="center" dir="auto">

<p dir="auto"><a href="https://schmidtjonathan.github.io/PhDSE.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/schmidtjonathan/PhDSE.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/schmidtjonathan/PhDSE.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/schmidtjonathan/PhDSE.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e62ebfc404a7170fe67d01cd30305489783abb5d3e953789199e5d0acc2dd60c/68747470733a2f2f636f6465636f762e696f2f67682f7363686d6964746a6f6e617468616e2f50684453452e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d49494741493730364f31" alt="codecov" data-canonical-src="https://codecov.io/gh/schmidtjonathan/PhDSE.jl/branch/main/graph/badge.svg?token=IIGAI706O1" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2da4b47047416995ad40532496f4b028e9aeca4a9ad036ed17bee5d2fb753b32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d737563636573732e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-success.svg" style="max-width: 100%;"></a>
<a href="./benchmarks/README.md"><img src="https://camo.githubusercontent.com/0d4ed40f15dd64174d8a87b9c4229da76a84fe2fca7dc6604a583765192b5bcc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f766965772d62656e63686d61726b732d626c756576696f6c6574" alt="bench-shield" data-canonical-src="https://img.shields.io/badge/view-benchmarks-blueviolet" style="max-width: 100%;"></a></p>
</div>
<p dir="auto"><strong>PhDSE</strong> stands for <strong>P</strong>robabilistic <strong>h</strong>igh-<strong>D</strong>imensional <strong>S</strong>tate <strong>E</strong>stimation. Its aim is to provide runtime- and memory-efficient implementations of inference algorithms in probabilistic state-space models - all implemented in <a href="https://julialang.org" rel="nofollow">Julia</a>.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<p dir="auto">The package is in a very early phase of development and will likely be subject to significant changes in both the interface, as well as the inner workings.
Therefore, it is for now not registered as a Julia package, yet.</p>
<p dir="auto">If you feel like playing around with the package a bit then you can install it directly from GitHub like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(url=&quot;https://github.com/schmidtjonathan/PhDSE.jl.git&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/schmidtjonathan/PhDSE.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add https://github.com/schmidtjonathan/PhDSE.jl.git"><pre lang="julia-repl" class="notranslate"><code>] add https://github.com/schmidtjonathan/PhDSE.jl.git
</code></pre></div>
<h2 dir="auto"><a id="user-content-algorithms" class="anchor" aria-hidden="true" href="#algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithms</h2>
<h4 dir="auto"><a id="user-content-bayesian-filtering" class="anchor" aria-hidden="true" href="#bayesian-filtering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bayesian Filtering</h4>
<ul dir="auto">
<li><a href="https://schmidtjonathan.github.io/PhDSE.jl/dev/examples/kalman_filter/" rel="nofollow">Kalman filter</a></li>
<li><a href="https://schmidtjonathan.github.io/PhDSE.jl/dev/examples/sqrt_kalman_filter/" rel="nofollow">Square-root Kalman filter</a></li>
<li><a href="https://schmidtjonathan.github.io/PhDSE.jl/dev/examples/ensemble_kalman_filter/" rel="nofollow">Ensemble Kalman filter</a></li>
<li>More to follow <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">ðŸ™Œ</g-emoji></li>
</ul>
<h2 dir="auto"><a id="user-content-example-with-non-linear-dynamics" class="anchor" aria-hidden="true" href="#example-with-non-linear-dynamics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example with non-linear dynamics</h2>
<h3 dir="auto"><a id="user-content-build-the-state-space-model" class="anchor" aria-hidden="true" href="#build-the-state-space-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Build the state-space model...</h3>
<details>
<summary><b>Details ...</b></summary>
<h5 dir="auto"><a id="user-content-we-define" class="anchor" aria-hidden="true" href="#we-define"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>We define:</h5>
<ul dir="auto">
<li>The <strong>dynamics</strong> following the vector field of the FitzHugh-Nagumo equations</li>
<li>The <strong>observation model</strong> measures the first component of the system</li>
<li>The posterior is computed using a Kalman filter.</li>
</ul>
</details>
<h5 dir="auto"><a id="user-content-build-the-state-space-model-1" class="anchor" aria-hidden="true" href="#build-the-state-space-model-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Build the state-space model</h5>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d, D = 1, 2
Î¼â‚€ = [-1.0, 1.0]
Î£â‚€ = [0.01 0.0
    0.0 0.01]
a, b, c = 0.2, 0.2, 3.0

function f(x)
    x1, x2 = x
    return [
        x1 + 0.1 * (c * (x1 - x1^3 / 3 + x2)),
        x2 + 0.1 * (-(1 / c) * (x1 - a - b * x2)),
    ]
end
function h(x)
    return x[1:1]
end

A(x) = ForwardDiff.jacobian(f, x)
Q(x) = Matrix{Float64}(0.001 * I(D))
H(x) = Matrix{Float64}(I(D))[1:1, :]
R(x) = Matrix{Float64}(I(d))
u(x) = f(x) - A(x) * x
v(x) = zeros(d)"><pre>d, D <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">2</span>
Î¼â‚€ <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
Î£â‚€ <span class="pl-k">=</span> [<span class="pl-c1">0.01</span> <span class="pl-c1">0.0</span>
    <span class="pl-c1">0.0</span> <span class="pl-c1">0.01</span>]
a, b, c <span class="pl-k">=</span> <span class="pl-c1">0.2</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">3.0</span>

<span class="pl-k">function</span> <span class="pl-en">f</span>(x)
    x1, x2 <span class="pl-k">=</span> x
    <span class="pl-k">return</span> [
        x1 <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> (c <span class="pl-k">*</span> (x1 <span class="pl-k">-</span> x1<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">/</span> <span class="pl-c1">3</span> <span class="pl-k">+</span> x2)),
        x2 <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> (<span class="pl-k">-</span>(<span class="pl-c1">1</span> <span class="pl-k">/</span> c) <span class="pl-k">*</span> (x1 <span class="pl-k">-</span> a <span class="pl-k">-</span> b <span class="pl-k">*</span> x2)),
    ]
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">h</span>(x)
    <span class="pl-k">return</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>]
<span class="pl-k">end</span>

<span class="pl-en">A</span>(x) <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">jacobian</span>(f, x)
<span class="pl-en">Q</span>(x) <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.001</span> <span class="pl-k">*</span> <span class="pl-c1">I</span>(D))
<span class="pl-en">H</span>(x) <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">I</span>(D))[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, :]
<span class="pl-en">R</span>(x) <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">I</span>(d))
<span class="pl-en">u</span>(x) <span class="pl-k">=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">-</span> <span class="pl-c1">A</span>(x) <span class="pl-k">*</span> x
<span class="pl-en">v</span>(x) <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(d)</pre></div>
<h5 dir="auto"><a id="user-content-generate-data" class="anchor" aria-hidden="true" href="#generate-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generate data</h5>
<blockquote>
<p dir="auto">The ground-truth trajectory, as well as the noisy observations come from an auxiliary function <code>simulate</code>ing the dynamics. <a href="https://schmidtjonathan.github.io/PhDSE.jl/dev/examples/kalman_filter/" rel="nofollow">Please have a look here</a>, where you can also find <strong>more examples</strong>.</p>
</blockquote>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="N = 200
ground_truth, observations = simulate_nonlinear(f, Q, h, R, Î¼â‚€, Î£â‚€, N)"><pre>N <span class="pl-k">=</span> <span class="pl-c1">200</span>
ground_truth, observations <span class="pl-k">=</span> <span class="pl-c1">simulate_nonlinear</span>(f, Q, h, R, Î¼â‚€, Î£â‚€, N)</pre></div>
<h3 dir="auto"><a id="user-content-allocate-memory" class="anchor" aria-hidden="true" href="#allocate-memory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Allocate memory</h3>
<p dir="auto">In order to save time that would otherwise be necessary to allocate memory in the iterative algorithm, we do that once before the loop, and then <strong>re-use</strong> it.</p>
<blockquote>
<p dir="auto">This is of course only really relevant for larger state spaces. Here, it's just used to teach the usage.</p>
</blockquote>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cache = init_cache_moments!(FilteringCache(), Î¼â‚€, Î£â‚€)
kf_traj = [(copy(Î¼â‚€), copy(Î£â‚€))]"><pre>cache <span class="pl-k">=</span> <span class="pl-c1">init_cache_moments!</span>(<span class="pl-c1">FilteringCache</span>(), Î¼â‚€, Î£â‚€)
kf_traj <span class="pl-k">=</span> [(<span class="pl-c1">copy</span>(Î¼â‚€), <span class="pl-c1">copy</span>(Î£â‚€))]</pre></div>
<h3 dir="auto"><a id="user-content-finally-run-the-algorithm-" class="anchor" aria-hidden="true" href="#finally-run-the-algorithm-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finally, run the algorithm ...</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for y in observations
    kf_m, kf_C = kf_traj[end]
    kf_m, kf_C = kf_predict!(
        cache,
        A(kf_m),
        Q(kf_m),
        u(kf_m),
    )

    kf_m, kf_C = kf_correct!(
        cache,
        H(kf_m),
        R(y),
        y,
        v(kf_m),
    )

    push!(kf_traj, (copy(kf_m), copy(kf_C)))
end"><pre><span class="pl-k">for</span> y <span class="pl-k">in</span> observations
    kf_m, kf_C <span class="pl-k">=</span> kf_traj[<span class="pl-c1">end</span>]
    kf_m, kf_C <span class="pl-k">=</span> <span class="pl-c1">kf_predict!</span>(
        cache,
        <span class="pl-c1">A</span>(kf_m),
        <span class="pl-c1">Q</span>(kf_m),
        <span class="pl-c1">u</span>(kf_m),
    )

    kf_m, kf_C <span class="pl-k">=</span> <span class="pl-c1">kf_correct!</span>(
        cache,
        <span class="pl-c1">H</span>(kf_m),
        <span class="pl-c1">R</span>(y),
        y,
        <span class="pl-c1">v</span>(kf_m),
    )

    <span class="pl-c1">push!</span>(kf_traj, (<span class="pl-c1">copy</span>(kf_m), <span class="pl-c1">copy</span>(kf_C)))
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content--and-plot-the-results" class="anchor" aria-hidden="true" href="#-and-plot-the-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>... and plot the results</h3>
<details>
<summary><b>Show code</b></summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="kf_means = [m for (m, C) in kf_traj]
kf_stds = [2sqrt.(diag(C)) for (m, C) in kf_traj]

plot_x1 = scatter(1:length(observations), [o[1] for o in observations], color = 1, label=&quot;data&quot;)
plot!(plot_x1, 1:length(ground_truth), [gt[1] for gt in ground_truth], label=&quot;gt&quot;, color=:black, lw=5, alpha=0.6)
plot_x2 = plot(1:length(ground_truth), [gt[2] for gt in ground_truth], label=&quot;gt&quot;, color=:black, lw=5, alpha=0.6)
plot!(
    plot_x1,
    1:length(kf_means),
    [m[1] for m in kf_means],
    ribbon = [s[1] for s in kf_stds],
    label = &quot;KF mean&quot;,
    color = 3,
    lw = 3,
)
plot!(
    plot_x2,
    1:length(kf_means),
    [m[2] for m in kf_means],
    ribbon = [s[2] for s in kf_stds],
    label = &quot;KF mean&quot;,
    color = 3,
    lw = 3,
)
res_plot = plot(plot_x1, plot_x2, layout = (1, 2))"><pre>kf_means <span class="pl-k">=</span> [m <span class="pl-k">for</span> (m, C) <span class="pl-k">in</span> kf_traj]
kf_stds <span class="pl-k">=</span> [<span class="pl-c1">2</span><span class="pl-c1">sqrt</span>.(<span class="pl-c1">diag</span>(C)) <span class="pl-k">for</span> (m, C) <span class="pl-k">in</span> kf_traj]

plot_x1 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(observations), [o[<span class="pl-c1">1</span>] <span class="pl-k">for</span> o <span class="pl-k">in</span> observations], color <span class="pl-k">=</span> <span class="pl-c1">1</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(plot_x1, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(ground_truth), [gt[<span class="pl-c1">1</span>] <span class="pl-k">for</span> gt <span class="pl-k">in</span> ground_truth], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gt<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-c1">:black</span>, lw<span class="pl-k">=</span><span class="pl-c1">5</span>, alpha<span class="pl-k">=</span><span class="pl-c1">0.6</span>)
plot_x2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(ground_truth), [gt[<span class="pl-c1">2</span>] <span class="pl-k">for</span> gt <span class="pl-k">in</span> ground_truth], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gt<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-c1">:black</span>, lw<span class="pl-k">=</span><span class="pl-c1">5</span>, alpha<span class="pl-k">=</span><span class="pl-c1">0.6</span>)
<span class="pl-c1">plot!</span>(
    plot_x1,
    <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(kf_means),
    [m[<span class="pl-c1">1</span>] <span class="pl-k">for</span> m <span class="pl-k">in</span> kf_means],
    ribbon <span class="pl-k">=</span> [s[<span class="pl-c1">1</span>] <span class="pl-k">for</span> s <span class="pl-k">in</span> kf_stds],
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>KF mean<span class="pl-pds">"</span></span>,
    color <span class="pl-k">=</span> <span class="pl-c1">3</span>,
    lw <span class="pl-k">=</span> <span class="pl-c1">3</span>,
)
<span class="pl-c1">plot!</span>(
    plot_x2,
    <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(kf_means),
    [m[<span class="pl-c1">2</span>] <span class="pl-k">for</span> m <span class="pl-k">in</span> kf_means],
    ribbon <span class="pl-k">=</span> [s[<span class="pl-c1">2</span>] <span class="pl-k">for</span> s <span class="pl-k">in</span> kf_stds],
    label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>KF mean<span class="pl-pds">"</span></span>,
    color <span class="pl-k">=</span> <span class="pl-c1">3</span>,
    lw <span class="pl-k">=</span> <span class="pl-c1">3</span>,
)
res_plot <span class="pl-k">=</span> <span class="pl-c1">plot</span>(plot_x1, plot_x2, layout <span class="pl-k">=</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))</pre></div>
</details>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/schmidtjonathan/PhDSE.jl/blob/gh-pages/dev/examples/kalman_filter_example.svg"><img src="https://github.com/schmidtjonathan/PhDSE.jl/raw/gh-pages/dev/examples/kalman_filter_example.svg" alt="" style="max-width: 100%;"></a></p>
</article></div>