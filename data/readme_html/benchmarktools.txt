<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-benchmarktoolsjl" class="anchor" aria-hidden="true" href="#benchmarktoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BenchmarkTools.jl</h1>
<p><a href="https://travis-ci.org/JuliaCI/BenchmarkTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c672e2183a4642d49bb611e1d2928ec4ceaf1717/68747470733a2f2f7472617669732d63692e6f72672f4a756c696143492f42656e63686d61726b546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCI/BenchmarkTools.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaCI/BenchmarkTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/353b6d5c6a5524897728b9a5f3e95c615d8c3cf7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696143492f42656e63686d61726b546f6f6c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaCI/BenchmarkTools.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>BenchmarkTools makes <strong>performance tracking of Julia code easy</strong> by supplying a framework for <strong>writing and running groups of benchmarks</strong> as well as <strong>comparing benchmark results</strong>.</p>
<p>This package is used to write and run the benchmarks found in <a href="https://github.com/JuliaCI/BaseBenchmarks.jl">BaseBenchmarks.jl</a>.</p>
<p>The CI infrastructure for automated performance testing of the Julia language is not in this package, but can be found in <a href="https://github.com/JuliaCI/Nanosoldier.jl">Nanosoldier.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install BenchmarkTools, you can run the following:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BenchmarkTools<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>If you're just getting started, check out the <a href="doc/manual.md">manual</a> for a thorough explanation of BenchmarkTools.</p>
<p>If you want to explore the BenchmarkTools API, see the <a href="doc/reference.md">reference document</a>.</p>
<p>If you want a short example of a toy benchmark suite, see the sample file in this repo (<a href="benchmark/benchmarks.jl">benchmark/benchmarks.jl</a>).</p>
<p>If you want an extensive example of a benchmark suite being used in the real world, you can look at the source code of <a href="https://github.com/JuliaCI/BaseBenchmarks.jl/tree/nanosoldier">BaseBenchmarks.jl</a>.</p>
<p>If you're benchmarking on Linux, I wrote up a series of <a href="https://github.com/JuliaCI/BenchmarkTools.jl/blob/master/doc/linuxtips.md">tips and tricks</a> to help eliminate noise during performance tests.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick Start</h2>
<p>The primary macro provided by BenchmarkTools is <code>@benchmark</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

<span class="pl-c"><span class="pl-c">#</span> The `setup` expression is run once per sample, and is not included in the</span>
<span class="pl-c"><span class="pl-c">#</span> timing results. Note that each sample can require multiple evaluations</span>
<span class="pl-c"><span class="pl-c">#</span> benchmark kernel evaluations. See the BenchmarkTools manual for details.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">sin</span>(x) setup<span class="pl-k">=</span>(x<span class="pl-k">=</span><span class="pl-c1">rand</span>())
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">4.248</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">4.631</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">5.502</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">60.995</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1000</span></pre></div>
<p>For quick sanity checks, one can use the <a href="https://github.com/JuliaCI/BenchmarkTools.jl/blob/master/doc/manual.md#benchmarking-basics"><code>@btime</code> macro</a>, which is a convenience wrapper around <code>@benchmark</code> whose output is analogous to Julia's built-in <a href="https://docs.julialang.org/en/latest/base/base/#Base.@time" rel="nofollow"><code>@time</code> macro</a>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>(x) setup<span class="pl-k">=</span>(x<span class="pl-k">=</span><span class="pl-c1">rand</span>())
  <span class="pl-c1">4.361</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">0.49587200950472454</span></pre></div>
<p>If the expression you want to benchmark depends on external variables, you should use <a href="https://github.com/JuliaCI/BenchmarkTools.jl/blob/master/doc/manual.md#interpolating-values-into-benchmark-expressions"><code>$</code> to "interpolate"</a> them into the benchmark expression to
<a href="https://docs.julialang.org/en/latest/manual/performance-tips/#Avoid-global-variables-1" rel="nofollow">avoid the problems of benchmarking with globals</a>.
Essentially, any interpolated variable <code>$x</code> or expression <code>$(...)</code> is "pre-computed" before benchmarking begins:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">inv</span>(<span class="pl-k">$</span>A);            <span class="pl-c"><span class="pl-c">#</span> we interpolate the global variable A with $A</span>
  <span class="pl-c1">1.191</span> μs (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.31</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">inv</span>(<span class="pl-k">$</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)));  <span class="pl-c"><span class="pl-c">#</span> interpolation: the rand(3,3) call occurs before benchmarking</span>
  <span class="pl-c1">1.192</span> μs (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.31</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">inv</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>));     <span class="pl-c"><span class="pl-c">#</span> the rand(3,3) call is included in the benchmark time</span>
  <span class="pl-c1">1.295</span> μs (<span class="pl-c1">11</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.47</span> KiB)</pre></div>
<p>As described the <a href="doc/manual.md">manual</a>, the BenchmarkTools package supports many other features, both for additional output and for more fine-grained control over the benchmarking process.</p>
<h2><a id="user-content-why-does-this-package-exist" class="anchor" aria-hidden="true" href="#why-does-this-package-exist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why does this package exist?</h2>
<p>Our story begins with two packages, "Benchmarks" and "BenchmarkTrackers". The Benchmarks package implemented an execution strategy for collecting and summarizing individual benchmark results, while BenchmarkTrackers implemented a framework for organizing, running, and determining regressions of groups of benchmarks. Under the hood, BenchmarkTrackers relied on Benchmarks for actual benchmark execution.</p>
<p>For a while, the Benchmarks + BenchmarkTrackers system was used for automated performance testing of Julia's Base library. It soon became apparent that the system suffered from a variety of issues:</p>
<ol>
<li>Individual sample noise could significantly change the execution strategy used to collect further samples.</li>
<li>The estimates used to characterize benchmark results and to detect regressions were statistically vulnerable to noise (i.e. not robust).</li>
<li>Different benchmarks have different noise tolerances, but there was no way to tune this parameter on a per-benchmark basis.</li>
<li>Running benchmarks took a long time - an order of magnitude longer than theoretically necessary for many functions.</li>
<li>Using the system in the REPL (for example, to reproduce regressions locally) was often cumbersome.</li>
</ol>
<p>The BenchmarkTools package is a response to these issues, designed by examining user reports and the benchmark data generated by the old system. BenchmarkTools offers the following solutions to the corresponding issues above:</p>
<ol>
<li>Benchmark execution parameters are configured separately from the execution of the benchmark itself. This means that subsequent experiments are performed more consistently, avoiding branching "substrategies" based on small numbers of samples.</li>
<li>A variety of simple estimators are supported, and the user can pick which one to use for regression detection.</li>
<li>Noise tolerance has been made a per-benchmark configuration parameter.</li>
<li>Benchmark configuration parameters can be easily cached and reloaded, significantly reducing benchmark execution time.</li>
<li>The API is simpler, more transparent, and overall easier to use.</li>
</ol>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgements</h2>
<p>This package was authored primarily by Jarrett Revels (@jrevels). Additionally, I'd like to thank the following people:</p>
<ul>
<li>John Myles White, for authoring the original Benchmarks package, which greatly inspired BenchmarkTools</li>
<li>Andreas Noack, for statistics help and investigating weird benchmark time distributions</li>
<li>Oscar Blumberg, for discussions on noise robustness</li>
<li>Jiahao Chen, for discussions on error analysis</li>
</ul>
</article></div>