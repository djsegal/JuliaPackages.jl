<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dwavejl" class="anchor" aria-hidden="true" href="#dwavejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DWave.jl</h1>
<p dir="auto"><a href="https://github.com/psrenergy/QUBODrivers.jl"><img src="https://camo.githubusercontent.com/577cb83e897799ec0841dea0a021753569dee0a027228505adb044b992e7e962/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f506f776572656425323062792d5155424f447269766572732e6a6c2d253230253233343036336438" alt="QUBODRIVERS" data-canonical-src="https://img.shields.io/badge/Powered%20by-QUBODrivers.jl-%20%234063d8" style="max-width: 100%;"></a></p>
<p dir="auto">D-Wave Quantum Annealing Interface for JuMP</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(&quot;DWave.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DWave.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP
using QUBODrivers
using DWave

model = Model(DWave.Optimizer)

h = [-1, -1, -1]
J = [0 2 2; 0 0 2; 0 0 0]

@variable(model, s[1:3] in Spin)

@objective(model, Min, h's + s'J * s)

optimize!(model)

for i = 1:result_count(model)
    si = value.(s; result=i)
    yi = objective_value(model; result=i)

    println(&quot;H($si) = $yi&quot;)
end"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> QUBODrivers
<span class="pl-k">using</span> DWave

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(DWave<span class="pl-k">.</span>Optimizer)

h <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]
J <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">2</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">2</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>]

<span class="pl-c1">@variable</span>(model, s[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">in</span> Spin)

<span class="pl-c1">@objective</span>(model, Min, h<span class="pl-k">'</span>s <span class="pl-k">+</span> s<span class="pl-k">'</span>J <span class="pl-k">*</span> s)

<span class="pl-c1">optimize!</span>(model)

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">result_count</span>(model)
    si <span class="pl-k">=</span> <span class="pl-c1">value</span>.(s; result<span class="pl-k">=</span>i)
    yi <span class="pl-k">=</span> <span class="pl-c1">objective_value</span>(model; result<span class="pl-k">=</span>i)

    <span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>H(<span class="pl-v">$si</span>) = <span class="pl-v">$yi</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-api-token" class="anchor" aria-hidden="true" href="#api-token"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API Token</h2>
<p dir="auto">To use D-Wave's QPU it is necessary to obtain an API Token from <a href="https://cloud.dwavesys.com/leap/" rel="nofollow">Leap</a>.</p>
<p dir="auto"><strong>Disclaimer:</strong> <em>The D-Wave wrapper for Julia is not officially supported by D-Wave Systems. If you are a commercial customer interested in official support for Julia from D-Wave, let them know!</em></p>
<p dir="auto"><strong>Note</strong>: <em>If you are using <a href="https://github.com/psrenergy/DWave.jl">DWave.jl</a> in your project, we recommend you to include the <code>.CondaPkg</code> entry in your <code>.gitignore</code> file. The PythonCall module will place a lot of files in this folder when building its Python environment.</em></p>
</article></div>