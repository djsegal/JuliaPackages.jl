<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-runge-kutta-methods" class="anchor" aria-hidden="true" href="#runge-kutta-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Runge-Kutta Methods</h1>
<p dir="auto"><a href="https://juliagni.github.io/RungeKutta.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliagni.github.io/RungeKutta.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/R/RungeKutta.html" rel="nofollow"><img src="https://camo.githubusercontent.com/d1c04434e9618761131d0c4442f6bb3ab0a781bb964ffaa775290fee2d17f6e9/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f522f52756e67654b757474612e737667" alt="PkgEval Status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/R/RungeKutta.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGNI/RungeKutta.jl/actions"><img src="https://github.com/JuliaGNI/RungeKutta.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGNI/RungeKutta.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02f3038a20180fb905588ed85d109ddf6a10d70c683e59561cdd5c49690b328a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961474e492f52756e67654b757474612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaGNI/RungeKutta.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.4294923" rel="nofollow"><img src="https://camo.githubusercontent.com/3c20d48acb0588d53198871f209e1cd860381c266e9cf075fdff4d8ff2a25ab2/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e343239343932332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/doi/10.5281/zenodo.4294923.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package collects Runge-Kutta tableaus and provides diagnostics to analyze them.
It implements algorithms for the computation of Gauss, Lobatto and Radau tableaus with arbitrary numbers of stages as well as tabulated coefficients for various explicit, diagonally implicit and fully implicit methods.
All tableaus can be retrieved in arbitrary precision or symbolically.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><em>RungeKutta.jl</em> and all of its dependencies can be installed via the Julia REPL by typing</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add RungeKutta"><pre>]add RungeKutta</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">After loading the Runge-Kutta module by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RungeKutta"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RungeKutta</pre></div>
<p dir="auto">a <code>Tableau</code> can be created by calling any one of the provided constructors, for example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; TableauExplicitMidpoint()

Runge-Kutta Tableau explicit_midpoint with 2 stages and order 2:

 0.0 │ 0.0  0.0
 0.5 │ 0.5  0.0
─────┼──────────
     │ 0.0  1.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">TableauExplicitMidpoint</span>()

Runge<span class="pl-k">-</span>Kutta Tableau explicit_midpoint with <span class="pl-c1">2</span> stages and order <span class="pl-c1">2</span><span class="pl-k">:</span>

 <span class="pl-c1">0.0</span> │ <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.5</span> │ <span class="pl-c1">0.5</span>  <span class="pl-c1">0.0</span>
─────┼──────────
     │ <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span></pre></div>
<p dir="auto">The <code>Tableau</code> type has the following fields</p>
<ul dir="auto">
<li><code>name</code> is a descriptive name of the tableau,</li>
<li><code>o</code> the order of the method,</li>
<li><code>s</code> the number of stages,</li>
<li><code>a</code> the coefficients,</li>
<li><code>b</code> the weights,</li>
<li><code>c</code> the nodes.</li>
</ul>
<p dir="auto">The following tableaus are implemented (prepend <code>Tableau</code> to the name to call the respective constructor):</p>
<ul dir="auto">
<li>
<p dir="auto"><em>explicit</em>: ExplicitEuler/ForwardEuler, ExplicitMidpoint, Heun2, Heun3, Ralston2, Ralston3, Runge2, Kutta3, RK21, RK22, RK31, RK32, RK4, RK41, RK42, RK416, RK438, RK5, SSPRK2, SSPRK3</p>
</li>
<li>
<p dir="auto"><em>diagonally implicit</em>: CrankNicolson, Crouzeix, KraaijevangerSpijker, QinZhang</p>
</li>
<li>
<p dir="auto"><em>fully implicit</em>: ImplicitEuler/BackwardEuler, ImplicitMidpoint, SRK3</p>
</li>
</ul>
<p dir="auto">In addition there exist functions to compute Gauss, Lobatto and Radau tableaus with an arbitrary number of stages s:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>TableauGauss(s)</code></p>
</li>
<li>
<p dir="auto"><code>TableauLobattoIIIA(s)</code>, <code>TableauLobattoIIIB(s)</code>, <code>TableauLobattoIIIC(s)</code>, <code>TableauLobattoIIIC̄(s)</code>, <code>TableauLobattoIIID(s)</code>, <code>TableauLobattoIIIE(s)</code>, <code>TableauLobattoIIIF(s)</code>, <code>TableauLobattoIIIG(s)</code></p>
</li>
<li>
<p dir="auto"><code>TableauRadauIA(s)</code>, <code>TableauRadauIIA(s)</code></p>
</li>
</ul>
<p dir="auto">All constructors take an optional type argument <code>T</code>, as in <code>TableauExplicitMidpoint(T)</code> or <code>TableauGauss(T,s)</code>. The default type is <code>Float64</code>, but it can be set to other number types if needed, e.g., to <code>Float32</code> for single precision or to the <code>Dec128</code> type from <a href="https://github.com/JuliaMath/DecFP.jl">DecFP.jl</a> for quadruple precision.
Internally, all tableaus are computed using <code>BigFloat</code>, providing high-accuracy coefficients as they are required for simulations in quadruple or higher precision. The internal precision can be set via <code>setprecision(40)</code>, cf. the <a href="https://docs.julialang.org/en/v1/" rel="nofollow">Julia Manual</a> on <a href="https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Arbitrary-Precision-Arithmetic" rel="nofollow">Arbitrary Precision Arithmetic</a>.</p>
<h2 dir="auto"><a id="user-content-custom-tableaus" class="anchor" aria-hidden="true" href="#custom-tableaus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom Tableaus</h2>
<p dir="auto">If required, it is straight-forward to create a custom tableau.
The tableau of Heun's method, for example, is defined as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = [[0.0  0.0]
     [1.0  0.0]]
b =  [0.5, 0.5]
c =  [0.0, 1.0]
o = 2

tab = Tableau(:heun, o, a, b, c)"><pre>a <span class="pl-k">=</span> [[<span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>]
     [<span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>]]
b <span class="pl-k">=</span>  [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]
c <span class="pl-k">=</span>  [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>]
o <span class="pl-k">=</span> <span class="pl-c1">2</span>

tab <span class="pl-k">=</span> <span class="pl-c1">Tableau</span>(<span class="pl-c1">:heun</span>, o, a, b, c)</pre></div>
<h2 dir="auto"><a id="user-content-diagnostics" class="anchor" aria-hidden="true" href="#diagnostics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Diagnostics</h2>
<p dir="auto">Currently, diagnostic functions for checking symmetry, symplecticity and the so-called simplifying assumptions are implemented:</p>
<ul dir="auto">
<li><code>issymmetric(tab)</code></li>
<li><code>issymplectic(tab)</code></li>
<li><code>satisfies_simplifying_assumption_b(tab, σ=tab.s)</code></li>
<li><code>satisfies_simplifying_assumption_c(tab, σ=tab.s)</code></li>
<li><code>satisfies_simplifying_assumption_d(tab, σ=tab.s)</code></li>
</ul>
<p dir="auto">This list is expected to grow in the near future.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">If you use RungeKutta.jl in your work, please consider citing it by</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@misc{Kraus:2020:RungeKutta,
  title={RungeKutta.jl: Runge-Kutta Methods in Julia},
  author={Kraus, Michael},
  year={2020},
  howpublished={\url{https://github.com/JuliaGNI/RungeKutta.jl}},
  doi={10.5281/zenodo.4294923}
}"><pre class="notranslate"><code>@misc{Kraus:2020:RungeKutta,
  title={RungeKutta.jl: Runge-Kutta Methods in Julia},
  author={Kraus, Michael},
  year={2020},
  howpublished={\url{https://github.com/JuliaGNI/RungeKutta.jl}},
  doi={10.5281/zenodo.4294923}
}
</code></pre></div>
</article></div>