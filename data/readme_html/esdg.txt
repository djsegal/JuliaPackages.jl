<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-esdgjl-energyentropy-stable-discontinuous-galerkin" class="anchor" aria-hidden="true" href="#esdgjl-energyentropy-stable-discontinuous-galerkin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ESDG.jl (<strong>e</strong>nergy/<strong>e</strong>ntropy stable <strong>d</strong>iscontinuous <strong>G</strong>alerkin)</h1>
<h2><a id="user-content-a-julia-codebase-for-solving-1d2d3d-time-dependent-hyperbolic-pdes-using-energy-or-entropy-stable-high-order-dg-methods-on-conforming-unstructured-meshes-consisting-of-triangular-quadrilateral-or-hexahedral-elements" class="anchor" aria-hidden="true" href="#a-julia-codebase-for-solving-1d2d3d-time-dependent-hyperbolic-pdes-using-energy-or-entropy-stable-high-order-dg-methods-on-conforming-unstructured-meshes-consisting-of-triangular-quadrilateral-or-hexahedral-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A Julia codebase for solving 1D/2D/3D time-dependent hyperbolic PDEs using energy or entropy stable high order DG methods on conforming unstructured meshes consisting of triangular, quadrilateral, or hexahedral elements.</h2>
<p>These codes are inspired by the Matlab codes for the book <a href="https://link.springer.com/book/10.1007/978-0-387-72067-8" rel="nofollow">Nodal Discontinuous Galerkin methods</a> by Hesthaven and Warburton (2007).  While unstructured meshes are supported, all demos use uniform meshes, and the codebase is intended mainly for experimentation and method development.</p>
<h2><a id="user-content-demos-for-linear-problems" class="anchor" aria-hidden="true" href="#demos-for-linear-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demos for linear problems</h2>
<ul>
<li>The simplest demo is <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg1D_advec.jl">dg1D_advec.jl</a>, which solves the 1D advection equation on a uniform 1D mesh. The demo <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg2D_advec_tri.jl">dg2D_advec_tri.jl</a> simulates the advection equation on a triangular mesh. The setup of data structures on reference and physical elements is left exposed.</li>
<li>The demos <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg2D_wave_tri.jl">dg2D_wave_tri.jl</a>, <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg2D_wave_quad.jl">dg2D_wave_quad.jl</a> compute solutions to the acoustic wave equation on triangular and quadrilateral meshes. The setup of data structures on reference and physical elements is hidden away in <a href="https://github.com/jlchan/JuliaDG/blob/master/src/SetupDG.jl">setup code</a>.</li>
<li>The demo <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg3D_advec_hex.jl">dg3D_advec_hex.jl</a> solves the advection equation on a hexahedral mesh.</li>
</ul>
<h2><a id="user-content-demos-for-nonlinear-problems" class="anchor" aria-hidden="true" href="#demos-for-nonlinear-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demos for nonlinear problems</h2>
<ul>
<li>The files <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg2D_euler_quad.jl">dg2D_euler_quad.jl</a> and <a href="https://github.com/jlchan/JuliaDG/blob/master/examples/dg3D_euler_hex.jl">dg3D_euler_hex.jl</a> provide entropy stable DG methods on quadrilateral and hexahedral meshes for the compressible Euler equations, with a sparsity-optimized implementation of the Hadamard sum step in flux differencing.</li>
</ul>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>The discretizations used are based on the following references:</p>
<ul>
<li><a href="https://link.springer.com/book/10.1007/978-0-387-72067-8" rel="nofollow">Nodal discontinuous Galerkin methods</a></li>
<li><a href="https://epubs.siam.org/doi/abs/10.1137/16M1089186?casa_token=j8893ak2KVEAAAAA:wVbmLtWx3ibL03oxn_97uRt7du2cSdf-6XlkHhczsVTmHI_6ndEgHm-fe3W-CmrWKuEf7CEo_i8" rel="nofollow">Weight-adjusted discontinuous Galerkin methods: wave propagation in heterogeneous media</a></li>
<li><a href="https://doi.org/10.1016/j.jcp.2018.02.033" rel="nofollow">On discretely entropy conservative and entropy stable DG methods</a></li>
<li><a href="https://doi.org/10.1007/s10915-019-01026-w" rel="nofollow">Skew-Symmetric Entropy Stable Modal DG Formulations</a></li>
<li><a href="https://doi.org/10.1137/18M1209234" rel="nofollow">Efficient Entropy Stable Gauss Collocation Methods</a></li>
</ul>
<p>Special thanks to <a href="https://github.com/yiminllin">Yimin Lin</a> for providing the initial routines which started this codebase.</p>


</article></div>