<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jsonschema" class="anchor" aria-hidden="true" href="#jsonschema"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JSONSchema</h1>
<p dir="auto"><em>JSON instance validation using JSON Schemas</em></p>
<p dir="auto"><a href="https://github.com/fredo-dedup/JSONSchema.jl/actions?query=workflow%3ACI"><img src="https://github.com/fredo-dedup/JSONSchema.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/fredo-dedup/JSONSchema.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eb86fbe92383655c6079be2a369eb2800184e95c90d6add362541d72d18a5f6b/68747470733a2f2f636f6465636f762e696f2f67682f667265646f2d64656475702f4a534f4e536368656d612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/fredo-dedup/JSONSchema.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto"><a href="https://github.com/fredo-dedup/JSONSchema.jl">JSONSchema.jl</a> is a JSON
validation package for the <a href="https://julialang.org/" rel="nofollow">julia</a> programming language.
Given a <a href="http://json-schema.org/specification.html" rel="nofollow">validation schema</a> this
package can verify if any JSON instance meets all the assertions defining a
valid document.</p>
<p dir="auto">This package has been validated with the
<a href="https://github.com/json-schema-org/JSON-Schema-Test-Suite">JSON Schema Test Suite</a>
for draft v4 and v6.</p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">Create a <code>Schema</code> object by passing a string:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; my_schema = Schema(&quot;&quot;&quot;{
            &quot;properties&quot;: {
                &quot;foo&quot;: {},
                &quot;bar&quot;: {}
            },
            &quot;required&quot;: [&quot;foo&quot;]
        }&quot;&quot;&quot;)"><pre>julia<span class="pl-k">&gt;</span> my_schema <span class="pl-k">=</span> <span class="pl-c1">Schema</span>(<span class="pl-s"><span class="pl-pds">"""</span>{</span>
<span class="pl-s">            "properties": {</span>
<span class="pl-s">                "foo": {},</span>
<span class="pl-s">                "bar": {}</span>
<span class="pl-s">            },</span>
<span class="pl-s">            "required": ["foo"]</span>
<span class="pl-s">        }<span class="pl-pds">"""</span></span>)</pre></div>
<p dir="auto">passing a dictionary with the same structure as a schema:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; my_schema = Schema(
            Dict(
                &quot;properties&quot; =&gt; Dict(
                    &quot;foo&quot; =&gt; Dict(),
                    &quot;bar&quot; =&gt; Dict()
                ),
                &quot;required&quot; =&gt; [&quot;foo&quot;]
            )
        )"><pre>julia<span class="pl-k">&gt;</span> my_schema <span class="pl-k">=</span> <span class="pl-c1">Schema</span>(
            <span class="pl-c1">Dict</span>(
                <span class="pl-s"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
                    <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(),
                    <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>()
                ),
                <span class="pl-s"><span class="pl-pds">"</span>required<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>]
            )
        )</pre></div>
<p dir="auto">or by passing a parsed JSON file containing the schema:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; my_schema = Schema(JSON.parsefile(filename))"><pre>julia<span class="pl-k">&gt;</span> my_schema <span class="pl-k">=</span> <span class="pl-c1">Schema</span>(JSON<span class="pl-k">.</span><span class="pl-c1">parsefile</span>(filename))</pre></div>
<p dir="auto">Check the validity of a given JSON instance by calling <code>validate</code> with the JSON
instance <code>x</code> to be tested and the <code>schema</code>. If the validation succeeds,
<code>validate</code> returns <code>nothing</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; data_pass = Dict(&quot;foo&quot; =&gt; true)
Dict{String,Bool} with 1 entry:
  &quot;foo&quot; =&gt; true

julia&gt; validate(my_schema, data_pass)
"><pre>julia<span class="pl-k">&gt;</span> data_pass <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)
Dict{String,Bool} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">validate</span>(my_schema, data_pass)
</pre></div>
<p dir="auto">If the validation fails, a struct is returned that, when printed, explains the
reason for the failure:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; data_fail = Dict(&quot;bar&quot; =&gt; 12.5)
Dict{String,Float64} with 1 entry:
  &quot;bar&quot; =&gt; 12.5

julia&gt; validate(my_schema, data_fail)
Validation failed:
path:         top-level
instance:     Dict(&quot;bar&quot;=&gt;12.5)
schema key:   required
schema value: [&quot;foo&quot;]"><pre>julia<span class="pl-k">&gt;</span> data_fail <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">12.5</span>)
Dict{String,Float64} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">12.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">validate</span>(my_schema, data_fail)
Validation failed<span class="pl-k">:</span>
path<span class="pl-k">:</span>         top<span class="pl-k">-</span>level
instance<span class="pl-k">:</span>     <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">12.5</span>)
schema key<span class="pl-k">:</span>   required
schema value<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>]</pre></div>
<p dir="auto">As a short-hand for <code>validate(schema, x) === nothing</code>, use
<code>Base.isvalid(schema, x)</code>.</p>
</article></div>