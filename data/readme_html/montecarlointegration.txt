<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-monte-carlo-integration" class="anchor" aria-hidden="true" href="#monte-carlo-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Monte Carlo Integration</h1>
<p><a href="https://travis-ci.org/ranjanan/MonteCarloIntegration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81cddb569e6f83d9b5d1fccd2cc17b0b7d329aa6/68747470733a2f2f7472617669732d63692e6f72672f72616e6a616e616e2f4d6f6e74654361726c6f496e746567726174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ranjanan/MonteCarloIntegration.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ranjanan/MonteCarloIntegration.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/283fce2a489f7e1568c04c114dc1ec8c4960aede/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f72616e6a616e616e2f4d6f6e74654361726c6f496e746567726174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ranjanan/MonteCarloIntegration.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides multidimensional integration
algorithms based on monte carlo methods. The biggest
advantage of using monte carlo methods is that their
convergence rate is <strong>independent of the dimension of
the integral</strong>.</p>
<p>Currently, this package only provides a routine
called VEGAS:</p>
<pre><code>vegas(f, st, en, kwargs...)
</code></pre>
<p>VEGAS is a Monte Carlo algorithm for
multidimensional integration based on
adaptive importance sampling. It divides
each dimension into bins and adaptively adjusts
bin widths so points are sampled from the
region where the function has highest magnitude.</p>
<h2><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arguments:</h2>
<ul>
<li>st: Array of starting values in each dimension.
Defaults to zeros(2)</li>
<li>end: Array of ending values in each dimension.
Defaults to ones(2)</li>
</ul>
<h2><a id="user-content-kwargs" class="anchor" aria-hidden="true" href="#kwargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kwargs:</h2>
<ul>
<li>nbins: Number of bins in each dimension.
Defaults to 100.</li>
<li>ncalls: Number of function calls per iteration.
Defaults to 1000.</li>
<li>maxiter: Maximum number of iterations.
Defaults to 100.</li>
<li>rtol: Relative tolerance required.
Defaults to 1e-4.</li>
<li>atol: Absolute tolerance required.
Defaults to 1e-2.</li>
<li>debug: Prints <code>abs(sd/I)</code> every 100 iterations.
Defaults to false.</li>
<li>batch: Whether <code>f</code> returns batches of function
evaluations. <code>f</code> is assumed to take one argument
<code>pts</code>, an <code>ncalls × </code>ndims<code>matrix. Each row is a unique point and returns an</code>ncalls` length
vector of function evals. This argument defaults
to false.</li>
</ul>
<h2><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Output:</h2>
<ul>
<li>Estimate for the integral</li>
<li>Standard deviation</li>
<li>χ^2 / (numiter - 1): should be less than 1
otherwise integral estimate should not be trusted.</li>
</ul>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References:</h2>
<ul>
<li>Lepage, G. Peter. "A new algorithm for adaptive
multidimensional integration." Journal of
Computational Physics 27.2 (1978): 192-203.</li>
</ul>
<h3><a id="user-content-batch-interface" class="anchor" aria-hidden="true" href="#batch-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Batch interface</h3>
<p>Most of the computation time in an integration
algorithm is usually spent in function evaluations.
The batch inteface allows users to provide
batches of function evaluations, instead of supplying
a function directly to be integrated. Users can now
evaluate a number of points in parallel.</p>
<h3><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Roadmap</h3>
<ul>
<li>Supporting vector valued functions</li>
<li>Other integration algorithms</li>
</ul>
</article></div>