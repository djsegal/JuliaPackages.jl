<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-svmjl" class="anchor" aria-hidden="true" href="#svmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SVM.jl</h1>
<h1><a id="user-content-this-package-is-unmaintained-and-will-be-removed-from-metadata" class="anchor" aria-hidden="true" href="#this-package-is-unmaintained-and-will-be-removed-from-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>THIS PACKAGE IS UNMAINTAINED AND WILL BE REMOVED FROM METADATA</h1>
<p><a href="http://www.repostatus.org/#unsupported" rel="nofollow"><img src="https://camo.githubusercontent.com/a8bd646828dd6a9e02d7252d0511ce1a8e1de743/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f756e737570706f727465642e737667" alt="Project Status: Unsupported - The project has reached a stable, usable state but the author(s) have ceased all work on it. A new maintainer may be desired." data-canonical-src="http://www.repostatus.org/badges/latest/unsupported.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaStats/SVM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b4347190128d8938c0f2c71ef99e423d05433ba5/68747470733a2f2f7472617669732d63692e6f72672f4a756c696153746174732f53564d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaStats/SVM.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaStats/SVM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/89eccd6348446e44627124f5d38034fb4826dbec/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c696153746174732f53564d2e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaStats/SVM.jl/badge.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=SVM&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/762e5eb5ba1c511e1d9169205d23ccd052f804b1/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53564d5f302e342e737667" alt="SVM" data-canonical-src="http://pkg.julialang.org/badges/SVM_0.4.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-svms-in-julia" class="anchor" aria-hidden="true" href="#svms-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SVMs in Julia</h1>
<p>Native Julia implementations of standard SVM algorithms.
Currently, there are textbook style implementations of
two popular linear SVM algorithms:</p>
<ul>
<li>Pegasos (Shalev-Schwartz et al., 2007)</li>
<li>Dual Coordinate Descent (Hsieh et al., 2008)</li>
</ul>
<p>The <code>svm</code> function is a wrapper for <code>pegasos</code>, but it is
possible to call <code>cddual</code> explicitly. See the source code
for the hyperparameters of the <code>cddual</code> function.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>The demo below shows how SVMs work:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> To show how SVMs work, we'll use Fisher's iris data set</span>
<span class="pl-k">using</span> SVM
<span class="pl-k">using</span> RDatasets

<span class="pl-c"><span class="pl-c">#</span> We'll learn to separate setosa from other species</span>
iris <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> SVM format expects observations in columns and features in rows</span>
X <span class="pl-k">=</span> <span class="pl-c1">array</span>(iris[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>])<span class="pl-k">'</span>
p, n <span class="pl-k">=</span> <span class="pl-c1">size</span>(X)

<span class="pl-c"><span class="pl-c">#</span> SVM format expects positive and negative examples to +1/-1</span>
Y <span class="pl-k">=</span> [species <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>setosa<span class="pl-pds">"</span></span> ? <span class="pl-c1">1.0</span> : <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">for</span> species <span class="pl-k">in</span> iris[<span class="pl-c1">:Species</span>]]

<span class="pl-c"><span class="pl-c">#</span> Select a subset of the data for training, test on the rest.</span>
train <span class="pl-k">=</span> <span class="pl-c1">randbool</span>(n)

<span class="pl-c"><span class="pl-c">#</span> We'll fit a model with all of the default parameters</span>
model <span class="pl-k">=</span> <span class="pl-c1">svm</span>(X[:,train], Y[train])

<span class="pl-c"><span class="pl-c">#</span> And now evaluate that model on the testset</span>
accuracy <span class="pl-k">=</span> <span class="pl-c1">countnz</span>(<span class="pl-c1">predict</span>(model, X[:,<span class="pl-k">~</span>train]) <span class="pl-k">.==</span> Y[<span class="pl-k">~</span>train])<span class="pl-k">/</span><span class="pl-c1">countnz</span>(<span class="pl-k">~</span>train)</pre></div>
<p>You may specify non-default values for the various parameters:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> The algorithm processes minibatches of data of size k</span>
model <span class="pl-k">=</span> <span class="pl-c1">svm</span>(X, Y, k <span class="pl-k">=</span> <span class="pl-c1">150</span>)

<span class="pl-c"><span class="pl-c">#</span> Weight regularization is controlled by lambda</span>
model <span class="pl-k">=</span> <span class="pl-c1">svm</span>(X, Y, lambda <span class="pl-k">=</span> <span class="pl-c1">0.1</span>)

<span class="pl-c"><span class="pl-c">#</span> The algorithm performs T iterations</span>
model <span class="pl-k">=</span> <span class="pl-c1">svm</span>(X, Y, T <span class="pl-k">=</span> <span class="pl-c1">1000</span>)</pre></div>
</article></div>