<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/cadojo/GeneralAstrodynamics.jl/actions?query=workflow%3ATests"><img src="https://github.com/cadojo/GeneralAstrodynamics.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width: 100%;"></a>
<a href="https://cadojo.github.io/GeneralAstrodynamics.jl/" rel="nofollow"><img src="https://github.com/cadojo/GeneralAstrodynamics.jl/workflows/Documentation/badge.svg" alt="Docs" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-generalastrodynamicsjl" class="anchor" aria-hidden="true" href="#generalastrodynamicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GeneralAstrodynamics.jl</h1>
<p dir="auto"><em>Common astrodynamics calculations, with units!</em></p>
<h2 dir="auto"><a id="user-content-juliacon-talk" class="anchor" aria-hidden="true" href="#juliacon-talk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaCon Talk</h2>
<p dir="auto">Check out <code>GeneralAstrodynamics</code> in action at JuliaCon 2021! The talk
<a href="https://www.youtube.com/watch?v=WnvKaUsGv8w" rel="nofollow"><em>Going to Jupiter with Julia</em></a>
walks through a simple Jupiter mission design while gently introducing
astrodynamics, Julia, and <code>GeneralAstrodynamics</code>.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<h3 dir="auto"><a id="user-content-restricted-two-body-problem-r2bp" class="anchor" aria-hidden="true" href="#restricted-two-body-problem-r2bp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Restricted Two-body Problem (R2BP)</h3>
<ul dir="auto">
<li>Structures for Cartesian and Keplerian states, and R2BP systems</li>
<li>Functions which implement common R2BP equations</li>
<li>Kepler and Lambert solvers</li>
<li>Orbit propagation and plotting</li>
</ul>
<h3 dir="auto"><a id="user-content-circular-restricted-three-body-problem-cr3bp" class="anchor" aria-hidden="true" href="#circular-restricted-three-body-problem-cr3bp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Circular Restricted Three-body Problem (CR3BP)</h3>
<ul dir="auto">
<li>Structures for dimensioned and normalized Cartesian states, and dimensioned
and normalized CR3BP systems</li>
<li>Functions which implement common CR3BP equations</li>
<li>Analytical and iterative (numerical) Halo orbit solvers</li>
<li>Unstable and stable Halo orbit manifold computation</li>
<li>Orbit propagation and plotting</li>
<li>Zero-velocity curve computation and plotting</li>
</ul>
<h3 dir="auto"><a id="user-content-n-body-problem-nbp" class="anchor" aria-hidden="true" href="#n-body-problem-nbp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>N-body Problem (NBP)</h3>
<ul dir="auto">
<li>This was implemented in a previous package version, and is currently being
refactored</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Some quick examples are below!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Installation
import Pkg
Pkg.add(&quot;GeneralAstrodynamics&quot;) # or julia&gt; ]install GeneralAstrodynamics

# Loading
using GeneralAstrodynamics, Unitful

# Construct a R2BP orbit (massless spacecraft
# moving due to the gravity of one planet)
orbit = let e = 0.4, a = 10_000, i = Ω = ω = ν = 0, planet = Earth
    orbitalstate = KeplerianState(e, a, i, Ω, ω, ν)
    Orbit(orbitalstate, Earth)
end

# Alternatively, use a `CartesianState`
orbit = Orbit(
    CartesianState(randn(6)), # random state vector, [r..., v...]
    Earth
)

# Construct a CR3BP orbit (massless spacecraft moving
# due to the gravity of two planets, both of which
# move in a circle about their common center of mass)
orbit = Orbit(
    CartesianState(randn(6)), # random state vector (again!)
    SunEarth
)

# Propagate any orbit in time (after `using DifferentialEquations`)
using DifferentialEquations
trajectory = propagate(orbit, 10u&quot;d&quot;) # unitful times are convenient here!

# Constract a periodic orbit within CR3BP dynamics (Halo orbit),
# and the orbital period `T` (also requires `DifferentialEquations`)
orbit, T = halo(SunEarth; L=1, Az=75_000u&quot;km&quot;)

# Construct a manifold which converges to (stable), or
# diverges from (unstable) the Halo orbit
superslide = manifold(orbit, T; duration=2T, eps=-1e8, direction=Val{:stable})

# Plot any `Trajectory` or `Manifold` (after `using Plots`)
using Plots
plot(trajectory; title=&quot;R2BP Trajectory&quot;)
plot(propagate(orbit, T); vars=:XY, label=&quot;Halo Orbit&quot;, aspect_ratio=1)
plot(superslide; vars=:XY, title=&quot;Stable Manifold near Earth&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Installation</span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GeneralAstrodynamics<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> or julia&gt; ]install GeneralAstrodynamics</span>

<span class="pl-c"><span class="pl-c">#</span> Loading</span>
<span class="pl-k">using</span> GeneralAstrodynamics, Unitful

<span class="pl-c"><span class="pl-c">#</span> Construct a R2BP orbit (massless spacecraft</span>
<span class="pl-c"><span class="pl-c">#</span> moving due to the gravity of one planet)</span>
orbit <span class="pl-k">=</span> <span class="pl-k">let</span> e <span class="pl-k">=</span> <span class="pl-c1">0.4</span>, a <span class="pl-k">=</span> <span class="pl-c1">10_000</span>, i <span class="pl-k">=</span> Ω <span class="pl-k">=</span> ω <span class="pl-k">=</span> ν <span class="pl-k">=</span> <span class="pl-c1">0</span>, planet <span class="pl-k">=</span> Earth
    orbitalstate <span class="pl-k">=</span> <span class="pl-c1">KeplerianState</span>(e, a, i, Ω, ω, ν)
    <span class="pl-c1">Orbit</span>(orbitalstate, Earth)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Alternatively, use a `CartesianState`</span>
orbit <span class="pl-k">=</span> <span class="pl-c1">Orbit</span>(
    <span class="pl-c1">CartesianState</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">6</span>)), <span class="pl-c"><span class="pl-c">#</span> random state vector, [r..., v...]</span>
    Earth
)

<span class="pl-c"><span class="pl-c">#</span> Construct a CR3BP orbit (massless spacecraft moving</span>
<span class="pl-c"><span class="pl-c">#</span> due to the gravity of two planets, both of which</span>
<span class="pl-c"><span class="pl-c">#</span> move in a circle about their common center of mass)</span>
orbit <span class="pl-k">=</span> <span class="pl-c1">Orbit</span>(
    <span class="pl-c1">CartesianState</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">6</span>)), <span class="pl-c"><span class="pl-c">#</span> random state vector (again!)</span>
    SunEarth
)

<span class="pl-c"><span class="pl-c">#</span> Propagate any orbit in time (after `using DifferentialEquations`)</span>
<span class="pl-k">using</span> DifferentialEquations
trajectory <span class="pl-k">=</span> <span class="pl-c1">propagate</span>(orbit, <span class="pl-c1">10</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>d<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> unitful times are convenient here!</span>

<span class="pl-c"><span class="pl-c">#</span> Constract a periodic orbit within CR3BP dynamics (Halo orbit),</span>
<span class="pl-c"><span class="pl-c">#</span> and the orbital period `T` (also requires `DifferentialEquations`)</span>
orbit, T <span class="pl-k">=</span> <span class="pl-c1">halo</span>(SunEarth; L<span class="pl-k">=</span><span class="pl-c1">1</span>, Az<span class="pl-k">=</span><span class="pl-c1">75_000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Construct a manifold which converges to (stable), or</span>
<span class="pl-c"><span class="pl-c">#</span> diverges from (unstable) the Halo orbit</span>
superslide <span class="pl-k">=</span> <span class="pl-c1">manifold</span>(orbit, T; duration<span class="pl-k">=</span><span class="pl-c1">2</span>T, eps<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1e8</span>, direction<span class="pl-k">=</span>Val{<span class="pl-c1">:stable</span>})

<span class="pl-c"><span class="pl-c">#</span> Plot any `Trajectory` or `Manifold` (after `using Plots`)</span>
<span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(trajectory; title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>R2BP Trajectory<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(<span class="pl-c1">propagate</span>(orbit, T); vars<span class="pl-k">=</span><span class="pl-c1">:XY</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Halo Orbit<span class="pl-pds">"</span></span>, aspect_ratio<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot</span>(superslide; vars<span class="pl-k">=</span><span class="pl-c1">:XY</span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Stable Manifold near Earth<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">In the coming years, the
<a href="https://cadojo.github.io/GeneralAstrodynamics.jl/dev/" rel="nofollow">Getting Started</a> page
will have code examples, and other documentation for fundamental astrodynamics
concepts, and <code>GeneralAstrodynamics</code> usage. Stay tuned and/or submit pull
requests!</p>
</article></div>