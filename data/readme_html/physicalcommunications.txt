<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-physicalcommunicationsjl" class="anchor" aria-hidden="true" href="#physicalcommunicationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PhysicalCommunications.jl</h1>
<p><a href="https://travis-ci.org/ma-laforge/PhysicalCommunications.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d20a3b426f04971b7fa072369bbcf7767f19be7c/68747470733a2f2f7472617669732d63692e6f72672f6d612d6c61666f7267652f506879736963616c436f6d6d756e69636174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ma-laforge/PhysicalCommunications.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p>PhysicalCommunications.jl provides tools for the development &amp; test of the physical communication layer (typically implemented in the "PHY" chip).</p>
<h3><a id="user-content-eye-diagrams" class="anchor" aria-hidden="true" href="#eye-diagrams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Eye Diagrams</h3>
<table>
<thead>
<tr>
<th align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ma-laforge/FileRepo/blob/master/SignalProcessing/sampleplots/demo7.png"><img src="https://github.com/ma-laforge/FileRepo/raw/master/SignalProcessing/sampleplots/demo7.png" width="850" style="max-width:100%;"></a></th>
</tr>
</thead>
</table>
<ul>
<li><strong><code>buildeye()</code></strong>: Builds an eye diagram by folding <code>x</code> values of provided <code>(x,y)</code> into multiple windows of <code>teye</code> that start (are "triggered") every <code>tbit</code>:
<ul>
<li><code>buildeye(x::Vector, y::Vector, tbit::Number, teye::Number; tstart::Number=0)</code></li>
</ul>
</li>
</ul>
<p>Example plotting with Plots.jl:</p>
<pre><code>#Assumption: (x, y) data generated here.
tbit = 1e-9 #Assume data bit period is 1ns.

#Build eye &amp; use tstart to center data.
eye = buildeye(x, y, tbit, 2.0*tbit, tstart=0.2*tbit)

plot(eye.vx, eye.vy)
</code></pre>
<h3><a id="user-content-test-patterns" class="anchor" aria-hidden="true" href="#test-patterns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Test Patterns</h3>
<p>The PhysicalCommunications.jl module provides the means to create pseudo-random bit sequences to test/validate channel performance:</p>
<p>Example creation of PRBS pattern using maximum-length Linear-Feedback Shift Register (LFSR):</p>
<pre><code>pattern = collect(sequence(MaxLFSR(31), seed=11, len=1000, output=Bool)).
</code></pre>
<p>Example validation of maximum-length LFSR sequence:</p>
<pre><code>_errors = sequence_detecterrors(MaxLFSR(31), pattern)
</code></pre>
<h4><a id="user-content-test-patterns-supported-sequence-generators-types" class="anchor" aria-hidden="true" href="#test-patterns-supported-sequence-generators-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Test Patterns: Supported Sequence Generators (Types)</h4>
<ul>
<li><strong><code>SequenceGenerator</code></strong> (abstract type): Defines algorithm used by sequence() to create a bit sequence.</li>
<li><strong><code>PRBSGenerator &lt;: SequenceGenerator</code></strong> (abstract type): Specifically a pseudo-random bit sequence.</li>
<li><strong><code>MaxLFSR{LEN} &lt;: PRBSGenerator</code></strong>: Identifies a "Maximum-Length LFSR" algorithm.
<ul>
<li>Reference: Alfke, Efficient Shift Registers, LFSR Counters, and Long Pseudo-Random Sequence Generators, Xilinx, XAPP 052, v1.1, 1996.</li>
</ul>
</li>
<li>**<code>MaxLFSR_Iter{LEN,TRESULT}</code>: "Iterator" object for MaxLFSR sequence generator.
<ul>
<li>Must <code>collect(::MaxLFSR_Iter)</code> to obtain sequence values.</li>
</ul>
</li>
</ul>
<h4><a id="user-content-test-patterns-iterable-api" class="anchor" aria-hidden="true" href="#test-patterns-iterable-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Test Patterns: Iterable API</h4>
<ul>
<li><strong><code>sequence()</code></strong>: Create an iterable object that defines a bit sequence of length <code>len</code>..
<ul>
<li><code>sequence(t::SequenceGenerator; seed::Integer=11, len::Int=-1, output::DataType=Int)</code></li>
<li>Must use <code>collect(sequence([...]))</code> to obtain actual sequence values.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility</h2>
<p>Extensive compatibility testing of PhysicalCommunications.jl has not been performed.  The module has been tested using the following environment(s):</p>
<ul>
<li>Linux / Julia-1.1.1</li>
</ul>
<h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disclaimer</h2>
<p>The PhysicalCommunications.jl module is not yet mature.  Expect significant changes.</p>
</article></div>