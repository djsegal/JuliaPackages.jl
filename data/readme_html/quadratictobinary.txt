<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quadratictobinaryjl" class="anchor" aria-hidden="true" href="#quadratictobinaryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuadraticToBinary.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/joaquimg/QuadraticToBinary.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b5df4a5e19b81e42676315035e48756344ec2dd1/68747470733a2f2f7472617669732d63692e6f72672f6a6f617175696d672f517561647261746963546f42696e6172792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/joaquimg/QuadraticToBinary.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/joaquimg/QuadraticToBinary.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8673d47e984af55f038aba20c1c01da35033eb64/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6f617175696d672f517561647261746963546f42696e6172792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/joaquimg/QuadraticToBinary.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>Non-convex quadratic programs are extremely hard to solve. This problem class can
be solved by Global Solvers such as <a href="https://projects.coin-or.org/Couenne" rel="nofollow">Couenne</a>.
Another possibility is to rely on binary expasion of products terms that appear in the
problem, in this case the problem is <em>approximated</em> and can be solved by off-the-shelf
MIP solvers such as <a href="https://github.com/JuliaOpt/Cbc.jl">Cbc</a>, <a href="https://github.com/JuliaOpt/CPLEX.jl">CPLEX</a>, <a href="https://github.com/JuliaOpt/GLPK.jl">GLPK</a>, <a href="https://github.com/JuliaOpt/Gurobi.jl">Gurobi</a>, <a href="https://github.com/JuliaOpt/Xpress.jl">Xpress</a>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>If one wants to solve the optimization problem with the package:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Max 2x + y</span>
<span class="pl-c"><span class="pl-c">#</span> s.t. x * y &lt;= 4 (c)</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y &gt;= 1</span></pre></div>
<p>One should model as a quadratic program and simply wrap the solver with a
<code>QuadraticToBinary.Optimizer</code>, with one extra requirement: all variables appearing
in quadratic terms must be bounded above an below.</p>
<p>Therefore the new model can be:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Max 2x + y</span>
<span class="pl-c"><span class="pl-c">#</span> s.t. x * y &lt;= 4 (c)</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y &gt;= 1</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y &lt;= 10</span></pre></div>
<h3><a id="user-content-jump-with-cbc-solver" class="anchor" aria-hidden="true" href="#jump-with-cbc-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JuMP with Cbc solver</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> MathOptInterface
<span class="pl-k">using</span> QuadraticToBinary
<span class="pl-k">using</span> Cbc

<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface
<span class="pl-k">const</span> MOIU <span class="pl-k">=</span> MOI<span class="pl-k">.</span>Utilities

<span class="pl-k">const</span> optimizer <span class="pl-k">=</span> MOI<span class="pl-k">.</span>Bridges<span class="pl-k">.</span><span class="pl-c1">full_bridge_optimizer</span>(
    MOIU<span class="pl-k">.</span><span class="pl-c1">CachingOptimizer</span>(
        MOIU<span class="pl-k">.</span><span class="pl-c1">UniversalFallback</span>(MOIU<span class="pl-k">.</span><span class="pl-c1">Model</span><span class="pl-c1">{Float64}</span>()),
        Cbc<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()), Float64)

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(
    ()<span class="pl-k">-&gt;</span>QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Float64}</span>(
        optimizer))

<span class="pl-c1">@variable</span>(model, <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)

<span class="pl-c1">@constraint</span>(model, c, x <span class="pl-k">*</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">4</span>)

<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">2</span>x <span class="pl-k">+</span> y)

<span class="pl-c1">optimize!</span>(model)

<span class="pl-c1">termination_status</span>(model)

<span class="pl-c1">primal_status</span>(model)

<span class="pl-c1">objective_value</span>(model) <span class="pl-c"><span class="pl-c">#</span> ≈ 9.0</span>

<span class="pl-c1">value</span>(x) <span class="pl-c"><span class="pl-c">#</span> ≈ 4.0</span>
<span class="pl-c1">value</span>(y) <span class="pl-c"><span class="pl-c">#</span> ≈ 1.0</span>

<span class="pl-c1">value</span>(c) <span class="pl-c"><span class="pl-c">#</span> ≈ 4.0</span></pre></div>
<h3><a id="user-content-mathoptinterface-with-cbc-solver" class="anchor" aria-hidden="true" href="#mathoptinterface-with-cbc-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MathOptInterface with Cbc solver</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MathOptInterface
<span class="pl-k">using</span> QuadraticToBinary
<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface
<span class="pl-k">const</span> MOIU <span class="pl-k">=</span> MOI<span class="pl-k">.</span>Utilities
<span class="pl-k">using</span> Cbc

<span class="pl-k">const</span> optimizer <span class="pl-k">=</span> MOI<span class="pl-k">.</span>Bridges<span class="pl-k">.</span><span class="pl-c1">full_bridge_optimizer</span>(
    MOIU<span class="pl-k">.</span><span class="pl-c1">CachingOptimizer</span>(
        MOIU<span class="pl-k">.</span><span class="pl-c1">UniversalFallback</span>(MOIU<span class="pl-k">.</span><span class="pl-c1">Model</span><span class="pl-c1">{Float64}</span>()),
        Cbc<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()), Float64)

model <span class="pl-k">=</span> QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Float64}</span>(optimizer)

x <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variable</span>(model)
y <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variable</span>(model)

MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">SingleVariable</span>(x), MOI<span class="pl-k">.</span><span class="pl-c1">GreaterThan</span>(<span class="pl-c1">1.0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">SingleVariable</span>(y), MOI<span class="pl-k">.</span><span class="pl-c1">GreaterThan</span>(<span class="pl-c1">1.0</span>))

MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">SingleVariable</span>(x), MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">10.0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">SingleVariable</span>(y), MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">10.0</span>))

cf <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">ScalarQuadraticFunction</span>(
    [MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineTerm</span>(<span class="pl-c1">0.0</span>, x)], [MOI<span class="pl-k">.</span><span class="pl-c1">ScalarQuadraticTerm</span>(<span class="pl-c1">1.0</span>, x, y)], <span class="pl-c1">0.0</span>)
c <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, cf, MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">4.0</span>))

MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ObjectiveFunction</span><span class="pl-c1">{MOI.ScalarAffineFunction{Float64}}</span>(),
    MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineFunction</span>(MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineTerm</span>.([<span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>], [x, y]), <span class="pl-c1">0.0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ObjectiveSense</span>(), MOI<span class="pl-k">.</span>MAX_SENSE)

MOI<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(model)

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">TerminationStatus</span>()) <span class="pl-c"><span class="pl-c">#</span> config.optimal_status</span>

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">PrimalStatus</span>()) <span class="pl-c"><span class="pl-c">#</span> MOI.FEASIBLE_POINT</span>

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ObjectiveValue</span>()) <span class="pl-c"><span class="pl-c">#</span> ≈ 9.0</span>

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), x) <span class="pl-c"><span class="pl-c">#</span> ≈ 4.0</span>
MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), y) <span class="pl-c"><span class="pl-c">#</span> ≈ 1.0</span>

MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ConstraintPrimal</span>(), c) <span class="pl-c"><span class="pl-c">#</span> ≈ 4.0</span></pre></div>
<p>Note that duals are not available because the problem was approximated as a MIP.</p>
<p>It is possible to change the precision of the approximations to the number <code>val</code>,
for all variables:</p>
<div class="highlight highlight-source-julia"><pre>MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">GlobalVariablePrecision</span>(), val)</pre></div>
<p>Or, for each variable <code>vi</code>:</p>
<div class="highlight highlight-source-julia"><pre>MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">VariablePrecision</span>(), vi, val)</pre></div>
<p>The precision for each varible will be <code>val * (UB - LB)</code>. Where <code>UB</code> and <code>LB</code> are,
respectively, the upper and lower bound of the variable.</p>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference</h2>
<p>For more details on the formulation applied here see this <a href="https://link.springer.com/article/10.1007/s10898-018-0728-9" rel="nofollow">paper</a>:</p>
<pre><code>@article{andrade2019enhancing,
  title={Enhancing the normalized multiparametric disaggregation technique for mixed-integer quadratic programming},
  author={Andrade, Tiago and Oliveira, Fabricio and Hamacher, Silvio and Eberhard, Andrew},
  journal={Journal of Global Optimization},
  volume={73},
  number={4},
  pages={701--722},
  year={2019},
  publisher={Springer}
}
</code></pre>
</article></div>