<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-quadratictobinaryjl" class="anchor" aria-hidden="true" href="#quadratictobinaryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuadraticToBinary.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/joaquimg/QuadraticToBinary.jl/actions?query=workflow%3ACI"><img src="https://github.com/joaquimg/QuadraticToBinary.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a> <a href="http://codecov.io/github/joaquimg/QuadraticToBinary.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/de620792a2dbfe8d56347a3f5984476e07fa35ef564434ae15b03ec1028e555f/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6f617175696d672f517561647261746963546f42696e6172792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/joaquimg/QuadraticToBinary.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">Non-convex quadratic programs are extremely hard to solve. This problem class can
be solved by Global Solvers such as <a href="https://projects.coin-or.org/Couenne" rel="nofollow">Couenne</a>.
Another possibility is to rely on binary expasion of products terms that appear in the
problem, in this case the problem is <em>approximated</em> and can be solved by off-the-shelf
MIP solvers such as <a href="https://github.com/jump-dev/Cbc.jl">Cbc</a>, <a href="https://github.com/jump-dev/CPLEX.jl">CPLEX</a>, <a href="https://github.com/jump-dev/GLPK.jl">GLPK</a>, <a href="https://github.com/jump-dev/Gurobi.jl">Gurobi</a>, <a href="https://github.com/jump-dev/HiGHS.jl">HiGHS</a>, <a href="https://github.com/jump-dev/Xpress.jl">Xpress</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">If one wants to solve the optimization problem with this package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Max 2x + y
# s.t. x * y &lt;= 4 (c)
#      x, y &gt;= 1"><pre><span class="pl-c"><span class="pl-c">#</span> Max 2x + y</span>
<span class="pl-c"><span class="pl-c">#</span> s.t. x * y &lt;= 4 (c)</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y &gt;= 1</span></pre></div>
<p dir="auto">One should model as a quadratic program and simply wrap the solver with a
<code>QuadraticToBinary.Optimizer</code>, with one extra requirement: all variables appearing
in quadratic terms must be bounded above and below.</p>
<p dir="auto">Therefore, the new model can be:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Max 2x + y
# s.t. x * y &lt;= 4 (c)
#      x, y &gt;= 1
#      x, y &lt;= 10"><pre><span class="pl-c"><span class="pl-c">#</span> Max 2x + y</span>
<span class="pl-c"><span class="pl-c">#</span> s.t. x * y &lt;= 4 (c)</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y &gt;= 1</span>
<span class="pl-c"><span class="pl-c">#</span>      x, y &lt;= 10</span></pre></div>
<h3 dir="auto"><a id="user-content-jump-with-highs-solver" class="anchor" aria-hidden="true" href="#jump-with-highs-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuMP with HiGHS solver</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP
using MathOptInterface
using QuadraticToBinary
using HiGHS

model = Model(
    ()-&gt;QuadraticToBinary.Optimizer{Float64}(
        MOI.instantiate(HiGHS.Optimizer, with_bridge_type = Float64)))

@variable(model, 1 &lt;= x &lt;= 10)
@variable(model, 1 &lt;= y &lt;= 10)

@constraint(model, c, x * y &lt;= 4)

@objective(model, Max, 2x + y)

optimize!(model)

termination_status(model)

primal_status(model)

objective_value(model) # ≈ 9.0

@assert value(x) ≈ 4.0
@assert value(y) ≈ 1.0

@assert value(c) ≈ 4.0"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> MathOptInterface
<span class="pl-k">using</span> QuadraticToBinary
<span class="pl-k">using</span> HiGHS

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(
    ()<span class="pl-k">-&gt;</span>QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Float64}</span>(
        MOI<span class="pl-k">.</span><span class="pl-c1">instantiate</span>(HiGHS<span class="pl-k">.</span>Optimizer, with_bridge_type <span class="pl-k">=</span> Float64)))

<span class="pl-c1">@variable</span>(model, <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>)

<span class="pl-c1">@constraint</span>(model, c, x <span class="pl-k">*</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">4</span>)

<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">2</span>x <span class="pl-k">+</span> y)

<span class="pl-c1">optimize!</span>(model)

<span class="pl-c1">termination_status</span>(model)

<span class="pl-c1">primal_status</span>(model)

<span class="pl-c1">objective_value</span>(model) <span class="pl-c"><span class="pl-c">#</span> ≈ 9.0</span>

<span class="pl-c1">@assert</span> <span class="pl-c1">value</span>(x) <span class="pl-k">≈</span> <span class="pl-c1">4.0</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">value</span>(y) <span class="pl-k">≈</span> <span class="pl-c1">1.0</span>

<span class="pl-c1">@assert</span> <span class="pl-c1">value</span>(c) <span class="pl-k">≈</span> <span class="pl-c1">4.0</span></pre></div>
<h3 dir="auto"><a id="user-content-mathoptinterface-with-highs-solver" class="anchor" aria-hidden="true" href="#mathoptinterface-with-highs-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptInterface with HiGHS solver</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathOptInterface
using QuadraticToBinary
const MOI = MathOptInterface
using HiGHS

optimizer = MOI.instantiate(HiGHS.Optimizer, with_bridge_type = Float64)

model = QuadraticToBinary.Optimizer{Float64}(optimizer)

x = MOI.add_variable(model)
y = MOI.add_variable(model)

MOI.add_constraint(model, x, MOI.GreaterThan(1.0))
MOI.add_constraint(model, y, MOI.GreaterThan(1.0))

MOI.add_constraint(model, x, MOI.LessThan(10.0))
MOI.add_constraint(model, y, MOI.LessThan(10.0))

c = MOI.add_constraint(model, 1.0 * x * y, MOI.LessThan(4.0))

MOI.set(model, MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}(),
    2.0 * x + y)
MOI.set(model, MOI.ObjectiveSense(), MOI.MAX_SENSE)

MOI.optimize!(model)

@assert MOI.get(model, MOI.TerminationStatus()) == MOI.OPTIMAL

@assert MOI.get(model, MOI.PrimalStatus()) == MOI.FEASIBLE_POINT

@assert MOI.get(model, MOI.ObjectiveValue()) ≈ 9.0

@assert MOI.get(model, MOI.VariablePrimal(), x) ≈ 4.0
@assert MOI.get(model, MOI.VariablePrimal(), y) ≈ 1.0

@assert MOI.get(model, MOI.ConstraintPrimal(), c) ≈ 4.0"><pre><span class="pl-k">using</span> MathOptInterface
<span class="pl-k">using</span> QuadraticToBinary
<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface
<span class="pl-k">using</span> HiGHS

optimizer <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">instantiate</span>(HiGHS<span class="pl-k">.</span>Optimizer, with_bridge_type <span class="pl-k">=</span> Float64)

model <span class="pl-k">=</span> QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Float64}</span>(optimizer)

x <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variable</span>(model)
y <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variable</span>(model)

MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, x, MOI<span class="pl-k">.</span><span class="pl-c1">GreaterThan</span>(<span class="pl-c1">1.0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, y, MOI<span class="pl-k">.</span><span class="pl-c1">GreaterThan</span>(<span class="pl-c1">1.0</span>))

MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, x, MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">10.0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, y, MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">10.0</span>))

c <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">1.0</span> <span class="pl-k">*</span> x <span class="pl-k">*</span> y, MOI<span class="pl-k">.</span><span class="pl-c1">LessThan</span>(<span class="pl-c1">4.0</span>))

MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ObjectiveFunction</span><span class="pl-c1">{MOI.ScalarAffineFunction{Float64}}</span>(),
    <span class="pl-c1">2.0</span> <span class="pl-k">*</span> x <span class="pl-k">+</span> y)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ObjectiveSense</span>(), MOI<span class="pl-k">.</span>MAX_SENSE)

MOI<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(model)

<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">TerminationStatus</span>()) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>OPTIMAL

<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">PrimalStatus</span>()) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>FEASIBLE_POINT

<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ObjectiveValue</span>()) <span class="pl-k">≈</span> <span class="pl-c1">9.0</span>

<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), x) <span class="pl-k">≈</span> <span class="pl-c1">4.0</span>
<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), y) <span class="pl-k">≈</span> <span class="pl-c1">1.0</span>

<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">ConstraintPrimal</span>(), c) <span class="pl-k">≈</span> <span class="pl-c1">4.0</span></pre></div>
<p dir="auto">Note:
that duals are not available because the problem was approximated as a MIP.</p>
<h2 dir="auto"><a id="user-content-quadratictobinaryoptimizer-attributes" class="anchor" aria-hidden="true" href="#quadratictobinaryoptimizer-attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuadraticToBinary.Optimizer Attributes</h2>
<h3 dir="auto"><a id="user-content-precision" class="anchor" aria-hidden="true" href="#precision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Precision</h3>
<p dir="auto">It is possible to change the precision of the approximations to the number <code>val</code>,
for all variables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MOI.set(model, QuadraticToBinary.GlobalVariablePrecision(), val)"><pre>MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">GlobalVariablePrecision</span>(), val)</pre></div>
<p dir="auto">Or, for each variable <code>vi</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MOI.set(model, QuadraticToBinary.VariablePrecision(), vi, val)"><pre>MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, QuadraticToBinary<span class="pl-k">.</span><span class="pl-c1">VariablePrecision</span>(), vi, val)</pre></div>
<p dir="auto">The precision for each varible will be <code>val * (UB - LB)</code>. Where <code>UB</code> and <code>LB</code> are,
respectively, the upper and lower bound of the variable.</p>
<p dir="auto">Note:
binary expansion problem can be numerically challenging for high precision. You
might need to modify solver options accordingly. In the case of HiGHS:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tol = 1e-9
MOI.set(model, MOI.RawOptimizerAttribute(&quot;mip_feasibility_tolerance&quot;), tol)
MOI.set(model, MOI.RawOptimizerAttribute(&quot;primal_feasibility_tolerance&quot;), tol)"><pre>tol <span class="pl-k">=</span> <span class="pl-c1">1e-9</span>
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">RawOptimizerAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>mip_feasibility_tolerance<span class="pl-pds">"</span></span>), tol)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">RawOptimizerAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>primal_feasibility_tolerance<span class="pl-pds">"</span></span>), tol)</pre></div>
<h3 dir="auto"><a id="user-content-bounds" class="anchor" aria-hidden="true" href="#bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bounds</h3>
<p dir="auto">For the sake of simplicity, the following two attributes are made available:
<code>QuadraticToBinary.FallbackUpperBound</code> and <code>QuadraticToBinary.FallbackLowerBound</code>.
As usual, these can be get and set with the <code>MOI.get</code> and <code>MOI.set</code> methods.
These allow setting bounds used in variables that have no explicit upper bounds
and need to be expanded.</p>
<h2 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference</h2>
<p dir="auto">For more details on the formulation applied here see this <a href="https://link.springer.com/article/10.1007/s10898-018-0728-9" rel="nofollow">paper</a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@article{andrade2019enhancing,
  title={Enhancing the normalized multiparametric disaggregation technique for mixed-integer quadratic programming},
  author={Andrade, Tiago and Oliveira, Fabricio and Hamacher, Silvio and Eberhard, Andrew},
  journal={Journal of Global Optimization},
  volume={73},
  number={4},
  pages={701--722},
  year={2019},
  publisher={Springer}
}"><pre class="notranslate"><code>@article{andrade2019enhancing,
  title={Enhancing the normalized multiparametric disaggregation technique for mixed-integer quadratic programming},
  author={Andrade, Tiago and Oliveira, Fabricio and Hamacher, Silvio and Eberhard, Andrew},
  journal={Journal of Global Optimization},
  volume={73},
  number={4},
  pages={701--722},
  year={2019},
  publisher={Springer}
}
</code></pre></div>
</article></div>