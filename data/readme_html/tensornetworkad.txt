<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text">
<div align="center"> <a target="_blank" rel="noopener noreferrer" href="tnad-logo.png"><img src="tnad-logo.png" alt="TensorNetworkAD logo" width="510" style="max-width:100%;"></a>
<h1><a id="user-content-tensornetworkad" class="anchor" aria-hidden="true" href="#tensornetworkad"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TensorNetworkAD</h1>
</div>
<p><a href="https://under-Peter.github.io/TensorNetworkAD.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://under-Peter.github.io/TensorNetworkAD.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/under-Peter/TensorNetworkAD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/01f68f26c122895b59d67e105407e65a9af11d6f/68747470733a2f2f7472617669732d63692e636f6d2f756e6465722d50657465722f54656e736f724e6574776f726b41442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/under-Peter/TensorNetworkAD.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/under-Peter/TensorNetworkAD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/38dab66ae1ec4afda753ddef1fbd0ac8a20e5484/68747470733a2f2f636f6465636f762e696f2f67682f756e6465722d50657465722f54656e736f724e6574776f726b41442e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/under-Peter/TensorNetworkAD.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This is a repository for the <em>Google Summer of Code</em> project on Differentiable Tensor Networks.</p>
<p>In this package we implemented the algorithms described in <a href="https://arxiv.org/abs/1903.09650" rel="nofollow">Differentiable Programming Tensor Networks</a>, namely implementing <em>automatic differentiation</em> (AD) on <em>Corner Transfer Matrix Renormalization Group</em> (CTMRG) and <em>Tensor Renormalization Group</em> (TRG),
demonstrating two applications:</p>
<ul>
<li>Gradient based optimization of iPEPS</li>
<li>Direct calculation of energy densities in iPEPS via derivatives of the <em>free energy</em></li>
</ul>
<p>More generally we aim to provide Julia with the tools to combine AD and tensor network methods.</p>
<p>Suggestions and Comments in the <em>Issues</em> are welcome.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Since this package was inspired by the
<a href="https://arxiv.org/abs/1903.09650" rel="nofollow">Differentiable Programming Tensor Networks</a>
paper, we demonstrate the usage of those algorithms in the following.</p>
<h3><a id="user-content-free-energy-of-the-2d-classical-ising-model" class="anchor" aria-hidden="true" href="#free-energy-of-the-2d-classical-ising-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Free Energy of the 2D Classical Ising Model</h3>
<p>We start by constructing the tensor for the tensor network representation of the 2d classical Ising Model.
This tensor can be constructed using the <code>model_tensor</code>-function that takes a <code>model</code>-parameter - in our case <code>Ising()</code> - and an inverse temperature <code>β</code> (e.g. at <code>β=0.5</code>).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">model_tensor</span>(<span class="pl-c1">Ising</span>(), <span class="pl-c1">0.5</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">4</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">2.53434</span>  <span class="pl-c1">0.5</span>    
 <span class="pl-c1">0.5</span>      <span class="pl-c1">0.18394</span>

[:, :, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.5</span>      <span class="pl-c1">0.18394</span>
 <span class="pl-c1">0.18394</span>  <span class="pl-c1">0.5</span>    

[:, :, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.5</span>      <span class="pl-c1">0.18394</span>
 <span class="pl-c1">0.18394</span>  <span class="pl-c1">0.5</span>    

[:, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.18394</span>  <span class="pl-c1">0.5</span>    
 <span class="pl-c1">0.5</span>      <span class="pl-c1">2.53434</span></pre></div>
<p>Using the <code>trg</code> function, we can calculate the partition function of the model per site:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">trg</span>(a, <span class="pl-c1">20</span>,<span class="pl-c1">20</span>)
<span class="pl-c1">1.0257933734351765</span></pre></div>
<p>which grows bond-dimensions up to <code>20</code> and does <code>20</code> iterations, i.e. grows the system to a size of <code>2^20</code> which is well converged for our purposes.</p>
<p>Given the partition function, we get the free energy as the first derivative with respect to <code>β</code> times <code>-1</code>.
With Zygote, this is straightforward to calculate:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zygote<span class="pl-k">:</span> gradient

julia<span class="pl-k">&gt;</span> dβ <span class="pl-k">=</span> <span class="pl-c1">gradient</span>(β <span class="pl-k">-&gt;</span> <span class="pl-c1">trg</span>(<span class="pl-c1">model_tensor</span>(<span class="pl-c1">Ising</span>(), β), <span class="pl-c1">20</span>,<span class="pl-c1">20</span>), <span class="pl-c1">0.5</span>)[<span class="pl-c1">1</span>]
<span class="pl-c1">1.7455677143228514</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">-</span>dβ
<span class="pl-k">-</span><span class="pl-c1">1.7455677143228514</span></pre></div>
<p>which agrees with the data presented in the paper.</p>
<h3><a id="user-content-finding-the-ground-state-of-infinite-2d-heisenberg-model" class="anchor" aria-hidden="true" href="#finding-the-ground-state-of-infinite-2d-heisenberg-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Finding the Ground State of infinite 2D Heisenberg model</h3>
<p>The other algorithm variationally minimizes the energy of a Heisenberg model on a two-dimensional infinite lattice using a form of gradient descent.</p>
<p>First, we need the hamiltonian as a tensor network operator</p>
<pre><code>julia&gt; h = hamiltonian(Heisenberg())
2×2×2×2 Array{Float64,4}:
[:, :, 1, 1] =
 -0.5  0.0
  0.0  0.5

[:, :, 2, 1] =
  0.0  0.0
 -1.0  0.0

[:, :, 1, 2] =
 0.0  -1.0
 0.0   0.0

[:, :, 2, 2] =
 0.5   0.0
 0.0  -0.5
</code></pre>
<p>where we get the <code>Heisenberg</code>-hamiltonian with default parameters <code>Jx = Jy = Jz = 1.0</code>.
Next we initialize an ipeps-tensor and calculate the energy of that tensor and the hamiltonian:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ipeps <span class="pl-k">=</span> <span class="pl-c1">SquareIPEPS</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> ipeps <span class="pl-k">=</span> TensorNetworkAD<span class="pl-k">.</span><span class="pl-c1">indexperm_symmetrize</span>(ipeps);

julia<span class="pl-k">&gt;</span> TensorNetworkAD<span class="pl-k">.</span><span class="pl-c1">energy</span>(h,ipeps, χ<span class="pl-k">=</span><span class="pl-c1">20</span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>,maxit<span class="pl-k">=</span><span class="pl-c1">100</span>)
<span class="pl-k">-</span><span class="pl-c1">0.5278485155836766</span></pre></div>
<p>where the initial energy is random.</p>
<p>To minimise it, we combine <code>Optim</code> and <code>Zygote</code> under the hood to provide the <code>optimiseipeps</code> function.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Optim

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">optimiseipeps</span>(ipeps, h; χ<span class="pl-k">=</span><span class="pl-c1">20</span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, maxit<span class="pl-k">=</span><span class="pl-c1">100</span>,
        optimargs <span class="pl-k">=</span> (Optim<span class="pl-k">.</span><span class="pl-c1">Options</span>(f_tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, show_trace<span class="pl-k">=</span><span class="pl-c1">true</span>),));
Iter     Function value   Gradient norm
     <span class="pl-c1">0</span>    <span class="pl-k">-</span><span class="pl-c1">5.015158e-01</span>     <span class="pl-c1">2.563357e-02</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">4.100799560546875e-5</span>
     <span class="pl-c1">1</span>    <span class="pl-k">-</span><span class="pl-c1">6.171409e-01</span>     <span class="pl-c1">3.170732e-02</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">0.3943500518798828</span>
     <span class="pl-c1">2</span>    <span class="pl-k">-</span><span class="pl-c1">6.558814e-01</span>     <span class="pl-c1">2.927539e-02</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">0.6722378730773926</span>
     <span class="pl-c1">3</span>    <span class="pl-k">-</span><span class="pl-c1">6.577320e-01</span>     <span class="pl-c1">1.299056e-02</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">1.0529990196228027</span>
     <span class="pl-c1">4</span>    <span class="pl-k">-</span><span class="pl-c1">6.587514e-01</span>     <span class="pl-c1">8.515789e-03</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">1.2889769077301025</span>
     <span class="pl-c1">5</span>    <span class="pl-k">-</span><span class="pl-c1">6.595896e-01</span>     <span class="pl-c1">1.102446e-02</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">1.5059330463409424</span>
     <span class="pl-c1">6</span>    <span class="pl-k">-</span><span class="pl-c1">6.599735e-01</span>     <span class="pl-c1">2.020418e-03</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">1.8917429447174072</span>
     <span class="pl-c1">7</span>    <span class="pl-k">-</span><span class="pl-c1">6.600449e-01</span>     <span class="pl-c1">4.343536e-03</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">2.180701971054077</span>
     <span class="pl-c1">8</span>    <span class="pl-k">-</span><span class="pl-c1">6.601202e-01</span>     <span class="pl-c1">2.623793e-03</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">2.5907390117645264</span>
     <span class="pl-c1">9</span>    <span class="pl-k">-</span><span class="pl-c1">6.602188e-01</span>     <span class="pl-c1">3.951503e-04</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">2.9895379543304443</span>
    <span class="pl-c1">10</span>    <span class="pl-k">-</span><span class="pl-c1">6.602232e-01</span>     <span class="pl-c1">2.597750e-04</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">3.254667043685913</span>
    <span class="pl-c1">11</span>    <span class="pl-k">-</span><span class="pl-c1">6.602246e-01</span>     <span class="pl-c1">2.960359e-04</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">3.4899749755859375</span>
    <span class="pl-c1">12</span>    <span class="pl-k">-</span><span class="pl-c1">6.602282e-01</span>     <span class="pl-c1">2.846450e-04</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">3.739893913269043</span>
    <span class="pl-c1">13</span>    <span class="pl-k">-</span><span class="pl-c1">6.602290e-01</span>     <span class="pl-c1">1.679273e-04</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">3.9142658710479736</span>
    <span class="pl-c1">14</span>    <span class="pl-k">-</span><span class="pl-c1">6.602303e-01</span>     <span class="pl-c1">2.155790e-04</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">4.230381011962891</span>
    <span class="pl-c1">15</span>    <span class="pl-k">-</span><span class="pl-c1">6.602311e-01</span>     <span class="pl-c1">2.239934e-05</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">4.5699989795684814</span>
    <span class="pl-c1">16</span>    <span class="pl-k">-</span><span class="pl-c1">6.602311e-01</span>     <span class="pl-c1">1.935087e-05</span>
 <span class="pl-k">*</span> time<span class="pl-k">:</span> <span class="pl-c1">4.837096929550171</span></pre></div>
<p>where our final value for the energy <code>e = -0.6602</code> agrees with the value found in the paper.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>MIT License</p>
</article></div>