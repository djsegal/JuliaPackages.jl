<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-hashidsjl" class="anchor" aria-hidden="true" href="#hashidsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hashids.jl</h1>
<p><a href="https://travis-ci.org/antimon2/Hashids.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e020cb7900c697d78f11012a96875a7dcd53a652/68747470733a2f2f7472617669732d63692e6f72672f616e74696d6f6e322f486173686964732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/antimon2/Hashids.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://cirrus-ci.com/github/antimon2/Hashids.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/612b3294426c0eb63cf215a0538dce85d0fb04e1/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f616e74696d6f6e322f486173686964732e6a6c2e737667" alt="Cirrus" data-canonical-src="https://api.cirrus-ci.com/github/antimon2/Hashids.jl.svg" style="max-width:100%;"></a> <a href="https://codecov.io/github/antimon2/Hashids.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5131d3752cc6d5786c2713e87a35eb8ffad4e5ee/68747470733a2f2f636f6465636f762e696f2f6769746875622f616e74696d6f6e322f486173686964732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/antimon2/Hashids.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A Julia port of the JavaScript Hashids implementation. Website: <a href="https://hashids.org/" rel="nofollow">https://hashids.org/</a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install, run on the Julia Pkg REPL-mode:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add Hashids</pre></div>
<p>To install the latest development version, run the following command instead:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add Hashids<span class="pl-c"><span class="pl-c">#</span>master</span></pre></div>
<p>Then you can run the built-in unit tests with</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> test Hashids</pre></div>
<p>to verify that everything is functioning properly on your machine.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Import the <code>Hashids</code> module with <code>using</code> statement:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Hashids</pre></div>
<h3><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Usage</h3>
<p>Configure (with default parameters):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>();</pre></div>
<p>Encode a single integer:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">123</span>)
<span class="pl-s"><span class="pl-pds">"</span>Mj3<span class="pl-pds">"</span></span></pre></div>
<p>Decode a hash (returns 1-element Integer Array):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(conf, <span class="pl-s"><span class="pl-pds">"</span>xoz<span class="pl-pds">"</span></span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">456</span></pre></div>
<p>Encode several integers:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">123</span>, <span class="pl-c1">456</span>, <span class="pl-c1">789</span>)
<span class="pl-s"><span class="pl-pds">"</span>El3fkRIo3<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, [<span class="pl-c1">123</span>, <span class="pl-c1">456</span>, <span class="pl-c1">789</span>])  <span class="pl-c"><span class="pl-c">#</span> same as above</span>
<span class="pl-s"><span class="pl-pds">"</span>El3fkRIo3<span class="pl-pds">"</span></span></pre></div>
<p>Decode a hash (returns N-elements Integer Array):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(conf, <span class="pl-s"><span class="pl-pds">"</span>1B8UvJfXm<span class="pl-pds">"</span></span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">517</span>
 <span class="pl-c1">729</span>
 <span class="pl-c1">185</span></pre></div>
<h3><a id="user-content-using-custom-salt" class="anchor" aria-hidden="true" href="#using-custom-salt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using Custom Salt</h3>
<p>Hashids supports salting hashes by accepting a <code>salt</code> value. If you donâ€™t want others to decode your hashes, provide a unique string to <code>Hashids.configure()</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>(salt<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>this is my salt 1<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">123</span>)
<span class="pl-s"><span class="pl-pds">"</span>nVB<span class="pl-pds">"</span></span></pre></div>
<p>The generated hash changes whenever the salt is changed:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>(<span class="pl-s"><span class="pl-pds">"</span>this is my salt 2<span class="pl-pds">"</span></span>);  <span class="pl-c"><span class="pl-c">#</span> equivalent to `Hashids.configure(salt="this is my salt 2")`</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">123</span>)
<span class="pl-s"><span class="pl-pds">"</span>ojK<span class="pl-pds">"</span></span></pre></div>
<p>A salt string between 6 and 32 characters provides decent randomization.</p>
<h3><a id="user-content-controlling-hash-length" class="anchor" aria-hidden="true" href="#controlling-hash-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Controlling Hash Length</h3>
<p>By default, hashes are going to be the shortest possible. One reason you might want to increase the hash length is to obfuscate how large the integer behind the hash is.</p>
<p>This is done by passing the <code>min_length</code> to <code>Hashids.configure()</code>. Hashes are padded with extra characters to make them seem longer.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>(min_length<span class="pl-k">=</span><span class="pl-c1">16</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">1</span>)
<span class="pl-s"><span class="pl-pds">"</span>4q2VolejRejNmGQB<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-using-a-custom-alphabet" class="anchor" aria-hidden="true" href="#using-a-custom-alphabet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using A Custom Alphabet</h3>
<p>Itâ€™s possible to set a custom alphabet for your hashes. The default alphabet is <code>"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"</code>.</p>
<p>To have only lowercase letters in your hashes, pass in the following custom alphabet:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>(alphabet<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>abcdefghijklmnopqrstuvwxyz<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">123456789</span>)
<span class="pl-s"><span class="pl-pds">"</span>kekmyzyk<span class="pl-pds">"</span></span></pre></div>
<p>A custom alphabet must contain at least 16 characters.</p>
<p>You can even use emojis as the alphabet.</p>
<h3><a id="user-content-encode-hex-instead-of-numbers" class="anchor" aria-hidden="true" href="#encode-hex-instead-of-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Encode hex instead of numbers</h3>
<p>Useful if you want to encode numbers like Mongo's ObjectIds.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>();

julia<span class="pl-k">&gt;</span> hashid <span class="pl-k">=</span> <span class="pl-c1">encodehex</span>(conf, <span class="pl-s"><span class="pl-pds">"</span>507f1f77bcf86cd799439011<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>y42LW46J9luq3Xq9XMly<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> hex <span class="pl-k">=</span> <span class="pl-c1">decodehex</span>(conf, hashid)
<span class="pl-s"><span class="pl-pds">"</span>507f1f77bcf86cd799439011<span class="pl-pds">"</span></span></pre></div>
<p>Please note that this is not the equivalent of:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>();

julia<span class="pl-k">&gt;</span> hashid <span class="pl-k">=</span> <span class="pl-c1">encode</span>(conf, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">big</span>"</span>0x507f1f77bcf86cd799439011<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>y8qpJL3ZgzJ8lWk4GEV<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> hex <span class="pl-k">=</span> <span class="pl-c1">string</span>(<span class="pl-c1">decode</span>(conf, hashid)[<span class="pl-c1">1</span>], base<span class="pl-k">=</span><span class="pl-c1">16</span>)
<span class="pl-s"><span class="pl-pds">"</span>507f1f77bcf86cd799439011<span class="pl-pds">"</span></span></pre></div>
<p>The difference between the two is that the built-in <code>encodehex</code> will always result in the same length, even if it contained leading zeros.</p>
<p>For example <code>encodehex(conf, "00000000")</code> would encode to <code>"qExOgK7"</code> and decode back to <code>"00000000"</code> (length information is preserved).</p>
<h2><a id="user-content-randomness" class="anchor" aria-hidden="true" href="#randomness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Randomness</h2>
<p>The primary purpose of hashids is to obfuscate ids. It's not meant or tested to be used for security purposes or compression. Having said that, this algorithm does try to make these hashes unguessable and unpredictable:</p>
<h3><a id="user-content-repeating-numbers" class="anchor" aria-hidden="true" href="#repeating-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Repeating numbers</h3>
<p>There are no repeating patterns that might show that there are 4 identical numbers in the hash:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> conf <span class="pl-k">=</span> Hashids<span class="pl-k">.</span><span class="pl-c1">configure</span>(<span class="pl-s"><span class="pl-pds">"</span>this is my salt<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>)
<span class="pl-s"><span class="pl-pds">"</span>1Wc8cwcE<span class="pl-pds">"</span></span></pre></div>
<p>The same is valid for incremented numbers:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>, <span class="pl-c1">10</span>)
<span class="pl-s"><span class="pl-pds">"</span>kRHnurhptKcjIDTWC3sx<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">1</span>)
<span class="pl-s"><span class="pl-pds">"</span>NV<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">2</span>)
<span class="pl-s"><span class="pl-pds">"</span>6m<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">3</span>)
<span class="pl-s"><span class="pl-pds">"</span>yD<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">4</span>)
<span class="pl-s"><span class="pl-pds">"</span>2l<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(conf, <span class="pl-c1">5</span>)
<span class="pl-s"><span class="pl-pds">"</span>rD<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-curses-" class="anchor" aria-hidden="true" href="#curses-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Curses! #$%@</h2>
<p>This code was written with the intent of placing generated hashes in visible places â€“ like the URL. Which makes it unfortunate if generated hashes accidentally formed a bad word.</p>
<p>Therefore, the algorithm tries to avoid generating most common English curse words by never placing the following letters next to each other: <strong>c, C, s, S, f, F, h, H, u, U, i, I, t, T</strong>.</p>
<h2><a id="user-content-int--int64--int128--bigint" class="anchor" aria-hidden="true" href="#int--int64--int128--bigint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Int / Int64 / Int128 / BigInt</h2>
<p>Julia supports several bitrange Integers (<code>Int8</code> / <code>UInt8</code> / <code>Int16</code> / <code>UInt16</code> / <code>Int32</code> / <code>UInt32</code> / <code>Int64</code> / <code>UInt64</code> / <code>Int128</code> / <code>UInt128</code>) and <code>BigInt</code>. You can use the standard API to encode all of them the same way.</p>
<p>When decoding a hashid, the algorithm tries to decode it to the system <code>Int</code> type (<code>Int64</code> if x64 architecture). In case of overflow, bitrange is automatically expanded (<code>Int64</code> â†’ <code>Int128</code> â†’ <code>BigInt</code>). It does not throw an error.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p>MIT license, see the <a href="LICENSE">LICENSE</a> file. You can use hashids in open source projects and commercial products.</p>
</article></div>