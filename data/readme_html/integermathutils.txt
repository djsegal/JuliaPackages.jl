<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-integermathutilsjl" class="anchor" aria-hidden="true" href="#integermathutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IntegerMathUtils.jl</h1>
<p dir="auto">This library adds several functions useful for doing math on integers. Most of these are GMP wrappers that may have faster implimentations for smaller integer types.</p>
<p dir="auto"><strong>Functions</strong></p>
<ul dir="auto">
<li><code>iroot(x::Integer, n::integer)</code> the integer nth root of <code>x</code>. Specifically, this is the largest integer <code>a</code> such that <code>a^n &lt;= x</code>. Note that <code>n</code> must fit into an <code>Int64</code> (for GMP compatability).</li>
<li><code>ispower(x::Integer)</code> return if there are integer <code>base</code> and <code>exponent&gt;1</code> values such that <code>base^exponent = x</code>.</li>
<li><code>find_exponent(x::Integer)</code> returns the largest possible integer <code>exponent</code> such that <code>base^exponent = x</code> for some <code>base</code>. Returns <code>1</code> for <code>x âˆˆ [0,1]</code>.</li>
<li><code>is_probably_prime(x::Integer; reps=25)</code> returns if <code>x</code> is prime. Will be incorrect less than <code>4^-reps</code> of the time.</li>
</ul>
</article></div>