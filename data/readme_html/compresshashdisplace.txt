<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-compresshashdisplace" class="anchor" aria-hidden="true" href="#compresshashdisplace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CompressHashDisplace</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://Arkoniak.github.io/CompressHashDisplace.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a><a href="https://Arkoniak.github.io/CompressHashDisplace.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/Arkoniak/CompressHashDisplace.jl/actions"><img src="https://github.com/Arkoniak/CompressHashDisplace.jl/workflows/CI/badge.svg" alt="Build" style="max-width:100%;"></a><a href="https://codecov.io/gh/Arkoniak/CompressHashDisplace.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af74a7c8db8c07f6ad6fe87d6e8824c8470a66cadfebbd8eda30ebb4f6da386e/68747470733a2f2f636f6465636f762e696f2f67682f41726b6f6e69616b2f436f6d707265737348617368446973706c6163652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Arkoniak/CompressHashDisplace.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package creates read-only dictionaries with fast access speed.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add CompressHashDisplace
"><pre>julia<span class="pl-k">&gt;</span> ] add CompressHashDisplace</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BenchmarkTools
using CompressHashDisplace

DICTIONARY = &quot;/usr/share/dict/words&quot;
dict = Dict{String, Int}()

for (line, word) in enumerate(readlines(DICTIONARY))
    dict[word] = line
end

frozen_dict = FrozenDict(dict)
frozen_dict[&quot;hello&quot;] # 50196

frozen_unsafe_dict = FrozenUnsafeDict(dict)
frozen_unsafe_dict[&quot;hello&quot;] # 50196

word = &quot;hello&quot;
@btime $dict[$word]               # 76.615 ns (0 allocations: 0 bytes)
@btime $frozen_dict[$word]        # 60.028 ns (0 allocations: 0 bytes)
@btime $frozen_unsafe_dict[$word] # 22.124 ns (0 allocations: 0 bytes)
"><pre><span class="pl-k">using</span> BenchmarkTools
<span class="pl-k">using</span> CompressHashDisplace

DICTIONARY <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/usr/share/dict/words<span class="pl-pds">"</span></span>
dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Int}</span>()

<span class="pl-k">for</span> (line, word) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">readlines</span>(DICTIONARY))
    dict[word] <span class="pl-k">=</span> line
<span class="pl-k">end</span>

frozen_dict <span class="pl-k">=</span> <span class="pl-c1">FrozenDict</span>(dict)
frozen_dict[<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> 50196</span>

frozen_unsafe_dict <span class="pl-k">=</span> <span class="pl-c1">FrozenUnsafeDict</span>(dict)
frozen_unsafe_dict[<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> 50196</span>

word <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>dict[<span class="pl-k">$</span>word]               <span class="pl-c"><span class="pl-c">#</span> 76.615 ns (0 allocations: 0 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>frozen_dict[<span class="pl-k">$</span>word]        <span class="pl-c"><span class="pl-c">#</span> 60.028 ns (0 allocations: 0 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span>frozen_unsafe_dict[<span class="pl-k">$</span>word] <span class="pl-c"><span class="pl-c">#</span> 22.124 ns (0 allocations: 0 bytes)</span></pre></div>
<p>Main difference between <code>FrozenDict</code> and <code>FrozenUnsafeDict</code> is that <code>FrozenUnsafeDict</code>
do not validate input key</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="frozen_dict[&quot;foo&quot;]         # KeyError: key &quot;foo&quot; not found
frozen_unsafe_dice[&quot;foo&quot;]  # 59716, i.e. some random value
"><pre>frozen_dict[<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>]         <span class="pl-c"><span class="pl-c">#</span> KeyError: key "foo" not found</span>
frozen_unsafe_dice[<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>]  <span class="pl-c"><span class="pl-c">#</span> 59716, i.e. some random value</span></pre></div>
</article></div>