<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-meddle" class="anchor" aria-hidden="true" href="#meddle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Meddle</h1>
<hr>
<blockquote>
<p dir="auto"><strong>2015-09-03</strong>:
This package is deprecated, and does not have an active maintainer.
It is not recommended for use in new projects.
Commit access may be given to anyone interested in taking on reviving,
maintaining, or furthering development.
If you are interested, please submit a PR that updates the package.
An alternative package is <a href="https://github.com/JuliaWeb/Mux.jl">Mux.jl</a>.</p>
</blockquote>
<hr>
<p dir="auto"><a href="http://pkg.julialang.org/?pkg=Meddle&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/2af671df3ab52976af98d3cab1f982e122a648e6c8e492d4f9a8667031cdcd0b/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d6564646c655f302e332e737667" alt="Meddle" data-canonical-src="http://pkg.julialang.org/badges/Meddle_0.3.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Meddle&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/e47c5058cde663878a688e32461458014a39c4073cd5beffe3ade4f0d64c3737/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d6564646c655f302e342e737667" alt="Meddle" data-canonical-src="http://pkg.julialang.org/badges/Meddle_0.4.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Meddle is a middleware stack for use with <a href="https://github.com/JuliaWeb/HttpServer.jl">HttpServer.jl</a>.</p>
<p dir="auto"><strong>Installation</strong>: <code>Pkg.add("Meddle")</code></p>
<p dir="auto">##Example:</p>
<p dir="auto">Define a 'stack' of middleware through which incoming <code>Requests</code> are processed:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HttpServer
using Meddle

stack = middleware(DefaultHeaders, URLDecoder, CookieDecoder, FileServer(pwd()), NotFound)
http = HttpHandler((req, res)-&gt;Meddle.handle(stack, MeddleRequest(req, Dict{Symbol,Any}()), res))

for event in split(&quot;connect read write close error&quot;)
    http.events[event] = (event-&gt;(client, args...)-&gt;println(client.id,&quot;: $event&quot;))(event)
end
http.events[&quot;error&quot;] = (client, err)-&gt;println(err)
http.events[&quot;listen&quot;] = (port)-&gt;println(&quot;Listening on $port...&quot;)

server = Server(http)
run(server, 8000)"><pre><span class="pl-k">using</span> HttpServer
<span class="pl-k">using</span> Meddle

stack <span class="pl-k">=</span> <span class="pl-c1">middleware</span>(DefaultHeaders, URLDecoder, CookieDecoder, <span class="pl-c1">FileServer</span>(<span class="pl-c1">pwd</span>()), NotFound)
http <span class="pl-k">=</span> <span class="pl-c1">HttpHandler</span>((req, res)<span class="pl-k">-&gt;</span>Meddle<span class="pl-k">.</span><span class="pl-c1">handle</span>(stack, <span class="pl-c1">MeddleRequest</span>(req, <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>()), res))

<span class="pl-k">for</span> event <span class="pl-k">in</span> <span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">"</span>connect read write close error<span class="pl-pds">"</span></span>)
    http<span class="pl-k">.</span>events[event] <span class="pl-k">=</span> (event<span class="pl-k">-&gt;</span>(client, args<span class="pl-k">...</span>)<span class="pl-k">-&gt;</span><span class="pl-c1">println</span>(client<span class="pl-k">.</span>id,<span class="pl-s"><span class="pl-pds">"</span>: <span class="pl-v">$event</span><span class="pl-pds">"</span></span>))(event)
<span class="pl-k">end</span>
http<span class="pl-k">.</span>events[<span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> (client, err)<span class="pl-k">-&gt;</span><span class="pl-c1">println</span>(err)
http<span class="pl-k">.</span>events[<span class="pl-s"><span class="pl-pds">"</span>listen<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> (port)<span class="pl-k">-&gt;</span><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Listening on <span class="pl-v">$port</span>...<span class="pl-pds">"</span></span>)

server <span class="pl-k">=</span> <span class="pl-c1">Server</span>(http)
<span class="pl-c1">run</span>(server, <span class="pl-c1">8000</span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=":::::::::::::
::         ::
:: Made at ::
::         ::
:::::::::::::
     ::
Hacker School
:::::::::::::"><pre class="notranslate"><code>:::::::::::::
::         ::
:: Made at ::
::         ::
:::::::::::::
     ::
Hacker School
:::::::::::::
</code></pre></div>
</article></div>