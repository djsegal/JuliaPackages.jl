<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastnoise2jl" class="anchor" aria-hidden="true" href="#fastnoise2jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastNoise2.jl</h1>
<p dir="auto">A Julia wrapper for <a href="https://github.com/Auburn/FastNoise2">Auburn/FastNoise2</a> through the C API.</p>
<h2 dir="auto"><a id="user-content-interactive-example" class="anchor" aria-hidden="true" href="#interactive-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interactive Example</h2>
<p dir="auto"><a href="./notebooks/notebook.jl"><img src="https://user-images.githubusercontent.com/5612003/183391912-64017721-227b-4448-948d-0022ec2e76d9.gif" alt="demo.gif" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FastNoise2

julia&gt; n = Node(&quot;OpenSimplex2&quot;)  # Create a node. List all the supported names with `keys(FastNoise2.NODE_NAMES_TO_ID)`
Node(Ptr{Nothing} @0x0000000002fa72b0, 1946463812)

julia&gt; n(4, 3)  # Generate one single noise value at specific 2D position
-0.4346525f0

julia&gt; n(0.4,0.3,0.2)  # 3D
0.5271185f0

julia&gt; n(0.4,0.3,0.2,0.1)  # 4D
0.5271185f0

julia&gt; n((4,4), 4, 3) # Generate a 2D Matrix
4×4 Matrix{Float32}:
 -0.434653  0.34371   -0.616628   -0.600485
 -0.251613  0.84233    0.700396   -0.0943251
 -0.604788  0.202821   0.0345254   0.968949
 -0.554117  0.12885    0.70932     0.848869

julia&gt; n((2,3,4), 4, 3, 2; frequency=0.1)  # Generate a 3D Array. 4D is also similar. Note the frequency parameter
2×3×4 Array{Float32, 3}:
[:, :, 1] =
 0.527119  0.488778  0.278744
 0.569762  0.488646  0.235996

[:, :, 2] =
 0.796065  0.644488  0.299173
 0.791319  0.598346  0.215275

[:, :, 3] =
 0.926368  0.690241  0.246656
 0.894577  0.616639  0.132056

[:, :, 4] =
 0.894904  0.616644  0.132056
 0.846379  0.528225  0.0

ulia&gt; x = zeros(Float32, 4, 4)
4×4 Matrix{Float32}:
 0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0

julia&gt; n(x, 4,3)  # the in-place version

julia&gt; x
4×4 Matrix{Float32}:
 -0.434653  0.34371   -0.616628   -0.600485
 -0.251613  0.84233    0.700396   -0.0943251
 -0.604788  0.202821   0.0345254   0.968949
 -0.554117  0.12885    0.70932     0.848869"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastNoise2

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenSimplex2<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> Create a node. List all the supported names with `keys(FastNoise2.NODE_NAMES_TO_ID)`</span>
<span class="pl-c1">Node</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002fa72b0</span>, <span class="pl-c1">1946463812</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> Generate one single noise value at specific 2D position</span>
<span class="pl-k">-</span><span class="pl-c1">0.4346525f0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n</span>(<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.2</span>)  <span class="pl-c"><span class="pl-c">#</span> 3D</span>
<span class="pl-c1">0.5271185f0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n</span>(<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.1</span>)  <span class="pl-c"><span class="pl-c">#</span> 4D</span>
<span class="pl-c1">0.5271185f0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n</span>((<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">4</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> Generate a 2D Matrix</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float32}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.434653</span>  <span class="pl-c1">0.34371</span>   <span class="pl-k">-</span><span class="pl-c1">0.616628</span>   <span class="pl-k">-</span><span class="pl-c1">0.600485</span>
 <span class="pl-k">-</span><span class="pl-c1">0.251613</span>  <span class="pl-c1">0.84233</span>    <span class="pl-c1">0.700396</span>   <span class="pl-k">-</span><span class="pl-c1">0.0943251</span>
 <span class="pl-k">-</span><span class="pl-c1">0.604788</span>  <span class="pl-c1">0.202821</span>   <span class="pl-c1">0.0345254</span>   <span class="pl-c1">0.968949</span>
 <span class="pl-k">-</span><span class="pl-c1">0.554117</span>  <span class="pl-c1">0.12885</span>    <span class="pl-c1">0.70932</span>     <span class="pl-c1">0.848869</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n</span>((<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>), <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>; frequency<span class="pl-k">=</span><span class="pl-c1">0.1</span>)  <span class="pl-c"><span class="pl-c">#</span> Generate a 3D Array. 4D is also similar. Note the frequency parameter</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float32, <span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.527119</span>  <span class="pl-c1">0.488778</span>  <span class="pl-c1">0.278744</span>
 <span class="pl-c1">0.569762</span>  <span class="pl-c1">0.488646</span>  <span class="pl-c1">0.235996</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.796065</span>  <span class="pl-c1">0.644488</span>  <span class="pl-c1">0.299173</span>
 <span class="pl-c1">0.791319</span>  <span class="pl-c1">0.598346</span>  <span class="pl-c1">0.215275</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.926368</span>  <span class="pl-c1">0.690241</span>  <span class="pl-c1">0.246656</span>
 <span class="pl-c1">0.894577</span>  <span class="pl-c1">0.616639</span>  <span class="pl-c1">0.132056</span>

[:, :, <span class="pl-c1">4</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.894904</span>  <span class="pl-c1">0.616644</span>  <span class="pl-c1">0.132056</span>
 <span class="pl-c1">0.846379</span>  <span class="pl-c1">0.528225</span>  <span class="pl-c1">0.0</span>

ulia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float32, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float32}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n</span>(x, <span class="pl-c1">4</span>,<span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> the in-place version</span>

julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float32}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.434653</span>  <span class="pl-c1">0.34371</span>   <span class="pl-k">-</span><span class="pl-c1">0.616628</span>   <span class="pl-k">-</span><span class="pl-c1">0.600485</span>
 <span class="pl-k">-</span><span class="pl-c1">0.251613</span>  <span class="pl-c1">0.84233</span>    <span class="pl-c1">0.700396</span>   <span class="pl-k">-</span><span class="pl-c1">0.0943251</span>
 <span class="pl-k">-</span><span class="pl-c1">0.604788</span>  <span class="pl-c1">0.202821</span>   <span class="pl-c1">0.0345254</span>   <span class="pl-c1">0.968949</span>
 <span class="pl-k">-</span><span class="pl-c1">0.554117</span>  <span class="pl-c1">0.12885</span>    <span class="pl-c1">0.70932</span>     <span class="pl-c1">0.848869</span></pre></div>
</article></div>