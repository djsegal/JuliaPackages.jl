<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-collide" class="anchor" aria-hidden="true" href="#collide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Collide</h1>
<p dir="auto">A simple, performant and accurate physics engine implemented in pure Julia using ModelingToolkit.jl and DifferentialEquations.jl. Depends on <a href="https://github.com/AayushSabharwal/PrimitiveCollisions.jl">PrimitiveCollisions.jl</a> for collisions. To use:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add Collide"><pre class="notranslate"><code>] add Collide
</code></pre></div>
<p dir="auto">A simple world with 2 rectangular entities, and no gravity:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Collide, PrimitiveCollisions, StaticArrays

# Create two entities
e = Collide.Entity(
    name = :a,
    shape = PrimitiveCollisions.Rect(1.0, 1.0),
    linear_drag = 0.5
)
e2 = Collide.Entity(
    name = :b,
    shape = PrimitiveCollisions.Rect(1.0, 1.0),
    position = SVector{2}(2.1, -1.2),
    velocity = SVector{2}(-1.0, 0.0),
)

# Add them to the world
world = Collide.World(:w)
push!(world, e)
push!(world, e2)

sim = Collide.Simulation(w, [0., 0.]); # Add this semicolon or face pages of printed content

# Step 10.0 seconds, stopping after exactly 10.0s
Collide.step!(sim, 10.0, true)"><pre><span class="pl-k">using</span> Collide, PrimitiveCollisions, StaticArrays

<span class="pl-c"><span class="pl-c">#</span> Create two entities</span>
e <span class="pl-k">=</span> Collide<span class="pl-k">.</span><span class="pl-c1">Entity</span>(
    name <span class="pl-k">=</span> <span class="pl-c1">:a</span>,
    shape <span class="pl-k">=</span> PrimitiveCollisions<span class="pl-k">.</span><span class="pl-c1">Rect</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>),
    linear_drag <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
)
e2 <span class="pl-k">=</span> Collide<span class="pl-k">.</span><span class="pl-c1">Entity</span>(
    name <span class="pl-k">=</span> <span class="pl-c1">:b</span>,
    shape <span class="pl-k">=</span> PrimitiveCollisions<span class="pl-k">.</span><span class="pl-c1">Rect</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>),
    position <span class="pl-k">=</span> <span class="pl-c1">SVector</span><span class="pl-c1">{2}</span>(<span class="pl-c1">2.1</span>, <span class="pl-k">-</span><span class="pl-c1">1.2</span>),
    velocity <span class="pl-k">=</span> <span class="pl-c1">SVector</span><span class="pl-c1">{2}</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>),
)

<span class="pl-c"><span class="pl-c">#</span> Add them to the world</span>
world <span class="pl-k">=</span> Collide<span class="pl-k">.</span><span class="pl-c1">World</span>(<span class="pl-c1">:w</span>)
<span class="pl-c1">push!</span>(world, e)
<span class="pl-c1">push!</span>(world, e2)

sim <span class="pl-k">=</span> Collide<span class="pl-k">.</span><span class="pl-c1">Simulation</span>(w, [<span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>]); <span class="pl-c"><span class="pl-c">#</span> Add this semicolon or face pages of printed content</span>

<span class="pl-c"><span class="pl-c">#</span> Step 10.0 seconds, stopping after exactly 10.0s</span>
Collide<span class="pl-k">.</span><span class="pl-c1">step!</span>(sim, <span class="pl-c1">10.0</span>, <span class="pl-c1">true</span>)</pre></div>
<h1 dir="auto"><a id="user-content-gotchas" class="anchor" aria-hidden="true" href="#gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gotchas</h1>
<ul dir="auto">
<li>Entities that are intersecting when the collision starts will be stuck inside each other (they "collide from the inside").</li>
<li>Entities that touch exactly (two circles at a distance equal to the sum of their radii) are also considered to intersect. To simulate things like Newton's cradle, separate the circles by a tiny distance (<code>eps()</code>).</li>
<li>The internals are not yet documented, but not too complicated either.</li>
</ul>
<h1 dir="auto"><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h1>
<p dir="auto">A simple plotting function, and one to generate a bunch of random bodies inside a box, are available in <a href="https://gist.github.com/AayushSabharwal/9c76640b960c6726072d42f7ea577e08">this gist</a>. Try the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sim, w = manybody(10, 10)
animate(sim, w; tstep = 0.01, frames = 3000)"><pre>sim, w <span class="pl-k">=</span> <span class="pl-c1">manybody</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">animate</span>(sim, w; tstep <span class="pl-k">=</span> <span class="pl-c1">0.01</span>, frames <span class="pl-k">=</span> <span class="pl-c1">3000</span>)</pre></div>
</article></div>