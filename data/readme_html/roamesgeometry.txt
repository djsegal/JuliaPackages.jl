<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-roamesgeometry" class="anchor" aria-hidden="true" href="#roamesgeometry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RoamesGeometry</h1>
<p><em>Primitive geometric objects for Roames modelling.</em></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>This package provides a set of geometric primitives and containers for modelling objects
in the physical world.</p>
<h3><a id="user-content-points" class="anchor" aria-hidden="true" href="#points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Points</h3>
<p>The basic geometric point is 2D and 3D real, static vectors, like <code>SVector{2, Float64}</code>
or <code>SVector{3, Float32}</code>. The <code>convert2d</code> and <code>convert3d</code> functions can be used to
"upgrade" or "downgrade" dimensionality of points and other geometries.</p>
<p>There is functionality for loading and saving of pointclouds in either LAS or "Roames"
HDF5 formats via <code>load_pointcloud(filename)</code> and <code>save_pointcloud(filename, pointcloud)</code>.</p>
<p>Generally, in Julia v1.0 onwards a point cloud is represented as a <code>Table</code> from
<a href="https://github.com/FugroRoames/TypedTables.jl"><em>TypedTables.jl</em></a> where the <code>position</code>
column contains 3D points. For an introduction to using <em>TypedTables</em> see the
<a href="https://fugroroames.github.io/TypedTables.jl/latest/" rel="nofollow">user guide</a>. Common manipulations on point
clouds are shown below.</p>
<h3><a id="user-content-geometries" class="anchor" aria-hidden="true" href="#geometries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Geometries</h3>
<p><em>RoamesGeometry</em> supports a collection of 2D and 3D geometry types, common to many
geospatial formats including ShapeFiles and Well-Known Text. Currently, we support:</p>
<ul>
<li><code>BoundingBox</code> - a 3D region of space; an axis-aligned bounding box</li>
<li><code>Line</code> - a segment connecting two points</li>
<li><code>LineString</code> - a contiguous set of touching lines</li>
<li><code>Quadratic</code> - a quadratic function that supports "wind blown" wires</li>
<li><code>Catenary</code> - a vertically hanging catenary</li>
<li><code>Polygon</code> - a closed polygon (in the 2D sense), possibly with interior holes</li>
<li><code>Sphere</code> - a uniform sphere centered at a point with given radius</li>
<li><code>Circle</code> - a 2D circle</li>
<li><code>Cylinder</code> - A circle with min/max height</li>
<li><code>Triangle</code> - a three-sided polygon</li>
<li><code>TriangularPrism</code> - A triangle with min/max height</li>
</ul>
<p>Generally, they can be transformed by a <code>Transformation</code> and can be plotted in Displaz
via the <code>plot3d</code> function.</p>
<h4><a id="user-content-abstractregion-and-finding-points" class="anchor" aria-hidden="true" href="#abstractregion-and-finding-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>AbstractRegion</code> and finding points</h4>
<p>Some of these encompass 2D or 3D <a href="https://en.wikipedia.org/wiki/Region_(mathematics)" rel="nofollow">regions</a>,
and are subtypes of <code>AbstractRegion</code>. Regions are defined mathematically as open, connected
and non-empty sets (or the closure thereof) and can support the <code>in</code> function (alternatitvely
written <code>in(point, region)</code>, <code>point in region</code> or <code>point âˆˆ region</code>).</p>
<p>For example, to ask the question if a point is inside a <code>Sphere</code>, one could write
<code>in(point, Sphere(centre, radius))</code>. The <code>in</code> function supports "currying", so that
<code>f = in(Sphere(centre, radius))</code> is a function where <code>f(point)</code> returns <code>true</code> or
<code>false</code> depending on whether <code>point</code> is in the <code>Sphere</code> or not. The predicate function
<code>f</code> can then be used in higher order functions like <code>map</code>, <code>filter</code> and <code>findall</code> for
filtering to just the points inside the <code>Sphere</code>.</p>
<p>To see this in action, given a <code>pointcloud</code> with a <code>position</code> column, we can construct
a new pointcloud containing just the points inside a <code>Sphere</code>.</p>
<div class="highlight highlight-source-julia"><pre>indices <span class="pl-k">=</span> <span class="pl-c1">findall</span>(<span class="pl-c1">in</span>(<span class="pl-c1">Sphere</span>(centre, radius)), pointcloud<span class="pl-k">.</span>position)
pointcloud2 <span class="pl-k">=</span> pc[indices]</pre></div>
<p>The <code>findall</code> function returns the indices of the elements matching a given predicate.</p>
<h4><a id="user-content-lines-and-one-dimensional-containers" class="anchor" aria-hidden="true" href="#lines-and-one-dimensional-containers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lines and one-dimensional containers</h4>
<p>Generally, points along one-dimensional primitives can be extracted via <code>getindex</code>, such as:</p>
<div class="highlight highlight-source-julia"><pre>l <span class="pl-k">=</span> <span class="pl-c1">Line</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>))
l[<span class="pl-c1">0.5</span>] <span class="pl-k">==</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)</pre></div>
<p>Note: geometries like <code>Line</code> can naturally be thought of as a collection of points, but
they are not a region in the mathematic sense and calculation of <code>point in line</code> is not
stable to e.g. floating-point rounding errors.</p>
<h4><a id="user-content-boundingbox" class="anchor" aria-hidden="true" href="#boundingbox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BoundingBox</code></h4>
<p>Bounding box represents an axis-aligned rectangular prism and is an <code>AbstractRegion</code>.
Its primary use is as a spatial acceleration structure, to check whether two objects
lie within the same bounding box as an efficient pre-filtering step.</p>
<p>It supports the following interface:</p>
<ul>
<li>The <code>boundingbox</code> function is the primary constructor. You can call
<code>boundingbox</code> with an arbitrary collection of geometries and a bounding box
guaranteed to hold all the geometry is returned. Typically, it will be the
smallest such bounding box. E.g. <code>boundingbox(catenary, quadratic, line, point)</code>
or <code>boundingbox(points::Vector{SVector{3,Float64}})</code>.</li>
<li>The <code>in</code> (or <code>âˆˆ</code>) function/operator can indicate whether a point is within
the bounding box, e.g. <code>point âˆˆ box</code>.</li>
<li>The <code>pad</code> function extends the bounding box by a given amount, e.g. <code>pad(bb, 1.0)</code>.</li>
<li>The <code>intersects</code> function returns <code>true</code> if two bounding boxes interect, and
<code>false</code> otherwise.</li>
<li>The <code>wireframe</code> function returns the 12 lines outlining the box, as a
<code>Vector{Line{T}}</code>.</li>
<li><code>Displaz.plot3d</code> can plot the wireframe of a bounding box directly.</li>
</ul>
<h3><a id="user-content-spatial-acceleration-using-gridindex" class="anchor" aria-hidden="true" href="#spatial-acceleration-using-gridindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spatial acceleration using <code>GridIndex</code></h3>
<p>Spatial acceleration is used to speed up queries, like finding all the points within
an <code>AbstractRegion</code>. A <code>GridIndex</code> is used to perform spatial acceleration on
point cloud data of a "2.5 dimensional" nature - meaning points widely distributed
in <em>x</em> and <em>y</em>, with a relatively few points in a given vertical column, such as
those typical to aerial LiDAR.</p>
<p>A <code>GridIndex</code> tracks the points within each cell of an x-y grid of a given spacing,
and furthermore orders them by height within the grid cell. This "index" can be
used to make certain operations faster, for example to find all the points in
a given region. Roughly speaking, given an <code>AbstractRegion</code> called <code>region</code>,
spatial acceleration will</p>
<ul>
<li>Find <code>bb = boundingbox(region)</code>.</li>
<li>Use the grid to only search grid cells that intersect with <code>bb</code>.</li>
<li>For each point in these cells, check precisely whether they are inside <code>region</code>.</li>
</ul>
<p>That way, queries will skip the vast majority of points and the spatial index will make
a tremendous performance improvement, often changing algorithms like PCA from
<em>O(nÂ²)</em> to <em>O(n log n)</em> or similar.</p>
<p>Acceleration indices are managed through the
<a href="https://github.com/andyferris/AcceleratedArrays.jl"><em>AcceleratedArrays.jl</em></a> package.
This package provides basic acceleration indices (like <code>HashIndex</code> and <code>SortIndex</code>)
and is extended by <em>RoamesGeometry</em> to include <code>GridIndex</code>. An acceleration index
is added to an array like so:</p>
<div class="highlight highlight-source-julia"><pre>position <span class="pl-k">=</span> <span class="pl-c1">accelerate</span>(position, GridIndex; spacing <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)</pre></div>
<p>Note that this has <em>not</em> mutated the original <code>position</code> array - rather it has created a
new <code>AcceleratedArray</code> which wraps the old one. (Warning: mutating the positions will
corrupt the index, meaning the results from <code>findall</code> and so-on will be incorrect).</p>
<p>For performance critical applications, one can re-order the array to be more cache-friendly
and reduce lookups using the <code>accelerate!</code> function. If you do this to a point cloud,
note the order of the other columns will <em>not</em> be modified, so the indices will get out
of sync.</p>
<h3><a id="user-content-distances" class="anchor" aria-hidden="true" href="#distances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Distances</h3>
<p>The distance between various geometries can be found. The <code>distance</code> function
returns the (smallest) Euclidean distance between two geometric objects, and
is currently defined between points and catenaries only. The <code>closest_point</code>
and <code>closest_points</code> functions return the closest point(s) between geometries.</p>
<h4><a id="user-content-distance-to-catenaries" class="anchor" aria-hidden="true" href="#distance-to-catenaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Distance to catenaries</h4>
<p>The <code>powerline_distances(catenary, point)</code> function returns <code>(dist, r, z, d)</code>,
where:</p>
<ul>
<li><code>dist</code> is the Euclidean distance to the closest point on the catenary.</li>
<li><code>r</code> is the horizontal distance perpendicular to the catenary.</li>
<li><code>z</code> is the height difference between the point and the catenary.</li>
<li><code>d</code> is the distance along the catenary, the end points being at
<code>catenary.lmin</code> and <code>catenary.lmax</code>.</li>
</ul>
<h3><a id="user-content-input-and-output" class="anchor" aria-hidden="true" href="#input-and-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Input and Output</h3>
<h4><a id="user-content-well-known-text" class="anchor" aria-hidden="true" href="#well-known-text"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Well-known text</h4>
<p>Input and output operations for well-known text is provided via the following functions:</p>
<ul>
<li><code>wkt(geometry)</code> returns a <code>String</code> containing a well-known text representation of <code>geometry</code>.</li>
<li><code>read_wkt(string)</code> parses a WKT string and returns a geometry.</li>
<li><code>load_wkt(filename)</code> opens a well-known text file and reads a geometry.</li>
<li><code>save_wkt(filename, geometry)</code> saves <code>geometry</code> into a well-known text file.</li>
<li>The lower-level operations <code>read_wkt(io)</code> and <code>write_wkt(io, geometry)</code> act on <code>IO</code> streams.</li>
</ul>
<h4><a id="user-content-point-clouds" class="anchor" aria-hidden="true" href="#point-clouds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Point clouds</h4>
<p>The <code>load_pointcloud(filename)</code> function can open <code>.las</code> and <code>.h5</code> as a <code>Table</code>. To add
a spatial acceleration <code>GridIndex</code> to the pointcloud, you must specify a grid spacing
via <code>load_pointcloud(filename, spacing = 1.0)</code> (for a 1 metre grid). It is important to
add the spatial index whenever you plan to make spatial queries, for example neighborhood
search for noise filtering or PCA-based tasks.</p>
<p>The <code>save_pointcloud(filename, pointcloud)</code> function is able to save <code>.las</code> and <code>.h5</code>
files.</p>
<p>Both support GeoRepo2-style HDF5 files generated by <code>ExtractPoints</code> by specifying the
relevant <code>format</code> string, e.g. <code>load_pointcloud(filename, format = "XYZIrgb")</code>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>To get started, consider this example where we combine the features of this library
to classify points depending on whether they are inside a geometry or not, from files
on disk.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> RoamesGeometry

pc <span class="pl-k">=</span> <span class="pl-c1">load_pointcloud</span>(<span class="pl-s"><span class="pl-pds">"</span>pointcloud.h5<span class="pl-pds">"</span></span>; spacing <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)
geom <span class="pl-k">=</span> <span class="pl-c1">load_wkt</span>(<span class="pl-s"><span class="pl-pds">"</span>geometry.wkt<span class="pl-pds">"</span></span>)

pc<span class="pl-k">.</span>classification <span class="pl-k">.=</span> <span class="pl-c1">0</span>
pc<span class="pl-k">.</span>classification[<span class="pl-c1">findall</span>(<span class="pl-c1">in</span>(geom)), pc<span class="pl-k">.</span>position)] <span class="pl-k">.=</span> <span class="pl-c1">1</span>

<span class="pl-c1">save_pointcloud</span>(<span class="pl-s"><span class="pl-pds">"</span>pointcloud2.h5<span class="pl-pds">"</span></span>, pc)</pre></div>
</article></div>