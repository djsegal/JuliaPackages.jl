<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dynamicgridsinteract" class="anchor" aria-hidden="true" href="#dynamicgridsinteract"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DynamicGridsInteract</h1>
<p><a href="https://cesaraustralia.github.io/DynamicGridsInteract.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cesaraustralia.github.io/DynamicGridsInteract.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/cesaraustralia/DynamicGridsInteract.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eb9c7c370e90dd65e4af5611e9b1d5e053a8a3f4a246beeac6e3f7effd12c259/68747470733a2f2f7472617669732d63692e6f72672f63657361726175737472616c69612f44796e616d69634772696473496e7465726163742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cesaraustralia/DynamicGridsInteract.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cesaraustralia/DynamicGridsInteract.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7d1562a027bb88cc1fd5318b757b09d23d53258c0391cfedd2829a2cdcea97b3/68747470733a2f2f636f6465636f762e696f2f67682f63657361726175737472616c69612f44796e616d69634772696473496e7465726163742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/cesaraustralia/DynamicGridsInteract.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DynamicGridsInteract provides web interfaces for visualising and interacting
with simulations from
<a href="https://cesaraustralia.github.io/DynamicGrids.jl" rel="nofollow">DynamicGrids.jl</a>, and for
packages that build on it like <a href="https://cesaraustralia.github.io/Dispersal.jl" rel="nofollow">Dispersal.jl</a>.</p>
<p>The basic <code>InteractOutput</code> works in the atom plot pane and Jupyter notebooks,
and also serves as the core component of other outputs. A Mux.jl web server
<code>ServerOutput</code> and a Blink.jl electron app <code>ElectronOutput</code> are also
included.</p>
<p>This demo shows the <code>InteractOutput</code> running it the atom IDE:</p>
<p><a href="https://youtu.be/cXzYGHw_DaA" rel="nofollow"><img src="https://camo.githubusercontent.com/74ff37d7b8cee04a1cd204ffeceebe170b115bd1fea232577d5484935310fd45/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f63587a594748775f4461412f6d617872657364656661756c742e6a7067" alt="Demo" data-canonical-src="https://img.youtube.com/vi/cXzYGHw_DaA/maxresdefault.jpg" style="max-width:100%;"></a></p>
<p>To use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DynamicGrids, DynamicGridsInteract

output = InteractOutput(init; 
    ruleset=ruleset,
    tspan=1:100, 
    processor=ColorProcessor()
)
display(output)
"><pre><span class="pl-k">using</span> DynamicGrids, DynamicGridsInteract

output <span class="pl-k">=</span> <span class="pl-c1">InteractOutput</span>(init; 
    ruleset<span class="pl-k">=</span>ruleset,
    tspan<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, 
    processor<span class="pl-k">=</span><span class="pl-c1">ColorProcessor</span>()
)
<span class="pl-c1">display</span>(output)</pre></div>
<p>Where <code>init</code> is the initial array(s) for the simulation and ruleset is the
<code>Ruleset</code> to run in simulations.</p>
<p>To show the interface in the Atom plot pane, run <code>display(output)</code>.</p>
<h1><a id="user-content-interactive-parameters" class="anchor" aria-hidden="true" href="#interactive-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interactive parameters</h1>
<p>The interface provides control of the simulation using ModelParameters.jl and Interact.jl via InteractModels.jl.
It will automatically generate sliders for every <code>ModelParameters.Param</code> parameter in the <code>Ruleset</code>, given they
additionally have either a <code>range</code> (an <code>AbstractRange</code>) or <code>bounds</code> (a <code>Tuple</code>) field defined.</p>
<p>See the examples in the InteractModels.jl <a href="https://rafaqz.github.io/ModelParameters.jl/stable/interactmodels/" rel="nofollow">docs</a>.</p>
</article></div>