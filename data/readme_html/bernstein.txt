<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bernstein-polynomial-basis" class="anchor" aria-hidden="true" href="#bernstein-polynomial-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bernstein Polynomial Basis</h1>
<ul>
<li><a href="https://github.com/eschnett/Bernstein.jl">GitHub</a>: Source code repository</li>
<li><a href="https://github.com/eschnett/Bernstein.jl/actions"><img src="https://github.com/eschnett/Bernstein.jl/workflows/CI/badge.svg" alt="GitHub CI" style="max-width:100%;"></a></li>
</ul>
<p>The <a href="https://en.wikipedia.org/wiki/Bernstein_polynomial" rel="nofollow">Bernstein
polynomials</a> form
a basis for polynomials living on simplices. This package calculates
the Bernstein polynomials for simplices of arbitrary dimension.</p>
<p>This package also provides conversion functions between Cartesian and
<a href="https://en.wikipedia.org/wiki/Barycentric_coordinate_system" rel="nofollow">barycentric
coordinates</a>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-convert-between-cartesian-and-barycentric-coordinates" class="anchor" aria-hidden="true" href="#convert-between-cartesian-and-barycentric-coordinates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Convert between Cartesian and barycentric coordinates</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using StaticArrays

julia&gt; using Bernstein

julia&gt; # Define a triangle
       s = rand(SMatrix{3,2})
3×2 SArray{Tuple{3,2},Float64,2,6} with indices SOneTo(3)×SOneTo(2):
 0.814346  0.297149
 0.519781  0.620776
 0.345743  0.733385

julia&gt; # Choose a point
       p = rand(SVector{2})
2-element SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
 0.1483582649665245
 0.3923504628863179

julia&gt; # Convert to barycentric coordinates
       λ = cartesian2barycentric(s, p)
3-element SArray{Tuple{3},Float64,1,3} with indices SOneTo(3):
   3.523588891718682
 -10.621534570787583
   8.097945679068905

julia&gt; # Convert back
       q = barycentric2cartesian(s, λ)
2-element SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
 0.14835826496652604
 0.3923504628863199

julia&gt; p ≈ q
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Bernstein

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Define a triangle</span>
       s <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SMatrix{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>})
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> SArray{Tuple{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>},Float64,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.814346</span>  <span class="pl-c1">0.297149</span>
 <span class="pl-c1">0.519781</span>  <span class="pl-c1">0.620776</span>
 <span class="pl-c1">0.345743</span>  <span class="pl-c1">0.733385</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Choose a point</span>
       p <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SVector{<span class="pl-c1">2</span>})
<span class="pl-c1">2</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.1483582649665245</span>
 <span class="pl-c1">0.3923504628863179</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Convert to barycentric coordinates</span>
       λ <span class="pl-k">=</span> <span class="pl-c1">cartesian2barycentric</span>(s, p)
<span class="pl-c1">3</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
   <span class="pl-c1">3.523588891718682</span>
 <span class="pl-k">-</span><span class="pl-c1">10.621534570787583</span>
   <span class="pl-c1">8.097945679068905</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Convert back</span>
       q <span class="pl-k">=</span> <span class="pl-c1">barycentric2cartesian</span>(s, λ)
<span class="pl-c1">2</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.14835826496652604</span>
 <span class="pl-c1">0.3923504628863199</span>

julia<span class="pl-k">&gt;</span> p <span class="pl-k">≈</span> q
<span class="pl-c1">true</span></pre></div>
<p>You can also pass the simplex vertices as a vector of vectors
<code>SVector{N, SVector{D, T}}</code> instead of a matrix.</p>
<p>If you convert many Cartesian to barycentric coordinates, then part of
the transformation can be pre-calculated to increase efficiency. Call
<code>cartesian2barycentric_setup</code> for this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using StaticArrays

julia&gt; using Bernstein

julia&gt; # Define a triangle
       s = rand(SMatrix{3,2})
3×2 SArray{Tuple{3,2},Float64,2,6} with indices SOneTo(3)×SOneTo(2):
 0.814346  0.297149
 0.519781  0.620776
 0.345743  0.733385

julia&gt; # Choose a point
       p = rand(SVector{2})
2-element SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
 0.1483582649665245
 0.3923504628863179

julia&gt; # Pre-calculate part of the transformation
       setup = cartesian2barycentric_setup(s);

julia&gt; # Convert to barycentric coordinates
       λ = cartesian2barycentric(setup, p)
3-element SArray{Tuple{3},Float64,1,3} with indices SOneTo(3):
   3.523588891718682
 -10.621534570787583
   8.097945679068905
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Bernstein

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Define a triangle</span>
       s <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SMatrix{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>})
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> SArray{Tuple{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>},Float64,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.814346</span>  <span class="pl-c1">0.297149</span>
 <span class="pl-c1">0.519781</span>  <span class="pl-c1">0.620776</span>
 <span class="pl-c1">0.345743</span>  <span class="pl-c1">0.733385</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Choose a point</span>
       p <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SVector{<span class="pl-c1">2</span>})
<span class="pl-c1">2</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.1483582649665245</span>
 <span class="pl-c1">0.3923504628863179</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Pre-calculate part of the transformation</span>
       setup <span class="pl-k">=</span> <span class="pl-c1">cartesian2barycentric_setup</span>(s);

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Convert to barycentric coordinates</span>
       λ <span class="pl-k">=</span> <span class="pl-c1">cartesian2barycentric</span>(setup, p)
<span class="pl-c1">3</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
   <span class="pl-c1">3.523588891718682</span>
 <span class="pl-k">-</span><span class="pl-c1">10.621534570787583</span>
   <span class="pl-c1">8.097945679068905</span></pre></div>
<h3><a id="user-content-evaluate-bernstein-polynomials" class="anchor" aria-hidden="true" href="#evaluate-bernstein-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluate Bernstein polynomials</h3>
<p>You can evaluate Bernstein polynomials from barycentric coordinates or
from Cartesian coordinates:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using StaticArrays

julia&gt; using Bernstein

julia&gt; # Define a triangle
       s = rand(SMatrix{3,2})
3×2 SArray{Tuple{3,2},Float64,2,6} with indices SOneTo(3)×SOneTo(2):
 0.814346  0.297149
 0.519781  0.620776
 0.345743  0.733385

julia&gt; # Choose a point
       p = rand(SVector{2})
2-element SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
 0.1483582649665245
 0.3923504628863179

julia&gt; # Convert to barycentric coordinates
       λ = cartesian2barycentric(s, p)
3-element SArray{Tuple{3},Float64,1,3} with indices SOneTo(3):
   3.523588891718682
 -10.621534570787583
   8.097945679068905

julia&gt; # Choose polynomial index and order
       # (The order is the sum of all coefficients)
       α = SVector(2,0,0);

julia&gt; bernstein(α, λ)
3.523588891718682

julia&gt; bernstein(s, α, p)
3.523588891718682

julia&gt; bernstein(setup, α, p)
3.523588891718682
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticArrays

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Bernstein

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Define a triangle</span>
       s <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SMatrix{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>})
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> SArray{Tuple{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>},Float64,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.814346</span>  <span class="pl-c1">0.297149</span>
 <span class="pl-c1">0.519781</span>  <span class="pl-c1">0.620776</span>
 <span class="pl-c1">0.345743</span>  <span class="pl-c1">0.733385</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Choose a point</span>
       p <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SVector{<span class="pl-c1">2</span>})
<span class="pl-c1">2</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.1483582649665245</span>
 <span class="pl-c1">0.3923504628863179</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Convert to barycentric coordinates</span>
       λ <span class="pl-k">=</span> <span class="pl-c1">cartesian2barycentric</span>(s, p)
<span class="pl-c1">3</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
   <span class="pl-c1">3.523588891718682</span>
 <span class="pl-k">-</span><span class="pl-c1">10.621534570787583</span>
   <span class="pl-c1">8.097945679068905</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Choose polynomial index and order</span>
       <span class="pl-c"><span class="pl-c">#</span> (The order is the sum of all coefficients)</span>
       α <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bernstein</span>(α, λ)
<span class="pl-c1">3.523588891718682</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bernstein</span>(s, α, p)
<span class="pl-c1">3.523588891718682</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bernstein</span>(setup, α, p)
<span class="pl-c1">3.523588891718682</span></pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li>
<p>Douglas N. Arnold, Richard S. Falk, Ragnar Winther, "Geometric
decompositions and local bases for spaces of finite element
differential forms", 10.1016/j.cma.2008.12.017, <a href="https://arxiv.org/abs/0806.1255" rel="nofollow">arXiv:0806.1255
[math.NA]</a>.</p>
</li>
<li>
<p>Tom Lyche, Karl Scherer, "On the p-norm condition number of the
multivariate triangular Bernstein basis", <a href="https://doi.org/10.1016/S0377-0427(00)00383-6" rel="nofollow">DOI:
10.1016/S0377-0427(00)00383-6</a>.</p>
</li>
</ul>
</article></div>