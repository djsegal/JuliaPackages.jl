<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazymodules" class="anchor" aria-hidden="true" href="#lazymodules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyModules</h1>
<blockquote>
<p dir="auto">No, no, not now</p>
</blockquote>
<p dir="auto">This package provides package developers an alternative option to delay package loading until used.
If some dependency is not used, then users don't need to pay for its latency.</p>
<p dir="auto">This package is not panacea, it only works for a very limited set of use cases. This package is only
for (maybe experienced) package authors. End-users is not recommended to use this package directly.</p>
<p dir="auto">Be careful about the world age issue!</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">The eager mode is checked by setting environment variable <code>LazyModules_lazyload</code> as <code>"false"</code>.
All the functionalities will still be the same except that lazy mode delays a significant portion
of packages loading to their first usage -- if ever get called.</p>
<table>
<thead>
<tr>
<th>Package</th>
<th>latency (eager)</th>
<th>latency (lazy)</th>
<th>Julia</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/JuliaIO/ImageIO.jl">ImageIO.jl</a> v0.6.3</td>
<td>1.049s</td>
<td>0.115s</td>
<td>v1.7.2</td>
</tr>
</tbody>
</table>
<p dir="auto">The latency is measured by <code>@time using XXX</code> in a new Julia REPL after full precompilation.  Each
row is measured on the same machine.</p>
<h2 dir="auto"><a id="user-content-syntax" class="anchor" aria-hidden="true" href="#syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Syntax</h2>
<ul dir="auto">
<li><code>@lazy import Foo = "&lt;UUID&gt;"</code> <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">‚úÖ</g-emoji></li>
<li><code>@lazy import Foo as LazyFoo = "&lt;UUID&gt;"</code> <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">‚úÖ</g-emoji> (Julia 1.6+)</li>
<li><code>@lazy import Foo</code> <g-emoji class="g-emoji" alias="x" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png">‚ùå</g-emoji></li>
<li><code>@lazy using Foo</code> <g-emoji class="g-emoji" alias="x" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png">‚ùå</g-emoji></li>
</ul>
<h2 dir="auto"><a id="user-content-the-lazy-plots-story" class="anchor" aria-hidden="true" href="#the-lazy-plots-story"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The lazy Plots story</h2>
<p dir="auto">Assume that you've built a fantastic package <code>examples/MyPkg</code> with some built-in plot functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyPkg

export generate_data, draw_figure
import Plots

generate_data(n) = sin.(range(start=0, stop=5, length=n) .+ 0.1.*rand(n))
draw_figure(data) = plot(data, title=&quot;MyPkg Plot&quot;)

end"><pre><span class="pl-k">module</span> MyPkg

<span class="pl-k">export</span> generate_data, draw_figure
<span class="pl-k">import</span> Plots

<span class="pl-en">generate_data</span>(n) <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">range</span>(start<span class="pl-k">=</span><span class="pl-c1">0</span>, stop<span class="pl-k">=</span><span class="pl-c1">5</span>, length<span class="pl-k">=</span>n) <span class="pl-k">.+</span> <span class="pl-c1">0.1</span><span class="pl-k">.*</span><span class="pl-c1">rand</span>(n))
<span class="pl-en">draw_figure</span>(data) <span class="pl-k">=</span> <span class="pl-c1">plot</span>(data, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MyPkg Plot<span class="pl-pds">"</span></span>)

<span class="pl-k">end</span></pre></div>
<p dir="auto">Normally, you spend quite a long time on loading the package because <code>Plots</code> is heavy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(@v1.7) pkg&gt; activate examples/MyPkg
  Activating project at `~/Documents/Julia/LazyModules.jl/examples/MyPkg`

(MyPkg) pkg&gt; instantiate
Precompiling project...
  1 dependency successfully precompiled in 36 seconds (133 already precompiled)

julia&gt; @time using MyPkg # üí§
  2.857596 seconds (9.81 M allocations: 670.470 MiB, 8.53% gc time, 19.95% compilation time)

julia&gt; x = @time generate_data(100); # üöÄ
  0.000006 seconds (2 allocations: 1.750 KiB)

julia&gt; @time draw_figure(x) # üí§
1.608146 seconds (4.00 M allocations: 223.266 MiB, 2.83% gc time, 99.74% compilation time)"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">7</span>) pkg<span class="pl-k">&gt;</span> activate examples<span class="pl-k">/</span>MyPkg
  Activating project at <span class="pl-s"><span class="pl-pds">`</span>~/Documents/Julia/LazyModules.jl/examples/MyPkg<span class="pl-pds">`</span></span>

(MyPkg) pkg<span class="pl-k">&gt;</span> instantiate
Precompiling project<span class="pl-k">...</span>
  <span class="pl-c1">1</span> dependency successfully precompiled <span class="pl-k">in</span> <span class="pl-c1">36</span> seconds (<span class="pl-c1">133</span> already precompiled)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-k">using</span> MyPkg <span class="pl-c"><span class="pl-c">#</span> üí§</span>
  <span class="pl-c1">2.857596</span> seconds (<span class="pl-c1">9.81</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">670.470</span> MiB, <span class="pl-c1">8.53</span><span class="pl-k">%</span> gc time, <span class="pl-c1">19.95</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">@time</span> <span class="pl-c1">generate_data</span>(<span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> üöÄ</span>
  <span class="pl-c1">0.000006</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.750</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">draw_figure</span>(x) <span class="pl-c"><span class="pl-c">#</span> üí§</span>
<span class="pl-c1">1.608146</span> seconds (<span class="pl-c1">4.00</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">223.266</span> MiB, <span class="pl-c1">2.83</span><span class="pl-k">%</span> gc time, <span class="pl-c1">99.74</span><span class="pl-k">%</span> compilation time)</pre></div>
<p dir="auto">If Plots is the needed feature to <code>MyPkg</code>, then the latency is what I need to pay for, which is
okay. <strong>BUT</strong>, from time to time, I might just generate the data and save it to disk, <strong>without
plotting the figure at all!</strong> Then why should I still wait for the <code>Plots</code> loading?</p>
<p dir="auto">This is where <code>LazyModules</code> can become useful: it delays the loading of heavy packages such as
<code>Plots</code> to its first call. By doing this, we don't need to wait for it if we don't use the <code>Plots</code>
functionalities.</p>
<p dir="auto">What you need to do, is to change the package code a bit (<code>examples/MyLazyPkg</code>):</p>
<div class="highlight highlight-source-diff notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyLazyPkg

export generate_data, draw_figure
+using LazyModules
-import Plots
+@lazy import Plots=&quot;91a5bcdd-55d7-5caf-9e0b-520d859cae80&quot;

generate_data(n) = sin.(range(start=0, stop=5, length=n) .+ 0.1.*rand(n))
draw_figure(data) = Plots.plot(data, title=&quot;MyPkg Plot&quot;)

end"><pre>module MyLazyPkg

export generate_data, draw_figure
<span class="pl-mi1"><span class="pl-mi1">+</span>using LazyModules</span>
<span class="pl-md"><span class="pl-md">-</span>import Plots</span>
<span class="pl-mi1"><span class="pl-mi1">+</span>@lazy import Plots="91a5bcdd-55d7-5caf-9e0b-520d859cae80"</span>

generate_data(n) = sin.(range(start=0, stop=5, length=n) .+ 0.1.*rand(n))
draw_figure(data) = Plots.plot(data, title="MyPkg Plot")

end</pre></div>
<p dir="auto">By doing this, if the users don't use <code>draw_figure</code> feature, then they don't need to load <code>Plots</code> at
all, which makes package loading significantly faster:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(@v1.7) pkg&gt; activate examples/MyLazyPkg
  Activating project at `~/Documents/Julia/LazyModules.jl/examples/MyPkg`

(MyLazyPkg) pkg&gt; instantiate
Precompiling project...
  1 dependency successfully precompiled in 36 seconds (133 already precompiled)

julia&gt; @time using MyLazyPkg # üöÄüöÄüöÄüöÄüöÄ
  0.053273 seconds (154.16 k allocations: 8.423 MiB, 97.62% compilation time)

julia&gt; x = @time generate_data(100); # üöÄ
  0.000006 seconds (2 allocations: 1.750 KiB)"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">7</span>) pkg<span class="pl-k">&gt;</span> activate examples<span class="pl-k">/</span>MyLazyPkg
  Activating project at <span class="pl-s"><span class="pl-pds">`</span>~/Documents/Julia/LazyModules.jl/examples/MyPkg<span class="pl-pds">`</span></span>

(MyLazyPkg) pkg<span class="pl-k">&gt;</span> instantiate
Precompiling project<span class="pl-k">...</span>
  <span class="pl-c1">1</span> dependency successfully precompiled <span class="pl-k">in</span> <span class="pl-c1">36</span> seconds (<span class="pl-c1">133</span> already precompiled)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-k">using</span> MyLazyPkg <span class="pl-c"><span class="pl-c">#</span> üöÄüöÄüöÄüöÄüöÄ</span>
  <span class="pl-c1">0.053273</span> seconds (<span class="pl-c1">154.16</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">8.423</span> MiB, <span class="pl-c1">97.62</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">@time</span> <span class="pl-c1">generate_data</span>(<span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> üöÄ</span>
  <span class="pl-c1">0.000006</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.750</span> KiB)</pre></div>
<p dir="auto">The actual loading of <code>Plots</code> is delayed to the first <code>draw_figure</code> call:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time draw_figure(x) # üí§üí§
  4.454738 seconds (13.82 M allocations: 897.071 MiB, 8.81% gc time, 49.97% compilation time)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">draw_figure</span>(x) <span class="pl-c"><span class="pl-c">#</span> üí§üí§</span>
  <span class="pl-c1">4.454738</span> seconds (<span class="pl-c1">13.82</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">897.071</span> MiB, <span class="pl-c1">8.81</span><span class="pl-k">%</span> gc time, <span class="pl-c1">49.97</span><span class="pl-k">%</span> compilation time)</pre></div>
<p dir="auto">Here <code>4.4</code> seconds is approximately <code>2.8</code> (Plots loading time) plus <code>1.6</code> (time to first plot). For
this reason, if a functionality is really necessary and widely used by almost everyone, then this
LazyModules package won't be helpful at all.</p>
<h2 dir="auto"><a id="user-content-what-is-a-lazymodule" class="anchor" aria-hidden="true" href="#what-is-a-lazymodule"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is a LazyModule</h2>
<p dir="auto"><code>LazyModule</code> is not a <code>Module</code>; it is indeed, a struct that overrides <code>getproperty</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyModules

julia&gt; @lazy import SparseArrays=&quot;2f01184e-e22b-5df5-ae63-d93ebab69eaf&quot;
LazyModule(SparseArrays)

julia&gt; SparseArrays.sprand(10, 10, 0.3) # triggers the loading
10√ó10 SparseArrays.SparseMatrixCSC{Float64, Int64} with 40 stored entries:
..."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyModules

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@lazy</span> <span class="pl-k">import</span> SparseArrays<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>2f01184e-e22b-5df5-ae63-d93ebab69eaf<span class="pl-pds">"</span></span>
<span class="pl-c1">LazyModule</span>(SparseArrays)

julia<span class="pl-k">&gt;</span> SparseArrays<span class="pl-k">.</span><span class="pl-c1">sprand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">0.3</span>) <span class="pl-c"><span class="pl-c">#</span> triggers the loading</span>
<span class="pl-c1">10</span><span class="pl-k">√ó</span><span class="pl-c1">10</span> SparseArrays<span class="pl-k">.</span>SparseMatrixCSC{Float64, Int64} with <span class="pl-c1">40</span> stored entries<span class="pl-k">:</span>
<span class="pl-k">...</span></pre></div>
<p dir="auto">Package is loaded whenever there's a <code>getproperty</code> call, e.g., <code>SparseArrays.sprand</code> as shown above.</p>
<h2 dir="auto"><a id="user-content-world-age-issue" class="anchor" aria-hidden="true" href="#world-age-issue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>World-age issue</h2>
<p dir="auto">The simplest example to trigger the world age issue is perhaps the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyModules

julia&gt; @lazy import ImageCore = &quot;a09fc81d-aa75-5fe9-8630-4744c3626534&quot;
LazyModule(ImageCore)

julia&gt; function foo()
           c = ImageCore.RGB(0.0, 0.0, 0.0)
           return c .* 3
       end
foo (generic function with 1 method)

julia&gt; foo()
ERROR: MethodError: no method matching length(::ColorTypes.RGB{Float64})
The applicable method may be too new: running in world age 31343, while current world is 31370.
...

julia&gt; foo()
RGB{Float64}(0.0,0.0,0.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyModules

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@lazy</span> <span class="pl-k">import</span> ImageCore <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a09fc81d-aa75-5fe9-8630-4744c3626534<span class="pl-pds">"</span></span>
<span class="pl-c1">LazyModule</span>(ImageCore)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>()
           c <span class="pl-k">=</span> ImageCore<span class="pl-k">.</span><span class="pl-c1">RGB</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
           <span class="pl-k">return</span> c <span class="pl-k">.*</span> <span class="pl-c1">3</span>
       <span class="pl-k">end</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>()
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">length</span>(<span class="pl-k">::</span><span class="pl-c1">ColorTypes.RGB{Float64}</span>)
The applicable method may be too new<span class="pl-k">:</span> running <span class="pl-k">in</span> world age <span class="pl-c1">31343</span>, <span class="pl-k">while</span> current world is <span class="pl-c1">31370.</span>
<span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>()
<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)</pre></div>
<p dir="auto">Here we can see that:</p>
<ul dir="auto">
<li>at first <code>foo()</code> call, it triggers the world-age issue</li>
<li>at the second call, it is working okay</li>
</ul>
<p dir="auto">This happens because when you first call <code>foo()</code>, the <code>length</code> method required by <code>*</code> is not yet
available (to the current world age). When the <code>ImageCore.RGB</code> triggers the package loading of
<code>ImageCore</code>, which again triggers the recompilation of many methods (in a new world age). But still,
<code>*</code> from the old world age can't see the <code>length</code> method in the new world age. Things changed at the
second call, where <code>foo()</code> gets recompiled in the new world age.</p>
<p dir="auto">There are commonly two ways to work around the world-age issue:</p>
<p dir="auto">The first workaround is to use <code>invokelatest</code> whenever world-age issue occurs.
But this has some overhead due to the dynamic dispatch.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyModules

julia&gt; @lazy import ImageCore
LazyModule(ImageCore)

julia&gt; function foo()
           c = ImageCore.RGB(0.0, 0.0, 0.0)
           return Base.invokelatest(*, c, 3)
       end
foo (generic function with 1 method)

julia&gt; foo()
RGB{Float64}(0.0,0.0,0.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyModules

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@lazy</span> <span class="pl-k">import</span> ImageCore
<span class="pl-c1">LazyModule</span>(ImageCore)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>()
           c <span class="pl-k">=</span> ImageCore<span class="pl-k">.</span><span class="pl-c1">RGB</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
           <span class="pl-k">return</span> Base<span class="pl-k">.</span><span class="pl-c1">invokelatest</span>(<span class="pl-k">*</span>, c, <span class="pl-c1">3</span>)
       <span class="pl-k">end</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>()
<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)</pre></div>
<p dir="auto">The second workaround is to load the "core" packages eagerly so that we don't need to process
"alien" types. For instance, <code>RGB</code> and its arithmetic are provided by <code>Colors</code> and
<code>ColorVectorSpace</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Colors, ColorVectorSpace

julia&gt; using LazyModules

julia&gt; @lazy import ImageCore = &quot;a09fc81d-aa75-5fe9-8630-4744c3626534&quot;
LazyModule(ImageCore)

julia&gt; function foo()
           c = ImageCore.RGB(0.0, 0.0, 0.0)
           return c * 3
       end
foo (generic function with 1 method)

julia&gt; foo()
RGB{Float64}(0.0,0.0,0.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Colors, ColorVectorSpace

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyModules

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@lazy</span> <span class="pl-k">import</span> ImageCore <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a09fc81d-aa75-5fe9-8630-4744c3626534<span class="pl-pds">"</span></span>
<span class="pl-c1">LazyModule</span>(ImageCore)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>()
           c <span class="pl-k">=</span> ImageCore<span class="pl-k">.</span><span class="pl-c1">RGB</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
           <span class="pl-k">return</span> c <span class="pl-k">*</span> <span class="pl-c1">3</span>
       <span class="pl-k">end</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>()
<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)</pre></div>
<p dir="auto">The world-age issue is exactly the reason why this package should not be used by users directly.</p>
<p dir="auto">As you might already notice, the main cause of world age issue is because some packages are not
loaded eagerly. This package provides a helper function to require user codes eagerly load the
requested packages. For instance,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @lazy import ImageCore as LazyImageCore = &quot;a09fc81d-aa75-5fe9-8630-4744c3626534&quot;
LazyModule(ImageCore)

julia&gt; function foo()
           LazyModules.require(LazyImageCore)
           c = LazyImageCore.RGB(0.0, 0.0, 0.0)
           return c * 3
       end
foo (generic function with 1 method)

julia&gt; foo()
ERROR: ImageCore is required to be loaded first, maybe `using ImageCore` or `import ImageCore` and try again.
...

julia&gt; using ImageCore # now let's explicitly load it

julia&gt; foo() # issue gone
RGB{Float64}(0.0,0.0,0.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@lazy</span> <span class="pl-k">import</span> ImageCore <span class="pl-k">as</span> LazyImageCore <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a09fc81d-aa75-5fe9-8630-4744c3626534<span class="pl-pds">"</span></span>
<span class="pl-c1">LazyModule</span>(ImageCore)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>()
           LazyModules<span class="pl-k">.</span><span class="pl-c1">require</span>(LazyImageCore)
           c <span class="pl-k">=</span> LazyImageCore<span class="pl-k">.</span><span class="pl-c1">RGB</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
           <span class="pl-k">return</span> c <span class="pl-k">*</span> <span class="pl-c1">3</span>
       <span class="pl-k">end</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>()
ERROR<span class="pl-k">:</span> ImageCore is required to be loaded first, maybe <span class="pl-s"><span class="pl-pds">`</span>using ImageCore<span class="pl-pds">`</span></span> or <span class="pl-s"><span class="pl-pds">`</span>import ImageCore<span class="pl-pds">`</span></span> and <span class="pl-k">try</span> again.
<span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ImageCore <span class="pl-c"><span class="pl-c">#</span> now let's explicitly load it</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>() <span class="pl-c"><span class="pl-c">#</span> issue gone</span>
<span class="pl-c1">RGB</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)</pre></div>
<p dir="auto">By doing this, your users can get an informative error messages rather than arbitrary non-sense
errors due to world-age issue. This can be used to "lock" some features unless the users explicitly
load necessary dependencies.</p>
<h2 dir="auto"><a id="user-content-overhead" class="anchor" aria-hidden="true" href="#overhead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overhead</h2>
<p dir="auto">The overhead is about ~50ns in Intel i9-12900K due to the dynamic dispatch via <code>invokelatest</code>. Thus
you should not use this package for very trivial functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @lazy import ImageCore as LazyImageCore = &quot;a09fc81d-aa75-5fe9-8630-4744c3626534&quot;
LazyModule(ImageCore)

julia&gt; import ImageCore

julia&gt; @btime zero(LazyImageCore.RGB)
  49.004 ns (0 allocations: 0 bytes)
RGB{N0f8}(0.0,0.0,0.0)

julia&gt; @btime zero(ImageCore.RGB)
  0.012 ns (0 allocations: 0 bytes)
RGB{N0f8}(0.0,0.0,0.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@lazy</span> <span class="pl-k">import</span> ImageCore <span class="pl-k">as</span> LazyImageCore <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a09fc81d-aa75-5fe9-8630-4744c3626534<span class="pl-pds">"</span></span>
<span class="pl-c1">LazyModule</span>(ImageCore)

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> ImageCore

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">zero</span>(LazyImageCore<span class="pl-k">.</span>RGB)
  <span class="pl-c1">49.004</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">zero</span>(ImageCore<span class="pl-k">.</span>RGB)
  <span class="pl-c1">0.012</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>)</pre></div>
<h2 dir="auto"><a id="user-content-disable-lazy-mode" class="anchor" aria-hidden="true" href="#disable-lazy-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Disable lazy mode</h2>
<p dir="auto">If you want to eagerly load every dependency, you can start your Julia process with
environment variable <code>LazyModules_lazyload</code> as <code>"false"</code>. That way <code>@lazy import</code> command
will degenerated to a normal <code>import</code> command. For instance, in bash shell, you could do</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="jc@ubuntu:~$ LazyModules_lazyload=false julia"><pre><span class="pl-e">jc@ubuntu:~</span>$ <span class="pl-s1">LazyModules_lazyload=false julia</span></pre></div>
<p dir="auto">If set successfully, this will print an informative message:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[ Info: disable lazy package loading: environment variable `LazyModules_lazyload=false` is detected"><pre>[ Info<span class="pl-k">:</span> disable lazy package loading<span class="pl-k">:</span> environment variable <span class="pl-s"><span class="pl-pds">`</span>LazyModules_lazyload=false<span class="pl-pds">`</span></span> is detected</pre></div>
</article></div>