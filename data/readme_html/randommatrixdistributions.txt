<div id="readme" class="org" data-path="README.org"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-randommatrixdistributions" class="anchor" aria-hidden="true" href="#randommatrixdistributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RandomMatrixDistributions</h1>
<p><a href="https://travis-ci.com/damian-t-p/RandomMatrixDistributions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/12613e720a5989e0ddfec36d741c4f02cbb7689d/68747470733a2f2f7472617669732d63692e636f6d2f64616d69616e2d742d702f52616e646f6d4d6174726978446973747269627574696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="https://travis-ci.com/damian-t-p/RandomMatrixDistributions.jl.svg?branch=master" data-canonical-src="https://travis-ci.com/damian-t-p/RandomMatrixDistributions.jl.svg?branch=master" style="max-width:100%;"></a>
  <a href="https://codecov.io/gh/damian-t-p/RandomMatrixDistributions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3cff265c43b7f68f310b0f077cb7efd3c23c6578/68747470733a2f2f636f6465636f762e696f2f67682f64616d69616e2d742d702f52616e646f6d4d6174726978446973747269627574696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="https://codecov.io/gh/damian-t-p/RandomMatrixDistributions.jl/branch/master/graph/badge.svg" data-canonical-src="https://codecov.io/gh/damian-t-p/RandomMatrixDistributions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia package containing <code>Distribution.jl</code>-type specifications for various distributions arising from random matrix theory.</p>
<h2><a id="user-content-currently-implemented-distributions" class="anchor" aria-hidden="true" href="#currently-implemented-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Currently implemented distributions</h2>
<h3><a id="user-content-matrix-distributions" class="anchor" aria-hidden="true" href="#matrix-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Matrix distributions</h3>
<ul>
  <li><code>SpikedWishart(beta, n, p, spikes)</code>: Wishart distribution with spiked covariance (sampler for more than one spike implemented only for the real case. [1]
    <p><code>spikes</code> is an array <code>[s1, ..., sr]</code> such that the Wishart covariance is diagonal with entries <i>1 + s<sub>1</sub>, … 1 + s<sub>r</sub>, 1, …, 1</i>.</p>
  </li>
  <li><code>Jacobi(beta, n1, n2, p)</code>: Random matrices of the form <i>E(E+H)<sup>-1</sup>.</i> Here <i>E</i> and <i>H</i> are <i>(n<sub>1</sub>, p)</i> and <i>(n<sub>2</sub>, p)</i> white Wisharts respectively. [2]</li>
</ul>
<h3><a id="user-content-limiting-eigenvalue-distributions" class="anchor" aria-hidden="true" href="#limiting-eigenvalue-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limiting eigenvalue distributions</h3>
<ul>
  <li><code>MarchenkoPastur(gamma)</code>: Limiting empirical spectral density of a real white Wishart matrix with <i>p/n → γ</i> as long as <i>0 &lt; γ &lt; 1</i>.</li>
  <li><code>TracyWidom(beta)</code>: Limiting distribution of the maximum eigenvalue of many random matrix ensembles with Dyson parameter beta.</li>
  <li><code>Wachter(gamma1, gamma2)</code>: Limiting empirical spectral density of <i>Σ<sub>1</sub> Σ<sub>2</sub><sup>-1</sup>.</i> Here <i>Σ<sub>1</sub></i> and <i>Σ<sub>2</sub></i> are sample covariance matrices with <i>n<sub>1</sub>/p → γ<sub>1</sub></i> and <i>n<sub>2</sub>/p → γ<sub>2</sub></i>.</li>
</ul>
<h2><a id="user-content-efficient-samplers" class="anchor" aria-hidden="true" href="#efficient-samplers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Efficient samplers</h2>
<p>The function <code>randeigvals</code> efficiently samples from the distribution of eigenvalues of the implemented random matrix distributions. It does this by generating a tridiagonal or banded matrix with eigenvalue equal in distribution to the specified model.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>An Jupyter notebook demonstrating all of the implemented eigenvalue samplers is provided in <code>/examples/eigenvalue-simulation.ipynb</code>.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>[1] Dumitriu &amp; Edelman, Matrix Models for beta ensembles, Journal of Mathematical Physics, (11), (2002).</p>
<p>[2] Killip &amp; Nenciu, Matrix Models for Circular Ensembles, International Mathematics Research Notices, 50, (2004).</p>
</article></div>