<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-randommatrixdistributionsjl" class="anchor" aria-hidden="true" href="#randommatrixdistributionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RandomMatrixDistributions.jl</h1>
<p><a href="https://travis-ci.com/damian-t-p/RandomMatrixDistributions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e647f0076b621733482965f08629bd8eb23fee8a9babc26bc3158fd8bf99a2fb/68747470733a2f2f7472617669732d63692e636f6d2f64616d69616e2d742d702f52616e646f6d4d6174726978446973747269627574696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/damian-t-p/RandomMatrixDistributions.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/damian-t-p/RandomMatrixDistributions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4c82105f29984b230b5909e9c2572c26a2f14e26f493683bfd3040c760ec3930/68747470733a2f2f636f6465636f762e696f2f67682f64616d69616e2d742d702f52616e646f6d4d6174726978446973747269627574696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/damian-t-p/RandomMatrixDistributions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia package containing =Distribution.jl=-type specifications for various distributions arising from random matrix theory.</p>
<h1><a id="user-content-currently-implemented-distributions" class="anchor" aria-hidden="true" href="#currently-implemented-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Currently implemented distributions</h1>
<h2><a id="user-content-matrix-distributions" class="anchor" aria-hidden="true" href="#matrix-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Matrix distributions</h2>
<ul>
<li>
<p><code>SpikedWigner(beta, n, spikes; scaled=false)</code>: Wigner distribution with an added rank-<em>r</em> matrix with eigenvalues (<em>s</em><sub>1</sub>, ... , <em>s</em><sub>r</sub>) * sqrt(<em>n</em>).</p>
</li>
<li>
<p><code>SpikedWishart(beta, n, p, spikes; scaled=false)</code>: Wishart distribution with spiked covariance (sampler for more than one spike implemented only for the real case. [1]</p>
<p><code>spikes</code> is an array <code>[s1, ..., sr]</code> such that the Wishart covariance is diagonal with entries  <em>s</em><sub>1</sub>, ... , <em>s</em><sub>r</sub>, 1, ..., 1.</p>
</li>
<li>
<p><code>Jacobi(beta, n1, n2, p)</code>: Random matrices of the form <em>E</em>(<em>E</em>+<em>H</em>)<sup>-1</sup>. Here <em>E</em> and <em>H</em> are (<em>n</em><sub>1</sub>, <em>p</em>) and (<em>n</em><sub>2</sub>, <em>p</em>) white Wisharts respectively. [2]</p>
</li>
</ul>
<p>Specifying <code>scaled=true</code> in <code>SpikedWigner</code> and <code>SpikedWishart</code> scales the matrices by an appropriate function of <em>n</em> so that the corresponding bulks converge to the semicircle and Marchenko-Pastur laws respectively.
Due to the inverse in the definition of the Jacobi ensemble, no scaling is necessary for <code>Jacobi</code>,</p>
<p>Normal entries in Gaussian ensembles are scaled to have variance 1.</p>
<h2><a id="user-content-limiting-eigenvalue-distributions" class="anchor" aria-hidden="true" href="#limiting-eigenvalue-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limiting eigenvalue distributions</h2>
<ul>
<li><code>MarchenkoPastur(gamma)</code>: Limiting empirical spectral density of a real white Wishart matrix with <em>p</em>/<em>n</em> -&gt; <em>gamma</em> as long as 0 &lt; <em>gamma</em> &lt; 1.</li>
<li><code>TracyWidom(beta)</code>: Limiting distribution of the maximum eigenvalue of many random matrix ensembles with Dyson parameter beta.</li>
<li><code>Wachter(gamma1, gamma2)</code>: Limiting empirical spectral density of <em>S</em><sub>1</sub> <em>S</em><sub>2</sub><sup>-1</sup>. Here <em>S</em><sub>1</sub> and <em>S</em><sub>2</sub>$ are sample covariance matrices with <em>n</em><sub>1</sub>/<em>p</em> -&gt; <em>gamma</em><sub>1</sub> and <em>n</em><sub>2</sub>/<em>p</em> -&gt; <em>gamma</em><sub>2</sub>$.</li>
</ul>
<h1><a id="user-content-efficient-samplers" class="anchor" aria-hidden="true" href="#efficient-samplers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Efficient samplers</h1>
<p>The function <code>randeigvals</code> efficiently samples from the distribution of eigenvalues of the implemented random matrix distributions. It does this by generating a tridiagonal or banded matrix with eigenvalue equal in distribution to the specified model.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<p>An Jupyter notebook demonstrating all of the implemented eigenvalue samplers is provided in <code>/examples/eigenvalue-simulation.ipynb</code>.</p>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<p>[1] Dumitriu &amp; Edelman, Matrix Models for beta ensembles, Journal of Mathematical Physics, (11), (2002).</p>
<p>[2] Killip &amp; Nenciu, Matrix Models for Circular Ensembles, International Mathematics Research Notices, 50, (2004).</p>
</article></div>