<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nbodysimulator" class="anchor" aria-hidden="true" href="#nbodysimulator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NBodySimulator</h1>
<p><a href="https://travis-ci.org/JuliaDiffEq/NBodySimulator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9ac9ac9520e0fc733beca253eddd54e815111c04/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f4e426f647953696d756c61746f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/NBodySimulator.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/Mikhail-Vaganov/nbodysimulator-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0032e6a87fa4742f14856c64d773f3e24759d036/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f316f66673969616e76636369713236763f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/1ofg9ianvcciq26v?svg=true" style="max-width:100%;"></a></p>
<p>This project is under development at the moment. The implementation of potential calculations is fairly experimental and has not been extensively verified yet.
You can test simulation of different systems now but be aware of possible changes in future.</p>
<h2><a id="user-content-add-package" class="anchor" aria-hidden="true" href="#add-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Add Package</h2>
<p>In order to start simulating systems of N interacting bodies, it is necessary to add <code>NBodySimulator</code> package to Julia and then begin to use it:</p>
<div class="highlight highlight-source-julia"><pre>]add NBodySimulator
<span class="pl-k">using</span> NBodySimulator</pre></div>
<p>If you cannot wait to start codding, try to run some scripts from <code>examples</code> folder. The number of particles <code>N</code> and the final timestep of simulations <code>t2</code> are the two parameters which will determine the time of script execution.</p>
<h2><a id="user-content-basic-components" class="anchor" aria-hidden="true" href="#basic-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Components</h2>
<p>There are three basic components required for any simulation of systems of N-bodies: <code>bodies</code>, <code>system</code> and <code>simulation</code>.</p>
<p><strong>Bodies</strong> or <strong>Particles</strong> are the objects which will interact with each other and for which the equations of Newton's 2nd law are solved during the simulation process. Three parameters of a body are necessary, they are initial location, initial velocity and mass. <code>MassBody</code> structure represents such particles:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StaticArrays
r <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">.0</span>,<span class="pl-c1">.0</span>,<span class="pl-c1">.0</span>)
v <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">.1</span>,<span class="pl-c1">.2</span>,<span class="pl-c1">.5</span>)
mass <span class="pl-k">=</span> <span class="pl-c1">1.25</span>
body <span class="pl-k">=</span> <span class="pl-c1">MassBody</span>(r,v,mass)</pre></div>
<p>For the sake of simulation speed it is advised to use <a href="https://github.com/JuliaArrays/StaticArrays.jl">static arrays</a>.</p>
<p>A <strong>System</strong> covers bodies and necessary parameters for correct simulation of interaction between particles. For example, to create an entity for a system of gravitationally interacting particles, one needs to use <code>GravitationalSystem</code> constructor:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">6.67e-11</span> <span class="pl-c"><span class="pl-c">#</span> m^3/kg/s^2</span>
system <span class="pl-k">=</span> <span class="pl-c1">GravitationalSystem</span>(bodies, G)</pre></div>
<p><strong>Simulation</strong> is an entity determining parameters of the experiment: time span of simulation, global physical constants, borders of the simulation cell, external magnetic or electric fields, etc. The required arguments for <code>NBodySImulation</code> constructor are the system to be tested and the time span of simulation.</p>
<div class="highlight highlight-source-julia"><pre>tspan <span class="pl-k">=</span> (<span class="pl-c1">.0</span>, <span class="pl-c1">10.0</span>)
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(system, tspan)</pre></div>
<p>There are different types of bodies but they are just containers of particle parameters. The interaction and acceleration of particles are defined by the potentials or force fields.</p>
<h2><a id="user-content-generating-bodies" class="anchor" aria-hidden="true" href="#generating-bodies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generating bodies</h2>
<p>The package exports quite a useful function for placing similar particles in the nodes of a cubic cell with their velocities distributed in accordance with the Maxwell–Boltzmann law:</p>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">100</span> <span class="pl-c"><span class="pl-c">#</span> number of bodies/particles</span>
m <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> mass of each of them</span>
v <span class="pl-k">=</span> <span class="pl-c1">10.0</span> <span class="pl-c"><span class="pl-c">#</span> mean velocity</span>
L <span class="pl-k">=</span> <span class="pl-c1">21.0</span> <span class="pl-c"><span class="pl-c">#</span> size of the cell side</span>

bodies <span class="pl-k">=</span> <span class="pl-c1">generate_bodies_in_cell_nodes</span>(N, m, v, L)</pre></div>
<p>Molecules for the SPC/Fw water model can be imported from a PDB file:</p>
<div class="highlight highlight-source-julia"><pre>molecules <span class="pl-k">=</span> <span class="pl-c1">load_water_molecules_from_pdb</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_pdb_file.pdb<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-potentials" class="anchor" aria-hidden="true" href="#potentials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Potentials</h2>
<p>The potentials or force field determines the interaction of particles and, therefore, their acceleration.</p>
<p>There are several structures for basic physical interactions:</p>
<div class="highlight highlight-source-julia"><pre>g_parameters <span class="pl-k">=</span> <span class="pl-c1">GravitationalParameters</span>(G)
m_parameters <span class="pl-k">=</span> <span class="pl-c1">MagnetostaticParameters</span>(μ_4π)
el_potential <span class="pl-k">=</span> <span class="pl-c1">ElectrostaticParameters</span>(k, cutoff_radius)
jl_parameters <span class="pl-k">=</span> <span class="pl-c1">LennardJonesParameters</span>(ϵ, σ, cutoff_radius)
spc_water_paramters <span class="pl-k">=</span> <span class="pl-c1">SPCFwParameters</span>(rOH, ∠HOH, k_bond, k_angle)</pre></div>
<p>The Lennard-Jones potential is used in molecular dynamics simulations for approximating interactions between neutral atoms or molecules. The <a href="http://www.sklogwiki.org/SklogWiki/index.php/SPC/Fw_model_of_water" rel="nofollow">SPC/Fw water model</a> is used in water simulations. The meaning of arguments for <code>SPCFwParameters</code> constructor will be clarified further in this documentation.</p>
<p><code>PotentialNBodySystem</code> structure represents systems with a custom set of potentials. In other words, the user determines the ways in which the particles are allowed to interact. One can pass the bodies and parameters of interaction potentials into that system. In case the potential parameters are not set, during the simulation particles will move at constant velocities without acceleration.</p>
<div class="highlight highlight-source-julia"><pre>system <span class="pl-k">=</span> <span class="pl-c1">PotentialNBodySystem</span>(bodies, <span class="pl-c1">Dict</span>(<span class="pl-c1">:gravitational</span> <span class="pl-k">=&gt;</span> g_parameters, electrostatic<span class="pl-k">:</span> <span class="pl-k">=&gt;</span> el_potential))</pre></div>
<h3><a id="user-content-custom-potential" class="anchor" aria-hidden="true" href="#custom-potential"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Potential</h3>
<p>There exists an <a href="http://docs.juliadiffeq.org/dev/models/physical.html" rel="nofollow">example</a> of simulation of an N-body system at absolutely custom potential.</p>
<p>Here is shown how to create custom acceleration functions using tools of NBodySimulator.</p>
<p>First of all, it is necessary to create a structure for parameters for the custom potential.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> CustomPotentialParameters <span class="pl-k">&lt;:</span> <span class="pl-c1">PotentialParameters</span>
    a<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>
<span class="pl-k">end</span></pre></div>
<p>Next, the acceleration function for the potential is required. The custom potential defined here creates a force acting on all the particles proportionate to their masses. The first argument of the function determines the potential for which the acceleration should be calculated in this method.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> NBodySimulator<span class="pl-k">.</span>get_accelerating_function
<span class="pl-k">function</span> <span class="pl-en">get_accelerating_function</span>(p<span class="pl-k">::</span><span class="pl-c1">CustomPotentialParameters</span>, simulation<span class="pl-k">::</span><span class="pl-c1">NBodySimulation</span>)
    ms <span class="pl-k">=</span> <span class="pl-c1">get_masses</span>(simulation<span class="pl-k">.</span>system)
    (dv, u, v, t, i) <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span> custom_accel <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, p<span class="pl-k">.</span>a); dv <span class="pl-k">.=</span> custom_accel<span class="pl-k">*</span>ms[i] <span class="pl-k">end</span> 
<span class="pl-k">end</span></pre></div>
<p>After the parameters and acceleration function are created, one can instantiate a system of particles interacting with a set of potentials which includes the just created custom potential:</p>
<div class="highlight highlight-source-julia"><pre>parameters <span class="pl-k">=</span> <span class="pl-c1">CustomPotentialParameters</span>(<span class="pl-k">-</span><span class="pl-c1">9.8</span>)
system <span class="pl-k">=</span> <span class="pl-c1">PotentialNBodySystem</span>(bodies, <span class="pl-c1">Dict</span>(<span class="pl-c1">:custom_potential_params</span> <span class="pl-k">=&gt;</span> parameters))</pre></div>
<h3><a id="user-content-gravitational-interaction" class="anchor" aria-hidden="true" href="#gravitational-interaction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gravitational Interaction</h3>
<p>Using NBodySimulator it is possible to simulate gravitational interaction of celestial bodies.
In fact, any structure for bodies can be used for simulation of gravitational interaction since all those structures are required to have mass as one of their parameters:</p>
<div class="highlight highlight-source-julia"><pre>body1 <span class="pl-k">=</span> <span class="pl-c1">MassBody</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>( <span class="pl-c1">5.775e-6</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">2.0</span>)
body2 <span class="pl-k">=</span> <span class="pl-c1">MassBody</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>,<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">5.775e-6</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">2.0</span>)</pre></div>
<p>Solving gravitational problem one needs to specify the gravitational constant G.</p>
<div class="highlight highlight-source-julia"><pre>G <span class="pl-k">=</span> <span class="pl-c1">6.673e-11</span></pre></div>
<p>Now we have enough parameters to create a GravitationalSystem object:</p>
<div class="highlight highlight-source-julia"><pre>system <span class="pl-k">=</span> <span class="pl-c1">GravitationalSystem</span>([body1,body2], G)</pre></div>
<p>Usually we solve an N-body problem for a certain period of time:</p>
<div class="highlight highlight-source-julia"><pre>tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">1111150.0</span>)</pre></div>
<p>The created objects determine the simulation we want to run:</p>
<div class="highlight highlight-source-julia"><pre>simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(system, tspan)
sim_result <span class="pl-k">=</span> <span class="pl-c1">run_simulation</span>(simulation)</pre></div>
<p>And, finally, we can animate our solution showing two equal bodies rotating on the same orbit:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">animate</span>(sim_result, <span class="pl-s"><span class="pl-pds">"</span>path_to_animated_particles.gif<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/39958539-d2cf779c-561d-11e8-96a8-ffc3a595be8b.gif"><img src="https://user-images.githubusercontent.com/16945627/39958539-d2cf779c-561d-11e8-96a8-ffc3a595be8b.gif" alt="Here should appear a gif of rotating bodies" width="350" style="max-width:100%;"></a></p>
<h3><a id="user-content-electrostatic-interaction" class="anchor" aria-hidden="true" href="#electrostatic-interaction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Electrostatic Interaction</h3>
<p>Interaction between charged particles obeys Coulomb's law. The movement of such bodies can be simulated using <code>ChargedParticle</code> and <code>ChargedParticles</code> structures.</p>
<p>The following example shows how to model two oppositely charged particles. If one body is more massive that another, it will be possible to observe rotation of the light body around the heavy one without adjusting their positions in space. The constructor for <code>ChargedParticles</code> system requires bodies and Coulomb's constant <code>k</code> to be passed as arguments.</p>
<div class="highlight highlight-source-julia"><pre>r <span class="pl-k">=</span> <span class="pl-c1">100.0</span> <span class="pl-c"><span class="pl-c">#</span> m</span>
q1 <span class="pl-k">=</span> <span class="pl-c1">1e-3</span> <span class="pl-c"><span class="pl-c">#</span> C</span>
q2 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1e-3</span> <span class="pl-c"><span class="pl-c">#</span> C</span>
m1 <span class="pl-k">=</span> <span class="pl-c1">100.0</span> <span class="pl-c"><span class="pl-c">#</span> kg</span>
m2 <span class="pl-k">=</span> <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> kg</span>
v2 <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">abs</span>(k <span class="pl-k">*</span> q1 <span class="pl-k">*</span> q2 <span class="pl-k">/</span> m2 <span class="pl-k">/</span> r)) <span class="pl-c"><span class="pl-c">#</span> m/s - using the centrifugal acceleration</span>
t <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> pi <span class="pl-k">*</span> r <span class="pl-k">/</span> v2 <span class="pl-c"><span class="pl-c">#</span> s  - for one rotation</span>
p1 <span class="pl-k">=</span> <span class="pl-c1">ChargedParticle</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0.0</span>), m1, q1)
p2 <span class="pl-k">=</span> <span class="pl-c1">ChargedParticle</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">100.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, v2, <span class="pl-c1">0.0</span>), m2, q2)
system <span class="pl-k">=</span> <span class="pl-c1">ChargedParticles</span>([p1, p2], k)
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(system, (<span class="pl-c1">0.0</span>, t))
sim_result <span class="pl-k">=</span> <span class="pl-c1">run_simulation</span>(simulation)</pre></div>
<h3><a id="user-content-magnetic-interaction" class="anchor" aria-hidden="true" href="#magnetic-interaction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Magnetic Interaction</h3>
<p>An N-body system consisting of <code>MagneticParticle</code>s can be used for simulation of interacting magnetic dipoles, though such dipoles cannot rotate in space. Such a model can represent single domain particles interacting under the influence of a strong external magnetic field.</p>
<p>In order to create a magnetic particle, one specifies its location in space, velocity and the vector of its magnetic moment. The following code shows how we can construct an iron particle:</p>
<div class="highlight highlight-source-julia"><pre>iron_dencity <span class="pl-k">=</span> <span class="pl-c1">7800</span> <span class="pl-c"><span class="pl-c">#</span> kg/m^3</span>
magnetization_saturation <span class="pl-k">=</span> <span class="pl-c1">1.2e6</span> <span class="pl-c"><span class="pl-c">#</span> A/m</span>

mass <span class="pl-k">=</span>  <span class="pl-c1">5e-6</span> <span class="pl-c"><span class="pl-c">#</span> kg</span>
r <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-k">-</span><span class="pl-c1">0.005</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>) <span class="pl-c"><span class="pl-c">#</span> m</span>
v <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>) <span class="pl-c"><span class="pl-c">#</span> m/s</span>
magnetic_moment <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, magnetization_saturation <span class="pl-k">*</span> mass <span class="pl-k">/</span> iron_dencity) <span class="pl-c"><span class="pl-c">#</span> A*m^2</span>

p1 <span class="pl-k">=</span> <span class="pl-c1">MagneticParticle</span>(r, v, mass, magnetic_moment)</pre></div>
<p>For the second particle we will use a shorter form:</p>
<div class="highlight highlight-source-julia"><pre>p2 <span class="pl-k">=</span> <span class="pl-c1">MagneticParticle</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.005</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">5e-6</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.00077</span>))</pre></div>
<p>To calculate magnetic interactions properly one should also specify the value for the constant μ<sub>0</sub>/4π or its substitute. Having created parameters for the magnetostatic potential, one can now instantiate a system of particles which should interact magnetically. For that purpose we use <code>PotentialNBodySystem</code> and pass particles and potential parameters as arguments.</p>
<div class="highlight highlight-source-julia"><pre>parameters <span class="pl-k">=</span> <span class="pl-c1">MagnetostaticParameters</span>(μ_4π)
system <span class="pl-k">=</span> <span class="pl-c1">PotentialNBodySystem</span>([p1, p2], <span class="pl-c1">Dict</span>(<span class="pl-c1">:magnetic</span> <span class="pl-k">=&gt;</span> parameters))
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(system, (t1, t2))
sim_result <span class="pl-k">=</span> <span class="pl-c1">run_simulation</span>(simulation, <span class="pl-c1">VelocityVerlet</span>(), dt<span class="pl-k">=</span>τ)</pre></div>
<h2><a id="user-content-molecular-dynamics-md" class="anchor" aria-hidden="true" href="#molecular-dynamics-md"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Molecular Dynamics (MD)</h2>
<p>NBodySimulator allows one to conduct molecular dynamic simulations for the Lennard-Jones liquids, SPC/Fw model of water and other molecular systems thanks to implementations of basic interaction potentials between atoms and molecules:</p>
<ul>
<li>Lennard-Jones</li>
<li>electrostatic and magnetostatic</li>
<li>harmonic bonds</li>
<li>harmonic valence angle generated by pairs of bonds</li>
</ul>
<p>The comprehensive examples of liquid argon and water simulations can be found in <code>examples</code> folder.
Here only the basic principles of the molecular dynamics simulations using NBodySimulator are presented using liquid argon as a classical MD system for beginners.</p>
<p>First of all, one needs to define parameters of the simulation:</p>
<div class="highlight highlight-source-julia"><pre>T <span class="pl-k">=</span> <span class="pl-c1">120.0</span> <span class="pl-c"><span class="pl-c">#</span> °K</span>
T0 <span class="pl-k">=</span> <span class="pl-c1">90.0</span> <span class="pl-c"><span class="pl-c">#</span> °K</span>
kb <span class="pl-k">=</span> <span class="pl-c1">8.3144598e-3</span> <span class="pl-c"><span class="pl-c">#</span> kJ/(K*mol)</span>
ϵ <span class="pl-k">=</span> T <span class="pl-k">*</span> kb
σ <span class="pl-k">=</span> <span class="pl-c1">0.34</span> <span class="pl-c"><span class="pl-c">#</span> nm</span>
ρ <span class="pl-k">=</span> <span class="pl-c1">1374</span><span class="pl-k">/</span><span class="pl-c1">1.6747</span><span class="pl-c"><span class="pl-c">#</span> Da/nm^3</span>
m <span class="pl-k">=</span> <span class="pl-c1">39.95</span><span class="pl-c"><span class="pl-c">#</span> Da</span>
N <span class="pl-k">=</span> <span class="pl-c1">216</span>
L <span class="pl-k">=</span> (m<span class="pl-k">*</span>N<span class="pl-k">/</span>ρ)<span class="pl-k">^</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-c"><span class="pl-c">#</span>10.229σ</span>
R <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>L   
v_dev <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(kb <span class="pl-k">*</span> T <span class="pl-k">/</span> m)
bodies <span class="pl-k">=</span> <span class="pl-c1">generate_bodies_in_cell_nodes</span>(N, m, v_dev, L)

τ <span class="pl-k">=</span> <span class="pl-c1">0.5e-3</span> <span class="pl-c"><span class="pl-c">#</span> ps or 1e-12 s</span>
t1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
t2 <span class="pl-k">=</span> <span class="pl-c1">2000</span>τ</pre></div>
<p>Liquid argon consists of neutral molecules so the Lennard-Jones potential runs their interaction:</p>
<div class="highlight highlight-source-julia"><pre>parameters <span class="pl-k">=</span> <span class="pl-c1">LennardJonesParameters</span>(ϵ, σ, R)
lj_system <span class="pl-k">=</span> <span class="pl-c1">PotentialNBodySystem</span>(bodies, <span class="pl-c1">Dict</span>(<span class="pl-c1">:lennard_jones</span> <span class="pl-k">=&gt;</span> parameters)); </pre></div>
<p>Then, a thermostat and boundary conditions should be selected and instantiated:</p>
<div class="highlight highlight-source-julia"><pre>thermostat <span class="pl-k">=</span> <span class="pl-c1">NoseHooverThermostat</span>(T0, <span class="pl-c1">200</span>τ)
pbc <span class="pl-k">=</span> <span class="pl-c1">CubicPeriodicBoundaryConditions</span>(L)
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(lj_system, (t1, t2), pbc, thermostat, kb);
result <span class="pl-k">=</span> <span class="pl-c1">run_simulation</span>(simulation, <span class="pl-c1">VelocityVerlet</span>(), dt<span class="pl-k">=</span>τ)</pre></div>
<p>It is recommended to use <code>CubicPeriodicBoundaryConditions</code> since cubic boxes are among the most popular boundary conditions in MD. There are different variants of the <code>NBodySimulation</code> constructor for MD:</p>
<div class="highlight highlight-source-julia"><pre>simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(lj_system, (t1, t2));
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(lj_system, (t1, t2), pbc);
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(lj_system, (t1, t2), pbc, thermostat);
simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(lj_system, (t1, t2), pbc, thermostat, kb);</pre></div>
<p>The default boundary conditions are <code>InfiniteBox</code> without any limits, default thermostat is <code>NullThermostat</code> which does no thermostating and default Boltzmann constant <code>kb</code> equals its value in SI, i.e. 1.38e-23 J/K.</p>
<h2><a id="user-content-water-simulations" class="anchor" aria-hidden="true" href="#water-simulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Water Simulations</h2>
<p>In NBodySImulator the <a href="http://www.sklogwiki.org/SklogWiki/index.php/SPC/Fw_model_of_water" rel="nofollow">SPC/Fw water model</a> is implemented. For using this model, one has to specify parameters of the Lennard-Jones potential between the oxygen atoms of water molecules, parameters of the electrostatic potential for the corresponding interactions between atoms of different molecules and parameters for harmonic potentials representing bonds between atoms and the valence angle made from bonds between hydrogen atoms and the oxygen one.</p>
<div class="highlight highlight-source-julia"><pre>bodies <span class="pl-k">=</span> <span class="pl-c1">generate_bodies_in_cell_nodes</span>(N, mH2O, v, L)
jl_parameters <span class="pl-k">=</span> <span class="pl-c1">LennardJonesParameters</span>(ϵOO, σOO, R)
e_parameters <span class="pl-k">=</span> <span class="pl-c1">ElectrostaticParameters</span>(k, Rel)
spc_paramters <span class="pl-k">=</span> <span class="pl-c1">SPCFwParameters</span>(rOH, ∠HOH, k_bond, k_angle)
water <span class="pl-k">=</span> <span class="pl-c1">WaterSPCFw</span>(bodies, mH, mO, qH, qO,  jl_parameters, e_parameters, spc_paramters);</pre></div>
<p>For each water molecule here, <code>rOH</code> is the equilibrium distance between a hydrogen atom and the oxygen atom, <code>∠HOH</code> denotes the equilibrium angle made of those two bonds, <code>k_bond</code> and <code>k_angle</code> are the elastic coefficients for the corresponding harmonic potentials.</p>
<p>Further, one pass the water system into <code>NBodySimulation</code> constructor as a usual system of N-bodies.</p>
<div class="highlight highlight-source-julia"><pre>simulation <span class="pl-k">=</span> <span class="pl-c1">NBodySimulation</span>(water, (t1, t2), pbc, kb);</pre></div>
<h2><a id="user-content-thermostats" class="anchor" aria-hidden="true" href="#thermostats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Thermostats</h2>
<p>Usually during simulation of a system is required to be at a particular temperature. NBodySimulator contains several thermostats for that purpose. Here the thermostating of liquid argon is presented, for thermostating of water one can refer to <a href="https://mikhail-vaganov.github.io/gsoc-2018-blog/2018/08/06/thermostating.html" rel="nofollow">this post</a></p>
<h3><a id="user-content-andersen-thermostat" class="anchor" aria-hidden="true" href="#andersen-thermostat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="http://www.sklogwiki.org/SklogWiki/index.php/Andersen_thermostat" rel="nofollow">Andersen Thermostat</a></h3>
<div class="highlight highlight-source-julia"><pre>τ <span class="pl-k">=</span> <span class="pl-c1">0.5e-3</span> <span class="pl-c"><span class="pl-c">#</span> timestep of integration and simulation</span>
T0 <span class="pl-k">=</span> <span class="pl-c1">90</span>
ν <span class="pl-k">=</span> <span class="pl-c1">0.05</span><span class="pl-k">/</span>τ
thermostat <span class="pl-k">=</span> <span class="pl-c1">AndersenThermostat</span>(<span class="pl-c1">90</span>, ν)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/44002487-cd99653a-9e5c-11e8-8481-78945a930d94.png"><img src="https://user-images.githubusercontent.com/16945627/44002487-cd99653a-9e5c-11e8-8481-78945a930d94.png" alt="andersen thermostating" style="max-width:100%;"></a></p>
<h3><a id="user-content-berendsen-thermostat" class="anchor" aria-hidden="true" href="#berendsen-thermostat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="http://www2.mpip-mainz.mpg.de/~andrienk/journal_club/thermostats.pdf" rel="nofollow">Berendsen Thermostat</a></h3>
<div class="highlight highlight-source-julia"><pre>τB <span class="pl-k">=</span> <span class="pl-c1">2000</span>τ
thermostat <span class="pl-k">=</span> <span class="pl-c1">BerendsenThermostat</span>(<span class="pl-c1">90</span>, τB)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/44002495-f07e164a-9e5c-11e8-8db7-16c09a7631cd.png"><img src="https://user-images.githubusercontent.com/16945627/44002495-f07e164a-9e5c-11e8-8db7-16c09a7631cd.png" alt="berendsen thermostating" style="max-width:100%;"></a></p>
<h3><a id="user-content-noséhoover-thermostat" class="anchor" aria-hidden="true" href="#noséhoover-thermostat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="http://www.sklogwiki.org/SklogWiki/index.php/Nos%C3%A9-Hoover_thermostat" rel="nofollow">Nosé–Hoover Thermostat</a></h3>
<div class="highlight highlight-source-julia"><pre>τNH <span class="pl-k">=</span> <span class="pl-c1">200</span>τ
thermostat <span class="pl-k">=</span> <span class="pl-c1">NoseHooverThermostat</span>(T0, <span class="pl-c1">200</span>τ)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/44002501-ffc1aea0-9e5c-11e8-857b-9e3c83197336.png"><img src="https://user-images.githubusercontent.com/16945627/44002501-ffc1aea0-9e5c-11e8-857b-9e3c83197336.png" alt="nose-hoover thermostating" style="max-width:100%;"></a></p>
<h3><a id="user-content-langevin-thermostat" class="anchor" aria-hidden="true" href="#langevin-thermostat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Langevin Thermostat</h3>
<div class="highlight highlight-source-julia"><pre>γ <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
thermostat <span class="pl-k">=</span> <span class="pl-c1">LangevinThermostat</span>(<span class="pl-c1">90</span>, γ)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/44002505-0683c6b0-9e5d-11e8-8647-5b15b98eb0fa.png"><img src="https://user-images.githubusercontent.com/16945627/44002505-0683c6b0-9e5d-11e8-8647-5b15b98eb0fa.png" alt="langevin thermostating" style="max-width:100%;"></a></p>
<h2><a id="user-content-analyzing-the-result-of-simulation" class="anchor" aria-hidden="true" href="#analyzing-the-result-of-simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Analyzing the Result of Simulation</h2>
<p>Once the simulation is completed, one can analyze the result and obtain some useful characteristics of the system.</p>
<p>Function <code>run_simulation</code> returns a structure containing the initial parameters of simulation and the solution of differential equation (DE) required for description of the corresponding system of particles. There are different functions which help to interpret solution of DEs into physical quantities.</p>
<p>One of the main characteristics of a system during molecular dynamics simulations is its thermodynamic temperature. The value of the temperature at a particular time <code>t</code> can be obtained via calling this function:</p>
<div class="highlight highlight-source-julia"><pre>T <span class="pl-k">=</span> <span class="pl-c1">temperature</span>(result, t) </pre></div>
<h3><a id="user-content-radial-distribution-functions" class="anchor" aria-hidden="true" href="#radial-distribution-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://en.wikipedia.org/wiki/Radial_distribution_function" rel="nofollow">Radial distribution functions</a></h3>
<p>The RDF is another popular and essential characteristic of molecules or similar systems of particles. It shows the reciprocal location of particles averaged by the time of simulation.</p>
<div class="highlight highlight-source-julia"><pre>(rs, grf) <span class="pl-k">=</span> <span class="pl-c1">rdf</span>(result)</pre></div>
<p>The dependence of <code>grf</code> on <code>rs</code> shows radial distribution of particles at different distances from an average particle in a system.
Here the radial distribution function for the classic system of liquid argon is presented:
<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/43990348-843b164c-9d74-11e8-8d9e-daaff142c0b7.png"><img src="https://user-images.githubusercontent.com/16945627/43990348-843b164c-9d74-11e8-8d9e-daaff142c0b7.png" alt="rdf for liquid argon" style="max-width:100%;"></a></p>
<h3><a id="user-content-mean-squared-displacement-msd" class="anchor" aria-hidden="true" href="#mean-squared-displacement-msd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mean Squared Displacement (MSD)</h3>
<p>The MSD characteristic can be used to estimate the shift of particles from their initial positions.</p>
<div class="highlight highlight-source-julia"><pre>(ts, dr2) <span class="pl-k">=</span> <span class="pl-c1">msd</span>(result)</pre></div>
<p>For a standard liquid argon system the displacement grows with time:
<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/16945627/43990362-9a67c0aa-9d74-11e8-9512-08840294d411.png"><img src="https://user-images.githubusercontent.com/16945627/43990362-9a67c0aa-9d74-11e8-9512-08840294d411.png" alt="rdf for liquid argon" style="max-width:100%;"></a></p>
<h3><a id="user-content-energy-functions" class="anchor" aria-hidden="true" href="#energy-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Energy Functions</h3>
<p>Energy is a highly important physical characteristic of a system. The module provides four functions to obtain it, though the <code>total_energy</code> function just sums potential and kinetic energy:</p>
<div class="highlight highlight-source-julia"><pre>e_init <span class="pl-k">=</span> <span class="pl-c1">initial_energy</span>(simualtion)
e_kin <span class="pl-k">=</span> <span class="pl-c1">kinetic_energy</span>(result, t)
e_pot <span class="pl-k">=</span> <span class="pl-c1">potential_energy</span>(result, t)
e_tot <span class="pl-k">=</span> <span class="pl-c1">total_energy</span>(result, t)</pre></div>
<h2><a id="user-content-plotting-images" class="anchor" aria-hidden="true" href="#plotting-images"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plotting Images</h2>
<p>Using tools of NBodySimulator one can export results of simulation into a <a href="https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)" rel="nofollow">Protein Database File</a>. <a href="http://www.ks.uiuc.edu/Research/vmd/" rel="nofollow">VMD</a> is a well-known tool for visualizing molecular dynamics, which can read data from PDB files.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">save_to_pdb</span>(result, <span class="pl-s"><span class="pl-pds">"</span>path_to_a_new_pdb_file.pdb<span class="pl-pds">"</span></span> )</pre></div>
<p>In future it will be possible to export results via FileIO interface and its <code>save</code> function.</p>
<p>Using Plots.jl one can draw positions of particles at any time of simulation or create an animation of moving particles, molecules of water:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(result)
<span class="pl-c1">animate</span>(result, <span class="pl-s"><span class="pl-pds">"</span>path_to_file.gif<span class="pl-pds">"</span></span>)</pre></div>
<p>Makie.jl also has a recipe for plotting results of N-body simulations. The <a href="http://makie.juliaplots.org/stable/examples-meshscatter.html#Type-recipe-for-molecule-simulation-1" rel="nofollow">example</a> is presented in the documentation.</p>
</article></div>