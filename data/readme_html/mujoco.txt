<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mujoco" class="anchor" aria-hidden="true" href="#mujoco"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MuJoCo</h1>
<p><em>A Julia wrapper for the MuJoCo physics simulator, a physics simulator designed for
multi-joint dynamics with contacts that has become a standard in robotics,
reinforcement learning, and trajectory optimization, both in both academia and industry.</em></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/Lyceum/MuJoCo.jl/workflows/CI/badge.svg"><img src="https://github.com/Lyceum/MuJoCo.jl/workflows/CI/badge.svg" alt="" style="max-width:100%;"></a></p>
<p><code>MuJoCo.jl</code> is part of the <a href="https://www.lyceum.ml" rel="nofollow">Lyceum</a>, a software suite for
machine learning, control, and trajectory optimization. For an example of how to use
MuJoCo.jl, check out <a href="https://github.com/Lyceum/LyceumMuJoCo.jl">LyceumMuJoCo.jl</a>.</p>
<h2><a id="user-content-obtaining-a-license" class="anchor" aria-hidden="true" href="#obtaining-a-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Obtaining a License</h2>
<p>To use MuJoCo, you'll need a valid license which you can obtain from
<a href="https://www.roboti.us/license.html" rel="nofollow">here</a>. Up to three, thirty-day trials can be obtained
for free from MuJoCo's webiste and students are eligible for a free personal license.
Once you have obtained the license file, set the environment variable <code>MUJOCO_KEY_PATH</code>
to point to its location. On Linux machines this would look like:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$ export MUJOCO_KEY_PATH=/path/to/mjkey.txt
"><pre><code>$ export MUJOCO_KEY_PATH=/path/to/mjkey.txt
</code></pre></div>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h2>
<p><strong>MuJoCo.jl</strong> provides the following:</p>
<ol>
<li><code>MuJoCo.MJCore</code>: A minimal wrapper for the <a href="http://mujoco.org/" rel="nofollow">MuJoCo</a> physics simulator,
providing a nearly one-to-one mapping to MuJoCo's C interface. MuJoCo features that Julia already
provides are not wrapped (e.g. <code>mju_add3</code> is just a normal array operation). Additionally, MuJoCo's
C interface may be altered in cases where it improves ease of use or safety (e.g. MuJoCo.jl never
requires pre-allocated error string buffers to be passed in).</li>
<li><code>MuJoCo</code>: Zero-cost abstractions over the types contained in <code>MuJoCo.MJCore</code> that
provide a more convenient interface for interacting with MuJoCo (e.g. by wrapping a raw
<code>Ptr{Float64}</code> with a <code>Array{Float64}</code>). These types are compatible with all the functions
defined in <code>MuJoCo.MJCore</code>. We also provide extra utility functions that you may find useful. These functions and types are prefixed with <code>jl_</code> and <code>jl</code>, respectively.</li>
</ol>
<p>Functions from each module are exported by MuJoCo.jl, while only the types in <code>MuJoCo</code> are exported (e.g. <code>jlModel</code>). We recommend using these types over the raw <code>MJCore</code> types wherever possible.</p>
<p>All functions are documented for convenience:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="help?&gt; mj_step
"><pre><code>help?&gt; mj_step
</code></pre></div>
<p>For more complete about the MuJoCo physics simulator, see <a href="http://www.mujoco.org/book" rel="nofollow">MuJoCo's documentation</a>.</p>
<h3><a id="user-content-mujoco-1" class="anchor" aria-hidden="true" href="#mujoco-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MuJoCo</h3>
<h4><a id="user-content-jldata-and-jlmodel" class="anchor" aria-hidden="true" href="#jldata-and-jlmodel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>jlData</code> and <code>jlModel</code></h4>
<p><code>MuJoCo</code> provides <code>jlData</code> and <code>jlModel</code> which differ from <code>MJCore.mjData</code> and <code>MJCore.mjModel</code> as follows:</p>
<ol>
<li>Fields of type <code>SArray{S,T,N}</code> become <code>Array{T, N}</code> (see <a href="https://github.com/Lyceum/MuJoCo.jl/issues/7">#7</a>)</li>
<li>Field of type <code>Ptr{T&lt;:Number}</code> become <code>Array{T, N}</code> (e.g. <code>size(jlData.qpos) == (nq, )</code>).</li>
<li>For fields that change size dynamically (e.g. <code>mjData.contact</code>), we provide
dynamically-sized <code>view</code>'s into the underlying array (e.g. <code>size(jlData.contact) == (ncon, )</code> not <code>(nconmax, )</code>).</li>
<li>Fields that are not useful in Julia are not exposed (e.g. <code>mjData.buffer</code>)</li>
<li><code>mj_deleteModel</code>/<code>mj_deleteData</code> are called by Julia's garbage collector automatically.</li>
</ol>
<p><code>jlData</code> and <code>jlModel</code> (as well as <code>mjData</code> and <code>mjModel</code>) are mutable structs, while the fields of these types are not. To assist in mutating nested structs, we recommend using the <code>@set!!</code> macro provided by <a href="https://github.com/tkf/BangBang.jl">BangBang.jl</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MuJoCo, BangBang
m = jlModel(&quot;humanoid.xml&quot;)
@assert m.opt.timestep == 0.002
@set!! m.opt.timestep = 0.001
@assert m.opt.timestep == 0.001
"><pre><span class="pl-k">using</span> MuJoCo, BangBang
m <span class="pl-k">=</span> <span class="pl-c1">jlModel</span>(<span class="pl-s"><span class="pl-pds">"</span>humanoid.xml<span class="pl-pds">"</span></span>)
<span class="pl-c1">@assert</span> m<span class="pl-k">.</span>opt<span class="pl-k">.</span>timestep <span class="pl-k">==</span> <span class="pl-c1">0.002</span>
<span class="pl-c1">@set!!</span> m<span class="pl-k">.</span>opt<span class="pl-k">.</span>timestep <span class="pl-k">=</span> <span class="pl-c1">0.001</span>
<span class="pl-c1">@assert</span> m<span class="pl-k">.</span>opt<span class="pl-k">.</span>timestep <span class="pl-k">==</span> <span class="pl-c1">0.001</span></pre></div>
<h4><a id="user-content-globals" class="anchor" aria-hidden="true" href="#globals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Globals</h4>
<p>All MuJoCo globals are available under in the <code>MJCore</code> module (e.g. <code>MJCore.mjVISSTRING</code>).
<code>const</code> global primitives like <code>mjMAXIMP</code> and <code>mjVISSTRING</code> are defined directly in Julia,
while global callbacks are stored in a <code>Ref</code>-like object called a <code>CRef</code> and can be used
in the same manner as <code>RefValue</code>. Under the hood, calls to <code>getindex</code>/<code>setindex!</code> perform
the appropriate load/store from the corresponding <code>Ptr{Cvoid}</code>.</p>
<h5><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h5>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert MJCore.mjMAXIMP == 0.9999
@assert MJCore.mjDISABLESTRING[1] == &quot;Constraint&quot;
# Set the `mjcb_user_warning_cb` callback to generate Julia warnings (note that MuJoCo.jl
# already installs proper warning/error handlers, which you most likely don't want to override)
my_warning_cb() = (@warn unsafe_string(msg); nothing)
warncb = @cfunction(my_warning_cb, Cvoid, (Cstring,))
MJCore.mju_user_warning[] = warncb
"><pre><span class="pl-c1">@assert</span> MJCore<span class="pl-k">.</span>mjMAXIMP <span class="pl-k">==</span> <span class="pl-c1">0.9999</span>
<span class="pl-c1">@assert</span> MJCore<span class="pl-k">.</span>mjDISABLESTRING[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Constraint<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> Set the `mjcb_user_warning_cb` callback to generate Julia warnings (note that MuJoCo.jl</span>
<span class="pl-c"><span class="pl-c">#</span> already installs proper warning/error handlers, which you most likely don't want to override)</span>
<span class="pl-en">my_warning_cb</span>() <span class="pl-k">=</span> (<span class="pl-c1">@warn</span> <span class="pl-c1">unsafe_string</span>(msg); <span class="pl-c1">nothing</span>)
warncb <span class="pl-k">=</span> <span class="pl-c1">@cfunction</span>(my_warning_cb, Cvoid, (Cstring,))
MJCore<span class="pl-k">.</span>mju_user_warning[] <span class="pl-k">=</span> warncb</pre></div>
<p>See <a href="https://julialang.org/blog/2013/05/callback" rel="nofollow">this blog post</a> for more information on how to set C callbacks from Julia.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>MuJoCo.jl is currently registered in Lyceum's package registry. Until it is moved to General,
you will need to add <code>Lyceum/LyceumRegistry</code>.</p>
<p>From the Julia REPL, type <code>]</code> to enter Pkg mode:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.3) pkg&gt; registry add https://github.com/Lyceum/LyceumRegistry.git
(v1.3) pkg&gt; add MuJoCo
"><pre lang="julia-repl"><code>julia&gt; ]
(v1.3) pkg&gt; registry add https://github.com/Lyceum/LyceumRegistry.git
(v1.3) pkg&gt; add MuJoCo
</code></pre></div>
<p>Below we simulate passive dynamics and print out joint positions
at each timestep:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MuJoCo
mj_activate(&quot;mjkey.txt&quot;)
# alternatively: set the environment variable `MUJOCO_KEY_PATH`
#                before `using MuJoCo`.

m = jlModel(&quot;humanoid.xml&quot;)
d = jlData(m)
for i=1:100
    mj_step(m, d);
    println(d.qpos)
end
"><pre><span class="pl-k">using</span> MuJoCo
<span class="pl-c1">mj_activate</span>(<span class="pl-s"><span class="pl-pds">"</span>mjkey.txt<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> alternatively: set the environment variable `MUJOCO_KEY_PATH`</span>
<span class="pl-c"><span class="pl-c">#</span>                before `using MuJoCo`.</span>

m <span class="pl-k">=</span> <span class="pl-c1">jlModel</span>(<span class="pl-s"><span class="pl-pds">"</span>humanoid.xml<span class="pl-pds">"</span></span>)
d <span class="pl-k">=</span> <span class="pl-c1">jlData</span>(m)
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-c1">mj_step</span>(m, d);
    <span class="pl-c1">println</span>(d<span class="pl-k">.</span>qpos)
<span class="pl-k">end</span></pre></div>
<p>and compared to C:</p>
<div class="highlight highlight-source-c position-relative" data-snippet-clipboard-copy-content="#include &quot;mujoco.h&quot;
#include &lt;stdio.h&gt;
char error[1000] = &quot;Could not load xml model&quot;;
mj_activate(&quot;mjkey.txt&quot;);

m = mj_loadXML(&quot;humanoid.xml&quot;, 0, error, 1000);
d = mj_makeData(m);
for( int step=0; step&lt;100; step++ )
{
    mj_step(m, d);
    for(i=0; i &lt; m-&gt;nq; i++)
        printf(&quot;%d &quot;, d-&gt;qpos[i]);
    printf(&quot;\n&quot;);
}
mj_deleteData(d);
mj_deleteModel(m);
"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>mujoco.h<span class="pl-pds">"</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>stdio.h<span class="pl-pds">&gt;</span></span>
<span class="pl-k">char</span> error[<span class="pl-c1">1000</span>] = <span class="pl-s"><span class="pl-pds">"</span>Could not load xml model<span class="pl-pds">"</span></span>;
<span class="pl-en">mj_activate</span>(<span class="pl-s"><span class="pl-pds">"</span>mjkey.txt<span class="pl-pds">"</span></span>);

m = mj_loadXML(<span class="pl-s"><span class="pl-pds">"</span>humanoid.xml<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>, error, <span class="pl-c1">1000</span>);
d = mj_makeData(m);
<span class="pl-k">for</span>( <span class="pl-k">int</span> step=<span class="pl-c1">0</span>; step&lt;<span class="pl-c1">100</span>; step++ )
{
    <span class="pl-c1">mj_step</span>(m, d);
    <span class="pl-k">for</span>(i=<span class="pl-c1">0</span>; i &lt; m-&gt;<span class="pl-smi">nq</span>; i++)
        <span class="pl-c1">printf</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-c1">%d</span> <span class="pl-pds">"</span></span>, d-&gt;<span class="pl-smi">qpos</span>[i]);
    <span class="pl-c1">printf</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>);
}
<span class="pl-en">mj_deleteData</span>(d);
<span class="pl-en">mj_deleteModel</span>(m);</pre></div>
<p><strong>Big thanks to <a href="https://github.com/klowrey">@klowrey</a> for providing the <a href="https://github.com/klowrey/MuJoCo.jl">original</a> MuJoCo wrapper</strong>.</p>
</article></div>