<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-inplaceopsjl" class="anchor" aria-hidden="true" href="#inplaceopsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InplaceOps.jl</h1>
<p><a href="https://travis-ci.org/simonbyrne/InplaceOps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a70a56ea26ba4018b09808373be9122cc0e79fb8/68747470733a2f2f7472617669732d63692e6f72672f73696d6f6e6279726e652f496e706c6163654f70732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/simonbyrne/InplaceOps.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/simonbyrne/inplaceops-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/dc35aee594d4dcf86b5dbb7d64b06968438e14bd/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6b316d6e3367376d66343361356365302f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/k1mn3g7mf43a5ce0/branch/master?svg=true" style="max-width:100%;"></a></p>
<p>InplaceOps.jl is a <a href="http://julialang.org/" rel="nofollow">Julia</a> package that provides macros
that enable a simple syntax for performing in-place (i.e. overwriting) array
operations using standard arithmetic operators.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>InplaceOps.jl provides a macro <code>@!</code> which rewrites expressions of the form:</p>
<ul>
<li><code>C = A*B</code> to <code>mul!(C,A,B)</code></li>
<li><code>C = C*B</code> or <code>C *= B</code> to <code>rmul!(C,B)</code></li>
<li><code>C = A*C</code> to <code>lmul!(A,B)</code></li>
<li><code>C = A/B</code> to <code>rdiv!(C,A,B)</code></li>
<li><code>C = C/B</code> or <code>C /= B</code> to <code>rdiv!(C,B)</code></li>
<li><code>C = A\B</code> to <code>ldiv!(C,A,B)</code></li>
<li><code>C = A\C</code> to <code>ldiv!(A,B)</code></li>
</ul>
<p>Functionality for broadcasting is no longer supported. Use the Base <code>@.</code> macro instead.</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra, InplaceOps

julia<span class="pl-k">&gt;</span> T <span class="pl-k">=</span> <span class="pl-c1">UpperTriangular</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> UpperTriangular{Float64,Array{Float64,<span class="pl-c1">2</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
  <span class="pl-k">⋅</span>   <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>   <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>   <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>   <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> x_orig <span class="pl-k">=</span> x <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">4.0</span>,<span class="pl-c1">5.0</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">4.0</span>
 <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> @<span class="pl-k">!</span> x <span class="pl-k">=</span> T <span class="pl-k">\</span> x
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">===</span> x_orig
<span class="pl-c1">true</span></pre></div>
</article></div>