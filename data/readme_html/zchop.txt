<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-zchop" class="anchor" aria-hidden="true" href="#zchop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ZChop</h1>
<p dir="auto"><em>Replace small numbers with zero, or round numbers</em></p>
<p dir="auto"><a href="https://github.com/jlapeyre/ZChop.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/jlapeyre/ZChop.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/jlapeyre/ZChop.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/db3dd0caa975c10d057116fcaa3c846598ded410c7e46c0d9387deb5a05d8d5e/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6c6170657972652f5a43686f702e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jlapeyre/ZChop.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://github.com/aviatesk/JET.jl"><img src="https://camo.githubusercontent.com/3de76230f538a94a3ea8c5dc7c7abb94992d39a234fbb796184101d790424d9e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a45542e6a6c2d2545322539432538382545462542382538462d253233616134343434" alt="JET QA" data-canonical-src="https://img.shields.io/badge/JET.jl-%E2%9C%88%EF%B8%8F-%23aa4444" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/jlapeyre/zchop-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/93e1e5c909c7c0ef9760e7973b9e6f00e9ea35e5fe46834cc6f960c9e5e3b4d1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a6c6170657972652f5a43686f702e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/jlapeyre/ZChop.jl?branch=master&amp;svg=true" style="max-width: 100%;"></a>
     </p>
<h3 dir="auto"><a id="user-content-zchop-1" class="anchor" aria-hidden="true" href="#zchop-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>zchop</code></h3>
<p dir="auto"><code>zchop(x)</code> replaces numbers in <code>x</code> that are close to zero with zero.</p>
<p dir="auto"><code>zchop(x)</code> returns 0 if abs(x) is smaller than 1e-14, and x otherwise.</p>
<p dir="auto"><code>zchop(x,eps)</code> uses eps rather than 1e-14</p>
<p dir="auto"><code>zchop!(a,eps)</code> works inplace on Array a.</p>
<h3 dir="auto"><a id="user-content-nchop" class="anchor" aria-hidden="true" href="#nchop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>nchop</code></h3>
<p dir="auto">The interface and implementation of <code>nchop</code> was done November 16, 2021 and may change.</p>
<p dir="auto"><code>nchop(x, args...; kwargs...)</code> round <code>x</code> using <code>round</code>. If <code>x</code> is a container or nested container, round numbers in the
containers.</p>
<p dir="auto"><code>nchop!</code> a mutating version of <code>nchop</code>.</p>
<h3 dir="auto"><a id="user-content-comments" class="anchor" aria-hidden="true" href="#comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comments</h3>
<ul dir="auto">
<li><code>zchop</code> trims noise only from numbers that should be zero.</li>
<li><code>nchop</code> trims noise from non-zero numbers as well.</li>
<li><code>zchop</code> is often more than 10 time faster than <code>nchop</code>.</li>
<li><code>zchop</code> and <code>nchop</code> are meant to be used at the command line or notebook for convenience</li>
<li><code>zchop</code> is also meant to be efficient at trimming zeros after creating, but before returning, objects in functions.</li>
</ul>
<h3 dir="auto"><a id="user-content-implementing-methods-for-zchop-and-nchop-for-your-types" class="anchor" aria-hidden="true" href="#implementing-methods-for-zchop-and-nchop-for-your-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementing methods for <code>zchop</code> and <code>nchop</code> for your types</h3>
<p dir="auto">It should be enough to implement a method for <code>ZChop.applyf!</code></p>
<h3 dir="auto"><a id="user-content-examples-zchop" class="anchor" aria-hidden="true" href="#examples-zchop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples <code>zchop</code></h3>
<p dir="auto">See also this <a href="https://github.com/jlapeyre/ZChop.jl/blob/master/Notebooks/ZChop.ipynb">Jupyter notebook</a>
for more examples.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FFTW

julia&gt; using ZChop

julia&gt; res = ifft(fft([2,1,1,0,0,0,0]))
7-element Vector{ComplexF64}:
                    2.0 + 0.0im
                    1.0 + 0.0im
                    1.0 + 0.0im
  1.527827807198305e-17 + 0.0im
  5.727136726909545e-18 + 0.0im
                    0.0 + 0.0im
 -6.344131569286608e-17 + 0.0im

julia&gt; zchop(res)
7-element Vector{ComplexF64}:
 2.0 + 0.0im
 1.0 + 0.0im
 1.0 + 0.0im
 0.0 + 0.0im
 0.0 + 0.0im
 0.0 + 0.0im
 0.0 + 0.0im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FFTW

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ZChop

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">ifft</span>(<span class="pl-c1">fft</span>([<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>]))
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
                    <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
                    <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
                    <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">1.527827807198305e-17</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">5.727136726909545e-18</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
                    <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">6.344131569286608e-17</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">zchop</span>(res)
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = exp.((1:4) * im * pi)
4-element Vector{ComplexF64}:
 -1.0 + 1.2246467991473532e-16im
  1.0 - 2.4492935982947064e-16im
 -1.0 + 3.6739403974420594e-16im
  1.0 - 4.898587196589413e-16im

julia&gt; zchop(res)
4-element Vector{ComplexF64}:
 -1.0 + 0.0im
  1.0 + 0.0im
 -1.0 + 0.0im
  1.0 + 0.0im"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">exp</span>.((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>) <span class="pl-k">*</span> im <span class="pl-k">*</span> <span class="pl-c1">pi</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.2246467991473532e-16im</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">-</span> <span class="pl-c1">2.4492935982947064e-16im</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">3.6739403974420594e-16im</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">-</span> <span class="pl-c1">4.898587196589413e-16im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">zchop</span>(res)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SparseArrays

julia&gt; a = sparse([ [1.0,1e-16]  [1e-16, 1.0]])
2×2 SparseMatrixCSC{Float64, Int64} with 4 stored entries:
 1.0      1.0e-16
 1.0e-16  1.0

julia&gt; zchop(a)
2×2 SparseMatrixCSC{Float64, Int64} with 4 stored entries:
 1.0  0.0
 0.0  1.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseArrays

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">sparse</span>([ [<span class="pl-c1">1.0</span>,<span class="pl-c1">1e-16</span>]  [<span class="pl-c1">1e-16</span>, <span class="pl-c1">1.0</span>]])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SparseMatrixCSC{Float64, Int64} with <span class="pl-c1">4</span> stored entries<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>      <span class="pl-c1">1.0e-16</span>
 <span class="pl-c1">1.0e-16</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">zchop</span>(a)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> SparseMatrixCSC{Float64, Int64} with <span class="pl-c1">4</span> stored entries<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span></pre></div>
<h3 dir="auto"><a id="user-content-examples-nchop" class="anchor" aria-hidden="true" href="#examples-nchop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples <code>nchop</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = [7.401486830834377e-17 + 3.700743415417188e-17im
    8.26024732898714e-17 + 7.020733317042351e-17im
      0.9999999999999997 + 1.0000000000000002im
 -1.0177044392397268e-16 - 6.476300976980079e-17im
                     0.0 - 7.401486830834377e-17im
 -4.5595039135699516e-17 - 2.1823706978711105e-16im
  1.2952601953960158e-16 + 0.0im
 -2.1079998571544233e-16 + 5.303212320736824e-17im
                     0.0 - 7.401486830834377e-17im
  -6.476300976980079e-17 + 2.498001805406602e-16im
   7.401486830834377e-17 - 1.4802973661668753e-16im
   1.7379255156127046e-16 + 2.0982745100975517e-17im]

julia&gt; nchop(x)
12-element Vector{ComplexF64}:
  0.0 + 0.0im
  0.0 + 0.0im
  1.0 + 1.0im
 -0.0 - 0.0im
  0.0 - 0.0im
 -0.0 - 0.0im
  0.0 + 0.0im
 -0.0 + 0.0im
  0.0 - 0.0im
 -0.0 + 0.0im
  0.0 - 0.0im
  0.0 + 0.0im"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">7.401486830834377e-17</span> <span class="pl-k">+</span> <span class="pl-c1">3.700743415417188e-17im</span>
    <span class="pl-c1">8.26024732898714e-17</span> <span class="pl-k">+</span> <span class="pl-c1">7.020733317042351e-17im</span>
      <span class="pl-c1">0.9999999999999997</span> <span class="pl-k">+</span> <span class="pl-c1">1.0000000000000002im</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0177044392397268e-16</span> <span class="pl-k">-</span> <span class="pl-c1">6.476300976980079e-17im</span>
                     <span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">7.401486830834377e-17im</span>
 <span class="pl-k">-</span><span class="pl-c1">4.5595039135699516e-17</span> <span class="pl-k">-</span> <span class="pl-c1">2.1823706978711105e-16im</span>
  <span class="pl-c1">1.2952601953960158e-16</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">2.1079998571544233e-16</span> <span class="pl-k">+</span> <span class="pl-c1">5.303212320736824e-17im</span>
                     <span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">7.401486830834377e-17im</span>
  <span class="pl-k">-</span><span class="pl-c1">6.476300976980079e-17</span> <span class="pl-k">+</span> <span class="pl-c1">2.498001805406602e-16im</span>
   <span class="pl-c1">7.401486830834377e-17</span> <span class="pl-k">-</span> <span class="pl-c1">1.4802973661668753e-16im</span>
   <span class="pl-c1">1.7379255156127046e-16</span> <span class="pl-k">+</span> <span class="pl-c1">2.0982745100975517e-17im</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nchop</span>(x)
<span class="pl-c1">12</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<h3 dir="auto"><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details</h3>
<p dir="auto">The type of the numbers is preserved.  For instance, complex numbers
with imaginary part near zero are not replaced with real numbers.</p>
<p dir="auto">zchop works on complex and rational numbers, arrays, and some other structures.
The idea is for zchop to descend into structures, chopping numbers, and acting as the
the identity on anything that can't be sensibly compared to eps.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = Any[ [1e-15, &quot;dog&quot;, (BigFloat(10.0))^-15, complex(1e-15,1), 1 // 10^15],
         [[2,3] [4,1e-15]] ];

julia&gt; zchop(a)
2-element Array{Any,1}:
 {0.0,&quot;dog&quot;,0e+00 with 256 bits of precision,0.0 + 1.0im,0//1}
 2x2 Array{Float64,2}:
 2.0  4.0
 3.0  0.0"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> Any[ [<span class="pl-c1">1e-15</span>, <span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>, (<span class="pl-c1">BigFloat</span>(<span class="pl-c1">10.0</span>))<span class="pl-k">^-</span><span class="pl-c1">15</span>, <span class="pl-c1">complex</span>(<span class="pl-c1">1e-15</span>,<span class="pl-c1">1</span>), <span class="pl-c1">1</span> <span class="pl-k">//</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">15</span>],
         [[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>] [<span class="pl-c1">4</span>,<span class="pl-c1">1e-15</span>]] ];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">zchop</span>(a)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 {<span class="pl-c1">0.0</span>,<span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>,<span class="pl-c1">0e+00</span> with <span class="pl-c1">256</span> bits of precision,<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>,<span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>}
 <span class="pl-c1">2</span>x2 Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">0.0</span></pre></div>
</article></div>