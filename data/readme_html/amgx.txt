<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-amgxjl" class="anchor" aria-hidden="true" href="#amgxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AMGX.jl</h1>
<p><em>AMGX in Julia</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://buildkite.com/julialang/amgx-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3a1851c87ed0d0b081cc1680cb17f335017e2af4528e408da650dde2109b200b/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f63653231646336626632386530353363303263386337323665613063363563633938316132326563323933346530316535362e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://badge.buildkite.com/ce21dc6bf28e053c02c8c726ea0c65cc981a22ec2934e01e56.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/JuliaGPU/AMGX.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a9c26d23b404218bfd0c69e411165bdad89fe149baa9587c45ae85d02d4a02c3/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614750552f414d47582e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaGPU/AMGX.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The AMGX.jl package provides an interface for using NVIDIA's <a href="https://github.com/NVIDIA/AMGX">AMGX</a> library from the Julia language.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is installed using the Julia package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;AMGX&quot;)
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AMGX<span class="pl-pds">"</span></span>)</pre></div>
<p>Currently, only prebuilt binaries are available for Linux, on other operating systems you need to have AMGX available
locally.</p>
<p>Before using the package, reading through the <a href="https://github.com/NVIDIA/AMGX/blob/main/doc/AMGX_Reference.pdf">official API reference docs for
AMGX</a> is recommended.</p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<h3><a id="user-content-initialization" class="anchor" aria-hidden="true" href="#initialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initialization</h3>
<p>If you do not want to use the provided prebuilt binaries, set the environment variable <code>JULIA_AMGX_PATH</code> to the path to the local AMGX library.</p>
<p>The library can now be initialized with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AMGX
AMGX.initialize()
AMGX.initialize_plugins()
"><pre><span class="pl-k">using</span> AMGX
AMGX<span class="pl-k">.</span><span class="pl-c1">initialize</span>()
AMGX<span class="pl-k">.</span><span class="pl-c1">initialize_plugins</span>()</pre></div>
<h3><a id="user-content-config" class="anchor" aria-hidden="true" href="#config"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Config</code></h3>
<p>An AMGX <code>Config</code> can be created from a dictionary or a string:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="config = AMGX.Config(Dict(&quot;monitor_residual&quot; =&gt; 1, &quot;max_iters&quot; =&gt; 10, &quot;store_res_history&quot; =&gt; 1));
"><pre>config <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">Config</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>monitor_residual<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>max_iters<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>, <span class="pl-s"><span class="pl-pds">"</span>store_res_history<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>));</pre></div>
<h3><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Resources</code></h3>
<p>An AMGX <code>Resources</code> object is created from an AMGX <code>Config</code>. Currently, only simple resources are wrapped:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="resources = AMGX.Resources(config)
"><pre>resources <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">Resources</span>(config)</pre></div>
<h3><a id="user-content-mode" class="anchor" aria-hidden="true" href="#mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Mode</code></h3>
<p>The different modes in AMGX are available as:</p>
<ul>
<li><code>AMGX.dDDI</code></li>
<li><code>AMGX.hDFI</code></li>
<li><code>AMGX.hFFI</code></li>
<li><code>AMGX.dDDI</code></li>
<li><code>AMGX.dDFI</code></li>
<li><code>AMGX.dFFI</code></li>
</ul>
<h3><a id="user-content-vector" class="anchor" aria-hidden="true" href="#vector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Vector</code></h3>
<p>An <code>AMGXVector</code> is created from a resource object with a given mode.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="v = AMGX.AMGXVector(resources, AMGX.dDDI)
"><pre>v <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">AMGXVector</span>(resources, AMGX<span class="pl-k">.</span>dDDI)</pre></div>
<p>Data can then be uploaded to the vectorusing <code>upload!</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AMGX.upload!(v, [1.0, 2.0, 3.0])
"><pre>AMGX<span class="pl-k">.</span><span class="pl-c1">upload!</span>(v, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])</pre></div>
<p>Optionally, the "block dimension" can be given:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="v_block = AMGX.AMGXVector(resources, AMGX.dDDI)
AMGX.upload!(v_block, [1.0, 2.0, 3.0, 4.0]; block_dim=2)
"><pre>v_block <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">AMGXVector</span>(resources, AMGX<span class="pl-k">.</span>dDDI)
AMGX<span class="pl-k">.</span><span class="pl-c1">upload!</span>(v_block, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]; block_dim<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>Data can be downloaded from the vector (for example after solving a system) using <code>Vector</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="v_h = Vector(v)
"><pre>v_h <span class="pl-k">=</span> <span class="pl-c1">Vector</span>(v)</pre></div>
<p>It is also possible to download to a preallocated buffer using <code>copy!</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="v_h_buffer = zeros(3)
copy!(v_h_buffer, v)
"><pre>v_h_buffer <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">copy!</span>(v_h_buffer, v)</pre></div>
<p>Note that data can be uploaded / downloaded from arrays already allocated on the GPU (<code>CuArray</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CUDA
v_cu = AMGX.AMGXVector(resources, AMGX.dDDI)
cu = CuVector([1.0, 2.0, 3.0])
AMGX.upload!(v_cu, cu)
cu_buffer = CUDA.zeros(Float64, 3)
copy!(cu_buffer, v_cu)
"><pre><span class="pl-k">using</span> CUDA
v_cu <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">AMGXVector</span>(resources, AMGX<span class="pl-k">.</span>dDDI)
cu <span class="pl-k">=</span> <span class="pl-c1">CuVector</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])
AMGX<span class="pl-k">.</span><span class="pl-c1">upload!</span>(v_cu, cu)
cu_buffer <span class="pl-k">=</span> CUDA<span class="pl-k">.</span><span class="pl-c1">zeros</span>(Float64, <span class="pl-c1">3</span>)
<span class="pl-c1">copy!</span>(cu_buffer, v_cu)</pre></div>
<p>A vector can be set to zero:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="v_zero = AMGX.AMGXVector(resources, AMGX.dDDI)
AMGX.set_zero!(v_zero, 5)
"><pre>v_zero <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">AMGXVector</span>(resources, AMGX<span class="pl-k">.</span>dDDI)
AMGX<span class="pl-k">.</span><span class="pl-c1">set_zero!</span>(v_zero, <span class="pl-c1">5</span>)</pre></div>
<h3><a id="user-content-amgxmatrix" class="anchor" aria-hidden="true" href="#amgxmatrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>AMGXMatrix</code></h3>
<p>Matrices in AMGX are stored in CSR format (as opposed to CSC which is typically used in Julia).
An <code>AMGXMatrix</code> is created from a <code>Resources</code> and a <code>mode</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="matrix = AMGX.AMGXMatrix(resources, AMGX.dDDI)
"><pre>matrix <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">AMGXMatrix</span>(resources, AMGX<span class="pl-k">.</span>dDDI)</pre></div>
<p>Data can be uploaded to it using the 3 CSR arrays:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AMGX.upload!(matrix, 
    Cint[0, 1, 3], # row_ptrs
    Cint[1, 0, 1], # col_indices
    [1.0, 2.0, 3.0] # data
)
"><pre>AMGX<span class="pl-k">.</span><span class="pl-c1">upload!</span>(matrix, 
    Cint[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>], <span class="pl-c"><span class="pl-c">#</span> row_ptrs</span>
    Cint[<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>], <span class="pl-c"><span class="pl-c">#</span> col_indices</span>
    [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>] <span class="pl-c"><span class="pl-c">#</span> data</span>
)</pre></div>
<p>These arrays can also be uploaded from <code>CuArrays</code> already residing on the GPU.</p>
<p>Alternatively, a <code>CUDA.CUSPARSE.CuSparseMatrixCSR</code> can be directly uploaded.</p>
<p>The non zero values can be replaced:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AMGX.replace_coefficients!(matrix, [3.0, 2.0, 1.0])
"><pre>AMGX<span class="pl-k">.</span><span class="pl-c1">replace_coefficients!</span>(matrix, [<span class="pl-c1">3.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>])</pre></div>
<h3><a id="user-content-solver" class="anchor" aria-hidden="true" href="#solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Solver</code></h3>
<p>A solver is created from a <code>Resources</code>, a <code>Mode</code>, and a <code>Config</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="solver = AMGX.Solver(resources, AMGX.dDDI, config)
"><pre>solver <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">Solver</span>(resources, AMGX<span class="pl-k">.</span>dDDI, config)</pre></div>
<p>A system can now be solved as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = AMGX.AMGXVector(resources, AMGX.dDDI)
AMGX.set_zero!(x, 3)
AMGX.setup!(solver, matrix)
AMGX.solve!(x, solver, v)
"><pre>x <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">AMGXVector</span>(resources, AMGX<span class="pl-k">.</span>dDDI)
AMGX<span class="pl-k">.</span><span class="pl-c1">set_zero!</span>(x, <span class="pl-c1">3</span>)
AMGX<span class="pl-k">.</span><span class="pl-c1">setup!</span>(solver, matrix)
AMGX<span class="pl-k">.</span><span class="pl-c1">solve!</span>(x, solver, v)</pre></div>
<p>The solution vector can now be downloaded:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Vector(x)
"><pre><span class="pl-c1">Vector</span>(x)</pre></div>
<p>After a solve, the status can be retrieved using <code>AMGX.get_status(solver)</code>. It is of type <code>AMGX.SolverStatus</code> and can be either:</p>
<ul>
<li><code>AMGX.SUCCESS</code></li>
<li><code>AMGX.FAILED</code></li>
<li><code>AMGX.DIVERGED</code></li>
</ul>
<p>The total number of iterations can be retrieved with <code>AMGX.get_iterations_number(solver)</code>.</p>
<p>The residual for a given iteration can be retrieved with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AMGX.get_iteration_residual(solver)
AMGX.get_iteration_residual(solver, 0)
"><pre>AMGX<span class="pl-k">.</span><span class="pl-c1">get_iteration_residual</span>(solver)
AMGX<span class="pl-k">.</span><span class="pl-c1">get_iteration_residual</span>(solver, <span class="pl-c1">0</span>)</pre></div>
<h3><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utilities</h3>
<h4><a id="user-content-version-information" class="anchor" aria-hidden="true" href="#version-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Version information</h4>
<p>The API version is retrieved with <code>AMGX.api_version()</code>.
Some more version info can be printed using <code>AMGX.versioninfo()</code>.</p>
<h4><a id="user-content-pinningunpinning-memory" class="anchor" aria-hidden="true" href="#pinningunpinning-memory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pinning/Unpinning memory</h4>
<p>For performance, it is recommended to pin host memory before uploading it to the GPU. Pinning and unpinning of memory is done using:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="v = rand(5)
AMGX.pin_memory(v)
AMGX.unpin_memory(v)
"><pre>v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>)
AMGX<span class="pl-k">.</span><span class="pl-c1">pin_memory</span>(v)
AMGX<span class="pl-k">.</span><span class="pl-c1">unpin_memory</span>(v)</pre></div>
<h4><a id="user-content-print-callback" class="anchor" aria-hidden="true" href="#print-callback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Print callback</h4>
<p>By default, the AMGX library prints various things to <code>stdout</code>. This can be overridden by registering a print callback, which is a Julia function accepting a <code>String</code> and returning <code>nothing</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="str = &quot;&quot;
store_to_str(amgx_printed::String) = (global str = amgx_printed; nothing)
AMGX.register_print_callback(store_to_str)
c_config = AMGX.Config(&quot;&quot;)
print(str)
print_stdout(amgx_printed::String) = print(stdout, amgx_printed)
AMGX.register_print_callback(print_stdout)
"><pre>str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
<span class="pl-en">store_to_str</span>(amgx_printed<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> (<span class="pl-k">global</span> str <span class="pl-k">=</span> amgx_printed; <span class="pl-c1">nothing</span>)
AMGX<span class="pl-k">.</span><span class="pl-c1">register_print_callback</span>(store_to_str)
c_config <span class="pl-k">=</span> AMGX<span class="pl-k">.</span><span class="pl-c1">Config</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">print</span>(str)
<span class="pl-en">print_stdout</span>(amgx_printed<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">print</span>(<span class="pl-c1">stdout</span>, amgx_printed)
AMGX<span class="pl-k">.</span><span class="pl-c1">register_print_callback</span>(print_stdout)</pre></div>
<h4><a id="user-content-signal-handlers" class="anchor" aria-hidden="true" href="#signal-handlers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signal handlers</h4>
<p>Signal handlers can be installed and reset using:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AMGX.install_signal_handler()
AMGX.reset_signal_handler()
"><pre>AMGX<span class="pl-k">.</span><span class="pl-c1">install_signal_handler</span>()
AMGX<span class="pl-k">.</span><span class="pl-c1">reset_signal_handler</span>()</pre></div>
<h2><a id="user-content-memory-management-and-finalizing" class="anchor" aria-hidden="true" href="#memory-management-and-finalizing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Memory management and finalizing</h2>
<p>You need to explicitly free memory of every AMGX object (<code>Config</code>, <code>Resources</code>, <code>AMGXVector</code>, <code>AMGXMatrix</code>, <code>Solver</code>) created using the julia call
<code>close</code>.
Using <a href="https://github.com/adambrewster/Defer.jl">Defer.jl</a> can significantly
increase the convenience of this.</p>
<p>AMGX.jl contains a reference counting system so that it errors if you try to close things in the wrong order (e.g. closing the <code>Resources</code> object before the <code>AMGXVector</code> created from it is closed (destroyed))</p>
<p>When usage of the library is done, it should be finalized with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AMGX.finalize_plugins()
AMGX.finalize()
"><pre>AMGX<span class="pl-k">.</span><span class="pl-c1">finalize_plugins</span>()
AMGX<span class="pl-k">.</span><span class="pl-c1">finalize</span>()</pre></div>
<h2><a id="user-content-not-implemented" class="anchor" aria-hidden="true" href="#not-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Not implemented:</h2>
<p>The following functions from the C-API are not yet implemented:</p>
<ul>
<li><code>AMGX_read_system</code></li>
<li><code>AMGX_read_system_distributed</code></li>
<li><code>AMGX_write_system</code></li>
<li><code>AMGX_write_system_distributed</code></li>
<li><code>AMGX_config_create_from_file</code></li>
<li><code>AMGX_config_get_default_number_of_rings</code></li>
<li><code>AMGX_resources_create</code> (only simple is currently wrapped)</li>
<li><code>AMGX_matrix_upload_all_global</code></li>
<li><code>AMGX_matrix_comm_from_maps</code></li>
<li><code>AMGX_matrix_comm_from_maps_one_ring</code></li>
<li><code>AMGX_vector_bind</code></li>
</ul>
</article></div>