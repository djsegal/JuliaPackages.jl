<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lehmann" class="anchor" aria-hidden="true" href="#lehmann"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lehmann</h1>
<p dir="auto"><a href="https://numericaleft.github.io/Lehmann.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://numericaleft.github.io/Lehmann.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/numericaleft/Lehmann.jl/actions"><img src="https://github.com/kunyuan/Lehmann.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/numericaleft/Lehmann.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1891ace3cc7f3afa8a9c35a939a8f7962981b9a7c388cb0dc9b503986ca2d1e9/68747470733a2f2f636f6465636f762e696f2f67682f6e756d65726963616c6566742f4c65686d616e6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d556961376a34446e5239" alt="codecov" data-canonical-src="https://codecov.io/gh/numericaleft/Lehmann.jl/branch/main/graph/badge.svg?token=Uia7j4DnR9" style="max-width: 100%;"></a></p>

<p dir="auto">This package provides subroutines to represent and manuipulate Green's functions in the imaginary-time or in the Matsubara-frequency domain.</p>
<p dir="auto">Imaginary-time Green's functions encode the thermodynamic properites of quantum many-body systems. At low temperature, they are typically very singular and hard to deal with in numerical calculations.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto">We provide the following components to ease the numerical manipulation of the Green's functions:</p>
<ul dir="auto">
<li>
<p dir="auto">Algorithms to generate the discrete Lehamnn representation (DLR), which is a generic and  compact representation of Green's functions proposed in the Ref. [1]. In general, DLR only requres ~ log(1/T)log(1/ϵ) numbers to represent a Green's function at a temperature T up to a given accuracy ϵ. In this package, two algorithms are provided: one algorithm is based on conventional QR algorithm, another is based on a functional QR algorithm. The latter extends DLR to extremely low temperature.</p>
</li>
<li>
<p dir="auto">Dedicated DLR for Green's functions with the particle-hole symmetry (e.g. phonon propagator) or with the particle-hole antisymmetry (e.g. superconductor gap function).</p>
</li>
<li>
<p dir="auto">Fast and accurate Fourier transform between the imaginary-time domain and the Matsubara-frequency domain with a cost O(log(1/T)log(1/ϵ)) and an accuracy ~100ϵ.</p>
</li>
<li>
<p dir="auto">Fast and accurate Green's function interpolation with a cost O(log(1/T)log(1/ϵ)) and an accuracy ~100ϵ.</p>
</li>
<li>
<p dir="auto">Fit a Green's function with noisy.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package has been registered. So, simply type <code>import Pkg; Pkg.add("Lehmann")</code> in the Julia REPL to install.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">In the following <a href="example/demo.jl">demo</a>, we will show how to compress a Green's function of ~10000 data point into ~20 DLR coefficients, and perform fast interpolation and fourier transform up to the accuracy ~1e-10.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Lehmann
β = 100.0 # inverse temperature
Euv = 1.0 # ultraviolt energy cutoff of the Green's function
rtol = 1e-8 # accuracy of the representation
isFermi = false
symmetry = :none # :ph if particle-hole symmetric, :pha is antisymmetric, :none if there is no symmetry

diff(a, b) = maximum(abs.(a - b)) # return the maximum deviation between a and b

dlr = DLRGrid(Euv, β, rtol, isFermi, symmetry) #initialize the DLR parameters and basis
# A set of most representative grid points are generated:
# dlr.ω gives the real-frequency grids
# dlr.τ gives the imaginary-time grids
# dlr.ωn and dlr.n gives the Matsubara-frequency grids. The latter is the integer version.

println(&quot;Prepare the Green's function sample ...&quot;)
Nτ, Nωn = 10000, 10000 # many τ and n points are needed because Gτ is quite singular near the boundary
τgrid = collect(LinRange(0.0, β, Nτ))  # create a τ grid
Gτ = Sample.SemiCircle(dlr, :τ, τgrid) # Use semicircle spectral density to generate the sample Green's function in τ
ngrid = collect(-Nωn:Nωn)  # create a set of Matsubara-frequency points
Gn = Sample.SemiCircle(dlr, :n, ngrid) # Use semicircle spectral density to generate the sample Green's function in ωn

println(&quot;Compress Green's function into ~20 coefficients ...&quot;)
spectral_from_Gτ = tau2dlr(dlr, Gτ, τgrid)
spectral_from_Gω = matfreq2dlr(dlr, Gn, ngrid)
# You can use the above functions to fit noisy data by providing the named parameter ``error``

println(&quot;Prepare the target Green's functions to benchmark with ...&quot;)
τ = collect(LinRange(0.0, β, Nτ * 2))  # create a dense τ grid to interpolate
Gτ_target = Sample.SemiCircle(dlr, :τ, τ)
n = collect(-2Nωn:2Nωn)  # create a set of Matsubara-frequency points
Gn_target = Sample.SemiCircle(dlr, :n, n)

println(&quot;Interpolation benchmark ...&quot;)
Gτ_interp = dlr2tau(dlr, spectral_from_Gτ, τ)
println(&quot;τ → τ accuracy: &quot;, diff(Gτ_interp, Gτ_target))
Gn_interp = dlr2matfreq(dlr, spectral_from_Gω, n)
println(&quot;iω → iω accuracy: &quot;, diff(Gn_interp, Gn_target))

println(&quot;Fourier transform benchmark...&quot;)
Gτ_to_n = dlr2matfreq(dlr, spectral_from_Gτ, n)
println(&quot;τ → iω accuracy: &quot;, diff(Gτ_to_n, Gn_target))
Gn_to_τ = dlr2tau(dlr, spectral_from_Gω, τ)
println(&quot;iω → τ accuracy: &quot;, diff(Gn_to_τ, Gτ_target))"><pre><span class="pl-k">using</span> Lehmann
β <span class="pl-k">=</span> <span class="pl-c1">100.0</span> <span class="pl-c"><span class="pl-c">#</span> inverse temperature</span>
Euv <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> ultraviolt energy cutoff of the Green's function</span>
rtol <span class="pl-k">=</span> <span class="pl-c1">1e-8</span> <span class="pl-c"><span class="pl-c">#</span> accuracy of the representation</span>
isFermi <span class="pl-k">=</span> <span class="pl-c1">false</span>
symmetry <span class="pl-k">=</span> <span class="pl-c1">:none</span> <span class="pl-c"><span class="pl-c">#</span> :ph if particle-hole symmetric, :pha is antisymmetric, :none if there is no symmetry</span>

<span class="pl-en">diff</span>(a, b) <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(<span class="pl-c1">abs</span>.(a <span class="pl-k">-</span> b)) <span class="pl-c"><span class="pl-c">#</span> return the maximum deviation between a and b</span>

dlr <span class="pl-k">=</span> <span class="pl-c1">DLRGrid</span>(Euv, β, rtol, isFermi, symmetry) <span class="pl-c"><span class="pl-c">#</span>initialize the DLR parameters and basis</span>
<span class="pl-c"><span class="pl-c">#</span> A set of most representative grid points are generated:</span>
<span class="pl-c"><span class="pl-c">#</span> dlr.ω gives the real-frequency grids</span>
<span class="pl-c"><span class="pl-c">#</span> dlr.τ gives the imaginary-time grids</span>
<span class="pl-c"><span class="pl-c">#</span> dlr.ωn and dlr.n gives the Matsubara-frequency grids. The latter is the integer version.</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Prepare the Green's function sample ...<span class="pl-pds">"</span></span>)
Nτ, Nωn <span class="pl-k">=</span> <span class="pl-c1">10000</span>, <span class="pl-c1">10000</span> <span class="pl-c"><span class="pl-c">#</span> many τ and n points are needed because Gτ is quite singular near the boundary</span>
τgrid <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">LinRange</span>(<span class="pl-c1">0.0</span>, β, Nτ))  <span class="pl-c"><span class="pl-c">#</span> create a τ grid</span>
Gτ <span class="pl-k">=</span> Sample<span class="pl-k">.</span><span class="pl-c1">SemiCircle</span>(dlr, <span class="pl-c1">:τ</span>, τgrid) <span class="pl-c"><span class="pl-c">#</span> Use semicircle spectral density to generate the sample Green's function in τ</span>
ngrid <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-k">-</span>Nωn<span class="pl-k">:</span>Nωn)  <span class="pl-c"><span class="pl-c">#</span> create a set of Matsubara-frequency points</span>
Gn <span class="pl-k">=</span> Sample<span class="pl-k">.</span><span class="pl-c1">SemiCircle</span>(dlr, <span class="pl-c1">:n</span>, ngrid) <span class="pl-c"><span class="pl-c">#</span> Use semicircle spectral density to generate the sample Green's function in ωn</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Compress Green's function into ~20 coefficients ...<span class="pl-pds">"</span></span>)
spectral_from_Gτ <span class="pl-k">=</span> <span class="pl-c1">tau2dlr</span>(dlr, Gτ, τgrid)
spectral_from_Gω <span class="pl-k">=</span> <span class="pl-c1">matfreq2dlr</span>(dlr, Gn, ngrid)
<span class="pl-c"><span class="pl-c">#</span> You can use the above functions to fit noisy data by providing the named parameter ``error``</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Prepare the target Green's functions to benchmark with ...<span class="pl-pds">"</span></span>)
τ <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">LinRange</span>(<span class="pl-c1">0.0</span>, β, Nτ <span class="pl-k">*</span> <span class="pl-c1">2</span>))  <span class="pl-c"><span class="pl-c">#</span> create a dense τ grid to interpolate</span>
Gτ_target <span class="pl-k">=</span> Sample<span class="pl-k">.</span><span class="pl-c1">SemiCircle</span>(dlr, <span class="pl-c1">:τ</span>, τ)
n <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>Nωn<span class="pl-k">:</span><span class="pl-c1">2</span>Nωn)  <span class="pl-c"><span class="pl-c">#</span> create a set of Matsubara-frequency points</span>
Gn_target <span class="pl-k">=</span> Sample<span class="pl-k">.</span><span class="pl-c1">SemiCircle</span>(dlr, <span class="pl-c1">:n</span>, n)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Interpolation benchmark ...<span class="pl-pds">"</span></span>)
Gτ_interp <span class="pl-k">=</span> <span class="pl-c1">dlr2tau</span>(dlr, spectral_from_Gτ, τ)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>τ → τ accuracy: <span class="pl-pds">"</span></span>, <span class="pl-c1">diff</span>(Gτ_interp, Gτ_target))
Gn_interp <span class="pl-k">=</span> <span class="pl-c1">dlr2matfreq</span>(dlr, spectral_from_Gω, n)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>iω → iω accuracy: <span class="pl-pds">"</span></span>, <span class="pl-c1">diff</span>(Gn_interp, Gn_target))

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Fourier transform benchmark...<span class="pl-pds">"</span></span>)
Gτ_to_n <span class="pl-k">=</span> <span class="pl-c1">dlr2matfreq</span>(dlr, spectral_from_Gτ, n)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>τ → iω accuracy: <span class="pl-pds">"</span></span>, <span class="pl-c1">diff</span>(Gτ_to_n, Gn_target))
Gn_to_τ <span class="pl-k">=</span> <span class="pl-c1">dlr2tau</span>(dlr, spectral_from_Gω, τ)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>iω → τ accuracy: <span class="pl-pds">"</span></span>, <span class="pl-c1">diff</span>(Gn_to_τ, Gτ_target))</pre></div>
<h2 dir="auto"><a id="user-content-build-dlr-basis-file" class="anchor" aria-hidden="true" href="#build-dlr-basis-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Build DLR basis file</h2>
<p dir="auto">A set of basis files have been precalcualted and stored in the folder <a href="basis/">basis</a>. They cover most of the use cases. For edge case, you may generate your own basis file use this <a href="build.jl">script</a>.</p>
<p dir="auto">In the above script, user can choose the folder to store the generated basis file. To use the new basis file, simply pass the folder as an argument when create <code>DLRGrid</code> struct. More information can be found in the <a href="https://numericaleft.github.io/Lehmann.jl/dev/lib/dlr/" rel="nofollow">documentation</a></p>
<h2 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h2>
<p dir="auto">If this library helps you to create software or publications, please let us know, and cite</p>
<p dir="auto">[1] <a href="https://arxiv.org/abs/2107.13094" rel="nofollow">"Discrete Lehmann representation of imaginary time Green's functions", Jason Kaye, Kun Chen, and Olivier Parcollet, arXiv:2107.13094</a></p>
<p dir="auto">[2] <a href="https://arxiv.org/abs/2110.06765" rel="nofollow">"libdlr: Efficient imaginary time calculations using the discrete Lehmann representation", Jason Kaye, Kun Chen and Hugo U.R. Strand, arXiv:2110.06765</a></p>
<h2 dir="auto"><a id="user-content-related-package" class="anchor" aria-hidden="true" href="#related-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Package</h2>
<p dir="auto"><a href="https://github.com/jasonkaye/libdlr"><strong>libdlr</strong></a> by Jason Kaye and Hugo U.R. Strand.</p>
<h2 dir="auto"><a id="user-content-questions-and-contributions" class="anchor" aria-hidden="true" href="#questions-and-contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Questions and Contributions</h2>
<p dir="auto">Contributions are very welcome, as are feature requests and suggestions. Please open an issue if you encounter any problems.</p>
</article></div>