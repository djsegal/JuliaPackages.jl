<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaComputing/XML.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaComputing/XML.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<h1 align="center" dir="auto"><a id="user-content-xmljl" class="anchor" aria-hidden="true" href="#xmljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>XML.jl</h1>
<p align="center" dir="auto">Read and write XML in pure Julia.</p>
<p dir="auto"><br><br></p>
<h1 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h1>
<p dir="auto">This package offers fast data structures for reading and writing XML files with a consistent interface:</p>
<br>
<h3 dir="auto"><a id="user-content-nodelazynode-interface" class="anchor" aria-hidden="true" href="#nodelazynode-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Node</code>/<code>LazyNode</code> Interface:</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="nodetype(node)      →   XML.NodeType (an enum type)
tag(node)           →   String or Nothing
attributes(node)    →   Dict{String, String} or Nothing
value(node)         →   String or Nothing
children(node)      →   Vector{typeof(node)}
is_simple(node)     →   Bool (whether node is simple .e.g. &lt;tag&gt;item&lt;/tag&gt;)
simplevalue(node)   →   e.g. &quot;item&quot; from &lt;tag&gt;item&lt;/tag&gt;)"><pre class="notranslate"><code>nodetype(node)      →   XML.NodeType (an enum type)
tag(node)           →   String or Nothing
attributes(node)    →   Dict{String, String} or Nothing
value(node)         →   String or Nothing
children(node)      →   Vector{typeof(node)}
is_simple(node)     →   Bool (whether node is simple .e.g. &lt;tag&gt;item&lt;/tag&gt;)
simplevalue(node)   →   e.g. "item" from &lt;tag&gt;item&lt;/tag&gt;)
</code></pre></div>
<br>
<h3 dir="auto"><a id="user-content-extended-interface-for-lazynode" class="anchor" aria-hidden="true" href="#extended-interface-for-lazynode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extended Interface for <code>LazyNode</code></h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="depth(node)         →   Int
next(node)          →   typeof(node)
prev(node)          →   typeof(node)
parent(node)        →   typeof(node)"><pre class="notranslate"><code>depth(node)         →   Int
next(node)          →   typeof(node)
prev(node)          →   typeof(node)
parent(node)        →   typeof(node)
</code></pre></div>
<p dir="auto"><br><br></p>
<h1 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using XML

filename = joinpath(dirname(pathof(XML)), &quot;..&quot;, &quot;test&quot;, &quot;books.xml&quot;)

doc = read(filename, Node)

children(doc)
# 2-Element Vector{Node}:
#  Node Declaration &lt;?xml version=&quot;1.0&quot;?&gt;
#  Node Element &lt;catalog&gt; (12 children)

doc[end]  # The root node
# Node Element &lt;catalog&gt; (12 children)

doc[end][2]  # Second child of root
# Node Element &lt;book id=&quot;bk102&quot;&gt; (6 children)"><pre><span class="pl-k">using</span> XML

filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(XML)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>books.xml<span class="pl-pds">"</span></span>)

doc <span class="pl-k">=</span> <span class="pl-c1">read</span>(filename, Node)

<span class="pl-c1">children</span>(doc)
<span class="pl-c"><span class="pl-c">#</span> 2-Element Vector{Node}:</span>
<span class="pl-c"><span class="pl-c">#</span>  Node Declaration &lt;?xml version="1.0"?&gt;</span>
<span class="pl-c"><span class="pl-c">#</span>  Node Element &lt;catalog&gt; (12 children)</span>

doc[<span class="pl-c1">end</span>]  <span class="pl-c"><span class="pl-c">#</span> The root node</span>
<span class="pl-c"><span class="pl-c">#</span> Node Element &lt;catalog&gt; (12 children)</span>

doc[<span class="pl-c1">end</span>][<span class="pl-c1">2</span>]  <span class="pl-c"><span class="pl-c">#</span> Second child of root</span>
<span class="pl-c"><span class="pl-c">#</span> Node Element &lt;book id="bk102"&gt; (6 children)</span></pre></div>
<p dir="auto"><br><br></p>
<h1 dir="auto"><a id="user-content-data-structures-that-represent-xml-nodes" class="anchor" aria-hidden="true" href="#data-structures-that-represent-xml-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Structures that Represent XML Nodes</h1>
<h2 dir="auto"><a id="user-content-preliminary-nodetype" class="anchor" aria-hidden="true" href="#preliminary-nodetype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Preliminary: <code>NodeType</code></h2>
<ul dir="auto">
<li>Each item in an XML DOM is classified by its <code>NodeType</code>.</li>
<li>Every <code>XML.jl</code> struct defines a <code>nodetype(x)</code> method that returns its <code>NodeType</code>.</li>
</ul>
<table>
<thead>
<tr>
<th>NodeType</th>
<th>XML Representation</th>
<th><code>Node</code> Constructor</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Document</code></td>
<td>An entire document</td>
<td><code>Document(children...)</code></td>
</tr>
<tr>
<td><code>DTD</code></td>
<td><code>&lt;!DOCTYPE ...&gt;</code></td>
<td><code>DTD(...) </code></td>
</tr>
<tr>
<td><code>Declaration</code></td>
<td><code>&lt;?xml attributes... ?&gt;</code></td>
<td><code>Declaration(; attrs...)</code></td>
</tr>
<tr>
<td><code>ProcessingInstruction</code></td>
<td><code>&lt;?tag attributes... ?&gt;</code></td>
<td><code>ProcessingInstruction(tag; attrs...)</code></td>
</tr>
<tr>
<td><code>Comment</code></td>
<td><code>&lt;!-- text --&gt;</code></td>
<td><code>Comment(text)</code></td>
</tr>
<tr>
<td><code>CData</code></td>
<td><code>&lt;![CData[text]]&gt;</code></td>
<td><code>CData(text)</code></td>
</tr>
<tr>
<td><code>Element</code></td>
<td><code>&lt;tag attributes... &gt; children... &lt;/NAME&gt;</code></td>
<td><code>Element(tag, children...; attrs...)</code></td>
</tr>
<tr>
<td><code>Text</code></td>
<td>the <code>text</code> part of <code>&lt;tag&gt;text&lt;/tag&gt;</code></td>
<td><code>Text(text)</code></td>
</tr>
</tbody>
</table>
<br>
<h2 dir="auto"><a id="user-content-node-probably-what-youre-looking-for" class="anchor" aria-hidden="true" href="#node-probably-what-youre-looking-for"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Node</code>: Probably What You're Looking For</h2>
<ul dir="auto">
<li><code>read</code>-ing a <code>Node</code> loads the entire XML DOM in memory.</li>
<li><strong>This is what you would use to build an XML document programmatically.</strong></li>
<li>See the table above for convenience constructors.</li>
<li><code>Node</code>s have some additional methods that aid in construction/mutation:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Add a child:
push!(parent::Node, child::Node)

# Replace a child:
parent[2] = child

# Add/change an attribute:
node[&quot;key&quot;] = value

node[&quot;key&quot;]"><pre><span class="pl-c"><span class="pl-c">#</span> Add a child:</span>
<span class="pl-c1">push!</span>(parent<span class="pl-k">::</span><span class="pl-c1">Node</span>, child<span class="pl-k">::</span><span class="pl-c1">Node</span>)

<span class="pl-c"><span class="pl-c">#</span> Replace a child:</span>
parent[<span class="pl-c1">2</span>] <span class="pl-k">=</span> child

<span class="pl-c"><span class="pl-c">#</span> Add/change an attribute:</span>
node[<span class="pl-s"><span class="pl-pds">"</span>key<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> value

node[<span class="pl-s"><span class="pl-pds">"</span>key<span class="pl-pds">"</span></span>]</pre></div>
<ul dir="auto">
<li><code>Node</code> is an immutable type.  However, you can easily create a copy with one or more field values changed by using the <code>Node(::Node; kw...)</code> constructor where <code>kw</code> are the fields you want to change.  For example:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="node = XML.Element(&quot;tag&quot;, XML.Text(&quot;child&quot;))

simplevalue(node)
# &quot;child&quot;

node2 = Node(node, children=XML.Text(&quot;changed&quot;))

simplevalue(node2)
# &quot;changed&quot;"><pre>node <span class="pl-k">=</span> XML<span class="pl-k">.</span><span class="pl-c1">Element</span>(<span class="pl-s"><span class="pl-pds">"</span>tag<span class="pl-pds">"</span></span>, XML<span class="pl-k">.</span><span class="pl-c1">Text</span>(<span class="pl-s"><span class="pl-pds">"</span>child<span class="pl-pds">"</span></span>))

<span class="pl-c1">simplevalue</span>(node)
<span class="pl-c"><span class="pl-c">#</span> "child"</span>

node2 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(node, children<span class="pl-k">=</span>XML<span class="pl-k">.</span><span class="pl-c1">Text</span>(<span class="pl-s"><span class="pl-pds">"</span>changed<span class="pl-pds">"</span></span>))

<span class="pl-c1">simplevalue</span>(node2)
<span class="pl-c"><span class="pl-c">#</span> "changed"</span></pre></div>
<br>
<h2 dir="auto"><a id="user-content-xmllazynode-for-fast-iteration-through-an-xml-file" class="anchor" aria-hidden="true" href="#xmllazynode-for-fast-iteration-through-an-xml-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>XML.LazyNode</code>: For Fast Iteration through an XML File</h2>
<p dir="auto">A lazy data structure that just keeps track of the position in the raw data (<code>Vector{UInt8}</code>) to read from.</p>
<ul dir="auto">
<li>You can iterate over a <code>LazyNode</code> to "read" through an XML file:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="doc = read(filename, LazyNode)

foreach(println, doc)
# LazyNode Declaration &lt;?xml version=&quot;1.0&quot;?&gt;
# LazyNode Element &lt;catalog&gt;
# LazyNode Element &lt;book id=&quot;bk101&quot;&gt;
# LazyNode Element &lt;author&gt;
# LazyNode Text &quot;Gambardella, Matthew&quot;
# LazyNode Element &lt;title&gt;
# ⋮"><pre>doc <span class="pl-k">=</span> <span class="pl-c1">read</span>(filename, LazyNode)

<span class="pl-c1">foreach</span>(println, doc)
<span class="pl-c"><span class="pl-c">#</span> LazyNode Declaration &lt;?xml version="1.0"?&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> LazyNode Element &lt;catalog&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> LazyNode Element &lt;book id="bk101"&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> LazyNode Element &lt;author&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> LazyNode Text "Gambardella, Matthew"</span>
<span class="pl-c"><span class="pl-c">#</span> LazyNode Element &lt;title&gt;</span>
<span class="pl-c"><span class="pl-c">#</span> ⋮</span></pre></div>
<p dir="auto"><br><br></p>
<h1 dir="auto"><a id="user-content-reading" class="anchor" aria-hidden="true" href="#reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Reading from file:
read(filename, Node)
read(filename, LazyNode)

# Parsing from string:
parse(Node, str)
parse(LazyNode, str)
"><pre><span class="pl-c"><span class="pl-c">#</span> Reading from file:</span>
<span class="pl-c1">read</span>(filename, Node)
<span class="pl-c1">read</span>(filename, LazyNode)

<span class="pl-c"><span class="pl-c">#</span> Parsing from string:</span>
<span class="pl-c1">parse</span>(Node, str)
<span class="pl-c1">parse</span>(LazyNode, str)
</pre></div>
<p dir="auto"><br><br></p>
<h1 dir="auto"><a id="user-content-writing" class="anchor" aria-hidden="true" href="#writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="XML.write(filename::String, node)  # write to file

XML.write(io::IO, node)  # write to stream

XML.write(node)  # String"><pre>XML<span class="pl-k">.</span><span class="pl-c1">write</span>(filename<span class="pl-k">::</span><span class="pl-c1">String</span>, node)  <span class="pl-c"><span class="pl-c">#</span> write to file</span>

XML<span class="pl-k">.</span><span class="pl-c1">write</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, node)  <span class="pl-c"><span class="pl-c">#</span> write to stream</span>

XML<span class="pl-k">.</span><span class="pl-c1">write</span>(node)  <span class="pl-c"><span class="pl-c">#</span> String</span></pre></div>
<p dir="auto"><br><br></p>
<h1 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h1>
<ul dir="auto">
<li>XML.jl performs comparatively to <a href="https://github.com/JuliaIO/EzXML.jl">EzXML.jl</a>, which wraps the C library <a href="https://gitlab.gnome.org/GNOME/libxml2/-/wikis/home" rel="nofollow">libxml2</a>.</li>
<li>See the <code>benchmarks/suite.jl</code> for the code to produce these results.</li>
<li>The following output was generated in a Julia session with the following <code>versioninfo</code>:</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; versioninfo()
Julia Version 1.8.5
Commit 17cfb8e65ea (2023-01-08 06:45 UTC)
Platform Info:
  OS: macOS (arm64-apple-darwin21.5.0)
  CPU: 10 × Apple M1 Pro
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-13.0.1 (ORCJIT, apple-m1)
  Threads: 1 on 8 virtual cores"><pre class="notranslate"><code>julia&gt; versioninfo()
Julia Version 1.8.5
Commit 17cfb8e65ea (2023-01-08 06:45 UTC)
Platform Info:
  OS: macOS (arm64-apple-darwin21.5.0)
  CPU: 10 × Apple M1 Pro
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-13.0.1 (ORCJIT, apple-m1)
  Threads: 1 on 8 virtual cores
</code></pre></div>
<h3 dir="auto"><a id="user-content-reading-an-xml-file" class="anchor" aria-hidden="true" href="#reading-an-xml-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading an XML File</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="       XML.LazyNode   0.012084
           XML.Node  ■■■■■■■■■■■■■■■■■■■■■■■■■■■ 888.367
      EzXML.readxml  ■■■■■■ 200.009
   XMLDict.xml_dict  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1350.63"><pre class="notranslate"><code>       XML.LazyNode   0.012084
           XML.Node  ■■■■■■■■■■■■■■■■■■■■■■■■■■■ 888.367
      EzXML.readxml  ■■■■■■ 200.009
   XMLDict.xml_dict  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1350.63
</code></pre></div>
<h3 dir="auto"><a id="user-content-writing-an-xml-file" class="anchor" aria-hidden="true" href="#writing-an-xml-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing an XML File</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="         Write: XML  ■■■■■■■■■■■■■■■■■■■■■■ 244.261
       Write: EzXML  ■■■■■■■■■■ 106.953"><pre class="notranslate"><code>         Write: XML  ■■■■■■■■■■■■■■■■■■■■■■ 244.261
       Write: EzXML  ■■■■■■■■■■ 106.953
</code></pre></div>
<h3 dir="auto"><a id="user-content-lazily-iterating-over-each-node" class="anchor" aria-hidden="true" href="#lazily-iterating-over-each-node"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lazily Iterating over Each Node</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="           LazyNode  ■■■■■■■■■■■■■■■■ 55.1
 EzXML.StreamReader  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 142.515"><pre class="notranslate"><code>           LazyNode  ■■■■■■■■■■■■■■■■ 55.1
 EzXML.StreamReader  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 142.515
</code></pre></div>
<h3 dir="auto"><a id="user-content-collecting-all-namestags-in-an-xml-file" class="anchor" aria-hidden="true" href="#collecting-all-namestags-in-an-xml-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Collecting All Names/Tags in an XML File</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="       XML.LazyNode  ■■■■■■■■■■■■■■■■■■■■■■■■■■ 152.298
 EzXML.StreamReader  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 165.21
      EzXML.readxml  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 239.197"><pre class="notranslate"><code>       XML.LazyNode  ■■■■■■■■■■■■■■■■■■■■■■■■■■ 152.298
 EzXML.StreamReader  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 165.21
      EzXML.readxml  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 239.197
</code></pre></div>
<br>
<br>
<h1 dir="auto"><a id="user-content-possible-gotchas" class="anchor" aria-hidden="true" href="#possible-gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Possible Gotchas</h1>
<ul dir="auto">
<li>XML.jl doesn't automatically escape special characters (<code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>"</code>, and <code>'</code> ) for you.  However, we provide utility functions for doing the conversions back and forth:
<ul dir="auto">
<li><code>XML.escape(::String)</code> and <code>XML.unescape(::String)</code></li>
<li><code>XML.escape!(::Node)</code> and <code>XML.unescape!(::Node)</code>.</li>
</ul>
</li>
</ul>
</article></div>