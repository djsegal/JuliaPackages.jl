<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-modularsquareroots" class="anchor" aria-hidden="true" href="#modularsquareroots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModularSquareRoots</h1>
<p dir="auto"><a href="https://ci.appveyor.com/project/byhill/ModularSquareRoots-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/86568a20cec7e1a3d63cbed5b73c872a748418fabba81fb17354fe94651157e4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f627968696c6c2f4d6f64756c6172537175617265526f6f74732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/byhill/ModularSquareRoots.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">This module provides support for finding modular square-roots.
In particular, for a given integer <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="f92e6a9540309f71e5bee5bafbe19af0">$n$</math-renderer> and modulus <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="f92e6a9540309f71e5bee5bafbe19af0">$m$</math-renderer>,
this module provides support for solving the congruence <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="f92e6a9540309f71e5bee5bafbe19af0">$x^2 \equiv n \pmod m$</math-renderer>.</p>
<p dir="auto">To do this, you can use the function <code>sqrtmod(n, m)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ModularSquareRoots

julia&gt; sqrtmod(4, 5)
2-element Vector{Int64}:
 3
 2

julia&gt; all(powermod(x, 2, 5) == 4 for x in sqrtmod(4, 5))
true

julia&gt; sqrtmod(1240, 289032)
8-element Vector{Int64}:
 107056
 251572
  10712
 155228
 278320
 133804
 181976
  37460

julia&gt; all(powermod(x, 2, 289032) == 1240 for x in sqrtmod(1240, 289032))
true

julia&gt; sqrtmod(23, 200)
Int64[]

julia&gt; !any(powermod(x, 2, 200) == 23 for x in sqrtmod(23, 200))
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ModularSquareRoots

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrtmod</span>(<span class="pl-c1">4</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">all</span>(<span class="pl-c1">powermod</span>(x, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>) <span class="pl-k">==</span> <span class="pl-c1">4</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">sqrtmod</span>(<span class="pl-c1">4</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrtmod</span>(<span class="pl-c1">1240</span>, <span class="pl-c1">289032</span>)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">107056</span>
 <span class="pl-c1">251572</span>
  <span class="pl-c1">10712</span>
 <span class="pl-c1">155228</span>
 <span class="pl-c1">278320</span>
 <span class="pl-c1">133804</span>
 <span class="pl-c1">181976</span>
  <span class="pl-c1">37460</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">all</span>(<span class="pl-c1">powermod</span>(x, <span class="pl-c1">2</span>, <span class="pl-c1">289032</span>) <span class="pl-k">==</span> <span class="pl-c1">1240</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">sqrtmod</span>(<span class="pl-c1">1240</span>, <span class="pl-c1">289032</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrtmod</span>(<span class="pl-c1">23</span>, <span class="pl-c1">200</span>)
Int64[]

julia<span class="pl-k">&gt;</span> <span class="pl-k">!</span><span class="pl-c1">any</span>(<span class="pl-c1">powermod</span>(x, <span class="pl-c1">2</span>, <span class="pl-c1">200</span>) <span class="pl-k">==</span> <span class="pl-c1">23</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">sqrtmod</span>(<span class="pl-c1">23</span>, <span class="pl-c1">200</span>))
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto">
<a id="user-content-prime-moduli" class="anchor" aria-hidden="true" href="#prime-moduli"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prime Moduli</h2>
<p dir="auto">If you know that <code>p = m</code> is prime,
then you can additionally use the function <code>sqrtmodprime(n, p)</code>.
Note that there are no checks in <code>sqrtmodprime</code> to ensure that <code>p</code> is prime,
and the output of <code>sqrtmodprime(n, p)</code> is undefined when <code>p</code> is not prime.
The onus is on the user to use <code>sqrtmodprime</code> correctly.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sqrtmodprime(16, 101)
2-element Vector{Int64}:
 97
  4

julia&gt; sqrtmodprime(15, 101)
Int64[]

julia&gt; sqrtmodprime(0, 101)
1-element Vector{Int64}:
 0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrtmodprime</span>(<span class="pl-c1">16</span>, <span class="pl-c1">101</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">97</span>
  <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrtmodprime</span>(<span class="pl-c1">15</span>, <span class="pl-c1">101</span>)
Int64[]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sqrtmodprime</span>(<span class="pl-c1">0</span>, <span class="pl-c1">101</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span></pre></div>
</article></div>