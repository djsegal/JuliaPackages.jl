<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pedigreebase" class="anchor" aria-hidden="true" href="#pedigreebase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PedigreeBase</h1>
<p><a href="https://travis-ci.org/masuday/PedigreeBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8b5c47dd48237383267797b8126127477e8edd565d02aa35ea5d305eed47a25/68747470733a2f2f7472617669732d63692e6f72672f6d6173756461792f5065646967726565426173652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/masuday/PedigreeBase.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>This package provides a simple set of functions to deal with a pedigree structure, inbreeding coefficients, and relationship matrices in quantitative genetics.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# pedigree list using integer code

# define a pedigree list
pedlist = [0 0 1 1 3 1 5; 0 0 0 2 4 4 6]

# or read a file to load the pedigree list
pedlist = read_ped(&quot;pedigree.txt&quot;,integer=true)

# reordering pedigree so that parents precede their progeny
perm,invp = find_ped_order(pedlist)
permute_ped!(invp,pedlist)

# -------
# characters in a pedigree file
pedlist,idtable = read_ped(&quot;pedigree.characters.txt&quot;)

# reordering
perm,invp = find_ped_order(pedlist)
permute_ped!(invp,pedlist,idtable)
# -------

# inbreeding
f = get_inb(pedlist)

# A-matrix
A = get_nrm(pedlist)

# A-inverse
Ainv = get_nrminv(pedlist, f)
"><pre><span class="pl-c"><span class="pl-c">#</span> pedigree list using integer code</span>

<span class="pl-c"><span class="pl-c">#</span> define a pedigree list</span>
pedlist <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">1</span> <span class="pl-c1">5</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">4</span> <span class="pl-c1">4</span> <span class="pl-c1">6</span>]

<span class="pl-c"><span class="pl-c">#</span> or read a file to load the pedigree list</span>
pedlist <span class="pl-k">=</span> <span class="pl-c1">read_ped</span>(<span class="pl-s"><span class="pl-pds">"</span>pedigree.txt<span class="pl-pds">"</span></span>,integer<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> reordering pedigree so that parents precede their progeny</span>
perm,invp <span class="pl-k">=</span> <span class="pl-c1">find_ped_order</span>(pedlist)
<span class="pl-c1">permute_ped!</span>(invp,pedlist)

<span class="pl-c"><span class="pl-c">#</span> -------</span>
<span class="pl-c"><span class="pl-c">#</span> characters in a pedigree file</span>
pedlist,idtable <span class="pl-k">=</span> <span class="pl-c1">read_ped</span>(<span class="pl-s"><span class="pl-pds">"</span>pedigree.characters.txt<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> reordering</span>
perm,invp <span class="pl-k">=</span> <span class="pl-c1">find_ped_order</span>(pedlist)
<span class="pl-c1">permute_ped!</span>(invp,pedlist,idtable)
<span class="pl-c"><span class="pl-c">#</span> -------</span>

<span class="pl-c"><span class="pl-c">#</span> inbreeding</span>
f <span class="pl-k">=</span> <span class="pl-c1">get_inb</span>(pedlist)

<span class="pl-c"><span class="pl-c">#</span> A-matrix</span>
A <span class="pl-k">=</span> <span class="pl-c1">get_nrm</span>(pedlist)

<span class="pl-c"><span class="pl-c">#</span> A-inverse</span>
Ainv <span class="pl-k">=</span> <span class="pl-c1">get_nrminv</span>(pedlist, f)</pre></div>
</article></div>