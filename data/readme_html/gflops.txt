<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gflopsjl" class="anchor" aria-hidden="true" href="#gflopsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GFlops.jl</h1>




 
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a> <a href="https://travis-ci.org/triscale-innov/GFlops.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d89af7615ea0ec3dea8ea11c40b848791ceb2815/68747470733a2f2f7472617669732d63692e6f72672f7472697363616c652d696e6e6f762f47466c6f70732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/triscale-innov/GFlops.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/triscale-innov/GFlops.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f88ac34b3464b629feb75d9885027026bee85c77/687474703a2f2f636f6465636f762e696f2f6769746875622f7472697363616c652d696e6e6f762f47466c6f70732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/triscale-innov/GFlops.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>When code performance is an issue, it is sometimes useful to get absolute
performance measurements in order to objectivise what is "slow" or
"fast". <code>GFlops.jl</code> leverages the power of <code>Cassette.jl</code> to automatically count
the number of floating-point operations in a piece of code. When combined with
the accuracy of <code>BenchmarkTools</code>, this allows for easy and absolute performance
measurements.</p>
<h2><a id="user-content-example-use" class="anchor" aria-hidden="true" href="#example-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example use</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GFlops

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@count_ops</span> <span class="pl-c1">sum</span>(<span class="pl-k">$</span>x)
Flop Counter<span class="pl-k">:</span>
 add32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 sub32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 mul32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 div32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 add64<span class="pl-k">:</span> <span class="pl-c1">999</span>
 sub64<span class="pl-k">:</span> <span class="pl-c1">0</span>
 mul64<span class="pl-k">:</span> <span class="pl-c1">0</span>
 div64<span class="pl-k">:</span> <span class="pl-c1">0</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gflops</span> <span class="pl-c1">sum</span>(<span class="pl-k">$</span>x);
  <span class="pl-c1">10.03</span> GFlops,  <span class="pl-c1">19.15</span><span class="pl-k">%</span> peak  (<span class="pl-c1">9.99e+02</span> flop, <span class="pl-c1">9.96e-08</span> s)</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is registered and can therefore be simply be installed with</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add GFlops</pre></div>
<h2><a id="user-content-caveat" class="anchor" aria-hidden="true" href="#caveat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveat</h2>
<p><code>GFlops.jl</code> does not see what happens outside the realm of Julia code. It
especially does not see operations performed in external libraries such as BLAS
calls:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@count_ops</span> <span class="pl-c1">dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>x)
Flop Counter<span class="pl-k">:</span>
 add32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 sub32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 mul32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 div32<span class="pl-k">:</span> <span class="pl-c1">0</span>
 add64<span class="pl-k">:</span> <span class="pl-c1">0</span>
 sub64<span class="pl-k">:</span> <span class="pl-c1">0</span>
 mul64<span class="pl-k">:</span> <span class="pl-c1">0</span>
 div64<span class="pl-k">:</span> <span class="pl-c1">0</span></pre></div>
<p>This is a known issue; we'll try and find a way to circumvent the problem.</p>
</article></div>