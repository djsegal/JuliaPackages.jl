<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gflopsjl" class="anchor" aria-hidden="true" href="#gflopsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GFlops.jl</h1>




 
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/triscale-innov/GFlops.jl/actions"><img src="https://github.com/triscale-innov/GFlops.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/triscale-innov/GFlops.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/50088be04d2eb355139782bc067d33bdf6de7971e9e1f3e7fb0f0304515da37e/687474703a2f2f636f6465636f762e696f2f6769746875622f7472697363616c652d696e6e6f762f47466c6f70732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="http://codecov.io/github/triscale-innov/GFlops.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">When code performance is an issue, it is sometimes useful to get absolute
performance measurements in order to objectivise what is "slow" or
"fast". <code>GFlops.jl</code> leverages the power of <code>Cassette.jl</code> to automatically count
the number of floating-point operations in a piece of code. When combined with
the accuracy of <code>BenchmarkTools</code>, this allows for easy and absolute performance
measurements.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is registered and can therefore be simply be installed with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add GFlops"><pre>pkg<span class="pl-k">&gt;</span> add GFlops</pre></div>
<h2 dir="auto"><a id="user-content-example-use" class="anchor" aria-hidden="true" href="#example-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example use</h2>
<p dir="auto">This simple example shows how to track the number of operations in a vector summation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GFlops

julia&gt; x = rand(1000);

julia&gt; @count_ops sum($x)
Flop Counter: 999 flop
┌─────┬─────────┐
│     │ Float64 │
├─────┼─────────┤
│ add │     999 │
└─────┴─────────┘

julia&gt; @gflops sum($x);
  8.86 GFlops,  12.76% peak  (9.99e+02 flop, 1.13e-07 s, 0 alloc: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GFlops

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@count_ops</span> <span class="pl-c1">sum</span>(<span class="pl-k">$</span>x)
Flop Counter<span class="pl-k">:</span> <span class="pl-c1">999</span> flop
┌─────┬─────────┐
│     │ Float64 │
├─────┼─────────┤
│ add │     <span class="pl-c1">999</span> │
└─────┴─────────┘

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gflops</span> <span class="pl-c1">sum</span>(<span class="pl-k">$</span>x);
  <span class="pl-c1">8.86</span> GFlops,  <span class="pl-c1">12.76</span><span class="pl-k">%</span> peak  (<span class="pl-c1">9.99e+02</span> flop, <span class="pl-c1">1.13e-07</span> s, <span class="pl-c1">0</span> alloc<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<br>
<p dir="auto"><code>GFlops.jl</code> internally tracks several types of Floating-Point operations, for
both 32-bit and 64-bit operands. Pretty-printing a Flop Counter only
shows non-zero entries, but any individual counter can be accessed:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function mixed_dot(x, y)
           acc = 0.0
           @inbounds @simd for i in eachindex(x, y)
               acc += x[i] * y[i]
           end
           acc
       end
mixed_dot (generic function with 1 method)

julia&gt; x = rand(Float32, 1000); y = rand(Float32, 1000);

julia&gt; cnt = @count_ops mixed_dot($x, $y)
Flop Counter: 1000 flop
┌─────┬─────────┬─────────┐
│     │ Float32 │ Float64 │
├─────┼─────────┼─────────┤
│ add │       0 │    1000 │
│ mul │    1000 │       0 │
└─────┴─────────┴─────────┘

julia&gt; fieldnames(GFlops.Counter)
(:fma32, :fma64, :muladd32, :muladd64, :add32, :add64, :sub32, ...)

julia&gt; cnt.add64
1000

julia&gt; @gflops mixed_dot($x, $y);
  9.91 GFlops,  13.36% peak  (2.00e+03 flop, 2.02e-07 s, 0 alloc: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mixed_dot</span>(x, y)
           acc <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
           <span class="pl-c1">@inbounds</span> <span class="pl-c1">@simd</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(x, y)
               acc <span class="pl-k">+=</span> x[i] <span class="pl-k">*</span> y[i]
           <span class="pl-k">end</span>
           acc
       <span class="pl-k">end</span>
mixed_dot (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">1000</span>); y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">1000</span>);

julia<span class="pl-k">&gt;</span> cnt <span class="pl-k">=</span> <span class="pl-c1">@count_ops</span> <span class="pl-c1">mixed_dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>y)
Flop Counter<span class="pl-k">:</span> <span class="pl-c1">1000</span> flop
┌─────┬─────────┬─────────┐
│     │ Float32 │ Float64 │
├─────┼─────────┼─────────┤
│ add │       <span class="pl-c1">0</span> │    <span class="pl-c1">1000</span> │
│ mul │    <span class="pl-c1">1000</span> │       <span class="pl-c1">0</span> │
└─────┴─────────┴─────────┘

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(GFlops<span class="pl-k">.</span>Counter)
(<span class="pl-c1">:fma32</span>, <span class="pl-c1">:fma64</span>, <span class="pl-c1">:muladd32</span>, <span class="pl-c1">:muladd64</span>, <span class="pl-c1">:add32</span>, <span class="pl-c1">:add64</span>, <span class="pl-c1">:sub32</span>, <span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> cnt<span class="pl-k">.</span>add64
<span class="pl-c1">1000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gflops</span> <span class="pl-c1">mixed_dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>y);
  <span class="pl-c1">9.91</span> GFlops,  <span class="pl-c1">13.36</span><span class="pl-k">%</span> peak  (<span class="pl-c1">2.00e+03</span> flop, <span class="pl-c1">2.02e-07</span> s, <span class="pl-c1">0</span> alloc<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h2 dir="auto"><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caveats</h2>
<h3 dir="auto"><a id="user-content-fused-multiplication-and-addition-fma--muladd" class="anchor" aria-hidden="true" href="#fused-multiplication-and-addition-fma--muladd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fused Multiplication and Addition: FMA &amp; MulAdd</h3>
<p dir="auto">On systems which support them, FMAs and MulAdds compute two operations (an
addition and a multiplication) in one instruction. <code>@count_ops</code> counts each
individual FMA/MulAdd as one operation, which makes it easier to interpret
counters. However, <code>@gflops</code> will count two floating-point operations for each
FMA, in accordance to the way high-performance benchmarks usually behave:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = 0.5; coeffs = rand(10);

# 9 MulAdds but 18 flop
julia&gt; cnt = @count_ops evalpoly($x, $coeffs)
Flop Counter: 18 flop
┌────────┬─────────┐
│        │ Float64 │
├────────┼─────────┤
│ muladd │       9 │
└────────┴─────────┘

julia&gt; @gflops evalpoly($x, $coeffs);
  0.87 GFlops,  1.63% peak  (1.80e+01 flop, 2.06e-08 s, 0 alloc: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">0.5</span>; coeffs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>);

<span class="pl-c"><span class="pl-c">#</span> 9 MulAdds but 18 flop</span>
julia<span class="pl-k">&gt;</span> cnt <span class="pl-k">=</span> <span class="pl-c1">@count_ops</span> <span class="pl-c1">evalpoly</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>coeffs)
Flop Counter<span class="pl-k">:</span> <span class="pl-c1">18</span> flop
┌────────┬─────────┐
│        │ Float64 │
├────────┼─────────┤
│ muladd │       <span class="pl-c1">9</span> │
└────────┴─────────┘

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@gflops</span> <span class="pl-c1">evalpoly</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>coeffs);
  <span class="pl-c1">0.87</span> GFlops,  <span class="pl-c1">1.63</span><span class="pl-k">%</span> peak  (<span class="pl-c1">1.80e+01</span> flop, <span class="pl-c1">2.06e-08</span> s, <span class="pl-c1">0</span> alloc<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h3 dir="auto"><a id="user-content-non-julia-code" class="anchor" aria-hidden="true" href="#non-julia-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-julia code</h3>
<p dir="auto"><code>GFlops.jl</code> does not see what happens outside the realm of Julia code. It
especially does not see operations performed in external libraries such as BLAS
calls:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra

julia&gt; @count_ops dot($x, $y)
Flop Counter: 0 flop"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@count_ops</span> <span class="pl-c1">dot</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>y)
Flop Counter<span class="pl-k">:</span> <span class="pl-c1">0</span> flop</pre></div>
<p dir="auto">This is a known issue; we'll try and find a way to circumvent the problem.</p>
</article></div>