<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-triangularsolve" class="anchor" aria-hidden="true" href="#triangularsolve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TriangularSolve</h1>
<p dir="auto"><a href="https://JuliaSIMD.github.io/TriangularSolve.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSIMD.github.io/TriangularSolve.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/TriangularSolve.jl/actions"><img src="https://github.com/JuliaSIMD/TriangularSolve.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/TriangularSolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7e3d95b1048b0bd80363a98a753552ac9aaf9e931c75693f6c1993c5bd2b23b6/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f547269616e67756c6172536f6c76652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSIMD/TriangularSolve.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Performs some triangular solves. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using TriangularSolve, LinearAlgebra, MKL;

julia&gt; BLAS.set_num_threads(1)

julia&gt; BLAS.get_config().loaded_libs
1-element Vector{LinearAlgebra.BLAS.LBTLibraryInfo}:
 LBTLibraryInfo(libmkl_rt.so, ilp64)

julia&gt; N = 100;

julia&gt; A = rand(N,N); B = rand(N,N); C = similar(A);

julia&gt; @benchmark TriangularSolve.rdiv!($C, $A, UpperTriangular($B), Val(false)) # false means single threaded
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  15.909 μs …  41.524 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     17.916 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   17.751 μs ± 697.786 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▃▁    ▁    ▁     ▄▁    ▇▆    ▆█▃                             ▂
  ██▃▁▁██▁▁▁▁█▆▁▁▃▇██▄▃▁███▆▁▄▄███▄▄▅▅▆▇█▇▄▅▆▇██▇█▇▇▆▄▅▄▁▄▁▄▄▇ █
  15.9 μs       Histogram: log(frequency) by time      19.9 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark rdiv!(copyto!($C, $A), UpperTriangular($B))
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  17.578 μs … 75.835 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     19.852 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   19.827 μs ±  1.342 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▄▂              ▂    ▆▅   ▁█▇▂   ▅▃     ▂                   ▂
  ██▁▁▃█▇▁▁▁█▇▄▄▁██▇▄▄▄██▆▅▄████▅▄▆██▆▆▆▆▇██▇▇▆▆▇▆▅▆▄▅▅▆▄▅▄▅▅ █
  17.6 μs      Histogram: log(frequency) by time      22.4 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark ldiv!($C, LowerTriangular($B), $A)
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  19.102 μs …  69.966 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     21.561 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   21.565 μs ± 890.952 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▂▂                 ▂▃     ▄▄     ▆█▄     ▅▅                  ▂
  ██▃▁▁▁▇█▁▁▁▁▅█▁▁▁▁▁██▅▁▁▁▅██▆▁▁▁▆███▆▅▃▅████▃▄▅██▇▇▅▆▆▇▇█▇▆▆ █
  19.1 μs       Histogram: log(frequency) by time      23.4 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark TriangularSolve.ldiv!($C, LowerTriangular($B), $A, Val(false)) # false means single threaded
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  19.082 μs …  39.078 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     19.694 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   19.765 μs ± 774.848 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

    ▃        ▄█         ▁
  ▂▇██▄▂▁▁▂▂▃███▃▂▁▂▁▂▂▅█▇▃▂▂▂▁▂▂▂▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▂▂▂ ▃
  19.1 μs         Histogram: frequency by time         22.1 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TriangularSolve, LinearAlgebra, MKL;

julia<span class="pl-k">&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">set_num_threads</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">get_config</span>()<span class="pl-k">.</span>loaded_libs
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{LinearAlgebra<span class="pl-k">.</span>BLAS<span class="pl-k">.</span>LBTLibraryInfo}<span class="pl-k">:</span>
 <span class="pl-c1">LBTLibraryInfo</span>(libmkl_rt<span class="pl-k">.</span>so, ilp64)

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">100</span>;

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N,N); B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N,N); C <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">rdiv!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A, <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-c1">Val</span>(<span class="pl-c1">false</span>)) <span class="pl-c"><span class="pl-c">#</span> false means single threaded</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">15.909</span> μs …  <span class="pl-c1">41.524</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">17.916</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">17.751</span> μs ± <span class="pl-c1">697.786</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

  ▃▁    ▁    ▁     ▄▁    ▇▆    ▆█▃                             ▂
  ██▃▁▁██▁▁▁▁█▆▁▁▃▇██▄▃▁███▆▁▄▄███▄▄▅▅▆▇█▇▄▅▆▇██▇█▇▇▆▄▅▄▁▄▁▄▄▇ █
  <span class="pl-c1">15.9</span> μs       Histogram<span class="pl-k">:</span> <span class="pl-c1">log</span>(frequency) by time      <span class="pl-c1">19.9</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">rdiv!</span>(<span class="pl-c1">copyto!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A), <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">17.578</span> μs … <span class="pl-c1">75.835</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">19.852</span> μs              ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">19.827</span> μs ±  <span class="pl-c1">1.342</span> μs  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

  ▄▂              ▂    ▆▅   ▁█▇▂   ▅▃     ▂                   ▂
  ██▁▁▃█▇▁▁▁█▇▄▄▁██▇▄▄▄██▆▅▄████▅▄▆██▆▆▆▆▇██▇▇▆▆▇▆▅▆▄▅▅▆▄▅▄▅▅ █
  <span class="pl-c1">17.6</span> μs      Histogram<span class="pl-k">:</span> <span class="pl-c1">log</span>(frequency) by time      <span class="pl-c1">22.4</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">19.102</span> μs …  <span class="pl-c1">69.966</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">21.561</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">21.565</span> μs ± <span class="pl-c1">890.952</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

  ▂▂                 ▂▃     ▄▄     ▆█▄     ▅▅                  ▂
  ██▃▁▁▁▇█▁▁▁▁▅█▁▁▁▁▁██▅▁▁▁▅██▆▁▁▁▆███▆▅▃▅████▃▄▅██▇▇▅▆▆▇▇█▇▆▆ █
  <span class="pl-c1">19.1</span> μs       Histogram<span class="pl-k">:</span> <span class="pl-c1">log</span>(frequency) by time      <span class="pl-c1">23.4</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A, <span class="pl-c1">Val</span>(<span class="pl-c1">false</span>)) <span class="pl-c"><span class="pl-c">#</span> false means single threaded</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">19.082</span> μs …  <span class="pl-c1">39.078</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">19.694</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">19.765</span> μs ± <span class="pl-c1">774.848</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

    ▃        ▄█         ▁
  ▂▇██▄▂▁▁▂▂▃███▃▂▁▂▁▂▂▅█▇▃▂▂▂▁▂▂▂▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▂▂▂ ▃
  <span class="pl-c1">19.1</span> μs         Histogram<span class="pl-k">:</span> frequency by time         <span class="pl-c1">22.1</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span></pre></div>
<p dir="auto">Multithreaded benchmarks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; BLAS.set_num_threads(min(Threads.nthreads(), TriangularSolve.VectorizationBase.num_cores()))

julia&gt; @benchmark TriangularSolve.rdiv!($C, $A, UpperTriangular($B))
BenchmarkTools.Trial: 10000 samples with 3 evaluations.
 Range (min … max):  8.309 μs …  24.357 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     8.769 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   8.812 μs ± 382.702 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

               ▁▃▄▆▆██▇▆▅▃▁
  ▂▁▂▂▂▂▃▃▃▄▅▇██████████████▇▆▅▄▃▃▃▃▃▂▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▄
  8.31 μs         Histogram: frequency by time         9.7 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark rdiv!(copyto!($C, $A), UpperTriangular($B))
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  11.996 μs … 151.147 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     14.163 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   14.281 μs ±   2.372 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%

          ▂▄▇███▇▆▅▃▂ ▁   ▂▄▄▅▅▅▆▃▃         ▁
  ▁▁▁▂▂▃▄▇██████████████████████████▇▆▅▄▅▆▇███▆▅▅▃▄▂▂▂▁▁▁▁▁▁▁▁ ▅
  12 μs           Histogram: frequency by time         17.3 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark TriangularSolve.ldiv!($C, LowerTriangular($B), $A)
BenchmarkTools.Trial: 10000 samples with 5 evaluations.
 Range (min … max):  7.903 μs …  22.442 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     9.871 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   9.789 μs ± 864.957 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▂▃  ▄▃  ▃▅   ▅▃   ▆▂   ▆▄   ▂▇▄   ▃█▅▂▂▁▁▄▆▃▁ ▁             ▂
  ██▅▂██▆▅██▆▆▆██▇▇███▇▇▇████▇█████▆██████████████▇███▇▇▆▇▆▅▆ █
  7.9 μs       Histogram: log(frequency) by time      11.8 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; @benchmark ldiv!($C, LowerTriangular($B), $A)
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  13.507 μs … 142.574 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     15.258 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   15.319 μs ±   2.045 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%

     ▁▃   ▁▂   ▁▃▅▁  ▁▄▄▁  ▂▆█▆▃
  ▁▂▅███▆▇███▆▅████▆▅████▆▆█████▆▄▄▆▆▅▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁ ▄
  13.5 μs         Histogram: frequency by time         18.5 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.

julia&gt; versioninfo()
Julia Version 1.8.0-DEV.438
Commit 88a6376e99* (2021-08-28 11:03 UTC)
Platform Info:
  OS: Linux (x86_64-redhat-linux)
  CPU: 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-12.0.1 (ORCJIT, tigerlake)
Environment:
  JULIA_NUM_THREADS = 8"><pre>julia<span class="pl-k">&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">set_num_threads</span>(<span class="pl-c1">min</span>(Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>(), TriangularSolve<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">num_cores</span>()))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">rdiv!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A, <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">3</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">8.309</span> μs …  <span class="pl-c1">24.357</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">8.769</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">8.812</span> μs ± <span class="pl-c1">382.702</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

               ▁▃▄▆▆██▇▆▅▃▁
  ▂▁▂▂▂▂▃▃▃▄▅▇██████████████▇▆▅▄▃▃▃▃▃▂▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▄
  <span class="pl-c1">8.31</span> μs         Histogram<span class="pl-k">:</span> frequency by time         <span class="pl-c1">9.7</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">rdiv!</span>(<span class="pl-c1">copyto!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A), <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B))
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">11.996</span> μs … <span class="pl-c1">151.147</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">14.163</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">14.281</span> μs ±   <span class="pl-c1">2.372</span> μs  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

          ▂▄▇███▇▆▅▃▂ ▁   ▂▄▄▅▅▅▆▃▃         ▁
  ▁▁▁▂▂▃▄▇██████████████████████████▇▆▅▄▅▆▇███▆▅▅▃▄▂▂▂▁▁▁▁▁▁▁▁ ▅
  <span class="pl-c1">12</span> μs           Histogram<span class="pl-k">:</span> frequency by time         <span class="pl-c1">17.3</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">5</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">7.903</span> μs …  <span class="pl-c1">22.442</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">9.871</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">9.789</span> μs ± <span class="pl-c1">864.957</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

  ▂▃  ▄▃  ▃▅   ▅▃   ▆▂   ▆▄   ▂▇▄   ▃█▅▂▂▁▁▄▆▃▁ ▁             ▂
  ██▅▂██▆▅██▆▆▆██▇▇███▇▇▇████▇█████▆██████████████▇███▇▇▆▇▆▅▆ █
  <span class="pl-c1">7.9</span> μs       Histogram<span class="pl-k">:</span> <span class="pl-c1">log</span>(frequency) by time      <span class="pl-c1">11.8</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">1</span> evaluation.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">13.507</span> μs … <span class="pl-c1">142.574</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">15.258</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">15.319</span> μs ±   <span class="pl-c1">2.045</span> μs  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

     ▁▃   ▁▂   ▁▃▅▁  ▁▄▄▁  ▂▆█▆▃
  ▁▂▅███▆▇███▆▅████▆▅████▆▆█████▆▄▄▆▆▅▄▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁ ▄
  <span class="pl-c1">13.5</span> μs         Histogram<span class="pl-k">:</span> frequency by time         <span class="pl-c1">18.5</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">versioninfo</span>()
Julia Version <span class="pl-c1">1.8</span>.<span class="pl-c1">0</span><span class="pl-k">-</span>DEV.<span class="pl-c1">438</span>
Commit <span class="pl-c1">88</span>a6376e99<span class="pl-k">*</span> (<span class="pl-c1">2021</span><span class="pl-k">-</span><span class="pl-c1">08</span><span class="pl-k">-</span><span class="pl-c1">28</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">03</span> UTC)
Platform Info<span class="pl-k">:</span>
  OS<span class="pl-k">:</span> Linux (x86_64<span class="pl-k">-</span>redhat<span class="pl-k">-</span>linux)
  CPU<span class="pl-k">:</span> <span class="pl-c1">11</span>th Gen <span class="pl-c1">Intel</span>(R) <span class="pl-c1">Core</span>(TM) i7<span class="pl-k">-</span><span class="pl-c1">1165</span>G7 @ <span class="pl-c1">2.80</span>GHz
  WORD_SIZE<span class="pl-k">:</span> <span class="pl-c1">64</span>
  LIBM<span class="pl-k">:</span> libopenlibm
  LLVM<span class="pl-k">:</span> libLLVM<span class="pl-k">-</span><span class="pl-c1">12.0</span>.<span class="pl-c1">1</span> (ORCJIT, tigerlake)
Environment<span class="pl-k">:</span>
  JULIA_NUM_THREADS <span class="pl-k">=</span> <span class="pl-c1">8</span></pre></div>
<p dir="auto">For editing convenience (you can copy/paste the above into a REPL and it should automatically strip <code>julia&gt; </code>s and outputs, but the above is less convenient to edit if you want to try changing the benchmarks):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TriangularSolve, LinearAlgebra, MKL;
BLAS.set_num_threads(Threads.nthreads())
BLAS.get_config().loaded_libs
N = 100;

A = rand(N,N); B = rand(N,N); C = similar(A);

@benchmark TriangularSolve.rdiv!($C, $A, UpperTriangular($B), Val(false))
@benchmark rdiv!(copyto!($C, $A), UpperTriangular($B))

@benchmark TriangularSolve.ldiv!($C, LowerTriangular($B), $A, Val(false))
@benchmark ldiv!($C, LowerTriangular($B), $A)

BLAS.set_num_threads(TriangularSolve.VectorizationBase.num_cores())
@benchmark TriangularSolve.rdiv!($C, $A, UpperTriangular($B))
@benchmark rdiv!(copyto!($C, $A), UpperTriangular($B))

@benchmark TriangularSolve.ldiv!($C, LowerTriangular($B), $A)
@benchmark ldiv!($C, LowerTriangular($B), $A)

versioninfo()"><pre><span class="pl-k">using</span> TriangularSolve, LinearAlgebra, MKL;
BLAS<span class="pl-k">.</span><span class="pl-c1">set_num_threads</span>(Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>())
BLAS<span class="pl-k">.</span><span class="pl-c1">get_config</span>()<span class="pl-k">.</span>loaded_libs
N <span class="pl-k">=</span> <span class="pl-c1">100</span>;

A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N,N); B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N,N); C <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A);

<span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">rdiv!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A, <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-c1">Val</span>(<span class="pl-c1">false</span>))
<span class="pl-c1">@benchmark</span> <span class="pl-c1">rdiv!</span>(<span class="pl-c1">copyto!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A), <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B))

<span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A, <span class="pl-c1">Val</span>(<span class="pl-c1">false</span>))
<span class="pl-c1">@benchmark</span> <span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A)

BLAS<span class="pl-k">.</span><span class="pl-c1">set_num_threads</span>(TriangularSolve<span class="pl-k">.</span>VectorizationBase<span class="pl-k">.</span><span class="pl-c1">num_cores</span>())
<span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">rdiv!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A, <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B))
<span class="pl-c1">@benchmark</span> <span class="pl-c1">rdiv!</span>(<span class="pl-c1">copyto!</span>(<span class="pl-k">$</span>C, <span class="pl-k">$</span>A), <span class="pl-c1">UpperTriangular</span>(<span class="pl-k">$</span>B))

<span class="pl-c1">@benchmark</span> TriangularSolve<span class="pl-k">.</span><span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A)
<span class="pl-c1">@benchmark</span> <span class="pl-c1">ldiv!</span>(<span class="pl-k">$</span>C, <span class="pl-c1">LowerTriangular</span>(<span class="pl-k">$</span>B), <span class="pl-k">$</span>A)

<span class="pl-c1">versioninfo</span>()</pre></div>
<p dir="auto">Currently, <code>rdiv!</code> with <code>UpperTriangular</code> and <code>ldiv!</code> with <code>LowerTriangulra</code> matrices are the only supported configurations.</p>
</article></div>