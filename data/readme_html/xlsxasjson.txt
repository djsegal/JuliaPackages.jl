<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-xlsxasjson-kr" class="anchor" aria-hidden="true" href="#xlsxasjson-kr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>XLSXasJSON [<a href="https://github.com/devsisters/XLSXasJSON.jl/blob/master/README_kr.md">KR</a>]</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/f8dc8b0dba0c01c69878a1b06bf2167d2bf9a5dd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"><img src="https://camo.githubusercontent.com/f8dc8b0dba0c01c69878a1b06bf2167d2bf9a5dd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="LICENSE MIT" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/devsisters/XLSXasJSON.jl/workflows/Run%20CI%20on%20master/badge.svg"><img src="https://github.com/devsisters/XLSXasJSON.jl/workflows/Run%20CI%20on%20master/badge.svg" alt="Run CI on master" style="max-width:100%;"></a></p>
<p>Inspired by <a href="https://github.com/stevetarver/excel-as-json">excel-as-json</a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Parse Excel xlsx files into a Julia data structure to write them as a JSON encoded file.</p>
<p>Designated row or colum must be standardized <a href="https://tools.ietf.org/html/rfc6901" rel="nofollow">JSONPointer</a> token, remaining rows will passed to json encoded file.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add XLSXasJSON</pre></div>
<h2><a id="user-content-usage-1" class="anchor" aria-hidden="true" href="#usage-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-k">using</span> XLSXasJSON, JSON

    p <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(XLSXasJSON)), <span class="pl-s"><span class="pl-pds">"</span>../test/data<span class="pl-pds">"</span></span>)
    xf <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(p, <span class="pl-s"><span class="pl-pds">"</span>examples.xlsx<span class="pl-pds">"</span></span>)
    jws <span class="pl-k">=</span> <span class="pl-c1">JSONWorksheet</span>(xf, <span class="pl-c1">:example1</span>)

    <span class="pl-c"><span class="pl-c">#</span> turns into json object</span>
    JSON<span class="pl-k">.</span><span class="pl-c1">json</span>(jws)
    <span class="pl-c"><span class="pl-c">#</span> saves with indent</span>
    XLSXasJSON<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>examples_example1.json<span class="pl-pds">"</span></span>, jws; indent <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<h4><a id="user-content-any" class="anchor" aria-hidden="true" href="#any"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Any</h4>
<p>A simple, row-oriented key:</p>
<table>
<thead>
<tr>
<th>/color</th>
</tr>
</thead>
<tbody>
<tr>
<td>red</td>
</tr>
</tbody>
</table>
<p>produces</p>
<div class="highlight highlight-source-json"><pre>[{
  <span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>
}]</pre></div>
<h4><a id="user-content-dict" class="anchor" aria-hidden="true" href="#dict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dict</h4>
<p>A dotted key name looks like:</p>
<table>
<thead>
<tr>
<th>/color/name</th>
<th>color/value</th>
</tr>
</thead>
<tbody>
<tr>
<td>red</td>
<td>#f00</td>
</tr>
</tbody>
</table>
<p>and produces:</p>
<div class="highlight highlight-source-json"><pre>[{
  <span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>value<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>#f00<span class="pl-pds">"</span></span>
    }
}]</pre></div>
<p>It can have as many layers as you want:</p>
<table>
<thead>
<tr>
<th>/a/b/c/d/e/f</th>
</tr>
</thead>
<tbody>
<tr>
<td>It can be done</td>
</tr>
</tbody>
</table>
<p>and produces:</p>
<div class="highlight highlight-source-json"><pre>[{
    <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>: {
          <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>: {
            <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>: {
              <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>It can be done<span class="pl-pds">"</span></span>
            }
          }
        }
      }
    }
  }]
</pre></div>
<h4><a id="user-content-array" class="anchor" aria-hidden="true" href="#array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Array</h4>
<p>Sometimes it's convienient to put array values in seperate column in XLSX.</p>
<table>
<thead>
<tr>
<th>/color/name</th>
<th>color/rgb/1</th>
<th>color/rgb/2</th>
<th>color/rgb/3</th>
</tr>
</thead>
<tbody>
<tr>
<td>red</td>
<td>255</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<div class="highlight highlight-source-json"><pre>[{
  <span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>rgb<span class="pl-pds">"</span></span>: [<span class="pl-c1">255</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
    }
}]</pre></div>
<h4><a id="user-content-type-declarations" class="anchor" aria-hidden="true" href="#type-declarations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Type Declarations</h4>
<p>You can declare Type with <code>::</code> operator the same way as in Julia.</p>
<ul>
<li>The value of <code>Vector</code> will be splitted with deliminator ';'.</li>
<li>Only JSON supported types will be checked for validation.</li>
</ul>
<table>
<thead>
<tr>
<th>/array::Vector</th>
<th>/array_int::Vector{Int}</th>
<th>/array_float::Vector{Float64}</th>
</tr>
</thead>
<tbody>
<tr>
<td>100;200;300</td>
<td>100;200;300</td>
<td>100;200;300</td>
</tr>
</tbody>
</table>
<p>and produces:</p>
<div class="highlight highlight-source-json"><pre>[{
  <span class="pl-s"><span class="pl-pds">"</span>array<span class="pl-pds">"</span></span>: [
    <span class="pl-s"><span class="pl-pds">"</span>100<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>200<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>300<span class="pl-pds">"</span></span>
  ],
  <span class="pl-s"><span class="pl-pds">"</span>array_int<span class="pl-pds">"</span></span>: [
    <span class="pl-c1">100</span>,
    <span class="pl-c1">200</span>,
    <span class="pl-c1">300</span>
  ],
  <span class="pl-s"><span class="pl-pds">"</span>array_float<span class="pl-pds">"</span></span>: [
    <span class="pl-c1">100.0</span>,
    <span class="pl-c1">200.0</span>,
    <span class="pl-c1">300.0</span>
  ]
}]</pre></div>
<h4><a id="user-content-all-of-the-above" class="anchor" aria-hidden="true" href="#all-of-the-above"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>All of the above</h4>
<p>Now you know all the rules necessary to create any json data structure you want with just a column name.
This is a more complete row-oriented example:</p>
<table>
<thead>
<tr>
<th>/a/b</th>
<th>/a/b2::Vector{Int}</th>
<th>/a/b3/1,Type</th>
<th>/a/b3/1/Amount</th>
<th>/a/b3/2/Type</th>
<th>/a/b3/2/Amount</th>
<th>/a/b3/3/Type</th>
<th>/a/b3/3/Amount::Vector</th>
</tr>
</thead>
<tbody>
<tr>
<td>Fooood</td>
<td>100;200;300</td>
<td>Cake</td>
<td>50</td>
<td>Chocolate</td>
<td>19</td>
<td>Ingredient</td>
<td>Salt;100</td>
</tr>
</tbody>
</table>
<p>would produce:</p>
<div class="highlight highlight-source-json"><pre>[
  {
    <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>: {
      <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Fooood<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>b2<span class="pl-pds">"</span></span>: [
        <span class="pl-c1">100</span>,
        <span class="pl-c1">200</span>,
        <span class="pl-c1">300</span>
      ],
      <span class="pl-s"><span class="pl-pds">"</span>b3<span class="pl-pds">"</span></span>: [
        {
          <span class="pl-s"><span class="pl-pds">"</span>Type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Cake<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>Amount<span class="pl-pds">"</span></span>: <span class="pl-c1">50</span>
        },
        {
          <span class="pl-s"><span class="pl-pds">"</span>Type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Chocolate<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>Amount<span class="pl-pds">"</span></span>: <span class="pl-c1">19</span>
        },
        {
          <span class="pl-s"><span class="pl-pds">"</span>Type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Ingredient<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>Amount<span class="pl-pds">"</span></span>: [
            <span class="pl-s"><span class="pl-pds">"</span>Salt<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>100<span class="pl-pds">"</span></span>
          ]
        }
      ]
    }
  }
]
</pre></div>
<p>You can do the same with column-oriented sheets with the <code>row_oriented = false</code> keyword argument.</p>
</article></div>