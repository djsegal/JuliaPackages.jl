<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/abeschneider/PEGParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ba74af32cf90826d88d916718b47c76161764a0e34444304fa5baaaad8ed631c/68747470733a2f2f7472617669732d63692e6f72672f6162657363686e65696465722f5045475061727365722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/abeschneider/PEGParser.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-pegparser" class="anchor" aria-hidden="true" href="#pegparser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PEGParser</h1>
<p>PEGParser is a PEG Parser for Julia with Packrat capabilties. PEGParser was inspired by pyparsing, parsimonious, boost::spirit, as well as several others.</p>
<h2><a id="user-content-defining-a-grammar" class="anchor" aria-hidden="true" href="#defining-a-grammar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining a grammar</h2>
<p>To define a grammar you can write:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar &lt;name&gt; begin
  rule1 = ...
  rule2 = ...
  ...
end
"><pre><span class="pl-c1">@grammar</span> <span class="pl-k">&lt;</span>name<span class="pl-k">&gt;</span> <span class="pl-k">begin</span>
  rule1 <span class="pl-k">=</span> <span class="pl-k">...</span>
  rule2 <span class="pl-k">=</span> <span class="pl-k">...</span>
  <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-allowed-rules" class="anchor" aria-hidden="true" href="#allowed-rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Allowed rules</h3>
<p>The following rules can be used:</p>
<ul>
<li>Terminals: Strings and characters</li>
<li>Or: <code>a | b | c</code></li>
<li>And: <code>a + b + c</code></li>
<li>Grouping: <code>(a + b) | (c + d)</code></li>
<li>Optional: ?(a + b)</li>
<li>One or more: <code>+((a + b) | (c + d))</code></li>
<li>Zero or more: <code>*((a + b) | (c + d))</code></li>
<li>Look ahead: <code>a &gt; (b + c)</code></li>
<li>Regular expressions: <code>r"[a-zA-Z]+"</code></li>
<li>Lists: <code>list(rule, delim)</code> <em>or</em> <code>list(rule, delim, min=1)</code></li>
<li>Suppression: <code>-rule</code></li>
<li>Semantic action: <code>rule { expr }</code></li>
</ul>
<p>For semantic actions, the <code>expr</code> may use the variables: <code>node</code>, <code>value</code>, <code>first</code>, <code>last</code>, and <code>children</code>. The <code>value</code> variable has a corresponding alias <code>_0</code> and each element of <code>children</code> <code>_i</code>, where <code>i</code> is the index into <code>children</code>. See below for examples using this.</p>
<h4><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h4>
<p>Multiple: <code>(a+b)^(3, 5)</code></p>
<h2><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1</h2>
<p>Let's start by creating a simple calculator that can take two numbers and an operator to give a result.</p>
<p>We first define the grammar:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar calc1 begin
  start = number + op + number
  op = plus | minus
  number = -space + r&quot;[0-9]+&quot;
  plus = -space + &quot;+&quot;
  minus = -space + &quot;-&quot;
  space = r&quot;[ \t\n\r]*&quot;
end
"><pre><span class="pl-c1">@grammar</span> calc1 <span class="pl-k">begin</span>
  start <span class="pl-k">=</span> number <span class="pl-k">+</span> op <span class="pl-k">+</span> number
  op <span class="pl-k">=</span> plus <span class="pl-k">|</span> minus
  number <span class="pl-k">=</span> <span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-sr"><span class="pl-pds">r"</span>[0-9]+<span class="pl-pds">"</span></span>
  plus <span class="pl-k">=</span> <span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>
  minus <span class="pl-k">=</span> <span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
  space <span class="pl-k">=</span> <span class="pl-sr"><span class="pl-pds">r"</span>[ <span class="pl-cce">\t\n\r</span>]*<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p>All grammars by default use <code>start</code> as the starting rule. You can specify a different starting rule in the <code>parse</code> function if you desire.</p>
<p>The starting rule is composed of two other rules: <code>number</code> and <code>op</code>. For this calculator, we only allow <code>+</code> and <code>-</code>. Note, that this could in fact be written more concisely with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="op = -space + r&quot;[+-]&quot;
"><pre>op <span class="pl-k">=</span> <span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-sr"><span class="pl-pds">r"</span>[+-]<span class="pl-pds">"</span></span></pre></div>
<p>The <code>number</code> rule just matches any digit between 0 to 9. You'll note that spaces appear in front of all terminals. This is because PEGs don't handle spaces automatically.</p>
<p>Now we can run this grammar with some input:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(ast, pos, error) = parse(calc1, &quot;4+5&quot;)
println(ast)
"><pre>(ast, pos, error) <span class="pl-k">=</span> <span class="pl-c1">parse</span>(calc1, <span class="pl-s"><span class="pl-pds">"</span>4+5<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(ast)</pre></div>
<p>will result in the following output:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="node(start) {AndRule}
1: node(number) {AndRule}
  1: node(number.2) {'4',RegexRule}
2: node(plus) {AndRule}
  1: node(plus.2) {'+',Terminal}
3: node(number) {AndRule}
  1: node(number.2) {'5',RegexRule}
"><pre><code>node(start) {AndRule}
1: node(number) {AndRule}
  1: node(number.2) {'4',RegexRule}
2: node(plus) {AndRule}
  1: node(plus.2) {'+',Terminal}
3: node(number) {AndRule}
  1: node(number.2) {'5',RegexRule}
</code></pre></div>
<p>Our input is correctly parsed by our input, but we either have to traverse the tree to get out the result, or use change the output of the parse.</p>
<p>We can change the output of the parse with semantic actions. Every rule already has a semantic action attached to it. Normally it is set to either return a node in the tree or (for the or-rule) give the first child node.</p>
<p>For example, we can change the <code>number</code> rule to emit an actual number:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="number = (-space + r&quot;[0-9]+&quot;) { parseint(_1.value) }
"><pre>number <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-sr"><span class="pl-pds">r"</span>[0-9]+<span class="pl-pds">"</span></span>) { <span class="pl-c1">parseint</span>(_1<span class="pl-k">.</span>value) }</pre></div>
<p>The curly-braces after a rule allows either an expression or function to be used as the new action. In this case, the first child (the number, as the space is suppressed), as specified by <code>_1</code>, is parsed as an integer.</p>
<p>If we rewrite the grammar fully with actions defined for the rules, we end up with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar calc1 begin
  start = (number + op + number) {
    apply(eval(_2), _1, _3)
  }

  op = plus | minus
  number = (-space + r&quot;[0-9]+&quot;) {parseint(_1.value)}
  plus = (-space + &quot;+&quot;) {symbol(_1.value)}
  minus = (-space + &quot;-&quot;) {symbol(_1.value)}
  space = r&quot;[ \t\n\r]*&quot;
end

data = &quot;4+5&quot;
(ast, pos, error) = parse(calc1, data)
println(ast)
"><pre><span class="pl-c1">@grammar</span> calc1 <span class="pl-k">begin</span>
  start <span class="pl-k">=</span> (number <span class="pl-k">+</span> op <span class="pl-k">+</span> number) {
    <span class="pl-c1">apply</span>(<span class="pl-c1">eval</span>(_2), _1, _3)
  }

  op <span class="pl-k">=</span> plus <span class="pl-k">|</span> minus
  number <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-sr"><span class="pl-pds">r"</span>[0-9]+<span class="pl-pds">"</span></span>) {<span class="pl-c1">parseint</span>(_1<span class="pl-k">.</span>value)}
  plus <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>) {<span class="pl-c1">symbol</span>(_1<span class="pl-k">.</span>value)}
  minus <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>) {<span class="pl-c1">symbol</span>(_1<span class="pl-k">.</span>value)}
  space <span class="pl-k">=</span> <span class="pl-sr"><span class="pl-pds">r"</span>[ <span class="pl-cce">\t\n\r</span>]*<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

data <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>4+5<span class="pl-pds">"</span></span>
(ast, pos, error) <span class="pl-k">=</span> <span class="pl-c1">parse</span>(calc1, data)
<span class="pl-c1">println</span>(ast)</pre></div>
<p>We now get <code>9</code> as an answer. Thus, the parse is also doing the calculation. The code for this can be found in <code>calc1.jl</code>, with <code>calc2.jl</code> providing a more realistic (and useful) calculator.</p>
<h2><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2</h2>
<p>In <code>calc3.jl</code>, you can find a different approach to this problem. Instead of trying to calculate the answer immediately, the full syntax tree is created. This allows it to be transformed into different forms. In this example, we transform the tree into Julia code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@grammar calc3 begin
  start = expr

  expr_op = term + op1 + expr
  expr = expr_op | term
  term_op = factor + op2 + term

  term = term_op | factor
  factor = number | pfactor
  pfactor = (lparen + expr + rparen) { _2 }
  op1 = add | sub
  op2 = mult | div

  number = (-space + float) { parsefloat(_1.value) } | (-space + integer) { parseint(_1.value) }
  add = (-space + &quot;+&quot;) { symbol(_1.value) }
  sub = (-space + &quot;-&quot;) { symbol(_1.value) }
  mult = (-space + &quot;*&quot;) { symbol(_1.value) }
  div = (-space + &quot;/&quot;) { symbol(_1.value) }

  lparen = (-space + &quot;(&quot;) { _1 }
  rparen = (-space + &quot;)&quot;) { _1 }
  space = r&quot;[ \n\r\t]*&quot;
end
"><pre><span class="pl-c1">@grammar</span> calc3 <span class="pl-k">begin</span>
  start <span class="pl-k">=</span> expr

  expr_op <span class="pl-k">=</span> term <span class="pl-k">+</span> op1 <span class="pl-k">+</span> expr
  expr <span class="pl-k">=</span> expr_op <span class="pl-k">|</span> term
  term_op <span class="pl-k">=</span> factor <span class="pl-k">+</span> op2 <span class="pl-k">+</span> term

  term <span class="pl-k">=</span> term_op <span class="pl-k">|</span> factor
  factor <span class="pl-k">=</span> number <span class="pl-k">|</span> pfactor
  pfactor <span class="pl-k">=</span> (lparen <span class="pl-k">+</span> expr <span class="pl-k">+</span> rparen) { _2 }
  op1 <span class="pl-k">=</span> add <span class="pl-k">|</span> sub
  op2 <span class="pl-k">=</span> mult <span class="pl-k">|</span> div

  number <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> float) { <span class="pl-c1">parsefloat</span>(_1<span class="pl-k">.</span>value) } <span class="pl-k">|</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> integer) { <span class="pl-c1">parseint</span>(_1<span class="pl-k">.</span>value) }
  add <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>) { <span class="pl-c1">symbol</span>(_1<span class="pl-k">.</span>value) }
  sub <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>) { <span class="pl-c1">symbol</span>(_1<span class="pl-k">.</span>value) }
  mult <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>*<span class="pl-pds">"</span></span>) { <span class="pl-c1">symbol</span>(_1<span class="pl-k">.</span>value) }
  div <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>) { <span class="pl-c1">symbol</span>(_1<span class="pl-k">.</span>value) }

  lparen <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>) { _1 }
  rparen <span class="pl-k">=</span> (<span class="pl-k">-</span>space <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>) { _1 }
  space <span class="pl-k">=</span> <span class="pl-sr"><span class="pl-pds">r"</span>[ <span class="pl-cce">\n\r\t</span>]*<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p>You will also notice that instead of trying to define <code>integer</code> and <code>float</code> manually, we are now using pre-defined parsers. Custom parsers can be defined to both make defining new grammars easier as well as add new types of functionality (e.g. maintaining symbol tables).</p>
<p>The grammar is now ready to be used to parse strings:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(ast, pos, error) = parse(calc3, &quot;3.145+5*(6-4.0)&quot;)
"><pre>(ast, pos, error) <span class="pl-k">=</span> <span class="pl-c1">parse</span>(calc3, <span class="pl-s"><span class="pl-pds">"</span>3.145+5*(6-4.0)<span class="pl-pds">"</span></span>)</pre></div>
<p>which results in the following AST:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="node(start) {ReferencedRule}
  node(expr_op) {AndRule}
  1: 3.145 (Float64)
  2: + (Symbol)
  3: node(term_op) {AndRule}
    1: 5 (Int64)
    2: * (Symbol)
    3: node(expr_op) {AndRule}
      1: 6 (Int64)
      2: - (Symbol)
      3: 400.0 (Float64)
"><pre><code>node(start) {ReferencedRule}
  node(expr_op) {AndRule}
  1: 3.145 (Float64)
  2: + (Symbol)
  3: node(term_op) {AndRule}
    1: 5 (Int64)
    2: * (Symbol)
    3: node(expr_op) {AndRule}
      1: 6 (Int64)
      2: - (Symbol)
      3: 400.0 (Float64)
</code></pre></div>
<p>Now that we have an AST, we can create transforms to convert the AST into Julia code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="toexpr(node, cnodes, ::MatchRule{:default}) = cnodes
toexpr(node, cnodes, ::MatchRule{:term_op}) = Expr(:call, cnodes[2], cnodes[1], cnodes[3])
toexpr(node, cnodes, ::MatchRule{:expr_op}) = Expr(:call, cnodes[2], cnodes[1], cnodes[3])
"><pre><span class="pl-en">toexpr</span>(node, cnodes, <span class="pl-k">::</span><span class="pl-c1">MatchRule{:default}</span>) <span class="pl-k">=</span> cnodes
<span class="pl-en">toexpr</span>(node, cnodes, <span class="pl-k">::</span><span class="pl-c1">MatchRule{:term_op}</span>) <span class="pl-k">=</span> <span class="pl-c1">Expr</span>(<span class="pl-c1">:call</span>, cnodes[<span class="pl-c1">2</span>], cnodes[<span class="pl-c1">1</span>], cnodes[<span class="pl-c1">3</span>])
<span class="pl-en">toexpr</span>(node, cnodes, <span class="pl-k">::</span><span class="pl-c1">MatchRule{:expr_op}</span>) <span class="pl-k">=</span> <span class="pl-c1">Expr</span>(<span class="pl-c1">:call</span>, cnodes[<span class="pl-c1">2</span>], cnodes[<span class="pl-c1">1</span>], cnodes[<span class="pl-c1">3</span>])</pre></div>
<p>and to use the transforms:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="code = transform(toexpr, ast)
"><pre>code <span class="pl-k">=</span> <span class="pl-c1">transform</span>(toexpr, ast)</pre></div>
<p>to generate the Expr:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Expr
  head: Symbol call
  args: Array(Any,(3,))
    1: Symbol +
    2: Float64 3.145
    3: Expr
      head: Symbol call
      args: Array(Any,(3,))
        1: Symbol *
        2: Int64 5
        3: Expr
        head: Symbol call
        args: Array(Any,(3,))
        typ: Any
      typ: Any
  typ: Any
"><pre><code>Expr
  head: Symbol call
  args: Array(Any,(3,))
    1: Symbol +
    2: Float64 3.145
    3: Expr
      head: Symbol call
      args: Array(Any,(3,))
        1: Symbol *
        2: Int64 5
        3: Expr
        head: Symbol call
        args: Array(Any,(3,))
        typ: Any
      typ: Any
  typ: Any
</code></pre></div>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h2>
<p>This is still very much a work in progress and doesn't yet have as much test coverage as I would like.</p>
<p>The error handling still needs a lot of work. Currently only a single error will be emitted, but the hope is to allow multiple errors to be returned.</p>
</article></div>