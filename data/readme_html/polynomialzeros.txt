<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-polynomialzeros" class="anchor" aria-hidden="true" href="#polynomialzeros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PolynomialZeros</h1>
<p>Methods to find zeros (roots) of polynomials over given domains</p>
<p>Linux: <a href="https://travis-ci.org/jverzani/PolynomialZeros.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e1b26e0b21466c1c1ea987ebe89d2e3ea9e8e6fccab9f42caf12f2bf27e1d97b/68747470733a2f2f7472617669732d63692e6f72672f6a7665727a616e692f506f6c796e6f6d69616c5a65726f732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jverzani/PolynomialZeros.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Windows:
<a href="https://ci.appveyor.com/project/jverzani/polynomialzeros-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/86bd9d2824a2b7c2af32d81f1f2187d7b36679fefc3739c1d7753487a7a5df48/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6f766b7574723067787264746a786d622f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ovkutr0gxrdtjxmb/branch/master?svg=true" style="max-width:100%;"></a></p>
<p>This package provides the method <code>poly_roots</code> to find roots of
univariate polynomial functions over the complex numbers, the real
numbers, the rationals, the integers, or Z_p. (A "root" is the name
for a "zero" of a polynomial function.) The package takes advantage of
other root-finding packages for polynomials within Julia (e.g.,
<code>PolynomialRoots</code> for numeric solutions over the complex numbers and
<code>PolynomialFactors</code> for exact solutions over the rationals and integers).</p>
<p>The basic interface is</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="poly_roots(f, domain)
"><pre><code>poly_roots(f, domain)
</code></pre></div>
<p>The polynomial, <code>f</code>, is specified through a function, a vector of
coefficients (<code>[p0, p1, ..., pn]</code>), or as a <code>Poly{T}</code> object, from the
the <code>Polynomials.jl</code> package. The domain is specified by <code>Over.C</code> (the
default), <code>Over.R</code>, <code>Over.Q</code>, <code>Over.Z</code>, or <code>over.Zp{p}</code>, with variants
for specifying an underlying type.</p>
<p>Examples:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; poly_roots(x -&gt; x^4 - 1, Over.C)  # uses `roots` from `PolynomialRoots.jl`
4-element Array{Complex{Float64},1}:
  0.0+1.0im
  1.0-0.0im
  0.0-1.0im
 -1.0+0.0im


julia&gt; poly_roots(x -&gt; x^4 - 1, Over.R)
2-element Array{Float64,1}:
  1.0
  -1.0

julia&gt; poly_roots(x -&gt; x^4 - 1, Over.Q) # uses `PolynomialFactors.jl`
2-element Array{Rational{Int64},1}:
 -1//1
  1//1

julia&gt; poly_roots(x -&gt; x^4 - 1, Over.Z) # uses `PolynomialFactors.jl`
2-element Array{Int64,1}:
 -1
  1

julia&gt; poly_roots(x -&gt; x^4 - 1, Over.Zp{5}) # uses `PolynomialFactors.jl`
4-element Array{Int64,1}:
 4
 1
 3
 2
"><pre><code>julia&gt; poly_roots(x -&gt; x^4 - 1, Over.C)  # uses `roots` from `PolynomialRoots.jl`
4-element Array{Complex{Float64},1}:
  0.0+1.0im
  1.0-0.0im
  0.0-1.0im
 -1.0+0.0im


julia&gt; poly_roots(x -&gt; x^4 - 1, Over.R)
2-element Array{Float64,1}:
  1.0
  -1.0

julia&gt; poly_roots(x -&gt; x^4 - 1, Over.Q) # uses `PolynomialFactors.jl`
2-element Array{Rational{Int64},1}:
 -1//1
  1//1

julia&gt; poly_roots(x -&gt; x^4 - 1, Over.Z) # uses `PolynomialFactors.jl`
2-element Array{Int64,1}:
 -1
  1

julia&gt; poly_roots(x -&gt; x^4 - 1, Over.Zp{5}) # uses `PolynomialFactors.jl`
4-element Array{Int64,1}:
 4
 1
 3
 2
</code></pre></div>
<p>Domains can also have their underlying types specified. For example, to solve
over the <code>BigFloat</code> type, we have:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="poly_roots(x -&gt; x^4 - 1, Over.CC{BigFloat})  # `CC{BigFloat}` not just `C`
using DoubleFloats  # significantly faster than BigFloat
poly_roots(x -&gt; x^4 - 1, Over.CC{Double64})
4-element Array{Complex{DoubleFloat{Float64}},1}:
                    1.0 + 0.0im
                   -1.0 + 0.0im
 -7.851872429582108e-35 - 1.0im
 -7.851872429582108e-35 + 1.0im
"><pre><span class="pl-c1">poly_roots</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>, Over<span class="pl-k">.</span>CC{BigFloat})  <span class="pl-c"><span class="pl-c">#</span> `CC{BigFloat}` not just `C`</span>
<span class="pl-k">using</span> DoubleFloats  <span class="pl-c"><span class="pl-c">#</span> significantly faster than BigFloat</span>
<span class="pl-c1">poly_roots</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>, Over<span class="pl-k">.</span>CC{Double64})
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Complex{DoubleFloat{Float64}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
                    <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
                   <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">7.851872429582108e-35</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">7.851872429582108e-35</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span></pre></div>
<p>There are other methods for <code>Over.C</code>. This will use the AMVW method:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; poly_roots(x -&gt; x^4 - 1, Over.C, method=:amvw) # might differ slightly
4-element Array{Complex{Float64},1}:
 -2.1603591655723396e-16 - 0.9999999999999999im
 -2.1603591655723396e-16 + 0.9999999999999999im
                     1.0 + 0.0im
                    -1.0 + 0.0im
"><pre><code>julia&gt; poly_roots(x -&gt; x^4 - 1, Over.C, method=:amvw) # might differ slightly
4-element Array{Complex{Float64},1}:
 -2.1603591655723396e-16 - 0.9999999999999999im
 -2.1603591655723396e-16 + 0.9999999999999999im
                     1.0 + 0.0im
                    -1.0 + 0.0im
</code></pre></div>
<p>This method is useful for high-degree polynomials (cf. <a href="https://github.com/andreasnoack/FastPolynomialRoots.jl">FastPolynomialRoots</a>):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="n = 5000
rs = poly_roots(randn(n+1))
sum(isreal, rs) # 0
sum(!isnan, rs) # 1 (should be n)
rs = poly_roots(randn(n+1), method=:amvw)
sum(isreal, rs)  # 6 ~  6.04... = 2/π*log(n) + 0.6257358072 + 2/(n*π)
sum(!isnan, rs) # 5000 = n
"><pre><code>n = 5000
rs = poly_roots(randn(n+1))
sum(isreal, rs) # 0
sum(!isnan, rs) # 1 (should be n)
rs = poly_roots(randn(n+1), method=:amvw)
sum(isreal, rs)  # 6 ~  6.04... = 2/π*log(n) + 0.6257358072 + 2/(n*π)
sum(!isnan, rs) # 5000 = n
</code></pre></div>
<h2><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Details</h2>
<p>This package uses:</p>
<ul>
<li>
<p>The <code>PolynomialRoots</code> package to find roots over the complex
numbers. The <code>Roots</code> package can also be used. As well, an
implementation of the
<a href="http://epubs.siam.org/doi/abs/10.1137/140983434" rel="nofollow">AMVW</a> algorithm can
be used. The default seems to be faster and as accurate as the others,
but for very high degree polynomials, the <code>:amvw</code> method should be
used, as it will be faster and more reliable.</p>
</li>
<li>
<p>The <code>PolynomialFactors</code> package to return roots over the
rationals, integers, and integers modulo a prime.</p>
</li>
<li>
<p>As well, it provides an algorithm to find the real
roots of polynomials.</p>
</li>
</ul>
<p>The main motivation for this package was to move the polynomial
specific code out of the <code>Roots</code> package. This makes the <code>Roots</code>
package have fewer dependencies and a more focused task. In addition,
the polynomial specific code could use some better implementations of
the underlying algorithms.</p>
<p>In the process of doing this, making a common interface to the other
root-finding packages seemed to make sense.</p>
<h3><a id="user-content-other-possibly-useful-methods" class="anchor" aria-hidden="true" href="#other-possibly-useful-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other possibly useful methods</h3>
<p>The package also provides</p>
<ul>
<li>
<p><code>PolynomialZeros.AGCD.agcd</code> for computing an <em>approximate</em> GCD of
polynomials <code>p</code> and <code>q</code> over <code>Poly{Float64}</code>. (This is used to
reduce a polynomial over the reals to a square-free
polynomial. Square-free polynomials are needed for the
algorithm used. This algorithm can become unreliable for degree 15
or more polynomials.)</p>
</li>
<li>
<p><code>PolynomialZeros.MultRoot.multroot</code> for finding roots of <code>p</code> in
<code>Poly{Float64}</code> over <code>Complex{Float64}</code> which has some advantage if
<code>p</code> has high multiplicities. The <code>roots</code> function from the
<code>Polynomials</code> package will find all the roots of a polynomial. Its
performance degrades when the polynomial has high
multiplicities. The <code>multroot</code> function is provided to handle this
case a bit better. The function follows algorithms due to Zeng,
"Computing multiple roots of inexact polynomials", Math. Comp. 74
(2005), 869-903.</p>
</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x = variable(Float64)
p = (x-1)^4 * (x-2)^3 * (x-3)^2 * (x-4)
q = polyder(p)
gcd(p,q) # should be (x-1)^3 * (x-2)^2 * (x-3), but is a constant
u,v,w,resid = PolynomialZeros.AGCD.agcd(p,q)
LinearAlgebra.norm(u - (x-1)^3*(x-2)^2*(x-3), Inf)  ~ 3.8e-6
"><pre><code>x = variable(Float64)
p = (x-1)^4 * (x-2)^3 * (x-3)^2 * (x-4)
q = polyder(p)
gcd(p,q) # should be (x-1)^3 * (x-2)^2 * (x-3), but is a constant
u,v,w,resid = PolynomialZeros.AGCD.agcd(p,q)
LinearAlgebra.norm(u - (x-1)^3*(x-2)^2*(x-3), Inf)  ~ 3.8e-6
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="poly_roots(p) # 2 real, 8 complex
PolynomialZeros.MultRoot.multroot(p) # ([4.0,3.0,2.0,1.0], [1, 2, 3, 4])
"><pre><code>poly_roots(p) # 2 real, 8 complex
PolynomialZeros.MultRoot.multroot(p) # ([4.0,3.0,2.0,1.0], [1, 2, 3, 4])
</code></pre></div>
</article></div>