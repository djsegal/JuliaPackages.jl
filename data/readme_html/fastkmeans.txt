<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastkmeans" class="anchor" aria-hidden="true" href="#fastkmeans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastKmeans</h1>
<p dir="auto"><a href="https://travis-ci.org/lstagner/FastKmeans.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/18ec18fc453a7a72932b53555b83a6b2225bc1780ea779a93b7ca0ded6f7c903/68747470733a2f2f7472617669732d63692e6f72672f6c737461676e65722f466173744b6d65616e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/lstagner/FastKmeans.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements a fast k-means algorithm[1]</p>
<blockquote>
<p dir="auto">Hamerly, Greg. "Making k-means even faster." Proceedings of the 2010 SIAM international conference on data mining. Society for Industrial and Applied Mathematics, 2010.</p>
</blockquote>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Clustering, FastKmeans, Base.Iterators

julia&gt; x = range(-1,1,length=10)

julia&gt; p = Vector{Float64}[]; sizehint!(p,20_000_000)

julia&gt; for xc in product(x,x)
           xx = collect(xc)
           append!(p,[xx .+ 0.04*randn(2) for i=1:12500])
       end

julia&gt; p_matrix = hcat(p...);

julia&gt; @time a, centers = fastkmeans(p,100);
 1.982794 seconds (150 allocations: 104.917 MiB, 1.26% gc time)

julia&gt; @time k = Clustering.kmeans(p_matrix,100);
 102.383593 seconds (743 allocations: 1.760 GiB, 0.42% gc time)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Clustering, FastKmeans, Base<span class="pl-k">.</span>Iterators

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,length<span class="pl-k">=</span><span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> Vector{Float64}[]; <span class="pl-c1">sizehint!</span>(p,<span class="pl-c1">20_000_000</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> xc <span class="pl-k">in</span> <span class="pl-c1">product</span>(x,x)
           xx <span class="pl-k">=</span> <span class="pl-c1">collect</span>(xc)
           <span class="pl-c1">append!</span>(p,[xx <span class="pl-k">.+</span> <span class="pl-c1">0.04</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">2</span>) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">12500</span>])
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> p_matrix <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(p<span class="pl-k">...</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> a, centers <span class="pl-k">=</span> <span class="pl-c1">fastkmeans</span>(p,<span class="pl-c1">100</span>);
 <span class="pl-c1">1.982794</span> seconds (<span class="pl-c1">150</span> allocations<span class="pl-k">:</span> <span class="pl-c1">104.917</span> MiB, <span class="pl-c1">1.26</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> k <span class="pl-k">=</span> Clustering<span class="pl-k">.</span><span class="pl-c1">kmeans</span>(p_matrix,<span class="pl-c1">100</span>);
 <span class="pl-c1">102.383593</span> seconds (<span class="pl-c1">743</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.760</span> GiB, <span class="pl-c1">0.42</span><span class="pl-k">%</span> gc time)</pre></div>
</article></div>