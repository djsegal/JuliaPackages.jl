<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-plantsimengine" class="anchor" aria-hidden="true" href="#plantsimengine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PlantSimEngine</h1>
<p dir="auto"><a href="https://VEZY.github.io/PlantSimEngine.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://VEZY.github.io/PlantSimEngine.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/VEZY/PlantSimEngine.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/VEZY/PlantSimEngine.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/VEZY/PlantSimEngine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df44278d1bb11ac436dffee1dd85120ba2d436a5081a4ea23939bc74c4d5ab69/68747470733a2f2f636f6465636f762e696f2f67682f56455a592f506c616e7453696d456e67696e652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/VEZY/PlantSimEngine.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/571659510" rel="nofollow"><img src="https://camo.githubusercontent.com/ca100e7b0109a198efb8ac0b1a208d16b7fc3bd9096bf2419468afaa527ebe8f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3537313635393531302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/571659510.svg" style="max-width: 100%;"></a>
<a href="https://joss.theoj.org/papers/137e3e6c2ddc349bec39e06bb04e4e09" rel="nofollow"><img src="https://camo.githubusercontent.com/045801ccdfc273f7449e186a1f78bf38e5dc2f33893113a610b766aeafb16864/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31333765336536633264646333343962656333396530366262303465346530392f7374617475732e737667" alt="JOSS" data-canonical-src="https://joss.theoj.org/papers/137e3e6c2ddc349bec39e06bb04e4e09/status.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto"><code>PlantSimEngine</code> is a package for the simulation and modelling of plants, soil and atmosphere. It is designed to help researchers and practitioners prototype, implement, test plant/crop models at any scale, without the hassle of computer science technicality behind model coupling, running on several time-steps or objects.</p>
<p dir="auto">The package defines a framework for declaring processes and implementing associated models for their simulation.</p>
<p dir="auto">It focuses on key aspects of simulation and modeling such as:</p>
<ul dir="auto">
<li>Easy definition of new processes, such as light interception, photosynthesis, growth, soil water transfer...</li>
<li>Fast, interactive prototyping of models, with constraints to help users avoid errors, but sensible defaults to avoid over-complicating the model writing process</li>
<li>No hassle, the package manages automatically input and output variables, time-steps, objects, soft and hard coupling of models with a dependency graph</li>
<li>Switch between models without changing any code, with a simple syntax to define the model to use for a given process</li>
<li>Reduce the degrees of freedom by fixing variables, passing measurements, or using a simpler model for a given process</li>
<li><g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji>(very) fast computation <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji>, think of 100th of nanoseconds for one model, two coupled models (see this <a href="https://github.com/VEZY/PlantSimEngine.jl/blob/main/examples/benchmark.jl">benchmark script</a>), or the full energy balance of a leaf using <a href="https://github.com/VEZY/PlantBiophysics.jl">PlantBiophysics.jl</a> that uses PlantSimEngine</li>
<li>Out of the box Sequential, Parallel (Multi-threaded) or Distributed (Multi-Process) computations over objects, time-steps and independent processes (thanks to <a href="https://juliafolds.github.io/FLoops.jl/stable/" rel="nofollow">Floops.jl</a>)</li>
<li>Easily scalable, with methods for computing over objects, time-steps and even <a href="https://github.com/VEZY/MultiScaleTreeGraph.jl">Multi-Scale Tree Graphs</a></li>
<li>Composable, allowing the use of any types as inputs such as <a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a> to propagate units, or <a href="https://github.com/baggepinnen/MonteCarloMeasurements.jl">MonteCarloMeasurements.jl</a> to propagate measurement error</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install the package, enter the Julia package manager mode by pressing <code>]</code> in the REPL, and execute the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add PlantSimEngine"><pre>add PlantSimEngine</pre></div>
<p dir="auto">To use the package, execute this command from the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PlantSimEngine"><pre><span class="pl-k">using</span> PlantSimEngine</pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">The package is designed to be easy to use, and to help users avoid errors when implementing, coupling and simulating models.</p>
<h3 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple example</h3>
<p dir="auto">Here's a simple example of a model that simulates the growth of a plant, using a simple exponential growth model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ] add PlantSimEngine
using PlantSimEngine

# Include the model definition from the examples folder:
include(joinpath(pkgdir(PlantSimEngine), &quot;examples/ToyLAIModel.jl&quot;))

# Define the model:
model = ModelList(
    ToyLAIModel(),
    status=(degree_days_cu=1.0:2000.0,), # Pass the cumulated degree-days as input to the model
)

run!(model) # run the model

status(model) # extract the status, i.e. the output of the model"><pre><span class="pl-c"><span class="pl-c">#</span> ] add PlantSimEngine</span>
<span class="pl-k">using</span> PlantSimEngine

<span class="pl-c"><span class="pl-c">#</span> Include the model definition from the examples folder:</span>
<span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(PlantSimEngine), <span class="pl-s"><span class="pl-pds">"</span>examples/ToyLAIModel.jl<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Define the model:</span>
model <span class="pl-k">=</span> <span class="pl-c1">ModelList</span>(
    <span class="pl-c1">ToyLAIModel</span>(),
    status<span class="pl-k">=</span>(degree_days_cu<span class="pl-k">=</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">2000.0</span>,), <span class="pl-c"><span class="pl-c">#</span> Pass the cumulated degree-days as input to the model</span>
)

<span class="pl-c1">run!</span>(model) <span class="pl-c"><span class="pl-c">#</span> run the model</span>

<span class="pl-c1">status</span>(model) <span class="pl-c"><span class="pl-c">#</span> extract the status, i.e. the output of the model</span></pre></div>
<p dir="auto">Which gives:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="TimeStepTable{Status{(:degree_days_cu, :LAI...}(1300 x 2):
╭─────┬────────────────┬────────────╮
│ Row │ degree_days_cu │        LAI │
│     │        Float64 │    Float64 │
├─────┼────────────────┼────────────┤
│   1 │            1.0 │ 0.00560052 │
│   2 │            2.0 │ 0.00565163 │
│   3 │            3.0 │ 0.00570321 │
│   4 │            4.0 │ 0.00575526 │
│   5 │            5.0 │ 0.00580778 │
│  ⋮  │       ⋮        │     ⋮      │
╰─────┴────────────────┴────────────╯
                    1295 rows omitted"><pre class="notranslate"><code>TimeStepTable{Status{(:degree_days_cu, :LAI...}(1300 x 2):
╭─────┬────────────────┬────────────╮
│ Row │ degree_days_cu │        LAI │
│     │        Float64 │    Float64 │
├─────┼────────────────┼────────────┤
│   1 │            1.0 │ 0.00560052 │
│   2 │            2.0 │ 0.00565163 │
│   3 │            3.0 │ 0.00570321 │
│   4 │            4.0 │ 0.00575526 │
│   5 │            5.0 │ 0.00580778 │
│  ⋮  │       ⋮        │     ⋮      │
╰─────┴────────────────┴────────────╯
                    1295 rows omitted
</code></pre></div>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span><br>
The <code>ToyLAIModel</code> is available from the <a href="https://github.com/VEZY/PlantSimEngine.jl/tree/main/examples">examples folder</a>, and is a simple exponential growth model. It is used here for the sake of simplicity, but you can use any model you want, as long as it follows <code>PlantSimEngine</code> interface.</p>
</blockquote>
<p dir="auto">Of course you can plot the outputs quite easily:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ] add CairoMakie
using CairoMakie

lines(model[:degree_days_cu], model[:LAI], color=:green, axis=(ylabel=&quot;LAI (m² m⁻²)&quot;, xlabel=&quot;Cumulated growing degree days since sowing (°C)&quot;))"><pre><span class="pl-c"><span class="pl-c">#</span> ] add CairoMakie</span>
<span class="pl-k">using</span> CairoMakie

<span class="pl-c1">lines</span>(model[<span class="pl-c1">:degree_days_cu</span>], model[<span class="pl-c1">:LAI</span>], color<span class="pl-k">=</span><span class="pl-c1">:green</span>, axis<span class="pl-k">=</span>(ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>LAI (m² m⁻²)<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Cumulated growing degree days since sowing (°C)<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/LAI_growth.png"><img src="examples/LAI_growth.png" alt="LAI Growth" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-model-coupling" class="anchor" aria-hidden="true" href="#model-coupling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model coupling</h3>
<p dir="auto">Model coupling is done automatically by the package, and is based on the dependency graph between the models. To couple models, we just have to add them to the <code>ModelList</code>. For example, let's couple the <code>ToyLAIModel</code> with a model for light interception based on Beer's law:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ] add PlantSimEngine, DataFrames, CSV
using PlantSimEngine, PlantMeteo, DataFrames, CSV

# Include the model definition from the examples folder:
include(joinpath(pkgdir(PlantSimEngine), &quot;examples/ToyLAIModel.jl&quot;))
include(joinpath(pkgdir(PlantSimEngine), &quot;examples/Beer.jl&quot;))

# Import the example meteorological data:
meteo_day = CSV.read(joinpath(pkgdir(PlantSimEngine), &quot;examples/meteo_day.csv&quot;), DataFrame, header=18)

# Define the list of models for coupling:
model = ModelList(
    ToyLAIModel(),
    Beer(0.6),
    status=(degree_days_cu=cumsum(meteo_day[:, :degree_days]),),  # Pass the cumulated degree-days as input to `ToyLAIModel`, this could also be done using another model
)"><pre><span class="pl-c"><span class="pl-c">#</span> ] add PlantSimEngine, DataFrames, CSV</span>
<span class="pl-k">using</span> PlantSimEngine, PlantMeteo, DataFrames, CSV

<span class="pl-c"><span class="pl-c">#</span> Include the model definition from the examples folder:</span>
<span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(PlantSimEngine), <span class="pl-s"><span class="pl-pds">"</span>examples/ToyLAIModel.jl<span class="pl-pds">"</span></span>))
<span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(PlantSimEngine), <span class="pl-s"><span class="pl-pds">"</span>examples/Beer.jl<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Import the example meteorological data:</span>
meteo_day <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(PlantSimEngine), <span class="pl-s"><span class="pl-pds">"</span>examples/meteo_day.csv<span class="pl-pds">"</span></span>), DataFrame, header<span class="pl-k">=</span><span class="pl-c1">18</span>)

<span class="pl-c"><span class="pl-c">#</span> Define the list of models for coupling:</span>
model <span class="pl-k">=</span> <span class="pl-c1">ModelList</span>(
    <span class="pl-c1">ToyLAIModel</span>(),
    <span class="pl-c1">Beer</span>(<span class="pl-c1">0.6</span>),
    status<span class="pl-k">=</span>(degree_days_cu<span class="pl-k">=</span><span class="pl-c1">cumsum</span>(meteo_day[:, <span class="pl-c1">:degree_days</span>]),),  <span class="pl-c"><span class="pl-c">#</span> Pass the cumulated degree-days as input to `ToyLAIModel`, this could also be done using another model</span>
)</pre></div>
<p dir="auto">The <code>ModelList</code> couples the models by automatically computing the dependency graph of the models. The resulting dependency graph is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="╭──── Dependency graph ──────────────────────────────────────────╮
│  ╭──── LAI_Dynamic ─────────────────────────────────────────╮  │
│  │  ╭──── Main model ────────╮                              │  │
│  │  │  Process: LAI_Dynamic  │                              │  │
│  │  │  Model: ToyLAIModel    │                              │  │
│  │  │  Dep: nothing          │                              │  │
│  │  ╰────────────────────────╯                              │  │
│  │                  │  ╭──── Soft-coupled model ─────────╮  │  │
│  │                  │  │  Process: light_interception    │  │  │
│  │                  └──│  Model: Beer                    │  │  │
│  │                     │  Dep: (LAI_Dynamic = (:LAI,),)  │  │  │
│  │                     ╰─────────────────────────────────╯  │  │
│  ╰──────────────────────────────────────────────────────────╯  │
╰────────────────────────────────────────────────────────────────╯"><pre class="notranslate"><code>╭──── Dependency graph ──────────────────────────────────────────╮
│  ╭──── LAI_Dynamic ─────────────────────────────────────────╮  │
│  │  ╭──── Main model ────────╮                              │  │
│  │  │  Process: LAI_Dynamic  │                              │  │
│  │  │  Model: ToyLAIModel    │                              │  │
│  │  │  Dep: nothing          │                              │  │
│  │  ╰────────────────────────╯                              │  │
│  │                  │  ╭──── Soft-coupled model ─────────╮  │  │
│  │                  │  │  Process: light_interception    │  │  │
│  │                  └──│  Model: Beer                    │  │  │
│  │                     │  Dep: (LAI_Dynamic = (:LAI,),)  │  │  │
│  │                     ╰─────────────────────────────────╯  │  │
│  ╰──────────────────────────────────────────────────────────╯  │
╰────────────────────────────────────────────────────────────────╯
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Run the simulation:
run!(model, meteo_day)

status(model)"><pre><span class="pl-c"><span class="pl-c">#</span> Run the simulation:</span>
<span class="pl-c1">run!</span>(model, meteo_day)

<span class="pl-c1">status</span>(model)</pre></div>
<p dir="auto">Which returns:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="TimeStepTable{Status{(:degree_days_cu, :LAI...}(365 x 3):
╭─────┬────────────────┬────────────┬───────────╮
│ Row │ degree_days_cu │        LAI │     aPPFD │
│     │        Float64 │    Float64 │   Float64 │
├─────┼────────────────┼────────────┼───────────┤
│   1 │            0.0 │ 0.00554988 │ 0.0476221 │
│   2 │            0.0 │ 0.00554988 │ 0.0260688 │
│   3 │            0.0 │ 0.00554988 │ 0.0377774 │
│   4 │            0.0 │ 0.00554988 │ 0.0468871 │
│   5 │            0.0 │ 0.00554988 │ 0.0545266 │
│  ⋮  │       ⋮        │     ⋮      │     ⋮     │
╰─────┴────────────────┴────────────┴───────────╯
                                 360 rows omitted"><pre class="notranslate"><code>TimeStepTable{Status{(:degree_days_cu, :LAI...}(365 x 3):
╭─────┬────────────────┬────────────┬───────────╮
│ Row │ degree_days_cu │        LAI │     aPPFD │
│     │        Float64 │    Float64 │   Float64 │
├─────┼────────────────┼────────────┼───────────┤
│   1 │            0.0 │ 0.00554988 │ 0.0476221 │
│   2 │            0.0 │ 0.00554988 │ 0.0260688 │
│   3 │            0.0 │ 0.00554988 │ 0.0377774 │
│   4 │            0.0 │ 0.00554988 │ 0.0468871 │
│   5 │            0.0 │ 0.00554988 │ 0.0545266 │
│  ⋮  │       ⋮        │     ⋮      │     ⋮     │
╰─────┴────────────────┴────────────┴───────────╯
                                 360 rows omitted
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Plot the results:
using CairoMakie

fig = Figure(resolution=(800, 600))
ax = Axis(fig[1, 1], ylabel=&quot;LAI (m² m⁻²)&quot;)
lines!(ax, model[:degree_days_cu], model[:LAI], color=:mediumseagreen)

ax2 = Axis(fig[2, 1], xlabel=&quot;Cumulated growing degree days since sowing (°C)&quot;, ylabel=&quot;aPPFD (mol m⁻² d⁻¹)&quot;)
lines!(ax2, model[:degree_days_cu], model[:aPPFD], color=:firebrick1)

fig"><pre><span class="pl-c"><span class="pl-c">#</span> Plot the results:</span>
<span class="pl-k">using</span> CairoMakie

fig <span class="pl-k">=</span> <span class="pl-c1">Figure</span>(resolution<span class="pl-k">=</span>(<span class="pl-c1">800</span>, <span class="pl-c1">600</span>))
ax <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>LAI (m² m⁻²)<span class="pl-pds">"</span></span>)
<span class="pl-c1">lines!</span>(ax, model[<span class="pl-c1">:degree_days_cu</span>], model[<span class="pl-c1">:LAI</span>], color<span class="pl-k">=</span><span class="pl-c1">:mediumseagreen</span>)

ax2 <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(fig[<span class="pl-c1">2</span>, <span class="pl-c1">1</span>], xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Cumulated growing degree days since sowing (°C)<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>aPPFD (mol m⁻² d⁻¹)<span class="pl-pds">"</span></span>)
<span class="pl-c1">lines!</span>(ax2, model[<span class="pl-c1">:degree_days_cu</span>], model[<span class="pl-c1">:aPPFD</span>], color<span class="pl-k">=</span><span class="pl-c1">:firebrick1</span>)

fig</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/LAI_growth2.png"><img src="examples/LAI_growth2.png" alt="LAI Growth and light interception" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-projects-that-use-plantsimengine" class="anchor" aria-hidden="true" href="#projects-that-use-plantsimengine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Projects that use PlantSimEngine</h2>
<p dir="auto">Take a look at these projects that use PlantSimEngine:</p>
<ul dir="auto">
<li><a href="https://github.com/VEZY/PlantBiophysics.jl">PlantBiophysics.jl</a></li>
<li><a href="https://github.com/PalmStudio/XPalm.jl">XPalm</a></li>
</ul>
<h2 dir="auto"><a id="user-content-make-it-yours" class="anchor" aria-hidden="true" href="#make-it-yours"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Make it yours</h2>
<p dir="auto">The package is developed so anyone can easily implement plant/crop models, use it freely and as you want thanks to its MIT license.</p>
<p dir="auto">If you develop such tools and it is not on the list yet, please make a PR or contact me so we can add it! <g-emoji class="g-emoji" alias="smiley" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png">😃</g-emoji> Make sure to read the community guidelines before in case you're not familiar with such things.</p>
<h2 dir="auto"><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TO DO</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Look into locks for parallel computations over "independent" processes that can maybe call a model when both parents are being computed, so both are set to 0 and the model is never called</li>
</ul>
</article></div>